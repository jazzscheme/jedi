;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; The Jedi Application
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jedi.application.Jedi-Application jazz


(import (jazz.action)
        (jazz.application)
        (jazz.catalog)
        (jazz.component)
        (jazz.console)
        (jazz.debugger)
        (jazz.designer)
        (jazz.designer.ui)
        (jazz.designer.ui.view)
        (jazz.doc)
        (jazz.editor)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.favorite)
        (jazz.ide)
        (jazz.io)
        (jazz.markup)
        (jazz.opengl)
        (jazz.opengl.window)
        (jazz.platform)
        (jazz.preferences)
        (jazz.presence)
        (jazz.process)
        (jazz.project)
        (jazz.reference)
        (jazz.resource)
        (jazz.screen)
        (jazz.search)
        (jazz.settings)
        (jazz.skin)
        (jazz.text)
        (jazz.ui)
        (jazz.version)
        (jazz.view)
        (jazz.window (cond (not mac)))
        (jazz.workspace)
        (jedi)
        (jedi.validate)
        (world.debuggee.stub))


(cond-expand
  (windows
    (definition (show-taskbar flag)
      (let ((taskbar (FindWindow "Shell_TrayWnd" #f))
            (start (FindWindow "Button" #f)))
        (when taskbar
          (ShowWindow taskbar (if flag SW_SHOW SW_HIDE))
          (UpdateWindow taskbar))
        (when start
          (ShowWindow start (if flag SW_SHOW SW_HIDE))
          (UpdateWindow start)))))
  (else
    (definition (show-taskbar flag)
      )))


(cond-expand
  (cocoa
    (definition (platform-tile-jedi/world debuggee mode)
      (let ((handle (get-handle (current-toplevel))))
        (let ((rect (get-frame-rect (main-screen))))
          (let ((left (get-left rect))
                (top (get-top rect))
                (right (get-right rect))
                (bottom (get-bottom rect)))
            (let ((width (- right left)))
              (let ((area-width (case mode
                                  ((live) (fxround (percent width 45.5)))
                                  ((design) (- width 300))))
                    (area-height (- bottom top)))
                (with-NSRect (new Rect area-width 0 width bottom)
                  (lambda (rect)
                    (platformEnterWindowed handle rect #f)))
                (receive (server clients) (collect-world-debuggees)
                  ;; hack around mac screens going bottom up
                  (let ((debuggees (reverse (append clients (if server (list server) '())))))
                    (tile-debuggees area-width area-height debuggees))))))))))
  (windows
    (definition (platform-tile-jedi/world debuggee mode)
      (let ((handle (get-handle (current-toplevel))))
        (set-style handle (bitwise-ior WS_CLIPSIBLINGS
                                       WS_CLIPCHILDREN
                                       WS_POPUP))
        (let ((area (get-display-area (primary-monitor))))
          (let ((left (get-left area))
                (top (get-top area))
                (right (get-right area))
                (bottom (get-bottom area)))
            (let ((width (- right left)))
              (let ((area-width (case mode
                                  ((live) (fxround (percent width 45.5)))
                                  ((design) (- width 300))))
                    (area-height (- bottom top)))
                (SetWindowPos handle HWND_TOP
                  area-width
                  0
                  (- width area-width)
                  area-height
                  (bitwise-ior SWP_NOOWNERZORDER SWP_FRAMECHANGED))
                (show-window handle)
                (receive (server clients) (collect-world-debuggees)
                  (let ((debuggees (append clients (if server (list server) '()))))
                    (tile-debuggees area-width area-height debuggees))))))))))
  (else
    (definition (platform-tile-jedi/world debuggee mode)
      )))


(definition (tile-debuggees area-width area-height debuggees)
  (let ((count (length debuggees))
        (max-vertical 5)
        (rank 0))
    (let ((horizontal (+ (quotient (- count 1) max-vertical) 1))
          (vertical (min max-vertical count)))
      (let ((width (fxround (exact->inexact (/ area-width horizontal))))
            (height (fxround (exact->inexact (/ area-height vertical)))))
        (for-each (lambda (debuggee)
                    (let ((horz (quotient rank max-vertical))
                          (vert (modulo rank max-vertical)))
                      (let ((left (* width horz))
                            (top (* height vert)))
                        (let ((right (+ left width))
                              (bottom (+ top height)))
                          (let ((rect (new Rect left top right bottom)))
                            (position-world debuggee rect)))))
                    (increase! rank))
                  debuggees)))))


(cond-expand
  (cocoa
    (definition (platform-restore-jedi/world debuggee)
      (let ((handle (get-handle (current-toplevel))))
        (platformExitWindowed handle))))
  (windows
    (definition (platform-restore-jedi/world debuggee)
      (let ((handle (get-handle (current-toplevel))))
        (set-style handle
                   (bitwise-ior WS_CLIPSIBLINGS
                                WS_CLIPCHILDREN
                                WS_POPUP
                                WS_OVERLAPPEDWINDOW
                                WS_MINIMIZEBOX
                                WS_SYSMENU)))))
  (else
    (definition (platform-restore-jedi/world debuggee)
      )))


(class Jedi-Application extends IDE
  
  
  (slot documentation-cataloguer initialize #f)
  (slot current-state            initialize 'restored)
  (slot previous-placement       initialize #f)
  (slot previous-workspace       initialize #f)
  
  
  (method meta override (external-name self . rest)
    'jedi)

  
  (method override (process-name self)
    "Jedi")
  
  
  (method override (process-owner self)
    "JazzScheme")
  
  
  (method override (process-copyright self)
    "2012")
  
  
  (method override (process-icon self)
    "Designer")


  (method override (process-version self)
    {Version 1 0 0})


  (method override (process-email self)
    "gcartier@jazzscheme.org")


  (method override (new-toplevel self)
    (new Jedi-Toplevel))
  
  
  (method override (finish-process self)
    (define (setup-documents)
      (set-document-kinds
        '(<kinds>
           (<kind>     name: "Jazz"      kind: jazz   template: "jazz/New.jazz"
             (<kind>   name: "Module"    kind: jazz   template: "jazz/NewModule.jazz"
               (<kind> name: "Class"     kind: jazz   template: "jazz/NewClass.jazz")
               (<kind> name: "Interface" kind: jazz   template: "jazz/NewInterface.jazz"))
             (<kind>   name: "Script"    kind: jazz   template: "jazz/NewScript.jazz"))
           (<kind>     name: "Scheme"    kind: scheme template: "scheme/New.scm"))))
    
    (nextmethod self)
    (setup-documents)
    (setup-workspaces self))
  
  
  ;;;
  ;;;; Catalogs
  ;;;
  
  
  (method (setup-catalog self name directory extensions (char-encoding: char-encoding #f) (heuristics: heuristics #f))
    (let ((cataloguer (get-cataloguer))
          (output (new-file {Directory Profile "catalogs"} (format "{a}.jcat" name))))
      (let ((catalog (new Filing-Catalog name output directory extensions char-encoding heuristics #t)))
        (add-catalog cataloguer catalog)
        (load-content catalog report?: #f))))

  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method override (persist-preferences? self)
    #t)
  
  
  (method override (default-preferences self)
    (new Default-Jedi-Preferences))
  
  
  (method override (default-bindings self)
    (new Default-Jedi-Bindings))
  
  
  (method override (default-workspaces self)
    (new Default-Jedi-Workspaces))
  
  
  ;;;
  ;;;; Settings
  ;;;
  
  
  (define settings-updates
    (list->updates
      '((version: 100000 targets: settings))))


  (define (convert-settings dir old)
    (define (convert-initial)
      100000)

    (case old
      ((#f) (convert-initial))
      (else #f)))


  (method override (settings-version self)
    (get-update-version (car settings-updates)))

  
  (method override (initialize-settings self)
    (define (determine-settings)
      (or (command-argument "settings")
          (let ((dot-dir {Directory Home ".jedi"}))
            (create-directories dot-dir)
            (versioned-directory (parse dot-dir) 'settings settings-updates convert-settings feedback?: #f))))
    
    (let ((settings-path (tokenise-filename (determine-settings))))
      (register-alias 'Settings settings-path override?: #t)
      (let ((file {File Settings ".settings"}))
        (unless (exists? file)
          (create file))
        (set! settings (new File-Settings file: file))
        (register-settings settings)))
    (register-resources-alias 'Jedi)
    (register-alias 'Project
                    (list (if (is-alias? 'Jedi)
                              'Jedi
                            'Resources)))
    (let ((projects-dir {Directory Settings "projects"}))
      (create-directories projects-dir)
      (let ((projects-repository (make-repository 'Projects "lib" (parse projects-dir) dynamic?: #t)))
        (register-repository-aliases (install-repository projects-repository)))))

  
  ;;;
  ;;;; Templates
  ;;;
  
  
  (method override (templates-directory self)
    {Directory Project "lib" "jedi" "templates"})
  

  ;;;
  ;;;; Profile
  ;;;
  
  
  (method override (install-profiles self)
    (let ((profiles-dir {Directory Settings "profiles"}))
      (create-directories profiles-dir)
      (let ((profiles-repository (make-repository 'Profiles "lib" (parse profiles-dir) dynamic?: #t)))
        (register-repository-aliases (install-repository profiles-repository)))))
  
  
  ;;;
  ;;;; Frames
  ;;;


  (method override (default-frame-class self)
    Jazz-Text-View)


  (method override (known-extension-frame-class self ext)
    (cond ((member? ext '("txt" "text") test: extension=?) Jazz-Plain-Text-View)
          ((member? ext '("admin" "assets" "model" "role" "options" "metadata") test: extension=?) Jazz-Text-View)
          ((member? ext '("client" "server" "instance") test: extension=?) Jazz-Text-View)
          ((member? ext '("world") test: extension=?) Jazz-Text-View)
          ((member? ext '("zone") test: extension=?) Jazz-Text-View)
          ((member? ext '("identity") test: extension=?) Jazz-Text-View)
          ((member? ext '("machine") test: extension=?) Jazz-Text-View)
          ((member? ext '("character") test: extension=?) Jazz-Text-View)
          ((member? ext '("player") test: extension=?) Jazz-Text-View)
          ((member? ext '("generator") test: extension=?) Jazz-Text-View)
          ((member? ext '("w3ds") test: extension=?) Jazz-Text-View)
          (else (nextmethod self ext))))


  ;;;
  ;;;; Files
  ;;;
  
  
  (method override (edit-file self file . rest)
    (let ((ext (get-extension file)))
      (cond
      @wait ((extension=? ext "class") (browse-java-classfile file))
      @wait ((extension=? ext "jar") (browse-java-jarfile file))
            (else (apply nextmethod self file rest)))))
  
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method override (get-text-class self)
    Jazz-Text-View)
  
  
  ;;;
  ;;;; Validate
  ;;;
  
  
  (method override (validate-process self)
    (thread-sleep! .5)
    (validate-jedi))
  
  
  ;;;
  ;;;; Java
  ;;;
  
  
  @convert/wait
  (method (browse-java-classfile self file)
    (let* ((host (new-frame Java-Manager))
           (manager (get-guest host)))
      (browse-classfile manager file)))
  
  
  @convert/wait
  (method (browse-java-jarfile self file)
    (let* ((host (new-frame Java-Manager))
           (manager (get-guest host)))
      (browse-jarfile manager file)))

  
  ;;;
  ;;;; Depot
  ;;;
  
  
  @convert/wait
  (method (get-depot-classes self)
    (list
      VSS-Depot))
  
  
  ;;;
  ;;;; Persistence
  ;;;
  
  
  (method override (persist-usernames? self)
    #t)
  
  
  (method override (persist-passwords? self)
    #t)

  
  ;;;
  ;;;; Documentation
  ;;;
  
  
  (method override (get-documentation-cataloguer self)
    (define (new-documentation-cataloguer)
      (let ((cataloguer (new Cataloguer))
            (workbench (get-workbench)))
        (for-each-project workbench
          (lambda (project)
            (let ((file (get-documentation project)))
              (when file
                (let ((form (safe-read-form file)))
                  (unless (exception? form)
                    (let* ((doc (instantiate form))
                           (name (get-name doc))
                           (catalog (new Doc-Catalog name doc project)))
                      (add-catalog cataloguer catalog))))))))
        cataloguer))
    
    (unless documentation-cataloguer
      (when (get-documented? (current-preferences #f))
        (set! documentation-cataloguer (new-documentation-cataloguer))))
    documentation-cataloguer)
  
  
  (method public (reload-documentation self)
    (set! documentation-cataloguer #f)
    (get-documentation-cataloguer self))
  
  
  ;;;
  ;;;; Nicknames
  ;;;
  
  
  (method override (search-manager-class self)
    Jedi-Search)

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (global-actions self)
    (cons (find-actions 'search) (nextmethod self)))
  
  
  (method override (class-actions self)
    (cons (find-actions 'jedi)
          (nextmethod self))
    @wait
    (cons (find-actions 'debugger)
          (cons (find-actions 'jedi)
                (nextmethod self))))
  
  
  (method override (update-focus-actions self)
    (nextmethod self)
    (let ((focus (active-focus)))
      (let ((text? (and focus (is? focus Text-View)))
            (code? (and focus (is? focus Code-Text-View)))
            (lisp? (and focus (is? focus Lisp-Text-View)))
            (jazz? (and focus (is? focus Jazz-Text-View)))
            (console? (and focus (is? focus Console-Text-View))))
        (when preferences-designer
          (set-action-enabled? {Action code-text evaluate} (and code? (not console?)))
          (set-action-enabled? {Action code-text evaluate-buffer} (and code? (not console?)))
          (set-action-enabled? {Action code-text edit-definition} code?)
          (set-action-enabled? {Action code-text edit-definitions} code?)
          (set-action-enabled? {Action code-text edit-references} code?)
          (set-action-enabled? {Action code-text recolorize-syntax} (and code? (not console?)))
          (set-action-enabled? {Action text search-forward-mode} text?)
          (set-action-enabled? {Action text search-backward-mode} text?)
          (set-action-enabled? {Action text search-current} text?)
          (set-action-enabled? {Action text goto-line} text?)
          (set-action-enabled? {Action text select-outer} text?)
          (set-action-enabled? {Action code-text transpose-expr} code?)
          (set-action-enabled? {Action lisp-text tabulate} lisp?)
          (set-action-enabled? {Action lisp-text highlight-declaration} lisp?)
          (set-action-enabled? {Action lisp-text highlight-selection} lisp?)
          (set-action-enabled? {Action lisp-text remove-highlights} lisp?)
          (set-action-enabled? {Action code-text find-imports} (or jazz? console?))
          (set-action-enabled? {Action code-text find-all-imports} (or jazz? console?))
          (set-action-enabled? {Action text mark-column} text?)
          (set-action-enabled? {Action text fill-to-column} text?)
          (set-action-enabled? {Action text upcase} text?)
          (set-action-enabled? {Action text downcase} text?)
          (set-action-enabled? {Action text capitalize} text?)))))
  
  
  (method override (allow-orphaned-action? self action-item)
    #t)


  ;;;
  ;;;; Windows
  ;;;
  
  
  (method override (update-windowing-actions self)
    (nextmethod self)
    (unless (unloading-process?)
      (update-project-actions self)
      (update-actions-for '(window))))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-live-jedi/world self evt)
    (live-jedi/world self))
  
  
  (method (on-design-jedi/world self evt)
    (design-jedi/world self))
  
  
  (method (on-restore-jedi/world self evt)
    (restore-jedi/world self))
  
  
  (method (on-event-spy self evt)
    @convert/wait
    (new-palette Event-Spy))
  
  
  (method (on-registry-viewer self evt)
    @convert/wait
    (new-frame Registry-Viewer))
  
  
  (method (on-type-viewer self evt)
    @convert/wait
    (new-frame Type-Viewer))
  
  
  (method (on-java-manager self evt)
    @convert/wait
    (new-frame Java-Manager))
  
  
  (method (on-profiler-manager self evt)
    @convert/wait
    (show-palette Profiler-Manager))
  
  
  (method (on-documentation-editor self evt)
    (let* ((cataloguer (get-documentation-cataloguer self))
           (catalog (car (get-catalogs cataloguer))))
      (new-frame Doc-Editor client: (get-client catalog))))
  
  
  (method (on-run-smoker self evt)
    @convert/wait
    (build/run (new Smoker-Builder)))


  (method package (on-spy-events self evt)
    @convert/wait
    (show-palette Event-Spy))


  ;;;
  ;;;; World
  ;;;
  
  
  (method (show-properties self debuggee class properties)
    (let ((host (find-singleton-docked 'Live-Properties)))
      (when host
        (let ((text (get-text (get-guest host))))
          (show-properties text debuggee class properties)))))
  
  
  (method (live-jedi/world self (debuggee #f))
    (tile-jedi/world self debuggee 'live))
  
  
  (method (design-jedi/world self (debuggee #f))
    (tile-jedi/world self debuggee 'design))
  
  
  (cond-expand
    (cocoa
      (method (tile-jedi/world self debuggee mode)
        (when (eq? current-state 'restored)
          (let ((toplevel (current-toplevel)))
            (set! previous-workspace (get-name (selected-workspace)))))
        (change-scrollbar-style #t)
        (case mode
          ((live)
           (select-named-workspace 'live)
           (full-screen (current-application) #t))
          ((design)
           (select-named-workspace 'design)
           (full-screen-host (current-application) (find-singleton-docked 'Live-Properties) #t)))
        (platform-tile-jedi/world debuggee mode)
        (set! current-state 'tiled)))
    (else
      (method (tile-jedi/world self debuggee mode)
        (when (eq? current-state 'restored)
          (let ((toplevel (current-toplevel)))
            (set! previous-placement (get-placement toplevel))
            (set! previous-workspace (get-name (selected-workspace)))))
        (show-taskbar #f)
        (change-scrollbar-style #t)
        (case mode
          ((live)
           (select-named-workspace 'live)
           (full-screen (current-application) #t))
          ((design)
           (select-named-workspace 'design)
           (full-screen-host (current-application) (find-singleton-docked 'Live-Properties) #t)))
        (platform-tile-jedi/world debuggee mode)
        (set! current-state 'tiled))))
  
  
  (cond-expand
    (cocoa
      (method (restore-jedi/world self (debuggee #f))
        (change-scrollbar-style #f)
        (select-named-workspace (or previous-workspace 'text))
        (full-screen (current-application) #f)
        (platform-restore-jedi/world debuggee)
        (receive (server clients) (collect-world-debuggees)
          (let ((debuggees (append clients (if server (list server) '()))))
            (for-each (lambda (debuggee)
                        (restore-world debuggee))
                      debuggees)))
        (set! previous-workspace #f)
        (set! current-state 'restored)))
    (else
      (method (restore-jedi/world self (debuggee #f))
        (show-taskbar #t)
        (change-scrollbar-style #f)
        (select-named-workspace (or previous-workspace 'text))
        (full-screen (current-application) #f)
        (platform-restore-jedi/world debuggee)
        (if previous-placement
            (set-placement (current-toplevel) previous-placement)
          (show-window (current-toplevel)))
        (receive (server clients) (collect-world-debuggees)
          (let ((debuggees (append clients (if server (list server) '()))))
            (for-each (lambda (debuggee)
                        (restore-world debuggee))
                      debuggees)))
        (set! previous-placement #f)
        (set! previous-workspace #f)
        (set! current-state 'restored))))
  
  
  (method (change-scrollbar-style self flat?)
    (set-flat? (find-skin 'ui:scrollbar) flat?))


  ;;;
  ;;;; Help
  ;;;
  
  
  (method package (on-readme self evt)
    (edit-document {File Project "README"})))


;;;
;;;; Default-Jedi-Preferences
;;;


(class Default-Jedi-Preferences extends Jedi-Preferences)


;;;
;;;; Default-Jedi-Bindings
;;;


(class Default-Jedi-Bindings extends Jedi-Bindings)


;;;
;;;; Default-Jedi-Workspaces
;;;


(class Default-Jedi-Workspaces extends Workspaces-Preferences
  
  
  (form
    (<install>                                                   active: home
      (<Workspace-Preferences>                  name: home       title: "Home" icon: {Image-Resource "WorkspaceHome"} shortcut: {Shortcut :shift :alt #\A}
        (<Menubar-Preferences>                  name: menubar    location: root
          (<Mainbar-Preferences>                name: toolbar    location: second
            (<Status-Preferences>               name: status     location: second
              (<Splitter-Preferences>           name: top        location: first orientation: horz mode: relative division: 20 insets: {Rect 5 5 5 5}
                (<Minibuffer-Preferences>                        location: second state: split
                  (<Splitter-Preferences>                        location: first orientation: vert mode: relative division: -27
                    (<Stage-Preferences>                         location: first maximized?: #f)
                    (<Pad-Preferences>                           location: second
                      (<Docked-Preferences>                      location: selection model: {Class-Reference Lisp-Console-Manager})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Properties-Manager})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Search-Results})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Profile-Results})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Tracking-Results})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Servers-Manager}))))
                (<Pad-Preferences>                               location: first
                  (<Docked-Preferences>                          location: selection model: {Class-Reference Workbench-Manager})
                  (<Docked-Preferences>                          location: #f model: {Class-Reference Repositories-Manager})
                  (<Docked-Preferences>                          location: #f model: {Class-Reference Favorites-Manager})))))))
      (<Workspace-Preferences>                  name: text       title: "Text" icon: {Image-Resource "WorkspaceText"} shortcut: {Shortcut :shift :alt #\S} frame-model: {Class-Reference Jazz-Text-View}
        (<Menubar-Preferences>                  name: menubar    location: root
          (<Mainbar-Preferences>                name: toolbar    location: second
            (<Status-Preferences>               name: status     location: second
              (<Splitter-Preferences>           name: top        location: first orientation: horz mode: relative division: 33 insets: {Rect 5 5 5 5}
                (<Stage-Preferences>                             location: second maximized?: #t)
                (<Minibuffer-Preferences>                        location: first state: split
                  (<Splitter-Preferences>                        location: first orientation: vert mode: relative division: -27
                    (<Pad-Preferences>                           location: second
                      (<Docked-Preferences>                      location: selection model: {Class-Reference Lisp-Console-Manager})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Properties-Manager})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Search-Results})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Profile-Results})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Tracking-Results}))
                    (<Splitter-Preferences>                      location: first mode: relative division: 48 orientation: horz
                      (<Pad-Preferences>                         location: second
                        (<Docked-Preferences>                    location: selection model: {Class-Reference Chapters-Browser})
                        (<Docked-Preferences>                    location: #f model: {Class-Reference Hierarchy-Browser}))
                      (<Pad-Preferences>                         location: first
                        (<Docked-Preferences>                    location: selection model: {Class-Reference Workbench-Manager})
                        (<Docked-Preferences>                    location: #f model: {Class-Reference Repositories-Manager})
                        (<Docked-Preferences>                    location: #f model: {Class-Reference Favorites-Manager}))))))))))
      (<Workspace-Preferences>                  name: debugger   title: "Debugger" icon: {Image-Resource "WorkspaceDebugger"} shortcut: {Shortcut :shift :alt #\D}
        (<Menubar-Preferences>                  name: menubar    location: root
          (<Mainbar-Preferences>                name: toolbar    location: second
            (<Status-Preferences>               name: status     location: second
              (<Splitter-Preferences>           name: top        location: first orientation: vert mode: absolute division: 220 insets: {Rect 5 5 5 5}
                (<Splitter-Preferences>                          location: first orientation: horz mode: absolute division: 693
                  (<Splitter-Preferences>                        location: first orientation: horz mode: absolute division: 180
                    (<Docked-Preferences>                        location: first model: {Class-Reference Processes-View})
                    (<Splitter-Preferences>                      location: second orientation: horz mode: absolute division: 240
                      (<Docked-Preferences>                      location: first model: {Class-Reference Threads-View})
                      (<Pad-Preferences>                         location: second
                        (<Docked-Preferences>                    location: selection model: {Class-Reference Frames-View})
                        (<Docked-Preferences>                    location: #f model: {Class-Reference Restarts-View})
                        (<Docked-Preferences>                    location: #f model: {Class-Reference Exception-View}))))
                  (<Docked-Preferences>                          location: second model: {Class-Reference Variables-View}))
                (<Splitter-Preferences>                          location: second orientation: horz mode: relative division: 33
                  (<Splitter-Preferences>                        location: first mode: relative division: 48 orientation: horz
                    (<Pad-Preferences>                           location: first
                      (<Docked-Preferences>                      location: selection model: {Class-Reference Workbench-Manager})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Repositories-Manager})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Favorites-Manager}))
                    (<Pad-Preferences>                           location: second
                      (<Docked-Preferences>                      location: selection model: {Class-Reference Chapters-Browser})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Hierarchy-Browser})))
                  (<Minibuffer-Preferences>                      location: second state: split
                    (<Splitter-Preferences>                      location: first orientation: vert mode: relative division: -30
                      (<Stage-Preferences>                       location: first maximized?: #t)
                      (<Pad-Preferences>                         location: second
                        (<Docked-Preferences>                    location: selection model: {Class-Reference Lisp-Console-Manager})
                        (<Docked-Preferences>                    location: #f model: {Class-Reference Properties-Manager})
                        (<Docked-Preferences>                    location: #f model: {Class-Reference Search-Results})
                        (<Docked-Preferences>                    location: #f model: {Class-Reference Profile-Results})
                        (<Docked-Preferences>                    location: #f model: {Class-Reference Tracking-Results})
                        (<Docked-Preferences>                    location: #f model: {Class-Reference Servers-Manager}))))))))))
      (<Workspace-Preferences>                  name: groupware  title: "Groupware" icon: {Image-Resource "WorkspaceGroupware"} shortcut: {Shortcut :shift :alt #\G}
        (<Menubar-Preferences>                  name: menubar    location: root
          (<Mainbar-Preferences>                name: toolbar    location: second
            (<Status-Preferences>               name: status     location: second
              (<Splitter-Preferences>           name: top        location: first state: zoom target: second orientation: horz mode: relative division: 25 insets: {Rect 5 5 5 5}
                (<Minibuffer-Preferences>                        location: first state: split
                  (<Splitter-Preferences>                        location: first orientation: vert mode: relative division: -27
                    (<Pad-Preferences>                           location: first
                      (<Docked-Preferences>                      location: selection model: {Class-Reference Workbench-Manager})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Repositories-Manager})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Favorites-Manager}))
                    (<Pad-Preferences>                           location: second
                      (<Docked-Preferences>                      location: selection model: {Class-Reference Lisp-Console-Manager})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Properties-Manager})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Search-Results}))))
                (<Stage-Preferences>                             location: second))))))
      (<Workspace-Preferences>                  name: designer   title: "Designer" icon: {Image-Resource "Designer"} shortcut: {Shortcut :shift :alt #\X} frame-model: {Class-Reference View-Editor}
        (<Menubar-Preferences>                  name: menubar    location: root
          (<Mainbar-Preferences>                name: toolbar    location: second
            (<Status-Preferences>               name: status     location: second
              (<Splitter-Preferences>           name: top        location: first orientation: horz mode: relative division: 18 insets: {Rect 5 5 5 5}
                (<Splitter-Preferences>                          location: first orientation: vert mode: relative division: 52
                  (<Splitter-Preferences>                        location: first orientation: vert mode: relative division: 65
                    (<Docked-Preferences>                        location: first model: {Class-Reference Toolbox-Manager})
                    (<Docked-Preferences>                        location: second model: {Class-Reference Traits-Editor}))
                  (<Docked-Preferences>                          location: second model: {Class-Reference Descendants-Manager}))
                (<Splitter-Preferences>                          location: second orientation: horz mode: absolute division: -300
                  (<Splitter-Preferences>                        location: first orientation: vert mode: absolute division: 58
                    (<Splitter-Preferences>                      location: first orientation: horz mode: absolute division: 146
                      (<Docked-Preferences>                      location: first model: {Class-Reference Designer-Manager})
                      (<Docked-Preferences>                      location: second model: {Class-Reference Alignment-Editor}))
                    (<Stage-Preferences>                         location: second))
                  (<Minibuffer-Preferences>                      location: second state: split
                    (<Splitter-Preferences>                      location: first orientation: vert mode: relative division: -27
                      (<Docked-Preferences>                      location: first model: {Class-Reference Properties-Manager})
                      (<Docked-Preferences>                      location: second model: {Class-Reference Lisp-Console-Manager})))))))))
      (<Workspace-Preferences>                  name: formatted  title: "Formatted" icon: {Image-Resource "ForegroundColor"} shortcut: {Shortcut :shift :alt #\T} frame-model: {Class-Reference Plain-Formatted-Text-View}
        (<Menubar-Preferences>                  name: menubar    location: root
          (<Mainbar-Preferences>                name: toolbar    location: second
            (<Status-Preferences>               name: status     location: second
              (<Splitter-Preferences>           name: top        location: first orientation: horz mode: relative division: 36 insets: {Rect 5 5 5 5}
                (<Minibuffer-Preferences>                        location: first state: split
                  (<Splitter-Preferences>                        location: first orientation: vert mode: relative division: -27
                    (<Pad-Preferences>                           location: second
                      (<Docked-Preferences>                      location: selection model: {Class-Reference Lisp-Console-Manager})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Properties-Manager})
                      (<Docked-Preferences>                      location: #f model: {Class-Reference Search-Results}))
                    (<Splitter-Preferences>                      mode: relative division: 46 location: first orientation: horz
                      (<Splitter-Preferences>                    mode: relative division: 31 location: second orientation: vert location: second
                        (<Docked-Preferences>                    location: first model: {Class-Reference Chapters-Browser})
                        (<Docked-Preferences>                    location: second model: {Class-Reference Hierarchy-Browser}))
                      (<Pad-Preferences>                         location: first
                        (<Docked-Preferences>                    location: selection model: {Class-Reference Workbench-Manager})))))
                (<Splitter-Preferences>                          location: second mode: absolute division: 59 orientation: vert
                  (<Docked-Preferences>                          location: first model: {Class-Reference Text-Palette})
                  (<Stage-Preferences>                           location: second)))))))))))
