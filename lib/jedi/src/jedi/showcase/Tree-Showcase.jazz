;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Showcase
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jedi.showcase.Tree-Showcase jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jedi))


(class Tree-Showcase extends View


  (form
    (<install>                                                      size: {Dimension 940 466}
      (<Border-View>                   name: tree-border            position: {Point 3 6} size: {Dimension 319 457} border-type: edge
        (<Scroller-View>                                            vscroll?: #t
          (<!>                         name: content                layout-type: fill
            (<Tree-Header>
              (<!>                     name: content
                (<Tree-View>           name: tree                   filled-column: #f column-spacing: 0 row-spacing: 0 multiple-selection?: #t selection-mode: row portfolio: :images
                  (<Node-Column>                                    title: "Node" width: 130)
                  (<Middle-Column>                                  title: "Middle" width: 85)
                  (<Right-Column>                                   title: "Right" width: 100)))))))
      (<Check-Box>                     name: header?                title: "Header?" position: {Point 340 10} size: {Dimension 120 20} checked?: #t action-handler: {Event-Handler :form on-setting})
      (<Check-Box>                     name: column-spacing         title: "Column Separators?" position: {Point 340 30} size: {Dimension 120 20} checked?: #f action-handler: {Event-Handler :form on-setting})
      (<Check-Box>                     name: row-spacing            title: "Row Separators?" position: {Point 340 50} size: {Dimension 120 20} checked?: #f action-handler: {Event-Handler :form on-setting})
      (<Check-Box>                     name: toplevel-controls?     title: "Toplevel Controls?" position: {Point 340 110} size: {Dimension 120 20} checked?: #t action-handler: {Event-Handler :form on-setting})
      (<Check-Box>                     name: display-images?        title: "Display Images?" position: {Point 340 130} size: {Dimension 120 20} checked?: #t action-handler: {Event-Handler :form on-setting})
      (<Push-Button>                   name: add-row                title: "Add Row" position: {Point 340 175} size: {Dimension 160 24} action-handler: {Event-Handler :form on-add-row})
      (<Push-Button>                   name: remove-rows            title: "Remove Selected Rows" position: {Point 340 205} size: {Dimension 160 24} action-handler: {Event-Handler :form on-remove-rows})
      (<Push-Button>                   name: show/hide              title: "Show / Hide" position: {Point 340 235} size: {Dimension 160 24} action-handler: {Event-Handler :form on-show-hide})
      (<Push-Button>                   name: update-information     title: "Update Information" position: {Point 340 275} size: {Dimension 160 24} action-handler: {Event-Handler :form on-update-information})
      (<Label-View>                    name: visible-count          position: {Point 340 315} size: {Dimension 170 16})
      (<Label-View>                    name: visible-height         position: {Point 340 335} size: {Dimension 170 16})
      (<Label-View>                    name: first-displayed        position: {Point 340 355} size: {Dimension 170 16})
      (<Label-View>                    name: first-displayed-line   position: {Point 340 375} size: {Dimension 170 16})
      (<Label-View>                    name: first-displayed-offset position: {Point 340 395} size: {Dimension 170 16})
      (<Label-View>                    name: selection              position: {Point 340 415} size: {Dimension 170 16})
      (<Border-View>                   name: tree-info-border       position: {Point 518 6} size: {Dimension 419 457} border-type: edge
        (<Scroller-View>                                            vscroll?: #t
          (<!>                         name: content                layout-type: fill
            (<Tree-Header>
              (<!>                     name: content
                (<Tree-View>           name: tree-info              selection-mode: row portfolio: :images
                  (<Tree-Node-Column>                               title: "Title" width: 120)
                  (<Tree-Label-Column>                              title: "Level" width: 50)
                  (<Tree-Label-Column>                              title: "State" width: 80)
                  (<Tree-Label-Column>                              title: "Row" width: 50 justification: center)
                  (<Tree-Label-Column>                              title: "Previous" width: 50 justification: center)
                  (<Tree-Label-Column>                              title: "Next" width: 50 justification: center)
                  (<Tree-Label-Column>                              title: "Visible-Flag" width: 50 justification: center)))))))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-title)
    "Tree Showcase")
  
  
  (method meta override (host-position)
    {Point 39 60})
  
  
  (method meta override (host-size)
    {Dimension 940 466})
  
  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method override (install rest)
    (nextmethod rest)
    (setup-tree)
    (update-information))
  
  
  ;;;
  ;;;; Setup
  ;;;

  
  (method (setup-tree)
    (let ((tree (locate 'tree)))
      (add-row tree #f "Hello0" {Image-Resource "Document"} #f "There" "How do you do?")
      (add-row tree #f "Hello1" {Image-Resource "ClosedFolder"} {Image-Resource "OpenedFolder"} "There" "How do you do?")
      (let ((node (add-row tree #f "Hello2" {Image-Resource "ClosedFolder"} {Image-Resource "OpenedFolder"} "There" "How do you do?")))
        (for-each (lambda (n)
                    (let* ((title (format "Foo{a}" n))
                           (cell (format "How do you {a}?" title))
                           (node (add-row tree node title {Image-Resource "ClosedFolder"} {Image-Resource "OpenedFolder"} "There" cell)))
                      (when (= n 5)
                        (for-each (lambda (n)
                                    (let* ((title (format "Bar{a}" n))
                                           (cell (format "How do you {a}?" title)))
                                      (add-row tree node title {Image-Resource "ClosedFolder"} {Image-Resource "OpenedFolder"} "There" cell visible?: (/= n 3))))
                                  (naturals 0 5)))))
                  (naturals 0 10)))
      (add-row tree #f "Hello3" {Image-Resource "ClosedFolder"} {Image-Resource "OpenedFolder"} "There" "How do you do?")))
  
  
  (definition (add-row tree father title image image2 middle right (visible?: visible? #t))
    (add-row~ tree father: father @w row-height: @w (random-height) children: (list (new Tree-Node title: title image: image) (new Tree-Label title: middle) (new Tree-Label title: right)) visible?: visible?))
  
  
  (definition (random-height)
    (+ 10 (random 60)))


  ;;;
  ;;;; Actions
  ;;;
  

  (method override (guest-actions)
    (cons (find-actions 'tree-showcase)
          (nextmethod)))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'tree-border) 0 dv)
    (size-figure~ (locate 'tree-info-border) dh dv))
  
  
  (method (on-setting evt)
    (let ((sender (get-sender~ evt))
          (tree (locate 'tree)))
      (case (get-name~ sender)
        ((header?) (set-header?~ tree (get-checked?~ sender)))
        ((column-spacing) (set-column-spacing~ tree (if (get-checked?~ sender) 1 0)))
        ((row-spacing) (set-row-spacing~ tree (if (get-checked?~ sender) 1 0)))
        ((toplevel-controls?) (set-toplevel-controls?~ (get-node-column~ tree) (get-checked?~ sender)))
        ((display-images?) (set-display-images?~ (get-node-column~ tree) (get-checked?~ sender))))))
  
  
  (definition Unique-Id
    0)
  
  (definition Last-Added-Row
    #f)
  
  
  (method (on-add-row evt)
    (let* ((tree (locate 'tree))
           (sel (get-selection~ tree))
           (rows (if (null? sel) (list #f) (map (lambda (n) (get-row~ tree n)) sel)))
           (use-last-added? (get-shift?~ evt)))
      (for-each (lambda (row)
                  (let ((title (format "Added{a}" Unique-Id)))
                    (increase! Unique-Id)
                    (set! Last-Added-Row (add-row~ tree father: row state: 'collapsed row-height: (random-height) children: (list (new Tree-Node title: title image: {Image-Resource "Document"}) (new Tree-Label) (new Tree-Label))))))
                (if (and use-last-added? Last-Added-Row) (list Last-Added-Row) rows)))
    (update-information))
  
  
  (method (on-remove-rows evt)
    (let* ((tree (locate 'tree))
           (sel (get-selection~ tree))
           (rows (map (lambda (n) (get-row~ tree n)) sel)))
      (for-each (lambda (row)
                  (remove-row~ tree row))
                rows))
    (update-information))
  
  
  (method (on-show-hide evt)
    (let* ((tree (locate 'tree-info))
           (sel (get-selection~ tree))
           (rows (map (lambda (n) (get-row~ tree n)) sel)))
      (for-each (lambda (row)
                  (let* ((target (get-user-data~ row))
                         (visible? (get-visible-flag~ target)))
                    (set-visible?~ target (not visible?))))
                rows))
    (update-information))
    
  
  (method (on-update-information evt)
    (update-information))

  
  ;;;
  ;;;; Information
  ;;;
  
  
  (method (update-information)
    (update-fields)
    (display-tree))
  
  
  (method (update-fields)
    (let ((tree (locate 'tree)))
      (set-title~ (locate 'visible-count) (format "Visible Count: {a}" (get-visible-count~ tree)))
      (set-title~ (locate 'visible-height) (format "Visible Height: {a}" (get-visible-height~ tree)))
      (set-title~ (locate 'selection) (format "Selection: {l separator: \", \"}" (get-selection~ tree)))))
  
  
  (method (display-tree)
    (let ((tree (locate 'tree))
          (info (locate 'tree-info)))
      (define (iter row dest)
        (let ((subdest (add-row~ info father: dest state: 'expanded children: (display-row tree row) user-data: row)))
          (iterate (get-sons~ row)
                   (lambda (subrow)
                     (iter subrow subdest)))))
      
      (remove-every-row~ info)
      (with-update-locked~ info
        (lambda ()
          (iterate (get-sons~ (get-root-row~ tree))
                   (lambda (row)
                     (iter row #f)))))))
  
  
  (method (display-row tree row)
    (receive (level state previous next) (internal-fields~ row)
      (let* ((node (car (get-children~ row)))
             (rank (lambda (row) (and row (row->line tree row))))
             (visible? (get-visible?~ row))
             (color (if visible? {Color Dark-Red} {Color Dark-Blue}))
             (c0 (new Tree-Node title: (and node (get-title~ node)) image: (and node (get-image~ node))))
             (c1 (new Tree-Label title: level))
             (c2 (new Tree-Label title: state))
             (c3 (new Tree-Label title: (rank row) color: color))
             (c4 (new Tree-Label title: (rank previous) color: color))
             (c5 (new Tree-Label title: (rank next) color: color))
             (c6 (new Tree-Label title: (get-visible-flag~ row) color: color)))
        (list c0 c1 c2 c3 c4 c5 c6))))
  
  
  (definition (row->line tree row)
    (continuation-capture
      (lambda (return)
        (let ((rank -1))
          (define (iter subrow)
            (if (eq? subrow row)
                (continuation-return return rank)
              (increase! rank)
              (iterate (get-sons~ subrow) iter)))
          
          (iter (get-root-row~ tree))
          (error "Unable to locate row: {t}" row))))))


;;;
;;;; Node-Column
;;;


(class Node-Column extends Tree-Node-Column
  
  
  (method override (draw-data surface context row data width height)
    (nextmethod surface context row data width height)
    (let ((rect (text-rect row data width height #f))
          (selected? (getf context selected?:)))
      (fill-rect~ surface rect (if selected? {Color Red} {Color Dark-Red})))
    (draw-title surface context row data 0 0 width height)))


;;;
;;;; Middle-Column
;;;


(class Middle-Column extends Tree-Column
  
  
  (method override (draw-data surface context row data width height)
    (let ((rect (new Rect 0 0 width height))
          (selected? (getf context selected?:)))
      (fill-rect~ surface rect (if selected? {Color Blue} {Color Dark-Blue})))))


;;;
;;;; Right-Column
;;;


(class Right-Column extends Tree-Column
  
  
  (method override (draw-data surface context row data width height)
    (let ((rect (new Rect 0 0 width height))
          (selected? (getf context selected?:)))
      (fill-rect~ surface rect (if selected? {Color Green} {Color Dark-Green}))))))
