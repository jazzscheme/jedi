;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Showcase
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jedi.showcase.Showcase jazz


(import (jazz.editor.jazz)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jedi))


(class Showcase extends View

  
  (form
    (<install>                                                    size: {Dimension 900 600}
      (<Tab-View>                            name: tab            position: {Point 6 6} size: {Dimension 888 588}
        (<Tab-Sheet>                         name: views-sheet    title: "View"
          (<!>                               name: content
            (<Image-View>                    name: i              position: {Point 20 20} size: {Dimension 32 32} portfolio: :images resource: {Image-Resource "Jedi32"})
            (<Tab-View>                      name: t              title: "Tab" position: {Point 440 10} size: {Dimension 300 100}
              (<Tab-Sheet>                                        title: "Some")
              (<Tab-Sheet>                                        title: "Example")
              (<Tab-Sheet>                                        title: "Tabs"))
            (<Border-View>                   name: text-border    position: {Point 20 269} size: {Dimension 350 221} border-type: edge
              (<Scroller-View>                                    hscroll?: #t vscroll?: #t
                (<!>                         name: content
                  (<Jazz-Text-View>          name: jt))))
            (<Region-Showcase>               name: rs             position: {Point 440 350} size: {Dimension 200 140} background: {Color Green})
            (<DC-Showcase>                   name: dcs            position: {Point 660 350} size: {Dimension 100 100} background: {Color Blue})
            (<Border-View>                   name: tree-border    position: {Point 440 150} size: {Dimension 313 150} border-type: edge
              (<Scroller-View>                                    hscroll?: #t vscroll?: #t
                (<!>                         name: content        layout-type: fill
                  (<Tree-Header>
                    (<!>                     name: content
                      (<Tree-View>           name: tv             portfolio: :images selection-mode: row
                        (<Tree-Node-Column>                       title: "Node" width: 150)
                        (<Tree-Label-Column>                      title: "Name" width: 50)
                        (<Tree-Label-Column>                      title: "Location" width: 100)))))))
            (<Image-View>                    name: b1             position: {Point 10 100} size: {Dimension 16 16} resource: {Image-Resource "New"} portfolio: :images)
            (<Image-View>                    name: b2             position: {Point 30 100} size: {Dimension 16 16} resource: {Image-Resource "Open"} portfolio: :images)
            (<Image-View>                    name: b3             position: {Point 50 100} size: {Dimension 16 16} resource: {Image-Resource "Save"} portfolio: :images)
            (<Image-View>                    name: b4             position: {Point 70 100} size: {Dimension 16 16} resource: {Image-Resource "Cut"} portfolio: :images)
            (<Image-View>                    name: b5             position: {Point 90 100} size: {Dimension 16 16} resource: {Image-Resource "Copy"} portfolio: :images)
            (<Image-View>                    name: b6             position: {Point 110 100} size: {Dimension 16 16} resource: {Image-Resource "Paste"} portfolio: :images)
            (<Image-View>                    name: b7             position: {Point 130 100} size: {Dimension 16 16} resource: {Image-Resource "Undo"} portfolio: :images)
            (<Image-View>                    name: b8             position: {Point 150 100} size: {Dimension 16 16} resource: {Image-Resource "Redo"} portfolio: :images)
            (<Image-View>                    name: b9             position: {Point 170 100} size: {Dimension 16 16} resource: {Image-Resource "Help"} portfolio: :images)
            (<Label-View>                                         title: "Label-View" position: {Point 92 22})
            (<Border-View>                                        position: {Point 230 78} size: {Dimension 178 19} border-type: edge style: entry
              (<Combo-Box>                                        choices: ((() "Hello") (() "There") (() "Here") (() "Everywhere") (() "Everybody")) content: "Combo-Box"))
            (<Border-View>                                        position: {Point 230 101} size: {Dimension 178 19} border-type: edge style: entry
              (<Color-Combo>))
            (<Border-View>                                        position: {Point 230 124} size: {Dimension 178 19} border-type: edge style: entry
              (<Moniker-Widget>))
            (<Push-Combo>                                         position: {Point 230 148}
              (<!>                           name: body           resource: {Image-Resource "Backward"}))
            (<Push-Combo>                                         position: {Point 270 148}
              (<!>                           name: body           resource: {Image-Resource "Forward"}))
            (<Group-Box>                                          title: "Group-Box" position: {Point 239 17} size: {Dimension 165 50})
            (<Horizontal-Line>                                    position: {Point 21 185} size: {Dimension 214 8})
            (<Progress-Bar>                                       position: {Point 288 180})
            (<Push-Button>                                        title: "Push-Button" position: {Point 21 212})
            (<Check-Box>                                          title: "Check-Box" position: {Point 153 218})
            (<Radio-Button>                                       title: "Radio-Button 1" position: {Point 259 217} selected?: #t)
            (<Radio-Button>                                       title: "Radio-Button 2" position: {Point 259 236})
            (<Push-Tool>                                          position: {Point 22 139} resource: {Image-Resource "Find"} portfolio: :images)
            (<Toggle-Tool>                                        position: {Point 71 139} size: {Dimension 22 22} resource: {Image-Resource "Link"} portfolio: :images)
            (<Radio-Tool>                                         position: {Point 128 139} resource: {Image-Resource "ModeSelect"} portfolio: :images selected?: #t)
            (<Radio-Tool>                                         position: {Point 152 139} resource: {Image-Resource "Font"} portfolio: :images)
            (<Radio-Tool>                                         position: {Point 176 139} resource: {Image-Resource "ModeRect"} portfolio: :images)
            (<Label-Tool>                                         title: "Hello World!" position: {Point 92 47})))
        @wait
        (<Tab-Sheet>                         name: drawing-sheet  title: "Drawing"
          (<!>                               name: content
            (<Draw-Showcase>                 name: ds             position: {Point 0 0} size: {Dimension 884 558})))
        @wait
        (<Tab-Sheet>                         name: scaling-sheet  title: "Scaling"
          (<!>                               name: content
            (<Scaling-Showcase>              name: ss             position: {Point 0 0} size: {Dimension 870 555})))
        (<Tab-Sheet>                         name: layout-sheet   title: "Layout"
          (<!>                               name: content
            (<Label-View>                                         title: "Flow" position: {Point 50 30} auto-size?: #t)
            (<Border-View>                   name: layout-flow    position: {Point 50 50} size: {Dimension 300 200} border-type: solid
              (<Layout-View>                 name: layout         layout-type: flow
                (<Layout-View>                                    size: {Dimension 100 500} layout-type: flow layout-justification: vertical location: head background: {Color Dark-Red}
                  (<View>                                         size: {Dimension 100 100} location: head background: {Color Dark-Orange}))
                (<View>                                           size: {Dimension 20 200} location: head background: {Color Dark-Blue})
                (<View>                                           location: center background: {Color Dark-Green})))
            (<Label-View>                                         title: "Splitter" position: {Point 50 280} auto-size?: #t)
            (<Border-View>                   name: layout-split   position: {Point 50 300} size: {Dimension 300 200} border-type: solid
              (<Splitter-View>                                    orientation: horz division: 150
                (<View>                                           size: {Dimension 100 200} location: first background: {Color Dark-Red})
                (<Splitter-View>                                  location: second orientation: vert mode: relative division: 40
                  (<View>                                         location: first background: {Color Dark-Green})
                  (<View>                                         location: second background: {Color Dark-Blue}))))
            (<Label-View>                                         title: "Border" position: {Point 420 30} auto-size?: #t)
            (<Border-View>                   name: layout-border  position: {Point 420 50} size: {Dimension 300 200} border-type: solid
              (<Layout-View>                 name: layout         layout-type: border layout-padding: 4
                (<View>                                           location: center background: {Color Dark-Red})
                (<View>                                           location: north size: {Dimension 0 20} background: {Color Dark-Blue})
                (<View>                                           location: south size: {Dimension 0 10} background: {Color Dark-Blue})
                (<View>                                           location: west size: {Dimension 20 0} background: {Color Dark-Green})
                (<View>                                           location: east size: {Dimension 10 0} background: {Color Dark-Green})))))
        @wait
        (<Tab-Sheet>                         name: effects-sheet  title: "Effect"
          (<!>                               name: content
            (<View>                          name: ss             position: {Point 85 50} size: {Dimension 600 400}
              (<Push-Button>                                      title: "Wipe Left" position: {Point 20 20} size: {Dimension 140 24} action-handler: {Event-Handler :form on-wipe})
              (<View>                        name: wiped          position: {Point 350 50} size: {Dimension 150 250} background: {Color Red}))))
        (<Tab-Sheet>                         name: traits-sheet   title: "Trait"
          (<!>                               name: content
            (<View>                          name: ss             position: {Point 85 50} size: {Dimension 600 400} background: {Color Medium-Gray}
              (<View>                        name: s2             position: {Point 150 50} size: {Dimension 150 250}
                (<Push-Button>                                    title: "Remove" position: {Point 50 10} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-trait trait: #f})
                (<Push-Button>                                    title: "V1" position: {Point 50 40} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-trait trait: v1})
                (<Push-Button>                                    title: "V2" position: {Point 50 70} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-trait trait: v2})
                (<Push-Button>                                    title: "V2A" position: {Point 50 100} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-trait trait: v2a})
                (<Push-Button>                                    title: "V2B" position: {Point 50 130} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-trait trait: v2b})
                (<Push-Button>                                    title: "V2C" position: {Point 50 160} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-trait trait: v2c})
                (<Push-Button>                                    title: "V2CA" position: {Point 50 190} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-trait trait: v2ca})
                (<Push-Button>                                    title: "V2CB" position: {Point 50 220} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-trait trait: v2cb}))
              (<View>                        name: p              position: {Point 350 50} size: {Dimension 100 100} background: {Color Green})
              (<Trait>                       name: v1
                (<install>                                        size: {Dimension 500 300}))
              (<Trait>                       name: v2
                (<install>
                  (<!>                       name: p              background: {Color Orange} size: {Dimension 150 250}))
                (<Trait>                     name: v2a
                  (<install>
                    (<!>                     name: p              background: {Color Red})))
                (<Trait>                     name: v2b
                  (<install>
                    (<!>                     name: p              background: {Color Blue})))
                (<Trait>                     name: v2c
                  (<install>
                    (<!>                     name: p              position: {Point 320 100} size: {Dimension 150 210} background: {Color Purple})
                    (<Push-Button>           name: b              title: "Hello" position: {Point 130 330} size: {Dimension 200 22}))
                  (<Trait>                   name: v2ca
                    (<install>
                      (<!>                   name: b              title: "Bonjour")))
                  (<Trait>                   name: v2cb
                    (<install>
                      (<!>                   name: b              visible?: #f))))))))
        @wait
        (<Tab-Sheet>                         name: outline-sheet  title: "Outline"
          (<!>                               name: content        layout-type: fill
            (<Outline-Showcase>)))
        (<Tab-Sheet>                         name: tree-sheet     title: "Tree"
          (<!>                               name: content        layout-type: fill
            (<Tree-Showcase>)))
        @wait
        (<Tab-Sheet>                         name: text-sheet     title: "Text"
          (<!>                               name: content        layout-type: fill
            (<Text-Showcase>)))
        @wait
        (<Tab-Sheet>                         name: threads-sheet  title: "Threads"
          (<!>                               name: content        layout-type: fill
            (<Threads-Showcase>              name: threads))))))


  (method override (install rest)
    (nextmethod rest)
    (install-views))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "ProjectsManager"})
  
  
  (method meta override (host-title)
    "Showcase")
  
  
  (method meta override (host-position)
    {Point 50 30})
  
  
  (method meta override (host-size)
    {Dimension 900 650})
  
  
  (method override (host-workspaces)
    '(home))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'tab) dh dv))
  
  
  (method (on-set-active-trait evt)
    (let* ((creator (get-creator~ (get-sender~ evt)))
           (view (locate~ creator 'ss))
           (trait (get-property~ evt trait:)))
      (set-active-traits~ view (if trait (list (locate~ creator trait)) '()))))
  
  
  ;;;
  ;;;; Stage
  ;;;
  
  
  (method (get-stage name)
    (get-content~ (locate name)))


  ;;;
  ;;;; Views
  ;;;

  
  (method (install-views)
    (define (install-text)
      @convert
      (let ((file {File Jedi-Project "Development" "Categories" "Application" "Jedi-User.jazz"}))
        (when (exists?~ file)
          (set-moniker~ (get-controller~ (locate 'jt)) file))))
    
    (define (install-tree-view)
      (let ((tree (locate 'tv)))
        (add-row~ tree children: (list (new Tree-Node title: "Hello" image: {Image-Resource "Document"}) (new Tree-Label title: "There") (new Tree-Label title: "How do you do?")))
        (add-row~ tree children: (list (new Tree-Node title: "Hello" image: {Image-Resource "OpenedFolder"}) (new Tree-Label title: "There") (new Tree-Label title: "How do you do?")))
        (let ((node (add-row~ tree children: (list (new Tree-Node title: "Hello" image: {Image-Resource "OpenedFolder"}) (new Tree-Label title: "There") (new Tree-Label title: "How do you do?")))))
          (for-each (lambda (n)
                      (let* ((title (format "Foo{a}" n))
                             (cell (format "How do you {a}?" title))
                             (node (add-row~ tree father: node children: (list (new Tree-Node title: title image: {Image-Resource "OpenedFolder"}) (new Tree-Label title: "There") (new Tree-Label title: cell)))))
                        (when (= n 5)
                          (for-each (lambda (n)
                                      (let* ((title (format "Bar{a}" n))
                                             (cell (format "How do you {a}?" title)))
                                        (add-row~ tree father: node children: (list (new Tree-Node title: title image: {Image-Resource "OpenedFolder"}) (new Tree-Label title: "There") (new Tree-Label title: cell)))))
                                    (naturals 0 5)))))
                    (naturals 0 25)))))
    
    (install-text)
    (install-tree-view))


  ;;;
  ;;;; Effects
  ;;;
  
  
  (method (on-wipe evt)
    (let ((canvas (locate 'wiped)))
      (set-effect~ (get-root~ canvas) (new Wipe-Effect direction: 'right delay: 0.005))
      (set-background~ canvas (if (eq? (get-background~ canvas) {Color Red}) {Color Blue} {Color Red})))))


;;;
;;;; Region
;;;


(class Region-Showcase extends View
  
  
  @convert
  (method (draw surface context lh lv)
    (set-bk-mode~ surface :transparent)
    (set-font~ surface {Font Caption})
    (draw-text~ surface 10 10 "Hello world!")
    (with ((rgn (new Region))
           (frs (new Region {Rect 10  50 145 100}))
           (sec (new Region {Rect 30  70 180 120})))
      (combine!~ rgn frs 'or)
      (combine!~ rgn sec 'or)
      (fill-region~ surface rgn {Color Red}))
    (draw-image~ (get-images-portfolio~ (get-application)) surface context {Image-Resource "Handler"} 160 8)))


;;;
;;;; Surface
;;;


(class DC-Showcase extends View
  
  
  @convert
  (method (draw surface context lh lv)
    (let ((size {Dimension 32 32}))
      (with ((memory-dc (new Memory-Surface surface size)))
        (fill-rect~ memory-dc {Rect 0 0 32 32} {Color Green})
        (bit-blit~ memory-dc surface destination: {Point 10 10})))))


;;;
;;;; Draw
;;;


(class Draw-Showcase extends View
  
  
  (method override (draw surface context lh lv)
    (define (draw-gradient rect)
      (gradient-fill~ surface rect (list (list 0 {Color Red}) (list 1 {Color Blue}))))
    
    (draw-gradient (new Rect 450 10 650 30))
    (fill-rect~ surface (new Rect  0   0 118 214) {Color Green})
    (set-text-color~ surface {Color Black})
    (fill-rect~ surface (new Rect 200 300 400 360) {Color White})
    (fill-rect~ surface (new Rect 200 300 400 320) {Color Light})
    (fill-rect~ surface (new Rect 200 320 400 340) {Color Medium})
    (fill-rect~ surface (new Rect 200 340 400 360) {Color Dark})
    (frame-rect~ surface (new Rect 200 300 400 360) {Color Black})
    (draw-text~ surface 200 250 "Disabled text" #f)))


;;;
;;;; Scaling
;;;


(class Scaling-Showcase extends View))
