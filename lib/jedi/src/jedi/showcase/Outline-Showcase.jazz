;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Outline Showcase
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jedi.showcase.Outline-Showcase jazz


(import (jazz.ui))


(class Outline-Showcase extends View)


@convert


(class Outline-Showcase extends View


  (form
    (<install>                                                      size: {Dimension 940 466}
      (<Border-View>                   name: outline-border         position: {Point 3 6} size: {Dimension 319 457} border-type: edge
        (<Scroller-View>                                            vscroll?: #t
          (<!>                         name: content                layout-type: fill
            (<Outline-View>            name: outline                row-spacing: 0))))
      (<Check-Box>                     name: row-spacing            title: "Row Separators?" position: {Point 340 10} size: {Dimension 120 18} checked?: #f action-handler: {Event-Handler :form on-setting})
      (<Push-Button>                   name: expand-row             title: "Expand Row" position: {Point 340 70} size: {Dimension 160 24} action-handler: {Event-Handler :form on-expand-row})
      (<Push-Button>                   name: collapse-row           title: "Collapse Row" position: {Point 340 100} size: {Dimension 160 24} action-handler: {Event-Handler :form on-collapse-row})
      (<Push-Button>                   name: add-row                title: "Add Row" position: {Point 340 160} size: {Dimension 160 24} action-handler: {Event-Handler :form on-add-row})
      (<Push-Button>                   name: remove-rows            title: "Remove Row" position: {Point 340 190} size: {Dimension 160 24} action-handler: {Event-Handler :form on-remove-row})
      (<Push-Button>                   name: update-information     title: "Update Information" position: {Point 340 260} size: {Dimension 160 24} action-handler: {Event-Handler :form on-update-information})
      (<Label-View>                    name: visible-count          position: {Point 340 315} size: {Dimension 170 16})
      (<Label-View>                    name: visible-height         position: {Point 340 335} size: {Dimension 170 16})
      (<Label-View>                    name: selection              position: {Point 340 415} size: {Dimension 170 16})
      (<Border-View>                   name: info-border            position: {Point 518 6} size: {Dimension 419 457} border-type: edge
        (<Scroller-View>                                            vscroll?: #t
          (<!>                         name: content                layout-type: fill
            (<Tree-Header>
              (<!>                     name: content
                (<Tree-View>           name: info                   selection-mode: row portfolio: :images
                  (<Tree-Node-Column>                               title: "Title" width: 120)
                  (<Tree-Label-Column>                              title: "Level" width: 50)
                  (<Tree-Label-Column>                              title: "State" width: 80)
                  (<Tree-Label-Column>                              title: "Row" width: 50 justification: center)
                  (<Tree-Label-Column>                              title: "Previous" width: 50 justification: center)
                  (<Tree-Label-Column>                              title: "Next" width: 50 justification: center)))))))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-title)
    "Outline Showcase")
  
  
  (method meta (host-position)
    {Point 39 60})
  
  
  (method meta (host-size)
    {Dimension 940 466})
  
  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (install rest)
    (nextmethod rest)
    (setup-outline)
    (update-information))
  
  
  ;;;
  ;;;; Setup
  ;;;

  
  (method (setup-outline)
    @wait
    (let ((outline (locate 'outline)))
      (add-row outline #f)
      (add-row outline #f)
      (let ((node (add-row outline #f)))
        (for-each (lambda (n)
                    (let ((node (add-row outline node)))
                      (when (= n 5)
                        (for-each (lambda (n)
                                    (add-row outline node))
                                  (naturals 0 5)))))
                  (naturals 0 10)))
      (add-row outline #f)))
  
  
  (method (add-row outline father)
    (add-row~ outline context: self class: Color-Row father: father row-height: (random-height) background: (random-color)))
  
  
  (method (random-height)
    (+ 10 (random 60)))

  
  (method (random-color)
    (random-element
      '({Color Dark-Red}
        {Color Dark-Orange}
        {Color Dark-Green}
        {Color Dark-Blue}
        {Color Dark-Purple})))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'outline-border) 0 dv)
    (size-figure~ (locate 'info-border) dh dv))
  
  
  (method (on-setting evt)
    (let ((sender (get-sender~ evt))
          (outline (locate 'outline)))
      (case (get-name~ sender)
        ((row-spacing) (set-row-spacing~ outline (if (get-checked?~ sender) 1 0))))))
  
  
  (method (on-expand-row evt)
    (let* ((outline (locate 'outline))
           (row (get-selection~ outline)))
      (when row
        (expand~ outline (get-row~ outline row))))
    (update-information))
  
  
  (method (on-collapse-row evt)
    (let* ((outline (locate 'outline))
           (row (get-selection~ outline)))
      (when row
        (collapse~ outline (get-row~ outline row))))
    (update-information))
  
  
  (definition Mark
    #f)
  
  
  (method (on-add-row evt)
    (let* ((outline (locate 'outline))
           (sel (get-selection~ outline))
           (use-mark? (get-shift?~ evt))
           (row (if use-mark? Mark (and sel (get-row~ outline sel)))))
      (add-row~ outline father: row state: 'collapsed row-height: (random-height) background: (random-color)))
    (update-information))
  
  
  (method (on-remove-row evt)
    (let* ((outline (locate 'outline))
           (sel (get-selection~ outline))
           (use-mark? (get-shift?~ evt))
           (row (if use-mark? Mark (and sel (get-row~ outline sel)))))
      (remove-row~ outline row))
    (update-information))
    
  
  (method (on-update-information evt)
    (update-information))

  
  ;;;
  ;;;; Information
  ;;;
  
  
  (method (update-information)
    (update-fields)
    (display-outline))
  
  
  (method (update-fields)
    @wait-this-creates-problems-because-we-are-not-in-the-same-package-as-outline-view-anymore
    (let ((outline (locate 'outline)))
      (set-title~ (locate 'visible-count) (format "Visible Count: {a}" (get-visible-count~ outline)))
      (set-title~ (locate 'visible-height) (format "Visible Height: {a}" (get-visible-height~ outline)))
      (set-title~ (locate 'selection) (format "Selection: {a}" (get-selection~ outline)))))
  
  
  (method (display-outline)
    (let ((outline (locate 'outline))
          (info (locate 'info)))
      (define (iter row dest)
        (let ((subdest (add-row~ info father: dest state: 'expanded children: (display-row outline row))))
          (iterate (get-sons~ row)
                   (lambda (subrow)
                     (iter subrow subdest)))))
      
      (remove-every-row~ info)
      (with-update-locked~ info
        (lambda ()
          (iterate (get-sons~ (get-root-row~ outline))
                   (lambda (row)
                     (iter row #f)))))))
  
  
  (method (display-row outline row)
    (let* ((node (car (get-children~ row)))
           (line (lambda (row) (and row (row->line outline row))))
           (visible? (get-visible?~ row))
           (color (if visible? {Color Dark-Red} {Color Dark-Blue}))
           (c0 (new Tree-Node color: (get-background~ row) title: (and node (get-title~ node)) image: (and node (get-image~ node))))
           (c1 (new Tree-Label title: (get-level~ row)))
           (c2 (new Tree-Label title: (get-state~ row)))
           (c3 (new Tree-Label title: (line row) color: color))
           (c4 (new Tree-Label title: (line (get-previous~ row)) color: color))
           (c5 (new Tree-Label title: (line (get-next~ row)) color: color)))
      (list c0 c1 c2 c3 c4 c5)))
  
  
  (method (row->line outline row)
    (continuation-capture
      (lambda (return)
        (let ((line -1))
          (define (iter subrow)
            (if (eq? subrow row)
                (continuation-return return line)
              (increase! line)
              (iterate (get-sons~ subrow) iter)))
          
          (iter (get-root-row~ outline))
          (error "Unable to locate row: {t}" row)))))

  
  ;;;
  ;;;; Color-Row
  ;;;
  
  
  (class Color-Row extends Outline-Row


    (property background initialize #f accessors generate)
  
  
    (method (draw-background surface context)
      (when background
        (let ((bounds (get-bounds)))
          (fill-rect~ surface bounds background)))))))
