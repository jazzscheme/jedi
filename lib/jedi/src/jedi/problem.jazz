;;;===============
;;;  WorldScheme
;;;===============
;;;
;;;; Jedi Problems
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module jedi.problem jazz


(import (jazz.io)
        (time))


(definition *problems-directory*
  {Directory Settings "work" "problems"})

(definition *problem-file*
  #f)

(definition *problem-prefix*
  "server")

(definition *problem-port*
  #f)

(definition protected (set-problem-prefix prefix)
  (set! *problem-prefix* prefix))


(definition public (make-problem-file)
  (let ((file (timestamped-file *problems-directory* *problem-prefix* "log")))
    (create-directories file)
    file))


(definition public (problem-file)
  (when (not *problem-file*)
    (set! *problem-file* (make-problem-file)))
  *problem-file*)


(definition public (problem-port)
  (when (not *problem-port*)
    (set! *problem-port* (open-output-file (path-settings (problem-file) append: #t))))
  *problem-port*)


(definition public (problem-close)
  (when *problem-port*
    (close-port *problem-port*)
    (set! *problem-port* #f)))


(definition public (with-problem-output proc)
  (let ((port (problem-port)))
    (proc port)
    (force-output port)))


(definition public (problem-log . rest)
  (with-problem-output
    (lambda (port)
      (apply format port rest))))


(definition public (problem . rest)
  (let ((date (date->string (current-date) "~Y-~m-~d ~H:~M:~S"))
        (line (apply format rest)))
    (problem-log "{a} {a}{%}" date line))))
