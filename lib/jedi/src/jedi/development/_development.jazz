;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jedi Development
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jedi.development jazz


(export (jazz.development))

(import (jazz.debuggee)
        (jazz.development)
        (jazz.editor.jazz)
        (jazz.editor.jazz.inspector)
        (jazz.editor.sql)
        (jazz.editor.sql.view)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.clipboard)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (jazz.ui.workspace))


;;;
;;;; Inspect
;;;


(definition public (i object)
  (inspect object))


(definition public (ins object)
  (inspect-object object))


(definition public (inspect-form form/component)
  (with-text-inspector
    (lambda (output)
      (let ((form (if (is? form/component Form) form/component (get-form~ form/component))))
        (pretty-print~ (form->node form) output)
        (newline output)))))


(definition public (inspect-traits component)
  (with-text-inspector
    (lambda (output)
      (let ((first? #t))
        (for-each-trait~ component
          (lambda (trait)
            (if first?
                (set! first? #f)
              (format output "{%}{%}"))
            (format output "{a}{%}" (get-name~ trait))
            (let ((form (get-restore-form~ trait)))
              (if (not form)
                  (format output " ~#f{%}")
                (pretty-print~ (form->node form) output)
                (newline output)))))))))


(definition public (with-text-inspector proc)
  (let ((output (open-output-string)))
    (proc output)
    (let* ((workspace (get-name~ (selected-workspace)))
           (frame (new-frame Jazz-Text-View host-visible?: #f host-workspace: workspace))
           (text (get-guest~ frame)))
      (set-string-content~ text (get-output-string output))
      (set-caret~ text (text-beginning~ text))
      (set-modified?~ text #f)
      (acquire-focus~ text))))


(definition public (methods class/obj)
  (let ((class (if (class? class/obj) class/obj (class-of class/obj))))
    (map field-name (collect-type Method (table-values (get-fields~ class))))))


;;;
;;;; Choose
;;;


(definition public cc
  (let ((previous-color #f))
    (lambda ((color-or-name #f))
      (let ((color (cond ((not color-or-name) previous-color)
                         ((is? color-or-name Color) color-or-name)
                         (else (registered-color color-or-name)))))
        (let ((new-color (choose-color color: color)))
          (set! previous-color new-color)
          new-color)))))


(definition public (cf)
  (choose-file))


(definition public (cmf)
  (choose-file multiple-selection?: #t))


(definition public (cnf)
  (choose-new-file))


(definition public (cd)
  (choose-directory))


(definition public (cp)
  (let ((path (format "{l}" (get-list~ (cd)))))
    (set-clipboard-text path)
    (user-message "Clipboard set to {a}" path)
    #f))


;;;
;;;; Files
;;;


(definition public (find-files pattern directory)
  (let ((regexp (new Regular-Expression pattern)))
    (iterate-directory~ directory
      (lambda (file)
        (let ((name (get-name~ file)))
          (when (match~ regexp name)
            (debug file)))))))


(definition public (rename-files find replacement)
  (let ((directory (choose-directory title: "Rename"))
        (find-regexp (new Regular-Expression find))
        (replacement-regexp (new Regular-Expression replacement))
        (succeeded 0)
        (failed (new List-Factory)))
    (iterate-directory~ directory
      (lambda (file)
        (let* ((name (get-name~ file))
               (match (match~ find-regexp name)))
          (when match
            (let* ((new-name (replace~ replacement-regexp match))
                   (new-file (new-file~ (get-directory~ file) new-name)))
              (move-pathname~ file new-file)
              (increase! succeeded)))))
      files?: #t
      directories?: #f)
    (message-box (format "{a} file{a} renamed" succeeded (format-plural succeeded)))))


;;;
;;;; Receive Files
;;;


(class Receiver-View extends View
  
  
  (property invite   initialize #f accessors explicit)
  (property receiver initialize #f accessors generate)
  
  
  (form
    (<install> background: {Color Dark}))
  
  
  (method public (get-invite)
    invite)
  
  
  (method public (set-invite value)
    (set! invite value)
    (invalidate-view))
  
  
  (method override (receive-files pos files)
    (receiver self pos files))
  
  
  (definition Background-Font
    {Font Heading2})
  
  
  (method override (draw surface context lh lv)
    (set-font~ surface Background-Font)
    (let* ((title (localize (or invite "Drop Files Here")))
           (extent (get-text-extent~ surface title))
           (pos (center extent (get-display-size))))
      ;; shadow
      (set-text-color~ surface {Color Black})
      (draw-text~ surface (+ (get-h~ pos) 2) (+ (get-v~ pos) 2) title)
      ;; text
      (set-text-color~ surface {Color Gray})
      (draw-text~ surface (get-h~ pos) (get-v~ pos) title #t))))


(definition public (setup-receiver receiver (title: title #f) (position: position #f) (size: size #f) (invite: invite #f))
  (new-palette Receiver-View
               host-title: (or title "Receive Files")
               host-position: (or position {Point 219 169})
               host-size: (or size {Dimension 434 224})
               invite: invite
               receiver: receiver))


;;;
;;;; Regular Expressions
;;;


(definition public (rer from to string)
  (replace~ (new Regular-Expression to) (match~ (new Regular-Expression from) string)))


;;;
;;;; Data
;;;


(definition public (debug-table table (name: name #f) (max-display: max-display 250))
  (let ((text (get-sql-console-text)))
    @convert (set-current-request~ text name)
    (display-table~ text table max-display 0)
    table)))
