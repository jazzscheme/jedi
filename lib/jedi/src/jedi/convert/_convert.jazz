;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jedi Conversions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jedi.convert jazz


(import (jazz.graphic.literals)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component))


;;;
;;;; Convert initial
;;;


(definition protected (convert-settings-initial dot-jedi-dir)
  (define (convert-profiles)
    (let ((profiles-dir (new-directory~ dot-jedi-dir "profiles")))
      (unless (exists?~ profiles-dir)
        (create-directories~ (new-directory~ profiles-dir "lib"))
        (call-with-output-file (path-settings (new-file~ profiles-dir ".repository") eol-encoding: 'cr-lf)
          (lambda (output)
            (format output "(repository Profiles{%}{%}")
            (format output "  (library \"lib\")){%}")))
        (let ((user-dir {Directory Home "jazz_user" "lib"}))
          (when (exists?~ user-dir)
            (iterate-directory~ user-dir
              (lambda (dir)
                (let ((dirname (get-name~ dir)))
                  (when (and (starts-with? dirname "profile.") (exists?~ (new-file~ dir ".package")))
                    (let ((profile-dir (new-directory~ profiles-dir (list "lib" dirname))))
                      (unless (exists?~ profile-dir)
                        (copy-directory~ dir profile-dir)
                        (convert-profile profile-dir)
                        (feedback "; moving old {a} to obsolete..." dirname)
                        (let ((obsolete-dir (new-directory~ user-dir "obsolete")))
                          (let ((obsolete-profile-dir (new-directory~ obsolete-dir dirname)))
                            (unless (exists?~ obsolete-profile-dir)
                              (create-directories~ obsolete-dir)
                              (move-pathname~ dir obsolete-profile-dir)))))))))
              files?: #f
              directories?: #t
              recursive?: #f))))))
  
  (define (convert-profile profile-dir)
    (define (convert-package)
      (define (unable-to-convert)
        (error "Unable to convert package"))
      
      (let ((package-file (new-file~ profile-dir ".package")))
        (let ((expr (read-expr package-file)))
          (match expr
            ((package ?profile-package . ?alist)
             (match (assq 'profiles ?alist)
               ((profiles (?profile . ?))
                (let ((pair (assq 'project ?alist)))
                  (when pair
                    (set-car! (cdr pair) ".project")))
                (call-with-output-file (path-settings package-file)
                  (lambda (output)
                    (format output "(package {a}{%}" ?profile-package)
                    (for-each (lambda (pair)
                                (format output "{%}  {s}" pair))
                              ?alist)
                    (format output "){%}")))
                (let ((package (find-package ?profile-package)))
                  (when package
                    (package-profiles-set! package '())))
                (when (find-alias ?profile-package)
                  (unregister-alias ?profile-package))
                (values ?profile ?profile-package))
               (? (unable-to-convert))))
            (? (unable-to-convert))))))
    
    (define (convert-manifest manifest-file)
      (define (read-manifest)
        (let ((expr (read-expr manifest-file)))
          (match expr
            ((module ?module-name jazz (import . ?) (class ? extends Project (form ?form)) . ?) ?form)
            (? (error "Unable to convert manifest")))))
      
      (define (convert-manifest form)
        (remove-property~ form 'unit-name)
        form)
      
      (when (exists?~ manifest-file)
        (let ((filename (get-name~ manifest-file)))
          (feedback "; converting {a}..." filename)
          (with-jazz-readtable
            (lambda ()
              (let ((form (convert-manifest (parse-form `(data jazz.ide.data.project (form (<Project> ,@(cdr (read-manifest))))))))
                    (project-file (new-file~ profile-dir ".project")))
                (add-imports filename form '(jazz.editor.c jazz.editor.jazz))
                (save-form form project-file)
                (delete-file~ manifest-file)))))))
    
    (define (convert-setting settings-dir filename dialect potential-imports convert)
      (feedback "; converting {a}..." filename)
      (let ((file (new-file~ settings-dir filename)))
        (when (exists?~ file)
          (let ((expr (read-expr file)))
            (let ((form (convert (parse-form `(data ,dialect (form ,expr))))))
              (add-imports filename form potential-imports)
              (save-form form file))))))
    
    (define (convert-preferences form)
      (iterate-nodes form
        (lambda (node)
          (when (get-property~ node 'active-project)
            (remove-property~ node 'active-project))))
      form)
    
    (define (convert-workbench form)
      (let ((profile-unit (get-name~ profile-dir)))
        (parse-form
          `(data jazz.ide.data.workbench
           (form
             (<Workbench>
               (<*> tag-reference: ,(new File (list 'Jazz ".project")))
               (<*> tag-reference: ,(new File (list 'Profiles "lib" profile-unit ".project")))))))))
    
    (define (convert-workspaces form)
      (iterate-nodes form
        (lambda (node)
          (let ((model-name (get-property~ node 'model-name)))
            (when model-name
              (rename-property~ node 'model-name 'model)
              (set-property~ node 'model (new Reference model-name))))
          (let ((frame-model (get-property~ node 'frame-model)))
            (when frame-model
              (set-property~ node 'frame-model (new Reference frame-model))))))
      form)
    
    (let ((profile-unit (get-name~ profile-dir)))
      (feedback "; converting {a}..." profile-unit)
      (receive (profile-name profile-package) (convert-package)
        (let ((module-dir (new-directory~ profile-dir (list "profile" (downcase (symbol->string profile-name))))))
          (let ((manifest-file (new-file~ module-dir (format "{a}-Manifest.jazz" profile-name)))
                (settings-dir (new-directory~ module-dir "settings")))
            (convert-manifest manifest-file)
            (convert-setting settings-dir "Bindings.jml"    'jedi.data.bindings        '() identity)
            (convert-setting settings-dir "Connections.jml" 'jazz.ide.data.connections '(jazz.database.ado jazz.database.sqlserver) identity)
            (convert-setting settings-dir "Favorites.jml"   'jazz.ide.data.favorites   '() identity)
            (convert-setting settings-dir "PageSetup.jml"   'jazz.ide.data.pagesetup   '() identity)
            (convert-setting settings-dir "Preferences.jml" 'jedi.data.preferences     '() convert-preferences)
            (convert-setting settings-dir "Servers.jml"     'jazz.ide.data.servers     '() identity)
            (convert-setting settings-dir "Skins.jml"       'jazz.ide.data.skins       '() identity)
            (convert-setting settings-dir "Toolbox.jml"     'jazz.ide.data.toolbox     '() identity)
            (convert-setting settings-dir "Workbench.jml"   'jazz.ide.data.workbench   '(jazz.editor.c jazz.editor.jazz) convert-workbench)
            (convert-setting settings-dir "Workspaces.jml"  'jazz.ide.data.workspaces  '() convert-workspaces))))))
  
  (define (add-imports filename form potential-imports)
    (define (determine-imports form)
      (define (determine-import model)
        (let (iterate (scan potential-imports))
          (if (null? scan)
              (error "Unable to convert {a} because import for {a} cannot be determined" filename model)
            (let ((potential-import (car scan)))
              (if (module-get potential-import model)
                  potential-import
                (iterate (cdr scan)))))))
      
      (let ((context (get-context~ form))
            (imports '()))
        (iterate-nodes form
          (lambda (node)
            (when (eq? (get-action~ node) 'new)
              (let ((model (get-model~ node)))
                (when (not (locate-reference~ context model))
                  (let ((import (determine-import model)))
                    (when (not (memq? import imports))
                      (set! imports (cons import imports)))))))))
        (sort string<? imports key: symbol->string)))
    
    (let ((imports (determine-imports form)))
      (when (not-null? imports)
        (set-imports~ (get-data~ form) (map list imports)))))
  
  (convert-profiles))


;;;
;;;; Convert 205000
;;;


(definition protected (convert-settings-205000 dot-jedi-dir)
  (define (convert-profile profile-dir)
    (define (convert what form)
      form)
    
    (define (literal-hook name arguments)
      (define (skip-name)
        (if (and (not-null? arguments) (eq? (car arguments) name:))
            (cdr arguments)
          arguments))
      
      (case name
        ((Color) (apply construct-color (skip-name)))
        ((Font) (apply construct-font (skip-name)))
        (else #f)))
    
    (convert-settings profile-dir convert literal-hook))
  
  (iterate-profiles dot-jedi-dir convert-profile))


;;;
;;;; Utility
;;;


(definition (iterate-profiles dot-jedi-dir proc)
  (let ((profiles-dir (new-directory~ dot-jedi-dir '("profiles" "lib"))))
    (when (exists?~ profiles-dir)
      (iterate-directory~ profiles-dir
        (lambda (dir)
          (let ((dirname (get-name~ dir)))
            (when (and (starts-with? dirname "profile.") (exists?~ (new-file~ dir ".package")))
              (let ((profile-dir (new-directory~ profiles-dir dirname)))
                (proc profile-dir)))))
        files?: #f
        directories?: #t
        recursive?: #f))))


(definition (convert-settings profile-dir convert literal-hook)
  (define (convert-setting what settings-dir filename)
    (feedback "; converting {a}..." filename)
    (let ((file (new-file~ settings-dir filename)))
      (when (exists?~ file)
        (let ((expr (read-expr file literal-hook)))
          (let ((form (convert what (parse-form expr))))
            (save-form form file))))))
  
  (let ((profile-name (get-name~ profile-dir)))
    (feedback "; converting {a}..." profile-name)
    (let ((module-dir (new-directory~ profile-dir (split profile-name "."))))
      (when (exists?~ module-dir)
        (let ((settings-dir (new-directory~ module-dir "settings")))
          (when (exists?~ settings-dir)
            (convert-setting 'bindings    settings-dir "Bindings.jml")
            (convert-setting 'colors      settings-dir "Colors.jml")
            (convert-setting 'connections settings-dir "Connections.jml")
            (convert-setting 'favorites   settings-dir "Favorites.jml")
            (convert-setting 'fonts       settings-dir "Fonts.jml")
            (convert-setting 'pagesetup   settings-dir "PageSetup.jml")
            (convert-setting 'preferences settings-dir "Preferences.jml")
            (convert-setting 'servers     settings-dir "Servers.jml")
            (convert-setting 'skins       settings-dir "Skins.jml")
            (convert-setting 'styles      settings-dir "Styles.jml")
            (convert-setting 'toolbox     settings-dir "Toolbox.jml")
            (convert-setting 'workbench   settings-dir "Workbench.jml")
            (convert-setting 'workspaces  settings-dir "Workspaces.jml")))))))


(definition (read-expr file (literal-hook #f))
  (with-jazz-readtable
    (lambda ()
      (call-with-input-file (path-settings file eol-encoding: 'cr-lf)
        (lambda (input)
          (parameterize ((walk-for #f)
                         (read-literal-hook literal-hook))
            (read input)))))))


(definition (feedback . rest)
  (with-printer :terminal
    (lambda (output)
      (apply format output rest)
      (newline output)
      (force-output output)))))
