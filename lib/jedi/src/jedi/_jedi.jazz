;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jedi
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jedi jazz


(hub reload-documentation)


(export (jedi.autoload))

(import (jazz.debugger)
        (jazz.presence))


;;;
;;;; World
;;;


(definition protected (collect-world-debuggees)
  (define (load-debuggee process)
    (load-object (get-remote-register process) 'world.debuggee 'world-debuggee))
  
  (let ((server #f)
        (clients (new-queue))
        (manager (get-debugger-manager)))
    (for-each-process manager
      (lambda (debugger debugged-process live? focused?)
        (let ((process (get-reference debugged-process)))
          (when (remote-proxy? process)
            (let ((kind ;; quick hack until server inherits from process
                        ;; again so we can use runtime properties as before
                        (if (ends-with? (get-title process) "-Server")
                            'server
                          'client)
                        @wait (determine-process-property debugger process kind: #f)))
              (case kind
                ;@wait-windowless-server
                ((server) (set! server (load-debuggee process)))
                ((client) (enqueue clients (load-debuggee process)))))))))
    (values server (queue-list clients)))))
