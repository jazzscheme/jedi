"Jazz-Debugger"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "Jazz-Debugger.jazz"} 1288732032
    {Lisp-Entry "jazz.debugger.jazz.Jazz-Debugger" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Jazz-Debugger" class #f 54 7 54 20 ("initialize" "Debugger")
        {Lisp-Entry "processes" slot #f 57 8 57 17 ()}
        {Lisp-Entry "start-debugger" method #f 65 20 65 34 ()}
        {Lisp-Entry "stop-debugger" method #f 69 20 69 33 ()}
        {Lisp-Entry "get-processes" method #f 73 20 73 33 ("processes" "validate-processes" "when" "validate-liveness?" "validate-liveness?:")}
        {Lisp-Entry "validate-processes" method #f 79 20 79 38 ("queue-list" "set!" "processes" "self" "Debugged-Process" "new" "get-debugger-manager" "detach-process" "enqueue" "if" "lambda" "for-each" "new-queue" "valid" "let" "live?" "Local-Proxy" "is?" "or" "process" "live-process?" "define")}
        {Lisp-Entry "detach-processes" method #f 93 20 93 36 ("processes" "detach-process" "proxy=?" "not" "when" "process" "lambda" "for-each" "get-local-process" "local-process" "let" "validate-processes")}
        {Lisp-Entry "process=?" method #f 107 20 107 29 ("proxy-server=?" "y" "x")}
        {Lisp-Entry "process-live?" method #f 111 20 111 33 ("live?" "process")}
        {Lisp-Entry "process-title" method #f 115 20 115 33 ("get-title" "process")}
        {Lisp-Entry "process-icon" method #f 119 20 119 32 ("get-icon" "process")}
        {Lisp-Entry "process-threads" method #f 123 20 123 35 ("get-threads" "lambda" "with-jrm-exception-handler" "process")}
        {Lisp-Entry "present-process" method #f 129 20 129 35 ("host->string" "format" "get-remote-listener" "listening-host" "host=?" "get-ior" "get-host" "host" "local-proxy?" "if" "get-title" "or" "title" "let" "process")}
        {Lisp-Entry "reload-process" method #f 139 20 139 34 ("reload-process" "lambda" "with-jrm-exception-handler" "process")}
        {Lisp-Entry "process-focusable?" method #f 145 20 145 38 ("process")}
        {Lisp-Entry "evaluate-expressions" method #f 149 20 149 40 ("evaluate-expressions" "lambda" "with-jrm-exception-handler" "col" "line" "container" "str" "syntax" "process")}
        {Lisp-Entry "profiler-start" method #f 155 20 155 34 ("profiler-start" "lambda" "with-jrm-exception-handler" "name" "process")}
        {Lisp-Entry "profiler-stop" method #f 161 20 161 33 ("profiler-stop" "lambda" "with-jrm-exception-handler" "name" "process")}
        {Lisp-Entry "profiler-profiles" method #f 167 20 167 37 ("profiler-profiles" "lambda" "with-jrm-exception-handler" "process")}
        {Lisp-Entry "profiler-profile" method #f 173 20 173 36 ("profiler-profile" "lambda" "with-jrm-exception-handler" "name" "process")}
        {Lisp-Entry "profile-reset" method #f 179 20 179 33 ("profile-reset" "lambda" "with-jrm-exception-handler" "depth" "profiler" "name" "process")}
        {Lisp-Entry "inspect-serial" method #f 185 20 185 34 ("inspect-serial" "lambda" "with-jrm-exception-handler" "serial" "process")}
        {Lisp-Entry "process-detach" method #f 191 20 191 34 ("detach-process" "lambda" "with-jrm-exception-handler" "process")}
        {Lisp-Entry "process-exit" method #f 197 20 197 32 ("exit-process" "lambda" "with-jrm-exception-handler" "process")}
        {Lisp-Entry "thread=?" method #f 208 20 208 28 ("get-id" "=" "proxy-server=?" "and" "y" "x")}
        {Lisp-Entry "thread-name" method #f 213 20 213 31 ("get-name" "thread" "process")}
        {Lisp-Entry "thread-state" method #f 217 20 217 32 ("get-state" "thread" "process")}
        {Lisp-Entry "thread-stops" method #f 221 20 221 32 ("get-stops" "lambda" "with-jrm-exception-handler" "thread" "process")}
        {Lisp-Entry "thread-active-stop" method #f 227 20 227 38 ("last" "null?" "if" "thread-stops" "stops" "let" "thread" "process")}
        {Lisp-Entry "break-thread" method #f 234 20 234 32 ("break-thread" "lambda" "with-jrm-exception-handler" "thread" "process")}
        {Lisp-Entry "set-repl-frame" method #f 240 20 240 34 ("set-repl-frame" "lambda" "with-jrm-exception-handler" "frame" "thread" "process")}
        {Lisp-Entry "restart=?" method #f 251 20 251 29 ("get-id" "=" "proxy-server=?" "and" "y" "x")}
        {Lisp-Entry "restart-name" method #f 256 20 256 32 ("get-name" "restart" "process")}
        {Lisp-Entry "restart-message" method #f 260 20 260 35 ("get-message" "restart" "process")}
        {Lisp-Entry "restart-stop" method #f 264 20 264 32 ("restart-stop" "lambda" "with-jrm-exception-handler" "restart" "process")}
        {Lisp-Entry "stop=?" method #f 275 20 275 26 ("get-id" "=" "proxy-server=?" "and" "y" "x")}
        {Lisp-Entry "stop-kind" method #f 280 20 280 29 ("get-kind" "stop" "process")}
        {Lisp-Entry "stop-reason" method #f 284 20 284 31 ("get-reason" "stop" "process")}
        {Lisp-Entry "stop-detail" method #f 288 20 288 31 ("get-detail" "lambda" "with-jrm-exception-handler" "stop" "process")}
        {Lisp-Entry "stop-location" method #f 294 20 294 33 ("get-location" "stop" "process")}
        {Lisp-Entry "stop-restarts" method #f 298 20 298 33 ("get-restarts" "lambda" "with-jrm-exception-handler" "stop" "process")}
        {Lisp-Entry "stop-frames" method #f 304 20 304 31 ("get-frames" "lambda" "with-jrm-exception-handler" "stop" "process")}
        {Lisp-Entry "continue-stop" method #f 310 20 310 33 ("continue-stop" "lambda" "with-jrm-exception-handler" "stop" "process")}
        {Lisp-Entry "step-stop" method #f 316 20 316 29 ("step-stop" "lambda" "with-jrm-exception-handler" "command" "stop" "process")}
        {Lisp-Entry "frame=?" method #f 327 20 327 27 ("get-id" "=" "proxy-server=?" "and" "y" "x")}
        {Lisp-Entry "frame-name" method #f 332 20 332 30 ("get-name" "frame" "process")}
        {Lisp-Entry "frame-interpreted?" method #f 336 20 336 38 ("get-interpreted?" "frame" "process")}
        {Lisp-Entry "frame-location" method #f 340 20 340 34 ("get-location" "lambda" "with-jrm-exception-handler" "frame" "process")}
        {Lisp-Entry "frame-variables" method #f 346 20 346 35 ("get-variables" "lambda" "with-jrm-exception-handler" "kind" "frame" "process")}
        {Lisp-Entry "inspect" method #f 357 18 357 25 ("client:" "process:" "host-title:" "Inspector-View" "new-frame" ":remote" "cons" "client" "self" "Debugged-Process" "new" "debugged-process" "format" "title" "let" "kind" "mutable?" "more?" "presentation" "serial" "bind" "lambda" "post-event" "info" "process")}
        {Lisp-Entry "attach-process" method #f 372 11 372 25 ("self" "Debugged-Process" "new" "get-debugger-manager" "attach-process" "list" "append!" "set!" "lambda" "execute-event" "process=?" "test:" "processes" "member?" "unless" "focus?" "process")}
        {Lisp-Entry "ready-process" method #f 380 11 380 24 ("get-registered-cookie" "proc" "let" "when" "lambda" "execute-event" "cookie" "process")}
        {Lisp-Entry "update-process" method #f 389 11 389 25 ("get-console-manager" "update-console-buttons" "get-application" "find-status-bar" "update-focused-process" "get-processes-view" "update" "lambda" "execute-event" "get-values" "set-values" "and" "process=?" "test:" "processes" "find-in" "actual" "let" "remote-proxy?" "when" "process")}
        {Lisp-Entry "detach-process" method #f 401 11 401 25 ("self" "Debugged-Process" "new" "get-debugger-manager" "detach-process" "remove!" "set!" "lambda" "execute-event" "process=?" "test:" "processes" "member?" "when" "process")}
        {Lisp-Entry "register-console" method #f 414 18 414 34 ("object->serial" "register-debugger-resource" "unregister-debugger-console" "Debugger-Resource" "console" "register-debugger-console" "text" "Debugged-Thread" "debugged-thread" "self" "Debugged-Process" "new" "debugged-process" "process=?" "test:" "processes" "find-in" "actual" "let" "lambda" "call-event" "select?" "thread" "process")}
        {Lisp-Entry "unregister-console" method #f 431 18 431 36 ("serial->object" "close-resource" "resource")}
        {Lisp-Entry "select-console" method #f 435 18 435 32 ("get-console-manager" "select-console" "get-console" "console" "serial->object" "get-reference" "text" "let" "resource")}
        {Lisp-Entry "console-output" method #f 441 18 441 32 ("debugger-console-output" "serial->object" "get-reference" "text" "let" "str" "resource")}
        {Lisp-Entry "status-message" method #f 451 18 451 32 ("user-message" "message")}
        {Lisp-Entry "get-toplevel-hwnd" method #f 460 18 460 35 ("get-toplevel" "get-handle")}
        {Lisp-Entry "register-stop" method #f 469 18 469 31 ("get-debugger-manager" "register-stop" "lambda" "execute-event" "Debugged-Stop" "debugged-stop" "Debugged-Thread" "debugged-thread" "self" "Debugged-Process" "new" "debugged-process" "let" "step?" "step?:" "stop" "thread" "process")}
        {Lisp-Entry "unregister-stop" method #f 478 18 478 33 ("get-debugger-manager" "unregister-stop" "lambda" "execute-event" "Debugged-Stop" "debugged-stop" "Debugged-Thread" "debugged-thread" "self" "Debugged-Process" "new" "debugged-process" "let" "stop" "thread" "process")}}}})
"Jazz-Project"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "Jazz-Project.jazz"} 1289506007
    {Lisp-Entry "jazz.debugger.jazz.Jazz-Project" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Jazz-Project" class #f 54 7 54 19 ("initialize" "Project")
        {Lisp-Entry "product" property #f 57 12 57 19 ()}
        {Lisp-Entry "get-product" accessor #f 57 50 57 58 ()}
        {Lisp-Entry "set-product" accessor #f 57 50 57 58 ()}
        {Lisp-Entry "destination" property #f 58 12 58 23 ()}
        {Lisp-Entry "get-destination" accessor #f 58 50 58 58 ()}
        {Lisp-Entry "set-destination" accessor #f 58 50 58 58 ()}
        {Lisp-Entry "repositories" property #f 59 12 59 24 ()}
        {Lisp-Entry "get-repositories" accessor #f 59 50 59 58 ()}
        {Lisp-Entry "set-repositories" accessor #f 59 50 59 58 ()}
        {Lisp-Entry "concrete?" method #f 67 20 67 29 ()}
        {Lisp-Entry "project-test" method #f 76 20 76 32 ("message-box" "debugger?:" "action:" "executable:" "launch" "product" "project-kernel" "exists?" "if" "project-executable" "executable" "let" "determine-executable" "define" "wait?" "wait?:" "show-console?" "show-console?:" "command-arguments" "command-arguments:" "command-action" "command-action:" "profile" "profile:")}
        {Lisp-Entry "project-run" method #f 101 20 101 31 ("message-box" "debugger?:" "executable:" "launch" "product" "project-kernel" "exists?" "if" "project-executable" "executable" "let" "determine-executable" "define" "wait?" "wait?:" "show-console?" "show-console?:" "command-arguments" "command-arguments:" "command-action" "command-action:" "profile" "profile:")}
        {Lisp-Entry "project-debug" method #f 125 20 125 33 ("message-box" "debugger?:" "launch" "product" "if" "wait?" "wait?:" "show-console?" "show-console?:" "command-arguments" "command-arguments:" "command-action" "command-action:" "profile" "profile:" "debugger-interactive?" "debugger-interactive?:" "executable" "executable:")}
        {Lisp-Entry "launch" method #f 144 20 144 26 ("arguments:" "launch-executable" "get-presentation-property" "user-message" "save-all" "append" "arguments" "arguments-arg" "action-arg" "profile-arg" "project-profile" "and" "debugger-interactive-arg" "clear-user-message" "cookie" "lambda" "register-debugger-cookie" "debugger-cookie-arg" "listening-port" "get-remote-listener" "listening-host" "encode-host/port" "debugger-arg" "if" "kernel-arguments-arg" "product" "->string" "or" "product-arg" "runtime-arg" "let*" "start-debuggers" "start-remote-server" "when" "get-process" "ide" "let" "kernel-platform" "executable-extension" "list" "extensions:" "title:" "choose-file" "project-kernel" "else" "choose-kernel" ":choose" "eq?" "cond" "determine-kernel" "define" "wait?" "wait?:" "show-console?" "show-console?:" "command-arguments" "command-arguments:" "command-action" "command-action:" "profile" "profile:" "debugger-interactive?" "debugger-interactive?:" "debugger-cookie" "debugger-cookie:" "debugger?" "debugger?:" "action" "action:" "kernel-arguments" "kernel-arguments:" "directory" "directory:" "executable" "executable:")}
        {Lisp-Entry "project-profile" method #f 180 29 180 44 ()}
        {Lisp-Entry "project-kernel" method #f 184 18 184 32 ("throw-cancel" "format" "message-box" "exists?" "and" "find-actual-kernel" "find-kernel" "destination" "if" "executable" "let")}
        {Lisp-Entry "project-executable" method #f 194 11 194 29 ("throw-cancel" "message-box" "kernel-platform" "executable-extension" "add-extension" "new-brother" "filename" "project-kernel" "kernel" "product-descriptor-build" "product" "get-product-descriptor" "descriptor" "package" "receive" "symbol->string" "symbol?" "if" "car" "info" "let" "build" "filename-heuristic" "define")}
        {Lisp-Entry "project-build" method #f 217 20 217 33 ("message-box" "show-console?:" "->string" "list" "arguments:" "launch-executable" "project-kernel" "kernel" "let" "get-application" "save-all" "begin" "product" "if")}
        {Lisp-Entry "get-class-descriptor" method #f 232 25 232 45 ("Jazz-Project-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 241 11 241 17 ()
        {Lisp-Entry "Jazz-Project-Descriptor" class #f 247 7 247 30 ("nullable?:" "domain" "title:" "name:" "repositories" "destination" "product" "catalog-heuristics" "catalog-extensions" "catalog?" "include-extensions" "title" "categorized:" "Image-Resource" "image:" "Project-Descriptor")}
        {Lisp-Entry "Repositories-Row" class #f 267 7 267 23 ("Value-Row")
          {Lisp-Entry "present" method #f 275 20 275 27 ("format" "null?" "if" "names")}
          {Lisp-Entry "get-edited-value" method #f 286 20 286 36 ("read-string-content" "string=?" "empty-string?" "or" "if" "editor" "get-string-content" "content" "let")}}}}})
"Snapshot-Debugger"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "Snapshot-Debugger.jazz"} 1288732033
    {Lisp-Entry "jazz.debugger.jazz.Snapshot-Debugger" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Snapshot-Debugger" class #f 56 7 56 24 ("initialize" "Debugger")
        {Lisp-Entry "processes" slot #f 59 8 59 17 ()}
        {Lisp-Entry "start-debugger" method #f 67 20 67 34 ()}
        {Lisp-Entry "stop-debugger" method #f 71 20 71 33 ()}
        {Lisp-Entry "get-processes" method #f 75 20 75 33 ("processes" "validate-liveness?" "validate-liveness?:")}
        {Lisp-Entry "detach-processes" method #f 79 20 79 36 ()}
        {Lisp-Entry "process=?" method #f 88 20 88 29 ("eq?" "y" "x")}
        {Lisp-Entry "process-live?" method #f 92 20 92 33 ("process")}
        {Lisp-Entry "process-title" method #f 96 20 96 33 ("name" "'name" "get-property" "process")}
        {Lisp-Entry "process-icon" method #f 100 20 100 32 ("icon" "'icon" "get-property" "or" "process")}
        {Lisp-Entry "process-threads" method #f 104 20 104 35 ("threads" "'threads" "find-node" "get-children" "process")}
        {Lisp-Entry "present-process" method #f 108 20 108 35 ("file" "'file" "get-property" "get-base" "process")}
        {Lisp-Entry "reload-process" method #f 112 20 112 34 ("process")}
        {Lisp-Entry "process-focusable?" method #f 116 20 116 38 ("process")}
        {Lisp-Entry "evaluate-expressions" method #f 120 20 120 40 ("col" "line" "container" "str" "syntax" "process")}
        {Lisp-Entry "inspect-serial" method #f 124 20 124 34 ("content" "'content" "get-property" "inspect-name/serial" "name" "bind" "info" "lambda" "map" "serial->value" "value" "let" "serial" "process")}
        {Lisp-Entry "inspect-name/serial" method #f 132 11 132 30 (":raw" "not-null?" "list" "cons" "'content" "content" "'presentation" "get-property" "presentation" "'value" "unbound" "'unbound" "found" "'found" "debug" "begin" "not" "if" "serial->value" "value" "mutable?" "let" "serial" "name" "process")}
        {Lisp-Entry "process-detach" method #f 144 20 144 34 ("process")}
        {Lisp-Entry "process-exit" method #f 148 20 148 32 ("detach-process" "process")}
        {Lisp-Entry "thread=?" method #f 157 20 157 28 ("eq?" "y" "x")}
        {Lisp-Entry "thread-name" method #f 161 20 161 31 ("name" "'name" "get-property" "thread" "process")}
        {Lisp-Entry "thread-state" method #f 165 20 165 32 ("state" "'state" "get-property" "thread" "process")}
        {Lisp-Entry "thread-stops" method #f 169 20 169 32 ("list" "thread" "process")}
        {Lisp-Entry "thread-active-stop" method #f 173 20 173 38 ("last" "null?" "if" "thread-stops" "stops" "let" "thread" "process")}
        {Lisp-Entry "break-thread" method #f 180 20 180 32 ("thread" "process")}
        {Lisp-Entry "set-repl-frame" method #f 184 20 184 34 ("frame" "thread" "process")}
        {Lisp-Entry "restart=?" method #f 193 20 193 29 ("eq?" "y" "x")}
        {Lisp-Entry "restart-name" method #f 197 20 197 32 ("name" "'name" "get-property" "restart" "process")}
        {Lisp-Entry "restart-message" method #f 201 20 201 35 ("message" "'message" "get-property" "restart" "process")}
        {Lisp-Entry "restart-stop" method #f 205 20 205 32 ("restart-stop" "restart" "process")}
        {Lisp-Entry "stop=?" method #f 214 20 214 26 ("eq?" "y" "x")}
        {Lisp-Entry "stop-kind" method #f 219 20 219 29 ("get-parent" "first-child" "eq?" "exception" "'exception" "get-property" "and" "if" "stop" "process")}
        {Lisp-Entry "stop-reason" method #f 227 20 227 31 ("exception" "'exception" "get-property" "stop" "process")}
        {Lisp-Entry "stop-detail" method #f 231 20 231 31 ("detail" "'detail" "get-property" "stop" "process")}
        {Lisp-Entry "stop-location" method #f 235 20 235 33 ("location" "'location" "get-property" "stop" "process")}
        {Lisp-Entry "stop-restarts" method #f 239 20 239 33 ("stop" "process")}
        {Lisp-Entry "stop-frames" method #f 243 20 243 31 ("get-children" "stop" "process")}
        {Lisp-Entry "continue-stop" method #f 247 20 247 33 ("stop" "process")}
        {Lisp-Entry "step-stop" method #f 251 20 251 29 ("command" "stop" "process")}
        {Lisp-Entry "frame=?" method #f 260 20 260 27 ("eq?" "y" "x")}
        {Lisp-Entry "frame-name" method #f 264 20 264 30 ("name" "'name" "get-property" "frame" "process")}
        {Lisp-Entry "frame-interpreted?" method #f 268 20 268 38 ("interpreted?" "'interpreted?" "get-property" "frame" "process")}
        {Lisp-Entry "frame-location" method #f 272 20 272 34 ("list" "get-column" "column" "get-line" "line" "get-file-definition" "get-file" "parse" "file" "locator->entry" "entry" "symbol?" "when" "'name" "get-property" "name" "let" "frame" "process")}
        {Lisp-Entry "frame-variables" method #f 283 20 283 35 ("get-children" "inspect-name/serial" "'serial" "serial" "'name" "get-property" "name" "let" "variable" "lambda" "map" "kind" "frame" "process")}
        {Lisp-Entry "setup-values" method #f 296 11 296 23 ("set-property" "'values" "find-node" "get-children" "table-set!" "'serial" "get-property" "serial" "value" "lambda" "for-each" "eqv?" "test:" "make-table" "values" "let" "process")}
        {Lisp-Entry "serial->value" method #f 305 11 305 24 ("values" "'values" "get-property" "table-ref" "serial" "process")}
        {Lisp-Entry "attach-process" method #f 314 11 314 25 ("get-debugger-manager" "attach-process" "self" "Debugged-Process" "new" "debugged-process" "let" "list" "append!" "set!" "setup-values" "lambda" "call-event" "process=?" "test:" "processes" "member?" "unless" "focus?" "process")}
        {Lisp-Entry "detach-process" method #f 325 11 325 25 ("self" "Debugged-Process" "new" "get-debugger-manager" "detach-process" "remove!" "set!" "lambda" "execute-event" "process=?" "test:" "processes" "member?" "when" "process")}}}})
"Swank-Debugger"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "Swank-Debugger.jazz"} 1288732033
    {Lisp-Entry "jazz.debugger.jazz.Swank-Debugger" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Swank-Debugger" class #f 56 7 56 21 ("initialize" "Debugger")
        {Lisp-Entry "processes" slot #f 59 8 59 17 ()}
        {Lisp-Entry "stops" slot #f 60 8 60 13 ()}
        {Lisp-Entry "start-debugger" method #f 68 20 68 34 ()}
        {Lisp-Entry "stop-debugger" method #f 72 20 72 33 ()}
        {Lisp-Entry "get-processes" method #f 76 20 76 33 ("processes" "validate-liveness?" "validate-liveness?:")}
        {Lisp-Entry "validate-processes" method #f 80 20 80 38 ()}
        {Lisp-Entry "detach-processes" method #f 84 20 84 36 ()}
        {Lisp-Entry "process=?" method #f 93 20 93 29 ("eq?" "y" "x")}
        {Lisp-Entry "process-live?" method #f 97 20 97 33 ("process")}
        {Lisp-Entry "process-title" method #f 101 20 101 33 ("get-title" "process")}
        {Lisp-Entry "process-icon" method #f 105 20 105 32 ("process")}
        {Lisp-Entry "process-threads" method #f 109 20 109 35 ("stops" "get-process" "process=?" "when" "get-thread" "thread" "let" "stop" "lambda" "collect" "process")}
        {Lisp-Entry "present-process" method #f 117 20 117 35 ("process-title" "process")}
        {Lisp-Entry "reload-process" method #f 121 20 121 34 ("process")}
        {Lisp-Entry "process-focusable?" method #f 125 20 125 38 ("process")}
        {Lisp-Entry "evaluate-expressions" method #f 129 20 129 40 ("col" "line" "container" "str" "syntax" "process")}
        {Lisp-Entry "inspect-serial" method #f 133 20 133 34 ("serial" "process")}
        {Lisp-Entry "process-detach" method #f 137 20 137 34 ("process")}
        {Lisp-Entry "process-exit" method #f 141 20 141 32 ("detach-process" "swank-disconnect" "process")}
        {Lisp-Entry "thread=?" method #f 151 20 151 28 ("get-id" "=" "get-process" "process=?" "and" "y" "x")}
        {Lisp-Entry "thread-name" method #f 156 20 156 31 ("thread" "process")}
        {Lisp-Entry "thread-state" method #f 160 20 160 32 ("thread" "process")}
        {Lisp-Entry "thread-stops" method #f 164 20 164 32 ("stops" "get-thread" "thread=?" "stop" "lambda" "collect-if" "thread" "process")}
        {Lisp-Entry "thread-active-stop" method #f 170 20 170 38 ("last" "null?" "if" "thread-stops" "stops" "let" "thread" "process")}
        {Lisp-Entry "break-thread" method #f 177 20 177 32 ("thread" "process")}
        {Lisp-Entry "set-repl-frame" method #f 181 20 181 34 ("frame" "thread" "process")}
        {Lisp-Entry "restart=?" method #f 190 20 190 29 ("eq?" "y" "x")}
        {Lisp-Entry "restart-name" method #f 194 20 194 32 ("get-title" "restart" "process")}
        {Lisp-Entry "restart-message" method #f 198 20 198 35 ("get-message" "get-title" "format" "restart" "process")}
        {Lisp-Entry "restart-stop" method #f 202 20 202 32 ("get-rank" "swank-restart" "restart" "process")}
        {Lisp-Entry "stop=?" method #f 211 20 211 26 ("get-id" "=" "get-thread" "thread=?" "and" "y" "x")}
        {Lisp-Entry "stop-kind" method #f 216 20 216 29 ("exception" "'exception" "stop" "process")}
        {Lisp-Entry "stop-reason" method #f 220 20 220 31 ("get-condition" "car" "stop" "process")}
        {Lisp-Entry "stop-detail" method #f 224 20 224 31 ("stop" "process")}
        {Lisp-Entry "stop-location" method #f 228 20 228 33 ("stop" "process")}
        {Lisp-Entry "stop-restarts" method #f 232 20 232 33 ("get-restarts" "stop" "process")}
        {Lisp-Entry "stop-frames" method #f 236 20 236 31 ("get-frames" "stop" "process")}
        {Lisp-Entry "continue-stop" method #f 240 20 240 33 ("stop" "process")}
        {Lisp-Entry "step-stop" method #f 244 20 244 29 ("command" "stop" "process")}
        {Lisp-Entry "frame=?" method #f 253 20 253 27 ("eq?" "y" "x")}
        {Lisp-Entry "frame-name" method #f 257 20 257 30 ("cadr" "frame" "process")}
        {Lisp-Entry "frame-interpreted?" method #f 261 20 261 38 ("frame" "process")}
        {Lisp-Entry "frame-location" method #f 265 20 265 34 ("frame" "process")}
        {Lisp-Entry "frame-variables" method #f 269 20 269 35 ("car" "swank-frame-variables" "mutable?:" ":raw" "kind:" "package-info" "cons" "mutable?" ":value" "value" ":name" "getf" "name" "let" "variable" "lambda" "map" "kind" "frame" "process")}
        {Lisp-Entry "attach-process" method #f 283 11 283 25 ("get-debugger-manager" "attach-process" "self" "Debugged-Process" "new" "debugged-process" "let" "list" "append!" "set!" "lambda" "call-event" "process=?" "test:" "processes" "member?" "unless" "focus?" "process")}
        {Lisp-Entry "detach-process" method #f 293 11 293 25 ("self" "Debugged-Process" "new" "get-debugger-manager" "detach-process" "remove!" "set!" "lambda" "execute-event" "process=?" "test:" "processes" "member?" "when" "process")}
        {Lisp-Entry "swank-port-number" definition #f 306 14 306 31 ("4005")}
        {Lisp-Entry "swank-connect" method #f 310 11 310 24 ("format" "console-write" "when" "set-console" "register-console" "text" "attach-process" "swank-create-repl" ":name" "and" "set-package-name" ":pid" "set-process-id" "set-title" ":version" "version" ":type" "type" ":package" "package" ":lisp-implementation" "getf" "implementation" "swank-connection-info" "info" "Swank-Process" "new" "process" "swank-port-number" "port-number:" "list" "open-tcp-client" "port" "let")}
        {Lisp-Entry "swank-disconnect" method #f 329 11 329 27 ("unregister-console" "get-port" "close-port" "get-console" "console" "let" "process")}
        {Lisp-Entry "register-console" method #f 335 11 335 27 ("acquire-focus" "when" "set-console-resource" "set-console" "start-swank-repl" "register-debugger-resource" "unregister-console" "lambda" "Debugger-Resource" "new" "resource" "port" "register-console" "get-console-manager" "manager" "let" "set-console-port" "permanent-close:" "list" "open-string-pipe" "tail" "head" "receive" "text" "setup-debugger-console-ports" "define" "select?" "title" "process")}
        {Lisp-Entry "unregister-console" method #f 359 11 359 29 ("get-console-text-manager" "unregister-console" "text")}
        {Lisp-Entry "console-write" method #f 363 11 363 24 ("insert-formatted-line" "text-ending" "set-caret" "lambda" "execute-event" "get-console" "text" "let" "str" "process")}
        {Lisp-Entry "start-swank-repl" method #f 371 11 371 27 ("'swank-repl" "lambda" "new-thread" "thread-start!" "format" ">" "level" "swank-eval" "swank-disconnect" "begin" "eof-object?" "if" "read" "expr" "0" "prompt" "console-write" "loop" "let" "swank-repl" "define" "port" "process")}
        {Lisp-Entry "register-stop" method #f 395 11 395 24 ("get-debugger-manager" "register-stop" "cons" "stops" "set!" "lambda" "execute-event" "Debugged-Stop" "debugged-stop" "Debugged-Thread" "debugged-thread" "self" "Debugged-Process" "new" "debugged-process" "let" "stop" "thread" "process")}
        {Lisp-Entry "unregister-stop" method #f 405 11 405 26 ("get-debugger-manager" "unregister-stop" "stop=?" "test:" "remove!" "stops" "set!" "lambda" "execute-event" "Debugged-Stop" "debugged-stop" "Debugged-Thread" "debugged-thread" "self" "Debugged-Process" "new" "debugged-process" "let" "stop" "thread" "process")}
        {Lisp-Entry "swank-connection-info" method #f 415 11 415 32 ("wait-swank-response" ",id" "t" "swank:connection-info" ":emacs-rex" "send-swank-message" "swank-unique-id" "id" "let" "process")}
        {Lisp-Entry "swank-create-repl" method #f 421 11 421 28 ("wait-swank-response" ",id" "t" ",package" "nil" "swank:create-repl" ":emacs-rex" "send-swank-message" "swank-unique-id" "id" "get-package-name" "package" "let" "process")}
        {Lisp-Entry "swank-eval" method #f 428 11 428 21 ("wait-swank-response" ",id" ":repl-thread" ",package" ",str" "swank:listener-eval" ":emacs-rex" "send-swank-message" "format" "str" "swank-unique-id" "id" "get-package-name" "package" "let" "expr" "process")}
        {Lisp-Entry "swank-frame-variables" method #f 436 11 436 32 ("swank-decode" "append" "wait-swank-response" "catch-tags" "locals" "bind" ",id" ":repl-thread" ",package" ",frame" "swank:frame-locals-and-catch-tags" ":emacs-rex" "send-swank-message" "swank-unique-id" "id" "get-package-name" "package" "let" "kind" "frame" "process")}
        {Lisp-Entry "swank-decode" method #f 446 11 446 23 ("nil" "'nil" "eq?" "if" "expr")}
        {Lisp-Entry "swank-restart" method #f 452 11 452 24 ("wait-swank-response" ",id" "0" ",package" ",n" "1" "swank:invoke-nth-restart-for-emacs" ":emacs-rex" "send-swank-message" "swank-unique-id" "id" "get-package-name" "package" "let" "n" "process")}
        {Lisp-Entry "swank-debug-return" method #f 459 11 459 29 ("unregister-stop" "when" "stops" "get-level" "=" "get-thread" "thread=?" "and" "lambda" "find-if" "stop" "Swank-Thread" "new" "let" "level" "thread" "process")}
        {Lisp-Entry "swank-unique-id" method #f 469 11 469 26 ("generate-unique-id" "process")}
        {Lisp-Entry "send-swank-message" method #f 473 11 473 29 ("force-output" "display" "message-length" ":reader" "->string" "get-port" "port" "let" "cardinality" "format" "message" "encode-length" "define" "expr" "process")}
        {Lisp-Entry "receive-swank-response" method #f 485 11 485 33 ("read-string-element" "response" "16" "string->number" "count" "0" "read-substring" "=" "when" "6" "make-string" "header" "get-port" "port" "let" "process")}
        {Lisp-Entry "receive-swank-response-non-blocking" method #f 495 11 495 46 ("read-string-element" "response" "16" "string->number" "count" "0" "read-substring" "=" "when" "0.1" "input-port-timeout-set!" "6" "make-string" "header" "get-port" "port" "let" "process")}
        {Lisp-Entry "wait-swank-response" method #f 507 11 507 30 ("else" "register-stop" "Swank-Stop" "stop" "Swank-Thread" "memv" "ids" "frames" "condition" "level" "thread" "bind" ":debug" "process-swank-problem" "process-swank-abort" ":abort" ":ok" "=" "caddr" "id" ":return" "case" "kind" "not" "if" "receive-swank-response" "process-swank-event" "when" "receive-swank-response-non-blocking" "response" "loop" "process-events" "length" "0" "naturals" "Swank-Restart" "new" "cadr" "message" "car" "title" "let" "rank" "restart" "lambda" "map" "restarts" "create-restarts" "define" "target-id" "process")}
        {Lisp-Entry "process-swank-abort" method #f 557 11 557 30 ("'abort" "swank" "'swank" "debug" "abort" "process")}
        {Lisp-Entry "process-swank-problem" method #f 563 11 563 32 ("'problem" "swank" "'swank" "debug" "problem" "process")}
        {Lisp-Entry "process-swank-event" method #f 568 11 568 30 ("'event" "swank" "'swank" "debug" "else" "caddr" "swank-debug-return" ":debug-return" ":indentation-update" ":new-features" "cadr" "console-write" ":write-string" "case" "car" "kind" "let" "event" "process")}}}})
"Swank-Process"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "Swank-Process.jazz"} 1288732033
    {Lisp-Entry "jazz.debugger.jazz.Swank-Process" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Swank-Process" class #f 45 7 45 20 ("1" "initialize" "Object")
        {Lisp-Entry "port" slot #f 48 8 48 12 ()}
        {Lisp-Entry "get-port" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "title" slot #f 49 8 49 13 ()}
        {Lisp-Entry "get-title" accessor #f 49 49 49 57 ()}
        {Lisp-Entry "set-title" accessor #f 49 49 49 57 ()}
        {Lisp-Entry "console" slot #f 50 8 50 15 ()}
        {Lisp-Entry "get-console" accessor #f 50 49 50 57 ()}
        {Lisp-Entry "set-console" accessor #f 50 49 50 57 ()}
        {Lisp-Entry "console-resource" slot #f 51 8 51 24 ()}
        {Lisp-Entry "get-console-resource" accessor #f 51 49 51 57 ()}
        {Lisp-Entry "set-console-resource" accessor #f 51 49 51 57 ()}
        {Lisp-Entry "package-name" slot #f 52 8 52 20 ()}
        {Lisp-Entry "get-package-name" accessor #f 52 49 52 57 ()}
        {Lisp-Entry "set-package-name" accessor #f 52 49 52 57 ()}
        {Lisp-Entry "process-id" slot #f 53 8 53 18 ()}
        {Lisp-Entry "get-process-id" accessor #f 53 49 53 57 ()}
        {Lisp-Entry "set-process-id" accessor #f 53 49 53 57 ()}
        {Lisp-Entry "unique-id" slot #f 54 8 54 17 ()}
        {Lisp-Entry "initialize" method #f 57 20 57 30 ("port~self" "set!" "port")}
        {Lisp-Entry "generate-unique-id" method #f 61 18 61 36 ("increase!" "unique-id" "prog1")}}}})
"Swank-Restart"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "Swank-Restart.jazz"} 1288732033
    {Lisp-Entry "jazz.debugger.jazz.Swank-Restart" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Swank-Restart" class #f 45 7 45 20 ("Object")
        {Lisp-Entry "title" slot #f 48 8 48 13 ()}
        {Lisp-Entry "get-title" accessor #f 48 23 48 31 ()}
        {Lisp-Entry "message" slot #f 49 8 49 15 ()}
        {Lisp-Entry "get-message" accessor #f 49 23 49 31 ()}
        {Lisp-Entry "rank" slot #f 50 8 50 12 ()}
        {Lisp-Entry "get-rank" accessor #f 50 23 50 31 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("rank~self" "message~self" "title~self" "set!" "nextmethod" "rank" "message" "title")}}}})
"Swank-Snooper"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "Swank-Snooper.jazz"} 1288732033
    {Lisp-Entry "jazz.debugger.jazz.Swank-Snooper" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Swank-Snooper" class #f 44 7 44 20 ("Object")
        {Lisp-Entry "swank-port-number" definition #f 47 14 47 31 ("4005")}
        {Lisp-Entry "snooper-port-number" definition #f 50 14 50 33 ("4006")}
        {Lisp-Entry "snooper-thread" definition #f 53 14 53 28 ()}
        {Lisp-Entry "snooper-stop?" definition #f 56 14 56 27 ()}
        {Lisp-Entry "start" method #f 60 11 60 16 ("snooper" "'snooper" "unless" "connection" "'connection" "received" "'received" "read" "snooper-port-number" "open-tcp-server" "server-port" "snooper-stop?" "append:" "get-eol-encoding" "eol-encoding:" "path:" "call-with-output-file" "snooper-thread" "set!" "continuation-capture" "newline" "pp" "<---" "'<---" "display" "force-output" "read-string-element" "format" "--->" "'--->" "message" "16" "string->number" "count" "0" "read-substring" "=" "when" "6" "make-string" "header" "loop" "exc" "with-exception-catcher" "'done" "close-port" "thread-join!" "snoop-swank" "swank-thread" "slime" "'slime" "snoop-slime" "lambda" "new-thread" "thread-start!" "slime-thread" "at" "'at" "to" "'to" "connected" "'connected" "swank-port-number" "port-number:" "list" "open-tcp-client" "swank-port" "let" "swank" "'swank" "for" "'for" "waiting" "'waiting" "done" "file-port" "slime-port" "snoop" "define" "feedback")}
        {Lisp-Entry "stop" method #f 144 11 144 15 ("done" "'done" "snooper" "'snooper" "thread-exit" "snooper-thread" "thread-interrupt!" "snooper-stop?" "set!" "feedback")}}}})
"Swank-Stop"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "Swank-Stop.jazz"} 1288732033
    {Lisp-Entry "jazz.debugger.jazz.Swank-Stop" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Swank-Stop" class #f 45 7 45 17 ("Object")
        {Lisp-Entry "thread" slot #f 48 8 48 14 ()}
        {Lisp-Entry "get-thread" accessor #f 48 25 48 33 ()}
        {Lisp-Entry "id" slot #f 49 8 49 10 ()}
        {Lisp-Entry "get-id" accessor #f 49 25 49 33 ()}
        {Lisp-Entry "level" slot #f 50 8 50 13 ()}
        {Lisp-Entry "get-level" accessor #f 50 25 50 33 ()}
        {Lisp-Entry "condition" slot #f 51 8 51 17 ()}
        {Lisp-Entry "get-condition" accessor #f 51 25 51 33 ()}
        {Lisp-Entry "restarts" slot #f 52 8 52 16 ()}
        {Lisp-Entry "get-restarts" accessor #f 52 25 52 33 ()}
        {Lisp-Entry "frames" slot #f 53 8 53 14 ()}
        {Lisp-Entry "get-frames" accessor #f 53 25 53 33 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("frames~self" "restarts~self" "condition~self" "level~self" "id~self" "thread~self" "set!" "nextmethod" "frames" "restarts" "condition" "level" "id" "thread")}}}})
"Swank-Thread"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "Swank-Thread.jazz"} 1288732033
    {Lisp-Entry "jazz.debugger.jazz.Swank-Thread" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Swank-Thread" class #f 45 7 45 19 ("Object")
        {Lisp-Entry "process" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-process" accessor #f 48 23 48 31 ()}
        {Lisp-Entry "id" slot #f 49 8 49 10 ()}
        {Lisp-Entry "get-id" accessor #f 49 23 49 31 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("id~self" "process~self" "set!" "nextmethod" "id" "process")}}}})
"_jazz"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "_jazz.jazz"} 1288732033
    {Lisp-Entry "jazz.debugger.jazz" module #f 37 8 37 26 ("jazz")}})
"autoload"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "autoload.jazz"} 1288732033
    {Lisp-Entry "jazz.debugger.jazz.autoload" module #f 37 18 37 45 ("jazz")}})
"project"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "data" "project.jazz"} 1290002589
    {Lisp-Entry "jazz.debugger.jazz.data.project" module #f 37 8 37 39 ("jazz")}})
"stub"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "stub.jazz"} 1288732033
    {Lisp-Entry "jazz.debugger.jazz.stub" module #f 37 8 37 31 ("jazz")
      {Lisp-Entry "Jazz-Debugger" remotable-stub "~stub" 43 16 43 29 ()
        {Lisp-Entry "attach-process" method #f 46 23 46 37 ("focus?" "process")}
        {Lisp-Entry "ready-process" method #f 47 23 47 36 ("cookie" "process")}
        {Lisp-Entry "update-process" method #f 48 23 48 37 ("process")}
        {Lisp-Entry "detach-process" method #f 49 23 49 37 ("process")}
        {Lisp-Entry "register-console" method #f 50 23 50 39 ("select?" "thread" "process")}
        {Lisp-Entry "unregister-console" method #f 51 23 51 41 ("console")}
        {Lisp-Entry "select-console" method #f 52 23 52 37 ("console")}
        {Lisp-Entry "console-output" method #f 53 23 53 37 ("line" "console")}
        {Lisp-Entry "status-message" method #f 54 23 54 37 ("message")}
        {Lisp-Entry "get-toplevel-hwnd" method #f 55 23 55 40 ()}
        {Lisp-Entry "debuggee-stop" method #f 56 23 56 36 ("reason" "kind" "stop" "thread" "process")}
        {Lisp-Entry "register-stop" method #f 57 23 57 36 ("rest" "stop" "thread" "process")}
        {Lisp-Entry "unregister-stop" method #f 58 23 58 38 ("stop" "thread" "process")}
        {Lisp-Entry "inspect" method #f 59 23 59 30 ("info" "process")}}}})
"stub-autoload"
 ({Lisp-File-Entry {File jazz.debugger.jazz "src" "jazz" "debugger" "jazz" "stub-autoload.jazz"} 1288732033
    {Lisp-Entry "jazz.debugger.jazz.stub-autoload" module #f 37 8 37 40 ("jazz")}})
