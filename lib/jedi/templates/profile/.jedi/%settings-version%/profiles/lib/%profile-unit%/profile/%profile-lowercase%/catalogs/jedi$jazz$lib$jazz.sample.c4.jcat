"C4-AI"
 ({Lisp-File-Entry {File :context "src" "jazz" "sample" "c4" "C4-AI.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.sample.c4.C4-AI" module #f 38 18 38 38 ("jazz")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.sample.game.minimax" "jazz.sample.c4")}
      {Lisp-Entry "proclaim" anonymous #f 45 1 45 9 ("optimizations" "warn")}
      {Lisp-Entry "C4-AI" class #f 48 7 48 12 ("Search-Depth" "0" "initialize" "fx" "<fx>" "C4-Player")
        {Lisp-Entry "current-eval" slot #f 51 8 51 20 ()}
        {Lisp-Entry "get-current-eval" accessor #f 51 60 51 68 ()}
        {Lisp-Entry "set-current-eval" accessor #f 51 60 51 68 ()}
        {Lisp-Entry "all-lines" slot #f 52 8 52 17 ()}
        {Lisp-Entry "get-all-lines" accessor #f 52 60 52 68 ()}
        {Lisp-Entry "set-all-lines" accessor #f 52 60 52 68 ()}
        {Lisp-Entry "search-depth" slot #f 53 8 53 20 ()}
        {Lisp-Entry "get-search-depth" accessor #f 53 60 53 68 ()}
        {Lisp-Entry "set-search-depth" accessor #f 53 60 53 68 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("setup-lines" "nextmethod" "me" "game")}
        {Lisp-Entry "player-kind" method #f 61 20 61 31 ("computer")}
        {Lisp-Entry "move-played" method #f 65 20 65 31 ("evaluate-move-delta" "+" "current-eval" "set!" "token" "move")}
        {Lisp-Entry "computer-move" method #f 69 20 69 33 ("search-depth" "search-depth:" "current-eval" "current-eval:" "evaluate-move-delta" "evaluate-position" "unplay" "play" "iterate-candidates" "me" "minimax")}
        {Lisp-Entry "iterate-moves" method #f 80 11 80 24 ("when" "available-move" "available-move~" "square" "let" "game" "get-board-columns" "get-board-columns~" "below" "0" "from" "col" "for" "loop" "proc")}
        {Lisp-Entry "iterate-candidates" method #f 87 11 87 29 ("game" "get-board-columns" "get-board-columns~" "iterate-moves" "for-each" "proc" "gather-candidates" "token")}
        {Lisp-Entry "play" method #f 91 11 91 15 ("game" "play" "play~" "token" "move")}
        {Lisp-Entry "unplay" method #f 95 11 95 17 ("game" "unplay" "unplay~" "move")}
        {Lisp-Entry "evaluate-position" method #f 104 11 104 28 ("evaluate-line" "increase!" "all-lines" "in" "line" "for" "loop" "0" "total" "let" "fx" "<fx>")}
        {Lisp-Entry "evaluate-line" method #f 111 11 111 24 ("evaluate-count" "+" "0" ">" "and" "if" "opponent" "opponent-count" "me" "count-token" "count-token~" "me-count" "let" "fx" "<fx>" "4-Line" "<4-Line>" "line")}
        {Lisp-Entry "evaluate-move-delta" method #f 121 11 121 30 ("+" "set!" "evaluate-count" "else" "evaluate-line-delta" "=" "1" ">" "and" "cond" "delta" "-1" "*" "other-count" "count-token" "count-token~" "who-count" "get-lines" "get-lines~" "in" "line" "for" "loop" "0" "total" "let" "fx" "<fx>" "token" "Square" "<Square>" "square")}
        {Lisp-Entry "evaluate-line-delta" definition #f 137 15 137 34 ("10" "1" "90" "2" "900" "3" "999000" "4" "case" "cast" "*" "token" "fx" "<fx>" "count")}
        {Lisp-Entry "evaluate-count" definition #f 146 15 146 29 ("0" "10" "1" "100" "2" "1000" "3" "1000000" "4" "case" "cast" "*" "token" "fx" "<fx>" "count")}
        {Lisp-Entry "setup-lines" method #f 161 11 161 22 ("get-lines" "get-lines~" "cons" "line=?" "test:" "member?" "not" "when" "line" "lambda" "for-each" "board-ref" "board-ref~" "square" "let" "game" "get-board-size" "get-board-size~" "below" "0" "from" "rank" "for" "loop" "all-lines" "set!")}}}})
"C4-Application"
 ({Lisp-File-Entry {File :context "src" "jazz" "sample" "c4" "C4-Application.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.sample.c4.C4-Application" module #f 38 18 38 47 ("jazz")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.ui.view" "jazz.ui" "jazz.system.application" "jazz.sample.c4" "jazz.jml")}
      {Lisp-Entry "C4-Application" class #f 53 7 53 21 ("Application")
        {Lisp-Entry "process-name" method #f 56 20 56 32 ()}
        {Lisp-Entry "new-toplevel" method #f 60 20 60 32 ("C4-Toplevel" "new")}
        {Lisp-Entry "finish-process" method #f 64 20 64 34 ("C4-Board" "new-frame" "current-stage" "maximize" "maximize~" "nextmethod")}}
      {Lisp-Entry "C4-Toplevel" class #f 75 7 75 18 ("Toplevel")
        {Lisp-Entry "form" anonymous #f 78 3 78 7 ("625" "800" "Dimension" "size:" "100" "Point" "position:" "caption-base:" "install" "<install>")}}}})
"C4-Board"
 ({Lisp-File-Entry {File :context "src" "jazz" "sample" "c4" "C4-Board.jazz"} 1301518487 jazz
    {Lisp-Entry "jazz.sample.c4.C4-Board" module #f 38 18 38 41 ("jazz")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.ui.window" "jazz.ui" "jazz.sample.c4" "jazz.media" "jazz.library" "jazz.io" "jazz.graphic")}
      {Lisp-Entry "C4-Board" class #f 50 7 50 15 ("initialize" "View")
        {Lisp-Entry "game" slot #f 53 8 53 12 ()}
        {Lisp-Entry "get-game" accessor #f 53 50 53 58 ()}
        {Lisp-Entry "display-evaluations?" slot #f 55 8 55 28 ()}
        {Lisp-Entry "get-display-evaluations?" accessor #f 55 53 55 61 ()}
        {Lisp-Entry "set-display-evaluations?" accessor #f 55 53 55 61 ()}
        {Lisp-Entry "last-move" slot #f 56 8 56 17 ()}
        {Lisp-Entry "get-last-move" accessor #f 56 53 56 61 ()}
        {Lisp-Entry "set-last-move" accessor #f 56 53 56 61 ()}
        {Lisp-Entry "last-token" slot #f 57 8 57 18 ()}
        {Lisp-Entry "get-last-token" accessor #f 57 53 57 61 ()}
        {Lisp-Entry "set-last-token" accessor #f 57 53 57 61 ()}
        {Lisp-Entry "last-v" slot #f 58 8 58 14 ()}
        {Lisp-Entry "get-last-v" accessor #f 58 53 58 61 ()}
        {Lisp-Entry "set-last-v" accessor #f 58 53 58 61 ()}
        {Lisp-Entry "host-icon" method #f 66 25 66 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 70 25 70 35 ()}
        {Lisp-Entry "host-position" method #f 74 25 74 38 ("70" "90" "Point")}
        {Lisp-Entry "host-size" method #f 78 25 78 34 ("624" "884" "Dimension")}
        {Lisp-Entry "finish" method #f 82 20 82 26 ("initialize-board" "RED" "C4-AI" "GREEN" "C4-Human" "list" "register-players" "register-players~" "C4-Game" "new" "game" "set!" "nextmethod" "rest")}
        {Lisp-Entry "destroy" method #f 89 20 89 27 ("nextmethod" "close-ambiance")}
        {Lisp-Entry "initialize-board" method #f 95 11 95 27 ("computer-move~" "play-move" "play-move~" "computer-move" "move" "let" "COMPUTER" "game" "invalidate-view~" "HUMAN" "who" "eq?" "cond" "invalidate-view" "play-ambiance" "play-intro" "close-ambiance")}
        {Lisp-Entry "play-move" method #f 122 11 122 20 ("play-defeat" "COMPUTER" "play-victory" "HUMAN" "who" "cond" "computer-move" "computer-move~" "computer?" "computer?~" "player" "play" "get-status" "get-status~" "eq?" "increase!" "redraw-view" "<" "when" "loop" "60" "last-v" "get-next-player" "get-next-player~" "get-me" "get-me~" "last-token" "last-move" "set!" "70" "get-line" "get-line~" "*" "100" "+" "end-v" "let" "25" "fall-speed" "invalidate-view" "game" "play-move" "play-move~" "move-animation" "board-play" "define" "move")}
        {Lisp-Entry "draw" method #f 161 20 161 24 ("get-last-evaluations" "get-last-evaluations~" "24" "increase!" "Dark-Green" "get-last-move" "get-last-move~" "=" "if" "eval" "lambda" "for-each" "225" "v" "c" "Text" "get-last-time" "get-last-time~" "175" "get-last-evaluations-count" "get-last-evaluations-count~" "150" "get-last-eval" "get-last-eval~" "display-evaluations?" "and" "get-search-depth" "get-search-depth~" "650" "Heading3" "Ochre" "draw" "get-winner" "get-winner~" "present" "present~" "format" "win" "case" "last-token" "last-move" "get-col" "get-col~" "last-v" "Green" "else" "Red" "RED" "White" "ellipse" "ellipse~" "EMPTY" "eq?" "cond" "50" "70" "*" "+" "Rect" "new" "rect" "get-square" "get-square~" "get-token" "get-token~" "token" "get-board-columns" "get-board-columns~" "col" "get-board-rows" "get-board-rows~" "below" "0" "from" "row" "for" "loop" "when" "game" "get-status" "get-status~" "status" "let" "30" "Yellow" "Dark-Blue" "Color" "get-bounds" "fill-rect" "fill-rect~" "525" "100" "draw-text" "draw-text~" "Heading1" "Font" "set-font" "set-font~" "set-text-color" "set-text-color~" "color" "message" "draw-status" "define" "lv" "lh" "context" "surface")}
        {Lisp-Entry "cursor-update" method #f 214 20 214 33 (":arrow" ":finger" "if" "set-cursor" "legal-column" "col" "let" "pos")}
        {Lisp-Entry "mouse-down" method #f 219 20 219 30 ("game" "available-move" "available-move~" "play-move" "when" "legal-column" "col" "let" "pos")}
        {Lisp-Entry "legal-column" method #f 225 11 225 23 ("available-move" "available-move~" "0" "90" "-" "/" "truncate" "col" "get-board-rows" "get-board-rows~" "-20" "70" "get-board-columns" "get-board-columns~" "*" "+" "<" "100" ">=" "and" "get-v" "get-v~" "v" "get-h" "get-h~" "h" "let" "play" "game" "get-status" "get-status~" "eq?" "if" "pos")}
        {Lisp-Entry "restart-game" method #f 244 11 244 23 ("self" "initialize-game" "who")}
        {Lisp-Entry "toggle-evaluations" method #f 248 11 248 29 ("invalidate-view" "not" "display-evaluations?" "set!")}
        {Lisp-Entry "set-search-depth" method #f 253 11 253 27 ("invalidate-view" "+" "get-up" "get-up~" "computer-move" "computer-move~" "get-current-eval" "get-current-eval~" "-" "set-current-eval" "set-current-eval~" "get-col" "get-col~" "set-column-move" "set-column-move~" "EMPTY" "set-token" "set-token~" "evaluate-move-delta" "evaluate-move-delta~" "delta" "-1" "get-next-player" "get-next-player~" "*" "who" "let" "get-last-move" "get-last-move~" "when" "game" "set-search-depth" "set-search-depth~" "depth")}
        {Lisp-Entry "play-computer" method #f 268 11 268 24 ("play-move" "computer-move" "computer-move~" "move" "let" "play" "game" "get-status" "get-status~" "eq?" "when")}
        {Lisp-Entry "key-press" method #f 279 20 279 29 ("play-computer" "9" "8" "7" "6" "5" "4" "3" "2" "1" "set-search-depth" "exit" "test" "self" "load-board" "toggle-evaluations" "COMPUTER" "HUMAN" "game" "get-who-starts" "get-who-starts~" "or" "restart-game" "case" "c")}}
      {Lisp-Entry "play-intro?" definition #f 310 12 310 23 ()}
      {Lisp-Entry "play-ambiance?" definition #f 313 12 313 26 ()}
      {Lisp-Entry "intro-directory" definition #f 317 12 317 27 ("Home" "Directory")}
      {Lisp-Entry "ambiance-directory" definition #f 320 12 320 30 ("Home" "Directory")}
      {Lisp-Entry "victory-directory" definition #f 323 12 323 29 ("Home" "Directory")}
      {Lisp-Entry "defeat-directory" definition #f 326 12 326 28 ("Home" "Directory")}
      {Lisp-Entry "play-intro" definition #f 330 13 330 23 ("asynchronous?:" "play-sound" "intro-directory" "random-file" "sound" "let" "play-intro?" "when")}
      {Lisp-Entry "play-ambiance" definition #f 337 13 337 26 ("play-music" "open-music" "ambiance-directory" "random-file" "music" "let" "play-ambiance?" "when")}
      {Lisp-Entry "close-ambiance" definition #f 344 13 344 27 ("close-music")}
      {Lisp-Entry "play-victory" definition #f 348 13 348 25 ("play-sound" "when" "victory-directory" "random-file" "sound" "let")}
      {Lisp-Entry "play-defeat" definition #f 353 13 353 24 ("play-sound" "when" "defeat-directory" "random-file" "sound" "let")}
      {Lisp-Entry "random-file" definition #f 359 13 359 24 ("random-element" "not-null?" "get-extension" "get-extension~" "extension=?" "file" "lambda" "collect-files" "collect-files~" "files" "let" "exists?" "exists?~" "if" "extension" "directory")}
      {Lisp-Entry "test" definition #f 376 13 376 17 ()}
      {Lisp-Entry "inspect-board" definition #f 381 13 381 26 ("newline" "COMPUTER" "HUMAN" "EMPTY" "eq?" "cond" "display" "get-square" "get-square~" "get-token" "get-token~" "token" "let" "get-board-columns" "get-board-columns~" "col" "get-board-rows" "get-board-rows~" "below" "0" "from" "row" "for" "loop" "game")}}})
"C4-Game"
 ({Lisp-File-Entry {File :context "src" "jazz" "sample" "c4" "C4-Game.jazz"} 1301518487 jazz
    {Lisp-Entry "jazz.sample.c4.C4-Game" module #f 0 18 0 40 ("jazz")
      {Lisp-Entry "import" anonymous #f 3 1 3 7 ("jazz.sample.game" "jazz.sample.c4")}
      {Lisp-Entry "C4-Game" class #f 7 7 7 14 ("initialize" "Game")
        {Lisp-Entry "board-rows" slot #f 11 8 11 18 ()}
        {Lisp-Entry "get-board-rows" accessor #f 11 49 11 57 ()}
        {Lisp-Entry "set-board-rows" accessor #f 11 49 11 57 ()}
        {Lisp-Entry "board-columns" slot #f 12 8 12 21 ()}
        {Lisp-Entry "get-board-columns" accessor #f 12 49 12 57 ()}
        {Lisp-Entry "set-board-columns" accessor #f 12 49 12 57 ()}
        {Lisp-Entry "board-size" slot #f 13 8 13 18 ()}
        {Lisp-Entry "get-board-size" accessor #f 13 49 13 57 ()}
        {Lisp-Entry "set-board-size" accessor #f 13 49 13 57 ()}
        {Lisp-Entry "board" slot #f 14 8 14 13 ()}
        {Lisp-Entry "get-board" accessor #f 14 49 14 57 ()}
        {Lisp-Entry "set-board" accessor #f 14 49 14 57 ()}
        {Lisp-Entry "available-moves" slot #f 17 8 17 23 ()}
        {Lisp-Entry "get-available-moves" accessor #f 17 49 17 57 ()}
        {Lisp-Entry "set-available-moves" accessor #f 17 49 17 57 ()}
        {Lisp-Entry "initialize" method #f 20 20 20 30 ("setup-lines" "available-moves" "*" "set!" "nextmethod" "7" "columns" "6" "rows" "bind-keywords" "+" "set-down" "set-down~" "find-square" "set-up" "set-up~" "square" "setup-squares" "get-square" "1" "-" "bottom-row" "moves" "make-availables" "self" "Square" "new" "vector-set!" "square-rank" "rank" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop" "board-size" "make-vector" "board" "let" "make-board" "define" "rest")}
        {Lisp-Entry "directions" definition #f 59 14 59 24 ("-1" "1" "0")}
        {Lisp-Entry "setup-lines" method #f 66 11 66 22 ("compute-lines" "set-lines" "set-lines~" "board-ref" "square" "let" "board-size" "below" "0" "from" "rank" "for" "loop")}
        {Lisp-Entry "compute-lines" method #f 72 11 72 24 ("4-Line" "new" "cons" "set!" "and" "if" "3" "d" "2" "c" "1" "b" "+" "find-next" "a" "0" "to" "-3" "from" "n" "directions" "in" "dir" "for" "loop" "lines" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "let" "square")}
        {Lisp-Entry "find-next" method #f 87 11 87 20 ("cdr" "car" "*" "+" "find-square" "n" "col" "line" "dir")}
        {Lisp-Entry "iterate-board" method #f 98 18 98 31 ("get-square" "do" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop" "proc")}
        {Lisp-Entry "board-ref" method #f 104 18 104 27 ("board" "vector-ref" "Square" "<Square>" "rank")}
        {Lisp-Entry "square-rank" method #f 108 18 108 29 ("board-columns" "*" "+" "fx" "<fx>" "col" "row")}
        {Lisp-Entry "get-square" method #f 112 18 112 28 ("square-rank" "board-ref" "Square" "<Square>" "col" "row")}
        {Lisp-Entry "find-square" method #f 116 11 116 22 ("get-square" "board-columns" "board-rows" "<" "0" ">=" "and" "if" "Square+" "<Square+>" "col" "row")}
        {Lisp-Entry "available-move" method #f 128 18 128 32 ("available-moves" "vector-ref" "Square" "<Square>" "col")}
        {Lisp-Entry "set-available-move" method #f 132 18 132 36 ("available-moves" "vector-set!" "void" "<void>" "square" "col")}
        {Lisp-Entry "play" method #f 136 20 136 24 ("get-up" "get-up~" "get-col" "get-col~" "set-available-move" "set-token" "set-token~" "token" "move")}
        {Lisp-Entry "unplay" method #f 141 20 141 26 ("EMPTY" "set-token" "set-token~" "get-col" "get-col~" "set-available-move" "move")}
        {Lisp-Entry "play-move" method #f 151 20 151 29 ("check-status" "inform-players" "add-move" "play" "get-me" "get-me~" "token" "next-player!" "player" "let" "move")}
        {Lisp-Entry "win?" method #f 160 20 160 24 ("get-lines" "get-lines~" "some?" "4" "count-token" "count-token~" "=" "line" "line?" "define" "token" "move")}
        {Lisp-Entry "draw?" method #f 167 20 167 25 ("available-move" "some" "board-columns" "below" "0" "from" "col" "for" "loop" "not" "token" "move")}
        {Lisp-Entry "load-board" method #f 178 11 178 21 ("invalidate-view" "invalidate-view~" ">=" "if" "set-available-move" "length" "move" "COMPUTER" "O" "X" "case" "set-token" "set-token~" "get-square" "square" "let" "downto" "1" "board-rows" "-" "row" "token" "board-columns" "below" "0" "from" "col" "saved-board" "in" "tokens" "for" "loop" "HUMAN" "initialize-game" "game")}
        {Lisp-Entry "inspect-board" method #f 199 11 199 24 ("newline" "GREEN" "RED" "EMPTY" "eq?" "cond" "display" "get-square" "get-token" "get-token~" "token" "let" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop")}}}})
"C4-Human"
 ({Lisp-File-Entry {File :context "src" "jazz" "sample" "c4" "C4-Human.jazz"} 1301518487 jazz
    {Lisp-Entry "jazz.sample.c4.C4-Human" module #f 0 18 0 41 ("jazz")
      {Lisp-Entry "import" anonymous #f 3 1 3 7 ("jazz.sample.c4")}
      {Lisp-Entry "C4-Human" class #f 6 7 6 15 ("C4-Player")
        {Lisp-Entry "player-kind" method #f 9 20 9 31 ("human")}}}})
"_c4"
 ({Lisp-File-Entry {File :context "src" "jazz" "sample" "c4" "_c4.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.sample.c4" module #f 37 8 37 22 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.sample.c4.autoload")}
      {Lisp-Entry "import" anonymous #f 42 1 42 7 ("jazz.sample.game")}
      {Lisp-Entry "EMPTY" definition #f 45 20 45 25 ("0" "fx" "<fx>")}
      {Lisp-Entry "RED" definition #f 48 20 48 23 ("-1" "fx" "<fx>")}
      {Lisp-Entry "GREEN" definition #f 51 20 51 25 ("1" "fx" "<fx>")}
      {Lisp-Entry "Search-Depth" definition #f 55 20 55 32 ("5")}
      {Lisp-Entry "C4-Player" class #f 64 7 64 16 ("Player")
        {Lisp-Entry "game" slot #f 67 8 67 12 ()}
        {Lisp-Entry "get-game" accessor #f 67 24 67 32 ()}
        {Lisp-Entry "me" slot #f 68 8 68 10 ()}
        {Lisp-Entry "get-me" accessor #f 68 24 68 32 ()}
        {Lisp-Entry "opponent" slot #f 69 8 69 16 ()}
        {Lisp-Entry "get-opponent" accessor #f 69 24 69 32 ()}
        {Lisp-Entry "initialize" method #f 72 20 72 30 ("-1" "*" "opponent" "opponent~self" "me~self" "self" "game~self" "set!" "nextmethod" "me" "game")}
        {Lisp-Entry "print" method #f 79 20 79 25 ("me" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "present" method #f 85 11 85 18 ("GREEN" "me" "eq?" "if")}}
      {Lisp-Entry "Square" class #f 96 7 96 13 ("list" "<list>" "Square+" "<Square+>" "fx" "<fx>" "Object")
        {Lisp-Entry "game" slot #f 99 8 99 12 ()}
        {Lisp-Entry "get-game" accessor #f 99 31 99 39 ()}
        {Lisp-Entry "line" slot #f 100 8 100 12 ()}
        {Lisp-Entry "get-line" accessor #f 100 31 100 39 ()}
        {Lisp-Entry "col" slot #f 101 8 101 11 ()}
        {Lisp-Entry "get-col" accessor #f 101 31 101 39 ()}
        {Lisp-Entry "token" slot #f 102 8 102 13 ()}
        {Lisp-Entry "get-token" accessor #f 102 34 102 42 ()}
        {Lisp-Entry "set-token" accessor #f 102 34 102 42 ()}
        {Lisp-Entry "up" slot #f 103 8 103 10 ()}
        {Lisp-Entry "get-up" accessor #f 103 34 103 42 ()}
        {Lisp-Entry "set-up" accessor #f 103 34 103 42 ()}
        {Lisp-Entry "down" slot #f 104 8 104 12 ()}
        {Lisp-Entry "get-down" accessor #f 104 34 104 42 ()}
        {Lisp-Entry "set-down" accessor #f 104 34 104 42 ()}
        {Lisp-Entry "lines" slot #f 105 8 105 13 ()}
        {Lisp-Entry "get-lines" accessor #f 105 34 105 42 ()}
        {Lisp-Entry "set-lines" accessor #f 105 34 105 42 ()}
        {Lisp-Entry "initialize" method #f 108 20 108 30 ("EMPTY" "token" "token~self" "col~self" "line~self" "self" "game~self" "set!" "nextmethod" "col" "line" "game")}
        {Lisp-Entry "print" method #f 116 20 116 25 ("token" "game" "present-move" "format" "lambda" "self" "print-unreadable" "readably" "output")}}
      {Lisp-Entry "present-line" definition #f 122 21 122 33 ("get-board-rows" "get-board-rows~" "-" "->string" "line" "game")}
      {Lisp-Entry "present-col" definition #f 126 21 126 32 ("Uppercase-Chars" "element" "->string" "col" "game")}
      {Lisp-Entry "present-move" definition #f 130 21 130 33 ("present-line" "present-col" "format" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "let" "move" "game")}
      {Lisp-Entry "4-Line" class #f 143 7 143 13 ("Square" "<Square>" "Object")
        {Lisp-Entry "first" slot #f 146 8 146 13 ()}
        {Lisp-Entry "get-first" accessor #f 146 31 146 39 ()}
        {Lisp-Entry "second" slot #f 147 8 147 14 ()}
        {Lisp-Entry "get-second" accessor #f 147 31 147 39 ()}
        {Lisp-Entry "third" slot #f 148 8 148 13 ()}
        {Lisp-Entry "get-third" accessor #f 148 31 148 39 ()}
        {Lisp-Entry "fourth" slot #f 149 8 149 14 ()}
        {Lisp-Entry "get-fourth" accessor #f 149 31 149 39 ()}
        {Lisp-Entry "initialize" method #f 152 20 152 30 ("fourth~self" "third~self" "second~self" "self" "first~self" "set!" "nextmethod" "fourth" "third" "second" "first")}
        {Lisp-Entry "count-token" method #f 160 11 160 22 ("fourth" "third" "second" "0" "1" "first" "get-token" "get-token~" "=" "if" "+" "fx" "<fx>" "token")}}
      {Lisp-Entry "line=?" definition #f 167 21 167 27 ("get-fourth" "get-fourth~" "get-third" "get-third~" "get-second" "get-second~" "get-first" "get-first~" "eq?" "and" "l2" "l1")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "sample" "c4" "autoload.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.sample.c4.autoload" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("C4-Game" "jazz.sample.c4.C4-Game" "C4-Board" "jazz.sample.c4.C4-Board" "C4-Application" "jazz.sample.c4.C4-Application" "C4-Human" "jazz.sample.c4.C4-Human" "C4-AI" "autoload" "jazz.sample.c4.C4-AI")}}})
"graphics"
 ({Lisp-File-Entry {File :context "src" "jazz" "sample" "c4" "graphics.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.sample.c4.graphics" module #f 38 8 38 31 ("jazz")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.system" "jazz.sample.gameserver.imagemagick" "jazz.io")}
      {Lisp-Entry "C4-Images" definition #f 46 12 46 21 ("Jazz" "Directory")}
      {Lisp-Entry "generate-c4" definition #f 50 13 50 24 ("user-message" "format" "image-convert" "color" "name" "generate" "define" "10" "inner" "2" "1" "-" "/" "half" "71" "width" "let" "lambda" "C4-Images" "parse" "parse~" "with-current-directory")}}})
"run"
 ({Lisp-File-Entry {File :context "src" "jazz" "sample" "c4" "run.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.sample.c4.run" module #f 37 8 37 26 ("C4-Application" "new" "boot-environment" "boot-environment~" "jazz.sample.c4.C4-AI" "warn-minimax-interpreted" "descriptor" "lambda" "jazz.sample.c4" "register-product-run" "jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.sample.game.minimax" "jazz.sample.c4")}}})
"test"
 ({Lisp-File-Entry {File :context "src" "jazz" "sample" "c4" "test.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.sample.c4.test" module #f 37 8 37 27 ("C4-Board" "new-frame" "jazz.sample.c4.C4-AI" "warn-minimax-interpreted" "jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.sample.game.minimax" "jazz.sample.c4")}}})
