"Break-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "break" "Break-Event.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.break.Break-Event" module (protected) #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Break-Event" class () #f 43 7 43 18 ("Event")}}})
"Computer-Snapshot"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "snapshot" "Computer-Snapshot.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.snapshot.Computer-Snapshot" module (protected) #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Computer-Snapshot" class () #f 43 7 43 24 ("initialize" "Component")
        {Lisp-Entry "user-name" property () #f 46 12 46 21 ()}
        {Lisp-Entry "get-user-name" accessor #f #f 46 52 46 60 ()}
        {Lisp-Entry "set-user-name" accessor #f #f 46 52 46 60 ()}
        {Lisp-Entry "computer-name" property () #f 47 12 47 25 ()}
        {Lisp-Entry "get-computer-name" accessor #f #f 47 52 47 60 ()}
        {Lisp-Entry "set-computer-name" accessor #f #f 47 52 47 60 ()}
        {Lisp-Entry "processor-type" property () #f 48 12 48 26 ()}
        {Lisp-Entry "get-processor-type" accessor #f #f 48 52 48 60 ()}
        {Lisp-Entry "set-processor-type" accessor #f #f 48 52 48 60 ()}
        {Lisp-Entry "windows-version" property () #f 49 12 49 27 ()}
        {Lisp-Entry "get-windows-version" accessor #f #f 49 52 49 60 ()}
        {Lisp-Entry "set-windows-version" accessor #f #f 49 52 49 60 ()}
        {Lisp-Entry "construct-literal" method (meta) #f 53 16 53 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "print" method (override) #f 57 20 57 25 ("windows-version" "windows-version:" "processor-type" "processor-type:" "computer-name" "computer-name:" "user-name" "user-name:" "list" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Debug-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "preference" "Debug-Preferences.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.debugger.preference.Debug-Preferences" module (protected) #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Debug-Preferences" class () #f 45 7 45 24 ("initialize" "Preferences")
        {Lisp-Entry "debug-depot?" property () #f 48 12 48 24 ()}
        {Lisp-Entry "get-debug-depot?" accessor #f #f 48 49 48 57 ()}
        {Lisp-Entry "set-debug-depot?" accessor #f #f 48 49 48 57 ()}
        {Lisp-Entry "form" anonymous #f #f 51 3 51 7 ("title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 60 25 60 45 ("Debug-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 69 11 69 17 ()
        {Lisp-Entry "import" anonymous #f #f 72 1 72 7 ("jazz.designer")}
        {Lisp-Entry "Debug-Preferences-Descriptor" class () #f 75 7 75 35 ("Preferences-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 78 3 78 7 ("domain" "Boolean-Domain" "<Boolean-Domain>" "debug-depot?" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Debugged"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugged" "Debugged.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.debugged.Debugged" module (protected) #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.debugger")}
      {Lisp-Entry "Debugged" class () #f 43 7 43 15 ("Object")
        {Lisp-Entry "debugger" slot () #f 46 8 46 16 ()}
        {Lisp-Entry "get-debugger" accessor #f #f 46 25 46 33 ()}
        {Lisp-Entry "process" slot () #f 47 8 47 15 ()}
        {Lisp-Entry "get-process" accessor #f #f 47 25 47 33 ()}
        {Lisp-Entry "reference" slot () #f 48 8 48 17 ()}
        {Lisp-Entry "get-reference" accessor #f #f 48 25 48 33 ()}
        {Lisp-Entry "initialize" method (override) #f 51 20 51 30 ("reference~self" "process~self" "self" "debugger~self" "set!" "nextmethod" "reference" "process" "debugger")}
        {Lisp-Entry "hash-object" method (override) #f 58 20 58 31 ("self" "debugged-hash")}
        {Lisp-Entry "print" method (override) #f 62 20 62 25 ("reference" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "shared-process?" method (public) #f 73 18 73 33 ("get-process" "get-process~" "process" "debugger" "process=?" "process=?~" "Debugged" "is?" "and" "debugged")}
        {Lisp-Entry "same?" method (public virtual) #f 78 26 78 31 ("debugged")}}}})
"Debugged-Frame"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugged" "Debugged-Frame.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.debugged.Debugged-Frame" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.debugger")}
      {Lisp-Entry "Debugged-Frame" class () #f 43 7 43 21 ("Debugged")
        {Lisp-Entry "same?" method (override) #f 51 20 51 25 ("get-reference" "get-reference~" "reference" "debugger" "frame=?" "frame=?~" "Debugged-Frame" "is?" "and" "debugged")}
        {Lisp-Entry "get-name" method (public) #f 61 18 61 26 ("reference" "process" "debugger" "frame-name" "frame-name~")}
        {Lisp-Entry "get-interpreted?" method (public) #f 65 18 65 34 ("reference" "process" "debugger" "frame-interpreted?" "frame-interpreted?~")}
        {Lisp-Entry "get-hidden?" method (public) #f 69 18 69 29 ("reference" "process" "debugger" "frame-hidden?" "frame-hidden?~")}
        {Lisp-Entry "get-location" method (public) #f 73 18 73 30 ("reference" "process" "debugger" "frame-location" "frame-location~")}
        {Lisp-Entry "get-variables" method (public) #f 77 18 77 31 ("reference" "process" "debugger" "frame-variables" "frame-variables~" "kind")}}}})
"Debugged-Process"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugged" "Debugged-Process.jazz"} 245738680. jazz
    {Lisp-Entry "jazz.debugger.debugged.Debugged-Process" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.debugger")}
      {Lisp-Entry "Debugged-Process" class () #f 44 7 44 23 ("initialize" "Debugged")
        {Lisp-Entry "alive?" slot () #f 47 8 47 14 ()}
        {Lisp-Entry "get-alive?" accessor #f #f 47 39 47 47 ()}
        {Lisp-Entry "set-alive?" accessor #f #f 47 39 47 47 ()}
        {Lisp-Entry "same?" method (override) #f 55 20 55 25 ("get-reference" "get-reference~" "reference" "debugger" "process=?" "process=?~" "Debugged-Process" "is?" "and" "debugged")}
        {Lisp-Entry "live?" method (public) #f 65 18 65 23 ("reference" "debugger" "process-live?" "process-live?~")}
        {Lisp-Entry "get-title" method (public) #f 69 18 69 27 ("reference" "debugger" "process-title" "process-title~" "or")}
        {Lisp-Entry "get-icon" method (public) #f 74 18 74 26 ("reference" "debugger" "process-icon" "process-icon~" "or" "Image-Resource" "new")}
        {Lisp-Entry "get-threads" method (public) #f 80 18 80 29 ("reference" "process-threads" "process-threads~" "process" "debugger" "Debugged-Thread" "new" "thread" "lambda" "map")}
        {Lisp-Entry "present" method (public) #f 86 18 86 25 ("reference" "debugger" "present-process" "present-process~")}
        {Lisp-Entry "reload-process" method (public) #f 90 18 90 32 ("reference" "debugger" "reload-process" "reload-process~")}
        {Lisp-Entry "focusable?" method (public) #f 94 18 94 28 ("reference" "debugger" "process-focusable?" "process-focusable?~")}
        {Lisp-Entry "restart-stop" method (public) #f 98 18 98 30 ("get-reference" "get-reference~" "reference" "debugger" "restart-stop" "restart-stop~" "restart")}
        {Lisp-Entry "break-thread" method (public) #f 102 18 102 30 ("get-reference" "get-reference~" "reference" "debugger" "break-thread" "break-thread~" "thread")}
        {Lisp-Entry "continue-stop" method (public) #f 106 18 106 31 ("get-reference" "get-reference~" "reference" "debugger" "continue-stop" "continue-stop~" "stop")}
        {Lisp-Entry "step-stop" method (public) #f 110 18 110 27 ("get-reference" "get-reference~" "reference" "debugger" "step-stop" "step-stop~" "command" "stop")}
        {Lisp-Entry "evaluate-expressions" method (public) #f 114 18 114 38 ("reference" "debugger" "evaluate-expressions" "evaluate-expressions~" "col" "line" "container" "str" "syntax")}
        {Lisp-Entry "profiler-start" method (public) #f 118 18 118 32 ("reference" "debugger" "profiler-start" "profiler-start~")}
        {Lisp-Entry "profiler-stop" method (public) #f 122 18 122 31 ("reference" "debugger" "profiler-stop" "profiler-stop~")}
        {Lisp-Entry "profiler-profiles" method (public) #f 126 18 126 35 ("reference" "debugger" "profiler-profiles" "profiler-profiles~")}
        {Lisp-Entry "profiler-selected-profile" method (public) #f 130 18 130 43 ("reference" "debugger" "profiler-selected-profile" "profiler-selected-profile~")}
        {Lisp-Entry "profiler-selected-profile-set!" method (public) #f 134 18 134 48 ("reference" "debugger" "profiler-selected-profile-set!" "profiler-selected-profile-set!~" "name")}
        {Lisp-Entry "profiler-profile" method (public) #f 138 18 138 34 ("reference" "debugger" "profiler-profile" "profiler-profile~")}
        {Lisp-Entry "profile-reset" method (public) #f 142 18 142 31 ("reference" "debugger" "profile-reset" "profile-reset~" "depth" "profiler")}
        {Lisp-Entry "inspect-serial" method (public) #f 146 18 146 32 ("reference" "debugger" "inspect-serial" "inspect-serial~" "max-content" "serial")}
        {Lisp-Entry "exit" method (public) #f 150 18 150 22 ("detach-process" "detach-process~" "reference" "debugger" "process-exit" "process-exit~" "alive?" "if")}}}})
"Debugged-Restart"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugged" "Debugged-Restart.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.debugged.Debugged-Restart" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.debugger")}
      {Lisp-Entry "Debugged-Restart" class () #f 43 7 43 23 ("Debugged")
        {Lisp-Entry "same?" method (override) #f 51 20 51 25 ("get-reference" "get-reference~" "reference" "debugger" "restart=?" "restart=?~" "Debugged-Restart" "is?" "and" "debugged")}
        {Lisp-Entry "get-name" method (public) #f 61 18 61 26 ("reference" "process" "debugger" "restart-name" "restart-name~")}
        {Lisp-Entry "get-message" method (public) #f 65 18 65 29 ("reference" "process" "debugger" "restart-message" "restart-message~")}}}})
"Debugged-Stop"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugged" "Debugged-Stop.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.debugged.Debugged-Stop" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.debugger")}
      {Lisp-Entry "Debugged-Stop" class () #f 43 7 43 20 ("Debugged")
        {Lisp-Entry "same?" method (override) #f 51 20 51 25 ("get-reference" "get-reference~" "reference" "debugger" "stop=?" "stop=?~" "Debugged-Stop" "is?" "and" "debugged")}
        {Lisp-Entry "get-kind" method (public) #f 61 18 61 26 ("reference" "process" "debugger" "stop-kind" "stop-kind~")}
        {Lisp-Entry "get-reason" method (public) #f 65 18 65 28 ("reference" "process" "debugger" "stop-reason" "stop-reason~")}
        {Lisp-Entry "get-detail" method (public) #f 69 18 69 28 ("reference" "process" "debugger" "stop-detail" "stop-detail~")}
        {Lisp-Entry "get-location" method (public) #f 73 18 73 30 ("reference" "process" "debugger" "stop-location" "stop-location~")}
        {Lisp-Entry "get-restarts" method (public) #f 77 18 77 30 ("reference" "stop-restarts" "stop-restarts~" "process" "debugger" "Debugged-Restart" "new" "restart" "lambda" "map")}
        {Lisp-Entry "get-frames" method (public) #f 83 18 83 28 ("reference" "stop-frames" "stop-frames~" "process" "debugger" "Debugged-Frame" "new" "frame" "lambda" "map")}}}})
"Debugged-Thread"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugged" "Debugged-Thread.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.debugged.Debugged-Thread" module (protected) #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.debugger")}
      {Lisp-Entry "Debugged-Thread" class () #f 43 7 43 22 ("Debugged")
        {Lisp-Entry "same?" method (override) #f 51 20 51 25 ("get-reference" "get-reference~" "reference" "debugger" "thread=?" "thread=?~" "Debugged-Thread" "is?" "and" "debugged")}
        {Lisp-Entry "get-name" method (public) #f 61 18 61 26 ("reference" "process" "debugger" "thread-name" "thread-name~")}
        {Lisp-Entry "get-state" method (public) #f 65 18 65 27 ("reference" "process" "debugger" "thread-state" "thread-state~")}
        {Lisp-Entry "get-stops" method (public) #f 69 18 69 27 ("reference" "thread-stops" "thread-stops~" "process" "debugger" "Debugged-Stop" "new" "stop" "lambda" "map")}
        {Lisp-Entry "get-active-stop" method (public) #f 75 18 75 33 ("Debugged-Stop" "new" "when" "reference" "process" "debugger" "thread-active-stop" "thread-active-stop~" "stop" "let")}
        {Lisp-Entry "set-repl-frame" method (public) #f 81 18 81 32 ("reference" "process" "debugger" "set-repl-frame" "set-repl-frame~" "frame")}}}})
"Debugger"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugger" "Debugger.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.debugger.debugger.Debugger" module (protected) #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Debugger" class () #f 40 7 40 15 ("Object")
        {Lisp-Entry "start-debugger" method (public virtual) #f 48 26 48 40 ()}
        {Lisp-Entry "stop-debugger" method (public virtual) #f 49 26 49 39 ()}
        {Lisp-Entry "get-processes" method (public virtual) #f 50 26 50 39 ("rest")}
        {Lisp-Entry "validate-processes" method (public virtual) #f 51 26 51 44 ()}
        {Lisp-Entry "detach-processes" method (public virtual) #f 52 26 52 42 ()}
        {Lisp-Entry "process=?" method (public virtual) #f 60 26 60 35 ("y-process" "x-process")}
        {Lisp-Entry "process-live?" method (public virtual) #f 61 26 61 39 ("process")}
        {Lisp-Entry "process-title" method (public virtual) #f 62 26 62 39 ("process")}
        {Lisp-Entry "process-icon" method (public virtual) #f 63 26 63 38 ("process")}
        {Lisp-Entry "process-threads" method (public virtual) #f 64 26 64 41 ("process")}
        {Lisp-Entry "present-process" method (public virtual) #f 65 26 65 41 ("process")}
        {Lisp-Entry "reload-process" method (public virtual) #f 66 26 66 40 ("process")}
        {Lisp-Entry "process-focusable?" method (public virtual) #f 67 26 67 44 ("process")}
        {Lisp-Entry "evaluate-expressions" method (public virtual) #f 68 26 68 46 ("col" "line" "container" "str" "syntax" "process")}
        {Lisp-Entry "profiler-start" method (public virtual) #f 69 26 69 40 ("process")}
        {Lisp-Entry "profiler-stop" method (public virtual) #f 70 26 70 39 ("process")}
        {Lisp-Entry "profiler-profiles" method (public virtual) #f 71 26 71 43 ("process")}
        {Lisp-Entry "profiler-selected-profile" method (public virtual) #f 72 26 72 51 ("process")}
        {Lisp-Entry "profiler-selected-profile-set!" method (public virtual) #f 73 26 73 56 ("name" "process")}
        {Lisp-Entry "profiler-profile" method (public virtual) #f 74 26 74 42 ("process")}
        {Lisp-Entry "profile-reset" method (public virtual) #f 75 26 75 39 ("depth" "profiler" "process")}
        {Lisp-Entry "inspect-serial" method (public virtual) #f 76 26 76 40 ("max-content" "serial" "process")}
        {Lisp-Entry "process-detach" method (public virtual) #f 77 26 77 40 ("process")}
        {Lisp-Entry "process-exit" method (public virtual) #f 78 26 78 38 ("process")}
        {Lisp-Entry "thread=?" method (public virtual) #f 86 26 86 34 ("y-thread" "x-thread")}
        {Lisp-Entry "thread-name" method (public virtual) #f 87 26 87 37 ("thread" "process")}
        {Lisp-Entry "thread-state" method (public virtual) #f 88 26 88 38 ("thread" "process")}
        {Lisp-Entry "thread-stops" method (public virtual) #f 89 26 89 38 ("thread" "process")}
        {Lisp-Entry "thread-active-stop" method (public virtual) #f 90 26 90 44 ("thread" "process")}
        {Lisp-Entry "break-thread" method (public virtual) #f 91 26 91 38 ("thread" "process")}
        {Lisp-Entry "set-repl-frame" method (public virtual) #f 92 26 92 40 ("frame" "thread" "process")}
        {Lisp-Entry "restart=?" method (public virtual) #f 100 26 100 35 ("y-restart" "x-restart")}
        {Lisp-Entry "restart-name" method (public virtual) #f 101 26 101 38 ("restart" "process")}
        {Lisp-Entry "restart-message" method (public virtual) #f 102 26 102 41 ("restart" "process")}
        {Lisp-Entry "restart-stop" method (public virtual) #f 103 26 103 38 ("restart" "process")}
        {Lisp-Entry "stop=?" method (public virtual) #f 111 26 111 32 ("y-stop" "x-stop")}
        {Lisp-Entry "stop-kind" method (public virtual) #f 112 26 112 35 ("stop" "process")}
        {Lisp-Entry "stop-reason" method (public virtual) #f 113 26 113 37 ("stop" "process")}
        {Lisp-Entry "stop-detail" method (public virtual) #f 114 26 114 37 ("stop" "process")}
        {Lisp-Entry "stop-location" method (public virtual) #f 115 26 115 39 ("stop" "process")}
        {Lisp-Entry "stop-restarts" method (public virtual) #f 116 26 116 39 ("stop" "process")}
        {Lisp-Entry "stop-frames" method (public virtual) #f 117 26 117 37 ("stop" "process")}
        {Lisp-Entry "continue-stop" method (public virtual) #f 118 26 118 39 ("stop" "process")}
        {Lisp-Entry "step-stop" method (public virtual) #f 119 26 119 35 ("command" "stop" "process")}
        {Lisp-Entry "frame=?" method (public virtual) #f 127 26 127 33 ("y-frame" "x-frame")}
        {Lisp-Entry "frame-name" method (public virtual) #f 128 26 128 36 ("frame" "process")}
        {Lisp-Entry "frame-interpreted?" method (public virtual) #f 129 26 129 44 ("frame" "process")}
        {Lisp-Entry "frame-hidden?" method (public virtual) #f 130 26 130 39 ("frame" "process")}
        {Lisp-Entry "frame-location" method (public virtual) #f 131 26 131 40 ("frame" "process")}
        {Lisp-Entry "frame-variables" method (public virtual) #f 132 26 132 41 ("kind" "frame" "process")}
        {Lisp-Entry "frame-variable-name" method (public virtual) #f 133 26 133 45 ("variable" "frame" "process")}
        {Lisp-Entry "frame-variable-value" method (public virtual) #f 134 26 134 46 ("variable" "frame" "process")}}}})
"Debugger-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugger" "Debugger-Event.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.debugger.Debugger-Event" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Debugger-Event" class () #f 40 7 40 21 ("Object")}}})
"Debugger-Listener"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugger" "Debugger-Listener.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.debugger.Debugger-Listener" module (protected) #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Debugger-Listener" interface () #f 40 11 40 28 ()
        {Lisp-Entry "display-output" method (public virtual abstract) #f 43 35 43 49 ("string")}
        {Lisp-Entry "newline-output" method (public virtual abstract) #f 44 35 44 49 ()}
        {Lisp-Entry "debug-output" method (public virtual abstract) #f 45 35 45 47 ("output")}}}})
"Debugger-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugger" "Debugger-Manager.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.debugger.debugger.Debugger-Manager" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.system.access" "jazz.media" "jazz.graphic" "jazz.debugger")}
      {Lisp-Entry "stopped-frame-color" constant () #f 47 10 47 29 ("Dark-Red" "Color")}
      {Lisp-Entry "visited-highlight-color" constant () #f 48 10 48 33 ("blue:" "205" "green:" "255" "red:" "Color")}
      {Lisp-Entry "Debugger-Manager" class () #f 51 7 51 23 ("debugged-hash" "hash:" "debugged=?" "test:" "make-table" "initialize" "Object")
        {Lisp-Entry "active-stops" slot () #f 54 8 54 20 ()}
        {Lisp-Entry "unvisited-stops" slot () #f 55 8 55 23 ()}
        {Lisp-Entry "focused-process" slot () #f 56 8 56 23 ()}
        {Lisp-Entry "get-focused-process" accessor #f #f 56 45 56 53 ()}
        {Lisp-Entry "process" slot () #f 58 8 58 15 ()}
        {Lisp-Entry "get-process" accessor #f #f 58 45 58 53 ()}
        {Lisp-Entry "thread" slot () #f 59 8 59 14 ()}
        {Lisp-Entry "get-thread" accessor #f #f 59 45 59 53 ()}
        {Lisp-Entry "frame" slot () #f 60 8 60 13 ()}
        {Lisp-Entry "get-frame" accessor #f #f 60 45 60 53 ()}
        {Lisp-Entry "debugging?" method (public) #f 63 18 63 28 ("active-stops" "table-length" "0" "/=")}
        {Lisp-Entry "visit-debugged" method (public) #f 72 18 72 32 ("update-status" "unvisited-stops" "table-set!" "debugged-visited?" "unless" "debugged")}
        {Lisp-Entry "update-status" method (public) #f 79 18 79 31 ("notify" "notify~" "active-stops" "stopped?" "0" "unvisited-stops" "table-length" ">" "visited?" "debugger" "find-component" "find-component~" "button" "when" "get-application" "find-toolbar" "find-toolbar~" "toolbar" "let")}
        {Lisp-Entry "get-stopped-frame-color" method (public) #f 89 18 89 41 ("stopped-frame-color" "debugged-stopped?" "when" "debugged")}
        {Lisp-Entry "get-visited-highlight-color" method (public) #f 94 18 94 45 ("visited-highlight-color" "debugged-visited?" "unless" "debugged")}
        {Lisp-Entry "debugged-stopped?" method () #f 99 11 99 28 ("active-stops" "table-ref" "not-null?" "debugged")}
        {Lisp-Entry "debugged-visited?" method () #f 103 11 103 28 ("unvisited-stops" "table-ref" "not" "debugged")}
        {Lisp-Entry "get-active-stops" method (public) #f 107 18 107 34 ("active-stops" "table-ref" "debugged")}
        {Lisp-Entry "require-focused-process" method (public) #f 116 18 116 41 ("throw-cancel" "message-box" "begin" "get-focused-process" "or")}
        {Lisp-Entry "focus-process" method (public) #f 123 18 123 31 ("update" "update~" "get-processes-view" "when" "set-focus-process" "focused-process" "debugged=?" "unless" "process")}
        {Lisp-Entry "set-focus-process" method () #f 130 11 130 28 ("update-focused-process" "update-focused-process~" "when" "get-application" "find-status-bar" "find-status-bar~" "focus-status-view" "let" "focused-process" "set!" "process")}
        {Lisp-Entry "attach-process" method (public) #f 142 18 142 32 ("update" "update~" "get-processes-view" "set-focus-process" "focusable?" "focusable?~" "and" "when" "focus?" "process")}
        {Lisp-Entry "detach-process" method (public) #f 149 18 149 32 ("update-status" "process-changed" "selected-process" "selected-process~" "update" "update~" "get-processes-view" "view" "unvisited-stops" "active-stops" "close-process-debugger-resources" "set-focus-process" "unless" "let" "focused-process" "table-keys" "table-clear" "shared-process?" "shared-process?~" "key" "for-each" "table" "cleanup-stops" "continuation-return" "debugged=?" "not" "focusable?" "focusable?~" "and" "when" "focused?" "live?" "debugged-process" "debugger" "for-each-process" "return" "lambda" "continuation-capture" "best-process" "define" "process")}
        {Lisp-Entry "for-each-process" method (public) #f 182 18 182 34 ("get-debuggers" "get-processes" "get-processes~" "focused-process" "debugged=?" "focused?" "live?~" "live?" "Debugged-Process" "new" "debugged-process" "let" "process" "debugger" "lambda" "for-each" "proc")}
        {Lisp-Entry "find-live-process" method (public) #f 193 18 193 35 ("continuation-return" "get-reference" "get-reference~" "process=?" "process=?~" "when" "focused?" "live?" "debugged-process" "debugger" "for-each-process" "return" "lambda" "continuation-capture" "process")}
        {Lisp-Entry "process-changed" method (public) #f 203 18 203 33 ("thread-changed" "selected-thread" "selected-thread~" "process-changed" "process-changed~" "get-threads-view" "view" "update-processes-highlight" "visit-debugged" "set!" "update" "update~" "get-processes-view" "exc" "Cancel-Signal" "catch" "process" "debugged=?" "unless" "get-alive?" "get-alive?~" "and" "when" "let" "new-process")}
        {Lisp-Entry "update-processes-highlight" definition () #f 219 15 219 41 ("update-highlight" "update-highlight~" "get-processes-view" "when" "process")}
        {Lisp-Entry "for-each-thread" method (public) #f 229 18 229 33 ("get-threads" "get-threads~" "with-jrm-exception-handler" "get-active-stop" "get-active-stop~" "stop" "not" "lambda" "for-each" "get-debugger" "get-debugger~" "debugger" "process" "when" "symbol->string" "starts-with?" "symbol?" "and" "memq?" "or" "get-name" "get-name~" "name" "let" "thread" "system-thread?" "hovering" "caret" "autoscroll" "autorepeat" "catalog" "remote-connection" "remote-listener" "debugger-console-pump" "debuggee-console-pump" "message-pump" "system-threads" "define" "detailed?" "detailed?:" "proc")}
        {Lisp-Entry "thread-changed" method (public) #f 259 18 259 32 ("get-exception-view" "get-restarts-view" "thread-changed" "thread-changed~" "get-frames-view" "update-threads-highlight" "visit-debugged" "view-visible?" "view-visible?~" "get-threads-view" "and" "when" "set!" "thread" "debugged=?" "unless" "new-thread")}
        {Lisp-Entry "update-threads-highlight" definition () #f 273 15 273 39 ("update-highlight" "update-highlight~" "get-threads-view" "when" "thread")}
        {Lisp-Entry "for-each-frame" method (public) #f 283 18 283 32 ("for-each" "get-active-stop" "get-active-stop~" "let" "thread" "process" "and" "when" "get-frames" "get-frames~" "lambda" "with-jrm-exception-handler" "stop" "frames" "define" "proc")}
        {Lisp-Entry "frame-changed" method (public) #f 295 18 295 31 ("get-reference" "get-reference~" "set-repl-frame" "set-repl-frame~" "lambda" "with-jrm-exception-handler" "get-active-stop" "get-active-stop~" "thread" "edit-frame" "frame-changed" "frame-changed~" "get-variables-view" "variables-view" "let" "view-visible?" "view-visible?~" "not" "or" "get-frames-view" "and" "when" "frame" "set!" "user-origin" "user-origin:" "new-frame")}
        {Lisp-Entry "*frame-indicator*" definition () #f 309 14 309 31 ("Frame" "Color" "Location-Indicator" "new")}
        {Lisp-Entry "edit-frame" method (public) #f 313 18 313 28 ("*frame-indicator*" "edit-location" "edit-location~" "get-location" "get-location~" "and" "location" "let" "select?" "select?:" "frame")}
        {Lisp-Entry "register-stop" method (public) #f 323 18 323 31 ("error-sound" "unless" "unvisited-stops" "table-set!" "add-unvisited-stops" "active-stops" "table-add" "debugged" "add-active-stop" "update-status" "get-exception-view" "get-restarts-view" "thread-changed~" "get-frames-view" "update-others" "update-threads-highlight" "visit-debugged" "view-visible?" "view-visible?~" "and" "thread-changed" "set-selected-thread" "set-selected-thread~" "process-changed~" "get-threads-view" "thread~self" "debugged=?" "update-thread" "update-processes-highlight" "process-changed" "set-selected-process" "set-selected-process~" "if" "when" "get-processes-view" "view" "self" "process~self" "not" "empty?" "let" "update-process" "define" "step?" "step?:" "stop" "thread" "process")}
        {Lisp-Entry "unregister-stop" method (public) #f 374 18 374 33 ("process~self" "process-changed" "process-changed~" "get-threads-view" "view" "update-processes-highlight" "lambda" "some?" "unvisited-stops" "and" "unless" "remove-unvisited-stops" "table-set!" "not-null?" "if" "test:" "active-stops" "table-ref" "remove!" "stops" "let" "debugged" "remove-active-stop" "update-status" "get-exception-view" "get-restarts-view" "thread-changed" "thread-changed~" "get-frames-view" "self" "thread~self" "debugged=?" "when" "update-others" "define" "stop" "thread" "process")}}}})
"Debugger-Resource"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugger" "Debugger-Resource.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.debugger.Debugger-Resource" module (protected) #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.debugger")}
      {Lisp-Entry "Debugger-Resource" class () #f 43 7 43 24 ("Object")
        {Lisp-Entry "process" slot () #f 46 8 46 15 ()}
        {Lisp-Entry "get-process" accessor #f #f 46 25 46 33 ()}
        {Lisp-Entry "thread" slot () #f 47 8 47 14 ()}
        {Lisp-Entry "get-thread" accessor #f #f 47 25 47 33 ()}
        {Lisp-Entry "reference" slot () #f 48 8 48 17 ()}
        {Lisp-Entry "get-reference" accessor #f #f 48 25 48 33 ()}
        {Lisp-Entry "close" slot () #f 49 8 49 13 ()}
        {Lisp-Entry "get-close" accessor #f #f 49 25 49 33 ()}
        {Lisp-Entry "closed?" slot () #f 50 8 50 15 ()}
        {Lisp-Entry "get-closed?" accessor #f #f 50 25 50 33 ()}
        {Lisp-Entry "initialize" method (override) #f 53 20 53 30 ("closed?" "closed?~self" "close~self" "reference~self" "thread~self" "self" "process~self" "set!" "nextmethod" "close" "reference" "thread" "process")}
        {Lisp-Entry "print" method (override) #f 62 20 62 25 ("reference" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "close-resource" method () #f 68 11 68 25 ("set!" "self" "process" "unregister-debugger-resource" "close" "closed?" "not" "when")}}}})
"Exception-Snapshot"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "snapshot" "Exception-Snapshot.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.snapshot.Exception-Snapshot" module (protected) #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Exception-Snapshot" class () #f 43 7 43 25 ("initialize" "Component")
        {Lisp-Entry "address" property () #f 46 12 46 19 ()}
        {Lisp-Entry "get-address" accessor #f #f 46 48 46 56 ()}
        {Lisp-Entry "set-address" accessor #f #f 46 48 46 56 ()}
        {Lisp-Entry "code" property () #f 47 12 47 16 ()}
        {Lisp-Entry "get-code" accessor #f #f 47 48 47 56 ()}
        {Lisp-Entry "set-code" accessor #f #f 47 48 47 56 ()}
        {Lisp-Entry "description" property () #f 48 12 48 23 ()}
        {Lisp-Entry "get-description" accessor #f #f 48 48 48 56 ()}
        {Lisp-Entry "set-description" accessor #f #f 48 48 48 56 ()}
        {Lisp-Entry "construct-literal" method (meta) #f 52 16 52 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "print" method (override) #f 56 20 56 25 ("description" "description:" "code" "code:" "address" "address:" "list" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Exception-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugger" "Exception-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.debugger.debugger.Exception-View" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.project" "jazz.library" "jazz.jml" "jazz.debugger")}
      {Lisp-Entry "Exception-View" class () #f 48 7 48 21 ("initialize" "Layout-View")
        {Lisp-Entry "thread" property () #f 51 12 51 18 ()}
        {Lisp-Entry "stop" slot () #f 54 8 54 12 ()}
        {Lisp-Entry "form" anonymous #f #f 57 3 57 7 ("on-edit-stop/detail" ":form" "Selection-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" "detail" "Detail-Tree" "<Detail-Tree>" "shown?:" "header" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "tool" "style:" "vscroll?:" "center" "location:" "scroller" "Scroller-View" "<Scroller-View>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 67 25 67 38 ("exception-view" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 76 25 76 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 80 25 80 35 ()}
        {Lisp-Entry "get-tools-view" method (override) #f 89 20 89 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) #f 93 20 93 33 ("acquire-focus" "acquire-focus~" "detail" "locate" "tree" "let")}
        {Lisp-Entry "get-thread" method (public) #f 103 18 103 28 ("thread")}
        {Lisp-Entry "set-thread" method (public) #f 107 18 107 28 ("update" "get-active-stop" "get-active-stop~" "and" "stop" "thread" "set!" "value")}
        {Lisp-Entry "thread-changed" method (public) #f 113 18 113 32 ("edit-stop/detail" "update" "get-active-stop" "get-active-stop~" "and" "stop" "thread" "set!" "new-thread")}
        {Lisp-Entry "*indicators*" definition () #f 125 14 125 26 ()}
        {Lisp-Entry "edit-stop/detail" method () #f 129 11 129 27 ("null?" "Exception-Detail" "list" "bell" "begin" "if" "Debugged-Stop" "is?" "not" "cond" "selected-data" "data" "queue-list" "get-children" "get-children~" "enqueue" "recurse" "new-queue" "queue" "detail-subdetails" "locat->container/line/col" "get-locat" "get-locat~" "locat" "get-location" "get-location~" "collect" "detail" "detail-locations" "get-guest" "get-guest~" "values" "Range$Cell$" "visible?:" "activate-focus?:" "get-application" "edit-document" "edit-document~" "1" "+" "end" "Cell" "new" "start" "container->file" "file" "col" "line" "container" "bind" "when" "get-default-style" "get-default-style~" "uninstall-indicators" "*indicators*" "set!" "acquire-focus" "acquire-focus~" "reset-tooltip" "reset-tooltip~" "ensure-cell-displayed" "ensure-cell-displayed~" "get-end" "get-end~" "get-start" "get-start~" "Fatal" "apply-style" "apply-style~" "get-model" "get-model~" "model" "let" "find-location" "range" "text" "frame" "receive" "location" "lambda" "for-each" "uninstall-active-indicators" "locations" "install-indicators" "define")}
        {Lisp-Entry "resize" method (override) #f 208 20 208 26 ("scroller" "locate" "size-figure" "size-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-edit-stop/detail" method () #f 213 11 213 30 ("detail" "locate" "acquire-focus" "acquire-focus~" "when" "get-user-origin" "get-user-origin~" "user-origin" "let" "edit-stop/detail" "evt")}
        {Lisp-Entry "update" method (protected) #f 228 21 228 27 ("cdr" "empty-string?" "stop-row" "get-detail" "get-detail~" "and" "when" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "locate" "with-system-exception-debugger" "get-children" "get-children~" "subdetail" "lambda" "for-each" "user-data:" "image:" "title:" "Tree-Node" "list" "children:" "expanded" "state:" "father:" "add-row" "add-row~" "row" "new" "image" "get-icon" "get-icon~" "icon" "get-title" "get-title~" "title" "detail" "father" "tree" "insert-detail" "or" "stop-reason-lines" "else" "Image-Resource" "exception" "get-kind" "get-kind~" "case" "stop-image" "split" "car" "line" "not" "if" "get-reason" "get-reason~" "reason" "let" "stop" "stop-title" "define")}
        {Lisp-Entry "selected-data" method () #f 280 11 280 24 ("selected-row" "get-father" "get-father~" "get-user-data" "get-user-data~" "or" "when" "row" "row-data" "define")}
        {Lisp-Entry "selected-row" method () #f 289 11 289 23 ("get-row" "get-row~" "when" "get-single-selection" "get-single-selection~" "n" "detail" "locate" "tree" "let*")}}
      {Lisp-Entry "Detail-Tree" class () #f 301 7 301 18 ("Tree-View")
        {Lisp-Entry "form" anonymous #f #f 304 3 304 7 ("toplevel-controls?:" "431" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" ":images" "portfolio:" "install" "<install>")}}}})
"Frame-Snapshot"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "snapshot" "Frame-Snapshot.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.snapshot.Frame-Snapshot" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.debugger")}
      {Lisp-Entry "Frame-Snapshot" class () #f 43 7 43 21 ("Object")
        {Lisp-Entry "thread" slot () #f 46 8 46 14 ()}
        {Lisp-Entry "get-thread" accessor #f #f 46 22 46 30 ()}
        {Lisp-Entry "parameters" slot () #f 47 8 47 18 ()}
        {Lisp-Entry "initialize" method (override) #f 50 20 50 30 ("parameters~self" "self" "thread~self" "set!" "nextmethod" "parameters" "thread")}
        {Lisp-Entry "compare-object" method (override) #f 56 20 56 34 (":not-equal" "else" ":equal" "present~" "present" "=" ":incompatible" "Frame-Snapshot" "is-not?" "cond" "target")}
        {Lisp-Entry "get-parameters" method (public virtual) #f 70 26 70 40 ("parameters")}
        {Lisp-Entry "present" method (public virtual) #f 79 26 79 33 ()}
        {Lisp-Entry "get-image" method (public virtual) #f 83 26 83 35 ()}
        {Lisp-Entry "edit" method (public virtual) #f 92 26 92 30 ()}}}})
"Frames-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugger" "Frames-View.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.debugger.debugger.Frames-View" module (protected) #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.debugger")}
      {Lisp-Entry "Frames-View" class () #f 47 7 47 18 ("initialize" "Layout-View")
        {Lisp-Entry "process" property () #f 50 12 50 19 ()}
        {Lisp-Entry "get-process" accessor #f #f 50 44 50 52 ()}
        {Lisp-Entry "set-process" accessor #f #f 50 44 50 52 ()}
        {Lisp-Entry "thread" property () #f 51 12 51 18 ()}
        {Lisp-Entry "form" anonymous #f #f 54 3 54 7 ("on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-select-frame" "Selection-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" "frames" "Frames-Tree" "<Frames-Tree>" "shown?:" "header" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "tool" "style:" "vscroll?:" "center" "scroller" "Scroller-View" "<Scroller-View>" "on-show-hidden" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "hidden" "Toggle-Tool" "<Toggle-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 65 25 65 38 ("frames-view" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 74 25 74 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 78 25 78 35 ()}
        {Lisp-Entry "get-tools-view" method (override) #f 87 20 87 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) #f 91 20 91 33 ("acquire-focus" "acquire-focus~" "frames" "locate" "tree" "let")}
        {Lisp-Entry "get-thread" method (public) #f 101 18 101 28 ("thread")}
        {Lisp-Entry "set-thread" method (public) #f 105 18 105 28 ("update-frames" "thread" "set!" "value")}
        {Lisp-Entry "show-hidden?" method () #f 110 11 110 23 ("hidden" "locate" "get-selected?" "get-selected?~")}
        {Lisp-Entry "thread-changed" method (public) #f 114 18 114 32 ("get-variables-view" "get-host" "get-host~" "ensure-unzoomed" "select-first-frame" "view-visible?" "when" "update-frames" "thread" "get-debugger-manager" "get-process" "get-process~" "process" "set!" "new-thread")}
        {Lisp-Entry "resize" method (override) #f 129 20 129 26 ("scroller" "locate" "size-figure" "size-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-show-hidden" method () #f 134 11 134 25 ("update-frames" "evt")}
        {Lisp-Entry "on-select-frame" method () #f 138 11 138 26 ("frames" "locate" "acquire-focus" "acquire-focus~" "when" "user-origin:" "selected-frame" "get-debugger-manager" "frame-changed" "frame-changed~" "get-user-origin" "get-user-origin~" "user-origin" "let" "evt")}
        {Lisp-Entry "on-double-click" method () #f 147 11 147 26 ("select?:" "selected-frame" "get-debugger-manager" "edit-frame" "edit-frame~" "evt")}
        {Lisp-Entry "on-return-press" method (override) #f 151 20 151 35 ("select?:" "selected-frame" "get-debugger-manager" "edit-frame" "edit-frame~" "evt")}
        {Lisp-Entry "update-frames" method () #f 160 11 160 24 ("generate-event?:" "debugged=?" "test:" "data" "use:" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "get-hidden?" "get-hidden?~" "show-hidden?" "or" "when" "image" "title" "get-debugger-manager" "for-each-frame" "for-each-frame~" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "with-preserved-selection" "with-preserved-selection~" "frames" "locate" "tree" "lambda" "with-system-exception-debugger" "Image-Resource" "get-interpreted?" "get-interpreted?~" "frame-image" "else" "present-reference" "string-length" "1" "substring" "format" "0" "string-ref" "eqv?" "if" "symbol->string" "str" "symbol?" "not" "cond" "get-name" "get-name~" "name" "let" "frame" "frame-title" "define")}
        {Lisp-Entry "select-first-frame" method (public) #f 202 18 202 36 ("force?:" "set-single-selection" "set-single-selection~" "0" "get-visible-count" "get-visible-count~" ">" "get-single-selection" "get-single-selection~" "not" "and" "when" "frames" "locate" "tree" "let")}
        {Lisp-Entry "selected-frame" method (public) #f 209 18 209 32 ("get-user-data" "get-user-data~" "when" "selected-row" "row" "let")}
        {Lisp-Entry "selected-row" method () #f 215 11 215 23 ("get-row" "get-row~" "when" "get-single-selection" "get-single-selection~" "n" "frames" "locate" "tree" "let*")}}
      {Lisp-Entry "Frames-Tree" class () #f 227 7 227 18 ("Tree-View")
        {Lisp-Entry "form" anonymous #f #f 230 3 230 7 ("toplevel-controls?:" "431" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" ":images" "portfolio:" "install" "<install>")}}}})
"Location-Indicator"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugger" "Location-Indicator.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.debugger.debugger.Location-Indicator" module (protected) #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.project")}
      {Lisp-Entry "Location-Indicator" class () #f 45 7 45 25 ("Indicator")
        {Lisp-Entry "edit-location" method (public) #f 53 18 53 31 ("position" "text" "receive" "edit" "get-guest" "get-guest~" "visible?:" "activate-focus?:" "get-application" "edit-document" "edit-document~" "frame" "1" "+" "end" "Cell" "new" "start" "values" "not" "if" "container->file" "file" "let" "col" "line" "container" "bind" "find-location" "define" "select?" "select?:" "location")}}}})
"Process-Snapshot"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "snapshot" "Process-Snapshot.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.snapshot.Process-Snapshot" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Process-Snapshot" class () #f 43 7 43 23 ("initialize" "Component")
        {Lisp-Entry "process" property () #f 46 12 46 19 ()}
        {Lisp-Entry "get-process" accessor #f #f 46 49 46 57 ()}
        {Lisp-Entry "set-process" accessor #f #f 46 49 46 57 ()}
        {Lisp-Entry "date" property () #f 47 12 47 16 ()}
        {Lisp-Entry "get-date" accessor #f #f 47 49 47 57 ()}
        {Lisp-Entry "set-date" accessor #f #f 47 49 47 57 ()}
        {Lisp-Entry "info" property () #f 48 12 48 16 ()}
        {Lisp-Entry "get-info" accessor #f #f 48 49 48 57 ()}
        {Lisp-Entry "set-info" accessor #f #f 48 49 48 57 ()}
        {Lisp-Entry "computer" property () #f 49 12 49 20 ()}
        {Lisp-Entry "get-computer" accessor #f #f 49 49 49 57 ()}
        {Lisp-Entry "set-computer" accessor #f #f 49 49 49 57 ()}
        {Lisp-Entry "exception" property () #f 50 12 50 21 ()}
        {Lisp-Entry "get-exception" accessor #f #f 50 49 50 57 ()}
        {Lisp-Entry "set-exception" accessor #f #f 50 49 50 57 ()}
        {Lisp-Entry "memory" property () #f 51 12 51 18 ()}
        {Lisp-Entry "get-memory" accessor #f #f 51 49 51 57 ()}
        {Lisp-Entry "set-memory" accessor #f #f 51 49 51 57 ()}
        {Lisp-Entry "collector" property () #f 52 12 52 21 ()}
        {Lisp-Entry "get-collector" accessor #f #f 52 49 52 57 ()}
        {Lisp-Entry "set-collector" accessor #f #f 52 49 52 57 ()}
        {Lisp-Entry "threads" property () #f 53 12 53 19 ()}
        {Lisp-Entry "get-threads" accessor #f #f 53 49 53 57 ()}
        {Lisp-Entry "set-threads" accessor #f #f 53 49 53 57 ()}
        {Lisp-Entry "construct-literal" method (meta) #f 57 16 57 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "print" method (override) #f 61 20 61 25 ("threads" "threads:" "collector" "collector:" "memory" "memory:" "exception" "exception:" "computer" "computer:" "date" "date:" "process" "process:" "list" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Processes-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugger" "Processes-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.debugger.debugger.Processes-View" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.dialog" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.io" "jazz.debugger")}
      {Lisp-Entry "Processes-View" class () #f 50 7 50 21 ("Layout-View")
        {Lisp-Entry "form" anonymous #f #f 53 3 53 7 ("on-double-click" "double-click-handler:" "on-context-menu" "context-menu-handler:" "on-select-process" ":form" "Selection-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" "processes" "Processes-Tree" "<Processes-Tree>" "shown?:" "header" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "tool" "style:" "vscroll?:" "center" "scroller" "Scroller-View" "<Scroller-View>" "on-update" "update" "2" "on-focus" "tail" "location:" "enabled?:" "focus" "0" "6" "Separator" "<Separator>" "on-open-snapshot" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "open" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 68 25 68 38 ("processes-view" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 77 25 77 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 81 25 81 35 ()}
        {Lisp-Entry "client-activate" method (override) #f 85 20 85 35 ("update-highlight" "when" "selected-process" "let")}
        {Lisp-Entry "get-tools-view" method (override) #f 96 20 96 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) #f 100 20 100 33 ("acquire-focus" "acquire-focus~" "processes" "locate" "tree" "let")}
        {Lisp-Entry "install" method (override) #f 110 20 110 27 ("update" "nextmethod" "rest")}
        {Lisp-Entry "resize" method (override) #f 120 20 120 26 ("scroller" "locate" "size-figure" "size-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-context-menu" method () #f 125 11 125 26 ("track-popup-menu" "when" "selected-object" "new-context-menu" "menu" "let" "lambda" "with-context-click" "with-context-click~" "acquire" "acquired" "get-position" "get-position~" "pos" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "on-double-click" method () #f 136 11 136 26 ("focus-selected-process" "focusable?" "focusable?~" "and" "when" "selected-process" "process" "let" "evt")}
        {Lisp-Entry "Snapshot-Extensions" definition () #f 142 14 142 33 ()}
        {Lisp-Entry "on-open-snapshot" method () #f 146 11 146 27 ("processes" "locate" "acquire-focus" "acquire-focus~" "open-snapshot" "set-selected-process" "Snapshot-Extensions" "extensions:" "Jazz-Settings" "Directory" "directory:" "choose-file" "with-preserved-current-directory" "file" "let" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-select-process" method () #f 156 11 156 28 ("process-change" "update-tools" "evt")}
        {Lisp-Entry "on-focus" method () #f 161 11 161 19 ("focus-selected-process" "evt")}
        {Lisp-Entry "on-update" method () #f 165 11 165 20 ("user-origin:" "update" "get-debuggers" "validate-processes" "validate-processes~" "for-each" "get-shift?" "get-shift?~" "when" "evt")}
        {Lisp-Entry "process-change" method () #f 171 11 171 25 ("selected-process" "get-debugger-manager" "process-changed" "process-changed~")}
        {Lisp-Entry "update-tools" method () #f 175 11 175 23 ("focusable?" "focusable?~" "and" "focus" "locate" "set-enabled?" "set-enabled?~" "selected-process" "process" "let")}
        {Lisp-Entry "update" method (public) #f 185 18 185 24 ("generate-event?:" "debugged=?" "test:" "data" "use:" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "with-preserved-selection" "with-preserved-selection~" "processes" "locate" "with-system-exception-debugger" "user-data:" "background:" "frame-color:" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "set-alive?" "set-alive?~" "get-visited-highlight-color" "get-visited-highlight-color~" "background" "get-stopped-frame-color" "get-stopped-frame-color~" "frame-color" "image" "present" "present~" "title" "debugger" "lambda" "for-each-process" "for-each-process~" "get-debugger-manager" "manager" "let" "tree" "update-processes" "else" "get-icon" "get-icon~" "or" "Image-Resource" "not" "cond" "focused?" "live?" "process" "process-image" "define" "user-origin" "user-origin:")}
        {Lisp-Entry "update-highlight" method (public) #f 224 18 224 34 ("invalidate-cell" "invalidate-cell~" "get-visited-highlight-color" "get-visited-highlight-color~" "set-background" "set-background~" "get-stopped-frame-color" "get-stopped-frame-color~" "set-frame-color" "set-frame-color~" "manager" "get-cell-data" "get-cell-data~" "data" "0" "row->line" "row->line~" "Cell" "new" "cell" "process-row" "line" "processes" "locate" "tree" "get-debugger-manager" "visit-debugged" "visit-debugged~" "debugged=?" "when" "selected-process" "let" "process")}
        {Lisp-Entry "selected-process" method (public) #f 244 18 244 34 ("selected-object")}
        {Lisp-Entry "selected-object" method (public) #f 248 18 248 33 ("get-user-data" "get-user-data~" "when" "selected-row" "row" "let")}
        {Lisp-Entry "selected-row" method () #f 254 11 254 23 ("get-row" "get-row~" "when" "get-single-selection" "get-single-selection~" "n" "processes" "locate" "tree" "let*")}
        {Lisp-Entry "set-selected-process" method (public) #f 261 18 261 38 ("row->line" "row->line~" "set-single-selection" "set-single-selection~" "when" "process-row" "row" "processes" "locate" "tree" "let" "process")}
        {Lisp-Entry "process-row" definition () #f 268 15 268 26 ("continuation-return" "get-user-data" "get-user-data~" "debugged=?" "when" "rank" "row" "for-each-row" "for-each-row~" "return" "lambda" "continuation-capture" "assert" "process" "tree")}
        {Lisp-Entry "new-context-menu" method () #f 284 11 284 27 ("else" "Debugged-Process" "typecase" "layout-menu" "layout-menu~" "cleanup-separators" "cleanup-separators~" "exit" "set-title" "set-title~" "when" "focus" "locate" "locate~" "set-visible?" "set-visible?~" "and" "unless" "focusable?~" "focusable?" "get-alive?" "get-alive?~" "alive?" "self" "client:" "Process-Menu" "new" "menu" "let" "new-process-menu" "define" "object")}
        {Lisp-Entry "exit-selected-process" method () #f 305 11 305 32 ("set-selection" "set-selection~" "processes" "locate" "tree" "exit" "exit~" "selected-object" "object" "let")}
        {Lisp-Entry "focus-selected-process" method () #f 312 11 312 33 ("selected-process" "get-debugger-manager" "focus-process" "focus-process~")}
        {Lisp-Entry "select-toplevel" method () #f 317 11 317 26 ("get-toplevel" "select-foreground" "select-foreground~")}
        {Lisp-Entry "open-snapshot" method (public) #f 321 18 321 31 ("add-snapshot" "set-property" "set-property~" "load-jml" "snapshot" "let" "file")}
        {Lisp-Entry "add-snapshot" method (public) #f 327 18 327 30 ("get-application" "get-snapshot-debugger" "get-snapshot-debugger~" "attach-process" "attach-process~" "snapshot")}}
      {Lisp-Entry "Processes-Tree" class () #f 336 7 336 21 ("Tree-View")
        {Lisp-Entry "form" anonymous #f #f 339 3 339 7 ("toplevel-controls?:" "431" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" ":images" "portfolio:" "install" "<install>")}}
      {Lisp-Entry "Process-Menu" class () #f 349 7 349 19 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f #f 352 3 352 7 ("on-exit" "exit" "on-select" "select" "Separator-Item" "<Separator-Item>" "on-focus" ":form" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "default?:" "title:" "focus" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}
        {Lisp-Entry "on-focus" method () #f 363 11 363 19 ("client" "focus-selected-process" "focus-selected-process~" "evt")}
        {Lisp-Entry "on-select" method () #f 368 11 368 20 ("client" "select-toplevel" "select-toplevel~" "evt")}
        {Lisp-Entry "on-exit" method () #f 372 11 372 18 ("client" "exit-selected-process" "exit-selected-process~" "evt")}}}})
"Restarts-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugger" "Restarts-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.debugger.debugger.Restarts-View" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.debugger")}
      {Lisp-Entry "Restarts-View" class () #f 46 7 46 20 ("initialize" "Layout-View")
        {Lisp-Entry "process" property () #f 49 12 49 19 ()}
        {Lisp-Entry "get-process" accessor #f #f 49 44 49 52 ()}
        {Lisp-Entry "set-process" accessor #f #f 49 44 49 52 ()}
        {Lisp-Entry "thread" property () #f 50 12 50 18 ()}
        {Lisp-Entry "form" anonymous #f #f 53 3 53 7 ("double-click-handler:" "on-selection-change" ":form" "Selection-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" "restarts" "Restarts-Tree" "<Restarts-Tree>" "shown?:" "header" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "tool" "style:" "vscroll?:" "center" "scroller" "Scroller-View" "<Scroller-View>" "on-invoke-restart" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "enabled?:" "22" "Dimension" "size:" "restart" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 64 25 64 38 ("restarts-view" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 73 25 73 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 77 25 77 35 ()}
        {Lisp-Entry "get-tools-view" method (override) #f 86 20 86 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) #f 90 20 90 33 ("acquire-focus" "acquire-focus~" "restarts" "locate" "tree" "let")}
        {Lisp-Entry "get-thread" method (public) #f 100 18 100 28 ("thread")}
        {Lisp-Entry "set-thread" method (public) #f 104 18 104 28 ("update-restarts" "thread" "set!" "value")}
        {Lisp-Entry "thread-changed" method (public) #f 109 18 109 32 ("update-restarts" "thread" "get-debugger-manager" "get-process" "get-process~" "process" "set!" "new-thread")}
        {Lisp-Entry "resize" method (override) #f 120 20 120 26 ("scroller" "locate" "size-figure" "size-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-selection-change" method () #f 125 11 125 30 ("selected-restart" "restart" "locate" "set-enabled?" "set-enabled?~" "evt")}
        {Lisp-Entry "on-invoke-restart" method () #f 129 11 129 28 ("process" "restart-stop" "restart-stop~" "lambda" "with-jrm-exception-handler" "when" "selected-restart" "restart" "let" "evt")}
        {Lisp-Entry "update-restarts" method () #f 142 11 142 26 ("generate-event?:" "debugged=?" "test:" "data" "use:" "get-restarts" "get-restarts~" "with-jrm-exception-handler" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "Image-Resource" "image" "get-message" "get-message~" "title" "restart" "for-each" "get-active-stop" "get-active-stop~" "stop" "thread" "when" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "with-preserved-selection" "with-preserved-selection~" "restarts" "locate" "tree" "let" "lambda" "with-system-exception-debugger")}
        {Lisp-Entry "selected-restart" method (public) #f 171 18 171 34 ("get-user-data" "get-user-data~" "when" "selected-row" "row" "let")}
        {Lisp-Entry "selected-row" method () #f 177 11 177 23 ("get-row" "get-row~" "when" "get-single-selection" "get-single-selection~" "n" "restarts" "locate" "tree" "let*")}}
      {Lisp-Entry "Restarts-Tree" class () #f 189 7 189 20 ("Tree-View")
        {Lisp-Entry "form" anonymous #f #f 192 3 192 7 ("toplevel-controls?:" "431" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" ":images" "portfolio:" "install" "<install>")}}}})
"Stack-Snapshot"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "snapshot" "Stack-Snapshot.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.snapshot.Stack-Snapshot" module (protected) #f 37 18 37 55 (":reader" "cdr" "->string" "Tree-Label" "value" "couple" "user-data:" "image:" "Tree-Node" "children:" "add-row" "for-each" "remove-every-row" "Tree-View" "Jazz-Code-Location" "new" "edit" "edit~" "get-application" "edit-definitions" "edit-definitions~" "null?" "bind" "get-user-data" "get-user-data~" "data" "get-row" "get-row~" "when" "present-frame~" "element" "get-single-selection" "get-single-selection~" "selection" "tree" "evt" "locate" "insert-stack" "insert-stack~" "clt" "set-client" "get-client" "26" "get-stack~" "reverse" "effective-stack" "explicit" "accessors" "client" "property" "163" "Tree-Label-Column" "<Tree-Label-Column>" "display-images?:" "toplevel-controls?:" "100" "row" "selection-mode:" "variables" "Variables-View" "<Variables-View>" "hscroll?:" "second" "258" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" "on-double-click" "double-click-handler:" "on-select-stack" ":form" "Event-Handler" "selection-handler:" ":images" "portfolio:" "Stack-Tree" "<Stack-Tree>" "shown?:" "header" "Tree-Header" "<Tree-Header>" "content" "!" "<!>" "tool" "vscroll?:" "center" "scroller" "name:" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "first" "location:" "Border-View" "<Border-View>" "40" "division:" "relative" "mode:" "horz" "orientation:" "Splitter-View" "<Splitter-View>" "fill" "layout-type:" "400" "600" "Dimension" "size:" "install" "<install>" "form" "Layout-View" "frame-variables" "variable-value" "variable-value~" "variable" "local-variables" "frame-context" "self" "catch" "binding" "or" "in-manifest?" "values" "object-name" "field-creator" "category-identifier" "and" "object-definer" "definer" "frame-name" "function-method" "present-function" "present-method" "receive" "closure-function" "closure-function~" "Interpreter" "function-method?" "function-method?~" "method?" "frame-procedure" "procedure" "let*" "format" "if" "lexicon-forward-lexicon" "forward" "let" "Image-Resource" "list" "info" "name" "image" "present-frame-info" "present-unknown-frame" "else" "present-compiled-procedure-frame" "present-external-frame" "present-closure-frame" "present-lexical-frame" "lexical" "case" "present-variables" "present-frame" "cons" "map" "2" "tail" "compiled-procedure" "external" "closure" "frame-type" "memq?" "frame" "lambda" "collect-if" "get-stack" "public" "Stack-Viewer" "get-viewer-class" "get-title" "runtime-stack" "collect-presented" "remove-frames" "present-stack" "set!" "nextmethod" "initialize" "method" "stack" "slot" "Viewable" "implements" "Object" "extends" "Stack-Snapshot" "class" "jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.graphic")}
      {Lisp-Entry "Stack-Snapshot" class () #f 43 7 43 21 ("Viewable" "Object")}}})
"Thread-Snapshot"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "snapshot" "Thread-Snapshot.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.snapshot.Thread-Snapshot" module (protected) #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Thread-Snapshot" class () #f 43 7 43 22 ("Component")}
      {Lisp-Entry "Thread-Snapshot" class () #f 49 7 49 22 ("initialize" "Component")
        {Lisp-Entry "model" property () #f 52 12 52 17 ()}
        {Lisp-Entry "get-model" accessor #f #f 52 49 52 57 ()}
        {Lisp-Entry "set-model" accessor #f #f 52 49 52 57 ()}
        {Lisp-Entry "label" property () #f 53 12 53 17 ()}
        {Lisp-Entry "get-label" accessor #f #f 53 49 53 57 ()}
        {Lisp-Entry "set-label" accessor #f #f 53 49 53 57 ()}
        {Lisp-Entry "state" property () #f 54 12 54 17 ()}
        {Lisp-Entry "get-state" accessor #f #f 54 49 54 57 ()}
        {Lisp-Entry "set-state" accessor #f #f 54 49 54 57 ()}
        {Lisp-Entry "system-stack" property () #f 55 12 55 24 ()}
        {Lisp-Entry "get-system-stack" accessor #f #f 55 49 55 57 ()}
        {Lisp-Entry "set-system-stack" accessor #f #f 55 49 55 57 ()}
        {Lisp-Entry "data-stack" property () #f 56 12 56 22 ()}
        {Lisp-Entry "get-data-stack" accessor #f #f 56 49 56 57 ()}
        {Lisp-Entry "set-data-stack" accessor #f #f 56 49 56 57 ()}
        {Lisp-Entry "call-stack" property () #f 57 12 57 22 ()}
        {Lisp-Entry "get-call-stack" accessor #f #f 57 49 57 57 ()}
        {Lisp-Entry "set-call-stack" accessor #f #f 57 49 57 57 ()}
        {Lisp-Entry "construct-literal" method (meta) #f 61 16 61 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "print" method () #f 65 11 65 16 ("call-stack" "call-stack:" "data-stack" "data-stack:" "system-stack" "system-stack:" "state" "state:" "label" "label:" "model" "model:" "list" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Threads-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugger" "Threads-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.debugger.debugger.Threads-View" module (protected) #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.debugger" "jazz.debuggee.stub")}
      {Lisp-Entry "Threads-View" class () #f 49 7 49 19 ("explicit" "initialize" "Layout-View")
        {Lisp-Entry "process" property () #f 52 12 52 19 ()}
        {Lisp-Entry "form" anonymous #f #f 55 3 55 7 ("on-double-click" "double-click-handler:" "on-context-menu" "context-menu-handler:" "on-select-thread" ":form" "Selection-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" "threads" "Threads-Tree" "<Threads-Tree>" "shown?:" "header" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "tool" "style:" "vscroll?:" "center" "scroller" "Scroller-View" "<Scroller-View>" "on-update" "update" "2" "on-toggle-detailed" "tail" "location:" "detailed" "Toggle-Tool" "<Toggle-Tool>" "0" "5" "Separator" "<Separator>" "on-continue" "continue" "on-break" "break" "on-restart" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "enabled?:" "22" "Dimension" "size:" "restart" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 72 25 72 38 ("threads-view" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 81 25 81 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 85 25 85 35 ()}
        {Lisp-Entry "client-activate" method (override) #f 89 20 89 35 ("update-highlight" "when" "selected-thread" "let")}
        {Lisp-Entry "get-tools-view" method (override) #f 100 20 100 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) #f 104 20 104 33 ("acquire-focus" "acquire-focus~" "threads" "locate" "tree" "let")}
        {Lisp-Entry "install" method (override) #f 114 20 114 27 ("update" "nextmethod" "rest")}
        {Lisp-Entry "get-process" method (public) #f 124 18 124 29 ("process")}
        {Lisp-Entry "set-process" method (public) #f 128 18 128 29 ("update" "process" "set!" "value")}
        {Lisp-Entry "show-detailed?" method () #f 133 11 133 25 ("detailed" "locate" "get-selected?" "get-selected?~")}
        {Lisp-Entry "process-changed" method (public) #f 137 18 137 33 ("update" "process" "set!" "new-process")}
        {Lisp-Entry "resize" method (override) #f 147 20 147 26 ("scroller" "locate" "size-figure" "size-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-context-menu" method () #f 152 11 152 26 ("track-popup-menu" "when" "selected-thread" "new-context-menu" "menu" "let" "lambda" "with-context-click" "with-context-click~" "acquire" "acquired" "get-position" "get-position~" "pos" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "on-double-click" method () #f 163 11 163 26 ("evt")}
        {Lisp-Entry "on-toggle-detailed" method () #f 167 11 167 29 ("update" "evt")}
        {Lisp-Entry "on-select-thread" method () #f 171 11 171 27 ("thread-change" "update-tools" "evt")}
        {Lisp-Entry "on-restart" method () #f 176 11 176 21 ("restart-stop" "selected-thread" "get-active-stop" "get-active-stop~" "get-restarts" "get-restarts~" "car" "restart" "let" "evt")}
        {Lisp-Entry "on-break" method () #f 181 11 181 19 ("break-thread" "evt")}
        {Lisp-Entry "on-continue" method () #f 185 11 185 22 ("continue-stop" "evt")}
        {Lisp-Entry "on-update" method () #f 189 11 189 20 ("user-origin:" "update" "evt")}
        {Lisp-Entry "with-thread-refresh" method () #f 193 11 193 30 ("update" "execute-event" ".1" "sleep" "lambda" "new-thread" "thread-start!" "thunk" "thread")}
        {Lisp-Entry "event-thread-local-proxy?" definition () #f 205 15 205 40 ("event-thread" "get-object" "get-object~" "get-thread" "get-thread~" "Debuggee-Thread-Local-Proxy" "is?" "and" "get-reference" "get-reference~" "thread-proxy" "let" "get-application" "get-local-debugger" "get-local-debugger~" "get-debugger" "get-debugger~" "eq?" "when" "thread")}
        {Lisp-Entry "restart-stop" method () #f 212 11 212 23 ("process" "restart-stop" "restart-stop~" "with-jrm-exception-handler" "lambda" "with-thread-refresh" "selected-thread" "thread" "let" "restart")}
        {Lisp-Entry "break-thread" method () #f 221 11 221 23 ("process" "break-thread" "break-thread~" "with-jrm-exception-handler" "lambda" "with-thread-refresh" "selected-thread" "thread" "let")}
        {Lisp-Entry "continue-stop" method () #f 230 11 230 24 ("process" "continue-stop" "continue-stop~" "with-jrm-exception-handler" "lambda" "with-thread-refresh" "get-active-stop" "get-active-stop~" "stop" "selected-thread" "thread" "let")}
        {Lisp-Entry "step-stop" method (package) #f 240 19 240 28 ("process" "step-stop" "step-stop~" "with-jrm-exception-handler" "lambda" "with-thread-refresh" "get-active-stop" "get-active-stop~" "stop" "selected-thread" "thread" "let" "command")}
        {Lisp-Entry "update-tools" method () #f 250 11 250 23 ("continue" "break" "not-null?" "restart" "locate" "set-enabled?" "set-enabled?~" "selected-state" "continue?" "break?" "restarts" "receive")}
        {Lisp-Entry "selected-state" method () #f 257 11 257 25 ("break" "get-kind" "get-kind~" "eq?" "get-restarts" "get-restarts~" "get-active-stop" "get-active-stop~" "stop" "values" "not" "if" "selected-thread" "thread" "let")}
        {Lisp-Entry "update" method (protected) #f 272 21 272 27 ("update-tools" "update-threads" "user-origin" "user-origin:")}
        {Lisp-Entry "update-threads" method (protected) #f 277 21 277 35 ("generate-event?:" "debugged=?" "test:" "data" "use:" "continuation-return" "thread-change" "set-selected-thread" "debugged-visited?" "debugged-visited?~" "return" "continuation-capture" "get-installed?" "when" "selected-thread" "unless" "show-detailed?" "detailed?:" "user-data:" "background:" "frame-color:" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "get-visited-highlight-color" "get-visited-highlight-color~" "background" "get-stopped-frame-color" "get-stopped-frame-color~" "frame-color" "image" "title" "for-each-thread" "for-each-thread~" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "with-preserved-selection" "with-preserved-selection~" "threads" "locate" "tree" "lambda" "with-system-exception-debugger" "get-debugger-manager" "manager" "Image-Resource" "thread-image" "->string" "get-state" "get-state~" "else" "break" "format" "exception" "run" "get-kind" "get-kind~" "case" "get-name" "get-name~" "present-thread-name" "name" "split" "car" "if" "get-reason" "get-reason~" "reason" "let" "default" "stop-title" "detailed?" "stop" "thread" "thread-title" "define" "user-origin" "user-origin:")}
        {Lisp-Entry "update-highlight" method (public) #f 332 18 332 34 ("invalidate-cell" "invalidate-cell~" "get-visited-highlight-color" "get-visited-highlight-color~" "set-background" "set-background~" "get-stopped-frame-color" "get-stopped-frame-color~" "set-frame-color" "set-frame-color~" "manager" "get-cell-data" "get-cell-data~" "data" "0" "row->line" "row->line~" "Cell" "new" "cell" "thread-row" "row" "threads" "locate" "tree" "get-debugger-manager" "visit-debugged" "visit-debugged~" "debugged=?" "when" "selected-thread" "let" "thread")}
        {Lisp-Entry "thread-change" method () #f 352 11 352 24 ("selected-thread" "get-debugger-manager" "thread-changed" "thread-changed~")}
        {Lisp-Entry "selected-thread" method (public) #f 361 18 361 33 ("get-user-data" "get-user-data~" "when" "selected-row" "row" "let")}
        {Lisp-Entry "selected-row" method () #f 367 11 367 23 ("threads" "locate" "get-selected-row" "get-selected-row~")}
        {Lisp-Entry "set-selected-thread" method (public) #f 371 18 371 37 ("row->line" "row->line~" "set-single-selection" "set-single-selection~" "when" "thread-row" "row" "threads" "locate" "tree" "let" "thread")}
        {Lisp-Entry "thread-row" definition () #f 378 15 378 25 ("continuation-return" "get-user-data" "get-user-data~" "debugged=?" "when" "rank" "row" "for-each-row" "for-each-row~" "return" "lambda" "continuation-capture" "assert" "thread" "tree")}
        {Lisp-Entry "new-context-menu" method () #f 394 11 394 27 ("else" "Debugged-Thread" "typecase" "layout-menu" "layout-menu~" "cleanup-separators" "cleanup-separators~" "restart-stop" "icon" "get-message" "get-message~" "title" "restart" "for-each" "break-thread" "action-handler:" "Image-Resource" "icon:" "title:" "parent:" "Label-Item" "if" "get-active-stop" "get-active-stop~" "stop" "Thread-Menu" "menu" "let" "selected-state" "continue?" "break?" "restarts" "receive" "thread" "new-thread-menu" "with-jrm-exception-handler" "event" "lambda" "execute:" "Event-Handler" "new" "proc" "make-handler" "define" "object")}}
      {Lisp-Entry "Threads-Tree" class () #f 429 7 429 19 ("Tree-View")
        {Lisp-Entry "form" anonymous #f #f 432 3 432 7 ("toplevel-controls?:" "431" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" ":images" "portfolio:" "install" "<install>")}}
      {Lisp-Entry "Thread-Menu" class () #f 442 7 442 18 ("Context-Menu")}}})
"Variables-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "debugger" "Variables-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.debugger.debugger.Variables-View" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.editor.jazz" "jazz.debugger")}
      {Lisp-Entry "Variables-View" class () #f 48 7 48 21 ("explicit" "initialize" "Layout-View")
        {Lisp-Entry "process" property () #f 51 12 51 19 ()}
        {Lisp-Entry "continuation-frame" property () #f 52 12 52 30 ()}
        {Lisp-Entry "form" anonymous #f #f 55 3 55 7 ("303" "value" "130" "width:" "name" "row" "selection-mode:" "multiple-selection?:" "inspector" "header" "content" "scroller" "!" "<!>" "Medium" "Color" "background:" "variables" "Variables-Inspector-View" "<Variables-Inspector-View>" "on-toggle-dynamic" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "dynamic" "Toggle-Tool" "<Toggle-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 69 25 69 38 ("variables-view" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 78 25 78 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 82 25 82 35 ()}
        {Lisp-Entry "get-tools-view" method (override) #f 91 20 91 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) #f 95 20 95 33 ("acquire-focus" "acquire-focus~" "get-inspector" "tree" "let")}
        {Lisp-Entry "get-inspector-view" method (public) #f 105 18 105 36 ("variables" "locate")}
        {Lisp-Entry "get-inspector" method (public) #f 109 18 109 31 ("get-inspector-view" "get-inspector" "get-inspector~")}
        {Lisp-Entry "get-process" method (public) #f 113 18 113 29 ("get-inspector-view" "get-process" "get-process~")}
        {Lisp-Entry "set-process" method (public) #f 117 18 117 29 ("get-inspector-view" "set-process" "set-process~" "process")}
        {Lisp-Entry "get-continuation-frame" method (public) #f 121 18 121 40 ("continuation-frame")}
        {Lisp-Entry "set-continuation-frame" method (public) #f 125 18 125 40 ("determine-frame-client" "get-inspector-view" "set-client" "set-client~" "continuation-frame" "set!" "frm")}
        {Lisp-Entry "frame-changed" method (public) #f 130 18 130 31 ("set-continuation-frame" "get-debugger-manager" "get-process" "get-process~" "set-process" "new-frame")}
        {Lisp-Entry "determine-frame-client" method () #f 135 11 135 33 ("cons" ":lexical" ":all" "if" "kind" "let" "continuation-frame" "when" "dynamic" "locate" "get-selected?" "get-selected?~" "show-dynamic?" "define")}
        {Lisp-Entry "resize" method (override) #f 149 20 149 26 ("variables" "locate" "size-figure" "size-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-backward" method () #f 154 11 154 22 ("get-inspector-view" "on-backward" "on-backward~" "evt")}
        {Lisp-Entry "on-forward" method () #f 158 11 158 21 ("get-inspector-view" "on-forward" "on-forward~" "evt")}
        {Lisp-Entry "on-frame-change" method (package) #f 162 19 162 34 ("else" "Frame-Snapshot" "typecase" "set-continuation-frame" "set-process" "frame:" "frame" "process:" "get-property" "get-property~" "process" "let" "evt")}
        {Lisp-Entry "on-toggle-dynamic" method () #f 177 11 177 28 ("determine-frame-client" "get-inspector-view" "set-client" "set-client~" "continuation-frame" "when" "evt")}}
      {Lisp-Entry "Variables-Inspector-View" class () #f 187 7 187 31 ("Inspector-View")
        {Lisp-Entry "form-model" method (override) #f 190 20 190 30 ("nextmethod" "else" "Variables-Inspector" "inspector" "get-name" "get-name~" "case" "form")}}
      {Lisp-Entry "Variables-Inspector" class () #f 201 7 201 26 ("Inspector")
        {Lisp-Entry "inspect" method (override) #f 204 20 204 27 ("nextmethod" "else" "frame:" "case" "get-variables" "get-variables~" "with-jrm-exception-handler" "Debugged-Frame" "is?" "length" "naturals" "0" "list" "value" "name" "bind" "pair?" "if" "rank" "parameter" "lambda" "map" "get-parameters" "get-parameters~" "parameters" "let" "Frame-Snapshot" "typecase" "frame" "inspect-frame" "define" "max-content" "kind" "data")}}}})
"_debugger"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "_debugger.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.debugger" module () #f 37 8 37 21 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.debugger.autoload")}
      {Lisp-Entry "import" anonymous #f #f 42 1 42 7 ("jazz.ui.window" "jazz.ui.view" "jazz.system" "jazz.jrm" "jazz.console" "jazz.debugger.autoload")}
      {Lisp-Entry "with-jrm-exception-handler" definition (public) #f 50 20 50 46 ("catch" "throw-cancel" "message-box" "lambda" "execute-event" "process-jrm-exception" "Remote-Connection-Broke" "is?" "object?" "and" "os-exception?" "or" "exc" "jrm-exception?" "define" "thunk")}
      {Lisp-Entry "*debugger-manager*" definition () #f 71 12 71 30 ()}
      {Lisp-Entry "get-debugger-manager" definition (public) #f 75 20 75 40 ("*debugger-manager*")}
      {Lisp-Entry "set-debugger-manager" definition (public) #f 79 20 79 40 ("*debugger-manager*" "set!" "debugger-manager")}
      {Lisp-Entry "*debuggers*" definition () #f 88 12 88 23 ()}
      {Lisp-Entry "*current-debugger*" definition () #f 91 12 91 30 ()}
      {Lisp-Entry "*current-debugger-cookie*" definition () #f 94 12 94 37 ("0")}
      {Lisp-Entry "*debugger-cookies*" definition () #f 97 12 97 30 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "with-debuggers-mutex" definition () #f 101 12 101 32 ("mutex-unlock!" "mutex-lock!" "thunk" "lambda" "debuggers" "make-mutex" "mutex" "let")}
      {Lisp-Entry "register-debugger" definition (package) #f 109 21 109 38 ("list" "append" "*debuggers*" "set!" "lambda" "with-debuggers-mutex" "debugger")}
      {Lisp-Entry "unregister-debugger" definition (package) #f 115 21 115 40 ("remove!" "*debuggers*" "set!" "lambda" "with-debuggers-mutex" "debugger")}
      {Lisp-Entry "get-debuggers" definition (public) #f 121 20 121 33 ("*debuggers*")}
      {Lisp-Entry "current-debugger" definition (public) #f 125 20 125 36 ("*current-debugger*")}
      {Lisp-Entry "set-current-debugger" definition (public) #f 129 20 129 40 ("*current-debugger*" "set!" "debugger")}
      {Lisp-Entry "backward-compatible-key" definition (protected) #f 138 23 138 46 ("0" "list" "pair?" "if" "key")}
      {Lisp-Entry "register-debugger-cookie" definition (public) #f 149 20 149 44 ("increase!" "*debugger-cookies*" "table-set!" "*current-debugger-cookie*" "cookie" "let" "proc")}
      {Lisp-Entry "get-registered-cookie" definition (public) #f 156 20 156 41 ("table-set!" "*debugger-cookies*" "table-ref" "prog1" "cookie")}
      {Lisp-Entry "*processes*" definition () #f 161 12 161 23 ("equal?" "test:" "make-table")}
      {Lisp-Entry "register-process" definition (public) #f 165 20 165 36 ("*processes*" "table-set!" "process" "key")}
      {Lisp-Entry "registered-process" definition (public) #f 168 20 168 38 ("*processes*" "table-ref" "key")}
      {Lisp-Entry "registered-process-live?" definition (public) #f 172 20 172 44 ("get-debugger-manager" "find-live-process" "find-live-process~" "and" "registered-process" "process" "let" "key")}
      {Lisp-Entry "debugged=?" definition (public) #f 182 20 182 30 ("same?" "same?~" "eq?" "dy" "get-debugger" "get-debugger~" "dx" "let" "not" "and" "or" "y" "x")}
      {Lisp-Entry "debugged-hash" definition (public) #f 192 20 192 33 ("get-reference" "get-reference~" "get-process" "get-process~" "get-debugger" "get-debugger~" "eq?-hash" "fxwrap+" "0" "not" "if" "Debugged+" "<Debugged+>" "debugged")}
      {Lisp-Entry "collect-processes" definition (public) #f 207 20 207 37 ("queue-list" "get-debuggers" "validate-liveness?:" "get-processes" "get-processes~" "enqueue" "Debugged-Process" "new" "debugged" "process" "debugger" "lambda" "for-each" "new-queue" "queue" "let")}
      {Lisp-Entry "*debugger-resources*" definition () #f 223 12 223 32 ("debugged-hash" "hash:" "debugged=?" "test:" "make-table")}
      {Lisp-Entry "get-debugger-resources" definition (public) #f 227 20 227 42 ("*debugger-resources*" "table-ref" "process")}
      {Lisp-Entry "set-debugger-resources" definition (public) #f 230 20 230 42 ("*debugger-resources*" "table-set!" "resources" "process")}
      {Lisp-Entry "register-debugger-resource" definition (public) #f 234 20 234 46 ("get-debugger-resources" "cons" "set-debugger-resources" "resource" "process")}
      {Lisp-Entry "unregister-debugger-resource" definition (public) #f 237 20 237 48 ("get-debugger-resources" "remove!" "set-debugger-resources" "resource" "process")}
      {Lisp-Entry "close-process-debugger-resources" definition (package) #f 241 21 241 53 ("*debugger-resources*" "table-clear" "get-debugger-resources" "close-resource" "close-resource~" "for-each" "process")}
      {Lisp-Entry "Once-Breaks" definition () #f 251 12 251 23 ("eq?" "test:" "make-table")}
      {Lisp-Entry "add-break-once" definition (public) #f 255 20 255 34 ("Once-Breaks" "table-set!" "name")}
      {Lisp-Entry "break-once" definition (public) #f 259 20 259 30 ("break" "table-set!" "Once-Breaks" "table-ref" "when" "name")}
      {Lisp-Entry "Once-Executes" definition () #f 265 12 265 25 ("eq?" "test:" "make-table")}
      {Lisp-Entry "add-execute-once" definition (public) #f 269 20 269 36 ("Once-Executes" "table-set!" "name")}
      {Lisp-Entry "execute-once" definition (public) #f 273 20 273 32 ("table-set!" "Once-Executes" "table-ref" "when" "proc" "name")}
      {Lisp-Entry "register-debugger-console" definition (public) #f 284 20 284 45 ("process-thread:" "process-traits:" "process-title:" "present-process-title/traits/thread" "register-console" "register-console~" "process-information" "thread" "traits" "title" "bind" "get-console-manager" "manager" "let" "debugger-console-pump" "console-input" "console-input~" "with-jrm-exception-handler" "str" "start-pump" "lambda" "new-system-thread" "thread-start!" "port" "start-debugger-console-pump" "set-console-pump" "set-console-pump~" "set-console-port" "set-console-port~" "permanent-close:" "list" "open-string-pipe" "tail" "head" "receive" "text" "setup-debugger-console-ports" "define" "select?" "thread-proxy" "process-proxy")}
      {Lisp-Entry "unregister-debugger-console" definition (public) #f 308 20 308 47 ("get-console-text-manager" "unregister-console" "unregister-console~" "lambda" "execute-event" "thread-exit" "thread-interrupt!" "when" "get-console-pump" "get-console-pump~" "pump" "let" "text")}
      {Lisp-Entry "debugger-console-output" definition (public) #f 318 20 318 43 ("insert-formatted-line" "insert-formatted-line~" "text-ending" "text-ending~" "set-caret" "set-caret~" "lambda" "execute-event" "str" "text")}
      {Lisp-Entry "present-process-title" definition (public) #f 325 20 325 41 ("present-process-title/traits/thread" "process-information" "thread" "traits" "title" "bind" "thread-proxy" "process-proxy")}
      {Lisp-Entry "present-process-title/traits/thread" definition (public) #f 330 20 330 55 ("present-thread-name" "format" "not" "if" "present-process-title/traits" "let" "thread" "traits" "title")}
      {Lisp-Entry "present-process-title/traits" definition (public) #f 337 20 337 48 ("format" "if" "traits" "title")}
      {Lisp-Entry "present-process-traits" definition (public) #f 343 20 343 42 ("format" "trait" "lambda" "map" "string-append" "apply" "traits")}
      {Lisp-Entry "process-information" definition (public) #f 349 20 349 39 ("get-name" "get-name~" "and" "get-traits" "get-traits~" "get-title" "get-title~" "list" "thread-proxy" "process-proxy")}
      {Lisp-Entry "console-title" definition (public) #f 355 20 355 33 ("present-thread-name" "format" "primordial" "eq?" "not" "or" "if" "present-process-title/traits" "let" "thread" "traits" "title")}
      {Lisp-Entry "on-call-step-over" definition (public) #f 367 20 367 37 ("on-step-over" "evt")}
      {Lisp-Entry "on-call-step-into" definition (public) #f 371 20 371 37 ("on-step-into" "on-step-into-function" "get-shift?" "get-shift?~" "if" "evt")}
      {Lisp-Entry "on-call-step-out" definition (public) #f 377 20 377 36 ("on-step-out" "on-step-outside-function" "get-shift?" "get-shift?~" "if" "evt")}
      {Lisp-Entry "on-call-run-to" definition (public) #f 383 20 383 34 ("on-run-to-cursor" "on-run-to-result" "get-shift?" "get-shift?~" "if" "evt")}
      {Lisp-Entry "on-restart" definition (public) #f 394 20 394 30 ("restart" "evt")}
      {Lisp-Entry "on-break" definition (public) #f 398 20 398 28 ("break-next" "evt")}
      {Lisp-Entry "on-continue" definition (public) #f 403 20 403 31 ("continue" "bell" "debugging?" "not" "if" "evt")}
      {Lisp-Entry "on-step-over" definition (public) #f 409 20 409 32 ("step-over" "continue" "bell" "debugging?" "not" "if" "evt")}
      {Lisp-Entry "on-step-into" definition (public) #f 417 20 417 32 ("step-into" "continue" "bell" "debugging?" "not" "if" "evt")}
      {Lisp-Entry "on-step-into-function" definition (public) #f 425 20 425 41 ("step-into-function" "continue" "bell" "debugging?" "not" "if" "evt")}
      {Lisp-Entry "on-step-out" definition (public) #f 433 20 433 31 ("step-out" "continue" "bell" "debugging?" "not" "if" "evt")}
      {Lisp-Entry "on-step-outside-function" definition (public) #f 441 20 441 44 ("step-outside-function" "continue" "bell" "debugging?" "not" "if" "evt")}
      {Lisp-Entry "on-run-to-cursor" definition (public) #f 449 20 449 36 ("evt")}
      {Lisp-Entry "on-run-to-result" definition (public) #f 453 20 453 36 ("evt")}
      {Lisp-Entry "restart" definition (public) #f 457 20 457 27 ("get-application" "get-loop" "get-loop~" "restart" "restart~")}
      {Lisp-Entry "continue" definition (public) #f 461 20 461 28 ("get-application" "get-loop" "get-loop~" "continue" "continue~")}
      {Lisp-Entry "debugging?" definition (public) #f 465 20 465 30 ("0" "get-application" "get-loop" "get-loop~" "get-level" "get-level~" "/=")}
      {Lisp-Entry "get-processes-view" definition (public) #f 474 20 474 38 ("Processes-View" "singleton-docked" "get-guest" "get-guest~")}
      {Lisp-Entry "get-threads-view" definition (public) #f 478 20 478 36 ("Threads-View" "singleton-docked" "get-guest" "get-guest~")}
      {Lisp-Entry "get-frames-view" definition (public) #f 482 20 482 35 ("Frames-View" "singleton-docked" "get-guest" "get-guest~")}
      {Lisp-Entry "get-restarts-view" definition (public) #f 486 20 486 37 ("Restarts-View" "singleton-docked" "get-guest" "get-guest~")}
      {Lisp-Entry "get-exception-view" definition (public) #f 490 20 490 38 ("Exception-View" "singleton-docked" "get-guest" "get-guest~")}
      {Lisp-Entry "get-variables-view" definition (public) #f 494 20 494 38 ("Variables-View" "singleton-docked" "get-guest" "get-guest~")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "autoload.jazz"} 231466230. jazz
    {Lisp-Entry "jazz.debugger.autoload" module (protected) #f 37 18 37 40 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("Thread-Snapshot" "jazz.debugger.snapshot.Thread-Snapshot" "Stack-Snapshot" "jazz.debugger.snapshot.Stack-Snapshot" "Process-Snapshot" "jazz.debugger.snapshot.Process-Snapshot" "Frame-Snapshot" "jazz.debugger.snapshot.Frame-Snapshot" "Exception-Snapshot" "jazz.debugger.snapshot.Exception-Snapshot" "Computer-Snapshot" "jazz.debugger.snapshot.Computer-Snapshot" "Debug-Preferences" "jazz.debugger.preference.Debug-Preferences" "Threads-View" "jazz.debugger.debugger.Threads-View" "Variables-Inspector" "Variables-View" "jazz.debugger.debugger.Variables-View" "Restarts-View" "jazz.debugger.debugger.Restarts-View" "Processes-View" "jazz.debugger.debugger.Processes-View" "Location-Indicator" "jazz.debugger.debugger.Location-Indicator" "Frames-View" "jazz.debugger.debugger.Frames-View" "Exception-View" "jazz.debugger.debugger.Exception-View" "Debugger-Resource" "jazz.debugger.debugger.Debugger-Resource" "Debugger-Listener" "jazz.debugger.debugger.Debugger-Listener" "Debugger-Event" "jazz.debugger.debugger.Debugger-Event" "Debugger-Manager" "jazz.debugger.debugger.Debugger-Manager" "Debugger" "jazz.debugger.debugger.Debugger" "Break-Event" "jazz.debugger.break.Break-Event" "Debugged-Thread" "jazz.debugger.debugged.Debugged-Thread" "Debugged-Stop" "jazz.debugger.debugged.Debugged-Stop" "Debugged-Restart" "jazz.debugger.debugged.Debugged-Restart" "Debugged-Process" "jazz.debugger.debugged.Debugged-Process" "Debugged-Frame" "jazz.debugger.debugged.Debugged-Frame" "Debugged" "autoload" "jazz.debugger.debugged.Debugged")}}})
