"_webserver"
 ({Lisp-File-Entry {File contrib.webserver "src" "webserver" "_webserver.jazz"} 1288732032
    {Lisp-Entry "webserver" module #f 0 8 0 17 ("jazz")
      {Lisp-Entry "make-http-server" native #f 6 8 6 24 ()}
      {Lisp-Entry "http-server-start!" native #f 7 8 7 26 ()}
      {Lisp-Entry "reply" native #f 8 8 8 13 ()}
      {Lisp-Entry "uri-path" native #f 9 8 9 16 ()}}})
"http"
 ({Lisp-File-Entry {File contrib.webserver "src" "webserver" "implementation" "http.scm"} 1288732032
    {Lisp-Entry "webserver.implementation.http" unit #f 8 6 8 35 ()
      {Lisp-Entry "hex-digit" define #f 23 8 23 17 ("else" "87" "102" "97" "55" "70" "65" "-" "57" "<=" "48" ">=" "and" "cond" "string-ref" "char->integer" "n" "let" "i" "str" "lambda")}
      {Lisp-Entry "hex-octet" define #f 35 8 35 17 ("16" "*" "1" "+" "n2" "and" "hex-digit" "n1" "let" "i" "str" "lambda")}
      {Lisp-Entry "plausible-hex-escape?" define #f 43 8 43 29 ("1" "string-ref" "control-or-space-char?" "not" "2" "+" "<" "and" "j" "end" "str" "lambda")}
      {Lisp-Entry "control-or-space-char?" define #f 49 8 49 30 ("char<?" "not" "or" "c" "lambda")}
      {Lisp-Entry "excluded-char?" define #f 54 8 54 22 ("char=?" "char<?" "not" "or" "c" "lambda")}
      {Lisp-Entry "extract-escaped" define #f 72 8 72 23 ("3" "integer->char" "string-set!" "begin" "and" "1" "+" "hex-octet" "char=?" "string-ref" "c" "<" "if" "0" "j" "i" "loop" "make-string" "result" "let" "n" "start" "str" "lambda")}
      {Lisp-Entry "uri" define #f 91 13 91 16 ("fragment" "query" "path" "authority" "scheme" "62788556-c247-11d9-9598-00039301ba52" "id:")}
      {Lisp-Entry "parse-uri" define #f 101 8 101 17 ("or" "uri-fragment-set!" "fragment" "uri-query-set!" "query" "uri-authority-set!" "authority" "else" "control-or-space-char?" "plausible-hex-escape?" "state4" "state3" "uri-path-set!" "path" "3" "state1" "2" "uri-scheme-set!" "begin" "and" "scheme" "1" "+" "state2" "0" "=" "char=?" "cond" "string-ref" "c" "<" "state0" "bindings" "parse-uri-query" "extract-query" "substring" "extract-escaped" "if" "n" "j" "i" "extract-string" "define" "make-uri" "uri" "let" "cont" "decode?" "end" "start" "str" "lambda")}
      {Lisp-Entry "parse-uri-query" define #f 300 8 300 23 ("or" "reverse" "begin" "cons" "set!" "val" "else" "=" "excluded-char?" "0" "state1" "name" "1" "3" "+" "plausible-hex-escape?" "and" "char=?" "cond" "string-ref" "c" "<" "state0" "substring" "extract-escaped" "if" "n" "j" "i" "extract-string" "define" "rev-bindings" "let" "cont" "decode?" "end" "start" "str" "lambda")}
      {Lisp-Entry "decode-x-www-form-urlencoded" define #f 390 8 390 36 ("cons" "end-of-field" "name" "state2" "reverse" "state1" "rev-fields" "state0" "10" "char->integer" "-" "char<=?" "char>=?" "16" "*" "and" "h2" "nibble" "h1" "else" "3" "integer->char" "string-set!" "x" "=>" "1" "+" "hex" "char=?" "cond" "string-ref" "c" "<" "if" "0" "j" "i" "loop" "make-string" "s" "len" "start" "extract" "define" "string-length" "n" "let" "str" "lambda")}
      {Lisp-Entry "server" define #f 504 13 504 19 ("dispatcher" "timeout" "port-number" "c69165bd-c13f-11d9-830f-00039301ba52" "id:")}
      {Lisp-Entry "make-http-server" define #f 512 8 512 24 ("make-server" "default-dispatcher" "dispatcher" "300" "timeout" "8080" "port-number" "#!key" "lambda")}
      {Lisp-Entry "default-dispatcher" define #f 522 8 522 26 ("connecton" "reply" "content" "headers" "parameters" "uri" "method" "connection" "lambda")}
      {Lisp-Entry "http-server-start!" define #f 526 8 526 26 ("serve-connection" "make-thread" "thread-start!" "read" "connection" "loop" "ISO-8859-1" "'ISO-8859-1" "char-encoding:" "reuse-address:" "128" "backlog:" "server-port-number" "port-number:" "0" "#u8" "'#u8" "server-address:" "list" "open-tcp-server" "server-port" "let" "server" "lambda")}
      {Lisp-Entry "serve-connection" define #f 543 8 543 24 ("server-dispatcher" "uri-query" "decode-x-www-form-urlencoded" "cdr" "string=?" "assoc" "x" "parameters" "read-content" "content" "read-headers" "headers" "protocol" "string-ref" "char=?" "i" "uri" "string-length" "1" "+" "parse-uri" "0" "substring" "and" "method" "find-char-pos" "first-space" "let*" "string?" "if" "permissive-read-line" "req" "reply" "error" "let" "output-port-timeout-set!" "300" "input-port-timeout-set!" "connection" "server" "lambda")}
      {Lisp-Entry "read-headers" define #f 596 8 596 20 ("if" "2" "substring" "cons" "string-ref" "char=?" "1" "+" "<" "and" "find-char-pos" "pos" "header" "else" "0" "string-length" "=" "not" "cond" "permissive-read-line" "line" "headers" "loop" "let" "connection" "lambda")}
      {Lisp-Entry "read-content" define #f 618 8 618 20 ("=" "0" "read-substring" "make-string" "str" "if" "else" "exact?" "integer?" "and" "cdr" "string->number" "n" "x" "=>" "assoc" "cond" "cl" "let" "headers" "connection" "lambda")}
      {Lisp-Entry "reply" define #f 636 8 636 13 ("close-port" "string-length" "list" "port:" "print" "eol" "let" "headers-out" "reply-body" "status" "connection" "lambda")}
      {Lisp-Entry "permissive-read-line" define #f 650 8 650 28 ("##string-shrink!" "begin" "1" "-" "string-ref" "char=?" "0" "string-length" ">" "string?" "and" "if" "read-line" "s" "let" "port" "lambda")}
      {Lisp-Entry "find-char-pos" define #f 660 8 660 21 ("1" "+" "string-ref" "char=?" "string-length" "<" "if" "0" "i" "loop" "let" "char" "str" "lambda")}}})
