"Debuggee-Frame"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "Debuggee-Frame.jazz"} 1288732032
    {Lisp-Entry "jazz.debuggee.Debuggee-Frame" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Debuggee-Frame" class #f 43 7 43 21 ("Object")
        {Lisp-Entry "id" slot #f 46 8 46 10 ()}
        {Lisp-Entry "get-id" accessor #f 46 31 46 39 ()}
        {Lisp-Entry "set-id" accessor #f 46 31 46 39 ()}
        {Lisp-Entry "continuation" slot #f 47 8 47 20 ()}
        {Lisp-Entry "get-continuation" accessor #f 47 31 47 39 ()}
        {Lisp-Entry "set-continuation" accessor #f 47 31 47 39 ()}
        {Lisp-Entry "name" slot #f 48 8 48 12 ()}
        {Lisp-Entry "get-name" accessor #f 48 31 48 39 ()}
        {Lisp-Entry "set-name" accessor #f 48 31 48 39 ()}
        {Lisp-Entry "location" slot #f 49 8 49 16 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("name~self" "continuation~self" "location~self" "id~self" "set!" "nextmethod" "name" "continuation" "location" "id")}
        {Lisp-Entry "get-interpreted?" method #f 65 11 65 27 ("interpreted-continuation?" "boolean" "continuation" "serial->object" "cont" "let")}
        {Lisp-Entry "get-location" method #f 70 11 70 23 ("get-continuation-location" "continuation" "serial->object" "cont" "let" "location" "or")}
        {Lisp-Entry "get-variables" method #f 77 11 77 24 ("get-continuation-dynamic-environment" "append" ":all" "get-continuation-lexical-environment" ":lexical" "case" "mutable?:" "package-info" "cons" "mutable?" "value" "name" "bind" "variable" "lambda" "map" "continuation" "serial->object" "cont" "let" "kind")}}}})
"Debuggee-Process"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "Debuggee-Process.jazz"} 1290195422
    {Lisp-Entry "jazz.debuggee.Debuggee-Process" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Debuggee-Process" class #f 47 7 47 23 ("Object")
        {Lisp-Entry "get-title" method #f 50 18 50 27 ("current-process-present")}
        {Lisp-Entry "get-icon" method #f 54 18 54 26 ("current-process-icon")}
        {Lisp-Entry "detach-process" method #f 63 18 63 32 ("detach-from-controller")}
        {Lisp-Entry "reload-process" method #f 67 18 67 32 ("get-process" "reload-process")}
        {Lisp-Entry "exit-process" method #f 71 18 71 30 ("exit" "detach-from-controller" "lambda" "exit-process" "'exit-process" "thread-post" "thread-loop?" "and" "if" "primordial-thread" "primordial" "get-process" "process" "let")}
        {Lisp-Entry "get-toplevel-hwnd" method #f 87 18 87 35 ("get-toplevel" "get-handle")}
        {Lisp-Entry "get-threads" method #f 97 11 97 22 ("top-threads" "Debuggee-Thread" "Debuggee-Thread-Local-Proxy" "new" "thread" "lambda" "map")}
        {Lisp-Entry "break-thread" definition #f 108 15 108 27 ("break" "lambda" "thread-interrupt!" "get-object" "get-thread" "thread" "let" "thread-proxy")}
        {Lisp-Entry "restart-stop" method #f 120 11 120 23 ("invoke-restart" "lambda" "restart-stop" "'restart-stop" "thread-post" "get-restart" "restart" "get-thread" "thread" "get-object" "debuggee-restart" "let" "restart-proxy")}
        {Lisp-Entry "continue-stop" method #f 134 11 134 24 ("continuation-return" "lambda" "continue-stop" "'continue-stop" "thread-post" "get-continuation" "continuation" "get-thread" "thread" "get-object" "stop" "let" "stop-proxy")}
        {Lisp-Entry "step-stop" method #f 143 11 143 20 ("lambda" "step-stop" "'step-stop" "thread-post" "get-stepper" "stepper" "get-thread" "thread" "get-object" "stop" "let" "command" "stop-proxy")}
        {Lisp-Entry "console-input" method #f 157 11 157 24 ("force-output" "display" "close-port" "not" "if" "thread-console-pump-port" "port" "get-object" "get-thread" "thread" "let" "str" "thread-proxy")}
        {Lisp-Entry "unit/module-form?" method #f 171 11 171 28 ("module" "unit" "car" "memq?" "source-code" "pair?" "and" "expr")}
        {Lisp-Entry "evaluate-expressions" method #f 176 11 176 31 ("0" "generate-symbol-counter" "generate-symbol-context" "eval-count" "generate-symbol-for" "requested-unit-name" "outline-unit" "load-unit" "cdr" "access" "unit-name" "receive" "unit/module-form?" "read-source-first" "port" "call-with-input-string" "jazz-readtable" "jazz" "scheme-readtable" "scheme" "case" "with-readtable" "eval" "'eval" "walk-for" "parameterize" "evaluate-expressions" "'evaluate-expressions" "primordial-thread" "thread-call" "force-output" "current-repl-level" "get-console-port" "display-prompt" ":console" "format" "value" "for-each" "list" "lambda" "call-with-values" "specified?" "when" "result" "present" "'public" "cadr" "values" "public" "protected" "memq?" "if" "car" "source-code" "first" "let" "expr" "parse-unit/module" "define" "col" "line" "container" "str" "syntax")}
        {Lisp-Entry "profiler-start" method #f 222 18 222 32 ("start-profiler" "active-profile" "when" "find-profile" "profile" "let" "name")}
        {Lisp-Entry "profiler-stop" method #f 229 18 229 31 ("active-profile" "stop-profiler" "when" "find-profile" "profile" "let" "name")}
        {Lisp-Entry "profiler-profiles" method #f 236 18 236 35 ("get-profile-names")}
        {Lisp-Entry "profiler-profile" method #f 240 18 240 34 ("table->list" "count" "stack" "pair" "profile-frames" "profiler-name" "get-remote-profile" "find-profile" "profile-call-duration-set!" "profile-call-count" "profile-call-count-set!" "begin" "table-ref" "temp-call" "map" "key" "jazz.iterate-table" "performance-frequency" "*" "/" "floor" "inexact->exact" "=" "cons" "table-set!" "profile-frame-duration" "profile-call-duration" "-" "duration" "car" "eq?" "call" "proc" "lambda" "iterate-table-safe" "get-application" "get-profile-link-method" "link-method" "add-calls" "profile-calls" "temp-calls" "profile-unknown-duration" "profile-unknown-duration-set!" "profile-unknown-count" "profile-unknown-count-set!" "profile-total-duration" "adjust-duration" "profile-total-duration-set!" "0" "profile-total-count" "+" "profile-total-count-set!" "performance-frequency:" "profile-depth" "depth:" "profile-profiler" "profiler:" "profile-label" "label:" "new-profile" "temp-profile" ">=" "max-performance-frequency" "remote-frequency" "profile-performance-frequency" "local-frequency" "remote-profile" "profile" "merge-profile" "list" "get-procedure-name" "symbol?" "if" "let" "locat" "creator" "bind" "when" "or" "frame" "frame->symbol" "define" "name")}
        {Lisp-Entry "profile-reset" method #f 313 18 313 31 ("get-profiler" "and" "reset-profile" "when" "find-profile" "profile" "let" "depth" "profiler" "name")}
        {Lisp-Entry "inspect-serial" method #f 324 18 324 32 ("serial->object" "inspect-value" "serial")}}}})
"Debuggee-Restart"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "Debuggee-Restart.jazz"} 1288732032
    {Lisp-Entry "jazz.debuggee.Debuggee-Restart" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Debuggee-Restart" class #f 40 7 40 23 ("Object")
        {Lisp-Entry "thread" slot #f 43 8 43 14 ()}
        {Lisp-Entry "get-thread" accessor #f 43 26 43 34 ()}
        {Lisp-Entry "set-thread" accessor #f 43 26 43 34 ()}
        {Lisp-Entry "restart" slot #f 44 8 44 15 ()}
        {Lisp-Entry "get-restart" accessor #f 44 26 44 34 ()}
        {Lisp-Entry "set-restart" accessor #f 44 26 44 34 ()}
        {Lisp-Entry "initialize" method #f 47 20 47 30 ("restart~self" "thread~self" "set!" "nextmethod" "restart" "thread")}
        {Lisp-Entry "get-id" method #f 53 18 53 24 ("restart" "object->serial")}
        {Lisp-Entry "get-name" method #f 57 18 57 26 ("restart" "get-name")}
        {Lisp-Entry "get-message" method #f 61 18 61 29 ("restart" "get-message")}}}})
"Debuggee-Stop"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "Debuggee-Stop.jazz"} 1288732032
    {Lisp-Entry "jazz.debuggee.Debuggee-Stop" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Debuggee-Stop" class #f 44 7 44 20 ("Object")
        {Lisp-Entry "thread" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-thread" accessor #f 47 31 47 39 ()}
        {Lisp-Entry "set-thread" accessor #f 47 31 47 39 ()}
        {Lisp-Entry "kind" slot #f 48 8 48 12 ()}
        {Lisp-Entry "get-kind" accessor #f 48 31 48 39 ()}
        {Lisp-Entry "set-kind" accessor #f 48 31 48 39 ()}
        {Lisp-Entry "reason" slot #f 49 8 49 14 ()}
        {Lisp-Entry "get-reason" accessor #f 49 31 49 39 ()}
        {Lisp-Entry "set-reason" accessor #f 49 31 49 39 ()}
        {Lisp-Entry "detail" slot #f 50 8 50 14 ()}
        {Lisp-Entry "get-detail" accessor #f 50 31 50 39 ()}
        {Lisp-Entry "set-detail" accessor #f 50 31 50 39 ()}
        {Lisp-Entry "location" slot #f 51 8 51 16 ()}
        {Lisp-Entry "get-location" accessor #f 51 31 51 39 ()}
        {Lisp-Entry "set-location" accessor #f 51 31 51 39 ()}
        {Lisp-Entry "continuation" slot #f 52 8 52 20 ()}
        {Lisp-Entry "get-continuation" accessor #f 52 31 52 39 ()}
        {Lisp-Entry "set-continuation" accessor #f 52 31 52 39 ()}
        {Lisp-Entry "restarts" slot #f 53 8 53 16 ()}
        {Lisp-Entry "get-restarts" accessor #f 53 31 53 39 ()}
        {Lisp-Entry "set-restarts" accessor #f 53 31 53 39 ()}
        {Lisp-Entry "stack" slot #f 54 8 54 13 ()}
        {Lisp-Entry "get-stack" accessor #f 54 31 54 39 ()}
        {Lisp-Entry "set-stack" accessor #f 54 31 54 39 ()}
        {Lisp-Entry "stepper" slot #f 55 8 55 15 ()}
        {Lisp-Entry "get-stepper" accessor #f 55 31 55 39 ()}
        {Lisp-Entry "set-stepper" accessor #f 55 31 55 39 ()}
        {Lisp-Entry "initialize" method #f 58 20 58 30 ("stack~self" "restarts~self" "stepper~self" "continuation~self" "location~self" "detail~self" "reason~self" "kind~self" "thread~self" "set!" "caar" "exception-location" "not-null?" "and" "or" "locat->file/line/col" "location" "stack" "let" "nextmethod" "get-continuation-stack" "get-continuation-name" "list" "continuation-parent" "hidden-frame?" "unless" "lambda" "collect" "cont" "collect-continuation-stack" "1000" "max-depth" "define" "stepper" "locat" "restarts" "continuation" "exc" "detail" "reason" "kind" "thread")}
        {Lisp-Entry "get-id" method #f 82 18 82 24 ("self" "object->serial")}
        {Lisp-Entry "get-frames" method #f 91 18 91 28 ("stack" "length" "naturals" "lambda" "map" "Debuggee-Frame-Local-Proxy" "object->serial" "Debuggee-Frame" "new" "0" "=" "stepper" "and" "when" "location" "let" "name" "cont" "bind" "frame" "id" "make-frame" "define")}}}})
"Debuggee-Thread"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "Debuggee-Thread.jazz"} 1288732032
    {Lisp-Entry "jazz.debuggee.Debuggee-Thread" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Debuggee-Thread" class #f 43 7 43 22 ("Object")
        {Lisp-Entry "thread" slot #f 46 8 46 14 ()}
        {Lisp-Entry "get-thread" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "set-thread" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("thread~self" "set!" "nextmethod" "thread")}
        {Lisp-Entry "get-id" method #f 54 18 54 24 ("thread" "object->serial")}
        {Lisp-Entry "get-name" method #f 58 18 58 26 ("thread" "thread-name")}
        {Lisp-Entry "get-state" method #f 62 18 62 27 ("thread" "thread-state" "present-thread-state")}
        {Lisp-Entry "get-stops" method #f 66 18 66 27 ("thread" "get-thread-stops")}
        {Lisp-Entry "set-repl-frame" method #f 70 11 70 25 ("set-box!" "box?" "when" "current-repl-frame" "box" "lambda" "set-repl-frame" "'set-repl-frame" "thread" "thread-post" "get-object" "and" "frame" "let" "frame-proxy")}}}})
"Log-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "view" "Log-View.jazz"} 1288732032
    {Lisp-Entry "jazz.debuggee.view.Log-View" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Log-View" class #f 47 7 47 15 ("data" "200" "width:" "title:" "name" ":images" "portfolio:" "message" "filled-column:" "log-tree" "shown?:" "header" "content" "tool" "vscroll?:" "document" "style:" "scroller" "name:" "fill" "layout-type:" "initialize" "Layout-View")
        {Lisp-Entry "log" property #f 50 12 50 15 ()}
        {Lisp-Entry "get-log" accessor #f 50 40 50 48 ()}
        {Lisp-Entry "set-log" accessor #f 50 40 50 48 ()}
        {Lisp-Entry "get-tree" method #f 70 11 70 19 ("log-tree" "'log-tree" "locate")}
        {Lisp-Entry "clear" method #f 79 18 79 23 ("update" "clear" "bell" "log" "null?" "if")}
        {Lisp-Entry "update" method #f 91 18 91 24 ("view-content" "reload" "get-file" "log" "and" "when" "reload?" "reload?:")}
        {Lisp-Entry "extract-log-content" method #f 97 29 97 48 ("get-toplevel-nodes" "log")}
        {Lisp-Entry "view-log" method #f 106 18 106 26 ("view-content" "log~self" "set!" "log")}
        {Lisp-Entry "view-content" method #f 111 11 111 23 ("extract-log-content" "insert-node" "node" "for-each-reversed" "log" "when" "lambda" "with-update-locked" "remove-every-row" "get-tree" "tree" "let")}
        {Lisp-Entry "insert-node" method #f 122 11 122 22 ("get-children" "insert-node" "subnode" "lambda" "for-each" "user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "father:" "add-row" "subfather" "'data" "data" "'message" "message" "image" "'name" "get-property" "or" "->string" "name" "let*" "else" "problem" "Image-Resource" "resources" "get-tag" "case" "node-image" "define" "node" "father" "tree")}}}})
"Profiler-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "view" "Profiler-Manager.jazz"} 1289506007
    {Lisp-Entry "jazz.debuggee.view.Profiler-Manager" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Profiler-Manager" class #f 47 7 47 23 ("on-double-click" "double-click-handler:" "profile" "header" "content" "scroller" "profile-view" "entry" "style:" "edge" "border-type:" "profile-border" "1" "fill" "center" "on-on/off" "on/off" "tail" "64" "on-reset" "delete" "on-update" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "update" "name:" "north" "location:" "0" "6" "flow" "33" "100" "2" "Rect" "layout-insets:" "border" "layout-type:" "500" "800" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "external-name" method #f 69 25 69 38 ("profiler-manager" "'profiler-manager" "rest")}
        {Lisp-Entry "conclude" method #f 73 20 73 28 ("update-profile" "profiler-on?" "on/off" "'on/off" "locate" "set-selected?" "nextmethod" "rest")}
        {Lisp-Entry "host-title" method #f 84 25 84 35 ()}
        {Lisp-Entry "host-icon" method #f 88 25 88 34 ("Image-Resource")}
        {Lisp-Entry "host-position" method #f 92 25 92 38 ("150" "140" "Point")}
        {Lisp-Entry "host-size" method #f 96 25 96 34 ("420" "800" "Dimension")}
        {Lisp-Entry "client-activate" method #f 100 20 100 35 ("update-profile")}
        {Lisp-Entry "on-update" method #f 109 11 109 20 ("update-profile" "evt")}
        {Lisp-Entry "on-reset" method #f 113 11 113 19 ("update-profile" "reset-profile" "evt")}
        {Lisp-Entry "on-on/off" method #f 118 11 118 20 ("not" "profiler-on?" "evt")}
        {Lisp-Entry "on-double-click" method #f 122 11 122 26 ("profile-view" "'profile-view" "locate" "edit-profile" "evt")}
        {Lisp-Entry "update-profile" method #f 131 11 131 25 ("profile-view" "'profile-view" "locate" "update-profile")}}}})
"Profiler-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "view" "Profiler-View.jazz"} 1288732032
    {Lisp-Entry "jazz.debuggee.view.Profiler-View" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Profiler-View" class #f 49 7 49 20 ("toplevel-percentage" "parent-percentage" "total" "average" "100" "count" "279" "width:" "title:" "on-double-click" ":form" "Event-Handler" "double-click-handler:" "row" "selection-mode:" ":images" "portfolio:" "name" "filled-column:" "profile" "header" "content" "tool" "vscroll?:" "document" "style:" "scroller" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "update-profile" method #f 72 18 72 32 ("active-profile" "profile->jml" "view-profile")}
        {Lisp-Entry "view-profile" method #f 76 18 76 30 ("with-update-locked" "remove-every-row" "'profile" "locate" "profiler-performance-frequency" "seconds->microseconds" "child" "lambda" "for-each" "calls" "get-children" "insert-calls" "neq?" "not" "or" "100" "call-toplevel" "toplevel" "percentage" "'call" "get-tag" "eq?" "and" "when" "call-parent" "parent" "user-data:" "format" "if" "Tree-Label" "title:" "Image-Resource" "image:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "call-toplevel-percentage" "toplevel-percentage" "call-parent-percentage" "parent-percentage" "/" "average" "call-total" "calculate-time" "total" "call-count" "count" "call-name" "name" "let*" "insert-children" "insert-content" "row" "let" "call" "father" "tree" "insert-call" "define" "profile")}
        {Lisp-Entry "call-parent" definition #f 132 15 132 26 ("get-parent" "call")}
        {Lisp-Entry "call-name" definition #f 136 15 136 24 ("name" "'name" "get-property" "call")}
        {Lisp-Entry "call-count" definition #f 140 15 140 25 ("count" "'count" "get-property" "call")}
        {Lisp-Entry "call-total" definition #f 144 15 144 25 ("total" "'total" "get-property" "call")}
        {Lisp-Entry "edit-call" method #f 153 18 153 27 ("call-name" "edit-definitions" "get-application" "appl" "get-row" "get-user-data" "call" "let" "bell" "null?" "if" "get-single-selection" "selection" "profile" "'profile" "locate" "tree" "let*")}}}})
"Resources-Monitor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "view" "Resources-Monitor.jazz"} 1288732032
    {Lisp-Entry "jazz.debuggee.view.Resources-Monitor" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Resources-Monitor" class #f 49 7 49 24 ("resources" "entry" "style:" "edge" "border-type:" "resources-border" "1" "fill" "center" "on-update" "tail" "update" "on-clear" "clear" "on-open" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "open" "name:" "north" "location:" "0" "6" "flow" "33" "100" "2" "Rect" "layout-insets:" "border" "layout-type:" "500" "800" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "host-title" method #f 69 25 69 35 ()}
        {Lisp-Entry "host-icon" method #f 73 25 73 34 ("Image-Resource")}
        {Lisp-Entry "host-position" method #f 77 25 77 38 ("50" "80" "Point")}
        {Lisp-Entry "host-size" method #f 81 25 81 34 ("441" "1000" "Dimension")}
        {Lisp-Entry "client-activate" method #f 85 20 85 35 ("update")}
        {Lisp-Entry "conclude" method #f 94 20 94 28 ("update" "nextmethod" "rest")}
        {Lisp-Entry "get-resource-view" method #f 104 11 104 28 ("resources" "'resources" "locate")}
        {Lisp-Entry "Logs-Directory" definition #f 113 14 113 28 ("Build" "Directory")}
        {Lisp-Entry "on-open" method #f 117 11 117 18 ("with-preserved-current-directory" "Logs-Directory" "exists?" "and" "if" "view-log" "load?:" "file:" "Log" "new" "log" "directory:" "extensions:" "choose-file" "file" "dir" "lambda" "proc" "get-resource-view" "resource-view" "get-shift?" "default?" "let*" "evt")}
        {Lisp-Entry "on-update" method #f 132 11 132 20 ("update" "evt")}
        {Lisp-Entry "on-clear" method #f 136 11 136 19 ("clear" "get-resource-view" "resource-view" "let" "evt")}
        {Lisp-Entry "update" method #f 146 11 146 17 ("update" "get-resource-view" "resource-view" "let")}}}})
"Resources-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "view" "Resources-View.jazz"} 1288732032
    {Lisp-Entry "jazz.debuggee.view.Resources-View" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Resources-View" class #f 48 7 48 21 ("gui-user-objects" "gui-gdi-objects" "handles" "50" "bags" "undestroyed" "collector-roots" "collector-stack" "data-stack" "80" "system-stack" "symbols" "65" "strings" "allocated" "committed" "70" "virtual" "tail" "justification:" "100" "private-bytes" "200" "width:" "title:" "name" "on-context-menu" "context-menu-handler:" "on-double-click" ":form" "Event-Handler" "double-click-handler:" "column-spacing:" "1" "row-spacing:" "cell" "selection-mode:" "filled-column:" "White" "empty-background:" "Dark" "Color" "background:" ":images" "portfolio:" "resources" "shown?:" "header" "content" "tool" "hscroll?:" "vscroll?:" "document" "style:" "scroller" "name:" "fill" "layout-type:" "eq?" "test:" "make-table" "0" "after" "'after" "initialize" "Layout-View")
        {Lisp-Entry "log" property #f 51 12 51 15 ()}
        {Lisp-Entry "get-log" accessor #f 51 40 51 48 ()}
        {Lisp-Entry "set-log" accessor #f 51 40 51 48 ()}
        {Lisp-Entry "what" slot #f 54 8 54 12 ()}
        {Lisp-Entry "next-rank" slot #f 55 8 55 17 ()}
        {Lisp-Entry "last-counters" slot #f 56 8 56 21 ()}
        {Lisp-Entry "reference" slot #f 57 8 57 17 ()}
        {Lisp-Entry "reference-entry" slot #f 58 8 58 23 ()}
        {Lisp-Entry "reference-counters" slot #f 59 8 59 26 ()}
        {Lisp-Entry "get-tree" method #f 92 18 92 26 ("resources" "'resources" "locate")}
        {Lisp-Entry "clear" method #f 101 18 101 23 ("update" "clear" "bell" "log" "null?" "if")}
        {Lisp-Entry "on-double-click" method #f 108 11 108 26 ("set-reference" "clear-reference" "reference" "eqv?" "bell" "null?" "if" "selected-data" "counters" "rank" "bind" "evt")}
        {Lisp-Entry "on-context-menu" method #f 117 11 117 26 ("track-popup-menu" "lambda" "with-context-click" "layout-menu" "reference" "null?" "when" "clear-reference" "'clear-reference" "set-reference" "'set-reference" "reference-separator" "'reference-separator" "set-visible?" "delta" "case" "what" "child" "set-selected?" "self" "client:" "Resources-Menu" "new" "menu" "get-position" "pos" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "show-delta" method #f 135 11 135 21 ("view-content" "delta" "'delta" "what" "set!")}
        {Lisp-Entry "show-before" method #f 140 11 140 22 ("view-content" "before" "'before" "what" "set!")}
        {Lisp-Entry "show-after" method #f 145 11 145 21 ("view-content" "after" "'after" "what" "set!")}
        {Lisp-Entry "set-reference" method #f 150 11 150 24 ("view-content" "reference" "set!" "bell" "null?" "if" "selected-data" "counters" "rank" "bind")}
        {Lisp-Entry "clear-reference" method #f 158 11 158 26 ("view-content" "reference" "set!")}
        {Lisp-Entry "selected-data" method #f 163 11 163 24 ("get-user-data" "data" "get-line" "get-row" "row" "get-single-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "update" method #f 176 18 176 24 ("view-content" "reload" "get-file" "log" "and" "when" "reload?" "reload?:")}
        {Lisp-Entry "extract-log-content" method #f 182 29 182 48 ("get-toplevel-nodes" "log")}
        {Lisp-Entry "Reference-Rendering" definition #f 191 14 191 33 ("Dark-Blue" "name:" "255" "blue:" "green:" "206" "red:" "Color" "list")}
        {Lisp-Entry "Allocate-Rendering" definition #f 194 14 194 32 ("Dark-Red" "Light-Red" "name:" "Color" "list")}
        {Lisp-Entry "Release-Rendering" definition #f 197 14 197 31 ("Dark-Green" "Light-Green" "name:" "Color" "list")}
        {Lisp-Entry "Stable-Rendering" definition #f 200 14 200 30 ("list")}
        {Lisp-Entry "view-log" method #f 204 18 204 26 ("view-content" "clear-reference" "log~self" "set!" "log")}
        {Lisp-Entry "view-content" method #f 210 11 210 23 ("element" "extract-log-content" "entries" "test:" "make-table" "log" "with-update-locked" "remove-every-row" "get-tree" "gui-user-objects" "gui-gdi-objects" "handles" "bags" "undestroyed" "collector-roots" "collector-stack" "data-stack" "system-stack" "symbols" "strings" "allocated" "committed" "virtual" "private-bytes" "'after" "after" "'before" "find-name" "before" "resources-counters" "get-children" "child" "for-each" "user-data:" "Resources-Properties" "cdr" "set!" "when" "car" "-" "value" "table-set!" "not" "Reference-Rendering" "last-counters" "table-ref" "previous" "let" "frame-color:" "background:" "->string" "Stable-Rendering" "Release-Rendering" "<" "Allocate-Rendering" ">" "cond" "frame-color" "background" "bind" "delta" "what" "Tree-Label" "property" "counter" "lambda" "map" "image:" "title:" "Tree-Node" "new" "children:" "0" "position:" "father:" "add-row" "row" "cons" "user-data" "entry-counters" "counters" "increase!" "next-rank" "prog1" "null?" "rank" "reference-counters" "if" "reference-scan" "reference-entry" "eq?" "reference" "and" "reference-entry?" "Image-Resource" "image" "'name" "get-property" "or" "name" "let*" "entry" "insert-entry" "else" "insert-resources" "resources" "get-tag" "case" "node" "father" "tree" "insert-node" "define")}}
      {Lisp-Entry "Resources-Menu" class #f 322 7 322 21 ("on-clear-reference" "clear-reference" "on-set-reference" "set-reference" "reference-separator" "on-show-after" "after" "on-show-before" "before" "on-show-delta" ":form" "Event-Handler" "action-handler:" "title:" "delta" "name:" "Context-Menu")
        {Lisp-Entry "on-show-delta" method #f 336 11 336 24 ("client" "show-delta" "evt")}
        {Lisp-Entry "on-show-before" method #f 340 11 340 25 ("client" "show-before" "evt")}
        {Lisp-Entry "on-show-after" method #f 344 11 344 24 ("client" "show-after" "evt")}
        {Lisp-Entry "on-set-reference" method #f 348 11 348 27 ("client" "set-reference" "evt")}
        {Lisp-Entry "on-clear-reference" method #f 352 11 352 29 ("client" "clear-reference" "evt")}}}})
"View-Debugger"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "view" "View-Debugger.jazz"} 1288732032
    {Lisp-Entry "jazz.debuggee.view.View-Debugger" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "View-Debugger" class #f 51 7 51 20 ("Object")
        {Lisp-Entry "debug-views" method #f 54 18 54 29 ("obscure-unhighlighted?:" "highlight:" "debug-view-menu" "menu:" "debug-view-action" "click:" "pick-figure")}
        {Lisp-Entry "explore-views" method #f 61 18 61 31 ("obscure-unhighlighted?:" "highlight:" "debug-view-menu" "menu:" "debug-view-action" "click:" "pick-figure")}
        {Lisp-Entry "debug-view-action" definition #f 68 15 68 32 ("view-debug" "pos" "view")}
        {Lisp-Entry "on-debug-action" method #f 72 19 72 34 ("design-in-place" "in-place?:" "if" "design" "inspect" "Symbol" "Handler" "get-method-name" "require-action-item" "get-action-handler" "action-handler" "Action" "typecase" "handler:" "handler" "edit-handler" "class-of" "category-name" "edit-definitions" "object:" "object" "edit" "describe-state" "describe" "debug-view-action" "debug" "case" "pos:" "view:" "action:" "get-property" "action" "-" "value" "name" "bind" "info" "lambda" "for-each" ":console" "format" "car" "cardinality" "map" "apply" "max" "description" "view-describe-state" "get-guest" "guest" "when" "get-host" "host" "describe-state-action" "fresh-prompt" "view-describe" "display-description" "focus?:" "show-console" "get-application" "appl" "let" "pos" "view" "describe-view-action" "define" "evt")}}
      {Lisp-Entry "get-tree-user-data" definition #f 130 13 130 31 ("get-user-data" "user-data" "get-line" "get-row" "row" "let*" "when" "view->tree" "cell" "let" "pos" "tree")}
      {Lisp-Entry "debug-view-menu" definition #f 138 13 138 28 ("layout-menu" "in-place?:" "design" "'design" "inspect" "'inspect" "handler:" "edit-handler" "'edit-handler" "Image-Resource" "icon:" "when" "object:" "edit" "'edit" "action:" "list" "properties:" "on-debug-action" "'on-debug-action" "method-name:" "current-view-debugger" "target:" "Event-Handler" "action-handler:" "title:" "Label-Item" "parent:" "Separator-Item" "get-action-handler" "action-handler" "get-tree-user-data" "Tree-View" "is?" "user-data" "get-guest" "and" "guest" "get-host" "host" "Debug-View-Menu" "new" "menu" "let*" "pos" "view")}
      {Lisp-Entry "Debug-View-Menu" class #f 162 7 162 22 ("describe-state" "describe" "Image-Resource" "icon:" "debug" "action:" "on-debug-action" ":view-debugger" "Event-Handler" "action-handler:" "default?:" "title:" "Context-Menu")}}})
"_debuggee"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "_debuggee.jazz"} 1288820098
    {Lisp-Entry "jazz.debuggee" module #f 37 8 37 21 ("memq?" "get-exception-hook" "get-exception-debugger" "frame" "hidden-frame?-set!" "with-exception-filter" "with-system-exception-debugger" "with-exception-debugger" "list" "hidden" "hidden-frame?" "previous" "continuation-return" "eq?" "when" "proc" "locator" "*advices*" "iterate-table" "return" "continuation-capture" "or" "procedure" "lambda" "procedure-name-set!" "procedure-name" "original-procedure-name" "let" "in-command" "in" "'in" "register-console-command" "jazz")
      {Lisp-Entry "local-process" definition #f 55 12 55 25 ()}
      {Lisp-Entry "get-local-process" definition #f 59 20 59 37 ("local-process")}
      {Lisp-Entry "setup-local-process" definition #f 63 20 63 39 ("Debuggee-Process" "Debuggee-Process-Local-Proxy" "new" "set!" "local-process" "not" "when")}
      {Lisp-Entry "controller-debugger" definition #f 73 12 73 31 ()}
      {Lisp-Entry "controller-debugger-cookie" definition #f 76 12 76 38 ()}
      {Lisp-Entry "get-controller-debugger" definition #f 80 20 80 43 ("controller-debugger")}
      {Lisp-Entry "attach-to-controller" definition #f 84 20 84 40 ("add-exit-job!" "exception-debugger-hook" "set-exception-hook" "jazz-exception-debugger" "set-exception-debugger" "local-process" "attach-process" "console-port-getter" "set-console-port-getter" "setup-local-process" "debugger" "'debugger" "require-object" "controller-debugger" "set!" "detach-from-controller" "focus?" "controller-register")}
      {Lisp-Entry "ready-to-controller" definition #f 95 20 95 39 ("local-process" "controller-debugger" "ready-process" "controller-debugger-cookie" "set!" "debugger-cookie")}
      {Lisp-Entry "detach-from-controller" definition #f 100 20 100 42 ("local-process" "set!" "detach-from-debugger" "controller-debugger" "when")}
      {Lisp-Entry "detach-from-debugger" definition #f 106 20 106 40 ("detach-consoles" "set!" "local-process" "detach-process" "live?" "controller-debugger" "when")}
      {Lisp-Entry "setup-debuggee" definition #f 114 21 114 35 ("console-output-port" "current-output-port" "console-input-port" "current-input-port" "parse-boolean" "1" "0" "127" "#u8" "new-remote-register" "attach-to-controller" "start-remote-listener" "load-debuggee-units" "error" "not" "if" "parse-host/service" "port" "host" "receive" "when" "interactive-arg" "command-argument" "or" "debugger-arg" "let" "debugger" "debugger:")}
      {Lisp-Entry "ready-debuggee" definition #f 128 21 128 35 ("parse-integer" "ready-to-controller" "when" "command-argument" "cookie-arg" "let")}
      {Lisp-Entry "update-debuggee-arguments" definition #f 134 21 134 46 ("current-process-icon-set!" "current-process-title-set!" "when" "icon-arg" "command-argument" "title-arg" "let")}
      {Lisp-Entry "update-debuggee-process" definition #f 143 21 143 44 ("local-process" "update-process" "controller-debugger" "when")}
      {Lisp-Entry "*stops*" definition #f 153 12 153 19 ()}
      {Lisp-Entry "with-stops-mutex" definition #f 157 12 157 28 ("mutex-unlock!" "mutex-lock!" "thunk" "lambda" "stops" "'stops" "make-mutex" "mutex" "let")}
      {Lisp-Entry "register-stop" definition #f 165 13 165 26 ("list" "append" "*stops*" "set!" "lambda" "with-stops-mutex" "stop")}
      {Lisp-Entry "unregister-stop" definition #f 171 13 171 28 ("remove!" "*stops*" "set!" "lambda" "with-stops-mutex" "stop")}
      {Lisp-Entry "get-thread-stops" definition #f 177 21 177 37 ("queue-list" "*stops*" "Debuggee-Stop-Local-Proxy" "new" "enqueue" "get-thread" "eq?" "when" "stop" "for-each" "lambda" "with-stops-mutex" "new-queue" "queue" "let" "thread")}
      {Lisp-Entry "post-stop" definition #f 188 20 188 29 ("exception" "'exception" "invoke-debugger" "primordial-thread" "thread-write" "exception-detail" "detail" "exception-reason" "reason" "let" "continuation" "lambda" "continuation-capture" "exc")}
      {Lisp-Entry "post-continuation" definition #f 199 20 199 37 ("exception" "'exception" "invoke-debugger" "lambda" "primordial-thread" "thread-write" "exception-detail" "detail" "exception-reason" "reason" "message:" "Error" "new" "exc" "let" "cont")}
      {Lisp-Entry "Loop" class #f 214 7 214 11 ("Object")
        {Lisp-Entry "level" slot #f 217 8 217 13 ()}
        {Lisp-Entry "get-level" accessor #f 217 24 217 32 ()}
        {Lisp-Entry "set-level" accessor #f 217 24 217 32 ()}
        {Lisp-Entry "initialize" method #f 220 20 220 30 ("level~self" "set!" "level")}}
      {Lisp-Entry "current-loop" definition #f 224 19 224 31 ("make-parameter")}
      {Lisp-Entry "with-current-loop" definition #f 228 20 228 37 ("parameterize" "0" "1" "get-level" "+" "if" "Loop" "new" "loop" "current-loop" "current" "let" "thunk")}
      {Lisp-Entry "Console" class #f 240 7 240 14 ("Object")
        {Lisp-Entry "remote" slot #f 243 8 243 14 ()}
        {Lisp-Entry "get-remote" accessor #f 243 25 243 33 ()}
        {Lisp-Entry "pump" slot #f 244 8 244 12 ()}
        {Lisp-Entry "get-pump" accessor #f 244 25 244 33 ()}
        {Lisp-Entry "tail" slot #f 245 8 245 12 ()}
        {Lisp-Entry "get-tail" accessor #f 245 25 245 33 ()}
        {Lisp-Entry "head" slot #f 246 8 246 12 ()}
        {Lisp-Entry "get-head" accessor #f 246 25 246 33 ()}
        {Lisp-Entry "readtable" slot #f 247 8 247 17 ()}
        {Lisp-Entry "get-readtable" accessor #f 247 28 247 36 ()}
        {Lisp-Entry "set-readtable" accessor #f 247 28 247 36 ()}
        {Lisp-Entry "context" slot #f 248 8 248 15 ()}
        {Lisp-Entry "get-context" accessor #f 248 28 248 36 ()}
        {Lisp-Entry "set-context" accessor #f 248 28 248 36 ()}
        {Lisp-Entry "history" slot #f 249 8 249 15 ()}
        {Lisp-Entry "get-history" accessor #f 249 28 249 36 ()}
        {Lisp-Entry "set-history" accessor #f 249 28 249 36 ()}
        {Lisp-Entry "initialize" method #f 252 20 252 30 ("history~self" "unspecified" "context~self" "readtable~self" "head~self" "tail~self" "pump~self" "remote~self" "set!" "head" "tail" "pump" "remote")}}
      {Lisp-Entry "*consoles*" definition #f 262 12 262 22 ("eq?" "test:" "make-table")}
      {Lisp-Entry "with-consoles-mutex" definition #f 266 12 266 31 ("mutex-unlock!" "prog1" "mutex-lock!" "thunk" "lambda" "consoles" "'consoles" "make-mutex" "mutex" "let")}
      {Lisp-Entry "thread-console" definition #f 274 13 274 27 ("table-set!" "Debuggee-Thread" "Debuggee-Thread-Local-Proxy" "new" "make-debuggee-console" "console" "let" "*consoles*" "table-ref" "or" "lambda" "with-consoles-mutex" "controller-debugger" "not" "if" "select?" "thread")}
      {Lisp-Entry "thread-console-pump-port" definition #f 285 21 285 45 ("thread-console" "get-tail" "thread")}
      {Lisp-Entry "thread-console-port" definition #f 288 21 288 40 ("thread-console" "get-head" "thread")}
      {Lisp-Entry "current-console" definition #f 292 13 292 28 ("current-thread" "thread-console")}
      {Lisp-Entry "current-console-context" definition #f 295 12 295 35 ("make-parameter")}
      {Lisp-Entry "make-debuggee-console" definition #f 299 13 299 34 ("Console" "new" "start-debuggee-console-pump" "pump" "local-process" "controller-debugger" "register-console" "console" "let" "jazz-readtable" "readtable:" "permanent-close:" "list" "open-string-pipe" "tail" "head" "receive" "select?" "thread-proxy")}
      {Lisp-Entry "select-console" definition #f 306 21 306 35 ("current-thread" "thread-console" "get-remote" "controller-debugger" "select-console")}
      {Lisp-Entry "console-port-getter" definition #f 310 13 310 32 ("current-console" "get-head" "terminal-port" "controller-debugger" "not" "if")}
      {Lisp-Entry "detach-consoles" definition #f 316 13 316 28 ("table-keys/values" "bind" "pair" "for-each" "lambda" "with-consoles-mutex" "*consoles*" "table-clear" "get-head" "get-tail" "close-port" "get-pump" "stop-debuggee-console-pump" "console" "thread" "detach-console" "define")}
      {Lisp-Entry "start-debuggee-console-pump" definition #f 336 13 336 40 ("debuggee-console-pump" "'debuggee-console-pump" "console-output" "controller-debugger" "when" "str" "start-pump" "lambda" "new-system-thread" "thread-start!" "port" "console")}
      {Lisp-Entry "stop-debuggee-console-pump" definition #f 347 13 347 39 ("thread-exit" "thread-interrupt!" "thread")}
      {Lisp-Entry "current-repl-level" definition #f 357 20 357 38 ("0" "make-parameter")}
      {Lisp-Entry "current-repl-frame" definition #f 360 20 360 38 ("make-parameter")}
      {Lisp-Entry "with-repl-thread" definition #f 364 13 364 29 ("thread-exit" "thread-interrupt!" "unwind-protect" "start-repl-thread" "let" "current-repl-level" "parameterize" "step?" "step?:" "thunk" "level" "port" "reason" "thread")}
      {Lisp-Entry "start-repl-thread" definition #f 373 20 373 37 ("string->symbol" "repl" "'repl" "if" "read-eval-print-loop" "display-prompt" "not" ">" "and" "newline" "display" "format" "display-banner" "=" "when" "lambda" "new-system-thread" "thread-start!" "step?" "step?:" "0" "level" "port" "reason" "thread")}
      {Lisp-Entry "display-banner" definition #f 391 21 391 35 ("force-output" "format" "not" "if" "current-process-version" "version" "current-process-title" "title" "let" "port")}
      {Lisp-Entry "display-prompt" definition #f 401 21 401 35 ("force-output" "format" "0" ">" "if" "prompt" "define" "level" "port")}
      {Lisp-Entry "*eval-count*" definition #f 412 12 412 24 ("0")}
      {Lisp-Entry "eval-count" definition #f 416 20 416 30 ("increase!" "*eval-count*" "prog1")}
      {Lisp-Entry "read-eval-print-loop" definition #f 426 13 426 33 ("continuation-capture" "iterate" "proper-tail-calls" "declare" "'console-eval" "thread-call" "invoke-restart" "second" "restart" "newline" "1" "length" ">" "find-restarts" "restarts" "resume-loop" "'resume-loop" "eof-object?" "force-output" "display-prompt" "value" "for-each" "list" "call-with-values" "repl-result-history-add" "specified?" "thread-call-result?" "result" "console-print" "registered-console-command" "command" "arguments" "cmd" "console-context" "current-console" "jazz.debuggee.current-console-context" "with-dynamic-self" ",class-name" "class" "split-composite" "class-name" "receive" "class-of" "category-identifier" "class-identifier" ",expr" ",local-names" "with-local-variables" "get-dialect-name" ",unit-name" "module" "generate-symbol-context" "requested-unit-name" "outline-unit" "module-declaration" "load-unit" "unit-name" "thunk" "0" "generate-symbol-counter" "eval-count" "format" "generate-symbol-for" "not" "effective-context" ":lexical" "get-variables" "local-variables" "current-console-context" "pp" "set!" "ev" "object?" "object" "serial" "string=?" "when" "find-object" "local-self" "string->symbol" "var" "map" "variables" "local-names" "evaluator" "context" "eval-in-context" "eval-within-no-winding" "runner" "get-continuation" "serial->object" "cont" "frame" "frame-evaluator" "unbox" "current-repl-frame" "frame-box" "current-frame" "else" "values" "symbol?" "cond" "cadr" "unquoted" "cdr" "unquote" "'unquote" "car" "eq?" "pair?" "if" "parse-unquote-command" "expr" "console-eval" "read" "continuation-return" "throw" "exception" "'exception" "thread-post" "exc" "with-exception-filter" "lambda" "scheme-readtable" "get-readtable" "and" "or" "with-readtable" "thread-console" "console" "let" "eval" "'eval" "walk-for" "parameterize" "console-read" "resume" "read-eval-print" "define" "level" "port" "thread")}
      {Lisp-Entry "default-context" definition #f 592 12 592 27 (":not-set")}
      {Lisp-Entry "get-default-context" definition #f 595 20 595 39 ("default-context")}
      {Lisp-Entry "set-default-context" definition #f 598 20 598 39 ("default-context" "set!" "ctx")}
      {Lisp-Entry "context-alias" definition #f 602 13 602 26 ("else" "context-alias" ":me" ":process" ":profile" "process-alias" "or" "Me" "new" "not" "cond" "get-process" "process" "let" ":not-set" "default-context" "neq?" ":default" "eq?" "and" "if" "enumerator?" "when" "context")}
      {Lisp-Entry "console-context" define #f 621 9 621 24 ("not" "set-context" ":default" "initial-console-context" "context-alias" "get-process" "process" "new-context" "unspecified?" "if" "get-context" "context" "let" "context-init" "define" "console")}
      {Lisp-Entry "*console-commands*" definition #f 644 12 644 30 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-console-command" definition #f 648 20 648 44 ("*console-commands*" "table-set!" "proc" "cmd")}
      {Lisp-Entry "registered-console-command" definition #f 652 20 652 46 ("error" "*console-commands*" "table-ref" "or" "cmd")}
      {Lisp-Entry "in-command" define #f 657 9 657 19 ("jazz-readtable" "set-readtable" "set-context" "load-unit" "symbol?" "when" "context-alias" "new-context" "car" "ctx" "null?" "not" "or" "if" "console-context" "context" "let" "print" "eval" "read" "console" "arguments" "cmd")}
      {Lisp-Entry "jazz-exception-debugger" definition #f 679 20 679 43 ("exception" "'exception" "invoke-debugger" "exception-detail" "detail" "exception-reason" "reason" "continuation" "continuation-capture" "once" "'once" "eq?" "when" "lambda" "with-system-exception-debugger" "system-exception-hook" "invoke-exception-hook" "not" "or" "if" "use-debugger?" "use" "get-controller-debugger" "debugger" "let" "exc")}
      {Lisp-Entry "with-jazz-exception-debugger" definition #f 695 20 695 48 ("jazz-exception-debugger" "with-exception-debugger" "thunk")}
      {Lisp-Entry "local-debugger?" definition #f 700 20 700 35 ("local-proxy?" "controller-debugger" "jazz-exception-debugger" "current-exception-debugger" "eq?" "and")}
      {Lisp-Entry "without-local-debugger" definition #f 706 20 706 42 ("with-system-exception-debugger" "local-debugger?" "if" "thunk")}
      {Lisp-Entry "break-internal" definition #f 713 23 713 37 ("break" "'break" "invoke-debugger" "continuation" "lambda" "continuation-capture" "reason" "reason:")}
      {Lisp-Entry "start-repl-internal" definition #f 719 23 719 42 ("invoke-repl" "select-console" "when" "continuation" "lambda" "continuation-capture" "select?" "select?:" "reason" "reason:")}
      {Lisp-Entry "install-step" definition #f 732 20 732 32 ("continuation-graft" "cmd" "stepper:" "locat:" "break" "'break" "invoke-debugger" "cont" "continuation-capture" "executer" "locat" "lambda" "install-step-handler" "proper-tail-calls" "declare")}
      {Lisp-Entry "inspect-internal" definition #f 751 23 751 39 ("local-process" "controller-debugger" "inspect" "package-info" "info" "let" ":value" "kind" "kind:" "object")}
      {Lisp-Entry "*advices*" definition #f 761 12 761 21 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-advices" definition #f 765 20 765 31 ("*advices*")}
      {Lisp-Entry "advise-internal" definition #f 770 23 770 38 ("class?" "null/pair?" "symbol?" "not" "cond" "table-set!" "table-clear" "eq?" "*advices*" "or" "original" "set" "ref" "update-method" "find-dispatch" "compose-name" "get-name" "Method" "Slot" "advise-method" "method" "iterate-class-overrides" "get-fields" "iterate-table-safe" "class" "field-set!" "value" "field-ref" "call-proc" "field-locator" "locator" "field" "advise-class" "Class" "advise-field" "Field" "typecase" "starts-with?" "when" "car" "category-field" "advise-class-field" "category?" "advise-entry" "get-entries" "table-ref" "entry" "require-module" "advise-prefixed" "2" "cardinality" "-" "0" "substring" "prefix" "name" "let" "null?" "assert" "ends-with?" "if" "rest" "bind" "path" "symbol->string" "split" "string->symbol" "map" "advise-path" "symbol" "advise-symbol" "advise-module" "module" "module-name" "lambda" "get-modules" "iterate-table" "advise-all" "define" "proc" "what")}
      {Lisp-Entry "unadvise-internal" definition #f 872 23 872 40 ("set" "original" "locator" "field" "lambda" "advise" "what")}
      {Lisp-Entry "debug-advice-internal" definition #f 896 23 896 44 ("debug" "set" "original" "locator" "field")}
      {Lisp-Entry "counts" definition #f 905 12 905 18 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-counts" definition #f 908 20 908 30 ("counts")}
      {Lisp-Entry "count-advice-internal" definition #f 912 20 912 41 ("apply" "1" "0" "table-ref" "+" "counts" "table-set!" "rest" "lambda" "procedure?" "when" "let" "set" "original" "locator" "field")}
      {Lisp-Entry "trace-depth" define #f 925 8 925 19 ("0" "make-parameter")}
      {Lisp-Entry "trace-advice-internal" definition #f 929 23 929 44 ("apply" "1" "+" "parameterize" "result" "not-null?" "present-identifier" ":terminal" "format" "2" "trace-depth" "*" "column" "rest" "lambda" "procedure?" "when" "let" "set" "original" "locator" "field")}
      {Lisp-Entry "trace-internal" definition #f 941 23 941 37 ("trace-advice-internal" "advise" "what")}
      {Lisp-Entry "untrace-internal" definition #f 945 23 945 39 ("unadvise" "what")}
      {Lisp-Entry "invoke-repl" definition #f 954 13 954 24 ("process-debuggee-loop" "debuggee-loop" "get-process" "process" "with-current-loop" "box" "current-repl-frame" "parameterize" "lambda" "with-repl-thread" "1" "current-repl-level" "+" "0" "current-loop" "not" "if" "level" "get-console-port" "port" "current-thread" "thread" "let" "continuation" "detail" "reason")}
      {Lisp-Entry "invoke-debugger" definition #f 969 20 969 35 ("unregister-stop" "process-debuggee-loop" "debuggee-loop" "not" "if" "get-process" "process" "with-current-loop" "boolean" "step?:" "local-process" "controller-debugger" "register-stop" "dynamic-wind" "Debuggee-Stop-Local-Proxy" "stop-proxy" "Debuggee-Thread" "Debuggee-Thread-Local-Proxy" "thread-proxy" "Debuggee-Stop" "stop" "box" "current-repl-frame" "parameterize" "with-repl-thread" "1" "current-repl-level" "+" "level" "get-console-port" "port" "release-catalog-entries" "current-restarts" "Debuggee-Restart" "Debuggee-Restart-Local-Proxy" "new" "restart" "lambda" "map" "thread" "compute-restarts" "mutex-unlock!" "current-thread" "mutex-owner" "eq?" "when" "get-load-mutex" "load-mutex" "let" "release-load-mutex!" "define" "stepper" "stepper:" "locat" "locat:" "continuation" "exc" "detail" "reason" "kind")}
      {Lisp-Entry "debuggee-loop" definition #f 1014 21 1014 34 ("with-jazz-exception-debugger" "thread-read" "thunk" "lambda" "present-current-loop-restart" "resume-loop" "'resume-loop" "with-restart-catcher" "loop" "let")}
      {Lisp-Entry "present-current-loop-restart" definition #f 1024 21 1024 49 ("0" "=" "if" "format" "get-level" "level" "when" "current-loop" "loop" "let")}
      {Lisp-Entry "*current-view-debugger*" definition #f 1039 12 1039 35 ()}
      {Lisp-Entry "current-view-debugger" definition #f 1043 20 1043 41 ("View-Debugger" "new" "set!" "*current-view-debugger*" "not" "when")}}})
"_view"
 ({Lisp-File-Entry {File jazz.debuggee "src" "jazz" "debuggee" "view" "_view.jazz"} 1289845877
    {Lisp-Entry "jazz.debuggee.view" module #f 37 8 37 26 ("jazz")
      {Lisp-Entry "edit" definition #f 53 20 53 24 ("unspecified" "class-of" "category-name" "get-application" "edit-definitions" "object")}
      {Lisp-Entry "design" definition #f 63 20 63 26 ("client:" "new-frame" "jazz.library.Canvas-Manager" "jazz.designer.View-Editor" "View" "typecase" "editor" "error" "else" "Component" "Form" "is?" "resolve-form" "instantiate" "symbol?" "new" "class?" "cond" "designing?" "parameterize" "component" "let" "target")}
      {Lisp-Entry "design-in-place" definition #f 76 20 76 35 ("host-visible?:" "client:" "jazz.designer.View-Editor" "new-frame" "view")}
      {Lisp-Entry "reprint" definition #f 80 20 80 27 ("save" "form:" "Designer" "new" "designer" "get-class-form" "form" "class-of" "class?" "if" "class" "let*" "class/component")}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "autoload.jazz"} 1288732032
    {Lisp-Entry "jazz.debuggee.autoload" module #f 37 18 37 40 ("jazz")}})
"setup"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "setup.jazz"} 1288732032
    {Lisp-Entry "jazz.debuggee.setup" module #f 37 8 37 27 ("setup-debuggee" "jazz")}})
"stub"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "stub.jazz"} 1288732032
    {Lisp-Entry "jazz.debuggee.stub" module #f 37 8 37 26 ("jazz")
      {Lisp-Entry "Debuggee-Process" remotable-stub "~stub" 48 16 48 32 ()
        {Lisp-Entry "get-title" method #f 51 29 51 38 ()}
        {Lisp-Entry "get-icon" method #f 52 29 52 37 ()}
        {Lisp-Entry "detach-process" method #f 53 23 53 37 ()}
        {Lisp-Entry "reload-process" method #f 54 23 54 37 ()}
        {Lisp-Entry "exit-process" method #f 55 23 55 35 ()}
        {Lisp-Entry "console-input" method #f 56 23 56 36 ("line" "thread")}
        {Lisp-Entry "get-toplevel-hwnd" method #f 57 23 57 40 ()}
        {Lisp-Entry "get-threads" method #f 58 23 58 34 ()}
        {Lisp-Entry "restart-stop" method #f 59 23 59 35 ("restart")}
        {Lisp-Entry "break-thread" method #f 60 23 60 35 ("thread")}
        {Lisp-Entry "continue-stop" method #f 61 23 61 36 ("stop")}
        {Lisp-Entry "step-stop" method #f 62 23 62 32 ("command" "stop")}
        {Lisp-Entry "evaluate-expressions" method #f 63 23 63 43 ("col" "line" "container" "str" "syntax")}
        {Lisp-Entry "profiler-start" method #f 64 23 64 37 ("name")}
        {Lisp-Entry "profiler-stop" method #f 65 23 65 36 ("name")}
        {Lisp-Entry "profiler-profiles" method #f 66 23 66 40 ()}
        {Lisp-Entry "profiler-profile" method #f 67 23 67 39 ("name")}
        {Lisp-Entry "profile-reset" method #f 68 23 68 36 ("depth" "profiler" "name")}
        {Lisp-Entry "inspect-serial" method #f 69 23 69 37 ("serial")}}
      {Lisp-Entry "Debuggee-Thread" remotable-stub "~stub" 77 16 77 31 ()
        {Lisp-Entry "get-id" method #f 80 29 80 35 ()}
        {Lisp-Entry "get-name" method #f 81 29 81 37 ()}
        {Lisp-Entry "get-state" method #f 82 29 82 38 ()}
        {Lisp-Entry "get-stops" method #f 83 23 83 32 ()}
        {Lisp-Entry "set-repl-frame" method #f 84 23 84 37 ("frame")}}
      {Lisp-Entry "Debuggee-Restart" remotable-stub "~stub" 92 16 92 32 ()
        {Lisp-Entry "get-id" method #f 95 29 95 35 ()}
        {Lisp-Entry "get-name" method #f 96 29 96 37 ()}
        {Lisp-Entry "get-message" method #f 97 29 97 40 ()}}
      {Lisp-Entry "Debuggee-Stop" remotable-stub "~stub" 105 16 105 29 ()
        {Lisp-Entry "get-id" method #f 108 29 108 35 ()}
        {Lisp-Entry "get-kind" method #f 109 29 109 37 ()}
        {Lisp-Entry "get-reason" method #f 110 29 110 39 ()}
        {Lisp-Entry "get-location" method #f 111 29 111 41 ()}
        {Lisp-Entry "get-detail" method #f 112 23 112 33 ()}
        {Lisp-Entry "get-restarts" method #f 113 23 113 35 ()}
        {Lisp-Entry "get-frames" method #f 114 23 114 33 ()}}
      {Lisp-Entry "Debuggee-Frame" remotable-stub "~stub" 122 16 122 30 ()
        {Lisp-Entry "get-id" method #f 125 29 125 35 ()}
        {Lisp-Entry "get-continuation" method #f 126 29 126 45 ()}
        {Lisp-Entry "get-name" method #f 127 29 127 37 ()}
        {Lisp-Entry "get-interpreted?" method #f 128 29 128 45 ()}
        {Lisp-Entry "get-location" method #f 129 23 129 35 ()}
        {Lisp-Entry "get-variables" method #f 130 23 130 36 ("kind")}}}})
"update"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.debuggee" "src" "jazz" "debuggee" "update.jazz"} 1288732032
    {Lisp-Entry "jazz.debuggee.update" module #f 37 8 37 28 ("update-debuggee-process" "update-debuggee-arguments" "jazz")}})
