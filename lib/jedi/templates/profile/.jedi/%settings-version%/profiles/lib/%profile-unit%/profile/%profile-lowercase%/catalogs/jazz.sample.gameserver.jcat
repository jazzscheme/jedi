"C4-Pages"
 ({Lisp-File-Entry {File jazz.sample.gameserver "src" "jazz" "sample" "gameserver" "C4-Pages.jazz"} 1288732034
    {Lisp-Entry "jazz.sample.gameserver.C4-Pages" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "C4-Pages" class #f 47 7 47 15 ("Game-Pages")
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("page-name~self" "set!")}
        {Lisp-Entry "create-players" method #f 54 11 54 25 ("C4-AI" "GREEN" "RED" "C4-Human" "new" "list" "nu=?" "cond" "players" "game")}
        {Lisp-Entry "new-game" method #f 61 11 61 19 ("C4-Game" "new")}
        {Lisp-Entry "render-game" method #f 65 20 65 31 ("C4-AI" "'C4-AI" "minimax-interpreted?" "append" "increase!" "2" "modulo" ",text" "present-move" "text" "prog1" "lambda" "map" "rank" "draw" "get-winner" "present" "win" "case" "colspan:" "present-col" "align:" ",image" "serialize-col" "onclick:" "human?" "play" "'play" "eqv?" "if" "RED" "GREEN" "EMPTY" "=" "format" "image" "get-token" "token" "get-square" "square" "let*" "get-board-columns" "col" "present-line" "cons" "collect" "get-board-rows" "below" "0" "from" "row" "for" "loop" "cellpadding:" "cellspacing:" "valign:" "class:" "26" "30" "width:" "id:" "serialize-game" "1" "length" "-" "->string" ",players" "value:" "method:" "name:" "background:" "src:" "rel:" "href:" "type:" "get-second-player" "second-player" "get-next-player" "next-player" "get-forward-moves" "forward" "backward" "get-status" "status" "play-players" "memq?" "get-backward-moves" "not-null?" "and" "when" "get-players" "computer?" "every?" "all-computers?" "move" "deserialize-game" "create-players" "register-players" "effective-goto" "goto" "new-game" "effective-current" "current" "get-parameter" "effective-players" "players" "let" "deserialize-col" "available-move" "else" "all" "'all" "one" "'one" "equal?" "empty-string?" "not" "or" "cond" "value" "game" "effective-move" "define" "request")}
        {Lisp-Entry "serialize-col" definition #f 218 15 218 28 ("number->string" "col")}
        {Lisp-Entry "deserialize-col" definition #f 222 15 222 30 ("string->number" "value" "game")}
        {Lisp-Entry "serialize-move" method #f 226 20 226 34 ("format" "get-col" "col" "get-line" "line" "let" "move")}
        {Lisp-Entry "deserialize-move" method #f 232 20 232 36 ("get-square" "cardinality" "1" "+" "col" "0" "substring" "string->number" "row" "search" "pos" "let" "value" "game")}}}})
"Game-Pages"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gameserver" "src" "jazz" "sample" "gameserver" "Game-Pages.jazz"} 1288732034
    {Lisp-Entry "jazz.sample.gameserver.Game-Pages" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Game-Pages" class #f 49 7 49 17 ("HTTP-Request-Handler")
        {Lisp-Entry "page-name" slot #f 52 8 52 17 ()}
        {Lisp-Entry "get-page-name" accessor #f 52 28 52 36 ()}
        {Lisp-Entry "set-page-name" accessor #f 52 28 52 36 ()}
        {Lisp-Entry "play-players" method #f 60 11 60 23 ("one" "'one" "unless" "computer-move" "play-move" "begin" "computer?" "if" "get-next-player" "player" "play" "'play" "get-status" "eq?" "when" "loop" "let" "move" "game")}
        {Lisp-Entry "effective-players" method #f 79 11 79 28 ("or" "players")}
        {Lisp-Entry "effective-current" method #f 83 11 83 28 ("string->number" "empty-string?" "not" "or" "if" "value")}
        {Lisp-Entry "effective-goto" method #f 89 11 89 25 ("string->number" "empty-string?" "not" "or" "if" "value" "game")}
        {Lisp-Entry "serialize-game" method #f 100 11 100 25 ("serialize-move" "value:" "format" "name:" "type:" "collect" "0" "from" "rank" "get-moves" "in" "move" "for" "loop" "serialize-moves" "define" "game")}
        {Lisp-Entry "deserialize-game" method #f 110 11 110 27 ("1" "+" "<" "append-forward-history" "play-move" "<=" "not" "or" "if" "deserialize-move" "move" "when" "format" "get-parameter" "value" "0" "rank" "loop" "let" "deserialize-moves" "define" "current" "goto" "game" "request")}
        {Lisp-Entry "serialize-move" method #f 125 29 125 43 ("move")}
        {Lisp-Entry "deserialize-move" method #f 129 29 129 45 ("value" "game")}
        {Lisp-Entry "render-game" method #f 133 19 133 30 ("request")}
        {Lisp-Entry "handle-request" method #f 137 20 137 34 ("get-output-string" "render-game" "XHTML-Parser" "parse" "JML-Preferences" "XHTML-Renderer" "render" "open-output-string" "printer" "let" "content:" "ok" "'ok" "code:" "HTTP-Response" "new" "page-name" "get-uri" "starts-with?" "when" "server" "port" "request")}}}})
"Game-Server"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gameserver" "src" "jazz" "sample" "gameserver" "Game-Server.jazz"} 1288732034
    {Lisp-Entry "jazz.sample.gameserver.Game-Server" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Game-Server-Process" class #f 51 7 51 26 ("8080" "initialize" "Process")
        {Lisp-Entry "port" slot #f 54 8 54 12 ()}
        {Lisp-Entry "server" slot #f 55 8 55 14 ()}
        {Lisp-Entry "initialize" method #f 58 20 58 30 ("port~self" "set!" "nextmethod" "8080" "port" "port:")}
        {Lisp-Entry "start-process" method #f 63 20 63 33 ("start" "Jazz" "Directory" "root-directory:" "Directory-Handler" "Gomoku-Pages" "C4-Pages" "Games-Pages" "get-dispatcher" "add-handler" "port" "port:" "Web-Server" "new" "server" "set!")}
        {Lisp-Entry "stop" method #f 76 18 76 22 ("stop" "server" "when")}}}})
"Games-Pages"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gameserver" "src" "jazz" "sample" "gameserver" "Games-Pages.jazz"} 1288732034
    {Lisp-Entry "jazz.sample.gameserver.Games-Pages" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Games-Pages" class #f 47 7 47 18 ("HTTP-Request-Handler")
        {Lisp-Entry "handle-request" method #f 50 20 50 34 ("get-output-string" "href:" "XHTML-Parser" "parse" "JML-Preferences" "XHTML-Renderer" "render" "open-output-string" "printer" "let" "content:" "ok" "'ok" "code:" "HTTP-Response" "new" "get-uri" "equal?" "when" "server" "port" "request")}}}})
"Gomoku-Pages"
 ({Lisp-File-Entry {File jazz.sample.gameserver "src" "jazz" "sample" "gameserver" "Gomoku-Pages.jazz"} 1288732034
    {Lisp-Entry "jazz.sample.gameserver.Gomoku-Pages" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Gomoku-Pages" class #f 47 7 47 19 ("Game-Pages")
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("page-name~self" "set!")}
        {Lisp-Entry "render-game" method #f 54 20 54 31 ("jazz.sample.gomoku.Gomoku-AI" "'jazz.sample.gomoku.Gomoku-AI" "minimax-interpreted?" "append" "increase!" "2" "modulo" ",text" "present-move" "text" "prog1" "lambda" "map" "rank" "draw" "get-winner" "present" "win" "+" "colspan:" "present-col" "align:" "below" ",image" "serialize-move" "onclick:" "human?" "play" "'play" "eqv?" "eq?" "image" "format" "EMPTY" "moku-square?" "name" "get-token" "token" "get-square" "square" "let*" "horz" "col" "present-line" "cons" "collect" "=" "vert" "with" "to" "0" "from" "row" "for" "loop" "get-board-columns" "last-col" "get-board-rows" "last-row" "cellpadding:" "cellspacing:" "valign:" "class:" "26" "70" "10" "30" "width:" "serialize-game" "->string" ",players" "symbol->string" "value:" "method:" "name:" "background:" "src:" "rel:" "href:" "type:" "1" "length" "-" "last" "null?" "last-move" "prefix" "get-second-player" "second-player" "get-next-player" "next-player" "get-forward-moves" "forward" "backward" "get-status" "status" "play-players" "memq?" "get-backward-moves" "not-null?" "and" "when" "get-players" "computer?" "every?" "all-computers?" "move" "deserialize-game" "register-players" "effective-goto" "goto" "effective-current" "current" "effective-players" "get-parameter" "let" "Gomoku-AI" "WHITE" "BLACK" "Gomoku-Human" "list" "players" "create-players" "deserialize-move" "else" "all" "'all" "one" "'one" "equal?" "empty-string?" "or" "game" "effective-move" "'large" "'medium" "nu=?" "cond" "'small" "not" "if" "value" "effective-size" "19" "large" "13" "medium" "columns:" "9" "rows:" "Gomoku-Game" "new" "small" "case" "size" "new-game" "define" "request")}
        {Lisp-Entry "serialize-move" method #f 271 20 271 34 ("format" "get-col" "col" "get-line" "line" "let" "move")}
        {Lisp-Entry "deserialize-move" method #f 277 20 277 36 ("get-square" "cardinality" "1" "+" "col" "0" "substring" "string->number" "row" "search" "pos" "let" "value" "game")}}}})
"_gameserver"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gameserver" "src" "jazz" "sample" "gameserver" "_gameserver.jazz"} 1288732034
    {Lisp-Entry "jazz.sample.gameserver" module #f 38 8 38 30 ("jazz")}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gameserver" "src" "jazz" "sample" "gameserver" "autoload.jazz"} 1288732034
    {Lisp-Entry "jazz.sample.gameserver.autoload" module #f 37 18 37 49 ("jazz")}})
"imagemagick"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gameserver" "src" "jazz" "sample" "gameserver" "imagemagick.jazz"} 1288732034
    {Lisp-Entry "jazz.sample.gameserver.imagemagick" module #f 37 8 37 42 ("jazz")
      {Lisp-Entry "image-convert" definition #f 40 20 40 33 ("error" "0" "/=" "when" "format" "shell-command" "status" "let" "cmd")}
      {Lisp-Entry "image-composite" definition #f 46 20 46 35 ("error" "0" "/=" "when" "format" "shell-command" "status" "let" "cmd")}}})
"run"
 ({Lisp-File-Entry {File jazz.sample.gameserver "src" "jazz" "sample" "gameserver" "run.jazz"} 1288732034
    {Lisp-Entry "jazz.sample.gameserver.run" module #f 37 8 37 34 ("Game-Server-Process" "new" "boot-environment" "descriptor" "lambda" "jazz.sample.gameserver" "'jazz.sample.gameserver" "register-product-run" "jazz")}})
