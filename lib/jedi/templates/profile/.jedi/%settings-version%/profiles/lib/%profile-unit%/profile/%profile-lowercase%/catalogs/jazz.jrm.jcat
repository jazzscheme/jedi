"IOR"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "IOR.jazz"} 1290108799
    {Lisp-Entry "jazz.jrm.remote.IOR" module #f 37 18 37 37 ("jazz")
      {Lisp-Entry "IOR" class #f 40 7 40 10 ("Object")
        {Lisp-Entry "host" slot #f 43 8 43 12 ()}
        {Lisp-Entry "get-host" accessor #f 43 30 43 38 ()}
        {Lisp-Entry "service" slot #f 44 8 44 15 ()}
        {Lisp-Entry "get-service" accessor #f 44 30 44 38 ()}
        {Lisp-Entry "stub-interface" slot #f 45 8 45 22 ()}
        {Lisp-Entry "get-stub-interface" accessor #f 45 30 45 38 ()}
        {Lisp-Entry "reference" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-reference" accessor #f 46 30 46 38 ()}
        {Lisp-Entry "values" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-values" accessor #f 47 30 47 38 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("values~self" "reference~self" "stub-interface~self" "service~self" "host~self" "set!" "nextmethod" "values" "reference" "stub-interface" "service" "host")}
        {Lisp-Entry "print" method #f 59 20 59 25 ("values" "reference" "stub-interface" "service" "host" "self" "class-of" "category-name" "format" "readably" "printer")}}}})
"Local-Proxy"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "Local-Proxy.jazz"} 1288732033
    {Lisp-Entry "jazz.jrm.remote.Local-Proxy" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Local-Proxy" class #f 43 7 43 18 ("Proxy")
        {Lisp-Entry "object" slot #f 46 8 46 14 ()}
        {Lisp-Entry "get-object" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "set-object" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("object~self" "set!" "nextmethod" "object")}
        {Lisp-Entry "print" method #f 54 20 54 25 ("object" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "proxy-values" method #f 61 29 61 41 ()}
        {Lisp-Entry "live?" method #f 65 20 65 25 ()}}}})
"Proxy"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "Proxy.jazz"} 1288732033
    {Lisp-Entry "jazz.jrm.remote.Proxy" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Proxy" class #f 40 7 40 12 ("Object")
        {Lisp-Entry "live?" method #f 43 35 43 40 ()}}}})
"Register"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "register" "Register.jazz"} 1288732033
    {Lisp-Entry "jazz.jrm.register.Register" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Register" class #f 43 7 43 15 ("eq?" "test:" "make-table" "initialize" "Object")
        {Lisp-Entry "new-local-proxy" method #f 48 23 48 38 ("self" "Register-Local-Proxy" "new")}
        {Lisp-Entry "objects" slot #f 52 8 52 15 ()}
        {Lisp-Entry "find-object" method #f 55 18 55 29 ("objects" "table-ref" "name")}
        {Lisp-Entry "require-object" method #f 59 18 59 32 ("error" "find-object" "or" "name")}
        {Lisp-Entry "register-object" method #f 69 18 69 33 ("objects" "table-set!" "error" "find-object" "if" "error?" "error?:" "object" "name")}
        {Lisp-Entry "unregister-object" method #f 78 18 78 35 ("objects" "table-clear" "error" "find-object" "not" "if" "error?" "error?:" "name")}}}})
"Remotable-Stub"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "Remotable-Stub.jazz"} 1290443808
    {Lisp-Entry "jazz.jrm.remote.Remotable-Stub" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Remotable-Stub" interface #f 40 11 40 25 ()
        {Lisp-Entry "stub-reference" method #f 43 35 43 49 ()}}}})
"Remote-Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "Remote-Listener.jazz"} 1288732033
    {Lisp-Entry "jazz.jrm.remote.Remote-Listener" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Remote-Listener" class #f 44 7 44 22 ("TCP-Server")
        {Lisp-Entry "server-name" method #f 47 20 47 31 ("remote-listener" "'remote-listener")}
        {Lisp-Entry "connection-name" method #f 51 20 51 35 ("remote-connection" "'remote-connection")}
        {Lisp-Entry "create-thread" method #f 60 20 60 33 ("new-system-thread" "apply" "rest")}
        {Lisp-Entry "accept-connection" method #f 69 20 69 37 ("process-remote" "port")}}}})
"Remote-Proxy"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "Remote-Proxy.jazz"} 1288732033
    {Lisp-Entry "jazz.jrm.remote.Remote-Proxy" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Remote-Proxy" class #f 43 7 43 19 ("Proxy")
        {Lisp-Entry "ior" slot #f 46 8 46 11 ()}
        {Lisp-Entry "get-ior" accessor #f 46 22 46 30 ()}
        {Lisp-Entry "values" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-values" accessor #f 47 22 47 30 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("values~self" "ior~self" "set!" "nextmethod" "values" "ior")}
        {Lisp-Entry "print" method #f 56 20 56 25 ("values" "ior" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "set-values" method #f 64 18 64 28 ("values" "set!" "lst")}
        {Lisp-Entry "proxy-value" method #f 68 18 68 29 ("cadr" "if" "values" "getprop" "prop" "let" "thunk" "keyword")}
        {Lisp-Entry "live?" method #f 75 20 75 25 ("self" "remote-proxy-live?")}}}})
"Stub-Interface"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "Stub-Interface.jazz"} 1288732033
    {Lisp-Entry "jazz.jrm.remote.Stub-Interface" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Stub-Interface" class #f 40 7 40 21 ("Interface")
        {Lisp-Entry "local-class" method #f 43 35 43 46 ()}
        {Lisp-Entry "remote-class" method #f 44 35 44 47 ()}}}})
"_jrm"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "_jrm.jazz"} 1290445201
    {Lisp-Entry "jazz.jrm" module #f 37 8 37 16 ("jazz")
      {Lisp-Entry "*debug?*" definition #f 45 12 45 20 ()}
      {Lisp-Entry "*debug-arguments?*" definition #f 48 12 48 30 ()}
      {Lisp-Entry "*debug-locally?*" definition #f 51 12 51 28 ()}
      {Lisp-Entry "Remote-Listener-Host" definition #f 60 12 60 32 ("host-name")}
      {Lisp-Entry "Remote-Listener-Service" definition #f 63 12 63 35 ("any" "'any")}
      {Lisp-Entry "remote-listener" definition #f 67 12 67 27 ()}
      {Lisp-Entry "get-remote-listener" definition #f 71 20 71 39 ("remote-listener")}
      {Lisp-Entry "set-remote-listener" definition #f 74 20 74 39 ("remote-listener" "set!" "server")}
      {Lisp-Entry "require-remote-listener" definition #f 78 20 78 43 ("error" "remote-listener" "not" "if")}
      {Lisp-Entry "start-remote-listener" definition #f 84 20 84 41 ("error" "set!" "error?:" "wait-started" "if" "start" "Remote-Listener-Service" "service:" "Remote-Listener-Host" "or" "host:" "Remote-Listener" "new" "server" "let" "command-host/service" "service" "host" "receive" "remote-listener" "unless" "default-service" "default-service:" "default-host" "default-host:")}
      {Lisp-Entry "stop-remote-listener" definition #f 94 20 94 40 ("set!" "stop" "remote-listener" "when")}
      {Lisp-Entry "Remote-Connection-Broke" class #f 105 7 105 30 ("Exception")}
      {Lisp-Entry "throw-remote-connection-broke" definition #f 108 13 108 42 ("Remote-Connection-Broke" "new" "throw")}
      {Lisp-Entry "live-timeout" definition #f 117 12 117 24 ("0.5")}
      {Lisp-Entry "live-request" definition #f 120 12 120 24 ("live?" "'live?")}
      {Lisp-Entry "live-response" definition #f 123 12 123 25 ("alive" "'alive")}
      {Lisp-Entry "remote-proxy-live?" definition #f 127 21 127 39 ("live-response" "eq?" "close-port" "receive-remote-result" "result" "live-request" "send-remote-message" "receive-timeout" "live-timeout" "send-timeout" "parameterize" "lambda" "with-exception-catcher" "port-number:" "server-address:" "list" "open-tcp-client" "port" "live?" "'live?" "***client***" "'***client***" "terminal" "*debug?*" "when" "get-service" "service" "get-host" "host" "marshall" "proxy-ior" "let" "exc" "Remote-Connection-Broke" "catch" "remote-proxy")}
      {Lisp-Entry "send-timeout" definition #f 153 12 153 24 ("2" "make-parameter")}
      {Lisp-Entry "receive-timeout" definition #f 156 12 156 27 ("10" "make-parameter")}
      {Lisp-Entry "post-remote" definition #f 160 20 160 31 ("post" "'post" "invoke-remote" "arguments" "remote-proxy" "method-name")}
      {Lisp-Entry "exec-remote" definition #f 164 20 164 31 ("exec" "'exec" "invoke-remote" "arguments" "remote-proxy" "method-name")}
      {Lisp-Entry "call-remote" definition #f 168 20 168 31 ("call" "'call" "invoke-remote" "arguments" "remote-proxy" "method-name")}
      {Lisp-Entry "invoke-remote" definition #f 172 13 172 26 ("unmarshall" "call" "error" "if" "result" "err" "bind" "->" "'->" "'received" "receive-remote-result" "received" "exec" "unspecified" "post" "case" "send-remote-message" "port" "lambda" "port-number:" "server-address:" "list" "call-with-tcp-client" "*debug-arguments?*" "and" "***client***" "'***client***" "terminal" "*debug?*" "when" "get-service" "service" "get-host" "host" "proxy-ior" "marshall" "let" "arguments" "remote-proxy" "method-name" "kind")}
      {Lisp-Entry "send-remote-message" definition #f 204 13 204 32 ("write-port" "throw-remote-connection-broke" "output-port-timeout-set!" "when" "send-timeout" "timeout" "let" "port" "info")}
      {Lisp-Entry "receive-remote-result" definition #f 211 13 211 34 ("throw-remote-connection-broke" "eof-object?" "if" "read-port" "info" "input-port-timeout-set!" "when" "receive-timeout" "timeout" "let" "port")}
      {Lisp-Entry "process-remote" definition #f 226 21 226 35 ("call" "unspecified" "marshall" "list" "'return" "result" "err" "receive" "exec" "post" "case" "*debug-arguments?*" "and" "kind" "bind" "live-response" "live-request" "eq?" "message" "write-port" "output-port-timeout-set!" "send-timeout" "send-remote-result" "throw-remote-connection-broke" "eof-object?" "read-port" "info" "input-port-timeout-set!" "receive-timeout" "timeout" "receive-remote-message" "class-of" "dispatch" "apply" "local-proxy" "unmarshall" "let" "exception-reason" "display-continuation-backtrace" "display-exception" "exception" "'exception" "***server***" "'***server***" "terminal" "*debug?*" "when" "cont" "exc" "with-exception-handler" "return" "lambda" "continuation-capture" "dispatch-remote" "values" "*debug-locally?*" "if" "arguments" "proxy-ior" "method-name" "execute-remote" "define" "port")}
      {Lisp-Entry "proxy?" definition #f 291 20 291 26 ("Proxy" "is?" "object")}
      {Lisp-Entry "proxy=?" definition #f 295 20 295 27 ("else" "local-proxy=?" "local-proxy?" "remote-proxy=?" "remote-proxy?" "and" "cond" "y" "x")}
      {Lisp-Entry "proxy-server=?" definition #f 304 20 304 34 ("else" "local-proxy?" "get-ior" "ior-server=?" "remote-proxy?" "and" "cond" "y" "x")}
      {Lisp-Entry "marshall-proxy" definition #f 314 13 314 27 ("remote-proxy?" "get-ior" "marshall-remote-proxy" "proxy-values" "marshall" "stub-reference" "serialize-runtime-reference" "listening-port" "listening-host" "IOR" "new" "require-remote-listener" "server" "object->serial" "cons" "*Temp-Mega-Patch*" "set!" "get-object" "object" "let" "local-register" "proxy=?" "if" "local-proxy->reference" "local-proxy" "marshall-local-proxy" "define" "proxy")}
      {Lisp-Entry "local-proxy?" definition #f 344 20 344 32 ("Local-Proxy" "is?" "object")}
      {Lisp-Entry "local-proxy=?" definition #f 348 20 348 33 ("get-object" "eq?" "y" "x")}
      {Lisp-Entry "remote-proxy?" definition #f 358 20 358 33 ("Remote-Proxy" "is?" "object")}
      {Lisp-Entry "remote-proxy=?" definition #f 362 20 362 34 ("get-ior" "ior=?" "y" "x")}
      {Lisp-Entry "local-register" definition #f 372 12 372 26 ()}
      {Lisp-Entry "get-local-register" definition #f 376 20 376 38 ("Register" "new-local-proxy" "set!" "local-register" "not" "when")}
      {Lisp-Entry "new-remote-register" definition #f 382 20 382 39 ("Register-Stub" "reference" "serialize-runtime-reference" "IOR" "new" "unmarshall" "port" "host")}
      {Lisp-Entry "*Temp-Mega-Patch*" definition #f 392 12 392 29 ()}
      {Lisp-Entry "ior?" definition #f 396 20 396 24 ("IOR" "is?" "object")}
      {Lisp-Entry "local-ior?" definition #f 400 20 400 30 ("listening-port" "get-service" "service=?" "listening-host" "get-host" "host=?" "and" "require-remote-listener" "server" "let" "ior")}
      {Lisp-Entry "ior=?" definition #f 406 20 406 25 ("get-reference" "reference=?" "get-service" "service=?" "get-host" "host=?" "and" "y" "x")}
      {Lisp-Entry "ior-server=?" definition #f 412 20 412 32 ("get-service" "service=?" "get-host" "host=?" "and" "y" "x")}
      {Lisp-Entry "host=?" definition #f 417 20 417 26 ("equal?" "y" "x")}
      {Lisp-Entry "service=?" definition #f 421 20 421 29 ("eqv?" "y" "x")}
      {Lisp-Entry "reference=?" definition #f 425 20 425 31 ("eqv?" "y" "x")}
      {Lisp-Entry "unmarshall-ior" definition #f 429 20 429 34 ("local-ior?" "get-stub-interface" "deserialize-runtime-reference" "resolve-runtime-reference" "get-values" "unmarshall" "remote-class" "let" "unmarshall-remote-ior" "get-reference" "serial->object" "local-class" "new" "local-register" "not" "if" "reference" "reference->local-proxy" "stub-interface" "unmarshall-local-ior" "define" "ior")}
      {Lisp-Entry "marshall" definition #f 453 13 453 21 ("error" "else" "cdr" "car" "marshall" "cons" "pair?" "marshall-proxy" "proxy?" "Walk-Location" "Exception-Detail" "is?" "ior?" "unspecified?" "u8vector?" "eq?" "keyword?" "symbol?" "string?" "number?" "null?" "cond" "object")}
      {Lisp-Entry "unmarshall" definition #f 492 13 492 23 ("error" "else" "cdr" "car" "unmarshall" "cons" "pair?" "unmarshall-ior" "ior?" "Walk-Location" "Exception-Detail" "is?" "unspecified?" "u8vector?" "eq?" "keyword?" "symbol?" "string?" "number?" "null?" "cond" "object")}
      {Lisp-Entry "write-port" definition #f 529 13 529 23 ("force-output" "newline" "encode" "write" "info" "port")}
      {Lisp-Entry "read-port" definition #f 535 13 535 22 ("read" "decode" "port")}
      {Lisp-Entry "encode" definition #f 544 13 544 19 (":reader" "->string" "else" "cdr" "car" "pair?" "ior?" "unspecified" "'unspecified" "unspecified?" "true" "'true" "false" "'false" "eq?" "keyword?" "symbol?" "string?" "number?" "null?" "cond" "get-values" "encode" "get-reference" "get-stub-interface" "get-service" "get-host" "IOR" "'IOR" "ior" "encode-ior" "encoded-marker" "cons" "info" "kind" "encode-info" "define" "object")}
      {Lisp-Entry "encoded-marker" definition #f 581 12 581 26 ("ENCODED" "'ENCODED")}
      {Lisp-Entry "encoded?" definition #f 585 13 585 21 ("encoded-marker" "car" "eq?" "pair?" "and" "object")}
      {Lisp-Entry "decode" definition #f 595 13 595 19 ("error" "else" "cdr" "cons" "pair?" "unspecified" "true" "false" "case" "car" "read-string-element" "lambda" "with-jazz-readtable" "walk-for" "parameterize" "not" "if" "kind" "receive" "encoded?" "eof-object?" "keyword?" "symbol?" "string?" "number?" "null?" "cond" "decode" "IOR" "new" "reference" "stub-interface" "service" "host" "bind" "info" "decode-ior" "cddr" "cadr" "values" "encoded" "decode-info" "define" "object")}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "autoload.jazz"} 1288732033
    {Lisp-Entry "jazz.jrm.autoload" module #f 37 18 37 35 ("jazz")}})
"install"
 ({Lisp-File-Entry {File jazz.jrm "src" "jazz" "jrm" "install.scm"} 1288732033
    {Lisp-Entry "jazz.jrm.install" unit #f 37 6 37 22 ()
      {Lisp-Entry "IOR" define ("literal") 40 21 40 24 ("jazz.jrm.literals.construct-ior")}}})
"literals"
 ({Lisp-File-Entry {File jazz.jrm "src" "jazz" "jrm" "literals.jazz"} 1288732033
    {Lisp-Entry "jazz.jrm.literals" module #f 37 8 37 25 ("jazz")
      {Lisp-Entry "construct-ior" definition #f 48 21 48 34 ("IOR" "new" "values" "reference" "remotable" "port" "host")}}})
"stub"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "register" "stub.jazz"} 1288732033
    {Lisp-Entry "jazz.jrm.register.stub" module #f 37 8 37 30 ("jazz")
      {Lisp-Entry "Register" remotable-stub "~stub" 43 16 43 24 ()
        {Lisp-Entry "find-object" method #f 46 23 46 34 ("name")}
        {Lisp-Entry "require-object" method #f 47 23 47 37 ("name")}
        {Lisp-Entry "register-object" method #f 48 23 48 38 ("rest" "object" "name")}
        {Lisp-Entry "unregister-object" method #f 49 23 49 40 ("rest" "name")}}}})
