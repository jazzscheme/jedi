"Class-Browser"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "tools" "Class-Browser.jazz"} 1289506007
    {Lisp-Entry "jazz.editor.jazz.tools.Class-Browser" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Class-Browser" class #f 49 7 49 20 ("419" "width:" "display-images?:" "on-double-click" "double-click-handler:" ":images" "portfolio:" "multiple-selection?:" "classes" "document" "562" "391" "35" "classes-border" "on-browse" "action-handler:" "22" "120" "7" "272" "title:" "browse" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "left-padding:" "name" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "entry" "style:" "edge" "border-type:" "19" "250" "9" "2" "Point" "position:" "name-border" "name:" "599" "395" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "text" property #f 52 12 52 16 ()}
        {Lisp-Entry "external-name" method #f 71 25 71 38 ("class-browser" "'class-browser" "rest")}
        {Lisp-Entry "host-icon" method #f 80 25 80 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 84 25 84 35 ()}
        {Lisp-Entry "host-position" method #f 88 25 88 38 ("20" "90" "Point")}
        {Lisp-Entry "host-size" method #f 92 25 92 34 ("600" "395" "Dimension")}
        {Lisp-Entry "focus-default" method #f 96 20 96 33 ("name" "'name" "locate" "acquire-focus")}
        {Lisp-Entry "get-text" method #f 105 18 105 26 ("name" "'name" "locate" "get-string-content")}
        {Lisp-Entry "set-text" method #f 109 18 109 26 ("or" "name" "'name" "locate" "set-string-content" "value")}
        {Lisp-Entry "guest-actions" method #f 119 20 119 33 ("nextmethod" "class-browser" "'class-browser" "find-actions" "cons")}
        {Lisp-Entry "resize" method #f 129 20 129 26 ("classes-border" "'classes-border" "size-figure" "0" "browse" "'browse" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-browse" method #f 135 11 135 20 ("root:" "browse-inheritance-tree" "lambda" ":wait" "with-cursor" "else" "class?" "'name" "locate" "get-string-content" "format" "message-box" "not" "cond" "root" "category?" "global-ref" "value" "global-bound?" "autoload" "get-autoload" "string->symbol" "name" "Object" "empty-string?" "if" "get-text" "text" "let" "get-root-class" "define" "evt")}
        {Lisp-Entry "on-return-press" method #f 161 20 161 35 ("on-browse" "evt")}
        {Lisp-Entry "on-double-click" method #f 165 11 165 26 ("category-name" "edit-definitions" "get-application" "appl" "get-user-data" "type" "get-row" "row" "when" "get-single-selection" "selection" "get-sender" "tree" "let*" "evt")}
        {Lisp-Entry "browse-inheritance-tree" method #f 180 11 180 34 ("with-update-locked" "remove-every-row" "symbol->string" "key:" "category-descendants" "string<?" "sort" "subtype" "lambda" "for-each" "downward" "user-data:" "Image-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "and" "father" "class-ascendant" "ascendant" "category-identifier" "->string" "title" "expanded" "'expanded" "state" "let*" "type" "upward" "define" "classes" "'classes" "locate" "tree" "let" "Object" "root" "root:")}
        {Lisp-Entry "selected-categories" method #f 210 11 210 30 ("get-row" "get-user-data" "rank" "lambda" "map" "get-selection" "selection" "classes" "'classes" "locate" "tree" "let*")}}}})
"Class-Browser-Actions"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "tools" "Class-Browser-Actions.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.tools.Class-Browser-Actions" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "Class-Browser-Actions" class #f 43 7 43 28 ("Actions")}}})
"Documentation-Text-View"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "documentation" "Documentation-Text-View.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.documentation.Documentation-Text-View" module #f 37 18 37 72 ("jazz")
      {Lisp-Entry "Documentation-Text-View" class #f 46 7 46 30 ("Text" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "4" "left-padding:" "Formatted-Text-View")
        {Lisp-Entry "install" method #f 53 20 53 27 ("Variable" "Code" "Dark-Blue" "Hyperlink" "Reference" "Purple" "Comment" "Dark-Red" "Color" "color:" "Title" "Doc-Heading3" "Doc-Heading2" "Doc-Heading1" "Doc-Heading0" "Font" "font:" "Text-Style" "add-style" "Heading3" "Heading2" "Heading1" "Default" "base:" "Heading0" "name:" "Format" "add-format" "nextmethod" "rest")}
        {Lisp-Entry "get-context-menu" method #f 73 20 73 36 ("new-text-context-menu")}}}})
"Event-Spy"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "spy" "Event-Spy.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.spy.Event-Spy" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Event-Categories" constant #f 51 10 51 26 ("unknown" "menu" "focus" "clipboard" "keyboard" "mouse" "action" "paint" "window" "component" "Image-Resource" "general")}
      {Lisp-Entry "Event-Classes" constant #f 65 10 65 23 ("Selection-Event" "Print-Event" "Paint-Event" "mouse" "Mouse-Event" "Keyboard-Event" "Focus-Event" "focus" "Edition-Event" "paint" "Draw-Event" "window" "Cursor-Event" "Component-Event" "general" "Break-Event" "component" "Action-Event")}
      {Lisp-Entry "Event-Spy" class #f 85 7 85 16 ("213" "226" "toplevel-controls?:" "140" "width:" "title:" "tree" "tree-header" "content" "tree-scroller" "tree-border" "name:" "Spy-View")
        {Lisp-Entry "host-title" method #f 107 25 107 35 ()}
        {Lisp-Entry "host-position" method #f 111 25 111 38 ("152" "154" "Point")}
        {Lisp-Entry "host-size" method #f 115 25 115 34 ("339" "736" "Dimension")}
        {Lisp-Entry "spy-domain" method #f 124 20 124 30 ("views" "'views")}
        {Lisp-Entry "spy" method #f 128 20 128 23 ("self" "Spyer" "new" "set-event-consumer" "get-event-consumer" "old-consumer" "set!" "Event-Consumer" "is?" "when" "client")}
        {Lisp-Entry "unspy" method #f 134 20 134 25 ("old-consumer" "set-event-consumer" "Event-Consumer" "is?" "when" "client")}
        {Lisp-Entry "incoming-event" method #f 139 11 139 25 ("slowdown-quantum" "sleep" "slowdown?" "update-view" "ensure-at-end" "list" "children:" "add-row" "get-visible-count" "item" "5" "*" "make-string" "format" "c3" "c2" "get-kind" "Tree-Label" "c1" "image:" "title:" "Tree-Node" "new" "c0" "parameters" "Event-Categories" "assq" "cdr" "image" "get-tree" "tree" "all" "'all" "category" "eq?" "or" "when" "unknown" "'unknown" "second" "if" "cat" "car" "key:" "Event-Classes" "find-in" "info" "class-of" "category-identifier" "type" "let*" "evt" "client" "window" "level")}
        {Lisp-Entry "incoming-result" method #f 160 11 160 26 ("result" "item" "level")}}
      {Lisp-Entry "Spyer" class #f 169 7 169 12 ("0" "initialize" "Event-Consumer" "Object")
        {Lisp-Entry "level" slot #f 172 8 172 13 ()}
        {Lisp-Entry "spy-window" slot #f 173 8 173 18 ()}
        {Lisp-Entry "client" slot #f 174 8 174 14 ()}
        {Lisp-Entry "get-event-consumer" method #f 177 20 177 38 ()}
        {Lisp-Entry "set-event-consumer" method #f 178 20 178 38 ("consumer")}
        {Lisp-Entry "initialize" method #f 181 20 181 30 ("client" "spy-window" "set!" "nextmethod" "clt" "wnd")}
        {Lisp-Entry "deliver-event" method #f 187 20 187 33 ("decrease!" "increase!" "client" "level" "spy-window" "incoming-event" "evt" "proc" "target" "handler")}}}})
"Inspector"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "inspector" "Inspector.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.inspector.Inspector" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Inspector" class #f 49 7 49 16 ("title:" "name" "name:" ":images" "portfolio:" "row" "selection-mode:" "multiple-selection?:" "value" "filled-column:" "explicit" "initialize" "Tree-View")
        {Lisp-Entry "process" property #f 52 12 52 19 ()}
        {Lisp-Entry "get-process" accessor #f 52 44 52 52 ()}
        {Lisp-Entry "set-process" accessor #f 52 44 52 52 ()}
        {Lisp-Entry "client" property #f 53 12 53 18 ()}
        {Lisp-Entry "sort?" property #f 54 12 54 17 ()}
        {Lisp-Entry "get-sort?" accessor #f 54 44 54 52 ()}
        {Lisp-Entry "set-sort?" accessor #f 54 44 54 52 ()}
        {Lisp-Entry "get-client" method #f 68 18 68 28 ("client")}
        {Lisp-Entry "set-client" method #f 72 18 72 28 ("present-client" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update-row" method #f 83 20 83 30 ("process" "inspect-serial" "present" "lambda" "with-jrm-exception-handler" "get-user-data" "kind" "serial" "bind" "row")}
        {Lisp-Entry "present-client" method #f 95 11 95 25 ("inspect" "root-row" "present" "kind" "data" "bind" "when" "lambda" "with-update-locked" "remove-every-row" "client")}
        {Lisp-Entry "present" method #f 104 11 104 18 ("cons" "user-data:" "Tree-Label" "Image-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "collapsed" "'collapsed" "dynamic" "'dynamic" "if" "state" "let" "kind" "mutable?" "more?" "presentation" "serial" "name" "bind" "info" "for-each" "lambda" "with-update-locked" "values" "row")}
        {Lisp-Entry "inspect" method #f 121 26 121 33 ("process" "inspect-serial" "lambda" "with-jrm-exception-handler" "if" "mutable?" "more?" "presentation" "serial" "bind" ":remote" "inspect-value" ":value" "case" "kind" "data")}}}})
"Inspector-View"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "inspector" "Inspector-View.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.inspector.Inspector-View" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Inspector-View" class #f 45 7 45 21 ("261" "value" "170" "width:" "name" "row" "selection-mode:" "inspector" "content" "name:" "tool" "style:" "hscroll?:" "vscroll?:" "fill" "layout-type:" "explicit" "initialize" "Layout-View")
        {Lisp-Entry "process" property #f 48 12 48 19 ()}
        {Lisp-Entry "client" property #f 49 12 49 18 ()}
        {Lisp-Entry "host-title" method #f 68 25 68 35 ()}
        {Lisp-Entry "host-position" method #f 72 25 72 38 ("60" "378" "Point")}
        {Lisp-Entry "host-size" method #f 76 25 76 34 ("641" "446" "Dimension")}
        {Lisp-Entry "get-process" method #f 85 18 85 29 ("inspector" "'inspector" "locate" "get-process")}
        {Lisp-Entry "set-process" method #f 89 18 89 29 ("inspector" "'inspector" "locate" "set-process" "process")}
        {Lisp-Entry "get-client" method #f 93 18 93 28 ("inspector" "'inspector" "locate" "get-client")}
        {Lisp-Entry "set-client" method #f 97 18 97 28 ("inspector" "'inspector" "locate" "set-client" "update-title" "client")}
        {Lisp-Entry "Max-Title" definition #f 107 14 107 23 ("50")}
        {Lisp-Entry "update-title" method #f 111 11 111 23 ("0" "subseq" "set-title" "Max-Title" "cardinality" "<" "format" "title" "let" "mutable?" "more?" "presentation" "serial" ":remote" "eq?" "if" "kind" "data" "bind" "get-presentation" "define" "client")}}}})
"Jazz-Code-Location"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "text" "Jazz-Code-Location.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.text.Jazz-Code-Location" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Jazz-Code-Location" class #f 46 7 46 25 ("initialize" "Code-Location")
        {Lisp-Entry "unit-name" slot #f 49 8 49 17 ()}
        {Lisp-Entry "sublocation" slot #f 50 8 50 19 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("nextmethod" "last" "cons" "butlast" "sublocation" "unit-name" "set!" "begin" "find-unit-source" "compose-name" "apply" "name" "location:" "unknown" "'unknown" "kind:" "Location-Error" "new" "signal" "null?" "if" "cdr" "sub" "car" "split-identifier" "path" "iterate" "let" "setup-location" "define" "location")}
        {Lisp-Entry "print" method #f 71 20 71 25 ("format" "sublocation" "unit-name" "and" "when" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "edit" method #f 79 20 79 24 ("focus-host" "set-visible?" "bring-to-front" "head" "'head" "force-vertical:" "ensure-displayed" "ensure-displayed?:" "set-selection" "range" "text" "frame" "receive" "when" "find-location" "location" "let" "error?" "error?:" "activate-focus?" "activate-focus?:" "workspace" "workspace:")}
        {Lisp-Entry "find-source" method #f 92 18 92 29 ("unit-name" "find-unit-source")}
        {Lisp-Entry "find-location" method #f 96 18 96 31 ("values" "cons" "toplevel-location:" "sublocation" "location-range" "range" "is?" "get-guest" "text" "frame" "let" "location:" "unknown" "'unknown" "kind:" "Location-Error" "new" "signal" "when" "visible?:" "Jazz-Text-View" "class:" "edit-document" "or" "find-unit-source" "source" "get-application" "appl" "let*" "unit-name" "find-unit" "define" "error?" "error?:" "workspace" "workspace:")}}}})
"Jazz-Explorer"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "text" "Jazz-Explorer.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.text.Jazz-Explorer" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Jazz-Explorer" class #f 51 7 51 20 ("Scheme-Explorer")
        {Lisp-Entry "get-syntax" method #f 54 20 54 30 ("jazz" "'jazz")}
        {Lisp-Entry "expression-comment?" method #f 58 20 58 39 ("nextmethod" "get-range" "char=?" "or" "get-start" "get-char" "range" "get-first-char" "define" "mark")}
        {Lisp-Entry "forward-location" method #f 71 18 71 34 ("symbol?" ":form" ":new-form" "meta" "'meta" "unless" "bad" "'bad" "enter-composite" "1" "cdr" "forward" "eqv?" "char-forward" "c0" "forward-whites" "car" "ref" "not-null?" "scan" "else" "named-comment" "'named-comment" "eq?" "cond" "kind" "decrease!" "0" ">=" "n" "forward-numeric" "declaration-name" "neq?" "declaration-expr?" "name" "forward-declaration" "'form" "location:" "unknown" "'unknown" "kind:" "Location-Error" "new" "signal" "forward-valid-expr" "when" "form" "form-expr" "not" "forward-form" "get-start" "forward-new-form" "set-end" "set-start" "implements" "extends" "metaclass" "interface" "class" "module" "unit" "memq?" "expression-syntax-namespace?" "or" "find-marked-symbol" "set!" "begin" "forward-expr" "and" "while" "get-end" "previous" "keyword" "let" "forward-category-keywords" "define" "toplevel-location" "toplevel-location:" "location")}
        {Lisp-Entry "namespace-declaration-range" method #f 154 18 154 45 ("set-end" "set-start" "Range$Cell$" "new" "prog1" "forward-namespace" "end" "e" "start" "copy" "s" "let")}
        {Lisp-Entry "forward-namespace" method #f 163 18 163 35 ("forward-interface" "interface" "forward-class" "class" "forward-submodule" "submodule" "forward-module" "module" "forward-unit" "unit" "case" "intern-marked-symbol" "type" "let" "forward-expr" "enter-list" "start" "set-end" "include-invoices?" "include-invoices?:")}
        {Lisp-Entry "forward-unit" method #f 176 11 176 23 ("forward-invoices" "when" "forward-name" "expression-syntax-modifiers" "forward-modifiers" "unit" "'unit" "list" "include-invoices?")}
        {Lisp-Entry "forward-module" method #f 184 11 184 25 ("forward-invoices" "when" "forward-name" "expression-syntax-modifiers" "forward-modifiers" "module" "'module" "list" "include-invoices?")}
        {Lisp-Entry "forward-submodule" method #f 193 11 193 28 ("forward-name" "expression-syntax-modifiers" "forward-modifiers" "submodule" "'submodule" "list")}
        {Lisp-Entry "forward-class" method #f 199 11 199 24 ("expression-syntax-keywords" "forward-keywords" "forward-name" "expression-syntax-modifiers" "forward-modifiers" "class" "'class" "list")}
        {Lisp-Entry "forward-interface" method #f 206 11 206 28 ("expression-syntax-keywords" "forward-keywords" "forward-name" "expression-syntax-modifiers" "forward-modifiers" "interface" "'interface" "list")}
        {Lisp-Entry "forward-name" method #f 213 11 213 23 ("intern-marked-symbol" "forward-expr")}
        {Lisp-Entry "forward-keywords" method #f 218 11 218 27 ("list" "append" "read-marked" "value" "begin" "memq?" "intern-marked-symbol" "expr" "symbol" "'symbol" "kind" "eq?" "if" "forward-expr" "set-end" "done" "define" "result" "end" "copy" "finish" "iterate" "let" "keywords")}
        {Lisp-Entry "forward-invoices" method #f 237 11 237 27 ()}
        {Lisp-Entry "enter-import" method #f 246 11 246 23 ("import" "'import" "intern-marked-symbol" "expr" "symbol" "'symbol" "enter-list" "set-end" "e" "get-start" "s" "list" "'list" "kind" "eq?" "if" "get-end" "copy" "pos" "forward-expr" "when" "iterate" "let")}
        {Lisp-Entry "find-import-invoice" method #f 267 11 267 30 ("else" "string>?" "and" "values" "set-start" "exit-list" "string=?" "cond" "get-marked" "name" "enter-list" "start" "set-end" "begin" "forward-expr" "if" "get-end" "copy" "pos" "first?" "iterate" "symbol->string" "target" "let" "ordered-insert?" "unit")}
        {Lisp-Entry "insert-import-invoice" method #f 291 18 291 39 ("else" "tabulate" "insert-newline" "format" "insert-string" "cond" "get-end" "set-caret" "lambda" "text" "get-undoer" "with-atomic-undo" "unless" "find-import-invoice" "first?" "found?" "receive" "error" "enter-import" "not" "if" "forward-namespace" "unit")}
        {Lisp-Entry "remove-import-invoice" method #f 310 18 310 39 ("one" "'one" "keep:" "get-start" "remove-spaces" "get-range" "delete-range" "lambda" "text" "get-undoer" "with-atomic-undo" "when" "find-import-invoice" "first?" "found?" "receive" "error" "enter-import" "not" "if" "forward-namespace" "unit")}
        {Lisp-Entry "find-named-walker" method #f 328 20 328 37 ("nextmethod" "else" "walk-datacontainer" ":datacontainer" "walk-com-external" ":com-external" "walk-external" ":c-external" "walk-c-define" ":c-definition" "walk-c-structure" ":c-structure" "walk-c-type" ":c-type" "walk-c-include" ":c-include" "walk-c-named-declare" ":c-named-declare" "walk-c-enumeration" ":c-enumeration" "walk-c-constant" ":c-constant" "walk-enumeration" ":enumeration" "walk-constant" ":constant" "walk-global" ":global" "walk-form" ":form" "walk-property" ":property" "walk-slot" ":slot" "walk-method" ":method" "walk-submodule" ":submodule" "walk-remotable-stub" ":remotable-stub" "walk-interface" ":interface" "walk-class" ":class" "walk-specialize" ":specialize" "walk-definition" ":definition" "walk-native" ":native" "walk-attributes" ":attributes" "walk-properties" ":properties" "walk-proclaim" ":proclaim" "case" "name")}
        {Lisp-Entry "walk-proclaim" method #f 360 11 360 24 ("end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-properties" method #f 364 11 364 26 ("walk-expressions" "end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-attributes" method #f 369 11 369 26 ("exit-list" "walk-expressions" "initialize" "'initialize" "and" "setter" "'setter" "string-append" "getter" "'getter" "accessor" "'accessor" "find-marked-symbol" "symbol-documented?" "definition" "'definition" "get-marked" "marked" "'symbol" "kind" "eq?" "enter-list" "when" "iterate" "let" "forward-expr" "code" "'code" "walk-expression" "end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-definition" method #f 389 11 389 26 ("code" "'code" "walk-expressions" "exit-list" "walk-parameters" "enter-list" "else" "find-marked-symbol" "symbol-documented?" "get-marked" "definition" "'definition" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "not" "cond" "0" "char-forward" "eqv?" "list?" "forward-whites" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-specialize" method #f 408 11 408 26 ("code" "'code" "walk-expressions" "exit-list" "walk-parameters" "enter-list" "else" "set!" "cond" "list?" "symbol-documented?" "get-marked" "specialize" "'specialize" "as" "'as" "find-marked-symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "0" "char-forward" "eqv?" "not" "when" "forward-whites" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-class" method #f 433 11 433 21 ("class" "'class" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-interface" method #f 436 11 436 25 ("interface" "'interface" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-remotable-stub" method #f 439 11 439 30 ("remotable-stub" "'remotable-stub" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-submodule" method #f 442 11 442 25 ("submodule" "'submodule" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-method" method #f 446 18 446 29 ("code" "'code" "walk-expressions" "exit-list" "walk-parameters" "forward-whites" "find-marked-symbol" "symbol-documented?" "get-marked" "method" "'method" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-slot/property-accessors" method #f 460 11 460 39 ("code" "'code" "walk-expression" "else" "'setter" "'getter" "get-marked" "string=?" "when" "accessors" "initialize" "marked-symbol" "symbol" "'symbol" "kind" "eq?" "and" "unless" "forward-expr" "while" "find-marked-symbol" "symbol-documented?" "end" "start" "'accessor" "setter" "getter" "case" "string-append" "name" "let" "accessor" "declare-accessor" "define" "doc" "expression" "keyword" "declaration" "slot-name" "context")}
        {Lisp-Entry "walk-slot" method #f 489 11 489 20 ("walk-expressions" "walk-slot/property-accessors" "find-marked-symbol" "symbol-documented?" "slot" "'slot" "set!" "get-marked" "marked" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "forward-whites" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-property" method #f 502 11 502 24 ("walk-expressions" "walk-slot/property-accessors" "find-marked-symbol" "symbol-documented?" "property" "'property" "set!" "get-marked" "marked" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-form" method #f 514 11 514 20 ("walk-expressions" "end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-global" method #f 519 11 519 22 ("find-marked-symbol" "symbol-documented?" "get-marked" "global" "'global" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-constant" method #f 528 11 528 24 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "constant" "'constant" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-enumeration" method #f 538 11 538 27 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "enumeration" "'enumeration" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-constant" method #f 548 11 548 26 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "c-constant" "'c-constant" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-enumeration" method #f 558 11 558 29 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "c-enumeration" "'c-enumeration" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-named-declare" method #f 568 11 568 31 ("walk-expressions" "end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-include" method #f 573 11 573 25 ("walk-expressions" "end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-type" method #f 578 11 578 22 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "c-type" "'c-type" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-structure" method #f 588 11 588 27 ("walk-expressions" "exit-list" "find-marked-symbol" "symbol-documented?" "get-marked" "c-structure" "'c-structure" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-external" method #f 604 11 604 24 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "external" "'external" "'symbol" "kind" "eq?" "and" "enter-list" "entered?" "forward-expr" "when" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-com-external" method #f 620 11 620 28 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "com-external" "'com-external" "'symbol" "kind" "eq?" "and" "enter-list" "entered?" "forward-expr" "when" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-datacontainer" method #f 636 11 636 29 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "datacontainer" "'datacontainer" "forward-expr" "when" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}}}})
"Jazz-File"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "builder" "Jazz-File.jazz"} 1289506007
    {Lisp-Entry "jazz.editor.jazz.builder.Jazz-File" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Jazz-File" class #f 46 7 46 16 ("initialize" "Project-File")
        {Lisp-Entry "tester?" property #f 49 12 49 19 ()}
        {Lisp-Entry "get-tester?" accessor #f 49 44 49 52 ()}
        {Lisp-Entry "set-tester?" accessor #f 49 44 49 52 ()}
        {Lisp-Entry "print" method #f 52 20 52 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-product" method #f 66 18 66 29 ("project" "Product" "self" "is?" "if")}
        {Lisp-Entry "get-class-descriptor" method #f 79 25 79 45 ("Jazz-File-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 88 11 88 17 ()
        {Lisp-Entry "Jazz-File-Descriptor" class #f 94 7 94 27 ("domain" "name:" "tester?" "build?" "source" "categorized:" "can-rename?:" "title:" "Project-File-Descriptor")}}}})
"Jazz-Parser"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "parser" "Jazz-Parser.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.parser.Jazz-Parser" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Jazz-Parser" class #f 44 7 44 18 ("Lisp-Parser")
        {Lisp-Entry "explorer-class" method #f 47 20 47 34 ("Jazz-Explorer" "file")}
        {Lisp-Entry "text-view-class" method #f 51 20 51 35 ("Jazz-Text-View")}}}})
"Jazz-Plain-Text-View"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "text" "Jazz-Plain-Text-View.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.text.Jazz-Plain-Text-View" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Jazz-Plain-Text-View" class #f 44 7 44 27 ("Plain-Text-View")
        {Lisp-Entry "install" method #f 47 20 47 27 ("get-comment-style" "Comment" "'Comment" "get-title-style" "Title" "'Title" "add-style-preference" "default-style" "get-name" "default" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "colorize-comments" method #f 60 20 60 37 ("Title" "'Title" "4" "+" "Comment" "'Comment" "stylize" "not" "if" "title?" "end" "start" "lambda" "for-each-comment" "text-beginning" "end:" "self" "Jazz-Explorer" "new" "expl" "let" "jazz" "'jazz" "type-heuristic" "eq?" "when" "rest")}
        {Lisp-Entry "recolorize-text" method #f 71 20 71 35 ("for-each" "1" "get-line" "naturals" "range" "jazz" "'jazz" "type-heuristic" "eq?" "Title" "'Title" "Cell" "new" "Comment" "'Comment" "stylize" "begin" "title-comment-string" "subseq" "=" "<" "if" "4" "+" "title-end" "let" "20" "<=" "when" "search" "and" "comment" "syntax" "comment-string" "cardinality" "len" "paragraph-string" "str" "let*" "recolorize-comments" "line" "recolorize-row" "define" "end-line" "start")}}}})
"Jazz-Syntax"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "syntax" "Jazz-Syntax.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.syntax.Jazz-Syntax" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Jazz-Syntax" class #f 52 7 52 18 ("Lisp-Syntax")
        {Lisp-Entry "translate-key" method #f 60 20 60 33 ("translate-lisp-key" "jazz-text" "documents" "get-preferences" "get-translate-keys?" "not" "if" "key")}
        {Lisp-Entry "get-constituent-test" method #f 71 20 71 40 ("jazz-constituent?")}
        {Lisp-Entry "find-imports" method #f 80 20 80 32 ("throw-cancel" "cancel" "insert-import-invoice" "set-end" "text-beginning" "set-start" "jazz" "'jazz" "explorer-class" "expl" "no" "map" "join" "set-clipboard-text" "null?" "unless" "yes" "case" "cons" "set!" "public-access" "lookup-declaration" "public" "'public" "get-access" "eq?" "Module-Declaration" "is?" "and" "when" "outline-unit" "declaration" "iterate-units" "user-feedback" "unit-name" "outline-feedback" "parameterize" "default" "'default" "0" "=" "if" "sound:" "content:" "no:" "yes:" "confirmation" "'confirmation" "type:" "format-plural" "format-cardinality" "format" "message-box" "Image-Resource" "image:" "title:" "Tree-Node" "list" "children:" "add-row" "symbol->string" "title" "let" "import" "lambda" "for-each" "length" "count" "'tree" "locate" "tree" "150" "450" "Dimension" "size:" "Imports-Border" "new" "border" "let*" "imports" "present-imports" "define" "symbol" "text")}}
      {Lisp-Entry "Imports-Border" class #f 129 7 129 21 ("display-images?:" "toplevel-controls?:" "300" "width:" "title:" "row" "selection-mode:" ":images" "portfolio:" "tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "tool" "style:" "Outline-Border" "name:" "Color" "border-color:" "solid" "border-type:" "Border-View")}}})
"Jazz-Text-Actions"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "text" "Jazz-Text-Actions.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.text.Jazz-Text-Actions" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Jazz-Text-Actions" class #f 46 7 46 24 ("on-set-read/write" "set-read/write" "on-remove-break" "remove-break" "F9" "on-add-break" "add-break" "F12" ":shift" "on-edit-documentation" "edit-documentation" "F1" "on-present-documentation" "present-documentation" ":control" "Shortcut" "shortcut:" "on-design-form" ":focus" "Event-Handler" "action-handler:" "design-form" "name:" "Actions")}}})
"Jazz-Text-Preferences"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "text" "Jazz-Text-Preferences.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.text.Jazz-Text-Preferences" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Jazz-Text-Preferences" class #f 49 7 49 28 ("completions:" "Dark-Orange" "feature-style:" "quotation-style:" "named-string-style:" "delimited-string-style:" "string-style:" "boolean-style:" "number-style:" "char-style:" "Ochre" "literal-style:" "specifier-style:" "Dark-Purple" "tag-style:" "keyword-style:" "undocumented-declaration-style:" "Dark-Green" "documented-declaration-style:" "Dark-Blue" "declaration-keyword-style:" "named-comment-style:" "Text-Gray" "expr-comment-style:" "Purple" "comment-style:" "Dark-Red" "color:" "Text-Style-Preference" "title-style:" "title:" "initialize" "Lisp-Text-Preferences")
        {Lisp-Entry "named-comment-style" property #f 52 12 52 31 ()}
        {Lisp-Entry "get-named-comment-style" accessor #f 52 67 52 75 ()}
        {Lisp-Entry "set-named-comment-style" accessor #f 52 67 52 75 ()}
        {Lisp-Entry "documented-declaration-style" property #f 53 12 53 40 ()}
        {Lisp-Entry "get-documented-declaration-style" accessor #f 53 67 53 75 ()}
        {Lisp-Entry "set-documented-declaration-style" accessor #f 53 67 53 75 ()}
        {Lisp-Entry "undocumented-declaration-style" property #f 54 12 54 42 ()}
        {Lisp-Entry "get-undocumented-declaration-style" accessor #f 54 67 54 75 ()}
        {Lisp-Entry "set-undocumented-declaration-style" accessor #f 54 67 54 75 ()}
        {Lisp-Entry "literal-style" property #f 55 12 55 25 ()}
        {Lisp-Entry "get-literal-style" accessor #f 55 67 55 75 ()}
        {Lisp-Entry "set-literal-style" accessor #f 55 67 55 75 ()}
        {Lisp-Entry "get-class-descriptor" method #f 242 25 242 45 ("Jazz-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 251 11 251 17 ()
        {Lisp-Entry "Jazz-Text-Preferences-Descriptor" class #f 257 7 257 39 ("literal-style" "name:" "match-action" "translate-keys?" "string-style" "specifier-style" "keyword-style" "undocumented-declaration-style" "documented-declaration-style" "named-comment-style" "expr-comment-style" "comment-style" "title-style" "completions" "categorized:" "Document-Preferences-Descriptor")}}}})
"Jazz-Text-View"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "text" "Jazz-Text-View.jazz"} 1290098327
    {Lisp-Entry "jazz.editor.jazz.text.Jazz-Text-View" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Jazz-Text-View" class #f 58 7 58 21 ("tooltip?:" "Lisp-Text-View")
        {Lisp-Entry "install" method #f 65 20 65 27 ("highlight:" "Break" "'Break" "Red" "Walk-Fatal" "'Walk-Fatal" "Orange" "Walk-Warning" "'Walk-Warning" "Color" "frame:" "base:" "Reference" "'Reference" "name:" "Text-Style" "new" "add-style" "get-feature-style" "Feature" "'Feature" "get-literal-style" "Literal" "'Literal" "get-quotation-style" "Quotation" "'Quotation" "get-named-string-style" "Named-String" "'Named-String" "get-delimited-string-style" "Delimited-String" "'Delimited-String" "get-string-style" "String" "'String" "get-boolean-style" "Boolean" "'Boolean" "get-number-style" "Number" "'Number" "get-char-style" "Char" "'Char" "get-specifier-style" "Specifier" "'Specifier" "get-tag-style" "Tag" "'Tag" "get-keyword-style" "Keyword" "'Keyword" "get-undocumented-declaration-style" "Undocumented-Declaration" "'Undocumented-Declaration" "get-documented-declaration-style" "Documented-Declaration" "'Documented-Declaration" "get-declaration-keyword-style" "Declaration-Keyword" "'Declaration-Keyword" "get-named-comment-style" "Named-Comment" "'Named-Comment" "get-expr-comment-style" "Expr-Comment" "'Expr-Comment" "get-comment-style" "Comment" "'Comment" "get-title-style" "Title" "'Title" "add-style-preference" "default-style" "get-name" "default" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" method #f 94 25 94 38 ("jazz-text" "'jazz-text" "rest")}
        {Lisp-Entry "default-extension" method #f 98 20 98 37 ()}
        {Lisp-Entry "extensions" method #f 102 20 102 30 ()}
        {Lisp-Entry "new-syntax" method #f 106 20 106 30 ("Jazz-Syntax" "new")}
        {Lisp-Entry "focus-actions" method #f 115 20 115 33 ("nextmethod" "jazz-text" "'jazz-text" "find-actions" "cons")}
        {Lisp-Entry "get-context-menu" method #f 125 20 125 36 ("layout-menu" "set-read/write" "'set-read/write" "locate" "set-visible?" "read/write?" "not" "or" "when" "get-moniker" "moniker" "get-controller" "controller" "Jazz-Text-Menu" "new" "menu" "let*")}
        {Lisp-Entry "on-design-form" method #f 141 11 141 25 ("client:" "new-frame" "Manager-View" "View-Editor" "View" "editor-class" "new" "component" "focus-host" "get-class-form" "error" "Component" "subtype?" "not" "if" "autoload" "class" "current-category-name" "name" "let*" "on-design-form" "'on-design-form" "unimplemented" "include-invisibles?:" "all-frames" "continuation-return" "get-form" "eq?" "and" "get-designer" "designer" "Component-Editor" "get-guest" "guest" "let" "Host-View" "is?" "when" "frame" "for-each" "return" "lambda" "continuation-capture" "form" "find-editor" "define" "evt")}
        {Lisp-Entry "on-copy-list" method #f 170 11 170 23 ("length" "user-message" "push-clipboard-list" "get-selected-string" "read-string-content" ":reader" "->string" "object" "lambda" "map" "list" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "get-tooltip-context" method #f 182 20 182 39 ("Label" "name:" "Font" "font:" "bounds:" "rect-height" "-10" "Point" "rect-position" "+" "position:" "text:" "view:" "Tooltip-Context" "in-rect?" "get-end" "get-col" "get-start" "get-line" "line-range-rect" "bounds" "present-location" "and" "text" "range-location" "location" "get-range" "range" "symbol" "'symbol" "eq?" "get-kind" "kind" "let" "explore-whitespace?:" "atomic?:" "outer-expr" "when" "err" "Explore-Error" "catch" "end:" "start:" "self" "Jazz-Explorer" "new" "expl" "view->text" "pos" "let*" "view")}
        {Lisp-Entry "default-preferences" definition #f 210 14 210 33 ("completions:" "Dark-Blue" "keyword-style:" "Dark-Green" "undocumented-declaration-style:" "documented-declaration-style:" "named-comment-style:" "Text-Gray" "expr-comment-style:" "Purple" "comment-style:" "Dark-Red" "color:" "Text-Style-Preference" "title-style:" "instantiate")}
        {Lisp-Entry "preferences" method #f 224 20 224 31 ("jazz-text" "documents" "get-preferences")}
        {Lisp-Entry "declaration-style" method #f 228 20 228 37 ("Undocumented-Declaration" "'Undocumented-Declaration" "Documented-Declaration" "'Documented-Declaration" "if" "documented?")}
        {Lisp-Entry "colorize-tag" method #f 234 20 234 32 ("Tag" "'Tag" "apply-coloring" "end" "start" "colorizer")}
        {Lisp-Entry "colorize-specifier" method #f 238 20 238 38 ("Specifier" "'Specifier" "apply-coloring" "end" "start" "colorizer")}
        {Lisp-Entry "recolorize-named-comments" method #f 242 11 242 36 ("get-start" "Named-Comment" "'Named-Comment" "apply-style" "get-line" "=" "symbol" "'symbol" "eq?" "when" "get-end" "end" "forward-expr" "kind" "end:" "self" "explorer-class" "expl" "+" "Cell" "new" "pos" "1" "-" "element" "eqv?" ">" "and" "unless" "set!" "if" "start:" "search" "comment" "let" "not" "while" "done?" "0" "col" "cardinality" "len" "paragraph-string" "str" "let*" "line")}
        {Lisp-Entry "get-readtable" method #f 266 20 266 33 ("jazz-readtable")}
        {Lisp-Entry "prepare-expressions" method #f 275 20 275 39 ("jazz" "'jazz" "list" "str" "receive" "get-locat-container" "container" "get-output-string" "values" "length" "string" "split" "cardinality" "newline" "not" "cdr" "null?" "last?" "pair" "for-each-pair" "get-string" "lambda" "for-each" "0" "1" "+" "-" "make-string" "display" "begin" "=" "iterate" "c" "l" "rng" "fill" "open-output-string" "output" "col" "line" "get-col" "first-col" "get-start" "get-line" "first-line" "car" "not-null?" "if" "first" "expressions" "package-expressions" "cons" "set!" "namespace-declaration-range" "namespace" "namespace-expr?" "when" "outer-expr" "while" "range:" "self" "Jazz-Explorer" "new" "expl" "namespaces" "let" "collect-namespaces" "define" "range")}
        {Lisp-Entry "on-add-break" method #f 337 19 337 31 ("1" "+" "get-start" "Break" "'Break" "apply-style" "add-break" "error" "not" "if" "Interpreter" "resolve-location" "object" "toplevel-closure" "in-context?" "resolved?" "receive" "range-location" "loc" "current-expr-range" "range" "let*" "evt")}
        {Lisp-Entry "on-remove-break" method #f 348 19 348 34 ("get-line" "get-paragraph" "invalidate-paragraph" "default-style" "set-style" "when" "1" "get-start" "+" "get-run-at" "run" "let" "remove-break" "bell" "not" "if" "Interpreter" "resolve-location" "object" "toplevel-closure" "in-context?" "resolved?" "receive" "range-location" "loc" "current-expr-range" "range" "let*" "evt")}
        {Lisp-Entry "present-location" definition #f 368 15 368 31 ("location")}
        {Lisp-Entry "current-location" method #f 377 11 377 27 ("get-start" "position->location")}
        {Lisp-Entry "position->location" method #f 381 11 381 29 ("range-location" "get-range" "range" "outer-composite?:" "outer-expr" "when" "end:" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "location-class" method #f 388 11 388 25 ("cdr" "class-of" "category-field" "definition-value" "set!" "meta" "'meta" "eq?" "name" "lambda" "for-each" "meta?" "let" "error" "not" "if" "global-ref" "class" "car" "class-name" "let*" "load?" "load?:" "loc")}
        {Lisp-Entry "declaration-name-info" method #f 404 11 404 32 ("else" "2" "external?" "procedure?" "definition-value" "value" "let" "field?" "field-modifiers-count" "+" "slot?" "1" "values" "category?" "cond" "declaration-name-info" "'declaration-name-info" "unimplemented" "object")}
        {Lisp-Entry "declaration-name-location?" method #f 420 11 420 37 ("0" "and" "list" "=" "or" "inside-allowed?" "skip" "receive" "when" "declaration-name-info" "info" "let" "internal-location" "object")}
        {Lisp-Entry "range-location" method #f 428 11 428 25 ("meta" "'meta" "memq?" "cons" "loc" "declaration-modifiers/name" "name" "modifiers" "receive" "declaration-expr?" "def?" "set!" "if" "outer-expr" "rank" "not" "while" "done?" "previous-def?" "location" "get-end" "end:" "get-start" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "range")}
        {Lisp-Entry "location-range" method #f 449 18 449 32 ("get-range" "forward-location" "text-beginning" "end:" "self" "Jazz-Explorer" "new" "expl" "let" "toplevel-location" "toplevel-location:" "location")}
        {Lisp-Entry "on-edit-documentation" method #f 460 11 460 32 ("edit-documentation" "get-application" "appl" "bell" "not" "if" "current-symbol" "symbol" "let" "evt")}
        {Lisp-Entry "on-present-documentation" method #f 468 11 468 35 ("current-symbol" "present-documentation" "evt")}
        {Lisp-Entry "present-documentation" method #f 472 11 472 32 ("border:" "alternate-position:" "popup" "DocToText-Transformation" "parse-jml" "transform-jml" "set-text" "get-display" "display" "solid" "'solid" "border-type:" "Border-View" "border" "alternate" "100" "Point" "pos" "'text" "locate" "text" "300" "600" "Dimension" "size:" "Documentation-View" "new" "view" "let*" "bell" "not" "if" "jml" "present-text" "get-application" "get-documentation" "doc" "let" "when" "doc-jml" "define" "symbol")}
        {Lisp-Entry "show-arguments" method #f 502 20 502 34 ("0" "char-backward" "case" "'symbol" "get-kind" "=" "backward-expr" "and" "get-end" "end:" "get-start" "start:" "self" "Jazz-Explorer" "new" "empty-selection?" "cdr" "car" "pair?" "cond" "else" "variable-symbol" "format" "Variable" "parameter" "present-parameter" "get-output-string" "present-parameters" "'rest" "rest" "open-output-string" "printer" "function-parameters" "parameters" "let*" "function" "proxy-result" "proxy-rest?" "if" "List" "get-type" "proxy-parameters" "accumulate" "category-identifier" "map" "user-message" "external" "Interpreter" "closure-function" "Closure" "show-function-arguments" "%function" "show-external-arguments" "External" "typecase" "definition-value" "value" "find-in" "field" "'show-symbol-arguments" "unimplemented" "packages" "class" "show-symbol-arguments" "uses" "'uses" "getf" "imports" "find-symbol" "symbol" "keywords" "meta?" "kind" "category" "bind" "category-info" "in" "receive" "when" "current-toplevel-info" "info" "get-marked" "name" "let" "expl" "show-declaration-arguments" "define")}
        {Lisp-Entry "explorer-class" method #f 577 20 577 34 ("Jazz-Explorer")}
        {Lisp-Entry "current-category-name" method #f 586 11 586 32 ("keywords" "name" "meta?" "kind" "category" "bind" "current-toplevel-info" "category-info" "in" "receive")}
        {Lisp-Entry "toplevel-expr" method #f 593 11 593 24 ("get-range" "set!" "outer-expr" "while" "range" "end:" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "edit-symbol-class" method #f 606 20 606 37 ("get-application" "edit-class" "in-manifest?" "when" "symbol")}}
      {Lisp-Entry "Documentation-View" class #f 618 7 618 25 ("editable?:" "Tooltip" "Color" "background:" "text" "content" "name:" "tool" "style:" "vscroll?:" "hscroll?:" "fill" "layout-type:" "Layout-View")}
      {Lisp-Entry "Jazz-Text-Menu" class #f 633 7 633 21 ("paste" "copy" "view" "french:" "english:" "Locales" "cut" "set-read/write" "remove-break" "add-break" "edit-documentation" "edit-references" "edit-definitions" "jazz-text" "design-form" "code-text" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "evaluate" "name:" "Context-Menu")}}})
"Location-Error"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "text" "Location-Error.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.text.Location-Error" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Location-Error" class #f 43 7 43 21 ("Error")
        {Lisp-Entry "kind" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-kind" accessor #f 46 24 46 32 ()}
        {Lisp-Entry "location" slot #f 47 8 47 16 ()}
        {Lisp-Entry "get-location" accessor #f 47 24 47 32 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("location~self" "kind~self" "set!" "nextmethod" "apply" "others" "location" "bad" "'bad" "kind" "bind-keywords" "rest")}
        {Lisp-Entry "get-message" method #f 62 20 62 31 ("unknown" "location" "format" "bad" "kind" "case")}}}})
"Logs-Viewer"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "log" "Logs-Viewer.jazz"} 1289506007
    {Lisp-Entry "jazz.editor.jazz.log.Logs-Viewer" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Logs-Viewer" class #f 53 7 53 18 ("data-container" "log-tree" "header" "scroller" "log-view" "second" "log-border" "200" "width:" "toplevel-controls?:" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "log" "filled-column:" "logs-tree" "fill" "content" "vscroll?:" "document" "entry" "style:" "edge" "border-type:" "logs-border" "20" "horz" "first" "horizontal" "50" "division:" "relative" "mode:" "vert" "orientation:" "center" "vertical" "on-refresh" "refresh" "on-clear" "clear" "10" "on-open" "tail" "open" "on-refresh-logs" "refresh-logs" "on-directory-logs" "directory-logs" "on-memory-logs" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "memory-logs" "0" "6" "flow" "north" "location:" "33" "300" "Dimension" "size:" "tools" "name:" "2" "Rect" "layout-insets:" "border" "layout-type:" "title:" "initialize" "Layout-View")
        {Lisp-Entry "logs-directory" slot #f 56 8 56 22 ()}
        {Lisp-Entry "data-viewer" slot #f 57 8 57 19 ()}
        {Lisp-Entry "finish" method #f 93 20 93 26 ("refresh-logs" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" method #f 103 25 103 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 107 25 107 35 ()}
        {Lisp-Entry "host-position" method #f 111 25 111 38 ("50" "Point")}
        {Lisp-Entry "host-size" method #f 115 25 115 34 ("500" "850" "Dimension")}
        {Lisp-Entry "client-activate" method #f 119 20 119 35 ("perserving-refresh-logs")}
        {Lisp-Entry "get-tree" method #f 128 11 128 19 ("logs-tree" "'logs-tree" "locate")}
        {Lisp-Entry "Logs-Directory" definition #f 137 14 137 28 ("Build" "Directory")}
        {Lisp-Entry "with-directory" definition #f 141 15 141 29 ("lambda" "with-preserved-current-directory" "Logs-Directory" "exists?" "and" "if" "proc" "default?")}
        {Lisp-Entry "on-memory-logs" method #f 149 11 149 25 ("refresh-logs" "logs-directory" "set!" "evt")}
        {Lisp-Entry "on-directory-logs" method #f 154 11 154 28 ("refresh-logs" "logs-directory" "set!" "directory:" "choose-directory" "directory" "let" "dir" "lambda" "get-shift?" "with-directory" "evt")}
        {Lisp-Entry "on-refresh-logs" method #f 162 11 162 26 ("refresh-logs" "evt")}
        {Lisp-Entry "perserving-refresh-logs" method #f 166 11 166 34 ("generate-event?:" "data" "'data" "use:" "refresh-logs" "lambda" "with-preserved-selection" "get-tree" "tree" "let")}
        {Lisp-Entry "refresh-logs" method #f 175 18 175 30 ("view-logs" "log-view" "'log-view" "locate" "view-log" "close-data-viewer")}
        {Lisp-Entry "on-open" method #f 181 11 181 18 ("view-log" "set-selection" "'log-view" "locate" "log-view" "load?:" "file:" "Log" "new" "log" "directory:" "extensions:" "choose-file" "file" "get-tree" "tree" "let*" "dir" "lambda" "get-shift?" "with-directory" "evt")}
        {Lisp-Entry "on-clear" method #f 192 11 192 19 ("on-refresh" "evt")}
        {Lisp-Entry "on-refresh" method #f 196 19 196 29 ("update" "'log-view" "locate" "log-view" "let" "evt")}
        {Lisp-Entry "on-selection-change" method #f 201 11 201 30 ("view-data" "node" "log-tree" "view-log" "reload" "get-file" "when" "close-data-viewer" "get-row" "get-user-data" "and" "log" "'log-view" "locate" "log-view" "get-single-selection" "selection" "logs-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-double-click" method #f 219 11 219 26 ("edit-data" "get-row" "get-user-data" "node" "when" "get-single-selection" "selection" "log-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" method #f 229 20 229 35 ("on-double-click" "evt")}
        {Lisp-Entry "view-logs" method #f 238 11 238 20 ("ci=?" "when" "get-extension" "extension" "iterate-directory" "get-logs" "for-each" "logs-directory" "not" "lambda" "with-update-locked" "remove-every-row" "get-tree" "file:" "Log" "get-base" "file" "insert-file" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "Image-Resource" "get-file" "if" "image" "get-name" "->string" "name" "let" "log" "tree" "insert-log" "define")}
        {Lisp-Entry "view-data" method #f 268 29 268 38 ("layout-view" "parent:" "client:" "new" "data-viewer" "set!" "data-container" "'data-container" "locate" "container" "class" "'data" "get-property" "let*" "JML-Node" "when" "close-data-viewer" "No-Data-Viewer" "get-viewer-class" "or" "Viewable" "is?" "and" "if" "data" "data-viewer-class" "define" "node")}
        {Lisp-Entry "close-data-viewer" method #f 286 11 286 28 ("set!" "close" "data-viewer" "when")}
        {Lisp-Entry "edit-data" method #f 297 29 297 38 ("node")}}
      {Lisp-Entry "No-Data-Viewer" class #f 306 7 306 21 ("entry" "style:" "edge" "border-type:" "Border-View")
        {Lisp-Entry "client" property #f 309 12 309 18 ()}
        {Lisp-Entry "get-client" accessor #f 309 29 309 37 ()}
        {Lisp-Entry "set-client" accessor #f 309 29 309 37 ()}
        {Lisp-Entry "draw" method #f 316 20 316 24 ("nextmethod" "get-v" "get-h" "draw-text" "Dark-Gray" "Color" "set-text-color" "get-display-size" "center" "pos" "get-text-extent" "extent" "localize" "title" "let*" "set-font" "draw-no-data" "Heading1" "name:" "Font" "Background-Font" "define" "lv" "lh" "context" "surface")}}}})
"Profile-Results"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "profiler" "Profile-Results.jazz"} 1289844289
    {Lisp-Entry "jazz.editor.jazz.profiler.Profile-Results" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Profile-Results" class #f 53 7 53 22 ("on-return-press" "return-press-handler:" "on-select-location" "Selection-Handler" "selection-handler:" "calls" "vscroll?:" "hscroll?:" "document" "style:" "on-change-depth" "depth" "30" "40" "12" "on-change-profiler" "content-change-handler:" "profiler" "Dark" "border-color:" "2" "Rect" "layout-insets:" "fill" "85" "31" "title:" "on-view-profile" "mouse-down-handler:" "width" "auto-size?:" "23" "250" "profile" "on-choose-profile" ":form" "view" "flow" "north" "100" "Medium" "Color" "background:" "center" "on-reset-profile" "reset" "4" "on-refresh-profile" "refresh" "6" "on-stop-profiler" "stop" "on-start-profiler" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "start" "tools" "name:" "0" "1" "Point" "position:" "border" "layout-type:" "400" "600" "Dimension" "size:" "initialize" "Layout-View")
        {Lisp-Entry "profile" slot #f 56 8 56 15 ()}
        {Lisp-Entry "finish" method #f 89 20 89 26 ("2" "->string" "list" "collect" "8" "to" "0" "from" "d" "for" "loop" "depth" "'depth" "'statprof" "set-value" "detprof" "statprof" "profiler" "'profiler" "locate" "set-choices" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" method #f 106 25 106 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 110 25 110 35 ()}
        {Lisp-Entry "host-position" method #f 114 25 114 38 ("14" "28" "Point")}
        {Lisp-Entry "host-size" method #f 118 25 118 34 ("608" "408" "Dimension")}
        {Lisp-Entry "get-tools-view" method #f 127 20 127 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 131 20 131 33 ("get-tree" "acquire-focus")}
        {Lisp-Entry "get-tree" method #f 140 11 140 19 ("calls" "'calls" "locate")}
        {Lisp-Entry "on-start-profiler" method #f 149 11 149 28 ("profile" "get-debugger-manager" "require-focused-process" "profiler-start" "user-feedback" "evt")}
        {Lisp-Entry "on-stop-profiler" method #f 154 11 154 27 ("user-message" "view-profile" "profile" "get-debugger-manager" "require-focused-process" "profiler-stop" "evt")}
        {Lisp-Entry "on-choose-profile" method #f 160 11 160 28 ("view-profile" "selected:" "present:" "invite:" "title:" "key:" "string<?" "sort" "request-list" "set!" "get-debugger-manager" "require-focused-process" "profiler-profiles" "profiles" "let" "or" "profile" "present-profile" "define" "evt")}
        {Lisp-Entry "on-change-profiler" method #f 169 11 169 29 ("get-sender" "get-value" "reset-profile" "evt")}
        {Lisp-Entry "on-change-depth" method #f 173 11 173 26 ("get-sender" "get-value" "reset-profile" "evt")}
        {Lisp-Entry "on-reset-profile" method #f 177 11 177 27 ("reset-profile" "evt")}
        {Lisp-Entry "reset-profile" method #f 181 11 181 24 ("view-profile" "profile" "get-debugger-manager" "require-focused-process" "profile-reset" "depth" "profiler")}
        {Lisp-Entry "track-history" definition #f 186 22 186 35 ("initiator" "sender")}
        {Lisp-Entry "on-refresh-profile" method #f 190 11 190 29 ("view-profile" "evt")}
        {Lisp-Entry "on-select-location" method #f 194 11 194 29 ("edit-source" "evt")}
        {Lisp-Entry "*frame-indicator*" definition #f 203 14 203 31 ("94" "blue:" "146" "green:" "255" "red:" "Color" "color:" "Frame-Indicator" "new")}
        {Lisp-Entry "edit-source" method #f 207 11 207 22 ("selected-location" "*frame-indicator*" "edit")}
        {Lisp-Entry "selected-frame" method #f 216 11 216 25 ("get-row" "get-user-data" "not" "if" "get-single-selection" "rank" "get-tree" "tree" "let")}
        {Lisp-Entry "selected-location" method #f 224 11 224 28 ("second" "not" "if" "selected-frame" "frame" "let")}
        {Lisp-Entry "view-profile" method #f 236 11 236 23 ("cddr" "key:" ">" "sort" "father:" "row" "frames" "head-frame" "user-data:" "children:" "add-row" "null?" "stack" "call" "for-each" "lambda" "with-update-locked" "remove-every-row" "'depth" "'profiler" "set-value" "'profile" "locate" "set-title" "present-identifier" "car" "and" "name" "string?" "Tree-Label" "Image-Resource" "image:" "title:" "Tree-Node" "new" "list" "percentage" "time" "->string" "present-frame" "procedure" "count" "frame" "make-children" "seconds->microseconds" "duration" "calculate-time" "seconds->milliseconds" "format-plural" "format" "0" "=" "if" "present-profile" "define" "/" "seconds" "calls" "unknown-duration" "unknown-count" "total-duration" "total-count" "frame-duration" "frame-count" "frequency" "depth" "profiler" "label" "bind" "when" "get-tree" "tree" "get-debugger-manager" "require-focused-process" "profiler-profile" "profile" "let")}}
      {Lisp-Entry "Calls-Tree" class #f 294 7 294 17 ("percentage" "75" "duration" "50" "count" "250" "width:" "title:" "name:" "procedure" "filled-column:" ":images" "portfolio:" "Tree-View")}}})
"References-Analyser"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "tools" "References-Analyser.jazz"} 1290096133
    {Lisp-Entry "jazz.editor.jazz.tools.References-Analyser" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "References-Analyser" class #f 50 7 50 26 ("419" "200" "width:" "display-images?:" "on-double-click" "double-click-handler:" ":images" "portfolio:" "multiple-selection?:" "info" "filled-column:" "declarations" "document" "562" "391" "35" "declarations-border" "on-find-dead-code" "action-handler:" "22" "120" "7" "272" "title:" "browse" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "left-padding:" "name" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "entry" "style:" "edge" "border-type:" "19" "250" "9" "2" "Point" "position:" "name-border" "name:" "599" "395" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "text" property #f 53 12 53 16 ()}
        {Lisp-Entry "external-name" method #f 73 25 73 38 ("references-analyser" "'references-analyser" "rest")}
        {Lisp-Entry "host-icon" method #f 82 25 82 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 86 25 86 35 ()}
        {Lisp-Entry "host-position" method #f 90 25 90 38 ("20" "90" "Point")}
        {Lisp-Entry "host-size" method #f 94 25 94 34 ("600" "395" "Dimension")}
        {Lisp-Entry "focus-default" method #f 98 20 98 33 ("name" "'name" "locate" "acquire-focus")}
        {Lisp-Entry "get-text" method #f 107 18 107 26 ("name" "'name" "locate" "get-string-content")}
        {Lisp-Entry "set-text" method #f 111 18 111 26 ("or" "name" "'name" "locate" "set-string-content" "value")}
        {Lisp-Entry "resize" method #f 120 20 120 26 ("declarations-border" "'declarations-border" "size-figure" "0" "browse" "'browse" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-find-dead-code" method #f 126 11 126 28 ("find-dead-code" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-return-press" method #f 132 20 132 35 ("on-find-dead-code" "evt")}
        {Lisp-Entry "on-double-click" method #f 136 11 136 26 ("category-name" "edit-definitions" "get-application" "appl" "get-user-data" "type" "get-row" "row" "when" "get-single-selection" "selection" "get-sender" "tree" "let*" "evt")}
        {Lisp-Entry "find-dead-code" method #f 151 11 151 25 ("get-row-count" "user-feedback" "get-children" "queue-list" "user-data:" "Tree-Label" "title:" "Tree-Node" "new" "list" "children:" "add-row" "info" "get-name" "symbol->string" "Category-Declaration" "for-each" "Module-Declaration" "jazz.get-catalog-entry" "unit-name" "iterate-units" "table-set!" "decl" "name" "set!" "set-hits" "eq?" "test:" "make-table" "table" "not" "when" "declaration-hits" "get-hits" "hits" "resolve-binding" "get-autoload-reference" "autoload-reference" "data" "locator" "analysis-data" "iterate-table" "analyse-all" "lambda" "with-update-locked" "remove-every-row" "declarations" "'declarations" "locate" "tree" "let" "category-name" "get-core-classes" "table-ref" "Class-Declaration" "is?" "and" "declaration" "exception-declaration?" "define")}
        {Lisp-Entry "analyse-all" definition #f 192 14 192 25 ("set!" "walk-all" "analysis-mode?" "parameterize" "unless" "lambda" "done?" "let")}
        {Lisp-Entry "selected-declarations" method #f 206 11 206 32 ("get-row" "get-user-data" "rank" "lambda" "map" "get-selection" "selection" "declarations" "'declarations" "locate" "tree" "let*")}}}})
"Registry-Viewer"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "registry" "Registry-Viewer.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.registry.Registry-Viewer" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Registry-Viewer" class #f 44 7 44 22 ("Layout-View")}
      {Lisp-Entry "Registry-Viewer" class #f 50 7 50 22 ("419" "width:" ":images" "portfolio:" "on-selection-change" "selection-handler:" "registry" "fill" "content" "vscroll?:" "hscroll?:" "document" "entry" "style:" "edge" "border-type:" "center" "registry-border" "on-view-type-libs" ":form" "Event-Handler" "action-handler:" "selected?:" "22" "70" "title:" "type-libs" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "border" "layout-type:" "639" "436" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "conclude" method #f 66 11 66 19 ("view-type-libs" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" method #f 76 16 76 25 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 80 16 80 26 ()}
        {Lisp-Entry "host-position" method #f 84 16 84 29 ("14" "28" "Point")}
        {Lisp-Entry "host-size" method #f 88 16 88 25 ("635" "416" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 92 11 92 26 ("home")}
        {Lisp-Entry "on-view-type-libs" method #f 101 11 101 28 ("view-type-libs" "evt")}
        {Lisp-Entry "view-type-libs" method #f 105 11 105 25 ("second" "key:" "get-output" "<" "sort" "user-data:" "Image-Resource" "image:" "title:" "Tree-Node" "list" "children:" "add-row" "empty-string?" "not" "pathname" "language-id" "minor-version" "major-version" "desc" "bind" "with-update-locked" "cons" "put" "when" "get-information" "info" "let" "guid-name" "lambda" "for-each" "List-Factory" "new" "informations" "gather" "guid-names" "iterate-subkeys" "all" "registry" "'registry" "locate" "tree" "let*" "user-message" "Registry" "open-type-lib" "type-lib" "with")}
        {Lisp-Entry "on-selection-change" method #f 128 11 128 30 ("focus-host" "view-file" "get-guest" "view-registered-typelib" "cardinality" "-" "1" "subseq" "GUID" "new" "guid" "Type-Viewer" "singleton" "frame" "pathname" "language-id" "minor-version" "major-version" "desc" "guid-name" "bind" "get-row" "get-user-data" "info" "let" "when" "get-single-selection" "selection" "get-sender" "sender" "let*" "evt")}}}})
"Spy-View"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "spy" "Spy-View.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.spy.Spy-View" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Spy-View" class #f 45 7 45 15 ("row" "selection-mode:" "tree" "tree-header" "fill" "layout-type:" "content" "vscroll?:" "tree-scroller" "edge" "border-type:" "306" "33" "0" "tree-border" "on-on/off" "710" "on/off" "on-slowdown" "686" "slowdown" "on-clear" ":form" "605" "clear" "on-spy-family" "180" "spy-family" "on-spy" "156" "spy" "76" "keyboard" "52" "mouse" "28" "paint" "selected?:" ":images" "portfolio:" "on-category" "parent:" "Event-Handler" "action-handler:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "6" "4" "Point" "position:" "name:" "east" "location:" "339" "736" "Dimension" "size:" "all" "'all" "1000" "explicit" "initialize" "View")
        {Lisp-Entry "clients" property #f 48 12 48 19 ()}
        {Lisp-Entry "active?" slot #f 51 8 51 15 ()}
        {Lisp-Entry "slowdown?" slot #f 52 8 52 17 ()}
        {Lisp-Entry "slowdown-quantum" slot #f 53 8 53 24 ()}
        {Lisp-Entry "category" slot #f 54 8 54 16 ()}
        {Lisp-Entry "old-consumer" slot #f 55 8 55 20 ()}
        {Lisp-Entry "get-tree" method #f 82 18 82 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "get-clients" method #f 91 18 91 29 ("clients")}
        {Lisp-Entry "set-clients" method #f 95 18 95 29 ("activate" "set!" "clients" "unspy" "for-each" "active?" "when" "list")}
        {Lisp-Entry "activate" method #f 102 11 102 19 ("on/off" "'on/off" "locate" "set-selected?" "clients" "spy" "for-each" "active?" "set!")}
        {Lisp-Entry "destroy" method #f 113 20 113 27 ("nextmethod" "set-clients")}
        {Lisp-Entry "resize" method #f 118 20 118 26 ("tree-border" "'tree-border" "size-figure" "on/off" "'on/off" "slowdown" "'slowdown" "0" "clear" "'clear" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-category" method #f 126 11 126 22 ("get-sender" "get-name" "category" "set!" "evt")}
        {Lisp-Entry "on-spy" method #f 130 11 130 17 ("list" "set-clients" "views" "windows" "case" "figure" "spy-domain" "domain" "let*" "pos" "view" "position" "window" "lambda" "pick-figure" "unimplemented" "evt")}
        {Lisp-Entry "on-spy-family" method #f 140 11 140 24 ("collect-family" "set-clients" "views" "windows" "case" "figure" "spy-domain" "domain" "let*" "pos" "view" "position" "window" "lambda" "pick-figure" "unimplemented" "evt")}
        {Lisp-Entry "pick-figure" method #f 150 11 150 22 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "views" "'views" "neq?" "highlight-root-only?:" "highlight:" "click:" "get-player" "list" "exclude:" "pick-figure" "spy-domain" "domain" "let" "unimplemented" "action")}
        {Lisp-Entry "on-clear" method #f 164 11 164 19 ("get-tree" "remove-every-row" "evt")}
        {Lisp-Entry "on-slowdown" method #f 168 11 168 22 ("not" "slowdown?" "set!" "evt")}
        {Lisp-Entry "on-on/off" method #f 172 11 172 20 ("unspy" "clients" "spy" "for-each" "if" "not" "active?" "set!" "evt")}
        {Lisp-Entry "spy-domain" method #f 184 29 184 39 ()}
        {Lisp-Entry "spy" method #f 188 29 188 32 ("client")}
        {Lisp-Entry "unspy" method #f 192 29 192 34 ("client")}}}})
"Type-Extractor"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "registry" "Type-Extractor.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.registry.Type-Extractor" module #f 42 18 42 58 ("jazz")
      {Lisp-Entry "Type-Extractor" class #f 48 7 48 21 ("Object")}
      {Lisp-Entry "Type-Extractor" class #f 54 7 54 21 ("Object")
        {Lisp-Entry "library" slot #f 57 8 57 15 ()}
        {Lisp-Entry "name" slot #f 58 8 58 12 ()}
        {Lisp-Entry "to-emit" slot #f 59 8 59 15 ()}
        {Lisp-Entry "emited" slot #f 60 8 60 14 ()}
        {Lisp-Entry "waiting" slot #f 61 8 61 15 ()}
        {Lisp-Entry "initialize" method #f 64 11 64 21 ("name~self" "library~self" "set!" "nextmethod" "default-name" "name" "name:" "library" "library:")}
        {Lisp-Entry "default-name" method #f 70 11 70 23 ("get-name" "lib")}
        {Lisp-Entry "extract" method #f 74 18 74 25 ("emit-package-footer" "emit-library-types" "emit-package-header" "format" "name" "output-header" "printer" "lambda" "get-eol-encoding" "eol-encoding:" "parse" "path:" "list" "call-with-output-file" "activity" "activity:" "file")}
        {Lisp-Entry "emit-package-header" method #f 89 11 89 30 ("name" "format" "printer")}
        {Lisp-Entry "emit-package-footer" method #f 99 11 99 30 ("format" "printer")}
        {Lisp-Entry "emit-section-header" method #f 103 11 103 30 ("format" "printer" "section-name")}
        {Lisp-Entry "emit-library-types" method #f 110 11 110 29 ("debug" "not-null?" "emit-type-information" "info" "lambda" "for-each" "length" "0" "Range" "new" "set-range" "when" "waiting" "emited" "info-name" "map" "to-emit" "set!" "library" "get-types" "types" "let" "activity" "printer")}
        {Lisp-Entry "emit-type-information" method #f 124 11 124 32 ("1" "delta-pos" "emit-waiting" "emited" "emit-type-info" "cons" "waiting" "set!" "waiting-implemented" "waiting-upon" "user-message" "when" "get-name" "name" "let" "throw-cancel" "cancel-requested?" "and" "if" "activity" "printer" "info")}
        {Lisp-Entry "emit-waiting" method #f 140 11 140 23 ("remove!" "waiting" "cons" "set!" "emit-type-information" "emited" "every?" "member?" "and" "when" "names" "info" "bind" "pair" "lambda" "for-each" "processed" "let" "activity" "printer" "name")}
        {Lisp-Entry "waiting-implemented" method #f 156 11 156 30 ("get-implemented-types" "emited" "not" "to-emit" "member?" "and" "when" "get-name" "name" "let" "lambda" "collect" "info")}
        {Lisp-Entry "emit-type-info" method #f 165 11 165 25 ("error" "else" "emit-max" "TKIND_MAX" "emit-union" "TKIND_UNION" "emit-alias" "TKIND_ALIAS" "emit-com-class" "TKIND_COCLASS" "emit-dispatch" "TKIND_DISPATCH" "emit-interface" "TKIND_INTERFACE" "emit-package" "TKIND_MODULE" "emit-record" "TKIND_RECORD" "emit-enum" "TKIND_ENUM" "ecase" "get-kind" "kind" "let" "printer" "info")}
        {Lisp-Entry "emit-enum" method #f 180 11 180 20 ("emit-variables" "null?" "if" "format" "emit-section-header" "get-variables" "variables" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-record" method #f 191 11 191 22 ("emit-variables" "null?" "if" "format" "emit-section-header" "get-variables" "variables" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-package" method #f 202 11 202 23 ("format" "emit-section-header" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-interface" method #f 208 11 208 25 ("com-external" "'com-external" "emit-functions" "intern-type" "type-name" "final-typedesc" "TYPEDESC" "'desc" "coerce" "and" "ptr-typedesc" "VT_PTR" "=" "pointer?" "vt" "'vt" "type" "tdesc" "elemdescVar" "get" "typedesc" "get-member-name" "name" "desc" "lambda" "for-each" "or" "->string" "format" "emit-section-header" "append" "set!" "member?" "when" "car" "ascendant" "get-implemented-types" "interfaces" "get-functions" "functions" "get-variables" "variables" "get-guid" "guid" "get-name" "interface-name" "let*" "printer" "info")}
        {Lisp-Entry "emit-dispatch" method #f 237 11 237 24 ("emit-interface" "printer" "info")}
        {Lisp-Entry "emit-com-class" method #f 241 11 241 25 ("car" "->string" "format" "emit-section-header" "info-name" "map" "interface-names" "get-implemented-types" "interfaces" "get-guid" "guid" "get-name" "name" "let*" "printer" "info")}
        {Lisp-Entry "emit-alias" method #f 251 11 251 21 ("list" "cons" "waiting" "set!" "emit-alias-code" "emited" "member?" "if" "desc" "tdescAlias" "get-attr" "get" "get-referenced-type" "aliased" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-alias-code" method #f 259 11 259 26 ("format" "emit-section-header" "printer" "aliased" "name")}
        {Lisp-Entry "emit-union" method #f 266 11 266 21 ("format" "emit-section-header" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-max" method #f 274 11 274 19 ("format" "emit-section-header" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-functions" method #f 280 11 280 25 ("cons" "set!" "nil?" "essay" "emit-function" "memq?" "not" "invkind" "'invkind" "get" "effective-name" "effective" "get-member-name" "name" "let*" "tail" "desc" "bind" "pair" "lambda" "for-each-pair" "format" "when" "null?" "if" "trailer" "printer" "namespace" "modifiers" "header" "functions" "names" "info")}
        {Lisp-Entry "emit-function" method #f 295 11 295 24 ("reverse!" "VARENUM" "value->name" "item" "map" "4" "quotient" "cParams" "'cParams" "0" "naturals" "'<in-out>" "parameter-direction" "param-direction" "param-type-name" "interface-kind?" "if" "param-pointer?" "get-referenced-type" "VT_USERDEFINED" "param-referenced" "param-typedesc" "param-type" "ptr-ptr-type" "ptr-ptr-typedesc" "ptr-pointer?" "ptr-type" "ptr-typedesc" "pointer?" "type" "'tdesc" "typedesc" "array-ref" "param" "n" "lambda" "for-each" "get-function-parameters" "params" "let" "cons" "set!" "unpl" "'unpl" "eq?" "when" "format" "intern-type" "return-type-name" "or" "final-return-typedesc" "TYPEDESC" "'desc" "coerce" "and" "ptr-return-typedesc" "VT_PTR" "=" "return-pointer?" "vt" "'vt" "return-type" "tdesc" "elemdescFunc" "return-typedesc" "oVft" "'oVft" "get" "virtual-offset" "unimplemented" "let*" "equal?" "test:" "member?" "unless" "trailer" "printer" "namespace" "modifiers" "header" "desc" "effective" "info")}
        {Lisp-Entry "interface-kind?" method #f 350 11 350 26 ("TKIND_COCLASS" "TKIND_DISPATCH" "TKIND_INTERFACE" "=" "or" "get-kind" "kind" "let" "when" "info")}
        {Lisp-Entry "effective-name" method #f 358 11 358 25 ("putref-name" "INVOKE_PROPERTYPUTREF" "put-name" "INVOKE_PROPERTYPUT" "get-name" "INVOKE_PROPERTYGET" "INVOKE_FUNC" "ecase" "name" "kind")}
        {Lisp-Entry "get-name" method #f 366 11 366 19 ("concatenate" "string->symbol" "name")}
        {Lisp-Entry "put-name" method #f 370 11 370 19 ("concatenate" "string->symbol" "name")}
        {Lisp-Entry "putref-name" method #f 374 11 374 22 ("concatenate" "string->symbol" "name")}
        {Lisp-Entry "parameter-direction" method #f 378 11 378 30 ("error" "else" "out" "'out" "in" "'in" "or" "in-out" "'in-out" "cond" "not" "and" "unspecified?" "IDLFLAG_FOUT" "out?" "IDLFLAG_FIN" "mask-bit-set?" "in?" "wIDLFlags" "idldesc" "get" "flags" "let*" "param")}
        {Lisp-Entry "emit-variables" method #f 389 11 389 25 ("and" "emit-variable" "tail" "desc" "bind" "pair" "lambda" "for-each-pair" "format" "when" "null?" "if" "trailer" "printer" "variables" "info")}
        {Lisp-Entry "emit-variable" method #f 399 11 399 24 ("VARENUM" "value->name" "unpl" "'unpl" "=" "and" "when" "TKIND_RECORD" "read-variant" "TKIND_ENUM" "ecase" "format" "intern-type" "variable-type-name" "lpvarValue" "'lpvarValue" "value" "vt" "'vt" "basetype" "tdesc" "elemdescVar" "get" "typedesc" "get-member-name" "name" "get-kind" "kind" "let*" "trailer" "printer" "desc" "info")}
        {Lisp-Entry "info-name" method #f 416 11 416 20 ("get-name" "info")}
        {Lisp-Entry "intern-type" method #f 425 11 425 22 ("cdr" "car" "pair?" "name" "idl-type-info" "let*" "else" "TKIND_ALIAS" "TKIND_DISPATCH" "get-name" "add-modifier" ":string" "format" "TKIND_ENUM" "get-kind" "ecase" "'desc" "get-referenced-type" "referenced" "VT_USERDEFINED" "=" "if" "vt" "'vt" "get" "type" "let" "pointer?" "desc" "info")}
        {Lisp-Entry "idl-type-info" method #f 446 11 446 24 ("VARENUM" "value->name" "error" "else" "VT_LPWSTR" "VT_LPSTR" "VT_CY" "VT_SAFEARRAY" "VT_DISPATCH" "VT_UNKNOWN" "VT_USERDEFINED" "VT_DATE" "VT_VARIANT" "VT_BSTR" "VT_CARRAY" "cons" "VT_PTR" "VT_HRESULT" "VT_BOOL" "VT_INT" "VT_R8" "VT_R4" "VT_I4" "VT_I2" "VT_I1" "VT_UINT" "VT_UI4" "VT_UI2" "VT_UI1" "VT_VOID" "ecase" "type")}
        {Lisp-Entry "add-modifier" method #f 476 11 476 23 (":string" "format" "if" "pointer?" "name")}}}})
"Type-Viewer"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "registry" "Type-Viewer.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.registry.Type-Viewer" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Type-Viewer" class #f 44 7 44 18 ("Layout-View")}
      {Lisp-Entry "Type-Viewer" class #f 50 7 50 18 ("Code" "Font" "font:" "Default" "Text-Style" "default-style:" "descr" "second" "descr-border" "269" "width:" "on-selection-change" "selection-handler:" "library" "fill" "content" "vscroll?:" "document" "entry" "style:" "edge" "border-type:" "first" "library-border" "30" "division:" "relative" "mode:" "horz" "orientation:" "center" "splitter" "on-browse" "tail" "100" "title:" "browse" "on-generate" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" ":images" "portfolio:" "Image-Resource" "resource:" "22" "generate" "0" "6" "1" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "border" "layout-type:" "739" "693" "Dimension" "size:" "initialize" "Layout-View")
        {Lisp-Entry "library" slot #f 53 8 53 15 ()}
        {Lisp-Entry "singleton" method #f 74 23 74 32 ("new-frame" "Type-Viewer" "find-frame-host" "or")}
        {Lisp-Entry "destroy" method #f 79 11 79 18 ("nextmethod" "library" "set!")}
        {Lisp-Entry "host-icon" method #f 89 16 89 25 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 93 16 93 26 ()}
        {Lisp-Entry "host-position" method #f 97 16 97 29 ("14" "503" "Point")}
        {Lisp-Entry "host-size" method #f 101 16 101 25 ("635" "557" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 105 11 105 26 ("home")}
        {Lisp-Entry "on-generate" method #f 114 11 114 22 ("extract" ":pure-dispatch?" ":library" "Type-Extractor" "new" "extractor" "shift-down?" "pure-dispatch?" "extensions:" "default-extension:" "initial-filename:" "choose-new-file" "file" "get-name" "name" "let*" "bell" "library" "null?" "if" "evt")}
        {Lisp-Entry "on-browse" method #f 124 11 124 20 ("extensions:" "choose-file" "view-file" "evt")}
        {Lisp-Entry "on-selection-change" method #f 128 11 128 30 ("get-row" "get-user-data" "library" "describe-item" "null?" "if" "get-single-selection" "selection" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "view-file" method #f 136 18 136 27 ("file:" "Type-Lib" "new" "view-library" "file")}
        {Lisp-Entry "view-registered-library" method #f 140 18 140 41 (":language-id" ":minor-version" ":major-version" "guid:" "Type-Lib" "new" "view-library" "li" "mi" "ma" "g")}
        {Lisp-Entry "view-library" method #f 144 18 144 30 ("describe-item" "insert-library" "with-update-locked" "remove-every-row" "'library" "locate" "tree" "let" "library" "set!" "lambda" ":wait" "with-cursor" "lib")}
        {Lisp-Entry "insert-library" method #f 161 11 161 25 ("get-types" "insert-info" "info" "lambda" "for-each" "user-data:" "Image-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "add-row" "node" "library" "get-name" "title" "let*" "tree")}
        {Lisp-Entry "insert-info" method #f 169 11 169 22 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "dynamic" "'dynamic" "state:" "father:" "add-row" "else" "TKIND_UNION" "TKIND_ALIAS" "TKIND_DISPATCH" "TKIND_INTERFACE" "TKIND_COCLASS" "TKIND_RECORD" "Image-Resource" "TKIND_ENUM" "ecase" "icon" "get-kind" "kind" "get-doc" "doc" "get-name" "name" "let*" "node" "tree" "info")}
        {Lisp-Entry "update-info-row" method #f 185 11 185 26 ("get-variables" "insert-variable" "get-functions" "insert-function" "desc" "lambda" "for-each" "get-user-data" "info" "get-parent" "tree" "let" "row")}
        {Lisp-Entry "insert-function" method #f 196 11 196 26 ("cons" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "else" "INVOKE_PROPERTYPUTREF" "INVOKE_PROPERTYPUT" "INVOKE_PROPERTYGET" "Image-Resource" "INVOKE_FUNC" "invkind" "'invkind" "get" "ecase" "icon" "get-member-name" "name" "let" "node" "tree" "desc" "info")}
        {Lisp-Entry "insert-variable" method #f 207 11 207 26 ("cons" "user-data:" "Image-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "get-member-name" "name" "let" "node" "tree" "desc" "info")}
        {Lisp-Entry "describe-item" method #f 217 11 217 24 ("get-output" "set-content" "describe-member" "else" "describe-info" "Type-Info" "describe-lib" "Type-Lib" "typecase" "List-Factory" "new" "fact" "descr" "'descr" "locate" "text" "let" "when" "item")}
        {Lisp-Entry "describe-lib" method #f 228 11 228 23 ("get-lib-file" "get-lib-guid" "get-doc" "get-name" "format" "put" "fact" "item")}
        {Lisp-Entry "describe-info" method #f 236 11 236 24 ("get-implemented-types" "map" "get-guid" "get-kind" "TYPEKIND" "value->name" "get-doc" "get-name" "format" "put" "fact" "item")}
        {Lisp-Entry "describe-member" method #f 244 11 244 26 ("describe-variable" "VARDESC" "describe-function" "FUNCDESC" "typecase" "desc" "info" "bind" "fact" "item")}
        {Lisp-Entry "describe-function" method #f 251 11 251 28 ("0" "naturals" "get-name" "get-referenced-type" "referenced" "ptr-ptr-type" "ptr-ptr-typedesc" "when" "make-string" "length" "10" "-" "1" "max" "padding" "param-type-name" "ptr-type" "TYPEDESC" "'desc" "coerce" "and" "ptr-typedesc" "VT_USERDEFINED" "user?" "VT_PTR" "=" "pointer?" "parameter-direction" "direction" "vt" "'vt" "type" "'tdesc" "typedesc" "array-ref" "param" "let*" "n" "lambda" "for-each" "get-function-parameters" "params" "let" "tdesc" "elemdescFunc" "describe-type" "cParamsOpt" "'cParamsOpt" "cParams" "'cParams" "oVft" "'oVft" "callconv" "'callconv" "CALLCONV" "invkind" "'invkind" "INVOKEKIND" "funckind" "'funckind" "get" "FUNCKIND" "value->name" "format" "put" "fact" "desc" "info")}
        {Lisp-Entry "describe-type" method #f 285 11 285 24 ("VARENUM" "value->name" "get-name" "'desc" "get-referenced-type" "referenced" "VT_USERDEFINED" "=" "if" "vt" "'vt" "get" "type" "let" "desc" "info")}
        {Lisp-Entry "parameter-direction" method #f 293 11 293 30 ("error" "else" "'<out>" "'<in>" "or" "'<in-out>" "cond" "not" "and" "unspecified?" "IDLFLAG_FOUT" "out?" "IDLFLAG_FIN" "mask-bit-set?" "in?" "wIDLFlags" "idldesc" "get" "flags" "let*" "param")}
        {Lisp-Entry "describe-variable" method #f 304 11 304 28 ("TKIND_UNION" "else" "cElements" "rgbounds" "tdescElem" "'tdescElem" "ARRAYDESC" "'desc" "coerce" "arraydesc" "let" "VT_CARRAY" "case" "TKIND_RECORD" "read-variant" "format" "put" "TKIND_ENUM" "ecase" "lpvarValue" "'lpvarValue" "value" "describe-type" "type" "tdesc" "elemdescVar" "get" "typedesc" "get-kind" "kind" "let*" "fact" "desc" "info")}}
      {Lisp-Entry "Type-Tree" class #f 334 7 334 16 ("Tree-View")
        {Lisp-Entry "update-row" method #f 337 11 337 21 ("update-info-row" "row")}}}})
"User-Log"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "log" "User-Log.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.log.User-Log" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "User-Log" class #f 45 7 45 15 ("Log-View")
        {Lisp-Entry "external-name" method #f 48 25 48 38 ("user-log" "'user-log" "rest")}
        {Lisp-Entry "finish" method #f 52 20 52 26 ("separator3" "'separator3" "0" "8" "Dimension" "separator2" "'separator2" "set-size" "separator1" "'separator1" "close" "none" "'none" "set-border-type" "log-border" "'log-border" "splitter" "'splitter" "locate" "zoom" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" method #f 66 25 66 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 70 25 70 35 ()}
        {Lisp-Entry "get-tools-view" method #f 79 20 79 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 83 20 83 33 ("acquire-focus" "log-tree" "'log-tree" "locate" "tree" "let")}
        {Lisp-Entry "view-entry" method #f 93 11 93 21 ("node")}
        {Lisp-Entry "edit-entry" method #f 102 11 102 21 ("bell" "user-message" "else" "output-table" "Data-Table" "typecase" "when" "get-entry" "entry" "let" "node")}
        {Lisp-Entry "output-tables" method #f 115 11 115 24 ("sql" "'sql" "select-workspace" "get-application" "appl" "when" "output-tables" "get-sql-console-text" "text" "let" "select?" "select?:" "name" "name:" "tables")}
        {Lisp-Entry "output-table" method #f 125 11 125 23 ("list" "output-tables" "select?" "select?:" "name" "name:" "table")}}}})
"_inspector"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "inspector" "_inspector.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.inspector" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "presentation-limit" definition #f 48 12 48 30 ("256")}
      {Lisp-Entry "Unbound" definition #f 52 12 52 19 ("cons")}
      {Lisp-Entry "package-unbound" definition #f 56 20 56 35 ("Unbound")}
      {Lisp-Entry "package-info" definition #f 60 20 60 32 ("list" "context:" "frame:" "memq?" "more?" "present-object" "->string" "presentation" "object->serial" "serial" ":raw" "raw?" "Unbound" "eq?" "unbound?" "let*" "subseq" "concatenate" "if" "presentation-limit" "or" "limit" "let" "str" "truncate" "else" "class-of" "get-instance-slots" "not-null?" "object?" "cardinality" "sequence?" "structure-kind" "kind-length" "structure?" "0" "table-length" ">" "table?" "pair?" "cond" "more-value?" "define" "max-width" "max-width:" "mutable?" "mutable?:" ":value" "kind" "kind:" "value")}
      {Lisp-Entry "inspect-rank-limit" constant #f 90 10 90 28 ("100")}
      {Lisp-Entry "inspect-value" definition #f 94 20 94 33 ("object?" "List" "coerce" "sequence?" "structure?" "table?" "null/pair?" "format" "-" "missing" "total" "displayed" "symbol->string" "string-ci<?" "class-of" "read-property" "property?" "unspecified?" "and" "field-name" "slot-value" ":raw" "kind:" "symbol?" "slot" "collect" "infos" "get-ascendant" "get-slots" "class" "class-slots" "object" "inspect-object" "subseq" "table-length" ">" "table->list" "key" "present-object" "pair" "key:" "string<=?" "sort" "sort-content" "table" "inspect-table" "else" "rest" "'rest" "null?" "1" "cdr" "car" "pair?" "proper-length" "+" "inspect-limit" "list" ">=" "cond" "0" "rank" "scan" "lst" "inspect-list" "kind-fields" "structure-ref" "package-info" "cons" "index" "name" "bind" "info" "lambda" "map" "append" "kind-super" "not" "if" "fields" "iter" "structure-kind" "kind" "let" "struct" "inspect-structure" "define" "inspect-rank-limit" "max-content" "max-content:" "max-width" "max-width:" "value")}}})
"_jazz"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "_jazz.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz" module #f 37 8 37 24 ("jazz")}})
"autoload"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "autoload.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.jazz.autoload" module #f 37 18 37 43 ("jazz")}})
"forms"
 ({Lisp-File-Entry {File jazz.editor.jazz "src" "jazz" "editor" "jazz" "forms.jazz"} 1289940762
    {Lisp-Entry "jazz.editor.jazz.forms" module #f 37 8 37 30 ("jazz")
      {Lisp-Entry "class" define ("expression") 50 19 50 24 (":class" "walk:" "0" "tabulate:" "attributes" "implements" "extends" "metaclass" "keywords:" "native" "primitive" "uptodate" "undocumented" "deprecated" "concrete" "abstract" "public" "package" "protected" "private" "modifiers:" "declaration?:" "namespace?:")}
      {Lisp-Entry "interface" define ("expression") 59 19 59 28 (":interface" "walk:" "0" "tabulate:" "attributes" "extends" "metaclass" "keywords:" "native" "primitive" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "modifiers:" "declaration?:" "namespace?:")}
      {Lisp-Entry "remotable-stub" define ("expression") 68 19 68 33 ("name-mangler:" ":remotable-stub" "walk:" "0" "tabulate:" "extends" "keywords:" "public" "package" "protected" "private" "modifiers:" "declaration?:" "namespace?:")}
      {Lisp-Entry "submodule" define ("expression") 78 19 78 28 (":submodule" "walk:" "-1" "tabulate:" "public" "package" "protected" "private" "modifiers:" "declaration?:" "namespace?:")}
      {Lisp-Entry "constant" define ("expression") 91 19 91 27 (":constant" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "datacontainer" define ("expression") 96 19 96 32 (":datacontainer" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "definition" define ("expression") 101 19 101 29 (":definition" "walk:" "1" "tabulate:" "onsite" "inline" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "define-expression" define ("expression") 107 19 107 36 ("name-mangler:" ":define" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "enumeration" define ("expression") 113 19 113 30 (":enumeration" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "form" define ("expression") 118 19 118 23 (":form" "walk:" "0" "tabulate:" "declaration?:")}
      {Lisp-Entry "generic" define ("expression") 123 19 123 26 (":generic/specific" "walk:" "1" "tabulate:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "global" define ("expression") 129 19 129 25 (":global" "walk:" "declaration?:")}
      {Lisp-Entry "macro" define ("expression") 133 19 133 24 ("name-mangler:" ":macro" "walk:" "1" "tabulate:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "local-macro" define ("expression") 140 19 140 30 ("name-mangler:" ":macro" "walk:" "1" "tabulate:" "modifiers:" "declaration?:")}
      {Lisp-Entry "method" define ("expression") 147 19 147 25 (":method" "walk:" "1" "tabulate:" "value" "call" "exec" "post" "notsynchronized" "synchronized" "notremote" "remote" "onsite" "inline" "concrete" "abstract" "override" "chained" "virtual" "final" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "pattern" define ("expression") 153 19 153 26 (":method" "walk:" "1" "tabulate:" "notsynchronized" "synchronized" "notremote" "remote" "onsite" "inline" "concrete" "abstract" "override" "chained" "virtual" "final" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "property" define ("expression") 159 19 159 27 (":property" "walk:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "modifiers:" "declaration?:")}
      {Lisp-Entry "slot" define ("expression") 164 19 164 23 (":slot" "walk:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "special" define ("expression") 169 19 169 26 (":define-macro" "walk:" "declaration?:")}
      {Lisp-Entry "specialize" define ("expression") 173 19 173 29 (":specialize" "walk:" "inline" "modifiers:" "declaration?:")}
      {Lisp-Entry "specific" define ("expression") 178 19 178 27 (":generic/specific" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "syntax" define ("expression") 183 19 183 25 (":macro" "walk:" "1" "tabulate:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "define-local-syntax" define ("expression") 189 19 189 38 (":macro" "walk:" "1" "tabulate:" "modifiers:" "declaration?:")}
      {Lisp-Entry "%macro" define ("expression") 195 19 195 25 (":macro" "walk:" "declaration?:")}
      {Lisp-Entry "define-color" define ("expression") 199 19 199 31 ("name-mangler:" ":define" "walk:" "declaration?:")}
      {Lisp-Entry "define-font" define ("expression") 204 19 204 30 ("name-mangler:" ":define" "walk:" "declaration?:")}
      {Lisp-Entry "define-form" define ("expression") 209 19 209 30 (":define" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "define-trait" define ("expression") 214 19 214 31 (":define" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "define-handler" define ("expression") 219 19 219 33 (":define" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "assert" define ("expression") 230 19 230 25 ("1" "tabulate:")}
      {Lisp-Entry "attributes" define ("expression") 233 19 233 29 (":attributes" "walk:" "1" "tabulate:")}
      {Lisp-Entry "bind" define ("expression") 237 19 237 23 ("2" "tabulate:")}
      {Lisp-Entry "call-with-catch" define ("expression") 240 19 240 34 ("2" "tabulate:")}
      {Lisp-Entry "catch" define ("expression") 243 19 243 24 ("1" "tabulate:")}
      {Lisp-Entry "cotry" define ("expression") 246 19 246 24 ("1" "tabulate:")}
      {Lisp-Entry "ecase" define ("expression") 249 19 249 24 ("1" "tabulate:")}
      {Lisp-Entry "<form>" define ("expression") 252 19 252 25 ("0" "tabulate:")}
      {Lisp-Entry "jml" define ("expression") 255 19 255 22 ("0" "tabulate:")}
      {Lisp-Entry "<jml>" define ("expression") 258 19 258 24 ("0" "tabulate:")}
      {Lisp-Entry "new" define ("expression") 261 19 261 22 ("1" "tabulate:")}
      {Lisp-Entry "proclaim" define ("expression") 264 19 264 27 (":proclaim" "walk:")}
      {Lisp-Entry "prog1" define ("expression") 267 19 267 24 ("1" "tabulate:")}
      {Lisp-Entry "properties" define ("expression") 270 19 270 29 (":properties" "walk:")}
      {Lisp-Entry "synchronize" define ("expression") 273 19 273 30 ("1" "tabulate:")}
      {Lisp-Entry "typecase" define ("expression") 276 19 276 27 ("1" "tabulate:")}
      {Lisp-Entry "unless" define ("expression") 279 19 279 25 ("1" "tabulate:")}
      {Lisp-Entry "unwind-protect" define ("expression") 282 19 282 33 ("1" "tabulate:")}
      {Lisp-Entry "when" define ("expression") 285 19 285 23 ("1" "tabulate:")}
      {Lisp-Entry "while" define ("expression") 288 19 288 24 ("1" "tabulate:")}
      {Lisp-Entry "with" define ("expression") 291 19 291 23 ("1" "tabulate:")}
      {Lisp-Entry "c-constant" define ("expression") 300 19 300 29 (":c-constant" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "c-declare" define ("expression") 305 19 305 28 (":c-declare" "walk:")}
      {Lisp-Entry "c-definition" define ("expression") 308 19 308 31 (":c-definition" "walk:" "5" "tabulate:" "public" "package" "protected" "private" "modifiers:" "declaration?:")}
      {Lisp-Entry "c-enumeration" define ("expression") 314 19 314 32 (":c-enumeration" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "c-external" define ("expression") 319 19 319 29 (":c-external" "walk:" "declaration?:")}
      {Lisp-Entry "c-include" define ("expression") 323 19 323 28 (":c-include" "walk:")}
      {Lisp-Entry "c-initialize" define ("expression") 326 19 326 31 (":c-initialize" "walk:")}
      {Lisp-Entry "c-named-declare" define ("expression") 329 19 329 34 (":c-named-declare" "walk:")}
      {Lisp-Entry "c-structure" define ("expression") 332 19 332 30 (":c-structure" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "c-type" define ("expression") 337 19 337 25 (":c-type" "walk:" "declaration?:")}
      {Lisp-Entry "com-external" define ("expression") 347 19 347 31 (":com-external" "walk:" "declaration?:")}}})
