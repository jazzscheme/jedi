"Cookie"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "Cookie.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.http.Cookie" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Cookie" class #f 40 7 40 13 ("Object")
        {Lisp-Entry "name" slot #f 43 8 43 12 ()}
        {Lisp-Entry "get-name" accessor #f 43 26 43 34 ()}
        {Lisp-Entry "value" slot #f 44 8 44 13 ()}
        {Lisp-Entry "get-value" accessor #f 44 26 44 34 ()}
        {Lisp-Entry "expires" slot #f 45 8 45 15 ()}
        {Lisp-Entry "get-expires" accessor #f 45 26 45 34 ()}
        {Lisp-Entry "set-expires" accessor #f 45 26 45 34 ()}
        {Lisp-Entry "path" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-path" accessor #f 46 26 46 34 ()}
        {Lisp-Entry "set-path" accessor #f 46 26 46 34 ()}
        {Lisp-Entry "domain" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-domain" accessor #f 47 26 47 34 ()}
        {Lisp-Entry "set-domain" accessor #f 47 26 47 34 ()}
        {Lisp-Entry "secure?" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-secure?" accessor #f 48 26 48 34 ()}
        {Lisp-Entry "set-secure?" accessor #f 48 26 48 34 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("value~self" "self" "name~self" "set!" "nextmethod" "value" "name")}
        {Lisp-Entry "print" method #f 57 20 57 25 ("value" "name" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}}})
"Default-404-Handler"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "Default-404-Handler.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.http.Default-404-Handler" module #f 38 18 38 55 ("jazz")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.network.http.HTTP-Response" "jazz.network.http.Handler")}
      {Lisp-Entry "Default-404-Handler" class #f 45 7 45 26 ("HTTP-Request-Handler")
        {Lisp-Entry "handle-request" method #f 51 20 51 34 ("content:" "not-found" "code:" "HTTP-Response" "new" "server" "port" "request")}}}})
"Directory-Handler"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "Directory-Handler.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.http.Directory-Handler" module #f 38 18 38 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.network.http.HTTP-Request" "jazz.network.http.HTTP-Response" "jazz.network.http.Handler" "jazz.io")}
      {Lisp-Entry "Directory-Handler" class #f 47 7 47 24 ("HTTP-Request-Handler")
        {Lisp-Entry "root-directory" slot #f 50 8 50 22 ()}
        {Lisp-Entry "get-root-directory" accessor #f 50 33 50 41 ()}
        {Lisp-Entry "set-root-directory" accessor #f 50 33 50 41 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("self" "root-directory~self" "set!" "nextmethod" "root-directory" "root-directory:")}
        {Lisp-Entry "handle-request" method #f 59 20 59 34 ("read-u8-content" "path-settings" "call-with-input-file" "content:" "ok" "code:" "HTTP-Response" "new" "get-uri" "get-uri~" "maybe-file" "is-directory?" "is-directory?~" "exists?" "exists?~" "tokenise-filename" "new-file" "new-file~" "file" "let" "empty-string?" "not" "root-directory" "and" "when" "path" "find-file" "define" "server" "port" "request")}}}})
"Dispatcher"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "Dispatcher.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.http.Dispatcher" module #f 38 18 38 46 ("jazz")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.network.http.Default-404-Handler")}
      {Lisp-Entry "HTTP-Dispatcher" class #f 44 7 44 22 ("Default-404-Handler" "new" "initialize" "Object")
        {Lisp-Entry "default-404-handler" slot #f 47 8 47 27 ()}
        {Lisp-Entry "handlers" slot #f 48 8 48 16 ()}
        {Lisp-Entry "get-handlers" accessor #f 48 75 48 83 ()}
        {Lisp-Entry "set-handlers" accessor #f 48 75 48 83 ()}
        {Lisp-Entry "dispatch" method #f 51 18 51 26 ("close-port" "cdr" "car" "maybe-reply" "default-404-handler" "handle-request" "handle-request~" "send" "send~" "null?" "if" "handlers" "loop" "let" "server" "port" "request")}
        {Lisp-Entry "add-handler" method #f 63 18 63 29 ("cons" "handlers" "set!" "handler")}}}})
"File-Handler"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "File-Handler.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.http.File-Handler" module #f 38 18 38 48 ("jazz")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.network.http.HTTP-Request" "jazz.network.http.HTTP-Response" "jazz.network.http.Handler")}
      {Lisp-Entry "File-Handler" class #f 46 7 46 19 ("equal?" "test:" "make-table" "initialize" "HTTP-Request-Handler")
        {Lisp-Entry "files" slot #f 49 8 49 13 ()}
        {Lisp-Entry "serve-file" method #f 52 18 52 28 ("files" "table-set!" "uri-path" "filesystem-path")}
        {Lisp-Entry "read-file" method #f 56 11 56 20 ("read-u8-content" "call-with-input-file" "filesystem-path")}
        {Lisp-Entry "handle-request" method #f 61 20 61 34 ("read-file" "content:" "ok" "code:" "HTTP-Response" "new" "if" "get-uri" "get-uri~" "files" "table-ref" "maybe-file" "let" "server" "port" "request")}}}})
"HTTP-Client"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "HTTP-Client.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.http.HTTP-Client" module #f 44 18 44 47 ("jazz")
      {Lisp-Entry "import" anonymous #f 47 1 47 7 ("jazz.network" "jazz.library")}
      {Lisp-Entry "HTTP-Client" class #f 51 7 51 18 ("equal?" "test:" "make-table" "initialize" "Object")
        {Lisp-Entry "cookies" slot #f 54 8 54 15 ()}
        {Lisp-Entry "navigate" method #f 62 18 62 26 ("else" "name:" "Host" "navigate-safely" "concatenate" "let" "split" "split~" "hostname" "receive" "list" "URL" "new" "url" "get-header" "get-header~" "location" "see-other" "case" "get-code" "get-code~" "code" "send-request" "build-request" "request" "let*" "add-cookie" "cookie" "name" "lambda" "for-each-cookie" "for-each-cookie~" "response" "store-cookies" "define" "parameters" "parameters:" "http" "port" "port:" "resource" "operation" "host")}
        {Lisp-Entry "navigate-safely" method #f 86 11 86 26 ("navigate" "resource" "operation" "host")}
        {Lisp-Entry "add-cookie" method #f 95 11 95 21 ("cookies" "table-set!" "get-name" "get-name~" "name" "let" "cookie")}
        {Lisp-Entry "for-each-cookie" method #f 100 11 100 26 ("cookies" "iterate-table" "proc")}
        {Lisp-Entry "send-request" method #f 109 11 109 23 ("socket:" "HTTP-Response" "send-raw" "send-raw~" "connect" "connect~" "Heap-Block" "coerce" "block" "message-string" "message-string~" "string" "let*" "Socket" "new" "socket" "with" "send-request" "unimplemented" "port" "host" "request")}
        {Lisp-Entry "build-request" method #f 120 11 120 24 ("add-cookies" "add-cookie" "add-cookie~" "cookie" "name" "lambda" "for-each-cookie" "get-name" "get-name~" "set-header!" "set-header!~" "parameters:" "resource:" "operation:" "HTTP-Request" "new" "request" "let" "parameters" "resource" "operation" "port" "host")}}}})
"HTTP-Message"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "HTTP-Message.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.http.HTTP-Message" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.network")}
      {Lisp-Entry "HTTP-Message" class #f 43 7 43 19 ("equal?" "test:" "make-table" "initialize" "Object")
        {Lisp-Entry "protocol" slot #f 46 8 46 16 ()}
        {Lisp-Entry "get-protocol" accessor #f 46 61 46 69 ()}
        {Lisp-Entry "headers" slot #f 47 8 47 15 ()}
        {Lisp-Entry "get-headers" accessor #f 47 61 47 69 ()}
        {Lisp-Entry "content" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-content" accessor #f 48 61 48 69 ()}
        {Lisp-Entry "cookies" slot #f 49 8 49 15 ()}
        {Lisp-Entry "get-cookies" accessor #f 49 61 49 69 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("content~self" "self" "headers~self" "set!" "nextmethod" "headers" "headers:" "content" "content:")}
        {Lisp-Entry "crlf!" method #f 58 11 58 16 ("2" "0" "10" "13" "#u8" "write-subu8vector" "port")}
        {Lisp-Entry "get-header" method #f 67 18 67 28 ("cdr" "if" "headers" "assoc" "maybe-header" "let" "default" "name")}
        {Lisp-Entry "set-header!" method #f 74 18 74 29 ("cons" "set!" "set-cdr!" "if" "headers" "assoc" "old-header" "let" "value" "name")}
        {Lisp-Entry "print-headers" method #f 81 11 81 24 ("headers" "cdr" "print-header" "header" "lambda" "map" "car" "string-length" "string?" "if" "set-header!" "content" "when" "port")}
        {Lisp-Entry "print-header" method #f 93 11 93 23 ("crlf!" "format" "port" "value" "name")}
        {Lisp-Entry "send" method #f 98 19 98 23 ("port")}
        {Lisp-Entry "get-cookie" method #f 107 18 107 28 ("cookies" "table-ref" "name")}
        {Lisp-Entry "add-cookie" method #f 111 18 111 28 ("cookies" "table-set!" "get-name" "get-name~" "name" "let" "cookie")}}}})
"HTTP-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "HTTP-Request.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.http.HTTP-Request" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("irregex" "jazz.network.http" "jazz.network")}
      {Lisp-Entry "HTTP-Request" class #f 45 7 45 19 ("initialize" "HTTP-Message")
        {Lisp-Entry "http-method" slot #f 47 8 47 19 ()}
        {Lisp-Entry "get-http-method" accessor #f 47 45 47 53 ()}
        {Lisp-Entry "uri" slot #f 48 8 48 11 ()}
        {Lisp-Entry "get-uri" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "get-parameters" slot #f 50 8 50 22 ()}
        {Lisp-Entry "get-get-parameters" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "post-parameters" slot #f 51 8 51 23 ()}
        {Lisp-Entry "get-post-parameters" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "initialize" method #f 54 20 54 30 ("parse-cookies" "when" "get-header" "cookie-header" "let" "get-parameters~self" "uri~self" "self" "http-method~self" "set!" "nextmethod" "headers" "headers:" "content" "content:" "get-parameters" "get-parameters:" "uri" "uri:" "http-method" "http-method:")}
        {Lisp-Entry "parse-request" method #f 107 11 107 24 ("substitute" "cons" "parse-value" "value" "0" "name" "let*" "parameter" "map" "read-line" "lambda" "read-all" "parameters" "split-parameters" "fragment" "parse-parameters" "+" "1" "subseq" "url-decode" "values" "not" "if" "find" "pos" "let" "uri" "parse-uri" "define" "port")}
        {Lisp-Entry "parse-cookies" method #f 156 11 156 24 ("1" "+" "0" "subseq" "Cookie" "new" "add-cookie" "string-length" "or" "semi" "find" "equal-sign" "name-value-str" "reverse" "cons" "s" "m" "i" "lambda" "string->irregex" "irregex-fold" "irregex-match-substring" "map" "cookie-strings" "let" "cookie-string")}
        {Lisp-Entry "get-parameter" method #f 176 11 176 24 ("cdr" "if" "get-parameters" "assoc" "entry" "let" "name")}
        {Lisp-Entry "send" method #f 188 20 188 24 ("get-output-string" "output-parameters" "format" "http-method" "=" "when" "print-headers" "output-control" "port")}
        {Lisp-Entry "output-control" method #f 197 11 197 25 ("output-parameters" "=" "when" "uri" "http-method" "format" "output")}
        {Lisp-Entry "output-parameters" method #f 205 11 205 28 ("url-encode" "format" "unless" "value" "name" "bind" "do" "then" "first" "first?" "get-parameters" "in" "parameter" "for" "loop" "output")}}}})
"HTTP-Response"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "HTTP-Response.jazz"} 236918209. jazz
    {Lisp-Entry "jazz.network.http.HTTP-Response" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.network")}
      {Lisp-Entry "HTTP-Response" class #f 43 7 43 20 ("HTTP-Message")
        {Lisp-Entry "code" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-code" accessor #f 46 34 46 42 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("content~self" "ok" "or" "self" "code~self" "set!" "nextmethod" "content" "content:" "code" "code:")}
        {Lisp-Entry "parse-response" method #f 85 11 85 25 ("Cookie-Header" "parse-cookies" "parse-headers" "parse-code" "self" "code~self" "set!" "split" "code-text" "code" "version" "bind" "read-line/headers" "headers" "line" "receive" "port")}
        {Lisp-Entry "Response-Codes" definition #f 100 14 100 28 ("not-implemented" "server-error" "conflict" "not-allowed" "not-found" "forbidden" "bad-request" "see-other" "ok")}
        {Lisp-Entry "parse-code" definition #f 112 15 112 25 ("unknown" "first" "if" "equal?" "test:" "second" "key:" "Response-Codes" "find-in" "info" "let" "code")}
        {Lisp-Entry "response-code-info" definition #f 119 15 119 33 ("error" "Response-Codes" "assq" "or" "code")}
        {Lisp-Entry "send" method #f 129 20 129 24 ("write-u8-content" "list?" "if" "content" "when" "get-value" "get-value~" "cookie" "name" "lambda" "cookies" "iterate-table" "print-headers" "crlf!" "format" "response-code-info" "text" "number" "code" "bind" "port")}}}})
"Handler"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "Handler.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.http.Handler" module #f 38 18 38 43 ("jazz")
      {Lisp-Entry "HTTP-Request-Handler" class #f 45 7 45 27 ("Object")
        {Lisp-Entry "handle-request" method #f 48 26 48 40 ("server" "port" "request")}}}})
"Host"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "host" "Host.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.host.Host" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Host" class #f 40 7 40 11 ("initialize" "Object")
        {Lisp-Entry "name" slot #f 43 8 43 12 ()}
        {Lisp-Entry "address" slot #f 44 8 44 15 ()}
        {Lisp-Entry "ip" slot #f 45 8 45 10 ()}
        {Lisp-Entry "origin" slot #f 46 8 46 14 ()}
        {Lisp-Entry "get-origin" accessor #f 46 37 46 45 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("error" "else" "ip~self" "address~self" "origin" "origin~self" "self" "name~self" "set!" "cond" "nextmethod" "ip" "ip:" "address" "address:" "name" "name:")}
        {Lisp-Entry "compare-object" method #f 64 20 64 34 (":not-equal" "else" ":equal" "get-ip~" "get-ip" "=" ":incompatible" "Host" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 73 20 73 25 ("present-host" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "get-name" method #f 84 18 84 26 ("address" "address->ip" "ip" "or" "ip->name" "set!" "name" "unless")}
        {Lisp-Entry "get-address" method #f 92 18 92 29 ("name" "name->ip" "ip" "or" "ip->address" "set!" "address" "unless")}
        {Lisp-Entry "get-ip" method #f 100 18 100 24 ("get-address" "address->ip" "set!" "ip" "unless")}
        {Lisp-Entry "present" method #f 113 18 113 25 ("get-address" "name" "or")}
        {Lisp-Entry "present-host" method #f 117 18 117 30 ("ip" "address" "format" "name" "origin" "case")}
        {Lisp-Entry "present-compact" method #f 124 18 124 33 ("->string" "ip" "address" "name" "origin" "case")}}}})
"Server-Panel"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "server" "Server-Panel.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.server.Server-Panel" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.window" "jazz.system" "jazz.io" "jazz.debuggee")}
      {Lisp-Entry "Server-Panel" class #f 46 7 46 19 ("Object")
        {Lisp-Entry "prompt" definition #f 54 14 54 20 ()}
        {Lisp-Entry "display-backtrace?" definition #f 57 14 57 32 ()}
        {Lisp-Entry "run-loop" method #f 61 11 61 19 ("continuation-return" "display-continuation-backtrace" "cont" "display-backtrace?" "display-exception" "with-exception-handler" "continuation-capture" "empty-string?" "eof-object?" "read-line" "prompt" "display" "newline" "when" "newline?" "loop" "server-version" "server-version~" "present" "present~" "set-debug?" "set-debug?~" "debug?" "get-hits" "get-hits~" "output-server-info" "class-of" "category-identifier" "server-name" "server-name~" "restart~" "wait-stopped" "wait-stopped~" "stop~" "started" "with-exception-filter" "get-controller-debugger" "stopped" "get-state" "get-state~" "state" "os-exception-code" "os-exception-message" "os-exception?" "cond" "exc" "format-exception" "error?:" "wait-started" "wait-started~" "start~" "start-stopped" "server-service" "server-service~" "server-host" "server-host~" "or" "server-at" "get-process" "exit-process" "exit-process~" "force-output" "with-system-exception-debugger" "detach-from-controller" "format" "select-console" "get-console-port" "current-thread" "start-repl-thread" "debugger:" "setup-debuggee" "execute-event" "debugger" "car" "get-debug?" "get-debug?~" "not" "null?" "if" "server-debug" "server-info" "restart-server" "stop-server" "start-server" "error" "else" "quit-command" "quit" "help-command" "?" "help" "repl-command" "repl" "detach-command" "detach" "attach-command" "attach" "debug-command" "debug" "info-command" "info" "restart-command" "restart" "stop-command" "stop" "start-command" "start" "case" "read-all" "arguments" "read" "let" "lambda" "call-with-input-string" "command" "process-command" "console-output-port" "console-input-port" "set!" "setup-input/output" "output" "input" "define" "server")}
        {Lisp-Entry "output-server-info" method #f 260 29 260 47 ("output")}}}})
"Session"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "Session.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.http.Session" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.network" "jazz.library")}
      {Lisp-Entry "Session" class #f 44 7 44 14 ("real-time" "3600" "initialize" "Object")
        {Lisp-Entry "id" slot #f 47 8 47 10 ()}
        {Lisp-Entry "get-id" accessor #f 47 55 47 63 ()}
        {Lisp-Entry "session-timeout" slot #f 48 8 48 23 ()}
        {Lisp-Entry "get-session-timeout" accessor #f 48 58 48 66 ()}
        {Lisp-Entry "set-session-timeout" accessor #f 48 58 48 66 ()}
        {Lisp-Entry "last-access-time" slot #f 49 8 49 24 ()}
        {Lisp-Entry "get-last-access-time" accessor #f 49 58 49 66 ()}
        {Lisp-Entry "set-last-access-time" accessor #f 49 58 49 66 ()}
        {Lisp-Entry "properties" slot #f 50 8 50 18 ()}
        {Lisp-Entry "get-properties" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("self" "id~self" "set!" "nextmethod" "id")}
        {Lisp-Entry "print" method #f 58 20 58 25 ("id" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "expired?" method #f 64 26 64 34 ("session-timeout" "last-access-time" "real-time" "-" "<")}
        {Lisp-Entry "end-session" method #f 68 26 68 37 ()}
        {Lisp-Entry "Not-Found" definition #f 77 14 77 23 ("not-found" "Box")}
        {Lisp-Entry "get-property" method #f 81 26 81 38 ("error" "when" "neq?" "if" "Not-Found" "not-found:" "properties" "getf" "value" "let" "error?" "error?:" "name")}
        {Lisp-Entry "set-property" method #f 89 26 89 38 ("addf" "set!" "setf" "properties" "getprop" "if" "value" "name")}}}})
"Session-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "Session-Manager.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.http.Session-Manager" module #f 38 18 38 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.network.http.Session" "jazz.network" "jazz.library")}
      {Lisp-Entry "Session-Manager" class #f 50 7 50 22 ("make-mutex" "0" "initialize" "Object")
        {Lisp-Entry "id-counter" slot #f 53 8 53 18 ()}
        {Lisp-Entry "get-id-counter" accessor #f 53 49 53 57 ()}
        {Lisp-Entry "sessions" slot #f 54 8 54 16 ()}
        {Lisp-Entry "session-manager-lock" slot #f 56 8 56 28 ()}
        {Lisp-Entry "new-session" method #f 59 18 59 29 ("mutex-unlock!" "increase!" "cons" "sessions" "set!" "id-counter" "Session" "new" "session" "let" "session-manager-lock" "mutex-lock!")}
        {Lisp-Entry "end-session" method #f 68 18 68 29 ("end-session" "end-session~" "mutex-unlock!" "remove!" "sessions" "set!" "session-manager-lock" "mutex-lock!" "session")}
        {Lisp-Entry "get-session" method #f 76 18 76 29 ("end-session" "expired?" "expired?~" "if" "when" "sessions" "get-id" "get-id~" "=" "lambda" "find-if" "session" "0" "session-id" "let" "port" "request")}}}})
"TCP-Client"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "host" "TCP-Client.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.host.TCP-Client" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "TCP-Client" class #f 40 7 40 17 ("Object")
        {Lisp-Entry "port" slot #f 43 8 43 12 ()}}}})
"TCP-Server"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "host" "TCP-Server.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.host.TCP-Server" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.network" "jazz.library")}
      {Lisp-Entry "TCP-Server" class #f 44 7 44 17 ("0" "stopped" "initialize" "Object")
        {Lisp-Entry "name" slot #f 47 8 47 12 ()}
        {Lisp-Entry "get-name" accessor #f 47 54 47 62 ()}
        {Lisp-Entry "host" slot #f 48 8 48 12 ()}
        {Lisp-Entry "get-host" accessor #f 48 54 48 62 ()}
        {Lisp-Entry "service" slot #f 49 8 49 15 ()}
        {Lisp-Entry "get-service" accessor #f 49 54 49 62 ()}
        {Lisp-Entry "socket-info" slot #f 50 8 50 19 ()}
        {Lisp-Entry "get-socket-info" accessor #f 50 54 50 62 ()}
        {Lisp-Entry "server-port" slot #f 51 8 51 19 ()}
        {Lisp-Entry "get-server-port" accessor #f 51 57 51 65 ()}
        {Lisp-Entry "set-server-port" accessor #f 51 57 51 65 ()}
        {Lisp-Entry "server-thread" slot #f 52 8 52 21 ()}
        {Lisp-Entry "started-condition" slot #f 53 8 53 25 ()}
        {Lisp-Entry "state" slot #f 54 8 54 13 ()}
        {Lisp-Entry "hits" slot #f 55 8 55 12 ()}
        {Lisp-Entry "get-hits" accessor #f 55 54 55 62 ()}
        {Lisp-Entry "debug?" slot #f 56 8 56 14 ()}
        {Lisp-Entry "get-debug?" accessor #f 56 57 56 65 ()}
        {Lisp-Entry "set-debug?" accessor #f 56 57 56 65 ()}
        {Lisp-Entry "reuse-address?" slot #f 57 8 57 22 ()}
        {Lisp-Entry "get-reuse-address?" accessor #f 57 57 57 65 ()}
        {Lisp-Entry "set-reuse-address?" accessor #f 57 57 57 65 ()}
        {Lisp-Entry "connection-handler" slot #f 58 8 58 26 ()}
        {Lisp-Entry "initialize" method #f 61 20 61 30 ("connection-handler~self" "reuse-address?~self" "debug?~self" "make-condition" "started-condition" "started-condition~self" "server-thread" "server-thread~self" "socket-info" "socket-info~self" "service~self" "host~self" "self" "name~self" "set!" "nextmethod" "connection-handler" "reuse-address?" "debug?" "service" "host" "name" "bind-keywords" "rest")}
        {Lisp-Entry "destroy" method #f 75 20 75 27 ("nextmethod" "close-port" "server-port" "when")}
        {Lisp-Entry "get-state" method #f 86 18 86 27 ("state")}
        {Lisp-Entry "set-state" method #f 90 11 90 20 ("state" "set!" "value")}
        {Lisp-Entry "create-thread" method #f 99 29 99 42 ("new-thread" "apply" "rest")}
        {Lisp-Entry "start" method #f 108 11 108 16 ("start-listener" "starting" "set-state")}
        {Lisp-Entry "stop" method #f 113 11 113 15 ("set!" "thread-exit" "thread-interrupt!" "server-thread" "when" "stopping" "set-state")}
        {Lisp-Entry "restart" method #f 121 11 121 18 ("start" "wait-stopped" "stop")}
        {Lisp-Entry "wait-started" method #f 127 11 127 23 ("0.25" "thread-sleep!" "error?" "error?:")}
        {Lisp-Entry "wait-stopped" method #f 132 11 132 23 ("0.25" "thread-sleep!" "error?" "error?:")}
        {Lisp-Entry "Server-Timeout" definition #f 142 14 142 28 ("0.25")}
        {Lisp-Entry "server-name" method #f 146 29 146 40 ("tcp-server" "get-name" "or")}
        {Lisp-Entry "server-version" method #f 151 29 151 43 ("0" "1" "Version")}
        {Lisp-Entry "server-host" method #f 155 29 155 40 ("get-host")}
        {Lisp-Entry "server-service" method #f 159 29 159 43 ("get-service")}
        {Lisp-Entry "server-hit" method #f 163 29 163 39 ("hits" "increase!")}
        {Lisp-Entry "connection-name" method #f 167 29 167 44 ("tcp-connection")}
        {Lisp-Entry "start-listener" method #f 171 11 171 25 ("server-name" "connection-name" "accept-connection" "unwind-protect" "server-hit" "read" "port" "loop" "proper-tail-calls" "declare" "create-thread" "thread-start!" "server-thread" "started" "tcp-server-socket-info" "reuse-address?" "reuse-address:" "cr-lf" "eol-encoding:" "port-number:" "server-address:" "list" "open-tcp-server" "throw" "socket-info" "set!" "stopped" "set-state" "close-port" "server-port" "when" "exc" "lambda" "with-exception-filter" "server-service" "resolve-service" "number" "server-host" "resolve-host" "address" "let")}
        {Lisp-Entry "listening-host" method #f 207 11 207 25 ("socket-info-address" "socket-info" "and")}
        {Lisp-Entry "listening-port" method #f 211 11 211 25 ("socket-info-port-number" "socket-info" "and")}
        {Lisp-Entry "accept-connection" method #f 220 29 220 46 ("process-connection" "port")}
        {Lisp-Entry "process-connection" method #f 224 29 224 47 ("connection-handler" "when" "port")}}}})
"Web-Server"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "Web-Server.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.http.Web-Server" module #f 38 18 38 46 ("jazz")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("webserver" "jazz.network.http.Session-Manager" "jazz.network.http.Dispatcher" "jazz.network" "jazz.jml" "jazz.io")}
      {Lisp-Entry "Web-Server" class #f 49 7 49 17 ("8080" "Session-Manager" "HTTP-Dispatcher" "new" "initialize" "Object")
        {Lisp-Entry "dispatcher" slot #f 52 8 52 18 ()}
        {Lisp-Entry "get-dispatcher" accessor #f 52 69 52 77 ()}
        {Lisp-Entry "set-dispatcher" accessor #f 52 69 52 77 ()}
        {Lisp-Entry "session-manager" slot #f 53 8 53 23 ()}
        {Lisp-Entry "get-session-manager" accessor #f 53 69 53 77 ()}
        {Lisp-Entry "set-session-manager" accessor #f 53 69 53 77 ()}
        {Lisp-Entry "port-number" slot #f 54 8 54 19 ()}
        {Lisp-Entry "get-port-number" accessor #f 54 69 54 77 ()}
        {Lisp-Entry "set-port-number" accessor #f 54 69 54 77 ()}
        {Lisp-Entry "gambit-webserver" slot #f 55 8 55 24 ()}
        {Lisp-Entry "get-gambit-webserver" accessor #f 55 69 55 77 ()}
        {Lisp-Entry "set-gambit-webserver" accessor #f 55 69 55 77 ()}
        {Lisp-Entry "server-thread" slot #f 56 8 56 21 ()}
        {Lisp-Entry "get-server-thread" accessor #f 56 69 56 77 ()}
        {Lisp-Entry "set-server-thread" accessor #f 56 69 56 77 ()}
        {Lisp-Entry "initialize" method #f 59 20 59 30 ("port-number" "set!" "nextmethod" "8080" "port" "port:")}
        {Lisp-Entry "start" method #f 69 18 69 23 ("thread-start!" "web-server-thread" "http-server-start!" "new-thread" "server-thread" "dispatcher:" "port-number" "port-number:" "make-http-server" "gambit-webserver" "set!" "self" "dispatcher" "dispatch" "dispatch~" "content:" "headers:" "or" "get-parameters:" "uri-path" "uri:" "http-method:" "HTTP-Request" "new" "request" "let" "content" "headers" "parameters" "uri" "method" "connection" "lambda" "gambit-webserver-dispatch-hook" "define")}
        {Lisp-Entry "stop" method #f 89 18 89 22 ("set!" "thread-exit" "thread-interrupt!" "server-thread" "when")}}}})
"_http"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "http" "_http.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.http" module #f 37 8 37 25 ("jazz")
      {Lisp-Entry "url-decode" definition #f 45 20 45 30 ("get-output-string" "else" "integer->char" "3" "1" "+" "subseq" "parse-hexadecimal" "value" "increase!" "write-char" "eqv?" "cond" "element" "c" "<" "while" "0" "n" "cardinality" "len" "open-output-string" "output" "let" "string")}
      {Lisp-Entry "url-encode" definition #f 64 20 64 30 ("get-output-string" "write-char" "else" "char->integer" "memv?" "format" "eqv?" "cond" "c" "lambda" "for-each" "open-output-string" "output" "let" "string")}}})
"_network"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "_network.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.network.autoload")}
      {Lisp-Entry "host->string" definition #f 43 20 43 32 ("3" "2" "1" "0" "u8vector-ref" "format" "host")}
      {Lisp-Entry "string->host" definition #f 51 20 51 32 ("string->number" "map" "u8vector" "apply" "numeric?" "every?" "if" "split" "parts" "let" "string")}
      {Lisp-Entry "port->string" definition #f 58 20 58 32 ("number->string" "port")}
      {Lisp-Entry "string->port" definition #f 62 20 62 32 ("string->number" "string")}
      {Lisp-Entry "parse-host/service" definition #f 66 20 66 38 ("+" "string->port" "1" "-" "subseq" "0" "=" "string->host" "values" "not" "if" "cardinality" "len" "find" "pos" "let" "str")}
      {Lisp-Entry "encode-host/port" definition #f 79 20 79 36 ("port->string" "host->string" "format" "port" "host")}
      {Lisp-Entry "command-host/service" definition #f 85 20 85 40 ("values" "parse-host/service" "if" "command-argument" "arg" "let" "name")}
      {Lisp-Entry "resolve-host" definition #f 97 20 97 32 ("get-address" "get-address~" "not" "if" "host")}
      {Lisp-Entry "Port-Numbers" definition #f 110 12 110 24 ("32000" "router-server" "80" "http" "7" "echo" "0" "any")}
      {Lisp-Entry "resolve-service" definition #f 117 20 117 35 ("error" "cdr" "Port-Numbers" "assq" "pair" "let" "integer?" "if" "service")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "autoload.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.autoload" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("Server-Panel" "jazz.network.server.Server-Panel" "TCP-Server" "jazz.network.host.TCP-Server" "TCP-Client" "jazz.network.host.TCP-Client" "Host" "jazz.network.host.Host" "Web-Server" "jazz.network.http.Web-Server" "HTTP-Request-Handler" "jazz.network.http.Handler" "HTTP-Dispatcher" "jazz.network.http.Dispatcher" "Session-Manager" "jazz.network.http.Session-Manager" "Session" "jazz.network.http.Session" "HTTP-Response" "jazz.network.http.HTTP-Response" "HTTP-Request" "jazz.network.http.HTTP-Request" "HTTP-Message" "jazz.network.http.HTTP-Message" "Default-404-Handler" "jazz.network.http.Default-404-Handler" "Cookie" "autoload" "jazz.network.http.Cookie")}}})
"install"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "install.scm"} 236918188. scheme
    {Lisp-Entry "jazz.network.install" unit #f 37 6 37 26 ()
      {Lisp-Entry "Host" define ("literal") 40 21 40 25 ("construct-host" "jazz.network.literals" "jazz.network.literals:construct-host")}}})
"literals"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "literals.jazz"} 236918188. jazz
    {Lisp-Entry "jazz.network.literals" module #f 37 8 37 29 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.network")}
      {Lisp-Entry "construct-host" definition #f 48 21 48 35 ("Host" "new" "apply" "rest")}}})
"smtp"
 ({Lisp-File-Entry {File :context "src" "jazz" "network" "smtp.jazz"} 240045310. jazz
    {Lisp-Entry "jazz.network.smtp" module #f 0 8 0 25 ("jazz")
      {Lisp-Entry "SMTP-Client" class #f 3 7 3 18 ("Object")
        {Lisp-Entry "port" slot #f 6 8 6 12 ()}
        {Lisp-Entry "initialize" method #f 9 20 9 30 ("error" "else" "auth-plain" "auth-login" "member?" "cond" "get-login-methods" "login-methods" "cdr" "commands" "let*" "format" "display" "get-reply" "keep-alive:" "line" "buffering:" "cr-lf" "eol-encoding:" "server-address:" "list" "open-tcp-client" "port" "set!" "password" "password:" "username" "username:" "25" "port-number" "port-number:" "server-address")}
        {Lisp-Entry "destroy" method #f 28 20 28 27 ("nextmethod" "close-port" "port" "display")}
        {Lisp-Entry "get-reply" method #f 33 11 33 20 ("get-reply" "string-length" "4" "substring" "cons" "format" "string-starts-with?" "unless" "error" "eof-object?" "if" "port" "read-line" "reply" "let" "invalid" "code")}
        {Lisp-Entry "get-login-methods" method #f 46 11 46 28 ("item" "return:" "string-starts-with?" "str" "target" "lambda" "test:" "find" "split" "cdr" "commands")}
        {Lisp-Entry "auth-login" method #f 49 11 49 21 ("error" "lambda" "newline" "ascii-string->base64-string" "get-reply" "port" "display" "password" "username")}
        {Lisp-Entry "auth-plain" method #f 60 11 60 21 ("throw" "lambda" "newline" "string->list" "append" "list->string" "ascii-string->base64-string" "get-reply" "port" "display" "password" "username")}
        {Lisp-Entry "send-mail" method #f 71 11 71 20 ("begin" "recipient" "error" "get-reply" "newline" "cdr" "elem" "lambda" "for-each" "port" "car" "format" "display" "empty?" "not" "when" "code" "lst" "loop-recipient-list" "define" "content" "recipients" "string" "<string>" "origin")}}
      {Lisp-Entry "make-mime-header" definition #f 103 20 103 36 ("join" "format" "string-append" "bcc" "bcc:" "cc" "cc:" "subject" "to" "from")}
      {Lisp-Entry "separate-lines" definition #f 112 13 112 27 ("+" "else" "substring" "string-append" "-" "<" ">=" "cond" "0" "index" "recurse" "string-length" "length" "let" "ch-size" "string")}
      {Lisp-Entry "file->u8vector" definition #f 125 20 125 34 ("append-u8vectors" "cons" "u8vector-shrink!" "zero?" "if" "0" "read-subu8vector" "l" "1024" "make-u8vector" "vector" "let*" "read-vectors" "define" "lambda" "parse" "parse~" "with-input-from-file" "file")}
      {Lisp-Entry "file->base64-string" definition #f 139 20 139 39 ("file->u8vector" "u8vector->base64-string" "file")}
      {Lisp-Entry "make-plain-mime-message" definition #f 143 20 143 43 ("string-append" "body" "header")}
      {Lisp-Entry "make-multipart-mime-message" definition #f 150 20 150 47 ("join" "72" "file->base64-string" "separate-lines" "get-name" "get-name~" "string-append" "file" "lambda" "map" "format" "list" "append" "parts" "boundary" "let*" "attachments" "body" "header")}
      {Lisp-Entry "make-mime-message" definition #f 168 20 168 37 ("make-multipart-mime-message" "make-plain-mime-message" "null?" "if" "make-mime-header" "header" "let" "attachments" "attachments:" "bcc" "bcc:" "cc" "cc:" "message" "subject" "to" "from")}
      {Lisp-Entry "send-message" definition #f 175 20 175 32 ("close" "close~" "send-mail" "send-mail~" "SMTP-Client" "new" "client" "let" "password" "password:" "username" "username:" "server" "to" "from" "message")}
      {Lisp-Entry "base64-string->ascii-string" definition #f 181 13 181 40 ("base64-string->u8vector" "u8vector->list" "integer->char" "map" "list->string" "str")}
      {Lisp-Entry "ascii-string->base64-string" definition #f 188 13 188 40 ("string->list" "char->integer" "map" "list->u8vector" "u8vector->base64-string" "str")}}})
