"Bitmap-File"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "resource" "Bitmap-File.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.resource.Bitmap-File" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.project" "jazz.library")}
      {Lisp-Entry "Bitmap-File" class #f 44 7 44 18 ("Resource-File")
        {Lisp-Entry "resource-class" method #f 47 20 47 34 ("Image-Resource")}
        {Lisp-Entry "resource-marker" method #f 51 20 51 35 ()}}}})
"Configuration"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "project" "Configuration.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.project.Configuration" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.system" "jazz.library" "jazz.jml" "jazz.io" "jazz.ide" "jazz.designer")}
      {Lisp-Entry "Configuration" class #f 49 7 49 20 ("initialize" "Component")
        {Lisp-Entry "title" property #f 52 12 52 17 ()}
        {Lisp-Entry "get-title" accessor #f 52 42 52 50 ()}
        {Lisp-Entry "set-title" accessor #f 52 42 52 50 ()}
        {Lisp-Entry "get-class-descriptor" method #f 60 25 60 45 ("Configuration-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 69 11 69 17 ()
        {Lisp-Entry "import" anonymous #f 72 1 72 7 ("jazz.designer")}
        {Lisp-Entry "Configuration-Descriptor" class #f 75 7 75 31 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f 78 3 78 7 ("title:" "name" "name:" "Property-Descriptor" "title" "categorized" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image" "image:" "install")}
          {Lisp-Entry "component-presentation-property?" method #f 84 20 84 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 88 20 88 46 ("get-title" "component")}
          {Lisp-Entry "component-set-presentation" method #f 92 20 92 46 ("title" "title:" "set-property" "presentation" "designer" "component")}
          {Lisp-Entry "component-property-domain" method #f 96 20 96 45 ("nextmethod" "else" "nullable?" "nullable?:" "String-Domain" "new" "title" "field-name" "case" "property" "component")}}}}})
"Cursor-File"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "resource" "Cursor-File.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.resource.Cursor-File" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.project" "jazz.library")}
      {Lisp-Entry "Cursor-File" class #f 44 7 44 18 ("Resource-File")
        {Lisp-Entry "resource-class" method #f 47 20 47 34 ("Cursor-Resource")}
        {Lisp-Entry "resource-marker" method #f 51 20 51 35 ()}}}})
"Icon-File"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "resource" "Icon-File.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.resource.Icon-File" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.project" "jazz.library")}
      {Lisp-Entry "Icon-File" class #f 44 7 44 16 ("Resource-File")
        {Lisp-Entry "resource-class" method #f 47 20 47 34 ("Icon-Resource")}
        {Lisp-Entry "resource-marker" method #f 51 20 51 35 ()}}}})
"New-Document-Dialog"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "New-Document-Dialog.jazz"} 1298812223 jazz
    {Lisp-Entry "jazz.project.workbench.New-Document-Dialog" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.runtime" "jazz.library" "jazz.jml" "jazz.io" "jazz.graphic")}
      {Lisp-Entry "New-Document-Dialog" class #f 49 7 49 26 ("initialize" "View")
        {Lisp-Entry "directory" property #f 52 12 52 21 ()}
        {Lisp-Entry "get-directory" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "set-directory" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "form" anonymous #f 55 3 55 7 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler" "action-handler:" "default?" "default?:" "24" "80" "227" "167" "ok" "Push-Button" "213" "editable?" "editable?:" "body" "scroller" "on-moniker-update" "moniker-update-handler" "moniker-update-handler:" "display-protocol?" "display-protocol?:" "dir" "protocol" "protocol:" "directory" "Moniker-Widget" "directory-border" "54" "143" "directory-label" "on-content-change" "content-change-handler" "content-change-handler:" "Text-Base" "Text-Style" "base-style" "base-style:" "focus-selects-all?" "focus-selects-all?:" "show-unfocused-selection?" "show-unfocused-selection?:" "accepts-returns?" "accepts-returns?:" "top-padding" "top-padding:" "2" "left-padding" "left-padding:" "name-text" "Name-Text-View" "hscroll?" "hscroll?:" "19" "224" "109" "241" "name-border" "33" "111" "182" "name-label" "display-images?" "display-images?:" "controls?" "controls?:" "toplevel-controls?" "toplevel-controls?:" "176" "width" "width:" "Tree-Node-Column" "on-escape-press" "escape-press-handler" "escape-press-handler:" "on-return-press" "return-press-handler" "return-press-handler:" "on-double-click" "Event-Handler" "double-click-handler" "double-click-handler:" "on-selection-change" ":form" "Selection-Handler" "selection-handler" "selection-handler:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "can-select-empty?" "can-select-empty?:" "row" "selection-mode" "selection-mode:" "15" "default-row-height" "default-row-height:" "show-header?" "show-header?:" ":images" "portfolio" "portfolio:" "kinds" "Tree-View" "fill" "layout-type" "layout-type:" "content" "!" "document" "vscroll?" "vscroll?:" "Scroller-View" "entry" "style" "style:" "edge" "border-type" "border-type:" "137" "140" "64" "13" "kind-border" "Border-View" "8" "50" "0" "Horizontal-Line" "Label" "27" "30" "description" "Caption" "Font" "font" "font:" "16" "350" "9" "10" "Point" "position" "position:" "title:" "title" "name" "name:" "Label-View" "261" "500" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "finish" method #f 81 20 81 26 ("directory" "set-moniker" "name-text" "locate" "set-string-content" "setup-kinds" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 88 20 88 33 ("kinds" "locate" "acquire-focus")}
        {Lisp-Entry "Kinds" definition #f 97 14 97 19 ("text" "sql" "java" "c" "lisp" "jazz" "template" "template:" "scheme" "kind:" "name" "name:" "kind" "kinds")}
        {Lisp-Entry "setup-kinds" method #f 116 11 116 22 ("update-ok" "ensure-displayed" "0" "set-single-selection" "get-children" "child" "for-each" "user-data" "user-data:" "image" "image:" "title:" "Tree-Node" "new" "list" "children" "children:" "expanded" "state" "state:" "father:" "add-row" "row" "icon" "name" "get-property" "title" "let*" "father" "node" "lambda" "insert" "letrec" "remove-every-row" "Kinds" "parse-jml" "root" "name-text" "text" "kinds" "locate" "tree" "let")}
        {Lisp-Entry "host-title" method #f 142 25 142 35 ()}
        {Lisp-Entry "validate-dialog" method #f 151 20 151 35 ("throw-cancel" "message-box" "when" "validate-name" "message" "format" "new-file" "destination" "extract-extension" "extension" "let*" "get-modal-result" "name" "directory" "template" "kind" "receive")}
        {Lisp-Entry "get-modal-result" method #f 161 20 161 36 ("name-text" "get-string-content" "directory" "locate" "get-moniker" "template" "kind" "get-property" "values" "selected-kind" "node" "let")}
        {Lisp-Entry "selected-kind" method #f 166 11 166 24 ("get-user-data" "node" "get-row" "row" "get-single-selection" "rank" "kinds" "locate" "tree" "let*")}
        {Lisp-Entry "get-tab-stops" method #f 179 20 179 33 ("directory" "get-text" "name-text" "kinds" "locate" "list")}
        {Lisp-Entry "on-selection-change" method #f 191 11 191 30 ("update-ok" "evt")}
        {Lisp-Entry "on-content-change" method #f 195 11 195 28 ("update-ok" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 199 11 199 28 ("update-ok" "evt")}
        {Lisp-Entry "on-double-click" method #f 203 11 203 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 211 20 211 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 219 20 219 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update-ok" method #f 229 11 229 20 ("name-text" "get-string-content" "empty-string?" "not" "directory" "get-moniker" "kind" "selected-kind" "get-property" "and" "ok" "locate" "set-enabled?")}
        {Lisp-Entry "validate-name" definition #f 233 15 233 28 ("else" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "let" "jazz" "memq?" "parse" "format" "exists?" "cond" "destination" "name" "kind")}
        {Lisp-Entry "Header-Color" definition #f 258 14 258 26 ("255" "blue" "blue:" "green" "green:" "120" "red" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 262 20 262 24 ("Header-Color" "1" "White" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Name-Text-View" class #f 272 7 272 21 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 275 20 275 36 ("new-text-context-menu")}}}})
"New-Package-Dialog"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "repositories" "New-Package-Dialog.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.repositories.New-Package-Dialog" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.io" "jazz.graphic")}
      {Lisp-Entry "New-Package-Dialog" class #f 48 7 48 25 ("initialize" "View")
        {Lisp-Entry "repository" property #f 51 12 51 22 ()}
        {Lisp-Entry "get-repository" accessor #f 51 47 51 55 ()}
        {Lisp-Entry "set-repository" accessor #f 51 47 51 55 ()}
        {Lisp-Entry "form" anonymous #f 54 3 54 7 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler" "action-handler:" "default?" "default?:" "24" "80" "227" "167" "ok" "Push-Button" "213" "body" "scroller" "repository" "Combo-Box" "Entry-Border" "Medium" "Color" "border-color" "border-color:" "1" "Rect" "border-insets" "border-insets:" "22" "262" "139" "145" "repository-border" "64" "143" "repository-label" "on-content-change" "content-change-handler" "content-change-handler:" "on-escape-press" "escape-press-handler" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler" "return-press-handler:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "Text-Base" "Text-Style" "base-style" "base-style:" "focus-selects-all?" "focus-selects-all?:" "show-unfocused-selection?" "show-unfocused-selection?:" "accepts-returns?" "accepts-returns?:" "top-padding" "top-padding:" "2" "left-padding" "left-padding:" "name-text" "Name-Text-View" "fill" "layout-type" "layout-type:" "content" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "Scroller-View" "entry" "style" "style:" "edge" "border-type" "border-type:" "19" "258" "109" "147" "name-border" "Border-View" "33" "111" "82" "name-label" "8" "50" "0" "Horizontal-Line" "Label" "27" "30" "description" "Caption" "Font" "font" "font:" "16" "350" "9" "10" "Point" "position" "position:" "title:" "title" "name" "name:" "Label-View" "261" "500" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "finish" method #f 76 20 76 26 ("setup-repositories" "setup-name" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 82 20 82 33 ("name-text" "locate" "acquire-focus")}
        {Lisp-Entry "setup-name" method #f 91 11 91 21 ("name-text" "locate" "set-string-content")}
        {Lisp-Entry "setup-repositories" method #f 95 11 95 29 ("car" "Projects" "find-repository" "or" "set-value" "repository-name" "->string" "list" "lambda" "map" "set-choices" "repository-title" "key" "key:" "get-repositories" "string-ci<?" "sort" "repositories" "repository" "locate" "combo" "let")}
        {Lisp-Entry "host-title" method #f 111 25 111 35 ()}
        {Lisp-Entry "validate-dialog" method #f 120 20 120 35 ("throw-cancel" "message-box" "when" "validate-name" "message" "new-directory" "destination" "repository-library-directory" "tokenise-filename" "Directory" "new" "directory" "let*" "get-modal-result" "name" "repository" "receive")}
        {Lisp-Entry "get-modal-result" method #f 130 20 130 36 ("name-text" "get-string-content" "repository" "locate" "get-value" "values")}
        {Lisp-Entry "get-tab-stops" method #f 139 20 139 33 ("repository" "get-body" "name-text" "locate" "list")}
        {Lisp-Entry "on-selection-change" method #f 150 11 150 30 ("update-ok" "evt")}
        {Lisp-Entry "on-content-change" method #f 154 11 154 28 ("update-ok" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 158 11 158 28 ("update-ok" "evt")}
        {Lisp-Entry "on-double-click" method #f 162 11 162 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 170 20 170 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 178 20 178 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update-ok" method #f 188 11 188 20 ("name-text" "get-string-content" "empty-string?" "not" "ok" "locate" "set-enabled?")}
        {Lisp-Entry "validate-name" definition #f 192 15 192 28 ("else" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "let" "parse" "format" "exists?" "cond" "destination" "name")}
        {Lisp-Entry "Header-Color" definition #f 214 14 214 26 ("255" "blue" "blue:" "green" "green:" "120" "red" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 218 20 218 24 ("Header-Color" "1" "White" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Name-Text-View" class #f 228 7 228 21 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 231 20 231 36 ("new-text-context-menu")}}}})
"New-Project-Dialog"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "New-Project-Dialog.jazz"} 1297259530 jazz
    {Lisp-Entry "jazz.project.workbench.New-Project-Dialog" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.io" "jazz.graphic")}
      {Lisp-Entry "New-Project-Dialog" class #f 48 7 48 25 ("View")
        {Lisp-Entry "form" anonymous #f 51 3 51 7 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler" "action-handler:" "default?" "default?:" "24" "80" "227" "167" "ok" "Push-Button" "213" "editable?" "editable?:" "body" "scroller" "on-moniker-update" "moniker-update-handler" "moniker-update-handler:" "display-protocol?" "display-protocol?:" "dir" "protocol" "protocol:" "directory" "Moniker-Widget" "directory-border" "143" "directory-label" "on-content-change" "content-change-handler" "content-change-handler:" "Text-Base" "Text-Style" "base-style" "base-style:" "focus-selects-all?" "focus-selects-all?:" "show-unfocused-selection?" "show-unfocused-selection?:" "accepts-returns?" "accepts-returns?:" "top-padding" "top-padding:" "2" "left-padding" "left-padding:" "Name-Text-View" "hscroll?" "hscroll?:" "19" "218" "109" "247" "name-border" "33" "111" "182" "name-label" "display-images?" "display-images?:" "controls?" "controls?:" "toplevel-controls?" "toplevel-controls?:" "176" "width" "width:" "Tree-Node-Column" "on-escape-press" "escape-press-handler" "escape-press-handler:" "on-return-press" "return-press-handler" "return-press-handler:" "on-double-click" "Event-Handler" "double-click-handler" "double-click-handler:" "on-selection-change" ":form" "Selection-Handler" "selection-handler" "selection-handler:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "can-select-empty?" "can-select-empty?:" "row" "selection-mode" "selection-mode:" "15" "default-row-height" "default-row-height:" "show-header?" "show-header?:" ":images" "portfolio" "portfolio:" "kinds" "Tree-View" "fill" "layout-type" "layout-type:" "content" "!" "document" "vscroll?" "vscroll?:" "Scroller-View" "entry" "style" "style:" "edge" "border-type" "border-type:" "137" "140" "64" "13" "kind-border" "Border-View" "8" "50" "0" "Horizontal-Line" "Label" "27" "30" "description" "Caption" "Font" "font" "font:" "16" "350" "9" "10" "Point" "position" "position:" "title:" "title" "name" "name:" "Label-View" "261" "500" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "finish" method #f 77 20 77 26 ("setup-directory" "setup-name" "setup-kinds" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 84 20 84 33 ("kinds" "locate" "acquire-focus")}
        {Lisp-Entry "Kinds" definition #f 93 14 93 19 ("empty?" "empty?:" "template" "template:" "project" "kind:" "name" "name:" "kind" "kinds")}
        {Lisp-Entry "setup-kinds" method #f 105 11 105 22 ("update-ok" "ensure-displayed" "0" "set-single-selection" "get-children" "child" "for-each" "user-data" "user-data:" "image" "image:" "title:" "Tree-Node" "new" "list" "children" "children:" "expanded" "state" "state:" "father:" "add-row" "row" "icon" "get-property" "title" "let*" "father" "node" "lambda" "insert" "letrec" "remove-every-row" "Kinds" "parse-jml" "root" "name" "text" "kinds" "locate" "tree" "let")}
        {Lisp-Entry "setup-name" method #f 126 11 126 21 ("name" "locate" "set-string-content")}
        {Lisp-Entry "setup-directory" method #f 130 11 130 26 ("Settings" "Directory" "set-moniker" "directory" "locate" "widget" "let")}
        {Lisp-Entry "host-title" method #f 140 25 140 35 ()}
        {Lisp-Entry "validate-dialog" method #f 149 20 149 35 ("throw-cancel" "message-box" "when" "validate-name" "message" "new-directory" "destination" "let" "get-modal-result" "directory" "name" "empty?" "template" "kind" "receive")}
        {Lisp-Entry "get-modal-result" method #f 158 20 158 36 ("directory" "get-moniker" "name" "locate" "get-string-content" "empty?" "template" "kind" "get-property" "values" "selected-kind" "node" "let")}
        {Lisp-Entry "selected-kind" method #f 163 11 163 24 ("get-user-data" "node" "get-row" "row" "get-single-selection" "rank" "kinds" "locate" "tree" "let*")}
        {Lisp-Entry "get-tab-stops" method #f 176 20 176 33 ("directory" "get-text" "name" "kinds" "locate" "list")}
        {Lisp-Entry "on-selection-change" method #f 188 11 188 30 ("update-ok" "evt")}
        {Lisp-Entry "on-content-change" method #f 192 11 192 28 ("update-ok" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 196 11 196 28 ("update-ok" "evt")}
        {Lisp-Entry "on-double-click" method #f 200 11 200 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 208 20 208 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 216 20 216 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update-ok" method #f 226 11 226 20 ("name" "get-string-content" "empty-string?" "not" "kind" "selected-kind" "get-property" "and" "ok" "locate" "set-enabled?")}
        {Lisp-Entry "validate-name" definition #f 230 15 230 28 ("else" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "let" "parse" "format" "exists?" "cond" "destination" "name" "kind")}
        {Lisp-Entry "Header-Color" definition #f 252 14 252 26 ("255" "blue" "blue:" "green" "green:" "120" "red" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 256 20 256 24 ("Header-Color" "1" "White" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Name-Text-View" class #f 266 7 266 21 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 269 20 269 36 ("new-text-context-menu")}}}})
"New-Repository-Dialog"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "repositories" "New-Repository-Dialog.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.repositories.New-Repository-Dialog" module #f 37 18 37 65 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "New-Repository-Dialog" class #f 47 7 47 28 ("initialize" "View")
        {Lisp-Entry "directory" property #f 50 12 50 21 ()}
        {Lisp-Entry "get-directory" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "set-directory" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "form" anonymous #f 53 3 53 7 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler" "action-handler:" "default?" "default?:" "24" "80" "227" "167" "ok" "Push-Button" "213" "name-text" "149" "name-border" "151" "name-label" "on-content-change" "content-change-handler" "content-change-handler:" "Text-Base" "Text-Style" "base-style" "base-style:" "accepts-returns?" "accepts-returns?:" "top-padding" "top-padding:" "2" "left-padding" "left-padding:" "dirname-text" "Name-Text-View" "fill" "layout-type" "layout-type:" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "Scroller-View" "125" "dirname-border" "127" "dirname-label" "on-escape-press" "escape-press-handler" "escape-press-handler:" "on-return-press" "return-press-handler" "return-press-handler:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "focus-selects-all?" "focus-selects-all?:" "show-unfocused-selection?" "show-unfocused-selection?:" "editable?" "editable?:" "body" "content" "scroller" "!" "on-moniker-update" ":form" "Event-Handler" "moniker-update-handler" "moniker-update-handler:" "display-protocol?" "display-protocol?:" "dir" "protocol" "protocol:" "directory" "Moniker-Widget" "entry" "style" "style:" "edge" "border-type" "border-type:" "19" "264" "100" "141" "directory-border" "Border-View" "54" "103" "82" "directory-label" "8" "50" "0" "Horizontal-Line" "Label" "27" "30" "description" "Caption" "Font" "font" "font:" "16" "350" "9" "10" "Point" "position" "position:" "title:" "title" "name" "name:" "Label-View" "261" "500" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "finish" method #f 79 20 79 26 ("dirname-text" "set-string-content" "directory" "locate" "set-moniker" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 85 20 85 33 ("dirname-text" "locate" "acquire-focus")}
        {Lisp-Entry "host-title" method #f 94 25 94 35 ()}
        {Lisp-Entry "validate-dialog" method #f 103 20 103 35 ("throw-cancel" "message-box" "when" "validate-name" "message" "empty-string?" "if" "effective-name" "new-directory" "destination" "let*" "get-modal-result" "name" "dirname" "directory" "receive")}
        {Lisp-Entry "get-modal-result" method #f 113 20 113 36 ("name-text" "dirname-text" "get-string-content" "directory" "locate" "get-moniker" "values")}
        {Lisp-Entry "get-tab-stops" method #f 122 20 122 33 ("name-text" "dirname-text" "directory" "locate" "get-text" "list")}
        {Lisp-Entry "on-content-change" method #f 134 11 134 28 ("update-ok" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 138 11 138 28 ("update-ok" "evt")}
        {Lisp-Entry "on-double-click" method #f 142 11 142 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 150 20 150 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 158 20 158 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update-ok" method #f 168 11 168 20 ("dirname-text" "get-string-content" "empty-string?" "not" "directory" "get-moniker" "and" "ok" "locate" "set-enabled?")}
        {Lisp-Entry "validate-name" definition #f 172 15 172 28 ("else" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "let" "string->symbol" "find-repository" "parse" "format" "exists?" "cond" "dirname" "destination" "name")}
        {Lisp-Entry "Header-Color" definition #f 206 14 206 26 ("255" "blue" "blue:" "green" "green:" "120" "red" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 210 20 210 24 ("Header-Color" "1" "White" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Name-Text-View" class #f 220 7 220 21 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 223 20 223 36 ("new-text-context-menu")}}}})
"Package"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "repositories" "Package.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.repositories.Package" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.project" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Package" class #f 46 7 46 14 ("initialize" "Component")
        {Lisp-Entry "title" property #f 49 12 49 17 ()}
        {Lisp-Entry "get-title" accessor #f 49 42 49 50 ()}
        {Lisp-Entry "set-title" accessor #f 49 42 49 50 ()}
        {Lisp-Entry "print" method #f 52 20 52 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-class-descriptor" method #f 64 25 64 45 ("Package-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 73 11 73 17 ()
        {Lisp-Entry "import" anonymous #f 76 1 76 7 ("jazz.designer")}
        {Lisp-Entry "Package-Descriptor" class #f 79 7 79 25 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f 82 3 82 7 ("nullable?" "nullable?:" "domain" "String-Domain" "title:" "name" "name:" "Property-Descriptor" "title" "categorized" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image" "image:" "install")}
          {Lisp-Entry "component-presentation-property?" method #f 89 20 89 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 93 20 93 46 ("class-of" "category-name" "->string" "get-title" "or" "component")}
          {Lisp-Entry "component-set-presentation" method #f 97 20 97 46 ("title" "title:" "set-property" "presentation" "designer" "component")}
          {Lisp-Entry "component-addable-class?" method #f 101 20 101 44 ("Project-Group" "Project-File" "subtype?" "or" "class" "component")}
          {Lisp-Entry "component-get-categorized-addable-classes" method #f 106 20 106 61 ("Project-Group" "reference" "list" "component")}}}}})
"Project"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "project" "Project.jazz"} 1298904206 jazz
    {Lisp-Entry "jazz.project.project.Project" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.project" "jazz.library" "jazz.jml" "jazz.io" "jazz.ide" "jazz.designer")}
      {Lisp-Entry "Project" class #f 51 7 51 14 ("initialize" "Project-File")
        {Lisp-Entry "title" property #f 54 12 54 17 ()}
        {Lisp-Entry "get-title" accessor #f 54 55 54 63 ()}
        {Lisp-Entry "set-title" accessor #f 54 55 54 63 ()}
        {Lisp-Entry "icon" property #f 55 12 55 16 ()}
        {Lisp-Entry "get-icon" accessor #f 55 55 55 63 ()}
        {Lisp-Entry "set-icon" accessor #f 55 55 55 63 ()}
        {Lisp-Entry "owner" property #f 56 12 56 17 ()}
        {Lisp-Entry "get-owner" accessor #f 56 55 56 63 ()}
        {Lisp-Entry "set-owner" accessor #f 56 55 56 63 ()}
        {Lisp-Entry "copyright" property #f 57 12 57 21 ()}
        {Lisp-Entry "get-copyright" accessor #f 57 55 57 63 ()}
        {Lisp-Entry "set-copyright" accessor #f 57 55 57 63 ()}
        {Lisp-Entry "version" property #f 58 12 58 19 ()}
        {Lisp-Entry "get-version" accessor #f 58 55 58 63 ()}
        {Lisp-Entry "set-version" accessor #f 58 55 58 63 ()}
        {Lisp-Entry "include-extensions" property #f 59 12 59 30 ()}
        {Lisp-Entry "get-include-extensions" accessor #f 59 55 59 63 ()}
        {Lisp-Entry "set-include-extensions" accessor #f 59 55 59 63 ()}
        {Lisp-Entry "documentation" property #f 60 12 60 25 ()}
        {Lisp-Entry "get-documentation" accessor #f 60 55 60 63 ()}
        {Lisp-Entry "set-documentation" accessor #f 60 55 60 63 ()}
        {Lisp-Entry "editable?" property #f 61 12 61 21 ()}
        {Lisp-Entry "get-editable?" accessor #f 61 55 61 63 ()}
        {Lisp-Entry "set-editable?" accessor #f 61 55 61 63 ()}
        {Lisp-Entry "active?" property #f 62 12 62 19 ()}
        {Lisp-Entry "get-active?" accessor #f 62 55 62 63 ()}
        {Lisp-Entry "set-active?" accessor #f 62 55 62 63 ()}
        {Lisp-Entry "catalog-extensions" property #f 63 12 63 30 ()}
        {Lisp-Entry "get-catalog-extensions" accessor #f 63 55 63 63 ()}
        {Lisp-Entry "set-catalog-extensions" accessor #f 63 55 63 63 ()}
        {Lisp-Entry "catalog-heuristics" property #f 64 12 64 30 ()}
        {Lisp-Entry "get-catalog-heuristics" accessor #f 64 55 64 63 ()}
        {Lisp-Entry "set-catalog-heuristics" accessor #f 64 55 64 63 ()}
        {Lisp-Entry "catalog" slot #f 67 8 67 15 ()}
        {Lisp-Entry "get-catalog" accessor #f 67 40 67 48 ()}
        {Lisp-Entry "set-catalog" accessor #f 67 40 67 48 ()}
        {Lisp-Entry "catalog?" property #f 70 23 70 31 ()}
        {Lisp-Entry "get-catalog?" accessor #f 70 56 70 64 ()}
        {Lisp-Entry "set-catalog?" accessor #f 70 56 70 64 ()}
        {Lisp-Entry "form" anonymous #f 73 3 73 7 ("build?" "build?:" "install")}
        {Lisp-Entry "print" method #f 77 20 77 25 ("project-title" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "project-title" method #f 88 26 88 39 ("symbol->string" "name" "if" "title" "or")}
        {Lisp-Entry "get-parent-project" method #f 94 18 94 36 ("Project" "find-ascendant")}
        {Lisp-Entry "concrete?" method #f 103 26 103 35 ()}
        {Lisp-Entry "project-context" method #f 112 18 112 33 ("get-file-form" "get-data" "get-context")}
        {Lisp-Entry "contextualize-pathname" method #f 116 18 116 40 ("set-context" ":context" "cons" "class-of" "context-pathname" "get-path" "File" "new" "subpath" "not" "if" "project-context" "context" "let" "pathname")}
        {Lisp-Entry "catalog-name" method #f 133 29 133 41 ("title" "string->symbol" "name" "or")}
        {Lisp-Entry "load-catalogs" method #f 144 18 144 31 ("load-catalog" "for-each-project" "include-inactives?" "include-inactives?:")}
        {Lisp-Entry "load-catalog" method #f 148 18 148 30 ("require-catalog")}
        {Lisp-Entry "require-catalog" method #f 152 18 152 33 ("load-content" "set!" "unless" "get-application" "get-cataloguer" "add-catalog" "create-catalog" "catalog" "let" "create/register-catalog" "define" "report?" "report?:")}
        {Lisp-Entry "create-catalog" method #f 164 11 164 25 ("catalog-output" "catalog-name" "self" "Project-Catalog" "new")}
        {Lisp-Entry "catalog-output-base" method #f 168 29 168 48 ("format" "Workbench" "is?" "not" "or" "if" "get-parent-project" "parent" "catalog-name" "name" "self" "project" "iterate" "let")}
        {Lisp-Entry "catalog-output" method #f 178 29 178 43 ("catalog-output-base" "format" "Profile" "list" "File" "new")}
        {Lisp-Entry "has-content?" method #f 182 19 182 31 ("children" "not-null?")}
        {Lisp-Entry "get-effective-editable?" method #f 191 26 191 49 ("get-parent-project" "get-effective-editable?" "editable?" "unspecified?" "if")}
        {Lisp-Entry "for-each-project" method #f 202 18 202 34 ("or" "when" "level" "descendant" "lambda" "for-each-descendant" "get-active?" "Project" "is?" "self" "neq?" "not" "and" "project" "inactive?" "define" "stop-test" "stop-test:" "include-inactives?" "include-inactives?:" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "fold-projects" method #f 221 18 221 31 ("self" "get-children" "c" "lambda" "for-each" ":skip" "eq?" "get-active?" "or" "Project" "is?" "and" "if" "ps" "let" "s" "f" "x" "fold" "define" "include-inactives?" "include-inactives?:" "seed" "proc")}
        {Lisp-Entry "for-each-file" method #f 243 18 243 31 ("is?" "when" "level" "descendant" "lambda" "for-each-descendant" "Project-File" "type" "proc")}
        {Lisp-Entry "collect-files" method #f 250 18 250 31 ("get-output" "put" "is?" "when" "file" "lambda" "for-each-file" "List-Factory" "new" "fact" "let" "Project-File" "type")}
        {Lisp-Entry "fold-files" method #f 259 18 259 28 ("self" "get-children" "c" "lambda" "for-each" ":skip" "eq?" "is?" "if" "ps" "let" "s" "f" "x" "fold" "define" "Project-File" "type" "seed" "proc")}
        {Lisp-Entry "iterate-files" method #f 274 18 274 31 ("ci=?" "test" "test:" "member?" "not" "or" "get-extension" "ext" "when" "get-source" "file" "let" ":skip" "Project" "is?" "self" "neq?" "and" "if" "seed" "project-file" "lambda" "fold-files" "extensions" "extensions:" "proc")}
        {Lisp-Entry "iterate-catalog-files" method #f 287 18 287 39 ("catalog-extensions" "effective-catalog-extensions" "extensions" "extensions:" "iterate-files" "proc")}
        {Lisp-Entry "project-name" method #f 296 26 296 38 ()}
        {Lisp-Entry "project-test" method #f 305 26 305 38 ("message-box" "rest")}
        {Lisp-Entry "project-run" method #f 314 26 314 37 ("message-box" "rest")}
        {Lisp-Entry "run-arguments" method #f 318 26 318 39 ()}
        {Lisp-Entry "project-debug" method #f 327 26 327 39 ("message-box" "rest")}
        {Lisp-Entry "debug-arguments" method #f 331 26 331 41 ()}
        {Lisp-Entry "project-build" method #f 340 26 340 39 ("message-box")}
        {Lisp-Entry "project-clean" method #f 349 26 349 39 ("message-box")}
        {Lisp-Entry "get-class-descriptor" method #f 358 25 358 45 ("Project-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 367 11 367 17 ()
        {Lisp-Entry "import" anonymous #f 370 1 370 7 ("jazz.designer")}
        {Lisp-Entry "Project-Descriptor" class #f 373 7 373 25 ("Project-File-Descriptor")
          {Lisp-Entry "form" anonymous #f 376 3 376 7 ("editable?" "title:" "name" "name:" "Property-Descriptor" "catalog-heuristics" "catalog-extensions" "active?" "documentation" "include-extensions" "version" "copyright" "owner" "icon" "title" "categorized" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image" "image:" "install")}
          {Lisp-Entry "component-presentation-property?" method #f 392 20 392 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 396 20 396 46 ("project-title" "component")}
          {Lisp-Entry "component-set-presentation" method #f 400 20 400 46 ("title" "title:" "set-property" "presentation" "designer" "component")}
          {Lisp-Entry "component-addable-class?" method #f 404 20 404 44 ("Project-Group" "Project-File" "subtype?" "or" "class" "component")}
          {Lisp-Entry "component-get-categorized-addable-classes" method #f 409 20 409 61 ("Project-Group" "reference" "list" "component")}
          {Lisp-Entry "component-property-domain" method #f 419 20 419 45 ("nextmethod" "else" "Boolean-Domain" "active?" "File-Domain" "documentation" "Value-Domain" "catalog-heuristics" "catalog-extensions" "include-extensions" "nullable?" "nullable?:" "String-Domain" "new" "title" "field-name" "case" "property" "component")}}}}})
"Project-Catalog"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "project" "Project-Catalog.jazz"} 1298321488 jazz
    {Lisp-Entry "jazz.project.project.Project-Catalog" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.project" "jazz.io" "jazz.catalog")}
      {Lisp-Entry "Project-Catalog" class #f 45 7 45 22 ("Filing-Catalog")
        {Lisp-Entry "project" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-project" accessor #f 48 23 48 31 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("self" "project~self" "set!" "nextmethod" "apply" "rest" "project")}
        {Lisp-Entry "get-active?" method #f 61 20 61 31 ("project" "get-active?")}
        {Lisp-Entry "get-extensions" method #f 65 20 65 34 ("project" "get-catalog-extensions")}
        {Lisp-Entry "get-heuristics" method #f 69 20 69 34 ("project" "get-catalog-heuristics")}
        {Lisp-Entry "setup-content" method #f 78 20 78 33 ("nextmethod" "set-context" "context-alias?" "when" "get-file" "file" "file-entry" "for-each" "file-entries" "key" "lambda" "iterate-content" "project" "project-context" "context" "let" "setup-contexts" "define")}
        {Lisp-Entry "iterate-files" method #f 98 20 98 33 ("project" "iterate-catalog-files" "proc")}}}})
"Project-Designer"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "project" "Project-Designer.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.project.Project-Designer" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Project-Designer" class #f 43 7 43 23 ("Designer")
        {Lisp-Entry "print" method #f 46 20 46 25 ("reference" "format" "lambda" "self" "print-unreadable" "readably" "output")}}}})
"Project-Directory"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "file" "Project-Directory.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.file.Project-Directory" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.project" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Project-Directory" class #f 45 7 45 24 ("initialize" "Project-Group")
        {Lisp-Entry "directory" property #f 48 12 48 21 ()}
        {Lisp-Entry "get-directory" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "set-directory" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "get-class-descriptor" method #f 56 25 56 45 ("Project-Directory-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 65 11 65 17 ()
        {Lisp-Entry "import" anonymous #f 68 1 68 7 ("jazz.designer")}
        {Lisp-Entry "Project-Directory-Descriptor" class #f 71 7 71 35 ("Project-Group-Descriptor")
          {Lisp-Entry "form" anonymous #f 74 3 74 7 ("domain" "Directory-Domain" "title" "title:" "name" "name:" "Property-Descriptor" "directory" "categorized" "categorized:" ">" "<properties" "<properties~>" "can-rename?" "can-rename?:" "install")}
          {Lisp-Entry "component-get-presentation" method #f 81 20 81 46 ("get-name" "if" "get-directory" "directory" "let" "component")}}}}})
"Project-File"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "file" "Project-File.jazz"} 1297220039 jazz
    {Lisp-Entry "jazz.project.file.Project-File" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Project-File" class #f 45 7 45 19 ("initialize" "Component")
        {Lisp-Entry "source" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-source" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "set-source" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "build?" property #f 49 12 49 18 ()}
        {Lisp-Entry "get-build?" accessor #f 49 43 49 51 ()}
        {Lisp-Entry "set-build?" accessor #f 49 43 49 51 ()}
        {Lisp-Entry "preprocess" method #f 57 26 57 36 ("rest" "output" "log" "reporter" "project")}
        {Lisp-Entry "build" method #f 61 26 61 31 ("rest" "output" "log" "reporter" "project")}
        {Lisp-Entry "get-class-descriptor" method #f 70 25 70 45 ("Project-File-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 79 11 79 17 ()
        {Lisp-Entry "import" anonymous #f 82 1 82 7 ("jazz.designer")}
        {Lisp-Entry "Project-File-Descriptor" class #f 85 7 85 30 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f 88 3 88 7 ("Boolean-Domain" "domain" "File-Domain" "name" "name:" "Property-Descriptor" "build?" "source" "categorized" "categorized:" ">" "<properties" "<properties~>" "can-move?" "can-move?:" "can-paste?" "can-paste?:" "can-copy?" "can-copy?:" "can-cut?" "can-cut?:" "Image-Resource" "image" "image:" "install")}
          {Lisp-Entry "component-presentation-property?" method #f 97 20 97 52 ("source" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 101 20 101 46 ("get-name" "if" "get-source" "source" "let" "component")}}}}})
"Project-Group"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "file" "Project-Group.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.file.Project-Group" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.project" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Project-Group" class #f 45 7 45 20 ("Group")
        {Lisp-Entry "get-class-descriptor" method #f 53 25 53 45 ("Project-Group-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 62 11 62 17 ()
        {Lisp-Entry "import" anonymous #f 65 1 65 7 ("jazz.designer")}
        {Lisp-Entry "Project-Group-Descriptor" class #f 68 7 68 31 ("Group-Descriptor")
          {Lisp-Entry "form" anonymous #f 71 3 71 7 (">" "<properties" "<properties~>" "can-move?" "can-move?:" "can-paste?" "can-paste?:" "can-copy?" "can-copy?:" "can-cut?" "can-cut?:" "install")}
          {Lisp-Entry "class-presentation->name" method #f 76 20 76 44 ("presentation" "class")}
          {Lisp-Entry "class-name->presentation" method #f 80 20 80 44 ("name" "class")}
          {Lisp-Entry "component-sort-components" method #f 84 20 84 45 ("get-presentation-property" "1" "0" "Project-Group" "is?" "if" "cons" "lambda" "key" "key:" "nu<?" "sort" "components" "predicate" "component")}
          {Lisp-Entry "component-addable-class?" method #f 90 20 90 44 ("Project-Group" "Project-File" "subtype?" "or" "class" "component")}
          {Lisp-Entry "component-get-categorized-addable-classes" method #f 95 20 95 61 ("Project-Group" "reference" "list" "component")}}}}})
"Project-Selector"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "Project-Selector.jazz"} 1298564215 jazz
    {Lisp-Entry "jazz.project.workbench.Project-Selector" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.project" "jazz.library" "jazz.jml" "jazz.ide")}
      {Lisp-Entry "Project-Selector" class #f 47 7 47 23 ("initialize" "Layout-View")
        {Lisp-Entry "form" anonymous #f 50 3 50 7 ("5" "on-cancel" "cancel" "3" "Separator" "on-ok" ":host" "default?" "default?:" "enabled?" "enabled?:" "24" "80" "tail" "ok" "Push-Button" "south" "36" "buttonbar" "toplevel-controls?" "toplevel-controls?:" "235" "width" "width:" "title" "title:" "Tree-Node-Column" "on-escape-press" "escape-press-handler" "escape-press-handler:" "on-return-press" "return-press-handler" "return-press-handler:" "on-double-click" "double-click-handler" "double-click-handler:" "on-selection-change" "Selection-Handler" "selection-handler" "selection-handler:" "filled-column" "filled-column:" "content" "Tree-View" "fill" "content!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "document" "Scroller-View" "entry" "style" "style:" "edge" "border-type" "border-type:" "center" "content-border" "Border-View" "on-toggle-hierarchical" ":form" "Event-Handler" "action-handler" "action-handler:" ":images" "portfolio" "portfolio:" "Image-Resource" "resource" "resource:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "22" "hierarchical" "Toggle-Tool" "6" "0" "Rect" "layout-insets" "layout-insets:" "flow" "north" "location" "location:" "33" "toolbar" "name" "name:" "Layout-View" "border" "layout-type" "layout-type:" "300" "500" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "hierarchical?" slot #f 66 8 66 21 ()}
        {Lisp-Entry "finish" method #f 69 20 69 26 ("update" "nextmethod" "rest")}
        {Lisp-Entry "host-title" method #f 74 25 74 35 ()}
        {Lisp-Entry "install-in-host" method #f 78 20 78 35 ("select-active" "host")}
        {Lisp-Entry "focus-default" method #f 82 20 82 33 ("get-tree" "acquire-focus")}
        {Lisp-Entry "get-tree" method #f 91 11 91 19 ("content" "locate")}
        {Lisp-Entry "on-toggle-hierarchical" method #f 100 11 100 33 ("update-buttons" "data" "use" "use:" "update" "with-preserved-selection" "get-tree" "get-node-column" "set-toplevel-controls?" "not" "hierarchical?" "set!" "evt")}
        {Lisp-Entry "on-selection-change" method #f 109 11 109 30 ("update-buttons" "evt")}
        {Lisp-Entry "default-action" method #f 113 11 113 25 ("get-modal-result" "get-host" "end-modal" "ok-enabled?" "when")}
        {Lisp-Entry "update" method #f 123 11 123 17 ("update-buttons" "update-content")}
        {Lisp-Entry "update-content" method #f 128 11 128 25 ("hierarchical?" "with-update-locked" "remove-every-row" "get-tree" "key" "key:" "string<?" "sort" "lambda" "update-flat" "collect-concrete-projects" "for-each" "not" "if" "get-parent" "parent" "project" "insert" "table-set!" "user-data" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children" "children:" "expanded" "state" "state:" "father:" "add-row" "row" "get-component-image" "image" "get-presentation-property" "title" "table-ref" "or" "father" "file" "add" "eq?" "test" "test:" "make-table" "rows" "get-workbench" "workbench" "let" "tree" "update-hierarchical" "define")}
        {Lisp-Entry "update-buttons" method #f 166 11 166 25 ("ok" "locate" "set-enabled?" "selected-project" "project" "let")}
        {Lisp-Entry "select-active" method #f 171 11 171 24 ("get-tree" "select-user-data-row" "get-active-project" "when")}
        {Lisp-Entry "get-modal-result" method #f 181 20 181 36 ("selected-project")}
        {Lisp-Entry "ok-enabled?" method #f 185 11 185 22 ("ok" "locate" "get-enabled?")}
        {Lisp-Entry "on-double-click" method #f 189 11 189 26 ("default-action" "evt")}
        {Lisp-Entry "on-return-press" method #f 194 20 194 35 ("default-action" "evt")}
        {Lisp-Entry "on-escape-press" method #f 199 20 199 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "selected-project" method #f 209 11 209 27 ("concrete?" "Project" "is?" "and" "when" "get-tree" "get-single-selected-data" "file" "let")}}}})
"Projects-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "Projects-Manager.jazz"} 1298642347 jazz
    {Lisp-Entry "jazz.project.workbench.Projects-Manager" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui" "jazz.system" "jazz.project" "jazz.library" "jazz.jml" "jazz.catalog")}
      {Lisp-Entry "Projects-Manager" class #f 50 20 50 36 ("initialize" "Layout-View")
        {Lisp-Entry "hierarchical?" slot #f 53 8 53 21 ()}
        {Lisp-Entry "form" anonymous #f 56 3 56 7 ("350" "statistics" "Tree-Label-Column" "150" "width" "width:" "Tree-Node-Column" "multiple-selection?" "multiple-selection?:" "on-double-click" "double-click-handler" "double-click-handler:" "on-selection-change" "selection-handler" "selection-handler:" "filled-column" "filled-column:" "projects" "Tree-View" "document" "Tree-Header" "fill" "content" "!" "vscroll?" "vscroll?:" "Scroller-View" "entry" "style" "style:" "edge" "border-type" "border-type:" "center" "projects-border" "Border-View" "default?" "default?:" "on-update" "tail" "100" "title" "title:" "update" "Push-Button" "on-flat/hierarchical" ":form" "Event-Handler" "action-handler" "action-handler:" ":images" "portfolio" "portfolio:" "Image-Resource" "resource" "resource:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "22" "Toggle-Tool" "6" "0" "Rect" "layout-insets" "layout-insets:" "flow" "north" "location" "location:" "33" "300" "toolbar" "name" "name:" "Layout-View" "border" "layout-type" "layout-type:" "478" "553" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "external-name" method #f 71 25 71 38 ("projects-manager" "rest")}
        {Lisp-Entry "get-tree" method #f 80 11 80 19 ("projects" "locate")}
        {Lisp-Entry "finish" method #f 89 20 89 26 ("update-buttons" "view-projects" "hierarchical?" "set-hierarchical?" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" method #f 101 25 101 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 105 25 105 35 ()}
        {Lisp-Entry "host-position" method #f 109 25 109 38 ("70" "90" "Point")}
        {Lisp-Entry "host-size" method #f 113 25 113 34 ("378" "573" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 117 20 117 35 ("home")}
        {Lisp-Entry "focus-default" method #f 121 20 121 33 ("get-tree" "acquire-focus")}
        {Lisp-Entry "resize" method #f 130 20 130 26 ("projects-border" "size-figure" "0" "update" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-flat/hierarchical" method #f 136 11 136 31 ("view-projects" "hierarchical?" "not" "set-hierarchical?" "evt")}
        {Lisp-Entry "set-hierarchical?" method #f 141 11 141 28 ("set-display-images?" "set-toplevel-controls?" "get-tree" "get-node-column" "node-column" "let" "hierarchical?" "set!" "flag")}
        {Lisp-Entry "on-selection-change" method #f 148 11 148 30 ("update-buttons" "evt")}
        {Lisp-Entry "view-projects" method #f 157 18 157 31 ("with-update-locked" "remove-every-row" "get-tree" "update-statistics" "for-each-project" "set-project-active?" "when" "get-application" "get-workbench-manager" "workbench-manager" "flag" "get-children" "Project-Group" "has-content?" "Project" "is?" "and" "cond" "child" "for-each" "component" "1" "+" "insert-children" "user-data" "user-data:" "list" "children" "children:" "state:" "father" "father:" "add-row" "get-statistics" "Tree-Label" "c1" "content-change-handler" "content-change-handler:" "get-active?" "checked?" "checked?:" "get-presentation-property" "title" "title:" "Check-Box" "c0" "collapsed" "expanded" "=" "if" "state" "get-sender" "get-checked?" "set-active?" "evt" "lambda" "execute" "execute:" "Event-Handler" "new" "handler" "get-catalog" "catalog" "let" "level" "project" "row" "0" "get-workbench" "insert-project" "tree" "insert-workbench" "define")}
        {Lisp-Entry "on-update" method #f 194 19 194 28 ("update-selection" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-double-click" method #f 200 11 200 26 ("update-selection" "lambda" ":wait" "with-cursor" "projects" "get-name" "case" "get-alt?" "alt?" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "update-selection" method #f 210 11 210 27 ("user-feedback" "for-each-project" "get-user-data" "row" "for-each" "update-statistics" "execute-event" "update" "when" "get-catalog" "catalog" "project" "update-project" "lambda" "post-catalog" "collect-rows" "null?" "if" "get-selected-rows" "selected-rows" "effective-rows" "define" "get-tree" "tree" "let")}
        {Lisp-Entry "update-statistics" method #f 235 11 235 28 ("invalidate-cell" "1" "Cell" "new" "cell" "row->line" "line" "get-statistics" "if" "set-title" "get-children" "second" "data" "get-catalog" "catalog" "when" "include-invisibles?" "include-invisibles?:" "user-data-row" "row" "let" "project" "tree")}
        {Lisp-Entry "update-buttons" method #f 247 11 247 25 ("0" ">" "update" "locate" "set-enabled?" "get-row-count" "count" "get-tree" "tree" "let")}
        {Lisp-Entry "confirm-close" method #f 258 20 258 33 ("save-session" "rest")}
        {Lisp-Entry "save-session" method #f 262 20 262 32 ("Opened-Windows" "properties" "push-property" "get-size" "size" "size:" "get-position" "position" "position:" "external-name" "list" "info" "let")}}}})
"Repositories"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "repositories" "Repositories.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.repositories.Repositories" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.jml")}
      {Lisp-Entry "Repositories" class #f 44 7 44 19 ("Component")
        {Lisp-Entry "get-class-descriptor" method #f 52 25 52 45 ("Repositories-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 61 11 61 17 ()
        {Lisp-Entry "import" anonymous #f 64 1 64 7 ("jazz.designer")}
        {Lisp-Entry "Repositories-Descriptor" class #f 67 7 67 30 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f 70 3 70 7 (">" "<properties" "<properties~>" "Image-Resource" "image" "image:" "install")}}}}})
"Repositories-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "repositories" "Repositories-Manager.jazz"} 1296142568 jazz
    {Lisp-Entry "jazz.project.repositories.Repositories-Manager" module #f 37 18 37 64 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.dialog" "jazz.ui" "jazz.system" "jazz.runtime" "jazz.project" "jazz.library.template" "jazz.library" "jazz.jml" "jazz.io" "jazz.ide")}
      {Lisp-Entry "Repositories-Manager" class #f 53 7 53 27 ("Layout-View")
        {Lisp-Entry "form" anonymous #f 56 3 56 7 ("329" "width" "width:" "title" "title:" "Tree-Node-Column" "on-context-menu" ":form" "Event-Handler" "context-menu-handler" "context-menu-handler:" "multiple-selection?" "multiple-selection?:" "show-header?" "show-header?:" ":images" "portfolio" "portfolio:" "repositories" "Tree-View" "shown?" "shown?:" "header" "Tree-Header" "content" "!" "tool" "style" "style:" "hscroll?" "hscroll?:" "vscroll?" "vscroll?:" "scroller" "Scroller-View" "tools" "name" "name:" "Layout-View" "fill" "layout-type" "layout-type:" "install")}
        {Lisp-Entry "external-name" method #f 67 25 67 38 ("repositories-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 76 25 76 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 80 25 80 35 ()}
        {Lisp-Entry "install-in-host" method #f 84 20 84 35 ("setup-repositories" "host")}
        {Lisp-Entry "setup-repositories" method #f 88 11 88 29 ("update")}
        {Lisp-Entry "get-tools-view" method #f 97 20 97 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method #f 101 20 101 33 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" method #f 111 11 111 19 ("repositories" "locate")}
        {Lisp-Entry "update" method #f 120 11 120 17 ("get-repositories" "collapsed" "add-repository" "repository" "for-each" "user-data" "user-data:" "Image-Resource" "image" "image:" "title" "title:" "Tree-Node" "new" "list" "children" "children:" "expanded" "state" "state:" "add-row" "repositories-row" "lambda" "with-update-locked" "remove-every-row" "get-tree" "tree" "let")}
        {Lisp-Entry "add-repository" method #f 131 11 131 25 ("package-name" "key" "key:" "repository-packages" "string<=?" "sort" "add-package" "package" "lambda" "for-each" "user-data" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children" "children:" "state:" "father:" "add-row" "repository-row" "Image-Resource" "image" "->string" "title" "repository-name" "name" "let" "repository" "state" "father" "tree")}
        {Lisp-Entry "add-package" method #f 142 11 142 22 ("user-data" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children" "children:" "father:" "add-row" "else" "get-workbench" "find-project-by-file" "Image-Resource" "not" "cond" "image" "->string" "title" "package-project-file" "file" "package-name" "name" "let" "package" "father" "tree")}
        {Lisp-Entry "on-new-repository" method #f 157 11 157 28 ("save-repositories" "install/add-repository" "copy-template" "cons" "list" "associations" "empty-string?" "if" "effective-name" "destination" "get-application" "templates-directory" "new-directory" "template" "let" "get-current-directory" "directory:" "New-Repository-Dialog" "get-modal" "name" "dirname" "directory" "receive" "evt")}
        {Lisp-Entry "on-register-repository" method #f 168 11 168 33 ("save-repositories" "install/add-repository" "format" "message-box" "find-repository" "name" "exists?" "if" "new-file" "repository-file" "choose-directory" "dir" "cadr" "read" "form" "let" "input" "lambda" "path-settings" "call-with-input-file" "file" "load-repository-name" "define" "evt")}
        {Lisp-Entry "install/add-repository" method #f 186 11 186 33 ("row->line" "set-single-selection" "ensure-expanded" "expanded" "add-repository" "repository-row" "parse" "install-repository" "repository" "selected-row" "repositories-row" "get-tree" "tree" "let" "dir")}
        {Lisp-Entry "save-repositories" method #f 195 11 195 28 ("get-application" "set-preferences-property" "repository-directory" "tokenise-filename" "Directory" "new" "anchorize" "map" "directories" "repositories" "get-preferences" "pref" "let" "get-repositories" "system-repository?" "not" "repository" "lambda" "collect-if" "collect-user-repositories" "define")}
        {Lisp-Entry "system-repository?" definition #f 209 15 209 33 ("Jazz" "Build" "repository-name" "memq?" "repository")}
        {Lisp-Entry "on-edit-repository" method #f 218 11 218 29 ("selected-objects" "edit-repository" "for-each" "evt")}
        {Lisp-Entry "edit-repository" method #f 222 11 222 26 ("new-file" "get-application" "edit-document" "repository-directory" "tokenise-filename" "Directory" "new" "dir" "let" "repository")}
        {Lisp-Entry "on-new-package" method #f 227 11 227 25 ("row->line" "set-single-selection" "ensure-expanded" "add-package" "package-row" "selected-row" "repository-row" "get-tree" "tree" "let" "repository-add-package" "parse" "load-package" "new-file" "file" "copy-template" "project-directories" "format" "project-unit" "project-title" "cons" "list" "associations" "destination" "repository-library-directory" "tokenise-filename" "Directory" "new" "directory" "get-application" "templates-directory" "new-directory" "template" "capitalize" "project" "last" "product" "split-identifier" "->string" "map" "package-parts" "string->symbol" "package-name" "let*" "selected-object" "repository:" "New-Package-Dialog" "get-modal" "package" "repository" "receive" "evt")}
        {Lisp-Entry "on-scan-new-packages" method #f 253 11 253 31 ("format-plural" "length" "count" "row->line" "row" "set-selection" "ensure-expanded" "add-package" "package-row" "package" "lambda" "map" "rows" "get-tree" "tree" "user-message" "null?" "if" "repository-install-packages" "packages" "get-user-data" "repository" "selected-row" "repository-row" "let" "evt")}
        {Lisp-Entry "on-unregister-repository" method #f 272 11 272 35 ("save-repositories" "selected-rows" "for-each" "get-tree" "remove-row" "uninstall-repository" "get-user-data" "repository" "let" "row" "uninstall/remove-repository" "define" "evt")}
        {Lisp-Entry "on-edit-package" method #f 287 11 287 26 ("selected-objects" "edit-package" "for-each" "evt")}
        {Lisp-Entry "edit-package" method #f 291 11 291 23 ("package-name" "->string" "list" "new-file" "get-application" "edit-document" "package-repository" "repository-library-directory" "tokenise-filename" "Directory" "new" "dir" "let" "package")}
        {Lisp-Entry "on-install-in-workbench" method #f 296 11 296 34 ("selected-rows" "install-in-workbench" "row" "lambda" "for-each" "get-tree" "tree" "get-workbench" "workbench" "get-application" "get-workbench-manager" "workbench-manager" "let" "evt")}
        {Lisp-Entry "install-in-workbench" method #f 305 11 305 31 ("invalidate-cell" "Image-Resource" "set-image" "get-cell-data" "node" "0" "Cell" "new" "cell" "row->line" "line" "install-project" "package-project-file" "file" "get-user-data" "package" "let" "row" "tree" "workbench" "workbench-manager")}
        {Lisp-Entry "package-project-file" definition #f 316 15 316 35 ("package-pathname" "tokenise-filename" "File" "new" "string?" "and" "package-project" "project" "let" "package")}
        {Lisp-Entry "package-project-installable?" definition #f 323 15 323 43 ("get-workbench" "find-project-by-file" "not" "and" "package-project-file" "file" "let" "package")}
        {Lisp-Entry "selected-kind" definition #f 333 15 333 28 ("package" "package?" "repository" "repository?" "repositories" "not" "cond" "object")}
        {Lisp-Entry "selected-kind/objects" method #f 342 11 342 32 ("not" "selected-kind" "key" "key:" "uniform" "kind" "values" "null?" "if" "get-tree" "get-selected-data" "objects" "let")}
        {Lisp-Entry "selected-objects" method #f 352 11 352 27 ("selected-kind/objects" "objects" "kind" "receive")}
        {Lisp-Entry "selected-object" method #f 357 11 357 26 ("selected-objects" "car")}
        {Lisp-Entry "selected-rows" method #f 361 11 361 24 ("get-tree" "get-selected-rows")}
        {Lisp-Entry "selected-row" method #f 365 11 365 23 ("get-tree" "get-selected-row")}
        {Lisp-Entry "on-context-menu" method #f 374 11 374 26 ("track-popup-menu" "when" "new-menu" "menu" "let" "lambda" "with-context-click" "acquire" "acquired" "get-position" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "new-menu" method #f 385 18 385 26 ("package" "repository" "repositories" "case" "not" "if" "selected-kind/objects" "kind" "receive" "install-package" "install-package-separator" "package-project-installable?" "every?" "unless" "Package-Menu" "new-package-menu" "unregister-repository" "unregister-repository-separator" "system-repository?" "some?" "new-package" "new-package-separator" "locate" "set-visible?" "1" "length" ">" "when" "Repository-Menu" "new-repository-menu" "layout-menu" "cleanup-separators" "get-tree" "client" "client:" "Repositories-Menu" "new" "menu" "let" "objects" "new-repositories-menu" "define")}}
      {Lisp-Entry "Repositories-Menu" class #f 427 7 427 24 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f 430 3 430 7 ("register-repository" "Separator-Item" "repositories-manager" "Action" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "title" "title:" "new-repository" "name" "name:" "Label-Item" "install")}}
      {Lisp-Entry "Repository-Menu" class #f 442 7 442 22 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f 445 3 445 7 ("unregister-repository" "unregister-repository-separator" "scan-new-packages" "new-package" "new-package-separator" "Separator-Item" "repositories-manager" "Action" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "title" "title:" "edit-repository" "name" "name:" "Label-Item" "install")}}
      {Lisp-Entry "Package-Menu" class #f 461 7 461 19 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f 464 3 464 7 ("install-in-workbench" "install-package" "install-package-separator" "Separator-Item" "repositories-manager" "Action" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "title" "title:" "edit-package" "name" "name:" "Label-Item" "install")}}}})
"Repositories-Manager-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "repositories" "Repositories-Manager-Actions.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.repositories.Repositories-Manager-Actions" module #f 37 18 37 72 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Repositories-Manager-Actions" class #f 45 7 45 35 ("Actions")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("on-install-in-workbench" "install-in-workbench" "on-edit-package" "edit-package" "on-unregister-repository" "unregister-repository" "on-scan-new-packages" "scan-new-packages" "on-new-package" "new-package" "on-edit-repository" "edit-repository" "on-register-repository" "register-repository" "on-new-repository" ":repositories-manager" "Event-Handler" "action-handler" "action-handler:" "new-repository" "name" "name:" "Action-Item" "install")}}}})
"Repositories-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "preference" "Repositories-Preferences.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.preference.Repositories-Preferences" module #f 37 18 37 66 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Repositories-Preferences" class #f 44 7 44 31 ("initialize" "Preferences")
        {Lisp-Entry "repositories" property #f 47 12 47 24 ()}
        {Lisp-Entry "get-repositories" accessor #f 47 50 47 58 ()}
        {Lisp-Entry "set-repositories" accessor #f 47 50 47 58 ()}
        {Lisp-Entry "form" anonymous #f 50 3 50 7 ("title" "title:" "install")}
        {Lisp-Entry "get-class-descriptor" method #f 59 25 59 45 ("Repositories-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 68 11 68 17 ()
        {Lisp-Entry "import" anonymous #f 71 1 71 7 ("jazz.designer")}
        {Lisp-Entry "Repositories-Preferences-Descriptor" class #f 74 7 74 42 ("Preferences-Descriptor")
          {Lisp-Entry "form" anonymous #f 77 3 77 7 ("repositories" "name" "name:" "Property-Descriptor" ">" "<properties" "<properties~>" "can-copy?" "can-copy?:" "can-move?" "can-move?:" "can-delete?" "can-delete?:" "can-rename?" "can-rename?:" "install")}}}}})
"Repository"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "repositories" "Repository.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.repositories.Repository" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.project" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Repository" class #f 46 7 46 17 ("initialize" "Component")
        {Lisp-Entry "title" property #f 49 12 49 17 ()}
        {Lisp-Entry "get-title" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "set-title" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "directory" property #f 50 12 50 21 ()}
        {Lisp-Entry "get-directory" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "set-directory" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "print" method #f 53 20 53 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-class-descriptor" method #f 65 25 65 45 ("Repository-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 74 11 74 17 ()
        {Lisp-Entry "import" anonymous #f 77 1 77 7 ("jazz.designer")}
        {Lisp-Entry "Repository-Descriptor" class #f 80 7 80 28 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f 83 3 83 7 ("domain" "Directory-Domain" "title:" "title" "name" "name:" "Property-Descriptor" "directory" "categorized" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image" "image:" "install")}
          {Lisp-Entry "component-presentation-property?" method #f 91 20 91 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 95 20 95 46 ("get-title" "component")}
          {Lisp-Entry "component-set-presentation" method #f 99 20 99 46 ("title" "title:" "set-property" "presentation" "designer" "component")}
          {Lisp-Entry "component-addable-class?" method #f 103 20 103 44 ("Project-Group" "Project-File" "subtype?" "or" "class" "component")}
          {Lisp-Entry "component-get-categorized-addable-classes" method #f 108 20 108 61 ("Project-Group" "reference" "list" "component")}}}}})
"Resource-File"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "resource" "Resource-File.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.resource.Resource-File" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.project")}
      {Lisp-Entry "Resource-File" class #f 43 7 43 20 ("Project-File")
        {Lisp-Entry "resource-class" method #f 46 26 46 40 ()}
        {Lisp-Entry "resource-marker" method #f 50 26 50 41 ()}}}})
"Sound-File"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "resource" "Sound-File.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.resource.Sound-File" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.project" "jazz.library")}
      {Lisp-Entry "Sound-File" class #f 44 7 44 17 ("Resource-File")
        {Lisp-Entry "resource-class" method #f 47 20 47 34 ("Sound-Resource")}}}})
"Synchronize-Box"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "Synchronize-Box.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.workbench.Synchronize-Box" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Synchronize-Box" class #f 45 7 45 22 ("Message-Box")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("on-no-action" "535" "no-action" "on-copy-left" "513" "copy-left" "on-copy-right" ":form" "Event-Handler" "action-handler" "action-handler:" ":images" "portfolio" "portfolio:" "Image-Resource" "resource" "resource:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "22" "Dimension" "size" "size:" "9" "491" "Point" "position" "position:" "copy-right" "name" "name:" "Push-Tool" "install")}
        {Lisp-Entry "layout-box" method #f 60 20 60 30 ("get-height" "400" "Dimension" "new" "set-size" "border" "locate" "border-view" "nextmethod" "dialog-size" "let" "default" "actions" "content" "icon" "size" "title" "selection" "text")}}}})
"Synchronize-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "Synchronize-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.workbench.Synchronize-Entry" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Synchronize-Entry" class #f 40 7 40 24 ("Object")
        {Lisp-Entry "kind" slot #f 43 18 43 22 ()}
        {Lisp-Entry "left" slot #f 44 18 44 22 ()}
        {Lisp-Entry "right" slot #f 45 18 45 23 ()}
        {Lisp-Entry "action" slot #f 46 18 46 24 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("action" "action~self" "right~self" "left~self" "self" "kind~self" "set!" "nextmethod" "right-value" "right" "left-value" "left" "kind")}
        {Lisp-Entry "print" method #f 57 20 57 25 ("action" "right" "left" "format" "lambda" "self" "print-unreadable" "readably" "output")}}}})
"Synchronize-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "Synchronize-Tree.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.workbench.Synchronize-Tree" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Synchronize-Tree" class #f 45 7 45 23 ("Tree-View")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("right" "Synchronize-Right-Column" "75" "action" "Synchronize-Action-Column" "center" "justification" "justification:" "80" "left" "Synchronize-Left-Column" "toplevel-controls?" "toplevel-controls?:" "200" "width" "width:" "title" "title:" "name" "name:" "Tree-Node-Column" "multiple-selection?" "multiple-selection?:" "path" "filled-column" "filled-column:" "row" "selection-mode" "selection-mode:" ":images" "portfolio" "portfolio:" "install")}}
      {Lisp-Entry "Synchronize-Item-Column" class #f 61 7 61 30 ("Tree-Column")
        {Lisp-Entry "draw-data" method #f 64 20 64 29 ("0" "2" "16" "-" "quotient" "White" "Color" "get-application" "get-images-portfolio" "draw-opaque-image" "present-image" "image" "present?" "not" "when" "get-right" "get-left" "node" "get-kind" "=" "and" "lvl?" "let" "draw-background" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "present?" method #f 73 38 73 46 ("data")}
        {Lisp-Entry "present-image" method #f 77 38 77 51 ("data")}}
      {Lisp-Entry "Synchronize-Left-Column" class #f 86 7 86 30 ("Synchronize-Item-Column")
        {Lisp-Entry "present?" method #f 89 20 89 28 ("get-left" "data")}
        {Lisp-Entry "present-image" method #f 93 20 93 33 ("Image-Resource" "data")}}
      {Lisp-Entry "Synchronize-Action-Column" class #f 102 7 102 32 ("Tree-Column")
        {Lisp-Entry "draw-data" method #f 105 20 105 29 ("0" "1" "2" "16" "-" "quotient" "+" "White" "Color" "get-images-portfolio" "draw-opaque-image" "get-right" "get-left" "action-image" "image" "get-application" "appl" "when" "get-action" "action" "let" "draw-background" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Synchronize-Right-Column" class #f 120 7 120 31 ("Synchronize-Item-Column")
        {Lisp-Entry "present?" method #f 123 20 123 28 ("get-right" "data")}
        {Lisp-Entry "present-image" method #f 127 20 127 33 ("Image-Resource" "data")}}}})
"Workbench"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "Workbench.jazz"} 1298926079 jazz
    {Lisp-Entry "jazz.project.workbench.Workbench" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.system" "jazz.project" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.io" "jazz.ide" "jazz.editor.jazz")}
      {Lisp-Entry "Workbench" class #f 51 7 51 16 ("Project")
        {Lisp-Entry "print" method #f 54 20 54 25 ("lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "catalog-name" method #f 65 20 65 32 ("workbench")}
        {Lisp-Entry "find-project" method #f 74 18 74 30 ("split-symbol" "self" "Project" "is?" "descendant" "stop-test" "stop-test:" "continuation-return" "get-name" "eq?" "for-each-project" "return" "lambda" "continuation-capture" "else" "cdr" "car" "pair?" "find-name" "symbol?" "null?" "error" "when" "not" "cond" "path" "project" "find" "define" "error?" "error?:" "include-inactives?" "include-inactives?:" "name")}
        {Lisp-Entry "require-project" method #f 103 18 103 33 ("error" "find-project" "or" "name")}
        {Lisp-Entry "find-project-by-file" method #f 108 18 108 38 ("continuation-return" "pathname=?" "and" "when" "get-form" "get-tag-reference" "tag-file" "let" "project" "for-each-project" "return" "lambda" "continuation-capture" "file")}
        {Lisp-Entry "find-project-by-identity" method #f 119 18 119 42 ("continuation-return" "eq?" "when" "project" "for-each-project" "return" "lambda" "continuation-capture" "target")}
        {Lisp-Entry "find-source" method #f 134 18 134 29 ("continuation-return" "pathname=?" "ci=?" "and" "when" "get-source" "source" "project-file" "for-each-project-file" "get-name" "target-name" "let" "return" "lambda" "continuation-capture" "target")}
        {Lisp-Entry "find-filename" method #f 149 18 149 31 ("continuation-return" "get-name" "ci=?" "when" "get-source" "source" "let" "project-file" "for-each-project-file" "return" "lambda" "continuation-capture" "filename")}
        {Lisp-Entry "catalog-output-base" method #f 166 20 166 39 ()}
        {Lisp-Entry "load-catalogs-threaded" method #f 170 18 170 40 ("catalogs-loader" "clear-user-message" "load-catalogs" "user-message" "lambda" "new-thread" "thread-start!")}
        {Lisp-Entry "get-effective-editable?" method #f 185 20 185 43 ()}
        {Lisp-Entry "for-each-project-file" method #f 194 18 194 39 ("get-active?" "not" "Project" "and" "stop-test" "stop-test:" "Project-File" "is?" "when" "level" "descendant" "lambda" "for-each-descendant" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "get-class-descriptor" method #f 210 25 210 45 ("Workbench-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 219 11 219 17 ()
        {Lisp-Entry "import" anonymous #f 222 1 222 7 ("jazz.designer")}
        {Lisp-Entry "Workbench-Descriptor" class #f 225 7 225 27 ("Project-Descriptor")
          {Lisp-Entry "form" anonymous #f 228 3 228 7 (">" "<properties" "<properties~>" "can-copy?" "can-copy?:" "can-cut?" "can-cut?:" "can-move?" "can-move?:" "can-delete?" "can-delete?:" "can-rename?" "can-rename?:" "Image-Resource" "image" "image:" "install")}
          {Lisp-Entry "component-get-presentation" method #f 233 20 233 46 ("component")}
          {Lisp-Entry "component-get-categorized-addable-classes" method #f 237 20 237 61 ("Project-Group" "reference" "list" "component")}}}}})
"Workbench-Cataloguer"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "Workbench-Cataloguer.jazz"} 1297889380 jazz
    {Lisp-Entry "jazz.project.workbench.Workbench-Cataloguer" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.system" "jazz.project" "jazz.catalog")}
      {Lisp-Entry "Workbench-Cataloguer" class #f 45 7 45 27 ("Cataloguer")
        {Lisp-Entry "for-each-catalog" method #f 53 20 53 36 ("get-active?" "when" "report?" "report?:" "require-catalog" "catalog" "lambda" "for-each-project" "get-workbench" "or" "project" "let" "proc" "context")}
        {Lisp-Entry "add-catalog" method #f 63 20 63 31 ("catalog")}
        {Lisp-Entry "remove-catalog" method #f 67 20 67 34 ("catalog")}}}})
"Workbench-Designer"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "Workbench-Designer.jazz"} 1297876132 jazz
    {Lisp-Entry "jazz.project.workbench.Workbench-Designer" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.project" "jazz.library.component" "jazz.designer")}
      {Lisp-Entry "Workbench-Designer" class #f 45 7 45 25 ("initialize" "Designer")
        {Lisp-Entry "project-designers" slot #f 48 8 48 25 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("nextmethod" "apply" "include-inactives?" "include-inactives?:" "include-self?" "include-self?:" "add-designer" "reference" "for-each-project" "install-projects-designers" "define" "rest")}
        {Lisp-Entry "cleanup-project-designers" method #f 67 11 67 36 ("get-output" "project-designers" "set!" "save" "get-modified?" "when" "cons" "put" "reference" "find-project-by-identity" "if" "designer" "project" "lambda" "for-each-designer" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "set-name" method #f 83 20 83 28 ("set-name" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "name" "component")}
        {Lisp-Entry "set-property" method #f 92 20 92 32 ("set-property" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "value" "property" "component")}
        {Lisp-Entry "add-child" method #f 101 20 101 29 ("add-child" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "parent" "child")}
        {Lisp-Entry "remove-child" method #f 110 20 110 32 ("remove-child" "get-project-designer" "designer" "let" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parent" "parent" "let*" "rest" "child")}
        {Lisp-Entry "move-components" method #f 119 20 119 35 ("move-components" "unimplemented" "rest" "destination" "components")}
        {Lisp-Entry "transfer-components" method #f 123 20 123 39 ("transfer-components" "unimplemented" "rest" "destination" "components")}
        {Lisp-Entry "cut-components" method #f 132 20 132 34 ("cut-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "copy-components" method #f 141 20 141 35 ("copy-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "paste-clipboard" method #f 150 20 150 35 ("paste-clipboard" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "let" "rest" "parent")}
        {Lisp-Entry "get-parents" method #f 158 11 158 22 ("get-parent" "map" "components")}
        {Lisp-Entry "find-modification-owner" method #f 167 11 167 34 ("get-presentation-property" "get-effective-editable?" "not" "owner" "car" "error" "1" "length" ">" "map" "remove-duplicates" "owners" "let" "pair?" "get-parent" "Project" "is?" "reference" "eq?" "or" "if" "component" "find-owner-project" "find-components-owner" "define" "components")}
        {Lisp-Entry "add-designer" method #f 192 11 192 23 ("add-project-designer" "reference" "reference:" "form:" "Designer" "new" "designer" "when" "error" "Project-Not-Found" "get-model" "eq?" "if" "else" "get-tag-reference" "registered-file-form" "instantiate" "get-action" "case" "form" "get-form" "project-form" "let" "project")}
        {Lisp-Entry "add-project-designer" method #f 204 11 204 31 ("cons" "project-designers" "set!" "designer" "project")}
        {Lisp-Entry "remove-designer" method #f 208 11 208 26 ("assq" "remove!" "project-designers" "set!" "project")}
        {Lisp-Entry "get-project-designer" method #f 212 21 212 41 ("project-designers" "assq-value" "project")}
        {Lisp-Entry "for-each-designer" method #f 216 11 216 28 ("project-designers" "designer" "project" "bind" "pair" "lambda" "for-each" "proc")}
        {Lisp-Entry "project-add" method #f 223 21 223 32 ("add-designer" "Project" "is?" "when" "level" "descendant" "lambda" "for-each-descendant" "project")}
        {Lisp-Entry "project-remove" method #f 230 21 230 35 ("cleanup-project-designers" "project")}
        {Lisp-Entry "save-designer" method #f 242 21 242 34 ("designer" "project" "lambda" "for-each-designer" "save" "set!" "get-modified?" "when" "some-modified?" "let")}}}})
"Workbench-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "Workbench-Editor.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.workbench.Workbench-Editor" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.project" "jazz.designer")}
      {Lisp-Entry "Workbench-Editor" class #f 44 7 44 23 ("Descendants-Editor")
        {Lisp-Entry "form-model" method #f 47 20 47 30 ("nextmethod" "else" "Workbench-Tree" "tree" "get-name" "case" "form")}}}})
"Workbench-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "Workbench-Manager.jazz"} 1298908804 jazz
    {Lisp-Entry "jazz.project.workbench.Workbench-Manager" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.dialog" "jazz.ui" "jazz.system.process" "jazz.system" "jazz.runtime" "jazz.project" "jazz.platform" "jazz.library.template" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.io" "jazz.ide" "jazz.groupware" "jazz.graphic" "jazz.editor.jazz" "jazz.designer.menu" "jazz.designer" "jazz.catalog")}
      {Lisp-Entry "Workbench-Manager" class #f 62 7 62 24 ("Exit-Listener" "Component-Editor")
        {Lisp-Entry "form" anonymous #f 65 3 65 7 ("Dark-Blue" "Color" "highlight-color" "highlight-color:" "291" "width" "width:" "title" "title:" "descendant" "highlight-edited?" "highlight-edited?:" "show-header?" "show-header?:" "tree" "tool" "style" "style:" "scroller" "!" "center" "location" "location:" "descendants" "Workbench-Editor" "on-highlight-document" ":guest" "Event-Handler" "action-handler" "action-handler:" ":images" "portfolio" "portfolio:" "Image-Resource" "resource" "resource:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "22" "highlight-document" "Push-Tool" "tools" "name" "name:" "Layout-View" "border" "layout-type" "layout-type:" "400" "650" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "external-name" method #f 75 25 75 38 ("workbench-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 84 25 84 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 88 25 88 35 ()}
        {Lisp-Entry "install-in-host" method #f 92 20 92 35 ("activate-project" "error?" "error?:" "find-project" "project" "and" "when" "get-preferences" "get-active-project" "active" "get-workbench" "workbench" "let" "setup-active-project" "define" "host")}
        {Lisp-Entry "get-tools-view" method #f 109 20 109 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method #f 113 20 113 33 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" method #f 123 11 123 19 ("tree" "descendants" "locate")}
        {Lisp-Entry "new-controller" method #f 132 20 132 34 ("self" "Workbench-Manager-Controller" "new")}
        {Lisp-Entry "install" method #f 141 20 141 27 ("get-application" "add-exit-listener" "get-workbench" "set-client" "self" "locate" "set-editor" "header" "descendants" "locate-component" "set-shown?" "nextmethod" "rest")}
        {Lisp-Entry "get-designer-class" method #f 149 20 149 38 ("Workbench-Designer")}
        {Lisp-Entry "prepare-exit" method #f 153 20 153 32 ("save-designer" "get-form" "get-origin" "file?" "designer" "and" "when")}
        {Lisp-Entry "on-designer" method #f 163 20 163 31 ("child-remove" ":child-remove" "parent" "parent:" "child" "child:" "get-property" "child-add" ":child-add" "get-kind" "case" "nextmethod" "evt")}
        {Lisp-Entry "child-add" method #f 170 11 170 20 ("designer" "project-add" "Project" "is?" "when" "parent" "child")}
        {Lisp-Entry "child-remove" method #f 175 11 175 23 ("designer" "project-remove" "Project" "is?" "when" "child")}
        {Lisp-Entry "key-press" method #f 185 20 185 29 ("launch-selection" "case" "key")}
        {Lisp-Entry "on-highlight-document" method #f 190 11 190 32 ("highlight-document" "evt")}
        {Lisp-Entry "on-add-project" method #f 194 11 194 25 ("add-project" "evt")}
        {Lisp-Entry "on-add-document" method #f 198 11 198 26 ("add-document" "evt")}
        {Lisp-Entry "on-add-group" method #f 202 11 202 23 ("add-group" "evt")}
        {Lisp-Entry "on-install-project" method #f 206 11 206 29 ("install-project" "directory:" "extensions" "extensions:" "choose-file" "directory" "lambda" "with-import-directory" "file" "selected-object" "parent" "get-shift?" "current-directory?" "let*" "evt")}
        {Lisp-Entry "on-import-files" method #f 215 11 215 26 ("get-shift?" "import-files" "evt")}
        {Lisp-Entry "on-import-directory" method #f 219 11 219 30 ("get-shift?" "import-directory" "evt")}
        {Lisp-Entry "on-synchronize-content" method #f 223 11 223 33 ("synchronize-content" "evt")}
        {Lisp-Entry "on-set-current-directory" method #f 227 11 227 35 ("parse" "user-message" "set-current-directory" "get-directory" "dir" "selected-object" "group" "let" "evt")}
        {Lisp-Entry "on-update-catalog" method #f 234 11 234 28 ("update-catalog" "evt")}
        {Lisp-Entry "on-search-project" method #f 238 11 238 28 ("search-project" "evt")}
        {Lisp-Entry "on-edit-source" method #f 242 11 242 25 ("edit-selection" "evt")}
        {Lisp-Entry "on-activate" method #f 246 11 246 22 ("activate-selection" "evt")}
        {Lisp-Entry "on-run" method #f 250 11 250 17 ("run-selection" "evt")}
        {Lisp-Entry "on-debug" method #f 254 11 254 19 ("debug-selection" "evt")}
        {Lisp-Entry "on-launch" method #f 258 11 258 20 ("launch-selection" "evt")}
        {Lisp-Entry "on-distribute" method #f 262 11 262 24 ("distribute-selection" "evt")}
        {Lisp-Entry "on-properties" method #f 266 11 266 24 ("show-properties" "evt")}
        {Lisp-Entry "highlight-document" method #f 275 11 275 29 ("highlight-document-component" "get-tree" "acquire-focus" "find-source" "project-file" "get-workbench" "workbench" "not" "get-moniker" "moniker" "get-controller" "controller" "let*" "bell" "Document" "is-not?" "if" "current-document" "guest" "let")}
        {Lisp-Entry "highlight-document-component" method #f 291 11 291 39 ("row->line" "set-single-selection" "ensure-expanded" "bell" "not" "if" "component-row" "row" "get-tree" "tree" "let*" "component")}
        {Lisp-Entry "select-current" method #f 305 18 305 32 ("select-project")}
        {Lisp-Entry "select-project" method #f 309 11 309 25 ("activate-project" "when" "Project-Selector" "get-modal" "project" "let")}
        {Lisp-Entry "edit-current" method #f 320 18 320 30 ("current-project" "edit-project")}
        {Lisp-Entry "edit-selection" method #f 324 11 324 25 ("edit-project" "Project" "edit-workbench" "Workbench" "typecase" "object" "lambda" "for-each" "selected-objects" "objects" "let")}
        {Lisp-Entry "Workbench-File" definition #f 333 14 333 28 ("Profile" "File")}
        {Lisp-Entry "edit-workbench" method #f 337 11 337 25 ("edit-document" "Workbench-File" "file" "get-application" "appl" "let")}
        {Lisp-Entry "edit-project" method #f 343 11 343 23 ("get-application" "edit-document" "bell" "not" "if" "file" "get-tag-reference" "Project" "is?" "and" "get-form" "form" "let" "project-file" "define" "project")}
        {Lisp-Entry "add-project" method #f 360 21 360 32 ("get-workbench" "selected-object" "or" "add-project-to")}
        {Lisp-Entry "add-project-to" method #f 364 21 364 35 ("user-message" "car" "activate-project" "collect-concrete-projects" "projects" "select-component" "descendants" "process-refresh" "acquire-focus" "update-project-catalog" "designer" "get-project-designer" "save" "dir" "for-each" "recursive?" "recursive?:" "import-pathname" "src-component" "not-null?" "leaves?" "leaves?:" "nodes?" "nodes?:" "get-content" "exists?" "src-content" "src-directory" "install-project" "project-component" "format" "if" "new-file" "project-file" "lambda" "with-update-locked" "copy-template" "product-directories" "product-unit" "cons" "list" "associations" "destination" "get-application" "templates-directory" "new-directory" "project-templates" "project-title" "project-name" "capitalize" "product-title" "last" "product" "package" "string->symbol" "split-identifier" "->string" "map" "project-parts" "let*" "New-Project-Dialog" "get-modal" "directory" "project" "empty?" "template" "kind" "receive" "Project" "Project-Group" "is?" "or" "when" "get-tree" "tree" "let" "parent")}
        {Lisp-Entry "add-document" method #f 409 21 409 33 ("get-tree" "select-component" "ascendant-project" "import-pathname" "component" "copy-template" "cons" "list" "associations" "parse" "find-pathname-unit" "unit" "destination" "concatenate" "new-file" "get-application" "templates-directory" "new-directory" "file-templates" "extract-extension" "extension" "let*" "directory:" "New-Document-Dialog" "get-modal" "name" "directory" "template" "kind" "receive" "create-directories" "yes" "question" "type" "type:" "get-list" "format" "message-box" "=" "exists?" "get-current-directory" "Profile" "Directory" "must-exist?" "must-exist?:" "default-import-directory" "default-directory" "Project" "Project-Group" "is?" "when" "get-workbench" "selected-object" "or" "parent" "let")}
        {Lisp-Entry "add-group" method #f 429 21 429 30 ("parent:" "get-tree" "add-component-class" "Project" "Project-Group" "is?" "when" "get-workbench" "selected-object" "or" "parent" "let")}
        {Lisp-Entry "install-project" method #f 441 11 441 26 ("get-presentation-property" "user-message" "load-catalogs" "get-tree" "reorder-component" "tag-reference" "tag-reference:" "designer" "add-child" "get-form" "form" "get-name" "error" "Project" "is-not?" "if" "parent:" "instantiate-file" "project" "contextualize-pathname" "ascendant-project" "parent-project" "let" "descendant?" "parent" "file")}
        {Lisp-Entry "MaxFiles-Warning" definition #f 460 14 460 30 ("100")}
        {Lisp-Entry "import-filter?" definition #f 464 15 464 29 ("get-application" "known-extension-frame-class" "get-name" "ci=?" "test" "test:" "member?" "or" "if" "get-include-extensions" "effective-include-extensions" "extensions" "get-extension" "ext" "let" "file" "project")}
        {Lisp-Entry "import-directory" method #f 474 11 474 27 ("parse" "user-message" "descendants" "designer" "process-refresh" "import-pathname" "component" "let" "list" "validate-pathnames" "yes" "question" "type" "type:" "format" "message-box" "eq?" "or" "when" "MaxFiles-Warning" "max-count" "max-count:" "import-filter?" "file" "filter" "filter:" "count-files" "count" "directory:" "choose-directory" "lambda" "with-import-directory" "directory" "ascendant-project" "project" "selected-object" "parent" "let*" "current-directory?")}
        {Lisp-Entry "import-files" method #f 489 11 489 23 ("import-pathnames" "directory:" "multiple-selection?" "multiple-selection?:" "choose-file" "directory" "lambda" "with-import-directory" "files" "ascendant-project" "project" "selected-object" "parent" "let*" "current-directory?")}
        {Lisp-Entry "import-pathnames" method #f 498 21 498 37 ("format-plural" "format-cardinality" "capitalize" "user-message" "length" "count" "get-name" "key" "key:" "nu<?" "sort" "descendants" "designer" "process-refresh" "import-pathname" "component" "let" "pathname" "lambda" "for-each" "validate-pathnames" "when" "parent" "pathnames" "project")}
        {Lisp-Entry "import-pathname" method #f 510 11 510 26 ("string-ci=?" "import-filter?" "or" "File" "install-project" "exists?" "new-file" "Directory" "typecase" "set-name" "import:" "get-workbench" "workbench" "source" "source:" "name:" "project-file" "ide" "jazz" "jazz.ide" "import" "deserialize-runtime-reference" "resolve-runtime-reference" "model" "get-base" "string->symbol" "Jazz-File" "eq?" "if" "name" "class-name" "module-name" "module-public" "bind" "get-extension" "extension-reference" "reference" "file" "import-file" "sort?" "sort?:" "directories?" "directories?:" "files?" "files?:" "import-pathname" "lambda" "iterate-directory" "when" "set-property" "descendant?:" "not" "design-events?" "design-events?:" "designer" "add-child" "directory" "directory:" "Project-Directory" "new" "subgroup" "ascendant-project" "contextualize-pathname" "let" "dir" "import-dir" "define" "recursive?" "recursive?:" "descendant?" "parent" "pathname" "project")}
        {Lisp-Entry "default-import-directory" definition #f 561 15 561 39 ("anchorize" "when" "dir" "else" "get-directory" "Project-Directory" "get-parent" "and" "get-form" "get-tag-reference" "tag-reference" "let" "Project" "typecase" "default" "define" "must-exist?" "must-exist?:" "object")}
        {Lisp-Entry "with-import-directory" method #f 577 11 577 32 ("lambda" "with-preserved-current-directory" "exists?" "if" "default-import-directory" "not" "and" "default-directory" "let" "proc" "object" "current-directory?")}
        {Lisp-Entry "extension-reference" definition #f 586 15 586 34 ("Project-File" "else" "Sound-File" "Icon-File" "Cursor-File" "Bitmap-File" "project" "jazz.project" "C-File" "c" "jazz.editor.c" "Java-File" "java" "jazz.editor.java" "Jazz-File" "jazz" "jazz.editor" "jazz.editor.jazz" "module-public" "ci=?" "test" "test:" "member?" "cond" "ext")}
        {Lisp-Entry "ascendant-project" method #f 597 21 597 38 ("get-parent" "ascendant-project" "Project" "is?" "if" "component")}
        {Lisp-Entry "synchronize-content" method #f 608 11 608 30 ("content:" "confirmation" "type" "type:" "Synchronize-Box" "class" "class:" "reverse" "bind" "info" "for-each" "children:" "add-row" "Image-Resource" "image" "image:" "join" "title" "title:" "Tree-Node" "c0" "add" "locate" "tree" "200" "500" "Dimension" "size" "size:" "Synchronize-Border" "border" "message-box" "null?" "get-output" "out-of-synch" "case-insensitive?" "case-insensitive?:" "right-key" "right-key:" "left-key" "left-key:" "key:" "ci<?" "sort" "directory?" "when" ":same" ":right" "list" "put" ":left" "case" "cons" "right" "left" "key" "what" "lambda" "merge-ordered" "get-content" "content" "get-children" "children" "path" "fold" "pathname" "pathname-name" "get-name" "->string" "component" "component-name" "define" "List-Factory" "new" "fact" "let" "error" "exists?" "not" "if" "must-exist?" "must-exist?:" "default-import-directory" "directory" "ascendant-project" "project" "selected-object" "object" "let*")}
        {Lisp-Entry "validate-pathnames" method #f 661 11 661 29 ("for-each" "get-entry" "jazz-file" "get-base" "string->symbol" "name" "let*" "Jazz-File" "eq?" "get-extension" "extension-model" "model" "import-filter?" "when" "File" "recursive?" "recursive?:" "sort?" "sort?:" "directories?" "directories?:" "files?" "files?:" "iterate-directory" "Directory" "typecase" "pathname" "iterate" "define" "get-workbench" "workbench" "let" "report" "lambda" "validate" "pathnames" "project")}
        {Lisp-Entry "validate" method #f 686 11 686 19 ("message-box" "when" "0" "subseq" "get-presentation-property" "get-name" ":link" ":bulleted" "list" "highlight-document-component" "close-modal-dialog" "action" "get-project" "project" "map" ",header" "text" "format-is/are" "format-y/ies" "format-plural" "format" "header" ">" "too-many?" "10" "max-displayed" "length" "count" "let*" "null?" "if" "get-output" "put" "jazz-file" "lambda" "List-Factory" "new" "already-defined" "get-workbench" "workbench" "let" "iterate")}
        {Lisp-Entry "set-project-active?" method #f 730 19 730 38 ("0" "Cell" "new" "invalidate-cell" "row->line" "line" "component-color" "set-color" "component-image" "set-image" "first-child" "node" "when" "component-row" "row" "get-tree" "tree" "let" "load-catalogs" "use-owner?" "use-owner?:" "active?" "designer" "set-property" "flag" "project")}
        {Lisp-Entry "activate-selection" method #f 749 18 749 36 ("selected-object" "activate-object")}
        {Lisp-Entry "activate-object" method #f 753 11 753 26 ("bell" "concrete-descendant" "let" "activate-project" "if" "include-self?" "include-self?:" "continuation-return" "concrete?" "Project" "is?" "and" "when" "level" "descendant" "for-each-descendant" "return" "lambda" "continuation-capture" "find-concrete-descendant" "define" "object")}
        {Lisp-Entry "activate-project" method #f 775 11 775 27 ("update-project-actions" "get-application" "appl" "highlight-component" "ensure-expanded" "include-invisibles?" "include-invisibles?:" "user-data-row" "row" "set-active-project" "unhighlight-component" "when" "get-tree" "tree" "let" "get-active-project" "eq?" "unless" "project")}
        {Lisp-Entry "update-catalog" method #f 795 11 795 25 ("selected-objects" "objects" "let" "lambda" ":wait" "with-cursor" "get-children" "for-each" "Project-Group" "update-project-catalog" "Project" "typecase" "object" "update" "define")}
        {Lisp-Entry "update-project-catalog" method #f 809 11 809 33 ("update" "load-content" "report?" "report?:" "require-catalog" "catalog" "let" "for-each-project" "lambda" "post-catalog" "project")}
        {Lisp-Entry "search-project" method #f 824 11 824 25 ("set-value" "locate" "combo" "selected-object" "project" "let" "projects-search" "lambda" "selector" "selector:" "projects" "get-application" "update-search")}
        {Lisp-Entry "test-current" method #f 837 18 837 30 ("project-test" "current-project" "project" "let")}
        {Lisp-Entry "run-current" method #f 847 18 847 29 ("run-project" "current-project" "project" "let")}
        {Lisp-Entry "run-selection" method #f 852 18 852 31 ()}
        {Lisp-Entry "run-project" method #f 856 11 856 22 ("get-application" "run-project" "project")}
        {Lisp-Entry "debug-current" method #f 865 18 865 31 ("current-project" "debug-project" "executable" "executable:")}
        {Lisp-Entry "debug-selection" method #f 869 18 869 33 ("debug-project" "current-project" "project" "let")}
        {Lisp-Entry "debug-project" method #f 874 11 874 24 ("debugger-interactive?" "debugger-interactive?:" "get-application" "debug-project" "executable" "executable:" "project")}
        {Lisp-Entry "launch-selection" method #f 883 18 883 34 ("selected-components" "edit-document" "get-extension" "ext" "get-source" "file" "let*" "Project-File" "debug-project" "Project" "typecase" "component" "lambda" "for-each" "get-tree" "tree" "get-application" "appl" "let")}
        {Lisp-Entry "on-build-current" method #f 902 11 902 27 ("build-project" "bell" "not" "if" "current-project" "project" "let" "evt")}
        {Lisp-Entry "build-current" method #f 909 18 909 31 ("build-project" "current-project" "project" "let")}
        {Lisp-Entry "build-project" method #f 914 11 914 24 ("project-build" "project")}
        {Lisp-Entry "compile-current" method #f 923 18 923 33 ("compile-moniker" "get-controller" "get-moniker" "moniker" "save" "get-modified?" "Document" "is?" "and" "when" "current-document" "guest" "let")}
        {Lisp-Entry "compile-moniker" method #f 932 18 932 33 ("compile-file" "error" "not" "if" "find-source" "project-file" "get-workbench" "workbench" "let*" "moniker")}
        {Lisp-Entry "compile-file" method #f 940 11 940 23 ("show-console?" "show-console?:" "->string" "list" "arguments" "arguments:" "launch-executable" "get-project" "project-kernel" "kernel" "bell" "not" "if" "parse" "find-pathname-unit" "name" "let" "project-file" "moniker")}
        {Lisp-Entry "preprocess-current" method #f 953 18 953 36 ("error" "not" "if" "find-source" "get-workbench" "workbench" "get-controller" "get-moniker" "let*" "save" "get-modified?" "Document" "is?" "and" "when" "current-document" "guest" "cpu-duration" "force?" "force?:" "preprocess" "Output-Log" "select-docked" "select-results" "clear-results" "Timer" "new" "timer" "get-output-log" "output" "user-message" "prepare-directories" "prepare-maps" "get-project" "project" "thread" "lambda" "proc" "let" "file" "moniker" "preprocess-file" "define")}
        {Lisp-Entry "clean-current" method #f 987 18 987 31 ("clean-project" "current-project" "project" "let")}
        {Lisp-Entry "clean-project" method #f 992 11 992 24 ("bell" "concrete?" "if" "project")}
        {Lisp-Entry "on-distribute-current" method #f 1004 11 1004 32 ("distribute-project" "bell" "not" "if" "selected-project" "project" "let" "evt")}
        {Lisp-Entry "distribute-current" method #f 1011 18 1011 36 ("distribute-project" "current-project" "project" "let")}
        {Lisp-Entry "distribute-selection" method #f 1016 11 1016 31 ("selected-project" "distribute-project")}
        {Lisp-Entry "distribute-project" method #f 1020 11 1020 29 ("focus-host" "get-guest" "compare-trees" "lambda" ":wait" "with-cursor" "host-visible?" "host-visible?:" "ignored-extensions" "ignored-extensions:" "ignored-leaves" "ignored-leaves:" "ignored-nodes" "ignored-nodes:" "left-content" "left-content:" "right-moniker" "right-moniker:" "left-moniker" "left-moniker:" "Compare-Directories" "new-frame" "frame" "extensions" "files" "list" "ignored-dirs" "project-distribution-list" "content" "project-distribution-directory" "right" "project-distribution" "left" "backup" "mode" "let*" "project")}
        {Lisp-Entry "selected-object" method #f 1040 11 1040 26 ("selected-component" "get-tree" "tree" "let")}
        {Lisp-Entry "selected-objects" method #f 1045 11 1045 27 ("selected-components" "get-tree" "tree" "let")}
        {Lisp-Entry "selected-project" method #f 1050 11 1050 27 ("Project" "is?" "when" "selected-object" "object" "let")}
        {Lisp-Entry "selected-concrete-project" method #f 1056 11 1056 36 ("concrete?" "Project" "is?" "and" "when" "selected-object" "object" "let")}
        {Lisp-Entry "current-project" method #f 1063 11 1063 26 ("error" "get-active-project" "not" "if")}
        {Lisp-Entry "new-menu" method #f 1074 18 1074 26 ("else" "concrete?" "if" "Project" "Project-Group" "Workbench" "typecase" "selected-object" "import-directory" "import-files" "install-project" "add-document" "add-project" "1" "get-selection" "length" ">" "when" "locate-component" "item" "name" "hide-item" "Element-Menu" "new-element-menu" "Project-Menu" "new-project-menu" "Concrete-Project-Menu" "new-concrete-project-menu" "search-project" "update-catalog" "locate" "set-visible?" "has-content?" "content?" "Workbench-Menu" "new-workbench-menu" "layout-menu" "cleanup-separators" "update-group/project-menu" "selected-components" "update-component-menu" "client" "client:" "Group-Menu" "new" "menu" "object" "new-group-menu" "define" "get-tree" "tree" "let")}
        {Lisp-Entry "describe-state" method #f 1153 11 1153 25 ("category" "name" "get-categories-table" "table-keys/values" "when" "0" "subseq" "if" "project" "bind" "for-each" "5" "length" ">" "more?" "car" "class-of" "category-identifier" "pair" "lambda" "key" "key:" "designer" "get-project-designers" "<" "sort" "pairs" "let*" "get-active-project" ":console" "format" "get-workbench" "workbench" "let" "pos")}}
      {Lisp-Entry "Workbench-Manager-Controller" class #f 1181 7 1181 35 ("Component-Editor-Controller")
        {Lisp-Entry "document-status" method #f 1184 20 1184 35 ()}}
      {Lisp-Entry "Synchronize-Border" class #f 1193 7 1193 25 ("Border-View")
        {Lisp-Entry "form" anonymous #f 1196 3 1196 7 ("tree" "Synchronize-Tree" "Tree-Header" "fill" "layout-type" "layout-type:" "content" "name" "name:" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "tool" "style" "style:" "Scroller-View" "Outline-Border" "Color" "border-color" "border-color:" "solid" "border-type" "border-type:" "install")}}
      {Lisp-Entry "Group-Menu" class #f 1210 7 1210 17 ("Component-Menu")
        {Lisp-Entry "form" anonymous #f 1213 3 1213 7 ("delete-selection" "!" "set-current-directory" "Separator-Item" "synchronize-content" "import-directory" "import-files" "cut" "install-project" "Image-Resource" "icon" "icon:" "add-document" "workbench-manager" "Action" "action-handler" "action-handler:" "add-item" "before" "before:" "title" "title:" "add-project" "name" "name:" "Label-Item" "install")}}
      {Lisp-Entry "Project-Menu" class #f 1233 7 1233 19 ("Component-Menu")
        {Lisp-Entry "form" anonymous #f 1236 3 1236 7 ("delete-selection" "!" "update-catalog" "search-project" "synchronize-content" "import-directory" "import-files" "cut" "install-project" "add-document" "add-project" "Separator-Item" "workbench-manager" "Action" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "add-item" "before" "before:" "title" "title:" "edit-source" "name" "name:" "Label-Item" "install")}}
      {Lisp-Entry "Concrete-Project-Menu" class #f 1259 7 1259 28 ("Project-Menu")
        {Lisp-Entry "form" anonymous #f 1262 3 1262 7 ("Separator-Item" "workbench-manager" "Action" "action-handler" "action-handler:" "default?" "default?:" "cut" "before" "before:" "title" "title:" "activate" "name" "name:" "Label-Item" "install")}}
      {Lisp-Entry "Workbench-Menu" class #f 1273 7 1273 21 ("Project-Menu")
        {Lisp-Entry "form" anonymous #f 1276 3 1276 7 ("visible?" "visible?:" "synchronize-content" "name" "name:" "!" "install")}}
      {Lisp-Entry "Element-Menu" class #f 1287 7 1287 19 ("Component-Menu")
        {Lisp-Entry "form" anonymous #f 1290 3 1290 7 ("delete-selection" "!" "Separator-Item" "launch" "workbench-manager" "Action" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "default?" "default?:" "cut" "before" "before:" "title" "title:" "edit-source" "name" "name:" "Label-Item" "install")}}}})
"Workbench-Manager-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "Workbench-Manager-Actions.jazz"} 1298725029 jazz
    {Lisp-Entry "jazz.project.workbench.Workbench-Manager-Actions" module #f 37 18 37 66 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Workbench-Manager-Actions" class #f 45 7 45 32 ("Actions")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("on-launch" "launch" "on-add-dependency" "add-dependency" "on-activate" "activate" "on-search-project" "search-project" "on-update-catalog" "update-catalog" "on-edit-source" "edit-source" "on-set-current-directory" "set-current-directory" "on-synchronize-content" "synchronize-content" "on-import-directory" "import-directory" "on-import-files" "import-files" "on-install-project" "install-project" "on-add-group" "add-group" "on-add-document" "add-document" ":control" "Shortcut" "shortcut" "shortcut:" "on-add-project" ":workbench-manager" "Event-Handler" "action-handler" "action-handler:" "add-project" "name" "name:" "Action-Item" "install")}}}})
"Workbench-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "preference" "Workbench-Preferences.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.preference.Workbench-Preferences" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Workbench-Preferences" class #f 44 7 44 28 ("initialize" "Preferences")
        {Lisp-Entry "active-project" property #f 47 12 47 26 ()}
        {Lisp-Entry "get-active-project" accessor #f 47 51 47 59 ()}
        {Lisp-Entry "set-active-project" accessor #f 47 51 47 59 ()}
        {Lisp-Entry "form" anonymous #f 50 3 50 7 ("title" "title:" "install")}
        {Lisp-Entry "get-class-descriptor" method #f 59 25 59 45 ("Workbench-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 68 11 68 17 ()
        {Lisp-Entry "import" anonymous #f 71 1 71 7 ("jazz.designer")}
        {Lisp-Entry "Workbench-Preferences-Descriptor" class #f 74 7 74 39 ("Preferences-Descriptor")
          {Lisp-Entry "form" anonymous #f 77 3 77 7 ("active-project" "name" "name:" "Property-Descriptor" ">" "<properties" "<properties~>" "can-copy?" "can-copy?:" "can-move?" "can-move?:" "can-delete?" "can-delete?:" "can-rename?" "can-rename?:" "install")}}}}})
"Workbench-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "Workbench-Tree.jazz"} 1297194231 jazz
    {Lisp-Entry "jazz.project.workbench.Workbench-Tree" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.project" "jazz.platform" "jazz.library" "jazz.jml" "jazz.ide" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Workbench-Tree" class #f 50 7 50 21 ("Descendants-Tree")
        {Lisp-Entry "form" anonymous #f 53 3 53 7 ("reorderable?" "reorderable?:" "editable?" "editable?:" "draggable?" "draggable?:" ":images" "portfolio" "portfolio:" "install")}
        {Lisp-Entry "focus-actions" method #f 57 20 57 33 ("nextmethod" "workbench-tree" "find-actions" "cons")}
        {Lisp-Entry "on-add-project" method #f 62 11 62 25 ("get-manager" "add-project" "evt")}
        {Lisp-Entry "on-add-document" method #f 66 11 66 26 ("get-manager" "add-document" "evt")}
        {Lisp-Entry "on-add-group" method #f 70 11 70 23 ("get-manager" "add-group" "evt")}
        {Lisp-Entry "get-manager" method #f 74 11 74 22 ("get-host" "get-guest")}
        {Lisp-Entry "context-menu" method #f 78 20 78 32 ("track-popup-menu" "when" "new-menu" "menu" "lambda" "with-context-click" "get-manager" "manager" "let" "pos")}
        {Lisp-Entry "can-copy?" method #f 90 20 90 29 ()}
        {Lisp-Entry "can-paste-properties?" method #f 94 20 94 41 ()}
        {Lisp-Entry "get-draggable?" method #f 98 20 98 34 ()}
        {Lisp-Entry "confirm-close" method #f 103 20 103 33 ("confirm-action" "components")}
        {Lisp-Entry "component-color" method #f 107 20 107 35 ("Medium-Gray" "Color" "get-active?" "Project" "is?" "if" "nextmethod" "color" "let" "component")}
        {Lisp-Entry "component-image" method #f 116 20 116 35 ("disabled-image-resource" "get-active?" "Project" "is?" "if" "nextmethod" "image" "let" "component")}
        {Lisp-Entry "update-selection" method #f 125 20 125 36 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" method #f 129 20 129 29 ("collapsed" "expanded" "1" "<" "if" "level" "update?" "component")}
        {Lisp-Entry "double-click" method #f 135 20 135 32 ("launch-selection" "Group" "or" "unless" "nextmethod" "activate-selection" "concrete?" "Project" "is?" "and" "if" "selected-component" "component" "get-manager" "manager" "let" "pos")}
        {Lisp-Entry "return-press" method #f 146 20 146 32 ("launch-selection" "Group" "unless" "activate-selection" "Project" "is?" "if" "selected-component" "component" "get-manager" "manager" "let" "key")}
        {Lisp-Entry "receive-files" method #f 155 20 155 33 ("bell" "ascendant-project" "import-pathnames" "Project-Group" "Project" "is?" "or" "get-manager" "manager" "get-line" "get-row" "get-user-data" "get-workbench" "not" "if" "data" "view->tree" "cell" "let*" "pathnames" "pos")}
        {Lisp-Entry "addable-root-classes" method #f 166 11 166 31 ("Module" "Project" "Group" "reference" "list")}}}})
"Workbench-Tree-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "workbench" "Workbench-Tree-Actions.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.project.workbench.Workbench-Tree-Actions" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Workbench-Tree-Actions" class #f 45 7 45 29 ("Actions")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("on-add-group" "add-group" "on-add-document" "add-document" ":control" "Shortcut" "shortcut" "shortcut:" "on-add-project" ":focus" "Event-Handler" "action-handler" "action-handler:" "add-project" "name" "name:" "Action-Item" "install")}}}})
"_project"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "_project.jazz"} 1298564205 jazz
    {Lisp-Entry "jazz.project" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.project.autoload")}
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.system" "jazz.io" "jazz.ide" "jazz.project.autoload")}
      {Lisp-Entry "find-kernel" definition #f 52 20 52 31 ("kernel-platform" "executable-extension" "add-extension" "concatenate" "tokenise-filename" "File" "new" "kernel-source" "destination-directory" "dir" "let" "destination")}
      {Lisp-Entry "require-kernel" definition #f 57 20 57 34 ("error" "exists?" "if" "find-kernel" "kernel" "let" "destination")}
      {Lisp-Entry "find-actual-kernel" definition #f 64 20 64 38 ("tokenise-filename" "File" "new" "kernel-platform" "executable-extension" "add-extension" "kernel-install" "concatenate" "filename" "let")}
      {Lisp-Entry "require-actual-kernel" definition #f 69 20 69 41 ("error" "exists?" "if" "find-actual-kernel" "kernel" "let")}
      {Lisp-Entry "launch-executable" definition #f 76 20 76 37 ("show-console" "show-console:" "stderr-redirection" "stderr-redirection:" "stdout-redirection" "stdout-redirection:" "stdin-redirection" "stdin-redirection:" "and" "parse" "path" "path:" "list" "open-process" "debug" "append" "arguments-arg" "or" "runtime-arg" "let*" "wait?" "wait?:" "show-console?" "show-console?:" "arguments" "arguments:" "runtime-arguments" "runtime-arguments:" "directory" "directory:" "executable")}
      {Lisp-Entry "*active-repositories*" definition #f 100 12 100 33 ()}
      {Lisp-Entry "get-active-repositories" definition #f 104 13 104 36 ("*active-repositories*")}
      {Lisp-Entry "set-active-repositories" definition #f 108 13 108 36 ("*active-repositories*" "set!" "repositories")}
      {Lisp-Entry "*active-workbench*" definition #f 117 12 117 30 ()}
      {Lisp-Entry "get-workbench" definition #f 121 20 121 33 ("*active-workbench*")}
      {Lisp-Entry "set-workbench" definition #f 125 20 125 33 ("*active-workbench*" "set!" "workbench")}
      {Lisp-Entry "*active-project*" definition #f 134 12 134 28 ()}
      {Lisp-Entry "get-active-project" definition #f 138 20 138 38 ("*active-project*")}
      {Lisp-Entry "set-active-project" definition #f 142 20 142 38 ("*active-project*" "set!" "project")}
      {Lisp-Entry "collect-concrete-projects" definition #f 146 20 146 45 ("queue-list" "enqueue" "concrete?" "when" "file" "lambda" "for-each-project" "new-queue" "projects" "let" "project")}
      {Lisp-Entry "build-preferences" definition #f 160 13 160 30 ("build" "get-preferences")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "project" "autoload.jazz"} 1297212390 jazz
    {Lisp-Entry "jazz.project.autoload" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("Workbench-Preferences" "jazz.project.preference.Workbench-Preferences" "Repositories-Preferences" "jazz.project.preference.Repositories-Preferences" "Workbench-Tree-Actions" "jazz.project.workbench.Workbench-Tree-Actions" "Workbench-Tree" "jazz.project.workbench.Workbench-Tree" "Workbench-Manager-Actions" "jazz.project.workbench.Workbench-Manager-Actions" "Workbench-Manager" "jazz.project.workbench.Workbench-Manager" "Workbench-Editor" "jazz.project.workbench.Workbench-Editor" "Workbench-Designer" "jazz.project.workbench.Workbench-Designer" "Workbench-Cataloguer" "jazz.project.workbench.Workbench-Cataloguer" "Workbench" "jazz.project.workbench.Workbench" "Synchronize-Tree" "jazz.project.workbench.Synchronize-Tree" "Synchronize-Entry" "jazz.project.workbench.Synchronize-Entry" "Synchronize-Box" "jazz.project.workbench.Synchronize-Box" "Projects-Manager" "jazz.project.workbench.Projects-Manager" "Project-Selector" "jazz.project.workbench.Project-Selector" "New-Project-Dialog" "jazz.project.workbench.New-Project-Dialog" "New-Document-Dialog" "jazz.project.workbench.New-Document-Dialog" "Sound-File" "jazz.project.resource.Sound-File" "Resource-File" "jazz.project.resource.Resource-File" "Icon-File" "jazz.project.resource.Icon-File" "Cursor-File" "jazz.project.resource.Cursor-File" "Bitmap-File" "jazz.project.resource.Bitmap-File" "Repositories-Manager-Actions" "jazz.project.repositories.Repositories-Manager-Actions" "Repositories-Manager" "jazz.project.repositories.Repositories-Manager" "Repositories" "jazz.project.repositories.Repositories" "Repository" "jazz.project.repositories.Repository" "Package" "jazz.project.repositories.Package" "New-Repository-Dialog" "jazz.project.repositories.New-Repository-Dialog" "New-Package-Dialog" "jazz.project.repositories.New-Package-Dialog" "Project-Not-Found" "jazz.project.project.Project-Not-Found" "Project-Designer" "jazz.project.project.Project-Designer" "Project-Catalog" "jazz.project.project.Project-Catalog" "Project-Descriptor" "Project" "jazz.project.project.Project" "Configuration-Descriptor" "Configuration" "jazz.project.project.Configuration" "Project-Group-Descriptor" "Project-Group" "jazz.project.file.Project-Group" "Project-File-Descriptor" "Project-File" "jazz.project.file.Project-File" "Project-Directory" "autoload" "jazz.project.file.Project-Directory")}}})
