"Add-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "menu" "Add-Menu.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.menu.Add-Menu" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Add-Menu" class #f 43 20 43 28 ("Context-Menu")}}})
"Alignment-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "manager" "Alignment-Editor.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.manager.Alignment-Editor" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.platform" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Alignment-Editor" class #f 49 7 49 23 ("explicit" "initialize" "View")
        {Lisp-Entry "client" property #f 52 12 52 18 ()}
        {Lisp-Entry "flow-layout" slot #f 55 8 55 19 ()}
        {Lisp-Entry "form" anonymous #f 58 3 58 7 ("on-resize-both" "resize-both" "on-resize-height" "resize-height" "on-resize-width" "resize-width" "on-space-vertically" "space-vertically" "on-space-horizontally" "space-horizontally" "on-center-vertically" "center-vertically" "on-center-horizontally" "center-horizontally" "Separator" "on-align-bottom" "align-bottom" "on-align-top" "align-top" "on-align-right" "align-right" "on-align-left" ":form" "Event-Handler" "action-handler" "action-handler:" "Image-Resource" "resource" "resource:" "tooltip-text" "tooltip-text:" "align-left" "name" "name:" "Action-Icon" "Medium" "Color" "background" "background:" "install")}
        {Lisp-Entry "external-name" method #f 76 25 76 38 ("alignment-editor" "rest")}
        {Lisp-Entry "host-title" method #f 85 25 85 35 ()}
        {Lisp-Entry "client-activate" method #f 89 20 89 35 ("set-client" "View-Editor" "is?" "and" "client" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method #f 95 20 95 37 ("set-client")}
        {Lisp-Entry "finish" method #f 104 20 104 26 ("layout-view" "0" "5" "4" "Rect" "insets" "insets:" "Flow-Layout" "new" "flow-layout" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "layout" method #f 110 20 110 26 ("get-height" "get-width" "children" "flow-layout" "layout")}
        {Lisp-Entry "on-align-left" method #f 114 11 114 24 ("align-left" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-align-top" method #f 121 11 121 23 ("align-top" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-align-right" method #f 128 11 128 25 ("align-right" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-align-bottom" method #f 135 11 135 26 ("align-bottom" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-center-horizontally" method #f 142 11 142 33 ("center-horizontally" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-center-vertically" method #f 149 11 149 31 ("center-vertically" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-space-horizontally" method #f 156 11 156 32 ("space-horizontally" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-space-vertically" method #f 163 11 163 30 ("space-vertically" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-resize-width" method #f 170 11 170 26 ("resize-width" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-resize-height" method #f 177 11 177 27 ("resize-height" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-resize-both" method #f 184 11 184 25 ("resize-both" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "get-client" method #f 196 18 196 28 ("client")}
        {Lisp-Entry "set-client" method #f 200 18 200 28 ("client-update" "client" "set!" "clt")}
        {Lisp-Entry "client-update" method #f 205 11 205 24 ("resize-both" "resize-height" "resize-width" "space-vertically" "space-horizontally" "center-vertically" "center-horizontally" "align-bottom" "align-top" "align-right" "client" "align-left" "locate" "set-enabled?")}}}})
"Book-Controller"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "book" "Book-Controller.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.book.Book-Controller" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Book-Controller" class #f 43 20 43 35 ("Document-Controller")
        {Lisp-Entry "get-modified?" method #f 46 20 46 33 ("continuation-return" "get-editor" "get-modified?" "when" "section" "name" "document" "for-each-section" "return" "lambda" "continuation-capture")}
        {Lisp-Entry "set-modified?" method #f 56 20 56 33 ("update-status" "get-editor" "set-modified?" "section" "name" "lambda" "document" "for-each-section" "state")}}}})
"Book-Section"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "book" "Book-Section.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.book.Book-Section" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Book-Section" class #f 40 20 40 32 ("Object")
        {Lisp-Entry "title" slot #f 43 8 43 13 ()}
        {Lisp-Entry "get-title" accessor #f 43 29 43 37 ()}
        {Lisp-Entry "set-title" accessor #f 43 29 43 37 ()}
        {Lisp-Entry "model" slot #f 44 8 44 13 ()}
        {Lisp-Entry "get-model" accessor #f 44 29 44 37 ()}
        {Lisp-Entry "set-model" accessor #f 44 29 44 37 ()}
        {Lisp-Entry "client" slot #f 45 8 45 14 ()}
        {Lisp-Entry "designer" slot #f 46 8 46 16 ()}
        {Lisp-Entry "editor" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-editor" accessor #f 47 29 47 37 ()}
        {Lisp-Entry "set-editor" accessor #f 47 29 47 37 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("editor~self" "designer~self" "client~self" "model~self" "self" "title~self" "set!" "nextmethod" "editor" "editor:" "designer" "designer:" "client" "client:" "model" "model:" "title" "title:")}
        {Lisp-Entry "print" method #f 63 20 63 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-client" method #f 74 18 74 28 ("client")}
        {Lisp-Entry "set-client" method #f 78 18 78 28 ("set-client" "editor" "when" "designer" "client" "set!" "value")}
        {Lisp-Entry "get-designer" method #f 85 18 85 30 ("editor" "get-designer" "set!" "designer" "unless")}
        {Lisp-Entry "set-designer" method #f 91 18 91 30 ("designer" "set!" "value")}}}})
"Book-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "book" "Book-View.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.book.Book-View" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui" "jazz.system" "jazz.io" "jazz.designer")}
      {Lisp-Entry "Book-View" class #f 48 20 48 29 ("eq?" "test" "test:" "make-table" "initialize" "Document" "Layout-View")
        {Lisp-Entry "sections" slot #f 51 8 51 16 ()}
        {Lisp-Entry "book" slot #f 52 8 52 12 ()}
        {Lisp-Entry "get-book" accessor #f 52 44 52 52 ()}
        {Lisp-Entry "set-book" accessor #f 52 44 52 52 ()}
        {Lisp-Entry "controller" slot #f 53 8 53 18 ()}
        {Lisp-Entry "default-extension" method #f 56 20 56 37 ()}
        {Lisp-Entry "extensions" method #f 57 20 57 30 ()}
        {Lisp-Entry "focus-document" method #f 58 20 58 34 ()}
        {Lisp-Entry "current-history-item" method #f 59 20 59 40 ()}
        {Lisp-Entry "compare-moniker" method #f 60 20 60 35 ("moniker")}
        {Lisp-Entry "destroy" method #f 63 20 63 27 ("nextmethod" "controller" "close")}
        {Lisp-Entry "get-version" method #f 73 18 73 29 ("book" "get-version")}
        {Lisp-Entry "get-properties" method #f 77 18 77 32 ("book" "get-properties")}
        {Lisp-Entry "get-description" method #f 81 18 81 33 ("book" "get-description")}
        {Lisp-Entry "get-book-name" method #f 85 18 85 31 ("book" "get-book-name")}
        {Lisp-Entry "add-section" method #f 94 18 94 29 ("sections" "table-set!" "book" "get-client" "when" "section" "name")}
        {Lisp-Entry "remove-section" method #f 99 18 99 32 ("sections" "table-set!" "book" "get-client" "when" "name")}
        {Lisp-Entry "get-section" method #f 104 18 104 29 ("error" "sections" "table-ref" "or" "name")}
        {Lisp-Entry "get-client" method #f 109 18 109 28 ("get-section" "get-client" "name")}
        {Lisp-Entry "get-designer" method #f 113 18 113 30 ("get-section" "get-designer" "name")}
        {Lisp-Entry "get-editor" method #f 117 18 117 28 ("get-section" "get-editor" "name")}
        {Lisp-Entry "for-each-section" method #f 121 18 121 34 ("book" "get-names" "get-section" "name" "lambda" "for-each" "proc")}
        {Lisp-Entry "set-client-from-forms" method #f 132 18 132 39 ("clients-update" "set-client" "book" "book:" "instantiate" "client" "let" "form" "name" "lambda" "for-each-property" "client-forms")}
        {Lisp-Entry "clients-update" method #f 140 26 140 40 ("set-client" "get-section" "section" "let" "client" "name" "lambda" "book" "for-each-client")}
        {Lisp-Entry "update-names" method #f 147 11 147 23 ("trait" "trait:" "set-name" "get-designer" "designer" "get-client" "client" "let" "section" "name" "lambda" "for-each-section" "book-name")}
        {Lisp-Entry "new-event" method #f 161 25 161 34 ("set-visible?" "bring-to-front" "update-names" "clients-update" "update-status" "set-newname" "List-Factory" "new" "fact" "get-controller" "controller" "collect-names" "unique-domain-name" "book-name" "get-guest" "book-view" "rest" "new-frame" "apply" "frame" "let*" "host-visible?" "host-visible?:")}
        {Lisp-Entry "collect-names" method #f 177 16 177 29 ("all-frames" "get-book-name" "neq?" "and" "get-guest" "guest" "Internal-Frame-Host" "is?" "when" "frame" "lambda" "collect" "class-of" "model" "let" "book")}
        {Lisp-Entry "empty-sections" method #f 192 18 192 32 ("clients-update" "set-name" "get-designer" "designer" "let" "set-client" "self" "book" "book:" "instantiate" "client" "get-model" "model" "model:" "action" "action:" "textual?" "textual?:" "Form" "new" "form" "get-name" "old-name" "get-client" "old-client" "get-section" "section" "let*" "name" "lambda" "for-each" "sections")}
        {Lisp-Entry "install-in-host" method #f 211 20 211 35 ("get-controller" "install-in-host" "nextmethod" "host")}
        {Lisp-Entry "get-controller" method #f 221 20 221 34 ("new-controller" "set!" "controller" "unless")}
        {Lisp-Entry "new-controller" method #f 227 20 227 34 ("self" "Book-Controller" "new")}
        {Lisp-Entry "save" method #f 231 20 231 24 ("get-controller" "save")}
        {Lisp-Entry "save-as" method #f 235 20 235 27 ("get-controller" "save-as")}
        {Lisp-Entry "save-to" method #f 239 20 239 27 ("get-controller" "save-to" "moniker")}
        {Lisp-Entry "save-all" method #f 243 26 243 34 ("get-controller" "save-all")}
        {Lisp-Entry "install-scroller?" method #f 247 20 247 37 ()}
        {Lisp-Entry "get-moniker" method #f 251 11 251 22 ("get-controller" "get-moniker")}
        {Lisp-Entry "set-moniker" method #f 255 11 255 22 ("get-controller" "set-moniker" "moniker")}
        {Lisp-Entry "verify-reload" method #f 259 20 259 33 ()}
        {Lisp-Entry "reload-moniker" method #f 263 20 263 34 ("update-moniker-time" "reload-content" "lambda" "with-locked-update" "when" "moniker")}
        {Lisp-Entry "reload-content" method #f 271 11 271 25 ("update-status" "set-modified?" "load-content" "empty-content" "moniker")}
        {Lisp-Entry "empty-content" method #f 278 29 278 42 ()}
        {Lisp-Entry "get-modified?" method #f 282 20 282 33 ("get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 286 20 286 33 ("get-controller" "set-modified?" "state")}
        {Lisp-Entry "update-status" method #f 290 11 290 24 ("get-controller" "update-status")}
        {Lisp-Entry "update-moniker-time" method #f 294 11 294 30 ("get-controller" "update-moniker-time" "moniker")}
        {Lisp-Entry "confirm-close" method #f 298 20 298 33 ("get-controller" "confirm-close" "rest")}
        {Lisp-Entry "tool-update" method #f 302 20 302 31 ("tool?")}
        {Lisp-Entry "console-update" method #f 306 20 306 34 ("console?")}
        {Lisp-Entry "load-content" method #f 315 20 315 32 ("update-status" "clients-update" "book" "load-content" "moniker")}
        {Lisp-Entry "save-content" method #f 326 20 326 32 ("process-saved" "update-status" "set-modified?" "update-moniker-time" "-1" "print-to" "format" "get-title" "output-section" "set!" "output-properties" "output-version" "get-description" "output-header" "when" "first?" "output" "UTF-8" "char-encoding" "char-encoding:" "path-settings" "call-with-output-file" "get-editor" "process-saving" "trait" "trait:" "get-client" "set-name" "get-form" "set-origin" "get-designer" "designer" "section" "name" "for-each-section" "get-base" "base" "let" "lambda" ":wait" "with-cursor" "moniker")}
        {Lisp-Entry "output-version" method #f 358 11 358 25 ("get-version" "format" "output")}
        {Lisp-Entry "output-properties" method #f 362 20 362 37 ("null?" "if" "format" "get-properties" "properties" "let" "output")}}}})
"Boolean-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Boolean-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Boolean-Domain" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Boolean-Domain" class #f 44 7 44 21 ("Domain")
        {Lisp-Entry "validate-value" method #f 52 20 52 34 ("property:" "format" "message" "message:" "Integrity-Violation" "new" "add-violation" "memq?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 62 20 62 27 ("if" "value")}
        {Lisp-Entry "setup-entry" method #f 73 20 73 31 ("self" "domain" "domain:" "parent" "parent:" "Boolean-Entry" "new" "client" "view")}
        {Lisp-Entry "double-click" method #f 78 20 78 32 ("focus-editor" "value" "not" "set-edited-value" "enter-edited-value" "pos")}}}})
"Boolean-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Boolean-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.entry.Boolean-Entry" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Boolean-Entry" class #f 45 7 45 20 ("Property-Entry")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("selectable?" "selectable?:" "checkbox" "name" "name:" "Entry-Check-Box" "auto-size?" "auto-size?:" "install")}
        {Lisp-Entry "preferred-size" method #f 53 20 53 34 ("16" "Dimension")}
        {Lisp-Entry "finish" method #f 57 20 57 26 ("self" "checkbox" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" method #f 67 20 67 28 ("checkbox" "locate")}
        {Lisp-Entry "validate" method #f 76 20 76 28 ("domain")}
        {Lisp-Entry "get-value" method #f 85 20 85 29 ("checkbox" "locate" "get-checked?")}
        {Lisp-Entry "set-value" method #f 89 20 89 29 ("checkbox" "locate" "set-checked?" "value")}
        {Lisp-Entry "get-modified?" method #f 93 20 93 33 ("checkbox" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 97 20 97 33 ("checkbox" "locate" "set-modified?" "value")}
        {Lisp-Entry "set-editable?" method #f 106 20 106 33 ("checkbox" "locate" "set-editable?" "value")}
        {Lisp-Entry "set-enabled?" method #f 115 20 115 32 ("checkbox" "locate" "set-enabled?" "value")}}
      {Lisp-Entry "Entry-Check-Box" class #f 124 7 124 22 ("initialize" "Check-Box")
        {Lisp-Entry "editor" property #f 127 12 127 18 ()}
        {Lisp-Entry "get-editor" accessor #f 127 43 127 51 ()}
        {Lisp-Entry "set-editor" accessor #f 127 43 127 51 ()}
        {Lisp-Entry "focus-gained" method #f 130 20 130 32 ("editor-focus-gained" "get-manager" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}
        {Lisp-Entry "focus-lose" method #f 138 20 138 30 ("editor-focus-lose" "get-manager" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}}}})
"Card"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "card" "Card.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.card.Card" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Card" class #f 45 20 45 24 ("initialize" "Layout-View")
        {Lisp-Entry "editor" slot #f 48 8 48 14 ()}
        {Lisp-Entry "client" slot #f 49 8 49 14 ()}
        {Lisp-Entry "designer" slot #f 50 8 50 16 ()}
        {Lisp-Entry "destroy" method #f 58 20 58 27 ("nextmethod" "set-editor" "set-designer")}
        {Lisp-Entry "get-editor" method #f 69 26 69 36 ("editor")}
        {Lisp-Entry "set-editor" method #f 73 26 73 36 ("on-editor" "method-name" "method-name:" "target" "target:" "Event-Handler" "new" "add-editor-listener" "set!" "self" "remove-editor-listener" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "on-editor" method #f 82 29 82 38 ("get-force?" "force?" "force?:" "get-selection" "car" "set-client" ":selection-changed" "designer" "designer:" "get-property" "set-designer" ":designer-change" "get-kind" "case" "evt")}
        {Lisp-Entry "get-client" method #f 93 26 93 36 ("client")}
        {Lisp-Entry "set-client" method #f 97 26 97 36 ("client-update" "set!" "client" "neq?" "or" "when" "force?" "force?:" "clt")}
        {Lisp-Entry "client-update" method #f 103 26 103 39 ()}
        {Lisp-Entry "get-designer" method #f 112 26 112 38 ("designer")}
        {Lisp-Entry "set-designer" method #f 116 26 116 38 ("set!" "install-listener" "uninstall-listener" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "on-designer" method #f 125 11 125 22 ("call-property-change" ":property-change" "get-kind" "case" "evt")}
        {Lisp-Entry "call-property-change" method #f 131 29 131 49 ("value" "value:" "property" "property:" "property-change" "client" "eq?" "when" "component:" "get-property" "component" "let" "evt")}
        {Lisp-Entry "property-change" method #f 137 26 137 41 ("value" "property" "component")}
        {Lisp-Entry "install-listener" method #f 146 11 146 27 ("add-designer-listener" "on-designer" "method-name" "method-name:" "self" "target" "target:" "Event-Handler" "new" "listener" "let" "designer")}
        {Lisp-Entry "uninstall-listener" method #f 151 11 151 29 ("self" "remove-designer-listener" "designer")}
        {Lisp-Entry "enter-value" method #f 160 26 160 37 ("designer" "set-property" "client" "when" "value" "property")}}}})
"Cell-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Cell-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Cell-Domain" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Cell-Domain" class #f 44 7 44 18 ("Text-Domain")
        {Lisp-Entry "present" method #f 52 20 52 27 ("get-col" "get-line" "format" "not" "if" "cell")}
        {Lisp-Entry "parse" method #f 65 20 65 25 ("Cell" "new" "col" "line" "bind" "read-delimited-string" "lst" "let" "text")}}}})
"Child-Descriptor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "descriptor" "Child-Descriptor.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.descriptor.Child-Descriptor" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer.descriptor")}
      {Lisp-Entry "Child-Descriptor" class #f 44 7 44 23 ("initialize" "Component")
        {Lisp-Entry "title" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-title" accessor #f 47 44 47 52 ()}
        {Lisp-Entry "set-title" accessor #f 47 44 47 52 ()}
        {Lisp-Entry "target" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-target" accessor #f 48 44 48 52 ()}
        {Lisp-Entry "set-target" accessor #f 48 44 48 52 ()}
        {Lisp-Entry "classes" property #f 49 12 49 19 ()}
        {Lisp-Entry "get-classes" accessor #f 49 45 49 53 ()}
        {Lisp-Entry "set-classes" accessor #f 49 45 49 53 ()}}}})
"Children-Descriptor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "descriptor" "Children-Descriptor.jazz"} 1298554945 jazz
    {Lisp-Entry "jazz.designer.descriptor.Children-Descriptor" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer.descriptor")}
      {Lisp-Entry "Children-Descriptor" class #f 44 20 44 39 ("initialize" "Component")
        {Lisp-Entry "addable?" property #f 47 12 47 20 ()}
        {Lisp-Entry "get-addable?" accessor #f 47 45 47 53 ()}
        {Lisp-Entry "set-addable?" accessor #f 47 45 47 53 ()}
        {Lisp-Entry "get-class-descriptor" method #f 55 25 55 45 ("Children-Descriptor-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 64 11 64 17 ()
        {Lisp-Entry "import" anonymous #f 67 1 67 7 ("jazz.designer")}
        {Lisp-Entry "Children-Descriptor-Descriptor" class #f 70 7 70 37 ("Component-Descriptor")
          {Lisp-Entry "get-class-descriptor" method #f 73 25 73 45 ("Children-Meta-Descriptor")}}}}})
"Children-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Children-Tree.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.Children-Tree" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Children-Tree" class #f 47 20 47 33 ("initialize" "Components-Tree")
        {Lisp-Entry "base" property #f 50 12 50 16 ()}
        {Lisp-Entry "get-base" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "set-base" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "details" property #f 51 12 51 19 ()}
        {Lisp-Entry "get-details" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "set-details" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "form" anonymous #f 54 3 54 7 ("on-selection-change" ":self" "Event-Handler" "selection-handler" "selection-handler:" "row" "selection-mode" "selection-mode:" "multiple-selection?" "multiple-selection?:" ":images" "portfolio" "portfolio:" "reorderable?" "reorderable?:" "draggable?" "draggable?:" "install")}
        {Lisp-Entry "branch-changed" method #f 63 20 63 34 ("update")}
        {Lisp-Entry "update" method #f 72 20 72 26 ("insert-rows" "setup-columns" "lambda" "with-update-locked" "selected-components" "selected-components:" "get-expand-state" "expand-state" "expand-state:")}
        {Lisp-Entry "setup-columns" method #f 79 11 79 24 ("width:" "title:" "name:" "Tree-Label-Column" "class" "class:" "self" "context" "context:" "add-column" "set-width" "set-title" "set-name" "get-node-column" "column" "begin" "when" "detail-presentation" "title" "category-field" "property" "let*" "filled?" "width" "name" "bind" "detail" "lambda" "for-each" "first?" "node-column" "get-name" "details" "null?" "not" "or" "if" "preserve-node-column?" "preserve-node-column?:" "remove-columns" "set-filled-column" "get-addable-base" "client" "and" "base" "set!" "get-header" "header" "let")}
        {Lisp-Entry "insert-rows" method #f 104 11 104 22 ("update-selection" "insert-components" "get-recursive-details?" "recursive?" "let" "client" "when" "remove-every-row" "selected-components" "expand-state")}
        {Lisp-Entry "insert-components" method #f 112 11 112 28 ("get-presentation-property" "key" "key:" "<" "sort" "sort-components?" "if" "insert-component" "Group" "is?" "unless" "child" "lambda" "for-each" "get-components" "components" "let" "recursive?" "father" "component")}
        {Lisp-Entry "insert-component" method #f 122 29 122 45 ("insert-components" "user-data" "user-data:" "children:" "expanded" "state" "state:" "father:" "add-row" "cons" "children" "value" "property" "filled?" "width" "name" "Tree-Label" "if" "detail" "lambda" "map" "labels" "image" "image:" "title" "title:" "Tree-Node" "new" "node" "get-component-image" "ni" "present-property" "nt" "read-property" "nv" "category-field" "np" "car" "nn" "let*" "filled" "name-info" "set!" "not" "is?" "based?" "rest" "first" "bind" "details" "base" "and" "when" "row" "let" "recursive?" "father" "component")}
        {Lisp-Entry "present-location" method #f 150 11 150 27 ("get-presentation-property" "localize" "ascendant" "lambda" "map" "join" "null?" "if" "collect-ascendants" "cdr" "ascendants" "let" "component")}
        {Lisp-Entry "on-designer" method #f 162 20 162 31 ("value" "value:" "property" "property:" "component" "component:" "property-change" ":property-change" "child-remove" ":child-remove" "parent" "parent:" "child" "child:" "get-property" "child-add" ":child-add" "get-kind" "case" "evt")}
        {Lisp-Entry "child-add" method #f 169 11 169 20 ("insert-component" "lambda" "with-update-locked" "client" "neq?" "Group" "is?" "or" "unless" "parent" "child")}
        {Lisp-Entry "child-remove" method #f 176 11 176 23 ("remove-row" "lambda" "with-update-locked" "when" "component-row" "row" "let" "client" "get-parent" "neq?" "Group" "is?" "or" "unless" "child")}
        {Lisp-Entry "property-change" method #f 185 11 185 26 ("invalidate-cell" "set-title" "present-property" "title" "get-cell-data" "data" "Cell" "new" "cell" "let*" "get-user-data" "eq?" "rank" "row" "lambda" "for-each-visible-row" "when" "car" "key" "key:" "field-name" "details" "find" "col" "let" "client" "get-parent" "neq?" "Group" "is?" "or" "unless" "value" "property" "component")}}}})
"Classpath-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Classpath-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Classpath-Row" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Classpath-Row" class #f 43 20 43 33 ("String-Row")
        {Lisp-Entry "present" method #f 51 20 51 27 ("else" "join" "List" "is?" "not" "nullable?" "and" "cond" "value")}
        {Lisp-Entry "get-edited-value" method #f 62 20 62 36 ("split" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "string" "let")}}}})
"Color-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Color-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Color-Domain" module #f 37 8 37 41 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.graphic" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "Color-Domain" class #f 46 7 46 19 ("Domain")
        {Lisp-Entry "present" method #f 54 20 54 27 ("present" "not" "if" "color")}
        {Lisp-Entry "draw-data" method #f 65 20 65 29 ("get-bottom" "get-left" "get-top" "+" "get-right" "line" "1" "set-line-width" "set-color" "fill-rect" "if" "Black" "Color" "frame-rect" "-1" "inflate-rect" "inner" "-" "13" "3" "2" "Rect" "new" "outer" "let*" "0" "15" "draw-at" "height" "width" "data" "row" "column" "value" "context" "surface")}
        {Lisp-Entry "setup-entry" method #f 82 20 82 31 ("self" "domain" "domain:" "get-size" "size" "size:" "parent" "parent:" "Color-Entry" "new" "client" "view")}}}})
"Color-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editors" "Color-Editor.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editors.Color-Editor" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Color-Editor" class #f 45 20 45 32 ("explicit" "initialize" "Color-Combo")
        {Lisp-Entry "value-row" property #f 48 12 48 21 ()}
        {Lisp-Entry "form" anonymous #f 51 3 51 7 ("2" "1" "Rect" "layout-insets" "layout-insets:" "15" "14" "Dimension" "size" "size:" "color-contour" "name" "name:" "!" "install")}
        {Lisp-Entry "get-value-row" method #f 56 18 56 31 ("value-row")}
        {Lisp-Entry "set-value-row" method #f 60 18 60 31 ("body" "locate" "set-value-row" "value-row" "set!" "value")}
        {Lisp-Entry "content-change" method #f 65 20 65 34 ("nextmethod" "value-row" "editor-return" "origin")}}}})
"Color-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Color-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.entry.Color-Entry" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.tie" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Color-Entry" class #f 49 7 49 18 ("Property-Entry")
        {Lisp-Entry "form" anonymous #f 52 3 52 7 ("Text-Base" "Text-Style" "base-style" "base-style:" "1" "top-padding" "top-padding:" "0" "left-padding" "left-padding:" "body" "!" "selectable?" "selectable?:" "combo" "name" "name:" "Color-Combo" "install")}
        {Lisp-Entry "tab-view" method #f 63 20 63 28 ("body" "combo" "locate")}
        {Lisp-Entry "get-value" method #f 71 20 71 29 ("combo" "locate" "get-color")}
        {Lisp-Entry "set-value" method #f 75 20 75 29 ("combo" "locate" "set-color" "value")}
        {Lisp-Entry "get-modified?" method #f 79 20 79 33 ("combo" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 83 20 83 33 ("combo" "locate" "set-modified?" "value")}
        {Lisp-Entry "set-editable?" method #f 92 20 92 33 ("combo" "locate" "set-editable?" "value")}}}})
"Color-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Color-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Color-Row" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "Color-Row" class #f 47 20 47 29 ("Value-Row")
        {Lisp-Entry "present" method #f 55 20 55 27 ("present" "not" "if" "color")}
        {Lisp-Entry "update-color" method #f 66 18 66 30 ("get-edited-value" "color" "editor" "locate" "set-background")}
        {Lisp-Entry "draw-data" method #f 75 20 75 29 ("get-bottom" "get-left" "get-top" "+" "get-right" "line" "1" "set-line-width" "set-color" "fill-rect" "if" "Black" "Color" "frame-rect" "-1" "inflate-rect" "inner" "-" "13" "3" "2" "Rect" "new" "outer" "let*" "0" "15" "draw-at" "height" "width" "data" "row" "column" "value" "context" "surface")}
        {Lisp-Entry "new-editor" method #f 92 20 92 30 ("self" "value-row" "value-row:" "editor-class" "new")}
        {Lisp-Entry "editor-class" method #f 97 20 97 32 ("Color-Row-Editor")}
        {Lisp-Entry "get-edited-value" method #f 101 20 101 36 ("Color" "parse-string" "body" "editor" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-edited-value" method #f 106 20 106 36 ("color" "set-background" "present" "body" "editor" "locate" "set-string-content" "value")}
        {Lisp-Entry "get-edited-modified?" method #f 111 20 111 40 ("body" "editor" "locate" "get-controller" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" method #f 115 20 115 40 ("body" "editor" "locate" "get-controller" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" method #f 119 20 119 31 ("body" "editor" "locate" "show-text-cursor")}
        {Lisp-Entry "focused-editor" method #f 123 20 123 34 ("body" "editor" "locate")}}
      {Lisp-Entry "Color-Row-Editor" class #f 132 7 132 23 ("explicit" "initialize" "Color-Combo")
        {Lisp-Entry "form" anonymous #f 135 3 135 7 ("2" "1" "Rect" "layout-insets" "layout-insets:" "15" "14" "Dimension" "size" "size:" "color-contour" "name" "name:" "!" "install")}
        {Lisp-Entry "value-row" property #f 140 12 140 21 ()}
        {Lisp-Entry "form-model" method #f 143 20 143 30 ("nextmethod" "else" "Color-Value-Text-View" "body" "get-name" "case" "form")}
        {Lisp-Entry "get-value-row" method #f 149 18 149 31 ("value-row")}
        {Lisp-Entry "set-value-row" method #f 153 18 153 31 ("body" "locate" "set-value-row" "value-row" "set!" "value")}
        {Lisp-Entry "content-change" method #f 158 20 158 34 ("nextmethod" "enter-edited-value" "popup" "value-row" "editor-return" "return" "case" "origin")}}
      {Lisp-Entry "Color-Value-Text-View" class #f 170 7 170 28 ("initialize" "Color-Text-View")
        {Lisp-Entry "value-row" property #f 173 12 173 21 ()}
        {Lisp-Entry "get-value-row" accessor #f 173 46 173 54 ()}
        {Lisp-Entry "set-value-row" accessor #f 173 46 173 54 ()}
        {Lisp-Entry "up-arrow-move" method #f 181 20 181 33 ("value-row" "editor-up-arrow" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method #f 185 20 185 35 ("value-row" "editor-down-arrow" "scroll?" "extend?")}
        {Lisp-Entry "document-menu" method #f 189 11 189 24 ()}
        {Lisp-Entry "focus-lose" method #f 198 20 198 30 ("value-row" "editor-focus-lose" "nextmethod")}
        {Lisp-Entry "focus-master" method #f 203 20 203 32 ("value-row" "get-tree")}}}})
"Column-Detail"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "choosers" "Column-Detail.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.choosers.Column-Detail" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Column-Detail" class #f 43 20 43 33 ("0" "initialize" "Object")
        {Lisp-Entry "name" property #f 46 12 46 16 ()}
        {Lisp-Entry "get-name" accessor #f 46 47 46 55 ()}
        {Lisp-Entry "set-name" accessor #f 46 47 46 55 ()}
        {Lisp-Entry "width" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-width" accessor #f 47 47 47 55 ()}
        {Lisp-Entry "set-width" accessor #f 47 47 47 55 ()}
        {Lisp-Entry "filled?" property #f 48 12 48 19 ()}
        {Lisp-Entry "get-filled?" accessor #f 48 47 48 55 ()}
        {Lisp-Entry "set-filled?" accessor #f 48 47 48 55 ()}
        {Lisp-Entry "displayed?" property #f 49 12 49 22 ()}
        {Lisp-Entry "get-displayed?" accessor #f 49 47 49 55 ()}
        {Lisp-Entry "set-displayed?" accessor #f 49 47 49 55 ()}
        {Lisp-Entry "construct-literal" method #f 53 16 53 33 ("self" "new" "displayed?" "filled?" "width" "name" "context")}
        {Lisp-Entry "initialize" method #f 57 20 57 30 ("displayed?" "filled?" "width" "name" "set!" "nextmethod" "d?" "f?" "w" "n")}
        {Lisp-Entry "copy-object" method #f 65 20 65 31 ("displayed?" "filled?" "width" "name" "Column-Detail" "new" "deep?")}
        {Lisp-Entry "print" method #f 69 20 69 25 ("displayed?" "filled?" "width" "name" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Combo-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Combo-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Combo-Row" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Combo-Row" class #f 43 20 43 29 ("void" "explicit" "Value-Row")
        {Lisp-Entry "condensed?" property #f 46 12 46 22 ()}
        {Lisp-Entry "choices" property #f 47 12 47 19 ()}
        {Lisp-Entry "kind" property #f 48 12 48 16 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("set-kind" "set-choices" "set-condensed?" "entry-test:" "not-found" "not-found:" "getf" "nullable?" "nullable?:" "self" "value-row" "value-row:" "editor-class" "new" "editor" "set!" "nextmethod" "apply" "others" "condensed?" "entry-test" "pick" "kind" "choices" "bind-keywords" "rest")}
        {Lisp-Entry "editor-class" method #f 65 20 65 32 ("Combo-Row-Editor")}
        {Lisp-Entry "get-condensed?" method #f 74 18 74 32 ("editor" "get-condensed?")}
        {Lisp-Entry "set-condensed?" method #f 78 18 78 32 ("editor" "set-condensed?" "value")}
        {Lisp-Entry "get-choices" method #f 82 18 82 29 ("editor" "get-choices")}
        {Lisp-Entry "set-choices" method #f 86 18 86 29 ("editor" "set-choices" "when" "value")}
        {Lisp-Entry "set-choices-updater" method #f 91 18 91 37 ("editor" "set-choices-updater" "value")}
        {Lisp-Entry "get-kind" method #f 95 18 95 26 ("editor" "get-kind")}
        {Lisp-Entry "set-kind" method #f 99 18 99 26 ("editor" "set-kind" "value")}
        {Lisp-Entry "enter-combo-choice" method #f 108 11 108 29 ("focus-editor" "enter-edited-value")}
        {Lisp-Entry "present" method #f 118 20 118 27 ("editor" "present-value" "value")}
        {Lisp-Entry "default-value" method #f 127 20 127 33 ("get-choices" "caar")}
        {Lisp-Entry "close-editor?" method #f 136 20 136 33 ()}
        {Lisp-Entry "get-edited-value" method #f 140 20 140 36 ("get-value" "limit-to-list?" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-content" "string" "let")}
        {Lisp-Entry "set-edited-value" method #f 149 20 149 36 ("editor" "set-value" "value")}
        {Lisp-Entry "get-edited-modified?" method #f 153 20 153 40 ("editor" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" method #f 157 20 157 40 ("editor" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" method #f 161 20 161 31 ("editor" "get-body" "show-text-cursor")}
        {Lisp-Entry "focused-editor" method #f 165 20 165 34 ("editor" "get-body")}
        {Lisp-Entry "combo-choose" method #f 169 29 169 41 ()}}}})
"Combo-Row-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Combo-Row-Editor.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Combo-Row-Editor" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.designer")}
      {Lisp-Entry "Combo-Row-Editor" class #f 44 20 44 36 ("explicit" "initialize" "Combo-Box")
        {Lisp-Entry "value-row" property #f 47 12 47 21 ()}
        {Lisp-Entry "form-model" method #f 50 20 50 30 ("nextmethod" "else" "Combo-Value-Text-View" "body" "get-name" "case" "form")}
        {Lisp-Entry "get-value-row" method #f 56 18 56 31 ("value-row")}
        {Lisp-Entry "set-value-row" method #f 60 18 60 31 ("body" "locate" "set-value-row" "value-row" "set!" "value")}
        {Lisp-Entry "button-action" method #f 65 20 65 33 ("nextmethod" "value-row" "combo-choose" "unless")}
        {Lisp-Entry "content-change" method #f 70 20 70 34 ("nextmethod" "enter-edited-value" "popup" "editor-return" "validate-value" "value-row" "get-limit-to-list?" "and" "when" "return" "case" "origin")}
        {Lisp-Entry "combo-choice" method #f 77 20 77 32 ("value-row" "enter-combo-choice")}}
      {Lisp-Entry "Combo-Value-Text-View" class #f 86 7 86 28 ("initialize" "Combo-Text-View")
        {Lisp-Entry "value-row" property #f 89 12 89 21 ()}
        {Lisp-Entry "get-value-row" accessor #f 89 46 89 54 ()}
        {Lisp-Entry "set-value-row" accessor #f 89 46 89 54 ()}
        {Lisp-Entry "up-arrow-move" method #f 97 20 97 33 ("value-row" "editor-up-arrow" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method #f 101 20 101 35 ("value-row" "editor-down-arrow" "scroll?" "extend?")}
        {Lisp-Entry "tab-press" method #f 105 20 105 29 ("value-row" "editor-tab" "end-completion" "has-completion?" "if" "modifiers" "key")}
        {Lisp-Entry "document-menu" method #f 111 11 111 24 ()}
        {Lisp-Entry "focus-lose" method #f 120 20 120 30 ("value-row" "editor-focus-lose" "nextmethod")}
        {Lisp-Entry "focus-master" method #f 125 20 125 32 ("value-row" "get-tree")}}}})
"Component-Descriptor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "descriptor" "Component-Descriptor.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.descriptor.Component-Descriptor" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.clipboard" "jazz.library" "jazz.jml" "jazz.designer.descriptor" "jazz.designer")}
      {Lisp-Entry "Component-Descriptor" class #f 47 20 47 40 ("initialize" "Component")
        {Lisp-Entry "title" property #f 50 12 50 17 ()}
        {Lisp-Entry "get-title" accessor #f 50 58 50 66 ()}
        {Lisp-Entry "set-title" accessor #f 50 58 50 66 ()}
        {Lisp-Entry "image" property #f 51 12 51 17 ()}
        {Lisp-Entry "get-image" accessor #f 51 58 51 66 ()}
        {Lisp-Entry "set-image" accessor #f 51 58 51 66 ()}
        {Lisp-Entry "name-prohibited?" property #f 52 12 52 28 ()}
        {Lisp-Entry "get-name-prohibited?" accessor #f 52 58 52 66 ()}
        {Lisp-Entry "set-name-prohibited?" accessor #f 52 58 52 66 ()}
        {Lisp-Entry "name-mandatory?" property #f 53 12 53 27 ()}
        {Lisp-Entry "get-name-mandatory?" accessor #f 53 58 53 66 ()}
        {Lisp-Entry "set-name-mandatory?" accessor #f 53 58 53 66 ()}
        {Lisp-Entry "name-unicity?" property #f 54 12 54 25 ()}
        {Lisp-Entry "get-name-unicity?" accessor #f 54 58 54 66 ()}
        {Lisp-Entry "set-name-unicity?" accessor #f 54 58 54 66 ()}
        {Lisp-Entry "can-cut?" property #f 55 12 55 20 ()}
        {Lisp-Entry "get-can-cut?" accessor #f 55 58 55 66 ()}
        {Lisp-Entry "set-can-cut?" accessor #f 55 58 55 66 ()}
        {Lisp-Entry "can-copy?" property #f 56 12 56 21 ()}
        {Lisp-Entry "get-can-copy?" accessor #f 56 58 56 66 ()}
        {Lisp-Entry "set-can-copy?" accessor #f 56 58 56 66 ()}
        {Lisp-Entry "can-paste?" property #f 57 12 57 22 ()}
        {Lisp-Entry "get-can-paste?" accessor #f 57 58 57 66 ()}
        {Lisp-Entry "set-can-paste?" accessor #f 57 58 57 66 ()}
        {Lisp-Entry "can-paste-properties?" property #f 58 12 58 33 ()}
        {Lisp-Entry "get-can-paste-properties?" accessor #f 58 58 58 66 ()}
        {Lisp-Entry "set-can-paste-properties?" accessor #f 58 58 58 66 ()}
        {Lisp-Entry "can-rename?" property #f 59 12 59 23 ()}
        {Lisp-Entry "get-can-rename?" accessor #f 59 58 59 66 ()}
        {Lisp-Entry "set-can-rename?" accessor #f 59 58 59 66 ()}
        {Lisp-Entry "can-select-all?" property #f 60 12 60 27 ()}
        {Lisp-Entry "get-can-select-all?" accessor #f 60 58 60 66 ()}
        {Lisp-Entry "set-can-select-all?" accessor #f 60 58 60 66 ()}
        {Lisp-Entry "can-delete?" property #f 61 12 61 23 ()}
        {Lisp-Entry "get-can-delete?" accessor #f 61 58 61 66 ()}
        {Lisp-Entry "set-can-delete?" accessor #f 61 58 61 66 ()}
        {Lisp-Entry "can-move?" property #f 62 12 62 21 ()}
        {Lisp-Entry "get-can-move?" accessor #f 62 58 62 66 ()}
        {Lisp-Entry "set-can-move?" accessor #f 62 58 62 66 ()}
        {Lisp-Entry "can-view-properties?" property #f 63 12 63 32 ()}
        {Lisp-Entry "get-can-view-properties?" accessor #f 63 58 63 66 ()}
        {Lisp-Entry "set-can-view-properties?" accessor #f 63 58 63 66 ()}
        {Lisp-Entry "sort-components?" property #f 64 12 64 28 ()}
        {Lisp-Entry "get-sort-components?" accessor #f 64 58 64 66 ()}
        {Lisp-Entry "set-sort-components?" accessor #f 64 58 64 66 ()}
        {Lisp-Entry "indexable?" property #f 65 12 65 22 ()}
        {Lisp-Entry "get-indexable?" accessor #f 65 58 65 66 ()}
        {Lisp-Entry "set-indexable?" accessor #f 65 58 65 66 ()}
        {Lisp-Entry "form" anonymous #f 68 3 68 7 ("Children-Descriptor" "presentation-info" "Name-Domain" "name-info" "Presentation-Domain" "info" "category" "category:" "class-info" "domain" "Boolean-Domain" "visible?" "children" "title" "title:" "before" "Property-Descriptor" "properties" "name" "name:" "Properties-Descriptor" "install")}
        {Lisp-Entry "get-class-descriptor" method #f 89 25 89 45 ("Component-Meta-Descriptor" "new")}
        {Lisp-Entry "class-get-domain" method #f 98 26 98 42 ("Value-Domain" "new" "get-domain" "and" "field-name" "get-property-descriptor" "property-descriptor" "let" "or" "property" "class")}
        {Lisp-Entry "class-get-category" method #f 105 26 105 44 ("get-category" "and" "field-name" "get-property-descriptor" "property-descriptor" "let" "or" "get-domain-category" "property" "class")}
        {Lisp-Entry "component-property-domain" method #f 113 26 113 51 ("class-of" "get-domain" "property" "component")}
        {Lisp-Entry "class-presentation" method #f 122 26 122 44 ("category-name" "->string" "title" "or" "class")}
        {Lisp-Entry "class-image" method #f 126 26 126 37 ("Image-Resource" "image" "or" "class")}
        {Lisp-Entry "class-name-prohibited?" method #f 130 26 130 48 ("name-prohibited?" "class")}
        {Lisp-Entry "class-name-mandatory?" method #f 134 26 134 47 ("name-mandatory?" "class")}
        {Lisp-Entry "class-name-unicity?" method #f 138 26 138 45 ("name-unicity?" "class")}
        {Lisp-Entry "class-presentation->name" method #f 142 26 142 50 ("string->symbol" "equal?" "empty-string?" "not" "or" "if" "presentation" "class")}
        {Lisp-Entry "class-name->presentation" method #f 148 26 148 50 ("->string" "not" "if" "name" "class")}
        {Lisp-Entry "class-property-presentation" method #f 154 26 154 53 ("->string" "substitute" "capitalize" "remove-enclosing" "get-title" "and" "field-name" "get-property-descriptor" "property-descriptor" "let" "or" "property" "class")}
        {Lisp-Entry "class-detail-presentation" method #f 162 26 162 51 ("property-presentation" "else" "presentation-info" "name-info" "class-info" "field-name" "case" "property" "class")}
        {Lisp-Entry "class-persist-property?" method #f 170 26 170 49 ("property" "class")}
        {Lisp-Entry "component-presentation-property?" method #f 174 26 174 58 ("property" "component")}
        {Lisp-Entry "component-get-presentation" method #f 178 26 178 52 ("get-name" "class-of" "name->presentation" "component")}
        {Lisp-Entry "component-set-presentation" method #f 182 26 182 52 ("class-of" "presentation->name" "set-name" "presentation" "designer" "component")}
        {Lisp-Entry "component-get-string-presentation" method #f 186 21 186 54 ("get-name" "or" "component")}
        {Lisp-Entry "component-set-string-presentation" method #f 190 21 190 54 ("set-name" "empty-string?" "if" "presentation" "designer" "component")}
        {Lisp-Entry "component-present-property" method #f 196 26 196 52 ("present" "property-domain" "domain" "let" "value" "property" "component")}
        {Lisp-Entry "component-get-parent" method #f 201 26 201 46 ("get-parent" "component")}
        {Lisp-Entry "component-get-components" method #f 205 26 205 50 ("get-children" "component")}
        {Lisp-Entry "component-get-component-image" method #f 209 26 209 55 ("class-of" "get-class-image" "component")}
        {Lisp-Entry "component-can-cut-component?" method #f 213 26 213 54 ("can-delete-component?" "can-cut?" "either" "component")}
        {Lisp-Entry "component-can-copy-component?" method #f 217 26 217 55 ("can-copy?" "either" "component")}
        {Lisp-Entry "component-can-paste-component?" method #f 221 26 221 56 ("can-paste?" "either" "component")}
        {Lisp-Entry "component-can-paste-properties-component?" method #f 225 26 225 67 ("can-paste-properties?" "either" "component")}
        {Lisp-Entry "component-can-rename-component?" method #f 229 26 229 57 ("class-of" "get-name-prohibited?" "not" "can-rename?" "either" "component")}
        {Lisp-Entry "component-can-select-all-component?" method #f 233 26 233 61 ("can-select-all?" "either" "component")}
        {Lisp-Entry "component-can-delete-component?" method #f 237 26 237 57 ("can-delete?" "either" "component")}
        {Lisp-Entry "component-can-move-component?" method #f 241 26 241 55 ("can-move?" "either" "component")}
        {Lisp-Entry "component-can-view-properties?" method #f 245 26 245 56 ("can-view-properties?" "either" "component")}
        {Lisp-Entry "component-determine-can-paste" method #f 249 18 249 47 ("determine-paster" "boolean" "try-parent?" "component")}
        {Lisp-Entry "component-determine-paster" method #f 253 18 253 44 ("determine-paster" "get-parent" "parent" "let" "else" "addable-class?" "class" "lambda" "every?" "memq?" "cond" "get-master-model" "map" "remove-duplicates" "models" "get-jazz-parcels" "parcels" "let*" "jazz-parcels" "clipboard-format-available?" "can-paste-component?" "and" "when" "try-parent?" "component")}
        {Lisp-Entry "component-can-send-before?" method #f 270 26 270 52 ("sort-components?" "not" "addable-class?" "type" "lambda" "every?" "and" "before" "father" "types" "component")}
        {Lisp-Entry "component-sort-components?" method #f 275 26 275 52 ("sort-components?" "either" "component")}
        {Lisp-Entry "component-sort-components" method #f 279 26 279 51 ("get-presentation-property" "key" "key:" "sort" "components" "predicate" "component")}
        {Lisp-Entry "component-indexable?" method #f 283 26 283 46 ("indexable?" "either" "component")}
        {Lisp-Entry "component-surrogate-class" method #f 287 26 287 51 ("Component-Surrogate" "component")}
        {Lisp-Entry "component-install-surrogate" method #f 291 26 291 53 ("install-children-surrogates" "install-handlers" "set-surrogate" "editor:" "client" "client:" "component-surrogate" "new" "surrogate" "let" "editor" "component")}
        {Lisp-Entry "component-install-children-surrogates" method #f 298 26 298 63 ("get-components" "install-surrogate" "lambda" "for-each" "editor" "component")}
        {Lisp-Entry "component-remove-surrogate" method #f 304 18 304 44 ("remove-component-surrogate" "component")}
        {Lisp-Entry "component-remove-component-surrogate" method #f 308 18 308 54 ("set-surrogate" "remove-handlers" "when" "get-surrogate" "surrogate" "let" "get-components" "remove-component-surrogate" "for-each" "component")}
        {Lisp-Entry "component-display-property?" method #f 316 26 316 53 ("visible?" "children" "before" "presentation-info" "field-name" "memq?" "not" "property" "component")}
        {Lisp-Entry "component-get-addable-default" method #f 320 26 320 55 ("component")}
        {Lisp-Entry "component-get-addable-classes" method #f 324 26 324 55 ("component-get-categorized-addable-classes" "flatten" "component")}
        {Lisp-Entry "component-get-categorized-addable-classes" method #f 328 26 328 67 ("component")}
        {Lisp-Entry "component-addable-class?" method #f 332 26 332 50 ("get-addable-classes" "resolve-runtime-reference" "map" "subtype?" "addable-class" "lambda" "some?" "class" "component")}
        {Lisp-Entry "component-get-classes" method #f 338 26 338 47 ("component")}
        {Lisp-Entry "component-get-addable-traits" method #f 342 26 342 54 ("component")}
        {Lisp-Entry "component-get-addable-default-trait" method #f 346 26 346 61 ("Trait" "component")}
        {Lisp-Entry "component-get-addable-base" method #f 350 26 350 52 ("Component" "car" "resolve-runtime-reference" "length" "1" "=" "if" "get-addable-classes" "classes" "let" "component")}
        {Lisp-Entry "component-get-addable-details" method #f 357 26 357 55 ("100" "name-info" "when" "get-addable-base" "base" "let" "component")}
        {Lisp-Entry "component-get-recursive-details?" method #f 363 26 363 58 ("component")}
        {Lisp-Entry "component-get-class-searchable-classes" method #f 367 26 367 64 ("component")}
        {Lisp-Entry "component-get-custom-details" method #f 371 26 371 54 ("component")}
        {Lisp-Entry "component-get-custom-card" method #f 375 26 375 51 ("component")}
        {Lisp-Entry "component-save-properties" method #f 379 26 379 51 ("designer" "component")}}}})
"Component-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Component-Editor.jazz"} 1297871094 jazz
    {Lisp-Entry "jazz.designer.editor.Component-Editor" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.system" "jazz.ui.view" "jazz.ui" "jazz.platform" "jazz.locale" "jazz.library.listener" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.io" "jazz.editor.jazz" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "Component-Editor" class #f 55 20 55 36 ("explicit" "initialize" "Document" "Layout-View")
        {Lisp-Entry "client" property #f 58 12 58 18 ()}
        {Lisp-Entry "designer" slot #f 61 8 61 16 ()}
        {Lisp-Entry "get-designer" accessor #f 61 40 61 48 ()}
        {Lisp-Entry "listeners" slot #f 62 8 62 17 ()}
        {Lisp-Entry "undoer" slot #f 63 8 63 14 ()}
        {Lisp-Entry "selection" slot #f 64 8 64 17 ()}
        {Lisp-Entry "controller" slot #f 65 8 65 18 ()}
        {Lisp-Entry "rights" slot #f 66 8 66 14 ()}
        {Lisp-Entry "get-rights" accessor #f 66 43 66 51 ()}
        {Lisp-Entry "set-rights" accessor #f 66 43 66 51 ()}
        {Lisp-Entry "get-component-editor" method #f 69 20 69 40 ("self")}
        {Lisp-Entry "host-icon" method #f 78 25 78 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 82 25 82 35 ()}
        {Lisp-Entry "install-in-host" method #f 86 20 86 35 ("get-controller" "update-status" "nextmethod" "host")}
        {Lisp-Entry "install-scroller" method #f 91 11 91 27 ()}
        {Lisp-Entry "default-extension" method #f 100 20 100 37 ()}
        {Lisp-Entry "extensions" method #f 104 20 104 30 ()}
        {Lisp-Entry "focus-document" method #f 108 20 108 34 ("acquire-focus")}
        {Lisp-Entry "current-history-item" method #f 112 20 112 40 ()}
        {Lisp-Entry "get-controller" method #f 120 20 120 34 ("new-controller" "set!" "controller" "unless")}
        {Lisp-Entry "new-controller" method #f 126 20 126 34 ("self" "Component-Editor-Controller" "new")}
        {Lisp-Entry "save" method #f 130 20 130 24 ("get-controller" "save")}
        {Lisp-Entry "save-as" method #f 134 20 134 27 ("get-controller" "save-as")}
        {Lisp-Entry "save-all" method #f 138 26 138 34 ("get-controller" "save-all")}
        {Lisp-Entry "install-scroller?" method #f 142 20 142 37 ()}
        {Lisp-Entry "get-moniker" method #f 146 11 146 22 ("get-controller" "get-moniker")}
        {Lisp-Entry "set-moniker" method #f 150 11 150 22 ("get-controller" "set-moniker" "moniker")}
        {Lisp-Entry "load-content" method #f 154 20 154 32 ("set-client" "instantiate" "cpnt" "read-form" "form" "let*" "moniker")}
        {Lisp-Entry "verify-reload" method #f 160 20 160 33 ()}
        {Lisp-Entry "reload-moniker" method #f 164 20 164 34 ("moniker")}
        {Lisp-Entry "get-modified?" method #f 168 20 168 33 ("get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 172 20 172 33 ("get-controller" "set-modified?" "state")}
        {Lisp-Entry "set-controller-modified?" method #f 176 29 176 53 ("get-controller" "set-modified?" "state")}
        {Lisp-Entry "update-status" method #f 180 11 180 24 ("get-controller" "update-status")}
        {Lisp-Entry "update-moniker-time" method #f 184 11 184 30 ("get-controller" "update-moniker-time" "moniker")}
        {Lisp-Entry "confirm-close" method #f 188 20 188 33 ("get-controller" "confirm-close" "rest")}
        {Lisp-Entry "compare-moniker" method #f 192 20 192 35 ("focus-host" "get-guest" "compare-trees" "lambda" ":wait" "with-cursor" "right-moniker" "right-moniker:" "left-moniker" "left-moniker:" "host-visible?" "host-visible?:" "Compare-Databases" "require-service" "new-frame" "frame" "right" "Document-Moniker" "new" "left" "let*" "moniker")}
        {Lisp-Entry "tool-update" method #f 202 20 202 31 ("tool?")}
        {Lisp-Entry "console-update" method #f 206 20 206 34 ("console?")}
        {Lisp-Entry "install" method #f 215 20 215 27 ("on-editor" "method-name" "method-name:" "self" "target" "target:" "Event-Handler" "new" "add-editor-listener" "nextmethod" "rest")}
        {Lisp-Entry "destroy" method #f 225 20 225 27 ("nextmethod" "close-application-selected" "self" "remove-editor-listener" "controller" "close" "set-client")}
        {Lisp-Entry "new-form" method #f 238 19 238 27 ()}
        {Lisp-Entry "open-form" method #f 242 19 242 28 ("open-form" "instantiate" "set-client")}
        {Lisp-Entry "save-form" method #f 247 19 247 28 ("edit-document" "file?" "when" "designer" "get-form" "get-origin" "origin" "get-application" "appl" "let" "save" "lambda" ":wait" "with-cursor")}
        {Lisp-Entry "edit-form" method #f 257 19 257 28 ("view-component")}
        {Lisp-Entry "select-trait" method #f 266 18 266 30 ("process-branch-changing" "lambda" ":wait" "with-cursor" "client" "get-active-trait" "or" "neq?" "when" "trait")}
        {Lisp-Entry "change-trait" method #f 273 11 273 23 ("process-branch-changed" "get-client" "set-active-trait" "trait")}
        {Lisp-Entry "select-component" method #f 283 11 283 27 ("edit-component" "bell" "not" "if" "selected-component" "component" "let" "descendants" "locate" "get-highlight-edited?" "and" "when" "control?" "tree")}
        {Lisp-Entry "property-change" method #f 296 21 296 36 ("list" "undoer" "register-undo" "find-changed-property" "0" "get-rank" "=" "or" "unless" "symbolize-property" "class-of" "get-category" "category" "let" "when" "undoable?" "value" "property" "component" "trait")}
        {Lisp-Entry "find-changed-property" method #f 304 21 304 42 ("eq?" "and" "prop" "cpn" "tr" "bind" "action" "lambda" "find-if" "undoer" "get-undo-list" "undo-list" "symbolize-property" "let" "property" "component" "trait")}
        {Lisp-Entry "select-property" method #f 315 18 315 33 ("process-property-selected" "property")}
        {Lisp-Entry "show-properties" method #f 319 26 319 41 ("focus?" "focus?:" "workspace" "workspace:" "Properties-Manager" "select-docked")}
        {Lisp-Entry "get-selection" method #f 328 18 328 31 ("selection")}
        {Lisp-Entry "set-selection" method #f 332 18 332 31 ("update-focus-actions" "self" "set-selected" "process-selection-changed" "process-selection-changing" "selection" "old" "get-application" "appl" "let" "focus?" "focus?:" "force?" "force?:" "force-parent?" "force-parent?:" "origin" "origin:" "new")}
        {Lisp-Entry "outer-selection" method #f 341 21 341 36 ("selection" "outer-component" "component" "lambda" "map" "get-reference" "reference" "let")}
        {Lisp-Entry "close-application-selected" method #f 348 11 348 37 ("self" "close-selected" "get-application" "appl" "let")}
        {Lisp-Entry "select-all" method #f 353 20 353 30 ("rest")}
        {Lisp-Entry "unselect-all" method #f 357 18 357 30 ("set-selection")}
        {Lisp-Entry "select" method #f 361 18 361 24 ("cons" "list" "append" "self" "origin" "origin:" "remove" "set-selection" "selection" "memq?" "control-down?" "if" "focus?" "focus?:" "component")}
        {Lisp-Entry "selection-changed" method #f 371 29 371 46 ("length" "0" "naturals" "select" "rank" "unselect" "get-surrogate" "surrogate" "let" "Component" "is?" "when" "component" "lambda" "for-each" "selection" "set!" "focus?" "force-parent?" "origin" "new" "old")}
        {Lisp-Entry "delete-selection" method #f 388 20 388 36 ("self" "origin" "origin:" "list" "if" "set-selection" "get-client" "get-editor" "get-designer" "remove-child" "get-surrogate" "surrogate" "component" "lambda" "for-each" "components-parent" "parent" "when" "outer-selection" "components" "throw-cancel" "cancel" "no" "yes" "case" "confirmation" "type" "type:" "localize" "message-box" "code" "let" "text" "confirm-action" "confirm-close" "define")}
        {Lisp-Entry "components-parent" method #f 409 19 409 36 ("car" "1" "length" "=" "if" "get-parent" "map" "remove-duplicates" "parents" "let" "components")}
        {Lisp-Entry "cleanup-selection" method #f 417 11 417 28 ("not" "component" "lambda" "collect-if" "set-selection" "selection" "destroyed?" "some?" "when")}
        {Lisp-Entry "save-content" method #f 429 20 429 32 ("process-saved" "set-modified?" "update-status" "get-modified?" "not" "if" "update-moniker-time" "trait" "trait:" "get-base" "get-client" "set-name" "designer" "save-to" "process-saving" "moniker")}
        {Lisp-Entry "save-content-patch" method #f 441 18 441 36 ("set-modified?" "update-status" "get-modified?" "not" "if" "update-moniker-time" "designer-save" "process-saving" "moniker")}
        {Lisp-Entry "revert-content" method #f 450 11 450 25 ("designer" "revert" "_")}
        {Lisp-Entry "designer-save" method #f 454 29 454 42 ("designer" "save")}
        {Lisp-Entry "view-component" method #f 463 11 463 25 ("edit-form" "bell" "designer" "not" "if")}
        {Lisp-Entry "on-editor" method #f 474 29 474 38 ("selection-changed" "get-user-origin" "focus?" "get-force-parent?" "force-parent?" "get-origin" "origin" "get-selection" "get-old" "old" ":selection-changed" "designer" "save-component-properties" "Component" "is?" "car" "cpn" "let" "selection" "not-null?" "when" ":saving" ":selection-changing" "cleanup-selection" ":branch-changed" "trait" "trait:" "get-property" "change-trait" ":branch-changing" "get-kind" "case" "evt")}
        {Lisp-Entry "get-client" method #f 499 18 499 28 ("client")}
        {Lisp-Entry "set-client" method #f 503 18 503 28 ("client-updated" "edit-component" "process-client-change" "client-update" "self" "Editor-Undoer" "new" "and" "undoer" "set!" "remove-surrogate" "old" "let" "client" "neq?" "when" "clt")}
        {Lisp-Entry "client-update" method #f 516 29 516 42 ("install-client-surrogate")}
        {Lisp-Entry "client-updated" method #f 520 29 520 43 ()}
        {Lisp-Entry "install-client-surrogate" method #f 524 29 524 53 ()}
        {Lisp-Entry "get-designer-class" method #f 533 29 533 47 ("Designer")}
        {Lisp-Entry "get-reference" method #f 537 18 537 31 ("get-reference" "designer" "and")}
        {Lisp-Entry "edit-component" method #f 541 18 541 32 ("update-status" "process-designer-change" "install-current-designer" "uninstall-current-designer" "designer" "old" "get-reference" "neq?" "class-of" "get-class-form" "file?" "not" "or" "get-origin" "origin" "and" "if" "get-form" "component-form" "let" "when" "get-edited-form" "define" "form" "form:" "component")}
        {Lisp-Entry "install-current-designer" method #f 561 29 561 53 ("client" "install-designer" "on-designer" "method-name" "method-name:" "self" "target" "target:" "Event-Handler" "add-designer-listener" "reference" "reference:" "form:" "get-designer-class" "new" "designer" "set!" "form" "component")}
        {Lisp-Entry "uninstall-current-designer" method #f 567 29 567 55 ("set!" "uninstall-designer" "client" "self" "remove-designer-listener" "designer" "when")}
        {Lisp-Entry "on-designer" method #f 575 29 575 40 (":send-before" ":child-remove" ":child-add" "set-controller-modified?" "undoable?" "undoable?:" "value" "value:" "property" "property:" "component" "component:" "trait" "trait:" "get-property" "property-change" ":property-change" "case" "get-kind" "kind" "let" "evt")}
        {Lisp-Entry "add-editor-listener" method #f 590 18 590 37 ("add-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "remove-editor-listener" method #f 594 18 594 40 ("remove-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "process-client-change" method #f 598 11 598 32 ("invoke" "listener" "lambda" "for-each" "client:" "old:" "self" ":client-change" "Editor-Event" "new" "evt" "let" "listeners" "when" "client" "old")}
        {Lisp-Entry "process-designer-change" method #f 606 11 606 34 ("invoke" "listener" "lambda" "for-each" "designer:" "old:" "self" ":designer-change" "Editor-Event" "new" "evt" "let" "listeners" "when" "designer" "old")}
        {Lisp-Entry "process-branch-changing" method #f 614 18 614 41 ("invoke" "listener" "lambda" "for-each" "trait:" "self" ":branch-changing" "Editor-Event" "new" "evt" "let" "listeners" "when" "trait")}
        {Lisp-Entry "process-branch-changed" method #f 622 18 622 40 ("invoke" "listener" "lambda" "for-each" "trait:" "self" ":branch-changed" "Editor-Event" "new" "evt" "let" "listeners" "when" "trait")}
        {Lisp-Entry "process-selection-changing" method #f 630 18 630 44 ("invoke" "listener" "lambda" "for-each" "user-origin:" "force?:" "force-parent?:" "origin:" "self" ":selection-changing" "Selection-Event" "new" "evt" "let" "listeners" "when" "user-origin" "force?" "force-parent?" "origin" "selection" "old")}
        {Lisp-Entry "process-selection-changed" method #f 638 18 638 43 ("invoke" "listener" "lambda" "for-each" "user-origin:" "force?:" "force-parent?:" "origin:" "self" ":selection-changed" "Selection-Event" "new" "evt" "let" "listeners" "when" "user-origin" "force?" "force-parent?" "origin" "selection" "old")}
        {Lisp-Entry "process-property-selected" method #f 646 18 646 43 ("invoke" "listener" "lambda" "for-each" "property:" "self" ":property-selected" "Editor-Event" "new" "evt" "let" "listeners" "when" "property")}
        {Lisp-Entry "process-saving" method #f 654 18 654 32 ("invoke" "listener" "lambda" "for-each" "self" ":saving" "Editor-Event" "new" "evt" "let" "listeners" "when")}
        {Lisp-Entry "process-saved" method #f 662 18 662 31 ("invoke" "listener" "lambda" "for-each" "self" ":saved" "Editor-Event" "new" "evt" "let" "listeners" "when")}
        {Lisp-Entry "editor-title" method #f 675 26 675 38 ("class-of" "category-identifier" "format" "not" "if" "get-reference" "reference" "let")}}
      {Lisp-Entry "Editor-Undoer" class #f 687 7 687 20 ("Undoer")
        {Lisp-Entry "play-action" method #f 690 20 690 31 ("play-action" "unimplemented" "action")}}}})
"Component-Editor-Controller"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Component-Editor-Controller.jazz"} 1296738014 jazz
    {Lisp-Entry "jazz.designer.editor.Component-Editor-Controller" module #f 37 18 37 66 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.io" "jazz.designer")}
      {Lisp-Entry "Component-Editor-Controller" class #f 46 20 46 47 ("Document-Controller")
        {Lisp-Entry "save" method #f 50 20 50 24 ("document" "save-content-patch")}
        {Lisp-Entry "revert" method #f 53 11 53 17 ("document" "revert-content")}
        {Lisp-Entry "name-status" method #f 56 20 56 31 ("category-name" "else" "get-name" "file?" "effective-newname" "not" "cond" "format" "origin" "get-origin" "get-form" "form" "when" "document" "get-designer" "designer" "let" "find-origin" "define")}
        {Lisp-Entry "confirm-close" method #f 74 20 74 33 ("throw-cancel" "cancel" "revert" "no" "save-all" "yes" "case" "confirmation" "type" "type:" "name-status" "format" "message-box" "code" "let" "get-modified?" "when")}
        {Lisp-Entry "update-moniker-time" method #f 84 20 84 39 ("moniker")}}}})
"Component-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "menu" "Component-Menu.jazz"} 1296738014 jazz
    {Lisp-Entry "jazz.designer.menu.Component-Menu" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer.menu" "jazz.designer")}
      {Lisp-Entry "Component-Menu" class #f 47 20 47 34 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f 50 3 50 7 ("properties" "before-properties" "rename" "rename-selected" "delete" "delete-selection" "end-edit-group" "paste-properties" "paste" "copy" "view" "cut" "end-add-group" "add-menu" "Add-Menu" "add-item" "end-designer-group" "Separator-Item" "add" "new" "components-tree" "Action" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "title" "title:" "edit" "name" "name:" "Label-Item" "install")}}}})
"Component-Parcel"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "clipboard" "Component-Parcel.jazz"} 1296738014 jazz
    {Lisp-Entry "jazz.designer.clipboard.Component-Parcel" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library.component" "jazz.jml")}
      {Lisp-Entry "Component-Parcel" class #f 45 20 45 36 ("Entity-Parcel")
        {Lisp-Entry "imports" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-imports" accessor #f 48 23 48 31 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("self" "imports~self" "set!" "nextmethod" "content" "imports" "object-id" "process-id")}
        {Lisp-Entry "get-master" method #f 61 18 61 28 ("content" "car")}
        {Lisp-Entry "get-master-model" method #f 65 18 65 34 ("resolve-runtime-reference" "get-model" "model" "get-master" "master" "let*" "imports" "imports-locator" "locator" "let")}
        {Lisp-Entry "get-master-name" method #f 72 18 72 33 ("get-name" "get-master" "master" "let")}}}})
"Component-Surrogate"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "surrogate" "Component-Surrogate.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.surrogate.Component-Surrogate" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Component-Surrogate" class #f 43 20 43 39 ("initialize" "Component")
        {Lisp-Entry "client" slot #f 46 18 46 24 ()}
        {Lisp-Entry "get-client" accessor #f 46 49 46 57 ()}
        {Lisp-Entry "set-client" accessor #f 46 49 46 57 ()}
        {Lisp-Entry "editor" slot #f 47 18 47 24 ()}
        {Lisp-Entry "get-editor" accessor #f 47 46 47 54 ()}
        {Lisp-Entry "initialize" method #f 55 20 55 30 ("set-client" "self" "editor~self" "set!" "nextmethod" "editor" "editor:" "client" "client:")}
        {Lisp-Entry "install-handlers" method #f 66 26 66 42 ()}
        {Lisp-Entry "remove-handlers" method #f 70 26 70 41 ()}
        {Lisp-Entry "outer-client" method #f 79 18 79 30 ("editor" "get-reference" "client" "outer-component")}
        {Lisp-Entry "invalidate-border" method #f 88 26 88 43 ()}
        {Lisp-Entry "redraw-border" method #f 92 26 92 39 ()}
        {Lisp-Entry "select" method #f 101 26 101 32 ("focus?" "rank")}
        {Lisp-Entry "unselect" method #f 105 26 105 34 ()}
        {Lisp-Entry "get-selected?" method #f 109 18 109 31 ("get-selection" "client" "memq?")}
        {Lisp-Entry "selection-rank" method #f 113 18 113 32 ("client" "get-selection" "find")}
        {Lisp-Entry "get-selection" method #f 117 18 117 31 ("editor" "get-selection")}
        {Lisp-Entry "set-selection" method #f 121 18 121 31 ("editor" "set-selection" "selection")}
        {Lisp-Entry "acquire-selection" method #f 125 18 125 35 ("client" "list" "set-selection")}}}})
"Components-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Components-Tree.jazz"} 1298554945 jazz
    {Lisp-Entry "jazz.designer.editor.Components-Tree" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.clipboard" "jazz.ui.view" "jazz.ui" "jazz.system" "jazz.platform" "jazz.locale" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "Components-Tree" class #f 53 20 53 35 ("Components-Viewer")
        {Lisp-Entry "focus-actions" method #f 61 20 61 33 ("nextmethod" "components-tree" "find-actions" "cons")}
        {Lisp-Entry "on-delete-selection" method #f 71 11 71 30 ("delete-selection" "evt")}
        {Lisp-Entry "on-rename-component" method #f 75 11 75 30 ("rename-selection" "evt")}
        {Lisp-Entry "on-export-text" method #f 79 11 79 25 ("user-message" "export-text" "lambda" ":wait" "with-cursor" "bell" "not" "if" "selected-component" "component" "let" "evt")}
        {Lisp-Entry "on-properties" method #f 89 20 89 33 ("show-properties" "evt")}
        {Lisp-Entry "on-edit" method #f 93 19 93 26 ("class-of" "edit-class" "selected-component" "component" "let" "evt")}
        {Lisp-Entry "focus-gained" method #f 102 20 102 32 ("selected-components" "get-editor" "get-application" "set-selected" "nextmethod")}
        {Lisp-Entry "focus-update-actions" method #f 107 20 107 40 ("add" "new" "edit" "can-rename?" "rename" "components-tree" "Action" "set-action-enabled?")}
        {Lisp-Entry "on-editor" method #f 119 20 119 29 ("nextmethod" "else" "get-user-origin" "get-force-parent?" "get-origin" "get-old" "get-selection" "selection-changed" ":selection-changed" "branch-changed" ":branch-changed" "end-edition" ":saving" "get-kind" "case" "evt")}
        {Lisp-Entry "branch-changed" method #f 127 29 127 43 ()}
        {Lisp-Entry "selection-changed" method #f 131 29 131 46 ("focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "client-update" method #f 140 20 140 33 ("get-selection" "selected-components" "selected-components:" "update" "editor" "when")}
        {Lisp-Entry "set-designer" method #f 150 20 150 32 ("highlight-edited" "install-listener" "set!" "uninstall-listener" "get-reference" "unhighlight-edited" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "highlight-edited" method #f 166 29 166 45 ("component")}
        {Lisp-Entry "unhighlight-edited" method #f 170 29 170 47 ("component")}
        {Lisp-Entry "component-presentation" method #f 179 29 179 51 ("get-presentation-property" "component")}
        {Lisp-Entry "component-color" method #f 183 29 183 44 ("component")}
        {Lisp-Entry "component-image" method #f 187 29 187 44 ("get-component-image" "component")}
        {Lisp-Entry "component-state" method #f 191 29 191 44 ("component")}
        {Lisp-Entry "parent-relocation" method #f 200 29 200 46 ("parent")}
        {Lisp-Entry "relocation-parent" method #f 204 29 204 46 ("class" "destination")}
        {Lisp-Entry "can-undo?" method #f 213 20 213 29 ()}
        {Lisp-Entry "can-redo?" method #f 217 20 217 29 ()}
        {Lisp-Entry "can-cut?" method #f 221 20 221 28 ("can-cut-components?" "client" "neq?" "component" "lambda" "every?" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-copy?" method #f 227 20 227 29 ("selected-components" "can-copy-components?")}
        {Lisp-Entry "can-paste?" method #f 231 20 231 30 ("selected-components" "can-paste-components?")}
        {Lisp-Entry "can-paste-properties?" method #f 235 20 235 41 ("class-of" "subtype?" "component" "lambda" "every?" "get-master-model" "parcel-model" "car" "parcel" "let*" "1" "length" "=" "get-jazz-parcels" "parcels" "jazz-parcels" "clipboard-format-available?" "when" "selected-components" "components" "let")}
        {Lisp-Entry "can-delete?" method #f 249 20 249 31 ("can-delete-components?" "client" "neq?" "component" "lambda" "every?" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-rename?" method #f 255 20 255 31 ("can-rename-component?" "Component" "is?" "car" "component" "1" "length" "=" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-select-all?" method #f 263 20 263 35 ()}
        {Lisp-Entry "cut-selection" method #f 267 20 267 33 ("can-survive?" "can-survive?:" "designer" "cut-components" "get-selection" "with-deleted-selection" "lambda" "with-update-locked" "bell" "null?" "if" "selected-components" "components" "let")}
        {Lisp-Entry "copy-selection" method #f 279 20 279 34 ("150" "duration" "duration:" "get-application" "update-focus-actions" "designer" "copy-components" "lambda" ":wait" "with-cursor" "bell" "null?" "if" "selected-components" "components" "let")}
        {Lisp-Entry "paste-clipboard" method #f 291 20 291 35 ("get-model" "get-master" "master" "parcel" "key" "key:" "partition" "relocation-parent" "designer" "paste-parcels" "model" "bind" "info" "lambda" "for-each" "get-jazz-parcels" "parcels" "client" "selected-component" "or" "parent" "let")}
        {Lisp-Entry "paste-properties" method #f 300 20 300 36 ("designer" "paste-properties" "selected-components" "components" "let")}
        {Lisp-Entry "delete-selection" method #f 305 20 305 36 ("can-survive?" "can-survive?:" "designer" "delete-components" "lambda" "with-deleted-selection" "confirm-close" "get-selected-data" "components" "not-null?" "when" "get-selection" "selection" "let")}
        {Lisp-Entry "confirm-close" method #f 316 20 316 33 ("confirm-action" "components")}
        {Lisp-Entry "confirm-action" method #f 320 21 320 35 ("throw-cancel" "cancel" "no" "yes" "case" "confirmation" "type" "type:" "localize" "message-box" "code" "let" "text")}
        {Lisp-Entry "on-add-component" method #f 334 20 334 36 ("add-component-class" "car" "class" "selected-component" "addable-classes" "classes" "1" "length" "=" "when" "selected-components" "components" "let" "evt")}
        {Lisp-Entry "categorized-addable-classes" method #f 343 20 343 47 ("get-parent" "parent-relocation" "component-categorized-addable-classes" "else" "Component" "is-not?" "categorized-addable-root-classes" "not" "cond" "component")}
        {Lisp-Entry "add-component-class" method #f 352 20 352 39 ("select-component" "add-component-request" "values" "if" "get-parent" "set!" "addable-classes" "map" "memq?" "not" "when" "serialize-runtime-reference" "second" "client" "relocation-parent" "or" "resolve-runtime-reference" "selected-component" "selected" "let*" "import:" "install-new-component" "lambda" "with-update-locked" "get-designer" "designer" "name:" "new" "child" "presentation->name" "and" "name" "let" "added-properties" "receive" "extra-properties" "creation-info" "import" "class" "create-new-component" "define" "select?" "select?:" "properties" "properties:" "presentation" "presentation:" "parent" "parent:" "reference")}
        {Lisp-Entry "add-component-request" method #f 379 29 379 50 ("component-properties-request" "get-children" "component-presentation-request" "values" "parent" "class")}
        {Lisp-Entry "component-presentation-request" method #f 384 29 384 59 ("request-component-presentation" "initial-value" "initial-value:" "brothers" "class")}
        {Lisp-Entry "component-properties-request" method #f 388 29 388 57 ("class")}
        {Lisp-Entry "install-new-component" method #f 392 29 392 50 ("install-new-properties" "set-presentation-property" "when" "add-child" "import" "import:" "extra-properties" "added-properties" "presentation" "parent" "child" "designer")}
        {Lisp-Entry "install-new-properties" method #f 399 29 399 51 ("append" "add-properties" "extra-properties" "added-properties" "child" "designer")}
        {Lisp-Entry "add-properties" method #f 403 29 403 43 ("designer" "set-property" "value" "property" "lambda" "for-each-property" "properties" "component")}
        {Lisp-Entry "rename-selection" method #f 413 20 413 36 ("rename-component" "when" "selected-component" "component" "let")}
        {Lisp-Entry "rename-component" method #f 419 18 419 34 ("end-rename" "0" "Cell" "new" "cell" "row->line" "line" "get-presentation-property" "initial-value" "initial-value:" "get-brothers" "class-of" "component-presentation-request" "presentation" "let*" "ensure-expanded" "when" "component-row" "row" "let" "component")}
        {Lisp-Entry "end-rename" method #f 429 11 429 21 ("select-component" "acquire-focus" "reorder-component" "sort-components?" "and" "when" "get-parent" "parent" "let" "designer" "set-presentation-property" "get-cell-data" "set-title" "lambda" "with-update-locked" "presentation" "cell" "component")}
        {Lisp-Entry "move-components" method #f 446 11 446 26 ("send-component-before" "send-before" "for-each" "and" "target-data" "element" "cardinality" "<" "1" "+" "after" "before" "case" "position" "son-rank" "rank" "get-sons" "sons" "get-father" "father" "select-components" "transfer-components" "new-components" "bell" "not" "class-of" "relocation-parent" "component" "key" "key:" "uniform" "parent" "let" "row" "eq?" "if" "lambda" "with-update-locked" "get-user-data" "destination" "get-part" "part" "get-row" "dst" "get-view" "get-selected-data" "components" "get-designer" "designer" "let*" "target" "source")}
        {Lisp-Entry "move-component-row" method #f 472 11 472 29 ("find-component-position" "not" "if" "lambda" "move-row" "sort-components?" "sort?" "client" "or" "destination" "get-user-data" "source" "let*" "get-sons" "cardinality" "1" "=" "get-father" "eq?" "and" "unless" "position" "position:" "father" "row")}
        {Lisp-Entry "reorder-component" method #f 484 18 484 35 ("get-father" "move-component-row" "find-row" "row" "let" "component")}
        {Lisp-Entry "find-component-position" method #f 489 29 489 52 ("get-presentation-property" "find-ordered-position" "father" "row" "component")}
        {Lisp-Entry "find-component-insertion" method #f 493 29 493 53 ("find-row" "son-rank" "when" "target" "component" "parent-row")}
        {Lisp-Entry "send-component-before" method #f 498 29 498 50 ("before" "component")}
        {Lisp-Entry "get-row-reorder-target" method #f 507 20 507 42 ("part:" "row:" "self" "view" "view:" "Tree-Drop-Target" "new" "when" "else" "after" "=" "4" "3" "cond" "part" "can-send-before?" "cdr" "/=" "addable-class?" "has-parent?" "every?" "neq?" "or" "not" "move?" "visible-count" "<" "before" "+" "2" "1" "memq?" "if" "and" "before-rank" "get-sons" "last" "before-last" "eq?" "before?" "dst-parent" "row->line" "dst-line" "get-father" "dst-father" "dst" "get-parent" "parent-relocation" "component" "key" "key:" "uniform" "src-parent" "class-of" "remove-duplicates" "src-types" "get-row" "get-user-data" "n" "lambda" "map" "src" "contiguous-range" "src-range" "get-source" "get-view" "get-selection" "src-selection" "let*" "quarter" "row" "drag-drop")}
        {Lisp-Entry "get-row-target" method #f 531 20 531 34 ("else" "get-row-reorder-target" "Descendants-Tree" "row:" "self" "view:" "Tree-Drop-Target" "new" "addable-class?" "and" "when" "get-user-data" "component" "get-class" "class" "selected-component" "tool" "Toolbox-Tree" "typecase" "get-view" "view" "get-source" "source" "let*" "row" "drag-drop")}
        {Lisp-Entry "receive-drop" method #f 548 20 548 32 ("Toolbox-Tree" "typecase" "move-components" "self" "eq?" "if" "get-target" "get-source" "source" "let" "parent:" "add-component-class" "lambda" "with-update-locked" "get-row" "get-user-data" "parent" "get-reference" "ref" "selected-component" "tool" "let*" "target" "receive-model" "define" "drag-drop" "pos" "sender")}
        {Lisp-Entry "show-properties" method #f 572 18 572 33 ("-" "value" "100" "property" "locate" "set-width" "get-width" "width" "let" "expand/collapse" "set-parent" "auto-expanded-row" "set!" "row-height" "row-height:" "father" "father:" "Editor-Row" "class" "class:" "add-row" "subrow" "get-height" "+" "height" "2" "borders-height" "16" "header-height" "set-client" "designer" "set-designer" "get-editor" "set-editor" "categorized" "set-filter" "get-header" "set-flat?" "get-tree" "tree" "parent" "parent:" "Properties-Card" "card" "1" "Rect" "border-insets" "border-insets:" "edge" "border-type" "border-type:" "Border-View" "new" "border" "selected-component" "component" "get-row" "row" "get-single-selection" "selection" "let*")}
        {Lisp-Entry "show-properties" method #f 597 26 597 41 ("editor" "show-properties")}
        {Lisp-Entry "on-selection-change" method #f 606 19 606 38 ("focus?" "focus?:" "force?" "force?:" "self" "origin" "origin:" "selected-components" "set-selection" "get-application" "get-selected-owner" "eq?" "editor" "and" "when" "evt")}
        {Lisp-Entry "select-component" method #f 611 18 611 34 ("set-single-selection" "when" "component-visible-row" "row" "let" "component")}
        {Lisp-Entry "select-components" method #f 618 18 618 35 ("set-selection" "component-visible-row" "map" "remove-false" "rows" "let" "components")}
        {Lisp-Entry "find-row" method #f 624 29 624 37 ("component-row" "component")}}}})
"Components-Tree-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Components-Tree-Actions.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.Components-Tree-Actions" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Components-Tree-Actions" class #f 46 20 46 43 ("Actions")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("on-add" "add" "on-new" "new" "on-edit" "edit" "on-properties" "properties" "F2" "Shortcut" "shortcut" "shortcut:" "on-rename-component" ":focus" "Event-Handler" "action-handler" "action-handler:" "rename" "name" "name:" "Action-Item" "install")}}}})
"Components-Viewer"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Components-Viewer.jazz"} 1299092012 jazz
    {Lisp-Entry "jazz.designer.editor.Components-Viewer" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.designer.menu" "jazz.designer")}
      {Lisp-Entry "Components-Viewer" class #f 48 20 48 37 ("initialize" "Tree-View")
        {Lisp-Entry "editor" slot #f 51 8 51 14 ()}
        {Lisp-Entry "client" slot #f 52 8 52 14 ()}
        {Lisp-Entry "designer" slot #f 53 8 53 16 ()}
        {Lisp-Entry "focus-actions" method #f 61 20 61 33 ("nextmethod" "components-viewer" "find-actions" "cons")}
        {Lisp-Entry "destroy" method #f 71 20 71 27 ("nextmethod" "set-editor" "set-designer")}
        {Lisp-Entry "context-menu" method #f 77 20 77 32 ("track-popup-menu" "when" "get-context-menu" "menu" "let" "lambda" "with-context-click" "pos")}
        {Lisp-Entry "get-context-menu" method #f 85 20 85 36 ("add-component-class" "selected-component" "categorized-addable-classes" "selected-components" "update-component-menu" "self" "client" "client:" "Component-Menu" "new" "menu" "let")}
        {Lisp-Entry "on-add-component" method #f 91 29 91 45 ("evt")}
        {Lisp-Entry "categorized-addable-classes" method #f 100 26 100 53 ("component")}
        {Lisp-Entry "addable-classes" method #f 104 26 104 41 ("categorized-addable-classes" "flatten" "jazz.dialect.language.functional" "jazz.dialect.language.functional:flatten" "component")}
        {Lisp-Entry "categorized-addable-root-classes" method #f 108 26 108 58 ()}
        {Lisp-Entry "addable-root-classes" method #f 111 26 111 46 ("categorized-addable-root-classes" "flatten" "jazz.dialect.language.functional" "jazz.dialect.language.functional:flatten")}
        {Lisp-Entry "add-component-class" method #f 115 26 115 45 ("rest" "class")}
        {Lisp-Entry "get-editor" method #f 124 18 124 28 ("editor")}
        {Lisp-Entry "set-editor" method #f 128 18 128 28 ("editor-update" "on-editor" "method-name" "method-name:" "target" "target:" "Event-Handler" "new" "add-editor-listener" "set!" "self" "remove-editor-listener" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "editor-update" method #f 138 29 138 42 ()}
        {Lisp-Entry "on-editor" method #f 142 29 142 38 ("designer" "designer:" "set-designer" ":designer-change" "client" "client:" "get-property" "set-client" ":client-change" "get-kind" "case" "evt")}
        {Lisp-Entry "get-client" method #f 153 18 153 28 ("client")}
        {Lisp-Entry "set-client" method #f 157 18 157 28 ("client-update" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "client-update" method #f 163 29 163 42 ()}
        {Lisp-Entry "get-designer" method #f 172 18 172 30 ("designer")}
        {Lisp-Entry "set-designer" method #f 176 26 176 38 ("install-listener" "set!" "uninstall-listener" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "install-listener" method #f 190 11 190 27 ("add-designer-listener" "on-designer" "method-name" "method-name:" "self" "target" "target:" "Event-Handler" "new" "listener" "let" "designer")}
        {Lisp-Entry "uninstall-listener" method #f 195 11 195 29 ("self" "remove-designer-listener" "designer")}
        {Lisp-Entry "on-designer" method #f 204 29 204 40 ("evt")}
        {Lisp-Entry "get-selection-component" method #f 213 11 213 34 ("row" "get-line" "cell" "selection-mode" "case" "get-row" "get-user-data" "selection")}
        {Lisp-Entry "selected-component" method #f 222 18 222 36 ("get-selection-component" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "selected-components" method #f 228 26 228 45 ("get-ordered-selection" "get-selection-component" "map")}
        {Lisp-Entry "component-row" method #f 232 18 232 31 ("include-invisibles?" "include-invisibles?:" "user-data-row" "component")}
        {Lisp-Entry "component-visible-row" method #f 236 11 236 32 ("user-data-index" "component")}
        {Lisp-Entry "preserving-update" method #f 245 18 245 35 ("selected-components" "selected-components:" "get-expand-state" "expand-state" "expand-state:" "update")}
        {Lisp-Entry "update" method #f 249 26 249 32 ("rest")}
        {Lisp-Entry "update-selection" method #f 253 26 253 42 ("generate-event?" "generate-event?:" "force?" "force?:" "component-visible-row" "collect" "set-selection" "when" "set-expand-state" "selected-components" "expand-state")}}}})
"Components-Viewer-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Components-Viewer-Actions.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.Components-Viewer-Actions" module #f 37 18 37 64 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Components-Viewer-Actions" class #f 46 20 46 45 ("Actions")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 (":control" "Shortcut" "shortcut" "shortcut:" "on-add-component" ":focus" "Event-Handler" "action-handler" "action-handler:" "add" "name" "name:" "Action-Item" "install")}}}})
"Composite-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Composite-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Composite-Row" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.platform" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Composite-Row" class #f 49 20 49 33 ("String-Row")
        {Lisp-Entry "editor-class" method #f 57 20 57 32 ("Composite-Text-View")}
        {Lisp-Entry "get-edited-value" method #f 66 20 66 36 ("current-entries" "parse-entries" "=" "empty-string?" "or" "if" "editor" "get-string-content" "string" "let")}
        {Lisp-Entry "accepts-spaces?" method #f 78 29 78 44 ()}
        {Lisp-Entry "parse-entries" method #f 82 29 82 42 ("parse-entry" "map" "entries")}
        {Lisp-Entry "parse-entry" method #f 86 29 86 40 ("entry")}
        {Lisp-Entry "parse-error" method #f 90 11 90 22 ("0" "Cell" "Parse-Error" "new" "signal" "get-end" "get-start" "and" "syntax-message" "or" "let" "part" "part:" "end" "end:" "start" "start:" "message" "message:")}
        {Lisp-Entry "syntax-message" method #f 97 29 97 43 ()}
        {Lisp-Entry "present" method #f 106 20 106 27 ("present-value" "format" "not" "if" "value")}
        {Lisp-Entry "present-value" method #f 113 29 113 42 ("present-entry" "map" "value")}
        {Lisp-Entry "present-entry" method #f 117 29 117 42 ("entry")}
        {Lisp-Entry "navigate-backward" method #f 126 11 126 28 ("select-part" "=" "when" "lambda" "for-each-part" "1" "get-rank" "-" "previous" "let" "bell" "not" "if" "pos->part" "part" "editor" "get-start" "get-col" "pos" "current-entries" "entries" "let*")}
        {Lisp-Entry "navigate-forward" method #f 139 11 139 27 ("select-part" "=" "when" "lambda" "for-each-part" "1" "get-rank" "+" "next" "let" "bell" "not" "if" "pos->part" "part" "editor" "get-end" "get-col" "pos" "current-entries" "entries" "let*")}
        {Lisp-Entry "current-entries" method #f 152 11 152 26 ("editor" "get-string-content" "determine-entries")}
        {Lisp-Entry "current-part" method #f 156 11 156 23 ("pos->part" "editor" "get-start" "get-col" "pos" "let" "entries")}
        {Lisp-Entry "current-position" method #f 161 11 161 27 ("pos->position" "editor" "get-start" "get-col" "pos" "let" "entries")}
        {Lisp-Entry "pos->part" method #f 166 11 166 20 ("continuation-return" "get-end" "<=" "get-start" ">=" "and" "when" "part" "for-each-part" "return" "lambda" "continuation-capture" "pos" "entries")}
        {Lisp-Entry "pos->position" method #f 176 11 176 24 ("else" "eqv?" "accepts-spaces?" "cond" "element" "c" "0" "<" "while" "decrease!" "1" "+" "and" "when" "find-entry-end" "end" "n" "let*" "get-position" "continuation-return" "get-end" "get-start" "between?" "if" "part" "for-each-part" "editor" "get-string-content" "string" "let" "return" "lambda" "continuation-capture" "pos" "entries")}
        {Lisp-Entry "find-entry-end" method #f 198 11 198 25 ("else" "increase!" "eqv?" "accepts-spaces?" "and" "cond" "element" "c" "continuation-return" ">=" "if" "while" "return" "lambda" "continuation-capture" "cardinality" "len" "let" "n" "string")}
        {Lisp-Entry "for-each-part" definition #f 211 15 211 28 ("entry" "lambda" "for-each" "proc" "entries")}
        {Lisp-Entry "view-completions" method #f 222 11 222 27 ("acquire-focus" "locate-prefix" "0" "set-selection" "border:" "alternate-position" "alternate-position:" "popup" "-2" "alternate" "2" "get-height" "-10" "+" "pos" "text->view" "view" "get-row" "get-paragraph" "par" "user-data" "user-data:" "title" "title:" "Image-Resource" "image" "image:" "Tree-Node" "list" "children" "children:" "add-row" "lambda" "for-each" "ci<?" "sort" "sorted" "set-client" "set-parent" "fill" "set-layout-type" "end:" "start:" "get-selection" "selected" "selected:" "self" "value-row" "value-row:" "Completion-Tree" "tree" "get-content" "content" "vscroll?" "vscroll?:" "tool" "style" "style:" "250" "min" "50" "max" "150" "Dimension" "size" "size:" "Scroller-View" "scroller" "blue" "blue:" "green" "green:" "128" "red" "red:" "Color" "border-color" "border-color:" "solid" "border-type" "border-type:" "name" "name:" "Border-View" "new" "border" "17" "length" "*" "height" "part-domain" "domain" "end" "start" "text" "receive" "bell" "info" "get-text" "get-position" "get-end" "editor" "get-start" "get-col" "values" "when" "current-position" "position" "let" "not" "if" "current-part" "part" "current-entries" "entries" "let*" "find-to-complete" "define")}
        {Lisp-Entry "complete-part" method #f 263 11 263 24 ("insert-string" "0" "Cell" "Range$Cell$" "new" "editor" "set-selection" "all?" "all?:" "parent" "get-player" "close-popups" "get-row" "get-user-data" "string" "bell" "not" "if" "get-single-selection" "rank" "let" "tree" "end" "start")}
        {Lisp-Entry "determine-entries" method #f 278 11 278 28 ("split" "cardinality" "length" "for-each" "entries" "let" "get-output" "begin" "not" "eqv?" "accepts-spaces?" "and" "if" "from" "n" "in-sequence" "c" "for" "loop" "set!" "increase!" "1" "+" "subseq" "Part" "put" "when" "lambda" "end-part" "end" "start" "0" "position" "List-Factory" "new" "parts" "let*" "offset" "rank" "determine-entry" "define" "string")}
        {Lisp-Entry "part-domain" method #f 321 29 321 40 ("position")}
        {Lisp-Entry "select-part" method #f 325 11 325 22 ("get-end" "get-start" "0" "Cell" "Range$Cell$" "new" "editor" "set-selection" "part")}}
      {Lisp-Entry "Part" class #f 334 7 334 11 ("Object")
        {Lisp-Entry "rank" slot #f 337 8 337 12 ()}
        {Lisp-Entry "get-rank" accessor #f 337 24 337 32 ()}
        {Lisp-Entry "position" slot #f 338 8 338 16 ()}
        {Lisp-Entry "get-position" accessor #f 338 24 338 32 ()}
        {Lisp-Entry "text" slot #f 339 8 339 12 ()}
        {Lisp-Entry "get-text" accessor #f 339 24 339 32 ()}
        {Lisp-Entry "start" slot #f 340 8 340 13 ()}
        {Lisp-Entry "get-start" accessor #f 340 24 340 32 ()}
        {Lisp-Entry "end" slot #f 341 8 341 11 ()}
        {Lisp-Entry "get-end" accessor #f 341 24 341 32 ()}
        {Lisp-Entry "initialize" method #f 344 20 344 30 ("end~self" "start~self" "text~self" "position~self" "self" "rank~self" "set!" "nextmethod" "end" "start" "text" "position" "rank")}
        {Lisp-Entry "print" method #f 353 20 353 25 ("end" "start" "text" "format" "lambda" "self" "print-unreadable" "readably" "output")}}
      {Lisp-Entry "Composite-Text-View" class #f 364 7 364 26 ("Value-Text-View")
        {Lisp-Entry "tab-press" method #f 367 20 367 29 ("navigate-forward" "else" "navigate-backward" "shift-key?" "value-row" "view-completions" "control-key?" "end-completion" "has-completion?" "cond" "modifiers" "key")}
        {Lisp-Entry "get-context-menu" method #f 374 20 374 36 ("Composite-Menu" "new")}
        {Lisp-Entry "on-navigate-backward" method #f 378 11 378 31 ("value-row" "navigate-backward" "evt")}
        {Lisp-Entry "on-navigate-forward" method #f 382 11 382 30 ("value-row" "navigate-forward" "evt")}
        {Lisp-Entry "on-view-completions" method #f 386 11 386 30 ("value-row" "view-completions" "evt")}
        {Lisp-Entry "focus-actions" method #f 395 20 395 33 ("nextmethod" "composite-text" "find-actions" "cons")}
        {Lisp-Entry "complete-name?" method #f 405 20 405 34 ("1" ">=" "size")}
        {Lisp-Entry "favorite-completions" method #f 409 20 409 40 ()}
        {Lisp-Entry "symbol-completions" method #f 413 20 413 38 ("complete" "Symbol-Completer" "new" "completer" "part-domain" "domain" "let" "when" "current-position" "position" "value-row" "current-entries" "entries" "let*" "name")}}
      {Lisp-Entry "Composite-Menu" class #f 428 7 428 21 ("Text-Context-Menu")
        {Lisp-Entry "form" anonymous #f 431 3 431 7 ("view-completions" "navigate-forward" "composite-text" "Action" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "title" "title:" "navigate-backward" "name" "name:" "Label-Item" "Separator-Item" "install")}}
      {Lisp-Entry "Completion-Tree" class #f 445 7 445 22 ("initialize" "Tree-View")
        {Lisp-Entry "form" anonymous #f 448 3 448 7 ("toplevel-controls?" "toplevel-controls?:" "200" "width" "width:" "Tree-Node-Column" "node" "selection-mode" "selection-mode:" ":images" "portfolio" "portfolio:" "install")}
        {Lisp-Entry "value-row" property #f 453 12 453 21 ()}
        {Lisp-Entry "get-value-row" accessor #f 453 46 453 54 ()}
        {Lisp-Entry "set-value-row" accessor #f 453 46 453 54 ()}
        {Lisp-Entry "selected" property #f 454 12 454 20 ()}
        {Lisp-Entry "get-selected" accessor #f 454 46 454 54 ()}
        {Lisp-Entry "set-selected" accessor #f 454 46 454 54 ()}
        {Lisp-Entry "start" property #f 455 12 455 17 ()}
        {Lisp-Entry "get-start" accessor #f 455 46 455 54 ()}
        {Lisp-Entry "set-start" accessor #f 455 46 455 54 ()}
        {Lisp-Entry "end" property #f 456 12 456 15 ()}
        {Lisp-Entry "get-end" accessor #f 456 46 456 54 ()}
        {Lisp-Entry "set-end" accessor #f 456 46 456 54 ()}
        {Lisp-Entry "return-press" method #f 459 20 459 32 ("self" "end" "start" "value-row" "complete-part" "key")}
        {Lisp-Entry "tab-press" method #f 463 20 463 29 ("self" "end" "start" "value-row" "complete-part" "modifiers" "key")}
        {Lisp-Entry "double-click" method #f 467 20 467 32 ("self" "end" "start" "value-row" "complete-part" "pos")}}}})
"Composite-Text-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Composite-Text-Actions.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Composite-Text-Actions" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Composite-Text-Actions" class #f 46 20 46 42 ("Actions")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("Space" ":control" "on-view-completions" "view-completions" "on-navigate-forward" "navigate-forward" "Tab" ":shift" "Shortcut" "shortcut" "shortcut:" "on-navigate-backward" ":focus" "Event-Handler" "action-handler" "action-handler:" "navigate-backward" "name" "name:" "Action-Item" "install")}}}})
"Containment-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Containment-Editor.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.Containment-Editor" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Containment-Editor" class #f 47 20 47 38 ("explicit" "initialize" "View")
        {Lisp-Entry "client" property #f 50 12 50 18 ()}
        {Lisp-Entry "flow-layout" slot #f 53 8 53 19 ()}
        {Lisp-Entry "form" anonymous #f 56 3 56 7 ("install")}
        {Lisp-Entry "external-name" method #f 60 25 60 38 ("containment-editor" "rest")}
        {Lisp-Entry "host-icon" method #f 69 25 69 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 73 25 73 35 ()}
        {Lisp-Entry "client-activate" method #f 77 20 77 35 ("get-client" "set-client" "View-Editor" "is?" "when" "current-document" "guest" "let")}
        {Lisp-Entry "finish" method #f 88 20 88 26 ("layout-view" "0" "5" "4" "Rect" "insets" "insets:" "Flow-Layout" "new" "flow-layout" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "layout" method #f 94 20 94 26 ("get-height" "get-width" "children" "flow-layout" "layout")}
        {Lisp-Entry "get-client" method #f 103 18 103 28 ("client")}
        {Lisp-Entry "set-client" method #f 107 18 107 28 ("set!" "client" "neq?" "when" "clt")}}}})
"Custom-Card"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "card" "Custom-Card.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.card.Custom-Card" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Custom-Card" class #f 43 20 43 31 ("initialize" "Card")
        {Lisp-Entry "setup?" slot #f 46 8 46 14 ()}
        {Lisp-Entry "setup-properties" method #f 54 11 54 27 ("set!" "layout-view" "client" "setup-entry" "domain" "property" "view" "lambda" "for-each-property-view" "setup?" "unless")}
        {Lisp-Entry "update-properties" method #f 63 11 63 28 ("set-property-value" "client" "read-property" "value" "let" "domain" "property" "view" "lambda" "for-each-property-view")}
        {Lisp-Entry "for-each-property-view" method #f 70 11 70 33 ("property-domain" "domain" "get-property" "client" "class-of" "category-field" "property" "let*" "Property-View" "is?" "when" "level" "view" "lambda" "for-each-descendant" "proc")}
        {Lisp-Entry "find-property-view" method #f 79 18 79 36 ("continuation-return" "get-property" "eq?" "Property-View" "is?" "and" "when" "level" "component" "for-each-descendant" "return" "lambda" "continuation-capture" "property")}
        {Lisp-Entry "client-update" method #f 94 20 94 33 ("get-properties-mapping" "property-update" "read-property" "value" "locate" "view" "let" "type" "name" "property" "bind" "mapping" "lambda" "for-each" "update-properties" "setup-properties" "client" "when")}
        {Lisp-Entry "property-update" method #f 106 29 106 44 ("error" "else" "set-color" "color" "seconds?" "seconds?:" "present" "not" "if" "date" "set-checked?" "boolean" "set-content" "text" "or" "set-string-content" "string" "case" "type" "value" "view")}
        {Lisp-Entry "save-client" method #f 116 26 116 37 ("get-properties-mapping" "set!" "save-property" "locate" "type" "name" "bind" "mapping" "for-each" "modified?" "save-properties" "set-property-modified?" "set-property" "designer" "set-name" "name-info" "field-name" "eq?" "if" "get-property-value" "value" "let" "get-property-modified?" "domain" "property" "view" "lambda" "for-each-property-view" "client" "when" "save-properties-new" "define")}
        {Lisp-Entry "save-property" method #f 142 29 142 42 ("error" "else" "get-color" "color" "Date" "parse-string" "empty-string?" "if" "content" "let" "date" "get-checked?" "boolean" "get-content" "text" "set-modified?" "design-events?" "design-events?:" "get-string-content" "client" "designer" "set-property" "get-modified?" "when" "string" "case" "type" "property" "view")}
        {Lisp-Entry "get-properties-mapping" method #f 176 29 176 51 ()}
        {Lisp-Entry "property-change" method #f 185 20 185 35 ("client-update" "value" "property" "component")}}}})
"Descendants-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Descendants-Editor.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.Descendants-Editor" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.platform" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Descendants-Editor" class #f 48 20 48 38 ("Layout-View")
        {Lisp-Entry "form" anonymous #f 51 3 51 7 ("183" "width" "width:" "descendant" "tree" "Descendants-Tree" "header" "Tree-Header" "content" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "document" "style" "style:" "scroller" "Scroller-View" "on-new-default" ":guest" "Event-Handler" "action-handler" "action-handler:" ":images" "portfolio" "portfolio:" "Image-Resource" "resource" "resource:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "tail" "location" "location:" "22" "Dimension" "size" "size:" "new-default" "Push-Tool" "tools" "name" "name:" "Layout-View" "fill" "layout-type" "layout-type:" "install")}
        {Lisp-Entry "external-name" method #f 64 25 64 38 ("descendants-editor" "rest")}
        {Lisp-Entry "host-icon" method #f 73 25 73 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 77 25 77 35 ()}
        {Lisp-Entry "client-activate" method #f 81 20 81 35 ("get-designer" "set-designer" "get-client" "set-client" "set-editor" "Component-Editor" "is?" "when" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method #f 89 20 89 37 ("set-designer" "set-client" "set-editor")}
        {Lisp-Entry "focus-default" method #f 100 20 100 33 ("auto-select-first" "acquire-focus" "locate" "tree" "let")}
        {Lisp-Entry "get-tools-view" method #f 106 20 106 34 ("tools" "locate")}
        {Lisp-Entry "install-in-host" method #f 115 20 115 35 ("header" "set-shown?" "scroller" "locate" "set-flat?" "Docked-Host" "is?" "when" "2" "0" "Rect" "set-layout-insets" "fill" "get-root" "set-layout-type" "nextmethod" "host")}
        {Lisp-Entry "get-tree" method #f 132 18 132 26 ("tree" "locate")}
        {Lisp-Entry "on-new-default" method #f 141 11 141 25 ("new-default" "evt")}
        {Lisp-Entry "new-default" method #f 150 29 150 40 ("bell")}
        {Lisp-Entry "add-default" method #f 154 11 154 22 ("parent:" "add-component-class" "get-client" "parent" "get-tree" "tree" "let*" "class")}
        {Lisp-Entry "get-editor" method #f 165 18 165 28 ("get-tree" "get-editor")}
        {Lisp-Entry "set-editor" method #f 169 18 169 28 ("get-tree" "set-editor" "editor")}
        {Lisp-Entry "get-client" method #f 178 18 178 28 ("get-tree" "get-client")}
        {Lisp-Entry "set-client" method #f 182 18 182 28 ("get-tree" "set-client" "client")}
        {Lisp-Entry "get-designer" method #f 191 18 191 30 ("get-tree" "get-designer")}
        {Lisp-Entry "set-designer" method #f 195 18 195 30 ("get-tree" "set-designer" "designer")}}}})
"Descendants-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Descendants-Tree.jazz"} 1297194138 jazz
    {Lisp-Entry "jazz.designer.editor.Descendants-Tree" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.platform" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Descendants-Tree" class #f 49 20 49 36 ("explicit" "initialize" "Components-Tree")
        {Lisp-Entry "group?" property #f 52 12 52 18 ()}
        {Lisp-Entry "get-group?" accessor #f 52 54 52 62 ()}
        {Lisp-Entry "set-group?" accessor #f 52 54 52 62 ()}
        {Lisp-Entry "editable?" property #f 53 12 53 21 ()}
        {Lisp-Entry "get-editable?" accessor #f 53 54 53 62 ()}
        {Lisp-Entry "set-editable?" accessor #f 53 54 53 62 ()}
        {Lisp-Entry "highlight-edited?" property #f 54 12 54 29 ()}
        {Lisp-Entry "get-highlight-edited?" accessor #f 54 54 54 62 ()}
        {Lisp-Entry "set-highlight-edited?" accessor #f 54 54 54 62 ()}
        {Lisp-Entry "show-traits?" property #f 55 12 55 24 ()}
        {Lisp-Entry "form" anonymous #f 58 3 58 7 ("187" "width" "width:" "title" "title:" "descendant" "name" "name:" "Component-Column" "on-selection-change" ":form" "Event-Handler" "selection-handler" "selection-handler:" "multiple-selection?" "multiple-selection?:" ":images" "portfolio" "portfolio:" "reorderable?" "reorderable?:" "draggable?" "draggable?:" "install")}
        {Lisp-Entry "get-show-traits?" method #f 68 18 68 34 ("show-traits?")}
        {Lisp-Entry "set-show-traits?" method #f 72 18 72 34 ("preserving-update" "show-traits?" "set!" "value")}
        {Lisp-Entry "mouse-down" method #f 82 20 82 30 ("editor" "edit-component" "bell" "not" "if" "selected-component" "component" "let" "editable?" "alt-down?" "and" "when" "nextmethod" "pos")}
        {Lisp-Entry "double-click" method #f 91 20 91 32 ("editor" "edit-component" "bell" "selected-component" "component" "let" "nextmethod" "editable?" "highlight-edited?" "not" "or" "if" "pos")}
        {Lisp-Entry "branch-changed" method #f 105 20 105 34 ("preserving-update")}
        {Lisp-Entry "selection-changed" method #f 109 20 109 37 ("generate-event?" "generate-event?:" "row->line" "set-selection" "ensure-expanded" "for-each" "component-row" "remove-false" "rows" "let" "Details-Tree" "self" "eq?" "not" "group?" "or" "unless" "find-ascendant" "Group" "is?" "if" "component" "lambda" "map" "groupify-selection" "define" "focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "update" method #f 128 20 128 26 ("update-selection" "get-rights" "insert-toplevel" "client" "when" "lambda" "with-update-locked" "remove-every-row" "selected-components" "selected-components:" "get-expand-state" "expand-state" "expand-state:")}
        {Lisp-Entry "insert-toplevel" method #f 137 29 137 44 ("0" "client" "insert-component" "rights")}
        {Lisp-Entry "insert-component?" method #f 141 29 141 46 ("component")}
        {Lisp-Entry "insert-component" method #f 145 29 145 45 ("insert-components" "user-data" "user-data:" "color:" "title:" "Component-Node" "new" "list" "children" "children:" "father" "father:" "add-row" "subrow" "row-state" "collapsed" "null?" "if" "component-state" "component-image" "or" "component-color" "color" "component-presentation" "title" "get-components" "components" "let*" "insert-component?" "when" "state" "state:" "image" "image:" "level" "update?" "rights" "component" "row")}
        {Lisp-Entry "insert-components" method #f 157 29 157 46 ("get-components" "insert-component-list" "level" "update?" "rights" "component" "row")}
        {Lisp-Entry "insert-component-list" method #f 161 29 161 50 ("smaller" "sort-predicate" "sort-components" "sort-components?" "if" "1" "+" "and" "insert-component" "access-rights" "child-rights" "access-granted?" "receive" "child" "for-each" "Trait" "is-not?" "show-traits?" "not" "Group" "is?" "lambda" "collect-if" "set!" "group?" "when" "level" "update?" "rights" "components" "component" "row")}
        {Lisp-Entry "row-state" method #f 175 29 175 38 ("collapsed" "expanded" "if" "level" "update?" "component")}
        {Lisp-Entry "refresh" method #f 186 11 186 18 ("descendants" "case" "expand" "expanded" "eq?" "insert-components" "remove-every-son" "1" "get-level" "+" "level" "get-state" "state" "lambda" "with-update-locked" "refresh-descendants" "invalidate-cell" "get-cell-data" "set-title" "get-presentation-property" "title" "0" "Cell" "new" "cell" "let" "when" "row->line" "line" "component-row" "row" "let*" "refresh-component" "define" "what" "component")}
        {Lisp-Entry "get-rights" method #f 219 11 219 21 ("get-rights" "editor" "and")}
        {Lisp-Entry "access-rights" definition #f 225 15 225 28 ("can-access?" "find-child-rights" "child-rights" "let" "values" "not" "if" "child" "rights")}
        {Lisp-Entry "highlight-component" method #f 239 18 239 37 ("set-component-highlighted?" "component")}
        {Lisp-Entry "unhighlight-component" method #f 243 18 243 39 ("set-component-highlighted?" "component")}
        {Lisp-Entry "highlight-edited" method #f 247 20 247 36 ("set-component-highlighted?" "highlight-edited?" "when" "component")}
        {Lisp-Entry "unhighlight-edited" method #f 252 20 252 38 ("set-component-highlighted?" "highlight-edited?" "when" "component")}
        {Lisp-Entry "set-component-highlighted?" method #f 257 11 257 37 ("invalidate-cell" "Cell" "new" "cell" "get-columns-count" ">" "and" "row->line" "line" "0" "get-child" "set-highlighted?" "when" "component-row" "row" "let" "flag" "component")}
        {Lisp-Entry "get-draggable?" method #f 272 20 272 34 ("can-move-component?" "Component" "is?" "and" "selected-component" "component" "let")}
        {Lisp-Entry "on-designer" method #f 282 20 282 31 ("what" "what:" "refresh" ":refresh" "target" "target:" "send-before-target" ":send-before" "child-remove" ":child-remove" "descendant?" "descendant?:" "parent" "parent:" "child" "child:" "child-add" ":child-add" "presentation" "presentation:" "component" "component:" "get-property" "presentation-change" ":presentation-change" "get-kind" "case" "evt")}
        {Lisp-Entry "presentation-change" method #f 291 11 291 30 ("invalidate-cell" "0" "Cell" "new" "cell" "let" "set-title" "when" "first-child" "node" "row->line" "line" "find-row" "row" "let*" "Trait" "is?" "show-traits?" "not" "Group" "is-not?" "group?" "and" "or" "unless" "presentation" "component")}
        {Lisp-Entry "child-add" method #f 304 11 304 20 ("expand" "reorder-component" "when" "state:" "insert-component" "lambda" "with-update-locked" "collapsed" "expanded" "state" "0" "get-level" "if" "level" "parent-relocation" "find-row" "row" "let*" "Trait" "is?" "show-traits?" "not" "Group" "is-not?" "group?" "and" "or" "unless" "descendant?" "parent" "child")}
        {Lisp-Entry "child-remove" method #f 318 11 318 23 ("remove-row" "lambda" "with-update-locked" "find-row" "row" "let" "Trait" "is?" "show-traits?" "not" "Group" "is-not?" "group?" "and" "or" "unless" "child")}
        {Lisp-Entry "send-before-target" method #f 327 11 327 29 ("find-component-insertion" "position" "position:" "move-component-row" "lambda" "with-update-locked" "parent-relocation" "parent-row" "find-row" "child-row" "let" "target" "parent" "child")}}
      {Lisp-Entry "Component-Column" class #f 342 7 342 23 ("Dark-Red" "Color" "initialize" "Tree-Node-Column")
        {Lisp-Entry "highlight-color" property #f 345 12 345 27 ()}
        {Lisp-Entry "get-highlight-color" accessor #f 345 66 345 74 ()}
        {Lisp-Entry "set-highlight-color" accessor #f 345 66 345 74 ()}
        {Lisp-Entry "draw-data" method #f 348 20 348 29 ("highlight-color" "text-rect" "frame-rect" "get-highlighted?" "Component-Node" "is?" "and" "when" "nextmethod" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Component-Node" class #f 359 7 359 21 ("initialize" "Tree-Node")
        {Lisp-Entry "highlighted?" slot #f 362 18 362 30 ()}
        {Lisp-Entry "get-highlighted?" accessor #f 362 55 362 63 ()}
        {Lisp-Entry "set-highlighted?" accessor #f 362 55 362 63 ()}}}})
"Designer"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "designer" "Designer.jazz"} 1299130337 jazz
    {Lisp-Entry "jazz.designer.designer.Designer" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.dialog" "jazz.ui.clipboard" "jazz.system" "jazz.runtime" "jazz.platform" "jazz.library.listener" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.io" "jazz.editor.jazz" "jazz.designer.view" "jazz.designer" "jazz.debuggee")}
      {Lisp-Entry "Designer" class #f 57 7 57 15 ("initialize" "Object")
        {Lisp-Entry "form" slot #f 60 8 60 12 ()}
        {Lisp-Entry "get-form" accessor #f 60 42 60 50 ()}
        {Lisp-Entry "set-form" accessor #f 60 42 60 50 ()}
        {Lisp-Entry "form-copy" slot #f 61 8 61 17 ()}
        {Lisp-Entry "get-form-copy" accessor #f 61 42 61 50 ()}
        {Lisp-Entry "set-form-copy" accessor #f 61 42 61 50 ()}
        {Lisp-Entry "reference" slot #f 62 8 62 17 ()}
        {Lisp-Entry "get-reference" accessor #f 62 39 62 47 ()}
        {Lisp-Entry "listeners" slot #f 63 8 63 17 ()}
        {Lisp-Entry "modified?" slot #f 64 8 64 17 ()}
        {Lisp-Entry "get-modified?" accessor #f 64 42 64 50 ()}
        {Lisp-Entry "set-modified?" accessor #f 64 42 64 50 ()}
        {Lisp-Entry "initialize" method #f 72 20 72 30 ("reference~self" "nextmethod" "jazz" "Data" "set-data" "copy-object" "form-copy" "setup-class-form" "setup-file-form" "file?" "get-origin" "let" "install" "model" "model:" "action" "action:" "class-of" "origin" "origin:" "textual?" "textual?:" "Form" "new" "self" "form~self" "set!" "not" "if" "frm" "setup-form" "define" "reference" "reference:" "form" "form:")}
        {Lisp-Entry "revert" method #f 111 18 111 24 ("form-copy" "set-class-form" "class?" "when" "form" "get-origin" "origin" "let")}
        {Lisp-Entry "save" method #f 122 26 122 30 ("save-content" "save-as" "not" "if" "form" "get-origin" "origin" "let" "lambda" ":wait" "with-cursor" "extensions" "extensions:" "default-extension" "default-extension:")}
        {Lisp-Entry "save-to" method #f 131 18 131 25 ("set-modified?" "save-to-file" "form" "set-origin" "save-as" "not" "if" "file")}
        {Lisp-Entry "Default-Extension" definition #f 139 14 139 31 ()}
        {Lisp-Entry "Default-Extensions" definition #f 142 14 142 32 ()}
        {Lisp-Entry "save-as" method #f 146 11 146 18 ("save-content" "Default-Extensions" "Default-Extension" "or" "choose-new-file" "choose-new-origin" "if" "form" "set-origin" "Toolbox-Manager" "find-docked" "toolbox-manager" "let" "extensions" "extensions:" "default-extension" "default-extension:")}
        {Lisp-Entry "call-with-saved-text" method #f 155 11 155 31 ("save" "result" "let" "text" "lambda" "call-with-text" "func" "file")}
        {Lisp-Entry "call-with-text" method #f 163 11 163 25 ("close" "result" "get-guest" "text" "visible?" "visible?:" "Jazz-Text-View" "class" "class:" "force-new?" "force-new?:" "get-application" "edit-document" "frame" "let*" "func" "file")}
        {Lisp-Entry "evaluate-at-caret" method #f 171 11 171 28 ("current-declaration-range" "prepare-expressions" "get-local-process" "evaluate-expressions" "apply" "text")}
        {Lisp-Entry "choose-new-origin" method #f 174 11 174 28 ("evaluate-imports" "insert-imports" "find-unit-source" "call-with-saved-text" "with-safe-design" "bind" "File" "is?" "modules:" "Save-Chooser" "get-modal" "result" "get-module-names" "modules" "insert-string" "format" "form" "get-model" "super-class" "forward-expr" "forward-namespace" "insert-class" "module-ref" "evaluate-at-caret" "get-end" "set-caret" "enter-list" "get-start" "set-end" "forward-location" "Jazz-Explorer" "new" "explorer" "text" "evaluate-class" "require-module" "exc" "validate-module-name" "designer-error" "eq?" "not-found:" "module-get" "ref" "list" "not-found" "let*" "if" "class-name" "module-name" "validate-class-name" "car" "symbol?" "length" "1" "=" "and" "read-string-content" "err" "lambda" "with-exception-catcher" "content" "let" "class-string" "parse-class-name" "define" "toolbox-manager")}
        {Lisp-Entry "save-content" method #f 239 11 239 23 ("set-modified?" "save-to-class" "save-to-file" "file?" "if" "form" "get-origin" "origin" "let")}
        {Lisp-Entry "evaluate-imports" method #f 247 11 247 27 ("evaluate-at-caret" "get-end" "set-caret" "enter-import" "forward-namespace" "Jazz-Explorer" "new" "explorer" "let" "text")}
        {Lisp-Entry "insert-imports" method #f 255 11 255 25 ("filter-existing-import-invoices" "form" "get-data" "get-imports" "car" "map" "remove" "jml" "jazz" "jazz.jml" "cons" "units" "let*" "insert-import-invoice" "Jazz-Explorer" "new" "explorer" "let" "unit" "lambda" "for-each" "module-name" "text")}
        {Lisp-Entry "save-to-class" method #f 264 11 264 24 ("is?" "find-unit-source" "call-with-saved-text" "set-form" "get-data" "set-data" "new-form" "evaluate-at-caret" "get-end" "set-caret" "enter-list" "get-start" "set-end" "format" "insert-string" "2" "form->string" "str" ":new-form" "if" "where" "tabulate" "get-range" "set-selection" ":form" "list" "forward-location" "Jazz-Explorer" "explorer" "get-designers" "get-class-presentation" "class-info" "category-field" "process-property-change" "designer" "lambda" "for-each" "0" "reference" "set-object-slot" "get-children" "children" "children:" "get-properties" "properties" "properties:" "install" "model" "model:" "action" "action:" "textual?" "textual?:" "Form" "new" "adjusted-form" "save-to-new-class" "evaluate-form" "unless" "tabulate-form" "save-form" "evaluate-imports" "insert-imports" "get-class-form" "form" "eq?" "form-exists?" "text" "save-to-existing-class" "define" "category-unit" "module-name" "category-name" "class-name" "let" "class")}
        {Lisp-Entry "save-to-file" method #f 320 11 320 23 ("1" "print-to" "set!" "import" "for-each" "first?" "when" "get-imports" "imports" "get-dialect" "get-model" "output-header" "form" "get-data" "data" "let" "output" "lambda" "UTF-8" "char-encoding" "char-encoding:" "path-settings" "call-with-output-file" "format" "message-box" "read-only?" "exists?" "and" "if" "file")}
        {Lisp-Entry "saved-form" method #f 346 18 346 28 ("form" "form->string" "apply" "rest")}
        {Lisp-Entry "print-to" method #f 350 18 350 26 ("form" "print-file-form" "apply" "rest")}
        {Lisp-Entry "set-name" method #f 358 26 358 34 ("set-modified?" "fire-property-change" "name-info" "class-of" "property-field" "property" "fire-presentation-change" "presentation" "fire-name-change" "set-name" "install" "get-action" "owned-form" "component-form" "component-ancestry" "ancestry" "when" "get-client-form" "lambda" "for-each-trait" "old-presentation" "get-name" "old-name" "find-form" "form" "let" "get-presentation-property" "designer-error" "neq?" "and" "get-trait" "Branch" "is?" "if" "effective-cpn" "reference" "or" "effective" "find-owner" "owner" "target-branch" "branch" "let*" "undoable?" "undoable?:" "design-events?" "design-events?:" "trait" "trait:" "name" "component")}
        {Lisp-Entry "set-property" method #f 387 26 387 38 ("set-modified?" "get-property" "fire-property-change" "fire-presentation-change" "presentation" "write-property" "get-presentation-property" "old-presentation" "presentation-property?" "fire-presentation?" "has-property?" "read-property" "old-value" "find-next-branch" "next-restore" "next-form" "restore?" "restore?:" "find-form" "restore" "receive" "designer-error" "neq?" "get-creator-branch" "creator-branch" "when" "assert" "class-of" "property-field" "reference" "follow-component" "component" "let*" "get-trait" "get-client-form" "follow-form" "form" "and" "Path" "path?" "Branch" "is?" "not" "or" "installed?" "set-property" "eq?" "if" "target-branch" "branch" "let" "undoable?" "undoable?:" "design-events?" "design-events?:" "trait" "trait:" "value" "property" "component/path")}
        {Lisp-Entry "remove-property" method #f 429 26 429 41 ("set-modified?" "remove-property" "set-property" "fire-property-change" "write-property" "begin" "get-property" "value" "let" "has-property?" "when" "find-next-branch" "next-restore" "next-form" "restore?" "restore?:" "find-form" "restore" "form" "receive" "assert" "class-of" "property-field" "reference" "follow-component" "if" "component" "Path" "path?" "Branch" "is?" "not" "or" "installed?" "target-branch" "branch" "let*" "undoable?" "undoable?:" "design-events?" "design-events?:" "trait" "trait:" "default-value" "property" "component/path")}
        {Lisp-Entry "add-child" method #f 453 26 453 35 ("set-modified?" "fire-child-add" "add-import" "for-each" "or" "symbol" "imports-locator" "new-locator" "set-locator" "get-locator" "old-locator" "not-null?" "listify" "map" "imports" "set-property" "value" "property" "lambda" "for-each-property" "add-to-index" "reference" "set-creator" "set-name" "self" "remember-creation" "when" "add-form" "set-form" "class-of" "category-name" "else" "get-name" "cond" "model" "model:" "instantiate" "if" "action" "action:" "get-context" "context" "context:" "textual?" "textual?:" "Form" "new" "child-form" "File" "get-origin" "is?" "and" "child-is-form?" "get-form" "child-origin-form" "let*" "restore?" "restore?:" "find-form" "restore" "receive" "set-parent" "get-parent" "eq?" "unless" "target-branch" "branch" "form" "get-data" "data" "let" "descendant?" "descendant?:" "design-events?" "design-events?:" "import" "import:" "tag-reference" "tag-reference:" "properties" "properties:" "name" "name:" "trait" "trait:" "parent" "child")}
        {Lisp-Entry "remove-child" method #f 500 26 500 38 ("set-modified?" "fire-child-remove" "close" "get-client-form" "get-trait" "for-each-trait" "get-component" "remove" "get-action" "lambda" "find-by" "remove-form" "get-restore-form" "restore-form" "Branch" "is?" "remove-child" "find-child" "child-form" "owned-form" "component-ancestry" "parent-ancestry" "when" "purge-references" "define" "form" "find-form" "parent-form" "get-parent" "parent" "get-name" "name" "let*" "get-presentation-property" "neq?" "and" "find-owner" "owner" "or" "effective" "designer-error" "reference" "eq?" "if" "target-branch" "branch" "let" "design-events?" "design-events?:" "trait" "trait:" "child")}
        {Lisp-Entry "remove-children" method #f 540 18 540 33 ("get-children" "remove-child" "child" "lambda" "for-each" "design-events?" "design-events?:" "trait" "trait:" "parent")}
        {Lisp-Entry "move-component" method #f 546 18 546 32 ("list" "move-components" "trait" "trait:" "destination" "component")}
        {Lisp-Entry "move-components" method #f 550 26 550 41 ("set-modified?" "component-form" "set-parent" "component" "lambda" "for-each" "destination-form" "let" "form" "get-creator" "get-form" "eq?" "assert" "trait" "trait:" "destination" "components")}
        {Lisp-Entry "can-move-component?" method #f 562 18 562 37 ("form" "get-creator" "get-form" "eq?" "and" "destination" "component")}
        {Lisp-Entry "transfer-components" method #f 567 26 567 45 ("set-modified?" "descendant?" "descendant?:" "design-events?" "design-events?:" "name-resolution:" "instantiate-parcels" "prog1" "delete-components" "verify-name-conflicts" "name-resolution" "package-components" "parcels" "remove-redundant-descendants" "let*" "trait" "trait:" "destination" "components")}
        {Lisp-Entry "send-before" method #f 576 26 576 37 ("set-modified?" "fire-send-before" "send-child-before" "send-before" "and" "target-form" "child-form" "find-form" "parent-form" "get-parent" "parent" "target-branch" "branch" "let*" "trait" "trait:" "target" "child")}
        {Lisp-Entry "send-to-back" method #f 588 18 588 30 ("get-parent" "first-child" "send-before" "trait" "trait:" "child")}
        {Lisp-Entry "bring-to-front" method #f 592 18 592 32 ("send-before" "trait" "trait:" "child")}
        {Lisp-Entry "purge-trait" method #f 598 26 598 37 ("remove-child" "install-form" "restore?" "restore?:" "restore-form" "form" "receive" "find-form" "parent-form" "get-parent" "parent" "target-branch" "branch" "let*" "design-events?" "design-events?:" "trait" "trait:" "component")}
        {Lisp-Entry "cut-components" method #f 612 26 612 40 ("delete-components" "copy-components" "remove-redundant-descendants" "let" "components")}
        {Lisp-Entry "copy-components" method #f 618 26 618 41 ("jazz-parcels" "format" "format:" "set-clipboard-text" "copy-components-text" "text" "remove-redundant-descendants" "let" "components")}
        {Lisp-Entry "copy-components-text" method #f 624 18 624 38 ("get-output-string" "get-content" "0" "print-form" "form" "get-imports" "get-object-id" "get-process-id" "class-of" "category-name" "parcel" "lambda" "for-each" "format" "package-components" "parcels" "open-output-string" "output" "let" "trait" "trait:" "components")}
        {Lisp-Entry "paste-clipboard" method #f 644 26 644 41 ("paste-parcels" "get-jazz-parcels" "parcels" "let" "design-events?" "design-events?:" "trait" "trait:" "parent")}
        {Lisp-Entry "paste-parcels" method #f 649 26 649 39 ("set-modified?" "descendant?" "descendant?:" "name-resolution:" "instantiate-parcels" "prog1" "verify-name-conflicts" "name-resolution" "determine-paster" "let*" "reporter" "reporter:" "design-events?" "design-events?:" "trait" "trait:" "parent" "parcels")}
        {Lisp-Entry "paste-properties" method #f 656 26 656 42 ("paste-parcel-properties" "get-jazz-parcels" "car" "parcel" "let" "design-events?" "design-events?:" "trait" "trait:" "components")}
        {Lisp-Entry "paste-parcel-properties" method #f 661 18 661 41 ("set-modified?" "get-properties" "instantiate-properties" "form" "component" "lambda" "for-each" "get-content" "forms" "let" "design-events?" "design-events?:" "trait" "trait:" "components" "parcel")}
        {Lisp-Entry "delete-components" method #f 671 26 671 43 ("delete-component" "component" "lambda" "for-each" "remove-redundant-descendants" "let" "design-events?" "design-events?:" "trait" "trait:" "components")}
        {Lisp-Entry "delete-component" method #f 678 26 678 42 ("remove-child" "design-events?" "design-events?:" "trait" "trait:" "component")}
        {Lisp-Entry "remove-redundant-descendants" method #f 684 11 684 39 ("has-parent?" "neq?" "and" "target" "some?" "not" "component" "lambda" "collect-if" "components")}
        {Lisp-Entry "package-components" method #f 701 11 701 29 ("designer-error" "object->serial" "current-process-id" "Component-Parcel" "union" "listify" "car" "not-null?" "and" "package-component" "get-children" "map" "append" "apply" "remove-duplicates" "serialize-runtime-reference" "second" "list" "get-model" "get-reference" "get-context" "context" "let*" "install" "new" "get-action" "memq?" "if" "imports" "form-imports" "reverse" "cons" "set!" "when" "owned-form" "form" "owner" "lambda" "reference" "iterate-branch-spine" "forms" "component-ancestry" "ancestry" "let" "component" "component-forms" "define" "trait" "trait:" "components")}
        {Lisp-Entry "instantiate-parcels" method #f 736 26 736 45 ("step-it" "instantiate-parcel" "prog1" "get-master-name" "user-message" "when" "parcel" "lambda" "map" "reporter" "reporter:" "descendant?" "descendant?:" "design-events?" "design-events?:" "name-resolution" "name-resolution:" "trait" "trait:" "parent" "parcels")}
        {Lisp-Entry "instantiate-parcel" method #f 746 26 746 44 ("cdr" "imports:" "instantiate-form" "component" "set-locator" "f" "imports-locator" "locator" "get-imports" "imports" "delete-components" "list" "name-conflicts" "conflicts" "let" "override" "set-name" "unique-name" "set!" "rename" "case" "when" "test" "test:" "member?" "and" "conflict?" "sort-predicate" "equal" "map" "domain" "brothers" "get-name" "name" "car" "master" "get-content" "forms" "let*" "get-children" "child" "lambda" "for-each" "set-context" "context" "form" "set-context-recursive" "define" "descendant?" "descendant?:" "design-events?" "design-events?:" "name-resolution" "name-resolution:" "trait" "trait:" "parent" "parcel")}
        {Lisp-Entry "instantiate-form" method #f 779 26 779 42 ("get-children" "instantiate-children" "get-properties" "instantiate-properties" "when" "instantiate-component" "component" "let" "imports" "imports:" "descendant?" "design-events?" "trait" "parent" "form" "name-resolution" "name")}
        {Lisp-Entry "instantiate-component" method #f 787 26 787 47 ("designer-error" "else" "equal" "sort-predicate" "get-name" "find-to-modify" "locate" "modify" "instantiate-new-component" "new" "case" "get-action" "action" "let" "imports" "imports:" "descendant?" "design-events?" "trait" "parent" "form" "name-resolution" "name")}
        {Lisp-Entry "instantiate-new-component" method #f 795 26 795 51 ("import" "import:" "descendant?:" "design-events?:" "name:" "trait:" "add-child" "parent:" "instantiate-component" "component" "let" "imports" "imports:" "descendant?" "design-events?" "trait" "parent" "form" "name")}
        {Lisp-Entry "instantiate-properties" method #f 801 26 801 48 ("undoable?" "undoable?:" "design-events?:" "trait:" "set-property" "value" "property" "lambda" "for-each-property" "design-events?" "trait" "properties" "component")}
        {Lisp-Entry "instantiate-children" method #f 807 26 807 46 ("get-name" "instantiate-form" "form" "lambda" "for-each" "design-events?" "trait" "children" "component")}
        {Lisp-Entry "unique-name" method #f 818 29 818 40 ("string->symbol" "symbol?" "if" "unique-separator" "separator" "separator:" "map" "->string" "unique-domain-name" "unique-name" "let" "domain" "name")}
        {Lisp-Entry "unique-separator" method #f 825 29 825 45 ()}
        {Lisp-Entry "name-conflicts" definition #f 834 15 834 29 ("name" "some?" "and" "get-name" "child-name" "child" "lambda" "collect-if" "sort-predicate" "equal" "let" "children" "names")}
        {Lisp-Entry "verify-name-conflicts" method #f 845 18 845 39 ("not-null?" "when" "name-conflicts" "get-children" "map" "names" "throw-cancel" "no" "override" "yes" "case" "question" "type" "type:" "message-box" "code" "text" "let*" "rename" "object->serial" "child" "some?" "current-process-id" "=" "and" "get-master-name" "name" "get-object-id" "component-id" "get-process-id" "process-id" "sort-predicate" "equal" "parcel" "every?" "if" "get-output" "get-name" "->string" ":bulleted" "list" "conflict" "lambda" "for-each" "put" "List-Factory" "new" "fact" "let" "header" "present-conflicts" "conflicts" "children" "confirm-name-resolution" "define" "destination" "parcels")}
        {Lisp-Entry "add-view" method #f 888 26 888 34 ("set-modified?" "set-visible?" "get-height" "2" "get-width" "quotient" "-" "move-figure" "get-size" "size" "let" "set-property" "when" "name:" "add-child" "apply" "others" "visible?" "centered?" "position" "name" "bind-keywords" "rest" "parent" "child")}
        {Lisp-Entry "find-form" method #f 907 19 907 28 ("values" "restore" "get-restore-form" "get-trait" "get-client-form" "trait-form" "component-ancestry" "let*" "add-child" "name:" "get-context" "context" "context:" "modify" "action" "action:" "Form" "new" "equal?" "test" "test:" "subform" "designer-error" "get-name" "name" "get-component" "Restore-Form" "is?" "and" "key" "key:" "find-in" "restore-form" "set!" "memq?" "embed-new-form" "not" "if" "get-form" "cpn-form" "get-children" "children" "let" "cpn" "lambda" "for-each" "ancestry" "form" "embed-form" "define" "error?" "error?:" "restore?" "restore?:" "branch" "component")}
        {Lisp-Entry "target-branch" method #f 946 11 946 24 ("find-trait-branch" "else" "follow-component" "Path" "is?" "reference" "get-active-branch" "eq?" "cond" "trait")}
        {Lisp-Entry "component-ancestry" method #f 952 11 952 29 ("get-parent-component" "identity" "unfold-right" "designer-error" "reference" "eq?" "if" "scan" "lambda" "end?" "let" "component")}
        {Lisp-Entry "find-owner" method #f 965 18 965 28 ("continuation-return" "has-property?" "new" "get-action" "eq?" "not" "or" "and" "owned-form" "when" "form" "owner" "reference" "iterate-branch-spine" "return" "lambda" "continuation-capture" "component-ancestry" "ancestry" "let" "property" "component")}
        {Lisp-Entry "find-next-branch" method #f 980 11 980 27 ("get-restore-form" "continuation-return" "has-property?" "and" "owned-form" "form" "when" "get-client-form" "client-form" "for-each" "return" "lambda" "continuation-capture" "component-ancestry" "ancestry" "reference" "or" "get-branches" "lower" "let" "values" "not" "if" "property" "component" "branch")}
        {Lisp-Entry "owned-form" definition #f 997 15 997 25 ("equal?" "test" "test:" "key" "key:" "find-in" "subform" "get-name" "name" "set!" "memq?" "continuation-return" "not" "if" "get-form" "cpn-form" "get-children" "children" "let" "cpn" "for-each" "return" "lambda" "continuation-capture" "ancestry" "form")}
        {Lisp-Entry "get-name" method #f 1027 18 1027 26 ("follow-form" "get-name" "get-trait" "get-client-form" "if" "form" "target-branch" "branch" "let*" "trait" "trait:" "path")}
        {Lisp-Entry "get-property" method #f 1033 18 1033 30 ("follow-form" "get-property" "get-trait" "get-client-form" "if" "form" "target-branch" "branch" "let*" "trait" "trait:" "property" "path")}
        {Lisp-Entry "edit-form" method #f 1044 18 1044 27 ("find-unit-source" "break-reference" "module" "receive" "else" "edit" "=>" "get-name" "locator->entry" "catalog" "jazz" "jazz.catalog" "module-ref" "Jazz-Text-View" "class" "class:" "edit-document" "file?" "bell" "not" "cond" "form" "get-origin" "origin" "get-application" "appl" "let")}
        {Lisp-Entry "safe-set-property" method #f 1062 18 1062 35 ("set-property" "apply" "lambda" "with-safe-design" "rest")}
        {Lisp-Entry "fire-name-change" definition #f 1073 15 1073 31 ("get-designers" "process-name-change" "designer" "lambda" "for-each" "undoable?" "old-name" "name" "component")}
        {Lisp-Entry "fire-presentation-change" definition #f 1079 15 1079 39 ("get-designers" "process-presentation-change" "designer" "lambda" "for-each" "undoable?" "old-presentation" "presentation" "component")}
        {Lisp-Entry "fire-property-change" definition #f 1085 15 1085 35 ("get-designers" "process-property-change" "designer" "lambda" "for-each" "undoable?" "value" "property" "component" "branch")}
        {Lisp-Entry "fire-child-add" definition #f 1091 15 1091 29 ("get-designers" "process-child-add" "designer" "lambda" "for-each" "descendant?" "parent" "child")}
        {Lisp-Entry "fire-child-remove" definition #f 1097 15 1097 32 ("get-designers" "process-child-remove" "designer" "lambda" "for-each" "parent" "child")}
        {Lisp-Entry "fire-send-before" definition #f 1103 15 1103 31 ("get-designers" "process-send-before" "designer" "lambda" "for-each" "target" "parent" "child")}
        {Lisp-Entry "add-designer-listener" method #f 1114 18 1114 39 ("add-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "remove-designer-listener" method #f 1118 18 1118 42 ("remove-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "process-name-change" method #f 1122 11 1122 30 ("invoke" "listener" "lambda" "for-each" "undoable?:" "old-name:" "name:" "component:" "self" ":name-change" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "undoable?" "old-name" "name" "component")}
        {Lisp-Entry "process-presentation-change" method #f 1130 11 1130 38 ("invoke" "listener" "lambda" "for-each" "undoable?:" "old-presentation:" "presentation:" "component:" "self" ":presentation-change" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "undoable?" "old-presentation" "presentation" "component")}
        {Lisp-Entry "process-property-change" method #f 1138 11 1138 34 ("invoke" "listener" "lambda" "for-each" "undoable?:" "value:" "property:" "component:" "branch:" "self" ":property-change" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "undoable?" "value" "property" "component" "branch")}
        {Lisp-Entry "process-child-add" method #f 1146 11 1146 28 ("invoke" "listener" "lambda" "for-each" "descendant?:" "parent:" "child:" "self" ":child-add" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "descendant?" "parent" "child")}
        {Lisp-Entry "process-child-remove" method #f 1154 11 1154 31 ("invoke" "listener" "lambda" "for-each" "parent:" "child:" "self" ":child-remove" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "parent" "child")}
        {Lisp-Entry "process-send-before" method #f 1162 11 1162 30 ("invoke" "listener" "lambda" "for-each" "target:" "parent:" "child:" "self" ":send-before" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "target" "parent" "child")}
        {Lisp-Entry "process-refresh" method #f 1170 18 1170 33 ("invoke" "listener" "lambda" "for-each" "what:" "component:" "self" ":refresh" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "what" "component")}
        {Lisp-Entry "process-user-event" method #f 1178 18 1178 36 ("self" "invoke" "listener" "lambda" "for-each" "listeners" "not-null?" "when" "event")}}}})
"Designer-Error"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "designer" "Designer-Error.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.designer.Designer-Error" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Designer-Error" class #f 40 7 40 21 ("Error")}}})
"Designer-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "event" "Designer-Event.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.event.Designer-Event" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Designer-Event" class #f 43 7 43 21 ("Event")}}})
"Designer-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "manager" "Designer-Manager.jazz"} 1296738014 jazz
    {Lisp-Entry "jazz.designer.manager.Designer-Manager" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Designer-Manager" class #f 49 7 49 23 ("explicit" "initialize" "View")
        {Lisp-Entry "client" property #f 52 12 52 18 ()}
        {Lisp-Entry "flow-layout" slot #f 55 8 55 19 ()}
        {Lisp-Entry "form" anonymous #f 58 3 58 7 ("on-edit-form" "edit-form" "Push-Tool" "on-toggle-try-out" "try-out" "on-toggle-content" "content" "on-toggle-frames" "frames" "Toggle-Tool" "rect" "mode-rect" "0" "2" "Separator" "select" "mode" "mode:" "on-mode" ":form" "Event-Handler" "action-handler" "action-handler:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "selected?" "selected?:" ":images" "portfolio" "portfolio:" "Image-Resource" "resource" "resource:" "22" "Dimension" "size" "size:" "mode-select" "name" "name:" "Radio-Tool" "Medium" "Color" "background" "background:" "install")}
        {Lisp-Entry "external-name" method #f 74 25 74 38 ("designer-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 83 25 83 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 87 25 87 35 ()}
        {Lisp-Entry "client-activate" method #f 91 20 91 35 ("set-client" "Component-Editor" "is?" "and" "client" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method #f 97 20 97 37 ("set-client")}
        {Lisp-Entry "finish" method #f 106 20 106 26 ("layout-view" "0" "5" "4" "Rect" "insets" "insets:" "Flow-Layout" "new" "flow-layout" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "layout" method #f 112 20 112 26 ("get-height" "get-width" "children" "flow-layout" "layout")}
        {Lisp-Entry "on-editor" method #f 116 11 116 20 ("designer" "designer:" "get-property" "set-designer" ":designer-change" "get-kind" "case" "evt")}
        {Lisp-Entry "on-new" method #f 121 11 121 17 ("evt")}
        {Lisp-Entry "on-open" method #f 125 11 125 18 ("open-form" "instantiate" "client" "set-client" "evt")}
        {Lisp-Entry "on-toggle-frames" method #f 129 11 129 27 ("client" "toggle-frames" "evt")}
        {Lisp-Entry "on-toggle-content" method #f 133 11 133 28 ("client" "toggle-content" "evt")}
        {Lisp-Entry "on-toggle-try-out" method #f 137 11 137 28 ("toggle-try-out" "get-surrogate" "try-out" "not" "View" "is-not?" "or" "when" "client" "get-client" "component" "let" "evt")}
        {Lisp-Entry "on-edit-form" method #f 144 11 144 23 ("client" "view-component" "evt")}
        {Lisp-Entry "on-mode" method #f 153 11 153 18 ("invalidate-selection" "set-mode" "current-document" "editor" "mode:" "get-property" "mode" "let" "evt")}
        {Lisp-Entry "get-client" method #f 165 18 165 28 ("client")}
        {Lisp-Entry "set-client" method #f 169 18 169 28 ("client-update" "client" "set!" "clt")}
        {Lisp-Entry "client-update" method #f 174 11 174 24 ("edit-form" "trying-out?" "get-show-content?" "get-show-frames?" "set-selected?" "try-out" "try-out-button" "content" "content-button" "frames" "frames-button" "mode-rect" "mode-select" "locate" "set-enabled?" "View-Editor" "is?" "client" "and" "view-editor?" "let")}
        {Lisp-Entry "set-designer" method #f 196 11 196 23 ("class-of" "category-identifier" "format" "get-reference" "reference" "let" "set-title" "not" "if" "designer")}}}})
"Designer-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "preference" "Designer-Preferences.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.preference.Designer-Preferences" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Designer-Preferences" class #f 46 20 46 40 ("initialize" "Preferences")
        {Lisp-Entry "aligned-properties" property #f 49 12 49 30 ()}
        {Lisp-Entry "get-aligned-properties" accessor #f 49 56 49 64 ()}
        {Lisp-Entry "set-aligned-properties" accessor #f 49 56 49 64 ()}
        {Lisp-Entry "new-requests-name?" property #f 50 12 50 30 ()}
        {Lisp-Entry "get-new-requests-name?" accessor #f 50 56 50 64 ()}
        {Lisp-Entry "set-new-requests-name?" accessor #f 50 56 50 64 ()}
        {Lisp-Entry "form" anonymous #f 53 3 53 7 ("Image-Resource" "icon" "icon:" "title" "title:" "install")}
        {Lisp-Entry "get-class-descriptor" method #f 62 25 62 45 ("Designer-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 71 11 71 17 ()
        {Lisp-Entry "import" anonymous #f 74 1 74 7 ("jazz.designer")}
        {Lisp-Entry "Designer-Preferences-Descriptor" class #f 77 7 77 38 ("Preferences-Descriptor")
          {Lisp-Entry "form" anonymous #f 80 3 80 7 ("Boolean-Domain" "domain" "List-Domain" "title" "title:" "aligned-properties" "name" "name:" "Property-Descriptor" "new-requests-name?" "categorized" "categorized:" ">" "<properties" "<properties~>" "can-copy?" "can-copy?:" "can-move?" "can-move?:" "can-delete?" "can-delete?:" "can-rename?" "can-rename?:" "install")}
          {Lisp-Entry "component-get-categorized-addable-classes" method #f 90 20 90 61 ("Indented-Column-Preferences" "Aligned-Column-Preferences" "reference" "list" "component")}}}}})
"Details-Card"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "details" "Details-Card.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.details.Details-Card" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Details-Card" class #f 45 20 45 32 ("Layout-View")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("toplevel-controls?" "toplevel-controls?:" "title" "title:" "element" "Tree-Node-Column" "details" "Details-Tree" "Tree-Header" "content" "name" "name:" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "document" "style" "style:" "Scroller-View" "fill" "layout-type" "layout-type:" "install")}}}})
"Details-Chooser"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "choosers" "Details-Chooser.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.choosers.Details-Chooser" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Details-Chooser" class #f 48 20 48 35 ("explicit" "initialize" "View")
        {Lisp-Entry "reference" property #f 51 12 51 21 ()}
        {Lisp-Entry "get-reference" accessor #f 51 47 51 55 ()}
        {Lisp-Entry "set-reference" accessor #f 51 47 51 55 ()}
        {Lisp-Entry "details" property #f 52 12 52 19 ()}
        {Lisp-Entry "get-details" accessor #f 52 47 52 55 ()}
        {Lisp-Entry "set-details" accessor #f 52 47 52 55 ()}
        {Lisp-Entry "defaults" property #f 54 12 54 20 ()}
        {Lisp-Entry "form" anonymous #f 57 3 57 7 ("on-cancel" "193" "cancel" "default?" "default?:" "on-ok" ":host" "363" "109" "ok" "270" "348" "6" "Horizontal-Line" "show-unfocused-selection?" "show-unfocused-selection?:" "focus-selects-all?" "focus-selects-all?:" "text" "scroller" "21" "40" "318" "155" "column-size" "Entry-Widget" "on-width" "90" "on-filled" "47" "321" "filled" "Radio-Button" "110" "300" "8" "size-label" "on-hide" "123" "hide" "on-show" "95" "show" "on-move-down" "61" "move-down" "on-move-up" "24" "80" "move-up" "Push-Button" "200" "width" "width:" "display-images?" "display-images?:" "toplevel-controls?" "toplevel-controls?:" "Tree-Node-Column" "on-escape-press" "escape-press-handler" "escape-press-handler:" "on-return-press" "return-press-handler" "return-press-handler:" "on-selection-change" "selection-handler" "selection-handler:" "on-action" ":form" "Event-Handler" "action-handler" "action-handler:" ":images" "portfolio" "portfolio:" "2" "top-padding" "top-padding:" "detail" "filled-column" "filled-column:" "details-tree" "Tree-View" "fill" "layout-type" "layout-type:" "content" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "Scroller-View" "edge" "border-type" "border-type:" "254" "171" "33" "details-border" "name" "name:" "Border-View" "Label" "Font" "font" "font:" "16" "191" "9" "10" "Point" "position" "position:" "title" "title:" "Label-View" "400" "282" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "finish" method #f 81 20 81 26 ("acquire-focus" "update-buttons" "setup-selection" "setup-details" "get-tree" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-defaults" method #f 96 18 96 30 ("defaults")}
        {Lisp-Entry "set-defaults" method #f 101 18 101 30 ("defaults" "set!" "value")}
        {Lisp-Entry "get-tree" method #f 105 11 105 19 ("details-tree" "locate")}
        {Lisp-Entry "get-text" method #f 109 11 109 19 ("text" "column-size" "locate")}
        {Lisp-Entry "host-title" method #f 118 25 118 35 ()}
        {Lisp-Entry "host-position" method #f 122 25 122 38 ("300" "450" "Point")}
        {Lisp-Entry "host-size" method #f 126 25 126 34 ("120" "302" "Dimension")}
        {Lisp-Entry "on-action" method #f 135 11 135 20 ("update-buttons" "toggle-displayed?" "Check-Box" "is?" "when" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-selection-change" method #f 142 11 142 30 ("update-details" "enter-width" "update-buttons" "first" "details" "element" "and" "old-detail" "get-old" "old" "let*" "evt")}
        {Lisp-Entry "on-move-up" method #f 150 11 150 21 ("set-single-selection" "acquire-focus" "setup-details" "1" "-" "insert!" "remove!" "set!" "details" "element" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-move-down" method #f 161 11 161 23 ("set-single-selection" "acquire-focus" "setup-details" "1" "+" "insert!" "remove!" "set!" "details" "element" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-show" method #f 172 11 172 18 ("update-buttons" "toggle-displayed?" "set-checked?" "acquire-focus" "get-row" "get-user-data" "checkbox" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-hide" method #f 182 11 182 18 ("update-buttons" "toggle-displayed?" "set-checked?" "acquire-focus" "get-row" "get-user-data" "checkbox" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-filled" method #f 192 11 192 20 ("change-filled" "evt")}
        {Lisp-Entry "on-width" method #f 196 11 196 19 ("Label" "Font" "set-detail-font" "set-filled?" "enter-width" "details" "element" "and" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-reset" method #f 206 11 206 19 ("on-reset" "unimplemented" "evt")}
        {Lisp-Entry "on-return-press" method #f 211 20 211 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" method #f 217 20 217 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "setup-details" method #f 227 11 227 24 ("details" "list" "children" "children:" "add-row" "user-data" "user-data:" "color:" "get-displayed?" "checked?" "checked?:" ":enabled?" "title:" ":outline" "parent" "parent:" "font:" "Check-Box" "checkbox" "Label" "Label-Bold" "Font" "get-filled?" "if" "font" "neq?" "enabled?" "Black" "Color" "color" "4" "Rect" "layout-insets" "layout-insets:" "fill" "layout-type" "layout-type:" "Layout-View" "new" "layout" "0" "border" "let*" "reference" "get-name" "assoc" "mandatory" "width" "title" "name" "bind" "detail" "for-each" "lambda" "with-update-locked" "remove-every-row" "tree")}
        {Lisp-Entry "setup-selection" method #f 244 11 244 26 ("0" "list" "set-selection" "details" "when" "tree")}
        {Lisp-Entry "update-buttons" method #f 254 11 254 25 ("defaults" "reset" "neq?" "and" "get-displayed?" "not" "1" "-" "<" "0" ">" "reference" "get-name" "assoc" "mandatory" "width" "title" "name" "bind" "details" "element" "detail" "let" "hide" "show" "move-down" "move-up" "locate" "set-enabled?" "begin" "null?" "if" "get-visible-count" "count" "get-single-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "update-details" method #f 274 11 274 25 ("get-filled?" "set-selected?" "get-width" "->string" "details" "element" "detail" "set-string-content" "set-enabled?" "begin" "null?" "if" "get-text" "text" "width" "filled" "size-label" "locate" "label" "get-tree" "get-single-selection" "selection" "let")}
        {Lisp-Entry "toggle-displayed?" definition #f 301 15 301 32 ("not" "set-displayed?" "get-displayed?" "visible?" "get-user-data" "detail" "let*" "checkbox")}
        {Lisp-Entry "enter-width" method #f 312 11 312 22 ("parse-integer" "set-width" "throw-cancel" "select-all" "acquire-focus" "exception-reason" "message-box" "err" "Parse-Error" "catch" "get-string-content" "content" "get-text" "text" "get-tree" "tree" "let*" "when" "edited-detail")}
        {Lisp-Entry "set-detail-font" method #f 325 11 325 26 ("set-font" "get-user-data" "checkbox" "details" "find" "get-row" "row" "let*" "font" "detail" "tree")}
        {Lisp-Entry "change-filled" method #f 336 11 336 24 ("Label-Bold" "Label" "Font" "set-detail-font" "set-filled?" "neq?" "when" "filled" "element" "and" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*" "details" "get-filled?" "find-if" "find-filled" "define")}
        {Lisp-Entry "get-modal-result" method #f 358 20 358 36 ("get-output" "put" "Check-Box" "is?" "when" "get-user-data" "checkbox" "let" "rank" "row" "lambda" "for-each-row" "enter-width" "List-Factory" "new" "details" "element" "and" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*")}}}})
"Details-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Details-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Details-Row" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.designer")}
      {Lisp-Entry "Details-Row" class #f 44 20 44 31 ("initialize" "Combo-Row")
        {Lisp-Entry "all" property #f 47 12 47 15 ()}
        {Lisp-Entry "get-all" accessor #f 47 41 47 49 ()}
        {Lisp-Entry "set-all" accessor #f 47 41 47 49 ()}
        {Lisp-Entry "initialize" method #f 55 20 55 30 ("choose" "set-kind" "nextmethod" "apply" "rest")}
        {Lisp-Entry "present" method #f 65 20 65 27 ("format" "not" "if" "value")}
        {Lisp-Entry "combo-choose" method #f 76 20 76 32 ("focus-editor" "enter-edited-value" "set-edited-value" "get-edited-value" "details:" "all" "all:" "Details-Chooser" "get-modal" "details" "let")}
        {Lisp-Entry "get-edited-value" method #f 89 20 89 36 ("=" "empty-string?" "or" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" method #f 96 20 96 36 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Details-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Details-Tree.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.Details-Tree" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Details-Tree" class #f 47 20 47 32 ("initialize" "Components-Tree")
        {Lisp-Entry "base" property #f 50 12 50 16 ()}
        {Lisp-Entry "get-base" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "set-base" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "details" property #f 51 12 51 19 ()}
        {Lisp-Entry "get-details" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "set-details" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "form" anonymous #f 54 3 54 7 ("on-selection-change" ":self" "Event-Handler" "selection-handler" "selection-handler:" "row" "selection-mode" "selection-mode:" "multiple-selection?" "multiple-selection?:" ":images" "portfolio" "portfolio:" "reorderable?" "reorderable?:" "draggable?" "draggable?:" "install")}
        {Lisp-Entry "branch-changed" method #f 63 20 63 34 ("update")}
        {Lisp-Entry "selection-changed" method #f 67 20 67 37 ("row->line" "list" "when" "component-row" "row" "generate-event?" "generate-event?:" "set-selection" "parent?" "client" "receive" "car" "set-client" "self" "eq?" "not" "unless" "values" "null?" "or" "get-addable-classes" "not-null?" "and" "if" "get-parent" "parent" "let" "component" "determine-client" "define" "focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "selection-changed" method #f 88 11 88 28 ("set-client" "generate-event?" "generate-event?:" "set-selection" "Group" "is?" "not" "or" "when" "car" "component" "let" "focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "update" method #f 100 20 100 26 ("insert-rows" "setup-columns" "lambda" "with-update-locked" "selected-components" "selected-components:" "get-expand-state" "expand-state" "expand-state:")}
        {Lisp-Entry "setup-columns" method #f 107 11 107 24 ("width:" "title:" "name:" "Tree-Label-Column" "class" "class:" "add-column" "set-width" "set-title" "set-name" "get-node-column" "column" "begin" "when" "detail-presentation" "error" "category-field" "property" "split-detail-path" "title" "name" "ignore" "receive" "filled?" "width" "path" "bind" "detail" "lambda" "for-each" "first?" "node-column" "get-name" "null?" "not" "or" "if" "preserve-node-column?" "preserve-node-column?:" "remove-columns" "set-filled-column" "get-addable-details" "details" "get-addable-base" "client" "and" "base" "set!" "get-header" "header" "let")}
        {Lisp-Entry "insert-rows" method #f 136 11 136 22 ("update-selection" "insert-components" "get-recursive-details?" "recursive?" "let" "client" "when" "remove-every-row" "selected-components" "expand-state")}
        {Lisp-Entry "insert-components" method #f 144 11 144 28 ("get-presentation-property" "key" "key:" "<" "sort" "sort-components?" "if" "insert-component" "Group" "is?" "unless" "child" "lambda" "for-each" "get-components" "components" "let" "recursive?" "father" "component")}
        {Lisp-Entry "insert-component" method #f 154 29 154 45 ("insert-components" "user-data" "user-data:" "children:" "expanded" "state" "state:" "father:" "add-row" "cons" "children" "value" "property" "split-detail-path" "ignore" "name" "receive" "filled?" "width" "path" "Tree-Label" "if" "detail" "lambda" "map" "labels" "image" "image:" "title" "title:" "Tree-Node" "new" "node" "get-component-image" "ni" "present-property" "nt" "read-property" "nv" "category-field" "np" "car" "nn" "let*" "filled" "name-info" "set!" "not" "is?" "based?" "rest" "first" "bind" "details" "base" "and" "when" "row" "let" "recursive?" "father" "component")}
        {Lisp-Entry "split-detail-path" method #f 183 11 183 28 ("child" "and" "follow-submodels" "reverse!" "cons" "car" "string?" "subpath" "name" "title" "bind" "reverse" "reversed" "let" "values" "symbol?" "if" "path" "component" "base")}
        {Lisp-Entry "follow-submodels" method #f 192 11 192 27 ("cdr" "car" "follow-submodels" "else" "get-class-form" "child" "get-model" "symbol?" "null?" "cond" "path" "model")}
        {Lisp-Entry "present-location" method #f 201 11 201 27 ("get-presentation-property" "localize" "ascendant" "lambda" "map" "join" "null?" "if" "collect-ascendants" "cdr" "ascendants" "let" "component")}
        {Lisp-Entry "on-designer" method #f 213 20 213 31 ("value" "value:" "property" "property:" "component" "component:" "property-change" ":property-change" "child-remove" ":child-remove" "parent" "parent:" "child" "child:" "get-property" "child-add" ":child-add" "get-kind" "case" "evt")}
        {Lisp-Entry "child-add" method #f 220 11 220 20 ("insert-component" "lambda" "with-update-locked" "client" "neq?" "Group" "is?" "or" "unless" "parent" "child")}
        {Lisp-Entry "child-remove" method #f 227 11 227 23 ("remove-row" "lambda" "with-update-locked" "when" "component-row" "row" "let" "client" "get-parent" "neq?" "Group" "is?" "or" "unless" "child")}
        {Lisp-Entry "property-change" method #f 236 11 236 26 ("invalidate-cell" "set-title" "present-property" "title" "get-cell-data" "data" "Cell" "new" "cell" "let*" "get-user-data" "eq?" "rank" "row" "lambda" "for-each-visible-row" "when" "car" "key" "key:" "field-name" "details" "find" "col" "let" "client" "get-parent" "neq?" "Group" "is?" "or" "unless" "value" "property" "component")}}}})
"Dimension-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Dimension-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Dimension-Domain" module #f 37 8 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Dimension-Domain" class #f 44 7 44 23 ("Text-Domain")
        {Lisp-Entry "present" method #f 52 20 52 27 ("get-height" "get-width" "format" "not" "if" "size")}
        {Lisp-Entry "parse" method #f 65 20 65 25 ("Dimension" "new" "height" "width" "bind" "read-delimited-string" "lst" "let" "text")}}}})
"Directory-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Directory-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Directory-Domain" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Directory-Domain" class #f 44 7 44 23 ("Domain")
        {Lisp-Entry "present" method #f 52 20 52 27 ("present" "value")}
        {Lisp-Entry "setup-entry" method #f 61 20 61 31 ("dir" "moniker" "locate" "set-protocol" "self" "domain" "domain:" "get-size" "size" "size:" "parent" "parent:" "Pathname-Entry" "new" "entry" "let" "client" "view")}}}})
"Directory-Group-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Directory-Group-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Directory-Group-Domain" module #f 37 8 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Directory-Group-Domain" class #f 44 7 44 29 ("Domain")
        {Lisp-Entry "present" method #f 52 20 52 27 ("->string" "value")}
        {Lisp-Entry "setup-entry" method #f 61 20 61 31 ("dir" "moniker" "locate" "set-protocol" "self" "domain" "domain:" "get-size" "size" "size:" "parent" "parent:" "Pathname-Entry" "new" "entry" "let" "client" "view")}}}})
"Directory-Group-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Directory-Group-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Directory-Group-Row" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.dialog" "jazz.library" "jazz.io" "jazz.designer")}
      {Lisp-Entry "Directory-Group-Row" class #f 46 20 46 39 ("Pathname-Row")
        {Lisp-Entry "initialize" method #f 54 20 54 30 ("group" "editor" "set-protocol" "nextmethod" "apply" "others" "parameters" "bind-keywords" "rest")}
        {Lisp-Entry "combo-choose" method #f 65 11 65 23 ("focus-editor" "enter-edited-value" "Directory-Group" "new" "set-edited-value" "get-list" "and" "directories:" "choose-directory" "directories" "get-edited-value" "actual" "let*")}}}})
"Directory-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Directory-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Directory-Row" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.dialog" "jazz.designer")}
      {Lisp-Entry "Directory-Row" class #f 44 20 44 33 ("Pathname-Row")
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("dir" "editor" "set-protocol" "nextmethod" "apply" "others" "parameters" "bind-keywords" "rest")}
        {Lisp-Entry "combo-choose" method #f 63 11 63 23 ("focus-editor" "enter-edited-value" "set-edited-value" "choose-directory" "dir" "let")}}}})
"Dispatch-Designer"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "designer" "Dispatch-Designer.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.designer.Dispatch-Designer" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Dispatch-Designer" class #f 43 20 43 37 ("Designer")}
      {Lisp-Entry "Dispatch-Designer" class #f 49 20 49 37 ("initialize" "Designer")
        {Lisp-Entry "designers" slot #f 52 8 52 17 ()}
        {Lisp-Entry "initialize" method #f 60 11 60 21 ("install-designers" "nextmethod" "apply" "rest")}
        {Lisp-Entry "install-designers" method #f 70 11 70 28 ("install-designer" "install-designer?" "when" "level" "descendant" "lambda" "reference" "for-each-descendant")}
        {Lisp-Entry "install-designer?" method #f 77 26 77 43 ("component")}
        {Lisp-Entry "get-designer-class" method #f 81 26 81 44 ("Designer")}
        {Lisp-Entry "install-designer" method #f 85 11 85 27 ("add-project-designer" "reference" "reference:" "form:" "get-designer-class" "new" "designer" "get-class-form" "form" "project" "class-of" "class" "let*" "component")}
        {Lisp-Entry "add-designer" method #f 92 11 92 23 ("cons" "designers" "set!" "designer" "component")}
        {Lisp-Entry "remove-designer" method #f 96 11 96 26 ("assq" "remove!" "designers" "set!" "component")}
        {Lisp-Entry "get-designer" method #f 100 21 100 33 ("designers" "assq-value" "component")}
        {Lisp-Entry "for-each-designer" method #f 104 11 104 28 ("designers" "designer" "component" "bind" "pair" "lambda" "for-each" "proc")}
        {Lisp-Entry "project-add" method #f 111 21 111 32 ("add-designer" "Project" "is?" "when" "level" "descendant" "lambda" "for-each-descendant" "project")}
        {Lisp-Entry "project-remove" method #f 118 21 118 35 ("cleanup-project-designers" "project")}
        {Lisp-Entry "set-name" method #f 130 11 130 19 ("set-name" "apply" "find-modification-designer" "designer" "let" "others" "use-owner?" "bind-keywords" "rest" "name" "component")}
        {Lisp-Entry "set-property" method #f 136 11 136 23 ("set-property" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "value" "property" "component")}
        {Lisp-Entry "add-child" method #f 145 11 145 20 ("add-child" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "parent" "child")}
        {Lisp-Entry "remove-child" method #f 154 11 154 23 ("remove-child" "get-project-designer" "designer" "let" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parent" "parent" "let*" "rest" "child")}
        {Lisp-Entry "instantiate-parcels" method #f 164 11 164 30 ("instantiate-parcels" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "let" "rest" "parent" "parcels")}
        {Lisp-Entry "transfer-components" method #f 173 11 173 30 ("transfer-components" "get-project-designer" "designer" "rest" "nextmethod" "apply" "reference" "eq?" "if" "verify-name-conflicts" "package-components" "let*" "set-modified?" "descendant?" "descendant?:" "design-events?" "design-events?:" "name-resolution" "name-resolution:" "parcels" "instantiate-parcels" "prog1" "delete-components" "destination-owner" "get-parent" "find-modification-owner" "component" "lambda" "key" "key:" "uniform" "owner" "let" "trait" "trait:" "destination" "components")}
        {Lisp-Entry "transfer-components" method #f 189 11 189 30 ("set-modified?" "descendant?" "descendant?:" "design-events?" "design-events?:" "name-resolution:" "instantiate-parcels" "prog1" "delete-components" "verify-name-conflicts" "name-resolution" "package-components" "parcels" "let*" "trait" "trait:" "destination" "components")}
        {Lisp-Entry "cut-components" method #f 202 11 202 25 ("cut-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "copy-components" method #f 211 11 211 26 ("copy-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "paste-clipboard" method #f 220 11 220 26 ("paste-clipboard" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "let" "rest" "parent")}
        {Lisp-Entry "get-parents" method #f 228 11 228 22 ("get-parent" "map" "components")}
        {Lisp-Entry "find-modification-designer" method #f 237 11 237 37 ("get-designer" "my-designer??" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "use-owner?" "components")}
        {Lisp-Entry "find-modification-owner" method #f 244 11 244 34 ("car" "error" "1" "length" ">" "map" "remove-duplicates" "owners" "let" "pair?" "get-parent" "install-designer?" "reference" "eq?" "or" "if" "component" "find-owner-project" "define" "components")}
        {Lisp-Entry "save-designer" method #f 263 21 263 34 ("designer" "project" "lambda" "for-each-designer" "save" "set!" "get-modified?" "when" "some-modified?" "let")}}}})
"Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Domain.jazz"} 1299104515 jazz
    {Lisp-Entry "jazz.designer.domain.Domain" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.locale" "jazz.library")}
      {Lisp-Entry "Domain" class #f 44 7 44 13 ("initialize" "Component")
        {Lisp-Entry "nullable?" property #f 47 12 47 21 ()}
        {Lisp-Entry "get-nullable?" accessor #f 47 46 47 54 ()}
        {Lisp-Entry "set-nullable?" accessor #f 47 46 47 54 ()}
        {Lisp-Entry "validate" method #f 55 26 55 34 ("validate-value" "field-name" "property:" "class-of" "property-presentation" "localize" "format" "message" "message:" "Integrity-Violation" "new" "add-violation" "nullable?" "when" "not" "if" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "validate-value" method #f 62 26 62 40 ("manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "validate-text" method #f 66 26 66 39 ("text")}
        {Lisp-Entry "present" method #f 75 26 75 33 ("self" "class-of" "category-name" "error" "value")}
        {Lisp-Entry "parse" method #f 84 26 84 31 ("self" "class-of" "category-name" "error" "text")}
        {Lisp-Entry "draw-data" method #f 93 26 93 35 ("0" "draw-at" "height" "width" "data" "row" "column" "value" "context" "surface")}
        {Lisp-Entry "setup-entry" method #f 102 26 102 37 ("error" "client" "view")}
        {Lisp-Entry "setup-list-entry" method #f 106 26 106 42 ("error" "client" "view")}
        {Lisp-Entry "get-property-presentation" method #f 115 26 115 51 ("get-entry" "get-presentation" "view")}
        {Lisp-Entry "set-property-presentation" method #f 119 26 119 51 ("get-entry" "set-presentation" "presentation" "view")}
        {Lisp-Entry "get-property-value" method #f 123 26 123 44 ("get-entry" "get-value" "view")}
        {Lisp-Entry "set-property-value" method #f 127 26 127 44 ("get-entry" "set-value" "value" "view")}
        {Lisp-Entry "get-property-modified?" method #f 131 26 131 48 ("get-entry" "get-modified?" "view")}
        {Lisp-Entry "set-property-modified?" method #f 135 26 135 48 ("get-entry" "set-modified?" "value" "view")}}}})
"Domain-Category"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Domain-Category.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Domain-Category" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.locale" "jazz.library")}
      {Lisp-Entry "Domain-Category" class #f 44 7 44 22 ("Object")
        {Lisp-Entry "name" slot #f 47 8 47 12 ()}
        {Lisp-Entry "get-name" accessor #f 47 21 47 29 ()}
        {Lisp-Entry "rank" slot #f 48 8 48 12 ()}
        {Lisp-Entry "get-rank" accessor #f 48 21 48 29 ()}
        {Lisp-Entry "image" slot #f 49 8 49 13 ()}
        {Lisp-Entry "get-image" accessor #f 49 21 49 29 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("image~self" "rank~self" "self" "name~self" "set!" "nextmethod" "image" "rank" "name")}
        {Lisp-Entry "print" method #f 59 20 59 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "output")}}}})
"Domain-Chooser"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "choosers" "Domain-Chooser.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.choosers.Domain-Chooser" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Domain-Chooser" class #f 48 20 48 34 ("initialize" "View")
        {Lisp-Entry "names" property #f 51 12 51 17 ()}
        {Lisp-Entry "get-names" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "set-names" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "selected" property #f 52 12 52 20 ()}
        {Lisp-Entry "get-selected" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "set-selected" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "form" anonymous #f 55 3 55 7 ("on-cancel" "114" "cancel" "default?" "default?:" "on-ok" ":host" "action-handler" "action-handler:" "24" "80" "351" "30" "ok" "Push-Button" "200" "width" "width:" "display-images?" "display-images?:" "toplevel-controls?" "toplevel-controls?:" "Tree-Node-Column" "on-escape-press" "escape-press-handler" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler" "return-press-handler:" ":images" "portfolio" "portfolio:" "2" "top-padding" "top-padding:" "detail" "filled-column" "filled-column:" "names-tree" "Tree-View" "fill" "layout-type" "layout-type:" "content" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "Scroller-View" "edge" "border-type" "border-type:" "304" "33" "names-border" "name" "name:" "Border-View" "Label" "Font" "font" "font:" "16" "201" "9" "10" "Point" "position" "position:" "title" "title:" "Label-View" "388" "222" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "finish" method #f 67 20 67 26 ("acquire-focus" "setup-names" "get-tree" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-tree" method #f 79 11 79 19 ("names-tree" "locate")}
        {Lisp-Entry "get-text" method #f 83 11 83 19 ("text" "column-size" "locate")}
        {Lisp-Entry "host-title" method #f 92 25 92 35 ()}
        {Lisp-Entry "host-position" method #f 96 25 96 38 ("300" "450" "Point")}
        {Lisp-Entry "host-size" method #f 100 25 100 34 ("120" "252" "Dimension")}
        {Lisp-Entry "on-return-press" method #f 110 20 110 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" method #f 116 20 116 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "setup-names" method #f 126 11 126 22 ("names" "list" "children" "children:" "add-row" "user-data" "user-data:" "color:" "checked?:" "title:" "parent" "parent:" "font:" "Check-Box" "checkbox" "selected" "member?" "checked?" "cadr" "localize" "title" "car" "string?" "name" "Label" "Label-Bold" "Font" "filled" "size" "eq?" "if" "font" "Black" "Color" "color" "4" "Rect" "layout-insets" "layout-insets:" "fill" "layout-type" "layout-type:" "Layout-View" "new" "layout" "0" "border" "let*" "info" "for-each" "lambda" "with-update-locked" "remove-every-row" "tree")}
        {Lisp-Entry "get-modal-result" method #f 148 20 148 36 ("get-output" "put" "name" "get-checked?" "Check-Box" "is?" "and" "when" "get-user-data" "checkbox" "rank" "row" "lambda" "for-each-row" "List-Factory" "new" "fact" "get-tree" "tree" "let")}}}})
"Domain-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Domain-Row.jazz"} 1298554945 jazz
    {Lisp-Entry "jazz.designer.row.Domain-Row" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Domain-Row" class #f 48 20 48 30 ("initialize" "Value-Row")
        {Lisp-Entry "domain" property #f 51 12 51 18 ()}
        {Lisp-Entry "get-domain" accessor #f 51 43 51 51 ()}
        {Lisp-Entry "set-domain" accessor #f 51 43 51 51 ()}
        {Lisp-Entry "initialize" method #f 59 20 59 30 ("self" "domain~self" "set!" "nextmethod" "apply" "others" "domain" "bind-keywords" "rest")}
        {Lisp-Entry "present" method #f 70 20 70 27 ("domain" "present" "value")}
        {Lisp-Entry "get-entry" method #f 74 11 74 20 ("editor" "first-child")}
        {Lisp-Entry "draw-data" method #f 83 20 83 29 ("domain" "draw-data" "height" "width" "data" "row" "column" "value" "context" "surface")}
        {Lisp-Entry "new-editor" method #f 92 20 92 30 ("domain" "setup-entry" "self" "value-row" "value-row:" "Domain-Editor" "new" "editor" "let")}
        {Lisp-Entry "get-edited-value" method #f 98 20 98 36 ("get-entry" "get-value")}
        {Lisp-Entry "set-edited-value" method #f 102 20 102 36 ("get-entry" "set-value" "value")}
        {Lisp-Entry "get-edited-modified?" method #f 106 20 106 40 ("get-entry" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" method #f 110 20 110 40 ("get-entry" "set-modified?" "flag")}
        {Lisp-Entry "focus-editor" method #f 114 20 114 32 ("select-all" "acquire-focus" "on-editor-return" "set-return-press-handler" "on-editor-tab" "set-tab-press-handler" "on-editor-arrow" "method-name" "method-name:" "self" "target" "target:" "Event-Handler" "new" "set-arrow-press-handler" "when" "get-entry" "tab-view" "view" "let" "rest")}
        {Lisp-Entry "on-editor-tab" method #f 124 11 124 24 ("editor-tab" "evt")}
        {Lisp-Entry "on-editor-return" method #f 127 11 127 27 ("editor-return" "evt")}
        {Lisp-Entry "on-editor-arrow" method #f 130 11 130 26 ("arrow-press" "arrow-move" "Text-View" "typecase" "else" "editor-down-arrow" "down" "editor-up-arrow" "up" "case" "get-entry" "tab-view" "view" "direction:" "get-property" "direction" "let" "evt")}
        {Lisp-Entry "show-cursor" method #f 142 20 142 31 ("body" "editor" "locate" "show-text-cursor")}
        {Lisp-Entry "focused-editor" method #f 147 20 147 34 ("body" "editor" "locate")}}
      {Lisp-Entry "Domain-Editor" class #f 158 7 158 20 ("initialize" "Layout-View")
        {Lisp-Entry "form" anonymous #f 161 3 161 7 ("fill" "layout-type" "layout-type:" "install")}
        {Lisp-Entry "value-row" property #f 165 12 165 21 ()}
        {Lisp-Entry "get-value-row" accessor #f 165 46 165 54 ()}
        {Lisp-Entry "set-value-row" accessor #f 165 46 165 54 ()}}}})
"Editor-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "event" "Editor-Event.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.event.Editor-Event" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Editor-Event" class #f 43 7 43 19 ("Event")}}})
"Editor-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Editor-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Editor-Row" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Editor-Row" class #f 43 20 43 30 ("initialize" "Tree-Row")
        {Lisp-Entry "editor" slot #f 46 8 46 14 ()}
        {Lisp-Entry "get-editor" accessor #f 46 39 46 47 ()}
        {Lisp-Entry "set-editor" accessor #f 46 39 46 47 ()}
        {Lisp-Entry "auto-in-place?" method #f 54 20 54 34 ()}
        {Lisp-Entry "layout" method #f 63 20 63 26 ("get-height" "get-width" "-" "Dimension" "set-size" "0" "Point" "new" "set-position" "1" "get-indentation" "level" "*" "12" "+" "width" "get-size" "size" "get-tree" "tree" "let*" "editor" "when")}
        {Lisp-Entry "draw" method #f 77 20 77 24 ("get-height" "get-width" "self" "draw-level" "get-node-column" "column" "get-tree" "tree" "let*" "lv" "lh" "context" "surface")}}}})
"Enumeration-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Enumeration-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Enumeration-Domain" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.locale" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Enumeration-Domain" class #f 45 7 45 25 ("initialize" "Domain")
        {Lisp-Entry "choices" property #f 48 12 48 19 ()}
        {Lisp-Entry "get-choices" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "set-choices" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "condensed?" property #f 49 12 49 22 ()}
        {Lisp-Entry "get-condensed?" accessor #f 49 48 49 56 ()}
        {Lisp-Entry "set-condensed?" accessor #f 49 48 49 56 ()}
        {Lisp-Entry "strict?" property #f 50 12 50 19 ()}
        {Lisp-Entry "get-strict?" accessor #f 50 48 50 56 ()}
        {Lisp-Entry "set-strict?" accessor #f 50 48 50 56 ()}
        {Lisp-Entry "limit" property #f 51 12 51 17 ()}
        {Lisp-Entry "get-limit" accessor #f 51 48 51 56 ()}
        {Lisp-Entry "set-limit" accessor #f 51 48 51 56 ()}
        {Lisp-Entry "validate-value" method #f 59 20 59 34 ("property:" "map" "join" "format" "message" "message:" "Integrity-Violation" "new" "add-violation" "key" "key:" "choices" "member?" "when" "cadr" "localize" "car" "cdr" "not" "if" "choice" "present-choice" "define" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 74 20 74 27 ("cadr" "localize" "choices" "assq" "pair" "let" "not" "if" "value")}
        {Lisp-Entry "setup-entry" method #f 88 20 88 31 ("choices" "combo" "locate" "set-choices" "self" "domain" "domain:" "get-size" "size" "size:" "parent" "parent:" "Enumeration-Entry" "new" "entry" "let" "client" "view")}
        {Lisp-Entry "setup-list-entry" method #f 94 20 94 36 ("choices" "setup" "self" "domain" "domain:" "parent" "parent:" "Enumeration-List-Entry" "new" "entry" "let" "client" "view")}}}})
"Enumeration-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Enumeration-Entry.jazz"} 1298836648 jazz
    {Lisp-Entry "jazz.designer.entry.Enumeration-Entry" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.tie" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Enumeration-Entry" class #f 49 7 49 24 ("Property-Entry")
        {Lisp-Entry "form" anonymous #f 52 3 52 7 ("Text-Base" "Text-Style" "base-style" "base-style:" "top-padding" "top-padding:" "1" "left-padding" "left-padding:" "body" "!" "selectable?" "selectable?:" "condensed?" "condensed?:" "combo" "name" "name:" "Entry-Combo-Box" "install")}
        {Lisp-Entry "finish" method #f 58 20 58 26 ("self" "body" "set-editor" "di=?" "combo" "locate" "set-entry-test" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" method #f 69 20 69 28 ("body" "combo" "locate")}
        {Lisp-Entry "validate" method #f 78 20 78 28 ("else" "format-plural" "format" "tie" "string-length" ">" "string?" "get-nullable?" "cond" "value" "french" "french:" "english" "english:" "Locales" "message" "message:" "Property-Violation" "new" "car" "key" "key:" "get-value" "member?" "combo" "locate" "valid-value?" "not" "get-strict?" "and" "if" "get-limit" "limit" "get-choices" "choices" "let" "domain")}
        {Lisp-Entry "get-value" method #f 103 20 103 29 ("combo" "locate" "get-value")}
        {Lisp-Entry "set-value" method #f 107 20 107 29 ("combo" "locate" "set-value" "value")}
        {Lisp-Entry "get-modified?" method #f 111 20 111 33 ("combo" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 115 20 115 33 ("combo" "locate" "set-modified?" "value")}
        {Lisp-Entry "set-editable?" method #f 124 20 124 33 ("combo" "locate" "set-editable?" "value")}}}})
"Enumeration-List-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Enumeration-List-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.entry.Enumeration-List-Entry" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Enumeration-List-Entry" class #f 47 7 47 29 ("Property-Entry")
        {Lisp-Entry "form" anonymous #f 50 3 50 7 ("200" "width" "width:" "toplevel-controls?" "toplevel-controls?:" "controls?" "controls?:" "Tree-Node-Column" "on-escape-press" "escape-press-handler" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler" "return-press-handler:" ":images" "portfolio" "portfolio:" "entry" "filled-column" "filled-column:" "show-header?" "show-header?:" "tree" "Tree-View" "document" "style" "style:" "shown?" "shown?:" "Tree-Header" "fill" "layout-type" "layout-type:" "content" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "Scroller-View" "edge" "border-type" "border-type:" "border" "name" "name:" "Border-View" "install")}
        {Lisp-Entry "setup" method #f 66 21 66 26 ("patch-tree" "list" "children" "children:" "add-row" "user-data" "user-data:" "color:" "title:" "parent" "parent:" "font:" "Check-Box" "checkbox" "Label" "Label-Bold" "Font" "filled" "size" "eq?" "if" "font" "Black" "Color" "color" "4" "Rect" "layout-insets" "layout-insets:" "fill" "layout-type" "layout-type:" "Layout-View" "new" "layout" "0" "border" "title" "get-name" "name" "let*" "component" "for-each" "lambda" "with-update-locked" "remove-every-row" "locate" "tree" "get-creator" "child" "get-children" "components" "let" "key" "client")}
        {Lisp-Entry "patch-tree" method #f 86 18 86 28 ("layout-drawing" "rank" "row" "lambda" "for-each-visible-row" "locate" "tree" "let")}
        {Lisp-Entry "get-value" method #f 98 20 98 29 ("get-output" "put" "get-checked?" "when" "name" "checkbox" "row" "lambda" "for-each-checkbox" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "set-value" method #f 107 20 107 29 ("set-checked?" "member?" "checked?" "let" "name" "checkbox" "row" "lambda" "for-each-checkbox" "value")}
        {Lisp-Entry "get-modified?" method #f 114 20 114 33 ("continuation-return" "get-modified?" "when" "name" "checkbox" "row" "for-each-checkbox" "return" "lambda" "continuation-capture")}
        {Lisp-Entry "set-modified?" method #f 124 20 124 33 ("set-modified?" "name" "checkbox" "row" "lambda" "for-each-checkbox" "value")}
        {Lisp-Entry "for-each-checkbox" method #f 135 11 135 28 ("name" "Check-Box" "is?" "when" "get-user-data" "checkbox" "rank" "row" "lambda" "for-each-row" "locate" "tree" "let" "proc")}}}})
"Enumeration-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Enumeration-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Enumeration-Row" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.locale" "jazz.designer")}
      {Lisp-Entry "Enumeration-Row" class #f 45 20 45 35 ("initialize" "Combo-Row")
        {Lisp-Entry "composite?" property #f 49 12 49 22 ()}
        {Lisp-Entry "get-composite?" accessor #f 49 47 49 55 ()}
        {Lisp-Entry "set-composite?" accessor #f 49 47 49 55 ()}
        {Lisp-Entry "initialize" method #f 57 20 57 30 ("choose" "set-kind" "composite?~self" "self" "choices~self" "set!" "nextmethod" "apply" "others" "composite?" "choices" "bind-keywords" "rest")}
        {Lisp-Entry "combo-choose" method #f 70 20 70 32 ("focus-editor" "enter-edited-value" "set-edited-value" "selected" "selected:" "choices" "names" "names:" "Domain-Chooser" "get-modal" "value" "let")}
        {Lisp-Entry "present" method #f 83 20 83 27 ("choices" "assq" "cadr" "localize" "name" "lambda" "map" "join" "null?" "if" "names")}
        {Lisp-Entry "get-edited-value" method #f 97 20 97 36 ("equal?" "test" "test:" "cadr" "localize" "info" "key" "key:" "choices" "find-in" "car" "title" "lambda" "map" "parse-strings" "strings" "=" "empty-string?" "or" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" method #f 107 20 107 36 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"File-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "File-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.File-Domain" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "File-Domain" class #f 44 7 44 18 ("Domain")
        {Lisp-Entry "present" method #f 52 20 52 27 ("present" "value")}
        {Lisp-Entry "setup-entry" method #f 61 20 61 31 ("file" "moniker" "locate" "set-protocol" "self" "domain" "domain:" "get-size" "size" "size:" "parent" "parent:" "Pathname-Entry" "new" "entry" "let" "client" "view")}}}})
"File-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "File-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.File-Row" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.dialog" "jazz.designer")}
      {Lisp-Entry "File-Row" class #f 44 20 44 28 ("explicit" "void" "Pathname-Row")
        {Lisp-Entry "mode" property #f 47 12 47 16 ()}
        {Lisp-Entry "parameters" property #f 48 12 48 22 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("set-parameters" "set-mode" "file" "editor" "set-protocol" "nextmethod" "apply" "others" "parameters" "open" "mode" "bind-keywords" "rest")}
        {Lisp-Entry "get-mode" method #f 69 18 69 26 ("editor" "get-mode")}
        {Lisp-Entry "set-mode" method #f 73 18 73 26 ("editor" "set-mode" "value")}
        {Lisp-Entry "get-parameters" method #f 77 18 77 32 ("editor" "get-parameters")}
        {Lisp-Entry "set-parameters" method #f 81 18 81 32 ("editor" "set-parameters" "value")}
        {Lisp-Entry "combo-choose" method #f 90 11 90 23 ("focus-editor" "enter-edited-value" "set-edited-value" "parameters" "choose-file" "apply" "file" "let")}}}})
"Font-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Font-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Font-Domain" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.graphic" "jazz.locale" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Font-Domain" class #f 46 7 46 18 ("100" "initialize" "Domain")
        {Lisp-Entry "width" property #f 49 12 49 17 ()}
        {Lisp-Entry "get-width" accessor #f 49 48 49 56 ()}
        {Lisp-Entry "set-width" accessor #f 49 48 49 56 ()}
        {Lisp-Entry "choices" property #f 50 12 50 19 ()}
        {Lisp-Entry "get-choices" accessor #f 50 48 50 56 ()}
        {Lisp-Entry "set-choices" accessor #f 50 48 50 56 ()}
        {Lisp-Entry "condensed?" property #f 51 12 51 22 ()}
        {Lisp-Entry "get-condensed?" accessor #f 51 48 51 56 ()}
        {Lisp-Entry "set-condensed?" accessor #f 51 48 51 56 ()}
        {Lisp-Entry "strict?" property #f 52 12 52 19 ()}
        {Lisp-Entry "get-strict?" accessor #f 52 48 52 56 ()}
        {Lisp-Entry "set-strict?" accessor #f 52 48 52 56 ()}
        {Lisp-Entry "limit" property #f 53 12 53 17 ()}
        {Lisp-Entry "get-limit" accessor #f 53 48 53 56 ()}
        {Lisp-Entry "set-limit" accessor #f 53 48 53 56 ()}
        {Lisp-Entry "validate-value" method #f 61 20 61 34 ("property:" "map" "join" "format" "message" "message:" "Integrity-Violation" "new" "add-violation" "key" "key:" "choices" "member?" "when" "cadr" "localize" "car" "cdr" "not" "if" "choice" "present-choice" "define" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 76 20 76 27 ("cadr" "localize" "->string" "choices" "assq" "pair" "let" "not" "if" "value")}
        {Lisp-Entry "setup-entry" method #f 90 20 90 31 ("combo" "locate" "set-choices" "domain" "domain:" "19" "width" "Dimension" "size" "size:" "parent" "parent:" "Enumeration-Entry" "new" "entry" "symbol->string" "key" "key:" "symbolic-fonts" "nu<?" "sort" "list" "->string" "title" "symbolic-font" "font" "let" "name" "lambda" "map" "self" "choices" "choices~self" "set!" "client" "view")}}}})
"Font-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Font-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Font-Row" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Font-Row" class #f 44 20 44 28 ("Combo-Row")
        {Lisp-Entry "initialize" method #f 47 20 47 30 ("symbol->string" "key" "key:" "symbolic-fonts" "nu<?" "sort" "list" "->string" "title" "symbolic-font" "font" "let" "name" "lambda" "map" "set-choices" "nextmethod" "apply" "rest")}}}})
"Foreign-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Foreign-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Foreign-Domain" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Foreign-Domain" class #f 43 7 43 21 ("Domain")}
      {Lisp-Entry "Foreign-Domain" class #f 49 7 49 21 ("initialize" "Domain")
        {Lisp-Entry "key" property #f 52 12 52 15 ()}
        {Lisp-Entry "get-key" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "set-key" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "objects" property #f 53 12 53 19 ()}
        {Lisp-Entry "get-objects" accessor #f 53 46 53 54 ()}
        {Lisp-Entry "set-objects" accessor #f 53 46 53 54 ()}
        {Lisp-Entry "criteria" property #f 54 12 54 20 ()}
        {Lisp-Entry "get-criteria" accessor #f 54 46 54 54 ()}
        {Lisp-Entry "set-criteria" accessor #f 54 46 54 54 ()}
        {Lisp-Entry "validate-value" method #f 62 11 62 25 ("property:" "violation-message" "message" "message:" "Integrity-Violation" "new" "add-violation" "member?" "not" "when" "key" "foreign-values" "values" "let" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "foreign-values" method #f 68 11 68 25 ("criteria" "search-descendants" "get-name" "map" "child" "foreign" "let" "key" "client")}
        {Lisp-Entry "violation-message" method #f 73 29 73 46 ("else" "join" "pair?" "key" "not" "cond" "format" "value")}
        {Lisp-Entry "present" method #f 86 11 86 18 ("join" "pair?" "not" "if" "value")}
        {Lisp-Entry "setup-entry" method #f 99 11 99 22 ("key" "foreign-choices" "combo" "locate" "set-choices" "self" "domain" "domain:" "parent" "parent:" "Foreign-Entry" "new" "entry" "let" "client" "view")}
        {Lisp-Entry "foreign-choices" method #f 104 11 104 26 ("list" "get-name" "name" "component" "lambda" "map" "child" "get-children" "or" "objects" "let" "key" "client")}
        {Lisp-Entry "setup-list-entry" method #f 112 11 112 27 ("key" "setup" "parent" "parent:" "Foreign-List-Entry" "new" "entry" "let" "client" "view")}}}})
"Foreign-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Foreign-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.entry.Foreign-Entry" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Foreign-Entry" class #f 46 7 46 20 ("Property-Entry")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("Text-Base" "Text-Style" "base-style" "base-style:" "top-padding" "top-padding:" "2" "left-padding" "left-padding:" "body" "!" "combo" "Combo-Box" "edge" "border-type" "border-type:" "border" "name" "name:" "Border-View" "install")}
        {Lisp-Entry "get-value" method #f 61 20 61 29 ("combo" "locate" "get-value")}
        {Lisp-Entry "set-value" method #f 65 20 65 29 ("combo" "locate" "set-value" "value")}
        {Lisp-Entry "get-modified?" method #f 69 20 69 33 ("combo" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 73 20 73 33 ("combo" "locate" "set-modified?" "value")}}}})
"Foreign-List-Chooser"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "choosers" "Foreign-List-Chooser.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.choosers.Foreign-List-Chooser" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Foreign-List-Chooser" class #f 46 20 46 40 ("initialize" "View")
        {Lisp-Entry "foreign" property #f 49 12 49 19 ()}
        {Lisp-Entry "get-foreign" accessor #f 49 55 49 63 ()}
        {Lisp-Entry "set-foreign" accessor #f 49 55 49 63 ()}
        {Lisp-Entry "foreign-objects" property #f 50 12 50 27 ()}
        {Lisp-Entry "get-foreign-objects" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "set-foreign-objects" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "key" property #f 51 12 51 15 ()}
        {Lisp-Entry "get-key" accessor #f 51 55 51 63 ()}
        {Lisp-Entry "set-key" accessor #f 51 55 51 63 ()}
        {Lisp-Entry "composite?" property #f 52 12 52 22 ()}
        {Lisp-Entry "get-composite?" accessor #f 52 55 52 63 ()}
        {Lisp-Entry "set-composite?" accessor #f 52 55 52 63 ()}
        {Lisp-Entry "allow-duplicates?" property #f 53 12 53 29 ()}
        {Lisp-Entry "get-allow-duplicates?" accessor #f 53 55 53 63 ()}
        {Lisp-Entry "set-allow-duplicates?" accessor #f 53 55 53 63 ()}
        {Lisp-Entry "all" property #f 54 12 54 15 ()}
        {Lisp-Entry "get-all" accessor #f 54 55 54 63 ()}
        {Lisp-Entry "set-all" accessor #f 54 55 54 63 ()}
        {Lisp-Entry "value" property #f 55 12 55 17 ()}
        {Lisp-Entry "get-value" accessor #f 55 55 55 63 ()}
        {Lisp-Entry "set-value" accessor #f 55 55 55 63 ()}
        {Lisp-Entry "form" anonymous #f 58 3 58 7 ("on-cancel" "222" "cancel" "default?" "default?:" "on-ok" ":host" "Event-Handler" "action-handler" "action-handler:" "24" "80" "268" "138" "title" "title:" "ok" "Push-Button" "8" "253" "Horizontal-Line" "230" "430" "10" "Point" "position" "position:" "entry" "name" "name:" "Foreign-List-Entry" "305" "450" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "finish" method #f 66 20 66 26 ("value" "set-value" "allow-duplicates?" "set-allow-duplicates?" "composite?" "set-composite?" "all" "get-children" "foreign-objects" "null?" "key" "map" "foreign" "if" "set-all" "present" "entry" "locate" "set-presenter" "nextmethod" "rest")}
        {Lisp-Entry "install-in-host" method #f 75 20 75 35 ("composite?" "if" "get-host" "set-title" "entry" "locate" "guest-installed-in-host" "nextmethod" "host")}
        {Lisp-Entry "present" definition #f 88 15 88 22 ("join" "list?" "if" "object")}
        {Lisp-Entry "get-modal-result" method #f 99 20 99 36 ("entry" "locate" "get-result")}}}})
"Foreign-List-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Foreign-List-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.entry.Foreign-List-Entry" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Foreign-List-Entry" class #f 46 7 46 25 ("explicit" "initialize" "Property-Entry")
        {Lisp-Entry "composite?" property #f 49 12 49 22 ()}
        {Lisp-Entry "allow-duplicates?" property #f 50 12 50 29 ()}
        {Lisp-Entry "get-allow-duplicates?" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "set-allow-duplicates?" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "presenter" property #f 51 12 51 21 ()}
        {Lisp-Entry "all" property #f 52 12 52 15 ()}
        {Lisp-Entry "value" property #f 53 12 53 17 ()}
        {Lisp-Entry "to" slot #f 56 8 56 10 ()}
        {Lisp-Entry "form" anonymous #f 59 3 59 7 ("to-entry" "to-tree" "to-border" "on-remove" "remove" "on-add" "action-handler" "action-handler:" "22" "80" "title" "title:" "add" "Push-Button" "200" "width" "width:" "display-images?" "display-images?:" "toplevel-controls?" "toplevel-controls?:" "controls?" "controls?:" "Tree-Node-Column" "on-escape-press" "escape-press-handler" "escape-press-handler:" "on-return-press" "return-press-handler" "return-press-handler:" "on-tab-press" "tab-press-handler" "tab-press-handler:" "on-double-click" "double-click-handler" "double-click-handler:" "on-selection-change" ":form" "Event-Handler" "selection-handler" "selection-handler:" ":images" "portfolio" "portfolio:" "show-unfocused-selection?" "show-unfocused-selection?:" "multiple-selection?" "multiple-selection?:" "row" "selection-mode" "selection-mode:" "from-entry" "filled-column" "filled-column:" "show-header?" "show-header?:" "from-tree" "Tree-View" "document" "style" "style:" "shown?" "shown?:" "Tree-Header" "fill" "layout-type" "layout-type:" "content" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "Scroller-View" "edge" "border-type" "border-type:" "from-border" "name" "name:" "Border-View" "320" "352" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "guest-installed-in-host" method #f 79 21 79 44 ("focus-and-select" "from-tree" "locate" "tree" "let")}
        {Lisp-Entry "host-title" method #f 89 25 89 35 ()}
        {Lisp-Entry "host-position" method #f 93 25 93 38 ("300" "450" "Point")}
        {Lisp-Entry "host-size" method #f 97 25 97 34 ("320" "252" "Dimension")}
        {Lisp-Entry "get-result" method #f 106 18 106 28 ("<" "sort" "composite?" "if" "to->value" "value" "let")}
        {Lisp-Entry "get-presenter" method #f 118 18 118 31 ("presenter")}
        {Lisp-Entry "set-presenter" method #f 122 18 122 31 ("update" "presenter" "set!" "value")}
        {Lisp-Entry "get-all" method #f 127 18 127 25 ("all")}
        {Lisp-Entry "set-all" method #f 131 18 131 25 ("update" "all" "set!" "value")}
        {Lisp-Entry "get-value" method #f 136 20 136 29 ("value")}
        {Lisp-Entry "set-value" method #f 140 20 140 29 ("update" "value->to" "to" "value" "set!" "v")}
        {Lisp-Entry "get-composite?" method #f 146 18 146 32 ("composite?")}
        {Lisp-Entry "set-composite?" method #f 150 18 150 32 ("from-tree" "set-multiple-selection?" "if" "add" "locate" "set-title" "value->to" "to" "composite?" "set!" "value")}
        {Lisp-Entry "value->to" method #f 158 11 158 20 ("list" "not" "value" "composite?" "if")}
        {Lisp-Entry "to->value" method #f 167 11 167 20 ("car" "not" "to" "composite?" "if")}
        {Lisp-Entry "setup" method #f 180 21 180 26 ("get-children" "get-name" "component" "lambda" "map" "set-all" "get-creator" "child" "foreign" "let" "key" "client")}
        {Lisp-Entry "layout" method #f 192 20 192 26 ("30" "remove" "10" "+" "add" "Dimension" "set-size" "0" "Point" "new" "set-position" "52" "buttons-pos" "2" "100" "-" "quotient" "tree-width" "to-border" "to" "from-border" "locate" "from" "get-height" "height" "get-width" "width" "get-size" "size" "let*")}
        {Lisp-Entry "on-selection-change" method #f 213 11 213 30 ("update-buttons" "evt")}
        {Lisp-Entry "on-double-click" method #f 217 11 217 26 ("on-remove" "remove" "to-tree" "on-add" "add" "locate" "get-enabled?" "when" "from-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-add" method #f 224 11 224 17 ("set-modified?" "acquire-focus" "user-data-indexes" "set-selection" "allow-duplicates?" "update" "append" "composite?" "if" "to" "set!" "get-selected-data" "values" "to-tree" "locate" "from-tree" "let*" "evt")}
        {Lisp-Entry "on-remove" method #f 237 11 237 20 ("set-modified?" "user-data-indexes" "set-selection" "acquire-focus" "allow-duplicates?" "unless" "update" "difference" "to" "set!" "get-selected-data" "values" "to-tree" "locate" "from-tree" "let*" "evt")}
        {Lisp-Entry "update-buttons" method #f 249 11 249 25 ("remove" "add" "set-enabled?" "to?" "to-tree" "get-selection" "from?" "locate" "from-tree" "let*")}
        {Lisp-Entry "on-tab-press" method #f 258 20 258 32 ("to-tree" "locate" "focus-and-select" "from-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" method #f 268 20 268 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" method #f 274 20 274 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update" method #f 284 11 284 17 ("update-buttons" "presenter" "not" "to-tree" "update-to" "equal?" "test" "test:" "to" "difference" "all" "allow-duplicates?" "if" "<" "sort" "user-data" "user-data:" "title:" "Tree-Node" "new" "list" "children" "children:" "add-row" "present" "title" "object" "for-each" "lambda" "with-update-locked" "remove-every-row" "locate" "from-tree" "let" "update-from" "define")}}}})
"Foreign-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Foreign-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Foreign-Row" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.designer")}
      {Lisp-Entry "Foreign-Row" class #f 44 20 44 31 ("explicit" "Combo-Row")
        {Lisp-Entry "foreign" property #f 47 12 47 19 ()}
        {Lisp-Entry "foreign-objects" property #f 48 12 48 27 ()}
        {Lisp-Entry "key" property #f 49 12 49 15 ()}
        {Lisp-Entry "get-key" accessor #f 49 40 49 48 ()}
        {Lisp-Entry "set-key" accessor #f 49 40 49 48 ()}
        {Lisp-Entry "composite?" property #f 50 12 50 22 ()}
        {Lisp-Entry "get-composite?" accessor #f 50 40 50 48 ()}
        {Lisp-Entry "set-composite?" accessor #f 50 40 50 48 ()}
        {Lisp-Entry "allow-duplicates?" property #f 51 12 51 29 ()}
        {Lisp-Entry "get-allow-duplicates?" accessor #f 51 40 51 48 ()}
        {Lisp-Entry "set-allow-duplicates?" accessor #f 51 40 51 48 ()}
        {Lisp-Entry "initialize" method #f 59 20 59 30 ("choose" "set-kind" "allow-duplicates?~self" "composite?~self" "get-name" "or" "key~self" "foreign-objects~self" "self" "foreign~self" "set!" "nextmethod" "apply" "others" "allow-duplicates?" "composite?" "key" "foreign-objects" "foreign" "bind-keywords" "rest")}
        {Lisp-Entry "get-foreign" method #f 75 18 75 29 ("foreign")}
        {Lisp-Entry "set-foreign" method #f 79 18 79 29 ("foreign-objects" "foreign-choices" "set-choices" "foreign" "set!" "value")}
        {Lisp-Entry "get-foreign-objects" method #f 84 18 84 37 ("foreign-objects")}
        {Lisp-Entry "set-foreign-objects" method #f 88 18 88 37 ("foreign" "foreign-choices" "set-choices" "foreign-objects" "set!" "value")}
        {Lisp-Entry "foreign-choices" method #f 93 11 93 26 ("get-children" "null?" "if" "list" "key" "name" "let" "component" "lambda" "map" "when" "foreign-objects" "foreign")}
        {Lisp-Entry "combo-choose" method #f 108 20 108 32 ("focus-editor" "enter-edited-value" "set-edited-value" "value:" "allow-duplicates?" "allow-duplicates?:" "composite?" "composite?:" "key" "key:" "foreign-objects" "foreign-objects:" "foreign" "foreign:" "Foreign-List-Chooser" "get-modal" "value" "let")}
        {Lisp-Entry "present" method #f 121 20 121 27 ("key" "lambda" "map" "else" "join" "list?" "if" "composite?" "not" "cond" "value")}
        {Lisp-Entry "get-edited-value" method #f 137 20 137 36 ("parse-strings" "map" "composite?" "not" "=" "empty-string?" "or" "editor" "get-body" "get-string-content" "let" "split" "find-in" "if" "string" "parse-string" "define")}
        {Lisp-Entry "set-edited-value" method #f 151 20 151 36 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Group-Card"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "card" "Group-Card.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.card.Group-Card" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Group-Card" class #f 47 20 47 30 ("Custom-Card")
        {Lisp-Entry "form" anonymous #f 50 3 50 7 ("classes-invite" "classes-image" "501" "346" "classes-group" "64" "sort?" "Check-Box" "Text-Base" "Text-Style" "base-style" "base-style:" "top-padding" "top-padding:" "2" "left-padding" "left-padding:" "Plain-Text-View" "fill" "layout-type" "layout-type:" "content" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "Scroller-View" "edge" "border-type" "border-type:" "19" "262" "33" "61" "title-border" "Border-View" "16" "250" "48" "general-invite" "Label-View" "visible?" "visible?:" "Image-Resource" "resource" "resource:" ":images" "portfolio" "portfolio:" "32" "8" "general-image" "Image-View" ">" "<content" "<content~>" "347" "334" "0" "7" "title" "title:" "general-group" "name" "name:" "Group-Box" "350" "850" "Dimension" "size" "size:" "107" "184" "Point" "position" "position:" "install")}
        {Lisp-Entry "Properties-Mapping" definition #f 72 14 72 32 ("boolean" "sort?" "string" "title")}
        {Lisp-Entry "get-properties-mapping" method #f 77 20 77 42 ("Properties-Mapping")}
        {Lisp-Entry "resize" method #f 86 20 86 26 ("classes-group" "0" "general-group" "locate" "size-figure" "dv" "dh")}}}})
"Handler-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Handler-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Handler-Domain" module #f 37 8 37 43 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Handler-Domain" class #f 44 7 44 21 ("Domain")
        {Lisp-Entry "present" method #f 52 20 52 27 ("->string" "value")}
        {Lisp-Entry "setup-entry" method #f 61 20 61 31 ("self" "domain" "domain:" "get-size" "size" "size:" "parent" "parent:" "Handler-Entry" "new" "client" "view")}}}})
"Handler-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Handler-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.entry.Handler-Entry" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Handler-Entry" class #f 47 7 47 20 ("Property-Entry")
        {Lisp-Entry "form" anonymous #f 50 3 50 7 ("top-padding" "top-padding:" "0" "left-padding" "left-padding:" "text" "Entry-Text-View" "fill" "layout-type" "layout-type:" "content" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "scroller" "name" "name:" "Scroller-View" "install")}
        {Lisp-Entry "finish" method #f 57 20 57 26 ("self" "text" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" method #f 67 20 67 28 ("text" "locate")}
        {Lisp-Entry "validate" method #f 76 20 76 28 ("message" "message:" "Property-Violation" "new" "get-nullable?" "not" "empty-string?" "and" "if" "text" "locate-component" "get-string-content" "content" "let" "domain")}
        {Lisp-Entry "get-modified?" method #f 89 20 89 33 ("text" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 93 20 93 33 ("text" "locate" "set-modified?" "value")}
        {Lisp-Entry "get-value" method #f 101 20 101 29 ("second" "2" "first" "method-name" "method-name:" ":form" "target-name" "target-name:" "Event-Handler" "new" "1" "length" "case" "read-string-content" "list" "string=?" "if" "text" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-value" method #f 111 20 111 29 ("get-preserved" "Surrogate-Handler" "is?" "text" "locate" "set-string-content" "format" "->string" ":form" "eq?" "get-method-name" "method" "get-target-name" "target" "let" "not" "if" "handler" "present-handler" "define" "value")}
        {Lisp-Entry "set-editable?" method #f 130 20 130 33 ("Medium" "White" "Color" "if" "set-background" "text" "locate" "set-editable?" "flag")}}}})
"Handler-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Handler-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Handler-Row" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Handler-Row" class #f 45 20 45 31 ("Value-Row")
        {Lisp-Entry "double-click" method #f 53 20 53 32 ("edit-definitions" "pos")}
        {Lisp-Entry "present" method #f 62 20 62 27 ("get-preserved" "Surrogate-Handler" "is?" "format" "->string" ":form" "eq?" "get-method-name" "method" "get-target-name" "target" "let" "not" "if" "handler" "present-handler" "define" "value")}
        {Lisp-Entry "get-edited-value" method #f 80 20 80 36 ("second" "2" "first" "method-name" "method-name:" ":form" "target-name" "target-name:" "Event-Handler" "new" "1" "length" "case" "read-string-content" "list" "string=?" "if" "editor" "get-string-content" "content" "let")}
        {Lisp-Entry "edit-definitions" method #f 95 20 95 36 ("Jazz-Field-Entry" "entry" "edit" "Jazz-Entry" "get-category-location" "Jazz-Code-Location" "new" "location" "let" "get-method-name" "category-field" "field" "find-target-type" "class" "find-target" "target" "bell" "not" "if" "property" "read-property" "handler" "get-client" "car" "client" "let*" "edit-definitions" "unimplemented")}}}})
"Index-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Index-Tree.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.Index-Tree" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Index-Tree" class #f 46 20 46 30 ("Details-Tree")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("kind" "275" "location" "Tree-Label-Column" "toplevel-controls?" "toplevel-controls?:" "100" "width" "width:" "title" "title:" "name" "name:" "Tree-Node-Column" "on-selection-change" ":self" "Event-Handler" "selection-handler" "selection-handler:" "can-select-empty?" "can-select-empty?:" "multiple-selection?" "multiple-selection?:" "row" "selection-mode" "selection-mode:" ":images" "portfolio" "portfolio:" "component" "filled-column" "filled-column:" "install")}
        {Lisp-Entry "selection-changed" method #f 61 20 61 37 ("focus?" "force-parent?" "origin" "old" "component")}
        {Lisp-Entry "on-designer" method #f 70 20 70 31 ("update" ":property-change" ":child-remove" ":child-add" "get-kind" "case" "evt")}
        {Lisp-Entry "update" method #f 81 20 81 26 ("get-presentation-property" "key" "key:" "<" "sort" "insert-component" "for-each" "with-update-locked" "remove-every-row" "cons" "set!" "indexable?" "when" "level" "component" "lambda" "client" "for-each-descendant" "list" "let" "collect-components" "define" "rest")}
        {Lisp-Entry "insert-component" method #f 99 20 99 36 ("user-data" "user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children" "children:" "father:" "add-row" "class-of" "get-class-presentation" "kind" "present-location" "location" "get-component-image" "image" "get-presentation-property" "title" "let" "recursive?" "father" "component")}}}})
"Info-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Info-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Info-Domain" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Info-Domain" class #f 44 7 44 18 ("Domain")}}})
"Info-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Info-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Info-Row" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.locale" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Info-Row" class #f 45 20 45 28 ("Value-Row")
        {Lisp-Entry "present" method #f 53 20 53 27 ("format" "Locales" "is?" "if" "value")}
        {Lisp-Entry "edit" method #f 64 20 64 24 ()}
        {Lisp-Entry "end-edition" method #f 68 20 68 31 ()}
        {Lisp-Entry "save-edition" method #f 72 20 72 32 ()}
        {Lisp-Entry "select-editor" method #f 76 20 76 33 ()}
        {Lisp-Entry "set-edited-modified?" method #f 80 20 80 40 ("flag")}}}})
"Integer-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Integer-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Integer-Domain" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Integer-Domain" class #f 44 7 44 21 ("initialize" "Text-Domain")
        {Lisp-Entry "upper-limit" property #f 47 12 47 23 ()}
        {Lisp-Entry "get-upper-limit" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "set-upper-limit" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "lower-limit" property #f 48 12 48 23 ()}
        {Lisp-Entry "get-lower-limit" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "set-lower-limit" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "validate-value" method #f 56 20 56 34 ("property:" "message:" "Integrity-Violation" "new" "add-violation" "when" "else" "<" "lower-limit" ">" "upper-limit" "and" "format" "integer?" "not" "cond" "message" "let" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 73 20 73 27 ("->string" "not" "if" "value")}
        {Lisp-Entry "parse" method #f 84 20 84 25 ("parse-integer" "equal?" "if" "text")}}}})
"List-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "List-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.List-Domain" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "List-Domain" class #f 44 7 44 18 ("initialize" "Value-Domain")
        {Lisp-Entry "domain" property #f 47 12 47 18 ()}
        {Lisp-Entry "get-domain" accessor #f 47 43 47 51 ()}
        {Lisp-Entry "set-domain" accessor #f 47 43 47 51 ()}}
      {Lisp-Entry "List-Domain" class #f 51 7 51 18 ("Value-Domain" "new" "initialize" "Domain")
        {Lisp-Entry "domain" property #f 54 12 54 18 ()}
        {Lisp-Entry "get-domain" accessor #f 54 59 54 67 ()}
        {Lisp-Entry "set-domain" accessor #f 54 59 54 67 ()}
        {Lisp-Entry "validate-value" method #f 62 20 62 34 ("domain" "validate-value" "subvalue" "lambda" "for-each" "property:" "format" "message" "message:" "Integrity-Violation" "new" "add-violation" "pair?" "not" "if" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 75 20 75 27 ("domain" "present" "lambda" "map" "join" "not" "if" "value")}
        {Lisp-Entry "setup-entry" method #f 89 20 89 31 ("domain" "setup-list-entry" "client" "view")}}}})
"Manager-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "manager" "Manager-Actions.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.manager.Manager-Actions" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Manager-Actions" class #f 43 7 43 22 ("Actions")}}})
"Manager-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "manager" "Manager-View.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.manager.Manager-View" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Manager-View" class #f 46 7 46 19 ("Component-Editor")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("card" "Properties-Card" "card-border" "416" "card-contour" "366" "230" "right" "descendant" "on-tab-press" "tab-press-handler" "tab-press-handler:" "descendants" "Descendants-Tree" "233" "133" "descendants-border" "on-splitter-move" "move-handler" "move-handler:" "horz" "orientation" "orientation:" "3" "left" "Splitter" "183" "width" "width:" "trait" "traits" "Traits-Tree" "header" "Tree-Header" "fill" "content" "!" "tool" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "document" "scroller" "Scroller-View" "entry" "style" "style:" "edge" "border-type" "border-type:" "130" "229" "1" "Point" "position" "position:" "traits-border" "Border-View" "367" "center" "Center-View" "on-edit-form" "edit-form" "end-undo-group" "on-redo" "redo" "on-undo" "undo" "16" "end-open-group" "Separator" "on-save" "save" "on-open" "open" "on-new" ":form" "Event-Handler" "action-handler" "action-handler:" ":images" "portfolio" "portfolio:" "Image-Resource" "resource" "resource:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "22" "new" "Push-Tool" "6" "0" "Rect" "layout-insets" "layout-insets:" "flow" "north" "location" "location:" "33" "300" "toolbar" "name" "name:" "Layout-View" "border" "layout-type" "layout-type:" "400" "650" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "host-icon" method #f 87 25 87 34 ("Image-Resource")}
        {Lisp-Entry "host-position" method #f 91 25 91 38 ("80" "100" "Point")}
        {Lisp-Entry "host-size" method #f 95 25 95 34 ("400" "650" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 99 20 99 35 ("home")}
        {Lisp-Entry "new-controller" method #f 109 20 109 34 ("self" "Manager-View-Controller" "new")}
        {Lisp-Entry "Manager-View-Controller" class #f 114 9 114 32 ("Component-Editor-Controller")
          {Lisp-Entry "name-status" method #f 117 22 117 33 ("document" "editor-title")}}
        {Lisp-Entry "install" method #f 126 20 126 27 ("card" "descendants" "self" "traits" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "guest-actions" method #f 138 20 138 33 ("nextmethod" "manager" "find-actions" "cons")}
        {Lisp-Entry "size-change" method #f 148 20 148 31 ("get-height" "get-width" "Dimension" "new" "set-size" "when" "locate-component" "toolbar" "let" "nextmethod" "size")}
        {Lisp-Entry "resize-center" method #f 155 29 155 42 ("card-contour" "right" "0" "descendants-border" "locate" "size-figure" "dv" "dh")}
        {Lisp-Entry "on-splitter-move" method #f 161 19 161 35 ("update-view" "card-contour" "right" "-" "descendants-border" "move-figure" "0" "traits-border" "locate" "size-figure" "left" "get-name" "case" "delta:" "get-property" "delta" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-new" method #f 178 11 178 17 ("new-form" "evt")}
        {Lisp-Entry "on-open" method #f 182 11 182 18 ("open-form" "evt")}
        {Lisp-Entry "on-edit-form" method #f 186 11 186 23 ("edit-form" "evt")}
        {Lisp-Entry "on-tab-press" method #f 190 20 190 32 ("get-row" "auto-select" "when" "get-single-selection" "rank" "acquire-focus" "card" "locate" "get-tree" "tree" "let" "evt")}
        {Lisp-Entry "install-current-designer" method #f 203 20 203 44 ("editor-title" "set-title" "nextmethod" "form" "component")}}
      {Lisp-Entry "Center-View" class #f 213 7 213 18 ("View")
        {Lisp-Entry "resize" method #f 216 20 216 26 ("creator" "resize-center" "nextmethod" "dv" "dh")}}}})
"Matches-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Matches-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Matches-Row" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Matches-Row" class #f 43 20 43 31 ("Value-Row")
        {Lisp-Entry "present" method #f 46 22 46 29 ("format" "not" "if" "matches")}
        {Lisp-Entry "get-edited-value" method #f 52 22 52 38 ("split" "map" "trim-spaces" "lambda" "clean" "=" "if" "editor" "get-string-content" "string" "let")}}}})
"Memo-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Memo-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Memo-Row" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.designer")}
      {Lisp-Entry "Memo-Row" class #f 44 20 44 28 ("Combo-Row")
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("choose" "set-kind" "nextmethod" "apply" "rest")}
        {Lisp-Entry "present" method #f 62 20 62 27 ("format" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "combo-choose" method #f 73 20 73 32 ("focus-editor" "enter-edited-value" "set-edited-value" "get-edited-value" "initial-text" "initial-text:" "request-text" "text" "let")}
        {Lisp-Entry "get-edited-value" method #f 86 20 86 36 ("=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" method #f 93 20 93 36 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Menu-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "manager" "Menu-Editor.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.manager.Menu-Editor" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Menu-Editor" class #f 43 7 43 18 ("View-Editor")
        {Lisp-Entry "host-title" method #f 51 25 51 35 ()}
        {Lisp-Entry "host-position" method #f 55 25 55 38 ("117" "237" "Point")}
        {Lisp-Entry "host-size" method #f 59 25 59 34 ("472" "708" "Dimension")}}}})
"Name-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Name-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Name-Domain" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Name-Domain" class #f 44 7 44 18 ("initialize" "Info-Domain")
        {Lisp-Entry "limit" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-limit" accessor #f 47 47 47 55 ()}
        {Lisp-Entry "set-limit" accessor #f 47 47 47 55 ()}
        {Lisp-Entry "predicate?" property #f 48 12 48 22 ()}
        {Lisp-Entry "get-predicate?" accessor #f 48 47 48 55 ()}
        {Lisp-Entry "set-predicate?" accessor #f 48 47 48 55 ()}
        {Lisp-Entry "validate-value" method #f 56 20 56 34 ("property:" "format" "message" "message:" "Integrity-Violation" "new" "add-violation" "string?" "symbol?" "not" "and" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 66 20 66 27 ("->string" "value")}
        {Lisp-Entry "setup-entry" method #f 75 20 75 31 ("self" "domain" "domain:" "get-size" "size" "size:" "parent" "parent:" "Name-Entry" "new" "client" "view")}}}})
"Name-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Name-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.entry.Name-Entry" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.tie" "jazz.locale" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Name-Entry" class #f 46 7 46 17 ("String-Entry")
        {Lisp-Entry "validate" method #f 54 20 54 28 ("else" "format-plural" "format" "tie" "string-length" ">" "and" "french" "french:" "english" "english:" "Locales" "message" "message:" "Property-Violation" "new" "get-nullable?" "if" "empty-string?" "cond" "get-predicate?" "predicate?" "get-limit" "limit" "text" "locate" "get-string-content" "content" "let" "domain")}
        {Lisp-Entry "get-value" method #f 76 20 76 29 ("empty-string?" "if" "text" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-value" method #f 83 20 83 29 ("not" "if" "text" "locate" "set-string-content" "value")}}}})
"Number-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Number-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Number-Domain" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Number-Domain" class #f 44 7 44 20 ("Text-Domain")
        {Lisp-Entry "validate-value" method #f 52 20 52 34 ("property:" "format" "message" "message:" "Integrity-Violation" "new" "add-violation" "number?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 62 20 62 27 ("number->string" "not" "if" "value")}
        {Lisp-Entry "parse" method #f 73 20 73 25 ("string->number" "equal?" "if" "text")}}}})
"Password-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Password-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Password-Domain" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Password-Domain" class #f 44 7 44 22 ("Domain")
        {Lisp-Entry "validate-value" method #f 52 20 52 34 ("property:" "format" "message" "message:" "Integrity-Violation" "new" "add-violation" "string?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}}}})
"Password-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Password-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Password-Row" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.platform" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Password-Row" class #f 47 20 47 32 ("String-Row")
        {Lisp-Entry "present" method #f 55 20 55 27 ("nextmethod" "not" "if" "value")}
        {Lisp-Entry "editor-class" method #f 66 20 66 32 ("Password-Value-Text-View")}
        {Lisp-Entry "set-edited-value" method #f 70 20 70 36 ("or" "editor" "set-string-content" "value")}}
      {Lisp-Entry "Password-Value-Text-View" class #f 79 7 79 31 ("Value-Text-View")
        {Lisp-Entry "form" anonymous #f 82 3 82 7 ("Password" "Font" "font" "font:" "Text-Style" "base-style" "base-style:" "install")}
        {Lisp-Entry "copy-selection" method #f 86 20 86 34 ("bell")}
        {Lisp-Entry "draw-outline" method #f 90 20 90 32 ("draw-caret" "draw-password" "draw-selection" "unless" "printing?:" "getf" "printing?" "bottom" "top" "let" "sc?" "sc" "sv" "sh" "lv" "lh" "clipper" "context" "surface")}
        {Lisp-Entry "draw-password" method #f 101 11 101 24 ("draw-text" "Black" "Color" "set-text-color" "set-font" "-" "get-v" "+" "v" "get-h" "h" "get-font" "font" "get-default-style" "style" "effective-font" "get-metrics" "font-height" "get-height" "height" "get-position" "pos" "cardinality" "make-string" "hidden" "get-string" "password" "0" "get-paragraph" "paragraph" "let*" "surface")}}}})
"Pathname-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Pathname-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.entry.Pathname-Entry" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.tie" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Pathname-Entry" class #f 49 7 49 21 ("Property-Entry")
        {Lisp-Entry "form" anonymous #f 52 3 52 7 ("Text-Base" "Text-Style" "base-style" "base-style:" "top-padding" "top-padding:" "1" "left-padding" "left-padding:" "body" "!" "on-moniker-update" ":form" "Event-Handler" "moniker-update-handler" "moniker-update-handler:" "display-protocol?" "display-protocol?:" "display-logical?" "display-logical?:" "selectable?" "selectable?:" "moniker" "name" "name:" "Moniker-Widget" "install")}
        {Lisp-Entry "finish" method #f 58 20 58 26 ("nextmethod" "rest")}
        {Lisp-Entry "tab-view" method #f 67 20 67 28 ("body" "moniker" "locate")}
        {Lisp-Entry "on-moniker-update" method #f 76 11 76 28 ("set-modified?" "evt")}
        {Lisp-Entry "get-value" method #f 85 20 85 29 ("moniker" "locate" "get-moniker")}
        {Lisp-Entry "set-value" method #f 89 20 89 29 ("generate-event?" "generate-event?:" "moniker" "locate" "set-moniker" "pathname")}
        {Lisp-Entry "get-modified?" method #f 93 20 93 33 ("moniker" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 97 20 97 33 ("moniker" "locate" "set-modified?" "value")}
        {Lisp-Entry "set-editable?" method #f 106 20 106 33 ("combo" "locate" "set-editable?" "value")}}}})
"Pathname-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Pathname-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Pathname-Row" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Pathname-Row" class #f 45 20 45 32 ("explicit" "void" "Value-Row")
        {Lisp-Entry "display-logical?" property #f 48 12 48 28 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("set-display-logical?" "self" "value-row" "value-row:" "editor-class" "new" "editor" "set!" "nextmethod" "apply" "others" "display-logical?" "bind-keywords" "rest")}
        {Lisp-Entry "editor-class" method #f 63 20 63 32 ("Pathname-Row-Editor")}
        {Lisp-Entry "get-display-logical?" method #f 72 18 72 38 ("editor" "get-display-logical?")}
        {Lisp-Entry "set-display-logical?" method #f 76 18 76 38 ("editor" "set-display-logical?" "value")}
        {Lisp-Entry "enter-pathname-value" method #f 85 11 85 31 ("enter-value" "value")}
        {Lisp-Entry "present" method #f 94 20 94 27 ("editor" "present-moniker" "value")}
        {Lisp-Entry "close-editor?" method #f 103 20 103 33 ()}
        {Lisp-Entry "get-edited-value" method #f 107 20 107 36 ("editor" "get-moniker")}
        {Lisp-Entry "set-edited-value" method #f 111 20 111 36 ("generate-event?" "generate-event?:" "editor" "set-moniker" "value")}
        {Lisp-Entry "get-edited-modified?" method #f 115 20 115 40 ("editor" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" method #f 119 20 119 40 ("editor" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" method #f 123 20 123 31 ("editor" "get-text" "show-text-cursor")}
        {Lisp-Entry "focused-editor" method #f 127 20 127 34 ("editor" "get-text")}}
      {Lisp-Entry "Pathname-Row-Editor" class #f 136 7 136 26 ("explicit" "initialize" "Moniker-Widget")
        {Lisp-Entry "form" anonymous #f 139 3 139 7 ("top-padding" "top-padding:" "1" "left-padding" "left-padding:" "body" "content" "scroller" "name" "name:" "!" "install")}
        {Lisp-Entry "value-row" property #f 146 12 146 21 ()}
        {Lisp-Entry "form-model" method #f 149 20 149 30 ("nextmethod" "else" "Pathname-Value-Text-View" "body" "get-name" "case" "form")}
        {Lisp-Entry "get-value-row" method #f 155 18 155 31 ("value-row")}
        {Lisp-Entry "set-value-row" method #f 159 18 159 31 ("body" "locate" "set-value-row" "value-row" "set!" "value")}
        {Lisp-Entry "moniker-update" method #f 164 20 164 34 ("get-moniker" "value-row" "enter-pathname-value")}}
      {Lisp-Entry "Pathname-Value-Text-View" class #f 173 7 173 31 ("initialize" "Moniker-Text-View")
        {Lisp-Entry "value-row" property #f 176 12 176 21 ()}
        {Lisp-Entry "get-value-row" accessor #f 176 46 176 54 ()}
        {Lisp-Entry "set-value-row" accessor #f 176 46 176 54 ()}
        {Lisp-Entry "up-arrow-move" method #f 184 20 184 33 ("value-row" "editor-up-arrow" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method #f 188 20 188 35 ("value-row" "editor-down-arrow" "scroll?" "extend?")}
        {Lisp-Entry "document-menu" method #f 192 11 192 24 ()}
        {Lisp-Entry "focus-lose" method #f 201 20 201 30 ("value-row" "editor-focus-lose" "nextmethod")}
        {Lisp-Entry "focus-master" method #f 206 20 206 32 ("value-row" "get-tree")}}}})
"Period-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Period-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Period-Domain" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("time" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Period-Domain" class #f 45 7 45 20 ("Domain")
        {Lisp-Entry "validate-value" method #f 53 20 53 34 ("property:" "format" "message" "message:" "Integrity-Violation" "new" "add-violation" "Period" "is-not?" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 63 20 63 27 ("get-end" "get-start" "present-date-day" "format" "value")}}}})
"Period-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Period-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Period-Row" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Period-Row" class #f 43 7 43 17 ("Value-Row")}
      {Lisp-Entry "Period-Row" class #f 49 7 49 17 ("Value-Row")
        {Lisp-Entry "present" method #f 57 11 57 18 ("get-end" "get-start" "present-date-day" "format" "period" "lambda" "map" "join" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "get-edited-value" method #f 73 11 73 27 ("Date" "parse-date" "Period" "new" "separator" "separator:" "parse-strings" "end" "start" "bind" "lambda" "map" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "string" "let")}}}})
"Periods-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Periods-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Periods-Row" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Periods-Row" class #f 43 20 43 31 ("Combo-Row")}
      {Lisp-Entry "Periods-Row" class #f 49 20 49 31 ("Combo-Row")
        {Lisp-Entry "initialize" method #f 57 11 57 21 ("choose" "set-kind" "nextmethod" "apply" "rest")}
        {Lisp-Entry "combo-choose" method #f 67 11 67 23 ("focus-editor" "enter-edited-value" "set-edited-value" "periods" "periods:" "Periods-Chooser" "get-modal" "value" "let")}
        {Lisp-Entry "present" method #f 80 11 80 18 ("get-end" "get-start" "present-date-day" "format" "period" "lambda" "map" "join" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "get-edited-value" method #f 96 11 96 27 ("Date" "parse-date" "Period" "new" "separator" "separator:" "parse-strings" "end" "start" "bind" "lambda" "map" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" method #f 106 11 106 27 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Point-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Point-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Point-Domain" module #f 37 8 37 41 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Point-Domain" class #f 44 7 44 19 ("Text-Domain")
        {Lisp-Entry "present" method #f 52 20 52 27 ("get-v" "get-h" "format" "not" "if" "pos")}
        {Lisp-Entry "parse" method #f 65 20 65 25 ("Point" "new" "v" "h" "bind" "read-delimited-string" "lst" "let" "text")}}}})
"Presentation-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Presentation-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Presentation-Domain" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.locale" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Presentation-Domain" class #f 45 7 45 26 ("Info-Domain")
        {Lisp-Entry "validate-value" method #f 53 20 53 34 ("property:" "format" "message" "message:" "Integrity-Violation" "new" "add-violation" "Locales" "is-not?" "string?" "not" "and" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 63 20 63 27 ("->string" "value")}
        {Lisp-Entry "setup-entry" method #f 72 20 72 31 ("self" "domain" "domain:" "get-size" "size" "size:" "parent" "parent:" "Presentation-Entry" "new" "client" "view")}}}})
"Presentation-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Presentation-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.entry.Presentation-Entry" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.tie" "jazz.locale" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Presentation-Entry" class #f 46 7 46 25 ("String-Entry")
        {Lisp-Entry "get-value" method #f 54 20 54 29 ("empty-string?" "if" "text" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-value" method #f 61 20 61 29 ("not" "if" "text" "locate" "set-string-content" "value")}}}})
"Properties-Card"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "card" "Properties-Card.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.card.Properties-Card" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Properties-Card" class #f 46 20 46 35 ("Card")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("Properties-Tree" "on-context-menu" "tree" "Event-Handler" "context-menu-handler" "context-menu-handler:" "header" "Tree-Header" "content" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "document" "style" "style:" "scroller" "Scroller-View" "tools" "name" "name:" "Layout-View" "fill" "layout-type" "layout-type:" "install")}
        {Lisp-Entry "get-tree" method #f 64 18 64 26 ("tree" "locate")}
        {Lisp-Entry "on-editor" method #f 73 20 73 29 ("nextmethod" "else" "reset-modified-properties" ":saved" "property" "property:" "get-property" "select-property" ":property-selected" ":saving" ":branch-changing" "get-force?" "force?" "force?:" "get-selection" "set-client" ":selection-changed" "get-tree" "save-edition" ":selection-changing" "get-kind" "case" "evt")}
        {Lisp-Entry "client-update" method #f 92 20 92 33 ("get-tree" "client-update")}
        {Lisp-Entry "call-property-change" method #f 101 20 101 40 ("value" "value:" "property" "property:" "property-change" "car" "eq?" "client" "not-null?" "and" "when" "component:" "get-property" "component" "let" "evt")}
        {Lisp-Entry "property-change" method #f 107 20 107 35 ("get-tree" "property-change" "value" "property" "component")}
        {Lisp-Entry "enter-value" method #f 116 20 116 31 ("client" "designer" "safe-set-property" "component" "lambda" "for-each" "value" "property")}}}})
"Properties-Descriptor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "descriptor" "Properties-Descriptor.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.descriptor.Properties-Descriptor" module #f 37 18 37 64 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer.descriptor")}
      {Lisp-Entry "Properties-Descriptor" class #f 44 20 44 41 ("Component")
        {Lisp-Entry "default" property #f 47 12 47 19 ()}
        {Lisp-Entry "get-default" accessor #f 47 34 47 42 ()}
        {Lisp-Entry "set-default" accessor #f 47 34 47 42 ()}
        {Lisp-Entry "categorized" property #f 48 12 48 23 ()}
        {Lisp-Entry "get-categorized" accessor #f 48 34 48 42 ()}
        {Lisp-Entry "set-categorized" accessor #f 48 34 48 42 ()}
        {Lisp-Entry "component-get-default-property" method #f 51 26 51 56 ("default" "either" "component")}
        {Lisp-Entry "component-get-categorized-properties" method #f 55 26 55 62 ("categorized" "either" "component")}
        {Lisp-Entry "get-class-descriptor" method #f 64 25 64 45 ("Properties-Descriptor-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 73 11 73 17 ()
        {Lisp-Entry "import" anonymous #f 76 1 76 7 ("jazz.designer")}
        {Lisp-Entry "Properties-Descriptor-Descriptor" class #f 79 7 79 39 ("Component-Descriptor")
          {Lisp-Entry "get-class-descriptor" method #f 82 25 82 45 ("Properties-Meta-Descriptor")}}}}})
"Properties-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "card" "Properties-Manager.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.card.Properties-Manager" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Properties-Manager" class #f 48 20 48 38 ("Properties-Card")
        {Lisp-Entry "form" anonymous #f 51 3 51 7 ("header" "content" "tool" "style" "style:" "scroller" "name" "name:" "!" "install")}
        {Lisp-Entry "destroy" method #f 58 20 58 27 ("nextmethod" "self" "close-selected" "get-application" "appl" "let")}
        {Lisp-Entry "external-name" method #f 64 25 64 38 ("properties-card" "rest")}
        {Lisp-Entry "host-icon" method #f 73 25 73 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 77 25 77 35 ()}
        {Lisp-Entry "host-install" method #f 81 20 81 32 ("on-selected-change" "method-name" "method-name:" "self" "target" "target:" "Event-Handler" "new" "add-selected-listener" "get-application" "appl" "let")}
        {Lisp-Entry "host-uninstall" method #f 86 20 86 34 ("self" "remove-selected-listener" "get-application" "appl" "let")}
        {Lisp-Entry "client-activate" method #f 91 20 91 35 ("get-selection" "set-client" "get-designer" "set-designer" "set-editor" "View-Editor" "is?" "when" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method #f 99 20 99 37 ("set-client" "set-designer" "set-editor")}
        {Lisp-Entry "focus-default" method #f 110 20 110 33 ("acquire-focus" "locate" "tree" "let")}
        {Lisp-Entry "get-tools-view" method #f 115 20 115 34 ("tools" "locate")}
        {Lisp-Entry "install-in-host" method #f 124 20 124 35 ("categorized" "tree" "set-filter" "header" "scroller" "locate" "set-flat?" "Docked-Host" "is?" "when" "nextmethod" "host")}
        {Lisp-Entry "on-selected-change" method #f 137 11 137 29 ("else" "get-designer" "let*" "Component-Editor" "force?:" "set-client" "set-designer" "set-editor" "get-force?" "force?" "get-selected" "client" "designer" "editor" "Designer" "typecase" "get-owner" "owner" "let" "evt")}
        {Lisp-Entry "on-editor" method #f 167 20 167 29 ("nextmethod" "else" ":selection-changed" "get-kind" "case" "evt")}}}})
"Properties-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "card" "Properties-Tree.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.card.Properties-Tree" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Filter-Width" definition #f 50 12 50 24 ("20")}
      {Lisp-Entry "Properties-Tree" class #f 54 20 54 35 ("explicit" "categorized" "initialize" "Tree-View")
        {Lisp-Entry "filter" property #f 57 12 57 18 ()}
        {Lisp-Entry "filter-locked?" property #f 58 12 58 26 ()}
        {Lisp-Entry "get-filter-locked?" accessor #f 58 63 58 71 ()}
        {Lisp-Entry "set-filter-locked?" accessor #f 58 63 58 71 ()}
        {Lisp-Entry "filter-visible?" property #f 59 12 59 27 ()}
        {Lisp-Entry "get-filter-visible?" accessor #f 59 63 59 71 ()}
        {Lisp-Entry "set-filter-visible?" accessor #f 59 63 59 71 ()}
        {Lisp-Entry "property-handler" property #f 60 12 60 28 ()}
        {Lisp-Entry "get-property-handler" accessor #f 60 63 60 71 ()}
        {Lisp-Entry "set-property-handler" accessor #f 60 63 60 71 ()}
        {Lisp-Entry "form" anonymous #f 63 3 63 7 ("center" "justification" "justification:" "25" "owner" "Tree-Image-Column" "192" "Value-Column" "toplevel-controls?" "toplevel-controls?:" "140" "width" "width:" "title" "title:" "property" "name" "name:" "Property-Column" "on-context-menu" ":form" "Event-Handler" "context-menu-handler" "context-menu-handler:" ":images" "portfolio" "portfolio:" "focused-on-descendants?" "focused-on-descendants?:" "auto-expand/collapse?" "auto-expand/collapse?:" "row" "selection-mode" "selection-mode:" "multiple-selection?" "multiple-selection?:" "draggable?" "draggable?:" "value" "filled-column" "filled-column:" "install")}
        {Lisp-Entry "get-card" method #f 75 18 75 26 ("5" "child")}
        {Lisp-Entry "get-editor" method #f 79 18 79 28 ("get-card" "get-editor")}
        {Lisp-Entry "get-client" method #f 83 18 83 28 ("get-card" "get-client")}
        {Lisp-Entry "get-designer" method #f 87 18 87 30 ("get-card" "get-designer")}
        {Lisp-Entry "double-click" method #f 96 20 96 32 ("self" "acquire" "double-click" "when" "get-selected-row" "row" "let" "pos")}
        {Lisp-Entry "on-context-menu" method #f 102 11 102 26 ("context-menu" "else" "5" "Point" "self" "client" "client:" "Filter-Menu" "new" "track-popup-menu" "get-v" "Filter-Width" "get-h" "<" "and" "when" "16" "header-height" "filter-visible?" "not" "filter-locked?" "or" "unless" "Tree-Header" "is?" "cond" "get-position" "pos" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "new-property-menu" method #f 114 11 114 28 ("layout-menu" "consolidate" "distribute" "end-consolidate-group" "locate" "set-visible?" "begin" "branch-installed?" "if" "get-creator" "creator" "car" "any" "self" "client:" "Property-Menu" "new" "menu" "let*" "client")}
        {Lisp-Entry "focus-gained" method #f 133 20 133 32 ("focus-delegate" "nextmethod")}
        {Lisp-Entry "focus-delegate" method #f 138 20 138 34 ("editor-focus-delegate" "editable?" "and" "when" "selected-row" "row" "let")}
        {Lisp-Entry "save-edition" method #f 149 21 149 33 ("save-edition" "in-edition?" "Value-Row" "is?" "and" "when" "auto-expanded-row" "row" "let")}
        {Lisp-Entry "notify-property-change" method #f 160 18 160 40 ("property:" ":property-change" "Event" "new" "self" "invoke-handler" "property-handler" "when" "property")}
        {Lisp-Entry "client-update" method #f 170 18 170 31 ("preserving-update" "close-auto-expanded" "lambda" "with-update-locked")}
        {Lisp-Entry "find-property-index" method #f 177 11 177 30 ("continuation-return" "field-name" "eq?" "symbol?" "if" "get-property" "property" "let" "Value-Row" "is?" "when" "rank" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "target")}
        {Lisp-Entry "preserving-update" method #f 196 11 196 28 ("auto-expand?" "auto-expand?:" "set-single-selection" "find-property-index" "index" "update" "default" "selected-property" "selected" "remove-every-row" "if" "class-of" "category-field" "get-default-property" "name" "Component" "is?" "car" "component" "length" "1" "=" "when" "get-client-default-property" "null?" "not" "or" "get-client" "client" "let" "empty-client?" "define")}
        {Lisp-Entry "update" method #f 220 11 220 17 ("with-update-locked" "remove-every-row" "get-designer" "get-editor" "null?" "get-client" "filter" "filter:" "get-filtered-properties" "filter-by-rights" "get-component-properties" "Component" "is?" "intersection" "when" "get-client-properties" "position:" "row:" "set-color" "set-title" "car" "set-value" "set-property" "set-children" "17" "set-row-height" "self" "set-parent" "owner-image" "owner" "label" "Medium-Gray" "Dark-Red" "Color" "color" "color:" "node" "property-presentation" "string=?" "apply" "1" "length" "<=" "uniform?" "find-changed-property" "not" "or" "changed?" "get-active-trait" "and" "trait" "get-creator" "creator" "present" "value" "presented" "read-property" "component" "map" "values" "get-image" "domain:" "Domain-Row" "class-of" "get-category" "category" "property-domain" "domain" "let*" "position" "Tree-Image" "Tree-Label" "Image-Resource" "image" "image:" "title:" "Tree-Node" "new" "list" "children" "children:" "expanded" "state" "state:" "father:" "add-row" "row" "let" "title" "bind" "collapsed" "insert-property" "pair?" "if" "property" "lambda" "for-each" "properties" "father" "designer" "editor" "any" "client" "insert-properties" "define")}
        {Lisp-Entry "owner-image" method #f 287 11 287 22 ("default-owner-image" "else" "root-owner-image" "get-reference" "eq?" "trait-owner-image" "Trait" "is?" "cond" "find-owner" "owner" "car" "component" "let*" "0" "get-rank" "/=" "length" "1" "=" "and" "when" "property" "category" "client" "designer")}
        {Lisp-Entry "default-owner-image" method #f 296 29 296 48 ()}
        {Lisp-Entry "root-owner-image" method #f 300 29 300 45 ("Image-Resource")}
        {Lisp-Entry "trait-owner-image" method #f 304 29 304 46 ("Image-Resource")}
        {Lisp-Entry "reset-modified-properties" method #f 308 21 308 46 ("0" "Cell" "new" "invalidate-cell" "set-color" "get-color" "get-children" "car" "node" "let" "Value-Row" "is?" "when" "rank" "row" "lambda" "for-each-visible-row")}
        {Lisp-Entry "filter-by-rights" definition #f 323 15 323 31 ("filter-properties" "when" "find-component-rights" "component-rights" "get-client" "reference" "let*" "not" "if" "get-rights" "and" "rights" "let" "properties" "editor" "component")}
        {Lisp-Entry "selected-row" method #f 338 11 338 23 ("Value-Row" "is?" "when" "get-selected-row" "row" "let")}
        {Lisp-Entry "selected-property" method #f 344 11 344 28 ("get-property" "when" "selected-row" "row" "let")}
        {Lisp-Entry "select-property" method #f 350 18 350 33 ("set-single-selection" "generate-event?" "generate-event?:" "auto-expand?" "auto-expand?:" "set-selection" "not" "if" "find-property-index" "rank" "let" "property")}
        {Lisp-Entry "consolidate-property" method #f 362 11 362 31 ("set-edited-modified?" "set-property" "trait:" "remove-property" "trait" "for-each-trait" "read-property" "value" "get-creator" "creator" "component" "lambda" "for-each" "get-designer" "designer" "get-property" "property" "save-edition" "selected-row" "row" "let" "yes" "eq?" "when" "confirmation" "type" "type:" "length" "format-plural" "format" "message-box" "code" "get-client" "client" "let*")}
        {Lisp-Entry "distribute-property" method #f 381 11 381 30 ("set-edited-modified?" "trait:" "set-property" "trait" "for-each-trait" "read-property" "value" "get-creator" "creator" "component" "lambda" "for-each" "get-designer" "designer" "get-property" "property" "save-edition" "selected-row" "row" "let" "yes" "eq?" "when" "confirmation" "type" "type:" "length" "format-plural" "format" "message-box" "code" "get-client" "client" "let*")}
        {Lisp-Entry "header-click" method #f 404 20 404 32 ("nextmethod" "end-edition" "close-auto-expanded" "in-edition?" "Value-Row" "is?" "and" "when" "auto-expanded-row" "row" "let" "column")}
        {Lisp-Entry "get-filter" method #f 418 18 418 28 ("filter")}
        {Lisp-Entry "set-filter" method #f 422 18 422 28 ("update" "node-column" "get-header" "invalidate-column-header" "set!" "filter" "neq?" "when" "flt")}
        {Lisp-Entry "toggle-filter" method #f 429 18 429 31 ("categorized" "handlers" "properties" "infos" "set-filter" "all" "filter" "case")}
        {Lisp-Entry "property-change" method #f 443 18 443 33 ("invalidate-cell" "class-of" "get-category" "get-client" "get-designer" "owner-image" "set-image" "get-cell-data" "data" "2" "Cell" "new" "cell" "let*" "update" "get-row" "row" "when" "find-property-index" "rank" "let" "value" "property" "component")}}
      {Lisp-Entry "Property-Column" class #f 459 7 459 22 ("initialize" "Tree-Node-Column")
        {Lisp-Entry "filter-down?" slot #f 462 8 462 20 ()}
        {Lisp-Entry "draw-header" method #f 465 20 465 31 ("down?" "get-column-title" "localize" "-" "get-filter-image" "1" "+" "draw-image-at" "filter-down?" "Filter-Width" "draw-header-at" "nextmethod" "parent" "get-filter-visible?" "not" "if" "enabled?" "flat?" "spaced?" "sorted" "height" "width" "v" "h" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-image-at" method #f 473 11 473 24 ("+" "Medium" "Color" "get-application" "get-images-portfolio" "draw-opaque-image" "0" "1" "filter-down?" "if" "offset" "let" "image" "v" "h" "context" "surface")}
        {Lisp-Entry "header-down" method #f 478 20 478 31 ("self" "get-header" "invalidate-column-header" "down?" "filter-down?" "set!" "unless" "get-filter-locked?" "Filter-Width" "get-h" "<" "in-filter?" "let" "nextmethod" "parent" "get-filter-visible?" "not" "if" "pos")}
        {Lisp-Entry "header-up" method #f 491 20 491 29 ("header-click" "self" "get-header" "invalidate-column-header" "toggle-filter" "when" "down?" "set!" "filter-down?" "filter?" "let" "Filter-Width" "get-h" "<" "unless" "get-filter-locked?" "nextmethod" "parent" "get-filter-visible?" "not" "if" "pos")}
        {Lisp-Entry "draw-data" method #f 507 20 507 29 ("0" "draw-title" "draw-image" "draw-level" "draw-background" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "get-filter-image" method #f 514 11 514 27 ("categorized" "handlers" "properties" "infos" "Image-Resource" "all" "parent" "get-filter" "case")}
        {Lisp-Entry "get-column-title" method #f 523 11 523 27 ("categorized" "handlers" "properties" "infos" "all" "parent" "get-filter" "case")}}
      {Lisp-Entry "Value-Column" class #f 537 7 537 19 ("Tree-Label-Column")
        {Lisp-Entry "complete-mouse-down" method #f 540 20 540 39 ("auto-expand/collapse" "when" "nextmethod" "get-line" "get-row" "and" "row" "parent" "get-auto-expand/collapse?" "auto?" "let*" "control?" "shift?" "pos" "cell")}
        {Lisp-Entry "draw-data" method #f 549 20 549 29 ("self" "draw-data" "get-value" "value" "let" "Value-Row" "is?" "when" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Filter-Menu" class #f 560 7 560 18 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f 563 3 563 7 ("categorized" "handlers" "properties" "infos" "Separator-Item" "on-action" ":form" "Event-Handler" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "title" "title:" "all" "name" "name:" "Radio-Item" "install")}
        {Lisp-Entry "finish" method #f 574 20 574 26 ("client" "get-filter" "locate" "set-selected?" "nextmethod" "rest")}
        {Lisp-Entry "on-action" method #f 579 11 579 20 ("client" "set-filter" "get-sender" "get-name" "filter" "let" "evt")}}
      {Lisp-Entry "Property-Menu" class #f 589 7 589 20 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f 592 3 592 7 ("on-distribute" "distribute" "end-consolidate-group" "Separator-Item" "on-consolidate" ":form" "Event-Handler" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "title" "title:" "consolidate" "name" "name:" "Radio-Item" "install")}
        {Lisp-Entry "on-consolidate" method #f 599 11 599 25 ("client" "consolidate-property" "evt")}
        {Lisp-Entry "on-distribute" method #f 603 11 603 24 ("client" "distribute-property" "evt")}}}})
"Property-Descriptor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "descriptor" "Property-Descriptor.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.descriptor.Property-Descriptor" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer.descriptor")}
      {Lisp-Entry "Property-Descriptor" class #f 44 20 44 39 ("initialize" "Component")
        {Lisp-Entry "title" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-title" accessor #f 47 45 47 53 ()}
        {Lisp-Entry "set-title" accessor #f 47 45 47 53 ()}
        {Lisp-Entry "category" property #f 48 12 48 20 ()}
        {Lisp-Entry "get-category" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "set-category" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "get-domain" method #f 56 18 56 28 ("domain" "find-component")}
        {Lisp-Entry "get-class-descriptor" method #f 65 25 65 45 ("Property-Descriptor-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 74 11 74 17 ()
        {Lisp-Entry "import" anonymous #f 77 1 77 7 ("jazz.designer")}
        {Lisp-Entry "Property-Descriptor-Descriptor" class #f 80 7 80 37 ("Component-Descriptor")
          {Lisp-Entry "get-class-descriptor" method #f 83 25 83 45 ("Property-Meta-Descriptor")}}}}})
"Property-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "property" "Property-Editor.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.property.Property-Editor" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Property-Editor" interface #f 43 11 43 26 ()
        {Lisp-Entry "get-manager" method #f 46 35 46 46 ()}
        {Lisp-Entry "set-manager" method #f 47 35 47 46 ("manager")}
        {Lisp-Entry "validate" method #f 48 35 48 43 ()}
        {Lisp-Entry "get-violation" method #f 49 35 49 48 ()}
        {Lisp-Entry "set-violation" method #f 50 35 50 48 ("violation")}
        {Lisp-Entry "get-presentation" method #f 51 35 51 51 ()}
        {Lisp-Entry "set-presentation" method #f 52 35 52 51 ("presentation")}
        {Lisp-Entry "get-value" method #f 53 35 53 44 ()}
        {Lisp-Entry "set-value" method #f 54 35 54 44 ("value")}
        {Lisp-Entry "present-value" method #f 55 35 55 48 ("value")}
        {Lisp-Entry "get-modified?" method #f 56 35 56 48 ()}
        {Lisp-Entry "set-modified?" method #f 57 35 57 48 ("flag")}
        {Lisp-Entry "set-editable?" method #f 58 35 58 48 ("flag")}
        {Lisp-Entry "set-enabled?" method #f 59 35 59 47 ("flag")}}}})
"Property-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Property-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.entry.Property-Entry" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "Property-Entry" class #f 46 7 46 21 ("generate" "override" "initialize" "Property-Editor" "Layout-View")
        {Lisp-Entry "manager" property #f 49 12 49 19 ()}
        {Lisp-Entry "domain" property #f 50 12 50 18 ()}
        {Lisp-Entry "get-domain" accessor #f 50 44 50 52 ()}
        {Lisp-Entry "set-domain" accessor #f 50 44 50 52 ()}
        {Lisp-Entry "violation" slot #f 53 8 53 17 ()}
        {Lisp-Entry "form" anonymous #f 56 3 56 7 ("fill" "layout-type" "layout-type:" "install")}
        {Lisp-Entry "validate" method #f 65 20 65 28 ("get-presentation" "validate-text" "domain")}
        {Lisp-Entry "get-violation" method #f 69 20 69 33 ("violation")}
        {Lisp-Entry "set-violation" method #f 73 20 73 33 ("invalidate-entry" "violation" "set!" "value")}
        {Lisp-Entry "invalidate-entry" method #f 78 18 78 34 ("1" "get-bounds" "inflate-rect" "invalidate-rect")}
        {Lisp-Entry "tab-view" method #f 87 29 87 37 ()}
        {Lisp-Entry "setup-for-grid" method #f 96 29 96 43 ()}
        {Lisp-Entry "get-class-descriptor" method #f 105 25 105 45 ("Property-Entry-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 114 11 114 17 ()
        {Lisp-Entry "import" anonymous #f 117 1 117 7 ("jazz.designer")}
        {Lisp-Entry "Property-Entry-Descriptor" class #f 120 7 120 32 ("Layout-View-Descriptor")
          {Lisp-Entry "form" anonymous #f 123 3 123 7 ("domain" "manager" "name" "name:" "Property-Descriptor" ">" "<properties" "<properties~>" "install")}
          {Lisp-Entry "component-get-presentation" method #f 131 20 131 46 ("get-value" "component")}
          {Lisp-Entry "component-set-presentation" method #f 136 20 136 46 ("set-value" "presentation" "component")}}}}})
"Property-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "property" "Property-Manager.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.property.Property-Manager" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Property-Manager" interface #f 40 11 40 27 ()
        {Lisp-Entry "editor-focus-gained" method #f 43 35 43 54 ("editor")}
        {Lisp-Entry "editor-focus-lose" method #f 44 35 44 52 ("editor")}
        {Lisp-Entry "editor-left-arrow" method #f 45 35 45 52 ("editor")}
        {Lisp-Entry "editor-right-arrow" method #f 46 35 46 53 ("editor")}
        {Lisp-Entry "editor-up-arrow" method #f 47 35 47 50 ("editor")}
        {Lisp-Entry "editor-down-arrow" method #f 48 35 48 52 ("editor")}
        {Lisp-Entry "editor-return" method #f 49 35 49 48 ("editor")}}}})
"Property-Moniker"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "moniker" "Property-Moniker.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.moniker.Property-Moniker" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.io")}
      {Lisp-Entry "Property-Moniker" class #f 43 20 43 36 ("Moniker")
        {Lisp-Entry "designer" slot #f 52 18 52 26 ()}
        {Lisp-Entry "get-designer" accessor #f 52 35 52 43 ()}
        {Lisp-Entry "reference" slot #f 53 18 53 27 ()}
        {Lisp-Entry "get-reference" accessor #f 53 35 53 43 ()}
        {Lisp-Entry "trait" slot #f 54 18 54 23 ()}
        {Lisp-Entry "get-trait" accessor #f 54 35 54 43 ()}
        {Lisp-Entry "class" slot #f 55 18 55 23 ()}
        {Lisp-Entry "get-class" accessor #f 55 35 55 43 ()}
        {Lisp-Entry "path" slot #f 56 18 56 22 ()}
        {Lisp-Entry "get-path" accessor #f 56 38 56 46 ()}
        {Lisp-Entry "set-path" accessor #f 56 38 56 46 ()}
        {Lisp-Entry "property" slot #f 57 18 57 26 ()}
        {Lisp-Entry "image" slot #f 58 18 58 23 ()}
        {Lisp-Entry "get-image" accessor #f 58 35 58 43 ()}
        {Lisp-Entry "presented" slot #f 59 18 59 27 ()}
        {Lisp-Entry "location" slot #f 60 18 60 26 ()}
        {Lisp-Entry "get-location" accessor #f 60 35 60 43 ()}
        {Lisp-Entry "extension" slot #f 61 18 61 27 ()}
        {Lisp-Entry "print" method #f 64 20 64 25 ("property" "path" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "compare-object" method #f 70 20 70 34 (":not-equal" "else" ":equal" "get-property" "property" "get-path" "path" "=" "get-trait" "trait" "get-designer" "designer" "eq?" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "compare-pathname" method #f 82 20 82 36 (":equal" "compare-object" "eq?" "object")}
        {Lisp-Entry "initialize" method #f 91 20 91 30 ("extension~self" "location~self" "presented~self" "image~self" "property~self" "path~self" "class~self" "trait~self" "reference~self" "self" "designer~self" "set!" "nextmethod" "extension" "location" "presented" "image" "property" "path" "class" "trait" "reference" "designer")}
        {Lisp-Entry "get-component-name" method #f 110 18 110 36 ("trait" "trait:" "path" "designer" "get-name")}
        {Lisp-Entry "get-component-property" method #f 114 18 114 40 ("trait" "trait:" "path" "designer" "get-property" "property")}
        {Lisp-Entry "set-component-property" method #f 118 18 118 40 ("trait" "trait:" "path" "designer" "set-property" "value" "property")}
        {Lisp-Entry "get-writable?" method #f 127 20 127 33 ()}
        {Lisp-Entry "exists?" method #f 131 20 131 27 ()}
        {Lisp-Entry "get-base" method #f 135 20 135 28 ("presented")}
        {Lisp-Entry "get-file" method #f 139 20 139 28 ()}
        {Lisp-Entry "get-name" method #f 143 20 143 28 ("presented")}
        {Lisp-Entry "get-extension" method #f 147 20 147 33 ("extension")}
        {Lisp-Entry "get-modification-time" method #f 151 20 151 41 ()}
        {Lisp-Entry "present" method #f 155 20 155 27 ("property" "path" "format")}
        {Lisp-Entry "present-base" method #f 159 20 159 32 ("presented")}
        {Lisp-Entry "present-location" method #f 163 20 163 36 ("location" "join")}
        {Lisp-Entry "load-lines" method #f 167 20 167 30 ("property" "get-component-property" "JzLoadLines" "rest")}
        {Lisp-Entry "save-lines" method #f 172 20 172 30 ("join-lines" "property" "set-component-property" "rest" "lines")}}}})
"Property-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "property" "Property-View.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.property.Property-View" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Property-View" class #f 46 7 46 20 ("initialize" "Layout-View")
        {Lisp-Entry "id" property #f 49 12 49 14 ()}
        {Lisp-Entry "get-id" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "set-id" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "editor" property #f 50 12 50 18 ()}
        {Lisp-Entry "get-editor" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "set-editor" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "editable?" property #f 51 12 51 21 ()}
        {Lisp-Entry "get-editable?" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "set-editable?" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "form" anonymous #f 54 3 54 7 ("fill" "layout-type" "layout-type:" "White" "Color" "background" "background:" "install")}
        {Lisp-Entry "add-child" method #f 63 20 63 29 ("set-editable?" "editable?" "not" "when" "nextmethod" "child")}
        {Lisp-Entry "get-entry" method #f 69 26 69 35 ("first-child")}}}})
"Property-Violation"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "property" "Property-Violation.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.property.Property-Violation" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Property-Violation" class #f 40 20 40 38 ("Object")
        {Lisp-Entry "message" slot #f 43 8 43 15 ()}
        {Lisp-Entry "get-message" accessor #f 43 23 43 31 ()}
        {Lisp-Entry "initialize" method #f 46 20 46 30 ("self" "message~self" "set!" "nextmethod" "message" "message:")}
        {Lisp-Entry "print" method #f 51 20 51 25 ("message" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Range-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Range-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Range-Domain" module #f 37 8 37 41 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Range-Domain" class #f 44 7 44 19 ("Text-Domain")
        {Lisp-Entry "present" method #f 52 20 52 27 ("get-col" "get-line" "format" "get-end" "end" "get-start" "start" "let" "not" "if" "range")}
        {Lisp-Entry "parse" method #f 69 20 69 25 ("Cell" "Range" "new" "end-col" "end-line" "start-col" "start-line" "bind" "read-delimited-string" "lst" "let" "equal?" "if" "text")}}}})
"Rect-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Rect-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Rect-Domain" module #f 37 8 37 40 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Rect-Domain" class #f 44 7 44 18 ("Text-Domain")
        {Lisp-Entry "present" method #f 52 20 52 27 ("get-bottom" "get-right" "get-top" "get-left" "format" "not" "if" "rect")}
        {Lisp-Entry "parse" method #f 67 20 67 25 ("Rect" "new" "bottom" "right" "top" "left" "bind" "read-delimited-string" "lst" "let" "equal?" "if" "text")}}}})
"Reference-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Reference-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Reference-Row" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Reference-Row" class #f 43 20 43 33 ("Combo-Row")}}})
"Row-Formatted-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Row-Formatted-Text-View.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.Row-Formatted-Text-View" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Row-Formatted-Text-View" class #f 46 20 46 43 ("Formatted-Text-View")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("Text-Base" "Text-Style" "base-style" "base-style:" "install")}
        {Lisp-Entry "get-value-row" method #f 58 11 58 24 ("4" "child")}
        {Lisp-Entry "get-context-menu" method #f 67 20 67 36 ()}
        {Lisp-Entry "focus-lose" method #f 76 20 76 30 ("get-value-row" "get-father" "invalidate-drawing" "nextmethod")}
        {Lisp-Entry "focus-master" method #f 81 20 81 32 ("get-value-row" "get-tree")}}}})
"Row-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Row-Text-View.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.Row-Text-View" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Row-Text-View" class #f 46 20 46 33 ("Plain-Text-View")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("Text-Base" "Text-Style" "base-style" "base-style:" "install")}
        {Lisp-Entry "get-value-row" method #f 58 11 58 24 ("4" "child")}
        {Lisp-Entry "document-menu" method #f 67 11 67 24 ()}
        {Lisp-Entry "focus-lose" method #f 76 20 76 30 ("get-value-row" "get-father" "invalidate-drawing" "nextmethod")}
        {Lisp-Entry "focus-master" method #f 81 20 81 32 ("get-value-row" "get-tree")}}}})
"Save-Chooser"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "choosers" "Save-Chooser.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer.choosers.Save-Chooser" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.graphic" "jazz.jml" "jazz.ui" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Save-Chooser" class #f 47 7 47 19 ("initialize" "View")
        {Lisp-Entry "modules" property #f 50 12 50 19 ()}
        {Lisp-Entry "get-modules" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "set-modules" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "form" anonymous #f 53 3 53 7 ("file" "class" "Trait" "on-cancel" "311" "cancel" "on-ok" ":host" "default?" "default?:" "24" "80" "182" "225" "ok" "Push-Button" "172" "112" "202" "class-name-entry" "Entry-Widget" "class-name-label" "170" "content-change-handler" "content-change-handler:" ">" "<box" "<box~>" "22" "175" "85" "200" "module-combo" "Combo-Widget" "60" "module-label" "top-padding" "top-padding:" "2" "left-padding" "left-padding:" "body" "on-content-change" "moniker-update-handler" "moniker-update-handler:" "save" "mode" "mode:" "moniker" "!" "file-entry" "Pathname-Entry" "entry" "style" "style:" "edge" "border-type" "border-type:" "19" "201" "100" "173" "file-border" "Border-View" "visible?" "visible?:" "40" "102" "136" "file-label" "101" "59" "110" "Vertical-Line" "8" "48" "0" "Horizontal-Line" "on-file" "114" "file-button" "on-class" ":form" "Event-Handler" "action-handler" "action-handler:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "88" "25" "class-button" "Radio-Button" "Label" "27" "30" "description" "Caption" "Font" "font" "font:" "16" "350" "9" "10" "Point" "position" "position:" "title:" "title" "name" "name:" "Label-View" "216" "400" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "host-title" method #f 86 25 86 35 ()}
        {Lisp-Entry "finish" method #f 90 20 90 26 ("class-button" "locate" "set-selected?" "class" "install-branch" "setup-modules" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 97 20 97 33 ("get-active-trait-name" "focus-branch")}
        {Lisp-Entry "get-module-combo" method #f 101 11 101 27 ("box" "module-combo" "locate")}
        {Lisp-Entry "get-file-entry" method #f 105 11 105 25 ("file-entry" "locate")}
        {Lisp-Entry "get-class-name-text" method #f 109 11 109 30 ("text" "class-name-entry" "locate")}
        {Lisp-Entry "setup-modules" method #f 113 11 113 24 ("symbol->string" "map" "modules" "cons" "zip" "get-module-combo" "set-choices")}
        {Lisp-Entry "get-modal-result" method #f 124 20 124 36 ("get-file-entry" "file" "list" "get-class-name-text" "get-string-content" "class-string" "get-module-combo" "get-value" "module-name" "let" "class" "get-active-trait-name" "case")}
        {Lisp-Entry "on-class" method #f 139 11 139 19 ("class" "install-branch" "evt")}
        {Lisp-Entry "on-file" method #f 143 11 143 18 ("file" "install-branch" "evt")}
        {Lisp-Entry "on-content-change" method #f 147 11 147 28 ("update-ok" "evt")}
        {Lisp-Entry "install-branch" method #f 156 11 156 25 ("update-ok" "focus-branch" "player" "when" "locate" "set-active-trait" "trait")}
        {Lisp-Entry "focus-branch" method #f 162 11 162 23 ("get-file-entry" "tab-view" "file" "get-module-combo" "class" "case" "acquire-focus" "trait")}
        {Lisp-Entry "update-ok" method #f 173 11 173 20 ("get-modal-result" "and" "ok" "locate" "set-enabled?")}}}})
"Search-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Search-Tree.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.Search-Tree" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Search-Tree" class #f 47 20 47 31 ("explicit" "initialize" "Details-Tree")
        {Lisp-Entry "target" property #f 50 12 50 18 ()}
        {Lisp-Entry "form" anonymous #f 53 3 53 7 ("kind" "275" "location" "Tree-Label-Column" "toplevel-controls?" "toplevel-controls?:" "100" "width" "width:" "title" "title:" "name" "name:" "Tree-Node-Column" "on-selection-change" ":self" "Event-Handler" "selection-handler" "selection-handler:" "can-select-empty?" "can-select-empty?:" "multiple-selection?" "multiple-selection?:" "row" "selection-mode" "selection-mode:" ":images" "portfolio" "portfolio:" "component" "filled-column" "filled-column:" "install")}
        {Lisp-Entry "get-target" method #f 65 18 65 28 ("target")}
        {Lisp-Entry "set-target" method #f 69 18 69 28 ("acquire-focus" "set-single-selection" "0" "visible-count" ">" "when" "update" "target" "set!" "value")}
        {Lisp-Entry "selection-changed" method #f 82 20 82 37 ("focus?" "force-parent?" "origin" "old" "component")}
        {Lisp-Entry "on-designer" method #f 91 20 91 31 ("update" ":property-change" ":child-remove" ":child-add" "get-kind" "case" "evt")}
        {Lisp-Entry "update" method #f 103 20 103 26 ("get-presentation-property" "localize" "key" "key:" "<" "sort" "insert-component" "for-each" "with-update-locked" "remove-every-row" "cons" "set!" "search-component" "indexable?" "and" "when" "level" "component" "lambda" "client" "for-each-descendant" "list" "let" "target" "search-components" "define" "rest")}
        {Lisp-Entry "insert-component" method #f 121 20 121 36 ("user-data" "user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children" "children:" "father:" "add-row" "class-of" "get-class-presentation" "kind" "present-location" "location" "get-component-image" "image" "get-presentation-property" "title" "let" "recursive?" "father" "component")}}}})
"String-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "String-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.String-Domain" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "String-Domain" class #f 44 7 44 20 ("Domain")
        {Lisp-Entry "validate-value" method #f 52 20 52 34 ("property:" "format" "message" "message:" "Integrity-Violation" "new" "add-violation" "string?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 62 20 62 27 ("or" "value")}
        {Lisp-Entry "setup-entry" method #f 71 20 71 31 ("self" "domain" "domain:" "get-size" "size" "size:" "parent" "parent:" "String-Entry" "new" "client" "view")}}}})
"String-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "String-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.entry.String-Entry" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "String-Entry" class #f 46 7 46 19 ("Property-Entry")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("top-padding" "top-padding:" "1" "left-padding" "left-padding:" "text" "Entry-Text-View" "fill" "layout-type" "layout-type:" "content" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "scroller" "name" "name:" "Scroller-View" "install")}
        {Lisp-Entry "finish" method #f 56 20 56 26 ("self" "text" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" method #f 66 20 66 28 ("text" "locate")}
        {Lisp-Entry "validate" method #f 75 20 75 28 ("message" "message:" "Property-Violation" "new" "get-nullable?" "not" "empty-string?" "and" "if" "text" "locate-component" "get-string-content" "content" "let" "domain")}
        {Lisp-Entry "get-modified?" method #f 88 20 88 33 ("text" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 92 20 92 33 ("text" "locate" "set-modified?" "value")}
        {Lisp-Entry "get-value" method #f 100 20 100 29 ("empty-string?" "if" "text" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-value" method #f 107 20 107 29 ("not" "if" "text" "locate" "set-string-content" "value")}
        {Lisp-Entry "set-editable?" method #f 119 20 119 33 ("Medium" "White" "Color" "if" "set-background" "text" "locate" "set-editable?" "flag")}}}})
"String-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "String-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.String-Row" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "String-Row" class #f 43 20 43 30 ("Value-Row")
        {Lisp-Entry "present" method #f 51 20 51 27 ("format" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "get-edited-value" method #f 62 20 62 36 ("string=?" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "string" "let")}}}})
"Surrogate-Handler"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "surrogate" "Surrogate-Handler.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.surrogate.Surrogate-Handler" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Surrogate-Handler" class #f 43 20 43 37 ("Event-Handler")
        {Lisp-Entry "preserved" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-preserved" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("self" "preserved~self" "set!" "nextmethod" "apply" "others" "preserved" "bind-keywords" "rest")}}}})
"Tab-View-Surrogate"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "surrogate" "Tab-View-Surrogate.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.surrogate.Tab-View-Surrogate" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Tab-View-Surrogate" class #f 43 20 43 38 ("View-Surrogate")
        {Lisp-Entry "mouse-down" method #f 46 20 46 30 ("set-selection" "when" "client" "find-header" "header" "let" "nextmethod" "pos")}}}})
"Text-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Text-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Text-Domain" module #f 37 8 37 40 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Text-Domain" class #f 44 7 44 18 ("Domain")
        {Lisp-Entry "validate" method #f 52 20 52 28 ("message" "message:" "Property-Violation" "new" "nullable?" "not" "empty-string?" "and" "if" "text")}
        {Lisp-Entry "setup-entry" method #f 64 20 64 31 ("self" "domain" "domain:" "get-size" "size" "size:" "parent" "parent:" "Text-Entry" "new" "client" "view")}}}})
"Text-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Text-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.entry.Text-Entry" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Text-Entry" class #f 46 7 46 17 ("Property-Entry")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("top-padding" "top-padding:" "1" "left-padding" "left-padding:" "text" "Entry-Text-View" "fill" "layout-type" "layout-type:" "content" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "scroller" "name" "name:" "Scroller-View" "install")}
        {Lisp-Entry "finish" method #f 56 20 56 26 ("self" "text" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" method #f 66 20 66 28 ("text" "locate")}
        {Lisp-Entry "validate" method #f 75 20 75 28 ("message" "message:" "Property-Violation" "new" "get-nullable?" "not" "empty-string?" "and" "if" "text" "locate-component" "get-string-content" "content" "let" "domain")}
        {Lisp-Entry "get-modified?" method #f 88 20 88 33 ("text" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 92 20 92 33 ("text" "locate" "set-modified?" "value")}
        {Lisp-Entry "get-value" method #f 100 20 100 29 ("text" "locate" "get-string-content" "domain" "parse")}
        {Lisp-Entry "set-value" method #f 104 20 104 29 ("domain" "present" "text" "locate" "set-string-content" "value")}
        {Lisp-Entry "set-editable?" method #f 114 20 114 33 ("Medium" "White" "Color" "if" "set-background" "text" "locate" "set-editable?" "flag")}}}})
"Text-View-Surrogate"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "surrogate" "Text-View-Surrogate.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.surrogate.Text-View-Surrogate" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Text-View-Surrogate" class #f 43 20 43 39 ("initialize" "View-Surrogate")
        {Lisp-Entry "edit?" slot #f 46 8 46 13 ()}
        {Lisp-Entry "editing?" method #f 54 20 54 28 ("edit?")}
        {Lisp-Entry "start-edit" method #f 58 11 58 21 ("client" "invalidate-view" "edit?" "set!")}
        {Lisp-Entry "stop-edit" method #f 63 11 63 20 ("client" "invalidate-view" "edit?" "set!")}
        {Lisp-Entry "focus-gained" method #f 73 20 73 32 ("nextmethod" "client" "focus-gained" "editing?" "if")}
        {Lisp-Entry "focus-lose" method #f 79 20 79 30 ("nextmethod" "stop-edit" "client" "focus-lose" "begin" "editing?" "if")}
        {Lisp-Entry "cursor-update" method #f 92 20 92 33 ("nextmethod" "client" "cursor-update" "editing?" "if" "pos")}
        {Lisp-Entry "mouse-down" method #f 103 20 103 30 ("nextmethod" "client" "mouse-down" "select-in-editor" "select?" "when" "begin" "editing?" "if" "pos")}
        {Lisp-Entry "mouse-up" method #f 112 20 112 28 ("nextmethod" "client" "mouse-up" "editing?" "if" "pos")}
        {Lisp-Entry "drag-move" method #f 118 20 118 29 ("nextmethod" "client" "drag-move" "editing?" "if" "pos")}
        {Lisp-Entry "drag-up" method #f 124 20 124 27 ("nextmethod" "client" "drag-up" "apply" "editing?" "if" "rest" "pos")}
        {Lisp-Entry "double-click" method #f 130 20 130 32 ("start-edit" "client" "double-click" "editing?" "if" "pos")}
        {Lisp-Entry "context-menu" method #f 136 20 136 32 ("nextmethod" "client" "context-menu" "editing?" "if" "pos")}
        {Lisp-Entry "key-press" method #f 147 20 147 29 ("nextmethod" "client" "key-press" "editing?" "if" "key")}
        {Lisp-Entry "return-press" method #f 153 20 153 32 ("start-edit" "client" "return-press" "editing?" "if" "key")}}}})
"Time-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Time-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Time-Domain" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Time-Domain" class #f 43 7 43 18 ("Domain")}
      {Lisp-Entry "Time-Domain" class #f 49 7 49 18 ("Domain")
        {Lisp-Entry "validate-value" method #f 57 11 57 25 ("property:" "format" "message" "message:" "Integrity-Violation" "new" "add-violation" "Date" "is-not?" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 67 11 67 18 ("present-compact" "not" "if" "value")}}}})
"Toolbox"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.jml")}
      {Lisp-Entry "Toolbox" class #f 44 20 44 27 ("Group")
        {Lisp-Entry "get-class-descriptor" method #f 52 25 52 45 ("Toolbox-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 61 11 61 17 ()
        {Lisp-Entry "import" anonymous #f 64 1 64 7 ("jazz.designer")}
        {Lisp-Entry "Toolbox-Descriptor" class #f 67 7 67 25 ("Group-Descriptor")
          {Lisp-Entry "form" anonymous #f 70 3 70 7 (">" "<properties" "<properties~>" "can-copy?" "can-copy?:" "can-move?" "can-move?:" "can-delete?" "can-delete?:" "can-rename?" "can-rename?:" "Image-Resource" "image" "image:" "title" "title:" "install")}
          {Lisp-Entry "component-get-presentation" method #f 75 20 75 46 ("component")}
          {Lisp-Entry "component-get-categorized-addable-classes" method #f 79 20 79 61 ("Toolbox-Model" "Toolbox-Dynamic" "Toolbox-Group" "reference" "list" "component")}}}}})
"Toolbox-Dynamic"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Dynamic.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Dynamic" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Toolbox-Dynamic" class #f 45 20 45 35 ("initialize" "Toolbox-Group")
        {Lisp-Entry "module-name" property #f 48 12 48 23 ()}
        {Lisp-Entry "get-module-name" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "set-module-name" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "find-class-model" method #f 56 11 56 27 ("module-name" "get-model" "get-unit" "list" "child" "lambda" "find-key" "class-name")}
        {Lisp-Entry "get-module-classes" method #f 62 18 62 36 ("symbol->string" "key" "key:" "Component" "subclass?" "class?" "and" "module-ref" "obj" "let" "export-name" "lambda" "collect-if" "string<?" "sort" "get-exports" "table-keys" "exports" "require-module" "module" "let*" "module-name" "if")}
        {Lisp-Entry "get-missing-classes" method #f 74 18 74 37 ("get-module-classes" "find-class-model" "not" "class-name" "lambda" "collect-if")}
        {Lisp-Entry "get-removed-classes" method #f 80 18 80 37 ("get-children" "get-class" "not" "tool" "lambda" "collect-if")}
        {Lisp-Entry "get-class-descriptor" method #f 91 25 91 45 ("Toolbox-Dynamic-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 100 11 100 17 ()
        {Lisp-Entry "import" anonymous #f 103 1 103 7 ("jazz.designer")}
        {Lisp-Entry "Toolbox-Dynamic-Descriptor" class #f 106 7 106 33 ("Toolbox-Group-Descriptor")
          {Lisp-Entry "form" anonymous #f 109 3 109 7 ("name" "name:" "Property-Descriptor" "module-name" "name-info" "class-info" "categorized" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image" "image:" "title" "title:" "install")}
          {Lisp-Entry "component-get-categorized-addable-classes" method #f 115 20 115 61 ("component")}}}}})
"Toolbox-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Editor.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Editor" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Toolbox-Editor" class #f 43 20 43 34 ("Descendants-Editor")
        {Lisp-Entry "form-model" method #f 46 20 46 30 ("nextmethod" "else" "Toolbox-Tree" "tree" "get-name" "case" "form")}}}})
"Toolbox-Group"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Group.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Group" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Toolbox-Group" class #f 45 20 45 33 ("initialize" "Component")
        {Lisp-Entry "title" property #f 48 12 48 17 ()}
        {Lisp-Entry "get-title" accessor #f 48 42 48 50 ()}
        {Lisp-Entry "set-title" accessor #f 48 42 48 50 ()}
        {Lisp-Entry "get-class-descriptor" method #f 56 25 56 45 ("Toolbox-Group-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 65 11 65 17 ()
        {Lisp-Entry "import" anonymous #f 68 1 68 7 ("jazz.designer")}
        {Lisp-Entry "Toolbox-Group-Descriptor" class #f 71 7 71 31 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f 74 3 74 7 ("name" "name:" "Property-Descriptor" "name-info" "class-info" "categorized" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image" "image:" "title" "title:" "install")}
          {Lisp-Entry "component-get-categorized-addable-classes" method #f 80 20 80 61 ("Toolbox-Model" "Toolbox-Dynamic" "Toolbox-Group" "reference" "list" "component")}}}}})
"Toolbox-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Manager.jazz"} 1296743345 jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Manager" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system.process" "jazz.system" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.io" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "read-toolbox" definition #f 57 13 57 25 ("err" "continue-handler" "continue-handler:" "install-context" "toolbox-file" "toolbox" "get-application" "appl" "let" "lambda" "with-safe-execution" "Toolbox" "new" "read-form" "instantiate" "exists?" "if" "file" "load-toolbox" "define")}
      {Lisp-Entry "Toolbox-Manager" class #f 79 20 79 35 ("Exit-Listener" "Component-Editor")
        {Lisp-Entry "form" anonymous #f 82 3 82 7 ("291" "width" "width:" "title" "title:" "descendant" "on-double-click" ":self" "double-click-handler" "double-click-handler:" "auto-expand/collapse?" "auto-expand/collapse?:" "highlight-edited?" "highlight-edited?:" "header" "content" "tool" "style" "style:" "scroller" "!" "center" "descendants" "Toolbox-Editor" "on-synchronize" "synchronize" "0" "4" "Separator" "on-add" "add" "on-new" "new" "on-edit" "tree" ":guest" "Event-Handler" "action-handler" "action-handler:" ":images" "portfolio" "portfolio:" "Image-Resource" "resource" "resource:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "tail" "location" "location:" "22" "Dimension" "size" "size:" "edit" "Push-Tool" "tools" "name" "name:" "Layout-View" "border" "layout-type" "layout-type:" "install")}
        {Lisp-Entry "external-name" method #f 99 25 99 38 ("toolbox-manager" "rest")}
        {Lisp-Entry "component-alias" method #f 108 20 108 35 ("nextmethod" "else" "get-tree" "tree" "case" "name")}
        {Lisp-Entry "host-icon" method #f 119 25 119 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 123 25 123 35 ()}
        {Lisp-Entry "get-tools-view" method #f 132 20 132 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method #f 136 20 136 33 ("acquire-focus" "descendants" "locate" "tree" "let")}
        {Lisp-Entry "new-controller" method #f 146 20 146 34 ("self" "Toolbox-Manager-Controller" "new")}
        {Lisp-Entry "install" method #f 155 20 155 27 ("get-application" "add-exit-listener" "read-toolbox" "set-client" "self" "locate" "set-editor" "header" "descendants" "locate-component" "set-shown?" "nextmethod" "rest")}
        {Lisp-Entry "prepare-exit" method #f 163 20 163 32 ("save" "get-form" "get-origin" "file?" "designer" "and" "when")}
        {Lisp-Entry "get-tree" method #f 173 11 173 19 ("tree" "descendants" "locate")}
        {Lisp-Entry "document-status" method #f 182 11 182 26 ()}
        {Lisp-Entry "get-dynamic-toolboxes" method #f 191 18 191 39 ("get-client" "collect-family" "Toolbox-Dynamic" "is?" "cp" "lambda" "collect-if")}
        {Lisp-Entry "get-module-names" method #f 196 18 196 34 ("get-dynamic-toolboxes" "get-module-name" "map")}
        {Lisp-Entry "get-toolbox-models" method #f 200 18 200 36 ("get-client" "collect-family" "Toolbox-Model" "is?" "cp" "lambda" "collect-if")}
        {Lisp-Entry "get-addable-models-refs" method #f 205 18 205 41 ("get-reference" "map" "get-toolbox-models" "addable-class?" "and" "get-class" "class" "tool" "lambda" "collect-if" "tools" "let" "component")}
        {Lisp-Entry "on-synchronize" method #f 218 11 218 25 ("get-dynamic-toolboxes" "get-removed-classes" "remove-child" "tool" "get-missing-classes" "symbol->string" "designer" "get-tree" "install-new-component" "model:" "unit" "unit:" "list" "props" "name" "name:" "parent" "parent:" "Toolbox-Model" "new" "model" "class-name" "get-module-name" "module-name" "let" "toolbox" "for-each" "lambda" "with-update-locked" "evt")}}
      {Lisp-Entry "Toolbox-Manager-Controller" class #f 239 7 239 33 ("Component-Editor-Controller")
        {Lisp-Entry "document-status" method #f 242 20 242 35 ()}}}})
"Toolbox-Model"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Model.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Model" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.jml")}
      {Lisp-Entry "Toolbox-Model" class #f 44 20 44 33 ("initialize" "Component")
        {Lisp-Entry "title" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-title" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "set-title" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "unit" property #f 48 12 48 16 ()}
        {Lisp-Entry "get-unit" accessor #f 48 42 48 50 ()}
        {Lisp-Entry "set-unit" accessor #f 48 42 48 50 ()}
        {Lisp-Entry "model" property #f 49 12 49 17 ()}
        {Lisp-Entry "get-model" accessor #f 49 42 49 50 ()}
        {Lisp-Entry "set-model" accessor #f 49 42 49 50 ()}
        {Lisp-Entry "get-class" method #f 57 18 57 27 ("module-get" "model" "unit" "and")}
        {Lisp-Entry "get-reference" method #f 63 18 63 31 ("model" "unit" "module-public" "list" "deserialize-runtime-reference")}
        {Lisp-Entry "print" method #f 72 20 72 25 ("model" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-class-descriptor" method #f 83 25 83 45 ("Toolbox-Model-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 92 11 92 17 ()
        {Lisp-Entry "import" anonymous #f 95 1 95 7 ("jazz.designer")}
        {Lisp-Entry "Toolbox-Model-Descriptor" class #f 98 7 98 31 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f 101 3 101 7 ("model" "unit" "name" "name:" "Property-Descriptor" ">" "<properties" "<properties~>" "Image-Resource" "image" "image:" "title" "title:" "install")}
          {Lisp-Entry "component-presentation-property?" method #f 109 20 109 52 ("model" "title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 113 20 113 46 ("get-model" "get-title" "or" "component")}
          {Lisp-Entry "component-set-presentation" method #f 117 20 117 46 ("title" "title:" "set-property" "presentation" "designer" "component")}}}}})
"Toolbox-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Tree.jazz"} 1299091939 jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Tree" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.jml" "jazz.library.component" "jazz.library" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "Toolbox-Tree" class #f 49 20 49 32 ("Descendants-Tree")
        {Lisp-Entry "form" anonymous #f 52 3 52 7 ("row" "selection-mode" "selection-mode:" "multiple-selection?" "multiple-selection?:" "reorderable?" "reorderable?:" "draggable?" "draggable?:" ":images" "portfolio" "portfolio:" "install")}
        {Lisp-Entry "addable-root-classes" method #f 56 20 56 40 ("Toolbox-Model" "Toolbox-Group" "reference" "list")}
        {Lisp-Entry "call-with-selected-toolbox-model" method #f 63 11 63 43 ("Toolbox-Model" "is?" "and" "get-single-selected-data" "selected-toolbox-model" "let" "func")}
        {Lisp-Entry "find-model-if" method #f 69 18 69 31 ("client" "collect-family" "Toolbox-Model" "collect-type" "find-if" "pred")}
        {Lisp-Entry "selected-class" method #f 73 18 73 32 ("get-class" "call-with-selected-toolbox-model")}
        {Lisp-Entry "selected-model" method #f 77 18 77 32 ("get-model" "call-with-selected-toolbox-model")}
        {Lisp-Entry "selected-unit" method #f 81 18 81 31 ("get-unit" "call-with-selected-toolbox-model")}
        {Lisp-Entry "update-selection" method #f 85 20 85 36 ("selected-components" "expand-state")}
        {Lisp-Entry "focus-update-actions" method #f 89 20 89 40 ("add" "new" "edit" "components-tree" "Action" "set-action-enabled?" "Toolbox-Model" "get-single-selected-data" "is?" "when" "nextmethod")}
        {Lisp-Entry "on-double-click" method #f 97 11 97 26 ("on-edit" "evt")}
        {Lisp-Entry "on-edit" method #f 101 20 101 27 ("edit-class" "and" "selected-class" "class" "let" "evt")}
        {Lisp-Entry "on-add" method #f 106 11 106 17 ("import" "import:" "centered?" "centered?:" "0" "Point" "get-client" "get-surrogate" "add-new" "View-Editor" "is?" "and" "when" "current-document" "editor" "selected-unit" "unit" "selected-class" "class" "let" "evt")}
        {Lisp-Entry "on-new" method #f 114 11 114 17 ("edit-component" "jazz.designer.view" "jazz.designer.view:edit-component" "imports-locator" "effective-imports" "imports" "list" "construct-form" "form" ",unit" "Data" "new" "form-data" "symbol->string" "string-append" "string->symbol" "model-name" "let*" "when" "ui" "jazz" "jazz.ui" "selected-unit" "unit" "View" "selected-model" "or" "class" "let" "evt")}
        {Lisp-Entry "row-state" method #f 128 20 128 29 ("collapsed" "expanded" "1" "<" "if" "level" "update?" "component")}}}})
"Traits-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "trait" "Traits-Editor.jazz"} 1296769851 jazz
    {Lisp-Entry "jazz.designer.trait.Traits-Editor" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Traits-Editor" class #f 47 20 47 33 ("Layout-View")
        {Lisp-Entry "form" anonymous #f 50 3 50 7 ("183" "width" "width:" "trait" "tree" "Traits-Tree" "shown?" "shown?:" "header" "Tree-Header" "content" "!" "tool" "style" "style:" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "scroller" "Scroller-View" "on-new-default" ":guest" "Event-Handler" "action-handler" "action-handler:" ":images" "portfolio" "portfolio:" "Image-Resource" "resource" "resource:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "tail" "location" "location:" "22" "Dimension" "size" "size:" "new-default" "Push-Tool" "tools" "name" "name:" "Layout-View" "fill" "layout-type" "layout-type:" "install")}
        {Lisp-Entry "external-name" method #f 62 25 62 38 ("traits-editor" "rest")}
        {Lisp-Entry "host-icon" method #f 71 25 71 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 75 25 75 35 ()}
        {Lisp-Entry "client-activate" method #f 79 20 79 35 ("client-update" "else" "get-designer" "set-designer" "get-client" "set-client" "set-editor" "Component-Editor" "is?" "cond" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method #f 92 20 92 37 ("client-update" "set-designer" "set-client" "set-editor")}
        {Lisp-Entry "client-update" method #f 99 11 99 24 ("get-client" "new-default" "locate" "set-enabled?")}
        {Lisp-Entry "focus-default" method #f 108 20 108 33 ("auto-select-first" "acquire-focus" "locate" "tree" "let")}
        {Lisp-Entry "get-tools-view" method #f 114 20 114 34 ("tools" "locate")}
        {Lisp-Entry "install-in-host" method #f 123 20 123 35 ("2" "0" "Rect" "set-layout-insets" "fill" "get-root" "set-layout-type" "nextmethod" "host")}
        {Lisp-Entry "get-tree" method #f 136 18 136 26 ("tree" "locate")}
        {Lisp-Entry "on-new-default" method #f 145 11 145 25 ("new-default" "evt")}
        {Lisp-Entry "new-default" method #f 154 29 154 40 ("get-tree" "new-default-trait")}
        {Lisp-Entry "get-editor" method #f 163 18 163 28 ("get-tree" "get-editor")}
        {Lisp-Entry "set-editor" method #f 167 18 167 28 ("get-tree" "set-editor" "editor")}
        {Lisp-Entry "get-client" method #f 176 18 176 28 ("get-tree" "get-client")}
        {Lisp-Entry "set-client" method #f 180 18 180 28 ("get-tree" "set-client" "client")}
        {Lisp-Entry "get-designer" method #f 189 18 189 30 ("get-tree" "get-designer")}
        {Lisp-Entry "set-designer" method #f 193 18 193 30 ("get-tree" "set-designer" "designer")}}}})
"Traits-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "trait" "Traits-Tree.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.trait.Traits-Tree" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.platform" "jazz.locale" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Traits-Tree" class #f 50 20 50 31 ("initialize" "Tree-View")
        {Lisp-Entry "editor" slot #f 53 8 53 14 ()}
        {Lisp-Entry "client" slot #f 54 8 54 14 ()}
        {Lisp-Entry "designer" slot #f 55 8 55 16 ()}
        {Lisp-Entry "form" anonymous #f 58 3 58 7 ("157" "width" "width:" "title" "title:" "trait" "name" "name:" "Tree-Node-Column" "on-selection-change" ":form" "Event-Handler" "selection-handler" "selection-handler:" ":images" "portfolio" "portfolio:" "multiple-selection?" "multiple-selection?:" "install")}
        {Lisp-Entry "focus-actions" method #f 68 20 68 33 ("nextmethod" "traits-tree" "find-actions" "cons")}
        {Lisp-Entry "context-menu" method #f 78 20 78 32 ("track-popup-menu" "layout-menu" "action-handler" "action-handler:" "title:" "icon:" "Label-Item" "class:" "list" "properties" "properties:" "on-add-trait" "method-name" "method-name:" "self" "target" "target:" "Event-Handler" "handler" "title" "get-class-image" "icon" "Separator-Item" "not" "class" "for-each" "parent" "parent:" "Context-Menu" "submenu" "get-class-presentation" "format" "set-title" "get-addable-default-trait" "default" "let" "eqv?" "if" "rename" "close" "Trait" "is-not?" "separator" "set-visible?" "null?" "with-update-locked" "when" "selected-trait" "trait" "get-addable-traits" "client" "and" "classes" "add" "locate" "item" "Trait-Menu" "new" "menu" "let*" "lambda" "with-context-click" "pos")}
        {Lisp-Entry "on-add-trait" method #f 114 11 114 23 ("add-trait" "selected-trait" "parent" "client" "get-addable-default-trait" "class:" "get-property" "or" "class" "let" "evt")}
        {Lisp-Entry "new-default-trait" method #f 120 18 120 35 ("add-trait" "selected-trait" "or" "parent" "get-addable-traits" "add-here?" "get-addable-default-trait" "class" "let*" "client" "when")}
        {Lisp-Entry "add-trait" method #f 129 18 129 27 ("rename-trait" "trait-index" "set-single-selection" "update-tree" "get-form" "context" "context:" "install" "action" "action:" "textual?" "textual?:" "Form" "client-form" "client-form:" "set-property" "trait:" "add-child" "editor" "get-designer" "designer" "parent:" "new" "trait" "child-traits" "trait-presentation-request" "presentation" "let" "parent" "class")}
        {Lisp-Entry "trait-presentation-request" method #f 142 29 142 55 ("validator" "validator:" "unicity-domain:" "not" "accepts-empty?" "accepts-empty?:" "get-class-presentation" "format" "title" "title:" "request-string" "presentation" "trait-name-validator" "name-validator" "get-presentation-property" "map" "and" "unicity-domain" "get-name-unicity?" "name-unicity?" "get-name-mandatory?" "name-mandatory?" "let*" "initial-value" "initial-value:" "brothers" "class")}
        {Lisp-Entry "trait-name-validator" method #f 151 29 151 49 ()}
        {Lisp-Entry "on-close-trait" method #f 155 11 155 25 ("delete-selection" "evt")}
        {Lisp-Entry "delete-selection" method #f 159 20 159 36 ("can-survive?" "can-survive?:" "remove-trait" "lambda" "selection" "with-deleted-selection" "confirm-close" "when" "bell" "Trait" "is-not?" "if" "selected-trait" "trait" "let")}
        {Lisp-Entry "confirm-close" method #f 170 20 170 33 ("confirm-action")}
        {Lisp-Entry "confirm-action" method #f 174 21 174 35 ("throw-cancel" "cancel" "no" "yes" "case" "confirmation" "type" "type:" "localize" "message-box" "code" "let" "text")}
        {Lisp-Entry "remove-trait" method #f 182 29 182 41 ("update-tree" "remove-child" "select-trait" "editor" "get-designer" "designer" "let" "trait")}
        {Lisp-Entry "on-rename-trait" method #f 189 11 189 26 ("rename-selected-trait" "evt")}
        {Lisp-Entry "rename-selected-trait" method #f 193 11 193 32 ("rename-trait" "get-presentation-property" "initial-value" "initial-value:" "get-brothers" "class-of" "trait-presentation-request" "presentation" "selected-trait" "trait" "let*")}
        {Lisp-Entry "rename-trait" method #f 199 11 199 23 ("trait-index" "set-single-selection" "update-tree" "set-presentation-property" "editor" "get-designer" "designer" "let" "presentation" "trait")}
        {Lisp-Entry "on-trait-properties" method #f 206 11 206 30 ("select-palette?" "select-palette?:" "show-properties" "evt")}
        {Lisp-Entry "show-properties" method #f 210 11 210 26 ("workspace" "workspace:" "Properties-Manager" "select-docked" "when" "focus?" "focus?:" "force?" "force?:" "self" "origin" "origin:" "list" "if" "editor" "set-selection" "selected-trait" "trait" "let" "select-palette?" "select-palette?:")}
        {Lisp-Entry "maybe-show-properties" method #f 217 11 217 32 ("show-properties" "Trait" "is?" "get-client" "eq?" "car" "1" "length" "=" "and" "null?" "or" "get-selection" "selection" "selected-trait" "trait" "let" "editor" "when")}
        {Lisp-Entry "get-editor" method #f 234 18 234 28 ("editor")}
        {Lisp-Entry "set-editor" method #f 238 18 238 28 ("on-editor" "method-name" "method-name:" "target" "target:" "Event-Handler" "new" "add-editor-listener" "set!" "self" "remove-editor-listener" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "on-editor" method #f 247 11 247 20 ("trait" "trait:" "branch-changed" ":branch-changed" "designer" "designer:" "set-designer" ":designer-change" "client" "client:" "get-property" "set-client" ":client-change" "get-kind" "case" "evt")}
        {Lisp-Entry "branch-changed" method #f 254 11 254 25 ("trait-index" "set-single-selection" "trait")}
        {Lisp-Entry "get-designer" method #f 263 18 263 30 ("designer")}
        {Lisp-Entry "set-designer" method #f 267 26 267 38 ("install-listener" "set!" "uninstall-listener" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "install-listener" method #f 276 11 276 27 ("add-designer-listener" "on-designer" "method-name" "method-name:" "self" "target" "target:" "Event-Handler" "new" "listener" "let" "designer")}
        {Lisp-Entry "uninstall-listener" method #f 281 11 281 29 ("self" "remove-designer-listener" "designer")}
        {Lisp-Entry "on-designer" method #f 285 11 285 22 ("presentation" "presentation:" "component" "component:" "get-property" "presentation-change" ":presentation-change" "get-kind" "case" "evt")}
        {Lisp-Entry "presentation-change" method #f 290 11 290 30 ("invalidate-cell" "get-cell-data" "set-title" "0" "Cell" "cell" "let" "client" "eq?" "when" "presentation" "component")}
        {Lisp-Entry "get-client" method #f 302 18 302 28 ("client")}
        {Lisp-Entry "set-client" method #f 306 18 306 28 ("update-selection" "update-tree" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update" method #f 318 11 318 17 ("update-selection" "update-tree")}
        {Lisp-Entry "update-tree" method #f 323 11 323 22 ("child-traits" "sort-traits" "insert-trait" "trait" "lambda" "for-each" "insert-client" "node" "let" "client" "when" "remove-every-row")}
        {Lisp-Entry "sort-traits" method #f 332 29 332 40 ("traits")}
        {Lisp-Entry "update-selection" method #f 336 11 336 27 ("set-single-selection" "or" "user-data-index" "index" "get-active-trait" "trait" "let*" "generate-event?" "generate-event?:" "set-selection" "client" "not" "if")}
        {Lisp-Entry "insert-client" method #f 346 11 346 24 ("user-data" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children" "children:" "expanded" "state" "state:" "add-row" "component-image" "image" "client" "get-presentation-property" "title" "let")}
        {Lisp-Entry "insert-trait" method #f 352 11 352 23 ("sort-traits" "insert-trait" "child" "lambda" "for-each" "user-data" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "state" "state:" "father" "father:" "add-row" "handle" "component-image" "image" "component-presentation" "title" "get-children" "children" "let" "trait" "node")}
        {Lisp-Entry "component-presentation" method #f 362 29 362 51 ("get-presentation-property" "component")}
        {Lisp-Entry "component-image" method #f 366 29 366 44 ("get-component-image" "component")}
        {Lisp-Entry "can-undo?" method #f 375 20 375 29 ()}
        {Lisp-Entry "can-redo?" method #f 379 20 379 29 ()}
        {Lisp-Entry "can-delete?" method #f 383 20 383 31 ("Trait" "is?" "selected-trait" "trait" "let")}
        {Lisp-Entry "on-selection-change" method #f 393 11 393 30 ("get-application" "update-focus-actions" "maybe-show-properties" "selected-trait" "select-trait" "evt")}
        {Lisp-Entry "selected-trait" method #f 399 18 399 32 ("get-row" "get-user-data" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "select-trait" method #f 405 11 405 23 ("editor" "process-branch-changing" "client" "get-active-trait" "neq?" "when" "trait")}
        {Lisp-Entry "trait-index" method #f 410 11 410 22 ("user-data-index" "trait")}}
      {Lisp-Entry "Trait-Menu" class #f 419 7 419 17 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f 422 3 422 7 ("properties" "rename" "close" "separator" "Separator-Item" "traits-tree" "Action" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "title" "title:" "add" "name" "name:" "Label-Item" "install")}}}})
"Traits-Tree-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "trait" "Traits-Tree-Actions.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.trait.Traits-Tree-Actions" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Traits-Tree-Actions" class #f 46 20 46 39 ("Actions")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("on-trait-properties" "properties" "F2" "on-rename-trait" "rename" "Delete" "on-close-trait" "close" ":control" "Shortcut" "shortcut" "shortcut:" "on-add-trait" ":focus" "Event-Handler" "action-handler" "action-handler:" "add" "name" "name:" "Action-Item" "install")}}}})
"Traits-Viewer"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "trait" "Traits-Viewer.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.trait.Traits-Viewer" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Traits-Viewer" class #f 47 20 47 33 ("Layout-View")
        {Lisp-Entry "form" anonymous #f 50 3 50 7 ("183" "width" "width:" "trait" "tree" "Viewer-Tree" "shown?" "shown?:" "header" "Tree-Header" "content" "!" "tool" "style" "style:" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "scroller" "name" "name:" "Scroller-View" "fill" "layout-type" "layout-type:" "install")}
        {Lisp-Entry "host-icon" method #f 65 25 65 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 69 25 69 35 ()}
        {Lisp-Entry "client-activate" method #f 73 20 73 35 ("current-document" "set-client")}
        {Lisp-Entry "client-deactivate" method #f 77 20 77 37 ("set-client")}
        {Lisp-Entry "focus-default" method #f 86 20 86 33 ("auto-select-first" "acquire-focus" "locate" "tree" "let")}
        {Lisp-Entry "install-in-host" method #f 97 20 97 35 ("2" "0" "Rect" "set-layout-insets" "fill" "get-root" "set-layout-type" "nextmethod" "host")}
        {Lisp-Entry "get-tree" method #f 108 18 108 26 ("tree" "locate")}
        {Lisp-Entry "get-client" method #f 117 18 117 28 ("get-tree" "get-client")}
        {Lisp-Entry "set-client" method #f 121 18 121 28 ("get-tree" "set-client" "client")}}
      {Lisp-Entry "Viewer-Tree" class #f 130 7 130 18 ("initialize" "Tree-View")
        {Lisp-Entry "form" anonymous #f 133 3 133 7 ("157" "width" "width:" "title" "title:" "trait" "name" "name:" "Tree-Node-Column" "on-selection-change" ":self" "Event-Handler" "selection-handler" "selection-handler:" ":images" "portfolio" "portfolio:" "multiple-selection?" "multiple-selection?:" "install")}
        {Lisp-Entry "client" slot #f 138 8 138 14 ()}
        {Lisp-Entry "get-client" method #f 146 18 146 28 ("client")}
        {Lisp-Entry "set-client" method #f 150 18 150 28 ("update-tree" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update-tree" method #f 156 11 156 22 ("child-traits" "insert-trait" "trait" "lambda" "for-each" "insert-client" "node" "let" "client" "when" "remove-every-row")}
        {Lisp-Entry "insert-client" method #f 165 11 165 24 ("user-data" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children" "children:" "expanded" "state" "state:" "add-row" "component-image" "image" "client" "get-presentation-property" "title" "let")}
        {Lisp-Entry "insert-trait" method #f 171 11 171 23 ("insert-trait" "child" "lambda" "for-each" "user-data" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "state" "state:" "father" "father:" "add-row" "handle" "component-image" "image" "get-presentation-property" "title" "get-children" "children" "let" "trait" "node")}
        {Lisp-Entry "component-image" method #f 181 29 181 44 ("get-component-image" "component")}
        {Lisp-Entry "on-selection-change" method #f 190 11 190 30 ("client" "selected-trait" "or" "select-trait" "evt")}
        {Lisp-Entry "selected-trait" method #f 194 18 194 32 ("get-row" "get-user-data" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "select-trait" method #f 200 11 200 23 ("client" "set-active-trait" "when" "trait")}}}})
"Value-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Value-Domain.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.domain.Value-Domain" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Value-Domain" class #f 43 7 43 19 ("Domain")
        {Lisp-Entry "present" method #f 51 20 51 27 (":reader" "->string" "not" "if" "value")}
        {Lisp-Entry "setup-entry" method #f 62 20 62 31 ("self" "domain" "domain:" "parent" "parent:" "Value-Entry" "new" "client" "view")}}}})
"Value-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Value-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.entry.Value-Entry" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Value-Entry" class #f 45 7 45 18 ("String-Entry")
        {Lisp-Entry "get-value" method #f 53 20 53 29 ("read-string-element" "string=?" "empty-string?" "or" "if" "text" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-value" method #f 60 20 60 29 (":reader" "->string" "not" "if" "text" "locate" "set-string-content" "value")}}}})
"Value-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Value-Row.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.row.Value-Row" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.platform" "jazz.library" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Value-Row" class #f 49 20 49 29 ("set-property" "get-property" "initialize" "Tree-Row")
        {Lisp-Entry "property_" property #f 53 12 53 21 ()}
        {Lisp-Entry "value" property #f 54 12 54 17 ()}
        {Lisp-Entry "get-value" accessor #f 54 51 54 59 ()}
        {Lisp-Entry "set-value" accessor #f 54 51 54 59 ()}
        {Lisp-Entry "nullable?" property #f 55 12 55 21 ()}
        {Lisp-Entry "get-nullable?" accessor #f 55 51 55 59 ()}
        {Lisp-Entry "set-nullable?" accessor #f 55 51 55 59 ()}
        {Lisp-Entry "modified?" property #f 56 12 56 21 ()}
        {Lisp-Entry "get-modified?" accessor #f 56 51 56 59 ()}
        {Lisp-Entry "set-modified?" accessor #f 56 51 56 59 ()}
        {Lisp-Entry "limit-to-list?" property #f 57 12 57 26 ()}
        {Lisp-Entry "get-limit-to-list?" accessor #f 57 51 57 59 ()}
        {Lisp-Entry "set-limit-to-list?" accessor #f 57 51 57 59 ()}
        {Lisp-Entry "editor" slot #f 60 8 60 14 ()}
        {Lisp-Entry "get-editor" accessor #f 60 40 60 48 ()}
        {Lisp-Entry "set-editor" accessor #f 60 40 60 48 ()}
        {Lisp-Entry "edited?" slot #f 61 8 61 15 ()}
        {Lisp-Entry "initialize" method #f 69 20 69 30 ("limit-to-list?~self" "nullable?~self" "value~self" "self" "property_" "property_~self" "set!" "nextmethod" "apply" "others" "limit-to-list?" "nullable?" "value" "property" "bind-keywords" "rest")}
        {Lisp-Entry "get-property" method #f 83 18 83 30 ("property_")}
        {Lisp-Entry "set-property" method #f 87 18 87 30 ("property_" "set!" "prop")}
        {Lisp-Entry "get-title" method #f 91 18 91 27 ("get-title" "children" "car" "node" "let")}
        {Lisp-Entry "set-title" method #f 96 18 96 27 ("set-title" "children" "car" "node" "let" "title")}
        {Lisp-Entry "get-client" method #f 101 18 101 28 ("get-tree" "get-client")}
        {Lisp-Entry "auto-in-place?" method #f 110 20 110 34 ()}
        {Lisp-Entry "auto-expand" method #f 114 20 114 31 ("edit-row" "editable?" "when" "nextmethod")}
        {Lisp-Entry "auto-select" method #f 120 20 120 31 ("select-editor" "editable?" "when" "nextmethod")}
        {Lisp-Entry "auto-collapse" method #f 126 20 126 33 ("end-row-edition" "in-edition?" "when" "nextmethod")}
        {Lisp-Entry "auto-collapsable?" method #f 132 20 132 37 ("in-edition?")}
        {Lisp-Entry "enter-value" method #f 141 26 141 37 ("get-tree" "get-card" "enter-value" "update" "property_" "not" "if" "set-modified?" "value" "set!" "v")}
        {Lisp-Entry "enter-edited-value" method #f 149 18 149 36 ("throw-cancel" "get-edited-value" "enter-value" "validate-value" "if")}
        {Lisp-Entry "default-value" method #f 155 26 155 39 ()}
        {Lisp-Entry "present" method #f 164 26 164 33 (":reader" "->string" "not" "if" "value")}
        {Lisp-Entry "editable?" method #f 175 26 175 35 ("property-setter" "property_" "not" "or")}
        {Lisp-Entry "get-edited-value" method #f 180 26 180 42 ("editor" "get-string-content" "read-string-element")}
        {Lisp-Entry "set-edited-value" method #f 184 26 184 42 ("present" "editor" "set-string-content" "value")}
        {Lisp-Entry "get-edited-modified?" method #f 188 26 188 46 ("editor" "get-controller" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" method #f 192 26 192 46 ("editor" "get-controller" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" method #f 196 26 196 37 ("editor" "show-text-cursor")}
        {Lisp-Entry "validate-value" method #f 200 18 200 32 ("get-edited-value" "revert-property" "get-end" "end" "end:" "get-start" "start" "start:" "focus-editor" "no" "no:" "yes" "yes:" "question" "type" "type:" "exception-reason" "message-box" "case" "err" "Parse-Error" "catch")}
        {Lisp-Entry "edit-row" method #f 213 18 213 26 ("edited?" "set!" "edit")}
        {Lisp-Entry "end-row-edition" method #f 218 18 218 33 ("edited?" "set!" "end-edition")}
        {Lisp-Entry "in-edition?" method #f 223 26 223 37 ("edited?")}
        {Lisp-Entry "edit" method #f 227 26 227 30 ("edit-in-cell")}
        {Lisp-Entry "end-edition" method #f 231 26 231 37 ("close-editor" "save-edition")}
        {Lisp-Entry "save-edition" method #f 236 26 236 38 ("set-edited-modified?" "enter-edited-value" "get-edited-modified?" "when")}
        {Lisp-Entry "close-editor" method #f 242 26 242 38 ("close-in-cell-editor")}
        {Lisp-Entry "close-editor?" method #f 246 26 246 39 ()}
        {Lisp-Entry "select-editor" method #f 250 26 250 39 ("focus-editor" "edit-in-cell" "in-cell-edition?" "not" "when" "get-tree" "tree" "let")}
        {Lisp-Entry "in-cell-edition?" method #f 257 18 257 34 ("1" "Cell" "new" "get-edited-cell" "nu=?" "self" "row->line" "line" "in-edition?" "and" "get-tree" "tree" "let")}
        {Lisp-Entry "editor-up-arrow" method #f 269 18 269 33 ("NoModifiers" "get-tree" "up-arrow-press")}
        {Lisp-Entry "editor-down-arrow" method #f 273 18 273 35 ("NoModifiers" "get-tree" "down-arrow-press")}
        {Lisp-Entry "editor-tab" method #f 277 18 277 28 ("down-arrow-press" "get-tree" "up-arrow-press" "shift-down?" "if" "NoModifiers" "modifiers" "let")}
        {Lisp-Entry "editor-return" method #f 284 18 284 31 ("150" "duration" "duration:" "save-edition" "set-edited-modified?" "lambda" ":wait" "with-cursor" "show-cursor")}
        {Lisp-Entry "editor-focus-delegate" method #f 293 18 293 39 ("invalidate-drawing" "select-all?" "select-all?:" "focus-editor" "self" "get-tree" "auto-expand/collapse" "in-edition?" "not" "auto-in-place?" "and" "when")}
        {Lisp-Entry "editor-focus-lose" method #f 300 18 300 35 ("invalidate-drawing" "get-tree" "close-auto-expanded")}
        {Lisp-Entry "edit-in-cell" method #f 310 26 310 38 ("set-client" "focus-editor" "close-editor?" "close-editor?:" "editor:" "edit-cell" "value" "set-edited-value" "set-parent" "new-editor" "set!" "editor" "unless" "fill" "set-layout-type" "get-content" "content" "hscroll?" "hscroll?:" "vscroll?" "vscroll?:" "parent" "parent:" "Scroller-View" "scroller" "Dark-Red" "Color" "border-color" "border-color:" "solid" "border-type" "border-type:" "Border-View" "border" "1" "self" "row->line" "Cell" "new" "cell" "get-tree" "tree" "let*")}
        {Lisp-Entry "new-editor" method #f 327 29 327 39 ()}
        {Lisp-Entry "editor-class" method #f 331 29 331 41 ()}
        {Lisp-Entry "close-in-cell-editor" method #f 335 18 335 38 ("editor" "set!" "close-editor?" "when" "end-edition" "get-tree" "tree" "let")}
        {Lisp-Entry "focus-editor" method #f 342 26 342 38 ("Range" "new" "set-selection" "else" "set-caret" "select-all" "not" "cond" "acquire-focus" "when" "focused-editor" "editor" "let" "select-all?" "select-all?:" "end" "end:" "start" "start:")}
        {Lisp-Entry "focused-editor" method #f 351 26 351 40 ("editor")}
        {Lisp-Entry "Modified-Color" definition #f 360 14 360 28 ("Dark-Red" "Color")}
        {Lisp-Entry "update" method #f 364 26 364 32 ("update-in-cell" "value")}
        {Lisp-Entry "update-in-cell" method #f 368 11 368 25 ("invalidate-cell" "set-edited-modified?" "set-title" "set-property-modified?" "set-value" "get-cell-data" "get-preserved-data" "if" "data" "get-cell-editor" "editor" "in-edition?" "edited?" "1" "Cell" "new" "cell" "self" "row->line" "line" "present" "title" "get-tree" "tree" "let*" "value")}
        {Lisp-Entry "set-property-modified?" method #f 384 11 384 33 ("invalidate-cell" "set-color" "Modified-Color" "if" "color" "get-cell-data" "node" "0" "Cell" "new" "cell" "self" "row->line" "line" "get-tree" "tree" "let*" "property_" "when" "flag")}
        {Lisp-Entry "edit-definitions" method #f 400 26 400 42 ("bell")}
        {Lisp-Entry "double-click" method #f 409 20 409 32 ("self" "auto-expand/collapse" "get-tree" "tree" "let" "pos")}
        {Lisp-Entry "show-property" method #f 414 18 414 31 ("property_" "field-name" "set-showed-property" "View-Editor" "is-not?" "get-editor" "editor" "let" "bell" "not" "if" "get-surrogate" "surrogate" "get-client" "client" "let*")}
        {Lisp-Entry "revert-property" method #f 425 18 425 33 ("focus-editor" "set-modified?" "set-property-modified?" "set-edited-modified?" "value" "set-edited-value")}
        {Lisp-Entry "draw-data" method #f 438 26 438 35 ("0" "1" "draw-at" "height" "width" "data" "row" "column" "value" "context" "surface")}}}})
"Value-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Value-Text-View.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.Value-Text-View" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.ide" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Value-Text-View" class #f 47 20 47 35 ("initialize" "Property-Editor" "implements" "IDE-Text-View" "Plain-Text-View")
        {Lisp-Entry "value-row" property #f 50 12 50 21 ()}
        {Lisp-Entry "get-value-row" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "set-value-row" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "manager" slot #f 53 8 53 15 ()}
        {Lisp-Entry "form" anonymous #f 56 3 56 7 ("top-padding" "top-padding:" "1" "left-padding" "left-padding:" "show-unfocused-selection?" "show-unfocused-selection?:" "accepts-returns?" "accepts-returns?:" "Text-Base" "Text-Style" "base-style" "base-style:" "install")}
        {Lisp-Entry "get-manager" method #f 65 20 65 31 ("manager")}
        {Lisp-Entry "set-manager" method #f 69 20 69 31 ("manager" "set!" "value")}
        {Lisp-Entry "get-edited-value" method #f 73 11 73 27 ("get-string-content" "read-string-element")}
        {Lisp-Entry "set-edited-value" method #f 77 11 77 27 ("set-string-content" ":reader" "->string" "present-edited-value" "define" "value")}
        {Lisp-Entry "get-edited-modified?" method #f 84 11 84 31 ("get-controller" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" method #f 88 11 88 31 ("get-controller" "set-modified?" "flag")}
        {Lisp-Entry "up-arrow-move" method #f 97 20 97 33 ("editor-up-arrow" "value-row" "manager" "or" "target" "let" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method #f 102 20 102 35 ("editor-down-arrow" "value-row" "manager" "or" "target" "let" "scroll?" "extend?")}
        {Lisp-Entry "tab-press" method #f 107 20 107 29 ("value-row" "editor-tab" "manager" "end-completion" "has-completion?" "if" "modifiers" "key")}
        {Lisp-Entry "return-press" method #f 115 20 115 32 ("value-row" "editor-return" "manager" "if" "nextmethod" "key")}
        {Lisp-Entry "document-menu" method #f 122 11 122 24 ()}
        {Lisp-Entry "focus-lose" method #f 131 20 131 30 ("value-row" "editor-focus-lose" "manager" "if" "nextmethod")}
        {Lisp-Entry "focus-master" method #f 138 20 138 32 ("value-row" "get-tree")}
        {Lisp-Entry "focus-reset" method #f 142 20 142 31 ("value-row" "get-tree")}}}})
"View-Descendants-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "View-Descendants-Editor.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.View-Descendants-Editor" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "View-Descendants-Editor" class #f 43 20 43 43 ("Descendants-Editor")
        {Lisp-Entry "form-model" method #f 46 20 46 30 ("nextmethod" "else" "View-Descendants-Tree" "tree" "get-name" "case" "form")}}}})
"View-Descendants-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "View-Descendants-Tree.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.View-Descendants-Tree" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "View-Descendants-Tree" class #f 47 20 47 41 ("explicit" "initialize" "Descendants-Tree")
        {Lisp-Entry "show-contents?" property #f 50 12 50 26 ()}
        {Lisp-Entry "get-show-contents?" method #f 58 18 58 36 ("show-contents?")}
        {Lisp-Entry "set-show-contents?" method #f 62 18 62 36 ("preserving-update" "show-contents?" "set!" "value")}
        {Lisp-Entry "categorized-addable-classes" method #f 72 20 72 47 ("nextmethod" "component-categorized-toolbox-addable-classes" "or" "component")}
        {Lisp-Entry "focus-update-actions" method #f 82 20 82 40 ("edit" "components-tree" "Action" "set-action-enabled?" "Component" "get-single-selected-data" "is?" "when" "nextmethod")}
        {Lisp-Entry "insert-component" method #f 93 20 93 36 ("insert-components" "nextmethod" "apply" "Content-View" "is-not?" "show-contents?" "or" "if" "rest" "level" "update?" "rights" "component" "row")}}}})
"View-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "View-Editor.jazz"} 1299092001 jazz
    {Lisp-Entry "jazz.designer.editor.View-Editor" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui" "jazz.platform" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "View-Editor" class #f 52 20 52 31 ("select" "initialize" "Component-Editor")
        {Lisp-Entry "mode" property #f 55 12 55 16 ()}
        {Lisp-Entry "get-mode" accessor #f 55 46 55 54 ()}
        {Lisp-Entry "set-mode" accessor #f 55 46 55 54 ()}
        {Lisp-Entry "overlay" slot #f 58 18 58 25 ()}
        {Lisp-Entry "get-overlay" accessor #f 58 56 58 64 ()}
        {Lisp-Entry "showed-property" slot #f 59 18 59 33 ()}
        {Lisp-Entry "get-showed-property" accessor #f 59 56 59 64 ()}
        {Lisp-Entry "rubber-band?" slot #f 60 18 60 30 ()}
        {Lisp-Entry "get-rubber-band?" accessor #f 60 56 60 64 ()}
        {Lisp-Entry "base-view" slot #f 61 18 61 27 ()}
        {Lisp-Entry "get-base-view" accessor #f 61 56 61 64 ()}
        {Lisp-Entry "base-position" slot #f 62 18 62 31 ()}
        {Lisp-Entry "get-base-position" accessor #f 62 56 62 64 ()}
        {Lisp-Entry "current-position" slot #f 63 18 63 34 ()}
        {Lisp-Entry "get-current-position" accessor #f 63 56 63 64 ()}
        {Lisp-Entry "preserved-client" slot #f 64 18 64 34 ()}
        {Lisp-Entry "get-preserved-client" accessor #f 64 56 64 64 ()}
        {Lisp-Entry "show-frames?" slot #f 65 18 65 30 ()}
        {Lisp-Entry "get-show-frames?" accessor #f 65 56 65 64 ()}
        {Lisp-Entry "show-content?" slot #f 66 18 66 31 ()}
        {Lisp-Entry "get-show-content?" accessor #f 66 56 66 64 ()}
        {Lisp-Entry "form" anonymous #f 69 3 69 7 ("vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "scroller" "name" "name:" "Scroller-View" "fill" "layout-type" "layout-type:" "install")}
        {Lisp-Entry "host-position" method #f 79 25 79 38 ("117" "227" "Point")}
        {Lisp-Entry "host-size" method #f 83 25 83 34 ("629" "810" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 87 20 87 35 ("designer")}
        {Lisp-Entry "guest-actions" method #f 96 20 96 33 ("nextmethod" "view-editor" "find-actions" "cons")}
        {Lisp-Entry "on-bring-to-front" method #f 106 11 106 28 ("designer" "bring-to-front" "component" "lambda" "for-each" "outer-selection" "selection" "let" "evt")}
        {Lisp-Entry "on-send-to-back" method #f 113 11 113 26 ("designer" "send-to-back" "component" "lambda" "for-each" "outer-selection" "selection" "let" "evt")}
        {Lisp-Entry "on-delete-selection" method #f 120 11 120 30 ("delete-selection" "evt")}
        {Lisp-Entry "on-rename-selected" method #f 124 11 124 29 ("set-presentation-property" "get-presentation-property" "initial-value" "initial-value:" "get-brothers" "class-of" "request-component-presentation" "presentation" "get-designer" "designer" "car" "component" "bell" "1" "length" "/=" "if" "outer-selection" "selection" "let" "evt")}
        {Lisp-Entry "on-select-all-children" method #f 134 11 134 33 ("get-surrogate" "select-all" "car" "component" "bell" "1" "length" "/=" "if" "outer-selection" "selection" "let" "evt")}
        {Lisp-Entry "on-properties" method #f 142 11 142 24 ("focus?" "focus?:" "workspace" "workspace:" "Properties-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-edit" method #f 146 11 146 18 ("car" "class-of" "edit-component" "jazz.designer.view" "jazz.designer.view:edit-component" "selection" "not-null?" "when" "evt")}
        {Lisp-Entry "new-event" method #f 156 25 156 34 ("Toolbox-Manager" "find-docked" "get-tree" "on-new" "rest")}
        {Lisp-Entry "client-update" method #f 165 20 165 33 ("set-visible?" "client" "when" "install-client" "nextmethod")}
        {Lisp-Entry "install-client-surrogate" method #f 172 20 172 44 ("self" "install-surrogate" "client" "when")}
        {Lisp-Entry "install-client" method #f 177 29 177 43 ("set-client" "set-parent" "get-content" "and" "content" "locate-component" "scroller" "let*" "unless" "get-parent" "client-parent" "let" "client" "when")}
        {Lisp-Entry "install-current-designer" method #f 194 20 194 44 ("get-surrogate" "redraw-border" "nextmethod" "form" "component")}
        {Lisp-Entry "toggle-frames" method #f 205 19 205 32 ("get-reference" "invalidate-view" "not" "show-frames?" "set!")}
        {Lisp-Entry "toggle-content" method #f 210 19 210 33 ("get-reference" "invalidate-view" "not" "show-content?" "set!")}
        {Lisp-Entry "toggle-try-out" method #f 215 19 215 33 ("list" "else" "set-client" "set-selection" "client" "preserved-client" "set!" "trying-out?" "not" "cond")}
        {Lisp-Entry "trying-out?" method #f 226 19 226 30 ("preserved-client" "boolean")}
        {Lisp-Entry "set-showed-property" method #f 235 19 235 38 ("client" "invalidate-view" "showed-property" "set!" "property")}
        {Lisp-Entry "invalidate-selection" method #f 245 19 245 39 ("selection" "invalidate-view" "View" "is?" "when" "selected" "lambda" "for-each")}
        {Lisp-Entry "render" method #f 257 20 257 26 ("length" "0" "naturals" "selection" "draw-selected" "outer-client" "outer" "get-surrogate" "surrogate" "let*" "View" "is?" "when" "rank" "view" "lambda" "for-each" "nextmethod" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "nodes" "draw-self?" "surface")}
        {Lisp-Entry "start-rubber-band" method #f 273 19 273 36 ("setup-overlay" "acquire-capture" "current-position" "base-position" "base-view" "rubber-band?" "set!" "pos" "view")}
        {Lisp-Entry "process-rubber-band" method #f 282 19 282 38 ("select-rubber-banded" "rect" "base-position" "corners->rect" "client" "invalidate-rect" "set!" "current-position" "old" "let" "rubber-band?" "when" "pos")}
        {Lisp-Entry "select-rubber-banded" method #f 294 11 294 31 ("set-selection" "get-output" "lst" "let" "put" "rects-intersect?" "when" "client" "acquire" "get-bounds" "b" "view" "lambda" "base-view" "for-each-view" "List-Factory" "new" "selection" "rect-size" "s" "rect-position" "p" "normalize-rect" "r" "let*" "rect")}
        {Lisp-Entry "end-rubber-band" method #f 309 19 309 34 ("rubber-band?" "set!" "base-view" "release-capture" "remove-overlay" "base-position" "corners->rect" "select-rubber-banded" "process-rubber-band" "pos")}
        {Lisp-Entry "setup-overlay" method #f 322 11 322 24 ("self" "editor" "editor:" "client" "parent" "parent:" "Client-Overlay" "new" "overlay" "set!")}
        {Lisp-Entry "remove-overlay" method #f 326 11 326 25 ("set!" "overlay" "close")}
        {Lisp-Entry "align-left" method #f 336 18 336 28 ("cdr" "get-v" "Point" "new" "set-view-lie" "get-lie" "lie" "view" "lambda" "for-each" "lie-left" "h" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "align-top" method #f 348 18 348 27 ("cdr" "get-h" "Point" "new" "set-view-lie" "get-lie" "lie" "view" "lambda" "for-each" "lie-top" "v" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "align-right" method #f 360 18 360 29 ("cdr" "get-v" "Point" "new" "set-view-lie" "get-width" "-" "get-lie" "lie" "view" "lambda" "for-each" "lie-right" "h" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "align-bottom" method #f 373 18 373 30 ("cdr" "get-h" "Point" "new" "set-view-lie" "get-height" "-" "get-lie" "lie" "view" "lambda" "for-each" "lie-bottom" "v" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "center-horizontally" method #f 386 18 386 37 ("cdr" "get-v" "Point" "new" "set-view-lie" "-" "fxround/" "+" "get-lie" "lie" "view" "lambda" "for-each" "get-width" "width" "lie-left" "h" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "center-vertically" method #f 400 18 400 35 ("cdr" "get-h" "Point" "new" "set-view-lie" "-" "fxround/" "+" "get-lie" "lie" "view" "lambda" "for-each" "get-height" "height" "lie-top" "v" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "space-horizontally" method #f 414 18 414 36 ("cddr" "get-width" "increase!" "get-v" "Point" "new" "set-view-lie" "get-lie" "lie" "view" "lambda" "for-each" "+" "h" "lie-right" "lie-left" "-" "dh" "second" "get-surrogate" "outer-client" "first" "let*" "bell" "3" "selection" "length" "<" "if")}
        {Lisp-Entry "space-vertically" method #f 429 18 429 34 ("cddr" "get-height" "increase!" "get-h" "Point" "new" "set-view-lie" "get-lie" "lie" "view" "lambda" "for-each" "+" "v" "lie-bottom" "lie-top" "-" "dv" "second" "get-surrogate" "outer-client" "first" "let*" "bell" "3" "selection" "length" "<" "if")}
        {Lisp-Entry "resize-width" method #f 444 18 444 30 ("cdr" "get-height" "Dimension" "new" "designer" "safe-set-property" "get-size" "size" "view" "lambda" "for-each" "get-width" "width" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "resize-height" method #f 456 18 456 31 ("cdr" "get-width" "Dimension" "new" "designer" "safe-set-property" "get-size" "size" "view" "lambda" "for-each" "get-height" "height" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "resize-both" method #f 468 18 468 29 ("cdr" "designer" "safe-set-property" "let" "view" "lambda" "for-each" "get-size" "size" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "lie-left" definition #f 479 15 479 23 ("get-lie" "get-h" "view")}
        {Lisp-Entry "lie-top" definition #f 483 15 483 22 ("get-lie" "get-v" "view")}
        {Lisp-Entry "lie-right" definition #f 487 15 487 24 ("get-width" "get-lie" "get-h" "+" "view")}
        {Lisp-Entry "lie-bottom" definition #f 491 15 491 25 ("get-height" "get-lie" "get-v" "+" "view")}
        {Lisp-Entry "set-view-lie" method #f 495 11 495 23 ("get-position" "position" "designer" "safe-set-property" "set-lie" "lie" "view")}}
      {Lisp-Entry "Overlay-Outside" definition #f 505 12 505 27 ("8" "0" "0.8" "alpha" "alpha:" "234" "blue" "blue:" "158" "green" "green:" "96" "red" "red:" "Color")}
      {Lisp-Entry "Overlay-Inside" definition #f 508 12 508 26 ("4" "0" "0.4" "alpha" "alpha:" "234" "blue" "blue:" "158" "green" "green:" "96" "red" "red:" "Color")}
      {Lisp-Entry "Client-Overlay" class #f 512 7 512 21 ("View")
        {Lisp-Entry "editor" property #f 515 12 515 18 ()}
        {Lisp-Entry "draw" method #f 518 20 518 24 ("Overlay-Inside" "Overlay-Outside" "rectangle" "corners->rect" "rect" "when" "get-current-position" "current" "editor" "get-base-position" "base" "let" "lv" "lh" "context" "surface")}}}})
"View-Editor-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "View-Editor-Actions.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.editor.View-Editor-Actions" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "View-Editor-Actions" class #f 46 20 46 39 ("Actions")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("on-save" "save" "on-open" "open" ":shift" "on-new" ":frame" "new" ":control" "Shortcut" "shortcut" "shortcut:" "on-edit-form" ":document" "Event-Handler" "action-handler" "action-handler:" "edit-form" "name" "name:" "Action-Item" "install")}}}})
"View-Surrogate"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "surrogate" "View-Surrogate.jazz"} 1296738014 jazz
    {Lisp-Entry "jazz.designer.surrogate.View-Surrogate" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui.resizer" "jazz.ui.clipboard" "jazz.ui" "jazz.system" "jazz.platform" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.designer.view" "jazz.designer.menu" "jazz.designer")}
      {Lisp-Entry "View-Surrogate" class #f 56 20 56 34 ("initialize" "Renderer" "Component-Surrogate")
        {Lisp-Entry "client-renderer" slot #f 59 18 59 33 ()}
        {Lisp-Entry "client-focus-gained-handler" slot #f 60 18 60 45 ()}
        {Lisp-Entry "client-focus-lose-handler" slot #f 61 18 61 43 ()}
        {Lisp-Entry "client-cursor-update-handler" slot #f 62 18 62 46 ()}
        {Lisp-Entry "client-mouse-down-handler" slot #f 63 18 63 43 ()}
        {Lisp-Entry "client-mouse-up-handler" slot #f 64 18 64 41 ()}
        {Lisp-Entry "client-drag-move-handler" slot #f 65 18 65 42 ()}
        {Lisp-Entry "client-drag-up-handler" slot #f 66 18 66 40 ()}
        {Lisp-Entry "client-double-click-handler" slot #f 67 18 67 45 ()}
        {Lisp-Entry "client-current-drop-handler" slot #f 68 18 68 45 ()}
        {Lisp-Entry "client-receive-drop-handler" slot #f 69 18 69 45 ()}
        {Lisp-Entry "client-context-menu-handler" slot #f 70 18 70 45 ()}
        {Lisp-Entry "client-key-press-handler" slot #f 71 18 71 42 ()}
        {Lisp-Entry "client-arrow-press-handler" slot #f 72 18 72 44 ()}
        {Lisp-Entry "client-backspace-press-handler" slot #f 73 18 73 48 ()}
        {Lisp-Entry "client-return-press-handler" slot #f 74 18 74 45 ()}
        {Lisp-Entry "dragging?" slot #f 77 8 77 17 ()}
        {Lisp-Entry "processing?" slot #f 78 8 78 19 ()}
        {Lisp-Entry "current-part" slot #f 79 8 79 20 ()}
        {Lisp-Entry "start-mouse" slot #f 80 8 80 19 ()}
        {Lisp-Entry "start-positions" slot #f 81 8 81 23 ()}
        {Lisp-Entry "start-position" slot #f 82 8 82 22 ()}
        {Lisp-Entry "start-size" slot #f 83 8 83 18 ()}
        {Lisp-Entry "install-handlers" method #f 91 20 91 36 ("invalidate-border" "on-return-press" "set-return-press-handler" "on-backspace-press" "set-backspace-press-handler" "on-arrow-press" "set-arrow-press-handler" "on-key-press" "set-key-press-handler" "on-context-menu" "set-context-menu-handler" "on-receive-drop" "set-receive-drop-handler" "on-current-drop" "set-current-drop-handler" "on-double-click" "set-double-click-handler" "on-drag-up" "set-drag-up-handler" "on-drag-move" "set-drag-move-handler" "on-mouse-up" "set-mouse-up-handler" "on-mouse-down" "set-mouse-down-handler" "on-cursor-update" "set-cursor-update-handler" "on-focus-lose" "set-focus-lose-handler" "preserved" "preserved:" "on-focus-gained" "method-name" "method-name:" "target" "target:" "Surrogate-Handler" "new" "set-focus-gained-handler" "self" "set-renderer" "get-return-press-handler" "client-return-press-handler" "get-backspace-press-handler" "client-backspace-press-handler" "get-arrow-press-handler" "client-arrow-press-handler" "get-key-press-handler" "client-key-press-handler" "get-context-menu-handler" "client-context-menu-handler" "get-receive-drop-handler" "client-receive-drop-handler" "get-current-drop-handler" "client-current-drop-handler" "get-double-click-handler" "client-double-click-handler" "get-drag-up-handler" "client-drag-up-handler" "get-drag-move-handler" "client-drag-move-handler" "get-mouse-up-handler" "client-mouse-up-handler" "get-mouse-down-handler" "client-mouse-down-handler" "get-cursor-update-handler" "client-cursor-update-handler" "get-focus-lose-handler" "client-focus-lose-handler" "get-focus-gained-handler" "client-focus-gained-handler" "client" "get-renderer" "client-renderer" "set!" "nextmethod")}
        {Lisp-Entry "remove-handlers" method #f 128 20 128 35 ("invalidate-border" "client-return-press-handler" "set-return-press-handler" "client-backspace-press-handler" "set-backspace-press-handler" "client-arrow-press-handler" "set-arrow-press-handler" "client-key-press-handler" "set-key-press-handler" "client-context-menu-handler" "set-context-menu-handler" "client-receive-drop-handler" "set-receive-drop-handler" "client-current-drop-handler" "set-current-drop-handler" "client-double-click-handler" "set-double-click-handler" "client-drag-up-handler" "set-drag-up-handler" "client-drag-move-handler" "set-drag-move-handler" "client-mouse-up-handler" "set-mouse-up-handler" "client-mouse-down-handler" "set-mouse-down-handler" "client-cursor-update-handler" "set-cursor-update-handler" "client-focus-lose-handler" "set-focus-lose-handler" "client-focus-gained-handler" "set-focus-gained-handler" "client-renderer" "client" "set-renderer" "nextmethod")}
        {Lisp-Entry "Focused-Background" definition #f 154 14 154 32 ("15" "0" "0.15" "alpha" "alpha:" "Dark-Purple" "Color")}
        {Lisp-Entry "Unfocused-Background" definition #f 157 14 157 34 ("15" "0" "0.15" "alpha" "alpha:" "Dark" "Color")}
        {Lisp-Entry "Selected-Colors" definition #f 161 14 161 29 ("Yellow" "Orange" "Red" "Color")}
        {Lisp-Entry "Unselected-Color" definition #f 164 14 164 30 ("Blue" "Color")}
        {Lisp-Entry "render" method #f 168 20 168 26 ("draw" "draw-children" "Outline-View" "is-not?" "or" "draw-content" "draw-background" "when" "editor" "get-show-content?" "content?" "let" "default-render" "define" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "nodes" "draw-self?" "surface" "drawing")}
        {Lisp-Entry "draw" method #f 181 26 181 30 ("draw-showed-property" "draw-handles" "frame-rect" "draw-frame" "outside" "eq?" "get-show-frames?" "2" "min" "Selected-Colors" "element" "Unselected-Color" "key" "key:" "find" "rank" "frame-color" "get-surrogate" "outer-client" "view" "outer-component" "draw-surrogate-frame" "get-bounds" "fill-rect" "Unfocused-Background" "Focused-Background" "selection-focused?" "if" "color" "editing?" "not" "memq" "client" "neq?" "and" "when" "draw-surrogate-background" "define" "get-selection" "selection" "editor" "get-reference" "reference" "let" "surface")}
        {Lisp-Entry "draw-showed-property" method #f 219 18 219 38 ("2" "get-v" "3" "get-h" "+" "draw-text" "Dark-Red" "set-text-color" "Label" "Font" "set-font" "White" "-1" "inflate-rect" "fill-rect" "Black" "Color" "frame-rect" "position/size->rect" "rect" "get-size" "center" "pos" "4" "7" "Dimension" "nu+" "size" "get-text-extent" "extent" "->string" "string" "read-property" "value" "let*" "client" "class-of" "category-field" "property?" "and" "when" "editor" "get-showed-property" "property" "let" "surface")}
        {Lisp-Entry "draw-selected" method #f 235 26 235 39 ("solid" "Black" "Color" "line" "set-line-width" "selected-color" "set-color" "alternate" "set-style" "get-bottom" "b" "1" "get-right" "-" "r" "get-top" "t" "get-left" "l" "get-bounds" "client" "editor" "acquire" "outside" "let" "rank" "surface")}
        {Lisp-Entry "border-region" method #f 252 11 252 24 ("2" "Rect" "insets" "insets:" "outer-client" "border-region")}
        {Lisp-Entry "invalidate-border" method #f 256 20 256 37 ("2" "Rect" "insets" "insets:" "outer-client" "invalidate-border")}
        {Lisp-Entry "redraw-border" method #f 260 20 260 33 ("2" "Rect" "insets" "insets:" "outer-client" "redraw-border")}
        {Lisp-Entry "selected-color" method #f 264 18 264 32 ("1" "length" "-" "min" "element" "Selected-Colors" "colors" "let" "rank")}
        {Lisp-Entry "on-focus-gained" method #f 274 11 274 26 ("focus-gained" "evt")}
        {Lisp-Entry "focus-gained" method #f 278 29 278 41 ("focus-update-actions" "invalidate-selection")}
        {Lisp-Entry "on-focus-lose" method #f 283 11 283 24 ("focus-lose" "evt")}
        {Lisp-Entry "focus-lose" method #f 287 29 287 39 ("invalidate-selection")}
        {Lisp-Entry "focus-actions" method #f 291 20 291 33 ("client" "focus-actions" "view-surrogate" "find-actions" "cons")}
        {Lisp-Entry "selection-focused?" method #f 296 11 296 29 ("editor" "get-selection" "has-focus?" "View" "is?" "and" "component" "lambda" "some?")}
        {Lisp-Entry "focus-update-actions" method #f 306 19 306 39 ("add" "new" "edit" "components-tree" "Action" "set-action-enabled?")}
        {Lisp-Entry "on-cursor-update" method #f 317 11 317 27 ("get-position" "cursor-update" "evt")}
        {Lisp-Entry "cursor-update" method #f 321 26 321 39 (":opened-hand" "move-client?" "get-resize-cursor" "cond" "get-size" "acquire" "find-resize-part" "size-client?" "current-part" "or" "part" ":arrow" "get-client" "eq?" "if" "client" "get-surrogate" "outer-client" "outer" "else" ":cross" "set-cursor" "rect" "case" "editor" "get-mode" "mode" "let" "pos")}
        {Lisp-Entry "Drag-Tolerance" definition #f 344 14 344 28 ("3")}
        {Lisp-Entry "on-mouse-down" method #f 348 11 348 24 ("rect" "acquire" "start-rubber-band" "select-in-editor" "select?" "when" "mouse-down" "get-client" "client" "neq?" "if" "select" "case" "get-position" "pos" "editor" "get-mode" "mode" "let" "evt")}
        {Lisp-Entry "on-mouse-up" method #f 362 11 362 22 ("mouse-up" "get-position" "pos" "let" "evt")}
        {Lisp-Entry "on-drag-move" method #f 367 11 367 23 ("drag-move" "client" "get-client" "acquire" "process-rubber-band" "editor" "get-rubber-band?" "if" "get-position" "pos" "let" "evt")}
        {Lisp-Entry "on-drag-up" method #f 374 11 374 21 ("drag-up" "client" "get-client" "acquire" "end-rubber-band" "editor" "get-rubber-band?" "if" "get-position" "pos" "let" "evt")}
        {Lisp-Entry "on-double-click" method #f 381 11 381 26 ("get-position" "double-click" "evt")}
        {Lisp-Entry "on-current-drop" method #f 385 11 385 26 ("get-drag-drop" "get-position" "current-drop" "evt")}
        {Lisp-Entry "on-receive-drop" method #f 389 11 389 26 ("get-drag-drop" "get-sender" "get-position" "receive-drop" "evt")}
        {Lisp-Entry "on-context-menu" method #f 393 11 393 26 ("get-position" "context-menu" "evt")}
        {Lisp-Entry "select?" method #f 397 29 397 36 ()}
        {Lisp-Entry "select-in-editor" method #f 401 26 401 42 ("client" "editor" "select")}
        {Lisp-Entry "move-client?" method #f 405 29 405 41 ()}
        {Lisp-Entry "size-client?" method #f 409 29 409 41 ()}
        {Lisp-Entry "mouse-down" method #f 413 26 413 36 ("acquire-focus" "start-size" "get-position" "view" "map" "start-positions" "to-desktop" "start-mouse" "get-size" "acquire" "find-resize-part" "size-client?" "current-part" "processing?" "get-selection" "and" "outer-client" "outer" "let" "acquire-capture" "start-position" "dragging?" "set!" "editor" "get-client" "eq?" "edit-client" "begin" "alt-down?" "if" "select-in-editor" "select?" "when" "select" "get-surrogate" "move-client?" "client" "lambda" "some?" "selection" "some-movable?" "define" "pos")}
        {Lisp-Entry "mouse-up" method #f 449 26 449 34 ("pos")}
        {Lisp-Entry "drag-move" method #f 453 26 453 35 ("get-player" "update-window" "size-client" "get-size" "get-height" "get-width" "max" "effective-size" "min" "Point" "effective-position" "new-size" "new" "new-position" "10" "Dimension" "start-size" "max-position" "dheight" "dwidth" "resize-client" "start-positions" "move-client" "get-position" "nu+" "actual-delta" "get-surrogate" "outer-client" "outer-view" "view" "lambda" "for-each" "get-selection" "selection" "if" "get-v" "dv" "get-h" "dh" "from-desktop" "start" "let*" "Drag-Tolerance" "start-mouse" "distance" ">=" "not" "current-part" "or" "when" "to-desktop" "desktop-pos" "processing?" "client" "scroll" "start-position" "nu-" "delta" "let" "dragging?" "cond" "pos")}
        {Lisp-Entry "drag-up" method #f 490 26 490 33 ("processing?" "current-part" "set!" "release-capture" "dragging?" "cond" "position" "size" "set-property" "minimum-size" "minimum-size:" "fit-within" "new-size" "new-position" "receive" "editor" "get-designer" "designer" "get-parent" "get-size" "outer" "get-rect" "rect" "when" "client" "minimal-size" "min-size" "let" "verify-position/size" "define" "pos")}
        {Lisp-Entry "double-click" method #f 513 26 513 38 ("edit-default-property" "pos")}
        {Lisp-Entry "current-drop" method #f 517 26 517 38 ("else" "Value-Row" "is?" "get-row" "row" "Properties-Tree" "view" "view:" "selected-component" "Surrogate-Drop-Target" "new" "client" "addable-class?" "and" "selected-class" "class" "Toolbox-Tree" "typecase" "get-source" "get-view" "sender" "let" "drag-drop" "pos")}
        {Lisp-Entry "receive-drop" method #f 532 26 532 38 ("set-showed-property" "editor" "get-showed-property" "eq?" "if" "field-name" "name" "get-property" "property" "let*" "set-selection" "Properties-Tree" "get-unit" "import" "import:" "get-class" "add-new" "Toolbox-Tree" "typecase" "get-target" "get-payload" "payload" "let" "drag-drop" "sender" "pos")}
        {Lisp-Entry "add-new" method #f 546 18 546 25 ("focus?" "focus?:" "Properties-Manager" "select-docked" "get-default-property" "set-name" "presentation->name" "get-children" "request-component-presentation" "presentation" "shift-down?" "get-new-requests-name?" "xor" "not" "and" "when" "self" "origin" "origin:" "list" "set-selection" "add-child" "position" "position:" "add-view" "visible?" "visible?:" "client" "parent" "parent:" "new" "if" "child" "View" "subclass?" "view?" "editor" "get-designer" "designer" "get-preferences" "preferences" "let" "import" "import:" "properties" "properties:" "name" "name:" "centered?" "centered?:" "pos" "model")}
        {Lisp-Entry "context-menu" method #f 566 26 566 38 ("track-popup-menu" "layout-menu" "update-context-menu" "get-context-menu" "menu" "let" "client" "acquire-focus" "select-in-editor" "select?" "when" "pos")}
        {Lisp-Entry "get-context-menu" method #f 578 26 578 42 ("centered?" "centered?:" "0" "Point" "add-new" "model" "lambda" "update-component-menu" "get-parent" "component-categorized-addable-classes" "component-categorized-toolbox-addable-classes" "or" "Component" "is?" "if" "car" "component" "categorized-addable-classes" "define" "context-menu-class" "new" "menu" "get-selection" "components" "let")}
        {Lisp-Entry "context-menu-class" method #f 594 26 594 44 ("Surrogate-Menu")}
        {Lisp-Entry "update-context-menu" method #f 598 26 598 45 ("menu")}
        {Lisp-Entry "move-client" method #f 607 11 607 22 ("get-v" "get-h" "+" "Point" "new" "position" "position:" "safe-set-property" "get-position" "pos" "move-client?" "client" "get-surrogate" "outer-client" "outer" "get-designer" "designer" "editor" "get-selection" "selection" "let" "0" "/=" "or" "when" "dv" "dh")}
        {Lisp-Entry "size-client" method #f 617 11 617 22 ("update-scrollbars" "get-reference" "client" "eq?" "invalidate-region" "size:" "editor" "get-designer" "safe-set-property" "border-region" "region" "with" "get-height" "get-width" "+" "Dimension" "new" "new-size" "get-size" "size" "outer-client" "outer" "let*" "0" "/=" "or" "when" "dheight" "dwidth")}
        {Lisp-Entry "edit-client" method #f 631 29 631 40 ("client" "editor" "edit-component")}
        {Lisp-Entry "on-key-press" method #f 640 11 640 23 ("get-key" "key-press" "evt")}
        {Lisp-Entry "key-press" method #f 644 29 644 38 ("key")}
        {Lisp-Entry "on-arrow-press" method #f 648 11 648 25 ("down" "1" "right" "up" "0" "-1" "move-selection" "left" "direction" "direction:" "get-property" "case" "get-modifiers" "modifiers" "let" "evt")}
        {Lisp-Entry "on-backspace-press" method #f 657 11 657 29 ("get-key" "backspace-press" "evt")}
        {Lisp-Entry "backspace-press" method #f 661 29 661 44 ("editor" "delete-selection" "key")}
        {Lisp-Entry "on-return-press" method #f 665 11 665 26 ("get-key" "return-press" "evt")}
        {Lisp-Entry "return-press" method #f 669 29 669 41 ("edit-default-property" "key")}
        {Lisp-Entry "move-selection" method #f 678 11 678 25 ("car" "list" "*" "get-surrogate" "move-client" "view" "lambda" "for-each" "get-selection" "selection" "quantum" "and" "single?" "control-key?" "control?" "shift-key?" "let*" "1" "8" "if" "shift?" "move-quantum" "define" "modifiers" "dv" "dh")}
        {Lisp-Entry "save-form" method #f 699 18 699 27 ("save" "when" "get-selection" "selection" "let")}
        {Lisp-Entry "try-out" method #f 710 29 710 36 ()}
        {Lisp-Entry "editing?" method #f 719 29 719 37 ()}
        {Lisp-Entry "can-undo?" method #f 728 26 728 35 ()}
        {Lisp-Entry "can-redo?" method #f 732 26 732 35 ()}
        {Lisp-Entry "can-cut?" method #f 736 26 736 34 ("client" "can-cut-component?")}
        {Lisp-Entry "can-copy?" method #f 740 26 740 35 ("client" "can-copy-component?")}
        {Lisp-Entry "can-paste?" method #f 744 26 744 36 ("client" "can-paste-component?")}
        {Lisp-Entry "can-paste-properties?" method #f 748 26 748 47 ("client" "can-paste-properties-component?")}
        {Lisp-Entry "can-delete?" method #f 752 26 752 37 ("client" "can-delete-component?")}
        {Lisp-Entry "can-rename?" method #f 756 26 756 37 ("client" "can-rename-component?")}
        {Lisp-Entry "can-select-all?" method #f 760 26 760 41 ("client" "can-select-all-component?")}
        {Lisp-Entry "undo" method #f 764 26 764 30 ()}
        {Lisp-Entry "redo" method #f 768 26 768 30 ()}
        {Lisp-Entry "cut-selection" method #f 772 26 772 39 ("list" "if" "set-selection" "cut-components" "components-parent" "parent" "editor" "get-designer" "designer" "get-selection" "selection" "let")}
        {Lisp-Entry "copy-selection" method #f 780 26 780 40 ("copy-components" "editor" "get-designer" "designer" "get-selection" "selection" "let")}
        {Lisp-Entry "paste-clipboard" method #f 786 26 786 41 ("set-selection" "0" "Point" "position" "set-property" "view" "lambda" "for-each" "paste-clipboard" "views" "car" "parent" "editor" "get-designer" "designer" "let*" "bell" "1" "length" "/=" "if" "get-selection" "selection" "let")}
        {Lisp-Entry "paste-properties" method #f 799 26 799 42 ()}
        {Lisp-Entry "delete-selection" method #f 803 26 803 42 ("editor" "delete-selection")}
        {Lisp-Entry "rename-selection" method #f 807 26 807 42 ()}
        {Lisp-Entry "select-all" method #f 811 26 811 36 ("client" "get-children" "View" "collect-type" "set-selection" "rest")}
        {Lisp-Entry "select" method #f 820 20 820 26 ("invalidate-view" "invalidate-border" "acquire-focus" "client" "bring-to-front" "0" "=" "when" "focus?" "rank")}
        {Lisp-Entry "unselect" method #f 833 20 833 28 ("client" "invalidate-view" "invalidate-border")}
        {Lisp-Entry "invalidate-selection" method #f 838 11 838 31 ("editor" "invalidate-selection")}
        {Lisp-Entry "edit-default-property" method #f 847 11 847 32 ("get-tree" "select-property" "focus?" "focus?:" "Properties-Manager" "select-docked" "manager" "bell" "not" "if" "client" "get-default-property" "default-property" "let")}}
      {Lisp-Entry "Surrogate-Drop-Target" class #f 860 7 860 28 ("Drop-Target")
        {Lisp-Entry "payload" slot #f 863 8 863 15 ()}
        {Lisp-Entry "get-payload" accessor #f 863 23 863 31 ()}
        {Lisp-Entry "initialize" method #f 866 20 866 30 ("self" "payload~self" "set!" "nextmethod" "apply" "rest" "payload")}}
      {Lisp-Entry "Surrogate-Menu" class #f 876 7 876 21 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f 879 3 879 7 ("properties" "end-close/rename" "add" "edit" "new" "before-designer" "select-all" "rename-selected" "delete-selection" "end-layer" "send-to-back" "view-surrogate" "bring-to-front" "end-edition" "paste-properties" "paste" "copy" "view" "Action" "action-handler" "action-handler:" "cut" "end-add-group" "Separator-Item" "add-menu" "Add-Menu" "Image-Resource" "icon" "icon:" "title" "title:" "add-item" "name" "name:" "Label-Item" "install")}}}})
"View-Surrogate-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "surrogate" "View-Surrogate-Actions.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.surrogate.View-Surrogate-Actions" module #f 37 18 37 64 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "View-Surrogate-Actions" class #f 46 20 46 42 ("Actions")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("on-new" "new" "on-add" "add" "on-edit" "edit" "on-properties" "properties" ":control" "on-select-all-children" "select-all" "F2" "Shortcut" "shortcut" "shortcut:" "on-rename-selected" "rename-selected" "on-delete-selection" "delete-selection" "on-send-to-back" "send-to-back" "on-bring-to-front" ":focus-guest" "Event-Handler" "action-handler" "action-handler:" "bring-to-front" "name" "name:" "Action-Item" "install")}}}})
"_descriptor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "descriptor" "_descriptor.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.descriptor" module #f 37 8 37 32 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Component-Meta-Descriptor" definition #f 50 19 50 44 ("name-prohibited?" "name" "name:" "Property-Descriptor" ">" "<properties" "<properties~>" "name-unicity?" "name-unicity?:" "name-mandatory?" "name-mandatory?:" "Image-Resource" "image" "image:" "title" "title:" "Component-Descriptor" "form")}
      {Lisp-Entry "Properties-Meta-Descriptor" definition #f 66 19 66 45 ("name-unicity?" "name-unicity?:" "name-mandatory?" "name-mandatory?:" "Image-Resource" "image" "image:" "title" "title:" "Component-Descriptor" "form")}
      {Lisp-Entry "Property-Meta-Descriptor" definition #f 76 19 76 43 ("name" "name:" "Property-Descriptor" ">" "<properties" "<properties~>" "name-unicity?" "name-unicity?:" "name-mandatory?" "name-mandatory?:" "Image-Resource" "image" "image:" "title" "title:" "Component-Descriptor" "form")}
      {Lisp-Entry "Children-Meta-Descriptor" definition #f 88 19 88 43 ("title" "title:" "Component-Descriptor" "form")}}})
"_designer"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "_designer.jazz"} 1296083296 jazz
    {Lisp-Entry "jazz.designer" module #f 37 8 37 21 ("2" "handlers" "handler" "1" "properties" "property" "Image-Resource" "0" "infos" "Domain-Category" "new" "info" "set-domain-category" "jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.designer.autoload")}
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.library" "jazz.designer.autoload")}
      {Lisp-Entry "domain-categories" definition #f 50 12 50 29 ("eq?" "test" "test:" "make-table")}
      {Lisp-Entry "get-domain-category" definition #f 54 20 54 39 ("domain-categories" "table-ref" "name")}
      {Lisp-Entry "set-domain-category" definition #f 57 20 57 39 ("domain-categories" "table-set!" "category" "name")}}})
"_menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "menu" "_menu.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.menu" module #f 37 8 37 26 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "update-component-menu" definition #f 47 21 47 42 ("layout-menu" "cleanup-separators" "properties" "rename-selected" "delete-selection" "locate" "not" "end-add-group" "set-before" "set-parent" ":control" "Shortcut" "set-shortcut" "get-title" "set-title" "get-icon" "set-icon" "unique" "when" "set!" "set-visible?" "begin" "null?" "get-children" "collect-type" "children" "=" "if" "add-item" "locate-component" "empty-add?" "can-view-properties?" "Component" "is?" "can-properties?" "can-new?" "can-add?" "edit" "can-edit?" "rename" "components-tree" "can-rename?" "delete" "can-delete?" "paste-properties" "can-paste-properties?" "paste" "can-paste?" "copy" "can-copy?" "cut" "view" "Action" "get-action-enabled?" "can-cut?" "1" ">=" "component" "length" "count" "let*" "cdr" "Separator-Item" "category" "car" "for-each" "evt" "execute" "execute:" "Event-Handler" "action-handler" "action-handler:" "title:" "icon:" "parent" "parent:" "Label-Item" "new" "get-class-presentation" "localize" "format" "title" "get-class-image" "icon" "resolve-runtime-reference" "class" "reference" "add-label" "let" "not-null?" "and" "lambda" "with-update-locked" "add-menu" "add-components" "define" "add" "reference-categories" "components" "menu")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "autoload.jazz"} 1298554945 jazz
    {Lisp-Entry "jazz.designer.autoload" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("Toolbox-Tree" "jazz.designer.toolbox.Toolbox-Tree" "Toolbox-Model-Descriptor" "Toolbox-Model" "jazz.designer.toolbox.Toolbox-Model" "Toolbox-Manager" "jazz.designer.toolbox.Toolbox-Manager" "Toolbox-Group-Descriptor" "Toolbox-Group" "jazz.designer.toolbox.Toolbox-Group" "Toolbox-Editor" "jazz.designer.toolbox.Toolbox-Editor" "Toolbox-Dynamic-Descriptor" "Toolbox-Dynamic" "jazz.designer.toolbox.Toolbox-Dynamic" "Toolbox" "jazz.designer.toolbox.Toolbox" "View-Surrogate-Actions" "jazz.designer.surrogate.View-Surrogate-Actions" "Surrogate-Drop-Target" "View-Surrogate" "jazz.designer.surrogate.View-Surrogate" "Text-View-Surrogate" "jazz.designer.surrogate.Text-View-Surrogate" "Tab-View-Surrogate" "jazz.designer.surrogate.Tab-View-Surrogate" "Surrogate-Handler" "jazz.designer.surrogate.Surrogate-Handler" "Component-Surrogate" "jazz.designer.surrogate.Component-Surrogate" "Value-Row" "jazz.designer.row.Value-Row" "String-Row" "jazz.designer.row.String-Row" "Reference-Row" "jazz.designer.row.Reference-Row" "Periods-Row" "jazz.designer.row.Periods-Row" "Period-Row" "jazz.designer.row.Period-Row" "Pathname-Row" "jazz.designer.row.Pathname-Row" "Password-Row" "jazz.designer.row.Password-Row" "Memo-Row" "jazz.designer.row.Memo-Row" "Matches-Row" "jazz.designer.row.Matches-Row" "Info-Row" "jazz.designer.row.Info-Row" "Handler-Row" "jazz.designer.row.Handler-Row" "Foreign-Row" "jazz.designer.row.Foreign-Row" "Font-Row" "jazz.designer.row.Font-Row" "File-Row" "jazz.designer.row.File-Row" "Enumeration-Row" "jazz.designer.row.Enumeration-Row" "Editor-Row" "jazz.designer.row.Editor-Row" "Domain-Row" "jazz.designer.row.Domain-Row" "Directory-Row" "jazz.designer.row.Directory-Row" "Directory-Group-Row" "jazz.designer.row.Directory-Group-Row" "Details-Row" "jazz.designer.row.Details-Row" "Composite-Text-Actions" "jazz.designer.row.Composite-Text-Actions" "Composite-Row" "jazz.designer.row.Composite-Row" "Combo-Row-Editor" "jazz.designer.row.Combo-Row-Editor" "Combo-Row" "jazz.designer.row.Combo-Row" "Color-Row" "jazz.designer.row.Color-Row" "Classpath-Row" "jazz.designer.row.Classpath-Row" "Property-Violation" "jazz.designer.property.Property-Violation" "Property-View" "jazz.designer.property.Property-View" "Property-Manager" "jazz.designer.property.Property-Manager" "Property-Editor" "jazz.designer.property.Property-Editor" "Designer-Preferences" "jazz.designer.preference.Designer-Preferences" "Property-Moniker" "jazz.designer.moniker.Property-Moniker" "Component-Menu" "jazz.designer.menu.Component-Menu" "Add-Menu" "jazz.designer.menu.Add-Menu" "Menu-Editor" "jazz.designer.manager.Menu-Editor" "Manager-View" "jazz.designer.manager.Manager-View" "Manager-Actions" "jazz.designer.manager.Manager-Actions" "Designer-Manager" "jazz.designer.manager.Designer-Manager" "Alignment-Editor" "jazz.designer.manager.Alignment-Editor" "Editor-Event" "jazz.designer.event.Editor-Event" "Designer-Event" "jazz.designer.event.Designer-Event" "Value-Entry" "jazz.designer.entry.Value-Entry" "Text-Entry" "jazz.designer.entry.Text-Entry" "String-Entry" "jazz.designer.entry.String-Entry" "Property-Entry" "jazz.designer.entry.Property-Entry" "Presentation-Entry" "jazz.designer.entry.Presentation-Entry" "Pathname-Entry" "jazz.designer.entry.Pathname-Entry" "Name-Entry" "jazz.designer.entry.Name-Entry" "Handler-Entry" "jazz.designer.entry.Handler-Entry" "Foreign-List-Entry" "jazz.designer.entry.Foreign-List-Entry" "Foreign-Entry" "jazz.designer.entry.Foreign-Entry" "Enumeration-List-Entry" "jazz.designer.entry.Enumeration-List-Entry" "Enumeration-Entry" "jazz.designer.entry.Enumeration-Entry" "Color-Entry" "jazz.designer.entry.Color-Entry" "Entry-Check-Box" "Boolean-Entry" "jazz.designer.entry.Boolean-Entry" "Color-Editor" "jazz.designer.editors.Color-Editor" "View-Editor-Actions" "jazz.designer.editor.View-Editor-Actions" "View-Editor" "jazz.designer.editor.View-Editor" "View-Descendants-Tree" "jazz.designer.editor.View-Descendants-Tree" "View-Descendants-Editor" "jazz.designer.editor.View-Descendants-Editor" "Value-Text-View" "jazz.designer.editor.Value-Text-View" "Search-Tree" "jazz.designer.editor.Search-Tree" "Row-Text-View" "jazz.designer.editor.Row-Text-View" "Row-Formatted-Text-View" "jazz.designer.editor.Row-Formatted-Text-View" "Index-Tree" "jazz.designer.editor.Index-Tree" "Component-Controller-Actions" "Component-Provider-Selection-Data" "Component-Provider-Data" "Component-Provider" "Component-Controller" "Grid-Component-Editor" "Grid-Tree-Editor" "jazz.designer.editor.grid" "Details-Tree" "jazz.designer.editor.Details-Tree" "Descendants-Tree" "jazz.designer.editor.Descendants-Tree" "Descendants-Editor" "jazz.designer.editor.Descendants-Editor" "Containment-Editor" "jazz.designer.editor.Containment-Editor" "Components-Viewer-Actions" "jazz.designer.editor.Components-Viewer-Actions" "Components-Viewer" "jazz.designer.editor.Components-Viewer" "Components-Tree-Actions" "jazz.designer.editor.Components-Tree-Actions" "Components-Tree" "jazz.designer.editor.Components-Tree" "Component-Editor-Controller" "jazz.designer.editor.Component-Editor-Controller" "Component-Editor" "jazz.designer.editor.Component-Editor" "Children-Tree" "jazz.designer.editor.Children-Tree" "Value-Domain" "jazz.designer.domain.Value-Domain" "Time-Domain" "jazz.designer.domain.Time-Domain" "Text-Domain" "jazz.designer.domain.Text-Domain" "String-Domain" "jazz.designer.domain.String-Domain" "Rect-Domain" "jazz.designer.domain.Rect-Domain" "Range-Domain" "jazz.designer.domain.Range-Domain" "Presentation-Domain" "jazz.designer.domain.Presentation-Domain" "Point-Domain" "jazz.designer.domain.Point-Domain" "Period-Domain" "jazz.designer.domain.Period-Domain" "Password-Domain" "jazz.designer.domain.Password-Domain" "Number-Domain" "jazz.designer.domain.Number-Domain" "Name-Domain" "jazz.designer.domain.Name-Domain" "List-Domain" "jazz.designer.domain.List-Domain" "Integer-Domain" "jazz.designer.domain.Integer-Domain" "Info-Domain" "jazz.designer.domain.Info-Domain" "Handler-Domain" "jazz.designer.domain.Handler-Domain" "Foreign-Domain" "jazz.designer.domain.Foreign-Domain" "Font-Domain" "jazz.designer.domain.Font-Domain" "File-Domain" "jazz.designer.domain.File-Domain" "Enumeration-Domain" "jazz.designer.domain.Enumeration-Domain" "Domain-Category" "jazz.designer.domain.Domain-Category" "Domain" "jazz.designer.domain.Domain" "Directory-Group-Domain" "jazz.designer.domain.Directory-Group-Domain" "Directory-Domain" "jazz.designer.domain.Directory-Domain" "Dimension-Domain" "jazz.designer.domain.Dimension-Domain" "Color-Domain" "jazz.designer.domain.Color-Domain" "Cell-Domain" "jazz.designer.domain.Cell-Domain" "Boolean-Domain" "jazz.designer.domain.Boolean-Domain" "Details-Card" "jazz.designer.details.Details-Card" "Dispatch-Designer" "jazz.designer.designer.Dispatch-Designer" "Designer-Error" "jazz.designer.designer.Designer-Error" "Designer" "jazz.designer.designer.Designer" "Property-Descriptor" "jazz.designer.descriptor.Property-Descriptor" "Properties-Descriptor" "jazz.designer.descriptor.Properties-Descriptor" "Component-Descriptor" "jazz.designer.descriptor.Component-Descriptor" "Children-Descriptor" "jazz.designer.descriptor.Children-Descriptor" "Child-Descriptor" "jazz.designer.descriptor.Child-Descriptor" "Component-Parcel" "jazz.designer.clipboard.Component-Parcel" "Foreign-List-Chooser" "jazz.designer.choosers.Foreign-List-Chooser" "Save-Chooser" "jazz.designer.choosers.Save-Chooser" "Domain-Chooser" "jazz.designer.choosers.Domain-Chooser" "Details-Chooser" "jazz.designer.choosers.Details-Chooser" "Column-Detail" "jazz.designer.choosers.Column-Detail" "Properties-Tree" "jazz.designer.card.Properties-Tree" "Properties-Manager" "jazz.designer.card.Properties-Manager" "Properties-Card" "jazz.designer.card.Properties-Card" "Group-Card" "jazz.designer.card.Group-Card" "Custom-Card" "jazz.designer.card.Custom-Card" "Card" "jazz.designer.card.Card" "Traits-Viewer" "jazz.designer.trait.Traits-Viewer" "Traits-Tree-Actions" "jazz.designer.trait.Traits-Tree-Actions" "Traits-Tree" "jazz.designer.trait.Traits-Tree" "Traits-Editor" "jazz.designer.trait.Traits-Editor" "Book-View" "jazz.designer.book.Book-View" "Book-Section" "jazz.designer.book.Book-Section" "Book-Controller" "autoload" "jazz.designer.book.Book-Controller")}}})
"grid"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "grid.jazz"} 1299104515 jazz
    {Lisp-Entry "jazz.designer.editor.grid" module #f 0 18 0 43 ("jazz")
      {Lisp-Entry "import" anonymous #f 3 1 3 7 ("jazz.ui.view" "jazz.ui.tree.grid" "jazz.ui" "jazz.ui.clipboard" "jazz.system" "jazz.jml" "jazz.library.component" "jazz.library" "jazz.graphic" "jazz.designer.view" "jazz.designer.menu" "jazz.designer")}
      {Lisp-Entry "classes-common-ancestor" definition #f 17 13 17 36 ("class-ascendant" "map" "classes-common-ancestor" "apply" "or" "subclass?" "subclass" "every?" "class" "lambda" "find-if" "ancestor" "let" "classes")}
      {Lisp-Entry "get-class-categorized-properties" definition #f 26 13 26 45 ("either" "get-categorized" "categorized" "get-properties-descriptor" "properties-descriptor" "let*" "class")}
      {Lisp-Entry "class-properties" definition #f 32 13 32 29 ("get-properties" "collect-if" "get-domain" "get-property-descriptor" "property-descriptor" "memq" "if" "properties" "eq?" "and" "get-category" "get-name" "category" "let" "property" "lambda" "keep-property?" "get-class-categorized-properties" "categorized" "let*" "class")}
      {Lisp-Entry "present-property-value" definition #f 45 13 45 35 ("present-property" "read-property" "value" "let" "property" "component")}
      {Lisp-Entry "column-data-component-property" definition #f 50 13 50 43 ("if" "get-identifier" "class-of" "category-field" "and" "property" "get-parent-offset" "element" "component" "let*" "succeed" "fail" "column-data" "row-data")}
      {Lisp-Entry "column-component-property" definition #f 58 13 58 38 ("column-data-component-property" "cd" "rd" "lambda" "call-with-row/column-data" "succeed" "fail" "column" "row")}
      {Lisp-Entry "make-class-cell-domain" definition #f 63 13 63 35 ("resolve-reference" "get-class-presentation" "map" "zip" "choices" "choices:" "Enumeration-Domain" "new" "class-references")}
      {Lisp-Entry "Component-Provider-Data" class #f 69 7 69 30 ("initialize" "Provider-Data")
        {Lisp-Entry "read-only?" property #f 72 12 72 22 ()}
        {Lisp-Entry "get-read-only?" accessor #f 72 50 72 58 ()}
        {Lisp-Entry "set-read-only?" accessor #f 72 50 72 58 ()}
        {Lisp-Entry "identifier" property #f 73 12 73 22 ()}
        {Lisp-Entry "get-identifier" accessor #f 73 50 73 58 ()}
        {Lisp-Entry "set-identifier" accessor #f 73 50 73 58 ()}
        {Lisp-Entry "parent-offset" property #f 74 12 74 25 ()}
        {Lisp-Entry "get-parent-offset" accessor #f 74 50 74 58 ()}
        {Lisp-Entry "set-parent-offset" accessor #f 74 50 74 58 ()}
        {Lisp-Entry "class-selection?" method #f 77 11 77 27 ("class-info" "identifier" "eq?")}}
      {Lisp-Entry "Component-Provider-Selection-Data" class #f 81 7 81 40 ("initialize" "Component-Provider-Data")
        {Lisp-Entry "component-offset" property #f 84 12 84 28 ()}
        {Lisp-Entry "get-component-offset" accessor #f 84 53 84 61 ()}
        {Lisp-Entry "set-component-offset" accessor #f 84 53 84 61 ()}
        {Lisp-Entry "class-references" property #f 85 12 85 28 ()}
        {Lisp-Entry "get-class-references" accessor #f 85 60 85 68 ()}
        {Lisp-Entry "set-class-references" accessor #f 85 60 85 68 ()}}
      {Lisp-Entry "Component-Provider" class #f 88 7 88 25 ("Data-Provider" "Component")
        {Lisp-Entry "designer" slot #f 91 8 91 16 ()}
        {Lisp-Entry "get-designer" accessor #f 91 27 91 35 ()}
        {Lisp-Entry "set-designer" accessor #f 91 27 91 35 ()}
        {Lisp-Entry "client" slot #f 92 8 92 14 ()}
        {Lisp-Entry "get-client" accessor #f 92 25 92 33 ()}
        {Lisp-Entry "set-client" accessor #f 92 25 92 33 ()}
        {Lisp-Entry "get-grid" method #f 95 11 95 19 ("get-parent")}
        {Lisp-Entry "get-selection-columns" method #f 99 11 99 32 ("get-provider-data" "key" "key:" "get-grid" "get-columns" "Component-Provider-Selection-Data" "collect-type")}
        {Lisp-Entry "column-data-component-class-references" method #f 103 11 103 49 ("get-class-references" "get-selection-columns" "get-provider-data" "component-column-data" "if" "get-parent-offset" "element" "component" "let" "succeed" "fail" "column-data" "row-data")}
        {Lisp-Entry "get-class-domain" method #f 111 11 111 27 ("make-class-cell-domain" "class-references" "component" "lambda" "const" "column-data-component-class-references" "column-data" "row-data")}
        {Lisp-Entry "get-class-reference" method #f 118 11 118 30 ("item" "return" "return:" "resolve-reference" "key" "key:" "class-of" "find" "class-references" "component" "lambda" "column-data-component-class-references" "succeed" "fail" "column-data" "row-data")}
        {Lisp-Entry "set-class" method #f 125 11 125 20 ("import:" "name:" "add-child" "designer" "remove-child" "resolve-runtime-reference" "new" "new-component" "serialize-runtime-reference" "second" "import" "get-name" "name" "get-parent" "parent" "_" "component" "error" "lambda" "column-data-component-class-references" "get-runtime-reference" "runtime-reference" "let" "reference" "column-data" "row-data")}
        {Lisp-Entry "get-data" method #f 143 20 143 28 ("read-property" "property" "component" "lambda" "column-data-component-property" "else" "get-class-reference" "class-selection?" "Component-Provider-Selection-Data" "is?" "cond" "succeed" "fail" "column-data" "row-data")}
        {Lisp-Entry "set-data" method #f 155 20 155 28 ("designer" "safe-set-property" "property" "component" "error" "lambda" "column-data-component-property" "set-class" "class-selection?" "if" "value" "column-data" "row-data")}
        {Lisp-Entry "get-domain" method #f 164 20 164 30 ("property-domain" "const" "column-data-component-property" "get-class-domain" "class-selection?" "if" "Component-Provider-Selection-Data" "is-not?" "and" "column-data" "row-data")}
        {Lisp-Entry "read-only?" method #f 171 20 171 30 ("get-read-only?" "column-data" "row-data")}}
      {Lisp-Entry "Component-Controller-Actions" class #f 175 7 175 35 ("Actions")
        {Lisp-Entry "form" anonymous #f 178 3 178 7 ("on-insert-component" "insert" "F2" "Shortcut" "shortcut" "shortcut:" "on-rename-component" "controller" ":focus" "Event-Handler" "action-handler" "action-handler:" "rename" "name" "name:" "Action-Item" "install")}}
      {Lisp-Entry "Component-Controller-Menu" class #f 184 7 184 32 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f 187 3 187 7 ("paste" "copy" "cut" "rename" "view" "delete" "component-controller" "Action" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "title" "title:" "insert" "name" "name:" "Label-Item" "install")}}
      {Lisp-Entry "Component-Controller" class #f 197 7 197 27 ("Grid-Controller" "Component")
        {Lisp-Entry "designer" slot #f 200 8 200 16 ()}
        {Lisp-Entry "get-designer" accessor #f 200 27 200 35 ()}
        {Lisp-Entry "set-designer" accessor #f 200 27 200 35 ()}
        {Lisp-Entry "editor" slot #f 201 8 201 14 ()}
        {Lisp-Entry "get-editor" accessor #f 201 25 201 33 ()}
        {Lisp-Entry "set-editor" accessor #f 201 25 201 33 ()}
        {Lisp-Entry "client" slot #f 202 8 202 14 ()}
        {Lisp-Entry "get-client" accessor #f 202 25 202 33 ()}
        {Lisp-Entry "set-client" accessor #f 202 25 202 33 ()}
        {Lisp-Entry "get-tab-stops" method #f 210 20 210 33 ("collect-visible-rows" "get-columns" "collect" "append-map" "p" "c" "column-data-component-property" "get-read-only?" "not" "Component-Provider-Selection-Data" "is-not?" "cd" "rd" "lambda" "call-with-row/column-data" "get-single-selection" "cell=?" "and" "or" "row/column->site" "site->cell" "cell" "column" "row" "tab-cell" "define" "get-grid" "grid" "let")}
        {Lisp-Entry "update-label" method #f 229 18 229 30 ("get-domain" "lambda" "get-provider" "get-data" "is?" "if" "Tree-Background" "present" "domain" "val" "update-active-element" "set-background" "set-title" "update-inactive-element" "Gray" "else" "element" "White" "Color" "not" "cond" "get-parent-offset" "parent-offset" "let" "Component-Provider-Selection-Data" "typecase" "inactive-cell-background" "define" "label" "column-data" "row-data")}
        {Lisp-Entry "selection-cell?" method #f 257 20 257 35 ("Component-Provider-Selection-Data" "is?" "column-data" "row-data" "lambda" "call-with-row/column-data" "column" "row")}
        {Lisp-Entry "cell-editable?" method #f 263 20 263 34 ("Component-Provider-Selection-Data" "is?" "get-read-only?" "not" "and" "column-data" "row-data" "lambda" "call-with-row/column-data" "column" "row")}
        {Lisp-Entry "get-provider" method #f 269 11 269 23 ("parent" "get-provider")}
        {Lisp-Entry "get-grid" method #f 273 11 273 19 ("parent")}
        {Lisp-Entry "get-focus-actions" method #f 277 20 277 37 ("component-controller" "find-actions")}
        {Lisp-Entry "can-rename?" method #f 281 18 281 29 ("get-identifier" "not" "get-component-offset" "element" "Component-Provider-Selection-Data" "is?" "column-data" "car" "row-data" "let" "length" "1" "=" "and" "get-grid" "selected-cells-data" "columns-data" "rows-data" "receive")}
        {Lisp-Entry "can-insert?" method #f 291 18 291 29 ("get-component-offset" "element" "get-identifier" "not" "or" "Component-Provider-Selection-Data" "is?" "column-data" "car" "row-data" "let" "length" "1" "=" "and" "get-grid" "selected-cells-data" "columns-data" "rows-data" "receive")}
        {Lisp-Entry "focus-update-actions" method #f 301 20 301 40 ("can-rename?" "rename" "can-insert?" "insert" "component-controller" "Action" "set-action-enabled?")}
        {Lisp-Entry "get-context-menu" method #f 306 20 306 36 ("self" "client" "client:" "Component-Controller-Menu" "new")}
        {Lisp-Entry "selected-components" method #f 310 11 310 30 ("get-parent-offset" "get-component-offset" "element" "map" "car" "Component-Provider-Selection-Data" "is?" "data" "lambda" "every?" "1" "length" ">" "assert" "null?" "if" "get-grid" "selected-cells-data" "columns-data" "rows-data" "receive")}
        {Lisp-Entry "on-rename-component" method #f 322 18 322 37 ("designer" "set-presentation-property" "get-presentation-property" "initial-value" "initial-value:" "get-brothers" "class-of" "request-component-presentation" "presentation" "selected-components" "car" "component" "let*" "evt")}
        {Lisp-Entry "on-insert-component" method #f 328 18 328 37 ("second" "module-public" "eq?" "and" "serialize-runtime-reference" "serialization" "import" "import:" "designer" "add-child" "name:" "parent:" "new" "child" "request-component-presentation" "name" "resolve-runtime-reference" "class" "get-children" "brothers" "let*" "client" "element" "if" "get-parent-offset" "parent-offset" "parent" "get-class-references" "get-runtime-reference" "runtime-reference" "column-data" "car" "row-data" "let" "get-grid" "selected-cells-data" "columns-data" "rows-data" "receive" "evt")}
        {Lisp-Entry "on-selection-change" method #f 344 20 344 39 ("get-application" "update-focus-actions" "selected-components" "editor" "set-selection" "evt")}
        {Lisp-Entry "cut-selection" method #f 349 20 349 33 ("selected-components" "designer" "cut-components")}
        {Lisp-Entry "copy-selection" method #f 353 20 353 34 ("selected-components" "designer" "copy-components")}
        {Lisp-Entry "delete-selection" method #f 357 20 357 36 ("selected-components" "designer" "delete-components")}
        {Lisp-Entry "paste-clipboard" method #f 361 20 361 35 ("get-jazz-parcels" "designer" "paste-parcels" "selected-components" "determine-unique-paster" "parent" "let")}
        {Lisp-Entry "can-copy?" method #f 366 20 366 29 ("selected-components" "can-copy-components?")}
        {Lisp-Entry "can-cut?" method #f 370 20 370 28 ("selected-components" "can-cut-components?")}
        {Lisp-Entry "can-paste?" method #f 374 20 374 30 ("selected-components" "can-paste-components?")}
        {Lisp-Entry "can-delete?" method #f 378 20 378 31 ("selected-components" "can-delete-components?")}
        {Lisp-Entry "child-add" method #f 382 11 382 20 ("grid-populate" "parent" "child")}
        {Lisp-Entry "child-remove" method #f 386 11 386 23 ("grid-populate" "parent" "child")}
        {Lisp-Entry "property-change" method #f 390 11 390 26 ("update-label" "cd" "rd" "call-with-row/column-data" "label" "Cell" "new" "update-cell" "get-parent-offset" "element" "get-identifier" "get-name" "eq?" "and" "get-provider-data" "column-data" "column-rank" "column" "for-each-column" "memq?" "when" "get-user-data" "row-data" "let" "row-rank" "row" "lambda" "get-grid" "for-each-row" "property" "component")}
        {Lisp-Entry "name-change" method #f 407 11 407 22 ("grid-populate" "old-name" "new-name" "component")}
        {Lisp-Entry "grid-populate" method #f 411 20 411 33 ("insert-client" "component-addable-classes" "not-null?" "client" "and" "when" "lambda" "get-grid" "populate")}
        {Lisp-Entry "merge?" method #f 418 20 418 26 ("element" "eq?" "get-parent-offset" "get-component-offset" "Component-Provider-Selection-Data" "is?" "if" "component-offset" "let" "column-data" "row2-data" "row1-data")}
        {Lisp-Entry "insert-client" method #f 423 29 423 42 ("user-data" "user-data:" "children" "children:" "add-row" "row-labels" "for-each" "Component-Provider-Selection-Data" "collect-type" "rows-data" "get-grid" "get-columns" "column" "make-row-labels" "update-label" "Tree-Label" "new" "label" "make-row-label" "row-data" "map" "rest" "child" "append-map" "length" "make-list" "class-of" "key" "key:" "get-components" "addable-class?" "class" "lambda" "collect-if" "addable-children" "let" "cdr" "find-child" "cons" "list" "get-identifier" "identifier" "car" "get-provider-data" "column-data" "let*" "null?" "if" "selection-columns" "make-rows-data" "define" "component")}}
      {Lisp-Entry "Grid-Tree-Editor" class #f 463 7 463 23 ("initialize" "Layout-View")
        {Lisp-Entry "generate-columns?" property #f 466 12 466 29 ()}
        {Lisp-Entry "editor" slot #f 469 8 469 14 ()}
        {Lisp-Entry "designer" slot #f 470 8 470 16 ()}
        {Lisp-Entry "client" slot #f 471 8 471 14 ()}
        {Lisp-Entry "form" anonymous #f 474 3 474 7 ("controller" "Component-Controller" "provider" "Component-Provider" "grid" "Grid-Tree" "header" "Tree-Header" "content" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "document" "style" "style:" "scroller" "Scroller-View" "tools" "name" "name:" "Layout-View" "fill" "layout-type" "layout-type:" "install")}
        {Lisp-Entry "Default-Class-Width" definition #f 486 14 486 33 ("150")}
        {Lisp-Entry "Default-Property-Width" definition #f 487 14 487 36 ("100")}
        {Lisp-Entry "Default-Selection-Width" definition #f 488 14 488 37 ("20")}
        {Lisp-Entry "destroy" method #f 491 20 491 27 ("nextmethod" "set-editor" "set-designer")}
        {Lisp-Entry "get-grid" method #f 502 11 502 19 ("grid" "locate")}
        {Lisp-Entry "get-provider" method #f 506 11 506 23 ("provider" "locate")}
        {Lisp-Entry "get-controller" method #f 510 11 510 25 ("controller" "locate")}
        {Lisp-Entry "get-client" method #f 526 18 526 28 ("client")}
        {Lisp-Entry "set-client" method #f 530 18 530 28 ("client-update" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update-provider" method #f 541 11 541 26 ("designer" "set-designer" "client" "get-provider" "set-client")}
        {Lisp-Entry "update-controller" method #f 546 11 546 28 ("self" "set-editor" "designer" "set-designer" "client" "get-controller" "set-client")}
        {Lisp-Entry "client-update" method #f 552 11 552 24 ("update" "update-provider" "update-controller" "get-grid" "end-edition")}
        {Lisp-Entry "update" method #f 559 11 559 17 ("get-controller" "grid-populate" "setup-columns" "generate-columns?" "when" "lambda" "get-grid" "with-update-locked")}
        {Lisp-Entry "add-selection-column" method #f 567 11 567 31 ("class-references:" "parent-offset:" "component-offset:" "identifier:" "provider-data" "name" "name:" "Component-Provider-Selection-Data" "new" "add-child" "Default-Selection-Width" "width" "width:" "Grid-Tree-Column" "class" "class:" "get-grid" "add-column" "column" "let" "class-references" "parent-offset" "component-offset" "identifier")}
        {Lisp-Entry "add-class-column" method #f 572 11 572 27 ("parent-offset:" "class-info" "identifier" "identifier:" "provider-data" "name" "name:" "Component-Provider-Data" "new" "add-child" "Default-Class-Width" "width" "width:" "title" "title:" "Grid-Tree-Column" "class" "class:" "get-grid" "add-column" "column" "let" "parent-offset")}
        {Lisp-Entry "add-property-column" method #f 577 11 577 30 ("read-only?:" "parent-offset:" "identifier:" "provider-data" "name" "name:" "Component-Provider-Data" "new" "add-child" "Default-Property-Width" "width" "width:" "title:" "Grid-Tree-Column" "class" "class:" "get-grid" "add-column" "column" "let" "read-only?" "title" "identifier" "parent-offset")}
        {Lisp-Entry "setup-client-columns" method #f 582 11 582 31 ("0" "client" "component-addable-classes" "not-null?" "component-get-addable-classes" "ancestor-addable-classes" "get-addable?" "+" "iota" "get-target" "get-classes" "child-component-offset" "descriptor" "get-children" "child-descriptors" "children" "find-child" "children-descriptor" "get-descriptor" "ancestor-descriptor" "resolve-runtime-reference" "classes-common-ancestor" "apply" "addable-ancestor" "name-info" "add-selection-column" "let" "add-to" "addable-references" "setup-selection-columns" "sym" "Environment" "setup-context" "Reference" "new" "ref" "let*" "runtime-reference" "runtime-reference->reference" "string=?" "test" "test:" "second" "key" "key:" "resolve-reference" "class-properties" "property-presentation" "list" "map" "class" "append-map" "remove-duplicates" "get-name" "add-property-column" "presentation" "property" "bind" "x" "lambda" "for-each" "setup-property-columns" "add-class-column" "1" "length" ">" "when" "component-offset" "class-references" "setup-class-column" "define")}
        {Lisp-Entry "setup-columns" method #f 631 11 631 24 ("setup-client-columns" "component-addable-classes" "not-null?" "client" "and" "when" "get-grid" "remove-columns")}
        {Lisp-Entry "set-designer" method #f 642 11 642 23 ("update-provider" "update-controller" "add-designer-listener" "on-designer" "method-name" "method-name:" "target" "target:" "Event-Handler" "new" "listener" "let" "set!" "self" "remove-designer-listener" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "on-designer" method #f 654 11 654 22 ("property" "property:" "property-change" ":property-change" "child-remove" ":child-remove" "parent" "parent:" "child" "child:" "child-add" ":child-add" "old-name" "old-name:" "name" "name:" "component" "component:" "get-property" "get-controller" "name-change" ":name-change" "get-kind" "case" "evt")}
        {Lisp-Entry "get-editor" method #f 667 18 667 28 ("editor")}
        {Lisp-Entry "set-editor" method #f 671 18 671 28 ("on-editor" "method-name" "method-name:" "target" "target:" "Event-Handler" "new" "add-editor-listener" "set!" "self" "remove-editor-listener" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "on-editor" method #f 680 11 680 20 ("get-user-origin" "get-force-parent?" "get-origin" "get-old" "get-selection" "selection-changed" ":selection-changed" "designer" "designer:" "set-designer" ":designer-change" "client" "client:" "get-property" "set-client" ":client-change" "get-kind" "case" "evt")}
        {Lisp-Entry "determine-client" method #f 687 11 687 27 ("determine-client" "else" "editor" "get-client" "eq?" "values" "component-addable-classes" "not-null?" "not" "or" "cond" "get-parent" "parent" "let" "component")}
        {Lisp-Entry "set-selection" method #f 699 11 699 24 ("focus?" "focus?:" "force?" "force?:" "self" "origin" "origin:" "remove" "editor" "set-selection" "components")}
        {Lisp-Entry "selection-changed" method #f 703 11 703 28 ("0" "row->line" "Cell" "new" "list" "when" "user-data-row" "row" "determine-client" "selected" "client" "receive" "car" "component" "let" "generate-event?" "generate-event?:" "get-grid" "set-selection" "editor" "get-client" "set-client" "begin" "null?" "if" "self" "eq?" "not" "or" "unless" "focus?" "force-parent?" "origin" "old" "selection")}}
      {Lisp-Entry "Grid-Component-Editor" class #f 719 7 719 28 ("Component-Editor")
        {Lisp-Entry "form" anonymous #f 722 3 722 7 ("grid" "name" "name:" "Grid-Tree-Editor" "fill" "layout-type" "layout-type:" "install")}
        {Lisp-Entry "host-icon" method #f 732 25 732 34 ("Image-Resource")}
        {Lisp-Entry "host-workspaces" method #f 736 20 736 35 ("designer")}
        {Lisp-Entry "install" method #f 745 20 745 27 ("self" "grid" "locate" "set-editor" "nextmethod" "rest")}}}})
"install"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "install.scm"} 1299165064 scheme
    {Lisp-Entry "jazz.designer.install" unit #f 37 6 37 27 ()
      {Lisp-Entry "Component-Parcel" define ("literal") 40 21 40 37 ("jazz.designer.literals:construct-component-parcel")}}})
"literals"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "literals.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.designer.literals" module #f 37 8 37 30 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.jml" "jazz.designer")}
      {Lisp-Entry "construct-component-parcel" definition #f 49 21 49 47 ("Component-Parcel" "new" "jml->form" "map" "nodes" "let" "content" "imports" "object-id" "process-id")}}})
"view"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "view.jazz"} 1298554945 jazz
    {Lisp-Entry "jazz.designer.view" module #f 37 8 37 26 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.ui.picker" "jazz.platform" "jazz.locale" "jazz.library.component" "jazz.library" "jazz.io" "jazz.designer")}
      {Lisp-Entry "request-component-presentation" definition #f 56 21 56 51 ("unicity-domain:" "not" "accepts-empty?" "accepts-empty?:" "prefix" "prefix:" "french" "french:" "format" "english" "english:" "Locales" "new" "title" "title:" "request-string" "presentation" "get-class-presentation" "localize" "pres" "equal?" "test" "test:" "get-presentation-property" "map" "remove" "and" "unicity-domain" "get-name-unicity?" "name-unicity?" "get-name-mandatory?" "name-mandatory?" "let*" "get-name-prohibited?" "if" "validator" "validator:" "initial-value" "initial-value:" "brothers" "class")}
      {Lisp-Entry "component-addable-classes" definition #f 67 21 67 46 ("get-categorized-addable-classes" "component-categorized-toolbox-addable-classes" "or" "flatten" "component")}
      {Lisp-Entry "component-categorized-toolbox-addable-classes" definition #f 72 21 72 66 ("get-addable-models-refs" "list" "Component" "is?" "and" "Toolbox-Manager" "find-docked" "toolbox" "let" "component")}
      {Lisp-Entry "component-categorized-addable-classes" definition #f 79 21 79 58 ("list" "cons" "if" "item" "return" "return:" "resolve-runtime-reference" "key" "key:" "eq?" "test" "test:" "find" "not" "model-ref" "class-of" "model" "get-categorized-addable-classes" "categorized" "classes" "get-addable-classes" "and" "parent-classes" "let" "parent" "component")}
      {Lisp-Entry "redundant-descendant?" definition #f 92 20 92 41 ("has-parent?" "neq?" "and" "target" "lambda" "some?" "components" "component")}
      {Lisp-Entry "can-modify-components?" definition #f 99 13 99 35 ("redundant-descendant?" "not" "Component" "is?" "and" "component" "lambda" "every?" "pred" "components")}
      {Lisp-Entry "can-copy-components?" definition #f 107 20 107 40 ("can-copy-component?" "can-modify-components?" "components")}
      {Lisp-Entry "can-cut-components?" definition #f 111 20 111 39 ("can-cut-component?" "can-modify-components?" "components")}
      {Lisp-Entry "can-delete-components?" definition #f 115 20 115 42 ("can-delete-component?" "can-modify-components?" "components")}
      {Lisp-Entry "can-paste-components?" definition #f 119 20 119 41 ("determine-unique-paster" "Component" "is?" "component" "lambda" "every?" "and" "components")}
      {Lisp-Entry "edit-class" definition #f 131 20 131 30 ("error" "client:" "new-frame" "Grid-Component-Editor" "Component" "View-Editor" "View" "typecase" "editor-class" "new" "component" "focus-host" "frame" "let" "class?" "if" "eq?" "get-form" "get-origin" "origin" "get-client" "client" "let*" "Component-Editor" "is?" "and" "guest" "lambda" "find-frame-if-guest" "find-editor" "define" "class")}
      {Lisp-Entry "edit-component" definition #f 152 20 152 34 ("client" "client:" "new-frame" "Grid-Component-Editor" "View-Editor" "View" "typecase" "or" "error" "else" "read-form" "File" "Component" "instantiate" "Form" "is?" "new" "class?" "cond" "designing?" "parameterize" "component" "let" "editor-class" "editor-class:" "target")}
      {Lisp-Entry "*view-editors*" definition #f 171 12 171 26 ("eq?" "test" "test:" "make-table")}
      {Lisp-Entry "get-view-editor" definition #f 174 21 174 36 ("*view-editors*" "table-ref" "view")}
      {Lisp-Entry "set-view-editor" definition #f 177 21 177 36 ("*view-editors*" "table-set!" "editor" "view")}
      {Lisp-Entry "view-editor-client" definition #f 181 13 181 31 ("get-guest" "else" "typecase" "guest" "determine-client" "define" "view")}
      {Lisp-Entry "design-client" definition #f 190 20 190 33 ("tooltips?" "tooltips?:" "report-figure?" "report-figure?:" "obscure-unhighlighted?" "obscure-unhighlighted?:" "highlight-root-only?" "highlight-root-only?:" "highlight" "highlight:" "design-view" "pos" "view" "lambda" "click" "click:" "pick-figure")}
      {Lisp-Entry "design-mouse-client" definition #f 200 20 200 39 ("mouse-view" "design-view")}
      {Lisp-Entry "design-view" definition #f 204 13 204 24 ("client:" "View-Editor" "new-frame" "class-of" "new" "designing?" "parameterize" "bell" "not" "if" "view-editor-client" "client" "let" "view")}
      {Lisp-Entry "design-view" definition #f 213 13 213 24 ("close" "client:" "host-visible?" "host-visible?:" "View-Editor" "new-frame" "get-guest" "set-view-editor" "get-view-editor" "editor" "bell" "not" "if" "view-editor-client" "client" "let" "view")}
      {Lisp-Entry "save-mouse-client" definition #f 224 20 224 37 ("save" "lambda" ":wait" "with-cursor" "get-view-editor" "editor" "bell" "not" "if" "mouse-view" "view-editor-client" "client" "let")}
      {Lisp-Entry "designer-error" definition #f 241 20 241 34 ("format" "apply" "message" "message:" "Designer-Error" "new" "signal" "rest")}
      {Lisp-Entry "with-safe-design" definition #f 244 20 244 36 ("Designer-Error" "is?" "object?" "and" "obj" "lambda" "with-catched-exception" "thunk")}}})
