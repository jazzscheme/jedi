"Cookie"
 ({Lisp-File-Entry {File jazz.network "src" "jazz" "network" "http" "Cookie.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http.Cookie" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Cookie" class #f 40 7 40 13 ("Object")
        {Lisp-Entry "name" slot #f 43 8 43 12 ()}
        {Lisp-Entry "get-name" accessor #f 43 26 43 34 ()}
        {Lisp-Entry "value" slot #f 44 8 44 13 ()}
        {Lisp-Entry "get-value" accessor #f 44 26 44 34 ()}
        {Lisp-Entry "expires" slot #f 45 8 45 15 ()}
        {Lisp-Entry "get-expires" accessor #f 45 26 45 34 ()}
        {Lisp-Entry "set-expires" accessor #f 45 26 45 34 ()}
        {Lisp-Entry "path" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-path" accessor #f 46 26 46 34 ()}
        {Lisp-Entry "set-path" accessor #f 46 26 46 34 ()}
        {Lisp-Entry "domain" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-domain" accessor #f 47 26 47 34 ()}
        {Lisp-Entry "set-domain" accessor #f 47 26 47 34 ()}
        {Lisp-Entry "secure?" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-secure?" accessor #f 48 26 48 34 ()}
        {Lisp-Entry "set-secure?" accessor #f 48 26 48 34 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("value~self" "name~self" "set!" "nextmethod" "value" "name")}
        {Lisp-Entry "print" method #f 57 20 57 25 ("value" "name" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "parse-cookie" define #f 63 11 63 23 ("Cookie" "new" "1" "+" "value" "0" "subseq" "name" "semi" "find" "pos" "let*" "cookie-string")}}}})
"Default-404-Handler"
 ({Lisp-File-Entry {File jazz.network "src" "jazz" "network" "http" "Default-404-Handler.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http.Default-404-Handler" module #f 37 8 37 45 ("jazz")
      {Lisp-Entry "Default-404-Handler" class #f 44 7 44 26 ("HTTP-Request-Handler")
        {Lisp-Entry "handle-request" method #f 50 20 50 34 ("content:" "not-found" "'not-found" "code:" "HTTP-Response" "new" "server" "port" "request")}}}})
"Directory-Handler"
 ({Lisp-File-Entry {File jazz.network "src" "jazz" "network" "http" "Directory-Handler.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http.Directory-Handler" module #f 38 8 38 43 ("jazz")
      {Lisp-Entry "Directory-Handler" class #f 47 7 47 24 ("HTTP-Request-Handler")
        {Lisp-Entry "root-directory" slot #f 50 8 50 22 ()}
        {Lisp-Entry "get-root-directory" accessor #f 50 33 50 41 ()}
        {Lisp-Entry "set-root-directory" accessor #f 50 33 50 41 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("root-directory~self" "set!" "nextmethod" "root-directory" "root-directory:")}
        {Lisp-Entry "handle-request" method #f 59 20 59 34 ("read-u8-content" "parse" "call-with-input-file" "content:" "ok" "'ok" "code:" "HTTP-Response" "new" "get-uri" "maybe-file" "is-directory?" "exists?" "tokenise-filename" "new-file" "file" "let" "empty-string?" "not" "root-directory" "and" "when" "path" "find-file" "define" "server" "port" "request")}}}})
"Dispatcher"
 ({Lisp-File-Entry {File jazz.network "src" "jazz" "network" "http" "Dispatcher.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http.Dispatcher" module #f 37 8 37 36 ("jazz")
      {Lisp-Entry "HTTP-Dispatcher" class #f 43 7 43 22 ("Default-404-Handler" "new" "initialize" "Object")
        {Lisp-Entry "handlers" slot #f 46 8 46 16 ()}
        {Lisp-Entry "get-handlers" accessor #f 46 42 46 50 ()}
        {Lisp-Entry "set-handlers" accessor #f 46 42 46 50 ()}
        {Lisp-Entry "default-404-handler" slot #f 47 8 47 27 ()}
        {Lisp-Entry "dispatch" method #f 50 18 50 26 ("close-port" "cdr" "car" "maybe-reply" "default-404-handler" "handle-request" "send" "null?" "if" "handlers" "loop" "let" "server" "port" "request")}
        {Lisp-Entry "add-handler" method #f 63 18 63 29 ("cons" "handlers" "set!" "handler")}}}})
"File-Handler"
 ({Lisp-File-Entry {File jazz.network "src" "jazz" "network" "http" "File-Handler.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http.File-Handler" module #f 37 8 37 38 ("jazz")
      {Lisp-Entry "File-Handler" class #f 45 7 45 19 ("equal?" "test:" "make-table" "initialize" "HTTP-Request-Handler")
        {Lisp-Entry "files" slot #f 48 8 48 13 ()}
        {Lisp-Entry "serve-file" method #f 51 18 51 28 ("files" "table-set!" "uri-path" "filesystem-path")}
        {Lisp-Entry "read-file" method #f 55 11 55 20 ("read-u8-content" "call-with-input-file" "filesystem-path")}
        {Lisp-Entry "handle-request" method #f 60 20 60 34 ("read-file" "content:" "ok" "'ok" "code:" "HTTP-Response" "new" "if" "get-uri" "files" "table-ref" "maybe-file" "let" "server" "port" "request")}}}})
"HTTP-Client"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.network" "src" "jazz" "network" "http" "HTTP-Client.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http.HTTP-Client" module #f 44 18 44 47 ("jazz")
      {Lisp-Entry "HTTP-Client" class #f 51 7 51 18 ("equal?" "test:" "make-table" "initialize" "Object")
        {Lisp-Entry "cookies" slot #f 54 8 54 15 ()}
        {Lisp-Entry "navigate" method #f 62 18 62 26 ("else" "name:" "Host" "navigate-safely" "concatenate" "let" "split" "hostname" "receive" "list" "URL" "new" "url" "get-header" "location" "see-other" "case" "get-code" "code" "send-request" "build-request" "request" "let*" "add-cookie" "cookie" "name" "lambda" "for-each-cookie" "response" "store-cookies" "define" "parameters" "parameters:" "http" "'http" "port" "port:" "resource" "operation" "host")}
        {Lisp-Entry "navigate-safely" method #f 86 11 86 26 ("navigate" "resource" "operation" "host")}
        {Lisp-Entry "add-cookie" method #f 95 11 95 21 ("cookies" "table-set!" "get-name" "name" "let" "cookie")}
        {Lisp-Entry "for-each-cookie" method #f 100 11 100 26 ("cookies" "iterate-table" "proc")}
        {Lisp-Entry "send-request" method #f 109 11 109 23 ("socket:" "HTTP-Response" "send-raw" "connect" "Heap-Block" "coerce" "block" "message-string" "string" "let*" "Socket" "new" "socket" "with" "send-request" "'send-request" "unimplemented" "port" "host" "request")}
        {Lisp-Entry "build-request" method #f 120 11 120 24 ("parameters:" "resource:" "operation:" "HTTP-Request" "new" "let" "add-cookie" "cookie" "name" "lambda" "for-each-cookie" "add-cookies" "get-name" "add-header" "request" "add-headers" "define" "parameters" "resource" "operation" "port" "host")}}}})
"HTTP-Message"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.network" "src" "jazz" "network" "http" "HTTP-Message.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http.HTTP-Message" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "HTTP-Message" class #f 43 7 43 19 ("equal?" "test:" "make-table" "initialize" "Object")
        {Lisp-Entry "protocol" slot #f 46 8 46 16 ()}
        {Lisp-Entry "get-protocol" accessor #f 46 61 46 69 ()}
        {Lisp-Entry "headers" slot #f 47 8 47 15 ()}
        {Lisp-Entry "get-headers" accessor #f 47 61 47 69 ()}
        {Lisp-Entry "content" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-content" accessor #f 48 61 48 69 ()}
        {Lisp-Entry "cookies" slot #f 51 8 51 15 ()}
        {Lisp-Entry "get-cookies" accessor #f 51 61 51 69 ()}
        {Lisp-Entry "cookie-header-name" slot #f 55 8 55 26 ()}
        {Lisp-Entry "initialize" method #f 58 20 58 30 ("content~self" "set!" "nextmethod" "content" "content:")}
        {Lisp-Entry "crlf" method #f 63 11 63 15 ("2" "0" "10" "13" "#u8" "write-subu8vector" "port")}
        {Lisp-Entry "get-header" method #f 72 18 72 28 ("error" "when" "headers" "table-ref" "or" "error?" "error?:" "name")}
        {Lisp-Entry "get-list-header" method #f 78 18 78 33 ("list" "string?" "if" "get-header" "apply" "value" "let" "rest" "name")}
        {Lisp-Entry "add-header" method #f 85 18 85 28 ("table-set!" "else" "list" "append" "pair?" "not" "cond" "new-value" "headers" "table-ref" "actual" "let*" "value" "name")}
        {Lisp-Entry "print-headers" method #f 94 11 94 24 ("print-header" "value" "name" "lambda" "headers" "iterate-table" "car" "string-length" "string?" "if" "add-header" "content" "when" "port")}
        {Lisp-Entry "print-header" method #f 107 11 107 23 ("crlf" "format" "port" "value" "name")}
        {Lisp-Entry "send" method #f 111 19 111 23 ("port")}
        {Lisp-Entry "get-cookie" method #f 119 18 119 28 ("cookies" "table-ref" "name")}
        {Lisp-Entry "add-cookie" method #f 123 18 123 28 ("cookies" "table-set!" "get-name" "name" "let" "cookie")}
        {Lisp-Entry "for-each-cookie" method #f 128 18 128 33 ("cookies" "iterate-table" "proc")}
        {Lisp-Entry "print-cookies" method #f 132 11 132 24 ("print" "cookie-header-name" "print-header" "cookie" "cookie-name" "lambda" "for-each-cookie" "port")}}}})
"HTTP-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.network" "src" "jazz" "network" "http" "HTTP-Request.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http.HTTP-Request" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "HTTP-Request" class #f 44 7 44 19 ("initialize" "HTTP-Message")
        {Lisp-Entry "http-method" slot #f 51 8 51 19 ()}
        {Lisp-Entry "get-http-method" accessor #f 51 27 51 35 ()}
        {Lisp-Entry "uri" slot #f 52 8 52 11 ()}
        {Lisp-Entry "get-uri" accessor #f 52 19 52 27 ()}
        {Lisp-Entry "get-parameters" slot #f 55 8 55 22 ()}
        {Lisp-Entry "get-get-parameters" accessor #f 55 45 55 53 ()}
        {Lisp-Entry "post-parameters" slot #f 56 8 56 23 ()}
        {Lisp-Entry "get-post-parameters" accessor #f 56 45 56 53 ()}
        {Lisp-Entry "cookie-header-name" slot #f 59 8 59 26 ()}
        {Lisp-Entry "initialize" method #f 62 20 62 30 ("content~self" "get-parameters~self" "uri~self" "http-method~self" "set!" "nextmethod" "content" "content:" "get-parameters" "get-parameters:" "uri" "uri:" "http-method" "http-method:")}
        {Lisp-Entry "parse-request" method #f 112 11 112 24 ("substitute" "cons" "parse-value" "value" "0" "name" "let*" "parameter" "map" "read-line" "lambda" "read-all" "parameters" "split-parameters" "fragment" "parse-parameters" "+" "1" "subseq" "url-decode" "values" "not" "if" "find" "pos" "let" "uri" "parse-uri" "define" "port")}
        {Lisp-Entry "get-parameter" method #f 166 11 166 24 ("cdr" "if" "get-parameters" "assoc" "entry" "let" "name")}
        {Lisp-Entry "send" method #f 178 20 178 24 ("get-output-string" "output-parameters" "format" "http-method" "=" "when" "print-headers" "output-control" "port")}
        {Lisp-Entry "output-control" method #f 188 11 188 25 ("output-parameters" "=" "when" "uri" "http-method" "format" "printer")}
        {Lisp-Entry "output-parameters" method #f 196 11 196 28 ("url-encode" "format" "unless" "value" "name" "bind" "do" "then" "first" "first?" "get-parameters" "in" "parameter" "for" "loop" "printer")}}}})
"HTTP-Response"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.network" "src" "jazz" "network" "http" "HTTP-Response.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http.HTTP-Response" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "HTTP-Response" class #f 45 7 45 20 ("initialize" "HTTP-Message")
        {Lisp-Entry "code" slot #f 48 8 48 12 ()}
        {Lisp-Entry "get-code" accessor #f 48 23 48 31 ()}
        {Lisp-Entry "cookie-header-name" slot #f 51 8 51 26 ()}
        {Lisp-Entry "initialize" method #f 54 20 54 30 ("content~self" "ok" "'ok" "or" "code~self" "set!" "nextmethod" "content" "content:" "code" "code:")}
        {Lisp-Entry "parse-response" method #f 92 11 92 25 ("Cookie-Header" "parse-cookies" "parse-headers" "parse-code" "code~self" "set!" "split" "code-text" "code" "version" "bind" "read-line/headers" "headers" "line" "receive" "port")}
        {Lisp-Entry "Response-Codes" definition #f 107 14 107 28 ("server-error" "not-found" "see-other" "ok")}
        {Lisp-Entry "parse-code" definition #f 114 15 114 25 ("unknown" "'unknown" "first" "if" "equal?" "test:" "second" "key:" "Response-Codes" "find-in" "info" "let" "code")}
        {Lisp-Entry "response-code-info" definition #f 121 15 121 33 ("error" "Response-Codes" "assq" "or" "code")}
        {Lisp-Entry "send" method #f 131 20 131 24 ("output-content" "print-headers" "output-control" "port")}
        {Lisp-Entry "output-control" method #f 138 11 138 25 ("crlf" "format" "response-code-info" "text" "number" "code" "bind" "printer")}
        {Lisp-Entry "output-content" method #f 144 11 144 25 ("format" "write-u8-content" "list?" "if" "content" "when" "crlf" "printer")}}}})
"Handler"
 ({Lisp-File-Entry {File jazz.network "src" "jazz" "network" "http" "Handler.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http.Handler" module #f 38 8 38 33 ("jazz")
      {Lisp-Entry "HTTP-Request-Handler" class #f 45 7 45 27 ("Object")
        {Lisp-Entry "handle-request" method #f 48 26 48 40 ("server" "port" "request")}}}})
"Host"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.network" "src" "jazz" "network" "host" "Host.jazz"} 1288732033
    {Lisp-Entry "jazz.network.host.Host" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Host" class #f 40 7 40 11 ("initialize" "Object")
        {Lisp-Entry "name" slot #f 43 8 43 12 ()}
        {Lisp-Entry "address" slot #f 44 8 44 15 ()}
        {Lisp-Entry "ip" slot #f 45 8 45 10 ()}
        {Lisp-Entry "origin" slot #f 46 8 46 14 ()}
        {Lisp-Entry "get-origin" accessor #f 46 37 46 45 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("error" "else" "'ip" "ip~self" "'address" "address~self" "'name" "origin~self" "name~self" "set!" "cond" "nextmethod" "ip" "ip:" "address" "address:" "name" "name:")}
        {Lisp-Entry "compare-object" method #f 64 20 64 34 (":not-equal" "else" ":equal" "get-ip" "=" ":incompatible" "Host" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 73 20 73 25 ("present-host" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "get-name" method #f 84 18 84 26 ("address" "address->ip" "ip" "or" "ip->name" "set!" "name" "unless")}
        {Lisp-Entry "get-address" method #f 92 18 92 29 ("name" "name->ip" "ip" "or" "ip->address" "set!" "address" "unless")}
        {Lisp-Entry "get-ip" method #f 100 18 100 24 ("get-address" "address->ip" "set!" "ip" "unless")}
        {Lisp-Entry "present" method #f 113 18 113 25 ("get-address" "name" "or")}
        {Lisp-Entry "present-host" method #f 117 18 117 30 ("ip" "address" "format" "name" "origin" "case")}
        {Lisp-Entry "present-compact" method #f 124 18 124 33 ("->string" "ip" "address" "name" "origin" "case")}}}})
"Server-Panel"
 ({Lisp-File-Entry {File jazz.network "src" "jazz" "network" "server" "Server-Panel.jazz"} 1288732033
    {Lisp-Entry "jazz.network.server.Server-Panel" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Server-Panel" class #f 45 7 45 19 ("Object")
        {Lisp-Entry "prompt" definition #f 53 14 53 20 ()}
        {Lisp-Entry "display-backtrace?" definition #f 56 14 56 32 ()}
        {Lisp-Entry "run-loop" method #f 60 11 60 19 ("continuation-return" "display-continuation-backtrace" "cont" "display-backtrace?" "display-exception" "with-exception-handler" "continuation-capture" "empty-string?" "eof-object?" "read-line" "prompt" "display" "newline" "when" "newline?" "loop" "server-version" "present" "set-debug?" "debug?" "get-hits" "output-server-info" "class-of" "category-identifier" "server-name" "wait-stopped" "started" "error?:" "wait-started" "with-exception-filter" "stopped" "get-state" "state" "os-exception-code" "os-exception-message" "os-exception?" "cond" "exc" "format-exception" "server-service" "server-host" "or" "server-at" "get-process" "exit-process" "force-output" "with-system-exception-debugger" "detach-from-controller" "format" "debugger:" "setup-debuggee" "debugger" "car" "get-debug?" "not" "null?" "if" "server-debug" "server-info" "restart-server" "stop-server" "start-server" "error" "else" "quit-command" "quit" "help-command" "?" "help" "repl-command" "repl" "detach-command" "detach" "attach-command" "attach" "debug-command" "debug" "info-command" "info" "restart-command" "restart" "stop-command" "stop" "start-command" "start" "case" "read-all" "arguments" "read" "let" "lambda" "call-with-input-string" "command" "process-command" "console-output-port" "output" "console-input-port" "input" "define" "server")}
        {Lisp-Entry "output-server-info" method #f 242 29 242 47 ("output")}}}})
"Session"
 ({Lisp-File-Entry {File jazz.network "src" "jazz" "network" "http" "Session.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http.Session" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Session" class #f 48 7 48 14 ("initialize" "Object")
        {Lisp-Entry "id" slot #f 51 8 51 10 ()}
        {Lisp-Entry "get-id" accessor #f 51 41 51 49 ()}
        {Lisp-Entry "properties" slot #f 52 8 52 18 ()}
        {Lisp-Entry "get-properties" accessor #f 52 41 52 49 ()}
        {Lisp-Entry "initialize" method #f 55 20 55 30 ("id~self" "set!" "nextmethod" "id")}
        {Lisp-Entry "print" method #f 60 20 60 25 ("id" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "Not-Found" definition #f 71 14 71 23 ("not-found" "Box")}
        {Lisp-Entry "get-property" method #f 75 18 75 30 ("error" "when" "neq?" "if" "Not-Found" "not-found:" "properties" "getf" "value" "let" "error?" "error?:" "name")}
        {Lisp-Entry "set-property" method #f 83 18 83 30 ("addf" "set!" "setf" "properties" "getprop" "if" "value" "name")}}}})
"Session-Manager"
 ({Lisp-File-Entry {File jazz.network "src" "jazz" "network" "http" "Session-Manager.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http.Session-Manager" module #f 38 18 38 51 ("jazz")
      {Lisp-Entry "Session-Manager" class #f 52 7 52 22 ("0" "initialize" "Object")
        {Lisp-Entry "id-counter" slot #f 55 8 55 18 ()}
        {Lisp-Entry "get-id-counter" accessor #f 55 52 55 60 ()}
        {Lisp-Entry "set-id-counter" accessor #f 55 52 55 60 ()}
        {Lisp-Entry "sessions" slot #f 56 8 56 16 ()}
        {Lisp-Entry "get-sessions" accessor #f 56 52 56 60 ()}
        {Lisp-Entry "set-sessions" accessor #f 56 52 56 60 ()}
        {Lisp-Entry "new-session" method #f 61 18 61 29 ("increase!" "cons" "sessions" "set!" "id-counter" "Session" "new" "session" "let")}
        {Lisp-Entry "end-session" method #f 68 18 68 29 ("remove!" "sessions" "set!" "session")}
        {Lisp-Entry "get-session" method #f 72 18 72 29 ("sessions" "get-id" "=" "session" "lambda" "find-if" "0" "session-id" "let" "port" "request")}}}})
"TCP-Client"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.network" "src" "jazz" "network" "host" "TCP-Client.jazz"} 1288732033
    {Lisp-Entry "jazz.network.host.TCP-Client" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "TCP-Client" class #f 40 7 40 17 ("Object")
        {Lisp-Entry "port" slot #f 43 8 43 12 ()}}}})
"TCP-Server"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.network" "src" "jazz" "network" "host" "TCP-Server.jazz"} 1288732033
    {Lisp-Entry "jazz.network.host.TCP-Server" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "TCP-Server" class #f 44 7 44 17 ("0" "stopped" "'stopped" "initialize" "Object")
        {Lisp-Entry "name" slot #f 47 8 47 12 ()}
        {Lisp-Entry "get-name" accessor #f 47 53 47 61 ()}
        {Lisp-Entry "host" slot #f 48 8 48 12 ()}
        {Lisp-Entry "get-host" accessor #f 48 53 48 61 ()}
        {Lisp-Entry "service" slot #f 49 8 49 15 ()}
        {Lisp-Entry "get-service" accessor #f 49 53 49 61 ()}
        {Lisp-Entry "socket-info" slot #f 50 8 50 19 ()}
        {Lisp-Entry "get-socket-info" accessor #f 50 53 50 61 ()}
        {Lisp-Entry "server-port" slot #f 51 8 51 19 ()}
        {Lisp-Entry "get-server-port" accessor #f 51 56 51 64 ()}
        {Lisp-Entry "set-server-port" accessor #f 51 56 51 64 ()}
        {Lisp-Entry "server-thread" slot #f 52 8 52 21 ()}
        {Lisp-Entry "started-condition" slot #f 53 8 53 25 ()}
        {Lisp-Entry "state" slot #f 54 8 54 13 ()}
        {Lisp-Entry "hits" slot #f 55 8 55 12 ()}
        {Lisp-Entry "get-hits" accessor #f 55 53 55 61 ()}
        {Lisp-Entry "debug?" slot #f 56 8 56 14 ()}
        {Lisp-Entry "get-debug?" accessor #f 56 56 56 64 ()}
        {Lisp-Entry "set-debug?" accessor #f 56 56 56 64 ()}
        {Lisp-Entry "reuse-address?" slot #f 57 8 57 22 ()}
        {Lisp-Entry "get-reuse-address?" accessor #f 57 56 57 64 ()}
        {Lisp-Entry "set-reuse-address?" accessor #f 57 56 57 64 ()}
        {Lisp-Entry "initialize" method #f 60 20 60 30 ("reuse-address?~self" "debug?~self" "make-condition" "started-condition~self" "server-thread~self" "socket-info~self" "service~self" "host~self" "name~self" "set!" "nextmethod" "reuse-address?" "debug?" "service" "host" "name" "bind-keywords" "rest")}
        {Lisp-Entry "get-state" method #f 78 18 78 27 ("state")}
        {Lisp-Entry "set-state" method #f 82 11 82 20 ("state" "set!" "value")}
        {Lisp-Entry "create-thread" method #f 91 29 91 42 ("new-thread" "apply" "rest")}
        {Lisp-Entry "start" method #f 100 11 100 16 ("start-listener" "starting" "'starting" "set-state")}
        {Lisp-Entry "stop" method #f 105 11 105 15 ("set!" "thread-exit" "thread-interrupt!" "server-thread" "when" "stopping" "'stopping" "set-state")}
        {Lisp-Entry "restart" method #f 113 11 113 18 ("start" "wait-stopped" "stop")}
        {Lisp-Entry "wait-started" method #f 119 11 119 23 ("0.25" "thread-sleep!" "error?" "error?:")}
        {Lisp-Entry "wait-stopped" method #f 124 11 124 23 ("0.25" "thread-sleep!" "error?" "error?:")}
        {Lisp-Entry "Server-Timeout" definition #f 134 14 134 28 ("0.25")}
        {Lisp-Entry "server-name" method #f 138 29 138 40 ("tcp-server" "'tcp-server" "get-name" "or")}
        {Lisp-Entry "server-version" method #f 143 29 143 43 ("0" "1" "Version")}
        {Lisp-Entry "server-host" method #f 147 29 147 40 ("get-host")}
        {Lisp-Entry "server-service" method #f 151 29 151 43 ("get-service")}
        {Lisp-Entry "server-hit" method #f 155 29 155 39 ("hits" "increase!")}
        {Lisp-Entry "connection-name" method #f 159 29 159 44 ("tcp-connection" "'tcp-connection")}
        {Lisp-Entry "start-listener" method #f 163 11 163 25 ("server-name" "connection-name" "accept-connection" "unwind-protect" "server-hit" "read" "port" "loop" "create-thread" "thread-start!" "server-thread" "started" "'started" "tcp-server-socket-info" "reuse-address?" "reuse-address:" "cr-lf" "'cr-lf" "eol-encoding:" "port-number:" "server-address:" "list" "open-tcp-server" "throw" "socket-info" "set!" "stopped" "'stopped" "set-state" "close-port" "server-port" "when" "exc" "lambda" "with-exception-filter" "server-service" "resolve-service" "number" "server-host" "resolve-host" "address" "let")}
        {Lisp-Entry "listening-host" method #f 198 11 198 25 ("socket-info-address" "socket-info" "and")}
        {Lisp-Entry "listening-port" method #f 202 11 202 25 ("socket-info-port-number" "socket-info" "and")}
        {Lisp-Entry "accept-connection" method #f 211 29 211 46 ("process-connection" "port")}
        {Lisp-Entry "process-connection" method #f 215 29 215 47 ("port")}}}})
"Web-Server"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.network" "src" "jazz" "network" "http" "Web-Server.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http.Web-Server" module #f 38 18 38 46 ("jazz")
      {Lisp-Entry "Web-Server" class #f 49 7 49 17 ("8080" "HTTP-Dispatcher" "new" "initialize" "Object")
        {Lisp-Entry "dispatcher" slot #f 52 8 52 18 ()}
        {Lisp-Entry "get-dispatcher" accessor #f 52 69 52 77 ()}
        {Lisp-Entry "set-dispatcher" accessor #f 52 69 52 77 ()}
        {Lisp-Entry "port-number" slot #f 54 8 54 19 ()}
        {Lisp-Entry "get-port-number" accessor #f 54 69 54 77 ()}
        {Lisp-Entry "set-port-number" accessor #f 54 69 54 77 ()}
        {Lisp-Entry "gambit-webserver" slot #f 55 8 55 24 ()}
        {Lisp-Entry "get-gambit-webserver" accessor #f 55 69 55 77 ()}
        {Lisp-Entry "set-gambit-webserver" accessor #f 55 69 55 77 ()}
        {Lisp-Entry "server-thread" slot #f 56 8 56 21 ()}
        {Lisp-Entry "get-server-thread" accessor #f 56 69 56 77 ()}
        {Lisp-Entry "set-server-thread" accessor #f 56 69 56 77 ()}
        {Lisp-Entry "initialize" method #f 59 20 59 30 ("port-number" "set!" "nextmethod" "8080" "port" "port:")}
        {Lisp-Entry "start" method #f 69 18 69 23 ("thread-start!" "web-server-thread" "'web-server-thread" "http-server-start!" "new-thread" "server-thread" "dispatcher:" "port-number" "port-number:" "make-http-server" "gambit-webserver" "set!" "self" "dispatcher" "dispatch" "content:" "or" "get-parameters:" "uri-path" "uri:" "http-method:" "HTTP-Request" "new" "request" "let" "content" "headers" "parameters" "uri" "method" "connection" "lambda" "gambit-webserver-dispatch-hook" "define")}
        {Lisp-Entry "stop" method #f 90 18 90 22 ("set!" "thread-exit" "thread-interrupt!" "server-thread" "when")}}}})
"_http"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.network" "src" "jazz" "network" "http" "_http.jazz"} 1288732033
    {Lisp-Entry "jazz.network.http" module #f 37 8 37 25 ("jazz")
      {Lisp-Entry "url-decode" definition #f 45 20 45 30 ("get-output-string" "else" "integer->char" "3" "1" "+" "subseq" "parse-hexadecimal" "value" "increase!" "write-char" "eqv?" "cond" "element" "c" "<" "while" "0" "n" "cardinality" "len" "open-output-string" "printer" "let" "string")}
      {Lisp-Entry "url-encode" definition #f 64 20 64 30 ("get-output-string" "write-char" "else" "char->integer" "memv?" "format" "eqv?" "cond" "c" "lambda" "for-each" "open-output-string" "printer" "let" "string")}}})
"_network"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.network" "src" "jazz" "network" "_network.jazz"} 1288732033
    {Lisp-Entry "jazz.network" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "host->string" definition #f 43 20 43 32 ("3" "2" "1" "0" "u8vector-ref" "format" "host")}
      {Lisp-Entry "string->host" definition #f 51 20 51 32 ("string->number" "map" "u8vector" "apply" "numeric?" "every?" "if" "split" "parts" "let" "string")}
      {Lisp-Entry "port->string" definition #f 58 20 58 32 ("number->string" "port")}
      {Lisp-Entry "string->port" definition #f 62 20 62 32 ("string->number" "string")}
      {Lisp-Entry "parse-host/service" definition #f 66 20 66 38 ("+" "string->port" "1" "-" "subseq" "0" "=" "string->host" "values" "not" "if" "cardinality" "len" "find" "pos" "let" "str")}
      {Lisp-Entry "encode-host/port" definition #f 79 20 79 36 ("port->string" "host->string" "format" "port" "host")}
      {Lisp-Entry "command-host/service" definition #f 85 20 85 40 ("values" "parse-host/service" "if" "command-argument" "arg" "let" "name")}
      {Lisp-Entry "resolve-host" definition #f 97 20 97 32 ("get-address" "not" "if" "host")}
      {Lisp-Entry "Port-Numbers" definition #f 110 12 110 24 ("32000" "router-server" "80" "http" "7" "echo" "0" "any")}
      {Lisp-Entry "resolve-service" definition #f 117 20 117 35 ("error" "cdr" "Port-Numbers" "assq" "pair" "let" "integer?" "if" "service")}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.network" "src" "jazz" "network" "autoload.jazz"} 1288732033
    {Lisp-Entry "jazz.network.autoload" module #f 37 18 37 39 ("jazz")}})
"install"
 ({Lisp-File-Entry {File jazz.network "src" "jazz" "network" "install.scm"} 1288732033
    {Lisp-Entry "jazz.network.install" unit #f 37 6 37 26 ()
      {Lisp-Entry "Host" define ("literal") 40 21 40 25 ("jazz.network.literals.construct-host")}}})
"literals"
 ({Lisp-File-Entry {File jazz.network "src" "jazz" "network" "literals.jazz"} 1288732033
    {Lisp-Entry "jazz.network.literals" module #f 37 8 37 29 ("jazz")
      {Lisp-Entry "construct-host" definition #f 48 21 48 35 ("Host" "new" "apply" "rest")}}})
