"Aligned-Column"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "display" "Aligned-Column.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.display.Aligned-Column" module (protected) #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Aligned-Column" class (undocumented) #f 43 20 43 34 ("0" "initialize" "Display-Column")
        {Lisp-Entry "alignment" slot () #f 46 8 46 17 ()}
        {Lisp-Entry "max-data" slot () #f 47 8 47 16 ()}
        {Lisp-Entry "initialize" method (override) #f 55 20 55 30 ("self" "alignment~self" "set!" "nextmethod" "apply" "others" "left" "alignment" "bind-keywords" "rest" "displayer")}
        {Lisp-Entry "prepare-print" method (override) #f 66 20 66 33 ("content" "set!" "max-data" ">" "when" "length" "let" "data" "lambda" "for-each" "nextmethod")}
        {Lisp-Entry "print-to" method (override) #f 75 20 75 28 ("right" "border-after" "border" "format" "left" "alignment" "case" "length" "max-data" "-" "padding" "let" "output" "previous-data" "previous-column" "data")}}}})
"Aligned-Column-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "display" "Aligned-Column-Preferences.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.display.Aligned-Column-Preferences" module (protected) #f 37 18 37 65 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Aligned-Column-Preferences" class (undocumented) #f 43 20 43 46 ("left" "initialize" "Column-Preferences")
        {Lisp-Entry "alignment" property () #f 46 12 46 21 ()}
        {Lisp-Entry "get-alignment" accessor #f #f 46 49 46 57 ()}
        {Lisp-Entry "set-alignment" accessor #f #f 46 49 46 57 ()}
        {Lisp-Entry "column-class" method (override) #f 54 20 54 32 ("Aligned-Column")}
        {Lisp-Entry "new-column" method (override) #f 58 20 58 30 ("alignment" "alignment:" "minimum" "minimum:" "border-after" "border-after:" "border" "border:" "Aligned-Column" "new" "display")}}}})
"Box"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Box.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.utility.Box" module (protected) #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Box" class () #f 40 7 40 10 ("Object")
        {Lisp-Entry "boxed" slot () #f 43 8 43 13 ()}
        {Lisp-Entry "get-boxed" accessor #f #f 43 21 43 29 ()}
        {Lisp-Entry "initialize" method (override) #f 46 20 46 30 ("self" "boxed~self" "set!" "nextmethod" "boxed")}
        {Lisp-Entry "print" method (override) #f 51 20 51 25 ("self" "class-of" "category-name" "format" "boxed" "not" "if" "readably" "output")}}}})
"Branch"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "component" "Branch.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.component.Branch" module (protected) #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Branch" class () #f 40 7 40 13 ("initialize" "Object")
        {Lisp-Entry "client" slot () #f 43 8 43 14 ()}
        {Lisp-Entry "get-client" accessor #f #f 43 45 43 53 ()}
        {Lisp-Entry "set-client" accessor #f #f 43 45 43 53 ()}
        {Lisp-Entry "trait" slot () #f 44 8 44 13 ()}
        {Lisp-Entry "get-trait" accessor #f #f 44 45 44 53 ()}
        {Lisp-Entry "set-trait" accessor #f #f 44 45 44 53 ()}
        {Lisp-Entry "parent" slot () #f 45 8 45 14 ()}
        {Lisp-Entry "get-parent" accessor #f #f 45 45 45 53 ()}
        {Lisp-Entry "set-parent" accessor #f #f 45 45 45 53 ()}
        {Lisp-Entry "branch" slot () #f 46 8 46 14 ()}
        {Lisp-Entry "get-branch" accessor #f #f 46 45 46 53 ()}
        {Lisp-Entry "set-branch" accessor #f #f 46 45 46 53 ()}
        {Lisp-Entry "restore-form" slot () #f 47 8 47 20 ()}
        {Lisp-Entry "get-restore-form" accessor #f #f 47 45 47 53 ()}
        {Lisp-Entry "set-restore-form" accessor #f #f 47 45 47 53 ()}
        {Lisp-Entry "initialize" method (override) #f 50 20 50 30 ("parent~self" "trait~self" "self" "client~self" "set!" "nextmethod" "parent" "trait" "client")}
        {Lisp-Entry "print" method (override) #f 57 20 57 25 ("get-name" "get-name~" "trait" "and" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-branches" method (protected) #f 68 21 68 33 ("get-branches" "get-branches~" "cons" "branch" "not" "if")}
        {Lisp-Entry "restore-client" method (protected) #f 79 21 79 35 ("restore-form" "client" "install-form" "install-form~" "restore-client" "restore-client~" "branch" "when")}}}})
"Canvas"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "canvas" "Canvas.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.library.canvas.Canvas" module (protected) #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.library")}
      {Lisp-Entry "Canvas" class (undocumented) #f 49 20 49 26 ("List-Factory" "new" "initialize" "Component")
        {Lisp-Entry "violations" property () #f 52 12 52 22 ()}
        {Lisp-Entry "get-violations" accessor #f #f 52 48 52 56 ()}
        {Lisp-Entry "set-violations" accessor #f #f 52 48 52 56 ()}
        {Lisp-Entry "violations-factory" slot () #f 55 8 55 26 ()}
        {Lisp-Entry "get-integrity-manager" method (override) #f 63 20 63 41 ("Integrity-Manager" "new")}
        {Lisp-Entry "validate-integrity" method (public) #f 67 18 67 36 ("select-violations-manager" "IDI_ERROR" "icon:" "format-plural" "length" "count" "format" "message-box" "null?" "if" "get-presentation-property" "presentation" "user-message" "user-message~" "when" "get-output" "get-output~" "set!" "self" "validate-integrity" "validate-integrity~" "violations-factory" "reset" "reset~" "get-integrity-manager" "integrity-manager" "update" "update~" "get-violations-manager" "manager" "let" "violations" "update-violations-manager" "define" "report?" "report?:" "reporter" "reporter:" "context" "context:")}
        {Lisp-Entry "get-violations-manager" method () #f 89 11 89 33 ("violations-manager-class" "singleton-docked" "get-guest" "get-guest~")}
        {Lisp-Entry "select-violations-manager" method (public) #f 93 18 93 43 ("focus?:" "violations-manager-workspace" "workspace:" "violations-manager-class" "select-docked" "select-first" "select-first~" "select-resultset" "select-resultset~" "get-violations-manager" "manager" "let")}
        {Lisp-Entry "violations-manager-class" method (protected virtual) #f 100 29 100 53 ("Violations-Manager")}
        {Lisp-Entry "violations-manager-workspace" method (protected virtual) #f 104 29 104 57 ()}
        {Lisp-Entry "add-violation" method (public) #f 113 18 113 31 ("violations-factory" "put" "put~" "violation")}
        {Lisp-Entry "clear-violations" method (public) #f 117 18 117 34 ("violations" "set!" "violations-factory" "reset" "reset~")}}}})
"Canvas-Element"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "canvas" "Canvas-Element.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.canvas.Canvas-Element" module (protected) #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.jml")}
      {Lisp-Entry "Canvas-Element" class (undocumented) #f 44 20 44 34 ("Component")
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 52 25 52 45 ("Canvas-Element-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 61 11 61 17 ()
        {Lisp-Entry "import" anonymous #f #f 64 1 64 7 ("jazz.designer")}
        {Lisp-Entry "Canvas-Element-Descriptor" class () #f 67 7 67 32 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 70 3 70 7 (">" "<properties" "<properties~>" "can-view-properties?:" "name-unicity?:" "name-mandatory?:" "install" "<install>")}
          {Lisp-Entry "class-presentation->name" method (override) #f 75 20 75 44 ("=" "empty-string?" "or" "get-name-mandatory?" "not" "and" "if" "presentation" "class")}
          {Lisp-Entry "class-name->presentation" method (override) #f 81 20 81 44 ("get-name-mandatory?" "or" "if" "name" "class")}
          {Lisp-Entry "component-get-addable-details" method (override) #f 87 20 87 49 ("100" "name-info" "component")}}}}})
"Canvas-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "canvas" "Canvas-Manager.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.library.canvas.Canvas-Manager" module (protected) #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Canvas-Manager" class (undocumented) #f 47 20 47 34 ("Component-Editor")
        {Lisp-Entry "form" anonymous #f #f 50 3 50 7 ("card-border" "bottom-right" "details" "Grid-Tree-Editor" "<Grid-Tree-Editor>" "100" "details-border" "details-pane" "60" "relative" "mode:" "vert" "366" "360" "289" "editor-splitter" "fill" "second" "right" "title:" "descendant" "on-tab-press" "tab-press-handler:" "highlight-edited?:" "tree" "header" "content" "scroller" "!" "<!>" "descendants" "Descendants-Editor" "<Descendants-Editor>" "entry" "style:" "edge" "border-type:" "first" "338" "278" "4" "Point" "position:" "descendants-border" "Border-View" "<Border-View>" "250" "division:" "horz" "orientation:" "center" "367" "splitter" "Splitter-View" "<Splitter-View>" "on-new" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "enabled?:" "tail" "22" "new" "Push-Tool" "<Push-Tool>" "north" "location:" "7" "flow" "33" "300" "toolbar" "name:" "Layout-View" "<Layout-View>" "2" "0" "Rect" "layout-insets:" "border" "layout-type:" "400" "650" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "host-icon" method (meta override) #f 78 25 78 34 ("Image-Resource")}
        {Lisp-Entry "host-position" method (meta override) #f 82 25 82 38 ()}
        {Lisp-Entry "host-size" method (meta override) #f 86 25 86 34 ()}
        {Lisp-Entry "host-workspaces" method (override) #f 90 20 90 35 ("home")}
        {Lisp-Entry "new-event" method (meta override) #f 100 25 100 34 ("set-visible?" "set-visible?~" "bring-to-front" "bring-to-front~" "set-client" "set-client~" "name:" "Canvas-Base" "<Canvas-Base>" "form" "<form>" "instantiate" "instantiate~" "client" "let" "update-status" "update-status~" "set-newname" "set-newname~" "get-document-controller" "get-document-controller~" "controller" "collect-names" "unique-domain-name" "newname" "localize" "newbase" "get-guest" "get-guest~" "manager" "host-visible?:" "new-frame" "apply" "frame" "let*" "rest")}
        {Lisp-Entry "collect-names" method (meta) #f 116 16 116 29 ("all-frames" "get-client" "get-client~" "get-name" "get-name~" "neq?" "and" "get-guest" "get-guest~" "guest" "Internal-Frame-Host" "is?" "when" "frame" "lambda" "collect" "class-of" "model" "let" "base")}
        {Lisp-Entry "new-document-controller" method (override) #f 131 20 131 43 ("self" "Canvas-Manager-Controller" "new")}
        {Lisp-Entry "install" method (override) #f 140 20 140 27 ("details" "self" "descendants" "locate" "set-editor" "set-editor~" "nextmethod" "rest")}
        {Lisp-Entry "install-in-host" method (override) #f 146 20 146 35 ("get-size" "get-size~" "set-size" "set-size~" "when" "tool-preferences" "pref" "let" "nextmethod" "host")}
        {Lisp-Entry "focus-document" method (override) #f 153 20 153 34 ("tree" "descendants" "locate" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "selection-changed" method (override) #f 162 20 162 37 ("nextmethod" ":french" "french:" ":english" "localize-to" "format" "english:" "Locales" "get-class-presentation" "get-class-presentation~" "pres" "car" "resolve-runtime-reference" "class" "set-tooltip-text" "set-tooltip-text~" "set-enabled?" "set-enabled?~" "begin" "1" "length" "/=" "not" "or" "if" "get-addable-classes" "get-addable-classes~" "and" "refs" "get-client" "get-client~" "client" "details" "tree" "new" "locate" "tool" "let*" "update-new" "define" "focus?" "force-parent?" "origin" "new-selection" "old-selection")}
        {Lisp-Entry "on-editor" method (override) #f 188 20 188 29 ("save-client" "save-client~" "Custom-Card" "is?" "when" "get-card" "current" ":saving" "setup-card" "setup-details" "car" "null?" "if" "component" "get-selection" "get-selection~" "selection" "let" ":selection-changing" "get-kind" "get-kind~" "case" "nextmethod" "destroying?" "unless" "evt")}
        {Lisp-Entry "setup-details" method () #f 208 11 208 24 ("card-update" "categorized" "get-tree" "get-tree~" "set-filter" "set-filter~" "is?" "designer" "set-designer" "set-designer~" "begin" "self" "set-editor" "set-editor~" "details-border" "locate" "parent:" "details" "name:" "new" "card" "class-of" "neq?" "null?" "Details-Card" "get-custom-details" "get-custom-details~" "or" "details-class" "close" "close~" "when" "not" "if" "get-details" "current" "let" "component")}
        {Lisp-Entry "get-details" method () #f 230 11 230 22 ("details" "details-border" "locate" "find-component" "find-component~")}
        {Lisp-Entry "get-card" method () #f 239 11 239 19 ("properties" "card-border" "locate" "find-component" "find-component~")}
        {Lisp-Entry "setup-card" method () #f 243 11 243 21 ("card-update" "categorized" "get-tree" "get-tree~" "set-filter" "set-filter~" "designer" "set-designer" "set-designer~" "self" "set-editor" "set-editor~" "card-border" "locate" "parent:" "properties" "name:" "new" "card" "class-of" "neq?" "null?" "Properties-Card" "get-custom-card" "get-custom-card~" "or" "card-class" "close" "close~" "not" "if" "save-client" "save-client~" "Custom-Card" "is?" "when" "get-card" "current" "let" "component")}
        {Lisp-Entry "card-update" method (public virtual) #f 262 26 262 37 ("card")}
        {Lisp-Entry "on-selection-change" method () #f 271 11 271 30 ("focus?:" "force-parent?:" "origin:" "list" "set-selection" "get-user-data" "get-user-data~" "component" "get-row" "get-row~" "row" "let*" "when" "get-single-selection" "get-single-selection~" "selection" "log" "get-name" "get-name~" "case" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "on-new" method (package) #f 283 19 283 25 ("acquire-focus" "acquire-focus~" "else" "generate-event?:" "0" "Cell" "new" "set-single-selection" "set-single-selection~" "cell" "get-selection-mode" "get-selection-mode~" "case" "row->line" "row->line~" "line" "component-row" "component-row~" "row" "origin:" "list" "set-selection" "select?:" "tree" "descendants" "add-component-class" "add-component-class~" "component" "get-addable-classes" "get-addable-classes~" "car" "ref" "get-client" "get-client~" "client" "locate" "details" "let*" "evt")}
        {Lisp-Entry "on-tab-press" method (override) #f 299 20 299 32 ("get-row" "get-row~" "auto-select" "auto-select~" "when" "get-single-selection" "get-single-selection~" "rank" "acquire-focus" "acquire-focus~" "card" "locate" "get-tree" "get-tree~" "tree" "let" "evt")}
        {Lisp-Entry "Validation-Reporter" class () #f 313 9 313 28 ("Progress-Reporter")
          {Lisp-Entry "form" anonymous #f #f 316 5 316 9 ("invite" "name:" "!" "<!>" "title:" "install" "<install>")}
          {Lisp-Entry "dialog-title" method (meta) #f 321 18 321 30 ()}}
        {Lisp-Entry "on-validate-integrity" method () #f 326 11 326 32 ("cancelable?:" "Validation-Reporter" "progress-reporter:" "self" "context:" "name:" "threaded?:" "set-done" "set-done~" "user-message" "user-message~" "reporter:" "validate-integrity" "validate-integrity~" "reporter" "lambda" "with-progress" "get-designer" "designer" "get-client" "client" "let" "evt")}}
      {Lisp-Entry "Canvas-Manager-Controller" class () #f 346 7 346 32 ("Component-Editor-Controller")
        {Lisp-Entry "document-status" method (override) #f 349 20 349 35 ("modified-status" "name-status" "format")}}}})
"Canvas-Node"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "canvas" "Canvas-Node.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.library.canvas.Canvas-Node" module (protected) #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.jml")}
      {Lisp-Entry "Canvas-Node" class (undocumented) #f 44 20 44 31 ("Component")
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 52 25 52 45 ("Canvas-Node-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 61 11 61 17 ()
        {Lisp-Entry "import" anonymous #f #f 64 1 64 7 ("jazz.designer")}
        {Lisp-Entry "Canvas-Node-Descriptor" class () #f 67 7 67 29 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 70 3 70 7 ("categorized:" ">" "<properties" "<properties~>" "indexable?:" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "Image-Resource" "image:" "install" "<install>")}
          {Lisp-Entry "class-name->presentation" method (override) #f 75 20 75 44 ("class-presentation" "name" "class")}
          {Lisp-Entry "component-get-addable-details" method (override) #f 79 20 79 49 ("100" "name-info" "component")}}}}})
"Category-Moniker"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "moniker" "Category-Moniker.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.moniker.Category-Moniker" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.io")}
      {Lisp-Entry "Category-Moniker" class (undocumented) #f 43 20 43 36 ("Moniker")}
      {Lisp-Entry "Category-Moniker" class (undocumented) #f 49 20 49 36 ("Moniker")
        {Lisp-Entry "name" slot () #f 52 8 52 12 ()}
        {Lisp-Entry "construct-literal" method (meta) #f 56 16 56 33 ("self" "new" "name" "context")}
        {Lisp-Entry "print" method () #f 60 11 60 16 ("name" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "get-name" method () #f 71 11 71 19 ("name")}
        {Lisp-Entry "get-file" method () #f 75 11 75 19 ("get-source")}
        {Lisp-Entry "get-protocol" method (meta) #f 85 16 85 28 ("category")}
        {Lisp-Entry "new-moniker" method (meta) #f 90 16 90 27 ("car" "self" "new" "list")}
        {Lisp-Entry "present" method () #f 94 11 94 18 ("name" "format")}
        {Lisp-Entry "initialize" method () #f 103 11 103 21 ("self" "name~self" "set!" "nextmethod" "name")}
        {Lisp-Entry "get-source" method (public) #f 113 18 113 28 ("error" "name" "get-manifest-source" "or")}
        {Lisp-Entry "load-lines" method () #f 123 11 123 21 ("get-source" "load-lines" "load-lines~" "rest")}
        {Lisp-Entry "save-lines" method () #f 127 11 127 21 ("get-source" "save-lines" "save-lines~" "rest" "lines")}
        {Lisp-Entry "load-form" method () #f 131 11 131 20 ("get-source" "load-form" "load-form~")}}}})
"Class-Reference"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Class-Reference.jazz"} 245834379. jazz
    {Lisp-Entry "jazz.library.utility.Class-Reference" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Class-Reference" class () #f 43 7 43 22 ("Reference")}}})
"Column-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "display" "Column-Preferences.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.display.Column-Preferences" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Column-Preferences" class (undocumented) #f 45 20 45 38 ("0" "initialize" "Preferences")
        {Lisp-Entry "border" property () #f 48 12 48 18 ()}
        {Lisp-Entry "get-border" accessor #f #f 48 48 48 56 ()}
        {Lisp-Entry "set-border" accessor #f #f 48 48 48 56 ()}
        {Lisp-Entry "border-after" property () #f 49 12 49 24 ()}
        {Lisp-Entry "get-border-after" accessor #f #f 49 48 49 56 ()}
        {Lisp-Entry "set-border-after" accessor #f #f 49 48 49 56 ()}
        {Lisp-Entry "minimum" property () #f 50 12 50 19 ()}
        {Lisp-Entry "get-minimum" accessor #f #f 50 48 50 56 ()}
        {Lisp-Entry "set-minimum" accessor #f #f 50 48 50 56 ()}
        {Lisp-Entry "column-class" method (protected virtual) #f 58 29 58 41 ("Display-Column")}
        {Lisp-Entry "new-column" method (public virtual) #f 62 26 62 36 ("display")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 71 25 71 45 ("Column-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 80 11 80 17 ()
        {Lisp-Entry "import" anonymous #f #f 83 1 83 7 ("jazz.designer")}
        {Lisp-Entry "Column-Preferences-Descriptor" class () #f 86 7 86 36 ("Preferences-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 89 3 89 7 ("minimum" "border-after" "border" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "component-presentation-property?" method (override) #f 97 20 97 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method (override) #f 101 20 101 46 ("column-class" "column-class~" "category-name" "format" "get-title" "get-title~" "or" "component")}
          {Lisp-Entry "component-set-presentation" method (override) #f 105 20 105 46 ("title:" "set-property" "set-property~" "title" "designer" "component")}}}}})
"Columns-Display"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "display" "Columns-Display.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.display.Columns-Display" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Columns-Display" class (undocumented) #f 40 20 40 35 ("0" "fx" "<fx>" "initialize" "<Object>" "Object")
        {Lisp-Entry "columns" slot (protected) #f 43 18 43 25 ()}
        {Lisp-Entry "get-columns" accessor #f #f 43 57 43 65 ()}
        {Lisp-Entry "line" slot (protected) #f 44 18 44 22 ()}
        {Lisp-Entry "initialize" method (override) #f 52 20 52 30 ("nextmethod" "rest")}
        {Lisp-Entry "add-column" method (public) #f 61 18 61 28 ("insert!" "find" "rank" "let" "list" "append!" "columns" "set!" "null?" "if" "before" "before:" "column")}
        {Lisp-Entry "add-columns" method (public) #f 68 18 68 29 ("add-column" "column" "lambda" "for-each" "before" "before:" "columns")}
        {Lisp-Entry "newline" method (public) #f 79 18 79 25 ("line" "increase!")}
        {Lisp-Entry "print-to" method (public) #f 83 18 83 26 ("print-columns" "prepare-columns" "output")}
        {Lisp-Entry "prepare-columns" method (public) #f 88 18 88 33 ("prepare-print~" "prepare-print" "set!" "replace-empty" "replace-empty~" "data" "get-empty?" "get-empty?~" "unless" "previous-data" "previous-column" "let" "line" "below" "0" "from" "n" "for" "loop" "prepare-empties" "columns" "rewind" "rewind~" "fill-empty" "fill-empty~" "column" "lambda" "for-each" "prepare-base" "define")}
        {Lisp-Entry "print-columns" method (public) #f 119 18 119 31 ("format" "/=" "columns" "when" "set!" "print-to" "print-to~" "get-next" "get-next~" "data" "get-empty?" "get-empty?~" "unless" "column" "lambda" "for-each" "previous-data" "previous-column" "below" "0" "from" "n" "for" "loop" "1" "line" "-" "last" "let" "output")}}}})
"Component"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "component" "Component.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.library.component.Component" module (protected) #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.locale" "jazz.library.component" "jazz.library" "jazz.io")}
      {Lisp-Entry "Component" class () #f 46 7 46 16 ("get-presentation-info" "get-name-info" "get-class-info" "void" "<void>" "explicit" "Visible-Flag" "fx" "<fx>" "self" "initialize" "Event-Consumer" "Object")
        {Lisp-Entry "Installed-Flag" definition () #f 55 14 55 28 ("#x00000001")}
        {Lisp-Entry "Finished-Flag" definition () #f 56 14 56 27 ("#x00000002")}
        {Lisp-Entry "Initialized-Flag" definition () #f 57 14 57 30 ("#x00000004")}
        {Lisp-Entry "Visible-Flag" definition () #f 58 14 58 26 ("#x00000008")}
        {Lisp-Entry "Destroying-Flag" definition () #f 59 14 59 29 ("#x00000020")}
        {Lisp-Entry "Destroyed-Flag" definition () #f 60 14 60 28 ("#x00000040")}
        {Lisp-Entry "Layout-Valid-Flag" definition () #f 61 14 61 31 ("#x00000100")}
        {Lisp-Entry "name" slot () #f 64 8 64 12 ()}
        {Lisp-Entry "parent" slot () #f 65 8 65 14 ()}
        {Lisp-Entry "base-traits" slot () #f 66 8 66 19 ()}
        {Lisp-Entry "default-traits" slot () #f 67 8 67 22 ()}
        {Lisp-Entry "branch" slot () #f 68 8 68 14 ()}
        {Lisp-Entry "base-branch" slot () #f 69 8 69 19 ()}
        {Lisp-Entry "form" slot () #f 70 8 70 12 ()}
        {Lisp-Entry "creator" slot () #f 71 8 71 15 ()}
        {Lisp-Entry "creator-branch" slot () #f 72 8 72 22 ()}
        {Lisp-Entry "event-consumer" slot () #f 73 8 73 22 ()}
        {Lisp-Entry "designers" slot () #f 74 8 74 17 ()}
        {Lisp-Entry "surrogate" slot () #f 75 8 75 17 ()}
        {Lisp-Entry "get-surrogate" accessor #f #f 75 61 75 69 ()}
        {Lisp-Entry "set-surrogate" accessor #f #f 75 61 75 69 ()}
        {Lisp-Entry "index" slot () #f 76 8 76 13 ()}
        {Lisp-Entry "flags" slot () #f 77 8 77 13 ()}
        {Lisp-Entry "before" property () #f 80 12 80 18 ()}
        {Lisp-Entry "children" property () #f 81 12 81 20 ()}
        {Lisp-Entry "visible?" property () #f 82 12 82 20 ()}
        {Lisp-Entry "class-info" property () #f 83 12 83 22 ()}
        {Lisp-Entry "name-info" property () #f 84 12 84 21 ()}
        {Lisp-Entry "presentation-info" property () #f 85 12 85 29 ()}
        {Lisp-Entry "get-name" method (public inline) #f 93 25 93 33 ("name")}
        {Lisp-Entry "set-name" method (public inline) #f 97 25 97 33 ("name" "set!" "value")}
        {Lisp-Entry "get-parent" method (public inline) #f 101 25 101 35 ("parent")}
        {Lisp-Entry "set-parent" method (public virtual) #f 105 26 105 36 ("install-in-parent" "set!" "self" "remove-child" "remove-child~" "parent" "when" "value")}
        {Lisp-Entry "get-before" method (public inline) #f 113 25 113 35 ("before")}
        {Lisp-Entry "set-before" method (public) #f 117 18 117 28 ("child" "child~" "self" "parent" "send-child-before" "send-child-before~" "get-finished?" "when" "before" "set!" "value")}
        {Lisp-Entry "get-children" method (public inline) #f 123 25 123 37 ("children")}
        {Lisp-Entry "set-children" method (public virtual) #f 127 26 127 38 ("self" "set-parent" "set-parent~" "do" "in" "child" "for" "loop" "children" "set!" "Sequence" "<Sequence>" "lst")}
        {Lisp-Entry "get-branch" method (public inline) #f 133 25 133 35 ("branch")}
        {Lisp-Entry "set-branch" method (public inline) #f 137 25 137 35 ("branch" "set!" "value")}
        {Lisp-Entry "get-form" method (public inline) #f 141 25 141 33 ("form")}
        {Lisp-Entry "set-form" method (public inline) #f 145 25 145 33 ("form" "set!" "value")}
        {Lisp-Entry "get-creator" method (public inline) #f 149 25 149 36 ("creator")}
        {Lisp-Entry "set-creator" method (public inline) #f 153 25 153 36 ("creator" "set!" "value")}
        {Lisp-Entry "get-creator-branch" method (public inline) #f 157 25 157 43 ("creator-branch")}
        {Lisp-Entry "set-creator-branch" method (public inline) #f 161 25 161 43 ("creator-branch" "set!" "value")}
        {Lisp-Entry "get-class-info" method () #f 165 11 165 25 ("self" "class-of" "get-class-presentation" "get-class-presentation~")}
        {Lisp-Entry "get-class-form" method (meta virtual) #f 169 24 169 38 ()}
        {Lisp-Entry "set-class-form" method (meta virtual) #f 173 24 173 38 ("form")}
        {Lisp-Entry "get-class-forms" method (meta virtual) #f 177 24 177 39 ()}
        {Lisp-Entry "get-name-info" method () #f 181 11 181 24 ("->string" "name" "not" "if")}
        {Lisp-Entry "get-presentation-info" method () #f 187 11 187 32 ("get-presentation-property")}
        {Lisp-Entry "get-file-form" method (public) #f 191 18 191 31 ("else" "get-tag-reference" "get-tag-reference~" "registered-file-form" "instantiate" "form" "get-action" "get-action~" "case")}
        {Lisp-Entry "get-installed?" method (protected) #f 202 21 202 35 ("Installed-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-installed?" method (protected) #f 205 21 205 35 ("Installed-Flag" "mask-bit-set" "flags" "set!" "bool" "<bool>" "flag")}
        {Lisp-Entry "get-finished?" method (protected) #f 209 21 209 34 ("Finished-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-finished?" method () #f 212 11 212 24 ("Finished-Flag" "mask-bit-set" "flags" "set!" "bool" "<bool>" "flag")}
        {Lisp-Entry "get-initialized?" method (protected) #f 216 21 216 37 ("Initialized-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-initialized?" method () #f 219 11 219 27 ("Initialized-Flag" "mask-bit-set" "flags" "set!" "bool" "<bool>" "flag")}
        {Lisp-Entry "get-visible-flag" method (public) #f 223 18 223 34 ("Visible-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-visible-flag" method (public) #f 226 18 226 34 ("Visible-Flag" "mask-bit-set" "flags" "set!" "bool" "<bool>" "flag")}
        {Lisp-Entry "get-destroying?" method () #f 230 11 230 26 ("Destroying-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-destroying?" method () #f 233 11 233 26 ("Destroying-Flag" "mask-bit-set" "flags" "set!" "bool" "<bool>" "flag")}
        {Lisp-Entry "get-destroyed?" method () #f 237 11 237 25 ("Destroyed-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-destroyed?" method () #f 240 11 240 25 ("Destroyed-Flag" "mask-bit-set" "flags" "set!" "bool" "<bool>" "flag")}
        {Lisp-Entry "get-layout-valid?" method () #f 244 11 244 28 ("Layout-Valid-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-layout-valid?" method () #f 247 11 247 28 ("Layout-Valid-Flag" "mask-bit-set" "flags" "set!" "bool" "<bool>" "flag")}
        {Lisp-Entry "call-print" method (override) #f 256 20 256 30 ("lambda" "self" "print-unreadable" "print" "get-initialized?" "if" "detail" "output")}
        {Lisp-Entry "print" method (override) #f 264 20 264 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "initialize" method (override) #f 275 20 275 30 ("initialize-component" "nextmethod" "rest")}
        {Lisp-Entry "initialize-component" method (protected virtual) #f 280 29 280 49 ("hide" "show" "if" "initially-visible?" "neq?" "when" "get-visible?" "visible?" "let" "set-initialized?" "conclude" "set-finished?" "install-in-parent" "finish" "set-installed?" "install" "prepare" "rest")}
        {Lisp-Entry "default-name" method (protected virtual) #f 296 29 296 41 ()}
        {Lisp-Entry "default-parent" method (protected virtual) #f 300 29 300 43 ()}
        {Lisp-Entry "setup-parent" method (protected virtual) #f 304 29 304 41 ()}
        {Lisp-Entry "prepare" method (protected chained) #f 308 29 308 36 ("creator-branch:" "set-creator-branch" "creator:" "set-creator" "self" "class-of" "get-class-form" "get-class-form~" "form:" "set-form" "set-name" "when" "default-name" "name:" "or" "init-name" "prepare-component" "setup-parent" "default-parent" "not" "if" "parent" "set!" "not-found:" "parent:" "getf" "arg" "let" "prepare-parent" "define" "Object" "<Object>" "initargs")}
        {Lisp-Entry "install" method (protected chained) #f 326 29 326 36 ("car" "install-form" "cdr" "not-null?" "when" "forms" "self" "class-of" "get-class-forms" "get-class-forms~" "install-inherited" "install-component" "define" "Object" "<Object>" "initargs")}
        {Lisp-Entry "install-base-traits" method () #f 338 11 338 30 ("set-base-traits" "when" "base-traits:" "base-traits" "getf" "or" "traits" "let" "properties")}
        {Lisp-Entry "install-default-traits" method () #f 344 11 344 33 ("set-default-traits" "when" "default-traits:" "default-traits" "getf" "or" "traits" "let" "properties")}
        {Lisp-Entry "install-form" method (public) #f 350 18 350 30 ("install-default-traits" "install-children" "install-properties" "install-base-traits" "get-children" "get-children~" "children" "get-properties" "get-properties~" "properties" "let" "when" "restore-form" "creator-branch" "creator" "Object" "<Object>" "form")}
        {Lisp-Entry "install-children" method (protected virtual) #f 360 29 360 45 ("install-child" "do" "in" "child" "for" "loop" "restore-form" "creator-branch" "creator" "Object" "<Object>" "children")}
        {Lisp-Entry "install-child" method (public virtual) #f 365 26 365 39 ("else" "close" "close~" "get-component" "get-component~" "remove" "equal?" "find-to-modify" "remember-reference" "remember-reference~" "set!" "locate" "modify" "remember-creation" "remember-creation~" "add-to-index" "add-to-index~" "when" "component" "case" "new" "or" "form-model" "form-model~" "get-model" "get-model~" "module-ref" "model" "error" "instantiate~" "tag-reference-not-found-handler" "handler" "set-form" "set-form~" "install-form" "install-form~" "creator-branch:" "creator:" "form:" "name:" "self" "parent:" "instantiate-file" "child" "exists?" "exists?~" "file?" "instantiate" "eq?" "and" "if" "get-tag-reference" "get-tag-reference~" "reference" "new-component" "define" "get-name" "get-name~" "name" "get-action" "get-action~" "action" "let" "restore-form" "creator-branch" "creator" "Object" "<Object>" "form")}
        {Lisp-Entry "install-properties" method () #f 405 11 405 29 ("cddr" "write-property-to" "remember-property" "remember-property~" "set-car!" "self" "class-of" "component-property" "set!" "symbol?" "when" "initer-property?" "unless" "cadr" "value" "car" "expr" "let" "not-null?" "while" "restore-form" "Object" "<Object>" "properties")}
        {Lisp-Entry "find-to-modify" method (public virtual) #f 419 26 419 40 ("locate" "find-component-with" "widget-part" "or" "procedure" "<procedure>" "test" "Object" "<Object>" "name")}
        {Lisp-Entry "form-model" method (public virtual) #f 427 26 427 36 ("resolve-model" "resolve-model~" "Form" "<Form>" "form")}
        {Lisp-Entry "finish" method (protected chained) #f 431 29 431 35 ("write-properties" "self" "creator~self" "set!" "install-form" "neq?" "if" "when" "others" "creator" "form" "bind-keywords" "Object" "<Object>" "initargs")}
        {Lisp-Entry "write-properties" method (public) #f 442 18 442 34 ("self" "do" "in-properties" "for" "loop" "class-of" "component-property" "write-property-to" "initer-property?" "unless" "keyword->symbol" "property-name" "let" "value" "property" "object" "write-initarg-to" "define" "Object" "<Object>" "properties")}
        {Lisp-Entry "install-in-parent" method (protected virtual) #f 454 29 454 46 ("parent-add-child" "get-editor" "get-editor~" "install-surrogate" "remove-surrogate" "get-surrogate" "get-surrogate~" "surrogate" "set-designers" "not-null?" "get-designers" "get-designers~" "designers" "let" "parent" "when")}
        {Lisp-Entry "parent-add-child" method (public) #f 466 18 466 34 ("self" "add-child" "add-child~" "parent" "when")}
        {Lisp-Entry "conclude" method (protected chained) #f 471 29 471 37 ("Object" "<Object>" "initargs")}
        {Lisp-Entry "initialized?" method (override) #f 475 20 475 32 ("get-initialized?")}
        {Lisp-Entry "destroying?" method (override) #f 484 20 484 31 ("get-destroying?")}
        {Lisp-Entry "destroyed?" method (override) #f 488 20 488 30 ("get-destroyed?")}
        {Lisp-Entry "close" method (override) #f 492 20 492 25 ("destroy-component" "destroyed?" "unless")}
        {Lisp-Entry "destroy-component" method (chained) #f 498 19 498 36 ("set-destroyed?" "destroy" "children" "destroy-component" "destroy-component~" "Component" "is?" "when" "child" "lambda" "for-each" "set-destroying?")}
        {Lisp-Entry "destroy" method (override) #f 509 20 509 27 ("nextmethod" "name" "remove-from-index" "remove-from-index~" "creator" "self" "remove-child" "remove-child~" "parent" "when")}
        {Lisp-Entry "close-children" method (public) #f 517 18 517 32 ("children" "close" "close~" "for-each")}
        {Lisp-Entry "confirm-close" method (public virtual) #f 521 26 521 39 ("rest")}
        {Lisp-Entry "initially-visible?" method (public virtual) #f 530 26 530 44 ()}
        {Lisp-Entry "get-visible?" method (public virtual) #f 534 26 534 38 ("get-visible-flag")}
        {Lisp-Entry "set-visible?" method (public virtual) #f 538 26 538 38 ("hide" "show" "get-visible-flag" "neq?" "when" "set-visible-flag" "get-finished?" "not" "if" "bool" "<bool>" "flag")}
        {Lisp-Entry "show" method (public virtual) #f 547 26 547 30 ("set-visible-flag")}
        {Lisp-Entry "hide" method (public virtual) #f 551 26 551 30 ("set-visible-flag")}
        {Lisp-Entry "initer-properties" definition () #f 560 14 560 31 ("creator-branch" "creator" "form" "default-traits" "base-traits" "parent" "name" "list->table")}
        {Lisp-Entry "initer-property?" method (chained) #f 571 19 571 35 ("initer-properties" "table-ref" "name")}
        {Lisp-Entry "get-properties" method (meta public) #f 575 23 575 37 ("self" "get-instance-slots" "get-instance-slots~" "property-getter" "property?" "and" "property" "lambda" "collect-if")}
        {Lisp-Entry "component-property" method () #f 582 11 582 29 ("error" "property?" "if" "mop-category-field" "mop-category-field~" "field" "let" "name" "Object" "<Object>" "category")}
        {Lisp-Entry "write-property-to" definition () #f 589 15 589 32 ("error" "if" "property-setter" "setter" "let" "value" "property" "Object" "<Object>" "object")}
        {Lisp-Entry "get-filtered-properties" method (public) #f 596 18 596 41 ("map" "else" "error" "category-field" "string?" "cond" "object" "standardize" "class" "infos" "get-categorized-properties" "properties" "display-property?" "eq?" "symbol?" "if" "get-name" "get-name~" "name" "all" "memq?" "property-getter" "property?" "mop-instance-slots" "mop-instance-slots~" "display-filtered-property?" "property" "collect-if" "field-name" "symbol->string" "string<?" "=" "and" "<" "or" "yr" "self" "class-of" "get-category" "get-category~" "get-rank" "get-rank~" "xr" "let" "y" "x" "lambda" "sort" "get-all-properties" "define" "categorized" "filter" "filter:")}
        {Lisp-Entry "name?" method (public) #f 641 18 641 23 ("pair?" "null?" "integer?" "symbol?" "or" "Object" "<Object>" "object")}
        {Lisp-Entry "add-child" method (public virtual) #f 648 26 648 35 ("find-component" "send-child-before" "list" "append!" "children" "set!" "not" "if" "get-before" "get-before~" "Component" "is?" "and" "before" "let" "Object" "<Object>" "child")}
        {Lisp-Entry "add-child-at" method (public) #f 655 18 655 30 ("insert!" "children" "set!" "Integer+" "<Integer+>" "rank" "Object" "<Object>" "child")}
        {Lisp-Entry "append-child" method (public) #f 659 18 659 30 ("list" "append!" "children" "set!" "Object" "<Object>" "child")}
        {Lisp-Entry "remove-child" method (public virtual) #f 663 26 663 38 ("remove!" "children" "set!" "Object" "<Object>" "child")}
        {Lisp-Entry "replace-child" method (public virtual) #f 667 26 667 39 ("remove!" "insert!" "set!" "self" "set-parent" "set-parent~" "children" "element" "child" "let" "Object" "<Object>" "replacement" "fx" "<fx>" "rank")}
        {Lisp-Entry "front-child?" method (public virtual) #f 674 26 674 38 ("children" "first" "eq?" "child")}
        {Lisp-Entry "back-child?" method (public virtual) #f 678 26 678 37 ("children" "last" "eq?" "child")}
        {Lisp-Entry "send-child-to-front" method (public virtual) #f 682 26 682 45 ("move-to-head!" "children" "set!" "Object" "<Object>" "child")}
        {Lisp-Entry "send-child-to-back" method (public virtual) #f 686 26 686 44 ("move-to-tail!" "children" "set!" "Object" "<Object>" "child")}
        {Lisp-Entry "send-child-before" method (public) #f 690 18 690 35 ("insert!" "set!" "error" "find" "or" "and" "rank" "children" "remove!" "removed" "let*" "target" "Object" "<Object>" "child")}
        {Lisp-Entry "child" method (public) #f 696 18 696 23 ("error" "find-component" "or" "Object" "<Object>" "name")}
        {Lisp-Entry "find-component" method (public) #f 701 18 701 32 ("equal?" "find-component-with" "Object" "<Object>" "name")}
        {Lisp-Entry "find-component-with" method (public) #f 705 18 705 37 ("find-child-with" "component-alias" "or" "else" "cdr" "next" "when" "car" "sub" "let" "pair?" "1" "-" "parent" "find-component" "find-component~" "self" "0" "=" "if" "integer?" "error" "null?" "cond" "procedure" "<procedure>" "test" "Object" "<Object>" "name")}
        {Lisp-Entry "brother" method (public) #f 724 18 724 25 ("parent" "child" "child~" "Object" "<Object>" "name")}
        {Lisp-Entry "next-brother" method (public) #f 728 18 728 30 ("next-child" "next-child~" "self" "parent" "not" "if" "type" "type:")}
        {Lisp-Entry "previous-brother" method (public) #f 734 18 734 34 ("previous-child" "previous-child~" "self" "parent" "not" "if" "type" "type:")}
        {Lisp-Entry "child-ranked" method (public) #f 740 18 740 30 ("children" "element" "fx" "<fx>" "rank")}
        {Lisp-Entry "component-alias" method (public virtual) #f 744 26 744 41 ("process-alias" "process-alias~" "when" "find-process" "process" "let" "else" "creator" ":creator" "parent" ":parent" "self" ":self" "case" "Object" "<Object>" "name")}
        {Lisp-Entry "find-path" method (public) #f 754 18 754 27 ("cdr" "find-path" "find-path~" "and" "car" "find-child" "child" "let" "self" "null?" "if" "path")}
        {Lisp-Entry "find-child" method (public) #f 761 18 761 28 ("children" "get-name" "get-name~" "equal?" "child" "lambda" "find-if" "Object" "<Object>" "name")}
        {Lisp-Entry "find-child-with" method (public) #f 767 18 767 33 ("children" "get-name" "get-name~" "child" "lambda" "find-if" "procedure" "<procedure>" "test" "Object" "<Object>" "name")}
        {Lisp-Entry "find-type" method (public) #f 773 18 773 27 ("children" "is?" "child" "lambda" "find-if" "type")}
        {Lisp-Entry "find-key" method (public) #f 779 18 779 26 ("children" "equal?" "child" "lambda" "find-if" "value" "key")}
        {Lisp-Entry "find-ascendant" method (public) #f 785 18 785 32 ("get-parent~" "set!" "is-not?" "while" "get-parent" "parent" "let" "self" "is?" "and" "if" "include-self?" "include-self?:" "type")}
        {Lisp-Entry "find-descendant" method (public) #f 794 18 794 33 ("continuation-return" "when" "level" "component" "for-each-descendant" "return" "lambda" "continuation-capture" "predicate")}
        {Lisp-Entry "collect-ascendants" method (public) #f 804 18 804 36 ("is?" "if" "get-parent~" "cons" "set!" "is-not?" "not" "or" "and" "while" "get-parent" "parent" "ascendants" "let" "type")}
        {Lisp-Entry "child-rank" method (public) #f 815 18 815 28 ("children" "find" "Object" "<Object>" "child")}
        {Lisp-Entry "get-brothers" method (public) #f 819 18 819 30 ("get-children" "get-children~" "self" "remove" "parent" "when")}
        {Lisp-Entry "has-parent?" method (public) #f 824 18 824 29 ("has-parent?" "has-parent?~" "eq?" "or" "parent" "and" "Component" "<Component>" "component")}
        {Lisp-Entry "has-ascendant?" method (public) #f 828 18 828 32 ("has-parent?" "self" "eq?" "or" "Component" "<Component>" "component")}
        {Lisp-Entry "get-root-parent" method (public) #f 832 18 832 33 ("get-root-parent" "get-root-parent~" "self" "parent" "not" "if")}
        {Lisp-Entry "get-visible-children" method (public) #f 838 18 838 38 ("children" "get-visible?" "get-visible?~" "collect-if")}
        {Lisp-Entry "first-visible-child" method (public) #f 842 18 842 37 ("car" "null?" "if" "get-visible-children" "visible" "let")}
        {Lisp-Entry "get-ancestry" method (public) #f 849 18 849 30 ("cons" "get-parent" "get-parent~" "not" "if" "ancestry" "self" "scan" "iter" "let")}
        {Lisp-Entry "for-each-parent" method (public) #f 861 18 861 33 ("for-each-parent" "for-each-parent~" "parent" "when" "procedure" "<procedure>" "proc")}
        {Lisp-Entry "for-each-ancestor" method (public) #f 867 18 867 35 ("for-each-parent" "self" "procedure" "<procedure>" "proc")}
        {Lisp-Entry "for-each-descendant" method (public) #f 872 18 872 37 ("+" "and" "unless" "get-children" "get-children~" "in" "child" "for" "loop" "1" "level" "component" "iter" "let" "0" "self" "when" "stop-test" "stop-test:" "include-self?" "include-self?:" "procedure" "<procedure>" "proc")}
        {Lisp-Entry "collect-descendants" method (public) #f 883 18 883 37 ("get-output" "get-output~" "put" "put~" "is?" "not" "or" "when" "level" "child" "lambda" "for-each-descendant" "List-Factory" "new" "factory" "let" "type")}
        {Lisp-Entry "for-each-sibling" method (public) #f 892 18 892 34 ("self" "neq?" "when" "parent" "get-children" "get-children~" "in" "child" "for" "loop" "procedure" "<procedure>" "proc")}
        {Lisp-Entry "outer-component" method (public) #f 903 18 903 33 ("get-parent" "get-parent~" "set!" "neq?" "inner?" "inner?~" "and" "while" "self" "component" "parent" "outer" "let" "limit")}
        {Lisp-Entry "outer?" method (public) #f 912 18 912 24 ("outer-component" "self" "eq?" "limit")}
        {Lisp-Entry "inner?" method (public virtual) #f 916 26 916 32 ("component")}
        {Lisp-Entry "inner-widget" method (public virtual) #f 920 26 920 38 ("self")}
        {Lisp-Entry "locate-part" method (public) #f 924 18 924 29 ("error" "widget-part" "or" "name")}
        {Lisp-Entry "widget-part" method (public virtual) #f 929 26 929 37 ("name")}
        {Lisp-Entry "iterate-parts" method (public) #f 933 18 933 31 ("widget-parts" "locate-part" "name" "lambda" "for-each" "proc")}
        {Lisp-Entry "widget-parts" method (public virtual) #f 939 26 939 38 ()}
        {Lisp-Entry "add-form" method (public virtual) #f 948 26 948 34 ("append-parent" "append-parent~" "child-form" "Form" "<Form>" "parent-form")}
        {Lisp-Entry "add-to-index" method (public virtual) #f 957 26 957 38 ("table-set!" "table-ref" "if" "new-index" "set!" "index" "not" "when" "Component" "<Component>" "component" "Object" "<Object>" "name")}
        {Lisp-Entry "remove-from-index" method (public virtual) #f 966 26 966 43 ("table-clear" "index" "and" "when" "Component" "<Component>" "component" "Object" "<Object>" "name")}
        {Lisp-Entry "new-index" method (protected virtual) #f 971 29 971 38 ("eq?" "test:" "make-table")}
        {Lisp-Entry "locate" method (public virtual) #f 975 26 975 32 ("else" "eq?" "error" "not" "cond" "locate-component" "component" "let" "Object" "<Object>" "name")}
        {Lisp-Entry "locate-component" method (public) #f 982 18 982 34 ("table-ref" "index" "and" "else" "locate-component~" "null?" "if" "cdr" "next" "when" "car" "locate-component" "sub" "let" "pair?" "cond" "Object" "<Object>" "name")}
        {Lisp-Entry "clone-component" method (public) #f 999 18 999 33 ("instantiate" "instantiate~" "instantiate-file" "apply" "if" "form" "get-tag-reference" "get-tag-reference~" "tag-reference" "let" "rest")}
        {Lisp-Entry "get-database-component" method (public) #f 1011 18 1011 40 ("get-root-parent")}
        {Lisp-Entry "get-event-consumer" method (override) #f 1020 20 1020 38 ("event-consumer")}
        {Lisp-Entry "set-event-consumer" method (override) #f 1024 20 1024 38 ("event-consumer" "set!" "Event-Consumer" "<Event-Consumer>" "consumer")}
        {Lisp-Entry "deliver-event" method (override) #f 1028 20 1028 33 ("event" "proc" "target" "handler")}
        {Lisp-Entry "first-child" method (public) #f 1037 18 1037 29 ("car" "children" "null?" "if")}
        {Lisp-Entry "last-child" method (public) #f 1043 18 1043 28 ("children" "last")}
        {Lisp-Entry "next-child" method (public) #f 1047 18 1047 28 ("length" "1" "+" "modulo" "element" "find" "rank" "collect-type" "if" "children" "let" "type" "type:" "child")}
        {Lisp-Entry "previous-child" method (public) #f 1053 18 1053 32 ("length" "1" "-" "modulo" "element" "find" "rank" "collect-type" "if" "children" "let" "type" "type:" "child")}
        {Lisp-Entry "front?" method (public) #f 1059 18 1059 24 ("self" "front-child?" "front-child?~" "parent" "not" "or")}
        {Lisp-Entry "back?" method (public) #f 1063 18 1063 23 ("self" "back-child?" "back-child?~" "parent" "not" "or")}
        {Lisp-Entry "bring-to-front" method (public virtual) #f 1067 26 1067 40 ("self" "send-child-to-front" "send-child-to-front~" "parent" "when")}
        {Lisp-Entry "send-to-back" method (public virtual) #f 1072 26 1072 38 ("self" "send-child-to-back" "send-child-to-back~" "parent" "when")}
        {Lisp-Entry "send-before" method (public virtual) #f 1077 26 1077 37 ("self" "send-child-before" "send-child-before~" "parent" "when" "target")}
        {Lisp-Entry "branch-installed?" method (public) #f 1087 18 1087 35 ("branch" "boolean")}
        {Lisp-Entry "get-active-branch" method (public) #f 1091 18 1091 35 ("get-branch" "get-branch~" "iterate" "let" "branch" "not" "if")}
        {Lisp-Entry "get-active-trait" method (public) #f 1100 18 1100 34 ("get-trait" "get-trait~" "when" "get-active-branch" "branch" "let")}
        {Lisp-Entry "set-active-trait" method (public) #f 1106 18 1106 34 ("list" "if" "replace-traits" "trait")}
        {Lisp-Entry "get-active-trait-name" method (public) #f 1110 18 1110 39 ("get-name" "get-name~" "when" "get-active-trait" "trait" "let")}
        {Lisp-Entry "get-active-trait-presentation" method (public) #f 1116 18 1116 47 ("get-presentation-property~" "get-presentation-property" "not" "if" "get-active-trait" "trait" "let")}
        {Lisp-Entry "get-base-traits" method (public) #f 1123 18 1123 33 ("base-traits")}
        {Lisp-Entry "set-base-traits" method (public) #f 1127 18 1127 33 ("push-trait" "when" "get-active-branch" "replace-traits" "get-active-trait" "base-branch" "and" "preserve" "base-traits" "set!" "listify" "let" "traits")}
        {Lisp-Entry "get-default-traits" method (public) #f 1137 18 1137 36 ("default-traits")}
        {Lisp-Entry "set-default-traits" method (public) #f 1141 18 1141 36 ("base-branch" "replace-traits" "default-traits" "set!" "listify" "let" "traits")}
        {Lisp-Entry "push-trait" method (public) #f 1147 18 1147 28 ("list" "base-branch" "replace-traits" "trait")}
        {Lisp-Entry "pop-trait" method (public) #f 1151 18 1151 27 ("base-branch" "replace-traits")}
        {Lisp-Entry "replace-active-trait" method (public) #f 1155 18 1155 38 ("list" "if" "base-branch" "replace-traits" "trait")}
        {Lisp-Entry "replace-traits" method (public) #f 1159 18 1159 32 ("if" "base-branch" "resolve-trait" "compute-effective-traits" "compute-effective-traits~" "map" "append!" "apply" "not" "get-trait" "get-trait~" "eq?" "pair?" "and" "match?" "change-installed?" "cdr" "car" "not-null?" "branch" "install-in-self" "restore-client" "restore-client~" "when" "get-branch" "get-branch~" "old-branch" "current-traits" "current-branch" "install-in-branch" "set!" "set-branch" "set-branch~" "self" "configure-client" "configure-client~" "new-branch" "trait" "lambda" "for-each" "parent-branch" "let" "effective-traits" "root-branch" "install-traits" "define" "traits" "target-branch")}
        {Lisp-Entry "for-each-trait" method (public) #f 1200 18 1200 32 ("child-traits" "for-each-trait" "for-each-trait~" "trait" "lambda" "for-each" "proc")}
        {Lisp-Entry "with-each-trait" method (public) #f 1207 18 1207 33 ("get-trait" "get-trait~" "set-active-trait" "trait" "lambda" "for-each-trait" "get-branch" "active-branch" "let" "proc")}
        {Lisp-Entry "get-branches" method (public) #f 1216 18 1216 30 ("get-branches" "get-branches~" "cons" "branch" "not" "if")}
        {Lisp-Entry "find-trait-branch" method (public) #f 1222 18 1222 35 ("get-branches" "get-trait" "get-trait~" "eq?" "branch" "lambda" "find-if" "trait")}
        {Lisp-Entry "iterate-branch-spine" method (public) #f 1228 18 1228 38 ("get-branch~" "set!" "get-trait" "get-trait~" "get-client-form" "get-client-form~" "Branch" "is?" "while" "creator-effective-form" "self" "get-branch" "branch" "let" "trait" "trait:" "proc")}
        {Lisp-Entry "creator-effective-form" method (public) #f 1240 18 1240 40 ("class-of" "get-class-form" "get-class-form~" "form" "creator" "self" "eq?" "if")}
        {Lisp-Entry "child-traits" method (public) #f 1246 18 1246 30 ("children" "Trait" "collect-type")}
        {Lisp-Entry "save-session" method (public virtual) #f 1255 26 1255 38 ()}
        {Lisp-Entry "get-integrity-manager" method (public virtual) #f 1264 26 1264 47 ()}
        {Lisp-Entry "validate-component" method (public virtual) #f 1268 26 1268 44 ("get-categorized-properties" "validate-property" "self" "class-of" "property-field" "property" "let" "symbol" "lambda" "for-each" "manager" "context" "client" "root")}
        {Lisp-Entry "validate-property" method (public virtual) #f 1275 26 1275 43 ("validate" "validate~" "self" "read-property" "value" "property-domain" "domain" "let" "manager" "context" "client" "root" "property")}
        {Lisp-Entry "search-component" method (public virtual) #f 1286 26 1286 42 ("not" "or" "and" "type:" "name:" "getf" "self" "is?" "type" "search-type" "ignore-case?:" "search" "get-presentation-property" "localize" "presentation" "let" "name" "search-name" "define" "Object" "<Object>" "target")}
        {Lisp-Entry "search-text" method (protected) #f 1300 21 1300 32 ("else" "Text" "Formatted-Text" "typecase" "search-text" "unimplemented" "car" "string" "let" "run" "runs" "format" "bind" "info" "search-formatted-text" "get-paragraphs" "get-paragraphs~" "ignore-case?:" "search" "line" "lambda" "some?" "search-plain-text" "define" "target" "Object" "<Object>" "text")}
        {Lisp-Entry "launch" method (public virtual) #f 1331 26 1331 32 ("rest")}
        {Lisp-Entry "component-path" method (public virtual) #f 1340 26 1340 40 ("Path" "new" "null?" "when" "get-parent-component" "get-parent-component~" "cons" "set!" "error" "not" "if" "get-name" "get-name~" "name" "neq?" "while" "self" "scan" "path" "let" "creator" "root")}
        {Lisp-Entry "present-path" method (public virtual) #f 1354 26 1354 38 ("Path" "new" "values" "null?" "get-parent-component" "get-parent-component~" "cons" "set!" "present-in-path?" "present-in-path?~" "when" "error" "not" "if" "get-name" "get-name~" "name" "neq?" "while" "self" "scan" "pres" "path" "let" "root")}
        {Lisp-Entry "present-in-path?" method (public virtual) #f 1371 26 1371 42 ()}
        {Lisp-Entry "unfold-branches" method (public) #f 1380 18 1380 33 ("cons" "set-active-branch" "set-active-branch~" "set-restoreable?" "set-restoreable?~" "child" "child~" "branch" "when" "~" "apply" "client" "let" "self" "eq?" "if" "branch-name" "lambda" "instantiate" "child-traits" "map" "all-branch-names" "get-name" "get-name~" "and" "active-branch-name" "get-branch" "active-branch" "get-creator" "get-form" "get-form~" "form" "let*" "include-root?" "include-root?:" "properties" "properties:" "branches" "branches:")}
        {Lisp-Entry "search-descendants" method (public virtual) #f 1407 26 1407 44 ("search-descendants" "unimplemented" "get-children" "not" "if" "criteria")}
        {Lisp-Entry "show-in-toolbox?" method (meta public virtual) #f 1418 31 1418 47 ()}
        {Lisp-Entry "get-class-descriptor" method (meta public virtual) #f 1427 31 1427 51 ("Component-Descriptor" "jazz.designer" "module-ref" "new")}
        {Lisp-Entry "get-domain" method (meta public virtual) #f 1431 31 1431 41 ("self" "get-descriptor" "class-get-domain" "class-get-domain~" "property")}
        {Lisp-Entry "get-category" method (meta public virtual) #f 1435 31 1435 43 ("self" "get-descriptor" "class-get-category" "class-get-category~" "property")}
        {Lisp-Entry "get-class-presentation" method (meta public) #f 1439 23 1439 45 ("self" "get-descriptor" "class-presentation" "class-presentation~")}
        {Lisp-Entry "get-class-image" method (meta public) #f 1443 23 1443 38 ("self" "get-descriptor" "class-image" "class-image~")}
        {Lisp-Entry "get-name-prohibited?" method (meta public) #f 1447 23 1447 43 ("self" "get-descriptor" "class-name-prohibited?" "class-name-prohibited?~")}
        {Lisp-Entry "get-name-mandatory?" method (meta public) #f 1451 23 1451 42 ("self" "get-descriptor" "class-name-mandatory?" "class-name-mandatory?~")}
        {Lisp-Entry "get-name-unicity?" method (meta public) #f 1455 23 1455 40 ("self" "get-descriptor" "class-name-unicity?" "class-name-unicity?~")}
        {Lisp-Entry "presentation->name" method (meta public) #f 1459 23 1459 41 ("self" "get-descriptor" "class-presentation->name" "class-presentation->name~" "presentation")}
        {Lisp-Entry "name->presentation" method (meta public) #f 1463 23 1463 41 ("self" "get-descriptor" "class-name->presentation" "class-name->presentation~" "name")}
        {Lisp-Entry "property-presentation" method (meta public) #f 1467 23 1467 44 ("self" "get-descriptor" "class-property-presentation" "class-property-presentation~" "property")}
        {Lisp-Entry "detail-presentation" method (meta public) #f 1471 23 1471 42 ("self" "get-descriptor" "class-detail-presentation" "class-detail-presentation~" "property")}
        {Lisp-Entry "persist-property?" method (meta public) #f 1475 23 1475 40 ("self" "get-descriptor" "class-persist-property?" "class-persist-property?~" "property")}
        {Lisp-Entry "presentation-property?" method (public) #f 1479 18 1479 40 ("self" "class-of" "get-descriptor" "component-presentation-property?" "component-presentation-property?~" "property")}
        {Lisp-Entry "get-presentation-property" method (public) #f 1483 18 1483 43 ("self" "class-of" "get-descriptor" "component-get-presentation" "component-get-presentation~")}
        {Lisp-Entry "set-presentation-property" method (public) #f 1487 18 1487 43 ("self" "class-of" "get-descriptor" "component-set-presentation" "component-set-presentation~" "presentation" "designer")}
        {Lisp-Entry "get-string-presentation" method (protected) #f 1491 21 1491 44 ("self" "class-of" "get-descriptor" "component-get-string-presentation" "component-get-string-presentation~")}
        {Lisp-Entry "set-string-presentation" method (protected) #f 1495 21 1495 44 ("self" "class-of" "get-descriptor" "component-set-string-presentation" "component-set-string-presentation~" "presentation" "designer")}
        {Lisp-Entry "present-property" method (public) #f 1499 18 1499 34 ("self" "class-of" "get-descriptor" "component-present-property" "component-present-property~" "value" "property")}
        {Lisp-Entry "get-parent-component" method (public) #f 1503 18 1503 38 ("self" "class-of" "get-descriptor" "component-get-parent" "component-get-parent~")}
        {Lisp-Entry "get-components" method (public) #f 1507 18 1507 32 ("self" "class-of" "get-descriptor" "component-get-components" "component-get-components~")}
        {Lisp-Entry "get-component-image" method (public) #f 1511 18 1511 37 ("self" "class-of" "get-descriptor" "component-get-component-image" "component-get-component-image~")}
        {Lisp-Entry "can-cut-component?" method (public) #f 1515 18 1515 36 ("self" "class-of" "get-descriptor" "component-can-cut-component?" "component-can-cut-component?~")}
        {Lisp-Entry "can-copy-component?" method (public) #f 1519 18 1519 37 ("self" "class-of" "get-descriptor" "component-can-copy-component?" "component-can-copy-component?~")}
        {Lisp-Entry "can-paste-component?" method (public) #f 1523 18 1523 38 ("self" "class-of" "get-descriptor" "component-can-paste-component?" "component-can-paste-component?~")}
        {Lisp-Entry "can-paste-properties-component?" method (public) #f 1527 18 1527 49 ("self" "class-of" "get-descriptor" "component-can-paste-properties-component?" "component-can-paste-properties-component?~")}
        {Lisp-Entry "can-rename-component?" method (public) #f 1531 18 1531 39 ("self" "class-of" "get-descriptor" "component-can-rename-component?" "component-can-rename-component?~")}
        {Lisp-Entry "can-select-all-component?" method (public) #f 1535 18 1535 43 ("self" "class-of" "get-descriptor" "component-can-select-all-component?" "component-can-select-all-component?~")}
        {Lisp-Entry "can-delete-component?" method (public) #f 1539 18 1539 39 ("self" "class-of" "get-descriptor" "component-can-delete-component?" "component-can-delete-component?~")}
        {Lisp-Entry "can-relocate-component?" method (public) #f 1543 18 1543 41 ("self" "class-of" "get-descriptor" "component-can-relocate-component?" "component-can-relocate-component?~")}
        {Lisp-Entry "can-view-properties?" method (public) #f 1547 18 1547 38 ("self" "class-of" "get-descriptor" "component-can-view-properties?" "component-can-view-properties?~")}
        {Lisp-Entry "determine-can-paste" method (public) #f 1551 18 1551 37 ("self" "class-of" "get-descriptor" "component-determine-can-paste" "component-determine-can-paste~" "try-parent?")}
        {Lisp-Entry "determine-paster" method (public) #f 1555 18 1555 34 ("self" "class-of" "get-descriptor" "component-determine-paster" "component-determine-paster~" "try-parent?")}
        {Lisp-Entry "can-send-before?" method (public) #f 1559 18 1559 34 ("self" "class-of" "get-descriptor" "component-can-send-before?" "component-can-send-before?~" "before" "father" "types")}
        {Lisp-Entry "sort-components?" method (public) #f 1563 18 1563 34 ("self" "class-of" "get-descriptor" "component-sort-components?" "component-sort-components?~")}
        {Lisp-Entry "sort-components" method (public) #f 1567 18 1567 33 ("self" "class-of" "get-descriptor" "component-sort-components" "component-sort-components~" "components" "predicate")}
        {Lisp-Entry "indexable?" method (public) #f 1571 18 1571 28 ("self" "class-of" "get-descriptor" "component-indexable?" "component-indexable?~")}
        {Lisp-Entry "component-surrogate" method (public) #f 1575 18 1575 37 ("self" "class-of" "get-descriptor" "component-surrogate-class" "component-surrogate-class~")}
        {Lisp-Entry "install-surrogate" method (public) #f 1579 18 1579 35 ("self" "class-of" "get-descriptor" "component-install-surrogate" "component-install-surrogate~" "editor")}
        {Lisp-Entry "install-children-surrogates" method (public) #f 1583 18 1583 45 ("self" "class-of" "get-descriptor" "component-install-children-surrogates" "component-install-children-surrogates~" "editor")}
        {Lisp-Entry "remove-surrogate" method (public) #f 1587 18 1587 34 ("self" "class-of" "get-descriptor" "component-remove-surrogate" "component-remove-surrogate~")}
        {Lisp-Entry "remove-component-surrogate" method (public) #f 1591 18 1591 44 ("self" "class-of" "get-descriptor" "component-remove-component-surrogate" "component-remove-component-surrogate~")}
        {Lisp-Entry "get-default-property" method (public) #f 1595 18 1595 38 ("self" "class-of" "get-properties-descriptor" "component-get-default-property" "component-get-default-property~")}
        {Lisp-Entry "get-categorized-properties" method (public) #f 1599 18 1599 44 ("self" "class-of" "get-properties-descriptor" "component-get-categorized-properties" "component-get-categorized-properties~")}
        {Lisp-Entry "display-property?" method (public) #f 1603 18 1603 35 ("self" "class-of" "get-descriptor" "component-display-property?" "component-display-property?~" "property")}
        {Lisp-Entry "property-domain" method (public) #f 1607 18 1607 33 ("self" "class-of" "get-descriptor" "component-property-domain" "component-property-domain~" "property")}
        {Lisp-Entry "get-addable-default" method (public) #f 1611 18 1611 37 ("self" "class-of" "get-descriptor" "component-get-addable-default" "component-get-addable-default~")}
        {Lisp-Entry "get-addable-classes" method (public) #f 1615 18 1615 37 ("self" "class-of" "get-descriptor" "component-get-addable-classes" "component-get-addable-classes~")}
        {Lisp-Entry "get-categorized-addable-classes" method (public) #f 1619 18 1619 49 ("self" "class-of" "get-descriptor" "component-get-categorized-addable-classes" "component-get-categorized-addable-classes~")}
        {Lisp-Entry "addable-class?" method (public) #f 1623 18 1623 32 ("self" "class-of" "get-descriptor" "component-addable-class?" "component-addable-class?~" "class")}
        {Lisp-Entry "get-component-classes" method (public) #f 1627 18 1627 39 ("self" "class-of" "get-descriptor" "component-get-classes" "component-get-classes~")}
        {Lisp-Entry "get-addable-traits" method (public) #f 1631 18 1631 36 ("self" "class-of" "get-descriptor" "component-get-addable-traits" "component-get-addable-traits~")}
        {Lisp-Entry "get-addable-default-trait" method (public) #f 1635 18 1635 43 ("self" "class-of" "get-descriptor" "component-get-addable-default-trait" "component-get-addable-default-trait~")}
        {Lisp-Entry "get-addable-base" method (public) #f 1639 18 1639 34 ("self" "class-of" "get-descriptor" "component-get-addable-base" "component-get-addable-base~")}
        {Lisp-Entry "get-addable-details" method (public) #f 1643 18 1643 37 ("self" "class-of" "get-descriptor" "component-get-addable-details" "component-get-addable-details~")}
        {Lisp-Entry "get-recursive-details?" method (public) #f 1647 18 1647 40 ("self" "class-of" "get-descriptor" "component-get-recursive-details?" "component-get-recursive-details?~")}
        {Lisp-Entry "get-class-searchable-classes" method (public) #f 1651 18 1651 46 ("self" "class-of" "get-descriptor" "component-get-class-searchable-classes" "component-get-class-searchable-classes~")}
        {Lisp-Entry "get-custom-details" method (public) #f 1655 18 1655 36 ("self" "class-of" "get-descriptor" "component-get-custom-details" "component-get-custom-details~")}
        {Lisp-Entry "get-custom-card" method (public) #f 1659 18 1659 33 ("self" "class-of" "get-descriptor" "component-get-custom-card" "component-get-custom-card~")}
        {Lisp-Entry "add-component-menu" method (public) #f 1663 18 1663 36 ("self" "class-of" "get-descriptor" "component-add-component-menu" "component-add-component-menu~" "menu")}
        {Lisp-Entry "save-component-properties" method (public) #f 1667 18 1667 43 ("self" "class-of" "get-descriptor" "component-save-properties" "component-save-properties~" "designer")}
        {Lisp-Entry "get-designers" method (public) #f 1676 18 1676 31 ("designers")}
        {Lisp-Entry "set-designers" method (public) #f 1680 18 1680 31 ("children" "set-designers" "set-designers~" "child" "lambda" "for-each" "designers" "set!" "lst")}
        {Lisp-Entry "install-designer" method (public) #f 1687 18 1687 34 ("get-components" "install-designer" "install-designer~" "child" "lambda" "for-each" "cons" "designers" "set!" "designer")}
        {Lisp-Entry "uninstall-designer" method (public) #f 1694 18 1694 36 ("get-components" "uninstall-designer" "uninstall-designer~" "child" "lambda" "for-each" "remove!" "designers" "set!" "designer")}
        {Lisp-Entry "print-component" method (public) #f 1706 18 1706 33 ("print-html" "print-html~" "self" "Component-HTML-Printer" "new" "let" "print-component" "unimplemented" "output" "formatter")}
        {Lisp-Entry "export-text" method (public) #f 1714 18 1714 29 ("get-output-string" "set-clipboard-text" "generate-text" "open-output-string" "output" "let" "export-text" "unimplemented")}
        {Lisp-Entry "generate-text" method (public virtual) #f 1722 26 1722 39 ("print-text" "new-text-formatter" "formatter" "let" "output")}
        {Lisp-Entry "new-text-formatter" method (protected virtual) #f 1727 29 1727 47 ("Formatter" "new" "new-text-formatter" "unimplemented")}
        {Lisp-Entry "print-text" method (public virtual) #f 1733 26 1733 36 ("output" "formatter")}
        {Lisp-Entry "output-component" method (public virtual) #f 1737 26 1737 42 ("text")}
        {Lisp-Entry "output-properties" method (public virtual) #f 1741 26 1741 43 ("get-properties" "format" "insert-bulleted-line" "insert-bulleted-line~" "read-property" "->string" "value" "self" "class-of" "property-presentation" "property-presentation~" "localize" "title" "let" "property" "lambda" "for-each" "output-properties" "unimplemented" "text")}}}})
"Consumer"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "consumer" "Consumer.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.consumer.Consumer" module (protected) #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Consumer" interface (undocumented) #f 40 24 40 32 ()}}})
"Conversion"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "conversion" "Conversion.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.conversion.Conversion" module (protected) #f 37 18 37 52 ("0" "print-to" "print-to~" "designer" "output-header" "output" "UTF-8" "char-encoding:" "path-settings" "call-with-output-file" "Depot" "eof-object?" "read-until" "File-Reader" "input" "with" "get-name" "get-name~" "format" "list" "append" "message-box" "save-book" "copy-file" "copy-file~" "when" "get-property" "get-property~" "client-form" "subform" "parent-form" "else" "get-output" "get-output~" "receive" "value" "property" "f" "properties:" "present" "present~" "error" "/=" "version:" "case" "put" "put~" "null?" "section-name" "section" "keyword" "for-each-property" "List-Factory" "fact" "load-book" "book" "backup-file" "back" "or" "feedback?" "feedback?:" "property-proc" "property-proc:" "section-proc" "section-proc:" "literal-hook" "literal-hook:" "check-version?" "check-version?:" "backup?" "backup?:" "file:" "to" "from" "convert-book" "read-form" "autoload" "class-of" "get-class-form" "get-class-form~" "get-manifest-source" "pathname=?" "in-manifest?" "and" "if" "get-base" "get-base~" "string->symbol" "base" "parse" "parse~" "user-message" "get-application" "edit-document" "edit-document~" "form:" "Designer" "new" "save" "save~" "ensure-read/write" "get-children" "get-children~" "for-each" "convert" "define" "file-form" "form" "lambda" ":wait" "with-cursor" "choose-file" "file" "let" "extensions" "extensions:" "proc" "convert-form" "method" "jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system" "jazz.library.component")}}})
"Cryptography-Provider"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "cryptography" "Cryptography-Provider.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.cryptography.Cryptography-Provider" module (protected) #f 37 18 37 65 ("jazz")
      {Lisp-Entry "Cryptography-Provider" class (undocumented) #f 40 20 40 41 ("Object")}
      {Lisp-Entry "Cryptography-Provider" class (undocumented) #f 46 20 46 41 ("crypt-hash-data" "crypt-destroy-hash" "crypt-create-hash" "crypt-release-context" "void" "crypt-acquire-context" "int" "Jazz" "external" "Object")
        {Lisp-Entry "handle" slot () #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" method () #f 52 11 52 21 ("destroy-mandatory" "crypt-acquire-context" "handle" "set!" "nextmethod")}
        {Lisp-Entry "destroy" method () #f 58 11 58 18 ("nextmethod" "handle" "crypt-release-context")}
        {Lisp-Entry "hash-data" method (public) #f 68 18 68 27 ("crypt-hash-data" "hash" "lambda" "with-hash" "data")}
        {Lisp-Entry "with-hash" method () #f 74 11 74 20 ("crypt-destroy-hash" "when" "handle" "crypt-create-hash" "set!" "begin" "unwind-protect" "hash" "let" "proc")}}}})
"Cursor-Resource"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "resource" "Cursor-Resource.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.resource.Cursor-Resource" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Cursor-Resource" class () #f 43 7 43 22 ("Resource")
        {Lisp-Entry "resource-type" method (meta) #f 52 16 52 29 ("cursor")}}}})
"Data"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "component" "Data.jazz"} 243479599. jazz
    {Lisp-Entry "jazz.library.component.Data" module (protected) #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Data" class () #f 40 7 40 11 ("Object")
        {Lisp-Entry "version" slot () #f 43 8 43 15 ()}
        {Lisp-Entry "get-version" accessor #f #f 43 23 43 31 ()}
        {Lisp-Entry "dialect" slot () #f 44 8 44 15 ()}
        {Lisp-Entry "get-dialect" accessor #f #f 44 23 44 31 ()}
        {Lisp-Entry "imports" slot () #f 45 8 45 15 ()}
        {Lisp-Entry "get-imports" accessor #f #f 45 23 45 31 ()}
        {Lisp-Entry "context" slot () #f 46 8 46 15 ()}
        {Lisp-Entry "get-context" accessor #f #f 46 23 46 31 ()}
        {Lisp-Entry "initialize" method (override) #f 49 20 49 30 ("context~self" "imports~self" "dialect~self" "self" "version~self" "set!" "nextmethod" "context" "imports" "dialect" "version")}
        {Lisp-Entry "copy-object" method (override) #f 57 20 57 31 ("context" "imports" "dialect" "version" "Data" "new" "object")}
        {Lisp-Entry "print" method (override) #f 61 20 61 25 ("dialect" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "set-imports" method (package) #f 72 19 72 30 ("self" "imports~self" "set!" "imports")}
        {Lisp-Entry "add-import" method (public) #f 76 18 76 28 ("cons" "set-imports" "test:" "member?" "unless" "or" "imports" "listify" "let" "car" "symbol?" "if" "import-module" "eq?" "y" "x" "same-import?" "define" "import")}
        {Lisp-Entry "effective-imports" method (public) #f 92 18 92 35 ("cons" "dialect" "if" "or" "imports" "let")}}}})
"Directory-Group"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "moniker" "Directory-Group.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.moniker.Directory-Group" module (protected) #f 38 18 38 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 41 1 41 7 ("jazz.io")}
      {Lisp-Entry "Directory-Group-Class" class () #f 44 7 44 28 ("Directory" ":class")
        {Lisp-Entry "get-protocol" method (override) #f 47 20 47 32 ("group")}}
      {Lisp-Entry "Directory-Group" class () #f 51 7 51 22 ("Directory" "Directory-Group-Class")
        {Lisp-Entry "validate-component" method (override) #f 54 20 54 38 ("error" "Directory" "is-not?" "when" "dir" "lambda" "for-each" "lst")}
        {Lisp-Entry "print" method (override) #f 61 20 61 25 ("not-null?" "format" "get-list" "lst" "let" "readably" "output")}
        {Lisp-Entry "present" method (override) #f 73 20 73 27 ("get-list" "present" "present~" "map" "join")}
        {Lisp-Entry "get-name" method (override) #f 82 20 82 28 ()}
        {Lisp-Entry "get-directory" method (override) #f 86 20 86 33 ("self")}
        {Lisp-Entry "get-content" method (override) #f 90 20 90 31 ("expand" "expand~" "class-of" "new" "moniker" "lambda" "map" "and" "if" "string?" "some-string?" "key:" "symbol?" "some?" "some-symbol?" "get-name" "get-name~" "key" "nextmethod" "apply" "content" "let*" "rest")}
        {Lisp-Entry "get-modification-time" method (override) #f 104 20 104 41 ()}
        {Lisp-Entry "create" method (override) #f 108 20 108 26 ()}
        {Lisp-Entry "delete-directory" method (override) #f 113 20 113 36 ("empty-directory" "self" "when" "feedback" "feedback:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "iterate-directory" method (override) #f 124 20 124 37 ("parse" "parse~" "iterate-directory-content" "iterate-directory-content~" "directory" "member?" "not" "and" "name" "Directory" "file" "get-name" "get-name~" "list" "if" "when" "File" "typecase" "element" "lambda" "for-each" "get-list" "items" "let" "ignored-directories" "ignored-directories:" "ignored-toplevel-directories" "ignored-toplevel-directories:" "recursive?" "recursive?:" "directories?" "directories?:" "files?" "files?:" "full?" "full?:" "proc")}}}})
"Display-Column"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "display" "Display-Column.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.display.Display-Column" module (protected) #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Display-Column" class (undocumented) #f 40 20 40 34 ("bool" "<bool>" "0" "initialize" "fx" "<fx>" "Object")
        {Lisp-Entry "displayer" slot () #f 43 8 43 17 ()}
        {Lisp-Entry "factory" slot () #f 44 8 44 15 ()}
        {Lisp-Entry "content" slot () #f 45 8 45 15 ()}
        {Lisp-Entry "current" slot () #f 46 8 46 15 ()}
        {Lisp-Entry "border" slot () #f 47 8 47 14 ()}
        {Lisp-Entry "get-border" accessor #f #f 47 51 47 59 ()}
        {Lisp-Entry "set-border" accessor #f #f 47 51 47 59 ()}
        {Lisp-Entry "border-after" slot () #f 48 8 48 20 ()}
        {Lisp-Entry "get-border-after" accessor #f #f 48 51 48 59 ()}
        {Lisp-Entry "set-border-after" accessor #f #f 48 51 48 59 ()}
        {Lisp-Entry "minimum" slot () #f 49 8 49 15 ()}
        {Lisp-Entry "line" slot () #f 50 8 50 12 ()}
        {Lisp-Entry "empty?" slot () #f 51 8 51 14 ()}
        {Lisp-Entry "get-empty?" accessor #f #f 51 49 51 57 ()}
        {Lisp-Entry "initialize" method (override) #f 59 20 59 30 ("minimum~self" "border-after~self" "border~self" "List-Factory" "new" "factory" "factory~self" "self" "displayer~self" "set!" "nextmethod" "minimum" "minimum:" "border-after" "border-after:" "0" "border" "border:" "displayer")}
        {Lisp-Entry "output" method (public) #f 73 18 73 24 ("increase-line" "empty?" "set!" "when" "put-data" "fill-empty" "rest" "data")}
        {Lisp-Entry "put-data" method (public virtual) #f 81 26 81 34 ("factory" "put" "put~" "rest" "data")}
        {Lisp-Entry "increase-line" method (public virtual) #f 85 26 85 39 ("line" "increase!")}
        {Lisp-Entry "get-next" method (protected) #f 89 21 89 29 ("cdr" "set!" "car" "prog1" "current" "when")}
        {Lisp-Entry "rewind" method (public) #f 95 18 95 24 ("current" "factory" "get-output" "get-output~" "content" "set!")}
        {Lisp-Entry "fill-empty" method (public) #f 100 18 100 28 ("increase!" "factory" "put" "put~" "line" "<" "while" "displayer" "get-line" "get-line~" "main" "let")}
        {Lisp-Entry "replace-empty" method (protected) #f 107 21 107 34 ("cdr" "set!" "set-car!" "empty-replacement" "replacement" "null?" "if" "current" "car" "data" "let" "previous-data" "previous-column")}
        {Lisp-Entry "empty-replacement" method (protected virtual) #f 118 29 118 46 ("previous-data" "previous-column")}
        {Lisp-Entry "prepare-print" method (public virtual) #f 127 26 127 39 ("rewind")}
        {Lisp-Entry "print-to" method (public virtual) #f 131 26 131 34 ("border-after" "border" "format" "output" "previous-data" "previous-column" "data")}}}})
"Display-Outline"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "outline" "Display-Outline.jazz"} 244287660. jazz
    {Lisp-Entry "jazz.library.outline.Display-Outline" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Display-Outline" class (undocumented) #f 43 20 43 35 ("0" "fx" "<fx>" "initialize" "Outline")
        {Lisp-Entry "first-displayed" slot () #f 46 8 46 23 ()}
        {Lisp-Entry "get-first-displayed" accessor #f #f 46 59 46 67 ()}
        {Lisp-Entry "first-displayed-line" slot () #f 47 8 47 28 ()}
        {Lisp-Entry "get-first-displayed-line" accessor #f #f 47 59 47 67 ()}
        {Lisp-Entry "first-displayed-offset" slot () #f 48 8 48 30 ()}
        {Lisp-Entry "get-first-displayed-offset" accessor #f #f 48 59 48 67 ()}
        {Lisp-Entry "get-row" method (override) #f 56 20 56 27 ("nextmethod" "-" "get-row-from" "first-displayed-line" ">=" "first-displayed" "and" "if" "n")}
        {Lisp-Entry "call-with-v->line" method (override) #f 62 20 62 37 ("when" "get-next" "get-next~" "set!" "increase!" "<" "or" "and" "while" "row-spacing" "get-height" "get-height~" "bottom" "first-displayed-offset" "top" "0" "first-displayed-line" "line" "first-visible-row" "row" "+" "-" ">=" "displayed?" "let*" "first-displayed" "if" "proc" "scrolled" "v")}
        {Lisp-Entry "update-displayed" method (override) #f 87 20 87 36 ("first-displayed-offset" "first-displayed-line" "first-displayed" "row-spacing" "increase!" "set!" "not" "if" "get-next" "get-next~" "next" ">" "while" "get-height" "get-height~" "-" "bottom" "when" "v" "0" "fx" "<fx>" "line" "root-row" "first-visible-son" "first-visible-son~" "row" "let" "display-v")}
        {Lisp-Entry "follow" method (override) #f 106 20 106 26 ("update-displayed" "when" "cond" "succeeded?" "let" "1" "continuation-return" "not" "get-previous" "get-previous~" "<=" "return" "lambda" "continuation-capture" "follow-backward" "decrease!" "first-displayed-line" "get-next" "get-next~" "set!" "increase!" "begin" "<" "if" "first-displayed-offset" "-" "remaining" "row-spacing" "first-displayed" "get-height" "get-height~" "+" "height" "let*" "0" ">" "while" "follow-forward" "define" "v" "display-v")}}}})
"Entity"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "entity" "Entity.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.entity.Entity" module (protected) #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Entity" interface (undocumented) #f 71 24 71 30 ()
        {Lisp-Entry "get-factory" method (public virtual abstract) #f 74 35 74 46 ()}
        {Lisp-Entry "get-factories" method (public virtual abstract) #f 75 35 75 48 ()}
        {Lisp-Entry "get-presentation" method (public virtual abstract) #f 76 35 76 51 ()}
        {Lisp-Entry "set-presentation" method (public virtual abstract) #f 77 35 77 51 ("presentation" "controller")}
        {Lisp-Entry "can-cut-entity?" method (public virtual abstract) #f 78 35 78 50 ()}
        {Lisp-Entry "can-copy-entity?" method (public virtual abstract) #f 79 35 79 51 ()}
        {Lisp-Entry "can-paste-entity?" method (public virtual abstract) #f 80 35 80 52 ()}
        {Lisp-Entry "determine-paster" method (public virtual abstract) #f 81 35 81 51 ("rest")}
        {Lisp-Entry "can-rename-entity?" method (public virtual abstract) #f 82 35 82 53 ()}
        {Lisp-Entry "can-delete-entity?" method (public virtual abstract) #f 83 35 83 53 ()}
        {Lisp-Entry "can-relocate-entity?" method (public virtual abstract) #f 84 35 84 55 ()}
        {Lisp-Entry "can-view-properties?" method (public virtual abstract) #f 85 35 85 55 ()}
        {Lisp-Entry "get-categorized-properties" method (public virtual abstract) #f 86 35 86 61 ()}}}})
"Entity-Factory"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "entity" "Entity-Factory.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.entity.Entity-Factory" module (protected) #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Entity-Factory" class (undocumented) #f 52 20 52 34 ("Object")
        {Lisp-Entry "get-class" method (public virtual abstract) #f 55 35 55 44 ()}
        {Lisp-Entry "get-name-prohibited?" method (public virtual abstract) #f 56 35 56 55 ()}
        {Lisp-Entry "get-name-mandatory?" method (public virtual abstract) #f 57 35 57 54 ()}
        {Lisp-Entry "get-name-unicity?" method (public virtual abstract) #f 58 35 58 52 ()}
        {Lisp-Entry "presentation->name" method (public virtual abstract) #f 59 35 59 53 ("presentation")}
        {Lisp-Entry "get-factory-presentation" method (public virtual abstract) #f 60 35 60 59 ()}
        {Lisp-Entry "get-factory-image" method (public virtual abstract) #f 61 35 61 52 ()}}}})
"Environment"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Environment.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.library.utility.Environment" module (protected) #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Environment" class () #f 43 7 43 18 ("Environment-Provider" "Object")
        {Lisp-Entry "data" slot () #f 46 8 46 12 ()}
        {Lisp-Entry "get-data" accessor #f #f 46 23 46 31 ()}
        {Lisp-Entry "locator" slot () #f 47 8 47 15 ()}
        {Lisp-Entry "get-locator" accessor #f #f 47 23 47 31 ()}
        {Lisp-Entry "initialize" method (override) #f 50 20 50 30 ("locator~self" "self" "data~self" "set!" "nextmethod" "locator" "data")}
        {Lisp-Entry "print" method (override) #f 56 20 56 25 ("data" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "setup-context" method (override) #f 62 20 62 33 ("data" "setup-context" "setup-context~" "context")}
        {Lisp-Entry "get-reference" method (override) #f 66 20 66 33 ("locator" "symbol")}
        {Lisp-Entry "locate-reference" method (override) #f 70 20 70 36 ("resolve-runtime-reference" "and" "locator" "reference" "let" "symbol")}
        {Lisp-Entry "require-reference" method (override) #f 75 20 75 37 ("error" "locate-reference" "or" "symbol")}}}})
"Environment-Provider"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Environment-Provider.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.library.utility.Environment-Provider" module (protected) #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Environment-Provider" interface () #f 40 11 40 31 ()
        {Lisp-Entry "locate-reference" method (public virtual abstract) #f 43 35 43 51 ("symbol")}
        {Lisp-Entry "require-reference" method (public virtual abstract) #f 44 35 44 52 ("symbol")}
        {Lisp-Entry "get-reference" method (public virtual abstract) #f 45 35 45 48 ("symbol")}}}})
"Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "event" "Event.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.event.Event" module (protected) #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system")}
      {Lisp-Entry "Event" class () #f 43 7 43 12 ("Object")
        {Lisp-Entry "kind" slot () #f 46 8 46 12 ()}
        {Lisp-Entry "get-kind" accessor #f #f 46 26 46 34 ()}
        {Lisp-Entry "sender" slot () #f 47 8 47 14 ()}
        {Lisp-Entry "get-sender" accessor #f #f 47 26 47 34 ()}
        {Lisp-Entry "properties" slot () #f 48 8 48 18 ()}
        {Lisp-Entry "get-properties" accessor #f #f 48 26 48 34 ()}
        {Lisp-Entry "modifiers" slot () #f 49 8 49 17 ()}
        {Lisp-Entry "get-modifiers" accessor #f #f 49 26 49 34 ()}
        {Lisp-Entry "initialize" method (override) #f 52 20 52 30 ("modifiers-keys" "modifiers" "modifiers~self" "properties~self" "sender~self" "self" "kind~self" "set!" "nextmethod" "properties" "sender" "kind")}
        {Lisp-Entry "print" method (override) #f 60 20 60 25 ("properties" "not-null?" "kind" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "get-property" method (public) #f 73 18 73 30 ("properties" "getf" "keyword")}
        {Lisp-Entry "get-shift?" method (public) #f 77 18 77 28 ("modifiers" "shift-key?")}
        {Lisp-Entry "get-control?" method (public) #f 81 18 81 30 ("modifiers" "control-key?")}
        {Lisp-Entry "get-alt?" method (public) #f 85 18 85 26 ("modifiers" "alt-key?")}}}})
"Event-Consumer"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "consumer" "Event-Consumer.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.consumer.Event-Consumer" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Event-Consumer" interface (undocumented) #f 43 24 43 38 ("Consumer")
        {Lisp-Entry "get-event-consumer" method (public virtual abstract) #f 46 35 46 53 ()}
        {Lisp-Entry "set-event-consumer" method (public virtual abstract) #f 47 35 47 53 ("consumer")}
        {Lisp-Entry "deliver-event" method (public virtual abstract) #f 48 35 48 48 ("evt" "proc" "target" "handler")}}}})
"Event-Handler"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "handler" "Event-Handler.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.handler.Event-Handler" module (protected) #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Event-Handler" class () #f 43 7 43 20 ("Handler")
        {Lisp-Entry "properties" slot () #f 46 8 46 18 ()}
        {Lisp-Entry "get-properties" accessor #f #f 46 26 46 34 ()}
        {Lisp-Entry "initialize" method (override) #f 49 20 49 30 ("self" "properties~self" "set!" "nextmethod" "apply" "others" "properties" "bind-keywords" "rest")}
        {Lisp-Entry "print" method (override) #f 55 20 55 25 ("properties" "null?" "if" "method-name" "target-name" "target" "or" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "get-property" method (public) #f 70 18 70 30 ("properties" "getf" "keyword")}
        {Lisp-Entry "invoke" method (override) #f 83 20 83 26 ("error" "invoke-target" "if" "find-target" "or" "target" "else" "method-name" "form" "locate-reference" "locate-reference~" "handler" "let" ":reference" "target-name" "eq?" "execute" "cond" "action" "action:" "event" "sender")}
        {Lisp-Entry "invoke-target" method (public) #f 96 18 96 31 ("else" "deliver-event" "deliver-event~" "get-event-consumer" "get-event-consumer~" "consumer" "lambda" "Event-Consumer" "is?" "error" "not" "cond" "method-name" "class-of" "dispatch" "proc" "let" "self" "hook-event" "thunk" "call-hook" "define" "action" "action:" "event" "target")}}}})
"Explore-Error"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "exception" "Explore-Error.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.exception.Explore-Error" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Explore-Error" class (undocumented) #f 40 20 40 33 ("Error")
        {Lisp-Entry "source" slot () #f 43 8 43 14 ()}
        {Lisp-Entry "get-source" accessor #f #f 43 22 43 30 ()}
        {Lisp-Entry "start" slot () #f 44 8 44 13 ()}
        {Lisp-Entry "get-start" accessor #f #f 44 22 44 30 ()}
        {Lisp-Entry "end" slot () #f 45 8 45 11 ()}
        {Lisp-Entry "get-end" accessor #f #f 45 22 45 30 ()}
        {Lisp-Entry "initialize" method (override) #f 48 20 48 30 ("end~self" "start~self" "self" "source~self" "set!" "nextmethod" "apply" "others" "end" "start" "bind-keywords" "rest" "source")}
        {Lisp-Entry "get-range" method (public) #f 61 18 61 27 ("end" "start" "Range" "new")}}}})
"Favorite"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "favorite" "Favorite.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.favorite.Favorite" module (protected) #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Favorite" class (undocumented) #f 43 20 43 28 ("initialize" "Component")
        {Lisp-Entry "title" property () #f 46 12 46 17 ()}
        {Lisp-Entry "get-title" accessor #f #f 46 42 46 50 ()}
        {Lisp-Entry "set-title" accessor #f #f 46 42 46 50 ()}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 54 25 54 45 ("Favorite-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 63 11 63 17 ()
        {Lisp-Entry "import" anonymous #f #f 66 1 66 7 ("jazz.jml" "jazz.designer")}
        {Lisp-Entry "Favorite-Descriptor" class () #f 70 7 70 26 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 73 3 73 7 ("domain" "String-Domain" "<String-Domain>" "title" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "Image-Resource" "image:" "install" "<install>")}
          {Lisp-Entry "component-display-property?" method (override) #f 80 20 80 47 ("visible?" "children" "before" "name-info" "field-name" "memq?" "not" "property" "component")}}}}})
"Favorite-Clipboard"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "favorite" "Favorite-Clipboard.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.favorite.Favorite-Clipboard" module (protected) #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.clipboard" "jazz.system" "jazz.library")}
      {Lisp-Entry "Favorite-Clipboard" class () #f 45 7 45 25 ("initialize" "Favorite")
        {Lisp-Entry "string" property () #f 48 12 48 18 ()}
        {Lisp-Entry "get-string" accessor #f #f 48 43 48 51 ()}
        {Lisp-Entry "set-string" accessor #f #f 48 43 48 51 ()}
        {Lisp-Entry "launch" method (override) #f 56 20 56 26 ("user-message" "set-clipboard-text" "string" "when")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 67 25 67 45 ("Favorite-Clipboard-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 76 11 76 17 ()
        {Lisp-Entry "import" anonymous #f #f 79 1 79 7 ("jazz.jml" "jazz.designer")}
        {Lisp-Entry "Favorite-Clipboard-Descriptor" class () #f 83 7 83 36 ("Favorite-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 86 3 86 7 ("Image-Resource" "image:" "install" "<install>")}}}}})
"Favorite-Definition"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "favorite" "Favorite-Definition.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.favorite.Favorite-Definition" module (protected) #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system" "jazz.library")}
      {Lisp-Entry "Favorite-Definition" class () #f 44 7 44 26 ("initialize" "Favorite")
        {Lisp-Entry "definition" property () #f 47 12 47 22 ()}
        {Lisp-Entry "get-definition" accessor #f #f 47 47 47 55 ()}
        {Lisp-Entry "set-definition" accessor #f #f 47 47 47 55 ()}
        {Lisp-Entry "launch" method (override) #f 55 20 55 26 ("get-application" "edit-definitions" "edit-definitions~" "definition" "when")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 65 25 65 45 ("Favorite-Definition-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 74 11 74 17 ()
        {Lisp-Entry "import" anonymous #f #f 77 1 77 7 ("jazz.jml" "jazz.designer")}
        {Lisp-Entry "Favorite-Definition-Descriptor" class () #f 81 7 81 37 ("Favorite-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 84 3 84 7 ("Image-Resource" "image:" "install" "<install>")}}}}})
"Favorite-Directory"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "favorite" "Favorite-Directory.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.favorite.Favorite-Directory" module (protected) #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system" "jazz.library" "jazz.io")}
      {Lisp-Entry "Favorite-Directory" class () #f 45 7 45 25 ("initialize" "Favorite")
        {Lisp-Entry "directory" property () #f 48 12 48 21 ()}
        {Lisp-Entry "get-directory" accessor #f #f 48 46 48 54 ()}
        {Lisp-Entry "set-directory" accessor #f #f 48 46 48 54 ()}
        {Lisp-Entry "launch" method (override) #f 56 20 56 26 ("parse" "parse~" "user-message" "set-current-directory" "directory" "when")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 67 25 67 45 ("Favorite-Directory-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 76 11 76 17 ()
        {Lisp-Entry "import" anonymous #f #f 79 1 79 7 ("jazz.jml" "jazz.designer")}
        {Lisp-Entry "Favorite-Directory-Descriptor" class () #f 83 7 83 36 ("Favorite-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 86 3 86 7 ("domain" "Directory-Domain" "<Directory-Domain>" "title:" "directory" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "Image-Resource" "image:" "install" "<install>")}}}}})
"Favorite-File"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "favorite" "Favorite-File.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.favorite.Favorite-File" module (protected) #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system" "jazz.library")}
      {Lisp-Entry "Favorite-File" class () #f 44 7 44 20 ("initialize" "Favorite")
        {Lisp-Entry "file" property () #f 47 12 47 16 ()}
        {Lisp-Entry "get-file" accessor #f #f 47 41 47 49 ()}
        {Lisp-Entry "set-file" accessor #f #f 47 41 47 49 ()}
        {Lisp-Entry "launch" method (override) #f 55 20 55 26 ("get-application" "edit-document" "edit-document~" "file" "when")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 65 25 65 45 ("Favorite-File-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 74 11 74 17 ()
        {Lisp-Entry "import" anonymous #f #f 77 1 77 7 ("jazz.jml" "jazz.designer")}
        {Lisp-Entry "Favorite-File-Descriptor" class () #f 81 7 81 31 ("Favorite-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 84 3 84 7 ("domain" "File-Domain" "<File-Domain>" "file" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "Image-Resource" "image:" "title:" "install" "<install>")}}}}})
"Favorite-Handler"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "favorite" "Favorite-Handler.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.favorite.Favorite-Handler" module (protected) #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}
      {Lisp-Entry "Favorite-Handler" class () #f 44 7 44 23 ("initialize" "Favorite")
        {Lisp-Entry "handler" property () #f 47 12 47 19 ()}
        {Lisp-Entry "get-handler" accessor #f #f 47 44 47 52 ()}
        {Lisp-Entry "set-handler" accessor #f #f 47 44 47 52 ()}
        {Lisp-Entry "launch" method (override) #f 55 20 55 26 ("self" "notify-handler" "handler" "when")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 65 25 65 45 ("Favorite-Handler-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 74 11 74 17 ()
        {Lisp-Entry "import" anonymous #f #f 77 1 77 7 ("jazz.jml" "jazz.designer")}
        {Lisp-Entry "Favorite-Handler-Descriptor" class () #f 81 7 81 34 ("Favorite-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 84 3 84 7 ("Image-Resource" "image:" "install" "<install>")}}}}})
"Favorite-Launch"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "favorite" "Favorite-Launch.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.favorite.Favorite-Launch" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Favorite-Launch" class () #f 43 7 43 22 ("initialize" "Favorite")
        {Lisp-Entry "file" property () #f 46 12 46 16 ()}
        {Lisp-Entry "get-file" accessor #f #f 46 41 46 49 ()}
        {Lisp-Entry "set-file" accessor #f #f 46 41 46 49 ()}
        {Lisp-Entry "launch" method (override) #f 54 20 54 26 ("shell-execute" "file" "when" "unimplemented")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 66 25 66 45 ("Favorite-Launch-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 75 11 75 17 ()
        {Lisp-Entry "import" anonymous #f #f 78 1 78 7 ("jazz.jml" "jazz.designer")}
        {Lisp-Entry "Favorite-Launch-Descriptor" class () #f 82 7 82 33 ("Favorite-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 85 3 85 7 ("domain" "File-Domain" "<File-Domain>" "title:" "file" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "Image-Resource" "image:" "install" "<install>")}}}}})
"Favorite-Search"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "favorite" "Favorite-Search.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.favorite.Favorite-Search" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system" "jazz.library")}
      {Lisp-Entry "Favorite-Search" class () #f 44 7 44 22 ("initialize" "Favorite")
        {Lisp-Entry "directories" property () #f 47 12 47 23 ()}
        {Lisp-Entry "get-directories" accessor #f #f 47 49 47 57 ()}
        {Lisp-Entry "set-directories" accessor #f #f 47 49 47 57 ()}
        {Lisp-Entry "extensions" property () #f 48 12 48 22 ()}
        {Lisp-Entry "get-extensions" accessor #f #f 48 49 48 57 ()}
        {Lisp-Entry "set-extensions" accessor #f #f 48 49 48 57 ()}
        {Lisp-Entry "launch" method (override) #f 56 20 56 26 ("select-search" "select-search~" "set-visible?" "set-visible?~" "bring-to-front" "bring-to-front~" "extensions" "get-list" "get-list~" "dir" "lambda" "map" "format" "set-string-content" "set-string-content~" "directories-search" "search" "let" "directories" "tab" "locate" "locate~" "set-selection-name" "set-selection-name~" "get-player" "get-player~" "player" "get-search-manager" "get-search-manager~" "manager" "get-application" "appl" "let*")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 74 25 74 45 ("Favorite-Search-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 83 11 83 17 ()
        {Lisp-Entry "import" anonymous #f #f 86 1 86 7 ("jazz.jml" "jazz.designer")}
        {Lisp-Entry "Favorite-Search-Descriptor" class () #f 90 7 90 33 ("Favorite-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 93 3 93 7 ("extensions" "title:" "directories" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "Image-Resource" "image:" "install" "<install>")}}}}})
"Favorites"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "favorite" "Favorites.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.favorite.Favorites" module (protected) #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Favorites" class () #f 43 7 43 16 ("Group")
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 51 25 51 45 ("Favorites-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 60 11 60 17 ()
        {Lisp-Entry "import" anonymous #f #f 63 1 63 7 ("jazz.jml" "jazz.designer")}
        {Lisp-Entry "Favorites-Descriptor" class () #f 67 7 67 27 ("Group-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 70 3 70 7 ("categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "Image-Resource" "image:" "title:" "install" "<install>")}}}}})
"Favorites-Adder"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "favorite" "Favorites-Adder.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.favorite.Favorites-Adder" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Favorites-Adder" class () #f 46 7 46 22 ("set-default-root" "get-default-root" "set-default-title" "get-default-title" "initialize" "View")
        {Lisp-Entry "default-title" property () #f 49 12 49 25 ()}
        {Lisp-Entry "default-root" property () #f 50 12 50 24 ()}
        {Lisp-Entry "form" anonymous #f #f 53 3 53 7 ("39" "cancel" "default?:" "action-handler:" "24" "80" "9" "290" "ok" "Push-Button" "<Push-Button>" "tree" "Request-Tree" "<Request-Tree>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "172" "191" "38" "43" "on-cancel" "escape-press-handler:" "on-ok" ":host" "Event-Handler" "return-press-handler:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "title" "name:" "Text-View" "<Text-View>" "edge" "border-type:" "19" "204" "11" "70" "Border-View" "<Border-View>" "Label" "Font" "font:" "16" "55" "15" "10" "Point" "position:" "title:" "Label-View" "<Label-View>" "218" "382" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) #f 67 20 67 26 ("auto-select-first" "auto-select-first~" "locate" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "dialog-class" method (meta) #f 79 16 79 28 ("Favorites-Adder-Dialog")}
        {Lisp-Entry "meta" class () #f 84 9 84 13 ("Dialog" "extends" "Favorites-Adder-Dialog")
          {Lisp-Entry "form" anonymous #f #f 87 5 87 9 ("218" "382" "Dimension" "size:" "300" "450" "Point" "position:" "title:" "install" "<install>")}
          {Lisp-Entry "focus-gain" method () #f 91 13 91 23 ("title" "guest" "locate" "locate~" "acquire-focus" "acquire-focus~" "nextmethod")}
          {Lisp-Entry "get-modal-result" method () #f 96 13 96 29 ("/=" "essay" "values" "tree" "selected-component" "selected-component~" "favorite" "guest" "locate" "locate~" "get-string-content" "get-string-content~" "title" "let")}}
        {Lisp-Entry "get-default-title" method (public) #f 108 18 108 35 ("default-title")}
        {Lisp-Entry "set-default-title" method (public) #f 112 18 112 35 ("locate" "set-string-content" "set-string-content~" "set!" "default-title" "/=" "when" "title")}
        {Lisp-Entry "get-default-root" method (public) #f 118 18 118 34 ("default-root")}
        {Lisp-Entry "set-default-root" method (public) #f 122 18 122 34 ("set-client" "set-client~" "locate" "tree" "let" "set!" "default-root" "neq?" "when" "root")}}
      {Lisp-Entry "Request-Tree" class () #f 134 7 134 19 ("Favorites-Tree")
        {Lisp-Entry "form" anonymous #f #f 137 3 137 7 ("on-double-click" ":form" "Event-Handler" "double-click-handler:" "reorderable?:" "draggable?:" "install" "<install>")}
        {Lisp-Entry "on-double-click" method () #f 141 11 141 26 ("get-host" "on-ok" "on-ok~" "evt")}}}})
"Favorites-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "favorite" "Favorites-Editor.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.favorite.Favorites-Editor" module (protected) #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Favorites-Editor" class () #f 44 7 44 23 ("Descendants-Editor")
        {Lisp-Entry "form-model" method (override) #f 47 20 47 30 ("nextmethod" "else" "Favorites-Tree" "tree" "get-name" "get-name~" "case" "form")}}}})
"Favorites-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "favorite" "Favorites-Manager.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.favorite.Favorites-Manager" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.dialog" "jazz.ui" "jazz.system.process" "jazz.system" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.io" "jazz.designer.menu" "jazz.designer")}
      {Lisp-Entry "Favorites-File" definition () #f 58 12 58 26 ("Profile" "File")}
      {Lisp-Entry "read-favorites" definition () #f 62 13 62 27 ("err" "continue-handler:" "install-context" "install-context~" "read-form" "instantiate" "instantiate~" "favorites" "get-process" "process" "exists?" "exists?~" "when" "Favorites-File" "file" "let" "lambda" "with-safe-execution")}
      {Lisp-Entry "Favorites-Manager" class () #f 76 7 76 24 ("Exit-Listener" "Component-Editor")
        {Lisp-Entry "form" anonymous #f #f 79 3 79 7 ("291" "width:" "title:" "descendant" "highlight-edited?:" "show-header?:" "tree" "tool" "style:" "scroller" "!" "<!>" "center" "location:" "descendants" "Favorites-Editor" "<Favorites-Editor>" "on-reload-favorites" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "reload" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "400" "650" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 89 25 89 38 ("favorites-manager" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 98 25 98 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 102 25 102 35 ()}
        {Lisp-Entry "get-tools-view" method (override) #f 111 20 111 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) #f 115 20 115 33 ("acquire-focus" "acquire-focus~" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" method () #f 125 11 125 19 ("tree" "descendants" "locate")}
        {Lisp-Entry "new-document-controller" method (override) #f 134 20 134 43 ("self" "Favorites-Manager-Controller" "new")}
        {Lisp-Entry "install" method (override) #f 143 20 143 27 ("read-favorites" "set-client" "get-application" "add-exit-listener" "add-exit-listener~" "self" "locate" "set-editor" "set-editor~" "header" "descendants" "locate-component" "set-shown?" "set-shown?~" "nextmethod" "rest")}
        {Lisp-Entry "resize-center" method () #f 156 11 156 24 ("descendants" "locate" "size-figure" "size-figure~" "dv" "dh")}
        {Lisp-Entry "on-reload-favorites" method (public) #f 160 18 160 37 ("read-favorites" "set-client" "evt")}
        {Lisp-Entry "on-launch" method (public) #f 164 18 164 27 ("launch-selection" "evt")}
        {Lisp-Entry "prepare-exit" method (override) #f 168 20 168 32 ("save" "designer" "get-form" "get-form~" "get-origin" "get-origin~" "file?" "get-modified?" "and" "when")}
        {Lisp-Entry "launch-selection" method (public) #f 178 18 178 34 ("launch" "launch~" "bell" "null?" "if" "selected-component" "selected-component~" "favorite" "get-tree" "tree" "let*")}
        {Lisp-Entry "add-to-favorites" method (public) #f 191 18 191 34 ("value" "property" "lambda" "for-each-property" "set-property" "set-property~" "designer" "add-child" "add-child~" "title:" "new" "apply" "favorite" "let" "when" "client" "default-root:" "default-title:" "Favorites-Adder" "get-modal" "parent" "receive" "initargs" "title" "class")}
        {Lisp-Entry "import-favorites" method () #f 207 11 207 27 ("with-update-locked" "with-update-locked~" "recursive?:" "directories?:" "bell" "set-property" "set-property~" "designer" "add-child" "add-child~" "visible?:" "Group" "new" "set" "directory?" "if" "title" "let" "get-base" "get-base~" "user-message" "pathname" "lambda" "iterate-directory" "iterate-directory~" "iter" "define" "bad" "title:" "choose-directory" "directory" "selected-component" "selected-component~" "component" "get-tree" "tree" "let*")}
        {Lisp-Entry "extract-url" method () #f 232 11 232 22 ("cdr" "set!" "0" "subseq" "=" "4" "length" ">=" "when" "car" "line" "not" "not-null?" "and" "while" "found" "load-lines" "load-lines~" "lines" "let" "file")}
        {Lisp-Entry "new-favorites-menu" method (public) #f 248 18 248 36 ("layout-menu" "layout-menu~" "cleanup-separators" "cleanup-separators~" "import-favorites" "import-separator" "Browser-View" "in-manifest?" "not" "end-open-group" "open" "locate~" "set-visible?" "set-visible?~" "Favorite" "car" "is-not?" "1" "length" "/=" "or" "when" "update-component-menu" "selected-components" "selected-components~" "components" "descendants" "locate" "get-tree" "get-tree~" "tree" "self" "client:" "Favorites-Menu" "new" "menu" "let*")}}
      {Lisp-Entry "Favorites-Manager-Controller" class () #f 270 7 270 35 ("Component-Editor-Controller")
        {Lisp-Entry "document-status" method (override) #f 273 20 273 35 ()}}
      {Lisp-Entry "Favorites-Menu" class () #f 282 7 282 21 ("Component-Menu")
        {Lisp-Entry "form" anonymous #f #f 285 3 285 7 ("end-open-group" "Separator-Item" "<Separator-Item>" "on-launch" ":form" "Event-Handler" "action-handler:" "default?:" "add-item" "before:" "title:" "open" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}
        {Lisp-Entry "on-launch" method () #f 291 11 291 20 ("client" "launch-selection" "launch-selection~" "evt")}
        {Lisp-Entry "on-import-favorites" method () #f 295 11 295 30 ("import-favorites" "evt")}
        {Lisp-Entry "on-properties" method () #f 300 11 300 24 ("show-properties" "evt")}}}})
"Favorites-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "favorite" "Favorites-Tree.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.favorite.Favorites-Tree" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Favorites-Tree" class () #f 45 7 45 21 ("Descendants-Tree")
        {Lisp-Entry "form" anonymous #f #f 48 3 48 7 ("show-traits?:" "multiple-selection?:" "auto-expand/collapse?:" "reorderable?:" "draggable?:" ":images" "portfolio:" "install" "<install>")}
        {Lisp-Entry "context-menu" method (override) #f 52 20 52 32 ("new-favorites-menu" "new-favorites-menu~" "track-popup-menu" "lambda" "with-context-click" "Favorites-Manager" "is?" "when" "get-guest" "get-guest~" "guest" "get-host" "host" "let*" "pos")}
        {Lisp-Entry "update-selection" method (override) #f 61 20 61 36 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" method (override) #f 65 20 65 29 ("collapsed" "expanded" "1" "<" "if" "level" "update?" "component")}
        {Lisp-Entry "double-click" method (override) #f 71 20 71 32 ("get-host" "get-guest" "get-guest~" "launch-selection" "launch-selection~" "nextmethod" "pos")}
        {Lisp-Entry "return-press" method (override) #f 76 20 76 32 ("nextmethod" "else" "get-host" "get-guest" "get-guest~" "launch-selection" "launch-selection~" "case" "key")}}}})
"Form"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "component" "Form.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.component.Form" module (protected) #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.jml")}
      {Lisp-Entry "Form" class () #f 61 7 61 11 ("Environment-Provider" "JML-Element")
        {Lisp-Entry "data" slot () #f 64 8 64 12 ()}
        {Lisp-Entry "get-data" accessor #f #f 64 32 64 40 ()}
        {Lisp-Entry "set-data" accessor #f #f 64 32 64 40 ()}
        {Lisp-Entry "origin" slot () #f 65 8 65 14 ()}
        {Lisp-Entry "get-origin" accessor #f #f 65 32 65 40 ()}
        {Lisp-Entry "set-origin" accessor #f #f 65 32 65 40 ()}
        {Lisp-Entry "context" slot () #f 66 8 66 15 ()}
        {Lisp-Entry "get-context" accessor #f #f 66 32 66 40 ()}
        {Lisp-Entry "set-context" accessor #f #f 66 32 66 40 ()}
        {Lisp-Entry "action" slot () #f 67 8 67 14 ()}
        {Lisp-Entry "get-action" accessor #f #f 67 32 67 40 ()}
        {Lisp-Entry "set-action" accessor #f #f 67 32 67 40 ()}
        {Lisp-Entry "model" slot () #f 68 8 68 13 ()}
        {Lisp-Entry "get-model" accessor #f #f 68 32 68 40 ()}
        {Lisp-Entry "set-model" accessor #f #f 68 32 68 40 ()}
        {Lisp-Entry "locator" slot () #f 69 8 69 15 ()}
        {Lisp-Entry "get-locator" accessor #f #f 69 32 69 40 ()}
        {Lisp-Entry "set-locator" accessor #f #f 69 32 69 40 ()}
        {Lisp-Entry "name" slot () #f 70 8 70 12 ()}
        {Lisp-Entry "get-name" accessor #f #f 70 32 70 40 ()}
        {Lisp-Entry "set-name" accessor #f #f 70 32 70 40 ()}
        {Lisp-Entry "tag-symbolic?" slot () #f 71 8 71 21 ()}
        {Lisp-Entry "get-tag-symbolic?" accessor #f #f 71 32 71 40 ()}
        {Lisp-Entry "set-tag-symbolic?" accessor #f #f 71 32 71 40 ()}
        {Lisp-Entry "tag-reference" slot () #f 72 8 72 21 ()}
        {Lisp-Entry "get-tag-reference" accessor #f #f 72 32 72 40 ()}
        {Lisp-Entry "set-tag-reference" accessor #f #f 72 32 72 40 ()}
        {Lisp-Entry "initialize" method (override) #f 80 20 80 30 ("when" "children~self" "properties~self" "tag-reference~self" "tag-symbolic?~self" "name~self" "locator~self" "model~self" "action~self" "context~self" "origin~self" "self" "data~self" "nextmethod" "cddr" "set!" "car" "keyword->symbol" "set-car!" "not-null?" "while" "lst" "canonicalize-properties" "define" "children" "children:" "properties" "properties:" "tag-reference" "tag-reference:" "tag-symbolic?" "tag-symbolic?:" "name" "name:" "locator" "locator:" "model" "model:" "action" "action:" "context" "context:" "origin" "origin:" "data" "data:" "textual?" "textual?:")}
        {Lisp-Entry "copy-object" method (override) #f 113 20 113 31 ("children" "subcopy" "children:" "properties" "properties:" "tag-reference" "tag-reference:" "tag-symbolic?" "tag-symbolic?:" "name" "name:" "locator" "locator:" "model" "model:" "action" "action:" "context" "context:" "origin" "origin:" "copy" "data" "and" "data:" "textual?:" "Form" "new" "deep?")}
        {Lisp-Entry "print" method (override) #f 117 20 117 25 ("length" "children" "keywordize-properties" "properties" "name" "model" "if" "action" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "setup-context" method (override) #f 133 20 133 33 ("children" "child" "for-each" "properties" "value" "name" "lambda" "for-each-property" "tag-reference" "setup-context" "setup-context~" "context" "set!" "ctx")}
        {Lisp-Entry "resolve-model" method (public) #f 150 18 150 31 ("model" "context" "require-reference" "require-reference~")}
        {Lisp-Entry "locate-reference" method (override) #f 154 20 154 36 ("resolve-runtime-reference" "and" "locator" "reference" "let" "symbol")}
        {Lisp-Entry "require-reference" method (override) #f 159 20 159 37 ("error" "locate-reference" "or" "symbol")}
        {Lisp-Entry "get-reference" method (override) #f 164 20 164 33 ("locator" "symbol")}
        {Lisp-Entry "child" method (public) #f 173 18 173 23 ("error" "find-child" "or" "name")}
        {Lisp-Entry "find-child" method (public) #f 178 18 178 28 ("get-name" "get-name~" "equal?" "child" "lambda" "find-by" "name")}
        {Lisp-Entry "find-name" method (override) #f 183 20 183 29 ("find-child" "name")}
        {Lisp-Entry "find-path" method (public) #f 187 18 187 27 ("cdr" "find-path" "find-path~" "and" "car" "find-child" "child" "let" "self" "null?" "if" "path")}
        {Lisp-Entry "find-type" method (public) #f 194 18 194 27 ("get-model" "get-model~" "eq?" "child" "lambda" "find-by" "type")}
        {Lisp-Entry "find-subtype" method (public) #f 200 18 200 30 ("subtype?" "resolve-model" "resolve-model~" "get-model" "get-model~" "and" "class" "let" "child" "lambda" "find-by" "type")}
        {Lisp-Entry "add-child" method (override) #f 207 20 207 29 ("cons" "children" "set!" "child")}
        {Lisp-Entry "add-child-at" method (public) #f 211 18 211 30 ("insert!" "children" "set!" "rank" "child")}
        {Lisp-Entry "append-child" method (public) #f 215 18 215 30 ("list" "append!" "children" "set!" "child")}
        {Lisp-Entry "send-child-before" method (public) #f 219 18 219 35 ("insert!" "set!" "error" "find" "or" "and" "rank" "children" "remove!" "removed" "let*" "target" "child")}
        {Lisp-Entry "sort-children" method (public) #f 225 18 225 31 ("sort" "children" "set!" "get-name" "get-name~" "key" "key:" "test")}
        {Lisp-Entry "get-presentation" method (public) #f 235 18 235 34 ("resolve-model" "get-class-presentation" "get-class-presentation~" "title" "get-property" "or")}
        {Lisp-Entry "remember-creation" method (public) #f 245 18 245 35 ("children:" "properties:" "component:" "remove" "action:" "Restore-Form" "new" "cons" "children" "set!" "component" "unused")}
        {Lisp-Entry "remember-reference" method (public) #f 249 18 249 36 ("cons" "children" "set!" "children:" "properties:" "name:" "model:" "modify" "action:" "Restore-Form" "new" "form" "let" "name" "unused")}
        {Lisp-Entry "remember-property" method (public) #f 255 18 255 35 ("set-property" "read-property" "actual-value" "let" "property" "component")}
        {Lisp-Entry "instantiate" method (public) #f 265 18 265 29 ("name~self" "or" "name:" "creator:" "self" "form:" "new" "apply" "resolve-model" "model" "let" "others" "name" "bind-keywords" "rest")}
        {Lisp-Entry "instantiate-component" method (public) #f 271 18 271 39 ("name" "name:" "creator:" "new" "apply" "resolve-model" "model" "let" "rest")}
        {Lisp-Entry "get-parts" method (public) #f 281 18 281 27 ("get-children" "get-properties" "keywordize-properties" "get-name" "get-model" "get-action" "values")}
        {Lisp-Entry "get-base-traits-names" method (public) #f 295 18 295 39 ("listify" "and" "base-traits:" "base-traits" "properties" "getf" "or" "names" "let")}
        {Lisp-Entry "get-traits" method (public) #f 301 18 301 28 ("get-base-traits-names" "or" "resolve-trait" "trait" "lambda" "map" "context")}
        {Lisp-Entry "get-child-location" method (override) #f 312 20 312 38 ("children" "get-rank" "properties" "length" "tag-reference" "tag-symbolic?" "0" "2" "name" "if" "1" "+" "list" "child")}}}})
"Formatter"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "factory" "Formatter.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.factory.Formatter" module (protected) #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Formatter" class (undocumented) #f 40 20 40 29 ("Object")
        {Lisp-Entry "format-directive" method (public virtual) #f 43 26 43 42 ("directive" "output" "formatting")}}}})
"Group"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "group" "Group.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.library.group.Group" module (protected) #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.designer" "jazz.jml")}
      {Lisp-Entry "Group" class (undocumented) #f 45 20 45 25 ("explicit" "initialize" "Component")
        {Lisp-Entry "title" property () #f 48 12 48 17 ()}
        {Lisp-Entry "get-title" accessor #f #f 48 45 48 53 ()}
        {Lisp-Entry "set-title" accessor #f #f 48 45 48 53 ()}
        {Lisp-Entry "icon" property () #f 49 12 49 16 ()}
        {Lisp-Entry "get-icon" accessor #f #f 49 45 49 53 ()}
        {Lisp-Entry "set-icon" accessor #f #f 49 45 49 53 ()}
        {Lisp-Entry "classes" property () #f 50 12 50 19 ()}
        {Lisp-Entry "get-classes" accessor #f #f 50 45 50 53 ()}
        {Lisp-Entry "set-classes" accessor #f #f 50 45 50 53 ()}
        {Lisp-Entry "sort?" property () #f 51 12 51 17 ()}
        {Lisp-Entry "form" anonymous #f #f 54 3 54 7 ("title:" "install" "<install>")}
        {Lisp-Entry "print" method (override) #f 58 20 58 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-sort?" method (public) #f 70 18 70 27 ("sort?")}
        {Lisp-Entry "set-sort?" method (public) #f 74 18 74 27 ("designers" "descendants" "self" "process-refresh" "process-refresh~" "designer" "lambda" "for-each" "set!" "sort?" "neq?" "when" "value")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 87 25 87 45 ("Group-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 96 11 96 17 ()
        {Lisp-Entry "import" anonymous #f #f 99 1 99 7 ("jazz.designer")}
        {Lisp-Entry "Group-Descriptor" class () #f 102 7 102 23 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 105 3 105 7 ("Boolean-Domain" "<Boolean-Domain>" "domain" "Classes-Domain" "<Classes-Domain>" "classes" "title" "name:" "Property-Descriptor" "<Property-Descriptor>" "sort?" "name-info" "class-info" "categorized:" ">" "<properties" "<properties~>" "indexable?:" "Image-Resource" "image:" "title:" "install" "<install>")}
          {Lisp-Entry "component-get-component-image" method (override) #f 115 20 115 49 ("nextmethod" "get-icon" "get-icon~" "or" "component")}
          {Lisp-Entry "component-get-custom-card" method (override) #f 119 20 119 45 ("Group-Card" "component")}
          {Lisp-Entry "component-sort-components?" method (override) #f 123 20 123 46 ("get-sort?" "get-sort?~" "component")}
          {Lisp-Entry "component-display-property?" method (override) #f 127 20 127 47 ("title" "visible?" "children" "before" "name-info" "class-info" "field-name" "memq?" "not" "property" "component")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) #f 136 20 136 61 ("get-component-classes" "resolve-reference" "resolve-reference~" "when" "model" "lambda" "map" "component")}
          {Lisp-Entry "component-get-classes" method (override) #f 145 20 145 41 ("get-component-classes" "get-component-classes~" "get-parent" "get-parent~" "when" "get-classes" "get-classes~" "or" "component")}}
        {Lisp-Entry "Classes-Domain" class () #f 156 7 156 21 ("List-Domain")
          {Lisp-Entry "finish" method (override) #f 159 20 159 26 ("Class-Domain" "new" "domain" "set!" "nextmethod" "rest")}}
        {Lisp-Entry "Class-Domain" class () #f 169 7 169 19 ("Enumeration-Domain")
          {Lisp-Entry "finish" method (override) #f 172 20 172 26 ("Recipe" "Apartment" "Password" "Person" "Organism" "Company" "Anniversary" "Calendar-Event" "Task" "Note" "Group" "set-choices" "nextmethod" "rest")}}}}})
"Handler"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "handler" "Handler.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.handler.Handler" module (protected) #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system" "jazz.library")}
      {Lisp-Entry "Handler" class () #f 44 7 44 14 ("Object")
        {Lisp-Entry "execute" slot () #f 47 8 47 15 ()}
        {Lisp-Entry "get-execute" accessor #f #f 47 27 47 35 ()}
        {Lisp-Entry "target" slot () #f 48 8 48 14 ()}
        {Lisp-Entry "get-target" accessor #f #f 48 27 48 35 ()}
        {Lisp-Entry "target-name" slot () #f 49 8 49 19 ()}
        {Lisp-Entry "get-target-name" accessor #f #f 49 27 49 35 ()}
        {Lisp-Entry "method-name" slot () #f 50 8 50 19 ()}
        {Lisp-Entry "get-method-name" accessor #f #f 50 27 50 35 ()}
        {Lisp-Entry "form" slot () #f 51 8 51 12 ()}
        {Lisp-Entry "get-form" accessor #f #f 51 27 51 35 ()}
        {Lisp-Entry "initialize" method (override) #f 54 20 54 30 ("method-name~self" "target-name~self" "target~self" "self" "execute~self" "set!" "nextmethod" "method-name" "method-name:" "target-name" "target-name:" "target" "target:" "execute" "execute:")}
        {Lisp-Entry "print" method (override) #f 62 20 62 25 ("method-name" "target-name" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "walk-references" method (override) #f 74 20 74 35 ("method-name" ":reference" "target-name" "eq?" "when" "proc")}
        {Lisp-Entry "setup-context" method (override) #f 79 20 79 33 ("form" "set!" "context")}
        {Lisp-Entry "invoke" method (public virtual) #f 88 26 88 32 ("~" "apply" "method-name" "class-of" "dispatch" "proc" "find-target" "or" "target" "let*" "execute" "if" "rest" "sender")}
        {Lisp-Entry "find-target" method (public) #f 96 18 96 29 ("cdr" "child" "child~" "car" "pair?" "and" ":form" "eq?" "target-name" "get-process" "process-alias" "process-alias~" "Component" "is-not?" "if" "get-parent" "get-parent~" "else" "class-of" "get-class-forms" "get-class-forms~" "form" "memq?" "not" "cond" "component" "find-form" "define" "sender")}}}})
"Handler-Reference"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Handler-Reference.jazz"} 245834379. jazz
    {Lisp-Entry "jazz.library.utility.Handler-Reference" module (protected) #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Handler-Reference" class () #f 43 7 43 24 ("Reference")
        {Lisp-Entry "parameters" slot () #f 46 8 46 18 ()}
        {Lisp-Entry "get-parameters" accessor #f #f 46 26 46 34 ()}
        {Lisp-Entry "initialize" method (override) #f 49 20 49 30 ("self" "parameters~self" "set!" "nextmethod" "parameters" "symbol")}
        {Lisp-Entry "print" method (override) #f 54 20 54 25 ("parameters" "not-null?" "symbol" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "resolve-parameters" method (override) #f 62 20 62 38 ("parameters" "resolve-reference" "generate" "generate~")}}}})
"History-Item"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "history" "History-Item.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.history.History-Item" module (protected) #f 37 18 37 51 ("jazz")
      {Lisp-Entry "History-Item" class (undocumented) #f 40 20 40 32 ("Object")
        {Lisp-Entry "valid?" method (public virtual) #f 43 26 43 32 ()}
        {Lisp-Entry "open-item" method (public virtual) #f 47 26 47 35 ()}
        {Lisp-Entry "present" method (public virtual) #f 51 26 51 33 ()}}}})
"History-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "history" "History-Manager.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.history.History-Manager" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system")}
      {Lisp-Entry "History-Manager" class (undocumented) #f 43 20 43 35 ("initialize" "Object")
        {Lisp-Entry "history-provider" slot () #f 46 8 46 24 ()}
        {Lisp-Entry "backward-history" slot () #f 47 8 47 24 ()}
        {Lisp-Entry "forward-history" slot () #f 48 8 48 23 ()}
        {Lisp-Entry "max-history" slot () #f 49 8 49 19 ()}
        {Lisp-Entry "initialize" method (override) #f 52 20 52 30 ("self" "max-history~self" "history-provider" "set!" "nextmethod" "max-history" "bind-keywords" "rest" "provider")}
        {Lisp-Entry "get-backward-history" method (public) #f 64 18 64 38 ("backward-history" "cleanup-history")}
        {Lisp-Entry "get-forward-history" method (public) #f 68 18 68 37 ("forward-history" "cleanup-history")}
        {Lisp-Entry "add-current" method (public) #f 77 18 77 29 ("present" "present~" "user-message" "add-history" "bell" "not" "if" "history-provider" "current-history-item" "current-history-item~" "item" "let")}
        {Lisp-Entry "add-history" method (public) #f 85 18 85 29 ("history-provider" "update-history-actions" "update-history-actions~" "forward-history" "set!" "1" "-" "tail" "set-cdr!" "backward-history" "length" ">" "max-history" "and" "add-backward-history" "when" "item")}
        {Lisp-Entry "add-backward-history" method () #f 94 11 94 31 ("cons" "backward-history" "set!" "when" "item")}
        {Lisp-Entry "add-forward-history" method () #f 99 11 99 30 ("cons" "forward-history" "set!" "when" "item")}
        {Lisp-Entry "append-forward-history" method () #f 104 11 104 33 ("list" "append" "forward-history" "set!" "when" "item")}
        {Lisp-Entry "go-backward-history" method (public) #f 109 18 109 37 ("update-history-actions" "update-history-actions~" "open-item" "open-item~" "decrease!" "cdr" "car" "add-forward-history" "while" "history-provider" "current-history-item" "current-history-item~" "item" "let" "bell" "begin" "length" ">=" "if" "cleanup-history" "backward-history" "set!" "cleanup-backward-history" "define" "0" "rank" "rank:")}
        {Lisp-Entry "go-forward-history" method (public) #f 129 18 129 36 ("update-history-actions" "update-history-actions~" "open-item" "open-item~" "decrease!" "cdr" "car" "add-backward-history" ">=" "while" "history-provider" "current-history-item" "current-history-item~" "item" "let" "bell" "begin" "null?" "if" "cleanup-history" "forward-history" "set!" "cleanup-forward-history" "define" "0" "rank" "rank:")}
        {Lisp-Entry "cleanup-history" definition () #f 149 15 149 30 ("valid?" "valid?~" "collect-if" "history")}}}})
"History-Provider"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "history" "History-Provider.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.history.History-Provider" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "History-Provider" interface (undocumented) #f 40 24 40 40 ()
        {Lisp-Entry "current-history-item" method (public virtual abstract) #f 43 35 43 55 ()}
        {Lisp-Entry "update-history-actions" method (public virtual abstract) #f 44 35 44 57 ()}}}})
"Icon-Resource"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "resource" "Icon-Resource.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.resource.Icon-Resource" module (protected) #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Icon-Resource" class () #f 43 7 43 20 ("Resource")
        {Lisp-Entry "resource-type" method (meta) #f 52 16 52 29 ("icon")}}}})
"Image-Resource"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "resource" "Image-Resource.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.resource.Image-Resource" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Image-Resource" class () #f 43 7 43 21 ("Resource")
        {Lisp-Entry "resource-type" method (meta) #f 52 16 52 29 ("image")}}}})
"Indented-Column"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "display" "Indented-Column.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.display.Indented-Column" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Indented-Column" class (undocumented) #f 43 20 43 35 ("0" "initialize" "bool" "<bool>" "fx" "<fx>" "Display-Column")
        {Lisp-Entry "indentation" slot () #f 46 8 46 19 ()}
        {Lisp-Entry "get-indentation" accessor #f #f 46 52 46 60 ()}
        {Lisp-Entry "set-indentation" accessor #f #f 46 52 46 60 ()}
        {Lisp-Entry "use-contouring?" slot () #f 47 8 47 23 ()}
        {Lisp-Entry "get-use-contouring?" accessor #f #f 47 52 47 60 ()}
        {Lisp-Entry "set-use-contouring?" accessor #f #f 47 52 47 60 ()}
        {Lisp-Entry "max-data" slot () #f 48 8 48 16 ()}
        {Lisp-Entry "max-width" slot () #f 49 8 49 17 ()}
        {Lisp-Entry "initialize" method (override) #f 57 20 57 30 ("use-contouring?~self" "self" "indentation~self" "set!" "nextmethod" "apply" "others" "use-contouring?" "2" "indentation" "bind-keywords" "rest" "displayer")}
        {Lisp-Entry "put-data" method (override) #f 69 20 69 28 ("cons" "factory" "put" "put~" "0" "level" "data")}
        {Lisp-Entry "empty-replacement" method (override) #f 73 20 73 37 ("0" "cons" "previous-data" "previous-column")}
        {Lisp-Entry "prepare-print" method (override) #f 82 20 82 33 ("minimum" "content" "+" "max-width" "max" "max-data" "set!" "indentation" "*" "indent" "length" "or" "fx" "<fx>" "let*" "data" "level" "bind" "info" "lambda" "for-each" "nextmethod")}
        {Lisp-Entry "print-to" method (override) #f 96 20 96 28 ("border-after" "0" "border" "format" "get-use-contouring?" "get-use-contouring?~" "Indented-Column" "is?" "and" "puc?" "max-width" "max-data" "-" "use-contouring?" "if" "padding" "indentation" "*" "indent" "length" "or" "fx" "<fx>" "let*" "data" "level" "bind" "output" "previous-data" "previous-column" "info")}}}})
"Indented-Column-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "display" "Indented-Column-Preferences.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.display.Indented-Column-Preferences" module (protected) #f 37 18 37 66 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Indented-Column-Preferences" class (undocumented) #f 45 20 45 47 ("2" "initialize" "Column-Preferences")
        {Lisp-Entry "indentation" property () #f 48 12 48 23 ()}
        {Lisp-Entry "get-indentation" accessor #f #f 48 52 48 60 ()}
        {Lisp-Entry "set-indentation" accessor #f #f 48 52 48 60 ()}
        {Lisp-Entry "use-contouring?" property () #f 49 12 49 27 ()}
        {Lisp-Entry "get-use-contouring?" accessor #f #f 49 52 49 60 ()}
        {Lisp-Entry "set-use-contouring?" accessor #f #f 49 52 49 60 ()}
        {Lisp-Entry "form" anonymous #f #f 52 3 52 7 ("Image-Resource" "icon:" "install" "<install>")}
        {Lisp-Entry "column-class" method (override) #f 61 20 61 32 ("Indented-Column")}
        {Lisp-Entry "new-column" method (override) #f 65 20 65 30 ("use-contouring?" "use-contouring?:" "indentation" "indentation:" "minimum" "minimum:" "border-after" "border-after:" "border" "border:" "Indented-Column" "new" "display")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 74 25 74 45 ("Indented-Column-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 83 11 83 17 ()
        {Lisp-Entry "import" anonymous #f #f 86 1 86 7 ("jazz.designer")}
        {Lisp-Entry "Indented-Column-Preferences-Descriptor" class () #f 89 7 89 45 ("Column-Preferences-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 92 3 92 7 ("domain" "Boolean-Domain" "<Boolean-Domain>" "use-contouring?" "indentation" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Integrity-Constraint"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "integrity" "Integrity-Constraint.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.integrity.Integrity-Constraint" module (protected) #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Integrity-Constraint" class (undocumented) #f 40 20 40 40 ("Object")
        {Lisp-Entry "register-constraints" method (meta public virtual) #f 48 31 48 51 ("manager")}
        {Lisp-Entry "validate" method (public virtual) #f 57 26 57 34 ("manager" "context" "client" "root" "component")}}}})
"Integrity-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "integrity" "Integrity-Manager.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.integrity.Integrity-Manager" module (protected) #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Integrity-Manager" class (undocumented) #f 40 20 40 37 ("initialize" "Object")
        {Lisp-Entry "constraints" slot () #f 43 8 43 19 ()}
        {Lisp-Entry "initialize" method (override) #f 46 20 46 30 ("nextmethod" "get-output" "get-output~" "register-constraints" "List-Factory" "new" "constraints" "set!" "setup-constraints" "define")}
        {Lisp-Entry "print" method (override) #f 56 20 56 25 ("format-plural" "format-cardinality" "format" "constraints" "length" "entries" "let" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "register-constraints" method (public virtual) #f 70 26 70 46 ()}
        {Lisp-Entry "register-constraint" method (public) #f 74 18 74 37 ("list" "constraints" "put" "put~" "root?" "root?:" "model" "constraint")}
        {Lisp-Entry "validate-integrity" method (public) #f 83 18 83 36 ("validate-all" "clear-violations" "reporter" "reporter:" "context" "context:" "root")}
        {Lisp-Entry "validate-all" method (protected virtual) #f 88 29 88 41 ("validate-hierarchy" "reporter" "context" "root")}
        {Lisp-Entry "validate-hierarchy" method (protected virtual) #f 92 29 92 47 ("get-children" "get-children~" "validate-hierarchy" "child" "lambda" "for-each" "stop-descent" "validate" "eq?" "unless" "report-progress" "when" "reporter" "context" "client" "root" "component")}
        {Lisp-Entry "validate" method (public) #f 101 18 101 26 ("constraints" "continuation-return" "validate" "validate~" "branch-installed?" "branch-installed?~" "is?" "null?" "or" "and" "when" "root?" "model" "constraint" "bind" "info" "for-each" "return" "lambda" "continuation-capture" "stop-descent" "self" "validate-component" "validate-component~" "eq?" "if" "validation-context" "new-context" "let" "context" "client" "root" "component")}
        {Lisp-Entry "validation-context" method (protected virtual) #f 116 29 116 47 ("context" "root" "component")}
        {Lisp-Entry "report-progress" method (protected virtual) #f 120 29 120 44 ("get-name" "get-name~" "user-feedback" "user-feedback~" "test-cancelled" "test-cancelled~" "reporter" "root" "component")}
        {Lisp-Entry "add-violation" method (public virtual) #f 130 26 130 39 ("add-violation" "add-violation~" "cons" "if" "set-path-presentation" "set-path-presentation~" "set-path" "set-path~" "set-trait-presentation" "set-trait-presentation~" "set-trait" "set-trait~" "present-path" "present-path~" "presentation" "path" "receive" "get-presentation-property" "get-presentation-property~" "trait-presentation" "get-name" "get-name~" "and" "trait-name" "get-active-trait" "get-active-trait~" "trait" "let*" "client" "root" "component" "violation")}
        {Lisp-Entry "clear-violations" method (public virtual) #f 142 26 142 42 ("clear-violations" "clear-violations~" "root")}}}})
"Integrity-Violation"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "integrity" "Integrity-Violation.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.integrity.Integrity-Violation" module (protected) #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Integrity-Violation" class (undocumented) #f 43 20 43 39 ("Object")
        {Lisp-Entry "message" slot () #f 46 8 46 15 ()}
        {Lisp-Entry "trait" slot () #f 47 8 47 13 ()}
        {Lisp-Entry "get-trait" accessor #f #f 47 38 47 46 ()}
        {Lisp-Entry "set-trait" accessor #f #f 47 38 47 46 ()}
        {Lisp-Entry "trait-presentation" slot () #f 48 8 48 26 ()}
        {Lisp-Entry "get-trait-presentation" accessor #f #f 48 38 48 46 ()}
        {Lisp-Entry "set-trait-presentation" accessor #f #f 48 38 48 46 ()}
        {Lisp-Entry "path" slot () #f 49 8 49 12 ()}
        {Lisp-Entry "get-path" accessor #f #f 49 38 49 46 ()}
        {Lisp-Entry "set-path" accessor #f #f 49 38 49 46 ()}
        {Lisp-Entry "path-presentation" slot () #f 50 8 50 25 ()}
        {Lisp-Entry "get-path-presentation" accessor #f #f 50 38 50 46 ()}
        {Lisp-Entry "set-path-presentation" accessor #f #f 50 38 50 46 ()}
        {Lisp-Entry "property" slot () #f 51 8 51 16 ()}
        {Lisp-Entry "get-property" accessor #f #f 51 38 51 46 ()}
        {Lisp-Entry "set-property" accessor #f #f 51 38 51 46 ()}
        {Lisp-Entry "construct-literal" method (meta) #f 55 16 55 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "initialize" method (override) #f 59 20 59 30 ("property~self" "path-presentation~self" "path~self" "trait-presentation~self" "trait~self" "self" "message~self" "set!" "nextmethod" "property" "property:" "path-presentation" "path-presentation:" "path" "path:" "trait-presentation" "trait-presentation:" "trait" "trait:" "message" "message:")}
        {Lisp-Entry "print" method (override) #f 74 20 74 25 ("path-presentation" "path" "trait-presentation" "trait" "message" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "get-message" method (public virtual) #f 89 26 89 37 ("message")}
        {Lisp-Entry "get-image" method (public virtual) #f 98 26 98 35 ("Image-Resource")}
        {Lisp-Entry "present-message" method (public virtual) #f 102 26 102 41 ("get-message")}
        {Lisp-Entry "present-location" method (public virtual) #f 106 26 106 42 ("join" "path" "get-path" "get-path~" "path-presentation" "or" "location" "let")}}}})
"Locator"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Locator.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.utility.Locator" module (protected) #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("time")}
      {Lisp-Entry "Locator" class (undocumented) #f 43 20 43 27 ("initialize" "Object")
        {Lisp-Entry "prefix" slot () #f 46 8 46 14 ()}
        {Lisp-Entry "get-prefix" accessor #f #f 46 40 46 48 ()}
        {Lisp-Entry "reset-time" slot () #f 47 8 47 18 ()}
        {Lisp-Entry "max-delay" slot () #f 48 8 48 17 ()}
        {Lisp-Entry "initialize" method (override) #f 51 20 51 30 ("self" "max-delay~self" "set!" "nextmethod" "0.5" "max-delay" "max-delay:")}
        {Lisp-Entry "setup" method (public) #f 61 18 61 23 ("max-delay" "current-time" "time->seconds" "+" "reset-time" "prefix" "set!" "string")}
        {Lisp-Entry "enter" method (public) #f 71 18 71 23 ("locate" "concatenate" "prefix" "not" "if" "target" "validate" "string" "let" "key")}
        {Lisp-Entry "validate" method () #f 78 11 78 19 ("reset" "di=?" "reset-time" "current-time" "time->seconds" ">" "or" "prefix" "and" "when" "string")}
        {Lisp-Entry "locate" method (public) #f 84 18 84 24 ("continuation-return" "setup" "select" "di=?" "when" "0" "subseq" ">=" "and" "prefix" "rank" "title" "iterate" "return" "lambda" "continuation-capture" "cardinality" "len" "let" "target")}
        {Lisp-Entry "iterate" method (public virtual) #f 102 26 102 33 ("proc")}
        {Lisp-Entry "select" method (public virtual) #f 106 26 106 32 ("rank")}
        {Lisp-Entry "reset" method (public) #f 115 18 115 23 ("reset-time" "prefix" "set!")}}}})
"Log-Reporter"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "reporter" "Log-Reporter.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.reporter.Log-Reporter" module (protected) #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Log-Reporter" class (undocumented) #f 43 20 43 32 ("Reporter" "Object")
        {Lisp-Entry "log" slot () #f 46 8 46 11 ()}
        {Lisp-Entry "initialize" method (override) #f 49 20 49 30 ("self" "log~self" "set!" "nextmethod" "log")}
        {Lisp-Entry "section-title" method (override) #f 54 20 54 33 ("log" "format" "title")}
        {Lisp-Entry "set-message" method (override) #f 58 20 58 31 ("log" "format" "msg")}
        {Lisp-Entry "user-message" method (override) #f 62 20 62 32 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "set-range" method (override) #f 66 20 66 29 ("range")}
        {Lisp-Entry "set-pos" method (override) #f 70 20 70 27 ("pos")}
        {Lisp-Entry "delta-pos" method (override) #f 74 20 74 29 ("increment")}
        {Lisp-Entry "set-step" method (override) #f 78 20 78 28 ("increment")}
        {Lisp-Entry "step-it" method (override) #f 82 20 82 27 ()}
        {Lisp-Entry "set-done" method (override) #f 86 20 86 28 ()}
        {Lisp-Entry "disable-cancel" method (override) #f 90 20 90 34 ()}
        {Lisp-Entry "cancel-requested?" method (override) #f 94 20 94 37 ()}
        {Lisp-Entry "test-cancelled" method (override) #f 98 20 98 34 ()}}}})
"Loggable"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Loggable.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.utility.Loggable" module (protected) #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Loggable" interface (undocumented) #f 40 24 40 32 ()
        {Lisp-Entry "log-info" method (public virtual abstract) #f 43 35 43 43 ("output")}
        {Lisp-Entry "edit" method (public virtual abstract) #f 44 35 44 39 ()}
        {Lisp-Entry "edit-child" method (public virtual abstract) #f 45 35 45 45 ("child")}}}})
"Manifest"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "manifest" "Manifest.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.manifest.Manifest" module (protected) #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.io")}
      {Lisp-Entry "Manifest-Class" class () #f 50 7 50 21 ("Directory" ":class")
        {Lisp-Entry "get-protocol" method (override) #f 53 20 53 32 ("manifest")}}
      {Lisp-Entry "Manifest" class () #f 57 7 57 15 ("Directory" "Manifest-Class")
        {Lisp-Entry "validate-component" method (override) #f 60 20 60 38 ("error" "Directory" "is-not?" "when" "dir" "lambda" "for-each" "lst")}
        {Lisp-Entry "print" method (override) #f 67 20 67 25 ("not-null?" "self" "class-of" "category-name" "format" "get-list" "lst" "let" "readably" "output")}
        {Lisp-Entry "present" method (override) #f 80 20 80 27 ("get-list" "present" "present~" "map" "join")}
        {Lisp-Entry "get-name" method (override) #f 89 20 89 28 ()}
        {Lisp-Entry "get-directory" method (override) #f 93 20 93 33 ("self")}
        {Lisp-Entry "get-content" method (override) #f 97 20 97 31 ("expand" "expand~" "class-of" "new" "moniker" "lambda" "map" "and" "if" "string?" "some-string?" "key:" "symbol?" "some?" "some-symbol?" "get-name" "get-name~" "key" "nextmethod" "apply" "content" "let*" "rest")}
        {Lisp-Entry "get-modification-time" method (override) #f 111 20 111 41 ()}
        {Lisp-Entry "create" method (override) #f 115 20 115 26 ()}
        {Lisp-Entry "delete-directory" method (override) #f 120 20 120 36 ("empty-directory" "self" "when" "feedback" "feedback:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "iterate-directory" method (override) #f 131 20 131 37 ("parse" "parse~" "iterate-directory-content" "iterate-directory-content~" "directory" "member?" "not" "and" "name" "Directory" "file" "get-name" "get-name~" "list" "if" "when" "File" "typecase" "element" "lambda" "for-each" "get-list" "items" "let" "ignored-directories" "ignored-directories:" "ignored-toplevel-directories" "ignored-toplevel-directories:" "recursive?" "recursive?:" "directories?" "directories?:" "files?" "files?:" "full?" "full?:" "proc")}}}})
"Multiplexer-Reporter"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "reporter" "Multiplexer-Reporter.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.reporter.Multiplexer-Reporter" module (protected) #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Multiplexer-Reporter" class (undocumented) #f 43 20 43 40 ("Reporter" "Object")
        {Lisp-Entry "reporters" slot () #f 46 8 46 17 ()}
        {Lisp-Entry "initialize" method (override) #f 49 20 49 30 ("self" "reporters~self" "set!" "nextmethod" "reporters")}
        {Lisp-Entry "main-reporter" method () #f 54 11 54 24 ("reporters" "car")}
        {Lisp-Entry "section-title" method (override) #f 58 20 58 33 ("reporters" "section-title" "section-title~" "reporter" "lambda" "for-each" "title")}
        {Lisp-Entry "set-message" method (override) #f 64 20 64 31 ("reporters" "set-message" "set-message~" "reporter" "lambda" "for-each" "msg")}
        {Lisp-Entry "user-message" method (override) #f 70 20 70 32 ("reporters" "user-message" "~" "apply" "reporter" "lambda" "for-each" "rest" "fmt")}
        {Lisp-Entry "set-range" method (override) #f 76 20 76 29 ("reporters" "set-range" "set-range~" "reporter" "lambda" "for-each" "range")}
        {Lisp-Entry "set-pos" method (override) #f 82 20 82 27 ("reporters" "set-pos" "set-pos~" "reporter" "lambda" "for-each" "pos")}
        {Lisp-Entry "delta-pos" method (override) #f 88 20 88 29 ("reporters" "delta-pos" "delta-pos~" "reporter" "lambda" "for-each" "increment")}
        {Lisp-Entry "set-step" method (override) #f 94 20 94 28 ("reporters" "set-step" "set-step~" "reporter" "lambda" "for-each" "increment")}
        {Lisp-Entry "step-it" method (override) #f 100 20 100 27 ("reporters" "step-it" "step-it~" "reporter" "lambda" "for-each")}
        {Lisp-Entry "set-done" method (override) #f 106 20 106 28 ("reporters" "set-done" "set-done~" "reporter" "lambda" "for-each")}
        {Lisp-Entry "disable-cancel" method (override) #f 112 20 112 34 ("reporters" "disable-cancel" "disable-cancel~" "reporter" "lambda" "for-each")}
        {Lisp-Entry "cancel-requested?" method (override) #f 118 20 118 37 ("cancel-requested?" "cancel-requested?~" "main-reporter" "main" "let")}
        {Lisp-Entry "test-cancelled" method (override) #f 123 20 123 34 ("test-cancelled" "test-cancelled~" "main-reporter" "main" "let")}}}})
"Outline"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "outline" "Outline.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.outline.Outline" module (protected) #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Outline" class (undocumented) #f 40 20 40 27 ("fx" "<fx>" "Object")
        {Lisp-Entry "row-spacing" slot () #f 43 8 43 19 ()}
        {Lisp-Entry "get-row-spacing" accessor #f #f 43 35 43 43 ()}
        {Lisp-Entry "set-row-spacing" accessor #f #f 43 35 43 43 ()}
        {Lisp-Entry "root-row" slot () #f 44 8 44 16 ()}
        {Lisp-Entry "get-root-row" accessor #f #f 44 35 44 43 ()}
        {Lisp-Entry "initialize" method (override) #f 47 20 47 30 ("root-row~self" "self" "row-spacing~self" "set!" "nextmethod" "root-row" "row-spacing")}
        {Lisp-Entry "first-row" method (public) #f 53 18 53 27 ("root-row" "get-sons" "get-sons~" "first")}
        {Lisp-Entry "first-visible-row" method (public) #f 57 18 57 35 ("root-row" "get-next" "get-next~")}
        {Lisp-Entry "get-row" method (public virtual) #f 66 26 66 33 ("1" "+" "root-row" "get-row-from" "n")}
        {Lisp-Entry "get-row-from" method (protected) #f 70 21 70 33 ("decrease!" "get-next" "get-next~" "set!" "0" ">" "and" "while" "n" "row")}
        {Lisp-Entry "call-with-v->line" method (public virtual) #f 77 26 77 43 ("-" "if" "when" "get-next" "get-next~" "set!" "increase!" ">=" "<" "or" "and" "while" "row-spacing" "get-height" "get-height~" "+" "bottom" "top" "0" "line" "first-visible-row" "row" "let" "proc" "scrolled" "v")}
        {Lisp-Entry "update-displayed" method (protected virtual) #f 98 29 98 45 ("display-v")}
        {Lisp-Entry "follow" method (protected virtual) #f 102 29 102 35 ("v" "display-v")}}}})
"Output-Log"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Output-Log.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.utility.Output-Log" module (protected) #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Output-Log" class (undocumented) #f 47 20 47 30 ("Navigable-Results")
        {Lisp-Entry "form" anonymous #f #f 50 3 50 7 ("300" "width:" "title:" "message" "Tree-Node-Column" "<Tree-Node-Column>" "locations" "header" "content" "scroller" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 60 25 60 38 ("output-log" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 69 25 69 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 73 25 73 35 ()}
        {Lisp-Entry "log-line" method (public) #f 82 18 82 26 ("title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "get-tree" "tree" "let" "user-data" "user-data:" "image" "image:" "collapsed" "state" "state:" "father" "father:" "line")}
        {Lisp-Entry "edit-selection" method (override) #f 92 20 92 34 ("focus-host" "focus-host~" "edit-document" "frame" "user-message" "msg" "line" "file" "bind" "else" "cdr" "edit-child" "edit-child~" "car" "pair?" "and" "edit" "edit~" "Loggable" "is?" "bell" "null?" "cond" "get-row" "get-row~" "get-user-data" "get-user-data~" "info" "let" "when" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*" "forward?")}
        {Lisp-Entry "edit-document" method () #f 111 11 111 24 ("focus-host" "focus-host~" "visible?:" "selection:" "get-application" "edit-document" "edit-document~" "frame" "1" "+" "0" "Cell" "Range$Cell$" "new" "and" "selection" "let*" "lambda" ":wait" "with-cursor" "focus?" "forward?" "line" "file")}}}})
"Path"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "path" "Path.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.path.Path" module (protected) #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Path" class (undocumented) #f 40 20 40 24 ("Object")
        {Lisp-Entry "path" slot () #f 43 8 43 12 ()}
        {Lisp-Entry "get-path" accessor #f #f 43 23 43 31 ()}
        {Lisp-Entry "set-path" accessor #f #f 43 23 43 31 ()}
        {Lisp-Entry "construct-literal" method (meta) #f 46 16 46 33 ("self" "new" "path" "context")}
        {Lisp-Entry "initialize" method (override) #f 50 20 50 30 ("self" "path~self" "set!" "nextmethod" "path")}
        {Lisp-Entry "compare-object" method (override) #f 55 20 55 34 (":not-equal" "else" ":equal" "get-path" "get-path~" "path" "=" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method (override) #f 64 20 64 25 ("path" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "get-parent" method (public) #f 75 18 75 28 ("path" "butlast" "Path" "new")}
        {Lisp-Entry "present" method (public) #f 84 18 84 25 ("path" "format")}
        {Lisp-Entry "follow-component" method (public virtual) #f 93 26 93 42 ("path" "child" "child~" "root")}
        {Lisp-Entry "follow-form" method (public virtual) #f 97 26 97 37 ("path" "child" "child~" "set!" "name" "lambda" "for-each" "form")}}}})
"Period"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Period.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.utility.Period" module (protected) #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Period" class (undocumented) #f 40 20 40 26 ("Range")
        {Lisp-Entry "get-duration" method (public) #f 44 18 44 30 ("Time" "new" "get-duration" "get-duration~" "start" "end" "get-time" "get-time~" "get-elapse" "get-elapse~" "-" "delta" "let" "field")}
        {Lisp-Entry "present" method (public) #f 50 18 50 25 ("end" "french:" "english:" "Locales" "localize" "start" "present-date" "present-date~" ":string" "format")}
        {Lisp-Entry "for-each-day" method (public) #f 58 18 58 30 ("1" "day" "add" "add~" "set!" "end" "<=" "while" "start" "date" "let" "proc")}
        {Lisp-Entry "includes-day-of-week?" method (public) #f 66 18 66 39 ("return" "get-day-of-week" "get-day-of-week~" "Date" "symbolic-day-of-week" "symbolic-day-of-week~" "=" "when" "date" "lambda" "for-each-day" "day")}}}})
"Print-Sequencer"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "factory" "Print-Sequencer.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.factory.Print-Sequencer" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Print-Sequencer" class (undocumented) #f 40 20 40 35 ("Object")}
      {Lisp-Entry "Print-Sequencer" class (undocumented) #f 46 20 46 35 ("List-Factory" "new" "initialize" "Object")
        {Lisp-Entry "printer" slot () #f 49 8 49 15 ()}
        {Lisp-Entry "start" slot () #f 50 8 50 13 ()}
        {Lisp-Entry "sections" slot () #f 51 8 51 16 ()}
        {Lisp-Entry "initialize" method () #f 54 11 54 21 ("start-section" "printer" "set!" "nextmethod" "prt")}
        {Lisp-Entry "start-section" method (public) #f 60 18 60 31 ("get-position" "start" "set!")}
        {Lisp-Entry "end-section" method (public) #f 64 18 64 29 ("start-section" "get-position" "start" "cons" "prog1")}
        {Lisp-Entry "get-position" method () #f 69 11 69 23 ("printer" "get-position" "get-position~")}
        {Lisp-Entry "put-section" method (public) #f 78 18 78 29 ("sections" "put" "put~" "section")}
        {Lisp-Entry "put-sections" method (public) #f 82 18 82 30 ("sections" "put-sequence" "put-sequence~" "sections-list")}
        {Lisp-Entry "print-sections" method (public) #f 86 18 86 32 ("sections" "get-output" "get-output~" "transfer" "end" "start" "bind" "section" "lambda" "for-each" "output")}
        {Lisp-Entry "transfer-size" definition () #f 98 14 98 27 ("1024")}
        {Lisp-Entry "transfer-buffer" definition () #f 101 14 101 29 ("transfer-size" "size:" "Heap-Block" "new")}
        {Lisp-Entry "transfer" method (synchronized) #f 105 24 105 32 ("increase!" "decrease!" "WriteFile" "NULL" "transfer-buffer" "get-handle" "get-handle~" "ReadFile" "transfer-size" "min" "subsize" "printer" "set-position" "set-position~" "0" ">" "while" "-" "size" "let" "output" "end" "start")}}}})
"Pulse"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Pulse.jazz"} 232688214. jazz
    {Lisp-Entry "jazz.library.utility.Pulse" module (protected) #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.window")}
      {Lisp-Entry "Pulse" class () #f 43 7 43 12 ("make-mutex" "initialize" "Object")
        {Lisp-Entry "name" property () #f 46 12 46 16 ()}
        {Lisp-Entry "get-name" accessor #f #f 46 44 46 52 ()}
        {Lisp-Entry "set-name" accessor #f #f 46 44 46 52 ()}
        {Lisp-Entry "delay" property () #f 47 12 47 17 ()}
        {Lisp-Entry "get-delay" accessor #f #f 47 44 47 52 ()}
        {Lisp-Entry "set-delay" accessor #f #f 47 44 47 52 ()}
        {Lisp-Entry "period" property () #f 48 12 48 18 ()}
        {Lisp-Entry "get-period" accessor #f #f 48 44 48 52 ()}
        {Lisp-Entry "set-period" accessor #f #f 48 44 48 52 ()}
        {Lisp-Entry "repeat?" property () #f 49 12 49 19 ()}
        {Lisp-Entry "get-repeat?" accessor #f #f 49 44 49 52 ()}
        {Lisp-Entry "set-repeat?" accessor #f #f 49 44 49 52 ()}
        {Lisp-Entry "execute" property () #f 50 12 50 19 ()}
        {Lisp-Entry "get-execute" accessor #f #f 50 44 50 52 ()}
        {Lisp-Entry "set-execute" accessor #f #f 50 44 50 52 ()}
        {Lisp-Entry "thread" slot () #f 53 8 53 14 ()}
        {Lisp-Entry "mutex" slot () #f 54 8 54 13 ()}
        {Lisp-Entry "initialize" method (override) #f 57 20 57 30 ("start-loop" "thread" "thread~self" "execute~self" "repeat?~self" "delay~self" "period~self" "self" "name~self" "set!" "nextmethod" "repeat?" "delay" "bind-keywords" "rest" "execute" "period" "name")}
        {Lisp-Entry "destroy" method (override) #f 68 20 68 27 ("nextmethod" "thread-exit" "thread-interrupt!" "mutex-unlock!" "set!" "self" "thread~self" "let" "thread" "when" "mutex" "mutex-lock!")}
        {Lisp-Entry "terminated?" method () #f 80 11 80 22 ("thread" "not")}
        {Lisp-Entry "start-loop" method () #f 89 11 89 21 ("name" "repeat?" "when" "execute" "terminated?" "unless" "execute-event" "sleep" "period" "delay" "or" "timeout" "loop" "let" "proper-tail-calls" "declare" "lambda" "new-thread" "thread-start!")}}}})
"Reference"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Reference.jazz"} 245834379. jazz
    {Lisp-Entry "jazz.library.utility.Reference" module (protected) #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Reference" class () #f 40 7 40 16 ("Object")
        {Lisp-Entry "context" slot () #f 43 8 43 15 ()}
        {Lisp-Entry "get-context" accessor #f #f 43 23 43 31 ()}
        {Lisp-Entry "symbol" slot () #f 44 8 44 14 ()}
        {Lisp-Entry "get-symbol" accessor #f #f 44 23 44 31 ()}
        {Lisp-Entry "initialize" method (override) #f 47 20 47 30 ("self" "symbol~self" "set!" "nextmethod" "symbol")}
        {Lisp-Entry "print" method (override) #f 52 20 52 25 ("symbol" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "walk-references" method (override) #f 58 20 58 35 ("symbol" "proc")}
        {Lisp-Entry "setup-context" method (override) #f 62 20 62 33 ("context" "set!" "ctx")}
        {Lisp-Entry "get-runtime-reference" method (public) #f 66 18 66 39 ("symbol" "context" "get-reference" "get-reference~")}
        {Lisp-Entry "resolve-reference" method (public) #f 70 18 70 35 ("symbol" "context" "require-reference" "require-reference~")}
        {Lisp-Entry "resolve-parameters" method (public virtual) #f 74 26 74 44 ("resolve-reference")}}}})
"Regular-Expression"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "regexp" "Regular-Expression.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.regexp.Regular-Expression" module (protected) #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Regular-Expression" class (undocumented) #f 40 20 40 38 ("Object")
        {Lisp-Entry "original" slot () #f 43 8 43 16 ()}
        {Lisp-Entry "expressions" slot () #f 44 8 44 19 ()}
        {Lisp-Entry "initialize" method (override) #f 47 20 47 30 ("parse-expressions" "expressions" "original" "set!" "nextmethod" "pattern")}
        {Lisp-Entry "parse-expressions" method () #f 53 11 53 28 ("separator:" "parse-strings" "map" "1" "+" "subseq" "Regular-Pattern" "new" "error" "set!" "not" "if" "eqv?" "when" "element" "c" "cardinality" "below" "0" "from" "n" "for" "loop" "pos" "let" "find-star" "parse-expression" "define" "pattern")}
        {Lisp-Entry "match" method (public) #f 80 18 80 23 ("expressions" "continuation-return" "when" "match" "for-each" "return" "lambda" "continuation-capture" "-" "cardinality" "fx" "<fx>" "cast" "subseq" "ends-with?" "starts-with?" "and" "get-suffix" "get-suffix~" "suffix" "get-prefix" "get-prefix~" "prefix" "let" "else" "get-pattern" "get-pattern~" "nu=?" "if" "get-exact?" "get-exact?~" "cond" "expression" "match-expression" "define" "string")}
        {Lisp-Entry "matches?" method (public) #f 104 18 104 26 ("match" "not-null?" "string")}
        {Lisp-Entry "replace" method (public) #f 113 18 113 25 ("get-suffix" "get-suffix~" "get-prefix" "get-prefix~" "concatenate" "get-pattern" "get-pattern~" "get-exact?" "get-exact?~" "car" "expression" "let" "original" "error" "1" "expressions" "length" "/=" "if" "string")}}
      {Lisp-Entry "Regular-Pattern" class () #f 127 7 127 22 ("Object")
        {Lisp-Entry "pattern" slot () #f 130 8 130 15 ()}
        {Lisp-Entry "get-pattern" accessor #f #f 130 23 130 31 ()}
        {Lisp-Entry "exact?" slot () #f 131 8 131 14 ()}
        {Lisp-Entry "get-exact?" accessor #f #f 131 23 131 31 ()}
        {Lisp-Entry "prefix" slot () #f 132 8 132 14 ()}
        {Lisp-Entry "get-prefix" accessor #f #f 132 23 132 31 ()}
        {Lisp-Entry "suffix" slot () #f 133 8 133 14 ()}
        {Lisp-Entry "get-suffix" accessor #f #f 133 23 133 31 ()}
        {Lisp-Entry "initialize" method (override) #f 136 20 136 30 ("suffix~self" "prefix~self" "exact?~self" "self" "pattern~self" "set!" "nextmethod" "suffix" "prefix" "exact?" "pattern")}}}})
"Reporter"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "reporter" "Reporter.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.reporter.Reporter" module (protected) #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Reporter" interface (undocumented) #f 40 24 40 32 ()
        {Lisp-Entry "section-title" method (public virtual abstract) #f 43 35 43 48 ("title")}
        {Lisp-Entry "set-message" method (public virtual abstract) #f 44 35 44 46 ("msg")}
        {Lisp-Entry "user-message" method (public virtual abstract) #f 45 35 45 47 ("rest" "fmt")}
        {Lisp-Entry "user-feedback" method (public virtual abstract) #f 46 35 46 48 ("rest" "fmt")}
        {Lisp-Entry "set-range" method (public virtual abstract) #f 47 35 47 44 ("range")}
        {Lisp-Entry "set-pos" method (public virtual abstract) #f 48 35 48 42 ("pos")}
        {Lisp-Entry "delta-pos" method (public virtual abstract) #f 49 35 49 44 ("increment")}
        {Lisp-Entry "set-step" method (public virtual abstract) #f 50 35 50 43 ("increment")}
        {Lisp-Entry "step-it" method (public virtual abstract) #f 51 35 51 42 ()}
        {Lisp-Entry "set-done" method (public virtual abstract) #f 52 35 52 43 ()}
        {Lisp-Entry "disable-cancel" method (public virtual abstract) #f 53 35 53 49 ()}
        {Lisp-Entry "cancel-requested?" method (public virtual abstract) #f 54 35 54 52 ()}
        {Lisp-Entry "test-cancelled" method (public virtual abstract) #f 55 35 55 49 ()}}}})
"Resource"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "resource" "Resource.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.resource.Resource" module (protected) #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Resource" class () #f 40 7 40 15 ("Object")
        {Lisp-Entry "name" slot () #f 43 8 43 12 ()}
        {Lisp-Entry "get-name" accessor #f #f 43 20 43 28 ()}
        {Lisp-Entry "initialize" method (override) #f 46 20 46 30 ("self" "name~self" "set!" "nextmethod" "name")}
        {Lisp-Entry "compare-object" method (override) #f 51 20 51 34 (":not-equal" "else" ":equal" "get-name" "get-name~" "name" "=" ":incompatible" "Resource" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method (override) #f 60 20 60 25 ("name" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "resource-type" method (meta public virtual) #f 72 31 72 44 ()}}}})
"Restore-Form"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "component" "Restore-Form.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.component.Restore-Form" module (protected) #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Restore-Form" class (undocumented) #f 43 20 43 32 ("Form")
        {Lisp-Entry "component" slot () #f 46 8 46 17 ()}
        {Lisp-Entry "get-component" accessor #f #f 46 25 46 33 ()}
        {Lisp-Entry "initialize" method (override) #f 49 20 49 30 ("self" "component~self" "set!" "nextmethod" "apply" "others" "component" "bind-keywords" "initargs")}}}})
"Sequenced-Column"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "display" "Sequenced-Column.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.display.Sequenced-Column" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Sequenced-Column" class (undocumented) #f 43 20 43 36 ("Display-Column")
        {Lisp-Entry "put-data" method (override) #f 51 20 51 28 ("List-Factory" "new" "fact" "let" "factory" "get-last-element" "get-last-element~" "put" "put~" "displayer" "get-line" "get-line~" "line" ">" "if" "rest" "data")}
        {Lisp-Entry "increase-line" method (override) #f 59 20 59 33 ("increase!" "displayer" "get-line" "get-line~" "line" "<=" "when")}
        {Lisp-Entry "print-to" method (override) #f 69 20 69 28 ("border-after" "get-output" "get-output~" "display" "data" "lambda" "for-each" "border" "format" "output" "previous-data" "previous-column" "fact")}}}})
"Sequenced-Column-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "display" "Sequenced-Column-Preferences.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.display.Sequenced-Column-Preferences" module (protected) #f 37 18 37 67 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Sequenced-Column-Preferences" class (undocumented) #f 43 20 43 48 ("Column-Preferences")
        {Lisp-Entry "column-class" method (override) #f 51 20 51 32 ("Sequenced-Column")}
        {Lisp-Entry "new-column" method (override) #f 55 20 55 30 ("minimum" "minimum:" "border-after" "border-after:" "border" "border:" "Sequenced-Column" "new" "display")}}}})
"Sound-Resource"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "resource" "Sound-Resource.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.resource.Sound-Resource" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Sound-Resource" class () #f 43 7 43 21 ("Resource")
        {Lisp-Entry "resource-type" method (meta) #f 52 16 52 29 ("sound")}}}})
"Sparse-Outline"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "outline" "Sparse-Outline.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.outline.Sparse-Outline" module (protected) #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Sparse-Outline" class (undocumented) #f 43 20 43 34 ("Outline")}}})
"Template-Expander"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "template" "Template-Expander.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.template.Template-Expander" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.io")}
      {Lisp-Entry "Template-Expander" class () #f 43 7 43 24 ("Object")
        {Lisp-Entry "delimiter-escape" slot () #f 46 8 46 24 ()}
        {Lisp-Entry "delimiter-start" slot () #f 47 8 47 23 ()}
        {Lisp-Entry "delimiter-end" slot () #f 48 8 48 21 ()}
        {Lisp-Entry "initialize" method (override) #f 51 20 51 30 ("delimiter-end~self" "delimiter-start~self" "self" "delimiter-escape~self" "set!" "nextmethod" "delimiter-end" "delimiter-end:" "delimiter-start" "delimiter-start:" "delimiter-escape" "delimiter-escape:")}
        {Lisp-Entry "expand" method (public) #f 58 18 58 24 ("peek-char" "delimiter-start" "not" "when" "with" "write-char" "else" "get-output-string" "string->symbol" "delimiter-end" "eqv?" "eof-object?" "cond" "read-char" "c" "iterate" "open-output-string" "name-output" "error" "format" "cdr" "value" "assv" "info" "read-variable" "name" "let" "input" "process-variable" "get-eol-encoding" "eol-encoding:" "parse" "parse~" "path:" "list" "open-input-file" "open-input-string" "sequence?" "if" "template-reader" "define" "printer" "printer:" "output" "associations" "template")}}}})
"Timer"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Timer.jazz"} 240293873. jazz
    {Lisp-Entry "jazz.library.utility.Timer" module (protected) #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system")}
      {Lisp-Entry "Timer" class () #f 43 7 43 12 ("Object")
        {Lisp-Entry "real-start" slot () #f 46 8 46 18 ()}
        {Lisp-Entry "cpu-start" slot () #f 47 8 47 17 ()}
        {Lisp-Entry "initialize" method (override) #f 50 20 50 30 ("reset" "nextmethod")}
        {Lisp-Entry "reset" method (public) #f 55 18 55 23 ("cpu-time" "cpu-start" "real-time" "real-start" "set!")}
        {Lisp-Entry "real-duration" method (public) #f 60 18 60 31 ("real-start" "real-time" "-")}
        {Lisp-Entry "real-duration-in-milliseconds" method (public) #f 63 18 63 47 ("real-duration" "seconds->milliseconds")}
        {Lisp-Entry "cpu-duration" method (public) #f 66 18 66 30 ("cpu-start" "cpu-time" "-")}
        {Lisp-Entry "cpu-duration-in-milliseconds" method (public) #f 69 18 69 46 ("cpu-duration" "seconds->milliseconds")}
        {Lisp-Entry "report-duration" method (public) #f 73 18 73 33 ("cpu-duration-in-milliseconds" "real-duration-in-milliseconds" "user-message")}
        {Lisp-Entry "report-fps" method (public) #f 79 18 79 28 ("real-duration" "1." "/" "user-message")}}}})
"Trait"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "component" "Trait.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.component.Trait" module (protected) #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.jml")}
      {Lisp-Entry "Trait" class () #f 44 7 44 12 ("initialize" "Component")
        {Lisp-Entry "inherit" property () #f 47 12 47 19 ()}
        {Lisp-Entry "get-inherit" accessor #f #f 47 49 47 57 ()}
        {Lisp-Entry "set-inherit" accessor #f #f 47 49 47 57 ()}
        {Lisp-Entry "client-type" property () #f 48 12 48 23 ()}
        {Lisp-Entry "get-client-type" accessor #f #f 48 49 48 57 ()}
        {Lisp-Entry "set-client-type" accessor #f #f 48 49 48 57 ()}
        {Lisp-Entry "client-form" property () #f 49 12 49 23 ()}
        {Lisp-Entry "get-client-form" accessor #f #f 49 49 49 57 ()}
        {Lisp-Entry "set-client-form" accessor #f #f 49 49 49 57 ()}
        {Lisp-Entry "restoreable?" slot () #f 52 8 52 20 ()}
        {Lisp-Entry "get-restoreable?" accessor #f #f 52 45 52 53 ()}
        {Lisp-Entry "set-restoreable?" accessor #f #f 52 45 52 53 ()}
        {Lisp-Entry "setup-client-type" method (protected) #f 60 21 60 38 ("children" "setup-client-type" "setup-client-type~" "child" "lambda" "for-each" "client-type" "set!" "type")}
        {Lisp-Entry "compute-effective-traits" method (protected) #f 72 21 72 45 ("append" "self" "list" "self-traits" "inherit" "resolve-trait" "trait" "lambda" "map" "inherited-traits" "compute-effective-traits" "compute-effective-traits~" "Trait" "parent" "is-not?" "if" "parent-traits" "let")}
        {Lisp-Entry "configure-client" method (protected) #f 86 21 86 37 ("client-form" "install-form" "install-form~" "set-restore-form" "set-restore-form~" "when" "install" "action:" "Restore-Form" "restoreable?" "and" "restore-form" "self" "Branch" "new" "branch" "let" "is?" "client-type" "not" "or" "assert" "parent" "client")}
        {Lisp-Entry "installed?" method (public) #f 97 18 97 28 ()}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 106 25 106 45 ("Trait-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 115 11 115 17 ()
        {Lisp-Entry "import" anonymous #f #f 118 1 118 7 ("jazz.designer")}
        {Lisp-Entry "Trait-Descriptor" class () #f 121 7 121 23 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 124 3 124 7 ("client-form" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "name-unicity?:" "name-mandatory?:" "Image-Resource" "image:" "install" "<install>")}
          {Lisp-Entry "component-set-presentation" method (override) #f 130 20 130 46 ("trait:" "string->symbol" "set-name" "set-name~" "presentation" "designer" "component")}
          {Lisp-Entry "component-display-property?" method (override) #f 134 20 134 47 ("client-form" "field-name" "memq?" "not" "nextmethod" "and" "property" "component")}}}}})
"Trait-Reference"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Trait-Reference.jazz"} 245834379. jazz
    {Lisp-Entry "jazz.library.utility.Trait-Reference" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Trait-Reference" class () #f 43 7 43 22 ("Reference")
        {Lisp-Entry "parameters" slot () #f 46 8 46 18 ()}
        {Lisp-Entry "get-parameters" accessor #f #f 46 26 46 34 ()}
        {Lisp-Entry "initialize" method (override) #f 49 20 49 30 ("self" "parameters~self" "set!" "nextmethod" "parameters" "symbol")}
        {Lisp-Entry "print" method (override) #f 54 20 54 25 ("parameters" "not-null?" "symbol" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "resolve-parameters" method (override) #f 62 20 62 38 ("child" "child~" "parameters" "null?" "if" "resolve-reference" "trait" "let")}}}})
"URL"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "moniker" "URL.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.moniker.URL" module (protected) #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.io")}
      {Lisp-Entry "extract-url-name" definition (public) #f 43 20 43 36 ("1" "+" "subseq" "null?" "if" "reversed?:" "find" "pos" "let" "url")}
      {Lisp-Entry "tokenise-url" definition () #f 50 13 50 25 ("split" "filename")}
      {Lisp-Entry "URL-Class" class () #f 54 7 54 16 ("Pathname" ":class")}
      {Lisp-Entry "URL" class () #f 57 7 57 10 ("Pathname" "URL-Class")
        {Lisp-Entry "title" slot () #f 60 8 60 13 ()}
        {Lisp-Entry "get-title" accessor #f #f 60 21 60 29 ()}
        {Lisp-Entry "initialize" method (override) #f 63 20 63 30 ("self" "title~self" "set!" "nextmethod" "title" "title:" "lst")}
        {Lisp-Entry "get-name" method (override) #f 68 20 68 28 ("parse" "extract-url-name")}
        {Lisp-Entry "print" method (override) #f 72 20 72 25 ("format" "lambda" "self" "print-unreadable" "nextmethod" "null?" "if" "get-title" "title" "let" "readably" "output")}
        {Lisp-Entry "split" method (public) #f 87 18 87 23 ("1" "+" "values" "null?" "find" "pos" "sub" "self" "error" "/=" "if" "7" "0" "subseq" "header" "parse" "url" "let*")}}}})
"Undoer"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Undoer.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.library.utility.Undoer" module (protected) #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system")}
      {Lisp-Entry "Undoer" class () #f 43 7 43 13 ("0" "initialize" "Object")
        {Lisp-Entry "preserve-state" slot () #f 46 8 46 22 ()}
        {Lisp-Entry "get-preserve-state" accessor #f #f 46 48 46 56 ()}
        {Lisp-Entry "set-preserve-state" accessor #f #f 46 48 46 56 ()}
        {Lisp-Entry "restore-state" slot () #f 47 8 47 21 ()}
        {Lisp-Entry "get-restore-state" accessor #f #f 47 48 47 56 ()}
        {Lisp-Entry "set-restore-state" accessor #f #f 47 48 47 56 ()}
        {Lisp-Entry "reset-modified" slot () #f 48 8 48 22 ()}
        {Lisp-Entry "get-reset-modified" accessor #f #f 48 48 48 56 ()}
        {Lisp-Entry "set-reset-modified" accessor #f #f 48 48 48 56 ()}
        {Lisp-Entry "undo-list" slot () #f 49 8 49 17 ()}
        {Lisp-Entry "get-undo-list" accessor #f #f 49 45 49 53 ()}
        {Lisp-Entry "redo-list" slot () #f 50 8 50 17 ()}
        {Lisp-Entry "undoing?" slot () #f 51 8 51 16 ()}
        {Lisp-Entry "redoing?" slot () #f 52 8 52 16 ()}
        {Lisp-Entry "atomic?" slot () #f 53 8 53 15 ()}
        {Lisp-Entry "atomic-actions" slot () #f 54 8 54 22 ()}
        {Lisp-Entry "save-depth" slot () #f 55 8 55 18 ()}
        {Lisp-Entry "initialize" method (override) #f 58 20 58 30 ("reset-modified~self" "restore-state~self" "self" "preserve-state~self" "set!" "nextmethod" "reset-modified" "reset-modified:" "restore-state" "restore-state:" "preserve-state" "preserve-state:")}
        {Lisp-Entry "reset-save-depth" method (public) #f 72 18 72 34 ("0" "save-depth" "set!")}
        {Lisp-Entry "reset" method (public) #f 76 18 76 23 ("atomic-actions" "atomic?" "redoing?" "undoing?" "redo-list" "undo-list" "set!")}
        {Lisp-Entry "register-undo" method (public) #f 90 18 90 31 ("not" "0" "=" "reset-modified" "and" "when" "redoing?" "unless" "increase!" "undo-list" "else" "save-depth" "decrease!" "cons" "redo-list" "set!" "undoing?" "register-atomic-action" "atomic?" "cond" "preserving-action" "if" "let" "preserve?" "reset" "action")}
        {Lisp-Entry "can-undo?" method (public) #f 106 18 106 27 ("undo-list" "not-null?")}
        {Lisp-Entry "can-redo?" method (public) #f 110 18 110 27 ("redo-list" "not-null?")}
        {Lisp-Entry "undo" method (public) #f 114 18 114 22 ("cdr" "play-action" "set!" "begin" "unwind-protect" "car" "action" "undoing?" "old" "let" "undo-list" "not-null?" "when")}
        {Lisp-Entry "redo" method (public) #f 126 18 126 22 ("cdr" "play-action" "set!" "begin" "unwind-protect" "car" "action" "redoing?" "old" "let" "redo-list" "not-null?" "when")}
        {Lisp-Entry "play-action" method (public virtual) #f 143 26 143 37 ("action")}
        {Lisp-Entry "preserving-action" method () #f 152 11 152 28 ("restore-state" "lambda" "state" "let" "preserve-state" "if" "action")}
        {Lisp-Entry "with-atomic-undo" method (public) #f 166 18 166 34 ("end-atomic-undo" "set!" "prog1" "start-atomic-undo" "begin" "unwind-protect" "completed?" "atomic?" "preserved" "let" "proc")}
        {Lisp-Entry "start-atomic-undo" method (public) #f 177 18 177 35 ("atomic-actions" "set!" "unless" "atomic?" "prog1")}
        {Lisp-Entry "end-atomic-undo" method (public) #f 184 18 184 33 ("update-focus-actions" "update-focus-actions~" "get-application" "appl" "not" "and" "atomic-actions" "let" "unless" "atomic?" "set!" "play-action" "action" "for-each" "with-atomic-undo" "lambda" "register-undo" "not-null?" "when" "actions" "register-atomic-actions" "define" "completed?" "preserved")}
        {Lisp-Entry "register-atomic-action" method () #f 207 11 207 33 ("cons" "atomic-actions" "set!" "action")}}}})
"Version"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "utility" "Version.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.utility.Version" module (protected) #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Version" class () #f 43 7 43 14 ("Object")
        {Lisp-Entry "major" slot () #f 46 8 46 13 ()}
        {Lisp-Entry "get-major" accessor #f #f 46 24 46 32 ()}
        {Lisp-Entry "minor" slot () #f 47 8 47 13 ()}
        {Lisp-Entry "get-minor" accessor #f #f 47 24 47 32 ()}
        {Lisp-Entry "stage" slot () #f 48 8 48 13 ()}
        {Lisp-Entry "get-stage" accessor #f #f 48 24 48 32 ()}
        {Lisp-Entry "revision" slot () #f 49 8 49 16 ()}
        {Lisp-Entry "get-revision" accessor #f #f 49 24 49 32 ()}
        {Lisp-Entry "initialize" method (override) #f 52 20 52 30 ("stage~self" "revision~self" "minor~self" "self" "major~self" "set!" "nextmethod" "stage" "0" "revision" "minor" "major")}
        {Lisp-Entry "compare-object" method (override) #f 60 20 60 34 (":equal" "get-revision" "get-revision~" "revision" "get-minor" "get-minor~" "minor" "get-major" "get-major~" "major" "or" "else" ":greater" ">" ":less" "<" "cond" "y" "x" "lambda" "try" "let" ":incompatible" "Version" "is-not?" "if" "target")}
        {Lisp-Entry "print" method (override) #f 74 20 74 25 ("stage" "0" "revision" "/=" "minor" "major" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "present" method (public) #f 83 18 83 25 ("beta" "alpha" "case" "stage" "not" "0" "revision" "=" "if" "minor" "major" "format")}
        {Lisp-Entry "compatible?" method (public) #f 98 18 98 29 ("get-minor" "get-minor~" "minor" "get-major" "get-major~" "major" "=" "and" "version")}
        {Lisp-Entry "->32-bit-integer" method (public) #f 103 18 103 34 ("revision" "1000" "minor" "100000" "major" "*" "+")}}}})
"Violations-Found"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "integrity" "Violations-Found.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.integrity.Violations-Found" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Violations-Found" class (undocumented) #f 40 20 40 36 ("Signal")
        {Lisp-Entry "design-file" slot () #f 43 8 43 19 ()}
        {Lisp-Entry "get-design-file" accessor #f #f 43 28 43 36 ()}
        {Lisp-Entry "architecture" slot () #f 44 8 44 20 ()}
        {Lisp-Entry "get-architecture" accessor #f #f 44 28 44 36 ()}
        {Lisp-Entry "violations" slot () #f 45 8 45 18 ()}
        {Lisp-Entry "get-violations" accessor #f #f 45 28 45 36 ()}
        {Lisp-Entry "initialize" method (override) #f 48 20 48 30 ("violations~self" "architecture~self" "self" "design-file~self" "set!" "nextmethod" "violations" "architecture" "design-file")}
        {Lisp-Entry "forwardable?" method () #f 60 11 60 23 ()}}}})
"Violations-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "integrity" "Violations-Manager.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.library.integrity.Violations-Manager" module (protected) #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Violations-Manager" class (undocumented) #f 47 20 47 38 ("initialize" "Navigable-Results")
        {Lisp-Entry "editor" slot () #f 50 8 50 14 ()}
        {Lisp-Entry "form" anonymous #f #f 53 3 53 7 ("337" "location" "Tree-Label-Column" "<Tree-Label-Column>" "toplevel-controls?:" "300" "width:" "title:" "violation" "Tree-Node-Column" "<Tree-Node-Column>" "locations" "header" "content" "scroller" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 64 25 64 38 ("violations-manager" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 73 25 73 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 77 25 77 35 ()}
        {Lisp-Entry "client-activate" method (override) #f 81 20 81 35 ("set-editor" "Canvas" "get-client" "get-client~" "is?" "if" "get-component-editor" "get-component-editor~" "and" "editor" "current-document" "guest" "let*")}
        {Lisp-Entry "client-deactivate" method (override) #f 89 20 89 37 ("set-editor")}
        {Lisp-Entry "get-client" method (public virtual) #f 98 26 98 36 ("get-client" "get-client~" "editor" "when")}
        {Lisp-Entry "get-editor" method (public virtual) #f 108 26 108 36 ("editor")}
        {Lisp-Entry "set-editor" method (public virtual) #f 112 26 112 36 ("update" "set!" "editor" "neq?" "when" "value")}
        {Lisp-Entry "update" method (public) #f 122 18 122 24 ("get-violations" "get-violations~" "add-violation" "for-each" "when" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "get-client" "client" "get-tree" "tree" "let")}
        {Lisp-Entry "add-violation" method () #f 137 11 137 24 ("user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "get-image" "get-image~" "image" "present-location" "present-location~" "location" "present-message" "present-message~" "title" "get-tree" "tree" "let" "violation")}
        {Lisp-Entry "edit-selection" method (override) #f 150 20 150 34 ("select-property" "select-property~" "self" "origin:" "list" "set-selection" "set-selection~" "get-message" "get-message~" "user-message" "get-path" "get-path~" "follow-component" "follow-component~" "component" "error" "find-component" "find-component~" "effective" "let" "/=" "or" "process-branch-changed" "process-branch-changed~" "set-active-trait" "set-active-trait~" "not" "if" "get-active-trait-name" "get-active-trait-name~" "active" "get-client" "client" "get-editor" "editor" "get-property" "get-property~" "property" "get-trait-presentation" "get-trait-presentation~" "trait-presentation" "get-trait" "get-trait~" "trait-name" "get-row" "get-row~" "get-user-data" "get-user-data~" "violation" "when" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*" "forward?")}}}})
"_automata"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "automata" "_automata.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.automata" module (protected) #f 55 18 55 39 ("jazz")
      {Lisp-Entry "Automata" class () #f 63 7 63 15 ("fx" "<fx>" "Object")
        {Lisp-Entry "nb-vectored" slot () #f 66 8 66 19 ()}
        {Lisp-Entry "get-nb-vectored" accessor #f #f 66 35 66 43 ()}
        {Lisp-Entry "set-nb-vectored" accessor #f #f 66 35 66 43 ()}
        {Lisp-Entry "nb-listed" slot () #f 67 8 67 17 ()}
        {Lisp-Entry "get-nb-listed" accessor #f #f 67 35 67 43 ()}
        {Lisp-Entry "set-nb-listed" accessor #f #f 67 35 67 43 ()}
        {Lisp-Entry "nb-lettered" slot () #f 68 8 68 19 ()}
        {Lisp-Entry "get-nb-lettered" accessor #f #f 68 35 68 43 ()}
        {Lisp-Entry "set-nb-lettered" accessor #f #f 68 35 68 43 ()}
        {Lisp-Entry "start" slot () #f 69 8 69 13 ()}
        {Lisp-Entry "get-start" accessor #f #f 69 27 69 35 ()}
        {Lisp-Entry "initialize" method (override) #f 72 20 72 30 ("start" "start~self" "nb-lettered" "nb-lettered~self" "nb-listed" "nb-listed~self" "0" "self" "nb-vectored" "nb-vectored~self" "set!" "s")}
        {Lisp-Entry "run" method (public) #f 79 18 79 21 ("transition" "transition~" "when" "start" "state" "iter" "let" "proper-tail-calls" "declare" "tape")}}
      {Lisp-Entry "Tape" class () #f 91 7 91 11 ("Object")
        {Lisp-Entry "found" slot () #f 94 8 94 13 ()}
        {Lisp-Entry "initialize" method (override) #f 97 20 97 30 ("new-queue" "self" "found" "found~self" "set!")}
        {Lisp-Entry "get-next" method (virtual) #f 101 19 101 27 ("fx+" "<fx+>")}
        {Lisp-Entry "save-start" method (virtual) #f 105 19 105 29 ()}
        {Lisp-Entry "add-start" method (virtual) #f 109 19 109 28 ("found")}
        {Lisp-Entry "add-found" method () #f 113 11 113 20 ("found" "enqueue" "info")}
        {Lisp-Entry "get-found" method () #f 117 11 117 20 ("found" "queue-list")}}
      {Lisp-Entry "StringTape" class () #f 126 7 126 17 ("fx" "<fx>" "Tape")
        {Lisp-Entry "string" slot () #f 129 8 129 14 ()}
        {Lisp-Entry "get-string" accessor #f #f 129 33 129 41 ()}
        {Lisp-Entry "limit" slot () #f 130 8 130 13 ()}
        {Lisp-Entry "get-limit" accessor #f #f 130 33 130 41 ()}
        {Lisp-Entry "index" slot () #f 131 8 131 13 ()}
        {Lisp-Entry "get-index" accessor #f #f 131 33 131 41 ()}
        {Lisp-Entry "start-index" slot () #f 132 8 132 19 ()}
        {Lisp-Entry "get-start-index" accessor #f #f 132 36 132 44 ()}
        {Lisp-Entry "set-start-index" accessor #f #f 132 36 132 44 ()}
        {Lisp-Entry "initialize" method (override) #f 135 20 135 30 ("start-index" "start-index~self" "0" "index" "index~self" "string-length" "limit" "limit~self" "self" "string" "string~self" "set!" "nextmethod" "s")}
        {Lisp-Entry "get-next" method (override) #f 143 20 143 28 ("1" "+" "set!" "string" "element" "char->integer" "prog1" "limit" "index" "<" "if" "fx+" "<fx+>")}
        {Lisp-Entry "save-start" method (override) #f 150 20 150 30 ("index" "start-index" "set!")}
        {Lisp-Entry "add-start" method (override) #f 154 20 154 29 ("start-index" "list" "found")}}
      {Lisp-Entry "TextTape" class () #f 163 7 163 15 ("string" "<string>" "fx" "<fx>" "Tape")
        {Lisp-Entry "paragraphs" slot () #f 166 8 166 18 ()}
        {Lisp-Entry "get-paragraphs" accessor #f #f 166 35 166 43 ()}
        {Lisp-Entry "limit" slot () #f 167 8 167 13 ()}
        {Lisp-Entry "get-limit" accessor #f #f 167 35 167 43 ()}
        {Lisp-Entry "line" slot () #f 168 8 168 12 ()}
        {Lisp-Entry "get-line" accessor #f #f 168 35 168 43 ()}
        {Lisp-Entry "col" slot () #f 169 8 169 11 ()}
        {Lisp-Entry "get-col" accessor #f #f 169 35 169 43 ()}
        {Lisp-Entry "scan" slot () #f 170 8 170 12 ()}
        {Lisp-Entry "get-scan" accessor #f #f 170 35 170 43 ()}
        {Lisp-Entry "start-line" slot () #f 171 8 171 18 ()}
        {Lisp-Entry "get-start-line" accessor #f #f 171 38 171 46 ()}
        {Lisp-Entry "set-start-line" accessor #f #f 171 38 171 46 ()}
        {Lisp-Entry "start-col" slot () #f 172 8 172 17 ()}
        {Lisp-Entry "get-start-col" accessor #f #f 172 38 172 46 ()}
        {Lisp-Entry "set-start-col" accessor #f #f 172 38 172 46 ()}
        {Lisp-Entry "initialize" method (override) #f 175 20 175 30 ("start-col" "start-col~self" "0" "start-line" "start-line~self" "element" "get-string" "get-string~" "scan" "scan~self" "col" "col~self" "line" "line~self" "limit" "limit~self" "self" "paragraphs" "paragraphs~self" "set!" "nextmethod" "c" "ln" "l" "p")}
        {Lisp-Entry "get-next" method (override) #f 186 20 186 28 ("prog1" "char->integer" "paragraphs" "element" "get-string" "get-string~" "0" "1" "+" "set!" "begin" "limit" "line" "<" "scan" "cardinality" "col" "=" "if" "fx+" "<fx+>")}
        {Lisp-Entry "save-start" method (override) #f 199 20 199 30 ("col" "start-col" "line" "start-line" "set!")}
        {Lisp-Entry "add-start" method (override) #f 204 20 204 29 ("start-col" "start-line" "list" "found")}}
      {Lisp-Entry "Transitions" class () #f 213 7 213 18 ("Object")
        {Lisp-Entry "add-transition" method (public virtual) #f 216 26 216 40 ("state" "i")}
        {Lisp-Entry "follow" method (public virtual) #f 217 26 217 32 ("i")}}
      {Lisp-Entry "NbAscii" definition () #f 225 12 225 19 ("256")}
      {Lisp-Entry "EOFTransition" definition () #f 226 12 226 25 ("NbAscii")}
      {Lisp-Entry "NotAsciiTransition" definition () #f 227 12 227 30 ("1" "NbAscii" "+")}
      {Lisp-Entry "NbTransitions" definition () #f 228 12 228 25 ("2" "NbAscii" "+")}
      {Lisp-Entry "VectoredTransitions" class () #f 231 7 231 26 ("Transitions")
        {Lisp-Entry "vector" slot () #f 234 8 234 14 ()}
        {Lisp-Entry "get-vector" accessor #f #f 234 22 234 30 ()}
        {Lisp-Entry "initialize" method (override) #f 237 20 237 30 ("NbTransitions" "make-vector" "vector" "set!" "rest")}
        {Lisp-Entry "add-transition" method (override) #f 241 20 241 34 ("NotAsciiTransition" "NbAscii" ">" "if" "vector" "set-element!" "state" "fx" "<fx>" "i")}
        {Lisp-Entry "follow" method (override) #f 245 20 245 26 ("NotAsciiTransition" "NbAscii" ">" "if" "vector" "element" "fx" "<fx>" "i")}}
      {Lisp-Entry "State" class () #f 254 7 254 12 ("Object")
        {Lisp-Entry "name" slot () #f 257 8 257 12 ()}
        {Lisp-Entry "get-name" accessor #f #f 257 27 257 35 ()}
        {Lisp-Entry "transitions" slot () #f 258 8 258 19 ()}
        {Lisp-Entry "get-transitions" accessor #f #f 258 27 258 35 ()}
        {Lisp-Entry "initialize" method (override) #f 261 20 261 30 ("transitions" "name" "set!" "t" "n")}
        {Lisp-Entry "print" method (override) #f 266 20 266 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "add-transition" method (public) #f 272 18 272 32 ("transitions" "add-transition" "add-transition~" "state" "fx" "<fx>" "i")}
        {Lisp-Entry "transition" method (public virtual) #f 276 26 276 36 ("EOFTransition" "action" "action~" "follow" "if" "get-next" "get-next~" "i" "let" "tape")}
        {Lisp-Entry "follow" method (public) #f 284 18 284 24 ("transitions" "follow" "follow~" "fx" "<fx>" "i")}
        {Lisp-Entry "action" method (public virtual) #f 288 26 288 32 ("tape")}}
      {Lisp-Entry "StartState" class () #f 296 7 296 17 ("State")
        {Lisp-Entry "initialize" method (override) #f 299 20 299 30 ("nextmethod" "t")}
        {Lisp-Entry "print" method (override) #f 303 20 303 25 ("lambda" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "transition" method (override) #f 309 20 309 30 ("nextmethod" "save-start" "save-start~" "tape")}}
      {Lisp-Entry "FoundState" class () #f 319 7 319 17 ("State")
        {Lisp-Entry "found" slot () #f 322 8 322 13 ()}
        {Lisp-Entry "get-found" accessor #f #f 322 26 322 34 ()}
        {Lisp-Entry "next-state" slot () #f 323 8 323 18 ()}
        {Lisp-Entry "get-next-state" accessor #f #f 323 26 323 34 ()}
        {Lisp-Entry "initialize" method (override) #f 326 20 326 30 ("nextmethod" "next-state" "found" "set!" "ns" "f")}
        {Lisp-Entry "print" method (override) #f 332 20 332 25 ("lambda" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "transition" method (override) #f 338 20 338 30 ("next-state" "action" "tape")}
        {Lisp-Entry "action" method (override) #f 343 20 343 26 ("found" "add-start" "add-start~" "add-found" "add-found~" "tape")}}
      {Lisp-Entry "build-search-automata" definition (public) #f 352 20 352 41 ("process-target" "target" "lambda" "for-each" "add-constituency-transitions" "2" "get-nb-vectored" "get-nb-vectored~" "+" "set-nb-vectored" "set-nb-vectored~" "Automata" "automata" "State" "skip" "VectoredTransitions" "StartState" "new" "start" "let*" "constituent-test" "ignore-case" "whole-words" "targets")}
      {Lisp-Entry "add-constituency-transitions" definition () #f 365 13 365 41 ("EOFTransition" "is-constituent" "if" "add-transition" "add-transition~" "NbAscii" "below" "0" "from" "i" "for" "loop" "constituent-test" "eof" "not-c" "c" "state")}
      {Lisp-Entry "process-target" definition () #f 373 13 373 27 ("EOFTransition" "NbAscii" "below" "0" "from" "for" "loop" "FoundState" "else" "add-transition" "add-transition~" "add-constituency-transitions" "1" "get-nb-vectored" "get-nb-vectored~" "+" "set-nb-vectored" "set-nb-vectored~" "VectoredTransitions" "State" "new" "not" "is-constituent" "when" "set!" "neq?" "and" "cond" "follow" "follow~" "new-state" "downcase" "upcase" "lower-case?" "if" "iinv" "char->integer" "i" "c" "lambda" "iterate" "car" "string" "state" "let" "constituent-test" "ignore-case" "whole-words" "skip" "start" "automata" "target")}
      {Lisp-Entry "is-constituent" definition () #f 406 13 406 27 ("integer->char" "bool" "<bool>" "fx" "<fx>" "i" "procedure" "<procedure>" "constituent-test")}
      {Lisp-Entry "automata-search" definition (public) #f 415 20 415 35 ("get-found" "get-found~" "run" "run~" "Tape" "<Tape>" "tape" "Automata" "<Automata>" "automata")}}})
"_component"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "component" "_component.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.library.component" module () #f 37 8 37 30 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.dialog" "jazz.system" "jazz.library" "jazz.jml" "jazz.io")}
      {Lisp-Entry "tag-reference-not-found-handler" definition (public) #f 52 19 52 50 ("make-parameter")}
      {Lisp-Entry "open-form" definition (public) #f 61 20 61 29 ("multiple-selection?:" "choose-file" "read-form")}
      {Lisp-Entry "read-form" definition (public) #f 65 20 65 29 ("set-origin" "set-origin~" "parse-form" "form" "parse" "parse~" "error" "eof-object?" "if" "read" "expr" "let" "input" "lambda" "jazz-readtable" "readtable:" "cr-lf" "eol-encoding:" "UTF" "char-encoding:" "path-settings" "call-with-input-file" "walk-for" "parameterize" "file")}
      {Lisp-Entry "parse-form" definition (public) #f 77 20 77 30 ("effective-imports" "effective-imports~" "imports-locator" "construct-form" "lambda" "cadr" "get-parent" "get-parent~" "get-list" "get-list~" "Alias" "cdr" "Data" "new" "assert" "form" "import" "assq" "version" "let" "info" "dialect" "bind" "parse~" "format" "error" "parse-data" "data" "car" "eq?" "pair?" "and" "if" "proc" "parse" "define" "file" "expr")}
      {Lisp-Entry "safe-read-form" definition (public) #f 102 20 102 34 ("read-form" "wrap-exception" "exc" "error?" "datum-parsing-exception?" "or" "obj" "lambda" "call-with-catch" "file")}
      {Lisp-Entry "save-form" definition (public) #f 113 20 113 29 ("print-form-data" "output" "path-settings" "call-with-output-file" "lambda" "with-jazz-readtable" "file" "form")}
      {Lisp-Entry "print-form-data" definition (public) #f 121 20 121 35 ("align-name?:" "1" "base:" "form->node" "pretty-print" "pretty-print~" "set!" "if" "import" "lambda" "for-each" "first?" "when" "get-imports" "get-imports~" "imports" "get-dialect" "get-dialect~" "format" "get-model" "get-model~" "output-header" "get-data" "get-data~" "data" "let" "output" "form")}
      {Lisp-Entry "*file-forms*" definition () #f 145 12 145 24 ("pathname-hash" "hash:" "pathname=?" "test:" "make-table")}
      {Lisp-Entry "register-file-form" definition (public) #f 149 20 149 38 ("*file-forms*" "table-set!" "form" "file")}
      {Lisp-Entry "registered-file-form" definition (public) #f 152 20 152 40 ("*file-forms*" "table-ref" "file")}
      {Lisp-Entry "instantiate-file" definition (public) #f 156 20 156 36 ("instantiate" "instantiate~" "apply" "register-file-form" "read-form" "registered-file-form" "or" "form" "let" "rest" "file")}
      {Lisp-Entry "imports-locator" definition (public) #f 164 20 164 35 ("deserialize-runtime-reference" "continuation-return" "module-public" "list" "reference" "when" "module-get" "object" "car" "pair?" "if" "module-name" "let" "import" "for-each" "return" "continuation-capture" "symbol" "lambda" "imports")}
      {Lisp-Entry "form-imports" definition (public) #f 183 20 183 32 ("remove-duplicates" "symbols" "second" "module-public" "car" "if" "get-reference" "get-reference~" "serialize-runtime-reference" "ref" "get-context" "get-context~" "context" "symbol" "symbol-import" "get-model" "get-model~" "map" "value" "_" "map-property" "get-symbol" "get-symbol~" "Reference" "is?" "and" "val" "collect" "append" "get-action" "get-action~" "key:" "eq?" "action" "lambda" "collect-if" "new-nodes" "get-properties" "get-properties~" "append-map" "properties" "nodes" "let*" "collect-symbols" "get-output" "get-output~" "put" "~" "iterate-nodes" "List-Factory" "new" "factory" "let" "collect-nodes" "define" "private-import" "form")}
      {Lisp-Entry "collect-oldest-ancestors" definition (public) #f 218 20 218 44 ("memq?" "not" "ancestor" "every?" "get-parent" "get-parent~" "component-ancestry" "ancestry" "let" "eq?" "or" "component" "lambda" "collect-if" "common-ancestor" "components")}
      {Lisp-Entry "component-owned?" definition (public) #f 228 20 228 36 ("new" "get-action" "get-action~" "eq?" "and" "component-owned-form" "let" "ancestor" "form" "component")}
      {Lisp-Entry "component-ancestry" definition (public) #f 233 20 233 38 ("get-parent-component" "get-parent-component~" "identity" "unfold-right" "error" "eq?" "if" "scan" "end?" "define" "ancestor" "component")}
      {Lisp-Entry "component-owned-form" definition (public) #f 242 20 242 40 ("component-ancestry" "owned-form" "ancestor" "form" "component")}
      {Lisp-Entry "owned-form" definition (public) #f 246 20 246 30 ("and" "equal?" "test:" "key:" "find-in" "subform" "else" "cdr" "owned-form" "memq?" "not" "cond" "get-name" "get-name~" "name" "get-form" "get-form~" "cpn-form" "get-children" "get-children~" "subforms" "car" "cpn" "let" "null?" "if" "ancestry" "form")}
      {Lisp-Entry "ownership-level" definition (public) #f 264 20 264 35 ("modify" "traverse" "get-properties" "get-properties~" "null?" "if" "else" "create" "install" "new" "get-action" "get-action~" "case" "and" "owned-form")}
      {Lisp-Entry "first-ancestry-owned-form" definition (public) #f 273 20 273 45 ("get-parent" "get-parent~" "or" "component-ancestry" "owned-form" "eq?" "if" "cur" "loop" "let" "form" "ascendant" "component")}
      {Lisp-Entry "ancestry-traits-owned-forms" definition (public) #f 281 20 281 47 ("component-ancestry" "owned-form" "get-client-form" "get-client-form~" "trait-form" "trait" "lambda" "collect" "append" "get-traits" "get-traits~" "traits" "if" "traits-owned-forms" "get-parent" "get-parent~" "first-ancestry-owned-form" "current-form" "loop" "let" "form" "ascendant" "component")}
      {Lisp-Entry "component-ascendant-owned-forms" definition (public) #f 295 20 295 51 ("list" "append" "get-ascendant" "get-ascendant~" "ancestry-traits-owned-forms" "ancestry-traits-forms" "get-traits" "get-traits~" "get-client-form" "get-client-form~" "map" "traits-forms" "component-ancestry" "owned-form" "get-class-form" "get-class-form~" "class-form" "let*" "Component" "subtype?" "and" "if" "forms" "class-of" "class" "loop" "let" "ascendant" "component")}
      {Lisp-Entry "component-forms" definition (public) #f 307 20 307 35 ("component-ascendant-owned-forms" "append" "if" "forms" "get-parent" "get-parent~" "ascendant" "loop" "let" "component")}
      {Lisp-Entry "determine-unique-paster" definition (public) #f 321 20 321 43 ("car" "parent" "=" "when" "get-parent" "get-parent~" "map" "remove-duplicates" "parents" "let" "else" "first" "determine-paster" "determine-paster~" "1" "0" "length" "case" "components")}}})
"_exemplar"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "exemplar" "_exemplar.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.library.exemplar" module () #f 38 8 38 29 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 41 1 41 7 ("jazz.library")}
      {Lisp-Entry "Exemplar" class () #f 49 7 49 15 ("initialize" "Object")
        {Lisp-Entry "domain" slot (protected) #f 52 18 52 24 ()}
        {Lisp-Entry "base" slot (protected) #f 53 18 53 22 ()}
        {Lisp-Entry "ascendants" slot (protected) #f 54 18 54 28 ()}
        {Lisp-Entry "initialize" method (override) #f 57 20 57 30 ("keyword->symbol" "set-attribute" "value" "key" "lambda" "for-each-property" "listify" "base~self" "default-domain" "or" "self" "domain~self" "set!" "nextmethod" "others" "base" "domain" "bind-keywords" "rest")}
        {Lisp-Entry "copy-object" method (override) #f 67 20 67 31 ("get-attributes" "get-attribute" "set-attribute" "set-attribute~" "attribute" "lambda" "for-each" "base" "set-base" "set-base~" "domain" "set-domain" "set-domain~" "self" "class-of" "new" "exemplar" "let" "deep?")}
        {Lisp-Entry "compare-object" method (override) #f 77 20 77 34 (":not-equal" "else" ":equal" "get-attributes" "get~" "get" "attribute" "lambda" "every?" "get-base" "get-base~" "base" "equal?" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method (override) #f 89 20 89 25 ("empty-string?" "not" "self" "class-of" "category-name" "reference-name" "format" "present" "presentation" "let" "readably" "output")}
        {Lisp-Entry "present" method (public) #f 96 18 96 25 ("and" "if" "format" "has-attributes?" "base" "not-null?" "has-base?" "attributes" "get-output" "get-output~" "get-attributes" "symbol->keyword" "put" "put~" "specified?" "when" "get-attribute" "value" "attribute" "lambda" "for-each" "List-Factory" "new" "fact" "let" "owned-attributes" "define")}
        {Lisp-Entry "inherits?" method (public) #f 121 18 121 27 ("error?:" "domain" "locate" "locate~" "let" "Exemplar" "is?" "continuation-return" "when" "ascendant" "for-each-ascendant" "return" "lambda" "continuation-capture" "self" "eq?" "if" "target" "inherits-exemplar?" "define" "name/target")}
        {Lisp-Entry "for-each-ascendant" method (public) #f 140 18 140 36 ("get-ascendants" "for-each-ascendant" "for-each-ascendant~" "ascendant" "lambda" "for-each" "proc")}
        {Lisp-Entry "extend" method (public) #f 147 18 147 24 ("keyword->symbol" "set-attribute" "set-attribute~" "value" "keyword" "lambda" "for-each-property" "modify-from" "modify-from~" "domain" "set-domain" "set-domain~" "self" "class-of" "new" "exemplar" "let" "rest")}
        {Lisp-Entry "modify-from" method (public) #f 162 18 162 29 ("get-attributes" "get-attribute" "get-attribute~" "set-attribute" "attribute" "lambda" "for-each" "get-base" "get-base~" "set-base" "self" "eq?" "unless" "from")}
        {Lisp-Entry "default-domain" method (protected virtual) #f 175 29 175 43 ()}
        {Lisp-Entry "get-domain" method (public) #f 179 18 179 28 ("domain")}
        {Lisp-Entry "set-domain" method (public) #f 183 18 183 28 ("reset-ascendants" "domain" "set!" "d")}
        {Lisp-Entry "intern" method (public) #f 188 18 188 24 ("self" "domain" "intern" "intern~")}
        {Lisp-Entry "get-base" method (public) #f 197 18 197 26 ("base")}
        {Lisp-Entry "set-base" method (public) #f 201 18 201 26 ("reset-ascendants" "listify" "base" "set!" "b")}
        {Lisp-Entry "get-ascendants" method (public) #f 211 18 211 32 ("base" "reverse" "domain" "locate" "locate~" "name" "lambda" "map" "set!" "ascendants" "not" "when")}
        {Lisp-Entry "reset-ascendants" method () #f 219 11 219 27 ("ascendants" "set!")}
        {Lisp-Entry "supports?" method (public) #f 228 18 228 27 ("get-attributes" "memq?" "attribute")}
        {Lisp-Entry "get-attributes" method (protected virtual) #f 232 29 232 43 ()}
        {Lisp-Entry "get-attribute-default" method (protected virtual) #f 236 29 236 50 ("unspecified" "attribute")}
        {Lisp-Entry "get-attribute-no-default" method (protected virtual) #f 240 29 240 53 ("unspecified" "attribute")}
        {Lisp-Entry "get-attribute" method (protected virtual) #f 244 29 244 42 ("unknown-attribute" "attribute")}
        {Lisp-Entry "set-attribute" method (protected virtual) #f 248 29 248 42 ("unknown-attribute" "value" "attribute")}
        {Lisp-Entry "attribute=?" method (protected virtual) #f 252 29 252 40 ("eqv?" "y" "x" "attribute")}
        {Lisp-Entry "attribute/unspecified=?" method (protected) #f 256 21 256 44 ("attribute=?" "specified?" "unspecified?" "and" "or" "y" "x" "attribute")}
        {Lisp-Entry "unknown-attribute" definition () #f 261 15 261 32 ("error" "attribute")}
        {Lisp-Entry "get" method (public virtual) #f 270 26 270 29 ("unspecified" "attribute")}
        {Lisp-Entry "set" method (public virtual) #f 274 26 274 29 ("error" "value" "attribute")}}
      {Lisp-Entry "construct-exemplar" definition (public) #f 278 20 278 38 ("cdr" "list" "append" "base:" "new" "apply" "car" "symbol?" "not" "null?" "or" "if" "scan" "base" "iterate" "let" "rest" "class")}
      {Lisp-Entry "parse-exemplar" definition (public) #f 285 20 285 34 ("read-string-content" "construct-exemplar" "string" "class")}
      {Lisp-Entry "register-exemplar" definition (public) #f 289 20 289 37 ("register" "register~" "set-domain" "set-domain~" "else" "modify-from" "modify-from~" "cond" "error?:" "locate-own" "locate-own~" "actual" "let" "domain" "exemplar" "name")}
      {Lisp-Entry "exemplar+=?" definition (public) #f 300 20 300 31 ("exemplar=?" "not" "and" "or" "y" "x")}
      {Lisp-Entry "exemplar=?" specialize (inline) #f 305 22 305 32 ()}
      {Lisp-Entry "=" specialize (inline) #f 305 34 305 35 ("get-attributes" "get-attributes~" "get-attribute" "get-attribute~" "attribute/unspecified=?" "attribute/unspecified=?~" "attribute" "lambda" "every?" "get-base" "get-base~" "equal?" "class-of" "eq?" "and" "bool" "<bool>" "e2" "Exemplar" "<Exemplar>" "e1")}
      {Lisp-Entry "Exemplar-Domain" class (undocumented) #f 318 20 318 35 ("Object")
        {Lisp-Entry "name" slot () #f 321 8 321 12 ()}
        {Lisp-Entry "initer" slot () #f 322 8 322 14 ()}
        {Lisp-Entry "index" slot () #f 323 8 323 13 ()}
        {Lisp-Entry "interned" slot () #f 324 8 324 16 ()}
        {Lisp-Entry "chained" slot () #f 325 8 325 15 ()}
        {Lisp-Entry "initialize" method (override) #f 328 20 328 30 ("chained~self" "0" "Axis" "new" "and" "interned" "interned~self" "eq?" "test:" "make-table" "index" "index~self" "initer~self" "self" "name~self" "set!" "nextmethod" "chained" "chained:" "intern?" "intern?:" "initer" "initer:" "name" "name:")}
        {Lisp-Entry "print" method (override) #f 337 20 337 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "register" method (public) #f 348 18 348 26 ("index" "table-set!" "exemplar" "name")}
        {Lisp-Entry "reference" method (public) #f 352 18 352 27 ("locate" "get-interned" "element" "integer?" "if" "rank/name")}
        {Lisp-Entry "init" method () #f 363 11 363 15 ("set!" "thunk" "let" "initer" "when")}
        {Lisp-Entry "get-index" method (public) #f 375 18 375 27 ("index" "init")}
        {Lisp-Entry "locate-own" method (public) #f 380 18 380 28 ("error" "when" "get-index" "table-ref" "or" "error?" "error?:" "name")}
        {Lisp-Entry "locate" method (public) #f 386 18 386 24 ("error" "when" "chained" "locate" "locate~" "domain" "lambda" "find-object" "get-index" "table-ref" "or" "error?" "error?:" "name")}
        {Lisp-Entry "symbolize" method (public) #f 393 18 393 27 ("base:" "class-of" "new" "continuation-return" "when" "exemplar" "name" "get-index" "iterate-table" "return" "lambda" "continuation-capture" "exemplar=?" "or" "let" "test" "test:" "target")}
        {Lisp-Entry "get-interned" method (public) #f 409 18 409 30 ("interned" "init")}
        {Lisp-Entry "set-interned" method (public) #f 414 18 414 30 ("Axis" "coerce" "interned" "set!" "value")}
        {Lisp-Entry "empty-interned" method (public) #f 418 18 418 32 ("0" "Axis" "new" "interned" "set!")}
        {Lisp-Entry "intern" method (public) #f 422 18 422 24 ("axis-add" "self" "set-domain" "set-domain~" "begin" "exemplar=?" "test:" "find-in" "or" "interned" "not" "if" "init" "exemplar")}
        {Lisp-Entry "get-rank" method (public) #f 433 18 433 26 ("get-interned" "find" "exemplar")}
        {Lisp-Entry "get-chained" method (public) #f 442 18 442 29 ("chained")}}}})
"_library"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "_library.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.library" module () #f 37 8 37 20 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.library.syntax" "jazz.library.autoload")}
      {Lisp-Entry "import" anonymous #f #f 43 1 43 7 ("time" "irregex" "jazz.io" "jazz.library.autoload")}
      {Lisp-Entry "parse-attributes" definition (public) #f 54 20 54 36 ("cdr" "cddr" "cadr" "enqueue" "new-queue" "set!" "when" "begin" "keyword?" "not" "and" "car" "element" "queue-list" "values" "null?" "if" "scan" "iterate" "content" "properties" "let" "list")}
      {Lisp-Entry "match-expression" definition (public) #f 80 20 80 36 ("?" "0" "string-ref" "1" "string-length" ">" "symbol->string" "str" "symbol?" "and" "cdr" "car" "begin" "if" "match-fail" "else" "match-constant" "eqv?" "match-pair" "pair?" "match-variable" "variable?" "match-universal-variable" "universal-variable?" "cond" "table-ref" "match-expr" "continuation-return" "fail" "table-set!" "variable" "match" "eq?" "test:" "make-table" "matches" "let" "failure" "proc" "pattern" "bind" "unspecified" "match-clause" "clause" "for-each" "found" "lambda" "continuation-capture" "match-clauses" "define" "clauses" "expr")}
      {Lisp-Entry "match-regexp-string" definition (public) #f 147 20 147 39 ("irregex-match-substring" "variable" "when" "irregex-search" "match" "let" "continuation-return" "not" "if" "proc" "regexp" "bind" "unspecified" "match-clause" "clause" "for-each" "found" "lambda" "continuation-capture" "match-clauses" "define" "clauses" "str")}
      {Lisp-Entry "construct-environment" definition (public) #f 174 20 174 41 ("setup-context" "setup-context~" "Environment" "new" "environment" "let" "locator" "data")}
      {Lisp-Entry "*forms*" define #f #f 185 8 185 15 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-form" definition (public) #f 189 20 189 33 ("*forms*" "table-set!" "form" "name")}
      {Lisp-Entry "unregister-form" definition (public) #f 192 20 192 35 ("*forms*" "table-clear" "name")}
      {Lisp-Entry "registered-form" definition (public) #f 195 20 195 35 ("*forms*" "table-ref" "name")}
      {Lisp-Entry "require-form" definition (public) #f 198 20 198 32 ("error" "registered-form" "or" "name")}
      {Lisp-Entry "instantiate-trait" definition (public) #f 208 20 208 37 ("setup-client-type" "setup-client-type~" "instantiate" "instantiate~" "trait" "let" "form" "type")}
      {Lisp-Entry "resolve-trait" definition (public) #f 214 20 214 33 ("error" "else" "resolve-parameters" "resolve-parameters~" "Trait-Reference" "Trait" "is?" "get-creator" "get-creator~" "child" "child~" "assert" "symbol?" "cond" "obj" "context")}
      {Lisp-Entry "32-bit-integer->version" definition (public) #f 231 20 231 43 ("Version" "new" "revision" "100" "1000" "modulo" "minor" "100000" "quotient" "major" "let" "version")}
      {Lisp-Entry "find-process" definition (public) #f 243 20 243 32 ("get-process" "jazz.system" "module-ref")}
      {Lisp-Entry "find-application" definition (public) #f 247 20 247 36 ("get-application" "jazz.system" "module-ref")}
      {Lisp-Entry "get-reference-import" definition (public) #f 256 20 256 40 ("get-runtime-reference" "get-runtime-reference~" "serialize-runtime-reference" "second" "reference")}
      {Lisp-Entry "resource?" definition (public inline) #f 266 27 266 36 ("Resource" "is?" "object")}
      {Lisp-Entry "disabled-image-resource" definition (public) #f 270 20 270 43 ("get-name" "get-name~" "string-append" "Image-Resource" "new" "resource")}
      {Lisp-Entry "with-execution-context" definition (public undocumented) #f 279 33 279 55 ("Execution-Context" "new" "context" "with" "reporter" "reporter:" "details" "details:" "title" "title:" "proc")}
      {Lisp-Entry "with-execution-node" definition (public undocumented) #f 287 33 287 52 ("Execution-Node" "new" "node" "with" "reporter" "reporter:" "details" "details:" "title" "title:" "proc")}
      {Lisp-Entry "get-execution-context" definition (public undocumented) #f 295 33 295 54 ("get-active-context" "get-active-context~" "current-thread" "thread" "let" "get-execution-context" "unimplemented")}
      {Lisp-Entry "get-execution-stack" definition (public undocumented) #f 302 33 302 52 ("get-previous-node" "get-previous-node~" "Execution-Context" "is-not?" "and" "cons" "set!" "while" "lst" "get-active-node" "get-active-node~" "node" "current-thread" "thread" "let*" "get-execution-stack" "unimplemented")}
      {Lisp-Entry "Execution-Node" class () #f 314 7 314 21 ("Object")
        {Lisp-Entry "title" slot () #f 317 8 317 13 ()}
        {Lisp-Entry "details" slot () #f 318 8 318 15 ()}
        {Lisp-Entry "reporter" slot () #f 319 8 319 16 ()}
        {Lisp-Entry "previous-node" slot () #f 320 8 320 21 ()}
        {Lisp-Entry "initialize" definition () #f 323 15 323 25 ("destroy-mandatory" "set-active-node" "set-active-node~" "get-active-node" "get-active-node~" "previous-node" "previous-node~self" "current-thread" "thread" "let" "reporter~self" "details~self" "self" "title~self" "set!" "nextmethod" "reporter" "reporter:" "details" "details:" "title" "title:")}
        {Lisp-Entry "destroy" definition () #f 334 15 334 22 ("nextmethod" "previous-node" "set-active-node" "set-active-node~" "current-thread" "thread" "let")}
        {Lisp-Entry "get-title" definition (public) #f 340 22 340 31 ("title")}
        {Lisp-Entry "get-details" definition (public) #f 344 22 344 33 ("details")}
        {Lisp-Entry "get-reporter" definition (public) #f 348 22 348 34 ("reporter")}}
      {Lisp-Entry "Execution-Context" class () #f 352 7 352 24 ("initialize" "Execution-Node")
        {Lisp-Entry "previous-context" slot () #f 355 8 355 24 ()}
        {Lisp-Entry "continuable?" slot () #f 356 8 356 20 ()}
        {Lisp-Entry "auto-continue?" slot () #f 357 8 357 22 ()}
        {Lisp-Entry "initialize" definition () #f 360 15 360 25 ("destroy-mandatory" "set-active-context" "set-active-context~" "get-active-context" "get-active-context~" "self" "previous-context" "previous-context~self" "set!" "current-thread" "thread" "let" "nextmethod" "apply" "rest")}
        {Lisp-Entry "destroy" definition () #f 368 15 368 22 ("nextmethod" "previous-context" "set-active-context" "set-active-context~" "current-thread" "thread" "let")}
        {Lisp-Entry "get-continuable?" definition (public) #f 374 22 374 38 ("continuable?")}
        {Lisp-Entry "set-continuable?" definition (public) #f 378 22 378 38 ("continuable?" "set!" "value")}
        {Lisp-Entry "get-auto-continue?" definition (public) #f 382 22 382 40 ("auto-continue?")}
        {Lisp-Entry "set-auto-continue?" definition (public) #f 386 22 386 40 ("auto-continue?" "set!" "value")}}
      {Lisp-Entry "with-continue" definition (public) #f 396 20 396 33 ("Continue" "catch" "set-continuable?" "set-continuable?~" "begin" "unwind-protect" "get-continuable?" "get-continuable?~" "preserved" "error" "not" "if" "get-execution-context" "context" "let" "with-continue" "unimplemented" "proc")}
      {Lisp-Entry "continuable?" definition (public) #f 412 20 412 32 ("get-continuable?" "get-continuable?~" "and" "get-execution-context" "context" "let" "continuable?" "unimplemented" "exception")}
      {Lisp-Entry "continue-exception" definition (public) #f 420 20 420 38 ("Continue" "new" "throw" "continue" "unimplemented" "exception")}
      {Lisp-Entry "Restartable?" definition (public) #f 432 19 432 31 ()}
      {Lisp-Entry "with-restart" definition (public) #f 437 20 437 32 ("when" "return" "Restart" "catch" "while" "set!" "begin" "unwind-protect" "Restartable?" "preserved" "let" "with-restart" "unimplemented" "cleanup" "proc")}
      {Lisp-Entry "restartable?" definition (public) #f 454 20 454 32 ("Restartable?" "exception")}
      {Lisp-Entry "restart" definition (public) #f 459 20 459 27 ("Restart" "new" "throw" "restart" "unimplemented" "exception")}
      {Lisp-Entry "different-times?" definition (public) #f 470 20 470 36 ("time->seconds" "-" "abs" ">" "2" "tolerance" "tolerance:" "time2" "time1")}
      {Lisp-Entry "different-file-content?" definition (public) #f 475 20 475 43 ("else" "eqv?" "eof-object?" "cond" "u2" "read-u8" "u1" "iterate" "let" "get-size" "get-size~" "/=" "or" "input2" "input1" "lambda" "cr-lf" "eol-encoding:" "path-settings" "call-with-input-file" "extension=?" "test:" "Text-Extensions" "get-extension" "get-extension~" "member?" "and" "if" "char-encoding-errors:" "load-lines" "load-lines~" "equal?" "not" "different-text-file-content?" "define" "file2" "file1")}
      {Lisp-Entry "different-file-content-no-whitespace?" definition (public) #f 502 20 502 57 ("read-content-string" "wi=" "not" "input2" "input1" "lambda" "cr-lf" "eol-encoding:" "char-encoding-errors:" "UTF" "char-encoding:" "path-settings" "call-with-input-file" "file2" "file1")}
      {Lisp-Entry "*event-hooks*" definition () #f 516 12 516 25 ()}
      {Lisp-Entry "register-event-hook" definition (public) #f 520 20 520 39 ("list" "append" "*event-hooks*" "set!" "hook")}
      {Lisp-Entry "unregister-event-hook" definition (public) #f 523 20 523 41 ("remove!" "*event-hooks*" "set!" "hook")}
      {Lisp-Entry "hook-event" definition (public) #f 527 20 527 30 ("*event-hooks*" "hook" "lambda" "for-each" "prog1" "proc" "event" "action/handler")}
      {Lisp-Entry "designing?" definition (public) #f 540 19 540 29 ("make-parameter")}
      {Lisp-Entry "Class-Descriptors" definition () #f 549 12 549 29 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-descriptor-hook" definition () #f 553 12 553 31 ()}
      {Lisp-Entry "set-descriptor-hook" definition (public) #f 556 20 556 39 ("get-descriptor-hook" "set!" "proc")}
      {Lisp-Entry "get-descriptor" definition (public undocumented) #f 560 33 560 47 ("table-set!" "set-name" "set-name~" "get-class-descriptor" "get-class-descriptor~" "descriptor" "Class-Descriptors" "table-ref" "or" "category-identifier" "name" "let" "get-descriptor-hook" "if" "model")}
      {Lisp-Entry "get-properties-descriptor" definition (public undocumented) #f 571 33 571 58 ("properties" "find-component" "find-component~" "when" "get-descriptor" "class-descriptor" "let" "model")}
      {Lisp-Entry "get-property-descriptor" definition (public undocumented) #f 577 33 577 56 ("find-component" "find-component~" "when" "get-properties-descriptor" "properties-descriptor" "let" "name" "model")}
      {Lisp-Entry "display-tabulated" definition (public undocumented) #f 588 33 588 50 ("print-to" "print-to~" "newline" "newline~" "->string" "output~" "column" "object" "row" "lambda" "for-each" "add-columns" "add-columns~" "left" "alignment:" "border-after:" "Aligned-Column" "Display-Column" "=" "if" "collect" "0" "from" "n" "in" "ignore" "for" "loop" "columns" "1" "length" "-" "last" "car" "sample" "Columns-Display" "new" "display" "let*" "display-tabulated" "unimplemented" "output" "data")}}})
"_listener"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "listener" "_listener.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.listener" module () #f 37 8 37 29 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "add-listener" definition (public) #f 43 20 43 32 ("cons" "lst" "listener")}
      {Lisp-Entry "remove-listener" definition (public) #f 47 20 47 35 ("listener-target?" "test:" "remove!" "Handler" "is?" "if" "lst" "listener")}
      {Lisp-Entry "listener?" definition (public) #f 53 20 53 29 ("listener-target?" "test:" "member?" "lst" "object")}
      {Lisp-Entry "listener-target?" definition () #f 57 13 57 29 ("get-target" "get-target~" "eq?" "listener" "object")}}})
"_locale"
 ({Lisp-File-Entry {File :context "src" "jazz" "locale" "_locale.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.locale" module () #f 37 8 37 19 ("jazz")
      {Lisp-Entry "Locale" class () #f 45 7 45 13 ("Object")
        {Lisp-Entry "name" slot () #f 48 8 48 12 ()}
        {Lisp-Entry "get-name" accessor #f #f 48 22 48 30 ()}
        {Lisp-Entry "titles" slot () #f 49 8 49 14 ()}
        {Lisp-Entry "get-titles" accessor #f #f 49 22 49 30 ()}
        {Lisp-Entry "initialize" method (override) #f 52 20 52 30 ("titles~self" "self" "name~self" "set!" "nextmethod" "titles" "name")}
        {Lisp-Entry "print" method (override) #f 58 20 58 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "present" method (public) #f 64 18 64 25 ("second" "get-locale" "titles" "getf" "or")}}
      {Lisp-Entry "Locales" class () #f 73 7 73 14 ("Object")
        {Lisp-Entry "locales" slot () #f 76 8 76 15 ()}
        {Lisp-Entry "get-locales" accessor #f #f 76 23 76 31 ()}
        {Lisp-Entry "initialize" method (override) #f 79 20 79 30 ("locales" "set!" "nextmethod" "rest")}
        {Lisp-Entry "print" method (override) #f 84 20 84 25 ("locales" "if" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "get-locale" method (public) #f 96 18 96 28 ("locales" "getf" "locale")}
        {Lisp-Entry "localize" method (public) #f 105 18 105 26 ("second" "locales" "getf" "or" "locale")}}
      {Lisp-Entry "*locale-table*" definition () #f 109 12 109 26 ("eq?" "test:" "make-table")}
      {Lisp-Entry "*active-locale*" definition () #f 112 12 112 27 ("english:")}
      {Lisp-Entry "get-locales" definition (public) #f 116 20 116 31 ("keyword->string" "key:" "*locale-table*" "table-keys" "string<?" "sort")}
      {Lisp-Entry "registered-locale" definition (public) #f 119 20 119 37 ("*locale-table*" "table-ref" "name")}
      {Lisp-Entry "register-locale" definition (public) #f 122 20 122 35 ("*locale-table*" "table-set!" "get-name" "get-name~" "name" "let" "locale")}
      {Lisp-Entry "unregister-locale" definition (public) #f 126 20 126 37 ("*locale-table*" "table-clear" "get-name" "get-name~" "name" "let" "locale")}
      {Lisp-Entry "get-locale" definition (public) #f 131 20 131 30 ("*active-locale*")}
      {Lisp-Entry "set-locale" definition (public) #f 135 20 135 30 ("set!" "*active-locale*" "neq?" "when" "let" "locale-changes" "proc" "lambda" "for-each" "call-locale-changes" "error" "else" "symbol?" "enumerator->symbol" "symbol->keyword" "enumerator?" "keyword?" "cond" "standardize-locale" "define" "update?" "update?:" "loc")}
      {Lisp-Entry "locale-changes" definition () #f 153 12 153 26 ()}
      {Lisp-Entry "register-locale-change" definition (public) #f 156 20 156 42 ("cons" "locale-changes" "set!" "proc")}
      {Lisp-Entry "unregister-locale-change" definition (public) #f 159 20 159 44 ("remove!" "locale-changes" "set!" "proc")}
      {Lisp-Entry "localize" definition (public) #f 163 20 163 28 ("*active-locale*" "localize" "localize~" "Locales" "is?" "if" "object")}
      {Lisp-Entry "localize-to" definition (public) #f 169 20 169 31 ("localize" "localize~" "Locales" "is?" "if" "locale" "object")}
      {Lisp-Entry "present-locale" definition (public) #f 175 20 175 34 ("registered-locale" "present" "present~" "locale")}}})
"_prototype"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "prototype" "_prototype.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.prototype" module () #f 37 8 37 30 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Prototype-Class" class () #f 48 7 48 22 ("eq?" "test:" "make-table" "initialize" "Component" ":class")
        {Lisp-Entry "properties" slot () #f 51 8 51 18 ()}
        {Lisp-Entry "get-property" method () #f 54 11 54 23 ("properties" "table-ref" "field-name")}
        {Lisp-Entry "set-property" method () #f 57 11 57 23 ("properties" "table-set!" "property" "field-name")}
        {Lisp-Entry "mop-category-field" method (override) #f 61 20 61 38 ("set-property" "set" "set~" "value" "get" "get~" "prototype" "lambda" "new-property" "property" "let" "get-property" "nextmethod" "or" "field-name")}
        {Lisp-Entry "mop-field-value" method (override) #f 73 20 73 35 ("property")}
        {Lisp-Entry "mop-instance-slots" method (override) #f 77 20 77 38 ("get-table" "get-table~" "table-keys" "get-property" "map" "object")}}
      {Lisp-Entry "Prototype" class () #f 86 7 86 16 ("eq?" "test:" "make-table" "initialize" "set-facets" "Component" "Prototype-Class")
        {Lisp-Entry "facets" property () #f 89 12 89 18 ()}
        {Lisp-Entry "get-facets" accessor #f #f 89 26 89 34 ()}
        {Lisp-Entry "table" slot () #f 92 8 92 13 ()}
        {Lisp-Entry "get-table" accessor #f #f 92 55 92 63 ()}
        {Lisp-Entry "print" method (override) #f 95 20 95 25 ("table" "table->list" "alist->plist" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "set-facets" method () #f 101 11 101 21 ("listify" "for-each" "self" "facets~self" "set!" "set" "get-table" "get-table~" "iterate-table" "creator" "locate" "locate~" "symbol?" "if" "let" "facet" "clone-facet" "define" "facets")}
        {Lisp-Entry "get" method (public) #f 113 18 113 21 ("table" "table-ref" "name")}
        {Lisp-Entry "set" method (public) #f 117 18 117 21 ("table" "table-set!" "value" "name")}}}})
"_runtime"
 ({Lisp-File-Entry {File :context "src" "jazz" "runtime" "_runtime.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.runtime" module () #f 37 8 37 20 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.io")}
      {Lisp-Entry "find-unit-source" definition (public) #f 48 20 48 36 ("tokenise-filename" "File" "new" "anchorize" "anchorize~" "path" "resource-pathname" "not" "if" "find-unit-src" "src" "let" "find-unit-path" "define" "unit-name")}
      {Lisp-Entry "split-locator" definition (public) #f 66 20 66 33 ("car" "cons" "cdr" "values" "find-unit-source" "compose-reference" "apply" "unit-name" "not-null?" "if" "name" "split-reference" "reverse" "scan" "iterate" "let" "locator")}
      {Lisp-Entry "locator->declaration" definition (public) #f 77 20 77 40 ("Module-Declaration" "is?" "outline-unit" "split-locator" "declaration-path" "unit-name" "receive" "cdr" "when" "car" "find-declaration" "subdeclaration" "let" "null?" "if" "path" "declaration" "locate" "define" "locator")}
      {Lisp-Entry "parse-runtime-reference" definition (public) #f 97 20 97 43 ("cdr" "car" "list" "second" "split-locator" "rest" "unit" "receive" "module-private" "first" "eq?" "if" "serialize-runtime-reference" "ser" "let" "runtime-reference")}
      {Lisp-Entry "repository-units" definition (public) #f 110 20 110 36 ("symbol->string" "key:" "table-keys" "string<?" "sort" "package-products" "clause" "symbol?" "if" "table-set!" "else" "package-name" "duplicate" "debug" "cond" "table-ref" "actual-package" "phase" "declaration" "unit-name" "for-each-subunit" "updated-name" "process-updated-name" "define" "updated-name/cond" "updated-names" "when" "cdr" "update" "assq" "pair" "product" "for-each" "package" "lambda" "iterate-packages" "eq?" "test:" "make-table" "table" "let" "load-build" "repository")}
      {Lisp-Entry "iterate-packages" definition (public) #f 138 20 138 36 ("repository-packages" "for-each" "proc" "repository")}
      {Lisp-Entry "iterate-units" definition (public) #f 142 20 142 33 ("repository-units" "increase!" "when" "unit-name" "repository-binary?" "unless" "repository" "lambda" "for-each" "get-repositories" "or" "0" "count" "let" "feedback" "feedback:" "repositories" "repositories:" "proc")}
      {Lisp-Entry "outline-all" definition (public) #f 156 20 156 31 ("outline-unit" "iterate-units" "feedback" "feedback:")}
      {Lisp-Entry "walk-all" definition (public) #f 160 20 160 28 ("walk-unit" "iterate-units" "feedback" "feedback:")}
      {Lisp-Entry "expand-all" definition (public) #f 164 20 164 30 ("expand-unit" "iterate-units" "feedback" "feedback:")}
      {Lisp-Entry "load-all" definition (public) #f 168 20 168 28 ("load-unit" "iterate-units" "feedback" "feedback:")}
      {Lisp-Entry "load-statistics" definition (public) #f 177 20 177 35 ("interpreted-load-counter" "interpreted:" "object-load-counter" "object:" "image-load-counter" "image:" "list")}}})
"_template"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "template" "_template.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.library.template" module () #f 37 8 37 29 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.io")}
      {Lisp-Entry "name-delimiter-start" definition () #f 44 12 44 32 ()}
      {Lisp-Entry "name-delimiter-end" definition () #f 47 12 47 30 ()}
      {Lisp-Entry "content-delimiter-start" definition () #f 50 12 50 35 ()}
      {Lisp-Entry "content-delimiter-end" definition () #f 53 12 53 33 ()}
      {Lisp-Entry "copy-template" definition (public) #f 57 20 57 33 ("file?" "copy-pathname" "recursive?:" "directories?:" "files?:" "full?:" "new-directory" "new-directory~" "directory" "new-file" "new-file~" "file" "case" "car" "kind" "path" "iterate-directory" "iterate-directory~" "create-directories" "create-directories~" "touch-files?:" "copy-directory~" "root?" "copy-directory" "path-settings" "call-with-output-file" "copy-file~" "ci=?" "test:" "member?" "exists?" "exists?~" "unless" "copy-file" "get-name" "get-name~" "new-brother" "new-brother~" "pathname" "expand-pathname" "get-output-string" "format" "continuation-return" "list?" "if" "value" "printer:" "expand" "expand~" "open-output-string" "output" "return" "lambda" "continuation-capture" "name" "expand-name" "define" "content-delimiter-end" "content-delimiter-start" "content-expander" "name-delimiter-end" "delimiter-end:" "name-delimiter-start" "delimiter-start:" "Template-Expander" "new" "name-expander" "let" "non-expanded-leaves" "non-expanded-leaves:" "non-expanded-nodes" "non-expanded-nodes:" "associations" "destination" "template")}}})
"_tie"
 ({Lisp-File-Entry {File :context "src" "jazz" "tie" "_tie.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.tie" module () #f 37 8 37 16 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("syntax" "phase" "jazz.tie.syntax")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "autoload.jazz"} 245834379. jazz
    {Lisp-Entry "jazz.library.autoload" module (protected) #f 37 18 37 39 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("Version" "jazz.library.utility.Version" "Undoer" "jazz.library.utility.Undoer" "Trait-Reference" "jazz.library.utility.Trait-Reference" "Timer" "jazz.library.utility.Timer" "Reference" "jazz.library.utility.Reference" "Pulse" "jazz.library.utility.Pulse" "Period" "jazz.library.utility.Period" "Output-Log" "jazz.library.utility.Output-Log" "Loggable" "jazz.library.utility.Loggable" "Locator" "jazz.library.utility.Locator" "Handler-Reference" "jazz.library.utility.Handler-Reference" "Environment-Provider" "jazz.library.utility.Environment-Provider" "Environment" "jazz.library.utility.Environment" "Class-Reference" "jazz.library.utility.Class-Reference" "Box" "jazz.library.utility.Box" "Template-Expander" "jazz.library.template.Template-Expander" "Sound-Resource" "jazz.library.resource.Sound-Resource" "Resource" "jazz.library.resource.Resource" "Icon-Resource" "jazz.library.resource.Icon-Resource" "Cursor-Resource" "jazz.library.resource.Cursor-Resource" "Image-Resource" "jazz.library.resource.Image-Resource" "Reporter" "jazz.library.reporter.Reporter" "Multiplexer-Reporter" "jazz.library.reporter.Multiplexer-Reporter" "Log-Reporter" "jazz.library.reporter.Log-Reporter" "Regular-Expression" "jazz.library.regexp.Regular-Expression" "Path" "jazz.library.path.Path" "Sparse-Outline" "jazz.library.outline.Sparse-Outline" "Display-Outline" "jazz.library.outline.Display-Outline" "Outline" "jazz.library.outline.Outline" "URL" "jazz.library.moniker.URL" "Directory-Group-Class" "Directory-Group" "jazz.library.moniker.Directory-Group" "Category-Moniker" "jazz.library.moniker.Category-Moniker" "Manifest" "jazz.library.manifest.Manifest" "Violations-Manager" "jazz.library.integrity.Violations-Manager" "Violations-Found" "jazz.library.integrity.Violations-Found" "Integrity-Violation" "jazz.library.integrity.Integrity-Violation" "Integrity-Manager" "jazz.library.integrity.Integrity-Manager" "Integrity-Constraint" "jazz.library.integrity.Integrity-Constraint" "History-Provider" "jazz.library.history.History-Provider" "History-Manager" "jazz.library.history.History-Manager" "History-Item" "jazz.library.history.History-Item" "Handler" "jazz.library.handler.Handler" "Event-Handler" "jazz.library.handler.Event-Handler" "Group-Descriptor" "Group" "jazz.library.group.Group" "Favorites" "jazz.library.favorite.Favorites" "Favorites-Tree" "jazz.library.favorite.Favorites-Tree" "Favorites-Manager" "jazz.library.favorite.Favorites-Manager" "Favorites-Editor" "jazz.library.favorite.Favorites-Editor" "Favorites-Adder" "jazz.library.favorite.Favorites-Adder" "Favorite-Search" "jazz.library.favorite.Favorite-Search" "Favorite-Launch" "jazz.library.favorite.Favorite-Launch" "Favorite-Handler" "jazz.library.favorite.Favorite-Handler" "Favorite-File" "jazz.library.favorite.Favorite-File" "Favorite-Directory" "jazz.library.favorite.Favorite-Directory" "Favorite-Definition" "jazz.library.favorite.Favorite-Definition" "Favorite-Clipboard" "jazz.library.favorite.Favorite-Clipboard" "Favorite-Descriptor" "Favorite" "jazz.library.favorite.Favorite" "Print-Sequencer" "jazz.library.factory.Print-Sequencer" "Formatter" "jazz.library.factory.Formatter" "Exemplar-Domain" "Exemplar" "jazz.library.exemplar" "Explore-Error" "jazz.library.exception.Explore-Error" "Event" "jazz.library.event.Event" "Entity-Factory" "jazz.library.entity.Entity-Factory" "Entity" "jazz.library.entity.Entity" "Sequenced-Column-Preferences" "jazz.library.display.Sequenced-Column-Preferences" "Sequenced-Column" "jazz.library.display.Sequenced-Column" "Indented-Column-Preferences" "jazz.library.display.Indented-Column-Preferences" "Indented-Column" "jazz.library.display.Indented-Column" "Display-Column" "jazz.library.display.Display-Column" "Columns-Display" "jazz.library.display.Columns-Display" "Column-Preferences-Descriptor" "Column-Preferences" "jazz.library.display.Column-Preferences" "Aligned-Column-Preferences" "jazz.library.display.Aligned-Column-Preferences" "Aligned-Column" "jazz.library.display.Aligned-Column" "Cryptography-Provider" "jazz.library.cryptography.Cryptography-Provider" "Event-Consumer" "jazz.library.consumer.Event-Consumer" "Consumer" "jazz.library.consumer.Consumer" "Trait-Descriptor" "Trait" "jazz.library.component.Trait" "Restore-Form" "jazz.library.component.Restore-Form" "Form" "jazz.library.component.Form" "Data" "jazz.library.component.Data" "Component" "jazz.library.component.Component" "Branch" "jazz.library.component.Branch" "Canvas-Node" "jazz.library.canvas.Canvas-Node" "Canvas-Manager" "jazz.library.canvas.Canvas-Manager" "Canvas-Element" "jazz.library.canvas.Canvas-Element" "Canvas" "autoload" "jazz.library.canvas.Canvas")}}})
"geometry"
 ({Lisp-File-Entry {File :context "src" "jazz" "geometry.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.geometry" module () #f 37 8 37 21 ("jazz")
      {Lisp-Entry "PI" constant () #f 45 10 45 12 ("3.14159265358979323846")}
      {Lisp-Entry "PI*2" constant () #f 46 10 46 14 ("2." "PI" "*")}
      {Lisp-Entry "PI/2" constant () #f 47 10 47 14 ("2." "PI" "/")}
      {Lisp-Entry "PI/4" constant () #f 48 10 48 14 ("4." "PI" "/")}
      {Lisp-Entry "degree->radian" definition (public) #f 51 20 51 34 ("360." "PI*2" "*" "/" "fl" "<fl>" "angle")}
      {Lisp-Entry "radian->degree" definition (public) #f 55 20 55 34 ("360." "PI*2" "*" "/" "fl" "<fl>" "angle")}
      {Lisp-Entry "size-rect" definition (public) #f 69 20 69 29 ("get-height" "get-height~" "get-width" "get-width~" "0" "new" "Rect" "<Rect>" "Dimension" "<Dimension>" "size")}
      {Lisp-Entry "position/size->rect" definition (public) #f 73 20 73 39 ("get-v" "get-v~" "get-h" "get-h~" "h/v/size->rect" "Rect" "<Rect>" "Dimension" "<Dimension>" "size" "Point" "<Point>" "position")}
      {Lisp-Entry "h/v/size->rect" definition (public) #f 77 20 77 34 ("get-height" "get-height~" "get-width" "get-width~" "+" "new" "Rect" "<Rect>" "Dimension" "<Dimension>" "size" "v" "fx" "<fx>" "h")}
      {Lisp-Entry "h/v/width/height" definition (public) #f 81 20 81 36 ("+" "new" "Rect" "<Rect>" "height" "width" "v" "fx" "<fx>" "h")}
      {Lisp-Entry "corners->rect" definition (public) #f 85 20 85 33 ("get-v" "get-v~" "get-h" "get-h~" "new" "Rect" "<Rect>" "bottom-right" "Point" "<Point>" "top-left")}
      {Lisp-Entry "normalize-rect" definition (public) #f 89 20 89 34 ("<=" "if" "new" "get-bottom" "get-bottom~" "b" "get-right" "get-right~" "r" "get-top" "get-top~" "t" "get-left" "get-left~" "l" "let" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "rect->rect$fl$" definition (public) #f 101 20 101 34 ("get-bottom" "get-bottom~" "get-right" "get-right~" "get-top" "get-top~" "get-left" "get-left~" "Rect$fl$" "new" "rect")}
      {Lisp-Entry "rect-position" definition (public) #f 109 20 109 33 ("get-top" "get-top~" "get-left" "get-left~" "new" "Point" "<Point>" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "rect-end-position" definition (public) #f 112 20 112 37 ("get-bottom" "get-bottom~" "get-right" "get-right~" "new" "Point" "<Point>" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "rect-size" definition (public) #f 115 20 115 29 ("rect-height" "rect-width" "new" "Dimension" "<Dimension>" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "rect-width" definition (public) #f 121 20 121 30 ("get-left" "get-left~" "get-right" "get-right~" "-" "fx" "<fx>" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "rect-height" definition (public) #f 125 20 125 31 ("get-top" "get-top~" "get-bottom" "get-bottom~" "-" "fx" "<fx>" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "offset-rect" definition (public) #f 129 20 129 31 ("get-bottom" "get-bottom~" "get-right" "get-right~" "get-top" "get-top~" "get-left" "get-left~" "+" "new" "v" "fx" "<fx>" "h" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "offset-rect!" definition (public) #f 137 20 137 32 ("get-bottom" "get-bottom~" "set-bottom" "set-bottom~" "get-right" "get-right~" "set-right" "set-right~" "get-top" "get-top~" "set-top" "set-top~" "get-left" "get-left~" "+" "set-left" "set-left~" "void" "<void>" "v" "fx" "<fx>" "h" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "inflate-rect" definition (public) #f 144 20 144 32 ("get-bottom" "get-bottom~" "get-right" "get-right~" "+" "get-top" "get-top~" "get-left" "get-left~" "-" "new" "h" "number" "<number>" "w" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "inflate-rect" specialize () #f 152 13 152 25 ("get-bottom" "get-bottom~" "get-right" "get-right~" "+" "get-top" "get-top~" "get-left" "get-left~" "-" "new" "h" "fx" "<fx>" "w" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "inflate-rect" specialize () #f 160 13 160 25 ("get-bottom" "get-bottom~" "get-right" "get-right~" "+" "get-top" "get-top~" "get-left" "get-left~" "-" "new" "Rect$fl$" "<Rect$fl$>" "h" "fl" "<fl>" "w" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "expand-rect" definition (public) #f 168 20 168 31 ("get-bottom" "get-bottom~" "get-right" "get-right~" "get-top" "get-top~" "get-left" "get-left~" "+" "new" "b" "r" "t" "fx" "<fx>" "l" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "inset-rect" definition (public) #f 176 20 176 30 ("get-bottom" "get-bottom~" "get-right" "get-right~" "-" "get-top" "get-top~" "get-left" "get-left~" "+" "new" "inset" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "base-rect" definition (public) #f 184 20 184 29 ("get-top" "get-top~" "get-left" "get-left~" "-" "offset-rect" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "fit-dimensions" definition (public) #f 188 20 188 34 (">" "if" "both" "height" "width" "min" "fit" "max" "fill" "case" "rh" "fl" "<fl>" "cast" "/" "rw" "sh" "sw" "get-height" "get-height~" "dh" "get-width" "get-width~" "dw" "let" "mode" "dst" "src")}
      {Lisp-Entry "fit-rects" definition (public) #f 203 20 203 29 ("rect-size" "fit-dimensions" "mode" "dst" "src")}
      {Lisp-Entry "fit-within" definition (public) #f 207 20 207 30 ("values" "get-v" "get-v~" "get-h" "get-h~" "between" "new-position" "max-position" "Point" "min-position" "new" "new-size" "get-height" "get-height~" "height" "-" "min" "get-width" "get-width~" "max" "width" "rect-position" "position" "rect-size" "size" "let*" "padding" "padding:" "0" "Dimension" "minimum-size" "minimum-size:" "rect" "outer")}
      {Lisp-Entry "rect-union" definition (public) #f 219 20 219 30 ("get-bottom" "get-bottom~" "get-right" "get-right~" ">" "get-top" "get-top~" "get-left" "get-left~" "<" "if" "new" "y" "Rect" "<Rect>" "x")}
      {Lisp-Entry "rect-intersection" definition (public) #f 227 20 227 37 ("0" "get-bottom" "get-bottom~" "get-right" "get-right~" "<" "get-top" "get-top~" "get-left" "get-left~" ">" "new" "rect-intersect?" "if" "y" "Rect" "<Rect>" "x")}
      {Lisp-Entry "rect-intersect?" definition (public) #f 237 20 237 35 (">" "get-bottom" "get-bottom~" "get-top" "get-top~" "get-right" "get-right~" "get-left" "get-left~" "<" "and" "bool" "<bool>" "y" "Rect" "<Rect>" "x")}
      {Lisp-Entry "rects-intersect?" definition (public) #f 244 20 244 36 ("get-bottom" "get-bottom~" "get-right" "get-right~" ">" "get-height" "get-height~" "get-v" "get-v~" "get-top" "get-top~" "get-width" "get-width~" "get-h" "get-h~" "+" "get-left" "get-left~" "<" "and" "bool" "<bool>" "Dimension" "<Dimension>" "size" "Point" "<Point>" "position" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "in-rect?" definition (public) #f 251 20 251 28 ("get-bottom" "get-bottom~" "get-right" "get-right~" "<" "get-top" "get-top~" "get-v" "get-v~" "get-left" "get-left~" "get-h" "get-h~" ">=" "and" "bool" "<bool>" "Rect" "<Rect>" "rect" "Point" "<Point>" "pt")}
      {Lisp-Entry "rect-in-rect?" definition (public) #f 258 20 258 33 ("get-bottom" "get-bottom~" "get-right" "get-right~" "<=" "get-top" "get-top~" "get-left" "get-left~" ">=" "and" "bool" "<bool>" "rect" "Rect" "<Rect>" "r")}
      {Lisp-Entry "rect-inside-border?" definition (public) #f 265 20 265 39 ("get-bottom" "get-bottom~" "-" "get-right" "get-right~" "<" "get-top" "get-top~" "+" "get-left" "get-left~" ">" "and" "bool" "<bool>" "insets" "border" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "in-size?" definition (public) #f 272 20 272 28 ("get-height" "get-height~" "get-width" "get-width~" "<" "get-v" "get-v~" "0" "get-h" "get-h~" ">=" "and" "bool" "<bool>" "Dimension" "<Dimension>" "size" "Point" "<Point>" "pt")}
      {Lisp-Entry "add-rects" definition (public) #f 279 20 279 29 ("get-bottom" "get-bottom~" "get-right" "get-right~" "get-top" "get-top~" "get-left" "get-left~" "+" "new" "r2" "Rect" "<Rect>" "r1")}
      {Lisp-Entry "subtract-rects" definition (public) #f 287 20 287 34 ("get-bottom" "get-bottom~" "get-right" "get-right~" "get-top" "get-top~" "get-left" "get-left~" "-" "new" "r2" "Rect" "<Rect>" "r1")}
      {Lisp-Entry "inverse-rect" definition (public) #f 295 20 295 32 ("get-bottom" "get-bottom~" "get-right" "get-right~" "get-top" "get-top~" "get-left" "get-left~" "-" "new" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "transpose-rect" definition (public) #f 303 20 303 34 ("get-right" "get-right~" "get-bottom" "get-bottom~" "get-left" "get-left~" "get-top" "get-top~" "new" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "positive-rect?" definition (public) #f 311 20 311 34 ("get-right" "get-right~" "get-bottom" "get-bottom~" "get-left" "get-left~" "0" "get-top" "get-top~" ">=" "and" "bool" "<bool>" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "points-bounding-box" definition (public) #f 318 20 318 39 ("last" "first" "new" "get-v" "get-v~" "vs" "get-h" "get-h~" "map" "<" "sort" "hs" "let" "Rect" "<Rect>" "Point+" "<Point+>" "pts")}
      {Lisp-Entry "center" definition (public) #f 329 20 329 26 ("center" "justify" "Dimension" "is?" "if" "outer" "inner")}
      {Lisp-Entry "justify" definition (public) #f 335 20 335 27 ("class-of" "category-identifier" "number?" "second" "get-height" "get-height~" "first" "get-width" "get-width~" "Point" "new" "Dimension" "is?" "and" "cond" "error" "else" "tail" "2" "quotient" "center" "head" "case" "+" "-" "0" ">=" "integer?" "if" "j" "o" "i" "just" "define" "justification" "outer" "inner")}
      {Lisp-Entry "justify-lazy" definition (public) #f 359 20 359 32 ("or" "Point" "new" "second" "first" "let" "pair?" "if" "justify" "non-lazy" "else" "positive?" "number?" "and" "0" "head" "eq?" "cond" "j" "direct" "define" "justification" "outer" "inner")}
      {Lisp-Entry "naturals-cycle" definition (public) #f 385 20 385 34 ("get-output" "get-output~" "+" "put" "put~" "by" "m" "do" "below" "0" "from" "n" "for" "loop" "quotient" "inc" "*" "cardinality" "List-Factory" "new" "fact" "let*" "subcycle" "cycle")}
      {Lisp-Entry "fit" definition (public) #f 395 20 395 23 ("else" "-" ">=" "and" "+" "<=" "0" ">" "cond" "padding" "max" "size" "fx+" "<fx+>" "alternate" "fx" "<fx>" "pos")}
      {Lisp-Entry "fit-point" definition (public) #f 404 20 404 29 ("get-height" "get-height~" "get-v" "get-v~" "get-width" "get-width~" "and" "get-h" "get-h~" "fit" "new" "padding" "max" "Dimension" "<Dimension>" "size" "Point+" "<Point+>" "alternate" "Point" "<Point>" "pos")}
      {Lisp-Entry "scalar-product" definition (public) #f 410 20 410 34 ("get-v" "get-v~" "get-h" "get-h~" "*" "+" "b" "Point" "<Point>" "a")}
      {Lisp-Entry "line-distance" definition (public) #f 414 20 414 33 ("new" "scalar-product" "fl" "<fl>" "cast" "/" "abs" "0" "=" "if" "get-v" "get-v~" "get-h" "get-h~" "-" "sqr" "+" "sqrt" "divider" "let" "end" "start" "Point" "<Point>" "point")}
      {Lisp-Entry "resize-parts" definition (package) #f 435 21 435 33 ("naturals" "1" "<=" "between?" "or" "n" "lambda" "map" "end2" "-1" "end" "start" "parity" "modulo" "+" "extra" "-" "quotient" "base" "0" "<" "if" "offset" "let*" "count" "delta" "size")}
      {Lisp-Entry "scale" definition (public) #f 448 20 448 25 ("Number" "get-bottom" "get-bottom~" "bottom" "get-right" "get-right~" "right" "get-top" "get-top~" "top" "get-left" "get-left~" "left" "Rect" "get-height" "get-height~" "height" "get-width" "get-width~" "width" "Dimension" "*" "fxround" "new" "get-v" "get-v~" "v" "get-h" "get-h~" "fx" "<fx>" "h" "Point" "typecase" "fl" "<fl>" "cast" "let" "sc" "shape")}
      {Lisp-Entry "get-area" definition (public) #f 477 20 477 28 ("get-height" "get-height~" "get-width" "get-width~" "*" "size")}}})
"install"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "install.scm"} 245834379. scheme
    {Lisp-Entry "jazz.library.install" unit () #f 37 6 37 26 ()
      {Lisp-Entry "Reference" define #f ("literal-walker") 40 28 40 37 ("walk-reference" "jazz.library.literals" "jazz.library.literals:walk-reference")}
      {Lisp-Entry "Class-Reference" define #f ("literal-walker") 41 28 41 43 ("walk-class-reference" "jazz.library.literals" "jazz.library.literals:walk-class-reference")}
      {Lisp-Entry "Handler-Reference" define #f ("literal-walker") 42 28 42 45 ("walk-handler-reference" "jazz.library.literals" "jazz.library.literals:walk-handler-reference")}
      {Lisp-Entry "Trait-Reference" define #f ("literal-walker") 43 28 43 43 ("walk-trait-reference" "jazz.library.literals" "jazz.library.literals:walk-trait-reference")}
      {Lisp-Entry "Event-Handler" define #f ("literal-walker") 44 28 44 41 ("walk-handler" "jazz.library.literals" "jazz.library.literals:walk-handler")}
      {Lisp-Entry "Box" define #f ("literal") 47 21 47 24 ("construct-box" "jazz.library.literals" "jazz.library.literals:construct-box")}
      {Lisp-Entry "Manifest" define #f ("literal") 48 21 48 29 ("construct-manifest" "jazz.library.literals" "jazz.library.literals:construct-manifest")}
      {Lisp-Entry "Directory-Group" define #f ("literal") 49 21 49 36 ("construct-directory-group" "jazz.library.literals" "jazz.library.literals:construct-directory-group")}
      {Lisp-Entry "Locales" define #f ("literal") 50 21 50 28 ("construct-locales" "jazz.library.literals" "jazz.library.literals:construct-locales")}
      {Lisp-Entry "Image-Resource" define #f ("literal") 51 21 51 35 ("construct-image-resource" "jazz.library.literals" "jazz.library.literals:construct-image-resource")}
      {Lisp-Entry "Icon-Resource" define #f ("literal") 52 21 52 34 ("construct-icon-resource" "jazz.library.literals" "jazz.library.literals:construct-icon-resource")}
      {Lisp-Entry "Cursor-Resource" define #f ("literal") 53 21 53 36 ("construct-cursor-resource" "jazz.library.literals" "jazz.library.literals:construct-cursor-resource")}
      {Lisp-Entry "Reference" define #f ("literal") 54 21 54 30 ("construct-reference" "jazz.library.literals" "jazz.library.literals:construct-reference")}
      {Lisp-Entry "Class-Reference" define #f ("literal") 55 21 55 36 ("construct-class-reference" "jazz.library.literals" "jazz.library.literals:construct-class-reference")}
      {Lisp-Entry "Handler-Reference" define #f ("literal") 56 21 56 38 ("construct-handler-reference" "jazz.library.literals" "jazz.library.literals:construct-handler-reference")}
      {Lisp-Entry "Trait-Reference" define #f ("literal") 57 21 57 36 ("construct-trait-reference" "jazz.library.literals" "jazz.library.literals:construct-trait-reference")}
      {Lisp-Entry "Event" define #f ("literal") 58 21 58 26 ("construct-event" "jazz.library.literals" "jazz.library.literals:construct-event")}
      {Lisp-Entry "Event-Handler" define #f ("literal") 59 21 59 34 ("construct-event-handler" "jazz.library.literals" "jazz.library.literals:construct-event-handler")}
      {Lisp-Entry "Version" define #f ("literal") 60 21 60 28 ("construct-version" "jazz.library.literals" "jazz.library.literals:construct-version")}}})
"literals"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "literals.jazz"} 245834379. jazz
    {Lisp-Entry "jazz.library.literals" module () #f 37 8 37 29 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.locale" "jazz.library")}
      {Lisp-Entry "construct-box" definition (package) #f 49 21 49 34 ("car" "Box" "new" "null?" "if" "rest")}
      {Lisp-Entry "construct-manifest" definition (package) #f 60 21 60 39 ("Manifest" "new" "rest")}
      {Lisp-Entry "construct-directory-group" definition (package) #f 69 21 69 46 ("Directory-Group" "new" "rest")}
      {Lisp-Entry "construct-locales" definition (package) #f 78 21 78 38 ("Locales" "new" "apply" "rest")}
      {Lisp-Entry "construct-image-resource" definition (package) #f 87 21 87 45 ("Image-Resource" "new" "name")}
      {Lisp-Entry "construct-icon-resource" definition (package) #f 91 21 91 44 ("Icon-Resource" "new" "name")}
      {Lisp-Entry "construct-cursor-resource" definition (package) #f 95 21 95 46 ("Cursor-Resource" "new" "name")}
      {Lisp-Entry "walk-reference" definition (package) #f 104 21 104 35 ("car" "source-code" "proc" "arguments")}
      {Lisp-Entry "walk-class-reference" definition (package) #f 108 21 108 41 ("car" "source-code" "proc" "arguments")}
      {Lisp-Entry "walk-handler-reference" definition (package) #f 112 21 112 43 ("car" "source-code" "proc" "arguments")}
      {Lisp-Entry "walk-trait-reference" definition (package) #f 116 21 116 41 ("car" "source-code" "proc" "arguments")}
      {Lisp-Entry "construct-reference" definition (package) #f 120 21 120 40 ("Reference" "new" "symbol")}
      {Lisp-Entry "construct-class-reference" definition (package) #f 124 21 124 46 ("Class-Reference" "new" "symbol")}
      {Lisp-Entry "construct-handler-reference" definition (package) #f 128 21 128 48 ("Handler-Reference" "new" "parameters" "symbol")}
      {Lisp-Entry "construct-trait-reference" definition (package) #f 132 21 132 46 ("Trait-Reference" "new" "parameters" "symbol")}
      {Lisp-Entry "construct-event" definition (package) #f 141 21 141 36 ("Event" "new" "apply" "properties" "kind")}
      {Lisp-Entry "walk-handler" definition (package) #f 150 21 150 33 ("cadr" ":reference" "car" "source-code" "eq?" "when" "proc" "arguments")}
      {Lisp-Entry "construct-event-handler" definition (package) #f 155 21 155 44 ("properties:" "method-name:" "target-name:" "Event-Handler" "new" "properties" "method-name" "target-name")}
      {Lisp-Entry "construct-version" definition (package) #f 164 21 164 38 ("Version" "new" "stage" "0" "revision" "minor" "major")}}})
"log"
 ({Lisp-File-Entry {File :context "src" "jazz" "log.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.log" module () #f 37 8 37 16 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.jml" "jazz.io")}
      {Lisp-Entry "Log" class () #f 49 7 49 10 ("initialize" "Object")
        {Lisp-Entry "name" slot () #f 52 8 52 12 ()}
        {Lisp-Entry "get-name" accessor #f #f 52 44 52 52 ()}
        {Lisp-Entry "file" slot () #f 53 8 53 12 ()}
        {Lisp-Entry "get-file" accessor #f #f 53 44 53 52 ()}
        {Lisp-Entry "last-mark" slot () #f 54 8 54 17 ()}
        {Lisp-Entry "read-error?" slot () #f 55 8 55 19 ()}
        {Lisp-Entry "current-node" slot () #f 56 8 56 20 ()}
        {Lisp-Entry "get-current-node" accessor #f #f 56 44 56 52 ()}
        {Lisp-Entry "toplevel-nodes" slot () #f 57 8 57 22 ()}
        {Lisp-Entry "initialize" method (override) #f 60 20 60 30 ("load-toplevel-nodes" "when" "List-Factory" "new" "toplevel-nodes" "toplevel-nodes~self" "current-node" "current-node~self" "file~self" "self" "name~self" "set!" "nextmethod" "load?" "load?:" "file" "file:" "name" "name:")}
        {Lisp-Entry "get-toplevel-nodes" method (public) #f 75 18 75 36 ("toplevel-nodes" "get-list" "get-list~")}
        {Lisp-Entry "reload" method (public) #f 84 18 84 24 ("load-toplevel-nodes" "name" "error" "file" "not" "if")}
        {Lisp-Entry "load-toplevel-nodes" method () #f 90 11 90 30 ("put" "put~" "parse-jml" "node" "eof-object?" "not" "when" "read" "expr" "iterate" "let" "port" "lambda" "cr-lf" "eol-encoding:" "file" "path-settings" "call-with-input-file" "toplevel-nodes" "reset" "reset~")}
        {Lisp-Entry "load-toplevel-nodes" method () #f 103 11 103 30 ("toplevel-nodes" "put" "put~" "parse-jml" "node" "eof-object?" "read" "expr" "reader-file-mark" "not" "while" "err" "Error" "catch" "done?" "set-reader-file-mark" "when" "read/write" "sharing:" "File-Reader" "new" "input" "with" "set!" "format" "message-box" "column" "1" "+" "line" "file" "parse" "parse~" "file-path" "let" "last-mark" "=" "read-error?" "and" "if" "fourth" "get-mark-column" "third" "get-mark-line" "first" "mark" "get-mark-position" "current-mark" "handle-read-error" "define")}
        {Lisp-Entry "add-toplevel-node" method () #f 146 11 146 28 ("toplevel-nodes" "put" "put~" "file" "not" "when" "node")}
        {Lisp-Entry "output-toplevel-node" method () #f 151 11 151 31 ("force-output" "newline" "pretty-print" "pretty-print~" "port" "lambda" "read" "sharing:" "append:" "path-settings" "call-with-output-file" "file" "when" "node")}
        {Lisp-Entry "with-node" method (public) #f 165 18 165 27 ("output-toplevel-node" "set!" "set-parent" "set-parent~" "begin" "unwind-protect" "prog1" "add-toplevel-node" "not" "when" "preserved" "current-node" "parent" "let" "proc" "node")}
        {Lisp-Entry "log-node" method (public) #f 180 18 180 26 ("output-toplevel-node" "add-toplevel-node" "not" "when" "set-parent" "set-parent~" "current-node" "parent" "let" "node")}
        {Lisp-Entry "log-entry" method (public) #f 189 18 189 27 ("new-entry" "log-node" "data" "message" "name" "tag")}
        {Lisp-Entry "new-entry" method (public) #f 193 18 193 27 ("set-property" "set-property~" "or" "JML-Element" "new" "entry" "let" "data" "message" "name" "tag")}
        {Lisp-Entry "clear" method (public) #f 201 18 201 23 ("clear" "unimplemented")}}
      {Lisp-Entry "Logs" definition () #f 211 12 211 16 ("List-Factory" "new")}
      {Lisp-Entry "get-logs" definition (package) #f 215 21 215 29 ("Logs" "get-list" "get-list~")}
      {Lisp-Entry "with-add-log-mutex" definition () #f 219 12 219 30 ("mutex-unlock!" "prog1" "mutex-lock!" "thunk" "lambda" "add-log" "make-mutex" "mutex" "let")}
      {Lisp-Entry "add-log" definition (package) #f 227 21 227 28 ("Logs" "put" "put~" "get-logs" "memq?" "unless" "lambda" "with-add-log-mutex" "log")}
      {Lisp-Entry "effective-log" definition (package) #f 234 21 234 34 ("add-log" "default-log" "log" "let" "current-log" "or")}
      {Lisp-Entry "default-log" definition () #f 242 13 242 24 ("name:" "Log" "new")}
      {Lisp-Entry "current-log" definition (public) #f 246 19 246 30 ("make-parameter")}
      {Lisp-Entry "with-log" definition (public) #f 250 20 250 28 ("add-log" "not" "and" "when" "get-name" "get-name~" "let" "current-log" "parameterize" "file" "file:" "name" "name:" "proc" "log")}
      {Lisp-Entry "with-node" definition (public) #f 258 20 258 29 ("with-node" "with-node~" "new-entry" "new-entry~" "or" "let" "effective-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:" "node" "node:" "proc")}
      {Lisp-Entry "log-node" definition (public) #f 263 20 263 28 ("log-node" "log-node~" "effective-log" "log" "log:" "node")}
      {Lisp-Entry "log-entry" definition (public) #f 267 20 267 29 ("log-entry" "log-entry~" "effective-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:")}
      {Lisp-Entry "log-properties" definition (public) #f 271 20 271 34 ("log-entry" "get-output-string" "keyword->symbol" "format" "set!" "if" "value" "property" "lambda" "for-each-property" "first?" "open-output-string" "output" "let" "effective-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:" "properties")}
      {Lisp-Entry "new-log-node" definition (public) #f 284 20 284 32 ("new-entry" "new-entry~" "effective-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:")}
      {Lisp-Entry "with-profile" definition (public) #f 294 20 294 32 ("new-entry" "new-entry~" "or" "after" "set!" "before" "log-profile" "result" "let" "lambda" "with-node" "effective-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:" "node" "node:" "proc")}
      {Lisp-Entry "log-profile" definition (public) #f 307 20 307 31 ("resources-snapshot" "log-node" "gc" "effective-log" "log" "log:" "name" "name:")}
      {Lisp-Entry "log-stack" definition (public) #f 313 20 313 29 ("data:" "log-entry" "Stack-Snapshot" "new" "data" "let" "effective-log" "log" "log:" "message" "message:" "name" "name:" "tag" "tag:")}}})
"logger"
 ({Lisp-File-Entry {File :context "src" "jazz" "logger.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.logger" module () #f 37 8 37 19 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.io")}
      {Lisp-Entry "*logger-directory*" definition () #f 43 12 43 30 ("Jazz-Settings" "Directory")}
      {Lisp-Entry "*logger-file*" definition () #f 46 12 46 25 ()}
      {Lisp-Entry "logger-file" definition () #f 50 13 50 24 ("*logger-directory*" "timestamped-file" "set!" "*logger-file*" "not" "when")}
      {Lisp-Entry "with-logger-output" definition () #f 56 13 56 31 ("port" "lambda" "append:" "logger-file" "path-settings" "call-with-output-file" "proc")}
      {Lisp-Entry "logger-log" definition () #f 62 13 62 23 ("format" "apply" "port" "lambda" "with-logger-output" "rest")}
      {Lisp-Entry "logger-line" definition () #f 68 13 68 24 ("logger-log" "line")}
      {Lisp-Entry "logger-debug" definition () #f 72 13 72 25 ("logger-log" "rest")}
      {Lisp-Entry "logger-exception" definition () #f 76 13 76 29 ("display-exception" "port" "lambda" "with-logger-output" "exc")}
      {Lisp-Entry "logger-backtrace" definition () #f 82 13 82 29 ("display-continuation-backtrace" "port" "lambda" "with-logger-output" "cont")}}})
"math"
 ({Lisp-File-Entry {File :context "src" "jazz" "math.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.math" module () #f 37 8 37 17 ("jazz")
      {Lisp-Entry "Pi" definition (public) #f 45 19 45 21 ("3.14159")}}})
"snapshot"
 ({Lisp-File-Entry {File :context "src" "jazz" "snapshot.jazz"} 233656031. jazz
    {Lisp-Entry "jazz.snapshot" module () #f 37 8 37 21 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("time" "jazz.system" "jazz.platform" "jazz.locale" "jazz.library" "jazz.io" "jazz.editor.jazz.inspector" "jazz.debuggee")}
      {Lisp-Entry "snapshots-directory" define-macro #f ("setting") 58 16 58 35 ("Jazz-Settings" "Directory")}
      {Lisp-Entry "snapshot-max-depth" define-macro #f ("setting") 61 16 61 34 ("2")}
      {Lisp-Entry "snapshot-max-width" define-macro #f ("setting") 64 16 64 34 ("1024")}
      {Lisp-Entry "snapshot-max-content" define-macro #f ("setting") 67 16 67 36 ("256")}
      {Lisp-Entry "snapshot-process" definition (public) #f 76 20 76 36 ("enable-interrupts!" "print-process-snapshot" "apply" "output" "path-settings" "call-with-output-file" "create-directories" "create-directories~" "current-process-present" "snapshots-directory" "or" "timestamped-file" "file" "let" "others" "directory" "bind-keywords" "continuation" "lambda" "continuation-capture" "prog1" "disable-interrupts!" "rest")}
      {Lisp-Entry "print-process-snapshot" definition () #f 90 13 90 35 ("car" "key:" "sort" "more?" "class" "key" "null?" "unless" "packager:" "inspect-value" "content" "cons" "set!" "if" ":value" "kind" "kind:" "packager" "missed-values" "repeat" "table->list" "cdr" "serial->object" "kv" "map" "depth-values" "content-cache" "string-length" "<" "atom?" "atomic?" "presentation" "table-set!" "mutable?:" "package-info" "table-ref" "or" "info" "object->serial" "serial" "mutable?" "value" "bind" "variable" "get-continuation-lexical-environment" "variables" "get-continuation-location" "location" "get-continuation-name" "do" "get-continuation-stack" "in" "cont" "for" "loop" "print-stack" "specified?" "and" "stop" "thread-state" "present-thread-state" "state" "thread-name" "last" "get-kind" "get-kind~" "not-null?" "get-thread-stops" "stops" "stop-kind" "top-threads" "thread-continuation" "neq?" "thread" "lambda" "for-each" "current-thread" "print-thread" "print-values" "print-threads" "force-output" "exception-reason" "format" "current-process-id" "id" "current-date" "present-date" "date" "version" "current-process-present" "name" "process-version" "process-version~" "present" "present~" "when" "get-process" "process" "present-process-version" "print-process" "fourth" "package-info-more?" "third" "package-info-presentation" "second" "package-info-class" "first" "package-info-serial" "define" "eqv?" "test:" "make-table" "cache" "let" "snapshot-max-content" "max-content" "max-content:" "snapshot-max-width" "max-width" "max-width:" "snapshot-max-depth" "max-depth" "max-depth:" "exception" "exception:" "reason" "reason:" "output" "continuation")}
      {Lisp-Entry "snapshot-exception-debugger" definition (public) #f 220 20 220 47 ("1" "exit" "when" "exception:" "snapshot-process" "snapshot" "let" "with-system-exception-debugger" "exception" "lambda" "feedback" "feedback:")}
      {Lisp-Entry "application-exception-debugger" definition (public) #f 230 20 230 50 ("application-exception-feedback" "feedback:" "snapshot-exception-debugger")}
      {Lisp-Entry "application-exception-feedback" definition (public) #f 235 20 235 50 ("problem" "type:" "title:" "process-email" "process-email~" "email" "if" "parse" "parse~" "current-process-present" "french:" "english:" "Locales" "localize" "format" "system-message" "get-process" "process" "let" "snapshot" "exception")}}})
"syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "library" "syntax.jazz"} 245834379. jazz
    {Lisp-Entry "jazz.library.syntax" module (protected) #f 37 18 37 37 ("regexp-match-string" "y" "x" "foo" "regexp-match" "?" "b" "a" "let" "lambda" "cons" "match-expression" "list" "?c" "?b" "?a" "3" "2" "1" "match" "jazz")
      {Lisp-Entry "define-setting" macro (public) ("macro") 45 15 45 29 ("set!" ",name" "public" "definition" ",expr" ",global" "define" "begin" "symbol->string" "generate-symbol" "setting" "compose-identifier" "global" "car" "null?" "if" "expr" "let" "rest" "name")}
      {Lisp-Entry "match" macro (public) ("macro") 80 15 80 20 (",@body" ",variable" "variable" ",match" ",pattern" "generate-symbol" "match" "body" "bind" "clause" "lambda" "map" ",expr" "match-expression" "0" "string-ref" "eqv?" "1" "string-length" ">" "symbol->string" "str" "symbol?" "and" "cdr" "car" "cons" "set!" "process-pair" "pair?" "process-variable" "variable?" "cond" "process-expr" "variables" "let" "pattern" "extract-variables" "define" "clauses" "expr")}
      {Lisp-Entry "match-regexp" macro (public) ("macro") 135 15 135 27 ("length" "0" "naturals" ",index" ",variable" "1" "+" "index" "n" "variable" ",match" ",regexp" "generate-symbol" "match" "let" "variables" "regexp" ",@body" "cons" "else" "eq?" "if" "body" "pattern" "bind" "clause" "lambda" "map" ",str" "match-regexp-string" "clauses" "str")}
      {Lisp-Entry "<environment>" macro (public) ("macro") 159 15 159 28 ("locators-ref" "symbol" ",locators-code" "list->table" "locators" ",data" "construct-environment" "locators-code" "table->list" ",reference" "car" "pair" "lambda" "map" "list" "cons" "locators-builder" "walk-references" "walk-references~" "table-set!" "reference" "walk-reference" "eq?" "test:" "make-table" "references" "let" "gather-references" "define" "data")}
      {Lisp-Entry "define-form" macro (public) ("macro") 186 15 186 26 (",form" "<form>" ",name" "register-form" "form" "name")}
      {Lisp-Entry "define-trait" macro (public) ("macro") 195 15 195 27 (",trait" "form" "<form>" ",class" "instantiate-trait" ",name" "public" "definition" "trait" "class" "name")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "tie" "syntax.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.tie.syntax" module (protected) #f 37 18 37 33 ("jazz")
      {Lisp-Entry "tie" macro (public) ("macro") 40 15 40 18 ("List" "String" "car" "typecase" "get-output" "get-output~" "get-output-string" ":string" "cons" "else" "case" "eof-object?" "unless" "read-char" "iterate" "List-Factory" "new" "open-output-string" "let" "lambda" "string-append" "apply" "call-with-input-string" "tie-string" "put~" "null?" "error" "symbol?" "not" "if" "read-delimited" "arguments" "command" "bind" "out-parameters" "control" "process-string" "format" "display" "memq?" "when" "out" "c" "put" "tie-list" "define" "objects")}}})
"tabular"
 ({Lisp-File-Entry {File :context "src" "jazz" "tabular.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.tabular" module () #f 37 8 37 20 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.io")}
      {Lisp-Entry "read-tab-delimited" definition (public undocumented) #f 43 33 43 51 ("get-output" "get-output~" "map" "put" "put~" "split" "values" "set!" "read-line" "not" "while" "done?" "List-Factory" "new" "fact" "string" "tab" "let" "input" "lambda" "cr-lf" "eol-encoding:" "path-settings" "call-with-input-file" "string-length" "-" "1" "subseq" "ends-with?" "starts-with?" "and" "if" "line" "patch-for-excel" "define" "file")}
      {Lisp-Entry "convert-tab-delimited->jml" definition (public undocumented) #f 64 33 64 59 ("verify-reload" "verify-reload~" "get-application" "appl" "let" "get-name" "get-name~" "user-message" "pretty-print" "pretty-print~" "lambda" "UTF-8" "char-encoding:" "path-settings" "call-with-output-file" "parse" "parse~" "preferences:" "JML-Parser" "JML-Preferences" "new" "pref" "jml" "read-tab-delimited" "content" "get-base" "get-base~" "format" "get-parent" "get-parent~" "new-file" "new-file~" "output" "let*" "convert-tab-delimited->jml" "unimplemented" "parser" "input")}
      {Lisp-Entry "save-tab-delimited" definition (public undocumented) #f 81 33 81 51 ("format" "set!" "if" "text" "first?" "let" "line" "for-each" "output" "lambda" "path-settings" "call-with-output-file" "save-tab-delimited" "unimplemented" "file" "content")}}})
"ui"
 ({Lisp-File-Entry {File :context "src" "jazz" "runtime" "ui.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.runtime.ui" module () #f 37 8 37 23 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system" "jazz.runtime")}
      {Lisp-Entry "load-all-with-feedback" definition (public) #f 44 20 44 42 ("format-plural" "increase!" "user-feedback" "begin" "if" "unit-name" "lambda" "feedback:" "load-all" "0" "count" "let")}
      {Lisp-Entry "walk-all-with-feedback" definition (public) #f 55 20 55 42 ("format-plural" "increase!" "user-feedback" "begin" "if" "unit-name" "lambda" "feedback:" "walk-all" "0" "count" "let")}
      {Lisp-Entry "outline-all-with-feedback" definition (public) #f 66 20 66 45 ("format-plural" "outline-all" "increase!" "user-feedback" "unit-name" "lambda" "outline-feedback" "parameterize" "0" "count" "let")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "locale" "ui.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.locale.ui" module () #f 37 8 37 22 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library")}
      {Lisp-Entry "Locales-Menu" class () #f 50 7 50 19 ("Context-Menu")
        {Lisp-Entry "install" method (override) #f 53 20 53 27 ("nextmethod" "set-checked?" "set-checked?~" "when" "locale:" "list" "properties:" "on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Check-Item" "new" "item" "present-locale" "title" "let*" "checked?" "eq?" "insert-locale" "locale" "lambda" "for-each" "get-locales" "locales" "get-locale" "current" "let" "insert-locales" "define" "rest")}
        {Lisp-Entry "on-action" method () #f 71 11 71 20 ("locale:" "get-property" "get-property~" "set-locale" "evt")}}}})
