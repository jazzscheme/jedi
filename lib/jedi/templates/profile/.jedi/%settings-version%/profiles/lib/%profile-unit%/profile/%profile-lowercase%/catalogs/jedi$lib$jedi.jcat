"Code-Generator"
 ({Lisp-File-Entry {File :context "src" "jedi" "generator" "Code-Generator.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.generator.Code-Generator" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Code-Generator" class #f 40 7 40 21 ("Object")
        {Lisp-Entry "emit-section-header" definition #f 48 15 48 34 ("format" "output" "section-name")}
        {Lisp-Entry "emit-parameters" method #f 56 11 56 26 ("cdr" "car" "else" "variable-symbol" "format" "variable?" "cond" "iterate" "let" "output" "parameters")}}}})
"Completion-Popup"
 ({Lisp-File-Entry {File :context "src" "jedi" "text" "Completion-Popup.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.text.Completion-Popup" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Completion-Popup" class #f 43 7 43 23 ("Popup")}
      {Lisp-Entry "Completion-Popup" class #f 49 7 49 23 ("explicit" "initialize" "Popup")
        {Lisp-Entry "owner-text" property #f 52 12 52 22 ()}
        {Lisp-Entry "form" anonymous #f 55 3 55 7 ("190" "90" "5" "Point" "position" "position:" "tree" "name" "name:" "Tree-View" "200" "100" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "get-owner-text" method #f 60 18 60 32 ("owner-text")}
        {Lisp-Entry "set-owner-text" method #f 64 18 64 32 ("owner-text" "set!" "text")}
        {Lisp-Entry "focus-lose" method #f 68 11 68 21 ("close" "owner-text" "receiving" "neq?" "when")}}}})
"Horizontal-View"
 ({Lisp-File-Entry {File :context "src" "jedi" "test" "Horizontal-View.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.test.Horizontal-View" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Horizontal-View" class #f 43 7 43 22 ("View")}
      {Lisp-Entry "Horizontal-View" class #f 49 7 49 22 ("View")
        {Lisp-Entry "install" method #f 52 11 52 18 ("3" "0" "naturals" "->string" "title" "title:" "Label-View" "self" "parent:" "Vertical-View" "new" "Horizontal-View" "parent" "get-parent" "is-not?" "2" "=" "and" "if" "n" "lambda" "for-each" "nextmethod" "rest")}
        {Lisp-Entry "layout" method #f 66 11 66 17 ("increase!" "set-size" "Point" "set-position" "view" "lambda" "for-each-view" "0" "h" "Dimension" "new" "child-size" "get-height" "height" "get-width" "quotient" "width" "get-size" "size" "length" "let*" "children" "when")}
        {Lisp-Entry "draw" method #f 86 11 86 15 ("Dark-Red" "Color" "get-bounds" "fill-rect" "lv" "lh" "context" "surface")}}}})
"Jedi"
 ({Lisp-File-Entry {File :context "src" "jedi" "application" "Jedi.jazz"} 1299092298 jazz
    {Lisp-Entry "jedi.application.Jedi" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jedi" "jazz.ui.workspace" "jazz.ui.view" "jazz.ui.picker" "jazz.ui" "jazz.system" "jazz.project" "jazz.platform" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.io" "jazz.ide" "jazz.editor.sql.view" "jazz.editor.sql" "jazz.editor.lisp" "jazz.editor.jazz" "jazz.editor.diff" "jazz.doc" "jazz.designer.view" "jazz.designer" "jazz.debugger.jazz" "jazz.debugger.gambit" "jazz.debugger" "jazz.console" "jazz.catalog")}
      {Lisp-Entry "Jedi" class #f 68 7 68 11 ("initialize" "IDE")
        {Lisp-Entry "documentation-cataloguer" slot #f 71 8 71 32 ()}
        {Lisp-Entry "external-name" method #f 74 25 74 38 ("jedi" "rest")}
        {Lisp-Entry "process-name" method #f 78 20 78 32 ()}
        {Lisp-Entry "process-owner" method #f 82 20 82 33 ()}
        {Lisp-Entry "process-copyright" method #f 86 20 86 37 ()}
        {Lisp-Entry "process-icon" method #f 90 20 90 32 ()}
        {Lisp-Entry "process-version" method #f 94 20 94 35 ("Version" "new" "kernel-version" "split-version" "revision" "minor" "major" "receive")}
        {Lisp-Entry "process-email" method #f 99 20 99 33 ()}
        {Lisp-Entry "new-toplevel" method #f 103 20 103 32 ("Jedi-Toplevel" "new")}
        {Lisp-Entry "finalize-process" method #f 107 20 107 36 ("JDBC-Provider" "SQLServer-Provider" "Access-Provider" "new" "register-provider" "nextmethod")}
        {Lisp-Entry "finish-process" method #f 117 20 117 34 ("setup-workspaces" "nextmethod" "console-button?" "console-button?:" "SQL-Console-View" "view-class" "view-class:" "get-sql-console" "register-console" "setup-sql" "define")}
        {Lisp-Entry "setup-catalog" method #f 131 11 131 24 ("report?" "report?:" "load-content" "add-catalog" "Filing-Catalog" "new" "catalog" "format" "Profile" "Directory" "new-file" "output" "get-cataloguer" "cataloguer" "let" "heuristics" "heuristics:" "char-encoding" "char-encoding:" "extensions" "directory" "name")}
        {Lisp-Entry "persist-preferences?" method #f 144 20 144 40 ()}
        {Lisp-Entry "default-preferences" method #f 148 20 148 39 ("Default-Jedi-Preferences" "new")}
        {Lisp-Entry "default-bindings" method #f 152 20 152 36 ("Default-Jedi-Bindings" "new")}
        {Lisp-Entry "default-workspaces" method #f 156 20 156 38 ("Default-Jedi-Workspaces" "new")}
        {Lisp-Entry "default-listener-service" method #f 166 20 166 44 ("44333")}
        {Lisp-Entry "get-search-manager" method #f 175 20 175 38 ("search" "169" "857" "Dimension" "host-size" "host-size:" "220" "150" "Point" "host-position" "host-position:" "host-visible?" "host-visible?:" "host-title" "host-title:" "Jedi-Search" "new-palette" "lambda" "singleton-palette")}
        {Lisp-Entry "mandatory-version" method #f 191 20 191 37 ("nextmethod" "else" "4" "access-database" "6" "3" "dao" "0" "8" "Version" "sqlserver" "case" "what")}
        {Lisp-Entry "settings-updates" define #f 204 10 204 26 ("205000" "settings" "targets" "targets:" "205001" "version" "version:" "list->updates")}
        {Lisp-Entry "convert-settings" define #f 210 11 210 27 ("else" "case" "205001" "convert-settings-205000" "jedi.convert:convert-settings-205000" "convert-205000" "205000" "tokenise-filename" "Directory" "new" "convert-settings-initial" "jedi.convert" "jedi.convert:convert-settings-initial" "convert-initial" "define" "old" "dir")}
        {Lisp-Entry "initialize-settings" method #f 225 20 225 39 ("install-repository" "register-repository-aliases" "create?" "create?:" "Projects" "make-repository" "projects-repository" "register-settings" "file:" "new" "set!" "create" "exists?" "unless" "File" "file" "Settings" "register-alias" "convert-settings" "settings-updates" "settings" "parse" "versioned-directory" "tokenise-filename" "settings-path" "create-directories" "Home" "Directory" "dot-jedi-dir" "let")}
        {Lisp-Entry "settings-version" method #f 239 20 239 36 ("settings-updates" "car" "update-version")}
        {Lisp-Entry "templates-directory" method #f 248 20 248 39 ("Jedi" "Directory")}
        {Lisp-Entry "install-profiles" method #f 257 20 257 36 ("Settings" "Directory" "parse" "install-repository" "register-repository-aliases")}
        {Lisp-Entry "default-frame-class" method #f 266 20 266 39 ("Jazz-Text-View")}
        {Lisp-Entry "known-extension-frame-class" method #f 270 20 270 47 ("nextmethod" "else" "Jazz-Plain-Text-View" "ci=?" "test" "test:" "member?" "cond" "ext")}
        {Lisp-Entry "edit-file" method #f 280 20 280 29 ("nextmethod" "else" "browse-java-jarfile" "browse-java-classfile" "ci=?" "cond" "get-extension" "ext" "let" "file")}
        {Lisp-Entry "edit-category" method #f 288 20 288 33 ("edit" "1" "list" "Jazz-Code-Location" "new" "location" "let" "name")}
        {Lisp-Entry "get-text-class" method #f 298 20 298 34 ("Jazz-Text-View")}
        {Lisp-Entry "browse-java-classfile" method #f 308 11 308 32 ("browse-classfile" "get-guest" "manager" "Java-Manager" "new-frame" "host" "let*" "file")}
        {Lisp-Entry "browse-java-jarfile" method #f 315 11 315 30 ("browse-jarfile" "get-guest" "manager" "Java-Manager" "new-frame" "host" "let*" "file")}
        {Lisp-Entry "get-depot-classes" method #f 327 11 327 28 ("VSS-Depot" "list")}
        {Lisp-Entry "persist-usernames?" method #f 337 20 337 38 ()}
        {Lisp-Entry "persist-passwords?" method #f 341 20 341 38 ()}
        {Lisp-Entry "get-context-text" method #f 350 20 350 36 ()}
        {Lisp-Entry "reload-opened-windows" method #f 361 11 361 32 ()}
        {Lisp-Entry "reload-component" method #f 366 11 366 27 ("nextmethod" "else" "Jazz-Text-View" "jazz-text" "Jedi-Search" "new-frame" "apply" "search" "case" "properties" "class")}
        {Lisp-Entry "get-documentation-cataloguer" method #f 378 20 378 48 ("set!" "get-preferences" "get-documented?" "documentation-cataloguer" "add-catalog" "Doc-Catalog" "catalog" "get-name" "name" "instantiate" "doc" "let*" "exception?" "unless" "safe-read-form" "form" "when" "get-documentation" "file" "project" "lambda" "for-each-project" "get-workbench" "workbench" "Cataloguer" "new" "cataloguer" "let" "new-documentation-cataloguer" "define")}
        {Lisp-Entry "reload-documentation" method #f 400 18 400 38 ("get-documentation-cataloguer" "documentation-cataloguer" "set!")}
        {Lisp-Entry "process-alias" method #f 410 20 410 33 ("nextmethod" "else" ":focus-editor" "case" "get-guest" "get-view-editor" "when" "get-focus" "focus" "let" "focus-editor" "define" "name")}
        {Lisp-Entry "class-actions" method #f 426 20 426 33 ("debugger" "nextmethod" "jedi" "find-actions" "cons")}
        {Lisp-Entry "update-focus-actions" method #f 435 20 435 40 ("capitalize" "downcase" "upcase" "fill-to-column" "mark-column" "find-all-imports" "or" "find-imports" "remove-highlights" "highlight-selection" "tabulate" "lisp-text" "transpose-expr" "select-outer" "goto-line" "search-current" "search-backward-mode" "search-forward-mode" "text" "recolorize-syntax" "edit-references" "edit-definitions" "evaluate-buffer" "not" "evaluate" "code-text" "Action" "set-action-enabled?" "preferences-designer" "when" "Console-Text-View" "console?" "Jazz-Text-View" "jazz?" "Lisp-Text-View" "lisp?" "Code-Text-View" "code?" "Text-View" "is?" "and" "text?" "get-focus" "focus" "let" "nextmethod")}
        {Lisp-Entry "allow-orphaned-actions?" method #f 467 20 467 43 ()}
        {Lisp-Entry "update-windowing-actions" method #f 476 20 476 44 ("update-project-actions" "update-search-actions" "exiting-process?" "unless" "nextmethod")}
        {Lisp-Entry "navigable-results" method #f 488 20 488 37 ("Violations-Manager" "Output-Log" "Search-Results" "singleton-docked" "get-guest" "list")}
        {Lisp-Entry "on-new-project" method #f 502 11 502 25 ("get-workbench" "get-workbench-manager" "add-project-to" "evt")}
        {Lisp-Entry "on-event-spy" method #f 506 11 506 23 ("Event-Spy" "new-palette" "evt")}
        {Lisp-Entry "on-registry-viewer" method #f 511 11 511 29 ("Registry-Viewer" "new-frame" "evt")}
        {Lisp-Entry "on-type-viewer" method #f 516 11 516 25 ("Type-Viewer" "new-frame" "evt")}
        {Lisp-Entry "on-java-manager" method #f 521 11 521 26 ("Java-Manager" "new-frame" "evt")}
        {Lisp-Entry "on-showcase" method #f 526 11 526 22 ("Showcase" "new-frame" "evt")}
        {Lisp-Entry "on-profiler-manager" method #f 530 11 530 30 ("Profiler-Manager" "show-palette" "evt")}
        {Lisp-Entry "on-documentation-editor" method #f 535 11 535 34 ("get-client" "client" "client:" "Doc-Editor" "new-frame" "get-catalogs" "car" "catalog" "get-documentation-cataloguer" "cataloguer" "let*" "evt")}
        {Lisp-Entry "on-run-smoker" method #f 541 11 541 24 ("Smoker-Builder" "new" "build/run" "evt")}
        {Lisp-Entry "on-spy-events" method #f 546 19 546 32 ("Event-Spy" "show-palette" "evt")}
        {Lisp-Entry "on-readme" method #f 556 19 556 28 ("Jazz" "File" "edit-document" "evt")}}
      {Lisp-Entry "Default-Jedi-Preferences" class #f 565 7 565 31 ("Jedi-Preferences")}
      {Lisp-Entry "Default-Jedi-Bindings" class #f 573 7 573 28 ("Jedi-Bindings")}
      {Lisp-Entry "Default-Jedi-Workspaces" class #f 581 7 581 30 ("Workspaces-Preferences")
        {Lisp-Entry "form" anonymous #f 584 3 584 7 ("-29" "50" "33" "Variables-View" "Frames-View" "Exception-View" "Threads-View" "250" "Processes-View" "160" "668" "23" "debugger" "Hierarchy-Browser" "Chapters-Browser" "31" "46" "36" "Jazz-Text-View" "jazz.editor.jazz" "jazz.editor.jazz:Jazz-Text-View" "frame-model" "frame-model:" "text" "Repositories-Manager" "Workbench-Manager" "Servers-Manager" "Profile-Results" "Search-Results" "Properties-Manager" "Lisp-Console-Manager" "model" "model:" "selection" "Docked-Preferences" "Pad-Preferences" "maximized?" "maximized?:" "Stage-Preferences" "-27" "vert" "5" "Rect" "insets" "insets:" "20" "division" "division:" "relative" "mode" "mode:" "horz" "orientation" "orientation:" "first" "top" "Splitter-Preferences" "status" "Status-Preferences" "second" "toolbar" "Mainbar-Preferences" "root" "location" "location:" "menubar" "Menubar-Preferences" ":alt" ":shift" "Shortcut" "shortcut" "shortcut:" "Image-Resource" "icon" "icon:" "title" "title:" "name" "name:" "Workspace-Preferences" "home" "active" "active:" "install")}}}})
"Jedi-Actions"
 ({Lisp-File-Entry {File :context "src" "jedi" "preference" "Jedi-Actions.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.preference.Jedi-Actions" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jedi")}
      {Lisp-Entry "Jedi-Actions" class #f 46 7 46 19 ("Actions")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("on-readme" ":application" "Event-Handler" "action-handler" "action-handler:" "readme" "name" "name:" "Action-Item" "install")}}}})
"Jedi-Bindings"
 ({Lisp-File-Entry {File :context "src" "jedi" "preference" "Jedi-Bindings.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.preference.Jedi-Bindings" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.ide" "jedi")}
      {Lisp-Entry "Jedi-Bindings" class #f 46 7 46 20 ("IDE-Bindings")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("jedi" "name" "name:" "Jedi-Actions" "install")}}}})
"Jedi-Menubar"
 ({Lisp-File-Entry {File :context "src" "jedi" "application" "Jedi-Menubar.jazz"} 1298907938 jazz
    {Lisp-Entry "jedi.application.Jedi-Menubar" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.ide")}
      {Lisp-Entry "Jedi-Menubar" class #f 48 7 48 19 ("Menubar")
        {Lisp-Entry "host-icon" method #f 56 25 56 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 60 25 60 35 ()}
        {Lisp-Entry "install" method #f 69 20 69 27 ("Help-Menu" "help" "Window-Advanced-Menu" "window" "View-Menu" "view" "Workspace-Menu" "workspace" "Tools-Menu" "tools" "Debug-Menu" "debug" "Project-Menu" "project" "Search-Menu" "search" "Refactor-Menu" "refactor" "Recorder-Menu" "recorder" "Source-Menu" "source" "Edit-Menu" "edit" "Jedi-File-Menu" "content" "content:" "file" "name" "name:" "self" "parent" "parent:" "Label-Item" "new" "lambda" "with-update-locked" "nextmethod" "rest")}}
      {Lisp-Entry "Jedi-File-Menu" class #f 93 7 93 21 ("IDE-File-Menu")
        {Lisp-Entry "form" anonymous #f 96 3 96 7 ("!" "new-project" "ide" "Action" "action-handler" "action-handler:" "on-new" "before" "before:" "french" "french:" "english" "english:" "Locales" "title" "title:" "on-new-project" "name" "name:" "Label-Item" "install")}}
      {Lisp-Entry "View-Menu" class #f 107 7 107 16 ("Menu")
        {Lisp-Entry "form" anonymous #f 110 3 110 7 ("view-showcase" "showcase" "view-documentation-editor" "documentation-editor" "view-descendants" "descendants" "view-traits" "traits" "view-toolbox" "toolbox" "view-sql-console" "sql-console" "view-sql-inventory" "sql-inventory" "view-sql-connections" "sql-connections" "sql" "view-java-manager" "java-manager" "variables" "exception" "restarts" "frames" "threads" "processes" "view-hierarchy" "hierarchy" "view-chapters" "chapters" "view-type-viewer" "type-viewer" "view-registry-viewer" "registry-viewer" "Menu" "view-servers" "servers" "view-activities" "activities" "view-user-log" "user-log" "view-output-log" "output-log" "view-profile-results" "profile-results" "view-search-results" "search-results" "view-properties" "properties" "view-console" "console" "Separator-Item" "view-favorites" "favorites" "view-repositories" "repositories" "view-workbench" "ide" "Action" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "workbench" "name" "name:" "Label-Item" "title" "title:" "install")}}
      {Lisp-Entry "Project-Menu" class #f 173 7 173 19 ("Menu")
        {Lisp-Entry "form" anonymous #f 176 3 176 7 ("compile-file" "compile" "build-project" "build" "run-project" "run" "debug-project-with" "debug-with" "debug-project" "debug" "test-project" "test" "view-project-log" "view-log" "clean-project" "clean" "update-catalogs" "projects-manager" "Separator-Item" "select-project" "ide" "Action" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "select" "name" "name:" "Label-Item" "title" "title:" "install")}}
      {Lisp-Entry "Debug-Menu" class #f 203 7 203 17 ("Menu")
        {Lisp-Entry "form" anonymous #f 206 3 206 7 ("reload-process" "test-shift" "test" "clear-terminal" "toggle-terminal" "terminal-repl" "Separator-Item" "continue" "break" "ide" "Action" "action-handler" "action-handler:" "tooltip-text" "tooltip-text:" "tooltip?" "tooltip?:" "Image-Resource" "icon" "icon:" "restart" "name" "name:" "Label-Item" "title" "title:" "install")}
        {Lisp-Entry "update" method #f 228 20 228 26 ("terminal-visible?" "if" "toggle-terminal" "child" "set-title")}}
      {Lisp-Entry "Tools-Menu" class #f 237 7 237 17 ("Menu")
        {Lisp-Entry "form" anonymous #f 240 3 240 7 ("view-preferences" "preferences" "command-execute" "command-extended" "command-execute-separator" "capture-mouse-host" "capture-host" "capture-mouse-document" "capture-document" "compare-files" "compare-directories" "skins-manager" "view-bindings" "bindings-manager" "Separator-Item" "ide" "Action" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "explore-views" "name" "name:" "Label-Item" "title" "title:" "install")}}
      {Lisp-Entry "Help-Menu" class #f 268 7 268 16 ("Menu")
        {Lisp-Entry "form" anonymous #f 271 3 271 7 ("about" "application" "Separator-Item" "readme" "jedi" "Action" "action-handler" "action-handler:" "Image-Resource" "icon" "icon:" "Label-Item" "title" "title:" "install")}}}})
"Jedi-Preferences"
 ({Lisp-File-Entry {File :context "src" "jedi" "preference" "Jedi-Preferences.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.preference.Jedi-Preferences" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jedi" "jazz.ui" "jazz.project" "jazz.library" "jazz.jml" "jazz.io" "jazz.ide" "jazz.groupware" "jazz.editor.tex" "jazz.editor.sql" "jazz.editor.scheme" "jazz.editor.python" "jazz.editor.properties" "jazz.editor.lua" "jazz.editor.jazz" "jazz.editor.javascript" "jazz.editor.java" "jazz.editor.html" "jazz.editor.diff" "jazz.editor.css" "jazz.editor.csharp" "jazz.editor.commonlisp" "jazz.editor.c" "jazz.doc" "jazz.catalog")}
      {Lisp-Entry "Jedi-Preferences" class #f 67 7 67 23 ("IDE-Preferences")
        {Lisp-Entry "form" anonymous #f 70 3 70 7 ("wallpaper" "Wallpaper-Preferences" "repositories" "Repositories-Preferences" "xml-text" "XML-Text-Preferences" "tex-text" "Tex-Text-Preferences" "python-text" "Python-Text-Preferences" "properties-text" "Properties-Text-Preferences" "prop-text" "Prop-Text-Preferences" "lua-text" "Lua-Text-Preferences" "javascript-text" "JavaScript-Text-Preferences" "java-text" "Java-Text-Preferences" "html-text" "HTML-Text-Preferences" "compare-text" "Compare-Text-Preferences" "css-text" "CSS-Text-Preferences" "csharp-text" "CSharp-Text-Preferences" "c-text" "C-Text-Preferences" "commonlisp-text" "name" "name:" "CommonLisp-Text-Preferences" ">" "<documents" "<documents~>" "Jedi-Status" ":status" "Minibuffer-Toolbar" ":minibuffer" "Command-Toolbar" ":command" "Jedi-Toolbar" ":toolbar" "Jedi-Menubar" ":menubar" "toolbar-classes" "toolbar-classes:" "Doc-Catalog" "Filing-Catalog" "filing" "catalog-types" "catalog-types:" "Category-Moniker" "category" "Document-Moniker" "doc" "Depot-Moniker" "item" "URL" "url" "Manifest" "manifest" "Directory-Group" "group" "Directory" "dir" "File" "Reference" "file" "protocols" "protocols:" "documented?" "documented?:" "title" "title:" "install")}}}})
"Jedi-Profile"
 ({Lisp-File-Entry {File :context "src" "jedi" "profile" "Jedi-Profile.jazz"} 1299130336 jazz
    {Lisp-Entry "jedi.profile.Jedi-Profile" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("time" "jedi" "jazz.website" "jazz.ui.view" "jazz.ui.clipboard" "jazz.ui.activity" "jazz.tie" "jazz.system" "jazz.runtime" "jazz.platform" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.io" "jazz.ide" "jazz.graphic" "jazz.editor.jazz" "jazz.designer")}
      {Lisp-Entry "Jedi-Profile" class #f 60 7 60 19 ("IDE-Profile")
        {Lisp-Entry "minute" definition #f 63 24 63 30 ("60")}
        {Lisp-Entry "hour" definition #f 66 24 66 28 ("minute" "60" "*")}
        {Lisp-Entry "day" definition #f 69 24 69 27 ("hour" "24" "*")}
        {Lisp-Entry "week" definition #f 72 24 72 28 ("day" "7" "*")}
        {Lisp-Entry "recent-files" method #f 76 11 76 23 ("select-results" "add-results" "text" "set-mode" "format-plural" "user-feedback" "length" "count" "queue-list" "files" "ignored-toplevel-directories:" "list" "enqueue" "get-modification-time" "time>?" "ci=?" "test" "test:" "get-extension" "member?" "not" "and" "when" "file" "lambda" "iterate-directory" "make-directory-feedback" "directory-feedback" "ignored-extensions" "ignored-toplevel-directories" "3600" "or" "0" "time-duration" "make-time" "current-time" "subtract-duration" "from" "new-queue" "queue" "get-application" "get-search-results" "results" "let" "elapse" "Jazz" "Directory" "directory" "bind-keywords" "rest")}
        {Lisp-Entry "search-licenseless-files" method #f 99 11 99 35 ("select-results" "add-results" "text" "set-mode" "format-plural" "user-feedback" "length" "count" "queue-list" "files" "list" "enqueue" "equal?" "eof-object?" "not" "and" "read-line" "line" "port" "jazz-readtable" "readtable" "readtable:" "cr-lf" "eol-encoding" "eol-encoding:" "path-settings" "call-with-input-file" "ci=?" "test" "test:" "member?" "when" "get-extension" "ext" "file" "lambda" "Jazz" "Directory" "iterate-directory" "make-directory-feedback" "directory-feedback" "new-queue" "queue" "get-application" "get-search-results" "results" "let")}
        {Lisp-Entry "search-trailing-whitespace" method #f 122 11 122 37 ("select-results" "add-results" "text" "set-mode" "format-plural" "user-feedback" "count" "queue-list" "files" "ignored-toplevel-directories:" "length" "naturals" "continuation-return" "+" "list" "enqueue" "set!" "whitespace?" "if" "element" "c" "do" "0" "downto" "1" "cardinality" "-" "from" "n" "for" "loop" "trailing-whitespace" "done" "continuation-capture" "rank" "line" "for-each" "char-encoding-errors" "char-encoding-errors:" "load-lines" "lines" "ci=?" "test" "test:" "get-extension" "member?" "not" "when" "file" "lambda" "iterate-directory" "make-directory-feedback" "directory-feedback" "ignored-extensions" "ignored-toplevel-directories" "new-queue" "queue" "get-application" "get-search-results" "results" "let" "Jazz" "Directory" "directory" "bind-keywords" "rest")}
        {Lisp-Entry "inspect-binary" method #f 156 11 156 25 ("read-u8" "read-all" "debug" "port" "lambda" "path-settings" "call-with-input-file" "file")}
        {Lisp-Entry "console-command" method #f 167 20 167 35 ("nextmethod" "else" "exit" ":exit" "compile" ":compile" "expand-scheme" ":expand-scheme" "expand" ":expand" "car" "edit-documentation" ":doc" "case" "arguments" "command")}
        {Lisp-Entry "edit-documentation" method #f 180 11 180 29 ("edit-documentation" "get-application" "appl" "let" "name")}
        {Lisp-Entry "expand" method #f 185 11 185 17 ("else" "macro?" "apply" "syntax-macro?" "cond" "definition-value" "macro" "let" "debug" "begin" "null?" "if" "Java" "Language" "or" "definition" "class-of" "category-field" "object" "lambda" "try" "let*" "arguments" "name" "bind" "unimplemented" "form")}
        {Lisp-Entry "expand-scheme" method #f 202 11 202 24 ("macro?" "apply" "debug" "syntax-macro?" "cond" "Kernel" "or" "definition-value" "macro" "class-of" "category-field" "package" "lambda" "try" "let*" "arguments" "name" "bind" "unimplemented" "form")}
        {Lisp-Entry "compile" method #f 213 11 213 18 ("compile-classes" "unimplemented" "classes")}
        {Lisp-Entry "utf8" method #f 224 11 224 15 ("get-content" "increase!" "List" "coerce" "map" "debug" "128" "char->integer" ">=" "char" "some?" "when" "line" "lambda" "for-each" "1" "count" "let" "text")}
        {Lisp-Entry "remove-trailing-whitespace" method #f 235 11 235 37 ("format-cardinality" "user-feedback" "increase!" "-" "Cell" "Range$Cell$" "new" "delete-range" "cardinality" "end" "empty-string?" "extract-trailer" "trailer" "whitespace?" "unless" "paragraph-string" "str" "row" "line" "lambda" "for-each-paragraph" "0" "count" "let" "text")}
        {Lisp-Entry "package-units" method #f 254 11 254 24 ("debug" "not" "cdr" "update" "pair" "if" "product" "List-Factory" "new" "fact" "let" "package-products" "package-name" "assq" "package-product" "define" "package")}
        {Lisp-Entry "unit-subunits" method #f 269 11 269 24 ("cons" "set!" "phase" "declaration" "subunit-name" "lambda" "for-each-subunit" "subunits" "let" "builder" "core.unit" "core.unit.builder" "load-unit" "unit-name")}
        {Lisp-Entry "selection->doc" method #f 283 11 283 25 ("get-output-string" "set-clipboard-text" "not" "get-style" "get-color" "class" "export-string" "set!" "run" "for-each" "first?" "cdr" "next" "car" "null?" "unless" "scan" "iterate" "format" "open-output-string" "output" "substitute-alist" "str" "encode-string" "unknown" "debug" "else" "Dark-Gray" "Dark-Orange" "Ochre" "Purple" "Dark-Purple" "Dark-Red" "Dark-Green" "Dark-Blue" "Color" "color-similar?" "cond" "when" "color" "color-class" "queue-list" "enqueue" "range-runs" "runs" "end" "start" "paragraph" "lambda" "text-range" "get-selection" "has-selection?" "if" "for-each-range" "new-queue" "queue" "let" "collect-runs" "define" "text")}
        {Lisp-Entry "file->doc" method #f 336 11 336 20 ("get-output-string" "open-output-string" "lambda" "cr-lf" "eol-encoding" "eol-encoding:" "path-settings" "call-with-input-file" "display" "process-nodes" "when" "receive" "iterate" "process-line" "unless" "newline" "write-char" "period" "eq?" "and" "else" "period-space" "none" "if" "space" "case" "peek-char" "eqv?" "values" "eof-object?" "cond" "read-char" "c" "let" "output" "input" "in-string?" "status" "process-line-char" "define" "file")}
        {Lisp-Entry "Documented-Units" definition #f 423 14 423 30 ("time" "window" "jazz.ui.window" "view" "jazz.ui.view" "dialog" "jazz.ui.dialog" "clipboard" "jazz.ui.clipboard" "ui" "jazz.ui" "process" "jazz.system.process" "application" "jazz.system.application" "system" "jazz.system" "schema" "jazz.schema" "runtime" "jazz.runtime" "network" "jazz.network" "media" "jazz.media" "library" "jazz.library" "jrm" "jazz.jrm" "jml" "jazz.jml" "io" "jazz.io" "graphic" "jazz.graphic" "sqlserver" "jazz.database.sqlserver" "database" "jazz.database" "console" "jazz.console" "catalog" "jazz.catalog" "language" "jazz.dialect.language" "jazz" "jazz.dialect" "jazz.dialect.kernel" "kernel" "scheme" "statprof" "irregex")}
        {Lisp-Entry "extract-doc" method #f 469 11 469 22 ("Documented-Units" "for-each" "uptodate" "get-compatibility" "chained" "virtual" "memq?" "protected" "public" "collect-if" "cdddr" "third" "3" "cddr" "cons" "compose-reference" "apply" "second" "first" "eq?" "2" ">=" "and" "cond" "length" "len" "split-reference" "reverse!" "names" "get-locator" "locator" "rest:" "named:" "optional:" "positional:" "get-rest" "rest" "get-named" "named" "get-optional" "optional" "get-positional" "positional" "not" "parameter" "extract-name" "signature" "C-Definition-Doc" "C-Type-Doc" "get-access" "access" "access:" "Method-Doc" "propagation:" "list" "get-propagation" "propagation" "extract-propagation-list" "Property-Doc" "Slot-Doc" "ascendants:" "Interface-Doc" "get-ascendants" "ascendants" "get-children" "queue-list" "map" "interfaces:" "resolve-binding" "ascendant:" "Class-Doc" "ends-with?" "or" "unless" "get-interfaces" "interfaces" "get-ascendant" "ascendant" "Generic-Doc" "Syntax-Doc" "get-signature" "extract-signature" "parameters" "parameters:" "Definition-Doc" "extract-locator" "Export-Doc" "Doc" "class-of" "category-identifier" "Unknown" "debug" "else" "C-Named-Declare-Declaration" "extract-c-definition-doc" "C-Definition-Declaration" "extract-c-type-doc" "C-Type-Declaration" "extract-method-doc" "Method-Declaration" "extract-slot-doc" "Slot-Declaration" "extract-property-doc" "Property-Declaration" "extract-interface-doc" "Interface-Declaration" "extract-class-doc" "Class-Declaration" "extract-syntax-doc" "Syntax-Declaration" "extract-macro-doc" "Macro-Declaration" "extract-generic-doc" "Generic-Declaration" "extract-definition-doc" "Definition-Declaration" "extract-define-macro-doc" "Define-Macro-Declaration" "extract-define-doc" "Define-Declaration" "extract-export-doc" "Export-Declaration" "extract-declaration-doc" "collect" "Module-Doc" "get-name" "decl" "key" "key:" "string<?" "sort" "sorted" "get-public-lookup" "table-values" "resolve-declarations" "filter-access/compatibility-declarations" "declarations" "symbol->string" "title" "title:" ",name" "name:" "Unit-Doc" "declaration" "extract-module-doc" "Module-Declaration" "extract-unit-doc" "Unit-Declaration" "typecase" "car" "null?" "if" "outline-unit" "unit" "builder" "core.unit" "core.unit.builder" "load-unit" "print-form-data" "extract-unit/module-doc" "doc" "jazz.ide.data" "jazz.ide.data.doc" "data" "parse-form" "form" "port" "lambda" "format" "new-file" "path-settings" "call-with-output-file" "create-directories" "website" "jazz" "jazz.website" "Directory" "reference-dir" "let" "user-feedback" "units" "name" "bind" "info" "extract-toplevel-doc" "define")}
        {Lisp-Entry "JazzWebsite-Site" definition #f 630 14 630 30 ("website" "jazz" "jazz.website" "File")}
        {Lisp-Entry "JazzWebsite-Content" definition #f 633 14 633 33 ("website" "jazz" "jazz.website" "Directory")}
        {Lisp-Entry "regenerate-jazzwebsite" method #f 637 11 637 33 ("generate-jazzwebsite" "get-application" "reload-documentation")}
        {Lisp-Entry "generate-jazzwebsite" method #f 642 11 642 31 ("user-feedback" "for-each" "get-children" "pages" "JazzWebsite-Transformation" "transform-jml" "transformed" "JazzWebsite-Site" "load-jml" "site" "render" "output" "lambda" "ISO-8859-1" "char-encoding" "char-encoding:" "path-settings" "call-with-output-file" "first-child" "html" "XHTML-Renderer" "renderer" "JML-Preferences" "new" "preferences" "path" "get-property" "format" "new-file" "file" "JazzWebsite-Content" "content" "let*" "page" "render-jazzwebsite-page" "define")}
        {Lisp-Entry "export-latest-news" method #f 664 11 664 29 ("user-message" "get-output-string" "set-clipboard-text" "increase!" "display" "make-string" "=" "and" "str" "set!" "when" "old-right" "old-left" "thunk" "left" "format" "equal?" "if" "href" "2" "subnode" "first-child" "with-margins" "upcase" "paragraph" "get-property" "title" "print" ">" "break" ">=" "cond" "cardinality" "+" "right" "word" "lambda" "split" "remove-empty" "words" "text" "for-each" "render-children" "error" "render-anchor" "a" "render-cite" "cite" "render-span" "span" "render-node" "render-break" "br" "render-bold" "b" "render-paragraph" "p" "render-division" "division" "case" "get-tag" "tag" "else" "get-text" "render-text" "JML-Text" "typecase" "node" "render" "define" "column" "70" "right-margin" "0" "left-margin" "open-output-string" "output" "let" "first" "latest" "find-name" "get-children" "second" "news" "JazzWebsite-Site" "load-jml" "site" "let*")}
        {Lisp-Entry "test" method #f 780 11 780 15 ("new-mandelbrot")}
        {Lisp-Entry "new-mandelbrot" method #f 785 11 785 25 ("home" "host-workspace" "host-workspace:" "800" "Dimension" "host-size" "host-size:" "50" "Point" "host-position" "host-position:" "host-title" "host-title:" "Mandelbrot" "new-frame")}
        {Lisp-Entry "gambit" method #f 794 11 794 17 ("visible?" "visible?:" "500" "900" "Dimension" "size" "size:" "wait?" "wait?:" "capture-error?" "capture-error?:" "capture-output?" "capture-output?:" "capture-input?" "capture-input?:" "jazz" "Directory" "directory" "directory:" "create-process" "if" "format" "command" ":exit" "case" "exception" "let*" "unimplemented" ":repl" "exception-handler" "exception-handler:" "102400" "maximum-heapsize" "maximum-heapsize:" "expr" "expr:")}
        {Lisp-Entry "image-convert" definition #f 807 15 807 28 ("error" "0" "/=" "when" "format" "shell-command" "status" "let" "cmd")}
        {Lisp-Entry "image-composite" definition #f 813 15 813 30 ("error" "0" "/=" "when" "format" "shell-command" "status" "let" "cmd")}
        {Lisp-Entry "extract-images" method #f 824 11 824 25 ("format-plural" "length" "count" "new-file" "copy-file" "cons" "set!" "equal?" "test" "test:" "member?" "get-base" "ends-with?" "or" "unless" "user-feedback" "sha-1" "parse" "digest-file" "digest" "get-name" "name" "file" "lambda" "iterate-directory" "digests" "create-directories" "Jazz" "Directory" "src" "let" "dst")}
        {Lisp-Entry "generate-disabled" method #f 846 11 846 28 ("delete-file" "exists?" "when" "new-brother" "image-convert" "begin" "unwind-protect" "lambda" "parse" "with-current-directory" "disabled" "format" "grayscale" "get-extension" "extension" "get-base" "base" "get-name" "name" "get-parent" "directory" "let" "image")}
        {Lisp-Entry "generate-all-disabled" method #f 864 11 864 32 ("generate-disabled" "get-name" "user-feedback" "ci=?" "test" "test:" "get-extension" "member?" "when" "file" "lambda" "iterate-directory" "extensions" "directory")}
        {Lisp-Entry "delete-all-disabled" method #f 873 11 873 30 ("delete-file" "get-name" "user-message" "get-base" "ends-with?" "ci=?" "test" "test:" "get-extension" "member?" "and" "when" "file" "lambda" "iterate-directory" "extensions" "directory")}
        {Lisp-Entry "Template-AList" definition #f 889 14 889 28 ("source" "package" "title")}
        {Lisp-Entry "test8" method #f 896 11 896 16 ("user-message" "Template-AList" "expand" "output" "lambda" "path-settings" "call-with-output-file" "Builder-Unit" "File" "template" "Template-Expander" "new" "expander" "let")}
        {Lisp-Entry "test" method #f 911 11 911 15 ("test-taskbar")}
        {Lisp-Entry "test-shift" method #f 916 11 916 21 ("test-remove-taskbar")}
        {Lisp-Entry "test-taskbar" method #f 921 11 921 23 ("NIM_ADD" "Shell_NotifyIcon" "hIcon" "JZ_TASKICON" "uCallbackMessage" "NIF_ICON" "NIF_MESSAGE" "bitwise-ior" "uFlags" "10" "uID" "get-toplevel-hwnd" "hWnd" "size-of" "cbSize" "set" "height" "height:" "16" "width" "width:" "Icon-Resource" "Image" "load-image" "icon" "NOTIFYICONDATA" "new" "record" "let")}
        {Lisp-Entry "test-remove-taskbar" method #f 934 11 934 30 ("NIM_DELETE" "Shell_NotifyIcon" "10" "uID" "get-toplevel-hwnd" "hWnd" "size-of" "cbSize" "set" "NOTIFYICONDATA" "new" "record" "let")}
        {Lisp-Entry "test" method #f 948 11 948 15 ("tie" "debug" "1" "x" "let")}
        {Lisp-Entry "test1" method #f 959 11 959 16 (":console" "format")}
        {Lisp-Entry "test2" method #f 964 11 964 16 ("10" ":console" "format")}
        {Lisp-Entry "test" method #f 974 11 974 15 ("init" "JavaClass" "org.apache.bcel.classfile" "org.apache.bcel.classfile.JavaClass" "category-field" "definition-value" "debug")}
        {Lisp-Entry "test" method #f 979 11 979 15 ("X" "new" "foo" "debug")}
        {Lisp-Entry "test-shift" method #f 984 11 984 21 ("X" "new" "get-foo" "debug")}
        {Lisp-Entry "test1" method #f 989 11 989 16 ("Window" "category-identifier" "map" "debug" "find-generics" "generics" "signature" "lambda" "test" "let" "B" "A" "Y" "X" "list" "insert-node" "get-dag-root" "dag-root" "Dispatcher" "new" "dispatcher" "let*")}
        {Lisp-Entry "test2" method #f 1010 11 1010 16 ("Integer" "Object" "category-identifier" "map" "debug" "find-generics" "generics" "signature" "lambda" "test" "let" "Point" "Rect" "list" "insert-node" "get-dag-root" "dag-root" "Dispatcher" "new" "dispatcher" "let*")}
        {Lisp-Entry "test2" method #f 1026 11 1026 16 ("Integer" "category-identifier" "map" "debug" "find-generics" "generics" "signature" "lambda" "test" "let" "javaint" "list" "insert-node" "get-dag-root" "dag-root" "Dispatcher" "new" "dispatcher" "let*")}
        {Lisp-Entry "ed" definition #f 1047 14 1047 16 ()}
        {Lisp-Entry "xa" definition #f 1051 14 1051 16 ()}
        {Lisp-Entry "xb" definition #f 1055 14 1055 16 ()}
        {Lisp-Entry "x1" definition #f 1059 14 1059 16 ()}
        {Lisp-Entry "x2" definition #f 1063 14 1063 16 ()}
        {Lisp-Entry "setup-exemplar" method #f 1068 11 1068 25 ("user-message" "20" "x2" "10" "x1" "5" "base" "base:" "b" "xb" "3" ":c" "2" ":b" "1" ":a" "a" "name" "name:" ":domain" "X" "xa" "Exemplar-Domain" "new" "ed" "set!")}
        {Lisp-Entry "test-exemplar" method #f 1078 11 1078 24 ("user-message" "x2" "x1" "xb" "xa" "init")}
        {Lisp-Entry "test9" method #f 1091 20 1091 25 ("internal-tabulate" "bell" "Jazz-Text-View" "is-not?" "if" "get-focus" "text" "let")}
        {Lisp-Entry "internal-tabulate" method #f 1098 11 1098 28 ("set-range" "range:" "Jazz-Explorer" "range" "pos" "cdr" "make-string" "list" "Range$Cell$" "replace-text" "end" "0" ">" "when" "diff" "car" "with-atomic-undo" "get-undoer" "undoer" "tabulate-columns" "exit-composite" "get-output" "put" "get-start" "get-end" "get-col" "-" "size" "forward-expr" "List-Factory" "new" "let" "enter-composite" "while" "max" "map" "null?" "if" "set!" "sizes" "lambda" "update-maxes" "maxes" "let*" "explorer" "collect-maxes" "define" "text")}
        {Lisp-Entry "text-macro" method #f 1146 11 1146 21 ("toggle-bulleted" "get-format" "get-bulleted?" "unless" "get-paragraph" "paragraph" "let" "naturals" "one" "keep" "keep:" "paragraph-length" "remove-spaces" "line" "for-each" "2" "+" "0" "Range$Cell$" "delete-range" "lambda" "with-locked-update" "bell" "eqv?" "not" "if" "Cell" "new" "get-char" "char" "get-column" "col" "get-end" "end" "get-start" "get-line" "start" "let*" "text")}
        {Lisp-Entry "test" method #f 1166 11 1166 15 ("test-for-each-page")}
        {Lisp-Entry "test-for-each-page" method #f 1171 11 1171 29 ("-" "debug" "get-top" "b" "get-line" "get-bottom" "t" "let" "bottom" "top" "page" "lambda" "360" "1" "get-limit" "+" "0" "%" "for-each-page")}
        {Lisp-Entry "test-message-box" method #f 1180 11 1180 27 ("sound" "sound:" "1" "Light-Red" "highlight" "highlight:" "Image-Resource" "image" "image:" "yo" "debug" "close-modal-dialog" "lambda" ":link" "2" "indent" "indent:" ":bulleted" "list" "message-box")}
        {Lisp-Entry "hide-paragraphs" method #f 1190 11 1190 26 ("hide" "paragraph" "row" "lambda" "for-each-selected-paragraph" "get-focus" "text" "let")}
        {Lisp-Entry "test2" method #f 1203 11 1203 16 ("join-lines" "message-box" ":arguments" "Java-Classpath" "classpath" "classpath:" "execute" "output" "Java-Runtime" "new" "java" "let*")}
        {Lisp-Entry "test3" method #f 1210 11 1210 16 ("3" "5" "4" "test" "2" "cj" "debug" "8" "obj2" "Test" "org.jazzscheme.test" "org.jazzscheme.test.Test" "new" "obj1" "let")}
        {Lisp-Entry "test-context" method #f 1223 11 1223 23 ("title" "title:" "self" "context" "context:" "threaded?" "threaded?:" "a" "car" "10" "0" "naturals" "foo" "with-continue" "n" "for-each" "to-fix" "with-restart" "reporter" "with-progress" "lambda" "with-execution-context")}
        {Lisp-Entry "to-fix" method #f 1244 11 1244 17 ("symbol->string" "debug")}
        {Lisp-Entry "foo" method #f 1249 11 1249 14 ("details" "details:" "title" "title:" "goo" "lambda" "with-execution-node" "n")}
        {Lisp-Entry "goo" method #f 1258 11 1258 14 ("details" "details:" "title" "title:" "hoo" "lambda" "with-execution-node" "n")}
        {Lisp-Entry "hoo" method #f 1267 11 1267 14 ("title" "title:" "car" "lambda" "with-execution-node" "n")}
        {Lisp-Entry "test-parameters" method #f 1280 11 1280 26 ("main" "5" "sleep" "3" "get-parameter" "debug" "thread" "lambda" "execute" "execute:" "self" "context" "context:" "Thread" "new" "2" "test" "set-parameter")}
        {Lisp-Entry "test" method #f 1298 11 1298 15 ("log-entry" "lambda" "Build" "File" "file" "file:" "test" "name" "name:" "Log" "new" "with-log")}
        {Lisp-Entry "test-shift" method #f 1306 11 1306 21 ("2" "foo")}
        {Lisp-Entry "foo" method #f 1311 11 1311 14 ("bar" "format" "message" "message:" "name" "name:" "log-entry" "x")}
        {Lisp-Entry "bar" method #f 1317 11 1317 14 ("Stack-Snapshot" "new" "data" "data:" "message" "message:" "name" "name:" "log-entry" "+" "y" "let" "x")}
        {Lisp-Entry "test" method #f 1323 11 1323 15 ("+" "node" "with-profile" "5" ":c" "3" ":b" "2" ":a" "list" "log-properties" "log-entry" "lambda" "Build" "File" "file" "file:" "test" "name" "name:" "Log" "new" "with-log")}
        {Lisp-Entry "test3" method #f 1341 11 1341 16 ("test-resources" "gc")}
        {Lisp-Entry "test-resources" method #f 1347 11 1347 25 ("test-user-name" "test-synchronizer" "test-stack" "test-socket" "test-registry-key" "test-region" "test-reader" "test-pseudo-handle" "test-portfolio" "test-picture" "test-image" "test-file-reader" "test-file-printer" "test-dc" "test-bitmap" "lambda" "Build" "File" "file" "file:" "name" "name:" "Log" "new" "with-log")}
        {Lisp-Entry "test-bitmap" method #f 1368 11 1368 22 ("name" "name:" "height" "height:" "16" "width" "width:" "desktop-dc" ":dc" "Bitmap" "new" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-image" method #f 1376 11 1376 21 ("name" "name:" "Cursor-Resource" "cursor" "Image-Resource" "image" "Icon-Resource" "icon" "Image" "load-image" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-picture" method #f 1386 11 1386 23 ("name" "name:" "Picture" "new" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-portfolio" method #f 1394 11 1394 25 ("name" "name:" "Portfolio" "new" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-pseudo-handle" method #f 1402 11 1402 29 ("name" "name:" "GetCurrentProcess" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-region" method #f 1410 11 1410 22 ("name" "name:" "100" "0" "Region" "new" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-registry-key" method #f 1418 11 1418 28 ("name" "name:" "subkey" "with" "open-key" "HKEY_CURRENT_USER" "key2" "HKEY_CLASSES_ROOT" "key" "key:" "Registry-Key" "new" "key1" "let" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-socket" method #f 1436 11 1436 22 ("name" "name:" "Socket" "new" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-stack" method #f 1444 11 1444 21 ("new-log-node" "node:" "5000" "1" "-" "after" "0" "=" "if" "n" "proc" "letrec" "before" "name" "name:" "log-profile" "node" "lambda" "with-node")}
        {Lisp-Entry "test-synchronizer" method #f 1458 11 1458 28 ("name" "name:" "Semaphore" "Mutex" "Impulse" "new" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-user-name" method #f 1468 11 1468 25 ("name" "name:" "get-system-user-name" "node" "lambda" "with-profile")}
        {Lisp-Entry "test9" method #f 1476 11 1476 16 ("gc-clear-undestroyed")}
        {Lisp-Entry "test1" method #f 1486 11 1486 16 ("255" "blend")}
        {Lisp-Entry "test2" method #f 1491 11 1491 16 ("100" "blend")}
        {Lisp-Entry "test3" method #f 1496 11 1496 16 ("30" "blend")}
        {Lisp-Entry "blend" method #f 1501 11 1501 16 ("get-player" "set-alpha-blending" "pos" "view" "lambda" "click" "click:" "pick-figure" "x")}
        {Lisp-Entry "reprint-toplevel-form" method #f 1513 11 1513 32 ("user-message" "insert-string" "set-selection" "with-update-locked" "0" "saved-form" "output" "form:" "Designer" "new" "designer" "Form" "read-string-element" "lambda" "with-jazz-readtable" "jml->form" "form" "get-string" "string" "get-end" "toplevel-expr" "range" "let*" "bell" "Jazz-Text-View" "is-not?" "if" "current-document" "text" "let" "align-name?" "align-name?:" "space-properties?" "space-properties?:")}
        {Lisp-Entry "reprint-current-form" method #f 1531 11 1531 31 ("user-message" "insert-string" "set-selection" "with-update-locked" "2" "saved-form" "output" "form:" "Designer" "new" "designer" "Form" "read-string-element" "lambda" "with-jazz-readtable" "second" "jml->form" "form" "get-string" "string" "get-end" "declaration-range" "range" "let*" "bell" "Jazz-Text-View" "is-not?" "if" "current-document" "text" "let" "align-name?" "align-name?:" "space-properties?" "space-properties?:")}
        {Lisp-Entry "reprint-selected-form" method #f 1549 11 1549 32 ("user-message" "insert-string" "set-selection" "with-update-locked" "0" "saved-form" "output" "form:" "Designer" "new" "designer" "Form" "read-string-element" "lambda" "with-jazz-readtable" "jml->form" "form" "get-string" "string" "get-selection" "range" "let*" "bell" "Jazz-Text-View" "is-not?" "if" "current-document" "text" "let" "align-name?" "align-name?:" "space-properties?" "space-properties?:")}
        {Lisp-Entry "reprint-form" method #f 1567 11 1567 23 ("user-message" "insert-string" "set-selection" "with-update-locked" "indent-first?" "indent-first?:" "saved-form" "output" "form:" "Designer" "designer" "let*" "Form" "is-not?" "read-string-element" "with-jazz-readtable" "jml->form" "form" "2" "quotient" "level" "get-string" "string" "bell" "not" "if" "Jazz-Text-View" "is?" "and" "current-document" "0" "get-start" "get-col" ">" "starts-with?" "or" "when" "get-marked" "marked" "get-range" "iterate" "outer-expr" "lambda" "with-safe-explore" "get-selection" "range" "range:" "explorer-class" "new" "expl" "let" "text" "form-range" "define" "align-name?" "align-name?:" "space-properties?" "space-properties?:")}
        {Lisp-Entry "clear-activities" method #f 1606 11 1606 27 ("unregister-activity" "reporter" "lambda" "for-each" "get-reporters" "reporters" "get-activity-manager" "manager" "let*")}
        {Lisp-Entry "Foo" class #f 1620 9 1620 12 ("Object")
          {Lisp-Entry "holder" definition #f 1623 16 1623 22 ()}
          {Lisp-Entry "bar" method #f 1627 13 1627 16 ("7" "5" "if" "message-box" "break" "v" "let" "p" "+" "y" "flag" "n" "lambda" "proc" "self" "z" "2" "x" "let*" "holder" "set!")}
          {Lisp-Entry "baz" method #f 1644 13 1644 16 ("car" "2" "x" "let")}}
        {Lisp-Entry "test" method #f 1650 11 1650 15 ("Foo" "new" "bar")}
        {Lisp-Entry "test-shift" method #f 1655 11 1655 21 ("Foo" "new" "baz")}
        {Lisp-Entry "test-location" method #f 1660 11 1660 24 ("list" "3" "z" "break" "y" "2" "x" "let")}
        {Lisp-Entry "test-location-aux" method #f 1668 11 1668 28 ("30" "20" "10" "foo" "X" "Y" "Z" "new" "z" "let")}
        {Lisp-Entry "X" class #f 1674 9 1674 10 ("Object")
          {Lisp-Entry "Y" class #f 1677 11 1677 12 ("Object")
            {Lisp-Entry "Z" class #f 1680 13 1680 14 ("Object")
              {Lisp-Entry "foo" method #f 1683 17 1683 20 ("0" "naturals" "car" "y" "map" "x" "lambda" "for-each" "list")}
              {Lisp-Entry "bar" method #f 1691 17 1691 20 ("1" "car")}}}}
        {Lisp-Entry "xml-viewer" method #f 1701 11 1701 21 ("set-visible?" "bring-to-front" "set-document" "get-guest" "viewer" "host-visible?" "host-visible?:" "XML-Viewer" "new-frame" "frame" "let*" "load" "File" "file" "XML-Document" "new" "document" "let")}
        {Lisp-Entry "test" method #f 1713 11 1713 15 ("parse-text" "debug" "text:" "XML-Parser" "new" "parser" "text" "let*")}
        {Lisp-Entry "test1" method #f 1720 11 1720 16 ("parse-text" "debug" "text:" "XML-Parser" "new" "parser" "text" "let*" "name" "name:" "log-entry")}
        {Lisp-Entry "test2" method #f 1728 11 1728 16 ("length" "parse-text" "debug" "text:" "XML-Parser" "parser" "read-content-string" "File-Reader" "new" "input" "with" "text" "Jazz" "File" "file" "let*")}
        {Lisp-Entry "My-Transfo" class #f 1742 9 1742 19 ("XML-Transformer")
          {Lisp-Entry "machin" method #f 1745 20 1745 26 ("cdr" "p" ">>xml" "n" "lambda" "for-each" "xml>>" "<-xml" "title" "mode" "f" "a" "xsl-rules" "y" "x" "node")}
          {Lisp-Entry "chouette" method #f 1756 20 1756 28 ("children" "machin" "apply-transformation" "xml>>" "xsl-rules" "b" "a" "node")}}
        {Lisp-Entry "test" method #f 1764 11 1764 15 ("2" "1" "a" "machin" "XML-Formatter" "handler" "handler:" "My-Transfo" "new" "transfo" "let")}
        {Lisp-Entry "test1" method #f 1770 11 1770 16 ("node" "children" "<-xml" "p" ">>xml" "n" "lambda" "for-each" "xml>>" "f" "a" "list" "y" "x" "expand-xsl-ruleset" ":console" "format")}
        {Lisp-Entry "test0" method #f 1786 11 1786 16 ("text" "end-element" "add-attribute" "begin-element" "2" "indentation" "indentation:" ":pretty" "XML-Formatter" "new" "f" "let")}
        {Lisp-Entry "test1" method #f 1799 11 1799 16 ("b" "align" "h1" "body" "process-sxml" "converter" ":pretty" "XML-Formatter" "new" "processor" "let")}
        {Lisp-Entry "test0" method #f 1812 11 1812 16 ("1" "car")}
        {Lisp-Entry "setup-compiler" method #f 1817 11 1817 25 ("Mutation-Annotator" "Type-Annotator" "new" "add-user-pass" "Compiler" "initialize-user-passes")}
        {Lisp-Entry "test1" method #f 1829 11 1829 16 ("debug" "=>" "2" "cond")}
        {Lisp-Entry "test" method #f 1834 11 1834 15 ("+" "ID" "lalr-parser" "debug")}
        {Lisp-Entry "test" method #f 1839 11 1839 15 ("identity" "CPS" "test")}
        {Lisp-Entry "speedup" method #f 1848 11 1848 18 ("-" "percentage" "new" "old")}
        {Lisp-Entry "activity-no" definition #f 1853 14 1853 25 ("0")}
        {Lisp-Entry "test-activities" method #f 1858 11 1858 26 (":unregister?" "set-done" "unless" "1" "delta-pos" "user-message" "sleep" "cancel-requested?" "not" "<" "and" "while" "Range" "set-range" "increase!" "0" "n" "activity-no" "no" "2" "zero?" "keep?" "1000" "500" "/" "3" "wait" "50" "random" "5" "+" "max" "let" "activity" "lambda" "execute" "execute:" "self" "context" "context:" "Activity" "new")}
        {Lisp-Entry "test-styles" method #f 1882 11 1882 22 ("Image-Resource" "image" "Image" "load-image" "IMAGE_BITMAP" "BM_SETIMAGE" "pb" "send-message" "Showcase" "find-frame-guest" "locate" "stage" "let")}
        {Lisp-Entry "collect-extensions" method #f 1892 11 1892 29 ("string<?" "sort" "downcase" "cons" "set!" "ci=?" "test" "test:" "member?" "not" "and" "when" "get-extension" "ext" "file" "lambda" "iterate-directory" "extensions" "let" "dir")}
        {Lisp-Entry "test-ast" method #f 1908 11 1908 19 ("get-application" "fresh-prompt" "describe" "when" "Java-AST" "parse-java" "ast" "Jazz" "File" "file" "let" "describe?")}
        {Lisp-Entry "test-java" method #f 1918 11 1918 20 ("java-definitions" "Java-AST" "parse-java" "ast" "Jazz" "File" "file" "let")}
        {Lisp-Entry "report-aliases" method #f 1929 11 1929 25 ("get-application" "fresh-prompt" "car" "key:" "<" "sort" ":console" "format" "value" "key" "bind" "info" "lambda" "for-each" "newline" "table-keys/values" "aliases" "get-aliases" "table" "let*")}}}})
"Jedi-Search"
 ({Lisp-File-Entry {File :context "src" "jedi" "search" "Jedi-Search.jazz"} 1299082555 jazz
    {Lisp-Entry "jedi.search.Jedi-Search" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jedi" "jazz.ui" "jazz.jml")}
      {Lisp-Entry "Jedi-Search" class #f 45 7 45 18 ("Search-Manager")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("user-search" "User-Search" "user" "directories-search" "Directories-Search" "directories" "projects-search" "Projects-Search" "projects" "text-search" "Text-Search" "fill" "layout-type" "layout-type:" "content" "title" "title:" "text" "Tab-Sheet" "tab" "name" "name:" "!" "install")}}}})
"Jedi-Status"
 ({Lisp-File-Entry {File :context "src" "jedi" "application" "Jedi-Status.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.application.Jedi-Status" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jedi" "jazz.ui.workspace" "jazz.ui" "jazz.system.access" "jazz.library" "jazz.jml" "jazz.ide" "jazz.debugger")}
      {Lisp-Entry "Jedi-Status" class #f 50 7 50 18 ("IDE-Status")}}})
"Jedi-Toolbar"
 ({Lisp-File-Entry {File :context "src" "jedi" "application" "Jedi-Toolbar.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.application.Jedi-Toolbar" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jedi" "jazz.ui" "jazz.library" "jazz.jml" "jazz.ide")}
      {Lisp-Entry "Jedi-Toolbar" class #f 47 7 47 19 ("IDE-Toolbar")
        {Lisp-Entry "form" anonymous #f 50 3 50 7 ("3" "tail-separator" "tail" "location" "location:" "16" "on-forward-menu" "forward-history" "forward" "1" "on-backward-menu" "pick" "body" "!" "backward-history" "backward" "Push-Combo" "on-compare-files" "compare-files" "ide" "compare-directories" ":preserve-domain?" "on-find" ":application" "find" "redo" "undo" "on-clipboard-menu" ":form" "Event-Handler" "context-menu-handler" "context-menu-handler:" "paste" "copy" "view" "cut" "0" "4" "Dimension" "size" "size:" "print-preview" "print-layout" "print" "Separator" "guest" "save" "open" "application" "Action" "action-handler" "action-handler:" "Image-Resource" "resource" "resource:" "tooltip-text" "tooltip-text:" "new" "name" "name:" "Action-Icon" "install")}
        {Lisp-Entry "host-icon" method #f 88 25 88 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 92 25 92 35 ()}}}})
"Jedi-Toplevel"
 ({Lisp-File-Entry {File :context "src" "jedi" "application" "Jedi-Toplevel.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.application.Jedi-Toplevel" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jedi" "jazz.jml" "jazz.ide")}
      {Lisp-Entry "Jedi-Toplevel" class #f 45 7 45 20 ("IDE-Toplevel")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("800" "1200" "Dimension" "size" "size:" "75" "Point" "position" "position:" "caption-base" "caption-base:" "install")}}}})
"Outline-Showcase"
 ({Lisp-File-Entry {File :context "src" "jedi" "showcase" "Outline-Showcase.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.showcase.Outline-Showcase" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Outline-Showcase" class #f 43 7 43 23 ("View")}
      {Lisp-Entry "Outline-Showcase" class #f 49 7 49 23 ("View")
        {Lisp-Entry "form" anonymous #f 52 3 52 7 ("center" "justification" "justification:" "80" "50" "Tree-Label-Column" "width" "width:" "Tree-Node-Column" ":images" "portfolio" "portfolio:" "row" "selection-mode" "selection-mode:" "info" "Tree-View" "Tree-Header" "419" "518" "info-border" "415" "selection" "335" "visible-height" "16" "170" "315" "visible-count" "Label-View" "on-update-information" "260" "update-information" "on-remove-row" "190" "remove-rows" "on-add-row" "add-row" "on-collapse-row" "100" "collapse-row" "on-expand-row" "24" "160" "70" "expand-row" "Push-Button" "on-setting" ":form" "Event-Handler" "action-handler" "action-handler:" "checked?" "checked?:" "18" "120" "10" "340" "title" "title:" "Check-Box" "0" "row-spacing" "row-spacing:" "outline" "Outline-View" "fill" "layout-type" "layout-type:" "content" "!" "vscroll?" "vscroll?:" "Scroller-View" "edge" "border-type" "border-type:" "457" "319" "6" "3" "Point" "position" "position:" "outline-border" "name" "name:" "Border-View" "466" "940" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "host-title" method #f 86 16 86 26 ()}
        {Lisp-Entry "host-position" method #f 90 16 90 29 ("60" "39" "Point")}
        {Lisp-Entry "host-size" method #f 94 16 94 25 ("466" "940" "Dimension")}
        {Lisp-Entry "install" method #f 103 11 103 18 ("update-information" "setup-outline" "nextmethod" "rest")}
        {Lisp-Entry "setup-outline" method #f 114 11 114 24 ("10" "0" "naturals" "5" "=" "when" "n" "lambda" "for-each" "node" "add-row" "locate" "outline" "let")}
        {Lisp-Entry "add-row" method #f 130 11 130 18 ("random-color" "background" "background:" "random-height" "row-height" "row-height:" "father:" "Color-Row" "class" "class:" "self" "context" "context:" "add-row" "father" "outline")}
        {Lisp-Entry "random-height" method #f 134 11 134 24 ("60" "random" "10" "+")}
        {Lisp-Entry "random-color" method #f 138 11 138 23 ("Dark-Purple" "Dark-Blue" "Dark-Green" "Dark-Orange" "Dark-Red" "Color" "random-element")}
        {Lisp-Entry "resize" method #f 152 11 152 17 ("info-border" "0" "outline-border" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-setting" method #f 158 11 158 21 ("0" "1" "get-checked?" "if" "set-row-spacing" "row-spacing" "get-name" "case" "locate" "outline" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-expand-row" method #f 165 11 165 24 ("update-information" "get-row" "expand" "when" "get-selection" "row" "locate" "outline" "let*" "evt")}
        {Lisp-Entry "on-collapse-row" method #f 173 11 173 26 ("update-information" "get-row" "collapse" "when" "get-selection" "row" "locate" "outline" "let*" "evt")}
        {Lisp-Entry "Mark" definition #f 181 14 181 18 ()}
        {Lisp-Entry "on-add-row" method #f 185 11 185 21 ("update-information" "random-color" "background" "background:" "random-height" "row-height" "row-height:" "collapsed" "state" "state:" "father" "father:" "add-row" "get-row" "and" "Mark" "if" "row" "get-shift?" "use-mark?" "get-selection" "sel" "locate" "outline" "let*" "evt")}
        {Lisp-Entry "on-remove-row" method #f 194 11 194 24 ("update-information" "remove-row" "get-row" "and" "Mark" "if" "row" "get-shift?" "use-mark?" "get-selection" "sel" "locate" "outline" "let*" "evt")}
        {Lisp-Entry "on-update-information" method #f 203 11 203 32 ("update-information" "evt")}
        {Lisp-Entry "update-information" method #f 212 11 212 29 ("display-outline" "update-fields")}
        {Lisp-Entry "update-fields" method #f 217 11 217 24 ("get-selection" "selection" "get-visible-height" "visible-height" "get-visible-count" "format" "visible-count" "set-title" "locate" "outline" "let")}
        {Lisp-Entry "display-outline" method #f 225 11 225 26 ("get-root-row" "with-update-locked" "remove-every-row" "subrow" "lambda" "get-sons" "iterate" "display-row" "children" "children:" "expanded" "state" "state:" "father" "father:" "add-row" "subdest" "dest" "row" "iter" "define" "info" "locate" "outline" "let")}
        {Lisp-Entry "display-row" method #f 242 11 242 22 ("list" "get-next" "c5" "get-previous" "c4" "c3" "get-state" "c2" "get-level" "Tree-Label" "c1" "get-image" "image" "image:" "get-title" "title" "title:" "get-background" "color:" "Tree-Node" "new" "c0" "Dark-Blue" "Dark-Red" "Color" "if" "color" "get-visible?" "visible?" "row->line" "and" "lambda" "line" "get-children" "car" "node" "let*" "row" "outline")}
        {Lisp-Entry "row->line" method #f 256 11 256 20 ("error" "get-root-row" "get-sons" "iterate" "increase!" "continuation-return" "eq?" "if" "subrow" "iter" "define" "-1" "line" "let" "return" "lambda" "continuation-capture" "row" "outline")}
        {Lisp-Entry "Color-Row" class #f 275 9 275 18 ("initialize" "Outline-Row")
          {Lisp-Entry "background" property #f 278 14 278 24 ()}
          {Lisp-Entry "get-background" accessor #f 278 49 278 57 ()}
          {Lisp-Entry "set-background" accessor #f 278 49 278 57 ()}
          {Lisp-Entry "draw-background" method #f 281 13 281 28 ("fill-rect" "get-bounds" "bounds" "let" "background" "when" "context" "surface")}}}}})
"Scaled-View"
 ({Lisp-File-Entry {File :context "src" "jedi" "showcase" "Scaled-View.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.showcase.Scaled-View" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Scaled-View" class #f 43 7 43 18 ("View")}
      {Lisp-Entry "Scaled-View" class #f 49 7 49 18 ("explicit" "initialize" "View")
        {Lisp-Entry "client" property #f 52 12 52 18 ()}
        {Lisp-Entry "print" method #f 55 11 55 16 ("size" "position" "background" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-client" method #f 66 18 66 28 ("client")}
        {Lisp-Entry "set-client" method #f 70 18 70 28 ("client" "set!" "value")}
        {Lisp-Entry "draw-background" method #f 79 11 79 26 ("context" "surface")}
        {Lisp-Entry "draw" method #f 83 11 83 15 ("get-v" "get-h" "draw-text" "get-size" "12" "Dimension" "new" "Point" "center" "get-text-width" "width" "name" "->string" "string" "let*" "Caption" "Font" "set-font" "fill-rect" "get-bounds" "bounds" "let" "background" "when" "lv" "lh" "context" "surface")}
        {Lisp-Entry "Info" definition #f 99 26 99 30 ()}
        {Lisp-Entry "register-info" method #f 103 18 103 31 ("get-name" "background" "and" "list" "cons" "Info" "set!" "when" "new-sc?" "new-sc" "clp" "vor" "wor")}
        {Lisp-Entry "mouse-down" method #f 113 11 113 21 ("background" "debug" "pos")}}}})
"Showcase"
 ({Lisp-File-Entry {File :context "src" "jedi" "showcase" "Showcase.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.showcase.Showcase" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jedi" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.editor.jazz")}
      {Lisp-Entry "Showcase" class #f 49 7 49 15 ("View")
        {Lisp-Entry "form" anonymous #f 52 3 52 7 ("threads" "Threads-Showcase" "threads-sheet" "Text-Showcase" "text-sheet" "Tree-Showcase" "tree-sheet" "Outline-Showcase" "outline-sheet" "visible?" "visible?:" "330" "b" "Purple" "210" "320" "Orange" "Trait" "p" "v2cb" "220" "v2ca" "190" "v2c" "160" "v2b" "v2a" "v2" "v1" "trait" "trait:" "on-set-active-trait" "s2" "Medium-Gray" "traits-sheet" "Red" "250" "wiped" "on-wipe" ":form" "Event-Handler" "action-handler" "action-handler:" "24" "400" "85" "effects-sheet" "east" "west" "south" "north" "4" "layout-padding" "layout-padding:" "border" "layout-border" "420" "40" "relative" "mode" "mode:" "vert" "second" "first" "division" "division:" "horz" "orientation" "orientation:" "Splitter-View" "layout-split" "280" "Dark-Green" "center" "Dark-Blue" "Dark-Orange" "View" "Dark-Red" "head" "location" "location:" "vertical" "layout-justification" "layout-justification:" "500" "flow" "layout" "Layout-View" "solid" "layout-flow" "auto-size?" "auto-size?:" "layout-sheet" "555" "870" "ss" "Scaling-Showcase" "scaling-sheet" "558" "884" "0" "ds" "Draw-Showcase" "drawing-sheet" "47" "Label-Tool" "176" "152" "128" "Radio-Tool" "71" "Toggle-Tool" "139" "Push-Tool" "236" "selected?" "selected?:" "217" "259" "Radio-Button" "218" "153" "Check-Box" "212" "Push-Button" "180" "288" "Progress-Bar" "8" "214" "185" "21" "Horizontal-Line" "165" "17" "239" "Group-Box" "270" "body" "148" "Push-Combo" "Moniker-Widget" "124" "Color-Combo" "101" "content:" "choices" "choices:" "Combo-Box" "entry" "style" "style:" "19" "178" "78" "230" "22" "92" "Label-View" "170" "b9" "b8" "130" "b7" "110" "b6" "90" "b5" "70" "b4" "b3" "30" "b2" "16" "b1" "50" "Tree-Label-Column" "width" "width:" "Tree-Node-Column" "row" "selection-mode" "selection-mode:" "tv" "Tree-View" "Tree-Header" "fill" "layout-type" "layout-type:" "313" "150" "tree-border" "Blue" "660" "dcs" "DC-Showcase" "Green" "Color" "background" "background:" "140" "200" "rs" "Region-Showcase" "jt" "Jazz-Text-View" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "Scroller-View" "edge" "border-type" "border-type:" "221" "350" "269" "text-border" "Border-View" "100" "300" "10" "440" "t" "Image-Resource" "resource" "resource:" ":images" "portfolio" "portfolio:" "32" "20" "i" "Image-View" "content" "!" "title" "title:" "views-sheet" "Tab-Sheet" "588" "888" "6" "Point" "position" "position:" "tab" "name" "name:" "Tab-View" "600" "900" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "install" method #f 199 20 199 27 ("install-views" "nextmethod" "rest")}
        {Lisp-Entry "host-icon" method #f 209 25 209 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 213 25 213 35 ()}
        {Lisp-Entry "host-position" method #f 217 25 217 38 ("30" "50" "Point")}
        {Lisp-Entry "host-size" method #f 221 25 221 34 ("650" "900" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 225 20 225 35 ("home")}
        {Lisp-Entry "resize" method #f 234 20 234 26 ("tab" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-set-active-trait" method #f 239 11 239 30 ("list" "if" "set-active-traits" "trait:" "get-property" "trait" "ss" "locate" "view" "get-sender" "get-creator" "creator" "let*" "evt")}
        {Lisp-Entry "get-stage" method #f 251 11 251 20 ("locate" "get-content" "name")}
        {Lisp-Entry "install-views" method #f 260 11 260 24 ("25" "0" "naturals" "5" "=" "father" "father:" "cell" "format" "let*" "n" "lambda" "for-each" "node" "Tree-Label" "Image-Resource" "image" "image:" "title" "title:" "Tree-Node" "new" "list" "children" "children:" "add-row" "tv" "tree" "install-tree-view" "jt" "locate" "get-controller" "set-moniker" "exists?" "when" "Jedi-Project" "File" "file" "let" "install-text" "define")}
        {Lisp-Entry "on-wipe" method #f 293 11 293 18 ("Blue" "Red" "Color" "get-background" "eq?" "if" "set-background" "005" "0" "0.005" "delay" "delay:" "right" "direction" "direction:" "Wipe-Effect" "new" "get-root" "set-effect" "wiped" "locate" "canvas" "let" "evt")}}
      {Lisp-Entry "Region-Showcase" class #f 304 7 304 22 ("View")
        {Lisp-Entry "draw" method #f 308 11 308 15 ("8" "160" "Image-Resource" "get-application" "get-images-portfolio" "draw-image" "Red" "Color" "fill-region" "or" "combine!" "120" "180" "70" "30" "sec" "100" "145" "50" "Rect" "frs" "Region" "new" "rgn" "with" "10" "draw-text" "Caption" "Font" "set-font" ":transparent" "set-bk-mode" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "DC-Showcase" class #f 326 7 326 18 ("View")
        {Lisp-Entry "draw" method #f 330 11 330 15 ("10" "Point" "destination" "destination:" "bit-blit" "Green" "Color" "0" "Rect" "fill-rect" "Memory-Surface" "new" "memory-dc" "with" "32" "Dimension" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Draw-Showcase" class #f 342 7 342 20 ("View")
        {Lisp-Entry "draw" method #f 345 20 345 24 ("250" "draw-text" "frame-rect" "Dark" "Medium" "340" "Light" "320" "White" "360" "400" "300" "200" "Black" "set-text-color" "Green" "214" "118" "fill-rect" "30" "650" "10" "450" "Rect" "new" "Blue" "1" "Red" "Color" "0" "list" "gradient-fill" "rect" "draw-gradient" "define" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Scaling-Showcase" class #f 365 7 365 23 ("View")}}})
"Smoker"
 ({Lisp-File-Entry {File :context "src" "jedi" "smoker" "Smoker.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.smoker.Smoker" module #f 37 18 37 36 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jedi")}
      {Lisp-Entry "Smoker" class #f 43 7 43 13 ("Jedi")
        {Lisp-Entry "conclude-process" method #f 46 20 46 36 ("smoke" "Smoker-Suite" "new" "suite" "let")}}}})
"Smoker-Builder"
 ({Lisp-File-Entry {File :context "src" "jedi" "smoker" "Smoker-Builder.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.smoker.Smoker-Builder" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Smoker-Builder" class #f 40 7 40 21 ("Object")}
      {Lisp-Entry "Smoker-Builder" class #f 46 7 46 21 ("Object")
        {Lisp-Entry "Smoker-Project" definition #f 49 14 49 28 ()}
        {Lisp-Entry "build/run" method #f 53 18 53 27 ("set-done" "run" "step-it" "cancel-requested?" "unless" "build" "wait-for" "user-message" "2" "0" "Range" "set-range" "Smoker-Project" "Launcher-Project" "find-project" "project" "let" "activity" "lambda" "execute" "execute:" "self" "context" "context:" "name" "name:" "Activity" "new")}
        {Lisp-Entry "build" method #f 74 11 74 16 ("keep-reporter?" "keep-reporter?:" "threaded?" "threaded?:" "build" "project")}
        {Lisp-Entry "run" method #f 78 11 78 14 ("wait?" "wait?:" "create-process" "format" "command" "outputed-file" "parse" "pathname" "let*" "project")}}}})
"Smoker-Suite"
 ({Lisp-File-Entry {File :context "src" "jedi" "smoker" "Smoker-Suite.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.smoker.Smoker-Suite" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Smoker-Suite" class #f 40 7 40 19 ("Object")}
      {Lisp-Entry "Smoker-Suite" class #f 46 7 46 19 ("Object")
        {Lisp-Entry "smoke" method #f 49 18 49 23 ("run-builds" "run-searches" "run-showcase" "run-validations")}
        {Lisp-Entry "run-validations" method #f 71 11 71 26 ("10" "set-done" "step-it" "2" "sleep" "report-success?" "report-success?:" "validate" "feedback" "feedback:" "Validation-Suite" "suite" "let" "user-feedback" "1" "0" "Range" "set-range" "while" "activity" "lambda" "execute" "execute:" "self" "context" "context:" "name" "name:" "Activity" "new")}
        {Lisp-Entry "run-showcase" method #f 94 11 94 23 ("5" "0" "naturals" "add-threaded-icon" "n" "lambda" "for-each" "threads" "let" "threads-sheet" "set-selection-name" "locate" "tab" "get-guest" "showcase" "Showcase" "new-frame" "frame" "let*")}
        {Lisp-Entry "run-searches" method #f 110 11 110 23 ("on-search" "set!" "1" "sleep" "wait-for" "when" "while" "running" "let" "thread" "lambda" "execute" "execute:" "self" "context" "context:" "name" "name:" "Thread" "new" "unimplemented" "set-search-targets" "end-edition" "set-visible?" "targets" "locate" "tree" "get-search" "view" "get-guest" "manager" "get-search-manager" "frame" "get-application" "appl" "let*")}
        {Lisp-Entry "run-builds" method #f 140 11 140 21 ("7000" "Puzzle-Project" "5000" "1000" "Yoda-Project" "8000" "0" "Launcher-Project" "run-project-builds")}
        {Lisp-Entry "run-project-builds" method #f 146 11 146 29 ("keep-reporter?" "keep-reporter?:" "threaded?" "threaded?:" "build" "set!" "find-project" "project" "wait-for" "when" "while" "running" "let" "sleep" "thread" "lambda" "execute" "execute:" "self" "context" "context:" "format" "name" "name:" "Thread" "new" "unimplemented" "wait-beetween" "0" "wait-before" "project-title" "project-class" "title")}}}})
"Text-Showcase"
 ({Lisp-File-Entry {File :context "src" "jedi" "showcase" "Text-Showcase.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.showcase.Text-Showcase" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Text-Showcase" class #f 43 7 43 20 ("View")}}})
"Threads-Showcase"
 ({Lisp-File-Entry {File :context "src" "jedi" "showcase" "Threads-Showcase.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.showcase.Threads-Showcase" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("time" "jedi" "jazz.ui.window" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Threads-Showcase" class #f 49 7 49 23 ("0" "initialize" "View")
        {Lisp-Entry "threads" slot #f 52 8 52 15 ()}
        {Lisp-Entry "slowdown" slot #f 53 8 53 16 ()}
        {Lisp-Entry "start" slot #f 54 8 54 13 ()}
        {Lisp-Entry "count" slot #f 55 8 55 13 ()}
        {Lisp-Entry "done?" slot #f 56 8 56 13 ()}
        {Lisp-Entry "form" anonymous #f 59 3 59 7 ("470" "776" "32" "2" "area" "View" "on-resume-threads" "224" "resume-threads" "on-suspend-threads" "114" "suspend-threads" "on-add-threads" ":form" "Event-Handler" "action-handler" "action-handler:" "22" "100" "Dimension" "size" "size:" "4" "Point" "position" "position:" "title" "title:" "add-threads" "name" "name:" "Push-Button" "install")}
        {Lisp-Entry "destroy-component" method #f 67 20 67 37 ("nextmethod" "stop-showcase")}
        {Lisp-Entry "start-showcase" method #f 72 11 72 25 ("add-threads" "done?" "0" "count" "current-time" "time->seconds" "start" "set!")}
        {Lisp-Entry "stop-showcase" method #f 79 11 79 24 ("threads" "thread-join!" "for-each" "done?" "set!")}
        {Lisp-Entry "add-icon" method #f 85 11 85 19 ("32" "Dimension" "size:" "get-height" "42" "get-width" "-" "random" "Point" "position" "position:" "parent" "parent:" "Image-Resource" "resource" "resource:" "Showcase-Icon" "new" "get-size" "size" "locate" "area" "let*" "n")}
        {Lisp-Entry "add-threaded-icon" method #f 95 18 95 35 ("005" "length" "*" "cons" "threads" "set!" "showcase" "animate-icon" "execute-event" "slowdown" "sleep" "done?" "not" "while" "lambda" "new-thread" "thread-start!" "thread" "add-icon" "icon" "let*" "n")}
        {Lisp-Entry "on-add-threads" method #f 111 11 111 25 ("add-threads" "evt")}
        {Lisp-Entry "on-suspend-threads" method #f 115 11 115 29 ("threads" "suspend" "for-each" "evt")}
        {Lisp-Entry "on-resume-threads" method #f 119 11 119 28 ("threads" "resume" "for-each" "evt")}
        {Lisp-Entry "add-threads" method #f 123 11 123 22 ("5" "0" "naturals" "add-threaded-icon" "n" "lambda" "for-each")}
        {Lisp-Entry "report-timing" method #f 129 11 129 24 ("start" "current-time" "time->seconds" "-" "/" "user-message" "0" "100" "modulo" "=" "when" "count" "increase!")}
        {Lisp-Entry "print" method #f 135 20 135 25 ("object->serial" "format" "lambda" "self" "print-unreadable" "readably" "output")}}
      {Lisp-Entry "Showcase-Icon" class #f 147 7 147 20 ("Action-Icon")
        {Lisp-Entry "direction-h" slot #f 150 8 150 19 ()}
        {Lisp-Entry "direction-v" slot #f 151 8 151 19 ()}
        {Lisp-Entry "prepare" method #f 154 20 154 27 ("direction-v" "5" "11" "random" "-" "direction-h" "set!" "nextmethod" "rest")}
        {Lisp-Entry "animate-icon" method #f 160 18 160 30 ("get-height" "get-bottom" "get-top" "-" "set!" "get-width" "get-right" ">" "0" "get-left" "<" "or" "when" "parent" "get-size" "area" "get-rect" "rect" "rebound-icon" "direction-v" "get-v" "direction-h" "get-h" "+" "Point" "new" "set-position" "get-position" "pos" "let" "move-icon" "define")}}}})
"Tree-Showcase"
 ({Lisp-File-Entry {File :context "src" "jedi" "showcase" "Tree-Showcase.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.showcase.Tree-Showcase" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jedi" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Tree-Showcase" class #f 47 7 47 20 ("View")
        {Lisp-Entry "form" anonymous #f 50 3 50 7 ("center" "justification" "justification:" "80" "Tree-Label-Column" "Tree-Node-Column" "tree-info" "419" "518" "tree-info-border" "415" "selection" "395" "first-displayed-offset" "375" "first-displayed-line" "355" "first-displayed" "335" "visible-height" "16" "170" "315" "visible-count" "Label-View" "on-update-information" "275" "update-information" "on-show-hide" "235" "show/hide" "on-remove-rows" "205" "remove-rows" "on-add-row" "24" "160" "175" "add-row" "Push-Button" "display-images?" "110" "toplevel-controls?" "50" "30" "on-setting" ":form" "Event-Handler" "action-handler" "action-handler:" "checked?" "checked?:" "20" "120" "10" "340" "header?" "Check-Box" "100" "Right-Column" "85" "Middle-Column" "130" "width" "width:" "title" "title:" "Node-Column" ":images" "portfolio" "portfolio:" "row" "selection-mode" "selection-mode:" "multiple-selection?" "multiple-selection?:" "row-spacing" "row-spacing:" "0" "column-spacing" "column-spacing:" "filled-column" "filled-column:" "tree" "Tree-View" "Tree-Header" "fill" "layout-type" "layout-type:" "content" "!" "vscroll?" "vscroll?:" "Scroller-View" "edge" "border-type" "border-type:" "457" "319" "6" "3" "Point" "position" "position:" "tree-border" "name" "name:" "Border-View" "466" "940" "Dimension" "size" "size:" "install")}
        {Lisp-Entry "host-title" method #f 96 25 96 35 ()}
        {Lisp-Entry "host-position" method #f 100 25 100 38 ("60" "39" "Point")}
        {Lisp-Entry "host-size" method #f 104 25 104 34 ("466" "940" "Dimension")}
        {Lisp-Entry "install" method #f 113 20 113 27 ("update-information" "setup-tree" "nextmethod" "rest")}
        {Lisp-Entry "setup-tree" method #f 124 11 124 21 ("10" "0" "naturals" "3" "/=" "visible?" "visible?:" "5" "=" "when" "cell" "format" "title" "let*" "n" "lambda" "for-each" "node" "Image-Resource" "add-row" "locate" "tree" "let")}
        {Lisp-Entry "add-row" definition #f 143 15 143 22 ("Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children" "children:" "random-height" "row-height" "row-height:" "father:" "add-row" "visible?" "visible?:" "right" "middle" "image2" "image" "title" "father" "tree")}
        {Lisp-Entry "random-height" definition #f 147 15 147 28 ("60" "random" "10" "+")}
        {Lisp-Entry "guest-actions" method #f 156 20 156 33 ("nextmethod" "tree-showcase" "find-actions" "cons")}
        {Lisp-Entry "resize" method #f 166 20 166 26 ("tree-info-border" "0" "tree-border" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-setting" method #f 172 11 172 21 ("set-display-images?" "display-images?" "get-node-column" "set-toplevel-controls?" "toplevel-controls?" "set-row-spacing" "row-spacing" "0" "1" "if" "set-column-spacing" "column-spacing" "get-checked?" "set-header?" "header?" "get-name" "case" "locate" "tree" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "Unique-Id" definition #f 183 14 183 23 ("0")}
        {Lisp-Entry "Last-Added-Row" definition #f 186 14 186 28 ()}
        {Lisp-Entry "on-add-row" method #f 190 11 190 21 ("update-information" "and" "Tree-Label" "Image-Resource" "image" "image:" "title:" "Tree-Node" "new" "children" "children:" "random-height" "row-height" "row-height:" "collapsed" "state" "state:" "father" "father:" "add-row" "Last-Added-Row" "set!" "increase!" "Unique-Id" "format" "title" "let" "row" "for-each" "get-shift?" "use-last-added?" "get-row" "n" "lambda" "map" "list" "null?" "if" "rows" "get-selection" "sel" "locate" "tree" "let*" "evt")}
        {Lisp-Entry "on-remove-rows" method #f 203 11 203 25 ("update-information" "remove-row" "row" "for-each" "get-row" "n" "lambda" "map" "rows" "get-selection" "sel" "locate" "tree" "let*" "evt")}
        {Lisp-Entry "on-show-hide" method #f 213 11 213 23 ("update-information" "not" "set-visible?" "get-visible-flag" "visible?" "get-user-data" "target" "row" "for-each" "get-row" "n" "lambda" "map" "rows" "get-selection" "sel" "tree-info" "locate" "tree" "let*" "evt")}
        {Lisp-Entry "on-update-information" method #f 225 11 225 32 ("update-information" "evt")}
        {Lisp-Entry "update-information" method #f 234 11 234 29 ("display-tree" "update-fields")}
        {Lisp-Entry "update-fields" method #f 239 11 239 24 ("get-selection" "selection" "get-visible-height" "visible-height" "get-visible-count" "format" "visible-count" "set-title" "locate" "tree" "let")}
        {Lisp-Entry "display-tree" method #f 246 11 246 23 ("get-root-row" "with-update-locked" "remove-every-row" "subrow" "lambda" "get-sons" "iterate" "user-data" "user-data:" "display-row" "children" "children:" "expanded" "state" "state:" "father" "father:" "add-row" "subdest" "dest" "row" "iter" "define" "tree-info" "info" "locate" "tree" "let")}
        {Lisp-Entry "display-row" method #f 263 11 263 22 ("list" "get-visible-flag" "c6" "c5" "c4" "color:" "c3" "c2" "Tree-Label" "c1" "get-image" "image" "image:" "get-title" "title" "title:" "Tree-Node" "new" "c0" "Dark-Blue" "Dark-Red" "Color" "if" "color" "get-visible?" "visible?" "row->line" "and" "lambda" "rank" "get-children" "car" "node" "let*" "internal-fields" "next" "previous" "state" "level" "receive" "row" "tree")}
        {Lisp-Entry "row->line" definition #f 279 15 279 24 ("error" "get-root-row" "get-sons" "iterate" "increase!" "continuation-return" "eq?" "if" "subrow" "iter" "define" "-1" "rank" "let" "return" "lambda" "continuation-capture" "row" "tree")}}
      {Lisp-Entry "Node-Column" class #f 298 7 298 18 ("Tree-Node-Column")
        {Lisp-Entry "draw-data" method #f 301 20 301 29 ("0" "draw-title" "Dark-Red" "Red" "Color" "if" "fill-rect" "selected?:" "getf" "selected?" "text-rect" "rect" "let" "nextmethod" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Middle-Column" class #f 314 7 314 20 ("Tree-Column")
        {Lisp-Entry "draw-data" method #f 317 20 317 29 ("Dark-Blue" "Blue" "Color" "if" "fill-rect" "selected?:" "getf" "selected?" "0" "Rect" "new" "rect" "let" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Right-Column" class #f 328 7 328 19 ("Tree-Column")
        {Lisp-Entry "draw-data" method #f 331 20 331 29 ("Dark-Green" "Green" "Color" "if" "fill-rect" "selected?:" "getf" "selected?" "0" "Rect" "new" "rect" "let" "height" "width" "data" "row" "context" "surface")}}}})
"Tree-Showcase-Actions"
 ({Lisp-File-Entry {File :context "src" "jedi" "showcase" "Tree-Showcase-Actions.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.showcase.Tree-Showcase-Actions" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jedi" "jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Tree-Showcase-Actions" class #f 46 7 46 28 ("Actions")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("F5" "Shortcut" "shortcut" "shortcut:" "on-update-information" ":document" "Event-Handler" "action-handler" "action-handler:" "update-information" "name" "name:" "Action-Item" "Actions")}}}})
"Vertical-View"
 ({Lisp-File-Entry {File :context "src" "jedi" "test" "Vertical-View.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.test.Vertical-View" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Vertical-View" class #f 43 7 43 20 ("View")}
      {Lisp-Entry "Vertical-View" class #f 49 7 49 20 ("View")
        {Lisp-Entry "Toto" class #f 52 9 52 13 ("Border-View")
          {Lisp-Entry "form" anonymous #f 55 5 55 9 ("100" "Dimension" "size" "size:" "0" "Point" "position" "position:" "text" "Text-View" "content" "name" "name:" "!" "vscroll?" "vscroll?:" "hscroll?" "hscroll?:" "Scroller-View" "edge" "border-type" "border-type:" "install")}}
        {Lisp-Entry "install" method #f 62 11 62 18 ("3" "0" "naturals" "->string" "title" "title:" "Label-View" "else" "Horizontal-View" "2" "toto" "name" "name:" "self" "parent" "parent:" "Toto" "new" "1" "case" "n" "lambda" "for-each" "nextmethod" "rest")}
        {Lisp-Entry "layout" method #f 77 11 77 17 ("increase!" "set-size" "Point" "set-position" "view" "lambda" "for-each-view" "0" "v" "Dimension" "new" "child-size" "get-height" "quotient" "height" "get-width" "width" "get-size" "size" "length" "let*" "children" "when")}
        {Lisp-Entry "draw" method #f 97 11 97 15 ("Dark-Red" "Color" "get-bounds" "fill-rect" "lv" "lh" "context" "surface")}}}})
"_convert"
 ({Lisp-File-Entry {File :context "src" "jedi" "convert" "_convert.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.convert" module #f 37 18 37 30 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library.component" "jazz.library" "jazz.jml" "jazz.io" "jazz.graphic.literals")}
      {Lisp-Entry "convert-settings-initial" definition #f 52 23 52 47 ("map" "get-data" "set-imports" "not-null?" "key" "key:" "string<?" "sort" "cons" "set!" "memq?" "locate-reference" "not" "get-model" "get-action" "eq?" "imports" "get-context" "context" "module-get" "car" "potential-import" "null?" "if" "scan" "iterate" "determine-import" "determine-imports" "workspaces" "jazz.ide.data.workspaces" "toolbox" "jazz.ide.data.toolbox" "skins" "jazz.ide.data.skins" "servers" "jazz.ide.data.servers" "preferences" "jedi.data.preferences" "pagesetup" "jazz.ide.data.pagesetup" "favorites" "jazz.ide.data.favorites" "sqlserver" "jazz.database.sqlserver" "ado" "jazz.database" "jazz.database.ado" "connections" "jazz.ide.data.connections" "identity" "bindings" "jedi.data" "jedi.data.bindings" "symbol->string" "downcase" "module-dir" "profile-package" "profile-name" "receive" "frame-model" "Reference" "set-property" "model" "rename-property" "model-name" "convert-workspaces" "Profiles" "Jazz" "File" "new" "tag-reference" "tag-reference:" "*" "Workbench" "workbench" "jazz.ide.data.workbench" "profile-unit" "convert-workbench" "active-project" "get-property" "node" "iterate-nodes" "convert-preferences" ",expr" ",dialect" "file" "convert" "potential-imports" "dialect" "settings-dir" "convert-setting" "delete-file" "save-form" "jazz.editor.jazz" "c" "jazz.editor" "jazz.editor.c" "add-imports" "project-file" "jazz.ide.data" "jazz.ide.data.project" "data" "parse-form" "with-jazz-readtable" "filename" "unit-name" "remove-property" "?form" "form" "Project" "extends" "class" "import" "jazz" "?module-name" "module" "read-manifest" "manifest-file" "convert-manifest" "values" "unregister-alias" "find-alias" "package-profiles-set!" "find-package" "for-each" "cdr" "set-car!" "project" "pair" "?" "?profile" "profiles" "assq" "?alist" "?profile-package" "package" "match" "read-expr" "expr" "package-file" "error" "unable-to-convert" "convert-package" "recursive?" "recursive?:" "directories?" "directories?:" "files?" "files?:" "move-pathname" "obsolete-profile-dir" "obsolete-dir" "feedback" "convert-profile" "copy-directory" "list" "profile-dir" "starts-with?" "and" "get-name" "dirname" "dir" "iterate-directory" "when" "Home" "Directory" "user-dir" "format" "output" "lambda" "cr-lf" "eol-encoding" "eol-encoding:" "new-file" "path-settings" "call-with-output-file" "create-directories" "exists?" "unless" "new-directory" "profiles-dir" "let" "convert-profiles" "define" "dot-jedi-dir")}
      {Lisp-Entry "convert-settings-205000" definition #f 223 23 223 46 ("iterate-profiles" "convert-settings" "else" "construct-font" "Font" "construct-color" "apply" "Color" "case" "cdr" "name:" "car" "eq?" "not-null?" "and" "if" "skip-name" "arguments" "name" "literal-hook" "form" "what" "convert" "profile-dir" "convert-profile" "define" "dot-jedi-dir")}
      {Lisp-Entry "iterate-profiles" definition #f 249 13 249 29 ("recursive?" "recursive?:" "directories?" "directories?:" "files?" "files?:" "profile-dir" "new-file" "starts-with?" "and" "get-name" "dirname" "dir" "lambda" "iterate-directory" "exists?" "when" "new-directory" "profiles-dir" "let" "proc" "dot-jedi-dir")}
      {Lisp-Entry "convert-settings" definition #f 263 13 263 29 ("workspaces" "workbench" "toolbox" "styles" "skins" "servers" "preferences" "pagesetup" "fonts" "favorites" "connections" "colors" "bindings" "split" "new-directory" "module-dir" "get-name" "profile-name" "save-form" "parse-form" "form" "read-expr" "expr" "exists?" "when" "new-file" "file" "let" "feedback" "filename" "settings-dir" "what" "convert-setting" "define" "literal-hook" "convert" "profile-dir")}
      {Lisp-Entry "read-expr" definition #f 293 13 293 22 ("read" "read-literal-hook" "walk-for" "parameterize" "input" "cr-lf" "eol-encoding" "eol-encoding:" "path-settings" "call-with-input-file" "lambda" "with-jazz-readtable" "literal-hook" "file")}
      {Lisp-Entry "feedback" definition #f 303 13 303 21 ("force-output" "newline" "format" "apply" "output" "lambda" ":terminal" "with-printer" "rest")}}})
"_development"
 ({Lisp-File-Entry {File :context "src" "jedi" "development" "_development.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.development" module #f 37 8 37 24 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.development")}
      {Lisp-Entry "import" anonymous #f 42 1 42 7 ("jazz.ui.workspace" "jazz.ui.view" "jazz.ui.dialog" "jazz.ui.clipboard" "jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.io" "jazz.graphic" "jazz.geometry" "jazz.editor.sql.view" "jazz.editor.sql" "jazz.editor.jazz.inspector" "jazz.editor.jazz" "jazz.development" "jazz.debuggee")}
      {Lisp-Entry "i" definition #f 67 20 67 21 ("inspect" "object")}
      {Lisp-Entry "ins" definition #f 71 20 71 23 ("inspect-object" "object")}
      {Lisp-Entry "inspect-form" definition #f 75 20 75 32 ("newline" "form->node" "pretty-print" "get-form" "Form" "is?" "if" "form" "let" "output" "lambda" "with-text-inspector" "form/component")}
      {Lisp-Entry "inspect-traits" definition #f 83 20 83 34 ("newline" "form->node" "pretty-print" "not" "get-restore-form" "form" "get-name" "format" "set!" "if" "trait" "for-each-trait" "first?" "let" "output" "lambda" "with-text-inspector" "component")}
      {Lisp-Entry "with-text-inspector" definition #f 100 20 100 39 ("acquire-focus" "set-modified?" "text-beginning" "set-caret" "get-output-string" "set-string-content" "get-guest" "text" "host-workspace" "host-workspace:" "host-visible?" "host-visible?:" "Jazz-Text-View" "new-frame" "frame" "selected-workspace" "get-name" "workspace" "let*" "open-output-string" "output" "let" "proc")}
      {Lisp-Entry "methods" definition #f 112 20 112 27 ("get-fields" "table-values" "Method" "collect-type" "field-name" "map" "class-of" "class?" "if" "class" "let" "class/obj")}
      {Lisp-Entry "cc" definition #f 122 19 122 21 ("set!" "color:" "choose-color" "new-color" "registered-color" "else" "Color" "is?" "not" "cond" "color" "color-or-name" "lambda" "previous-color" "let")}
      {Lisp-Entry "cf" definition #f 133 20 133 22 ("choose-file")}
      {Lisp-Entry "cmf" definition #f 137 20 137 23 ("multiple-selection?" "multiple-selection?:" "choose-file")}
      {Lisp-Entry "cnf" definition #f 141 20 141 23 ("choose-new-file")}
      {Lisp-Entry "cd" definition #f 145 20 145 22 ("choose-directory")}
      {Lisp-Entry "cp" definition #f 149 20 149 22 ("user-message" "set-clipboard-text" "cd" "get-list" "format" "path" "let")}
      {Lisp-Entry "find-files" definition #f 161 20 161 30 ("debug" "match" "when" "get-name" "name" "file" "lambda" "iterate-directory" "Regular-Expression" "new" "regexp" "let" "directory" "pattern")}
      {Lisp-Entry "rename-files" definition #f 170 20 170 32 ("format-plural" "format" "message-box" "directories?" "directories?:" "files?" "files?:" "increase!" "move-pathname" "get-directory" "new-file" "replace" "new-name" "when" "match" "get-name" "name" "let*" "file" "lambda" "iterate-directory" "List-Factory" "failed" "0" "succeeded" "replacement-regexp" "Regular-Expression" "new" "find-regexp" "title" "title:" "choose-directory" "directory" "let" "replacement" "find")}
      {Lisp-Entry "Receiver-View" class #f 195 7 195 20 ("explicit" "initialize" "View")
        {Lisp-Entry "invite" property #f 198 12 198 18 ()}
        {Lisp-Entry "receiver" property #f 199 12 199 20 ()}
        {Lisp-Entry "get-receiver" accessor #f 199 45 199 53 ()}
        {Lisp-Entry "set-receiver" accessor #f 199 45 199 53 ()}
        {Lisp-Entry "form" anonymous #f 202 3 202 7 ("Dark" "Color" "background" "background:" "install")}
        {Lisp-Entry "get-invite" method #f 206 18 206 28 ("invite")}
        {Lisp-Entry "set-invite" method #f 210 18 210 28 ("invalidate-view" "invite" "set!" "value")}
        {Lisp-Entry "receive-files" method #f 215 20 215 33 ("self" "receiver" "files" "pos")}
        {Lisp-Entry "Background-Font" definition #f 219 14 219 29 ("Heading2" "Font")}
        {Lisp-Entry "draw" method #f 223 20 223 24 ("Gray" "get-v" "2" "get-h" "+" "draw-text" "Black" "Color" "set-text-color" "get-display-size" "center" "pos" "get-text-extent" "extent" "invite" "or" "localize" "title" "let*" "Background-Font" "set-font" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "setup-receiver" definition #f 236 20 236 34 ("receiver:" "224" "434" "Dimension" "host-size" "host-size:" "169" "219" "Point" "host-position" "host-position:" "or" "host-title" "host-title:" "Receiver-View" "new-palette" "invite" "invite:" "size" "size:" "position" "position:" "title" "title:" "receiver")}
      {Lisp-Entry "rer" definition #f 250 20 250 23 ("match" "Regular-Expression" "new" "replace" "string" "to" "from")}
      {Lisp-Entry "debug-table" definition #f 259 20 259 31 ("0" "display-table" "set-current-request" "get-sql-console-text" "text" "let" "250" "max-display" "max-display:" "name" "name:" "table")}}})
"_jedi"
 ({Lisp-File-Entry {File :context "src" "jedi" "_jedi.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi" module #f 37 8 37 12 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jedi.autoload")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jedi" "autoload.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.autoload" module #f 37 18 37 31 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("Completion-Popup" "jedi.text.Completion-Popup" "Vertical-View" "jedi.test.Vertical-View" "Horizontal-View" "jedi.test.Horizontal-View" "Smoker-Suite" "jedi.smoker.Smoker-Suite" "Smoker-Builder" "jedi.smoker.Smoker-Builder" "Smoker" "jedi.smoker.Smoker" "Tree-Showcase-Actions" "jedi.showcase.Tree-Showcase-Actions" "Tree-Showcase" "jedi.showcase.Tree-Showcase" "Threads-Showcase" "jedi.showcase.Threads-Showcase" "Text-Showcase" "jedi.showcase.Text-Showcase" "Showcase" "jedi.showcase.Showcase" "Scaled-View" "jedi.showcase.Scaled-View" "Outline-Showcase" "jedi.showcase.Outline-Showcase" "Jedi-Search" "jedi.search.Jedi-Search" "Jedi-Profile" "jedi.profile.Jedi-Profile" "Jedi-Preferences" "jedi.preference.Jedi-Preferences" "Jedi-Bindings" "jedi.preference.Jedi-Bindings" "Jedi-Actions" "jedi.preference.Jedi-Actions" "Code-Generator" "jedi.generator.Code-Generator" "Jedi-Toplevel" "jedi.application.Jedi-Toplevel" "Jedi-Toolbar" "jedi.application.Jedi-Toolbar" "Jedi-Status" "jedi.application.Jedi-Status" "Jedi-Menubar" "jedi.application.Jedi-Menubar" "Jedi" "autoload" "jedi.application.Jedi")}}})
"bindings"
 ({Lisp-File-Entry {File :context "src" "jedi" "data" "bindings.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.data.bindings" module #f 37 8 37 26 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jedi" "jazz.ui" "jazz.library")}}})
"install"
 ({Lisp-File-Entry {File :context "src" "jedi" "install.scm"} 1299164971 scheme
    {Lisp-Entry "jedi.install" unit #f 37 6 37 18 ("jedi.services" "workbench" "jazz:register-service")}})
"preferences"
 ({Lisp-File-Entry {File :context "src" "jedi" "data" "preferences.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.data.preferences" module #f 37 8 37 29 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.groupware" "jedi")}}})
"run"
 ({Lisp-File-Entry {File :context "src" "jedi" "run.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.run" module #f 37 8 37 16 ("Jedi" "new" "boot-environment" "descriptor" "lambda" "jedi" "register-product-run" "jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jedi")}}})
"services"
 ({Lisp-File-Entry {File :context "src" "jedi" "services.jazz"} 1296081471 jazz
    {Lisp-Entry "jedi.services" module #f 37 8 37 21 ("get-workbench" "lambda" "workbench" "register-service" "jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jedi" "jazz.project")}}})
