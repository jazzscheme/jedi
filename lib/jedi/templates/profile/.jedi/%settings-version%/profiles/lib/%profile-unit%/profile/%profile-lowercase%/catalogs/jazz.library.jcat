"Aligned-Column"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Aligned-Column.jazz"} 1288732033
    {Lisp-Entry "jazz.library.display.Aligned-Column" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Aligned-Column" class #f 43 20 43 34 ("0" "initialize" "Display-Column")
        {Lisp-Entry "alignment" slot #f 46 8 46 17 ()}
        {Lisp-Entry "max-data" slot #f 47 8 47 16 ()}
        {Lisp-Entry "initialize" method #f 55 20 55 30 ("alignment~self" "set!" "nextmethod" "apply" "others" "left" "'left" "alignment" "bind-keywords" "rest" "displayer")}
        {Lisp-Entry "prepare-print" method #f 66 20 66 33 ("content" "set!" "max-data" ">" "when" "length" "let" "data" "lambda" "for-each" "nextmethod")}
        {Lisp-Entry "print-to" method #f 75 20 75 28 ("right" "border-after" "border" "format" "left" "alignment" "case" "length" "max-data" "-" "padding" "let" "printer" "previous-data" "previous-column" "data")}}}})
"Aligned-Column-Preferences"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Aligned-Column-Preferences.jazz"} 1288732033
    {Lisp-Entry "jazz.library.display.Aligned-Column-Preferences" module #f 37 18 37 65 ("jazz")
      {Lisp-Entry "Aligned-Column-Preferences" class #f 43 20 43 46 ("left" "'left" "initialize" "Column-Preferences")
        {Lisp-Entry "alignment" property #f 46 12 46 21 ()}
        {Lisp-Entry "get-alignment" accessor #f 46 49 46 57 ()}
        {Lisp-Entry "set-alignment" accessor #f 46 49 46 57 ()}
        {Lisp-Entry "column-class" method #f 54 20 54 32 ("Aligned-Column")}
        {Lisp-Entry "new-column" method #f 58 20 58 30 ("alignment" "alignment:" "minimum" "minimum:" "border-after" "border-after:" "border" "border:" "Aligned-Column" "new" "display")}}}})
"Box"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Box.jazz"} 1288732033
    {Lisp-Entry "jazz.library.utility.Box" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Box" class #f 40 7 40 10 ("Object")
        {Lisp-Entry "boxed" slot #f 43 8 43 13 ()}
        {Lisp-Entry "get-boxed" accessor #f 43 21 43 29 ()}
        {Lisp-Entry "initialize" method #f 46 20 46 30 ("boxed~self" "set!" "nextmethod" "boxed")}
        {Lisp-Entry "print" method #f 51 20 51 25 ("self" "class-of" "category-name" "format" "boxed" "not" "if" "readably" "printer")}}}})
"Branch"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "component" "Branch.jazz"} 1288732033
    {Lisp-Entry "jazz.library.component.Branch" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Branch" class #f 43 7 43 13 ("initialize" "Object")
        {Lisp-Entry "client" slot #f 46 8 46 14 ()}
        {Lisp-Entry "get-client" accessor #f 46 45 46 53 ()}
        {Lisp-Entry "set-client" accessor #f 46 45 46 53 ()}
        {Lisp-Entry "trait" slot #f 47 8 47 13 ()}
        {Lisp-Entry "get-trait" accessor #f 47 45 47 53 ()}
        {Lisp-Entry "set-trait" accessor #f 47 45 47 53 ()}
        {Lisp-Entry "parent" slot #f 48 8 48 14 ()}
        {Lisp-Entry "get-parent" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "set-parent" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "branch" slot #f 49 8 49 14 ()}
        {Lisp-Entry "get-branch" accessor #f 49 45 49 53 ()}
        {Lisp-Entry "set-branch" accessor #f 49 45 49 53 ()}
        {Lisp-Entry "restore-form" slot #f 50 8 50 20 ()}
        {Lisp-Entry "get-restore-form" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "set-restore-form" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("parent~self" "trait~self" "client~self" "set!" "nextmethod" "parent" "trait" "client")}
        {Lisp-Entry "print" method #f 60 20 60 25 ("get-name" "trait" "and" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-branches" method #f 71 21 71 33 ("get-branches" "cons" "branch" "not" "if")}
        {Lisp-Entry "restore-client" method #f 82 21 82 35 ("restore-form" "client" "install-form" "restore-client" "branch" "when")}}}})
"Canvas"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "canvas" "Canvas.jazz"} 1288732033
    {Lisp-Entry "jazz.library.canvas.Canvas" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Canvas" class #f 49 20 49 26 ("List-Factory" "new" "initialize" "Component")
        {Lisp-Entry "violations" property #f 52 12 52 22 ()}
        {Lisp-Entry "get-violations" accessor #f 52 48 52 56 ()}
        {Lisp-Entry "set-violations" accessor #f 52 48 52 56 ()}
        {Lisp-Entry "violations-factory" slot #f 55 8 55 26 ()}
        {Lisp-Entry "get-integrity-manager" method #f 63 20 63 41 ("Integrity-Manager" "new")}
        {Lisp-Entry "validate-integrity" method #f 67 18 67 36 ("select-violations-manager" "IDI_ERROR" "icon:" "format-plural" "length" "count" "format" "message-box" "null?" "if" "get-presentation-property" "presentation" "user-message" "when" "get-output" "set!" "self" "validate-integrity" "violations-factory" "reset" "get-integrity-manager" "integrity-manager" "update" "get-violations-manager" "manager" "let" "violations" "update-violations-manager" "define" "report?" "report?:" "reporter" "reporter:" "context" "context:")}
        {Lisp-Entry "get-violations-manager" method #f 89 11 89 33 ("violations-manager-class" "singleton-docked" "get-guest")}
        {Lisp-Entry "select-violations-manager" method #f 93 18 93 43 ("focus?:" "violations-manager-workspace" "workspace:" "violations-manager-class" "select-docked" "select-first" "select-results" "get-violations-manager" "manager" "let")}
        {Lisp-Entry "violations-manager-class" method #f 100 29 100 53 ("Violations-Manager")}
        {Lisp-Entry "violations-manager-workspace" method #f 104 29 104 57 ()}
        {Lisp-Entry "add-violation" method #f 113 18 113 31 ("violations-factory" "put" "violation")}
        {Lisp-Entry "clear-violations" method #f 117 18 117 34 ("violations" "set!" "violations-factory" "reset")}}}})
"Canvas-Element"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "canvas" "Canvas-Element.jazz"} 1288732033
    {Lisp-Entry "jazz.library.canvas.Canvas-Element" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Canvas-Element" class #f 44 20 44 34 ("Component")
        {Lisp-Entry "get-class-descriptor" method #f 52 25 52 45 ("Canvas-Element-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 61 11 61 17 ()
        {Lisp-Entry "Canvas-Element-Descriptor" class #f 67 7 67 32 ("can-view-properties?:" "name-unicity?:" "name-mandatory?:" "Component-Descriptor")
          {Lisp-Entry "class-presentation->name" method #f 75 20 75 44 ("=" "empty-string?" "or" "get-name-mandatory?" "not" "and" "if" "presentation" "class")}
          {Lisp-Entry "class-name->presentation" method #f 81 20 81 44 ("get-name-mandatory?" "or" "if" "name" "class")}
          {Lisp-Entry "component-get-addable-details" method #f 87 20 87 49 ("100" "name-info" "component")}}}}})
"Canvas-Manager"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "canvas" "Canvas-Manager.jazz"} 1290115763
    {Lisp-Entry "jazz.library.canvas.Canvas-Manager" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Canvas-Manager" class #f 49 20 49 34 ("card-border" "bottom-right" "toplevel-controls?:" "controls?:" "display-images?:" "element" "details" "vscroll?:" "hscroll?:" "document" "100" "details-border" "details-pane" "60" "relative" "mode:" "vert" "366" "360" "289" "editor-splitter" "fill" "second" "right" "title:" "descendant" "on-tab-press" "tab-press-handler:" "highlight-edited?:" "tree" "header" "content" "scroller" "descendants" "entry" "style:" "edge" "border-type:" "first" "338" "278" "4" "Point" "position:" "descendants-border" "250" "division:" "horz" "orientation:" "center" "367" "splitter" "on-new" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "enabled?:" "tail" "22" "new" "north" "location:" "7" "flow" "33" "300" "toolbar" "name:" "2" "0" "Rect" "layout-insets:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Component-Editor")
        {Lisp-Entry "host-icon" method #f 84 25 84 34 ("Image-Resource")}
        {Lisp-Entry "host-position" method #f 88 25 88 38 ()}
        {Lisp-Entry "host-size" method #f 92 25 92 34 ()}
        {Lisp-Entry "host-workspaces" method #f 96 20 96 35 ("home")}
        {Lisp-Entry "new-event" method #f 106 25 106 34 ("set-visible?" "bring-to-front" "set-client" "name:" "instantiate" "client" "let" "update-status" "set-newname" "get-controller" "controller" "collect-names" "unique-domain-name" "newname" "localize" "newbase" "get-guest" "manager" "host-visible?:" "new-frame" "apply" "frame" "let*" "rest")}
        {Lisp-Entry "collect-names" method #f 122 16 122 29 ("all-frames" "get-client" "get-name" "neq?" "and" "get-guest" "guest" "Internal-Frame-Host" "is?" "when" "frame" "lambda" "collect" "class-of" "model" "let" "base")}
        {Lisp-Entry "new-controller" method #f 137 20 137 34 ("self" "Canvas-Manager-Controller" "new")}
        {Lisp-Entry "install" method #f 146 20 146 27 ("details" "'details" "self" "descendants" "'descendants" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "install-in-host" method #f 152 20 152 35 ("get-size" "set-size" "when" "tool-preferences" "pref" "let" "nextmethod" "host")}
        {Lisp-Entry "focus-document" method #f 159 20 159 34 ("tree" "descendants" "locate" "acquire-focus")}
        {Lisp-Entry "selection-changed" method #f 168 20 168 37 ("nextmethod" ":french" "french:" ":english" "localize-to" "format" "english:" "Locales" "get-class-presentation" "pres" "car" "class" "set-tooltip-text" "set-enabled?" "begin" "1" "length" "/=" "not" "or" "if" "get-addable-classes" "and" "classes" "get-client" "client" "details" "'details" "tree" "new" "'new" "locate" "tool" "let*" "update-new" "define" "focus?" "force-parent?" "origin" "new-selection" "old-selection")}
        {Lisp-Entry "on-editor" method #f 194 20 194 29 ("save-client" "Custom-Card" "is?" "when" "get-card" "current" ":saving" "setup-card" "setup-details" "car" "null?" "if" "component" "get-selection" "selection" "let" ":selection-changing" "get-kind" "case" "nextmethod" "evt")}
        {Lisp-Entry "setup-details" method #f 213 11 213 24 ("card-update" "categorized" "'categorized" "get-tree" "set-filter" "is?" "designer" "set-designer" "begin" "self" "set-editor" "details-border" "'details-border" "locate" "parent:" "details" "'details" "name:" "new" "card" "class-of" "neq?" "null?" "Details-Card" "get-custom-details" "or" "details-class" "close" "when" "not" "if" "get-details" "current" "let" "component")}
        {Lisp-Entry "get-details" method #f 235 11 235 22 ("details" "'details" "details-border" "'details-border" "locate" "find-component")}
        {Lisp-Entry "get-card" method #f 244 11 244 19 ("properties" "'properties" "card-border" "'card-border" "locate" "find-component")}
        {Lisp-Entry "setup-card" method #f 248 11 248 21 ("card-update" "categorized" "'categorized" "get-tree" "set-filter" "designer" "set-designer" "self" "set-editor" "card-border" "'card-border" "locate" "parent:" "properties" "'properties" "name:" "new" "card" "class-of" "neq?" "null?" "Properties-Card" "get-custom-card" "or" "card-class" "close" "not" "if" "save-client" "Custom-Card" "is?" "when" "get-card" "current" "let" "component")}
        {Lisp-Entry "card-update" method #f 267 26 267 37 ("card")}
        {Lisp-Entry "on-selection-change" method #f 276 11 276 30 ("focus?:" "force-parent?:" "origin:" "list" "set-selection" "get-user-data" "component" "get-row" "row" "let*" "when" "get-single-selection" "selection" "log" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-new" method #f 288 19 288 25 ("acquire-focus" "generate-event?:" "set-single-selection" "row->line" "line" "component-row" "row" "origin:" "list" "set-selection" "select?:" "tree" "descendants" "add-component-class" "component" "get-addable-classes" "car" "class" "get-client" "client" "'details" "locate" "details" "let*" "evt")}
        {Lisp-Entry "on-tab-press" method #f 300 20 300 32 ("get-row" "auto-select" "when" "get-single-selection" "rank" "acquire-focus" "card" "'card" "locate" "get-tree" "tree" "let" "evt")}
        {Lisp-Entry "Validation-Reporter" class #f 314 9 314 28 ("invite" "name:" "title:" "Progress-Reporter")
          {Lisp-Entry "dialog-title" method #f 322 18 322 30 ()}}
        {Lisp-Entry "on-validate-integrity" method #f 327 11 327 32 ("cancelable?:" "Validation-Reporter" "progress-reporter:" "self" "context:" "name:" "threaded?:" "set-done" "user-message" "reporter:" "validate-integrity" "reporter" "lambda" "with-progress" "get-designer" "designer" "get-client" "client" "let" "evt")}}
      {Lisp-Entry "Canvas-Manager-Controller" class #f 347 7 347 32 ("Component-Editor-Controller")
        {Lisp-Entry "document-status" method #f 350 20 350 35 ("modified-status" "name-status" "format")}}}})
"Canvas-Node"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "canvas" "Canvas-Node.jazz"} 1288732033
    {Lisp-Entry "jazz.library.canvas.Canvas-Node" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Canvas-Node" class #f 44 20 44 31 ("Component")
        {Lisp-Entry "get-class-descriptor" method #f 52 25 52 45 ("Canvas-Node-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 61 11 61 17 ()
        {Lisp-Entry "Canvas-Node-Descriptor" class #f 67 7 67 29 ("categorized:" "indexable?:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Image-Resource" "image:" "Component-Descriptor")
          {Lisp-Entry "class-name->presentation" method #f 75 20 75 44 ("class-presentation" "name" "class")}
          {Lisp-Entry "component-get-addable-details" method #f 79 20 79 49 ("100" "name-info" "component")}}}}})
"Category-Moniker"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "moniker" "Category-Moniker.jazz"} 1288732033
    {Lisp-Entry "jazz.library.moniker.Category-Moniker" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Category-Moniker" class #f 43 20 43 36 ("Moniker")}
      {Lisp-Entry "Category-Moniker" class #f 49 20 49 36 ("Moniker")
        {Lisp-Entry "name" slot #f 52 8 52 12 ()}
        {Lisp-Entry "construct-literal" method #f 56 16 56 33 ("self" "new" "name" "context")}
        {Lisp-Entry "print" method #f 60 11 60 16 ("name" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "get-name" method #f 71 11 71 19 ("name")}
        {Lisp-Entry "get-file" method #f 75 11 75 19 ("get-source")}
        {Lisp-Entry "get-protocol" method #f 85 16 85 28 ("category" "'category")}
        {Lisp-Entry "new-moniker" method #f 90 16 90 27 ("car" "self" "new" "list")}
        {Lisp-Entry "present" method #f 94 11 94 18 ("name" "format")}
        {Lisp-Entry "initialize" method #f 103 11 103 21 ("name~self" "set!" "nextmethod" "name")}
        {Lisp-Entry "get-source" method #f 113 18 113 28 ("error" "name" "get-manifest-source" "or")}
        {Lisp-Entry "load-lines" method #f 123 11 123 21 ("get-source" "load-lines" "rest")}
        {Lisp-Entry "save-lines" method #f 127 11 127 21 ("get-source" "save-lines" "rest" "lines")}
        {Lisp-Entry "load-form" method #f 131 11 131 20 ("get-source" "load-form")}}}})
"Column-Preferences"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Column-Preferences.jazz"} 1288732033
    {Lisp-Entry "jazz.library.display.Column-Preferences" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Column-Preferences" class #f 45 20 45 38 ("0" "initialize" "Preferences")
        {Lisp-Entry "border" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-border" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "set-border" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "border-after" property #f 49 12 49 24 ()}
        {Lisp-Entry "get-border-after" accessor #f 49 48 49 56 ()}
        {Lisp-Entry "set-border-after" accessor #f 49 48 49 56 ()}
        {Lisp-Entry "minimum" property #f 50 12 50 19 ()}
        {Lisp-Entry "get-minimum" accessor #f 50 48 50 56 ()}
        {Lisp-Entry "set-minimum" accessor #f 50 48 50 56 ()}
        {Lisp-Entry "column-class" method #f 58 29 58 41 ("Display-Column")}
        {Lisp-Entry "new-column" method #f 62 26 62 36 ("display")}
        {Lisp-Entry "get-class-descriptor" method #f 71 25 71 45 ("Column-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 80 11 80 17 ()
        {Lisp-Entry "Column-Preferences-Descriptor" class #f 86 7 86 36 ("minimum" "border-after" "border" "name:" "Preferences-Descriptor")
          {Lisp-Entry "component-presentation-property?" method #f 97 20 97 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 101 20 101 46 ("column-class" "category-name" "format" "get-title" "or" "component")}
          {Lisp-Entry "component-set-presentation" method #f 105 20 105 46 ("title:" "set-property" "title" "designer" "component")}}}}})
"Columns-Display"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Columns-Display.jazz"} 1288732033
    {Lisp-Entry "jazz.library.display.Columns-Display" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Columns-Display" class #f 40 20 40 35 ("0" "initialize" "Object")
        {Lisp-Entry "columns" slot #f 43 18 43 25 ()}
        {Lisp-Entry "get-columns" accessor #f 43 57 43 65 ()}
        {Lisp-Entry "line" slot #f 44 18 44 22 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("nextmethod" "rest")}
        {Lisp-Entry "add-column" method #f 61 18 61 28 ("insert!" "find" "rank" "let" "list" "append!" "columns" "set!" "null?" "if" "before" "before:" "column")}
        {Lisp-Entry "add-columns" method #f 68 18 68 29 ("add-column" "column" "lambda" "for-each" "before" "before:" "columns")}
        {Lisp-Entry "newline" method #f 79 18 79 25 ("line" "increase!")}
        {Lisp-Entry "print-to" method #f 83 18 83 26 ("print-columns" "prepare-columns" "printer")}
        {Lisp-Entry "prepare-columns" method #f 88 18 88 33 ("prepare-print" "set!" "replace-empty" "data" "get-empty?" "unless" "previous-data" "previous-column" "let" "line" "below" "0" "from" "n" "for" "loop" "prepare-empties" "columns" "rewind" "fill-empty" "column" "lambda" "for-each" "prepare-base" "define")}
        {Lisp-Entry "print-columns" method #f 119 18 119 31 ("format" "/=" "columns" "when" "set!" "print-to" "get-next" "data" "get-empty?" "unless" "column" "lambda" "for-each" "previous-data" "previous-column" "below" "0" "from" "n" "for" "loop" "1" "line" "-" "last" "let" "printer")}}}})
"Component"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "component" "Component.jazz"} 1290013227
    {Lisp-Entry "jazz.library.component.Component" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Component" class #f 48 7 48 16 ("get-presentation-info" "get-name-info" "get-class-info" "explicit" "Visible-Flag" "self" "initialize" "Event-Consumer" "Object")
        {Lisp-Entry "Installed-Flag" definition #f 57 14 57 28 ("#x00000001")}
        {Lisp-Entry "Finished-Flag" definition #f 58 14 58 27 ("#x00000002")}
        {Lisp-Entry "Initialized-Flag" definition #f 59 14 59 30 ("#x00000004")}
        {Lisp-Entry "Visible-Flag" definition #f 60 14 60 26 ("#x00000008")}
        {Lisp-Entry "Destroying-Flag" definition #f 61 14 61 29 ("#x00000020")}
        {Lisp-Entry "Destroyed-Flag" definition #f 62 14 62 28 ("#x00000040")}
        {Lisp-Entry "Layout-Valid-Flag" definition #f 63 14 63 31 ("#x00000100")}
        {Lisp-Entry "name" slot #f 66 8 66 12 ()}
        {Lisp-Entry "parent" slot #f 67 8 67 14 ()}
        {Lisp-Entry "traits" slot #f 68 8 68 14 ()}
        {Lisp-Entry "branch" slot #f 69 8 69 14 ()}
        {Lisp-Entry "form" slot #f 70 8 70 12 ()}
        {Lisp-Entry "creator" slot #f 71 8 71 15 ()}
        {Lisp-Entry "creator-branch" slot #f 72 8 72 22 ()}
        {Lisp-Entry "event-consumer" slot #f 73 8 73 22 ()}
        {Lisp-Entry "designers" slot #f 74 8 74 17 ()}
        {Lisp-Entry "surrogate" slot #f 75 8 75 17 ()}
        {Lisp-Entry "get-surrogate" accessor #f 75 61 75 69 ()}
        {Lisp-Entry "set-surrogate" accessor #f 75 61 75 69 ()}
        {Lisp-Entry "index" slot #f 76 8 76 13 ()}
        {Lisp-Entry "flags" slot #f 77 8 77 13 ()}
        {Lisp-Entry "before" property #f 80 12 80 18 ()}
        {Lisp-Entry "children" property #f 81 12 81 20 ()}
        {Lisp-Entry "visible?" property #f 82 12 82 20 ()}
        {Lisp-Entry "class-info" property #f 83 12 83 22 ()}
        {Lisp-Entry "name-info" property #f 84 12 84 21 ()}
        {Lisp-Entry "presentation-info" property #f 85 12 85 29 ()}
        {Lisp-Entry "get-name" method #f 93 25 93 33 ("name")}
        {Lisp-Entry "set-name" method #f 97 25 97 33 ("name" "set!" "value")}
        {Lisp-Entry "get-parent" method #f 101 25 101 35 ("parent")}
        {Lisp-Entry "set-parent" method #f 105 26 105 36 ("install-in-parent" "set!" "self" "remove-child" "parent" "when" "value")}
        {Lisp-Entry "get-before" method #f 113 25 113 35 ("before")}
        {Lisp-Entry "set-before" method #f 117 18 117 28 ("child" "self" "parent" "send-child-before" "get-finished?" "when" "before" "set!" "value")}
        {Lisp-Entry "get-children" method #f 123 25 123 37 ("children")}
        {Lisp-Entry "set-children" method #f 127 26 127 38 ("self" "set-parent" "do" "in" "child" "for" "loop" "children" "set!" "lst")}
        {Lisp-Entry "get-branch" method #f 133 25 133 35 ("branch")}
        {Lisp-Entry "set-branch" method #f 137 25 137 35 ("branch" "set!" "value")}
        {Lisp-Entry "get-form" method #f 141 25 141 33 ("form")}
        {Lisp-Entry "set-form" method #f 145 25 145 33 ("form" "set!" "value")}
        {Lisp-Entry "get-creator" method #f 149 25 149 36 ("creator")}
        {Lisp-Entry "set-creator" method #f 153 25 153 36 ("creator" "set!" "value")}
        {Lisp-Entry "get-creator-branch" method #f 157 25 157 43 ("creator-branch")}
        {Lisp-Entry "set-creator-branch" method #f 161 25 161 43 ("creator-branch" "set!" "value")}
        {Lisp-Entry "get-class-info" method #f 165 11 165 25 ("self" "class-of" "get-class-presentation")}
        {Lisp-Entry "get-class-form" method #f 169 24 169 38 ()}
        {Lisp-Entry "get-class-forms" method #f 173 24 173 39 ()}
        {Lisp-Entry "get-name-info" method #f 177 11 177 24 ("->string" "name" "not" "if")}
        {Lisp-Entry "get-presentation-info" method #f 183 11 183 32 ("get-presentation-property")}
        {Lisp-Entry "get-installed?" method #f 192 21 192 35 ("Installed-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-installed?" method #f 195 21 195 35 ("Installed-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "get-finished?" method #f 199 21 199 34 ("Finished-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-finished?" method #f 202 11 202 24 ("Finished-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "get-initialized?" method #f 206 21 206 37 ("Initialized-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-initialized?" method #f 209 11 209 27 ("Initialized-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "get-visible-flag" method #f 213 18 213 34 ("Visible-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-visible-flag" method #f 216 18 216 34 ("Visible-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "get-destroying?" method #f 220 11 220 26 ("Destroying-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-destroying?" method #f 223 11 223 26 ("Destroying-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "get-destroyed?" method #f 227 11 227 25 ("Destroyed-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-destroyed?" method #f 230 11 230 25 ("Destroyed-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "get-layout-valid?" method #f 234 11 234 28 ("Layout-Valid-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-layout-valid?" method #f 237 11 237 28 ("Layout-Valid-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "call-print" method #f 246 20 246 30 ("lambda" "self" "print-unreadable" "print" "get-initialized?" "if" "detail" "output")}
        {Lisp-Entry "print" method #f 254 20 254 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "initialize" method #f 265 20 265 30 ("initialize-component" "nextmethod" "rest")}
        {Lisp-Entry "initialize-component" method #f 270 29 270 49 ("hide" "show" "if" "initially-visible?" "neq?" "when" "get-visible?" "visible?" "let" "set-initialized?" "conclude" "set-finished?" "install-in-parent" "finish" "set-installed?" "install" "prepare" "rest")}
        {Lisp-Entry "default-name" method #f 286 29 286 41 ()}
        {Lisp-Entry "default-parent" method #f 290 29 290 43 ()}
        {Lisp-Entry "setup-parent" method #f 294 29 294 41 ()}
        {Lisp-Entry "prepare" method #f 298 29 298 36 ("creator-branch:" "set-creator-branch" "creator:" "set-creator" "self" "class-of" "get-class-form" "form:" "set-form" "default-name" "name:" "or" "set-name" "prepare-component" "setup-parent" "default-parent" "not" "if" "parent" "set!" "not-found:" "parent:" "getf" "arg" "let" "prepare-parent" "define" "initargs")}
        {Lisp-Entry "install" method #f 314 29 314 36 ("car" "install-form" "cdr" "not-null?" "when" "forms" "self" "class-of" "get-class-forms" "install-inherited" "install-component" "define" "initargs")}
        {Lisp-Entry "install-traits" method #f 326 11 326 25 ("listify" "set-active-traits" "when" "traits:" "'traits" "getf" "or" "traits" "let" "initargs")}
        {Lisp-Entry "install-form" method #f 332 18 332 30 ("get-children" "install-children" "install-properties" "get-properties" "install-traits" "when" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "install-children" method #f 339 29 339 45 ("install-child" "do" "in" "child" "for" "loop" "restore-form" "creator-branch" "creator" "children")}
        {Lisp-Entry "install-child" method #f 344 26 344 39 ("else" "close" "get-component" "child" "remove" "equal?" "find-to-modify" "remember-reference" "set!" "locate" "modify" "remember-creation" "add-to-index" "when" "case" "error" "or" "form-model" "module-ref" "instantiate-file" "file?" "install-form" "creator-branch:" "creator:" "form:" "name:" "self" "parent:" "new" "component" "resolve-model" "model" "if" "get-model" "registered-form" "get-tag-reference" "reference" "new-component" "define" "get-name" "name" "get-action" "action" "let" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "install-properties" method #f 380 11 380 29 ("cddr" "write-property-to" "remember-property" "set-car!" "self" "class-of" "component-property" "set!" "symbol?" "when" "initer-property?" "unless" "cadr" "value" "car" "expr" "let" "not-null?" "while" "restore-form" "properties")}
        {Lisp-Entry "find-to-modify" method #f 394 26 394 40 ("locate" "find-component-with" "or" "test" "name")}
        {Lisp-Entry "form-model" method #f 401 26 401 36 ("resolve-model" "form")}
        {Lisp-Entry "finish" method #f 405 29 405 35 ("write-properties" "install-traits" "creator~self" "set!" "self" "install-form" "neq?" "if" "when" "others" "creator" "form" "bind-keywords" "initargs")}
        {Lisp-Entry "write-properties" method #f 417 18 417 34 ("self" "do" "in-properties" "for" "loop" "class-of" "component-property" "write-property-to" "initer-property?" "unless" "keyword->symbol" "property-name" "let" "value" "property" "object" "write-initarg-to" "define" "properties")}
        {Lisp-Entry "install-in-parent" method #f 429 29 429 46 ("parent-add-child" "get-editor" "install-surrogate" "remove-surrogate" "get-surrogate" "surrogate" "set-designers" "not-null?" "get-designers" "designers" "let" "parent" "when")}
        {Lisp-Entry "parent-add-child" method #f 441 18 441 34 ("self" "add-child" "parent" "when")}
        {Lisp-Entry "conclude" method #f 446 29 446 37 ("initargs")}
        {Lisp-Entry "initialized?" method #f 450 20 450 32 ("get-initialized?")}
        {Lisp-Entry "destroying?" method #f 459 20 459 31 ("get-destroying?")}
        {Lisp-Entry "destroyed?" method #f 463 20 463 30 ("get-destroyed?")}
        {Lisp-Entry "close" method #f 467 20 467 25 ("destroy-component" "destroyed?" "unless")}
        {Lisp-Entry "destroy-component" method #f 473 19 473 36 ("set-destroyed?" "destroy" "children" "destroy-component" "Component" "is?" "when" "child" "lambda" "for-each" "set-destroying?")}
        {Lisp-Entry "destroy" method #f 484 20 484 27 ("nextmethod" "name" "remove-from-index" "creator" "self" "remove-child" "parent" "when")}
        {Lisp-Entry "close-children" method #f 492 18 492 32 ("children" "close" "for-each")}
        {Lisp-Entry "confirm-close" method #f 496 26 496 39 ("rest")}
        {Lisp-Entry "initially-visible?" method #f 505 26 505 44 ()}
        {Lisp-Entry "get-visible?" method #f 509 26 509 38 ("get-visible-flag")}
        {Lisp-Entry "set-visible?" method #f 513 26 513 38 ("hide" "show" "get-visible-flag" "neq?" "when" "set-visible-flag" "get-finished?" "not" "if" "flag")}
        {Lisp-Entry "show" method #f 522 26 522 30 ("set-visible-flag")}
        {Lisp-Entry "hide" method #f 526 26 526 30 ("set-visible-flag")}
        {Lisp-Entry "initer-properties" definition #f 535 14 535 31 ("creator-branch" "creator" "form" "traits" "parent" "name" "list->table")}
        {Lisp-Entry "initer-property?" method #f 545 19 545 35 ("initer-properties" "table-ref" "name")}
        {Lisp-Entry "get-properties" method #f 549 23 549 37 ("self" "get-instance-slots" "property-getter" "property?" "and" "property" "lambda" "collect-if")}
        {Lisp-Entry "component-property" method #f 556 11 556 29 ("error" "property?" "if" "mop-category-field" "field" "let" "name" "category")}
        {Lisp-Entry "write-property-to" definition #f 563 15 563 32 ("error" "if" "property-setter" "setter" "let" "value" "property" "object")}
        {Lisp-Entry "get-filtered-properties" method #f 570 18 570 41 ("map" "else" "error" "category-field" "string?" "cond" "object" "standardize" "letrec" "class" "infos" "get-categorized-properties" "properties" "display-property?" "eq?" "symbol?" "if" "get-name" "name" "all" "memq?" "property-getter" "property?" "mop-instance-slots" "display-filtered-property?" "property" "collect-if" "field-name" "symbol->string" "string<?" "=" "and" "<" "or" "yr" "self" "class-of" "get-category" "get-rank" "xr" "let" "y" "x" "lambda" "sort" "get-all-properties" "define" "categorized" "'categorized" "filter" "filter:")}
        {Lisp-Entry "name?" method #f 615 18 615 23 ("pair?" "null?" "integer?" "symbol?" "or" "object")}
        {Lisp-Entry "add-child" method #f 622 26 622 35 ("find-component" "send-child-before" "list" "append!" "children" "set!" "not" "if" "get-before" "Component" "is?" "and" "before" "let" "child")}
        {Lisp-Entry "add-child-at" method #f 629 18 629 30 ("insert!" "children" "set!" "rank" "child")}
        {Lisp-Entry "append-child" method #f 633 18 633 30 ("list" "append!" "children" "set!" "child")}
        {Lisp-Entry "remove-child" method #f 637 26 637 38 ("remove!" "children" "set!" "child")}
        {Lisp-Entry "replace-child" method #f 641 26 641 39 ("remove!" "insert!" "set!" "self" "set-parent" "children" "element" "child" "let" "replacement" "rank")}
        {Lisp-Entry "front-child?" method #f 648 26 648 38 ("children" "first" "eq?" "child")}
        {Lisp-Entry "back-child?" method #f 652 26 652 37 ("children" "last" "eq?" "child")}
        {Lisp-Entry "send-child-to-front" method #f 656 26 656 45 ("move-to-head!" "children" "set!" "child")}
        {Lisp-Entry "send-child-to-back" method #f 660 26 660 44 ("move-to-tail!" "children" "set!" "child")}
        {Lisp-Entry "send-child-before" method #f 664 18 664 35 ("insert!" "set!" "error" "find" "or" "and" "rank" "children" "remove!" "removed" "let*" "target" "child")}
        {Lisp-Entry "child" method #f 670 18 670 23 ("error" "find-component" "or" "name")}
        {Lisp-Entry "find-component" method #f 675 18 675 32 ("equal?" "find-component-with" "name")}
        {Lisp-Entry "find-component-with" method #f 679 18 679 37 ("find-child-with" "component-alias" "or" "else" "cdr" "next" "when" "car" "sub" "let" "pair?" "1" "-" "parent" "find-component" "self" "0" "=" "if" "integer?" "error" "null?" "cond" "test" "name")}
        {Lisp-Entry "brother" method #f 698 18 698 25 ("parent" "child" "name")}
        {Lisp-Entry "next-brother" method #f 702 18 702 30 ("next-child" "self" "parent" "not" "if" "type" "type:")}
        {Lisp-Entry "previous-brother" method #f 708 18 708 34 ("previous-child" "self" "parent" "not" "if" "type" "type:")}
        {Lisp-Entry "child-ranked" method #f 714 18 714 30 ("children" "element" "rank")}
        {Lisp-Entry "component-alias" method #f 718 26 718 41 ("process-alias" "when" "find-process" "process" "let" "else" "creator" ":creator" "parent" ":parent" "self" ":self" "case" "name")}
        {Lisp-Entry "find-child" method #f 728 18 728 28 ("children" "get-name" "equal?" "child" "lambda" "find-if" "name")}
        {Lisp-Entry "find-child-with" method #f 734 18 734 33 ("children" "get-name" "child" "lambda" "find-if" "test" "name")}
        {Lisp-Entry "find-type" method #f 740 18 740 27 ("children" "is?" "child" "lambda" "find-if" "type")}
        {Lisp-Entry "find-key" method #f 746 18 746 26 ("children" "equal?" "child" "lambda" "find-if" "value" "key")}
        {Lisp-Entry "find-ascendant" method #f 752 18 752 32 ("set!" "is-not?" "and" "while" "get-parent" "parent" "let" "type")}
        {Lisp-Entry "find-descendant" method #f 759 18 759 33 ("continuation-return" "when" "level" "component" "for-each-descendant" "return" "lambda" "continuation-capture" "predicate")}
        {Lisp-Entry "collect-ascendants" method #f 769 18 769 36 ("is?" "if" "cons" "set!" "is-not?" "not" "or" "and" "while" "get-parent" "parent" "ascendants" "let" "type")}
        {Lisp-Entry "child-rank" method #f 780 18 780 28 ("children" "find" "child")}
        {Lisp-Entry "get-brothers" method #f 784 18 784 30 ("get-children" "self" "remove" "parent" "when")}
        {Lisp-Entry "has-parent?" method #f 789 18 789 29 ("has-parent?" "eq?" "or" "parent" "and" "component")}
        {Lisp-Entry "has-ascendant?" method #f 793 18 793 32 ("has-parent?" "self" "eq?" "or" "component")}
        {Lisp-Entry "get-root-parent" method #f 797 18 797 33 ("get-root-parent" "self" "parent" "not" "if")}
        {Lisp-Entry "get-visible-children" method #f 803 18 803 38 ("children" "get-visible?" "collect-if")}
        {Lisp-Entry "first-visible-child" method #f 807 18 807 37 ("car" "null?" "if" "get-visible-children" "visible" "let")}
        {Lisp-Entry "get-ancestry" method #f 814 18 814 30 ("error" "null?" "when" "get-parent" "cons" "set!" "neq?" "while" "self" "scan" "ancestry" "let" "root")}
        {Lisp-Entry "for-each-parent" method #f 830 18 830 33 ("for-each-parent" "parent" "when" "proc")}
        {Lisp-Entry "for-each-ascendant" method #f 836 18 836 36 ("for-each-parent" "self" "proc")}
        {Lisp-Entry "for-each-descendant" method #f 841 18 841 37 ("+" "and" "unless" "get-children" "in" "child" "for" "loop" "1" "level" "component" "iter" "let" "0" "self" "when" "stop-test" "stop-test:" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "for-each-sibling" method #f 852 18 852 34 ("self" "neq?" "when" "parent" "get-children" "in" "child" "for" "loop" "proc")}
        {Lisp-Entry "collect-family" method #f 858 18 858 32 ("get-output" "put" "rest" "child" "lambda" "for-each-descendant" "List-Factory" "new" "factory" "let")}
        {Lisp-Entry "outer-component" method #f 871 18 871 33 ("get-parent" "set!" "neq?" "inner?" "and" "while" "self" "component" "parent" "outer" "let" "limit")}
        {Lisp-Entry "inner?" method #f 880 26 880 32 ("component")}
        {Lisp-Entry "add-form" method #f 889 26 889 34 ("append-parent" "child-form" "parent-form")}
        {Lisp-Entry "add-to-index" method #f 898 26 898 38 ("table-set!" "table-ref" "if" "new-index" "set!" "index" "not" "when" "component" "name")}
        {Lisp-Entry "remove-from-index" method #f 907 26 907 43 ("table-clear" "index" "and" "when" "component" "name")}
        {Lisp-Entry "new-index" method #f 912 29 912 38 ("eq?" "test:" "make-table")}
        {Lisp-Entry "locate" method #f 916 26 916 32 ("else" "eq?" "error" "not" "cond" "locate-component" "component" "let" "name")}
        {Lisp-Entry "locate-component" method #f 923 18 923 34 ("table-ref" "index" "and" "else" "null?" "if" "cdr" "next" "when" "car" "locate-component" "sub" "let" "pair?" "cond" "name")}
        {Lisp-Entry "get-database-component" method #f 940 18 940 40 ("get-root-parent")}
        {Lisp-Entry "get-event-consumer" method #f 949 20 949 38 ("event-consumer")}
        {Lisp-Entry "set-event-consumer" method #f 953 20 953 38 ("event-consumer" "set!" "consumer")}
        {Lisp-Entry "deliver-event" method #f 957 20 957 33 ("event" "proc" "target" "handler")}
        {Lisp-Entry "first-child" method #f 966 18 966 29 ("car" "children" "null?" "if")}
        {Lisp-Entry "last-child" method #f 972 18 972 28 ("children" "last")}
        {Lisp-Entry "next-child" method #f 976 18 976 28 ("length" "1" "+" "modulo" "element" "find" "rank" "collect-type" "if" "children" "let" "type" "type:" "child")}
        {Lisp-Entry "previous-child" method #f 982 18 982 32 ("length" "1" "-" "modulo" "element" "find" "rank" "collect-type" "if" "children" "let" "type" "type:" "child")}
        {Lisp-Entry "front?" method #f 988 18 988 24 ("self" "front-child?" "parent" "not" "or")}
        {Lisp-Entry "back?" method #f 992 18 992 23 ("self" "back-child?" "parent" "not" "or")}
        {Lisp-Entry "bring-to-front" method #f 996 26 996 40 ("self" "send-child-to-front" "parent" "when")}
        {Lisp-Entry "send-to-back" method #f 1001 26 1001 38 ("self" "send-child-to-back" "parent" "when")}
        {Lisp-Entry "send-before" method #f 1006 26 1006 37 ("self" "send-child-before" "parent" "when" "target")}
        {Lisp-Entry "get-traits" method #f 1016 18 1016 28 ("traits")}
        {Lisp-Entry "set-traits" method #f 1020 18 1020 28 ("set-active-traits" "listify" "traits" "set!" "value")}
        {Lisp-Entry "child-traits" method #f 1025 18 1025 30 ("children" "Trait" "collect-type")}
        {Lisp-Entry "branch-installed?" method #f 1034 18 1034 35 ("branch")}
        {Lisp-Entry "get-active-branch" method #f 1038 18 1038 35 ("get-branch" "iterate" "let" "branch" "not" "if")}
        {Lisp-Entry "get-active-trait-name" method #f 1047 18 1047 39 ("get-name" "when" "get-active-trait" "trait" "let")}
        {Lisp-Entry "get-active-trait-presentation" method #f 1053 18 1053 47 ("get-presentation-property" "not" "if" "get-active-trait" "trait" "let")}
        {Lisp-Entry "get-active-trait" method #f 1060 18 1060 34 ("get-trait" "when" "get-active-branch" "branch" "let")}
        {Lisp-Entry "set-active-trait" method #f 1066 18 1066 34 ("list" "if" "set-active-traits" "trait")}
        {Lisp-Entry "set-active-traits" method #f 1070 18 1070 35 ("replace-traits" "traits")}
        {Lisp-Entry "push-trait" method #f 1074 18 1074 28 ("list" "get-active-branch" "replace-traits" "trait")}
        {Lisp-Entry "pop-trait" method #f 1078 18 1078 27 ("replace-traits" "error" "get-parent" "set!" "eq?" "self" "neq?" "and" "if" "trait" "lambda" "for-each-reversed" "get-trait" "compute-effective-traits" "traits" "assert" "get-active-branch" "active" "let")}
        {Lisp-Entry "replace-traits" method #f 1090 18 1090 32 ("if" "base-branch" "resolve-trait" "compute-effective-traits" "map" "append!" "apply" "not" "get-trait" "eq?" "pair?" "and" "match?" "change-installed?" "cdr" "car" "not-null?" "branch" "install-in-self" "restore-client" "when" "get-branch" "old-branch" "current-traits" "current-branch" "install-in-branch" "set!" "set-branch" "self" "configure-client" "new-branch" "trait" "lambda" "for-each" "parent-branch" "let" "effective-traits" "root-branch" "install-traits" "define" "traits" "target-branch")}
        {Lisp-Entry "for-each-trait" method #f 1129 18 1129 32 ("child-traits" "for-each-trait" "trait" "lambda" "for-each" "proc")}
        {Lisp-Entry "with-each-trait" method #f 1136 18 1136 33 ("get-trait" "set-active-trait" "trait" "lambda" "for-each-trait" "get-branch" "active-branch" "let" "proc")}
        {Lisp-Entry "get-branches" method #f 1145 18 1145 30 ("get-branches" "cons" "branch" "not" "if")}
        {Lisp-Entry "find-trait-branch" method #f 1151 18 1151 35 ("get-branches" "get-trait" "eq?" "branch" "lambda" "find-if" "trait")}
        {Lisp-Entry "iterate-branch-spine" method #f 1157 18 1157 38 ("creator-effective-form" "self" "set!" "get-trait" "get-client-form" "Branch" "is?" "while" "get-branch" "branch" "let" "trait" "trait:" "proc")}
        {Lisp-Entry "creator-effective-form" method #f 1169 18 1169 40 ("class-of" "get-class-form" "form" "creator" "self" "eq?" "if")}
        {Lisp-Entry "save-session" method #f 1180 26 1180 38 ()}
        {Lisp-Entry "get-integrity-manager" method #f 1189 26 1189 47 ()}
        {Lisp-Entry "validate-component" method #f 1193 26 1193 44 ("get-categorized-properties" "validate-property" "self" "class-of" "property-field" "property" "let" "symbol" "lambda" "for-each" "manager" "context" "client" "root")}
        {Lisp-Entry "validate-property" method #f 1200 26 1200 43 ("validate" "self" "read-property" "value" "property-domain" "domain" "let" "manager" "context" "client" "root" "property")}
        {Lisp-Entry "search-component" method #f 1211 26 1211 42 ("not" "or" "and" "type:" "name:" "getf" "self" "is?" "type" "search-type" "ignore-case?:" "search" "get-presentation-property" "localize" "presentation" "let" "name" "search-name" "define" "target")}
        {Lisp-Entry "search-text" method #f 1225 21 1225 32 ("else" "Text" "Formatted-Text" "typecase" "search-text" "'search-text" "unimplemented" "car" "string" "let" "run" "runs" "format" "bind" "info" "search-formatted-text" "get-paragraphs" "ignore-case?:" "search" "line" "lambda" "some?" "search-plain-text" "define" "target" "text")}
        {Lisp-Entry "launch" method #f 1256 26 1256 32 ("rest")}
        {Lisp-Entry "component-path" method #f 1265 26 1265 40 ("Path" "new" "null?" "when" "get-parent-component" "cons" "set!" "error" "not" "if" "get-name" "name" "neq?" "while" "self" "scan" "path" "let" "creator" "root")}
        {Lisp-Entry "present-path" method #f 1279 26 1279 38 ("Path" "new" "values" "null?" "get-parent-component" "cons" "set!" "present-in-path?" "when" "error" "not" "if" "get-name" "name" "neq?" "while" "self" "scan" "pres" "path" "let" "root")}
        {Lisp-Entry "present-in-path?" method #f 1296 26 1296 42 ()}
        {Lisp-Entry "unfold-branches" method #f 1305 18 1305 33 ("cons" "set-active-branch" "set-restoreable?" "child" "branch" "when" "" "apply" "client" "let" "self" "eq?" "if" "branch-name" "lambda" "instantiate" "child-traits" "map" "all-branch-names" "get-name" "and" "active-branch-name" "get-branch" "active-branch" "get-creator" "get-form" "form" "let*" "include-root?" "include-root?:" "properties" "properties:" "branches" "branches:")}
        {Lisp-Entry "search-descendants" method #f 1332 26 1332 44 ("search-descendants" "'search-descendants" "unimplemented" "get-children" "not" "if" "criteria")}
        {Lisp-Entry "get-class-descriptor" method #f 1343 31 1343 51 ("Component-Descriptor" "'Component-Descriptor" "jazz.designer" "'jazz.designer" "module-ref" "new")}
        {Lisp-Entry "get-domain" method #f 1347 31 1347 41 ("self" "get-descriptor" "class-get-domain" "property")}
        {Lisp-Entry "get-category" method #f 1351 31 1351 43 ("self" "get-descriptor" "class-get-category" "property")}
        {Lisp-Entry "get-class-presentation" method #f 1355 23 1355 45 ("self" "get-descriptor" "class-presentation")}
        {Lisp-Entry "get-class-image" method #f 1359 23 1359 38 ("self" "get-descriptor" "class-image")}
        {Lisp-Entry "get-name-prohibited?" method #f 1363 23 1363 43 ("self" "get-descriptor" "class-name-prohibited?")}
        {Lisp-Entry "get-name-mandatory?" method #f 1367 23 1367 42 ("self" "get-descriptor" "class-name-mandatory?")}
        {Lisp-Entry "get-name-unicity?" method #f 1371 23 1371 40 ("self" "get-descriptor" "class-name-unicity?")}
        {Lisp-Entry "presentation->name" method #f 1375 23 1375 41 ("self" "get-descriptor" "class-presentation->name" "presentation")}
        {Lisp-Entry "name->presentation" method #f 1379 23 1379 41 ("self" "get-descriptor" "class-name->presentation" "name")}
        {Lisp-Entry "property-presentation" method #f 1383 23 1383 44 ("self" "get-descriptor" "class-property-presentation" "property")}
        {Lisp-Entry "detail-presentation" method #f 1387 23 1387 42 ("self" "get-descriptor" "class-detail-presentation" "property")}
        {Lisp-Entry "persist-property?" method #f 1391 23 1391 40 ("self" "get-descriptor" "class-persist-property?" "property")}
        {Lisp-Entry "presentation-property?" method #f 1395 18 1395 40 ("self" "class-of" "get-descriptor" "component-presentation-property?" "property")}
        {Lisp-Entry "get-presentation-property" method #f 1399 18 1399 43 ("self" "class-of" "get-descriptor" "component-get-presentation")}
        {Lisp-Entry "set-presentation-property" method #f 1403 18 1403 43 ("self" "class-of" "get-descriptor" "component-set-presentation" "presentation" "designer")}
        {Lisp-Entry "get-string-presentation" method #f 1407 21 1407 44 ("self" "class-of" "get-descriptor" "component-get-string-presentation")}
        {Lisp-Entry "set-string-presentation" method #f 1411 21 1411 44 ("self" "class-of" "get-descriptor" "component-set-string-presentation" "presentation" "designer")}
        {Lisp-Entry "present-property" method #f 1415 18 1415 34 ("self" "class-of" "get-descriptor" "component-present-property" "value" "property")}
        {Lisp-Entry "get-parent-component" method #f 1419 18 1419 38 ("self" "class-of" "get-descriptor" "component-get-parent")}
        {Lisp-Entry "get-components" method #f 1423 18 1423 32 ("self" "class-of" "get-descriptor" "component-get-components")}
        {Lisp-Entry "get-component-image" method #f 1427 18 1427 37 ("self" "class-of" "get-descriptor" "component-get-component-image")}
        {Lisp-Entry "can-cut-component?" method #f 1431 18 1431 36 ("self" "class-of" "get-descriptor" "component-can-cut-component?")}
        {Lisp-Entry "can-copy-component?" method #f 1435 18 1435 37 ("self" "class-of" "get-descriptor" "component-can-copy-component?")}
        {Lisp-Entry "can-paste-component?" method #f 1439 18 1439 38 ("self" "class-of" "get-descriptor" "component-can-paste-component?")}
        {Lisp-Entry "can-paste-properties-component?" method #f 1443 18 1443 49 ("self" "class-of" "get-descriptor" "component-can-paste-properties-component?")}
        {Lisp-Entry "can-rename-component?" method #f 1447 18 1447 39 ("self" "class-of" "get-descriptor" "component-can-rename-component?")}
        {Lisp-Entry "can-select-all-component?" method #f 1451 18 1451 43 ("self" "class-of" "get-descriptor" "component-can-select-all-component?")}
        {Lisp-Entry "can-delete-component?" method #f 1455 18 1455 39 ("self" "class-of" "get-descriptor" "component-can-delete-component?")}
        {Lisp-Entry "can-move-component?" method #f 1459 18 1459 37 ("self" "class-of" "get-descriptor" "component-can-move-component?")}
        {Lisp-Entry "can-view-properties?" method #f 1463 18 1463 38 ("self" "class-of" "get-descriptor" "component-can-view-properties?")}
        {Lisp-Entry "determine-can-paste" method #f 1467 18 1467 37 ("self" "class-of" "get-descriptor" "component-determine-can-paste" "try-parent?")}
        {Lisp-Entry "determine-paster" method #f 1471 18 1471 34 ("self" "class-of" "get-descriptor" "component-determine-paster" "try-parent?")}
        {Lisp-Entry "can-send-before?" method #f 1475 18 1475 34 ("self" "class-of" "get-descriptor" "component-can-send-before?" "before" "father" "types")}
        {Lisp-Entry "sort-components?" method #f 1479 18 1479 34 ("self" "class-of" "get-descriptor" "component-sort-components?")}
        {Lisp-Entry "sort-components" method #f 1483 18 1483 33 ("self" "class-of" "get-descriptor" "component-sort-components" "components" "predicate")}
        {Lisp-Entry "indexable?" method #f 1487 18 1487 28 ("self" "class-of" "get-descriptor" "component-indexable?")}
        {Lisp-Entry "component-surrogate" method #f 1491 18 1491 37 ("self" "class-of" "get-descriptor" "component-surrogate-class")}
        {Lisp-Entry "install-surrogate" method #f 1495 18 1495 35 ("self" "class-of" "get-descriptor" "component-install-surrogate" "editor")}
        {Lisp-Entry "install-children-surrogates" method #f 1499 18 1499 45 ("self" "class-of" "get-descriptor" "component-install-children-surrogates" "editor")}
        {Lisp-Entry "remove-surrogate" method #f 1503 18 1503 34 ("self" "class-of" "get-descriptor" "component-remove-surrogate")}
        {Lisp-Entry "remove-component-surrogate" method #f 1507 18 1507 44 ("self" "class-of" "get-descriptor" "component-remove-component-surrogate")}
        {Lisp-Entry "get-default-property" method #f 1511 18 1511 38 ("self" "class-of" "get-properties-descriptor" "component-get-default-property")}
        {Lisp-Entry "get-categorized-properties" method #f 1515 18 1515 44 ("self" "class-of" "get-properties-descriptor" "component-get-categorized-properties")}
        {Lisp-Entry "display-property?" method #f 1519 18 1519 35 ("self" "class-of" "get-descriptor" "component-display-property?" "property")}
        {Lisp-Entry "property-domain" method #f 1523 18 1523 33 ("self" "class-of" "get-descriptor" "component-property-domain" "property")}
        {Lisp-Entry "get-addable-default" method #f 1527 18 1527 37 ("self" "class-of" "get-descriptor" "component-get-addable-default")}
        {Lisp-Entry "get-addable-classes" method #f 1531 18 1531 37 ("self" "class-of" "get-descriptor" "component-get-addable-classes")}
        {Lisp-Entry "addable-class?" method #f 1535 18 1535 32 ("self" "class-of" "get-descriptor" "component-addable-class?" "class")}
        {Lisp-Entry "get-component-classes" method #f 1539 18 1539 39 ("self" "class-of" "get-descriptor" "component-get-classes")}
        {Lisp-Entry "get-addable-traits" method #f 1543 18 1543 36 ("self" "class-of" "get-descriptor" "component-get-addable-traits")}
        {Lisp-Entry "get-addable-default-trait" method #f 1547 18 1547 43 ("self" "class-of" "get-descriptor" "component-get-addable-default-trait")}
        {Lisp-Entry "get-addable-base" method #f 1551 18 1551 34 ("self" "class-of" "get-descriptor" "component-get-addable-base")}
        {Lisp-Entry "get-addable-details" method #f 1555 18 1555 37 ("self" "class-of" "get-descriptor" "component-get-addable-details")}
        {Lisp-Entry "get-recursive-details?" method #f 1559 18 1559 40 ("self" "class-of" "get-descriptor" "component-get-recursive-details?")}
        {Lisp-Entry "get-class-searchable-classes" method #f 1563 18 1563 46 ("self" "class-of" "get-descriptor" "component-get-class-searchable-classes")}
        {Lisp-Entry "get-custom-details" method #f 1567 18 1567 36 ("self" "class-of" "get-descriptor" "component-get-custom-details")}
        {Lisp-Entry "get-custom-card" method #f 1571 18 1571 33 ("self" "class-of" "get-descriptor" "component-get-custom-card")}
        {Lisp-Entry "save-component-properties" method #f 1575 18 1575 43 ("self" "class-of" "get-descriptor" "component-save-properties" "designer")}
        {Lisp-Entry "get-designers" method #f 1584 18 1584 31 ("designers")}
        {Lisp-Entry "set-designers" method #f 1588 18 1588 31 ("children" "set-designers" "child" "lambda" "for-each" "designers" "set!" "lst")}
        {Lisp-Entry "install-designer" method #f 1595 18 1595 34 ("get-components" "install-designer" "child" "lambda" "for-each" "cons" "designers" "set!" "designer")}
        {Lisp-Entry "uninstall-designer" method #f 1602 18 1602 36 ("get-components" "uninstall-designer" "child" "lambda" "for-each" "remove!" "designers" "set!" "designer")}
        {Lisp-Entry "print-component" method #f 1614 18 1614 33 ("print-html" "self" "Component-HTML-Printer" "new" "let" "print-component" "'print-component" "unimplemented" "printer" "formatter")}
        {Lisp-Entry "export-text" method #f 1622 18 1622 29 ("get-output-string" "set-clipboard-text" "generate-text" "open-output-string" "printer" "let" "export-text" "'export-text" "unimplemented")}
        {Lisp-Entry "generate-text" method #f 1630 26 1630 39 ("print-text" "new-text-formatter" "formatter" "let" "printer")}
        {Lisp-Entry "new-text-formatter" method #f 1635 29 1635 47 ("Formatter" "new" "new-text-formatter" "'new-text-formatter" "unimplemented")}
        {Lisp-Entry "print-text" method #f 1641 26 1641 36 ("printer" "formatter")}
        {Lisp-Entry "output-component" method #f 1645 26 1645 42 ("text")}
        {Lisp-Entry "output-properties" method #f 1649 26 1649 43 ("get-properties" "format" "insert-bulleted-line" "read-property" "->string" "value" "self" "class-of" "property-presentation" "localize" "title" "let" "property" "lambda" "for-each" "output-properties" "'output-properties" "unimplemented" "text")}}}})
"Consumer"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "consumer" "Consumer.jazz"} 1288732033
    {Lisp-Entry "jazz.library.consumer.Consumer" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Consumer" interface #f 40 24 40 32 ()}}})
"Convertion"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "convertion" "Convertion.jazz"} 1290005181
    {Lisp-Entry "jazz.library.convertion.Convertion" module #f 37 18 37 52 ("parse" "user-message" "get-application" "edit-document" "form:" "Designer" "new" "save" "ensure-read/write" "get-children" "for-each" "convert" "letrec" "file-form" "form" "lambda" ":wait" "with-cursor" "choose-file" "file" "let" "extensions" "extensions:" "proc" "convert-form" "method" "jazz")}})
"Cryptography-Provider"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "cryptography" "Cryptography-Provider.jazz"} 1288732033
    {Lisp-Entry "jazz.library.cryptography.Cryptography-Provider" module #f 37 18 37 65 ("jazz")
      {Lisp-Entry "Cryptography-Provider" class #f 40 20 40 41 ("Object")}
      {Lisp-Entry "Cryptography-Provider" class #f 46 20 46 41 ("crypt-hash-data" "crypt-destroy-hash" "crypt-create-hash" "crypt-release-context" "void" "crypt-acquire-context" "int" "Jazz" "external" "Object")
        {Lisp-Entry "handle" slot #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" method #f 52 11 52 21 ("destroy-mandatory" "crypt-acquire-context" "handle" "set!" "nextmethod")}
        {Lisp-Entry "destroy" method #f 58 11 58 18 ("nextmethod" "handle" "crypt-release-context")}
        {Lisp-Entry "hash-data" method #f 68 18 68 27 ("crypt-hash-data" "hash" "lambda" "with-hash" "data")}
        {Lisp-Entry "with-hash" method #f 74 11 74 20 ("crypt-destroy-hash" "when" "handle" "crypt-create-hash" "set!" "begin" "unwind-protect" "hash" "let" "proc")}}}})
"Cursor-Resource"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "resource" "Cursor-Resource.jazz"} 1288732033
    {Lisp-Entry "jazz.library.resource.Cursor-Resource" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Cursor-Resource" class #f 43 7 43 22 ("Resource")
        {Lisp-Entry "resource-type" method #f 52 16 52 29 ("cursor" "'cursor")}}}})
"Data"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "component" "Data.jazz"} 1289997506
    {Lisp-Entry "jazz.library.component.Data" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Data" class #f 40 7 40 11 ("Object")
        {Lisp-Entry "dialect" slot #f 43 8 43 15 ()}
        {Lisp-Entry "get-dialect" accessor #f 43 23 43 31 ()}
        {Lisp-Entry "imports" slot #f 44 8 44 15 ()}
        {Lisp-Entry "get-imports" accessor #f 44 23 44 31 ()}
        {Lisp-Entry "initialize" method #f 47 20 47 30 ("imports~self" "dialect~self" "set!" "nextmethod" "imports" "dialect")}
        {Lisp-Entry "print" method #f 53 20 53 25 ("dialect" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "effective-imports" method #f 59 18 59 35 ("cons" "dialect" "if" "or" "imports" "let")}}}})
"Directory-Group"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "moniker" "Directory-Group.jazz"} 1290007769
    {Lisp-Entry "jazz.library.moniker.Directory-Group" module #f 38 18 38 54 ("jazz")
      {Lisp-Entry "Directory-Group" class #f 44 20 44 35 ("Directory")
        {Lisp-Entry "print" method #f 47 20 47 25 ("get-list" "format" "readably" "printer")}
        {Lisp-Entry "validate-component" method #f 54 16 54 34 ("error" "Directory" "is-not?" "when" "dir" "lambda" "for-each" "lst")}
        {Lisp-Entry "get-protocol" method #f 67 16 67 28 ("group" "'group")}
        {Lisp-Entry "get-modal" method #f 72 16 72 25 ("get-list" "and" "directories:" "Directories-Request" "get-modal" "Directory-Group" "new" "others" "actual" "bind-keywords" "rest")}
        {Lisp-Entry "new-moniker" method #f 78 16 78 27 ("self" "new" "list")}
        {Lisp-Entry "present" method #f 82 20 82 27 ("get-list" "format")}
        {Lisp-Entry "get-name" method #f 91 20 91 28 ()}
        {Lisp-Entry "get-directory" method #f 95 20 95 33 ("self")}
        {Lisp-Entry "get-content" method #f 99 20 99 31 ("expand" "class-of" "new" "moniker" "lambda" "map" "and" "if" "string?" "some-string?" "key:" "symbol?" "some?" "some-symbol?" "get-name" "key" "nextmethod" "apply" "content" "let*" "rest")}
        {Lisp-Entry "get-modification-time" method #f 113 20 113 41 ()}
        {Lisp-Entry "create" method #f 117 20 117 26 ()}
        {Lisp-Entry "delete-directory" method #f 122 20 122 36 ("empty-directory" "self" "when" "feedback" "feedback:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "iterate-directory" method #f 133 20 133 37 ("parse" "iterate-directory-content" "directory" "'directory" "member?" "not" "and" "name" "Directory" "file" "'file" "get-name" "list" "if" "when" "File" "typecase" "element" "lambda" "for-each" "get-list" "items" "let" "ignored-directories" "ignored-directories:" "ignored-toplevel-directories" "ignored-toplevel-directories:" "recursive?" "recursive?:" "directories?" "directories?:" "files?" "files?:" "full?" "full?:" "proc")}}}})
"Display-Column"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Display-Column.jazz"} 1288732033
    {Lisp-Entry "jazz.library.display.Display-Column" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Display-Column" class #f 43 20 43 34 ("0" "initialize" "Object")
        {Lisp-Entry "displayer" slot #f 46 8 46 17 ()}
        {Lisp-Entry "factory" slot #f 47 8 47 15 ()}
        {Lisp-Entry "content" slot #f 48 8 48 15 ()}
        {Lisp-Entry "current" slot #f 49 8 49 15 ()}
        {Lisp-Entry "border" slot #f 50 8 50 14 ()}
        {Lisp-Entry "get-border" accessor #f 50 51 50 59 ()}
        {Lisp-Entry "set-border" accessor #f 50 51 50 59 ()}
        {Lisp-Entry "border-after" slot #f 51 8 51 20 ()}
        {Lisp-Entry "get-border-after" accessor #f 51 51 51 59 ()}
        {Lisp-Entry "set-border-after" accessor #f 51 51 51 59 ()}
        {Lisp-Entry "minimum" slot #f 52 8 52 15 ()}
        {Lisp-Entry "line" slot #f 53 8 53 12 ()}
        {Lisp-Entry "empty?" slot #f 54 8 54 14 ()}
        {Lisp-Entry "get-empty?" accessor #f 54 49 54 57 ()}
        {Lisp-Entry "initialize" method #f 62 20 62 30 ("minimum~self" "border-after~self" "border~self" "List-Factory" "new" "factory~self" "displayer~self" "set!" "nextmethod" "minimum" "minimum:" "border-after" "border-after:" "0" "border" "border:" "displayer")}
        {Lisp-Entry "output" method #f 76 18 76 24 ("increase-line" "empty?" "set!" "when" "put-data" "fill-empty" "rest" "data")}
        {Lisp-Entry "put-data" method #f 84 26 84 34 ("factory" "put" "rest" "data")}
        {Lisp-Entry "increase-line" method #f 88 26 88 39 ("line" "increase!")}
        {Lisp-Entry "get-next" method #f 92 21 92 29 ("cdr" "set!" "car" "prog1" "current" "when")}
        {Lisp-Entry "rewind" method #f 98 18 98 24 ("current" "factory" "get-output" "content" "set!")}
        {Lisp-Entry "fill-empty" method #f 103 18 103 28 ("increase!" "factory" "put" "line" "<" "while" "displayer" "get-line" "main" "let")}
        {Lisp-Entry "replace-empty" method #f 110 21 110 34 ("cdr" "set!" "set-car!" "empty-replacement" "replacement" "null?" "if" "current" "car" "data" "let" "previous-data" "previous-column")}
        {Lisp-Entry "empty-replacement" method #f 121 29 121 46 ("previous-data" "previous-column")}
        {Lisp-Entry "prepare-print" method #f 130 26 130 39 ("rewind")}
        {Lisp-Entry "print-to" method #f 134 26 134 34 ("border-after" "border" "format" "printer" "previous-data" "previous-column" "data")}}}})
"Display-Outline"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "outline" "Display-Outline.jazz"} 1288732033
    {Lisp-Entry "jazz.library.outline.Display-Outline" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Display-Outline" class #f 43 20 43 35 ("0" "initialize" "Outline")
        {Lisp-Entry "first-displayed" slot #f 46 8 46 23 ()}
        {Lisp-Entry "get-first-displayed" accessor #f 46 59 46 67 ()}
        {Lisp-Entry "first-displayed-line" slot #f 47 8 47 28 ()}
        {Lisp-Entry "get-first-displayed-line" accessor #f 47 59 47 67 ()}
        {Lisp-Entry "first-displayed-offset" slot #f 48 8 48 30 ()}
        {Lisp-Entry "get-first-displayed-offset" accessor #f 48 59 48 67 ()}
        {Lisp-Entry "get-row" method #f 56 20 56 27 ("nextmethod" "-" "get-row-from" "first-displayed-line" ">=" "first-displayed" "and" "if" "n")}
        {Lisp-Entry "call-with-v->row" method #f 62 20 62 36 ("when" "get-next" "set!" "increase!" "<" "or" "and" "while" "row-spacing" "get-height" "bottom" "first-displayed-offset" "top" "0" "first-displayed-line" "line" "first-visible-row" "row" "+" "-" ">=" "displayed?" "let*" "first-displayed" "if" "proc" "scrolled" "v")}
        {Lisp-Entry "update-displayed" method #f 87 11 87 27 ("first-displayed-offset" "first-displayed-line" "first-displayed" "row-spacing" "increase!" "set!" "not" "if" "get-next" "next" ">" "while" "get-height" "-" "bottom" "when" "v" "0" "line" "root-row" "first-visible-son" "row" "let" "display-v")}
        {Lisp-Entry "follow" method #f 106 11 106 17 ("update-displayed" "when" "cond" "succeeded?" "let" "1" "continuation-return" "not" "get-previous" "<=" "return" "lambda" "continuation-capture" "follow-backward" "decrease!" "first-displayed-line" "get-next" "set!" "increase!" "begin" "<" "if" "first-displayed-offset" "-" "remaining" "row-spacing" "first-displayed" "get-height" "+" "height" "let*" "0" ">" "while" "follow-forward" "define" "v" "display-v")}}}})
"Entity"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "entity" "Entity.jazz"} 1288732033
    {Lisp-Entry "jazz.library.entity.Entity" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Entity" interface #f 74 24 74 30 ()
        {Lisp-Entry "get-factory" method #f 77 35 77 46 ()}
        {Lisp-Entry "get-factories" method #f 78 35 78 48 ()}
        {Lisp-Entry "get-presentation" method #f 79 35 79 51 ()}
        {Lisp-Entry "set-presentation" method #f 80 35 80 51 ("presentation" "controller")}
        {Lisp-Entry "can-cut-entity?" method #f 81 35 81 50 ()}
        {Lisp-Entry "can-copy-entity?" method #f 82 35 82 51 ()}
        {Lisp-Entry "can-paste-entity?" method #f 83 35 83 52 ()}
        {Lisp-Entry "determine-paster" method #f 84 35 84 51 ("rest")}
        {Lisp-Entry "can-rename-entity?" method #f 85 35 85 53 ()}
        {Lisp-Entry "can-delete-entity?" method #f 86 35 86 53 ()}
        {Lisp-Entry "can-move-entity?" method #f 87 35 87 51 ()}
        {Lisp-Entry "can-view-properties?" method #f 88 35 88 55 ()}
        {Lisp-Entry "get-categorized-properties" method #f 89 35 89 61 ()}}}})
"Entity-Factory"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "entity" "Entity-Factory.jazz"} 1288732033
    {Lisp-Entry "jazz.library.entity.Entity-Factory" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Entity-Factory" class #f 55 20 55 34 ("Object")
        {Lisp-Entry "get-class" method #f 58 35 58 44 ()}
        {Lisp-Entry "get-name-prohibited?" method #f 59 35 59 55 ()}
        {Lisp-Entry "get-name-mandatory?" method #f 60 35 60 54 ()}
        {Lisp-Entry "get-name-unicity?" method #f 61 35 61 52 ()}
        {Lisp-Entry "presentation->name" method #f 62 35 62 53 ("presentation")}
        {Lisp-Entry "get-factory-presentation" method #f 63 35 63 59 ()}
        {Lisp-Entry "get-factory-image" method #f 64 35 64 52 ()}}}})
"Environment"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Environment.jazz"} 1290091085
    {Lisp-Entry "jazz.library.utility.Environment" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Environment" class #f 43 7 43 18 ("Environment-Provider" "Object")
        {Lisp-Entry "data" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-data" accessor #f 46 23 46 31 ()}
        {Lisp-Entry "locator" slot #f 47 8 47 15 ()}
        {Lisp-Entry "get-locator" accessor #f 47 23 47 31 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("locator~self" "data~self" "set!" "nextmethod" "locator" "data")}
        {Lisp-Entry "print" method #f 56 20 56 25 ("data" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "setup-context" method #f 62 20 62 33 ("data" "setup-context" "context")}
        {Lisp-Entry "locate-reference" method #f 66 20 66 36 ("locator" "symbol")}}}})
"Environment-Provider"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Environment-Provider.jazz"} 1290090985
    {Lisp-Entry "jazz.library.utility.Environment-Provider" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Environment-Provider" interface #f 40 11 40 31 ()
        {Lisp-Entry "locate-reference" method #f 43 35 43 51 ("symbol")}}}})
"Event"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "event" "Event.jazz"} 1288732033
    {Lisp-Entry "jazz.library.event.Event" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Event" class #f 44 7 44 12 ("Object")
        {Lisp-Entry "kind" slot #f 47 8 47 12 ()}
        {Lisp-Entry "get-kind" accessor #f 47 26 47 34 ()}
        {Lisp-Entry "sender" slot #f 48 8 48 14 ()}
        {Lisp-Entry "get-sender" accessor #f 48 26 48 34 ()}
        {Lisp-Entry "properties" slot #f 49 8 49 18 ()}
        {Lisp-Entry "get-properties" accessor #f 49 26 49 34 ()}
        {Lisp-Entry "modifiers" slot #f 50 8 50 17 ()}
        {Lisp-Entry "get-modifiers" accessor #f 50 26 50 34 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("modifiers-keys" "modifiers~self" "properties~self" "sender~self" "kind~self" "set!" "nextmethod" "properties" "sender" "kind")}
        {Lisp-Entry "print" method #f 61 20 61 25 ("properties" "not-null?" "kind" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "get-property" method #f 74 18 74 30 ("properties" "getf" "keyword")}
        {Lisp-Entry "get-shift?" method #f 78 18 78 28 ("modifiers" "shift-key?")}
        {Lisp-Entry "get-control?" method #f 82 18 82 30 ("modifiers" "control-key?")}
        {Lisp-Entry "get-alt?" method #f 86 18 86 26 ("modifiers" "alt-key?")}}}})
"Event-Consumer"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "consumer" "Event-Consumer.jazz"} 1288732033
    {Lisp-Entry "jazz.library.consumer.Event-Consumer" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Event-Consumer" interface #f 43 24 43 38 ("Consumer")
        {Lisp-Entry "get-event-consumer" method #f 46 35 46 53 ()}
        {Lisp-Entry "set-event-consumer" method #f 47 35 47 53 ("consumer")}
        {Lisp-Entry "deliver-event" method #f 48 35 48 48 ("evt" "proc" "target" "handler")}}}})
"Event-Handler"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "handler" "Event-Handler.jazz"} 1289843766
    {Lisp-Entry "jazz.library.handler.Event-Handler" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Event-Handler" class #f 44 7 44 20 ("Handler")
        {Lisp-Entry "properties" slot #f 47 8 47 18 ()}
        {Lisp-Entry "get-properties" accessor #f 47 26 47 34 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("properties~self" "set!" "nextmethod" "apply" "others" "properties" "bind-keywords" "rest")}
        {Lisp-Entry "print" method #f 56 20 56 25 ("properties" "null?" "if" "method-name" "target-name" "target" "or" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "get-property" method #f 71 18 71 30 ("properties" "getf" "keyword")}
        {Lisp-Entry "invoke" method #f 84 20 84 26 ("target-name" "error" "invoke-target" "find-target" "or" "target" "let" "execute" "if" "action" "action:" "event" "sender")}
        {Lisp-Entry "invoke-target" method #f 93 18 93 31 ("else" "deliver-event" "prog1" "get-event-consumer" "consumer" "Event-Consumer" "is?" "error" "not" "cond" "method-name" "class-of" "dispatch" "proc" "record" "get-recorder" "recorder" "self" "action/handler" "macro-recording?" "and" "when" "get-application" "appl" "let" "record-event" "define" "action" "action:" "event" "target")}}}})
"Explore-Error"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "exception" "Explore-Error.jazz"} 1288732033
    {Lisp-Entry "jazz.library.exception.Explore-Error" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Explore-Error" class #f 40 20 40 33 ("Error")
        {Lisp-Entry "source" slot #f 43 8 43 14 ()}
        {Lisp-Entry "get-source" accessor #f 43 22 43 30 ()}
        {Lisp-Entry "start" slot #f 44 8 44 13 ()}
        {Lisp-Entry "get-start" accessor #f 44 22 44 30 ()}
        {Lisp-Entry "end" slot #f 45 8 45 11 ()}
        {Lisp-Entry "get-end" accessor #f 45 22 45 30 ()}
        {Lisp-Entry "initialize" method #f 48 20 48 30 ("end~self" "start~self" "source~self" "set!" "nextmethod" "apply" "others" "end" "start" "bind-keywords" "rest" "source")}
        {Lisp-Entry "get-range" method #f 61 18 61 27 ("end" "start" "Range" "new")}}}})
"Favorite"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorite.jazz"} 1288732033
    {Lisp-Entry "jazz.library.favorite.Favorite" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Favorite" class #f 43 20 43 28 ("initialize" "Component")
        {Lisp-Entry "title" property #f 46 12 46 17 ()}
        {Lisp-Entry "get-title" accessor #f 46 42 46 50 ()}
        {Lisp-Entry "set-title" accessor #f 46 42 46 50 ()}
        {Lisp-Entry "get-class-descriptor" method #f 54 25 54 45 ("Favorite-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 63 11 63 17 ()
        {Lisp-Entry "Favorite-Descriptor" class #f 70 7 70 26 ("domain" "title" "name:" "Image-Resource" "image:" "Component-Descriptor")
          {Lisp-Entry "component-display-property?" method #f 80 20 80 47 ("visible?" "children" "before" "name-info" "field-name" "memq?" "not" "property" "component")}}}}})
"Favorite-Clipboard"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorite-Clipboard.jazz"} 1288732033
    {Lisp-Entry "jazz.library.favorite.Favorite-Clipboard" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Favorite-Clipboard" class #f 46 7 46 25 ("initialize" "Favorite")
        {Lisp-Entry "string" property #f 49 12 49 18 ()}
        {Lisp-Entry "get-string" accessor #f 49 43 49 51 ()}
        {Lisp-Entry "set-string" accessor #f 49 43 49 51 ()}
        {Lisp-Entry "launch" method #f 57 20 57 26 ("user-message" "set-clipboard-text" "string" "when")}
        {Lisp-Entry "get-class-descriptor" method #f 68 25 68 45 ("Favorite-Clipboard-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 77 11 77 17 ()
        {Lisp-Entry "Favorite-Clipboard-Descriptor" class #f 84 7 84 36 ("Image-Resource" "image:" "Favorite-Descriptor")}}}})
"Favorite-Definition"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorite-Definition.jazz"} 1288732033
    {Lisp-Entry "jazz.library.favorite.Favorite-Definition" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Favorite-Definition" class #f 45 7 45 26 ("initialize" "Favorite")
        {Lisp-Entry "definition" property #f 48 12 48 22 ()}
        {Lisp-Entry "get-definition" accessor #f 48 47 48 55 ()}
        {Lisp-Entry "set-definition" accessor #f 48 47 48 55 ()}
        {Lisp-Entry "launch" method #f 56 20 56 26 ("get-application" "edit-definitions" "definition" "when")}
        {Lisp-Entry "get-class-descriptor" method #f 66 25 66 45 ("Favorite-Definition-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 75 11 75 17 ()
        {Lisp-Entry "Favorite-Definition-Descriptor" class #f 82 7 82 37 ("Image-Resource" "image:" "Favorite-Descriptor")}}}})
"Favorite-Directory"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorite-Directory.jazz"} 1288732033
    {Lisp-Entry "jazz.library.favorite.Favorite-Directory" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Favorite-Directory" class #f 46 7 46 25 ("initialize" "Favorite")
        {Lisp-Entry "directory" property #f 49 12 49 21 ()}
        {Lisp-Entry "get-directory" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "set-directory" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "launch" method #f 57 20 57 26 ("parse" "user-message" "set-current-directory" "directory" "when")}
        {Lisp-Entry "get-class-descriptor" method #f 68 25 68 45 ("Favorite-Directory-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 77 11 77 17 ()
        {Lisp-Entry "Favorite-Directory-Descriptor" class #f 84 7 84 36 ("domain" "title:" "directory" "name:" "Image-Resource" "image:" "Favorite-Descriptor")}}}})
"Favorite-File"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorite-File.jazz"} 1288732033
    {Lisp-Entry "jazz.library.favorite.Favorite-File" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Favorite-File" class #f 45 7 45 20 ("initialize" "Favorite")
        {Lisp-Entry "file" property #f 48 12 48 16 ()}
        {Lisp-Entry "get-file" accessor #f 48 41 48 49 ()}
        {Lisp-Entry "set-file" accessor #f 48 41 48 49 ()}
        {Lisp-Entry "launch" method #f 56 20 56 26 ("get-application" "edit-document" "file" "when")}
        {Lisp-Entry "get-class-descriptor" method #f 66 25 66 45 ("Favorite-File-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 75 11 75 17 ()
        {Lisp-Entry "Favorite-File-Descriptor" class #f 82 7 82 31 ("domain" "file" "name:" "Image-Resource" "image:" "title:" "Favorite-Descriptor")}}}})
"Favorite-Handler"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorite-Handler.jazz"} 1288732033
    {Lisp-Entry "jazz.library.favorite.Favorite-Handler" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Favorite-Handler" class #f 44 7 44 23 ("initialize" "Favorite")
        {Lisp-Entry "handler" property #f 47 12 47 19 ()}
        {Lisp-Entry "get-handler" accessor #f 47 44 47 52 ()}
        {Lisp-Entry "set-handler" accessor #f 47 44 47 52 ()}
        {Lisp-Entry "launch" method #f 55 20 55 26 ("self" "notify-handler" "handler" "when")}
        {Lisp-Entry "get-class-descriptor" method #f 65 25 65 45 ("Favorite-Handler-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 74 11 74 17 ()
        {Lisp-Entry "Favorite-Handler-Descriptor" class #f 81 7 81 34 ("Image-Resource" "image:" "Favorite-Descriptor")}}}})
"Favorite-Launch"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorite-Launch.jazz"} 1288732033
    {Lisp-Entry "jazz.library.favorite.Favorite-Launch" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Favorite-Launch" class #f 44 7 44 22 ("initialize" "Favorite")
        {Lisp-Entry "file" property #f 47 12 47 16 ()}
        {Lisp-Entry "get-file" accessor #f 47 41 47 49 ()}
        {Lisp-Entry "set-file" accessor #f 47 41 47 49 ()}
        {Lisp-Entry "launch" method #f 55 20 55 26 ("shell-execute" "file" "when" "unimplemented")}
        {Lisp-Entry "get-class-descriptor" method #f 67 25 67 45 ("Favorite-Launch-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 76 11 76 17 ()
        {Lisp-Entry "Favorite-Launch-Descriptor" class #f 83 7 83 33 ("domain" "title:" "file" "name:" "Image-Resource" "image:" "Favorite-Descriptor")}}}})
"Favorite-Search"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorite-Search.jazz"} 1288732033
    {Lisp-Entry "jazz.library.favorite.Favorite-Search" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Favorite-Search" class #f 45 7 45 22 ("initialize" "Favorite")
        {Lisp-Entry "directories" property #f 48 12 48 23 ()}
        {Lisp-Entry "get-directories" accessor #f 48 49 48 57 ()}
        {Lisp-Entry "set-directories" accessor #f 48 49 48 57 ()}
        {Lisp-Entry "extensions" property #f 49 12 49 22 ()}
        {Lisp-Entry "get-extensions" accessor #f 49 49 49 57 ()}
        {Lisp-Entry "set-extensions" accessor #f 49 49 49 57 ()}
        {Lisp-Entry "launch" method #f 57 20 57 26 ("select-search" "set-visible?" "bring-to-front" "extensions" "'extensions" "get-list" "dir" "lambda" "map" "format" "set-string-content" "directories-search" "'directories-search" "search" "let" "directories" "'directories" "tab" "'tab" "locate" "set-selection-name" "get-guest" "manager" "get-player" "player" "get-search-manager" "frame" "get-application" "appl" "let*")}
        {Lisp-Entry "get-class-descriptor" method #f 76 25 76 45 ("Favorite-Search-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 85 11 85 17 ()
        {Lisp-Entry "Favorite-Search-Descriptor" class #f 92 7 92 33 ("extensions" "title:" "directories" "name:" "Image-Resource" "image:" "Favorite-Descriptor")}}}})
"Favorites"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorites.jazz"} 1288732033
    {Lisp-Entry "jazz.library.favorite.Favorites" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Favorites" class #f 44 7 44 16 ("Group")
        {Lisp-Entry "get-class-descriptor" method #f 52 25 52 45 ("Favorites-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 61 11 61 17 ()
        {Lisp-Entry "Favorites-Descriptor" class #f 68 7 68 27 ("categorized:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Image-Resource" "image:" "title:" "Group-Descriptor")}}}})
"Favorites-Adder"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorites-Adder.jazz"} 1288732033
    {Lisp-Entry "jazz.library.favorite.Favorites-Adder" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Favorites-Adder" class #f 47 7 47 22 ("39" "cancel" "default?:" "action-handler:" "24" "80" "9" "290" "ok" "tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "172" "191" "38" "43" "on-cancel" "escape-press-handler:" "on-ok" ":host" "Event-Handler" "return-press-handler:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "title" "edge" "border-type:" "19" "204" "11" "70" "Label" "name:" "Font" "font:" "16" "55" "15" "10" "Point" "position:" "title:" "218" "382" "Dimension" "size:" "set-default-root" "get-default-root" "set-default-title" "get-default-title" "initialize" "View")
        {Lisp-Entry "default-title" property #f 50 12 50 25 ()}
        {Lisp-Entry "default-root" property #f 51 12 51 24 ()}
        {Lisp-Entry "finish" method #f 68 20 68 26 ("auto-select-first" "'tree" "locate" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "dialog-class" method #f 80 16 80 28 ("Favorites-Adder-Dialog")}
        {Lisp-Entry "meta" class #f 85 9 85 13 ("218" "382" "Dimension" "size:" "300" "450" "Point" "position:" "title:" "Dialog" "extends" "Favorites-Adder-Dialog")
          {Lisp-Entry "focus-gain" method #f 92 13 92 23 ("title" "'title" "guest" "locate" "acquire-focus" "nextmethod")}
          {Lisp-Entry "get-modal-result" method #f 97 13 97 29 ("/=" "essay" "values" "tree" "'tree" "selected-component" "favorite" "'title" "guest" "locate" "get-string-content" "title" "let")}}
        {Lisp-Entry "get-default-title" method #f 109 18 109 35 ("default-title")}
        {Lisp-Entry "set-default-title" method #f 113 18 113 35 ("'title" "locate" "set-string-content" "set!" "default-title" "/=" "when" "title")}
        {Lisp-Entry "get-default-root" method #f 119 18 119 34 ("default-root")}
        {Lisp-Entry "set-default-root" method #f 123 18 123 34 ("set-client" "'tree" "locate" "tree" "let" "set!" "default-root" "neq?" "when" "root")}}
      {Lisp-Entry "Request-Tree" class #f 135 7 135 19 ("on-double-click" ":form" "Event-Handler" "double-click-handler:" "reorderable?:" "draggable?:" "Favorites-Tree")
        {Lisp-Entry "on-double-click" method #f 142 11 142 26 ("get-host" "on-ok" "evt")}}}})
"Favorites-Editor"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorites-Editor.jazz"} 1288732033
    {Lisp-Entry "jazz.library.favorite.Favorites-Editor" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Favorites-Editor" class #f 45 7 45 23 ("Descendants-Editor")
        {Lisp-Entry "form-model" method #f 48 20 48 30 ("nextmethod" "else" "Favorites-Tree" "tree" "get-name" "case" "form")}}}})
"Favorites-Manager"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorites-Manager.jazz"} 1290005180
    {Lisp-Entry "jazz.library.favorite.Favorites-Manager" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Favorites-File" definition #f 60 12 60 26 ("Profile" "File")}
      {Lisp-Entry "read-favorites" definition #f 64 13 64 27 ("err" "continue-handler:" "install-context" "read-form" "instantiate" "favorites" "get-process" "process" "exists?" "when" "Favorites-File" "file" "let" "lambda" "with-safe-execution")}
      {Lisp-Entry "Favorites-Manager" class #f 78 7 78 24 ("291" "width:" "title:" "descendant" "highlight-edited?:" "show-header?:" "tree" "tool" "style:" "scroller" "center" "location:" "descendants" "on-reload-favorites" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "reload" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Exit-Listener" "Component-Editor")
        {Lisp-Entry "external-name" method #f 91 25 91 38 ("favorites-manager" "'favorites-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 100 25 100 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 104 25 104 35 ()}
        {Lisp-Entry "get-tools-view" method #f 113 20 113 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 117 20 117 33 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" method #f 127 11 127 19 ("tree" "descendants" "locate")}
        {Lisp-Entry "new-controller" method #f 136 20 136 34 ("self" "Favorites-Manager-Controller" "new")}
        {Lisp-Entry "install" method #f 145 20 145 27 ("read-favorites" "set-client" "get-application" "add-exit-listener" "self" "'descendants" "locate" "set-editor" "header" "descendants" "locate-component" "set-shown?" "nextmethod" "rest")}
        {Lisp-Entry "resize-center" method #f 158 11 158 24 ("descendants" "'descendants" "locate" "size-figure" "dv" "dh")}
        {Lisp-Entry "on-reload-favorites" method #f 162 18 162 37 ("read-favorites" "set-client" "evt")}
        {Lisp-Entry "on-launch" method #f 166 18 166 27 ("launch-selection" "evt")}
        {Lisp-Entry "prepare-exit" method #f 170 20 170 32 ("save" "designer" "get-form" "get-origin" "file?" "get-modified?" "and" "when")}
        {Lisp-Entry "launch-selection" method #f 180 18 180 34 ("launch" "bell" "null?" "if" "selected-component" "favorite" "get-tree" "tree" "let*")}
        {Lisp-Entry "add-to-favorites" method #f 193 18 193 34 ("value" "property" "lambda" "for-each-property" "set-property" "designer" "add-child" "title:" "new" "apply" "favorite" "let" "when" "client" "default-root:" "default-title:" "Favorites-Adder" "get-modal" "parent" "receive" "initargs" "title" "class")}
        {Lisp-Entry "import-favorites" method #f 209 11 209 27 ("with-update-locked" "recursive?:" "directories?:" "bell" "set-property" "designer" "add-child" "visible?:" "Group" "new" "set" "directory?" "if" "title" "let" "get-base" "user-message" "pathname" "iterate-directory" "lambda" "proc" "bad" "title:" "choose-directory" "directory" "selected-component" "component" "get-tree" "tree" "letrec")}
        {Lisp-Entry "extract-url" method #f 234 11 234 22 ("cdr" "set!" "0" "subseq" "=" "4" "length" ">=" "when" "car" "line" "not" "not-null?" "and" "while" "found" "load-lines" "lines" "let" "file")}
        {Lisp-Entry "new-favorites-menu" method #f 250 18 250 36 ("layout-menu" "cleanup-separators" "import-favorites" "'import-favorites" "import-separator" "'import-separator" "Browser-View" "'Browser-View" "in-manifest?" "not" "end-open-group" "'end-open-group" "open" "'open" "set-visible?" "Favorite" "car" "is-not?" "1" "length" "/=" "or" "when" "update-component-menu" "selected-components" "components" "descendants" "'descendants" "locate" "get-tree" "tree" "self" "client:" "Favorites-Menu" "new" "menu" "let*")}}
      {Lisp-Entry "Favorites-Manager-Controller" class #f 272 7 272 35 ("Component-Editor-Controller")
        {Lisp-Entry "document-status" method #f 275 20 275 35 ()}}
      {Lisp-Entry "Favorites-Menu" class #f 284 7 284 21 ("end-open-group" "on-launch" ":form" "Event-Handler" "action-handler:" "default?:" "add-item" "before:" "title:" "open" "name:" "Component-Menu")
        {Lisp-Entry "on-launch" method #f 293 11 293 20 ("client" "launch-selection" "evt")}
        {Lisp-Entry "on-import-favorites" method #f 297 11 297 30 ("import-favorites" "evt")}
        {Lisp-Entry "on-properties" method #f 302 11 302 24 ("show-properties" "evt")}}}})
"Favorites-Tree"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorites-Tree.jazz"} 1288732033
    {Lisp-Entry "jazz.library.favorite.Favorites-Tree" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Favorites-Tree" class #f 46 7 46 21 ("show-traits?:" "multiple-selection?:" "auto-expand/collapse?:" "reorderable?:" "draggable?:" ":images" "portfolio:" "Descendants-Tree")
        {Lisp-Entry "context-menu" method #f 53 20 53 32 ("new-favorites-menu" "track-popup-menu" "lambda" "with-context-click" "Favorites-Manager" "is?" "when" "get-guest" "guest" "get-host" "host" "let*" "pos")}
        {Lisp-Entry "update-selection" method #f 62 20 62 36 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" method #f 66 20 66 29 ("collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "if" "level" "update?" "component")}
        {Lisp-Entry "double-click" method #f 72 20 72 32 ("get-host" "get-guest" "launch-selection" "nextmethod" "pos")}
        {Lisp-Entry "return-press" method #f 77 20 77 32 ("nextmethod" "else" "get-host" "get-guest" "launch-selection" "case" "key")}
        {Lisp-Entry "addable-root-classes" method #f 83 20 83 40 ("Favorite-Search" "Favorite-Launch" "Favorite-Handler" "Favorite-File" "Favorite-Directory" "Favorite-Clipboard" "Group" "list")}}}})
"Form"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "component" "Form.jazz"} 1290095359
    {Lisp-Entry "jazz.library.component.Form" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Form" class #f 61 7 61 11 ("Environment-Provider" "JML-Element")
        {Lisp-Entry "data" slot #f 64 8 64 12 ()}
        {Lisp-Entry "get-data" accessor #f 64 32 64 40 ()}
        {Lisp-Entry "set-data" accessor #f 64 32 64 40 ()}
        {Lisp-Entry "origin" slot #f 65 8 65 14 ()}
        {Lisp-Entry "get-origin" accessor #f 65 32 65 40 ()}
        {Lisp-Entry "set-origin" accessor #f 65 32 65 40 ()}
        {Lisp-Entry "context" slot #f 66 8 66 15 ()}
        {Lisp-Entry "get-context" accessor #f 66 32 66 40 ()}
        {Lisp-Entry "set-context" accessor #f 66 32 66 40 ()}
        {Lisp-Entry "action" slot #f 67 8 67 14 ()}
        {Lisp-Entry "get-action" accessor #f 67 29 67 37 ()}
        {Lisp-Entry "model" slot #f 68 8 68 13 ()}
        {Lisp-Entry "get-model" accessor #f 68 32 68 40 ()}
        {Lisp-Entry "set-model" accessor #f 68 32 68 40 ()}
        {Lisp-Entry "locator" slot #f 69 8 69 15 ()}
        {Lisp-Entry "get-locator" accessor #f 69 32 69 40 ()}
        {Lisp-Entry "set-locator" accessor #f 69 32 69 40 ()}
        {Lisp-Entry "name" slot #f 70 8 70 12 ()}
        {Lisp-Entry "get-name" accessor #f 70 32 70 40 ()}
        {Lisp-Entry "set-name" accessor #f 70 32 70 40 ()}
        {Lisp-Entry "tag-symbolic?" slot #f 71 8 71 21 ()}
        {Lisp-Entry "get-tag-symbolic?" accessor #f 71 32 71 40 ()}
        {Lisp-Entry "set-tag-symbolic?" accessor #f 71 32 71 40 ()}
        {Lisp-Entry "tag-reference" slot #f 72 8 72 21 ()}
        {Lisp-Entry "get-tag-reference" accessor #f 72 32 72 40 ()}
        {Lisp-Entry "set-tag-reference" accessor #f 72 32 72 40 ()}
        {Lisp-Entry "initialize" method #f 80 20 80 30 ("when" "children~self" "properties~self" "tag-reference~self" "tag-symbolic?~self" "name~self" "locator~self" "model~self" "action~self" "context~self" "origin~self" "data~self" "nextmethod" "cddr" "set!" "car" "keyword->symbol" "set-car!" "not-null?" "while" "lst" "canonicalize-properties" "define" "children" "children:" "properties" "properties:" "tag-reference" "tag-reference:" "tag-symbolic?" "tag-symbolic?:" "name" "name:" "locator" "locator:" "model" "model:" "action" "action:" "context" "context:" "origin" "origin:" "data" "data:" "textual?" "textual?:")}
        {Lisp-Entry "copy-object" method #f 113 20 113 31 ("children" "subcopy" "children:" "properties" "copy" "properties:" "tag-reference" "tag-reference:" "tag-symbolic?" "tag-symbolic?:" "name" "name:" "locator" "locator:" "model" "model:" "action" "action:" "context" "context:" "origin" "origin:" "data" "data:" "textual?:" "Form" "new" "deep?")}
        {Lisp-Entry "print" method #f 117 20 117 25 ("length" "children" "keywordize-properties" "properties" "name" "model" "if" "action" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "setup-context" method #f 133 20 133 33 ("children" "child" "for-each" "properties" "setup-context" "value" "name" "lambda" "for-each-property" "context" "set!" "ctx")}
        {Lisp-Entry "resolve-model" method #f 149 18 149 31 ("registered-form" "model" "locate-reference" "context" "if")}
        {Lisp-Entry "locate-reference" method #f 155 20 155 36 ("locator" "symbol")}
        {Lisp-Entry "child" method #f 164 18 164 23 ("error" "find-child" "or" "name")}
        {Lisp-Entry "find-child" method #f 169 18 169 28 ("get-name" "eq?" "child" "lambda" "find-by" "name")}
        {Lisp-Entry "find-name" method #f 174 20 174 29 ("find-child" "name")}
        {Lisp-Entry "find-type" method #f 178 18 178 27 ("get-model" "eq?" "child" "lambda" "find-by" "type")}
        {Lisp-Entry "add-child" method #f 184 20 184 29 ("cons" "children" "set!" "child")}
        {Lisp-Entry "add-child-at" method #f 188 18 188 30 ("insert!" "children" "set!" "rank" "child")}
        {Lisp-Entry "append-child" method #f 192 18 192 30 ("list" "append!" "children" "set!" "child")}
        {Lisp-Entry "send-child-before" method #f 196 18 196 35 ("insert!" "set!" "error" "find" "or" "and" "rank" "children" "remove!" "removed" "let*" "target" "child")}
        {Lisp-Entry "sort-children" method #f 202 18 202 31 ("sort" "children" "set!" "get-name" "key" "key:" "test")}
        {Lisp-Entry "get-presentation" method #f 212 18 212 34 ("resolve-model" "get-class-presentation" "title" "'title" "get-property" "or")}
        {Lisp-Entry "remember-creation" method #f 222 18 222 35 ("children:" "properties:" "component:" "remove" "'remove" "action:" "Restore-Form" "new" "cons" "children" "set!" "component" "unused")}
        {Lisp-Entry "remember-reference" method #f 226 18 226 36 ("cons" "children" "set!" "children:" "properties:" "name:" "model:" "modify" "'modify" "action:" "Restore-Form" "new" "form" "let" "name" "unused")}
        {Lisp-Entry "remember-property" method #f 232 18 232 35 ("set-property" "read-property" "actual-value" "let" "property" "component")}
        {Lisp-Entry "instantiate" method #f 242 18 242 29 ("name" "name:" "creator:" "self" "form:" "new" "apply" "resolve-model" "model" "let" "rest")}
        {Lisp-Entry "instantiate-component" method #f 247 18 247 39 ("name" "name:" "creator:" "new" "apply" "resolve-model" "model" "let" "rest")}
        {Lisp-Entry "get-parts" method #f 257 18 257 27 ("get-children" "get-properties" "keywordize-properties" "get-name" "get-model" "get-action" "values")}
        {Lisp-Entry "get-child-location" method #f 271 20 271 38 ("children" "get-rank" "properties" "length" "tag-reference" "tag-symbolic?" "0" "2" "name" "if" "1" "+" "list" "child")}}}})
"Formatter"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "factory" "Formatter.jazz"} 1288732033
    {Lisp-Entry "jazz.library.factory.Formatter" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Formatter" class #f 40 20 40 29 ("Object")
        {Lisp-Entry "format-directive" method #f 43 26 43 42 ("directive" "output" "formatting")}}}})
"Group"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "group" "Group.jazz"} 1290108809
    {Lisp-Entry "jazz.library.group.Group" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Group" class #f 45 20 45 25 ("title:" "explicit" "initialize" "Component")
        {Lisp-Entry "title" property #f 48 12 48 17 ()}
        {Lisp-Entry "get-title" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "set-title" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "classes" property #f 49 12 49 19 ()}
        {Lisp-Entry "get-classes" accessor #f 49 45 49 53 ()}
        {Lisp-Entry "set-classes" accessor #f 49 45 49 53 ()}
        {Lisp-Entry "sort?" property #f 50 12 50 17 ()}
        {Lisp-Entry "print" method #f 57 20 57 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-sort?" method #f 69 18 69 27 ("sort?")}
        {Lisp-Entry "set-sort?" method #f 73 18 73 27 ("designers" "descendants" "'descendants" "self" "process-refresh" "designer" "lambda" "for-each" "set!" "sort?" "neq?" "when" "value")}
        {Lisp-Entry "get-class-descriptor" method #f 86 25 86 45 ("Group-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 95 11 95 17 ()
        {Lisp-Entry "Group-Descriptor" class #f 101 7 101 23 ("domain" "classes" "title" "name:" "sort?" "name-info" "class-info" "categorized:" "indexable?:" "Image-Resource" "image:" "title:" "Component-Descriptor")
          {Lisp-Entry "component-get-custom-card" method #f 114 20 114 45 ("Group-Card" "component")}
          {Lisp-Entry "component-sort-components?" method #f 118 20 118 46 ("get-sort?" "component")}
          {Lisp-Entry "component-display-property?" method #f 122 20 122 47 ("title" "visible?" "children" "before" "name-info" "class-info" "field-name" "memq?" "not" "property" "component")}
          {Lisp-Entry "component-get-addable-classes" method #f 131 20 131 49 ("get-component-classes" "resolve-reference" "when" "model" "lambda" "map" "component")}
          {Lisp-Entry "component-get-classes" method #f 138 20 138 41 ("get-component-classes" "get-parent" "when" "get-classes" "or" "component")}}
        {Lisp-Entry "Classes-Domain" class #f 149 7 149 21 ("List-Domain")
          {Lisp-Entry "finish" method #f 152 20 152 26 ("Class-Domain" "new" "domain" "set!" "nextmethod" "rest")}}
        {Lisp-Entry "Class-Domain" class #f 162 7 162 19 ("Enumeration-Domain")
          {Lisp-Entry "finish" method #f 165 20 165 26 ("Recipe" "Apartment" "Password" "Person" "Organism" "Company" "Anniversary" "Calendar-Event" "Task" "Note" "Group" "set-choices" "nextmethod" "rest")}}}}})
"Handler"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "handler" "Handler.jazz"} 1289925109
    {Lisp-Entry "jazz.library.handler.Handler" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Handler" class #f 44 7 44 14 ("Object")
        {Lisp-Entry "execute" slot #f 47 8 47 15 ()}
        {Lisp-Entry "get-execute" accessor #f 47 27 47 35 ()}
        {Lisp-Entry "target" slot #f 48 8 48 14 ()}
        {Lisp-Entry "get-target" accessor #f 48 27 48 35 ()}
        {Lisp-Entry "target-name" slot #f 49 8 49 19 ()}
        {Lisp-Entry "get-target-name" accessor #f 49 27 49 35 ()}
        {Lisp-Entry "method-name" slot #f 50 8 50 19 ()}
        {Lisp-Entry "get-method-name" accessor #f 50 27 50 35 ()}
        {Lisp-Entry "form" slot #f 51 8 51 12 ()}
        {Lisp-Entry "get-form" accessor #f 51 27 51 35 ()}
        {Lisp-Entry "initialize" method #f 54 20 54 30 ("method-name~self" "target-name~self" "target~self" "execute~self" "set!" "nextmethod" "method-name" "method-name:" "target-name" "target-name:" "target" "target:" "execute" "execute:")}
        {Lisp-Entry "print" method #f 62 20 62 25 ("method-name" "target-name" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "setup-context" method #f 74 20 74 33 ("form" "set!" "context")}
        {Lisp-Entry "invoke" method #f 83 26 83 32 ("" "apply" "method-name" "class-of" "dispatch" "proc" "find-target" "or" "target" "let*" "execute" "if" "rest" "sender")}
        {Lisp-Entry "find-target" method #f 91 18 91 29 ("cdr" "child" "car" "pair?" "and" ":form" "eq?" "target-name" "get-process" "process-alias" "Component" "is-not?" "if" "get-parent" "else" "class-of" "get-class-forms" "form" "memq?" "not" "cond" "component" "find-form" "define" "sender")}}}})
"History-Item"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "history" "History-Item.jazz"} 1288732033
    {Lisp-Entry "jazz.library.history.History-Item" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "History-Item" class #f 43 20 43 32 ("Object")
        {Lisp-Entry "valid?" method #f 46 26 46 32 ()}
        {Lisp-Entry "open-item" method #f 50 26 50 35 ()}
        {Lisp-Entry "present" method #f 54 26 54 33 ()}}}})
"History-Manager"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "history" "History-Manager.jazz"} 1288732033
    {Lisp-Entry "jazz.library.history.History-Manager" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "History-Manager" class #f 44 20 44 35 ("initialize" "Object")
        {Lisp-Entry "history-provider" slot #f 47 8 47 24 ()}
        {Lisp-Entry "backward-history" slot #f 48 8 48 24 ()}
        {Lisp-Entry "forward-history" slot #f 49 8 49 23 ()}
        {Lisp-Entry "max-history" slot #f 50 8 50 19 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("max-history~self" "history-provider" "set!" "nextmethod" "max-history" "bind-keywords" "rest" "provider")}
        {Lisp-Entry "get-backward-history" method #f 65 18 65 38 ("backward-history" "cleanup-history")}
        {Lisp-Entry "get-forward-history" method #f 69 18 69 37 ("forward-history" "cleanup-history")}
        {Lisp-Entry "add-current" method #f 78 18 78 29 ("present" "user-message" "add-history" "bell" "not" "if" "history-provider" "current-history-item" "item" "let")}
        {Lisp-Entry "add-history" method #f 86 18 86 29 ("history-provider" "update-history-actions" "forward-history" "set!" "1" "-" "tail" "set-cdr!" "backward-history" "length" ">" "max-history" "and" "add-backward-history" "when" "item")}
        {Lisp-Entry "add-backward-history" method #f 95 11 95 31 ("cons" "backward-history" "set!" "when" "item")}
        {Lisp-Entry "add-forward-history" method #f 100 11 100 30 ("cons" "forward-history" "set!" "when" "item")}
        {Lisp-Entry "append-forward-history" method #f 105 11 105 33 ("list" "append" "forward-history" "set!" "when" "item")}
        {Lisp-Entry "go-backward-history" method #f 110 18 110 37 ("update-history-actions" "open-item" "decrease!" "cdr" "car" "add-forward-history" "while" "history-provider" "current-history-item" "item" "let" "bell" "begin" "length" ">=" "if" "cleanup-history" "backward-history" "set!" "cleanup-backward-history" "define" "0" "rank" "rank:")}
        {Lisp-Entry "go-forward-history" method #f 130 18 130 36 ("update-history-actions" "open-item" "decrease!" "cdr" "car" "add-backward-history" ">=" "while" "history-provider" "current-history-item" "item" "let" "bell" "begin" "null?" "if" "cleanup-history" "forward-history" "set!" "cleanup-forward-history" "define" "0" "rank" "rank:")}
        {Lisp-Entry "cleanup-history" definition #f 150 15 150 30 ("valid?" "collect-if" "history")}}}})
"History-Provider"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "history" "History-Provider.jazz"} 1288732033
    {Lisp-Entry "jazz.library.history.History-Provider" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "History-Provider" interface #f 43 24 43 40 ()
        {Lisp-Entry "current-history-item" method #f 46 35 46 55 ()}
        {Lisp-Entry "update-history-actions" method #f 47 35 47 57 ()}}}})
"Icon-Resource"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "resource" "Icon-Resource.jazz"} 1288732033
    {Lisp-Entry "jazz.library.resource.Icon-Resource" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Icon-Resource" class #f 43 7 43 20 ("Resource")
        {Lisp-Entry "resource-type" method #f 52 16 52 29 ("icon" "'icon")}}}})
"Image-Resource"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "resource" "Image-Resource.jazz"} 1288732033
    {Lisp-Entry "jazz.library.resource.Image-Resource" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Image-Resource" class #f 43 7 43 21 ("Resource")
        {Lisp-Entry "resource-type" method #f 52 16 52 29 ("image" "'image")}}}})
"Indented-Column"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Indented-Column.jazz"} 1288732033
    {Lisp-Entry "jazz.library.display.Indented-Column" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Indented-Column" class #f 43 20 43 35 ("0" "initialize" "Display-Column")
        {Lisp-Entry "indentation" slot #f 46 8 46 19 ()}
        {Lisp-Entry "get-indentation" accessor #f 46 52 46 60 ()}
        {Lisp-Entry "set-indentation" accessor #f 46 52 46 60 ()}
        {Lisp-Entry "use-contouring?" slot #f 47 8 47 23 ()}
        {Lisp-Entry "get-use-contouring?" accessor #f 47 52 47 60 ()}
        {Lisp-Entry "set-use-contouring?" accessor #f 47 52 47 60 ()}
        {Lisp-Entry "max-data" slot #f 48 8 48 16 ()}
        {Lisp-Entry "max-width" slot #f 49 8 49 17 ()}
        {Lisp-Entry "initialize" method #f 57 20 57 30 ("use-contouring?~self" "indentation~self" "set!" "nextmethod" "apply" "others" "use-contouring?" "2" "indentation" "bind-keywords" "rest" "displayer")}
        {Lisp-Entry "put-data" method #f 69 20 69 28 ("cons" "factory" "put" "0" "level" "data")}
        {Lisp-Entry "empty-replacement" method #f 73 20 73 37 ("0" "cons" "previous-data" "previous-column")}
        {Lisp-Entry "prepare-print" method #f 82 20 82 33 ("minimum" "content" "+" "max-width" "max" "max-data" "set!" "indentation" "*" "indent" "length" "or" "let*" "data" "level" "bind" "info" "lambda" "for-each" "nextmethod")}
        {Lisp-Entry "print-to" method #f 96 20 96 28 ("border-after" "0" "border" "format" "get-use-contouring?" "Indented-Column" "is?" "and" "puc?" "max-width" "max-data" "-" "use-contouring?" "if" "padding" "indentation" "*" "indent" "length" "or" "let*" "data" "level" "bind" "printer" "previous-data" "previous-column" "info")}}}})
"Indented-Column-Preferences"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Indented-Column-Preferences.jazz"} 1288732033
    {Lisp-Entry "jazz.library.display.Indented-Column-Preferences" module #f 37 18 37 66 ("jazz")
      {Lisp-Entry "Indented-Column-Preferences" class #f 45 20 45 47 ("Image-Resource" "icon:" "2" "initialize" "Column-Preferences")
        {Lisp-Entry "indentation" property #f 48 12 48 23 ()}
        {Lisp-Entry "get-indentation" accessor #f 48 52 48 60 ()}
        {Lisp-Entry "set-indentation" accessor #f 48 52 48 60 ()}
        {Lisp-Entry "use-contouring?" property #f 49 12 49 27 ()}
        {Lisp-Entry "get-use-contouring?" accessor #f 49 52 49 60 ()}
        {Lisp-Entry "set-use-contouring?" accessor #f 49 52 49 60 ()}
        {Lisp-Entry "column-class" method #f 61 20 61 32 ("Indented-Column")}
        {Lisp-Entry "new-column" method #f 65 20 65 30 ("use-contouring?" "use-contouring?:" "indentation" "indentation:" "minimum" "minimum:" "border-after" "border-after:" "border" "border:" "Indented-Column" "new" "display")}
        {Lisp-Entry "get-class-descriptor" method #f 74 25 74 45 ("Indented-Column-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 83 11 83 17 ()
        {Lisp-Entry "Indented-Column-Preferences-Descriptor" class #f 89 7 89 45 ("domain" "use-contouring?" "indentation" "name:" "Column-Preferences-Descriptor")}}}})
"Integrity-Constraint"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "integrity" "Integrity-Constraint.jazz"} 1288732033
    {Lisp-Entry "jazz.library.integrity.Integrity-Constraint" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Integrity-Constraint" class #f 40 20 40 40 ("Object")
        {Lisp-Entry "register-constraints" method #f 48 31 48 51 ("manager")}
        {Lisp-Entry "validate" method #f 57 26 57 34 ("manager" "context" "client" "root" "component")}}}})
"Integrity-Manager"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "integrity" "Integrity-Manager.jazz"} 1288732033
    {Lisp-Entry "jazz.library.integrity.Integrity-Manager" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Integrity-Manager" class #f 40 20 40 37 ("initialize" "Object")
        {Lisp-Entry "constraints" slot #f 43 8 43 19 ()}
        {Lisp-Entry "initialize" method #f 46 20 46 30 ("nextmethod" "get-output" "register-constraints" "List-Factory" "new" "constraints" "set!" "setup-constraints" "define")}
        {Lisp-Entry "print" method #f 56 20 56 25 ("format-plural" "format-cardinality" "format" "constraints" "length" "entries" "let" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "register-constraints" method #f 70 26 70 46 ()}
        {Lisp-Entry "register-constraint" method #f 74 18 74 37 ("list" "constraints" "put" "root?" "root?:" "model" "constraint")}
        {Lisp-Entry "validate-integrity" method #f 83 18 83 36 ("validate-all" "clear-violations" "reporter" "reporter:" "context" "context:" "root")}
        {Lisp-Entry "validate-all" method #f 88 29 88 41 ("validate-hierarchy" "reporter" "context" "root")}
        {Lisp-Entry "validate-hierarchy" method #f 92 29 92 47 ("get-children" "validate-hierarchy" "child" "lambda" "for-each" "stop-descent" "'stop-descent" "validate" "eq?" "unless" "report-progress" "when" "reporter" "context" "client" "root" "component")}
        {Lisp-Entry "validate" method #f 101 18 101 26 ("constraints" "continuation-return" "validate" "branch-installed?" "is?" "null?" "or" "and" "when" "root?" "model" "constraint" "bind" "info" "for-each" "return" "lambda" "continuation-capture" "stop-descent" "'stop-descent" "self" "validate-component" "eq?" "if" "validation-context" "new-context" "let" "context" "client" "root" "component")}
        {Lisp-Entry "validation-context" method #f 116 29 116 47 ("context" "root" "component")}
        {Lisp-Entry "report-progress" method #f 120 29 120 44 ("get-name" "user-feedback" "test-cancelled" "reporter" "root" "component")}
        {Lisp-Entry "add-violation" method #f 130 26 130 39 ("add-violation" "cons" "if" "set-path-presentation" "set-path" "set-trait-presentation" "set-trait" "present-path" "presentation" "path" "receive" "get-presentation-property" "trait-presentation" "get-name" "and" "trait-name" "get-active-trait" "trait" "let*" "client" "root" "component" "violation")}
        {Lisp-Entry "clear-violations" method #f 142 26 142 42 ("clear-violations" "root")}}}})
"Integrity-Violation"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "integrity" "Integrity-Violation.jazz"} 1288732033
    {Lisp-Entry "jazz.library.integrity.Integrity-Violation" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Integrity-Violation" class #f 43 20 43 39 ("Object")
        {Lisp-Entry "message" slot #f 46 8 46 15 ()}
        {Lisp-Entry "trait" slot #f 47 8 47 13 ()}
        {Lisp-Entry "get-trait" accessor #f 47 38 47 46 ()}
        {Lisp-Entry "set-trait" accessor #f 47 38 47 46 ()}
        {Lisp-Entry "trait-presentation" slot #f 48 8 48 26 ()}
        {Lisp-Entry "get-trait-presentation" accessor #f 48 38 48 46 ()}
        {Lisp-Entry "set-trait-presentation" accessor #f 48 38 48 46 ()}
        {Lisp-Entry "path" slot #f 49 8 49 12 ()}
        {Lisp-Entry "get-path" accessor #f 49 38 49 46 ()}
        {Lisp-Entry "set-path" accessor #f 49 38 49 46 ()}
        {Lisp-Entry "path-presentation" slot #f 50 8 50 25 ()}
        {Lisp-Entry "get-path-presentation" accessor #f 50 38 50 46 ()}
        {Lisp-Entry "set-path-presentation" accessor #f 50 38 50 46 ()}
        {Lisp-Entry "property" slot #f 51 8 51 16 ()}
        {Lisp-Entry "get-property" accessor #f 51 38 51 46 ()}
        {Lisp-Entry "set-property" accessor #f 51 38 51 46 ()}
        {Lisp-Entry "construct-literal" method #f 55 16 55 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "initialize" method #f 59 20 59 30 ("property~self" "path-presentation~self" "path~self" "trait-presentation~self" "trait~self" "message~self" "set!" "nextmethod" "property" "property:" "path-presentation" "path-presentation:" "path" "path:" "trait-presentation" "trait-presentation:" "trait" "trait:" "message" "message:")}
        {Lisp-Entry "print" method #f 74 20 74 25 ("path-presentation" "path" "trait-presentation" "trait" "message" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "get-message" method #f 89 26 89 37 ("message")}
        {Lisp-Entry "get-image" method #f 98 26 98 35 ("Image-Resource")}
        {Lisp-Entry "present-message" method #f 102 26 102 41 ("get-message")}
        {Lisp-Entry "present-location" method #f 106 26 106 42 ("join" "path" "get-path" "path-presentation" "or" "location" "let")}}}})
"Locator"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Locator.jazz"} 1288732033
    {Lisp-Entry "jazz.library.utility.Locator" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Locator" class #f 44 20 44 27 ("initialize" "Object")
        {Lisp-Entry "prefix" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-prefix" accessor #f 47 40 47 48 ()}
        {Lisp-Entry "reset-time" slot #f 48 8 48 18 ()}
        {Lisp-Entry "max-delay" slot #f 49 8 49 17 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("max-delay~self" "set!" "nextmethod" "0.5" "max-delay" "max-delay:")}
        {Lisp-Entry "setup" method #f 62 18 62 23 ("max-delay" "current-time" "time->seconds" "+" "reset-time" "prefix" "set!" "string")}
        {Lisp-Entry "enter" method #f 72 18 72 23 ("locate" "concatenate" "prefix" "not" "if" "target" "validate" "string" "let" "key")}
        {Lisp-Entry "validate" method #f 79 11 79 19 ("reset" "ci=?" "reset-time" "current-time" "time->seconds" ">" "or" "prefix" "and" "when" "string")}
        {Lisp-Entry "locate" method #f 85 18 85 24 ("continuation-return" "setup" "select" "ci=?" "when" "0" "subseq" ">=" "and" "prefix" "rank" "title" "iterate" "return" "lambda" "continuation-capture" "cardinality" "len" "let" "target")}
        {Lisp-Entry "iterate" method #f 103 26 103 33 ("proc")}
        {Lisp-Entry "select" method #f 107 26 107 32 ("rank")}
        {Lisp-Entry "reset" method #f 116 18 116 23 ("reset-time" "prefix" "set!")}}}})
"Log-Reporter"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "reporter" "Log-Reporter.jazz"} 1288732033
    {Lisp-Entry "jazz.library.reporter.Log-Reporter" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Log-Reporter" class #f 43 20 43 32 ("Reporter" "Object")
        {Lisp-Entry "log" slot #f 46 8 46 11 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("log~self" "set!" "nextmethod" "log")}
        {Lisp-Entry "section-title" method #f 54 20 54 33 ("log" "format" "title")}
        {Lisp-Entry "set-message" method #f 58 20 58 31 ("log" "format" "msg")}
        {Lisp-Entry "user-message" method #f 62 20 62 32 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "set-range" method #f 66 20 66 29 ("range")}
        {Lisp-Entry "set-pos" method #f 70 20 70 27 ("pos")}
        {Lisp-Entry "delta-pos" method #f 74 20 74 29 ("increment")}
        {Lisp-Entry "set-step" method #f 78 20 78 28 ("increment")}
        {Lisp-Entry "step-it" method #f 82 20 82 27 ()}
        {Lisp-Entry "set-done" method #f 86 20 86 28 ()}
        {Lisp-Entry "disable-cancel" method #f 90 20 90 34 ()}
        {Lisp-Entry "cancel-requested?" method #f 94 20 94 37 ()}
        {Lisp-Entry "test-cancelled" method #f 98 20 98 34 ()}}}})
"Loggable"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Loggable.jazz"} 1288732033
    {Lisp-Entry "jazz.library.utility.Loggable" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Loggable" interface #f 40 24 40 32 ()
        {Lisp-Entry "log-info" method #f 43 35 43 43 ("output")}
        {Lisp-Entry "edit" method #f 44 35 44 39 ()}
        {Lisp-Entry "edit-child" method #f 45 35 45 45 ("child")}}}})
"Multiplexer-Reporter"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "reporter" "Multiplexer-Reporter.jazz"} 1288732033
    {Lisp-Entry "jazz.library.reporter.Multiplexer-Reporter" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Multiplexer-Reporter" class #f 43 20 43 40 ("Reporter" "Object")
        {Lisp-Entry "reporters" slot #f 46 8 46 17 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("reporters~self" "set!" "nextmethod" "reporters")}
        {Lisp-Entry "main-reporter" method #f 54 11 54 24 ("reporters" "car")}
        {Lisp-Entry "section-title" method #f 58 20 58 33 ("reporters" "section-title" "reporter" "lambda" "for-each" "title")}
        {Lisp-Entry "set-message" method #f 64 20 64 31 ("reporters" "set-message" "reporter" "lambda" "for-each" "msg")}
        {Lisp-Entry "user-message" method #f 70 20 70 32 ("reporters" "user-message" "" "apply" "reporter" "lambda" "for-each" "rest" "fmt")}
        {Lisp-Entry "set-range" method #f 76 20 76 29 ("reporters" "set-range" "reporter" "lambda" "for-each" "range")}
        {Lisp-Entry "set-pos" method #f 82 20 82 27 ("reporters" "set-pos" "reporter" "lambda" "for-each" "pos")}
        {Lisp-Entry "delta-pos" method #f 88 20 88 29 ("reporters" "delta-pos" "reporter" "lambda" "for-each" "increment")}
        {Lisp-Entry "set-step" method #f 94 20 94 28 ("reporters" "set-step" "reporter" "lambda" "for-each" "increment")}
        {Lisp-Entry "step-it" method #f 100 20 100 27 ("reporters" "step-it" "reporter" "lambda" "for-each")}
        {Lisp-Entry "set-done" method #f 106 20 106 28 ("reporters" "set-done" "reporter" "lambda" "for-each")}
        {Lisp-Entry "disable-cancel" method #f 112 20 112 34 ("reporters" "disable-cancel" "reporter" "lambda" "for-each")}
        {Lisp-Entry "cancel-requested?" method #f 118 20 118 37 ("cancel-requested?" "main-reporter" "main" "let")}
        {Lisp-Entry "test-cancelled" method #f 123 20 123 34 ("test-cancelled" "main-reporter" "main" "let")}}}})
"Outline"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "outline" "Outline.jazz"} 1288732033
    {Lisp-Entry "jazz.library.outline.Outline" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Outline" class #f 43 20 43 27 ("Object")
        {Lisp-Entry "row-spacing" slot #f 46 8 46 19 ()}
        {Lisp-Entry "get-row-spacing" accessor #f 46 35 46 43 ()}
        {Lisp-Entry "set-row-spacing" accessor #f 46 35 46 43 ()}
        {Lisp-Entry "root-row" slot #f 47 8 47 16 ()}
        {Lisp-Entry "get-root-row" accessor #f 47 35 47 43 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("root-row~self" "row-spacing~self" "set!" "nextmethod" "root-row" "row-spacing")}
        {Lisp-Entry "first-row" method #f 56 18 56 27 ("root-row" "get-sons" "first")}
        {Lisp-Entry "first-visible-row" method #f 60 18 60 35 ("root-row" "get-next")}
        {Lisp-Entry "get-row" method #f 69 26 69 33 ("1" "+" "root-row" "get-row-from" "n")}
        {Lisp-Entry "get-row-from" method #f 73 21 73 33 ("decrease!" "get-next" "set!" "0" ">" "and" "while" "n" "row")}
        {Lisp-Entry "call-with-v->row" method #f 80 26 80 42 ("proc" "v")}}}})
"Output-Log"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Output-Log.jazz"} 1288732033
    {Lisp-Entry "jazz.library.utility.Output-Log" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Output-Log" class #f 48 20 48 30 ("300" "width:" "title:" "message" "results" "header" "content" "scroller" "name:" "Navigable-Results")
        {Lisp-Entry "external-name" method #f 61 25 61 38 ("output-log" "'output-log" "rest")}
        {Lisp-Entry "host-icon" method #f 70 25 70 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 74 25 74 35 ()}
        {Lisp-Entry "log-line" method #f 83 18 83 26 ("title:" "Tree-Node" "new" "list" "children:" "add-row" "get-tree" "tree" "let" "user-data" "user-data:" "image" "image:" "collapsed" "'collapsed" "state" "state:" "father" "father:" "line")}
        {Lisp-Entry "edit-selection" method #f 93 20 93 34 ("focus-host" "edit-document" "frame" "user-message" "msg" "line" "file" "bind" "else" "cdr" "edit-child" "car" "pair?" "and" "edit" "Loggable" "is?" "bell" "null?" "cond" "get-row" "get-user-data" "info" "let" "when" "get-single-selection" "selection" "get-tree" "tree" "let*" "forward?")}
        {Lisp-Entry "edit-document" method #f 112 11 112 24 ("focus-host" "visible?:" "selection:" "get-application" "edit-document" "frame" "1" "+" "0" "Cell" "Range$Cell$" "new" "and" "selection" "let*" "lambda" ":wait" "with-cursor" "focus?" "forward?" "line" "file")}}}})
"Path"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "path" "Path.jazz"} 1288732033
    {Lisp-Entry "jazz.library.path.Path" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Path" class #f 40 20 40 24 ("Object")
        {Lisp-Entry "path" slot #f 43 8 43 12 ()}
        {Lisp-Entry "get-path" accessor #f 43 23 43 31 ()}
        {Lisp-Entry "set-path" accessor #f 43 23 43 31 ()}
        {Lisp-Entry "construct-literal" method #f 46 16 46 33 ("self" "new" "path" "context")}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("path~self" "set!" "nextmethod" "path")}
        {Lisp-Entry "compare-object" method #f 55 20 55 34 (":not-equal" "else" ":equal" "get-path" "path" "=" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 64 20 64 25 ("path" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "get-parent" method #f 75 18 75 28 ("path" "butlast" "Path" "new")}
        {Lisp-Entry "present" method #f 84 18 84 25 ("path" "format")}
        {Lisp-Entry "follow-component" method #f 93 26 93 42 ("path" "child" "root")}
        {Lisp-Entry "follow-form" method #f 97 26 97 37 ("path" "child" "set!" "name" "lambda" "for-each" "form")}}}})
"Period"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Period.jazz"} 1288732033
    {Lisp-Entry "jazz.library.utility.Period" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Period" class #f 43 20 43 26 ("Range")
        {Lisp-Entry "get-duration" method #f 47 18 47 30 ("Time" "new" "get-duration" "start" "end" "get-time" "get-elapse" "-" "delta" "let" "field")}
        {Lisp-Entry "present" method #f 53 18 53 25 ("end" "french:" "english:" "Locales" "localize" "start" "present-date" ":string" "format")}
        {Lisp-Entry "for-each-day" method #f 61 18 61 30 ("1" "day" "'day" "add" "set!" "end" "<=" "while" "start" "date" "let" "proc")}
        {Lisp-Entry "includes-day-of-week?" method #f 69 18 69 39 ("return" "get-day-of-week" "Date" "symbolic-day-of-week" "=" "when" "date" "lambda" "for-each-day" "day")}}}})
"Print-Sequencer"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "factory" "Print-Sequencer.jazz"} 1288732033
    {Lisp-Entry "jazz.library.factory.Print-Sequencer" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Print-Sequencer" class #f 40 20 40 35 ("Object")}
      {Lisp-Entry "Print-Sequencer" class #f 46 20 46 35 ("List-Factory" "new" "initialize" "Object")
        {Lisp-Entry "printer" slot #f 49 8 49 15 ()}
        {Lisp-Entry "start" slot #f 50 8 50 13 ()}
        {Lisp-Entry "sections" slot #f 51 8 51 16 ()}
        {Lisp-Entry "initialize" method #f 54 11 54 21 ("start-section" "printer" "set!" "nextmethod" "prt")}
        {Lisp-Entry "start-section" method #f 60 18 60 31 ("get-position" "start" "set!")}
        {Lisp-Entry "end-section" method #f 64 18 64 29 ("start-section" "get-position" "start" "cons" "prog1")}
        {Lisp-Entry "get-position" method #f 69 11 69 23 ("printer" "get-position")}
        {Lisp-Entry "put-section" method #f 78 18 78 29 ("sections" "put" "section")}
        {Lisp-Entry "put-sections" method #f 82 18 82 30 ("sections" "put-sequence" "sections-list")}
        {Lisp-Entry "print-sections" method #f 86 18 86 32 ("sections" "get-output" "transfer" "end" "start" "bind" "section" "lambda" "for-each" "output")}
        {Lisp-Entry "transfer-size" definition #f 98 14 98 27 ("1024")}
        {Lisp-Entry "transfer-buffer" definition #f 101 14 101 29 ("transfer-size" "size:" "Heap-Block" "new")}
        {Lisp-Entry "transfer" method #f 105 24 105 32 ("increase!" "decrease!" "WriteFile" "NULL" "transfer-buffer" "get-handle" "ReadFile" "transfer-size" "min" "subsize" "printer" "set-position" "0" ">" "while" "-" "size" "let" "output" "end" "start")}}}})
"Pulse"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Pulse.jazz"} 1288732033
    {Lisp-Entry "jazz.library.utility.Pulse" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Pulse" class #f 43 7 43 12 ("make-mutex" "initialize" "Object")
        {Lisp-Entry "name" property #f 46 12 46 16 ()}
        {Lisp-Entry "get-name" accessor #f 46 44 46 52 ()}
        {Lisp-Entry "set-name" accessor #f 46 44 46 52 ()}
        {Lisp-Entry "delay" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-delay" accessor #f 47 44 47 52 ()}
        {Lisp-Entry "set-delay" accessor #f 47 44 47 52 ()}
        {Lisp-Entry "period" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-period" accessor #f 48 44 48 52 ()}
        {Lisp-Entry "set-period" accessor #f 48 44 48 52 ()}
        {Lisp-Entry "repeat?" property #f 49 12 49 19 ()}
        {Lisp-Entry "get-repeat?" accessor #f 49 44 49 52 ()}
        {Lisp-Entry "set-repeat?" accessor #f 49 44 49 52 ()}
        {Lisp-Entry "execute" property #f 50 12 50 19 ()}
        {Lisp-Entry "get-execute" accessor #f 50 44 50 52 ()}
        {Lisp-Entry "set-execute" accessor #f 50 44 50 52 ()}
        {Lisp-Entry "thread" slot #f 53 8 53 14 ()}
        {Lisp-Entry "mutex" slot #f 54 8 54 13 ()}
        {Lisp-Entry "initialize" method #f 57 20 57 30 ("start-loop" "thread~self" "execute~self" "repeat?~self" "delay~self" "period~self" "name~self" "set!" "nextmethod" "repeat?" "delay" "bind-keywords" "rest" "execute" "period" "name")}
        {Lisp-Entry "destroy" method #f 68 20 68 27 ("nextmethod" "thread-exit" "thread-interrupt!" "mutex-unlock!" "set!" "thread~self" "let" "thread" "when" "mutex" "mutex-lock!")}
        {Lisp-Entry "terminated?" method #f 80 11 80 22 ("thread" "not")}
        {Lisp-Entry "start-loop" method #f 89 11 89 21 ("name" "repeat?" "when" "execute" "terminated?" "unless" "execute-event" "sleep" "period" "delay" "or" "timeout" "loop" "let" "lambda" "new-thread" "thread-start!")}}}})
"Reference"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Reference.jazz"} 1290090845
    {Lisp-Entry "jazz.library.utility.Reference" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Reference" class #f 40 7 40 16 ("Object")
        {Lisp-Entry "context" slot #f 43 8 43 15 ()}
        {Lisp-Entry "get-context" accessor #f 43 23 43 31 ()}
        {Lisp-Entry "symbol" slot #f 44 8 44 14 ()}
        {Lisp-Entry "get-symbol" accessor #f 44 23 44 31 ()}
        {Lisp-Entry "initialize" method #f 47 20 47 30 ("symbol~self" "set!" "nextmethod" "symbol")}
        {Lisp-Entry "print" method #f 52 20 52 25 ("symbol" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "walk-references" method #f 58 20 58 35 ("symbol" "proc")}
        {Lisp-Entry "setup-context" method #f 62 20 62 33 ("context" "set!" "ctx")}
        {Lisp-Entry "resolve-reference" method #f 66 18 66 35 ("symbol" "context" "locate-reference")}}}})
"Regular-Expression"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "regexp" "Regular-Expression.jazz"} 1288732033
    {Lisp-Entry "jazz.library.regexp.Regular-Expression" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Regular-Expression" class #f 40 20 40 38 ("Object")
        {Lisp-Entry "original" slot #f 43 8 43 16 ()}
        {Lisp-Entry "expressions" slot #f 44 8 44 19 ()}
        {Lisp-Entry "initialize" method #f 47 20 47 30 ("parse-expressions" "expressions" "original" "set!" "nextmethod" "pattern")}
        {Lisp-Entry "parse-expressions" method #f 53 11 53 28 ("separator:" "parse-strings" "map" "1" "+" "subseq" "Regular-Pattern" "new" "error" "set!" "not" "if" "eqv?" "when" "element" "c" "cardinality" "below" "0" "from" "n" "for" "loop" "pos" "let" "find-star" "parse-expression" "define" "pattern")}
        {Lisp-Entry "match" method #f 80 18 80 23 ("expressions" "continuation-return" "when" "match" "for-each" "return" "lambda" "continuation-capture" "-" "cardinality" "cast" "subseq" "ends-with?" "starts-with?" "and" "get-suffix" "suffix" "get-prefix" "prefix" "let" "else" "get-pattern" "nu=?" "if" "get-exact?" "cond" "expression" "match-expression" "define" "string")}
        {Lisp-Entry "matches?" method #f 104 18 104 26 ("match" "not-null?" "string")}
        {Lisp-Entry "replace" method #f 113 18 113 25 ("get-suffix" "get-prefix" "concatenate" "get-pattern" "get-exact?" "car" "expression" "let" "original" "error" "1" "expressions" "length" "/=" "if" "string")}}
      {Lisp-Entry "Regular-Pattern" class #f 127 7 127 22 ("Object")
        {Lisp-Entry "pattern" slot #f 130 8 130 15 ()}
        {Lisp-Entry "get-pattern" accessor #f 130 23 130 31 ()}
        {Lisp-Entry "exact?" slot #f 131 8 131 14 ()}
        {Lisp-Entry "get-exact?" accessor #f 131 23 131 31 ()}
        {Lisp-Entry "prefix" slot #f 132 8 132 14 ()}
        {Lisp-Entry "get-prefix" accessor #f 132 23 132 31 ()}
        {Lisp-Entry "suffix" slot #f 133 8 133 14 ()}
        {Lisp-Entry "get-suffix" accessor #f 133 23 133 31 ()}
        {Lisp-Entry "initialize" method #f 136 20 136 30 ("suffix~self" "prefix~self" "exact?~self" "pattern~self" "set!" "nextmethod" "suffix" "prefix" "exact?" "pattern")}}}})
"Reporter"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "reporter" "Reporter.jazz"} 1288732033
    {Lisp-Entry "jazz.library.reporter.Reporter" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Reporter" interface #f 43 24 43 32 ()
        {Lisp-Entry "section-title" method #f 46 35 46 48 ("title")}
        {Lisp-Entry "set-message" method #f 47 35 47 46 ("msg")}
        {Lisp-Entry "user-message" method #f 48 35 48 47 ("rest" "fmt")}
        {Lisp-Entry "user-feedback" method #f 49 35 49 48 ("rest" "fmt")}
        {Lisp-Entry "set-range" method #f 50 35 50 44 ("range")}
        {Lisp-Entry "set-pos" method #f 51 35 51 42 ("pos")}
        {Lisp-Entry "delta-pos" method #f 52 35 52 44 ("increment")}
        {Lisp-Entry "set-step" method #f 53 35 53 43 ("increment")}
        {Lisp-Entry "step-it" method #f 54 35 54 42 ()}
        {Lisp-Entry "set-done" method #f 55 35 55 43 ()}
        {Lisp-Entry "disable-cancel" method #f 56 35 56 49 ()}
        {Lisp-Entry "cancel-requested?" method #f 57 35 57 52 ()}
        {Lisp-Entry "test-cancelled" method #f 58 35 58 49 ()}}}})
"Resource"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "resource" "Resource.jazz"} 1288732033
    {Lisp-Entry "jazz.library.resource.Resource" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Resource" class #f 40 7 40 15 ("Object")
        {Lisp-Entry "name" slot #f 43 8 43 12 ()}
        {Lisp-Entry "get-name" accessor #f 43 20 43 28 ()}
        {Lisp-Entry "initialize" method #f 46 20 46 30 ("name~self" "set!" "nextmethod" "name")}
        {Lisp-Entry "compare-object" method #f 51 20 51 34 (":not-equal" "else" ":equal" "get-name" "name" "=" ":incompatible" "Resource" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 60 20 60 25 ("name" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "resource-type" method #f 72 31 72 44 ()}}}})
"Restore-Form"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "component" "Restore-Form.jazz"} 1289924082
    {Lisp-Entry "jazz.library.component.Restore-Form" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Restore-Form" class #f 43 20 43 32 ("Form")
        {Lisp-Entry "component" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-component" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("component~self" "set!" "nextmethod" "apply" "others" "component" "bind-keywords" "initargs")}}}})
"Sequenced-Column"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Sequenced-Column.jazz"} 1288732033
    {Lisp-Entry "jazz.library.display.Sequenced-Column" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Sequenced-Column" class #f 43 20 43 36 ("Display-Column")
        {Lisp-Entry "put-data" method #f 51 20 51 28 ("List-Factory" "new" "fact" "let" "factory" "get-last-element" "put" "displayer" "get-line" "line" ">" "if" "rest" "data")}
        {Lisp-Entry "increase-line" method #f 59 20 59 33 ("increase!" "displayer" "get-line" "line" "<=" "when")}
        {Lisp-Entry "print-to" method #f 69 20 69 28 ("border-after" "get-output" "display" "data" "lambda" "for-each" "border" "format" "printer" "previous-data" "previous-column" "fact")}}}})
"Sequenced-Column-Preferences"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Sequenced-Column-Preferences.jazz"} 1288732033
    {Lisp-Entry "jazz.library.display.Sequenced-Column-Preferences" module #f 37 18 37 67 ("jazz")
      {Lisp-Entry "Sequenced-Column-Preferences" class #f 43 20 43 48 ("Column-Preferences")
        {Lisp-Entry "column-class" method #f 51 20 51 32 ("Sequenced-Column")}
        {Lisp-Entry "new-column" method #f 55 20 55 30 ("minimum" "minimum:" "border-after" "border-after:" "border" "border:" "Sequenced-Column" "new" "display")}}}})
"Sound-Resource"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "resource" "Sound-Resource.jazz"} 1288732033
    {Lisp-Entry "jazz.library.resource.Sound-Resource" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Sound-Resource" class #f 43 7 43 21 ("Resource")
        {Lisp-Entry "resource-type" method #f 52 16 52 29 ("sound" "'sound")}}}})
"Sparse-Outline"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "outline" "Sparse-Outline.jazz"} 1288732033
    {Lisp-Entry "jazz.library.outline.Sparse-Outline" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Sparse-Outline" class #f 43 20 43 34 ("Outline")}}})
"Template-Expander"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "template" "Template-Expander.jazz"} 1288732033
    {Lisp-Entry "jazz.library.template.Template-Expander" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Template-Expander" class #f 43 7 43 24 ("Object")
        {Lisp-Entry "delimiter-escape" slot #f 46 8 46 24 ()}
        {Lisp-Entry "delimiter-start" slot #f 47 8 47 23 ()}
        {Lisp-Entry "delimiter-end" slot #f 48 8 48 21 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("delimiter-end~self" "delimiter-start~self" "delimiter-escape~self" "set!" "nextmethod" "delimiter-end" "delimiter-end:" "delimiter-start" "delimiter-start:" "delimiter-escape" "delimiter-escape:")}
        {Lisp-Entry "expand" method #f 58 18 58 24 ("peek-char" "delimiter-start" "not" "when" "with" "write-char" "else" "get-output-string" "string->symbol" "delimiter-end" "eqv?" "eof-object?" "cond" "read-char" "c" "iterate" "open-output-string" "name-output" "error" "format" "cdr" "value" "assv" "info" "read-variable" "name" "let" "input" "process-variable" "get-eol-encoding" "eol-encoding:" "parse" "path:" "list" "open-input-file" "open-input-string" "sequence?" "if" "template-reader" "define" "printer" "printer:" "output" "associations" "template")}}}})
"Timer"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Timer.jazz"} 1288732033
    {Lisp-Entry "jazz.library.utility.Timer" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Timer" class #f 43 7 43 12 ("Object")
        {Lisp-Entry "real-start" slot #f 46 8 46 18 ()}
        {Lisp-Entry "cpu-start" slot #f 47 8 47 17 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("reset" "nextmethod")}
        {Lisp-Entry "reset" method #f 55 18 55 23 ("cpu-time" "cpu-start" "real-time" "real-start" "set!")}
        {Lisp-Entry "real-duration" method #f 60 18 60 31 ("real-start" "real-time" "-")}
        {Lisp-Entry "real-duration-in-milliseconds" method #f 63 18 63 47 ("real-duration" "seconds->milliseconds")}
        {Lisp-Entry "cpu-duration" method #f 66 18 66 30 ("cpu-start" "cpu-time" "-")}
        {Lisp-Entry "cpu-duration-in-milliseconds" method #f 69 18 69 46 ("cpu-duration" "seconds->milliseconds")}
        {Lisp-Entry "report-duration" method #f 73 18 73 33 ("cpu-duration-in-milliseconds" "real-duration-in-milliseconds" "user-message")}
        {Lisp-Entry "report-fps" method #f 79 18 79 28 ("real-duration" "1" "/" "user-message")}}}})
"Trait"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "component" "Trait.jazz"} 1289924306
    {Lisp-Entry "jazz.library.component.Trait" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Trait" class #f 44 7 44 12 ("initialize" "Component")
        {Lisp-Entry "inherit" property #f 47 12 47 19 ()}
        {Lisp-Entry "get-inherit" accessor #f 47 49 47 57 ()}
        {Lisp-Entry "set-inherit" accessor #f 47 49 47 57 ()}
        {Lisp-Entry "client-form" property #f 48 12 48 23 ()}
        {Lisp-Entry "get-client-form" accessor #f 48 49 48 57 ()}
        {Lisp-Entry "set-client-form" accessor #f 48 49 48 57 ()}
        {Lisp-Entry "restoreable?" slot #f 51 8 51 20 ()}
        {Lisp-Entry "get-restoreable?" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "set-restoreable?" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "compute-effective-traits" method #f 59 21 59 45 ("append" "self" "list" "self-traits" "inherit" "resolve-trait" "map" "inherited-traits" "compute-effective-traits" "Trait" "parent" "is-not?" "if" "parent-traits" "let")}
        {Lisp-Entry "configure-client" method #f 71 21 71 37 ("client-form" "install-form" "set-restore-form" "when" "install" "'install" "action:" "Restore-Form" "restoreable?" "and" "restore-form" "self" "Branch" "new" "branch" "let" "parent" "client")}
        {Lisp-Entry "installed?" method #f 81 18 81 28 ()}
        {Lisp-Entry "get-class-descriptor" method #f 90 25 90 45 ("Trait-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 99 11 99 17 ()
        {Lisp-Entry "Trait-Descriptor" class #f 105 7 105 23 ("client-form" "name:" "name-unicity?:" "name-mandatory?:" "Image-Resource" "image:" "Component-Descriptor")
          {Lisp-Entry "component-set-presentation" method #f 114 20 114 46 ("trait:" "string->symbol" "set-name" "presentation" "designer" "component")}
          {Lisp-Entry "component-display-property?" method #f 118 20 118 47 ("client-form" "field-name" "memq?" "not" "nextmethod" "and" "property" "component")}}}}})
"URL"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "moniker" "URL.jazz"} 1288732033
    {Lisp-Entry "jazz.library.moniker.URL" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "extract-url-name" definition #f 43 20 43 36 ("1" "+" "subseq" "null?" "if" "reversed?:" "find" "pos" "let" "url")}
      {Lisp-Entry "tokenise-url" definition #f 50 13 50 25 ("split" "filename")}
      {Lisp-Entry "URL-Class" class #f 54 7 54 16 ("Pathname" ":class")}
      {Lisp-Entry "URL" class #f 57 7 57 10 ("Pathname" "URL-Class")
        {Lisp-Entry "title" slot #f 60 8 60 13 ()}
        {Lisp-Entry "get-title" accessor #f 60 21 60 29 ()}
        {Lisp-Entry "initialize" method #f 63 20 63 30 ("title~self" "set!" "nextmethod" "title" "title:" "lst")}
        {Lisp-Entry "get-name" method #f 68 20 68 28 ("parse" "extract-url-name")}
        {Lisp-Entry "print" method #f 72 20 72 25 ("format" "lambda" "self" "print-unreadable" "nextmethod" "null?" "if" "get-title" "title" "let" "readably" "printer")}
        {Lisp-Entry "split" method #f 87 18 87 23 ("1" "+" "values" "null?" "find" "pos" "sub" "self" "error" "/=" "if" "7" "0" "subseq" "header" "parse" "url" "let*")}}}})
"Undoer"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Undoer.jazz"} 1288732033
    {Lisp-Entry "jazz.library.utility.Undoer" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Undoer" class #f 44 7 44 13 ("0" "initialize" "Object")
        {Lisp-Entry "client" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-client" accessor #f 47 45 47 53 ()}
        {Lisp-Entry "undo-list" slot #f 48 8 48 17 ()}
        {Lisp-Entry "get-undo-list" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "redo-list" slot #f 49 8 49 17 ()}
        {Lisp-Entry "undoing?" slot #f 50 8 50 16 ()}
        {Lisp-Entry "redoing?" slot #f 51 8 51 16 ()}
        {Lisp-Entry "atomic?" slot #f 52 8 52 15 ()}
        {Lisp-Entry "atomic-actions" slot #f 53 8 53 22 ()}
        {Lisp-Entry "save-depth" slot #f 54 8 54 18 ()}
        {Lisp-Entry "initialize" method #f 57 20 57 30 ("client" "set!" "nextmethod" "clt")}
        {Lisp-Entry "reset-save-depth" method #f 67 18 67 34 ("0" "save-depth" "set!")}
        {Lisp-Entry "reset" method #f 71 18 71 23 ("atomic-actions" "atomic?" "redoing?" "undoing?" "redo-list" "undo-list" "set!")}
        {Lisp-Entry "register-undo" method #f 85 18 85 31 ("client" "get-controller" "set-modified?" "not" "0" "=" "and" "when" "redoing?" "unless" "increase!" "undo-list" "else" "save-depth" "decrease!" "cons" "redo-list" "set!" "undoing?" "register-atomic-action" "atomic?" "cond" "action")}
        {Lisp-Entry "can-undo?" method #f 100 18 100 27 ("undo-list" "not-null?")}
        {Lisp-Entry "can-redo?" method #f 104 18 104 27 ("redo-list" "not-null?")}
        {Lisp-Entry "undo" method #f 108 18 108 22 ("cdr" "play-action" "set!" "begin" "unwind-protect" "car" "action" "undoing?" "old" "let" "undo-list" "not-null?" "when")}
        {Lisp-Entry "redo" method #f 120 18 120 22 ("cdr" "play-action" "set!" "begin" "unwind-protect" "car" "action" "redoing?" "old" "let" "redo-list" "not-null?" "when")}
        {Lisp-Entry "play-action" method #f 137 26 137 37 ("action")}
        {Lisp-Entry "with-atomic-undo" method #f 146 18 146 34 ("update-focus-actions" "get-application" "appl" "not" "and" "atomic-actions" "set!" "unless" "begin" "unwind-protect" "completed?" "atomic?" "preserved" "let" "play-action" "action" "for-each" "with-atomic-undo" "lambda" "register-undo" "not-null?" "when" "actions" "register-atomic-actions" "define" "proc")}
        {Lisp-Entry "register-atomic-action" method #f 176 11 176 33 ("cons" "atomic-actions" "set!" "action")}}}})
"Version"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Version.jazz"} 1288732033
    {Lisp-Entry "jazz.library.utility.Version" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Version" class #f 43 7 43 14 ("Object")
        {Lisp-Entry "major" slot #f 46 8 46 13 ()}
        {Lisp-Entry "get-major" accessor #f 46 24 46 32 ()}
        {Lisp-Entry "minor" slot #f 47 8 47 13 ()}
        {Lisp-Entry "get-minor" accessor #f 47 24 47 32 ()}
        {Lisp-Entry "stage" slot #f 48 8 48 13 ()}
        {Lisp-Entry "get-stage" accessor #f 48 24 48 32 ()}
        {Lisp-Entry "revision" slot #f 49 8 49 16 ()}
        {Lisp-Entry "get-revision" accessor #f 49 24 49 32 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("stage~self" "revision~self" "minor~self" "major~self" "set!" "nextmethod" "stage" "0" "revision" "minor" "major")}
        {Lisp-Entry "compare-object" method #f 60 20 60 34 (":equal" "get-revision" "revision" "get-minor" "minor" "get-major" "major" "or" "else" ":greater" ">" ":less" "<" "cond" "y" "x" "lambda" "try" "let" ":incompatible" "Version" "is-not?" "if" "target")}
        {Lisp-Entry "print" method #f 74 20 74 25 ("stage" "0" "revision" "/=" "minor" "major" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "present" method #f 83 18 83 25 ("beta" "alpha" "case" "stage" "not" "0" "revision" "=" "if" "minor" "major" "format")}
        {Lisp-Entry "compatible?" method #f 98 18 98 29 ("get-minor" "minor" "get-major" "major" "=" "and" "version")}
        {Lisp-Entry "->32-bit-integer" method #f 103 18 103 34 ("revision" "1000" "minor" "100000" "major" "*" "+")}}}})
"Violations-Found"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "integrity" "Violations-Found.jazz"} 1288732033
    {Lisp-Entry "jazz.library.integrity.Violations-Found" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Violations-Found" class #f 40 20 40 36 ("Signal")
        {Lisp-Entry "design-file" slot #f 43 8 43 19 ()}
        {Lisp-Entry "get-design-file" accessor #f 43 28 43 36 ()}
        {Lisp-Entry "architecture" slot #f 44 8 44 20 ()}
        {Lisp-Entry "get-architecture" accessor #f 44 28 44 36 ()}
        {Lisp-Entry "violations" slot #f 45 8 45 18 ()}
        {Lisp-Entry "get-violations" accessor #f 45 28 45 36 ()}
        {Lisp-Entry "initialize" method #f 48 20 48 30 ("violations~self" "architecture~self" "design-file~self" "set!" "nextmethod" "violations" "architecture" "design-file")}
        {Lisp-Entry "forwardable?" method #f 60 11 60 23 ()}}}})
"Violations-Manager"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "integrity" "Violations-Manager.jazz"} 1288732033
    {Lisp-Entry "jazz.library.integrity.Violations-Manager" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Violations-Manager" class #f 47 20 47 38 ("337" "location" "toplevel-controls?:" "300" "width:" "title:" "violation" "results" "header" "content" "scroller" "name:" "initialize" "Navigable-Results")
        {Lisp-Entry "editor" slot #f 50 8 50 14 ()}
        {Lisp-Entry "external-name" method #f 64 25 64 38 ("violations-manager" "'violations-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 73 25 73 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 77 25 77 35 ()}
        {Lisp-Entry "client-activate" method #f 81 20 81 35 ("set-editor" "Canvas" "get-client" "is?" "if" "get-component-editor" "and" "editor" "current-document" "guest" "let*")}
        {Lisp-Entry "client-deactivate" method #f 89 20 89 37 ("set-editor")}
        {Lisp-Entry "get-client" method #f 98 26 98 36 ("get-client" "editor" "when")}
        {Lisp-Entry "get-editor" method #f 108 26 108 36 ("editor")}
        {Lisp-Entry "set-editor" method #f 112 26 112 36 ("update" "set!" "editor" "neq?" "when" "value")}
        {Lisp-Entry "update" method #f 122 18 122 24 ("get-violations" "add-violation" "for-each" "when" "lambda" "with-update-locked" "remove-every-row" "get-client" "client" "get-tree" "tree" "let")}
        {Lisp-Entry "add-violation" method #f 137 11 137 24 ("user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "get-image" "image" "present-location" "location" "present-message" "title" "get-tree" "tree" "let" "violation")}
        {Lisp-Entry "edit-selection" method #f 150 20 150 34 ("select-property" "self" "origin:" "list" "set-selection" "get-message" "user-message" "get-path" "follow-component" "component" "error" "find-component" "effective" "let" "/=" "or" "process-branch-changed" "set-active-trait" "not" "if" "get-active-trait-name" "active" "get-client" "client" "get-editor" "editor" "get-property" "property" "get-trait-presentation" "trait-presentation" "get-trait" "trait-name" "get-row" "get-user-data" "violation" "when" "get-single-selection" "selection" "get-tree" "tree" "let*" "forward?")}}}})
"_automata"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "automata" "_automata.jazz"} 1288732033
    {Lisp-Entry "jazz.library.automata" module #f 55 18 55 39 ("jazz")
      {Lisp-Entry "Automata" class #f 63 7 63 15 ("Object")
        {Lisp-Entry "nb-vectored" slot #f 66 8 66 19 ()}
        {Lisp-Entry "get-nb-vectored" accessor #f 66 35 66 43 ()}
        {Lisp-Entry "set-nb-vectored" accessor #f 66 35 66 43 ()}
        {Lisp-Entry "nb-listed" slot #f 67 8 67 17 ()}
        {Lisp-Entry "get-nb-listed" accessor #f 67 35 67 43 ()}
        {Lisp-Entry "set-nb-listed" accessor #f 67 35 67 43 ()}
        {Lisp-Entry "nb-lettered" slot #f 68 8 68 19 ()}
        {Lisp-Entry "get-nb-lettered" accessor #f 68 35 68 43 ()}
        {Lisp-Entry "set-nb-lettered" accessor #f 68 35 68 43 ()}
        {Lisp-Entry "start" slot #f 69 8 69 13 ()}
        {Lisp-Entry "get-start" accessor #f 69 27 69 35 ()}
        {Lisp-Entry "initialize" method #f 72 20 72 30 ("start~self" "nb-lettered~self" "nb-listed~self" "0" "nb-vectored~self" "set!" "s")}
        {Lisp-Entry "run" method #f 79 18 79 21 ("transition" "when" "start" "state" "iter" "let" "proper-tail-calls" "declare" "tape")}}
      {Lisp-Entry "Tape" class #f 91 7 91 11 ("Object")
        {Lisp-Entry "found" slot #f 94 8 94 13 ()}
        {Lisp-Entry "initialize" method #f 97 20 97 30 ("new-queue" "found~self" "set!")}
        {Lisp-Entry "get-next" method #f 101 19 101 27 ()}
        {Lisp-Entry "save-start" method #f 105 19 105 29 ()}
        {Lisp-Entry "add-start" method #f 109 19 109 28 ("found")}
        {Lisp-Entry "add-found" method #f 113 11 113 20 ("found" "enqueue" "info")}
        {Lisp-Entry "get-found" method #f 117 11 117 20 ("found" "queue-list")}}
      {Lisp-Entry "StringTape" class #f 126 7 126 17 ("Tape")
        {Lisp-Entry "string" slot #f 129 8 129 14 ()}
        {Lisp-Entry "get-string" accessor #f 129 33 129 41 ()}
        {Lisp-Entry "limit" slot #f 130 8 130 13 ()}
        {Lisp-Entry "get-limit" accessor #f 130 33 130 41 ()}
        {Lisp-Entry "index" slot #f 131 8 131 13 ()}
        {Lisp-Entry "get-index" accessor #f 131 33 131 41 ()}
        {Lisp-Entry "start-index" slot #f 132 8 132 19 ()}
        {Lisp-Entry "get-start-index" accessor #f 132 36 132 44 ()}
        {Lisp-Entry "set-start-index" accessor #f 132 36 132 44 ()}
        {Lisp-Entry "initialize" method #f 135 20 135 30 ("start-index~self" "0" "index~self" "string-length" "limit~self" "string~self" "set!" "nextmethod" "s")}
        {Lisp-Entry "get-next" method #f 143 20 143 28 ("1" "+" "set!" "string" "element" "char->integer" "prog1" "limit" "index" "<" "if")}
        {Lisp-Entry "save-start" method #f 150 20 150 30 ("index" "start-index" "set!")}
        {Lisp-Entry "add-start" method #f 154 20 154 29 ("start-index" "list" "found")}}
      {Lisp-Entry "TextTape" class #f 163 7 163 15 ("Tape")
        {Lisp-Entry "paragraphs" slot #f 166 8 166 18 ()}
        {Lisp-Entry "get-paragraphs" accessor #f 166 35 166 43 ()}
        {Lisp-Entry "limit" slot #f 167 8 167 13 ()}
        {Lisp-Entry "get-limit" accessor #f 167 35 167 43 ()}
        {Lisp-Entry "line" slot #f 168 8 168 12 ()}
        {Lisp-Entry "get-line" accessor #f 168 35 168 43 ()}
        {Lisp-Entry "col" slot #f 169 8 169 11 ()}
        {Lisp-Entry "get-col" accessor #f 169 35 169 43 ()}
        {Lisp-Entry "scan" slot #f 170 8 170 12 ()}
        {Lisp-Entry "get-scan" accessor #f 170 35 170 43 ()}
        {Lisp-Entry "start-line" slot #f 171 8 171 18 ()}
        {Lisp-Entry "get-start-line" accessor #f 171 38 171 46 ()}
        {Lisp-Entry "set-start-line" accessor #f 171 38 171 46 ()}
        {Lisp-Entry "start-col" slot #f 172 8 172 17 ()}
        {Lisp-Entry "get-start-col" accessor #f 172 38 172 46 ()}
        {Lisp-Entry "set-start-col" accessor #f 172 38 172 46 ()}
        {Lisp-Entry "initialize" method #f 175 20 175 30 ("start-col~self" "0" "start-line~self" "line" "paragraphs" "element" "get-string" "scan~self" "col~self" "line~self" "limit~self" "paragraphs~self" "set!" "nextmethod" "c" "ln" "l" "p")}
        {Lisp-Entry "get-next" method #f 186 20 186 28 ("prog1" "char->integer" "paragraphs" "element" "get-string" "0" "1" "+" "set!" "begin" "limit" "line" "<" "scan" "cardinality" "col" "=" "if")}
        {Lisp-Entry "save-start" method #f 199 20 199 30 ("col" "start-col" "line" "start-line" "set!")}
        {Lisp-Entry "add-start" method #f 204 20 204 29 ("start-col" "start-line" "list" "found")}}
      {Lisp-Entry "Transitions" class #f 213 7 213 18 ("Object")
        {Lisp-Entry "add-transition" method #f 216 26 216 40 ("state" "i")}
        {Lisp-Entry "follow" method #f 217 26 217 32 ("i")}}
      {Lisp-Entry "NbAscii" definition #f 225 12 225 19 ("256")}
      {Lisp-Entry "EOFTransition" definition #f 226 12 226 25 ("NbAscii")}
      {Lisp-Entry "NotAsciiTransition" definition #f 227 12 227 30 ("1" "NbAscii" "+")}
      {Lisp-Entry "NbTransitions" definition #f 228 12 228 25 ("2" "NbAscii" "+")}
      {Lisp-Entry "VectoredTransitions" class #f 231 7 231 26 ("Transitions")
        {Lisp-Entry "vector" slot #f 234 8 234 14 ()}
        {Lisp-Entry "get-vector" accessor #f 234 22 234 30 ()}
        {Lisp-Entry "initialize" method #f 237 20 237 30 ("NbTransitions" "make-vector" "vector" "set!" "rest")}
        {Lisp-Entry "add-transition" method #f 241 20 241 34 ("NotAsciiTransition" "NbAscii" ">" "if" "vector" "set-element!" "state" "i")}
        {Lisp-Entry "follow" method #f 245 20 245 26 ("NotAsciiTransition" "NbAscii" ">" "if" "vector" "element" "i")}}
      {Lisp-Entry "State" class #f 254 7 254 12 ("Object")
        {Lisp-Entry "name" slot #f 257 8 257 12 ()}
        {Lisp-Entry "get-name" accessor #f 257 27 257 35 ()}
        {Lisp-Entry "transitions" slot #f 258 8 258 19 ()}
        {Lisp-Entry "get-transitions" accessor #f 258 27 258 35 ()}
        {Lisp-Entry "initialize" method #f 261 20 261 30 ("transitions" "name" "set!" "t" "n")}
        {Lisp-Entry "print" method #f 266 20 266 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "add-transition" method #f 272 18 272 32 ("transitions" "add-transition" "state" "i")}
        {Lisp-Entry "transition" method #f 276 26 276 36 ("EOFTransition" "action" "follow" "if" "get-next" "i" "let" "tape")}
        {Lisp-Entry "follow" method #f 284 18 284 24 ("transitions" "follow" "i")}
        {Lisp-Entry "action" method #f 288 26 288 32 ("tape")}}
      {Lisp-Entry "StartState" class #f 296 7 296 17 ("State")
        {Lisp-Entry "initialize" method #f 299 20 299 30 ("nextmethod" "t")}
        {Lisp-Entry "print" method #f 303 20 303 25 ("lambda" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "transition" method #f 309 20 309 30 ("nextmethod" "save-start" "tape")}}
      {Lisp-Entry "FoundState" class #f 319 7 319 17 ("State")
        {Lisp-Entry "found" slot #f 322 8 322 13 ()}
        {Lisp-Entry "get-found" accessor #f 322 26 322 34 ()}
        {Lisp-Entry "next-state" slot #f 323 8 323 18 ()}
        {Lisp-Entry "get-next-state" accessor #f 323 26 323 34 ()}
        {Lisp-Entry "initialize" method #f 326 20 326 30 ("nextmethod" "next-state" "found" "set!" "ns" "f")}
        {Lisp-Entry "print" method #f 332 20 332 25 ("lambda" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "transition" method #f 338 20 338 30 ("next-state" "action" "tape")}
        {Lisp-Entry "action" method #f 343 20 343 26 ("found" "add-start" "add-found" "tape")}}
      {Lisp-Entry "build-search-automata" definition #f 352 20 352 41 ("process-target" "target" "lambda" "for-each" "add-constituency-transitions" "2" "get-nb-vectored" "+" "set-nb-vectored" "Automata" "automata" "State" "skip" "VectoredTransitions" "StartState" "new" "start" "let*" "constituent-test" "ignore-case" "whole-words" "targets")}
      {Lisp-Entry "add-constituency-transitions" definition #f 365 13 365 41 ("EOFTransition" "is-constituent" "if" "add-transition" "NbAscii" "below" "0" "from" "i" "for" "loop" "constituent-test" "eof" "not-c" "c" "state")}
      {Lisp-Entry "process-target" definition #f 373 13 373 27 ("EOFTransition" "NbAscii" "below" "0" "from" "for" "loop" "FoundState" "else" "add-transition" "add-constituency-transitions" "1" "get-nb-vectored" "+" "set-nb-vectored" "VectoredTransitions" "State" "new" "not" "is-constituent" "when" "set!" "neq?" "and" "cond" "follow" "new-state" "downcase" "upcase" "lower-case?" "if" "iinv" "char->integer" "i" "c" "lambda" "iterate" "car" "string" "state" "let" "constituent-test" "ignore-case" "whole-words" "skip" "start" "automata" "target")}
      {Lisp-Entry "is-constituent" definition #f 406 13 406 27 ("integer->char" "i" "constituent-test")}
      {Lisp-Entry "automata-search" definition #f 415 20 415 35 ("get-found" "run" "tape" "automata")}}})
"_component"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "component" "_component.jazz"} 1290091767
    {Lisp-Entry "jazz.library.component" module #f 37 8 37 30 ("jazz")
      {Lisp-Entry "open-form" definition #f 50 20 50 29 ("multiple-selection?:" "choose-file" "read-form")}
      {Lisp-Entry "read-form" definition #f 54 20 54 29 ("set-origin" "set-data" "effective-imports" "imports-locator" "construct-form" "set!" "eof-object?" "read" "reader" "lambda" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "UTF" "'UTF" "char-encoding:" "path:" "list" "call-with-input-file" "cadr" "cdr" "Data" "new" "assert" "'form" "form" "'import" "assq" "import" "let" "info" "dialect" "bind" "error" "parse-data" "data" "'data" "car" "eq?" "pair?" "and" "if" "proc" "expr" "parse" "define" "file")}
      {Lisp-Entry "safe-read-form" definition #f 84 20 84 34 ("read-form" "wrap-exception" "exc" "error?" "datum-parsing-exception?" "or" "obj" "lambda" "call-with-catch" "file")}
      {Lisp-Entry "instantiate-file" definition #f 95 20 95 36 ("read-form" "instantiate" "apply" "rest" "file")}
      {Lisp-Entry "imports-locator" definition #f 99 20 99 35 ("error" "continuation-return" "when" "module-get" "object" "car" "pair?" "if" "module-name" "let" "import" "for-each" "return" "continuation-capture" "symbol" "lambda" "imports")}
      {Lisp-Entry "determine-unique-paster" definition #f 117 20 117 43 ("car" "parent" "=" "when" "get-parent" "map" "remove-duplicates" "parents" "let" "else" "first" "determine-paster" "1" "0" "length" "case" "components")}}})
"_detprof"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "detprof" "_detprof.jazz"} 1288732033
    {Lisp-Entry "jazz.detprof" module #f 37 8 37 20 ("jazz.detprof" "'jazz.detprof" "profiler-ignore-module" "detprof" "register-profiler" "setup-epsilon" "jazz")
      {Lisp-Entry "profiling-advice" definition #f 54 20 54 36 ("time" "if" "apply" "with-profiling" "call-original" "define" "rest" "procedure?" "when" "let" "set" "original" "locator" "field" "lambda" "time?" "time?:" "profile")}
      {Lisp-Entry "profile-advice" definition #f 69 20 69 34 ("apply" "profile-code" "rest" "lambda" "procedure?" "when" "let" "set" "original" "locator" "field")}
      {Lisp-Entry "time-spent-in-children" define #f 83 8 83 30 ("0" "make-parameter")}
      {Lisp-Entry "profile-code" definition #f 87 20 87 32 ("+" "outer-epsilon" "profile-register-call" "inner-epsilon" "total-elapsed-time" "inner-start-time" "0" "time-spent-in-children" "parameterize" "result" "profiler-performance-counter" "outer-start-time" "profile-profiler" "1" "profile-depth" "-" "identify-call" "cons" "if" "cont" "lambda" "continuation-capture" "profile-stack" "define" "jazz.procedure-locat" "jazz.locat->file/line/col" "list" "and" "original-call" "active-profile" "profile" "let" "proc" "original")}
      {Lisp-Entry "outer-epsilon" define #f 116 8 116 21 ()}
      {Lisp-Entry "inner-epsilon" define #f 119 8 119 21 ()}
      {Lisp-Entry "setup-epsilon" define #f 123 9 123 22 ("inner-epsilon" "outer-epsilon" "set!" "0" "parameterize" "3" "2" "test-proc" "apply" "inner-start-time" "estimate-inner-epsilon" "100" "-" "quotient" "99" "unroll" "1" "+" "time-spent-in-children" "profiler-performance-counter" "outer-start-time" "let" "estimate-outer-epsilon" "define")}
      {Lisp-Entry "test-proc" define #f 145 9 145 18 ("rest")}
      {Lisp-Entry "profile->jml" definition #f 158 20 158 32 ("cddr" "key:" "table->list" ">" "sort" "'duration" "'count" "'name" "list" "properties:" "'profile" "JML-Element" "new" "duration" "count" "name" "bind" "lambda" "map" "profile")}
      {Lisp-Entry "detprof" definition #f 170 19 170 26 ("1" "detprof" "'detprof" "make-profiler")}}})
"_exemplar"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "exemplar" "_exemplar.jazz"} 1288732033
    {Lisp-Entry "jazz.library.exemplar" module #f 37 8 37 29 ("jazz")
      {Lisp-Entry "exemplar=?" specialize #f 44 22 44 32 ()}
      {Lisp-Entry "=" specialize #f 44 34 44 35 ("get-base" "eq?" "node=?" "and" "e2" "e1")}
      {Lisp-Entry "Exemplar" class #f 54 7 54 15 ("Node")
        {Lisp-Entry "domain" slot #f 57 18 57 24 ()}
        {Lisp-Entry "base" slot #f 58 18 58 22 ()}
        {Lisp-Entry "ascendant" slot #f 59 18 59 27 ()}
        {Lisp-Entry "inited?" slot #f 60 18 60 25 ()}
        {Lisp-Entry "get-inited?" accessor #f 60 40 60 48 ()}
        {Lisp-Entry "set-inited?" accessor #f 60 40 60 48 ()}
        {Lisp-Entry "persistent?" slot #f 61 18 61 29 ()}
        {Lisp-Entry "get-persistent?" accessor #f 61 40 61 48 ()}
        {Lisp-Entry "set-persistent?" accessor #f 61 40 61 48 ()}
        {Lisp-Entry "initialize" method #f 64 20 64 30 ("install" "when" "persistent?~self" "inited?~self" "ascendant~self" "base~self" "domain~self" "set!" "nextmethod" "apply" "others" "base" "domain" "bind-keywords" "rest")}
        {Lisp-Entry "copy-object" method #f 76 20 76 31 ("base" "set-base-value" "domain" "set-domain-value" "nextmethod" "exemplar" "let" "deep?")}
        {Lisp-Entry "compare-object" method #f 83 20 83 34 (":not-equal" "else" "get-base" "base" ":equal" "nextmethod" "=" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-exemplar" method #f 93 11 93 24 ("owned-properties" "base" ",base" "',base" "base:" "name" ",name" "',name" "name:" ",class-name" "new" "class-name")}
        {Lisp-Entry "print" method #f 100 20 100 25 ("owned-properties" "base" "base:" "name" "name:" "list" "self" "class-of" "category-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "install" method #f 114 11 114 18 ("init")}
        {Lisp-Entry "init" method #f 118 11 118 15 ("domain" "locate" "set!" "base" "not" "if" "inited?" "node-properties" "ascendant" "get-value" "set-value" "owned" "memq?" "unless" "property" "lambda" "for-each" "setup-inherited" "define")}
        {Lisp-Entry "inherits?" method #f 133 18 133 27 ("continuation-return" "get-name" "when" "ascendant" "for-each-ascendant" "return" "lambda" "continuation-capture" "name" "eq?" "if" "target")}
        {Lisp-Entry "has-ascendant?" method #f 145 18 145 32 ("self" "domain" "has-ascendant?" "base")}
        {Lisp-Entry "for-each-ascendant" method #f 149 18 149 36 ("for-each-ascendant" "ascendant" "when" "proc")}
        {Lisp-Entry "extend" method #f 155 18 155 24 ("install" "else" "set-inited?" "owned" "copy" "set-owned" "base" "set-base-value" "name" "not" "cond" "set-domain-value" "self" "class-of" "new" "let" "node-properties" "get-value" "set-value" "property" "lambda" "for-each" "exemplar" "copy-properties" "define" "domain" "domain:")}
        {Lisp-Entry "update" method #f 179 21 179 27 ("update-descendants" "named?" "when" "init" "reset")}
        {Lisp-Entry "update-descendants" method #f 186 11 186 29 ("self" "update-descendants" "domain" "when")}
        {Lisp-Entry "modify-from" method #f 196 18 196 29 ("update" "get-persistent?" "persistent?" "get-owned" "copy" "owned" "node-properties" "get-value" "set-value" "property" "lambda" "for-each" "get-base" "base" "get-name" "name" "set!" "self" "eq?" "unless" "from")}
        {Lisp-Entry "reset" method #f 213 11 213 16 ("set!" "node-properties" "for-each" "inited?" "when" "set-value" "owned" "memq?" "unless" "property" "reset-property" "define")}
        {Lisp-Entry "set-domain-value" method #f 229 25 229 41 ("domain" "set!" "d")}
        {Lisp-Entry "get-domain" method #f 233 18 233 28 ("domain")}
        {Lisp-Entry "set-domain" method #f 237 18 237 28 ("install" "domain" "set!" "d")}
        {Lisp-Entry "register" method #f 242 18 242 26 ("self" "domain" "add")}
        {Lisp-Entry "set-base-value" method #f 251 25 251 39 ("base" "set!" "b")}
        {Lisp-Entry "get-base" method #f 255 18 255 26 ("base")}
        {Lisp-Entry "set-base" method #f 259 18 259 26 ("update" "base" "set!" "b")}}
      {Lisp-Entry "Exemplar-Domain" class #f 269 20 269 35 ("0" "Axis" "new" "initialize" "Object")
        {Lisp-Entry "content" slot #f 272 18 272 25 ()}
        {Lisp-Entry "get-content" method #f 280 18 280 29 ("content")}
        {Lisp-Entry "set-content" method #f 284 18 284 29 ("Axis" "coerce" "content" "set!" "value")}
        {Lisp-Entry "empty-content" method #f 288 18 288 31 ("named?" "not" "and" "exemplar" "lambda" "collect-if" "content" "set!" "remove-named?" "remove-named?:")}
        {Lisp-Entry "add" method #f 299 18 299 21 ("content" "axis-add" "exemplar")}
        {Lisp-Entry "reference" method #f 303 18 303 27 ("locate" "content" "element" "integer?" "if" "rank/name")}
        {Lisp-Entry "locate" method #f 309 18 309 24 ("error" "when" "get-name" "key:" "content" "find-in" "or" "error?" "error?:" "name")}
        {Lisp-Entry "similar" method #f 316 18 316 25 ("exemplar=?" "test:" "content" "find-in" "self" "set-domain" "get-domain" "not" "when" "exemplar")}
        {Lisp-Entry "get-rank" method #f 323 18 323 26 ("content" "find" "exemplar")}
        {Lisp-Entry "has-ascendant?" method #f 332 18 332 32 ("continuation-return" "eq?" "when" "ascendant" "for-each-ascendant" "return" "lambda" "continuation-capture" "base" "exemplar")}
        {Lisp-Entry "update-descendants" method #f 347 21 347 39 ("content" "update" "has-ascendant?" "when" "exemplar" "lambda" "for-each" "base")}
        {Lisp-Entry "collect-persistent" method #f 359 18 359 36 ("content" "get-persistent?" "collect-if")}}}})
"_library"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "_library.jazz"} 1290090697
    {Lisp-Entry "jazz.library" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "construct-environment" definition #f 53 20 53 41 ("setup-context" "Environment" "new" "environment" "let" "locator" "data")}
      {Lisp-Entry "*forms*" define #f 64 8 64 15 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-form" definition #f 68 20 68 33 ("*forms*" "table-set!" "form" "name")}
      {Lisp-Entry "unregister-form" definition #f 71 20 71 35 ("*forms*" "table-clear" "name")}
      {Lisp-Entry "registered-form" definition #f 74 20 74 35 ("*forms*" "table-ref" "name")}
      {Lisp-Entry "load-form" definition #f 78 20 78 29 ("error" "registered-form" "or" "name")}
      {Lisp-Entry "resolve-form" definition #f 83 20 83 32 ("child" "null?" "load-form" "form" "let" "split-symbol" "path" "name" "bind" "Form" "is?" "if" "name/form")}
      {Lisp-Entry "*traits*" define #f 98 8 98 16 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-trait" definition #f 102 20 102 34 ("*traits*" "table-set!" "trait" "name")}
      {Lisp-Entry "unregister-trait" definition #f 105 20 105 36 ("*traits*" "table-clear" "name")}
      {Lisp-Entry "registered-trait" definition #f 108 20 108 36 ("*traits*" "table-ref" "name")}
      {Lisp-Entry "load-trait" definition #f 112 20 112 30 ("error" "registered-trait" "or" "name")}
      {Lisp-Entry "resolve-trait" definition #f 117 20 117 33 ("error" "instantiate" "component" "not-null?" "assert" "registered-form" "form" "child" "null?" "registered-trait" "trait" "let" "split-symbol" "path" "name" "bind" "Trait" "is?" "if" "name/trait")}
      {Lisp-Entry "32-bit-integer->version" definition #f 140 20 140 43 ("Version" "new" "revision" "100" "1000" "modulo" "minor" "100000" "quotient" "major" "let" "version")}
      {Lisp-Entry "find-process" definition #f 152 20 152 32 ("get-process" "'get-process" "jazz.system" "'jazz.system" "module-ref")}
      {Lisp-Entry "find-application" definition #f 156 20 156 36 ("get-application" "'get-application" "jazz.system" "'jazz.system" "module-ref")}
      {Lisp-Entry "resource?" definition #f 165 27 165 36 ("Resource" "is?" "object")}
      {Lisp-Entry "with-execution-context" definition #f 174 33 174 55 ("Execution-Context" "new" "context" "with" "reporter" "reporter:" "details" "details:" "title" "title:" "proc")}
      {Lisp-Entry "with-execution-node" definition #f 182 33 182 52 ("Execution-Node" "new" "node" "with" "reporter" "reporter:" "details" "details:" "title" "title:" "proc")}
      {Lisp-Entry "get-execution-context" definition #f 190 33 190 54 ("get-active-context" "current-thread" "thread" "let" "get-execution-context" "'get-execution-context" "unimplemented")}
      {Lisp-Entry "get-execution-stack" definition #f 197 33 197 52 ("get-previous-node" "Execution-Context" "is-not?" "and" "cons" "set!" "while" "lst" "get-active-node" "node" "current-thread" "thread" "let*" "get-execution-stack" "'get-execution-stack" "unimplemented")}
      {Lisp-Entry "Execution-Node" class #f 209 7 209 21 ("Object")
        {Lisp-Entry "title" slot #f 212 8 212 13 ()}
        {Lisp-Entry "details" slot #f 213 8 213 15 ()}
        {Lisp-Entry "reporter" slot #f 214 8 214 16 ()}
        {Lisp-Entry "previous-node" slot #f 215 8 215 21 ()}
        {Lisp-Entry "initialize" definition #f 218 15 218 25 ("destroy-mandatory" "self" "set-active-node" "get-active-node" "previous-node~self" "current-thread" "thread" "let" "reporter~self" "details~self" "title~self" "set!" "nextmethod" "reporter" "reporter:" "details" "details:" "title" "title:")}
        {Lisp-Entry "destroy" definition #f 229 15 229 22 ("nextmethod" "previous-node" "set-active-node" "current-thread" "thread" "let")}
        {Lisp-Entry "get-title" definition #f 235 22 235 31 ("title")}
        {Lisp-Entry "get-details" definition #f 239 22 239 33 ("details")}
        {Lisp-Entry "get-reporter" definition #f 243 22 243 34 ("reporter")}}
      {Lisp-Entry "Execution-Context" class #f 247 7 247 24 ("initialize" "Execution-Node")
        {Lisp-Entry "previous-context" slot #f 250 8 250 24 ()}
        {Lisp-Entry "continuable?" slot #f 251 8 251 20 ()}
        {Lisp-Entry "auto-continue?" slot #f 252 8 252 22 ()}
        {Lisp-Entry "initialize" definition #f 255 15 255 25 ("destroy-mandatory" "self" "set-active-context" "get-active-context" "previous-context~self" "set!" "current-thread" "thread" "let" "nextmethod" "apply" "rest")}
        {Lisp-Entry "destroy" definition #f 263 15 263 22 ("nextmethod" "previous-context" "set-active-context" "current-thread" "thread" "let")}
        {Lisp-Entry "get-continuable?" definition #f 269 22 269 38 ("continuable?")}
        {Lisp-Entry "set-continuable?" definition #f 273 22 273 38 ("continuable?" "set!" "value")}
        {Lisp-Entry "get-auto-continue?" definition #f 277 22 277 40 ("auto-continue?")}
        {Lisp-Entry "set-auto-continue?" definition #f 281 22 281 40 ("auto-continue?" "set!" "value")}}
      {Lisp-Entry "with-continue" definition #f 291 20 291 33 ("Continue" "catch" "set-continuable?" "begin" "unwind-protect" "get-continuable?" "preserved" "error" "not" "if" "get-execution-context" "context" "let" "with-continue" "'with-continue" "unimplemented" "proc")}
      {Lisp-Entry "continuable?" definition #f 307 20 307 32 ("get-continuable?" "and" "get-execution-context" "context" "let" "continuable?" "'continuable?" "unimplemented" "exception")}
      {Lisp-Entry "continue-exception" definition #f 315 20 315 38 ("Continue" "new" "throw" "continue" "'continue" "unimplemented" "exception")}
      {Lisp-Entry "Restartable?" definition #f 327 19 327 31 ()}
      {Lisp-Entry "with-restart" definition #f 332 20 332 32 ("when" "return" "Restart" "catch" "while" "set!" "begin" "unwind-protect" "Restartable?" "preserved" "let" "with-restart" "'with-restart" "unimplemented" "cleanup" "proc")}
      {Lisp-Entry "restartable?" definition #f 349 20 349 32 ("Restartable?" "exception")}
      {Lisp-Entry "restart" definition #f 354 20 354 27 ("Restart" "new" "throw" "restart" "'restart" "unimplemented" "exception")}
      {Lisp-Entry "different-times?" definition #f 365 20 365 36 ("time->seconds" "-" "abs" ">" "2" "tolerance" "tolerance:" "time2" "time1")}
      {Lisp-Entry "different-file-content?" definition #f 370 20 370 43 ("else" "eqv?" "eof-object?" "cond" "u2" "read-u8" "u1" "iterate" "let" "get-size" "/=" "or" "input2" "input1" "lambda" "parse" "call-with-input-file" "ci=?" "test:" "Text-Extensions" "get-extension" "member?" "and" "if" "char-encoding-errors:" "load-lines" "equal?" "not" "different-text-file-content?" "define" "file2" "file1")}
      {Lisp-Entry "different-file-content-no-whitespace?" definition #f 397 20 397 57 ("read-content-string" "wi=" "not" "input2" "input1" "lambda" "char-encoding-errors:" "UTF" "'UTF" "char-encoding:" "parse" "path:" "list" "call-with-input-file" "file2" "file1")}
      {Lisp-Entry "designing?" definition #f 412 19 412 29 ("make-parameter")}
      {Lisp-Entry "Class-Descriptors" definition #f 421 12 421 29 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-descriptor" definition #f 425 33 425 47 ("table-set!" "set-name" "instantiate" "Form" "is?" "if" "descriptor" "when" "get-class-descriptor" "form" "Class-Descriptors" "table-ref" "or" "category-identifier" "name" "let" "model")}
      {Lisp-Entry "get-properties-descriptor" definition #f 436 33 436 58 ("properties" "'properties" "find-component" "when" "get-descriptor" "class-descriptor" "let" "model")}
      {Lisp-Entry "get-property-descriptor" definition #f 442 33 442 56 ("find-component" "when" "get-properties-descriptor" "properties-descriptor" "let" "name" "model")}
      {Lisp-Entry "display-tabulated" definition #f 453 33 453 50 ("print-to" "newline" "->string" "output" "column" "object" "row" "lambda" "for-each" "add-columns" "left" "'left" "alignment:" "border-after:" "Aligned-Column" "Display-Column" "=" "if" "collect" "0" "from" "n" "in" "ignore" "for" "loop" "columns" "1" "length" "-" "last" "car" "sample" "Columns-Display" "new" "display" "let*" "display-tabulated" "'display-tabulated" "unimplemented" "printer" "data")}}})
"_listener"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "listener" "_listener.jazz"} 1288732033
    {Lisp-Entry "jazz.library.listener" module #f 37 8 37 29 ("jazz")
      {Lisp-Entry "add-listener" definition #f 43 20 43 32 ("cons" "lst" "listener")}
      {Lisp-Entry "remove-listener" definition #f 47 20 47 35 ("listener-target?" "test:" "remove!" "Handler" "is?" "if" "lst" "listener")}
      {Lisp-Entry "listener?" definition #f 53 20 53 29 ("listener-target?" "test:" "member?" "lst" "object")}
      {Lisp-Entry "listener-target?" definition #f 57 13 57 29 ("get-target" "eq?" "listener" "object")}}})
"_node"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "node" "_node.jazz"} 1288732033
    {Lisp-Entry "jazz.library.node" module #f 37 8 37 25 ("jazz")
      {Lisp-Entry "Node" class #f 45 7 45 11 ("Object")
        {Lisp-Entry "name" slot #f 48 18 48 22 ()}
        {Lisp-Entry "get-name" accessor #f 48 34 48 42 ()}
        {Lisp-Entry "set-name" accessor #f 48 34 48 42 ()}
        {Lisp-Entry "owned" slot #f 49 18 49 23 ()}
        {Lisp-Entry "get-owned" accessor #f 49 34 49 42 ()}
        {Lisp-Entry "set-owned" accessor #f 49 34 49 42 ()}
        {Lisp-Entry "node-properties" method #f 52 29 52 44 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("set-property" "for-each-property" "owned~self" "name~self" "set!" "nextmethod" "others" "name" "bind-keywords" "rest")}
        {Lisp-Entry "copy-object" method #f 64 20 64 31 ("owned" "copy" "set-owned" "node-properties" "get-value" "set-value" "property" "lambda" "for-each" "name" "set-name" "self" "class-of" "new" "element" "let" "deep?")}
        {Lisp-Entry "compare-object" method #f 74 20 74 34 (":not-equal" "else" ":equal" "node-properties" "get-value" "property" "lambda" "every?" "get-name" "name" "=" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 86 20 86 25 ("owned-properties" "name" "name:" "list" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "owned-properties" method #f 94 18 94 34 ("get-output" "node-properties" "get-value" "put" "owned" "memq?" "when" "property" "lambda" "for-each" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "named?" method #f 109 18 109 24 ("name")}
        {Lisp-Entry "supports?" method #f 118 18 118 27 ("node-properties" "memq?" "property")}
        {Lisp-Entry "set-property" method #f 122 18 122 30 ("cons" "set!" "owned" "memq?" "unless" "set-value" "value" "property")}
        {Lisp-Entry "get-properties" method #f 128 18 128 32 ("node-properties")}
        {Lisp-Entry "get-value" method #f 137 26 137 35 ("error" "property")}
        {Lisp-Entry "set-value" method #f 141 26 141 35 ("error" "value" "property")}}
      {Lisp-Entry "node=?" specialize #f 145 22 145 28 ()}
      {Lisp-Entry "=" specialize #f 145 30 145 31 ("node-properties" "get-value" "equal?" "property" "lambda" "every?" "get-name" "eq?" "and" "n2" "n1")}}})
"_prototype"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "prototype" "_prototype.jazz"} 1288732033
    {Lisp-Entry "jazz.library.prototype" module #f 37 8 37 30 ("jazz")
      {Lisp-Entry "Prototype-Class" class #f 48 7 48 22 ("eq?" "test:" "make-table" "initialize" "Component" ":class")
        {Lisp-Entry "properties" slot #f 51 8 51 18 ()}
        {Lisp-Entry "get-property" method #f 54 11 54 23 ("properties" "table-ref" "field-name")}
        {Lisp-Entry "set-property" method #f 57 11 57 23 ("properties" "table-set!" "property" "field-name")}
        {Lisp-Entry "mop-category-field" method #f 61 20 61 38 ("set-property" "set" "value" "get" "prototype" "lambda" "new-property" "property" "let" "get-property" "nextmethod" "or" "field-name")}
        {Lisp-Entry "mop-field-value" method #f 73 20 73 35 ("property")}
        {Lisp-Entry "mop-instance-slots" method #f 77 20 77 38 ("get-table" "table-keys" "get-property" "map" "object")}}
      {Lisp-Entry "Prototype" class #f 86 7 86 16 ("eq?" "test:" "make-table" "initialize" "set-facets" "Component" "Prototype-Class")
        {Lisp-Entry "facets" property #f 89 12 89 18 ()}
        {Lisp-Entry "get-facets" accessor #f 89 26 89 34 ()}
        {Lisp-Entry "table" slot #f 92 8 92 13 ()}
        {Lisp-Entry "get-table" accessor #f 92 55 92 63 ()}
        {Lisp-Entry "print" method #f 95 20 95 25 ("table" "table->list" "alist->plist" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "set-facets" method #f 101 11 101 21 ("listify" "for-each" "facets~self" "set!" "set" "get-table" "iterate-table" "creator" "locate" "symbol?" "if" "let" "facet" "clone-facet" "define" "facets")}
        {Lisp-Entry "get" method #f 113 18 113 21 ("table" "table-ref" "name")}
        {Lisp-Entry "set" method #f 117 18 117 21 ("table" "table-set!" "value" "name")}}}})
"_runtime"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "runtime" "_runtime.jazz"} 1288732033
    {Lisp-Entry "jazz.runtime" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "find-category-source" definition #f 48 20 48 40 ("find-unit-source" "butlast" "compose-name" "apply" "unit-name" "split-identifier" "path" "category-identifier" "name" "let" "category")}
      {Lisp-Entry "find-unit-source" definition #f 56 20 56 36 ("resource-pathname" "tokenise-filename" "File" "new" "anchorize" "not" "if" "find-unit-src" "src" "let" "unit-name")}
      {Lisp-Entry "split-locator" definition #f 68 20 68 33 ("car" "cons" "cdr" "values" "find-unit-source" "compose-name" "apply" "unit-name" "not-null?" "if" "name" "split-identifier" "reverse" "scan" "iterate" "let" "locator")}
      {Lisp-Entry "locator->declaration" definition #f 79 20 79 40 ("Module-Declaration" "is?" "outline-unit" "split-locator" "declaration-path" "unit-name" "receive" "cdr" "when" "car" "find-declaration" "subdeclaration" "let" "null?" "if" "path" "declaration" "locate" "define" "locator")}
      {Lisp-Entry "repository-units" definition #f 99 20 99 36 ("symbol->string" "key:" "table-keys" "string<?" "sort" "package-products" "clause" "symbol?" "if" "table-set!" "else" "package-name" "duplicate" "'duplicate" "debug" "cond" "table-ref" "actual-package" "phase" "declaration" "unit-name" "for-each-subunit" "updated-name" "process-updated-name" "define" "updated-name/cond" "updated-names" "when" "cdr" "update" "'update" "assq" "pair" "product" "for-each" "package" "lambda" "iterate-packages" "eq?" "test:" "make-table" "table" "let" "core.unit.builder" "'core.unit.builder" "load-unit" "repository")}
      {Lisp-Entry "iterate-packages" definition #f 127 20 127 36 ("repository-packages" "for-each" "proc" "repository")}
      {Lisp-Entry "iterate-units" definition #f 131 20 131 33 ("repository-units" "increase!" "when" "unit-name" "repository-binary?" "unless" "repository" "lambda" "for-each" "get-repositories" "or" "0" "count" "let" "feedback" "feedback:" "repositories" "repositories:" "proc")}
      {Lisp-Entry "outline-all" definition #f 145 20 145 31 ("outline-unit" "iterate-units" "feedback" "feedback:")}
      {Lisp-Entry "walk-all" definition #f 149 20 149 28 ("walk-unit" "iterate-units" "feedback" "feedback:")}
      {Lisp-Entry "expand-all" definition #f 153 20 153 30 ("expand-unit" "iterate-units" "feedback" "feedback:")}
      {Lisp-Entry "load-all" definition #f 157 20 157 28 ("load-unit" "iterate-units" "feedback" "feedback:")}
      {Lisp-Entry "load-statistics" definition #f 166 20 166 35 ("interpreted-load-counter" "interpreted:" "object-load-counter" "object:" "image-load-counter" "image:" "list")}}})
"_template"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "template" "_template.jazz"} 1288732033
    {Lisp-Entry "jazz.library.template" module #f 37 8 37 29 ("jazz")
      {Lisp-Entry "name-delimiter-start" definition #f 44 12 44 32 ()}
      {Lisp-Entry "name-delimiter-end" definition #f 47 12 47 30 ()}
      {Lisp-Entry "content-delimiter-start" definition #f 50 12 50 35 ()}
      {Lisp-Entry "content-delimiter-end" definition #f 53 12 53 33 ()}
      {Lisp-Entry "copy-template" definition #f 57 20 57 33 ("file?" "copy-pathname" "recursive?:" "directories?:" "files?:" "full?:" "new-directory" "directory" "new-file" "file" "case" "car" "kind" "path" "iterate-directory" "create-directories" "touch-files?:" "root?" "copy-directory" "get-eol-encoding" "eol-encoding:" "parse" "path:" "list" "call-with-output-file" "ci=?" "test:" "member?" "exists?" "unless" "copy-file" "get-name" "new-brother" "pathname" "expand-pathname" "get-output-string" "format" "continuation-return" "list?" "if" "value" "printer:" "expand" "open-output-string" "output" "return" "lambda" "continuation-capture" "name" "expand-name" "define" "content-delimiter-end" "content-delimiter-start" "content-expander" "name-delimiter-end" "delimiter-end:" "name-delimiter-start" "delimiter-start:" "Template-Expander" "new" "name-expander" "let" "non-expanded-leaves" "non-expanded-leaves:" "non-expanded-nodes" "non-expanded-nodes:" "associations" "destination" "template")}}})
"_tie"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "tie" "_tie.jazz"} 1288732033
    {Lisp-Entry "jazz.tie" module #f 37 8 37 16 ("jazz")}})
"autoload"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "autoload.jazz"} 1290089286
    {Lisp-Entry "jazz.library.autoload" module #f 37 18 37 39 ("jazz")}})
"geometry"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "geometry.jazz"} 1288732033
    {Lisp-Entry "jazz.geometry" module #f 37 8 37 21 ("jazz")
      {Lisp-Entry "size-rect" definition #f 50 20 50 29 ("get-height" "get-width" "0" "Rect" "new" "size")}
      {Lisp-Entry "position/size->rect" definition #f 54 20 54 39 ("get-v" "get-h" "h/v/size->rect" "size" "position")}
      {Lisp-Entry "h/v/size->rect" definition #f 58 20 58 34 ("get-height" "get-width" "+" "Rect" "new" "size" "v" "h")}
      {Lisp-Entry "h/v/width/height" definition #f 62 20 62 36 ("+" "Rect" "new" "height" "width" "v" "h")}
      {Lisp-Entry "corners->rect" definition #f 66 20 66 33 ("get-v" "get-h" "Rect" "new" "bottom-right" "top-left")}
      {Lisp-Entry "normalize-rect" definition #f 70 20 70 34 ("<=" "if" "Rect" "new" "get-bottom" "b" "get-right" "r" "get-top" "t" "get-left" "l" "let" "rect")}
      {Lisp-Entry "rect->rect$fl$" definition #f 82 20 82 34 ("get-bottom" "get-right" "get-top" "get-left" "Rect$fl$" "new" "rect")}
      {Lisp-Entry "rect-position" definition #f 90 20 90 33 ("get-top" "get-left" "Point" "new" "rect")}
      {Lisp-Entry "rect-end-position" definition #f 93 20 93 37 ("get-bottom" "get-right" "Point" "new" "rect")}
      {Lisp-Entry "rect-size" definition #f 96 20 96 29 ("rect-height" "rect-width" "Dimension" "new" "rect")}
      {Lisp-Entry "rect-width" definition #f 102 20 102 30 ("get-left" "get-right" "-" "rect")}
      {Lisp-Entry "rect-height" definition #f 106 20 106 31 ("get-top" "get-bottom" "-" "rect")}
      {Lisp-Entry "offset-rect" definition #f 110 20 110 31 ("get-bottom" "get-right" "get-top" "get-left" "+" "Rect" "new" "v" "h" "rect")}
      {Lisp-Entry "offset-rect!" definition #f 118 20 118 32 ("get-bottom" "set-bottom" "get-right" "set-right" "get-top" "set-top" "get-left" "+" "set-left" "v" "h" "rect")}
      {Lisp-Entry "inflate-rect" definition #f 125 20 125 32 ("get-bottom" "get-right" "+" "get-top" "get-left" "-" "Rect" "new" "h" "w" "rect")}
      {Lisp-Entry "inflate-rect" specialize #f 133 13 133 25 ("get-bottom" "get-right" "+" "get-top" "get-left" "-" "Rect" "new" "h" "w" "rect")}
      {Lisp-Entry "inflate-rect" specialize #f 141 13 141 25 ("get-bottom" "get-right" "+" "get-top" "get-left" "-" "Rect$fl$" "new" "h" "w" "rect")}
      {Lisp-Entry "expand-rect" definition #f 149 20 149 31 ("get-bottom" "get-right" "get-top" "get-left" "+" "Rect" "new" "b" "r" "t" "l" "rect")}
      {Lisp-Entry "base-rect" definition #f 157 20 157 29 ("get-top" "get-left" "-" "offset-rect" "rect")}
      {Lisp-Entry "fit-rects" definition #f 161 20 161 29 (">" "if" "both" "height" "width" "case" "rh" "/" "rw" "sh" "sw" "rect-height" "dh" "rect-width" "dw" "let*" "mode" "dst" "src")}
      {Lisp-Entry "fit-within" definition #f 174 20 174 30 ("values" "get-v" "get-h" "between" "new-position" "max-position" "Point" "min-position" "new" "new-size" "get-height" "height" "-" "min" "get-width" "max" "width" "rect-position" "position" "rect-size" "size" "let*" "padding" "padding:" "0" "Dimension" "minimum-size" "minimum-size:" "rect" "outer")}
      {Lisp-Entry "rect-union" definition #f 186 20 186 30 ("get-bottom" "get-right" ">" "get-top" "get-left" "<" "if" "Rect" "new" "y" "x")}
      {Lisp-Entry "rect-intersection" definition #f 194 20 194 37 ("0" "get-bottom" "get-right" "<" "get-top" "get-left" ">" "Rect" "new" "rect-intersect?" "if" "y" "x")}
      {Lisp-Entry "rect-intersect?" definition #f 204 20 204 35 (">" "get-bottom" "get-top" "get-right" "get-left" "<" "and" "y" "x")}
      {Lisp-Entry "rects-intersect?" definition #f 211 20 211 36 ("get-bottom" "get-right" ">" "get-height" "get-v" "get-top" "get-width" "get-h" "+" "get-left" "<" "and" "size" "position" "rect")}
      {Lisp-Entry "in-rect?" definition #f 218 20 218 28 ("get-bottom" "get-right" "<" "get-top" "get-v" "get-left" "get-h" ">=" "and" "rect" "pt")}
      {Lisp-Entry "rect-in-rect?" definition #f 225 20 225 33 ("get-bottom" "get-right" "<=" "get-top" "get-left" ">=" "and" "rect" "r")}
      {Lisp-Entry "in-size?" definition #f 232 20 232 28 ("get-height" "get-width" "<" "get-v" "0" "get-h" ">=" "and" "size" "pt")}
      {Lisp-Entry "add-rects" definition #f 239 20 239 29 ("get-bottom" "get-right" "get-top" "get-left" "+" "Rect" "new" "r2" "r1")}
      {Lisp-Entry "subtract-rects" definition #f 247 20 247 34 ("get-bottom" "get-right" "get-top" "get-left" "-" "Rect" "new" "r2" "r1")}
      {Lisp-Entry "inverse-rect" definition #f 255 20 255 32 ("get-right" "get-bottom" "get-left" "get-top" "Rect" "new" "rect")}
      {Lisp-Entry "positive-rect?" definition #f 263 20 263 34 ("get-right" "get-bottom" "get-left" "0" "get-top" ">=" "and" "rect")}
      {Lisp-Entry "center" definition #f 275 20 275 26 ("'center" "center" "justify" "Dimension" "is?" "if" "outer" "inner")}
      {Lisp-Entry "justify" definition #f 281 20 281 27 ("class-of" "category-identifier" "number?" "second" "get-height" "first" "get-width" "Point" "new" "Dimension" "is?" "and" "cond" "error" "else" "tail" "2" "quotient" "center" "head" "case" "+" "-" "0" ">=" "integer?" "if" "j" "o" "i" "just" "define" "justification" "outer" "inner")}
      {Lisp-Entry "justify-lazy" definition #f 305 20 305 32 ("or" "Point" "new" "second" "first" "let" "pair?" "if" "justify" "non-lazy" "else" "positive?" "number?" "and" "0" "head" "'head" "eq?" "cond" "j" "direct" "define" "justification" "outer" "inner")}
      {Lisp-Entry "cycle-naturals" definition #f 331 20 331 34 ("get-output" "+" "put" "by" "m" "do" "below" "0" "from" "n" "for" "loop" "quotient" "inc" "*" "cardinality" "List-Factory" "new" "fact" "let*" "subcycle" "cycle")}
      {Lisp-Entry "fit" definition #f 341 20 341 23 ("else" "-" ">=" "and" "+" "<=" "0" ">" "cond" "padding" "max" "size" "alternate" "pos")}
      {Lisp-Entry "fit-point" definition #f 350 20 350 29 ("get-height" "get-v" "get-width" "and" "get-h" "fit" "Point" "new" "padding" "max" "size" "alternate" "pos")}
      {Lisp-Entry "scalar-product" definition #f 356 20 356 34 ("get-v" "get-h" "*" "+" "b" "a")}
      {Lisp-Entry "line-distance" definition #f 360 20 360 33 ("Point" "new" "scalar-product" "/" "abs" "0" "=" "if" "get-v" "get-h" "-" "sqr" "+" "sqrt" "divider" "let" "end" "start" "point")}
      {Lisp-Entry "resize-parts" definition #f 381 21 381 33 ("naturals" "1" "<=" "between?" "or" "n" "lambda" "map" "end2" "-1" "end" "start" "parity" "modulo" "+" "extra" "-" "quotient" "base" "0" "<" "if" "offset" "let*" "count" "delta" "size")}
      {Lisp-Entry "scale" definition #f 394 20 394 25 ("Number" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "Rect" "get-height" "height" "get-width" "width" "Dimension" "*" "fxround" "new" "get-v" "v" "get-h" "h" "Point" "typecase" "exact->inexact" "let" "sc" "shape")}
      {Lisp-Entry "get-area" definition #f 423 20 423 28 ("get-height" "get-width" "*" "size")}}})
"install"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "install.scm"} 1289938583
    {Lisp-Entry "jazz.library.install" unit #f 37 6 37 26 ()
      {Lisp-Entry "Reference" define ("literal-walker") 40 28 40 37 ("jazz.library.literals.walk-reference")}
      {Lisp-Entry "Box" define ("literal") 43 21 43 24 ("jazz.library.literals.construct-box")}
      {Lisp-Entry "Directory-Group" define ("literal") 44 21 44 36 ("jazz.library.literals.construct-directory-group")}
      {Lisp-Entry "Locales" define ("literal") 45 21 45 28 ("jazz.library.literals.construct-locales")}
      {Lisp-Entry "Image-Resource" define ("literal") 46 21 46 35 ("jazz.library.literals.construct-image-resource")}
      {Lisp-Entry "Icon-Resource" define ("literal") 47 21 47 34 ("jazz.library.literals.construct-icon-resource")}
      {Lisp-Entry "Cursor-Resource" define ("literal") 48 21 48 36 ("jazz.library.literals.construct-cursor-resource")}
      {Lisp-Entry "Event" define ("literal") 49 21 49 26 ("jazz.library.literals.construct-event")}
      {Lisp-Entry "Event-Handler" define ("literal") 50 21 50 34 ("jazz.library.literals.construct-event-handler")}
      {Lisp-Entry "Version" define ("literal") 51 21 51 28 ("jazz.library.literals.construct-version")}
      {Lisp-Entry "Reference" define ("literal") 52 21 52 30 ("jazz.library.literals.construct-reference")}}})
"literals"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "literals.jazz"} 1289938598
    {Lisp-Entry "jazz.library.literals" module #f 37 8 37 29 ("jazz")
      {Lisp-Entry "walk-reference" definition #f 49 21 49 35 ("car" "source-code" "proc" "arguments")}
      {Lisp-Entry "construct-reference" definition #f 53 21 53 40 ("Reference" "new" "symbol")}
      {Lisp-Entry "construct-box" definition #f 62 21 62 34 ("car" "Box" "new" "null?" "if" "rest")}
      {Lisp-Entry "construct-directory-group" definition #f 73 21 73 46 ("Directory-Group" "new" "rest")}
      {Lisp-Entry "construct-locales" definition #f 82 21 82 38 ("Locales" "new" "apply" "rest")}
      {Lisp-Entry "construct-image-resource" definition #f 91 21 91 45 ("Image-Resource" "new" "name")}
      {Lisp-Entry "construct-icon-resource" definition #f 95 21 95 44 ("Icon-Resource" "new" "name")}
      {Lisp-Entry "construct-cursor-resource" definition #f 99 21 99 46 ("Cursor-Resource" "new" "name")}
      {Lisp-Entry "construct-event" definition #f 108 21 108 36 ("Event" "new" "apply" "properties" "kind")}
      {Lisp-Entry "construct-event-handler" definition #f 117 21 117 44 ("properties:" "method-name:" "target-name:" "Event-Handler" "new" "properties" "method-name" "target-name")}
      {Lisp-Entry "construct-version" definition #f 126 21 126 38 ("Version" "new" "stage" "0" "revision" "minor" "major")}}})
"locale"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "locale.jazz"} 1288732033
    {Lisp-Entry "jazz.locale" module #f 37 18 37 29 ("jazz")
      {Lisp-Entry "Locales" class #f 45 7 45 14 ("Object")
        {Lisp-Entry "locales" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-locales" accessor #f 48 23 48 31 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("locales" "set!" "nextmethod" "rest")}
        {Lisp-Entry "print" method #f 56 20 56 25 ("locales" "if" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "get-locale" method #f 68 18 68 28 ("locales" "getf" "locale")}
        {Lisp-Entry "localize" method #f 77 18 77 26 ("second" "locales" "getf" "or" "locale")}}
      {Lisp-Entry "Active-Locales" definition #f 81 12 81 26 ("english:")}
      {Lisp-Entry "Active-Locale" definition #f 84 12 84 25 ("english:")}
      {Lisp-Entry "get-locales" definition #f 88 20 88 31 ("Active-Locales")}
      {Lisp-Entry "get-locale" definition #f 92 20 92 30 ("Active-Locale")}
      {Lisp-Entry "set-locale" definition #f 96 20 96 30 ("set!" "Active-Locale" "neq?" "when" "let" "locale-changes" "proc" "lambda" "for-each" "call-locale-changes" "error" "else" "symbol?" "enumerator->symbol" "symbol->keyword" "enumerator?" "keyword?" "cond" "standardize-locale" "define" "update?" "update?:" "loc")}
      {Lisp-Entry "locale-changes" definition #f 114 12 114 26 ()}
      {Lisp-Entry "register-locale-change" definition #f 117 20 117 42 ("cons" "locale-changes" "set!" "proc")}
      {Lisp-Entry "unregister-locale-change" definition #f 120 20 120 44 ("remove!" "locale-changes" "set!" "proc")}
      {Lisp-Entry "localize" definition #f 124 20 124 28 ("Active-Locale" "localize" "Locales" "is?" "if" "object")}
      {Lisp-Entry "localize-to" definition #f 130 20 130 31 ("localize" "Locales" "is?" "if" "locale" "object")}
      {Lisp-Entry "present-locale" definition #f 136 20 136 34 ("english:" "case" "locale")}
      {Lisp-Entry "Diacritic-Equivalences" definition #f 148 12 148 34 ()}
      {Lisp-Entry "make-diacritic-table" definition #f 157 13 157 33 ("table-set!" "char" "lambda" "for-each" "eqv?" "test:" "make-table" "table" "let" "equivalences")}
      {Lisp-Entry "Diacritic-Table" definition #f 166 12 166 27 ("Diacritic-Equivalences" "make-diacritic-table")}
      {Lisp-Entry "di=?" definition #f 170 20 170 24 ("Diacritic-Table" "table-ref" "memv?" "ci=?" "or" "y" "x")}
      {Lisp-Entry "string-di=?" definition #f 175 20 175 31 ("di=?" "every" "b" "in-sequence" "a" "for" "loop" "string-length" "=" "and" "y" "x")}}})
"log"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "log.jazz"} 1288732033
    {Lisp-Entry "jazz.log" module #f 37 8 37 16 ("jazz")
      {Lisp-Entry "Log" class #f 51 7 51 10 ("initialize" "Object")
        {Lisp-Entry "name" slot #f 54 8 54 12 ()}
        {Lisp-Entry "get-name" accessor #f 54 44 54 52 ()}
        {Lisp-Entry "file" slot #f 55 8 55 12 ()}
        {Lisp-Entry "get-file" accessor #f 55 44 55 52 ()}
        {Lisp-Entry "last-mark" slot #f 56 8 56 17 ()}
        {Lisp-Entry "read-error?" slot #f 57 8 57 19 ()}
        {Lisp-Entry "current-node" slot #f 58 8 58 20 ()}
        {Lisp-Entry "get-current-node" accessor #f 58 44 58 52 ()}
        {Lisp-Entry "toplevel-nodes" slot #f 59 8 59 22 ()}
        {Lisp-Entry "initialize" method #f 62 20 62 30 ("load-toplevel-nodes" "when" "List-Factory" "new" "toplevel-nodes~self" "current-node~self" "file~self" "name~self" "set!" "nextmethod" "load?" "load?:" "file" "file:" "name" "name:")}
        {Lisp-Entry "get-toplevel-nodes" method #f 77 18 77 36 ("toplevel-nodes" "get-list")}
        {Lisp-Entry "reload" method #f 86 18 86 24 ("load-toplevel-nodes" "name" "error" "file" "not" "if")}
        {Lisp-Entry "load-toplevel-nodes" method #f 92 11 92 30 ("put" "parse-jml" "node" "eof-object?" "not" "when" "read" "expr" "iterate" "let" "port" "lambda" "file" "parse" "call-with-input-file" "toplevel-nodes" "reset")}
        {Lisp-Entry "load-toplevel-nodes" method #f 105 11 105 30 ("toplevel-nodes" "put" "parse-jml" "node" "eof-object?" "read" "expr" "reader-file-mark" "not" "while" "err" "Error" "catch" "done?" "set-reader-file-mark" "when" "read/write" "'read/write" "sharing:" "File-Reader" "new" "reader" "with" "set!" "format" "message-box" "column" "1" "+" "line" "file" "parse" "file-path" "let" "last-mark" "=" "read-error?" "and" "if" "fourth" "get-mark-column" "third" "get-mark-line" "first" "mark" "get-mark-position" "current-mark" "handle-read-error" "define")}
        {Lisp-Entry "add-toplevel-node" method #f 148 11 148 28 ("toplevel-nodes" "put" "file" "not" "when" "node")}
        {Lisp-Entry "output-toplevel-node" method #f 153 11 153 31 ("force-output" "newline" "pretty-print" "port" "lambda" "read" "'read" "sharing:" "append:" "get-eol-encoding" "eol-encoding:" "parse" "path:" "list" "call-with-output-file" "file" "when" "node")}
        {Lisp-Entry "with-node" method #f 167 18 167 27 ("output-toplevel-node" "set!" "set-parent" "begin" "unwind-protect" "prog1" "add-toplevel-node" "not" "when" "preserved" "current-node" "parent" "let" "proc" "node")}
        {Lisp-Entry "log-node" method #f 182 18 182 26 ("output-toplevel-node" "add-toplevel-node" "not" "when" "set-parent" "current-node" "parent" "let" "node")}
        {Lisp-Entry "log-entry" method #f 191 18 191 27 ("new-entry" "log-node" "data" "message" "name" "tag")}
        {Lisp-Entry "new-entry" method #f 195 18 195 27 ("'data" "'message" "'name" "set-property" "'entry" "or" "JML-Element" "new" "entry" "let" "data" "message" "name" "tag")}
        {Lisp-Entry "clear" method #f 203 18 203 23 ("clear" "'clear" "unimplemented")}}
      {Lisp-Entry "Logs" definition #f 213 12 213 16 ("List-Factory" "new")}
      {Lisp-Entry "get-logs" definition #f 217 21 217 29 ("Logs" "get-list")}
      {Lisp-Entry "with-add-log-mutex" definition #f 221 12 221 30 ("mutex-unlock!" "prog1" "mutex-lock!" "thunk" "lambda" "add-log" "'add-log" "make-mutex" "mutex" "let")}
      {Lisp-Entry "add-log" definition #f 229 21 229 28 ("Logs" "put" "get-logs" "memq?" "unless" "lambda" "with-add-log-mutex" "log")}
      {Lisp-Entry "effective-log" definition #f 236 21 236 34 ("add-log" "default-log" "log" "let" "current-log" "or")}
      {Lisp-Entry "default-log" definition #f 244 13 244 24 ("name:" "Log" "new")}
      {Lisp-Entry "current-log" definition #f 248 19 248 30 ("make-parameter")}
      {Lisp-Entry "with-log" definition #f 252 20 252 28 ("add-log" "not" "and" "when" "get-name" "let" "current-log" "parameterize" "file" "file:" "name" "name:" "proc" "log")}
      {Lisp-Entry "with-node" definition #f 260 20 260 29 ("with-node" "new-entry" "or" "let" "effective-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:" "node" "node:" "proc")}
      {Lisp-Entry "log-node" definition #f 265 20 265 28 ("log-node" "effective-log" "log" "log:" "node")}
      {Lisp-Entry "log-entry" definition #f 269 20 269 29 ("log-entry" "effective-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:")}
      {Lisp-Entry "log-properties" definition #f 273 20 273 34 ("log-entry" "get-output-string" "keyword->symbol" "format" "set!" "if" "value" "property" "lambda" "for-each-property" "first?" "open-output-string" "printer" "let" "effective-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:" "properties")}
      {Lisp-Entry "new-log-node" definition #f 286 20 286 32 ("new-entry" "effective-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:")}
      {Lisp-Entry "with-profile" definition #f 296 20 296 32 ("new-entry" "or" "after" "'after" "set!" "before" "'before" "log-profile" "result" "let" "lambda" "with-node" "effective-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:" "node" "node:" "proc")}
      {Lisp-Entry "log-profile" definition #f 309 20 309 31 ("resources-snapshot" "log-node" "gc" "effective-log" "log" "log:" "name" "name:")}
      {Lisp-Entry "log-stack" definition #f 315 20 315 29 ("data:" "log-entry" "Stack-Snapshot" "new" "data" "let" "effective-log" "log" "log:" "message" "message:" "name" "name:" "tag" "tag:")}}})
"logger"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "logger.jazz"} 1288732033
    {Lisp-Entry "jazz.logger" module #f 37 8 37 19 ("jazz")
      {Lisp-Entry "*logger-directory*" definition #f 43 12 43 30 ("Home" "Directory")}
      {Lisp-Entry "*logger-file*" definition #f 46 12 46 25 ()}
      {Lisp-Entry "logger-file" definition #f 50 13 50 24 ("*logger-directory*" "timestamped-file" "set!" "*logger-file*" "not" "when")}
      {Lisp-Entry "with-logger-output" definition #f 56 13 56 31 ("port" "lambda" "get-eol-encoding" "eol-encoding:" "append:" "logger-file" "parse" "path:" "list" "call-with-output-file" "proc")}
      {Lisp-Entry "logger-log" definition #f 62 13 62 23 ("format" "apply" "port" "lambda" "with-logger-output" "rest")}
      {Lisp-Entry "logger-line" definition #f 68 13 68 24 ("logger-log" "line")}
      {Lisp-Entry "logger-debug" definition #f 72 13 72 25 ("logger-log" "rest")}
      {Lisp-Entry "logger-exception" definition #f 76 13 76 29 ("display-exception" "port" "lambda" "with-logger-output" "exc")}
      {Lisp-Entry "logger-backtrace" definition #f 82 13 82 29 ("display-continuation-backtrace" "port" "lambda" "with-logger-output" "cont")}}})
"math"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "math.jazz"} 1288732033
    {Lisp-Entry "jazz.math" module #f 37 8 37 17 ("jazz")
      {Lisp-Entry "Pi" definition #f 45 19 45 21 ("3.14159")}}})
"snapshot"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "snapshot.jazz"} 1288732033
    {Lisp-Entry "jazz.snapshot" module #f 37 8 37 21 ("jazz")
      {Lisp-Entry "*snapshots-directory*" definition #f 49 12 49 33 ("Home" "Directory")}
      {Lisp-Entry "*snapshot-process-mutex*" definition #f 53 12 53 36 ("snapshot-process" "'snapshot-process" "make-mutex")}
      {Lisp-Entry "snapshot-process" definition #f 57 20 57 36 ("print-process-snapshot" "apply" "printer" "get-eol-encoding" "eol-encoding:" "parse" "path:" "list" "call-with-output-file" "create-directories" "current-process-present" "*snapshots-directory*" "or" "timestamped-file" "file" "let" "others" "directory" "bind-keywords" "lambda" "mutex-unlock!" "unwind-protect" "*snapshot-process-mutex*" "mutex-lock!" "proc" "with-mutex" "define" "rest")}
      {Lisp-Entry "print-process-snapshot" definition #f 75 13 75 35 ("key:" "table->list" "sort" "string-length" "atom?" "atomic?" "0" "mutable?:" "package-info" "mutable?" "variable" "get-continuation-lexical-environment" "variables" "do" "in" "cont" "for" "loop" "get-continuation-stack" "stack" "cdr" "jazz.snapshot.snapshot-process" "'jazz.snapshot.snapshot-process" "car" "get-continuation-name" "null?" "scan" "iterate" "frames" "skip-snapshot-frames" "print-stack" "specified?" "stop" "present-thread-state" "state" "thread-name" "last" "get-kind" "not-null?" "get-thread-stops" "stops" "stop-kind" "top-threads" "mutex-unlock!" "thread-interrupt!" "thread-state" "thread-state-active?" "neq?" "inactive-thread-exception?" "with-exception-filter" "thread" "for-each" "mutex-lock!" "snapshot" "'snapshot" "make-mutex" "mutex" "current-thread" "print-thread" "continuation" "continuation-capture" "print-values" "print-threads" "force-output" "exception-reason" "format" "current-process-id" "id" "current-date" "present-date" "date" "version" "current-process-present" "process-version" "present" "when" "get-process" "process" "present-process-version" "print-process" "inspect-value" "list" "name" "bind" "name+info" "lambda" "map" "serial->object" "value" "<" "cons" "table-set!" "1" "+" "register-content" "if" "content" "presentation" "else" "table-length" ">=" "and" "table-ref" "cond" "serial" "depth" "info" "register-package-info" "third" "package-info-more?" "second" "package-info-presentation" "first" "package-info-serial" "define" "eq?" "test:" "make-table" "values" "let" "max-entries" "max-entries:" "100" "max-content" "max-content:" "256" "max-width" "max-width:" "2" "max-depth" "max-depth:" "exception" "exception:" "reason" "reason:" "printer")}
      {Lisp-Entry "snapshot-exception-debugger" definition #f 211 20 211 47 ("1" "exit" "when" "exception:" "snapshot-process" "snapshot" "let" "with-system-exception-debugger" "exception" "lambda" "feedback" "feedback:")}
      {Lisp-Entry "application-exception-debugger" definition #f 221 20 221 50 ("application-exception-feedback" "feedback:" "snapshot-exception-debugger")}
      {Lisp-Entry "application-exception-feedback" definition #f 226 20 226 50 ("problem" "'problem" "type:" "title:" "process-email" "email" "if" "parse" "current-process-present" "french:" "english:" "Locales" "localize" "format" "system-message" "get-process" "process" "let" "snapshot" "exception")}}})
"syntax"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "syntax.jazz"} 1290090557
    {Lisp-Entry "jazz.library.syntax" module #f 37 18 37 37 ("jazz")
      {Lisp-Entry "<environment>" macro ("macro") 45 15 45 28 ("locators-ref" "symbol" ",locators-code" "list->table" "locators" ",data" "',data" "construct-environment" "locators-code" "table->list" ",reference" "',reference" "car" "pair" "lambda" "map" "list" "'list" "cons" "locators-builder" "walk-references" "table-set!" "reference" "walk-reference" "eq?" "test:" "make-table" "references" "let" "gather-references" "define" "data")}
      {Lisp-Entry "define-form" macro ("macro") 72 15 72 26 (",form" ",name" "',name" "register-form" "form" "name")}
      {Lisp-Entry "define-trait" macro ("macro") 76 15 76 27 (",trait" "instantiate" ",name" "',name" "register-trait" "trait" "name")}}}
  {Lisp-File-Entry {File jazz.library "src" "jazz" "tie" "syntax.jazz"} 1288732033
    {Lisp-Entry "jazz.tie.syntax" module #f 37 18 37 33 ("jazz")
      {Lisp-Entry "tie" macro ("macro") 40 15 40 18 ("List" "String" "car" "typecase" "get-output" "get-output-string" ":string" "'format" "cons" "else" "case" "eof-object?" "unless" "read-char" "iterate" "List-Factory" "new" "open-output-string" "let" "lambda" "append" "apply" "call-with-input-string" "tie-string" "null?" "error" "symbol?" "not" "if" "read-delimited" "arguments" "command" "bind" "out-parameters" "control" "process-string" "format" "display" "memq?" "when" "out" "c" "put" "tie-list" "define" "objects")}}}
  {Lisp-File-Entry {File jazz.library "src" "jazz" "detprof" "syntax.jazz"} 1288732033
    {Lisp-Entry "jazz.detprof.syntax" module #f 37 18 37 37 ("jazz")
      {Lisp-Entry "unroll" macro ("macro") 40 15 40 21 ("make-list" "append" "apply" "begin" "rest" "n")}
      {Lisp-Entry "profile" macro #f 45 16 45 23 ("lambda" "profile-code" ",@body" "begin" "not" "if" "sourcify-if" "name:" "name" "not-found:" "key:" "on?:" "getf" "on?" "cddr" "body" "cadr" "source-code" "control" "let" "form-src")}}})
"tabular"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "tabular.jazz"} 1288732033
    {Lisp-Entry "jazz.tabular" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "read-tab-delimited" definition #f 43 33 43 51 ("get-output" "map" "put" "split" "values" "set!" "read-line" "not" "while" "done?" "List-Factory" "new" "fact" "string" "tab" "let" "reader" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "string-length" "-" "1" "subseq" "ends-with?" "starts-with?" "and" "if" "line" "patch-for-excel" "define" "file")}
      {Lisp-Entry "convert-tab-delimited->jml" definition #f 64 33 64 59 ("verify-reload" "get-application" "appl" "let" "get-name" "user-message" "pretty-print" "printer" "lambda" "get-eol-encoding" "eol-encoding:" "UTF-8" "'UTF-8" "char-encoding:" "path:" "list" "call-with-output-file" "parse" "preferences:" "JML-Parser" "JML-Preferences" "new" "pref" "jml" "read-tab-delimited" "content" "get-base" "format" "get-parent" "new-file" "output" "let*" "convert-tab-delimited->jml" "'convert-tab-delimited->jml" "unimplemented" "parser" "input")}
      {Lisp-Entry "save-tab-delimited" definition #f 81 33 81 51 ("format" "set!" "if" "text" "first?" "let" "line" "for-each" "printer" "lambda" "get-eol-encoding" "eol-encoding:" "parse" "path:" "list" "call-with-output-file" "save-tab-delimited" "'save-tab-delimited" "unimplemented" "file" "content")}}})
"ui"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "runtime" "ui.jazz"} 1288732033
    {Lisp-Entry "jazz.runtime.ui" module #f 37 8 37 23 ("jazz")
      {Lisp-Entry "load-all-with-feedback" definition #f 45 20 45 42 ("format-plural" "increase!" "user-feedback" "begin" "if" "unit-name" "lambda" "feedback:" "load-all" "0" "count" "let")}
      {Lisp-Entry "walk-all-with-feedback" definition #f 56 20 56 42 ("format-plural" "increase!" "user-feedback" "begin" "if" "unit-name" "lambda" "feedback:" "walk-all" "0" "count" "let")}
      {Lisp-Entry "outline-all-with-feedback" definition #f 67 20 67 45 ("format-plural" "outline-all" "increase!" "user-feedback" "unit-name" "lambda" "outline-feedback" "parameterize" "0" "count" "let")}}})
