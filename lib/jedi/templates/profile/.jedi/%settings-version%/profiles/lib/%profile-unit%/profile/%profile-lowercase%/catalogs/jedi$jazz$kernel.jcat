"base"
 ({Lisp-File-Entry {File :context "runtime" "base.scm"} 236918186. scheme
    {Lisp-Entry "jazz-source" define #f 42 8 42 24 ("source" "jazz:source")}
    {Lisp-Entry "make-version" define #f 51 9 51 26 ("version" "vector" "description" "update" "recompile-references" "recompile" "rebuild" "gambit-stamp" "gambit-version" "number")}
    {Lisp-Entry "version-number" define #f 54 9 54 28 ("1" "vector-ref" "version")}
    {Lisp-Entry "version-gambit-version" define #f 57 9 57 36 ("2" "vector-ref" "version")}
    {Lisp-Entry "version-gambit-stamp" define #f 60 9 60 34 ("3" "vector-ref" "version")}
    {Lisp-Entry "version-rebuild" define #f 63 9 63 29 ("4" "vector-ref" "version")}
    {Lisp-Entry "version-recompile" define #f 66 9 66 31 ("5" "vector-ref" "version")}
    {Lisp-Entry "version-recompile-references" define #f 69 9 69 42 ("6" "vector-ref" "version")}
    {Lisp-Entry "version-update" define #f 72 9 72 28 ("7" "vector-ref" "version")}
    {Lisp-Entry "version-description" define #f 75 9 75 33 ("8" "vector-ref" "version")}
    {Lisp-Entry "new-version" define #f 79 9 79 25 ("make-version" "jazz:make-version" "description" "update" "recompile-references" "recompile" "rebuild" "gambit-stamp" "gambit-version" "version" "#!key")}
    {Lisp-Entry "split-version" define #f 100 9 100 27 ("values" "revision" "3" "minor" "5" "-" "0" "substring" "string->number" "major" "string-length" "len" "number->string" "str" "let" "number")}
    {Lisp-Entry "present-version" define #f 109 9 109 29 ("number->string" "string-append" "split-version" "jazz:split-version" "revision" "minor" "major" "receive" "number")}
    {Lisp-Entry "jazz-versions-file" define #f 123 8 123 31 ()}
    {Lisp-Entry "jazz-versions" define #f 126 8 126 26 ()}
    {Lisp-Entry "jazz-version-number" define #f 129 8 129 32 ()}
    {Lisp-Entry "jazz-gambit-version" define #f 132 8 132 32 ()}
    {Lisp-Entry "jazz-gambit-stamp" define #f 135 8 135 30 ()}
    {Lisp-Entry "load-jazz-versions" define #f 139 8 139 31 ("cdr" "jazz-gambit-stamp" "jazz:jazz-gambit-stamp" "jazz-gambit-version" "jazz:jazz-gambit-version" "begin" "version-gambit-stamp" "jazz:version-gambit-stamp" "gambit-stamp" "version-gambit-version" "jazz:version-gambit-version" "gambit-version" "jazz-version" "null?" "not" "iter" "setup-jazz-gambit-version/stamp" "new-version" "jazz:new-version" "apply" "arguments" "map" "lst" "car" "version-number" "jazz:version-number" "jazz-version-number" "jazz:jazz-version-number" "read" "read-all" "list->versions" "jazz-versions" "jazz:jazz-versions" "set!" "input" "cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "file-exists?" "if" "file" "load-versions" "string-append" "jazz-source" "jazz:jazz-source" "and" "jazz-versions-file" "jazz:jazz-versions-file" "or" "determine-jazz-versions-file" "define" "lambda" "loaded?" "let")}
    {Lisp-Entry "get-jazz-versions" define #f 179 9 179 31 ("jazz-versions" "jazz:jazz-versions" "load-jazz-versions" "jazz:load-jazz-versions")}
    {Lisp-Entry "get-jazz-version-number" define #f 184 9 184 37 ("jazz-version-number" "jazz:jazz-version-number" "load-jazz-versions" "jazz:load-jazz-versions")}
    {Lisp-Entry "get-jazz-gambit-version" define #f 189 9 189 37 ("jazz-gambit-version" "jazz:jazz-gambit-version" "load-jazz-versions" "jazz:load-jazz-versions")}
    {Lisp-Entry "get-jazz-gambit-stamp" define #f 194 9 194 35 ("jazz-gambit-stamp" "jazz:jazz-gambit-stamp" "load-jazz-versions" "jazz:load-jazz-versions")}
    {Lisp-Entry "gambit-jazz?" define #f 199 9 199 26 ("string=?" "and" "gambit-vendor")}
    {Lisp-Entry "gambit-uptodate?" define #f 203 9 203 30 (">=" "if" ">" "not" "or" "get-jazz-gambit-stamp" "jazz:get-jazz-gambit-stamp" "jazz-gambit-stamp" "get-jazz-gambit-version" "jazz:get-jazz-gambit-version" "jazz-gambit-version" "let" "gambit-stamp" "gambit-version")}
    {Lisp-Entry "make-update" define #f 218 9 218 25 ("update" "vector" "description" "targets" "version")}
    {Lisp-Entry "update-version" define #f 221 9 221 28 ("1" "vector-ref" "update")}
    {Lisp-Entry "update-targets" define #f 224 9 224 28 ("2" "vector-ref" "update")}
    {Lisp-Entry "update-description" define #f 227 9 227 32 ("3" "vector-ref" "update")}
    {Lisp-Entry "new-update" define #f 231 9 231 24 ("make-update" "jazz:make-update" "description" "targets" "version" "#!key")}
    {Lisp-Entry "jazz-updates-file" define #f 247 8 247 30 ()}
    {Lisp-Entry "get-jazz-updates" define #f 251 9 251 30 ("set!" "jazz-updates" "jazz:jazz-updates" "not" "read" "read-all" "list->updates" "jazz:list->updates" "input" "lambda" "cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "file-exists?" "if" "file" "let" "load-updates" "string-append" "jazz-source" "jazz:jazz-source" "and" "jazz-updates-file" "jazz:jazz-updates-file" "or" "determine-jazz-updates-file" "define")}
    {Lisp-Entry "list->updates" define #f 269 9 269 27 ("new-update" "jazz:new-update" "apply" "arguments" "lambda" "map" "lst")}
    {Lisp-Entry "for-each-update" define #f 275 9 275 29 ("cdr" "memq" "eq?" "symbol?" "and" "update-targets" "jazz:update-targets" "targets" "car" "update" "null?" "not" "if" "iter" "let" "proc" "updates" "target")}
    {Lisp-Entry "versioned-directory" define #f 287 9 287 33 ("rename-file" "dir" "converted-version-number" "working-version-number" "iter" "1" "<=" "level" "src" "feedback:" "copy-directory" "jazz:copy-directory" ".1" "thread-sleep!" "delete-directory" "jazz:delete-directory" "feedback" "jazz:feedback" "begin" "conversion-dir" "current-dir" "current-version-number" "receive" "create-directories" "jazz:create-directories" "present-version" "jazz:present-version" "string-append" "not" "set!" "values" "continuation-return" "file-exists?" "if" "version-directory" "version-dir" "update-version" "jazz:update-version" "version-number" "update" "for-each-update" "jazz:for-each-update" "return" "lambda" "continuation-capture" "uptodate?" "let" "determine-version" "define" "converter" "updates" "target" "root")}
    {Lisp-Entry "versioned-version" define #f 330 9 330 31 ("update-version" "jazz:update-version" "continuation-return" "update" "for-each-update" "jazz:for-each-update" "return" "lambda" "continuation-capture" "updates" "target")}
    {Lisp-Entry "jazz-settings-directory" define #f 344 8 344 36 ()}
    {Lisp-Entry "jazz-settings-version" define #f 347 8 347 34 ()}
    {Lisp-Entry "named-configurations-file" define #f 350 8 350 38 ()}
    {Lisp-Entry "setup-settings" define #f 354 9 354 28 ("string-append" "named-configurations-file" "jazz:named-configurations-file" "versioned-version" "jazz:versioned-version" "jazz-settings-version" "jazz:jazz-settings-version" "convert-settings" "jazz:convert-settings" "get-jazz-updates" "jazz:get-jazz-updates" "settings" "versioned-directory" "jazz:versioned-directory" "jazz-settings-directory" "jazz:jazz-settings-directory" "set!")}
    {Lisp-Entry "convert-settings" define #f 360 9 360 30 ("else" "case" "205001" "convert-configuration-205001" "jazz:convert-configuration-205001" "convert-205000" "205000" "convert-configuration-205000" "jazz:convert-configuration-205000" "map" "configurations" "lambda" "convert-configurations" "jazz:convert-configurations" "convert-initial" "define" "old" "dir")}
    {Lisp-Entry "convert-configurations" define #f 379 9 379 36 ("file-exists?" "if" "newline" "write" "configuration" "for-each" "output" "call-with-output-file" "configurations" "write-configurations" "read" "read-all" "input" "lambda" "cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "read-configurations" "define" "string-append" "configurations-file" "let" "converter" "dir")}
    {Lisp-Entry "convert-configuration-205000" define #f 398 9 398 42 ("else" "source-access?:" "kernel-interpret?:" "list" "interpret-kernel?:" "case" "value" "property" "lambda" "convert-properties" "jazz:convert-properties" "configuration")}
    {Lisp-Entry "convert-configuration-205001" define #f 407 9 407 42 ("else" "string-replace" "jazz:string-replace" "string?" "if" "list" "destination:" "case" "value" "property" "lambda" "convert-properties" "jazz:convert-properties" "configuration")}
    {Lisp-Entry "convert-properties" define #f 415 9 415 32 ("cadr" "car" "append" "cddr" "null?" "if" "result" "scan" "iter" "let" "converter" "plist")}
    {Lisp-Entry "load-global/local-configurations" define #f 422 9 422 46 ("local" "jazz-settings-directory" "jazz:jazz-settings-directory" "string-append" "global" "let" "load" "file-exists?" "if" "file" "load-if-exists" "define" "filename")}
    {Lisp-Entry "save-configuration" define #f 438 9 438 32 ("print-configuration" "jazz:print-configuration" "newline" "get-jazz-version-number" "jazz:get-jazz-version-number" "display" "output" "lambda" "platform-eol-encoding" "jazz:platform-eol-encoding" "eol-encoding:" "path:" "list" "call-with-output-file" "system-platform" "file" "destination" "kernel-interpret?" "mutable-bindings?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system" "name")}
    {Lisp-Entry "print-configuration" define #f 451 9 451 33 ("destination:" "kernel-interpret?:" "mutable-bindings?:" "debug-source?:" "debug-location?:" "debug-environments?:" "optimize?:" "safety:" "windowing:" "platform:" "system:" "name:" "write" "display" "set!" "if" "value" "property" "print-property" "first?" "define" "output" "destination" "kernel-interpret?" "mutable-bindings?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system" "name")}
    {Lisp-Entry "parse-link" define #f 484 9 484 24 ("cons" "set!" "member" "not" "cdr" "options" "assoc" "pair" "lambda" "for-each" "result" "symbol->string" "split-string" "jazz:split-string" "lst" "let" "symbol?" "if" "error" "jazz:error" "option" "invalid" "libraries" "objects" "link-options" "define" "link")}
    {Lisp-Entry "destination-directory" define #f 517 9 517 35 ("or" "dirname-normalize" "jazz:dirname-normalize" "dir" "destination" "name")}
    {Lisp-Entry "sort" define #f 527 9 527 18 ("let*" "cddr" "or" "split" "cdr" "cons" "if" "e2" "car" "e1" "let" "else" "null?" "cond" "l2" "l1" "merge" "merge-sort" "define" "smaller" "l")}
    {Lisp-Entry "string-replace" define #f 557 9 557 28 ("string-set!" "string-ref" "eqv?" "begin" "0" ">=" "if" "1" "string-length" "-" "n" "iter" "string-copy" "cpy" "let" "proper-tail-calls" "declare" "new" "old" "str")}
    {Lisp-Entry "pathname-type" define #f 574 8 574 26 ("file-type")}
    {Lisp-Entry "pathname-exists?" define #f 577 8 577 29 ("file-exists?")}
    {Lisp-Entry "pathname-standardize" define #f 581 9 581 34 ("string-replace" "jazz:string-replace" "path")}
    {Lisp-Entry "pathname-normalize" define #f 585 9 585 32 ("string-append" "and" "pathname-standardize" "jazz:pathname-standardize" "standardized" "1" "-" "0" "substring" "path-normalize" "normalized" "string-ends-with?" "jazz:string-ends-with?" "dir?" "string-length" "len" "let" "error" "jazz:error" "pathname-exists?" "jazz:pathname-exists?" "not" "if" "error?" "#!optional" "path")}
    {Lisp-Entry "dirname-normalize" define #f 599 9 599 31 ("string-append" "string-ends-with?" "jazz:string-ends-with?" "if" "dir")}
    {Lisp-Entry "path=?" define #f 607 13 607 24 ("string-ci=?" "path2" "path1")}
    {Lisp-Entry "path=?" define #f 610 12 610 23 ("string=?" "path2" "path1")}
    {Lisp-Entry "create-directory" define #f 614 9 614 30 ("create-directory" "begin" "file-exists?" "not" "if" "feedback" "#!key" "dir")}
    {Lisp-Entry "create-directories" define #f 622 9 622 32 ("feedback:" "create-directory" "jazz:create-directory" "file-exists?" "join-strings" "jazz:join-strings" "subdir" "begin" "null?" "not" "cdr" "car" "equal?" "if" "scan" "iter" "split-string" "jazz:split-string" "reverse" "path" "let" "feedback" "#!key" "dir")}
    {Lisp-Entry "directory-content" define #f 633 9 633 31 ("dot-and-dot-dot" "ignore-hidden:" "path:" "list" "string?" "if" "directory-files" "directory")}
    {Lisp-Entry "directory-files" define #f 639 9 639 29 ("directory-content" "jazz:directory-content" "regular" "string-append" "pathname-type" "jazz:pathname-type" "eq?" "name" "lambda" "collect-if" "jazz:collect-if" "directory")}
    {Lisp-Entry "directory-directories" define #f 645 9 645 35 ("directory-content" "jazz:directory-content" "string-append" "pathname-type" "jazz:pathname-type" "eq?" "name" "lambda" "collect-if" "jazz:collect-if" "directory")}
    {Lisp-Entry "delete-directory" define #f 651 9 651 30 ("delete-directory" "begin" "empty-directory" "jazz:empty-directory" "if" "feedback" "delete-directory?" "delete-file?" "0" "level" "#!optional" "directory")}
    {Lisp-Entry "empty-directory" define #f 661 9 661 29 ("directory-directories" "jazz:directory-directories" "delete-directory" "1" "+" "directory-files" "jazz:directory-files" "set!" "delete-file" "begin" "or" "if" "string-append" "name" "lambda" "for-each" "empty?" "let" "empty-directory" "jazz:empty-directory" "dir" "default-delete-directory?" "file" "default-delete-file?" "define" "feedback" "delete-directory?" "delete-file?" "0" "level" "#!optional" "directory")}
    {Lisp-Entry "copy-directory" define #f 690 9 690 28 ("0" "1" "+" "directory" "copy-file" "regular" "pathname-type" "jazz:pathname-type" "case" "eq?" "or" "sub-dst" "string-append" "sub-src" "name" "lambda" "for-each" "create-directories" "jazz:create-directories" "directory-content" "jazz:directory-content" "src-content" "let" "if" "level" "copy" "define" "feedback" "copy?" "#!key" "dst" "src")}
    {Lisp-Entry "platform-eol-encoding" define #f 710 9 710 35 ("lf" "else" "cr-lf" "windows" "case" "platform")}
    {Lisp-Entry "option?" define #f 721 9 721 21 ("string-ref" "char=?" "0" "string-length" ">" "and" "arg")}
    {Lisp-Entry "convert-option" define #f 726 9 726 28 ("1" "0" "substring" "equal?" "2" ">=" "and" "if" "start" "string-length" "len" "let" "arg")}
    {Lisp-Entry "option=?" define #f 734 9 734 22 ("convert-option" "jazz:convert-option" "equal?" "option?" "jazz:option?" "and" "option" "arg")}
    {Lisp-Entry "get-option" define #f 739 9 739 24 ("cdr" "if" "assoc" "pair" "let" "options" "name")}
    {Lisp-Entry "split-command-line" define #f 746 9 746 32 ("reverse" "else" "begin" "cons" "member" "cond" "cdr" "rest" "convert-option" "jazz:convert-option" "opt" "car" "option?" "jazz:option?" "pair?" "and" "if" "rev-options" "args" "loop" "let" "cont" "missing-argument-for-option" "options-with-args" "options-with-no-args" "arguments")}
    {Lisp-Entry "invoke-process" define #f 774 9 774 28 ("process-status" "stderr-redirection:" "stdout-redirection:" "stdin-redirection:" ",@path-or-settings" "open-process" "port" "let" "path-or-settings")}
    {Lisp-Entry "call-process" define #f 782 9 782 26 ("error" "jazz:error" "0" "=" "not" "if" "invoke-process" "jazz:invoke-process" "code" "let" "path-or-settings")}
    {Lisp-Entry "feedback" define #f 793 9 793 22 ("force-output" "newline" "format" "jazz:format" "apply" "display" "rest" "fmt-string")}
    {Lisp-Entry "crash-reporter" define #f 804 8 804 27 ()}
    {Lisp-Entry "set-crash-reporter" define #f 808 9 808 32 ("crash-reporter" "jazz:crash-reporter" "set!" "proc")}})
"block"
 ({Lisp-File-Entry {File :context "syntax" "block.scm"} 236918186. scheme
    {Lisp-Entry "testing?" define #f 37 8 37 21 ("make-parameter")}
    {Lisp-Entry "testing" define #f 40 8 40 20 ("make-parameter")}
    {Lisp-Entry "generate-symbol-for" define #f 44 8 44 32 ("make-parameter")}
    {Lisp-Entry "generate-symbol-context" define #f 47 8 47 36 ("make-parameter")}
    {Lisp-Entry "generate-symbol-counter" define #f 50 8 50 36 ("make-parameter")}
    {Lisp-Entry "source-code" define #f 54 9 54 25 ("##source-code" "##source?" "if" "expr")}
    {Lisp-Entry "block" define-macro ("syntax") 60 20 60 25 (",@body" "begin" "0" "generate-symbol-counter" "jazz:generate-symbol-counter" "generate-symbol-context" "jazz:generate-symbol-context" "cddr" "body" "cadr" "source-code" "jazz:source-code" "name" "let" "form-src" "lambda")}})
"boot"
 ({Lisp-File-Entry {File :context "boot.scm"} 236918186. scheme
    {Lisp-Entry "Kernel" define #f 37 8 37 19 ("list")}
    {Lisp-Entry "load-kernel" define #f 59 8 59 24 ("set!" "Kernel" "jazz:Kernel" "source" "jazz:source" "string-append" "load" "path" "for-each" "begin" "not" "if" "lambda" "loaded?" "let")}})
"build"
 ({Lisp-File-Entry {File :context "runtime" "build.scm"} 236918186. scheme
    {Lisp-Entry "kernel.build" block #f 37 7 37 19 ("kernel-declares" "jazz:kernel-declares")
      {Lisp-Entry "for-each-jazz-version" define #f 48 9 48 35 ("get-jazz-versions" "jazz:get-jazz-versions" "for-each" "proc")}
      {Lisp-Entry "for-each-higher-jazz-version" define #f 52 9 52 42 ("%%cdr" "begin" "version-number" "jazz:version-number" "%%fx>" "%%car" "jazz-version" "%%null?" "%%not" "if" "get-jazz-versions" "jazz:get-jazz-versions" "jazz-versions" "iter" "let" "proc" "version")}
      {Lisp-Entry "kernel/product-needs-rebuild?" define #f 62 9 62 43 ("set!" "all" "kernel" "version-rebuild" "jazz:version-rebuild" "%%memq" "jazz-version" "lambda" "for-each-higher-jazz-version" "jazz:for-each-higher-jazz-version" "rebuild?" "let" "gambit-uptodate?" "jazz:gambit-uptodate?" "or" "%%not" "if" "load-version-file" "jazz:load-version-file" "gambit-stamp" "gambit-version" "version" "receive" "version-file")}
      {Lisp-Entry "kernel/product-architecture-needs-rebuild?" define #f 75 9 75 56 ("set!" "version-recompile-references" "jazz:version-recompile-references" "version-recompile" "jazz:version-recompile" "all" "kernel" "version-rebuild" "jazz:version-rebuild" "%%memq" "jazz-version" "lambda" "for-each-higher-jazz-version" "jazz:for-each-higher-jazz-version" "rebuild-architecture?" "let" "gambit-uptodate?" "jazz:gambit-uptodate?" "or" "%%not" "if" "load-version-file" "jazz:load-version-file" "gambit-stamp" "gambit-version" "version" "receive" "version-file")}
      {Lisp-Entry "load-version-file" define #f 90 9 90 31 ("values" "gambit-stamp" "gambit-version" "read" "version" "let" "input" "lambda" "cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "file-exists?" "if" "version-file")}
      {Lisp-Entry "manifest-needs-rebuild?-impl" define #f 101 9 101 42 ("set!" "%%memq" "and" "all" "%%eq?" "or" "if" "version-recompile" "jazz:version-recompile" "recompile" "version-rebuild" "jazz:version-rebuild" "rebuild" "jazz-version" "lambda" "for-each-higher-jazz-version" "jazz:for-each-higher-jazz-version" "rebuild?" "%%manifest-version" "version" "%%manifest-name" "name" "let" "manifest")}
      {Lisp-Entry "*changed-units*" define #f 120 8 120 28 ()}
      {Lisp-Entry "get-changed-units-impl" define #f 124 9 124 36 ("*changed-units*" "jazz:*changed-units*")}
      {Lisp-Entry "push-changed-units-impl" define #f 127 9 127 37 ("cons" "*changed-units*" "jazz:*changed-units*" "set!" "unit")}
      {Lisp-Entry "reset-changed-units-impl" define #f 130 9 130 38 ("*changed-units*" "jazz:*changed-units*" "set!")}
      {Lisp-Entry "build-image-impl" define #f 134 9 134 30 ("feedback:" "invoke-build-setup" "jazz:invoke-build-setup" "install-dir" "print-expression-variable" "jazz:print-expression-variable" "generate-kernel-interpret" "save-configuration" "jazz:save-configuration" "generate-configuration" "executable-extension" "jazz:executable-extension" "add-extension" "jazz:add-extension" "EXE" "obliterate-PE-timestamp" "jazz:obliterate-PE-timestamp" "join-strings" "jazz:join-strings" "path-strip-trailing-directory-separator" "exe" "##gambc-cc" "create-directories" "jazz:create-directories" "c-files" "pathname-name" "jazz:pathname-name" "kernel-name" "pathname-dir" "jazz:pathname-dir" "link-options" "unix" "link-libraries" "gambit-link-libraries" "get-product" "jazz:get-product" "%%product-package" "package-pathname" "jazz:package-pathname" "rcname" "split" "quote-pathname" "jazz:quote-pathname" "%%list" "resource-files" "directory:" "arguments:" "call-process" "jazz:call-process" "file-needs-update?" "jazz:file-needs-update?" "rcfile" "res" "rc" "with-resources" "windows" "case" "else" "cond" "lf" "get-jazz-updates" "jazz:get-jazz-updates" "jazz-updates" "jazz:jazz-updates" "build-single-objects?" "jazz:build-single-objects?" "single-objects?" "jazz:single-objects?" "build-source-access?" "jazz:build-source-access?" "source-access?" "jazz:source-access?" "determine-source-repositories" "jazz:determine-source-repositories" "source-repositories" "jazz:source-repositories" "determine-binary-repositories" "jazz:determine-binary-repositories" "binary-repositories" "jazz:binary-repositories" "jazz:source" "source-built" "jazz:source-built" "jazz:gambit-dir" "pathname-normalize" "jazz:pathname-normalize" "built" "jazz:built" "executable" "jazz:image" "jazz:product" "print-variable" "jazz:print-variable" "link-image" "image-file" "base:" "link-incremental" "warnings?:" "link-flat" "files" "<" "link-file" "generate-resources" "main-filename" "product-filename" "compile-product-file" "generate-main" "main?" "generate-product" "product?" "compile-product" "build-product" "print-architecture" "jazz:print-architecture" "file" "load" "compile-source-file" "compile-kernel-file" "generate-architecture" "architecture?" "compile-kernel" "build-kernel" "file-modification-time" "jazz:file-modification-time" "kernel-time" "system-stamp" "system-version" "get-jazz-version-number" "jazz:get-jazz-version-number" "write" "lambda" "platform-eol-encoding" "jazz:platform-eol-encoding" "eol-encoding:" "path:" "list" "call-with-output-file" "touched?" "set!" "delete-file" "touch" "was-touched?" "kernel/product-architecture-needs-rebuild?" "jazz:kernel/product-architecture-needs-rebuild?" "rebuild-architecture?" "kernel/product-needs-rebuild?" "jazz:kernel/product-needs-rebuild?" "proc" "version-file" "with-version-file" "update-manifest-compile-time" "jazz:update-manifest-compile-time" "output:" "options:" "compile-file-to-c" "begin" "dry-run?" "jazz:dry-run?" "not" "push-changed-units" "jazz:push-changed-units" "pathname-standardize" "jazz:pathname-standardize" "standardized-path" "debug-source" "debug-location" "debug-environments" "options" "file-exists?" "jazz:file-exists?" "or" "load-updated-manifest" "jazz:load-updated-manifest" "manifest-uptodate?" "jazz:manifest-uptodate?" "hash-changed?" "Manifest-Extension" "jazz:Manifest-Extension" "mnf" "Digest-Extension" "jazz:Digest-Extension" "digest" "dst" "src" "dir" "name" "rebuild?" "compile-file" "apply" "rest" "fmt-string" "feedback-message" "newline" "display" "output" "line" "print" "product-file" "kernel-file" "dest-file" "build-file" "%%string-append" "path" "source-file" "define" "product-dir" "string-append" "kernel-dir" "Build-Repository" "jazz:Build-Repository" "%%repository-directory" "build-dir" "relativise-directory" "jazz:relativise-directory" "source-dir" "path-normalize" "gambit-dir" "library" "%%eq?" "library-image?" "gambit-library" "%%symbol->string" "%%not" "if" "product-name" "let" "jazz:feedback" "feedback" "maximum-heap" "minimum-heap" "console?" "kernel?" "image" "resources" "kernel-install" "jazz:kernel-install" "destination-directory" "kernel-destination" "jazz:kernel-destination" "destination" "kernel-source" "jazz:kernel-source" "source" "kernel-interpret?" "include-compiler?" "kernel-mutable-bindings?" "jazz:kernel-mutable-bindings?" "mutable-bindings?" "kernel-debug-source?" "jazz:kernel-debug-source?" "debug-source?" "kernel-debug-location?" "jazz:kernel-debug-location?" "debug-location?" "kernel-debug-environments?" "jazz:kernel-debug-environments?" "debug-environments?" "kernel-optimize?" "jazz:kernel-optimize?" "optimize?" "kernel-safety" "jazz:kernel-safety" "safety" "kernel-windowing" "jazz:kernel-windowing" "windowing" "kernel-platform" "jazz:kernel-platform" "platform" "kernel-system" "jazz:kernel-system" "system" "#!key" "product")}
      {Lisp-Entry "invoke-build-setup" define #f 680 9 680 32 ("if" "build-setup" "jazz:build-setup" "proc" "let" "destination" "source" "optimize?" "safety" "platform")}
      {Lisp-Entry "determine-binary-repositories" define #f 686 9 686 43 ("build-binary-repositories" "jazz:build-binary-repositories" "determine-repositories" "jazz:determine-repositories" "destination-directory")}
      {Lisp-Entry "determine-source-repositories" define #f 691 9 691 43 ("repositories" "jazz:repositories" "determine-repositories" "jazz:determine-repositories" "destination-directory")}
      {Lisp-Entry "determine-repositories" define #f 696 9 696 36 ("split-string" "jazz:split-string" "relativise-directory" "jazz:relativise-directory" "path" "lambda" "collect" "jazz:collect" "if" "repositories" "destination-directory")}
      {Lisp-Entry "obliterate-PE-timestamp" define #f 709 9 709 37 ("cadr" "car" "patch" "lambda" "map" "truncate:" ",pathname" "path:" "open-output-file" "dll-port" "else" "2" "dll" "DLL" "case" "#xD8" "4" "#x88" "patches" "write-u8" "begin" "<" "if" "0" "i" "loop" "output-port-byte-position" "byte-value" "size" "offset" "fill-bytes-offset" "close-port" "1" "#x04" "#x100" "#x10000" "*" "+" "result" "b2" "read-u8" "b1" "#x22D" "input-port-byte-position" "open-input-file" "port" "let" "get-checksum-offset" "define" "type" "pathname")}
      {Lisp-Entry "pkg-config" define #f 751 9 751 24 ("error" "jazz:error" "get-output-string" "pipe-no-return" "jazz:pipe-no-return" "begin" "0" "process-status" "%%fx=" "if" "arguments:" "path:" "%%list" "open-process" "process-port" "open-output-string" "string-port" "let" "libname" "what")}
      {Lisp-Entry "pkg-config-cflags" define #f 760 9 760 31 ("pkg-config" "jazz:pkg-config" "libname")}
      {Lisp-Entry "pkg-config-libs" define #f 763 9 763 29 ("pkg-config" "jazz:pkg-config" "libname")}
      {Lisp-Entry "pkg-config-version" define #f 766 9 766 32 ("pkg-config" "jazz:pkg-config" "libname")}
      {Lisp-Entry "pipe-no-return" define #f 769 9 769 28 ("write-char" "begin" "%%eq?" "eof-object?" "or" "%%not" "if" "read-char" "c" "iterate" "let" "output" "input")}
      {Lisp-Entry "build-library-impl" define #f 783 9 783 32 ("delete-file" "DLL" "obliterate-PE-timestamp" "jazz:obliterate-PE-timestamp" "single-objects?" "jazz:single-objects?" "path-normalize" "path-strip-trailing-directory-separator" ",library-o1" ",linkfile" ",header-o" "windows" "arguments:" "call-process" "jazz:call-process" "%%length" "%%number->string" "warnings?:" "subunit-name" "link-flat" "cc-options:" "options:" "compile-file" "output:" "compile-file-to-c" "create-build-package" "jazz:create-build-package" "build-library" "get-subunit-names" "jazz:get-subunit-names" "header-o" "header-c" "Library-Manifest-Extension" "jazz:Library-Manifest-Extension" "linkfile" "o1-exists?" "library-o1" "1" "Library-Extension" "jazz:Library-Extension" "with-numbered-pathname" "jazz:with-numbered-pathname" "pathname-dir" "jazz:pathname-dir" "library-dir" "Build-Repository" "jazz:Build-Repository" "relocate-product-library-name-base" "jazz:relocate-product-library-name-base" "library-base" "product-descriptor-update" "jazz:product-descriptor-update" "ill-formed-field-error" "jazz:ill-formed-field-error" "cond-expand-each" "jazz:cond-expand-each" "update" "%%product-package" "package" "get-product" "jazz:get-product" "product" "%%manifest-compile-time-hash" "write" "newline" "%%symbol->string" "string-append" "display" "port" "platform-eol-encoding" "jazz:platform-eol-encoding" "eol-encoding:" "path:" "call-with-output-file" "library" "header-" "make-library-header" "%%null?" "subunits-uptodate?" "%%digest-hash" "manifest-needs-rebuild?" "jazz:manifest-needs-rebuild?" "%%not" "manifest-uptodate?" "jazz:manifest-uptodate?" "digest" "resource-pathname" "jazz:resource-pathname" "src-pathname" "manifest" "lib-uptodate?" "bin-uptodate?" "obj-uptodate?" "lib" "bin" "obj" "src" "with-unit-resources" "jazz:with-unit-resources" "%%table-ref" "image-unit-compile-time-hash" "unit-name" "unit-uptodate?" "load" "%%cadr" "%%table-set!" "unit" "for-each" "units" "lib-name" "register-image-units" "jazz:register-image-units" "set!" "begin" "file-exists?" "jazz:file-exists?" "load-image-units-manifest" "eq?" "test:" "%%make-table" "digest-table" "sub-units" "header" "library-manifest-uptodate?" "append" "or" "raw-options" "link-options-pair" "libdir" "jazz:pkg-config" "%%apply" "split-string" "jazz:split-string" "pkg-config" "%%car" "case" "else" "cond" "error" "jazz:error" "%%string-append" "%%list" "quote-pathname" "jazz:quote-pathname" "quote-jazz-pathname" "jazz:quote-jazz-pathname" "quoted-dir" "jazz-relative-dir" "let*" "%%string?" "%%substring" "0" "substring" "%%string=?" "%%fx>=" "and" "s-length" "%%string-length" "p-length" "s" "p" "prefix" "dir" "expand-libdir" "opt" "expand-link-option" "%%cdr" "%%pair?" "%%assq" "platform-options-pair" "let" "platform-options" "link-options" "%%cons" "x" "lambda" "list->table" "table->list" "car" "map" "list" "remove-duplicates" "apply" "if" "rest" "fmt-string" "feedback-message" "define" "jazz:feedback" "feedback" "kernel-install" "jazz:kernel-install" "destination-directory" "kernel-platform" "jazz:kernel-platform" "platform" "options" "#!key" "descriptor" "product-name")}
      {Lisp-Entry "print-architecture" define #f 947 9 947 32 ("get-jazz-version-number" "jazz:get-jazz-version-number" "kernel-version" "jazz:kernel-version" "kernel-destination" "jazz:kernel-destination" "kernel-mutable-bindings?" "jazz:kernel-mutable-bindings?" "kernel-debug-source?" "jazz:kernel-debug-source?" "kernel-debug-location?" "jazz:kernel-debug-location?" "kernel-debug-environments?" "jazz:kernel-debug-environments?" "kernel-optimize?" "jazz:kernel-optimize?" "kernel-safety" "jazz:kernel-safety" "kernel-windowing" "jazz:kernel-windowing" "kernel-platform" "jazz:kernel-platform" "newline" "kernel-system" "jazz:kernel-system" "print-variable" "jazz:print-variable" "output" "destination" "mutable-bindings?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system")}
      {Lisp-Entry "print-variable" define #f 971 9 971 28 ("write" "list?" "%%symbol?" "or" "if" "newline" "display" "output" "value" "variable")}
      {Lisp-Entry "print-expression-variable" define #f 984 9 984 39 ("write" "newline" "display" "output" "expression" "variable")}
      {Lisp-Entry "manifest-needs-rebuild?" define-macro ("variable-override") 999 31 999 59 ("manifest-needs-rebuild?-impl" "jazz:manifest-needs-rebuild?-impl")}
      {Lisp-Entry "get-changed-units" define-macro ("variable-override") 1000 31 1000 53 ("get-changed-units-impl" "jazz:get-changed-units-impl")}
      {Lisp-Entry "push-changed-units" define-macro ("variable-override") 1001 31 1001 54 ("push-changed-units-impl" "jazz:push-changed-units-impl")}
      {Lisp-Entry "reset-changed-units" define-macro ("variable-override") 1002 31 1002 55 ("reset-changed-units-impl" "jazz:reset-changed-units-impl")}
      {Lisp-Entry "build-image" define-macro ("variable-override") 1003 31 1003 47 ("build-image-impl" "jazz:build-image-impl")}
      {Lisp-Entry "build-library" define-macro ("variable-override") 1004 31 1004 49 ("build-library-impl" "jazz:build-library-impl")}}}
  {Lisp-File-Entry {File :context "build.scm"} 236918186. scheme
    {Lisp-Entry "setup-versions" define #f 42 9 42 28 ("source" "jazz:source" "string-append" "jazz-versions-file" "jazz:jazz-versions-file" "set!" "format" "jazz:format" "stamp" "get-jazz-gambit-stamp" "jazz:get-jazz-gambit-stamp" "jazz-gambit-stamp" "get-jazz-gambit-version" "jazz:get-jazz-gambit-version" "jazz-gambit-version" "system-stamp" "system-version" "gambit-uptodate?" "jazz:gambit-uptodate?" "gambit-jazz?" "jazz:gambit-jazz?" "or" "if" "##unbound?" "not" "and" "system-vendor" "##global-var-ref" "vendor-f" "let" "vendor" "1" "exit" "newline" "display" "message" "wrong-version" "validate-gambit-version" "define")}
    {Lisp-Entry "unspecified-option-value" define #f 73 8 73 37 ("unspecified-option" "list")}
    {Lisp-Entry "unspecified-option" define #f 77 9 77 32 ("unspecified-option-value" "jazz:unspecified-option-value")}
    {Lisp-Entry "specified-option?" define #f 81 9 81 31 ("unspecified-option-value" "jazz:unspecified-option-value" "eq?" "not" "option")}
    {Lisp-Entry "or-option" define #f 85 9 85 23 ("cdr" "specified-option?" "jazz:specified-option?" "car" "option" "default" "null?" "if" "scan" "iter" "let" "rest")}
    {Lisp-Entry "define-option" define-macro #f 100 15 100 33 ("car" "set!" "null?" "if" "rest" ",name" ",default" ",global" "define" "begin" "gensym" "global" "let" "default" "name")}
    {Lisp-Entry "default-name" define-macro ("option") 110 20 110 37 ()}
    {Lisp-Entry "default-system" define-macro ("option") 113 20 113 39 ("gambit")}
    {Lisp-Entry "default-platform" define-macro ("option") 116 20 116 41 ("unspecified-option" "jazz:unspecified-option")}
    {Lisp-Entry "default-windowing" define-macro ("option") 119 20 119 42 ("unspecified-option" "jazz:unspecified-option")}
    {Lisp-Entry "default-safety" define-macro ("option") 122 20 122 39 ("release")}
    {Lisp-Entry "default-optimize?" define-macro ("option") 125 20 125 42 ()}
    {Lisp-Entry "default-debug-environments?" define-macro ("option") 128 20 128 52 ()}
    {Lisp-Entry "default-debug-location?" define-macro ("option") 131 20 131 48 ()}
    {Lisp-Entry "default-debug-source?" define-macro ("option") 134 20 134 46 ()}
    {Lisp-Entry "default-mutable-bindings?" define-macro ("option") 137 20 137 50 ()}
    {Lisp-Entry "default-kernel-interpret?" define-macro ("option") 140 20 140 50 ()}
    {Lisp-Entry "default-destination" define-macro ("option") 143 20 143 44 ()}
    {Lisp-Entry "default-target" define-macro ("option") 147 20 147 39 ("all")}
    {Lisp-Entry "make-configuration" define #f 157 9 157 32 ("configuration" "vector" "destination" "kernel-interpret?" "mutable-bindings?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system" "name")}
    {Lisp-Entry "configuration-name" define #f 160 9 160 32 ("1" "vector-ref" "configuration")}
    {Lisp-Entry "configuration-system" define #f 163 9 163 34 ("2" "vector-ref" "configuration")}
    {Lisp-Entry "configuration-platform" define #f 166 9 166 36 ("3" "vector-ref" "configuration")}
    {Lisp-Entry "configuration-windowing" define #f 169 9 169 37 ("4" "vector-ref" "configuration")}
    {Lisp-Entry "configuration-safety" define #f 172 9 172 34 ("5" "vector-ref" "configuration")}
    {Lisp-Entry "configuration-optimize?" define #f 175 9 175 37 ("6" "vector-ref" "configuration")}
    {Lisp-Entry "configuration-debug-environments?" define #f 178 9 178 47 ("7" "vector-ref" "configuration")}
    {Lisp-Entry "configuration-debug-location?" define #f 181 9 181 43 ("8" "vector-ref" "configuration")}
    {Lisp-Entry "configuration-debug-source?" define #f 184 9 184 41 ("9" "vector-ref" "configuration")}
    {Lisp-Entry "configuration-mutable-bindings?" define #f 187 9 187 45 ("10" "vector-ref" "configuration")}
    {Lisp-Entry "configuration-kernel-interpret?" define #f 190 9 190 45 ("11" "vector-ref" "configuration")}
    {Lisp-Entry "configuration-destination" define #f 193 9 193 39 ("12" "vector-ref" "configuration")}
    {Lisp-Entry "new-configuration" define #f 197 9 197 31 ("make-configuration" "jazz:make-configuration" "require-destination" "jazz:require-destination" "validate-destination" "jazz:validate-destination" "require-kernel-interpret?" "jazz:require-kernel-interpret?" "validate-kernel-interpret?" "jazz:validate-kernel-interpret?" "require-mutable-bindings?" "jazz:require-mutable-bindings?" "validate-mutable-bindings?" "jazz:validate-mutable-bindings?" "require-debug-source?" "jazz:require-debug-source?" "validate-debug-source?" "jazz:validate-debug-source?" "require-debug-location?" "jazz:require-debug-location?" "validate-debug-location?" "jazz:validate-debug-location?" "require-debug-environments?" "jazz:require-debug-environments?" "validate-debug-environments?" "jazz:validate-debug-environments?" "require-optimize?" "jazz:require-optimize?" "validate-optimize?" "jazz:validate-optimize?" "require-safety" "jazz:require-safety" "validate-safety" "jazz:validate-safety" "require-windowing" "jazz:require-windowing" "validate-windowing" "jazz:validate-windowing" "require-platform" "jazz:require-platform" "validate-platform" "jazz:validate-platform" "require-system" "jazz:require-system" "validate-system" "jazz:validate-system" "require-name" "jazz:require-name" "validate-name" "jazz:validate-name" "let*" "destination" "kernel-interpret?" "mutable-bindings?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system" "unspecified-option" "jazz:unspecified-option" "name" "#!key")}
    {Lisp-Entry "anonymous-configuration-file" define #f 243 8 243 41 ()}
    {Lisp-Entry "configurations" define #f 246 8 246 27 ()}
    {Lisp-Entry "list-configurations" define #f 250 9 250 33 ("configurations" "jazz:configurations" "sort-configurations" "jazz:sort-configurations" "describe-configuration" "jazz:describe-configuration" "for-each")}
    {Lisp-Entry "require-configuration" define #f 254 9 254 35 ("error" "jazz:error" "not" "if" "find-configuration" "jazz:find-configuration" "or" "name")}
    {Lisp-Entry "require-default-configuration" define #f 260 9 260 43 ("require-configuration" "jazz:require-configuration" "configure" "jazz:configure" "feedback" "jazz:feedback" "begin" "find-configuration" "jazz:find-configuration" "or")}
    {Lisp-Entry "find-configuration" define #f 268 9 268 32 ("load-configuration" "jazz:load-configuration" "file-exists?" "string-append" "configuration-file" "destination-directory" "jazz:destination-directory" "configuration-dir" "and" "car" "not" "if" "find-configuration-pair" "jazz:find-configuration-pair" "pair" "configuration" "let" "name")}
    {Lisp-Entry "find-configuration-pair" define #f 283 9 283 37 ("cdr" "configuration-name" "jazz:configuration-name" "eq?" "car" "configuration" "null?" "if" "jazz:configurations" "configurations" "iter" "let" "name")}
    {Lisp-Entry "sort-configurations" define #f 293 9 293 33 ("symbol->string" "string-ci<?" "else" "not" "cond" "n2" "configuration-name" "jazz:configuration-name" "n1" "let" "c2" "c1" "lambda" "sort" "jazz:sort" "configurations")}
    {Lisp-Entry "register-configuration" define #f 306 9 306 36 ("save-configurations" "jazz:save-configurations" "list" "append" "configurations" "jazz:configurations" "set!" "set-car!" "if" "find-configuration-pair" "jazz:find-configuration-pair" "pair" "configuration-name" "jazz:configuration-name" "name" "let" "configuration")}
    {Lisp-Entry "delete-configuration" define #f 315 9 315 34 ("save-configurations" "jazz:save-configurations" "configuration-name" "jazz:configuration-name" "eq?" "c2" "c1" "lambda" "delete" "jazz:delete" "configurations" "jazz:configurations" "set!" "name")}
    {Lisp-Entry "load-configurations" define #f 324 9 324 33 ("load-configuration" "jazz:load-configuration" "register-configuration" "jazz:register-configuration" "anonymous-configuration-file" "jazz:anonymous-configuration-file" "read-all" "configurations" "jazz:configurations" "set!" "new-configuration" "jazz:new-configuration" "apply" "eof-object?" "read" "let" "read-configuration" "define" "input" "lambda" "cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "named-configurations-file" "jazz:named-configurations-file" "file-exists?" "if")}
    {Lisp-Entry "load-configuration" define #f 339 9 339 32 ("convert-configuration-205000" "jazz:convert-configuration-205000" "convert-configuration-205001" "jazz:convert-configuration-205001" "new-configuration" "jazz:new-configuration" "apply" "read" "let" "input" "lambda" "cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "caddr" "configuration" "car" "eq?" "pair?" "and" "if" "data" "parse-properties" "define" "file")}
    {Lisp-Entry "save-configurations" define #f 353 9 353 33 ("newline" "for-each" "lambda" "platform-eol-encoding" "jazz:platform-eol-encoding" "eol-encoding:" "named-configurations-file" "jazz:named-configurations-file" "path:" "list" "call-with-output-file" "feedback" "jazz:feedback" "feedback:" "create-directories" "jazz:create-directories" "begin" "sort-configurations" "jazz:sort-configurations" "delete-file" "file-exists?" "guess-platform" "jazz:guess-platform" "anonymous-configuration-file" "jazz:anonymous-configuration-file" "jazz:configurations" "receive" "jazz:print-configuration" "output" "print-configuration" "configuration-destination" "jazz:configuration-destination" "configuration-kernel-interpret?" "jazz:configuration-kernel-interpret?" "configuration-mutable-bindings?" "jazz:configuration-mutable-bindings?" "configuration-debug-source?" "jazz:configuration-debug-source?" "configuration-debug-location?" "jazz:configuration-debug-location?" "configuration-debug-environments?" "jazz:configuration-debug-environments?" "configuration-optimize?" "jazz:configuration-optimize?" "configuration-safety" "jazz:configuration-safety" "configuration-windowing" "jazz:configuration-windowing" "configuration-platform" "jazz:configuration-platform" "configuration-system" "jazz:configuration-system" "jazz:save-configuration" "system-platform" "file" "save-configuration" "cons" "cdr" "configuration-name" "jazz:configuration-name" "not" "car" "configuration" "values" "null?" "if" "named" "anonymous" "split" "let" "configurations" "split-configurations" "define")}
    {Lisp-Entry "describe-configuration" define #f 413 9 413 36 ("or" "feedback" "jazz:feedback" "configuration-destination" "jazz:configuration-destination" "destination" "configuration-kernel-interpret?" "jazz:configuration-kernel-interpret?" "kernel-interpret?" "configuration-mutable-bindings?" "jazz:configuration-mutable-bindings?" "mutable-bindings?" "configuration-debug-source?" "jazz:configuration-debug-source?" "debug-source?" "configuration-debug-location?" "jazz:configuration-debug-location?" "debug-location?" "configuration-debug-environments?" "jazz:configuration-debug-environments?" "debug-environments?" "configuration-optimize?" "jazz:configuration-optimize?" "optimize?" "configuration-safety" "jazz:configuration-safety" "safety" "configuration-windowing" "jazz:configuration-windowing" "windowing" "configuration-platform" "jazz:configuration-platform" "platform" "configuration-system" "jazz:configuration-system" "system" "configuration-name" "jazz:configuration-name" "name" "let" "configuration")}
    {Lisp-Entry "configure" define #f 445 9 445 23 ("describe-configuration" "jazz:describe-configuration" "register-configuration" "jazz:register-configuration" "destination:" "kernel-interpret?:" "mutable-bindings?:" "debug-source?:" "debug-location?:" "debug-environments?:" "optimize?:" "safety:" "windowing:" "platform:" "system:" "name:" "new-configuration" "jazz:new-configuration" "configuration" "let" "destination" "kernel-interpret?" "mutable-bindings?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system" "unspecified-option" "jazz:unspecified-option" "name" "#!key")}
    {Lisp-Entry "require-name" define #f 482 9 482 26 ("default-name" "jazz:default-name" "or-option" "jazz:or-option" "name")}
    {Lisp-Entry "validate-name" define #f 486 9 486 27 ("error" "jazz:error" "symbol->string" "valid-filename?" "jazz:valid-filename?" "symbol?" "and" "not" "or" "if" "name")}
    {Lisp-Entry "valid-systems" define #f 497 8 497 26 ("gambit")}
    {Lisp-Entry "require-system" define #f 501 9 501 28 ("default-system" "jazz:default-system" "or-option" "jazz:or-option" "system")}
    {Lisp-Entry "validate-system" define #f 505 9 505 29 ("error" "jazz:error" "valid-systems" "jazz:valid-systems" "memq" "if" "system")}
    {Lisp-Entry "valid-platforms" define #f 516 8 516 28 ("unix" "windows" "mac")}
    {Lisp-Entry "guess-platform" define #f 522 9 522 28 ("windows" "else" "unix" "linux-gnu" "mac" "apple" "eq?" "cond" "caddr" "os" "system-type" "cadr" "system" "let")}
    {Lisp-Entry "require-platform" define #f 530 9 530 30 ("guess-platform" "jazz:guess-platform" "default-platform" "jazz:default-platform" "or-option" "jazz:or-option" "platform")}
    {Lisp-Entry "validate-platform" define #f 534 9 534 31 ("error" "jazz:error" "valid-platforms" "jazz:valid-platforms" "memq" "if" "platform")}
    {Lisp-Entry "valid-windowings" define #f 545 8 545 29 ("x11" "carbon")}
    {Lisp-Entry "require-windowing" define #f 551 9 551 31 ("default-windowing" "jazz:default-windowing" "or-option" "jazz:or-option" "unix" "windows" "x11" "mac" "case" "guess-windowing" "define" "windowing" "platform")}
    {Lisp-Entry "validate-windowing" define #f 561 9 561 32 ("error" "jazz:error" "valid-windowings" "jazz:valid-windowings" "memq" "if" "windowing")}
    {Lisp-Entry "valid-safeties" define #f 572 8 572 27 ("release" "debug" "core")}
    {Lisp-Entry "require-safety" define #f 578 9 578 28 ("default-safety" "jazz:default-safety" "or-option" "jazz:or-option" "safety")}
    {Lisp-Entry "validate-safety" define #f 582 9 582 29 ("error" "jazz:error" "valid-safeties" "jazz:valid-safeties" "memq" "if" "safety")}
    {Lisp-Entry "valid-optimize" define #f 593 8 593 27 ()}
    {Lisp-Entry "require-optimize?" define #f 598 9 598 31 ("default-optimize?" "jazz:default-optimize?" "or-option" "jazz:or-option" "optimize")}
    {Lisp-Entry "validate-optimize?" define #f 602 9 602 32 ("error" "jazz:error" "valid-optimize" "jazz:valid-optimize" "memq" "if" "optimize")}
    {Lisp-Entry "valid-debug-environments" define #f 613 8 613 37 ()}
    {Lisp-Entry "require-debug-environments?" define #f 618 9 618 41 ("default-debug-environments?" "jazz:default-debug-environments?" "or-option" "jazz:or-option" "debug-environments")}
    {Lisp-Entry "validate-debug-environments?" define #f 622 9 622 42 ("error" "jazz:error" "valid-debug-environments" "jazz:valid-debug-environments" "memq" "if" "debug-environments")}
    {Lisp-Entry "valid-debug-location" define #f 633 8 633 33 ()}
    {Lisp-Entry "require-debug-location?" define #f 638 9 638 37 ("default-debug-location?" "jazz:default-debug-location?" "or-option" "jazz:or-option" "debug-location")}
    {Lisp-Entry "validate-debug-location?" define #f 642 9 642 38 ("error" "jazz:error" "valid-debug-location" "jazz:valid-debug-location" "memq" "if" "debug-location")}
    {Lisp-Entry "valid-debug-source" define #f 653 8 653 31 ()}
    {Lisp-Entry "require-debug-source?" define #f 658 9 658 35 ("default-debug-source?" "jazz:default-debug-source?" "or-option" "jazz:or-option" "debug-source")}
    {Lisp-Entry "validate-debug-source?" define #f 662 9 662 36 ("error" "jazz:error" "valid-debug-source" "jazz:valid-debug-source" "memq" "if" "debug-source")}
    {Lisp-Entry "valid-mutable-bindings" define #f 673 8 673 35 ()}
    {Lisp-Entry "require-mutable-bindings?" define #f 678 9 678 39 ("default-mutable-bindings?" "jazz:default-mutable-bindings?" "or-option" "jazz:or-option" "mutable-bindings")}
    {Lisp-Entry "validate-mutable-bindings?" define #f 682 9 682 40 ("error" "jazz:error" "valid-mutable-bindings" "jazz:valid-mutable-bindings" "memq" "if" "mutable-bindings")}
    {Lisp-Entry "valid-kernel-interpret" define #f 693 8 693 35 ()}
    {Lisp-Entry "require-kernel-interpret?" define #f 698 9 698 39 ("default-kernel-interpret?" "jazz:default-kernel-interpret?" "or-option" "jazz:or-option" "kernel-interpret")}
    {Lisp-Entry "validate-kernel-interpret?" define #f 702 9 702 40 ("error" "jazz:error" "valid-kernel-interpret" "jazz:valid-kernel-interpret" "memq" "if" "kernel-interpret")}
    {Lisp-Entry "require-destination" define #f 713 9 713 33 ("default-destination" "jazz:default-destination" "or-option" "jazz:or-option" "destination")}
    {Lisp-Entry "validate-destination" define #f 717 9 717 34 ("error" "jazz:error" "string?" "not" "or" "if" "destination")}
    {Lisp-Entry "configuration-directory" define #f 723 9 723 37 ("configuration-destination" "jazz:configuration-destination" "configuration-name" "jazz:configuration-name" "destination-directory" "jazz:destination-directory" "configuration")}
    {Lisp-Entry "configuration-file" define #f 730 9 730 32 ("string-append" "configuration-directory" "jazz:configuration-directory" "dir" "let" "configuration")}
    {Lisp-Entry "make-symbols" define #f 740 9 740 26 ("console-port" "newline" "tail" "list" ">=" "fixnum?" "-jobs" "-j" "jobs:" "j:" "set!" "parse-link" "jazz:parse-link" "value" "-link" "link:" "option" "for-each" "make-product" "jazz:make-product" "make-install" "jazz:make-install" "install" "make-kernel" "jazz:make-kernel" "kernel" "make-cleanlibrary" "jazz:make-cleanlibrary" "cleanlibrary" "make-cleanobject" "jazz:make-cleanobject" "cleanobject" "make-cleankernel" "jazz:make-cleankernel" "cleankernel" "make-clean" "jazz:make-clean" "clean" "case" "make-target" "name" "jobs" "link" "symbol" "make-symbol" "cadr" "cons" "cddr" "cdr" "pair?" "symbol->string" "string-ref" "eqv?" "and" "keyword?" "symbol?" "or" "car" "obj" "reverse" "null?" "options" "syms" "scan" "iter" "parse-symbols" "error" "jazz:error" "else" "executable" "exe" "library" "lib" "memv" "cond" "require-configuration" "jazz:require-configuration" "require-default-configuration" "jazz:require-default-configuration" "default-target" "jazz:default-target" "string=?" "at" "0" "substring" "string->symbol" "standardize-image" "string-length" "1" "+" "=" "image" "configuration" "target" "lambda" "parse-target/configuration" "not" "if" "string-find" "jazz:string-find" "colon" "let" "proc" "str" "parse-target/configuration/image" "define" "local?" "symbols")}
    {Lisp-Entry "make" define #f 836 9 836 18 ("list" "make-symbols" "jazz:make-symbols" "symbol")}
    {Lisp-Entry "clean-toplevel-file?" define #f 845 9 845 34 ("pathname-name" "jazz:pathname-name" "member" "not" "ignored-toplevel-files" "define" "level" "file")}
    {Lisp-Entry "clean-toplevel-directory?" define #f 852 9 852 39 ("pathname-name" "jazz:pathname-name" "member" "not" "ignored-toplevel-directories" "define" "level" "dir")}
    {Lisp-Entry "make-clean" define #f 859 9 859 24 ("empty-directory" "jazz:empty-directory" "clean-toplevel-directory?" "jazz:clean-toplevel-directory?" "level" "lambda" "clean-toplevel-file?" "jazz:clean-toplevel-file?" "0" "delete-directory" "jazz:delete-directory" "file-exists?" "if" "configuration-directory" "jazz:configuration-directory" "dir" "let" "feedback" "jazz:feedback" "1" "jazz:delete-feedback" "delete-feedback" "define" "configuration")}
    {Lisp-Entry "make-cleankernel" define #f 880 9 880 30 ("empty-directory" "jazz:empty-directory" "pathname-name" "jazz:pathname-name" "string=?" "not" "clean-toplevel-directory?" "jazz:clean-toplevel-directory?" "and" "level" "lambda" "clean-toplevel-file?" "jazz:clean-toplevel-file?" "0" "delete-directory" "jazz:delete-directory" "file-exists?" "if" "configuration-directory" "jazz:configuration-directory" "dir" "let" "feedback" "jazz:feedback" "1" "jazz:delete-feedback" "delete-feedback" "define" "configuration")}
    {Lisp-Entry "make-cleanobject" define #f 902 9 902 30 ("pathname-name" "jazz:pathname-name" "string=?" "lambda" "0" "delete-directory" "jazz:delete-directory" "file-exists?" "if" "configuration-directory" "jazz:configuration-directory" "feedback" "jazz:feedback" "cleanup-package" "jazz:cleanup-package" "empty-directory" "jazz:empty-directory" "dir" "empty-objects" "numeric-extension?" "jazz:numeric-extension?" "extension?" "jazz:extension?" "or" "pathname-extension" "jazz:pathname-extension" "ext" "let" "level" "file" "object-file?" "2" "jazz:delete-feedback" "delete-feedback" "define" "configuration")}
    {Lisp-Entry "make-cleanlibrary" define #f 941 9 941 31 ("pathname-name" "jazz:pathname-name" "string=?" "lambda" "0" "delete-directory" "jazz:delete-directory" "file-exists?" "if" "configuration-directory" "jazz:configuration-directory" "feedback" "jazz:feedback" "cleanup-package" "jazz:cleanup-package" "empty-directory" "jazz:empty-directory" "dir" "empty-libraries" "numeric-extension?" "jazz:numeric-extension?" "extension?" "jazz:extension?" "or" "pathname-extension" "jazz:pathname-extension" "ext" "let" "level" "file" "library-file?" "2" "jazz:delete-feedback" "delete-feedback" "define" "configuration")}
    {Lisp-Entry "cleanup-package" define #f 980 9 980 29 ("else" "delete-file" "string-append" "path" "string=?" "if" "car" "name" "1" "0" "length" "case" "directory-content" "jazz:directory-content" "content" "let" "feedback" "level" "dir")}
    {Lisp-Entry "delete-feedback" define #f 994 9 994 29 ("feedback" "jazz:feedback" "<=" "if" "level" "path" "lambda" "depth")}
    {Lisp-Entry "make-install" define #f 1005 9 1005 26 ("error" "jazz:error" "configuration")}
    {Lisp-Entry "make-kernel" define #f 1014 9 1014 25 ("kernel" ",argument" ",jam" "arguments:" "path:" "list" "call-process" "jazz:call-process" "symbol->string" "format" "jazz:format" "argument" "string-append" "jam" "target" "build-recursive" "load-configuration" "jazz:load-configuration" "file-exists?" "if" "jazz:configuration-file" "configuration-file" "require-default-configuration" "jazz:require-default-configuration" "or" "feedback" "jazz:feedback" "console?:" "kernel?:" "image:" "destination-directory:" "destination:" "source:" "kernel-interpret?:" "include-compiler?:" "mutable-bindings?:" "debug-source?:" "debug-location?:" "debug-environments?:" "optimize?:" "safety:" "windowing:" "platform:" "system:" "build-image" "jazz:build-image" "configuration-directory" "jazz:configuration-directory" "destination-directory" "configuration-destination" "jazz:configuration-destination" "destination" "jazz:source" "source" "configuration-kernel-interpret?" "jazz:configuration-kernel-interpret?" "kernel-interpret?" "configuration-mutable-bindings?" "jazz:configuration-mutable-bindings?" "mutable-bindings?" "configuration-debug-source?" "jazz:configuration-debug-source?" "debug-source?" "configuration-debug-location?" "jazz:configuration-debug-location?" "debug-location?" "configuration-debug-environments?" "jazz:configuration-debug-environments?" "debug-environments?" "configuration-optimize?" "jazz:configuration-optimize?" "optimize?" "configuration-safety" "jazz:configuration-safety" "safety" "configuration-windowing" "jazz:configuration-windowing" "windowing" "configuration-platform" "jazz:configuration-platform" "platform" "configuration-system" "jazz:configuration-system" "system" "configuration-name" "jazz:configuration-name" "name" "let" "build" "build-kernel" "define" "local?" "image" "configuration")}
    {Lisp-Entry "make-product" define #f 1078 9 1078 26 ("number->string" "if" "symbol->string" "arguments:" "configuration-directory" "jazz:configuration-directory" "string-append" "path:" "list" "call-process" "jazz:call-process" "make-kernel" "jazz:make-kernel" "jobs" "link" "configuration" "product")}
    {Lisp-Entry "print" define #f 1094 9 1094 19 ("newline" "display" "output" "line")}
    {Lisp-Entry "debug" define #f 1099 9 1099 19 ("console-port" "print" "jazz:print" "rest")}
    {Lisp-Entry "format" define #f 1108 9 1108 20 ("get-output-string" "open-output-string" "else" "write-char" "eqv?" "cond" "begin" "eof-object?" "not" "if" "c" "iter" "newline" "%" "write" "s" "cdr" "set!" "car" "display" "a" "case" "read-char" "read" "directive" "format-directive" "done?" "open-input-string" "control" "let" "output" "format-to" "define" "arguments" "fmt-string")}
    {Lisp-Entry "collect-if" define #f 1147 9 1147 24 ("cdr" "cons" "car" "value" "null?" "not" "if" "scan" "iter" "let" "lst" "predicate")}
    {Lisp-Entry "filter" define #f 1157 9 1157 20 ("cons" "eq?" "new-tail" "cdr" "tail" "car" "head" "null?" "if" "recur" "let" "lis" "pred")}
    {Lisp-Entry "delete" define #f 1169 9 1169 20 ("not" "y" "lambda" "filter" "jazz:filter" "test" "lis" "x")}
    {Lisp-Entry "string-find" define #f 1178 9 1178 25 ("1" "+" "else" "string-ref" "char=?" ">=" "cond" "0" "n" "iter" "string-length" "len" "let" "c" "str")}
    {Lisp-Entry "string-ends-with?" define #f 1189 9 1189 31 ("-" "substring" "string=?" ">=" "and" "tl" "string-length" "sl" "let" "target" "str")}
    {Lisp-Entry "split-string" define #f 1196 9 1196 26 ("+" "substring" "cons" "set!" "string-ref" "eqv?" "begin" "0" ">=" "if" "1" "-" "pos" "iter" "string-length" "end" "lst" "let" "separator" "str")}
    {Lisp-Entry "join-strings" define #f 1210 9 1210 26 ("get-output-string" "cdr" "string" "lambda" "for-each" "car" "display" "open-output-string" "output" "let" "separator" "strings")}
    {Lisp-Entry "valid-filename?" define #f 1225 9 1225 29 ("memv" "char-numeric?" "char-alphabetic?" "or" "string-ref" "c" "0" "<" "if" "1" "string-length" "-" "n" "iter" "let" "str")}
    {Lisp-Entry "error" define #f 1242 9 1242 19 ("error" "format" "jazz:format" "apply" "error-string" "let" "rest" "fmt-string")}
    {Lisp-Entry "prompt" define #f 1252 8 1252 19 ()}
    {Lisp-Entry "display-exception?" define #f 1255 8 1255 31 ()}
    {Lisp-Entry "display-backtrace?" define #f 1258 8 1258 31 ()}
    {Lisp-Entry "build-system-repl" define #f 1262 9 1262 31 ("set!" "continuation-return" "with-exception-handler" "stop" "processed?" "read-line" "prompt" "jazz:prompt" "display" "newline" "newline?" "loop" "process-jamini" "jazz:process-jamini" "load-configurations" "jazz:load-configurations" "setup-settings" "jazz:setup-settings" "force-output" "get-jazz-version-number" "jazz:get-jazz-version-number" "present-version" "jazz:present-version" "format" "jazz:format" "console-port" "1000" "0" "display-continuation-backtrace" "cont" "continuation-capture" "display-backtrace?" "jazz:display-backtrace?" "display-exception" "display-exception?" "jazz:display-exception?" "console" "exc" "debug-exception" "exit" "print" "jazz:print" "make-symbols" "jazz:make-symbols" "setup-kernel-build" "jazz:setup-kernel-build" "jazz:configure" "apply" "require-configuration" "jazz:require-configuration" "delete-configuration" "jazz:delete-configuration" "car" "null?" "name" "list-configurations" "jazz:list-configurations" "error" "jazz:error" "else" "quit" "help-command" "?" "help" "make-command" "make" "configure-command" "configure" "delete-command" "delete" "list-command" "list" "case" "read-all" "arguments" "begin" "read" "let" "input" "lambda" "call-with-input-string" "quit-command" "eof-object?" "if" "output" "command" "process-command" "define")}
    {Lisp-Entry "build-system-boot" define #f 1347 9 1347 31 ("##repl-debug-main" "print" "jazz:print" "console-port" "console" "or" "map" "make-symbols" "jazz:make-symbols" "setup-kernel-build" "jazz:setup-kernel-build" "destination:" "kernel-interpret?:" "mutable-bindings?:" "debug-source?:" "debug-location?:" "debug-environments?:" "optimize?:" "safety:" "windowing:" "platform:" "system:" "name:" "configure" "jazz:configure" "destination" "kernel-interpret" "mutable-bindings" "debug-source" "debug-location" "debug-environments" "optimize" "safety" "windowing" "platform" "system" "remaining" "lambda" "split-command-line" "jazz:split-command-line" "require-configuration" "jazz:require-configuration" "delete-configuration" "jazz:delete-configuration" "list-configurations" "jazz:list-configurations" "equal?" "process-jamini" "jazz:process-jamini" "load-configurations" "jazz:load-configurations" "setup-settings" "jazz:setup-settings" "arguments" "car" "action" "build-system-repl" "jazz:build-system-repl" "null?" "command-line" "cdr" "command-arguments" "unknown-option" "else" "string-ci=?" "cond" "boolean-option" "string->symbol" "symbol-option" "unspecified-option" "jazz:unspecified-option" "not" "if" "get-option" "jazz:get-option" "let" "options" "name" "string-option" "read" "init:" "list" "call-with-input-string" "arg" "read-argument" "format" "jazz:format" "opt" "missing-argument-for-option" "1" "exit" "force-output" "newline" "display" "message" "fatal" "define")}
    {Lisp-Entry "kernel-system" define #f 1448 8 1448 26 ("gambit")}
    {Lisp-Entry "kernel-platform" define #f 1451 8 1451 28 ()}
    {Lisp-Entry "kernel-windowing" define #f 1454 8 1454 29 ()}
    {Lisp-Entry "kernel-safety" define #f 1457 8 1457 26 ("debug")}
    {Lisp-Entry "kernel-optimize?" define #f 1460 8 1460 29 ()}
    {Lisp-Entry "kernel-debug-environments?" define #f 1463 8 1463 39 ()}
    {Lisp-Entry "kernel-debug-location?" define #f 1466 8 1466 35 ()}
    {Lisp-Entry "kernel-debug-source?" define #f 1469 8 1469 33 ()}
    {Lisp-Entry "kernel-mutable-bindings?" define #f 1472 8 1472 37 ()}
    {Lisp-Entry "kernel-destination" define #f 1475 8 1475 31 ()}
    {Lisp-Entry "load-kernel-base" define #f 1479 9 1479 30 ("source" "jazz:source" "string-append" "load")}
    {Lisp-Entry "load-kernel-build" define #f 1484 9 1484 31 ("source" "jazz:source" "string-append" "load")}
    {Lisp-Entry "setup-kernel-build" define #f 1500 8 1500 31 ("set!" "process-buildini" "jazz:process-buildini" "load-kernel-build" "jazz:load-kernel-build" "begin" "not" "if" "lambda" "kernel-build-setup?" "let")}
    {Lisp-Entry "process-jamini" define #f 1510 9 1510 28 ("load-global/local-configurations" "jazz:load-global/local-configurations")}})
"common"
 ({Lisp-File-Entry {File :context "runtime" "common.scm"} 236918186. scheme
    {Lisp-Entry "kernel.common" block #f 37 7 37 20 ("kernel-declares" "jazz:kernel-declares")
      {Lisp-Entry "load" define #f 50 13 50 22 ("void" "lambda" "%%load" "%%car" "%%null?" "if" "quiet?" "let" "rest" "pathname")}
      {Lisp-Entry "load" define #f 56 13 56 22 ("load" "rest" "pathname")}
      {Lisp-Entry "debugger" define-macro ("variable") 65 22 65 35 ()}
      {Lisp-Entry "compile-options" define-macro ("variable") 68 22 68 42 ("debug-source" "kernel-debug-source?" "jazz:kernel-debug-source?" "debug-location" "kernel-debug-location?" "jazz:kernel-debug-location?" "debug-environments" "kernel-debug-environments?" "jazz:kernel-debug-environments?" "if")}
      {Lisp-Entry "link" define-macro ("variable") 73 22 73 31 ()}
      {Lisp-Entry "link-options" define-macro ("variable") 76 22 76 39 ()}
      {Lisp-Entry "jobs" define-macro ("variable") 79 22 79 31 ()}
      {Lisp-Entry "warnings" define-macro ("variable") 82 22 82 35 ()}
      {Lisp-Entry "link-objects?" define #f 85 9 85 27 ("link-options" "jazz:link-options" "objects" "%%memq")}
      {Lisp-Entry "link-libraries?" define #f 88 9 88 29 ("link-options" "jazz:link-options" "libraries" "%%memq")}
      {Lisp-Entry "jazzini" define #f 91 8 91 20 ()}
      {Lisp-Entry "buildini" define #f 94 8 94 21 ()}
      {Lisp-Entry "load-configuration-files" define #f 98 9 98 38 ("install-path" "jazz:install-path" "local" "jazz-settings-directory" "jazz:jazz-settings-directory" "%%string-append" "global" "let" "load" "jazz:load" "file-exists?" "if" "file" "load-if-exists" "define" "install?" "filename")}
      {Lisp-Entry "process-jazzini" define #f 111 9 111 29 ("jazzini" "jazz:jazzini" "load-configuration-files" "jazz:load-configuration-files" "install?")}
      {Lisp-Entry "process-buildini" define #f 114 9 114 30 ("buildini" "jazz:buildini" "load-configuration-files" "jazz:load-configuration-files" "install?")}
      {Lisp-Entry "manifest-needs-rebuild?" define-macro ("variable") 123 22 123 50 ("rest" "lambda")}
      {Lisp-Entry "get-changed-units" define-macro ("variable") 127 22 127 44 ()}
      {Lisp-Entry "push-changed-units" define-macro ("variable") 128 22 128 45 ()}
      {Lisp-Entry "reset-changed-units" define-macro ("variable") 129 22 129 46 ()}
      {Lisp-Entry "build-image" define-macro ("variable") 130 22 130 38 ()}
      {Lisp-Entry "build-library" define-macro ("variable") 131 22 131 40 ()}
      {Lisp-Entry "custom-compile/build" define #f 139 9 139 34 ("lambda" "for-each" "begin" "error" "jazz:error" ",force?" "force?:" ",@compile-args" "compile-unit" "jazz:compile-unit" "apply" "assq" "compile-args" "let" "if" "load-build" "jazz:load-build" "force?" "pre-build" "unit" "#!key" "unit-specs")}
      {Lisp-Entry "build-feedback" define #f 159 8 159 27 ("feedback" "jazz:feedback")}
      {Lisp-Entry "listify" define #f 168 9 168 21 ("%%list" "%%pair?" "%%null?" "or" "if" "obj")}
      {Lisp-Entry "collect-if" define #f 174 9 174 24 ("%%cdr" "%%cons" "%%car" "value" "%%null?" "%%not" "if" "scan" "iter" "let" "proper-tail-calls" "declare" "lst" "predicate")}
      {Lisp-Entry "collect" define #f 185 9 185 21 ("%%cdr" "%%cons" "%%car" "value" "%%null?" "%%not" "if" "scan" "iter" "let" "proper-tail-calls" "declare" "lst" "test")}
      {Lisp-Entry "remove" define #f 196 9 196 20 ("%%cons" "%%cdr" "%%eq?" "%%car" "value" "%%null?" "%%not" "if" "scan" "iter" "let" "proper-tail-calls" "declare" "lst" "item")}
      {Lisp-Entry "string-find" define #f 212 9 212 25 ("1" "%%fx+" "else" "%%string-ref" "%%char=?" "%%fx>=" "cond" "n" "iter" "%%string-length" "len" "let" "proper-tail-calls" "declare" "0" "start" "#!optional" "c" "str")}
      {Lisp-Entry "string-find-reversed" define #f 224 9 224 34 ("else" "%%string-ref" "%%char=?" "0" "%%fx<" "cond" "1" "%%string-length" "%%fx-" "n" "iter" "let" "proper-tail-calls" "declare" "c" "str")}
      {Lisp-Entry "string-starts-with?" define #f 235 9 235 33 ("0" "%%substring" "%%string=?" "%%fx>=" "and" "tl" "%%string-length" "sl" "let" "target" "str")}
      {Lisp-Entry "string-starts-with-ci?" define #f 242 9 242 36 ("0" "%%substring" "%%string-ci=?" "%%fx>=" "and" "tl" "%%string-length" "sl" "let" "target" "str")}
      {Lisp-Entry "string-ends-with?" define #f 249 9 249 31 ("%%fx-" "%%substring" "%%string=?" "%%fx>=" "and" "tl" "%%string-length" "sl" "let" "target" "str")}
      {Lisp-Entry "string-numeric?" define #f 256 9 256 29 ("%%memv" "%%string-ref" "c" "0" "%%fx>=" "if" "1" "%%string-length" "%%fx-" "n" "iter" "let" "str")}
      {Lisp-Entry "split-string" define #f 266 9 266 26 ("%%fx+" "%%substring" "%%cons" "set!" "%%string-ref" "%%eqv?" "begin" "0" "%%fx>=" "if" "1" "%%fx-" "pos" "iter" "%%string-length" "end" "lst" "let" "proper-tail-calls" "declare" "separator" "str")}
      {Lisp-Entry "join-strings" define #f 281 9 281 26 ("get-output-string" "%%cdr" "string" "lambda" "for-each" "%%car" "display" "open-output-string" "output" "let" "separator" "strings")}
      {Lisp-Entry "require" anonymous #f 298 5 298 12 ("lolevel")}
      {Lisp-Entry "global-bound?" define #f 300 13 300 31 ("global-bound?" "symbol")}
      {Lisp-Entry "global-ref" define #f 303 13 303 28 ("global-ref" "symbol")}
      {Lisp-Entry "global-bound?" define #f 307 13 307 31 ("%%global-var-ref" "%%unbound?" "%%not" "%%global-var?" "and" "symbol")}
      {Lisp-Entry "global-ref" define #f 311 13 311 28 ("%%global-var-ref" "symbol")}
      {Lisp-Entry "global-set!" define #f 314 13 314 29 ("%%global-var-set!" "value" "symbol")}
      {Lisp-Entry "break-reference" define #f 320 9 320 29 ("%%string-length" "1" "%%fx+" "0" "%%substring" "%%string->symbol" "values" "%%not" "if" "string-find" "jazz:string-find" "n" "%%symbol->string" "str" "let" "identifier")}
      {Lisp-Entry "compose-identifier" define #f 329 9 329 32 ("symbol->string" "map" "join-strings" "jazz:join-strings" "%%string->symbol" "rest")}
      {Lisp-Entry "compose-reference" define #f 333 9 333 31 ("symbol->string" "map" "join-strings" "jazz:join-strings" "%%string->symbol" "rest")}
      {Lisp-Entry "iterate-table" define #f 342 9 342 27 ("%%table-for-each" "proc" "table")}
      {Lisp-Entry "iterate-table-safe" define #f 346 9 346 32 ("%%table->list" "%%cdr" "%%car" "pair" "lambda" "for-each" "proc" "table")}
      {Lisp-Entry "executable-directory" define-macro ("variable") 357 22 357 47 ()}
      {Lisp-Entry "pathname-name" define #f 361 9 361 27 ("%%fx+" "else" "0" "%%substring" "pathname-name" "jazz:pathname-name" "1" "%%fx-" "%%fx=" "%%not" "cond" "%%string-length" "len" "string-find-reversed" "jazz:string-find-reversed" "pos" "let" "pathname")}
      {Lisp-Entry "pathname-base" define #f 372 9 372 27 ("0" "%%substring" "if" "string-find-reversed" "jazz:string-find-reversed" "pos" "pathname-name" "jazz:pathname-name" "name" "let" "pathname")}
      {Lisp-Entry "pathname-extension" define #f 380 9 380 32 ("%%string-length" "1" "%%fx+" "%%substring" "if" "string-find-reversed" "jazz:string-find-reversed" "pos" "pathname-name" "jazz:pathname-name" "name" "let" "pathname")}
      {Lisp-Entry "extension?" define #f 388 9 388 24 ("%%string=?" "%%not" "and" "or" "target" "extension")}
      {Lisp-Entry "numeric-extension?" define #f 395 9 395 32 ("%%string-length" "%%substring" "string-numeric?" "jazz:string-numeric?" "string-starts-with?" "jazz:string-starts-with?" "and" "prefix" "extension")}
      {Lisp-Entry "executable-extension" define #f 401 9 401 34 ("else" "windows" "case" "platform")}
      {Lisp-Entry "pathname-dir" define #f 409 9 409 26 ("1" "%%fx+" "0" "%%substring" "%%not" "if" "string-find-reversed" "jazz:string-find-reversed" "pos" "let" "pathname")}
      {Lisp-Entry "file-modification-time" define #f 416 9 416 36 ("file-last-modification-time" "time->seconds" "pathname")}
      {Lisp-Entry "add-extension" define #f 420 9 420 27 ("%%string-append" "%%not" "if" "extension" "filename")}
      {Lisp-Entry "copy-file" define #f 426 9 426 23 ("copy-file" "delete-file" "file-exists?" "begin" "file-needs-update?" "jazz:file-needs-update?" "if" "feedback" "#!key" "dst" "src")}
      {Lisp-Entry "copy-files" define #f 436 9 436 24 ("directory-files" "feedback:" "copy-file" "jazz:copy-file" "regular" "file-info" "file-info-type" "case" "dst-pathname" "string-append" "src-pathname" "let" "file" "lambda" "for-each" "create-directory" "begin" "file-exists?" "not" "if" "feedback" "#!key" "dst" "src")}
      {Lisp-Entry "file-needs-update?" define #f 451 9 451 32 ("file-modification-time" "jazz:file-modification-time" ">" "file-exists?" "%%not" "or" "dst" "src")}
      {Lisp-Entry "relativise-directory" define #f 457 9 457 34 ("or" "%%string-append" "set!" "%%string-ref" "%%eqv?" "begin" "1" "%%fx-" "n" "iter" "relative-dir" "suffix" "0" "%%substring" "%%string=?" "%%fx>=" "and" "if" "rootlen" "baselen" "%%string-length" "targlen" "pathname-normalize" "jazz:pathname-normalize" "let" "targdir" "rootdir" "basedir")}
      {Lisp-Entry "absolutize-directory" define #f 480 9 480 34 ("%%string-append" "pathname-normalize" "jazz:pathname-normalize" "string-starts-with?" "jazz:string-starts-with?" "or" "if" "reldir" "basedir")}
      {Lisp-Entry "quote-pathname" define #f 487 9 487 28 ("else" "string-append" "windows" "case" "kernel-platform" "jazz:kernel-platform" "platform" "#!optional" "pathname")}
      {Lisp-Entry "quote-jazz-pathname" define #f 496 9 496 33 ("kernel-source" "jazz:kernel-source" "string-append" "path-expand" "quote-pathname" "jazz:quote-pathname" "suffix")}
      {Lisp-Entry "file-exists?" define #f 502 12 502 29 ("file-exists?")}
      {Lisp-Entry "updated-digest-source?" define #f 513 9 513 36 ("sha-1" "digest-file" "%%digest-hash-set!" "%%digest-time-set!" "begin" "%%digest-time" "=" "if" "file-modification-time" "jazz:file-modification-time" "time" "let" "src-filepath" "digest")}
      {Lisp-Entry "Manifest-Extension" define #f 528 8 528 31 ()}
      {Lisp-Entry "Digest-Extension" define #f 531 8 531 29 ()}
      {Lisp-Entry "load-source-digests" define #f 535 9 535 33 ("%%make-digest" "%%cddr" "source-time" "%%cadr" "source-hash" "%%cdr" "%%car" "pathname" "form" "map" "read" "digest-forms" "let" "input" "lambda" "cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "file-exists?" "jazz:file-exists?" "if" "digest-filepath")}
      {Lisp-Entry "load-manifest" define #f 549 9 549 27 ("%%make-manifest" "%%cdr" "load-source-digests" "jazz:load-source-digests" "source-digests" "compile-time-hash" "references" "references-form" "digest" "digest-form" "%%cddr" "version" "%%assq" "version-form" "%%cadr" "name" "read" "form" "let" "input" "lambda" "cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "file-exists?" "jazz:file-exists?" "if" "manifest-filepath" "digest-filepath")}
      {Lisp-Entry "save-manifest" define #f 567 9 567 27 ("%%cdr" "module-references" "for-each" "%%car" "%%pair?" "begin" "if" "%%manifest-compile-time-hash" "write" "newline" "display" "output" "lambda" "kernel-platform" "jazz:kernel-platform" "platform-eol-encoding" "jazz:platform-eol-encoding" "eol-encoding:" "path:" "list" "call-with-output-file" "pathname-dir" "jazz:pathname-dir" "create-directories" "jazz:create-directories" "%%manifest-references" "references" "%%manifest-version" "version" "%%manifest-name" "name" "let" "manifest" "filepath")}
      {Lisp-Entry "filter" define #f 602 9 602 15 ("%%cdr" "filter" "%%cons" "%%car" "head" "let" "%%null?" "if" "lst" "proc")}
      {Lisp-Entry "save-digest" define #f 611 9 611 25 ("%%null?" "%%manifest-source-digests" "filter" "existing-files-digests" "let" "%%digest-time" "%%digest-hash" "%%digest-pathname" "pathname-normalize" "jazz:pathname-normalize" "write" "digest" "for-each" "newline" "display" "output" "lambda" "kernel-platform" "jazz:kernel-platform" "platform-eol-encoding" "jazz:platform-eol-encoding" "eol-encoding:" "path:" "list" "call-with-output-file" "pathname-dir" "jazz:pathname-dir" "create-directories" "jazz:create-directories" "digests" "save-digest" "delete-file" "file-exists?" "if" "delete-digest-file" "define" "manifest" "filepath")}
      {Lisp-Entry "find-source-digest" define #f 643 9 643 32 ("or" "%%cons" "%%manifest-source-digests-set!" "0" "%%make-digest" "new-digest" "%%cdr" "%%digest-pathname" "path=?" "jazz:path=?" "%%car" "digest" "%%pair?" "if" "%%manifest-source-digests" "digests" "iter" "pathname-normalize" "jazz:pathname-normalize" "pathname" "let" "find-digest" "define" "manifest" "src-pathname")}
      {Lisp-Entry "manifest-uptodate?" define #f 662 9 662 32 ("%%manifest-compile-time-hash" "%%digest-hash" "%%string=?" "and" "pathname-normalize" "jazz:pathname-normalize" "find-source-digest" "jazz:find-source-digest" "digest" "let" "manifest" "src-pathname")}
      {Lisp-Entry "load/create-manifest" define #f 668 9 668 34 ("kernel-version" "jazz:kernel-version" "%%make-manifest" "load-manifest" "jazz:load-manifest" "or" "manifest-filepath" "digest-filepath" "name")}
      {Lisp-Entry "load-updated-manifest" define #f 673 9 673 35 ("save-digest" "jazz:save-digest" "updated-digest-source?" "jazz:updated-digest-source?" "if" "find-source-digest" "jazz:find-source-digest" "and" "digest" "load/create-manifest" "jazz:load/create-manifest" "manifest" "let" "src-filepath" "manifest-filepath" "digest-filepath" "name")}
      {Lisp-Entry "update-manifest-compile-time" define #f 682 9 682 42 ("save-manifest" "jazz:save-manifest" "%%digest-hash" "%%manifest-compile-time-hash-set!" "%%manifest-references-set!" "if" "updated-digest-source?" "jazz:updated-digest-source?" "find-source-digest" "jazz:find-source-digest" "digest" "kernel-version" "jazz:kernel-version" "%%manifest-version-set!" "load/create-manifest" "jazz:load/create-manifest" "manifest" "let" "updated-references" "src-filepath" "manifest-filepath" "digest-filepath" "name")}
      {Lisp-Entry "Library-Extension" define #f 698 8 698 30 ()}
      {Lisp-Entry "Library-Manifest-Extension" define #f 699 8 699 39 ()}}})
"crash"
 ({Lisp-File-Entry {File :context "runtime" "crash.scm"} 236918186. scheme
    {Lisp-Entry "kernel.crash" block #f 39 7 39 19 ("#<<END-OF-DECLARES\n      #include <stdio.h>\n      #include <unistd.h>\n      #include <sys/types.h>\n      #include <signal.h>\n\n      static void error_signal_handler(int sig_num)\n      {\n        jazz_call_crash_reporter(sig_num);\n        fflush(stdout);\n        crash_call_exit();\n      }\n\n      static void setup_low_level_unix_crash_handler()\n      {\n        // core dumping signals\n        signal(SIGQUIT, error_signal_handler);\n        signal(SIGILL,  error_signal_handler);\n        signal(SIGABRT, error_signal_handler);\n        signal(SIGFPE,  error_signal_handler);\n        signal(SIGBUS,  error_signal_handler);\n        signal(SIGSEGV, error_signal_handler);\n        signal(SIGSYS,  error_signal_handler);\n      }\nEND-OF-DECLARES\n" "c-initialize" "#<<END-OF-DECLARES\n      static LONG WINAPI unhandled_exception_filter(LPEXCEPTION_POINTERS info)\n      {\n        jazz_call_crash_reporter(info);\n        return EXCEPTION_CONTINUE_SEARCH;\n      }\n\n      static void setup_low_level_windows_crash_handler()\n      {\n        SetUnhandledExceptionFilter(unhandled_exception_filter);\n      }\nEND-OF-DECLARES\n" "c-declare" "log-backtrace" "jazz:log-backtrace" "set-crash-reporter" "jazz:set-crash-reporter")
      {Lisp-Entry "log-backtrace" define #f 42 9 42 27 ("500" "current-error-port" "display-continuation-backtrace" "k" "lambda" "continuation-capture" "ignore")}
      {Lisp-Entry "call_crash_reporter" c-definition #f 53 15 53 39 ("ignore" "crash-reporter" "jazz:crash-reporter" "void" "pointer")}
      {Lisp-Entry "crash-process" define #f 73 12 73 30 ("void" "c-lambda")}
      {Lisp-Entry "call_crash_reporter" c-definition #f 77 14 77 38 ("ignore" "crash-reporter" "jazz:crash-reporter" "void" "int")}
      {Lisp-Entry "crash_call_exit" c-definition #f 80 14 80 29 ("1" "exit" "void")}
      {Lisp-Entry "crash-process" define #f 112 11 112 29 ("void" "c-lambda")}}})
"declares"
 ({Lisp-File-Entry {File :context "syntax" "declares.scm"} 236918186. scheme
    {Lisp-Entry "kernel.declares" block #f 37 7 37 22 ()
      {Lisp-Entry "kernel-declares" define-macro ("macro") 42 24 42 44 ("safe" "debug-user?" "jazz:debug-user?" "optimize-dead-local-variables" "proper-tail-calls" "kernel-optimize?" "jazz:kernel-optimize?" "inline" "not" "extended-bindings" "standard-bindings" "block" "kernel-mutable-bindings?" "jazz:kernel-mutable-bindings?" "debug-core?" "jazz:debug-core?" "or" "if" "declare")}
      {Lisp-Entry "declares" define #f 68 13 68 26 ("safe" "inline-primitives" "debug-user?" "jazz:debug-user?" "optimize-dead-local-variables" "proper-tail-calls" "kernel-optimize?" "jazz:kernel-optimize?" "inline" "extended-bindings" "standard-bindings" "block" "kernel-mutable-bindings?" "jazz:kernel-mutable-bindings?" "not" "release" "kernel-safety" "jazz:kernel-safety" "unit" "eq?" "and" "if" "declare" "kind")}}})
"digest"
 ({Lisp-File-Entry {File :context "runtime" "digest.scm"} 236918186. scheme
    {Lisp-Entry "fx+" define-macro #f 18 15 18 18 (",@args" "##fx+" "args")}
    {Lisp-Entry "fx-" define-macro #f 19 15 19 18 (",@args" "##fx-" "args")}
    {Lisp-Entry "fx*" define-macro #f 20 15 20 18 (",@args" "##fx*" "args")}
    {Lisp-Entry "fxquotient" define-macro #f 21 15 21 25 (",@args" "##fxquotient" "args")}
    {Lisp-Entry "fxmin" define-macro #f 22 15 22 20 (",@args" "##fxmin" "args")}
    {Lisp-Entry "fx=" define-macro #f 23 15 23 18 (",@args" "##fx=" "args")}
    {Lisp-Entry "fx<" define-macro #f 24 15 24 18 (",@args" "##fx<" "args")}
    {Lisp-Entry "fx>" define-macro #f 25 15 25 18 (",@args" "##fx>" "args")}
    {Lisp-Entry "fx<=" define-macro #f 26 15 26 19 (",@args" "##fx<=" "args")}
    {Lisp-Entry "fx>=" define-macro #f 27 15 27 19 (",@args" "##fx>=" "args")}
    {Lisp-Entry "fxnot" define-macro #f 28 15 28 20 (",@args" "##fxnot" "args")}
    {Lisp-Entry "fxand" define-macro #f 29 15 29 20 (",@args" "##fxand" "args")}
    {Lisp-Entry "fxior" define-macro #f 30 15 30 20 (",@args" "##fxior" "args")}
    {Lisp-Entry "fxxor" define-macro #f 31 15 31 20 (",@args" "##fxxor" "args")}
    {Lisp-Entry "fxarithmetic-shift-right" define-macro #f 32 15 32 39 (",@args" "##fxarithmetic-shift-right" "args")}
    {Lisp-Entry "fxarithmetic-shift-left" define-macro #f 33 15 33 38 (",@args" "##fxarithmetic-shift-left" "args")}
    {Lisp-Entry "make-vector" define-macro #f 34 15 34 26 (",@args" "##make-vector" "args")}
    {Lisp-Entry "make-u8vector" define-macro #f 35 15 35 28 (",@args" "##make-u8vector" "args")}
    {Lisp-Entry "u8vector" define-macro #f 36 15 36 23 (",@args" "##u8vector" "args")}
    {Lisp-Entry "u8vector-length" define-macro #f 37 15 37 30 (",@args" "##u8vector-length" "args")}
    {Lisp-Entry "u8vector-ref" define-macro #f 38 15 38 27 (",@args" "##u8vector-ref" "args")}
    {Lisp-Entry "u8vector-set!" define-macro #f 39 15 39 28 (",@args" "##u8vector-set!" "args")}
    {Lisp-Entry "read-subu8vector" define-macro #f 40 15 40 31 (",@args" "##read-subu8vector" "args")}
    {Lisp-Entry "string-append" define-macro #f 41 15 41 28 (",@args" "##string-append" "args")}
    {Lisp-Entry "make-string" define-macro #f 42 15 42 26 (",@args" "##make-string" "args")}
    {Lisp-Entry "open-input-file" define-macro #f 43 15 43 30 (",@args" "##open-input-file" "args")}
    {Lisp-Entry "close-input-port" define-macro #f 44 15 44 31 (",@args" "##close-input-port" "args")}
    {Lisp-Entry "number->string" define-macro #f 45 15 45 29 (",@args" "##number->string" "args")}
    {Lisp-Entry "digest" define #f 49 13 49 19 ("state" "update" "end" "digest-f65996cb-c1aa-4ee9-86cd-1af55b5ddb74" "id:")}
    {Lisp-Entry "hash-block->hex-string" define #f 57 9 57 31 ("8" "12" "fxarithmetic-shift-right" "string-set!" "j2" "2" "fx+" "j1" "fxxor" "vector-ref" "0" "fx<" "if" "j" "1" "fx-" "i" "loop" "let" "make-string" "str" "4" "fx*" "n" "16" "fxquotient" "len" "let*" "15" "fxand" "string-ref" "x" "hex" "define" "width" "big-endian?" "hb")}
    {Lisp-Entry "hash-block->u8vector" define #f 89 9 89 29 ("#xff" "fxand" "8" "fxarithmetic-shift-right" "u8vector-set!" "j2" "fx+" "j1" "fxxor" "vector-ref" "x" "fx<" "if" "j" "1" "fx-" "i" "loop" "let" "0" "make-u8vector" "u8vect" "2" "fx*" "n" "16" "fxquotient" "len" "let*" "width" "big-endian?" "hb")}
    {Lisp-Entry "LO" define-macro #f 103 15 103 17 ("L" "symbol->string" "string-append" "string->symbol" "var")}
    {Lisp-Entry "HI" define-macro #f 107 15 107 17 ("H" "symbol->string" "string-append" "string->symbol" "var")}
    {Lisp-Entry "wlet" define-macro #f 111 15 111 19 (",body" ",hi" "H" ",lo" "L" "symbol->string" "string-append" "string->symbol" "let" "body" "hi" "lo" "var")}
    {Lisp-Entry "cast-u16" define-macro #f 120 15 120 23 (",x" "#xffff" "fxand" "x")}
    {Lisp-Entry "shift-left-u16" define-macro #f 123 15 123 29 (",shift" "1" "16" "2" "expt" "fx-" ",n" "fxand" "fxarithmetic-shift-left" "shift" "n")}
    {Lisp-Entry "wshr" define-macro #f 128 15 128 19 ("0" ",body" "fx-" "HI" "shift-left-u16" ",r" ",w" "LO" "fxarithmetic-shift-right" "fxior" ",dst" "wlet" "16" "fx<" "if" "body" "r" "w" "dst")}
    {Lisp-Entry "wrot" define-macro #f 141 15 141 19 ("32" ",body" "fx-" "HI" "fxarithmetic-shift-right" ",r" ",w" "LO" "shift-left-u16" "fxior" ",dst" "wlet" "16" "fx<" "if" "body" "r" "w" "dst")}
    {Lisp-Entry "wadd" define-macro #f 160 15 160 19 (",body" "16" "fxarithmetic-shift-right" "cast-u16" ",dst" "HI" ",b" ",a" "LO" "fx+" "R" "wlet" "body" "b" "a" "dst")}
    {Lisp-Entry "wxor" define-macro #f 171 15 171 19 (",body" "HI" ",b" ",a" "LO" "fxxor" ",dst" "wlet" "body" "b" "a" "dst")}
    {Lisp-Entry "wior" define-macro #f 177 15 177 19 (",body" "HI" ",b" ",a" "LO" "fxior" ",dst" "wlet" "body" "b" "a" "dst")}
    {Lisp-Entry "wand" define-macro #f 183 15 183 19 (",body" "HI" ",b" ",a" "LO" "fxand" ",dst" "wlet" "body" "b" "a" "dst")}
    {Lisp-Entry "wnot" define-macro #f 189 15 189 19 (",body" "HI" ",a" "LO" "fxnot" ",dst" "wlet" "body" "a" "dst")}
    {Lisp-Entry "wref" define-macro #f 195 15 195 19 (",i" ",body" "1" "0" "2" "fx*" "fx+" ",v" "vector-ref" ",dst" "wlet" "number?" "if" "body" "i" "v" "dst")}
    {Lisp-Entry "wset" define-macro #f 206 15 206 19 (",i" "HI" "1" ",x" "LO" "0" "2" "fx*" "fx+" ",v" "vector-set!" "begin" "number?" "if" "x" "i" "v")}
    {Lisp-Entry "block-digest" define #f 217 13 217 25 ("width" "big-endian?" "bit-pos" "block-pos" "block" "hash" "hash-update" "block-digest-f65996cb-c1aa-4ee9-86cd-1af55b5ddb74" "id:")}
    {Lisp-Entry "convert-hash-block" define #f 227 9 227 27 ("error" "else" "hash-block->u8vector" "u8vector" "block-digest-width" "block-digest-big-endian?" "hash-block->hex-string" "hex" "case" "block-digest-hash" "hash" "digest-state" "bd" "let*" "result-type" "digest")}
    {Lisp-Entry "process-last-block" define #f 244 9 244 27 ("u8vector-ref" "t" "fx>=" "3" "loop3" "block-digest-big-endian?" "fx+" "begin" "fx>" "7" "2" "i" "loop2" "fxarithmetic-shift-right" "#x01" "#x7f" "fxarithmetic-shift-left" "fxior" "1" "#xff" "u8vector-set!" "digest-update-subu8vector" "fxmin" "m" "fx<" "if" "n" "loop1" "448" "fx-" "511" "fxand" "fxquotient" "zero-padding-bytes" "let" "#x80" "digest-update-u8" "0" "8" "make-u8vector" "buf" "block-digest-bit-pos" "bit-pos" "block-digest-block-pos" "block-pos" "digest-state" "bd" "let*" "digest")}
    {Lisp-Entry "end-block-digest" define #f 300 9 300 25 ("convert-hash-block" "process-last-block" "result-type" "digest")}
    {Lisp-Entry "digest-update-block-digest" define #f 304 9 304 35 ("else" "cond" "block-digest-bit-pos" "2" "16" "block-digest-bit-pos-set!" "aligned16" "block-digest-block-pos" "block-digest-block-pos-set!" "block-digest-hash-update" "512" "vector-ref" "fx+" "new-bit-pos" "8" "u8vector-ref" "fxarithmetic-shift-left" "vector-set!" "1" "fxxor" "block-digest-big-endian?" "begin" "15" "fxand" "0" "fx=" "4" "fxarithmetic-shift-right" "j" "let" "fx<" "if" "bit-pos" "i" "aligned8" "define" "block-digest-block" "block" "digest-state" "bd" "let*" "end" "start" "u8vect" "digest")}
    {Lisp-Entry "hash-block-init-sha-1" define #f 402 9 402 30 ("#xc3d2" "#xe1f0" "#x1032" "#x5476" "#x98ba" "#xdcfe" "#xefcd" "#xab89" "#x6745" "#x2301" "vector")}
    {Lisp-Entry "digest-update-sha-1" define #f 409 9 409 28 ("NEWE" "NEWD" "NEWC" "NEWB" "NEWA" "80" "T5-H" "T5-L" "fx+" "30" "Y" "E" "5" "A" "Y-H" "Y-L" "#xca62" "#xc1d6" "else" "T7-H" "T7-L" "#x8f1b" "#xbcdc" "60" "T4-H" "T4-L" "#x6ed9" "#xeba1" "40" "T6-H" "T6-L" "stage3" "wadd" "#x5a82" "#x7999" "wlet" "wior" "D" "wnot" "C" "B" "wand" "20" "cond" "X-H" "X-L" "wset" "begin" "X" "wrot" "T7" "T6" "T5" "14" "T4" "T3" "wxor" "8" "T2" "fx-" "T1-H" "T1-L" "stage2" "T1" "16" "fx<" "if" "stage1" "define" "OLDE-H" "E-H" "OLDE-L" "E-L" "OLDD-H" "D-H" "OLDD-L" "D-L" "OLDC-H" "C-H" "OLDC-L" "C-L" "OLDB-H" "B-H" "OLDB-L" "B-L" "OLDA-H" "A-H" "OLDA-L" "A-L" "j" "loop" "let" "4" "OLDE" "3" "OLDD" "2" "OLDC" "1" "OLDB" "0" "OLDA" "wref" "block-digest-block" "block" "block-digest-hash" "hash" "digest-state" "bd" "let*" "digest")}
    {Lisp-Entry "open-digest-sha-1" define #f 498 9 498 26 ("0" "160" "make-vector" "hash-block-init-sha-1" "digest-update-sha-1" "make-block-digest" "digest-update-block-digest" "end-block-digest" "make-digest")}
    {Lisp-Entry "open-digest" define #f 513 9 513 20 ("error" "else" "open-digest-sha-1" "SHA-1" "sha-1" "case" "algorithm")}
    {Lisp-Entry "digest-default-result-type" define-macro #f 520 15 520 41 ("hex")}
    {Lisp-Entry "close-digest" define #f 522 9 522 21 ("digest-end" "digest-default-result-type" "result-type" "#!optional" "digest")}
    {Lisp-Entry "digest-update-subu8vector" define #f 528 9 528 34 ("digest-update" "end" "start" "u8vect" "digest")}
    {Lisp-Entry "zero-u8vector" define #f 531 8 531 21 ("0" "4" "make-u8vector")}
    {Lisp-Entry "get-zero-u8vector" define #f 533 9 533 26 ("zero-u8vector")}
    {Lisp-Entry "digest-update-u8" define #f 535 9 535 25 ("#xff" "fxand" "1" "make-u8vector" "get-zero-u8vector" "0" "eqv?" "if" "digest-update-subu8vector" "n" "digest")}
    {Lisp-Entry "digest-string" define #f 544 9 544 22 ("string-length" "0" "digest-substring" "digest-default-result-type" "result-type" "#!optional" "algorithm" "str")}
    {Lisp-Entry "digest-substring" define #f 556 9 556 25 ("digest-subu8vector" "1" "fx+" "string-ref" "char->integer" "u8vector-set!" "begin" "fx<" "if" "0" "i" "loop" "let" "make-u8vector" "u8vect" "fx-" "len" "let*" "digest-default-result-type" "result-type" "#!optional" "algorithm" "end" "start" "str")}
    {Lisp-Entry "digest-u8vector" define #f 572 9 572 24 ("u8vector-length" "0" "digest-subu8vector" "digest-default-result-type" "result-type" "#!optional" "algorithm" "u8vect")}
    {Lisp-Entry "digest-subu8vector" define #f 584 9 584 27 ("close-digest" "digest-update-subu8vector" "open-digest" "digest" "let" "digest-default-result-type" "result-type" "#!optional" "algorithm" "end" "start" "u8vect")}
    {Lisp-Entry "digest-file" define #f 595 9 595 20 ("digest-update-subu8vector" "close-digest" "close-input-port" "begin" "fx=" "if" "0" "read-subu8vector" "n" "loop" "make-u8vector" "buf" "1024" "bufsize" "open-input-file" "in" "let*" "open-digest" "digest" "let" "digest-default-result-type" "result-type" "#!optional" "algorithm" "filename")}})
"expansion"
 ({Lisp-File-Entry {File :context "syntax" "expansion.scm"} 236918186. scheme
    {Lisp-Entry "kernel.expansion" block #f 37 7 37 23 ()
      {Lisp-Entry "generate-symbol" define #f 40 9 40 29 ("##make-uninterned-symbol" "1" "+" "##number->string" "or" "##string-append" "name" "else" "error" "not" "cond" "generate-symbol-counter" "jazz:generate-symbol-counter" "counter" "generate-symbol-for" "jazz:generate-symbol-for" "for" "let" "prefix" "#!optional")}
      {Lisp-Entry "generate-global-symbol" define #f 51 9 51 36 ("##string->symbol" "1" "+" "##number->string" "##string-append" "name" "##symbol->string" "string-replace" "jazz:string-replace" "module" "else" "error" "not" "cond" "generate-symbol-counter" "jazz:generate-symbol-counter" "counter" "generate-symbol-context" "jazz:generate-symbol-context" "context" "generate-symbol-for" "jazz:generate-symbol-for" "for" "let" "prefix" "#!optional")}
      {Lisp-Entry "simplify-begin" define #f 69 9 69 28 ("##cadr" "##cddr" "##null?" "##cdr" "begin" "##car" "##eq?" "##pair?" "and" "if" "form")}
      {Lisp-Entry "with-uniqueness" define #f 78 9 78 29 (",expr" ",value" "generate-symbol" "jazz:generate-symbol" "value" "let" "source-code" "jazz:source-code" "##symbol?" "if" "proc" "expr")}
      {Lisp-Entry "%%force-uniqueness" define-macro ("macro") 86 20 86 38 (",code" "##cdr" "%%force-uniqueness" "lambda" ",variable" "with-uniqueness" "jazz:with-uniqueness" "##car" "variable" "let" "##null?" "if" "code" "variables")}
      {Lisp-Entry "define-check-macro" define-macro ("macro") 100 20 100 43 ("##cdr" "##list" "##car" ",type" ",',type" ",pos" "primitive-type-error" "jazz:primitive-type-error" ",code" ",arg" ",test" ",',test" "debug-core?" "jazz:debug-core?" "if" "code" "call" "pos" "arg" ",name" "define-macro" "jazz:define-macro" "type" "test" "name")}
      {Lisp-Entry "%%check-closure" define-macro ("check-macro") 109 25 109 40 ("##closure?")}
      {Lisp-Entry "%%check-continuation" define-macro ("check-macro") 113 25 113 45 ("##continuation?")}
      {Lisp-Entry "%%check-fixnum" define-macro ("check-macro") 117 25 117 39 ("##fixnum?")}
      {Lisp-Entry "%%check-foreign" define-macro ("check-macro") 121 25 121 40 ("##foreign?")}
      {Lisp-Entry "%%check-list" define-macro ("check-macro") 125 25 125 37 ("list?")}
      {Lisp-Entry "%%check-locat" define-macro ("check-macro") 129 25 129 38 ("##locat?")}
      {Lisp-Entry "%%check-port" define-macro ("check-macro") 133 25 133 37 ("##port?")}
      {Lisp-Entry "%%check-procedure" define-macro ("check-macro") 137 25 137 42 ("##procedure?")}
      {Lisp-Entry "%%check-readenv" define-macro ("check-macro") 141 25 141 40 ("readenv?" "jazz:readenv?")}
      {Lisp-Entry "%%check-readtable" define-macro ("check-macro") 145 25 145 42 ("##readtable?")}
      {Lisp-Entry "%%check-source" define-macro ("check-macro") 149 25 149 39 ("##source?")}
      {Lisp-Entry "%%check-string" define-macro ("check-macro") 153 25 153 39 ("##string?")}
      {Lisp-Entry "%%check-symbol" define-macro ("check-macro") 157 25 157 39 ("##symbol?")}
      {Lisp-Entry "%%check-table" define-macro ("check-macro") 161 25 161 38 ("table?")}}})
"features"
 ({Lisp-File-Entry {File :context "syntax" "features.scm"} 236918186. scheme
    {Lisp-Entry "kernel.features" block #f 37 7 37 22 ("install-features" "jazz:install-features")
      {Lisp-Entry "install-features" define-macro #f 45 15 45 36 (",features" "list" "append" "##cond-expand-features" "set!" "if" "feature" "lambda" "for-each" "jazz:kernel-safety" "kernel-safety" ",jazz:kernel-safety" "jazz:kernel-windowing" "kernel-windowing" ",jazz:kernel-windowing" "jazz:kernel-platform" "kernel-platform" ",jazz:kernel-platform" "jazz:kernel-system" "kernel-system" ",jazz" ",jazz:kernel-system" "JAZZSCHEME" "JazzScheme" "jazzscheme" "JAZZ" "Jazz" "jazz" "features" "let")}
      {Lisp-Entry "debug-core?" define #f 65 8 65 24 ("core" "kernel-safety" "jazz:kernel-safety" "eq?")}
      {Lisp-Entry "debug-user?" define #f 68 8 68 24 ("release" "kernel-safety" "jazz:kernel-safety" "eq?" "not")}}})
"header"
 ({Lisp-File-Entry {File :context "syntax" "header.scm"} 236918187. scheme
    {Lisp-Entry "define-macro" define-macro #f 45 23 45 40 ("register-macro" "jazz:register-macro" ",src" "##make-macro-descr" "##interaction-cte" "##top-cte-add-macro!" ",pattern" "##define-macro" "begin" ",@rest" "lambda" "src" "else" "null?" "+" "cdr" "-" "#!rest" "#!key" "#!optional" "memq" "if" "car" "parm" "pair?" "cond" "1" "n" "lst" "loop" "let" "parms" "form-size" "define" "rest" "pattern")}
    {Lisp-Entry "define-syntax" define-macro #f 81 23 81 41 ("register-macro" "jazz:register-macro" "-1" "##make-macro-descr" "##interaction-cte" "##top-cte-add-macro!" ",expander" ",name" "##define-syntax" "begin" "expander" "name")}
    {Lisp-Entry "subtype-vector" define #f 102 8 102 27 ("macro-subtype-vector")}
    {Lisp-Entry "subtype-pair" define #f 103 8 103 25 ("macro-subtype-pair")}
    {Lisp-Entry "subtype-ratnum" define #f 104 8 104 27 ("macro-subtype-ratnum")}
    {Lisp-Entry "subtype-cpxnum" define #f 105 8 105 27 ("macro-subtype-cpxnum")}
    {Lisp-Entry "subtype-symbol" define #f 106 8 106 27 ("macro-subtype-symbol")}
    {Lisp-Entry "subtype-keyword" define #f 107 8 107 28 ("macro-subtype-keyword")}
    {Lisp-Entry "subtype-continuation" define #f 108 8 108 33 ("macro-subtype-continuation")}
    {Lisp-Entry "subtype-procedure" define #f 109 8 109 30 ("macro-subtype-procedure")}
    {Lisp-Entry "subtype-string" define #f 110 8 110 27 ("macro-subtype-string")}
    {Lisp-Entry "subtype-flonum" define #f 111 8 111 27 ("macro-subtype-flonum")}
    {Lisp-Entry "subtype-bignum" define #f 112 8 112 27 ("macro-subtype-bignum")}
    {Lisp-Entry "subtype-foreign" define #f 113 8 113 28 ("macro-subtype-foreign")}
    {Lisp-Entry "subtype-s8vector" define #f 114 8 114 29 ("macro-subtype-s8vector")}
    {Lisp-Entry "subtype-u8vector" define #f 115 8 115 29 ("macro-subtype-u8vector")}
    {Lisp-Entry "subtype-s16vector" define #f 116 8 116 30 ("macro-subtype-s16vector")}
    {Lisp-Entry "subtype-u16vector" define #f 117 8 117 30 ("macro-subtype-u16vector")}
    {Lisp-Entry "subtype-s32vector" define #f 118 8 118 30 ("macro-subtype-s32vector")}
    {Lisp-Entry "subtype-u32vector" define #f 119 8 119 30 ("macro-subtype-u32vector")}
    {Lisp-Entry "subtype-s64vector" define #f 120 8 120 30 ("macro-subtype-s64vector")}
    {Lisp-Entry "subtype-u64vector" define #f 121 8 121 30 ("macro-subtype-u64vector")}
    {Lisp-Entry "subtype-f32vector" define #f 122 8 122 30 ("macro-subtype-f32vector")}
    {Lisp-Entry "subtype-f64vector" define #f 123 8 123 30 ("macro-subtype-f64vector")}
    {Lisp-Entry "subtype-boxvalues" define #f 124 8 124 30 ("macro-subtype-boxvalues")}
    {Lisp-Entry "macro-code-run-fixed" define-macro #f 132 17 132 37 (",rte" "1" "##vector-ref" ",c" "$$code" "let" "rte" "c")}
    {Lisp-Entry "code-cte" define #f 137 9 137 22 ("macro-code-cte" "c")}
    {Lisp-Entry "code-run" define #f 140 9 140 22 ("macro-code-run-fixed" "rte" "c")}
    {Lisp-Entry "rte-up" define #f 149 9 149 20 ("macro-rte-up" "r")}
    {Lisp-Entry "repl-context-bind" define #f 158 9 158 31 ("repl-context" "macro-dynamic-bind" "thunk" "val")}
    {Lisp-Entry "continuation-denv" define #f 167 9 167 31 ("macro-continuation-denv" "cont")}
    {Lisp-Entry "current-repl-context" define #f 176 9 176 34 ("macro-current-repl-context")}
    {Lisp-Entry "repl-context-level" define #f 179 9 179 32 ("macro-repl-context-level" "context")}
    {Lisp-Entry "repl-context-depth" define #f 182 9 182 32 ("macro-repl-context-depth" "context")}
    {Lisp-Entry "repl-context-cont" define #f 185 9 185 31 ("macro-repl-context-cont" "context")}
    {Lisp-Entry "repl-context-initial-cont" define #f 188 9 188 39 ("macro-repl-context-initial-cont" "context")}
    {Lisp-Entry "repl-context-prev-level" define #f 191 9 191 37 ("macro-repl-context-prev-level" "context")}
    {Lisp-Entry "repl-context-prev-depth" define #f 194 9 194 37 ("macro-repl-context-prev-depth" "context")}
    {Lisp-Entry "make-repl-context" define #f 197 9 197 31 ("macro-make-repl-context" "prev-depth" "prev-level" "reason" "initial-cont" "cont" "depth" "level")}
    {Lisp-Entry "readtable-named-char-table" define #f 206 9 206 40 ("macro-readtable-named-char-table" "rt")}
    {Lisp-Entry "readtable-named-char-table-set!" define #f 209 9 209 45 ("macro-readtable-named-char-table-set!" "nc" "rt")}
    {Lisp-Entry "readtable-paren-keyword-set!" define #f 212 9 212 42 ("macro-readtable-paren-keyword-set!" "key" "rt")}
    {Lisp-Entry "readtable-bracket-keyword-set!" define #f 215 9 215 44 ("macro-readtable-bracket-keyword-set!" "key" "rt")}
    {Lisp-Entry "readtable-brace-keyword-set!" define #f 218 9 218 42 ("macro-readtable-brace-keyword-set!" "key" "rt")}
    {Lisp-Entry "readtable-start-syntax" define #f 221 9 221 36 ("macro-readtable-start-syntax" "rt")}
    {Lisp-Entry "readenv?" define #f 230 9 230 22 ("macro-readenv?" "obj")}
    {Lisp-Entry "readenv-port" define #f 233 9 233 26 ("macro-readenv-port" "re")}
    {Lisp-Entry "readenv-wrap" define #f 236 9 236 26 ("macro-readenv-wrap" "x" "re")}
    {Lisp-Entry "writeenv-port" define #f 245 9 245 27 ("macro-writeenv-port" "we")}
    {Lisp-Entry "writeenv-style" define #f 248 9 248 28 ("macro-writeenv-style" "we")}
    {Lisp-Entry "thread-cont" define #f 257 9 257 25 ("macro-thread-cont" "thread")}
    {Lisp-Entry "btq-owner" define #f 261 9 261 23 ("macro-btq-owner" "mutex")}
    {Lisp-Entry "absent-object?" define #f 270 9 270 28 ("macro-absent-obj" "##eq?" "obj")}
    {Lisp-Entry "unbound-object?" define #f 274 9 274 29 ("#!unbound" "##eq?" "obj")}})
"install"
 ({Lisp-File-Entry {File :context "runtime" "install.scm"} 236918186. scheme
    {Lisp-Entry "kernel.install" block #f 37 7 37 21 ("wchar_t-string" "char-string" "c-lambda" "platform-executable-path" "set!" "c-declare" "kernel-declares" "jazz:kernel-declares")
      {Lisp-Entry "platform-executable-path" define #f 52 8 52 32 ()}
      {Lisp-Entry "executable-directory" define-macro ("variable-override") 93 31 93 56 ("pathname-normalize" "jazz:pathname-normalize" "pathname-dir" "jazz:pathname-dir" "if" "platform-executable-path" "path" "let" "lambda")}}})
"macro"
 ({Lisp-File-Entry {File :context "syntax" "macro.scm"} 236918187. scheme
    {Lisp-Entry "Macros" define #f 37 8 37 19 ("eq?" "test:" "make-table")}
    {Lisp-Entry "register-macro" define #f 41 9 41 28 ("Macros" "jazz:Macros" "table-set!" "macro" "name")}
    {Lisp-Entry "get-macro" define #f 45 9 45 23 ("Macros" "jazz:Macros" "table-ref" "name")}
    {Lisp-Entry "need-macro" define #f 49 9 49 24 ("error" "jazz:error" "get-macro" "jazz:get-macro" "or" "name")}
    {Lisp-Entry "expand-macro" define #f 54 9 54 26 ("cdr" "car" "need-macro" "jazz:need-macro" "apply" "form")}})
"primitives"
 ({Lisp-File-Entry {File :context "syntax" "primitives.scm"} 239936558. scheme
    {Lisp-Entry "kernel.primitives" block #f 37 7 37 24 ("kernel-declares" "jazz:kernel-declares")
      {Lisp-Entry "%%boolean?" define-macro ("macro") 50 23 50 33 (",obj" "boolean?" "obj")}
      {Lisp-Entry "%%not" define-macro ("macro") 53 23 53 28 ("##not" ",expr" "not" "debug-core?" "jazz:debug-core?" "if" "expr")}
      {Lisp-Entry "%%box?" define-macro ("macro") 68 23 68 29 ("##box?" ",obj" "box?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%box" define-macro ("macro") 73 23 73 28 ("##box" ",obj" "box" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%unbox" define-macro ("macro") 78 23 78 30 ("##unbox" ",box" "unbox" "debug-core?" "jazz:debug-core?" "if" "box")}
      {Lisp-Entry "%%char?" define-macro ("macro") 93 24 93 31 ("##char?" ",obj" "char?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%char=?" define-macro ("macro") 98 24 98 32 ("##char=?" ",c2" ",c1" "char=?" "debug-core?" "jazz:debug-core?" "if" "c2" "c1")}
      {Lisp-Entry "%%char<=?" define-macro ("macro") 103 24 103 33 ("##char<=?" ",c2" ",c1" "char<=?" "debug-core?" "jazz:debug-core?" "if" "c2" "c1")}
      {Lisp-Entry "%%closure?" define-macro ("syntax") 118 24 118 34 (",obj" "##closure?" "##source-code" "##cadr" "obj" "let" "src" "lambda")}
      {Lisp-Entry "%%closure-code" define-macro ("macro") 123 24 123 38 ("##closure-code" "%%closure-code" "1" ",closure" "%%check-closure" "%%force-uniqueness" "closure")}
      {Lisp-Entry "%%complex?" define-macro ("macro") 138 24 138 34 ("##complex?" ",obj" "complex?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%continuation?" define-macro ("syntax") 153 23 153 38 ("##continuation?" ",obj" "continuation?" "debug-core?" "jazz:debug-core?" "if" "##source-code" "##cadr" "obj" "let" "src" "lambda")}
      {Lisp-Entry "%%continuation-capture" define-macro ("syntax") 160 23 160 45 ("##continuation-capture" ",proc" "continuation-capture" "debug-core?" "jazz:debug-core?" "if" "##source-code" "##cadr" "proc" "let" "src" "lambda")}
      {Lisp-Entry "%%continuation-graft" define-macro ("syntax") 167 23 167 43 ("##continuation-graft" ",proc" ",cont" "continuation-graft" "debug-core?" "jazz:debug-core?" "if" "##cddr" "##car" "proc" "##source-code" "##cadr" "cont" "let" "src" "lambda")}
      {Lisp-Entry "%%continuation-return" define-macro ("syntax") 175 23 175 44 ("##continuation-return" ",@values" ",cont" "continuation-return" "debug-core?" "jazz:debug-core?" "if" "##cddr" "values" "##source-code" "##cadr" "cont" "let" "src" "lambda")}
      {Lisp-Entry "%%continuation-checkpoint" define-macro ("syntax") 183 23 183 48 ("##continuation-checkpoint" ",after" ",thunk" ",before" "continuation-checkpoint" "debug-core?" "jazz:debug-core?" "if" "##cadddr" "after" "##caddr" "thunk" "##source-code" "##cadr" "before" "let" "src" "lambda")}
      {Lisp-Entry "%%continuation-graft-no-winding" define-macro ("macro") 192 23 192 54 ("##continuation-graft-no-winding" ",values" "%%continuation-graft-no-winding" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "values" "cont")}
      {Lisp-Entry "%%continuation-return-no-winding" define-macro ("macro") 197 23 197 55 ("##continuation-return-no-winding" ",values" "%%continuation-return-no-winding" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "values" "cont")}
      {Lisp-Entry "%%continuation-parent" define-macro ("macro") 202 23 202 44 ("##continuation-parent" "%%continuation-parent" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
      {Lisp-Entry "%%continuation-creator" define-macro ("macro") 207 23 207 45 ("##continuation-creator" "%%continuation-creator" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
      {Lisp-Entry "%%continuation-locat" define-macro ("macro") 212 23 212 43 ("##continuation-locat" "%%continuation-locat" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
      {Lisp-Entry "%%continuation-locals" define-macro ("macro") 217 23 217 44 ("##continuation-locals" "%%continuation-locals" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
      {Lisp-Entry "%%continuation-next" define-macro ("macro") 222 23 222 42 ("##continuation-next" "%%continuation-next" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
      {Lisp-Entry "%%continuation-first-frame" define-macro ("macro") 227 23 227 49 ("##continuation-first-frame" ",all-frames?" "%%continuation-first-frame" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "all-frames?" "cont")}
      {Lisp-Entry "%%continuation-next-frame" define-macro ("macro") 232 23 232 48 ("##continuation-next-frame" ",all-frames?" "%%continuation-next-frame" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "all-frames?" "cont")}
      {Lisp-Entry "%%interp-continuation?" define-macro ("macro") 237 23 237 45 ("##interp-continuation?" "%%interp-continuation?" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
      {Lisp-Entry "%%procedure?" define-macro ("macro") 252 23 252 35 ("##procedure?" ",obj" "procedure?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%apply" define-macro ("macro") 257 23 257 30 ("##apply" ",lst" ",proc" "apply" "debug-core?" "jazz:debug-core?" "if" "lst" "proc")}
      {Lisp-Entry "%%eq?" define-macro ("macro") 272 23 272 28 ("##eq?" ",y" ",x" "eq?" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%neq?" define-macro ("macro") 277 23 277 29 (",y" ",x" "%%eq?" "%%not" "y" "x")}
      {Lisp-Entry "%%eqv?" define-macro ("macro") 280 23 280 29 ("##eqv?" ",y" ",x" "eqv?" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%equal?" define-macro ("macro") 285 23 285 31 ("##equal?" ",y" ",x" "equal?" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%eq?" define-macro ("macro") 291 23 291 28 (",y" ",x" "eq?" "y" "x")}
      {Lisp-Entry "%%load" define-macro ("macro") 302 23 302 29 (",quiet?" ",raise-os-exception?" ",clone-cte?" ",script-callback" ",path" "##load" "%%force-uniqueness" "quiet?" "raise-os-exception?" "clone-cte?" "script-callback" "path")}
      {Lisp-Entry "%%fixnum?" define-macro ("macro") 316 23 316 32 ("##fixnum?" ",obj" "fixnum?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%fixnum->flonum" define-macro ("macro") 321 23 321 39 ("##fixnum->flonum" ",x" "fixnum->flonum" "debug-core?" "jazz:debug-core?" "if" "x")}
      {Lisp-Entry "%%fx=" define-macro ("macro") 326 23 326 28 ("##fixnum.=" ",y" ",x" "=" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx<" define-macro ("macro") 331 23 331 28 ("##fixnum.<" ",y" ",x" "<" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx<=" define-macro ("macro") 336 23 336 29 ("##fixnum.<=" ",y" ",x" "<=" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx>" define-macro ("macro") 341 23 341 28 ("##fixnum.>" ",y" ",x" ">" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx>=" define-macro ("macro") 346 23 346 29 ("##fixnum.>=" ",y" ",x" ">=" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx+" define-macro ("macro") 351 23 351 28 ("##fixnum.+" ",y" ",x" "+" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx-" define-macro ("macro") 356 23 356 28 ("##fixnum.-" ",y" ",x" "-" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx*" define-macro ("macro") 361 23 361 28 ("##fixnum.*" ",y" ",x" "*" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fxquotient" define-macro ("macro") 366 23 366 35 ("##fxquotient" ",y" ",x" "quotient" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%flonum?" define-macro ("macro") 379 23 379 32 ("##flonum?" ",obj" "flonum?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%flonum->fixnum" define-macro ("macro") 384 23 384 39 ("##flonum->fixnum" ",x" "flonum->fixnum" "debug-core?" "jazz:debug-core?" "if" "x")}
      {Lisp-Entry "%%fl=" define-macro ("macro") 389 23 389 28 ("##flonum.=" ",y" ",x" "=" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl<" define-macro ("macro") 394 23 394 28 ("##flonum.<" ",y" ",x" "<" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl<=" define-macro ("macro") 399 23 399 29 ("##flonum.<=" ",y" ",x" "<=" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl>" define-macro ("macro") 404 23 404 28 ("##flonum.>" ",y" ",x" ">" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl>=" define-macro ("macro") 409 23 409 29 ("##flonum.>=" ",y" ",x" ">=" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl+" define-macro ("macro") 414 23 414 28 ("##flonum.+" ",y" ",x" "+" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl-" define-macro ("macro") 419 23 419 28 ("##flonum.-" ",y" ",x" "-" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl*" define-macro ("macro") 424 23 424 28 ("##flonum.*" ",y" ",x" "*" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl/" define-macro ("macro") 429 23 429 28 ("##flonum./" ",y" ",x" "/" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl>" define-macro ("macro") 435 23 435 28 (",y" ",x" ">" "y" "x")}
      {Lisp-Entry "%%fl+" define-macro ("macro") 438 23 438 28 (",y" ",x" "+" "y" "x")}
      {Lisp-Entry "%%foreign?" define-macro ("macro") 449 23 449 33 (",obj" "##foreign?" "obj")}
      {Lisp-Entry "%%still-obj-refcount-dec!" define-macro ("macro") 452 23 452 48 ("##still-obj-refcount-dec!" "%%still-obj-refcount-dec!" "1" ",foreign" "%%check-foreign" "%%force-uniqueness" "foreign")}
      {Lisp-Entry "%%still-obj-refcount-inc!" define-macro ("macro") 457 23 457 48 ("##still-obj-refcount-inc!" "%%still-obj-refcount-inc!" "1" ",foreign" "%%check-foreign" "%%force-uniqueness" "foreign")}
      {Lisp-Entry "%%interrupt-handler" define-macro ("macro") 472 24 472 43 (",code" "##interrupt-handler" "code")}
      {Lisp-Entry "%%interrupt-vector-set!" define-macro ("macro") 475 24 475 47 (",handler" ",code" "##interrupt-vector-set!" "handler" "code")}
      {Lisp-Entry "%%keyword?" define-macro ("macro") 488 24 488 34 ("##keyword?" ",obj" "keyword?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%string->keyword" define-macro ("macro") 493 24 493 41 ("##string->keyword" ",str" "string->keyword" "debug-core?" "jazz:debug-core?" "if" "str")}
      {Lisp-Entry "%%keyword->string" define-macro ("macro") 498 23 498 40 ("##keyword->string" ",keyword" "keyword->string" "debug-core?" "jazz:debug-core?" "if" "keyword")}
      {Lisp-Entry "%%null?" define-macro ("macro") 513 24 513 31 ("##null?" ",obj" "null?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%pair?" define-macro ("macro") 518 24 518 31 ("##pair?" ",obj" "pair?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%car" define-macro ("macro") 523 24 523 29 ("##car" ",pair" "car" "debug-core?" "jazz:debug-core?" "if" "pair")}
      {Lisp-Entry "%%cdr" define-macro ("macro") 528 24 528 29 ("##cdr" ",pair" "cdr" "debug-core?" "jazz:debug-core?" "if" "pair")}
      {Lisp-Entry "%%set-car!" define-macro ("macro") 533 24 533 34 ("##set-car!" ",val" ",pair" "set-car!" "debug-core?" "jazz:debug-core?" "if" "val" "pair")}
      {Lisp-Entry "%%set-cdr!" define-macro ("macro") 538 24 538 34 ("##set-cdr!" ",val" ",pair" "set-cdr!" "debug-core?" "jazz:debug-core?" "if" "val" "pair")}
      {Lisp-Entry "%%caar" define-macro ("macro") 543 24 543 30 ("##caar" ",pair" "caar" "debug-core?" "jazz:debug-core?" "if" "pair")}
      {Lisp-Entry "%%cadr" define-macro ("macro") 548 24 548 30 ("##cadr" ",pair" "cadr" "debug-core?" "jazz:debug-core?" "if" "pair")}
      {Lisp-Entry "%%cdar" define-macro ("macro") 553 24 553 30 ("##cdar" ",pair" "cdar" "debug-core?" "jazz:debug-core?" "if" "pair")}
      {Lisp-Entry "%%cddr" define-macro ("macro") 558 24 558 30 ("##cddr" ",pair" "cddr" "debug-core?" "jazz:debug-core?" "if" "pair")}
      {Lisp-Entry "%%length" define-macro ("macro") 563 24 563 32 ("##length" ",lst" "length" "debug-core?" "jazz:debug-core?" "if" "lst")}
      {Lisp-Entry "%%memq" define-macro ("macro") 568 24 568 30 ("##memq" ",lst" ",obj" "memq" "debug-core?" "jazz:debug-core?" "if" "lst" "obj")}
      {Lisp-Entry "%%memv" define-macro ("macro") 573 24 573 30 (",lst" ",obj" "memv" "lst" "obj")}
      {Lisp-Entry "%%member" define-macro ("macro") 576 24 576 32 ("##member" ",lst" ",obj" "member" "debug-core?" "jazz:debug-core?" "if" "lst" "obj")}
      {Lisp-Entry "%%assq" define-macro ("macro") 581 24 581 30 ("##assq" ",alist" ",obj" "assq" "debug-core?" "jazz:debug-core?" "if" "alist" "obj")}
      {Lisp-Entry "%%assv" define-macro ("macro") 586 24 586 30 ("##assv" ",alist" ",obj" "assv" "debug-core?" "jazz:debug-core?" "if" "alist" "obj")}
      {Lisp-Entry "%%assoc" define-macro ("macro") 591 24 591 31 ("##assoc" ",alist" ",obj" "assoc" "debug-core?" "jazz:debug-core?" "if" "alist" "obj")}
      {Lisp-Entry "%%cons" define-macro ("macro") 596 24 596 30 ("##cons" ",y" ",x" "cons" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%list" define-macro ("macro") 601 24 601 30 ("##list" ",@rest" "list" "debug-core?" "jazz:debug-core?" "if" "rest")}
      {Lisp-Entry "%%append" define-macro ("macro") 606 24 606 32 ("##append" ",y" ",x" "append" "debug-core?" "jazz:debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%remove" define-macro ("macro") 611 24 611 32 ("##remove" ",elem" "%%remove" "2" ",lst" "%%check-list" "%%force-uniqueness" "lst" "elem")}
      {Lisp-Entry "%%reverse" define-macro ("macro") 616 24 616 33 ("##reverse" ",lst" "reverse" "debug-core?" "jazz:debug-core?" "if" "lst")}
      {Lisp-Entry "%%list->vector" define-macro ("macro") 621 24 621 38 ("##list->vector" ",lst" "list->vector" "debug-core?" "jazz:debug-core?" "if" "lst")}
      {Lisp-Entry "%%memq" define-macro ("macro") 627 23 627 29 (",lst" ",obj" "memq" "lst" "obj")}
      {Lisp-Entry "%%gc" define-macro ("macro") 638 24 638 28 ("##gc")}
      {Lisp-Entry "%%number?" define-macro ("macro") 649 24 649 33 ("##number?" ",obj" "number?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%integer?" define-macro ("macro") 654 24 654 34 ("##integer?" ",obj" "integer?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%real?" define-macro ("macro") 659 24 659 31 ("##real?" ",obj" "real?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%number->string" define-macro ("macro") 664 24 664 40 ("##number->string" ",n" "number->string" "debug-core?" "jazz:debug-core?" "if" "n")}
      {Lisp-Entry "%%string->number" define-macro ("macro") 669 24 669 40 ("##string->number" ",str" "string->number" "debug-core?" "jazz:debug-core?" "if" "str")}
      {Lisp-Entry "%%port?" define-macro ("macro") 684 24 684 31 ("##port?" ",obj" "port?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%eof-object?" define-macro ("macro") 689 24 689 37 ("##eof-object?" ",obj" "eof-object?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%input-port-names-set!" define-macro ("macro") 694 24 694 47 ("4" "##vector-set!" ",names" "%%input-port-names-set!" "1" ",port" "%%check-port" "%%force-uniqueness" "names" "port")}
      {Lisp-Entry "%%input-port-line-set!" define-macro ("macro") 700 24 700 46 ("##input-port-line-set!" ",line" "%%input-port-line-set!" "1" ",port" "%%check-port" "%%force-uniqueness" "line" "port")}
      {Lisp-Entry "%%input-port-column-set!" define-macro ("macro") 705 24 705 48 ("##input-port-column-set!" ",col" "%%input-port-column-set!" "1" ",port" "%%check-port" "%%force-uniqueness" "col" "port")}
      {Lisp-Entry "%%read-all-as-a-begin-expr-from-port" define-macro ("macro") 710 24 710 60 ("##read-all-as-a-begin-expr-from-port" "2" "%%check-readtable" ",close-port?" ",start-syntax" ",unwrap" ",wrap" ",readtable" "%%read-all-as-a-begin-expr-from-port" "1" ",port" "%%check-port" "%%force-uniqueness" "close-port?" "start-syntax" "unwrap" "wrap" "readtable" "port")}
      {Lisp-Entry "%%write-string" define-macro ("macro") 716 24 716 38 ("##write-string" "2" "%%check-port" ",port" "%%write-string" "1" ",str" "%%check-string" "%%force-uniqueness" "port" "str")}
      {Lisp-Entry "%%procedure-name" define-macro ("macro") 732 24 732 40 ("##procedure-name" "%%procedure-name" "1" ",procedure" "%%check-procedure" "%%force-uniqueness" "procedure")}
      {Lisp-Entry "%%procedure-locat" define-macro ("macro") 737 24 737 41 ("##procedure-locat" "%%procedure-locat" "1" ",procedure" "%%check-procedure" "%%force-uniqueness" "procedure")}
      {Lisp-Entry "%%rational?" define-macro ("macro") 752 24 752 35 ("##rational?" ",obj" "rational?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%readenv?" define-macro ("macro") 767 24 767 34 (",obj" "macro-readenv?" "obj")}
      {Lisp-Entry "%%readenv-current-filepos" define-macro ("macro") 770 24 770 49 ("##readenv-current-filepos" "%%readenv-current-filepos" "1" ",readenv" "%%check-readenv" "%%force-uniqueness" "readenv")}
      {Lisp-Entry "%%build-list" define-macro ("macro") 775 24 775 36 ("##build-list" ",close" ",start-pos" ",allow-improper?" "%%build-list" "1" ",readenv" "%%check-readenv" "%%force-uniqueness" "close" "start-pos" "allow-improper?" "readenv")}
      {Lisp-Entry "%%read-datum-or-label-or-none-or-dot" define-macro ("macro") 780 24 780 60 ("##read-datum-or-label-or-none-or-dot" "%%read-datum-or-label-or-none-or-dot" "1" ",readenv" "%%check-readenv" "%%force-uniqueness" "readenv")}
      {Lisp-Entry "%%readtable?" define-macro ("macro") 795 24 795 36 ("##readtable?" ",obj" "readtable?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%current-readtable" define-macro ("macro") 800 24 800 43 ("##current-readtable")}
      {Lisp-Entry "%%make-standard-readtable" define-macro ("macro") 803 24 803 49 ("##make-standard-readtable")}
      {Lisp-Entry "%%readtable-copy" define-macro ("macro") 806 24 806 40 ("##readtable-copy" "%%readtable-copy" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "readtable")}
      {Lisp-Entry "%%readtable-char-delimiter?" define-macro ("macro") 811 24 811 51 ("##readtable-char-delimiter?" ",c" "%%readtable-char-delimiter?" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "c" "readtable")}
      {Lisp-Entry "%%readtable-char-delimiter?-set!" define-macro ("macro") 816 24 816 56 ("##readtable-char-delimiter?-set!" ",delimiter?" ",c" "%%readtable-char-delimiter?-set!" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "delimiter?" "c" "readtable")}
      {Lisp-Entry "%%readtable-char-handler" define-macro ("macro") 821 24 821 48 ("##readtable-char-handler" ",c" "%%readtable-char-handler" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "c" "readtable")}
      {Lisp-Entry "%%readtable-char-handler-set!" define-macro ("macro") 826 24 826 53 ("##readtable-char-handler-set!" ",handler" ",c" "%%readtable-char-handler-set!" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "handler" "c" "readtable")}
      {Lisp-Entry "%%readtable-char-sharp-handler" define-macro ("macro") 831 24 831 54 ("##readtable-char-sharp-handler" ",c" "%%readtable-char-sharp-handler" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "c" "readtable")}
      {Lisp-Entry "%%readtable-char-sharp-handler-set!" define-macro ("macro") 836 24 836 59 ("##readtable-char-sharp-handler-set!" ",handler" ",c" "%%readtable-char-sharp-handler-set!" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "handler" "c" "readtable")}
      {Lisp-Entry "%%readtable-char-class-set!" define-macro ("macro") 841 24 841 51 ("##readtable-char-class-set!" ",handler" ",delimiter?" ",c" "%%readtable-char-class-set!" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "handler" "delimiter?" "c" "readtable")}
      {Lisp-Entry "%%repl" define-macro ("macro") 856 24 856 30 (",write-reason" "##repl" "write-reason" "#!optional")}
      {Lisp-Entry "%%thread-repl-context-get!" define-macro ("macro") 859 24 859 50 ("##thread-repl-context-get!")}
      {Lisp-Entry "%%thread-repl-channel-get!" define-macro ("macro") 862 24 862 50 (",thread" "##thread-repl-channel-get!" "thread")}
      {Lisp-Entry "%%repl-channel-result-history-add" define-macro ("macro") 865 24 865 57 (",result" ",channel" "##repl-channel-result-history-add" "result" "channel")}
      {Lisp-Entry "%%string?" define-macro ("macro") 878 24 878 33 ("##string?" ",obj" "string?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%string=?" define-macro ("macro") 883 24 883 34 ("##string=?" ",str2" ",str1" "string=?" "debug-core?" "jazz:debug-core?" "if" "str2" "str1")}
      {Lisp-Entry "%%string-ci=?" define-macro ("macro") 888 24 888 37 ("##string-ci=?" ",str2" ",str1" "string-ci=?" "debug-core?" "jazz:debug-core?" "if" "str2" "str1")}
      {Lisp-Entry "%%string<?" define-macro ("macro") 893 24 893 34 ("##string<?" ",str2" ",str1" "string<?" "debug-core?" "jazz:debug-core?" "if" "str2" "str1")}
      {Lisp-Entry "%%string-length" define-macro ("macro") 898 24 898 39 ("##string-length" ",str" "string-length" "debug-core?" "jazz:debug-core?" "if" "str")}
      {Lisp-Entry "%%string-ref" define-macro ("macro") 903 23 903 35 ("##string-ref" ",pos" ",str" "string-ref" "debug-core?" "jazz:debug-core?" "if" "pos" "str")}
      {Lisp-Entry "%%string-set!" define-macro ("macro") 908 23 908 36 ("##string-set!" ",val" ",pos" ",str" "string-set!" "debug-core?" "jazz:debug-core?" "if" "val" "pos" "str")}
      {Lisp-Entry "%%substring" define-macro ("macro") 913 23 913 34 ("##substring" ",end" ",start" ",str" "substring" "debug-core?" "jazz:debug-core?" "if" "end" "start" "str")}
      {Lisp-Entry "%%string-append" define-macro ("macro") 918 23 918 38 ("##string-append" ",@rest" "string-append" "debug-core?" "jazz:debug-core?" "if" "rest")}
      {Lisp-Entry "%%string-shrink!" define-macro ("macro") 923 23 923 39 ("##string-shrink!" ",len" "%%string-shrink!" "1" ",str" "%%check-string" "%%force-uniqueness" "len" "str")}
      {Lisp-Entry "%%structure?" define-macro ("macro") 938 24 938 36 (",obj" "##structure?" "obj")}
      {Lisp-Entry "%%structure-type" define-macro ("macro") 941 24 941 40 (",structure" "##structure-type" "structure")}
      {Lisp-Entry "%%symbol?" define-macro ("macro") 954 24 954 33 ("##symbol?" ",obj" "symbol?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%string->symbol" define-macro ("macro") 959 24 959 40 ("##string->symbol" ",str" "string->symbol" "debug-core?" "jazz:debug-core?" "if" "str")}
      {Lisp-Entry "%%symbol->string" define-macro ("macro") 964 23 964 39 ("##symbol->string" ",symbol" "symbol->string" "debug-core?" "jazz:debug-core?" "if" "symbol")}
      {Lisp-Entry "%%unbound?" define-macro ("macro") 969 23 969 33 (",obj" "##unbound?" "obj")}
      {Lisp-Entry "%%global-var?" define-macro ("macro") 972 23 972 36 ("##global-var?" "%%global-var?" "1" ",symbol" "%%check-symbol" "%%force-uniqueness" "symbol")}
      {Lisp-Entry "%%global-var-ref" define-macro ("macro") 977 23 977 39 ("##global-var-ref" "%%global-var-ref" "1" ",symbol" "%%check-symbol" "%%force-uniqueness" "symbol")}
      {Lisp-Entry "%%global-var-set!" define-macro ("macro") 982 23 982 40 ("##global-var-set!" ",value" "%%global-var-ref" "1" ",symbol" "%%check-symbol" "%%force-uniqueness" "value" "symbol")}
      {Lisp-Entry "%%source?" define-macro ("macro") 997 24 997 33 (",expr" "##source?" "expr")}
      {Lisp-Entry "%%source-code" define-macro ("macro") 1000 24 1000 37 ("##source-code" "%%source-code" "1" ",src" "%%check-source" "%%force-uniqueness" "src")}
      {Lisp-Entry "%%source-locat" define-macro ("macro") 1005 24 1005 38 ("##source-locat" "%%source-locat" "1" ",src" "%%check-source" "%%force-uniqueness" "src")}
      {Lisp-Entry "%%desourcify" define-macro ("macro") 1010 24 1010 36 (",expr" "##desourcify" "expr")}
      {Lisp-Entry "%%make-source" define-macro ("macro") 1013 24 1013 37 (",locat" ",code" "##make-source" "locat" "code")}
      {Lisp-Entry "%%sourcify" define-macro ("macro") 1016 24 1016 34 ("##sourcify" ",expr" "%%sourcify" "2" ",src" "%%check-source" "%%force-uniqueness" "src" "expr")}
      {Lisp-Entry "%%locat?" define-macro ("macro") 1021 24 1021 32 (",expr" "##locat?" "expr")}
      {Lisp-Entry "%%locat-container" define-macro ("macro") 1024 24 1024 41 ("##locat-container" "%%locat-container" "1" ",locat" "%%check-locat" "%%force-uniqueness" "locat")}
      {Lisp-Entry "%%locat-position" define-macro ("macro") 1029 24 1029 40 ("##locat-position" "%%locat-position" "1" ",locat" "%%check-locat" "%%force-uniqueness" "locat")}
      {Lisp-Entry "%%container->path" define-macro ("macro") 1034 24 1034 41 (",container" "##container->path" "container")}
      {Lisp-Entry "%%position->filepos" define-macro ("macro") 1037 24 1037 43 (",position" "##position->filepos" "position")}
      {Lisp-Entry "%%filepos-line" define-macro ("macro") 1040 24 1040 38 ("##filepos-line" "%%filepos-line" "1" ",filepos" "%%check-fixnum" "%%force-uniqueness" "filepos")}
      {Lisp-Entry "%%filepos-col" define-macro ("macro") 1045 24 1045 37 ("##filepos-col" "%%filepos-col" "1" ",filepos" "%%check-fixnum" "%%force-uniqueness" "filepos")}
      {Lisp-Entry "%%table?" define-macro ("macro") 1058 24 1058 32 (",obj" "table?" "obj")}
      {Lisp-Entry "%%make-table" define-macro ("macro") 1061 24 1061 36 ("hash:" ",test" "test:" "make-table" ",hash" "if" "hash" "eq?" "test" "#!key")}
      {Lisp-Entry "%%table-ref" define-macro ("macro") 1066 24 1066 35 ("##table-ref" ",default" ",key" ",table" "table-ref" "debug-core?" "jazz:debug-core?" "if" "default" "key" "table")}
      {Lisp-Entry "%%table-set!" define-macro ("macro") 1071 24 1071 36 ("##table-set!" ",value" ",key" ",table" "table-set!" "debug-core?" "jazz:debug-core?" "if" "value" "key" "table")}
      {Lisp-Entry "%%table-clear" define-macro ("macro") 1076 24 1076 37 (",key" ",table" "table-set!" "key" "table")}
      {Lisp-Entry "%%table-keys" define-macro ("macro") 1079 24 1079 36 (",table" "table->list" "car" "map" "table")}
      {Lisp-Entry "%%table-length" define-macro ("macro") 1082 24 1082 38 (",table" "table-length" "table")}
      {Lisp-Entry "%%table-for-each" define-macro ("macro") 1085 24 1085 40 (",table" ",proc" "table-for-each" "table" "proc")}
      {Lisp-Entry "%%table-merge!" define-macro ("macro") 1088 24 1088 38 ("##table-merge!" ",additions-takes-precedence?" ",additions" ",table" "table-merge!" "debug-core?" "jazz:debug-core?" "if" "additions-takes-precedence?" "#!optional" "additions" "table")}
      {Lisp-Entry "%%list->table" define-macro ("macro") 1093 24 1093 37 (",@rest" ",alist" "list->table" "rest" "alist")}
      {Lisp-Entry "%%table->list" define-macro ("macro") 1096 24 1096 37 (",table" "table->list" "table")}
      {Lisp-Entry "%%table-entries" define-macro ("macro") 1099 24 1099 39 (",table" "table->list" "cdr" "map" "table")}
      {Lisp-Entry "%%copy-table" define-macro ("macro") 1102 24 1102 36 (",table" "table-copy" "table")}
      {Lisp-Entry "%%thread?" define-macro ("macro") 1115 24 1115 33 (",obj" "thread?" "obj")}
      {Lisp-Entry "%%current-thread" define-macro ("macro") 1118 24 1118 40 ("##current-thread")}
      {Lisp-Entry "Unspecified-Value" define #f 1131 12 1131 34 ("void")}
      {Lisp-Entry "Unspecified-Value" define #f 1135 12 1135 34 ("unspecified" "jazz:unspecified" "%%list")}
      {Lisp-Entry "%%unspecified" define-macro ("macro") 1139 20 1139 33 ("Unspecified-Value" "jazz:Unspecified-Value")}
      {Lisp-Entry "%%unspecified?" define-macro ("macro") 1143 20 1143 34 ("Unspecified-Value" "jazz:Unspecified-Value" ",value" "%%eq?" "value")}
      {Lisp-Entry "%%specified?" define-macro ("macro") 1147 20 1147 32 ("Unspecified-Value" "jazz:Unspecified-Value" ",value" "%%neq?" "value")}
      {Lisp-Entry "%%values?" define-macro ("macro") 1158 24 1158 33 (",obj" "##values?" "obj")}
      {Lisp-Entry "%%vector?" define-macro ("macro") 1170 24 1170 33 ("##vector?" ",obj" "vector?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%vector" define-macro ("macro") 1175 23 1175 31 ("##vector" ",@rest" "vector" "debug-core?" "jazz:debug-core?" "if" "rest")}
      {Lisp-Entry "%%make-vector" define-macro ("macro") 1180 23 1180 36 ("##make-vector" ",@rest" ",size" "make-vector" "debug-core?" "jazz:debug-core?" "if" "rest" "size")}
      {Lisp-Entry "%%vector-length" define-macro ("macro") 1185 23 1185 38 ("##vector-length" ",vector" "vector-length" "debug-core?" "jazz:debug-core?" "if" "vector")}
      {Lisp-Entry "%%vector-ref" define-macro ("macro") 1190 23 1190 35 ("##vector-ref" ",n" ",vector" "vector-ref" "debug-core?" "jazz:debug-core?" "if" "n" "vector")}
      {Lisp-Entry "%%vector-set!" define-macro ("macro") 1195 23 1195 36 ("##vector-set!" ",value" ",n" ",vector" "vector-set!" "debug-core?" "jazz:debug-core?" "if" "value" "n" "vector")}
      {Lisp-Entry "%%vector-copy" define-macro ("macro") 1200 23 1200 36 ("##vector-copy" ",@rest" ",vector" "vector-copy" "debug-core?" "jazz:debug-core?" "if" "rest" "vector")}
      {Lisp-Entry "%%vector->list" define-macro ("macro") 1205 23 1205 37 ("##vector->list" ",vector" "vector->list" "debug-core?" "jazz:debug-core?" "if" "vector")}
      {Lisp-Entry "%%s8vector?" define-macro ("macro") 1210 23 1210 34 ("##s8vector?" ",obj" "s8vector?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%u8vector?" define-macro ("macro") 1215 23 1215 34 ("##u8vector?" ",obj" "u8vector?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%s16vector?" define-macro ("macro") 1220 23 1220 35 ("##s16vector?" ",obj" "s16vector?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%u16vector?" define-macro ("macro") 1225 23 1225 35 ("##u16vector?" ",obj" "u16vector?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%s32vector?" define-macro ("macro") 1230 23 1230 35 ("##s32vector?" ",obj" "s32vector?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%u32vector?" define-macro ("macro") 1235 23 1235 35 ("##u32vector?" ",obj" "u32vector?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%s64vector?" define-macro ("macro") 1240 23 1240 35 ("##s64vector?" ",obj" "s64vector?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%u64vector?" define-macro ("macro") 1245 23 1245 35 ("##u64vector?" ",obj" "u64vector?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%f32vector?" define-macro ("macro") 1250 23 1250 35 ("##f32vector?" ",obj" "f32vector?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%f64vector?" define-macro ("macro") 1255 23 1255 35 ("##f64vector?" ",obj" "f64vector?" "debug-core?" "jazz:debug-core?" "if" "obj")}
      {Lisp-Entry "%%vector?" define-macro ("macro") 1261 23 1261 32 (",obj" "vector?" "obj")}
      {Lisp-Entry "%%vector" define-macro ("macro") 1264 23 1264 31 (",@rest" "vector" "rest")}
      {Lisp-Entry "%%make-vector" define-macro ("macro") 1267 23 1267 36 (",@rest" ",size" "make-vector" "rest" "size")}
      {Lisp-Entry "%%vector-length" define-macro ("macro") 1270 23 1270 38 (",vector" "vector-length" "vector")}
      {Lisp-Entry "%%vector-ref" define-macro ("macro") 1273 23 1273 35 (",n" ",vector" "vector-ref" "n" "vector")}
      {Lisp-Entry "%%vector-set!" define-macro ("macro") 1276 23 1276 36 (",value" ",n" ",vector" "vector-set!" "value" "n" "vector")}
      {Lisp-Entry "%%vector-copy" define-macro ("macro") 1279 23 1279 36 (",@rest" ",vector" "vector-copy" "rest" "vector")}}})
"runtime"
 ({Lisp-File-Entry {File :context "syntax" "runtime.scm"} 236918187. scheme
    {Lisp-Entry "kernel.runtime" block #f 37 7 37 21 ("kernel-declares" "jazz:kernel-declares")
      {Lisp-Entry "expand-unit-source" define #f 48 9 48 32 (",@body" "unit" "declares" "jazz:declares" "begin" "%%neq?" "requested-unit-name" "jazz:requested-unit-name" "and" "error" "jazz:error" "%%symbol?" "%%not" "body" "access" "name" "lambda" "%%cdr" "%%cddr" "%%cadr" "public" "protected" "%%memq" "if" "%%car" "source-code" "jazz:source-code" "first" "let" "proc" "parse" "define" "rest")}
      {Lisp-Entry "expand-require" define #f 71 9 71 28 ("%%desourcify" "src" "filter-features" "jazz:filter-features" ",unit-name" "load-unit" "jazz:load-unit" "phase" "feature-requirement" "unit-name" "listify" "jazz:listify" "parse-require" "jazz:parse-require" "require" "lambda" "map" "begin" "simplify-begin" "jazz:simplify-begin" "rest")}
      {Lisp-Entry "parse-require" define #f 84 9 84 27 ("%%cdar" "set!" "begin" "cond" "%%caar" "%%eq?" "%%pair?" "and" "if" "runtime" "phase" "feature-requirement" "%%cdr" "scan" "%%car" "name" "let" "proc" "require")}
      {Lisp-Entry "filter-features" define #f 106 9 106 29 ("else" "%%cddr" "%%cons" "feature-satisfied?" "jazz:feature-satisfied?" "%%list" "feature-requirement" "let" "lambda" "map" "append" "%%apply" "cond" "%%car" "%%eq?" "%%cadr" "%%cdr" "%%null?" "%%not" "%%pair?" "and" "if" "invoice" "extract-feature-requirement" "define" "invoices")}
      {Lisp-Entry "feature-satisfied?" define #f 127 9 127 32 ("error" "##cond-expand-features" "%%memq" "%%symbol?" "if" "feature-requirement")}}})
"settings"
 ({Lisp-File-Entry {File :context "runtime" "settings.scm"} 236918186. scheme
    {Lisp-Entry "kernel.settings" block #f 37 7 37 22 ("kernel-declares" "jazz:kernel-declares")
      {Lisp-Entry "build-repository" define-macro ("setting") 48 21 48 42 ()}
      {Lisp-Entry "jazz-repository" define-macro ("setting") 51 21 51 41 ()}
      {Lisp-Entry "repositories" define-macro ("setting") 54 21 54 38 ()}
      {Lisp-Entry "load-verbose?" define-macro ("setting") 63 21 63 39 ()}
      {Lisp-Entry "outline-verbose?" define-macro ("setting") 66 21 66 42 ()}
      {Lisp-Entry "done-verbose?" define-macro ("setting") 69 21 69 39 ()}
      {Lisp-Entry "warn-interpreted?" define-macro ("setting") 78 21 78 43 ()}
      {Lisp-Entry "warnings?" define-macro ("setting") 88 21 88 35 ()}
      {Lisp-Entry "delay-reporting?" define-macro ("setting") 92 21 92 42 ()}
      {Lisp-Entry "use-print?" define-macro ("setting") 102 21 102 36 ()}
      {Lisp-Entry "debug-build?" define-macro ("setting") 111 21 111 38 ()}
      {Lisp-Entry "build-setup" define-macro ("setting") 114 21 114 37 ()}
      {Lisp-Entry "build-binary-repositories" define-macro ("setting") 117 21 117 51 ()}
      {Lisp-Entry "build-source-access?" define-macro ("setting") 120 21 120 46 ()}
      {Lisp-Entry "build-single-objects?" define-macro ("setting") 123 21 123 47 ()}
      {Lisp-Entry "build-link" define-macro ("setting") 126 21 126 36 ("objects")}
      {Lisp-Entry "build-jobs" define-macro ("setting") 129 21 129 36 ("1")}
      {Lisp-Entry "dry-run?" define-macro ("setting") 132 21 132 34 ()}
      {Lisp-Entry "save-emit?" define-macro ("setting") 135 21 135 36 ()}
      {Lisp-Entry "inline-definitions?" define-macro ("setting") 146 24 146 48 ()}
      {Lisp-Entry "inline-definitions?" define-macro ("setting") 149 24 149 48 ()}
      {Lisp-Entry "debug-specializers" define-macro ("setting") 153 21 153 44 ()}
      {Lisp-Entry "force-interpreted?" define-macro ("setting") 157 21 157 44 ()}
      {Lisp-Entry "use-debugger?" define-macro ("setting") 161 21 161 39 ()}
      {Lisp-Entry "profile-walker?" define-macro ("setting") 170 21 170 41 ()}
      {Lisp-Entry "keep-instances-statistics" define-macro ("setting") 179 21 179 51 ()}}})
"setup"
 ({Lisp-File-Entry {File :context "runtime" "setup.scm"} 236918186. scheme
    {Lisp-Entry "kernel.setup" block #f 37 7 37 19 ("container->id-hook" "jazz:container->id-hook" "##container->id-hook" "container->path-hook" "jazz:container->path-hook" "##container->path-hook" "path->container-hook" "jazz:path->container-hook" "##path->container-hook" "set!" "kernel-declares" "jazz:kernel-declares")
      {Lisp-Entry "compile-unit-internal" define-macro ("variable") 48 22 48 48 ()}
      {Lisp-Entry "custom-compile-unit-internal" define-macro ("variable") 49 22 49 55 ()}
      {Lisp-Entry "build-unit-internal" define-macro ("variable") 50 22 50 46 ()}
      {Lisp-Entry "get-subunit-names-internal" define-macro ("variable") 51 22 51 53 ()}
      {Lisp-Entry "compile-unit" define #f 54 9 54 26 ("compile-unit-internal" "jazz:compile-unit-internal" "%%apply" "load-build" "jazz:load-build" "rest")}
      {Lisp-Entry "custom-compile-unit" define #f 58 9 58 33 ("custom-compile-unit-internal" "jazz:custom-compile-unit-internal" "%%apply" "load-build" "jazz:load-build" "rest")}
      {Lisp-Entry "build-unit" define #f 62 9 62 24 ("build-unit-internal" "jazz:build-unit-internal" "%%apply" "load-build" "jazz:load-build" "rest")}
      {Lisp-Entry "get-subunit-names" define #f 66 9 66 31 ("get-subunit-names-internal" "jazz:get-subunit-names-internal" "%%apply" "load-build" "jazz:load-build" "rest")}
      {Lisp-Entry "path->container-hook" define #f 76 9 76 34 ("find-pathname-unit" "jazz:find-pathname-unit" "path")}
      {Lisp-Entry "container->path-hook" define #f 81 9 81 34 ("else" "resource-pathname" "jazz:resource-pathname" "if" "find-unit-src" "jazz:find-unit-src" "src" "let" "%%symbol?" "%%string-length" "%%substring" "%%string-append" "string-starts-with?" "jazz:string-starts-with?" "kernel-source" "jazz:kernel-source" "kernel-source-built" "jazz:kernel-source-built" "%%string?" "and" "cond" "container")}
      {Lisp-Entry "container->id-hook" define #f 101 9 101 32 ("%%symbol->string" "%%symbol?" "if" "container")}
      {Lisp-Entry "image-load-counter" define-macro ("variable") 117 22 117 45 ("0")}
      {Lisp-Entry "object-load-counter" define-macro ("variable") 118 22 118 46 ("0")}
      {Lisp-Entry "interpreted-load-counter" define-macro ("variable") 119 22 119 51 ("0")}
      {Lisp-Entry "increment-image-load-counter" define #f 122 9 122 42 ("1" "%%fx+" "image-load-counter" "jazz:image-load-counter" "set!")}
      {Lisp-Entry "increment-object-load-counter" define #f 124 9 124 43 ("1" "%%fx+" "object-load-counter" "jazz:object-load-counter" "set!")}
      {Lisp-Entry "increment-interpreted-load-counter" define #f 126 9 126 48 ("1" "%%fx+" "interpreted-load-counter" "jazz:interpreted-load-counter" "set!")}
      {Lisp-Entry "library-main" define #f 135 9 135 26 ("setup-repositories" "jazz:setup-repositories" "prepare-repositories" "jazz:prepare-repositories" "process-jazzini" "jazz:process-jazzini" "setup-settings" "jazz:setup-settings")}
      {Lisp-Entry "currently-loading-library-procs" define-macro ("variable") 147 22 147 58 ()}
      {Lisp-Entry "load-libraries" define #f 150 9 150 28 ("feedback" "jazz:feedback" "currently-loading-library-procs" "jazz:currently-loading-library-procs" "set!" "begin" "0" "%%vector-ref" "%%vector?" "and" "##load-object-file" "lib" "path-normalize" "pathname" "let*" "iterate-table" "jazz:iterate-table" "exists?" "filename" "1" "Library-Extension" "jazz:Library-Extension" "product-library-name-base" "jazz:product-library-name-base" "string-append" "with-numbered-pathname" "jazz:with-numbered-pathname" "product-descriptor-name" "jazz:product-descriptor-name" "product-descriptor" "for-each" "%%package-products" "products" "let" "package" "lambda" "iterate-packages" "jazz:iterate-packages" "%%table-set!" "error" "jazz:error" "%%table-ref" "if" "library-filename" "product-name" "add-library" "eq?" "test:" "%%make-table" "libraries" "define")}
      {Lisp-Entry "register-image-units" define #f 184 9 184 34 ("set-image-unit" "jazz:set-image-unit" "%%cadr" "compile-time-hash" "currently-loading-library-procs" "jazz:currently-loading-library-procs" "%%vector-ref" "load-proc" "name" "let" "i" "unit" "lambda" "1" "%%fx+" "%%cdr" "%%car" "begin" "%%null?" "%%not" "if" "n" "args" "proc" "index-for-each" "define" "units" "lib-name")}
      {Lisp-Entry "executable-main" define #f 212 9 212 29 ("exit" "else" "%%null?" "%%not" "build-product" "jazz:build-product" "subprocess-build-products" "jazz:subprocess-build-products" "make-product" "jazz:make-product" "update-product" "jazz:update-product" "force?:" "custom-compile-unit" "jazz:custom-compile-unit" "product" "jazz:product" "run-product" "jazz:run-product" "test-product" "jazz:test-product" "load-unit" "jazz:load-unit" "read" "call-with-input-string" "eval" "cond" "load-script" "jazz:load-script" "file-exists?" "path" "for-each" "load-foundation" "jazz:load-foundation" "lst" "run-scripts" "dry-run?" "jazz:dry-run?" "save-emit?" "jazz:save-emit?" "expansion" "keep-c" "%%cons" "compile-options" "jazz:compile-options" "debug-build?" "jazz:debug-build?" "0" "%%eqv?" "jazz:jobs" "parse-link" "jazz:parse-link" "link-options" "jazz:link-options" "build-link" "jazz:build-link" "or" "jazz:link" "process-buildini" "jazz:process-buildini" "setup-build" "load-libraries" "jazz:load-libraries" "setup-runtime" "jazz:setup-repositories" "prepare-repositories" "jazz:prepare-repositories" "kernel-source-access?" "jazz:kernel-source-access?" "jazz:repositories" "jazz:jazz-repository" "jazz:build-repository" "setup-repositories" "process-jazzini" "jazz:process-jazzini" "setup-settings" "jazz:setup-settings" "jazz:debugger" "##allow-inner-global-define?" "##set-gambcdir!" "directory-exists?" "jazz:directory-exists?" "and" "gambit-dir" "jazz:gambit-dir" "absolutize-directory" "jazz:absolutize-directory" "gambcdir" "kernel-install" "jazz:kernel-install" "setup-kernel" "port" "jobs" "link" "debugger" "compile" "build" "make" "update" "run" "test" "load" "ev" "repositories" "jazz-repository" "build-repository" "dry?" "emit?" "expansion?" "keep-c?" "subbuild?" "force?" "debug?" "get-option" "jazz:get-option" "nosource?" "let" "remaining" "options" "command-line" "%%cdr" "split-command-line" "jazz:split-command-line" "%%string->symbol" "symbol-argument" "%%string->number" "%%string?" "if" "arg" "number-argument" "repl-main" "jazz:repl-main" "%%write-string" "output-port" "lambda" "warnings" "jazz:warnings" "set!" "opt" "missing-argument-for-option" "define")}
      {Lisp-Entry "repl-main" define #f 350 9 350 23 ("force-output" "newline" "kernel-version" "jazz:kernel-version" "present-version" "jazz:present-version" "display" "warnings" "jazz:warnings" "if" "output-port" "first" "lambda" "%%repl" "current-error-port" "repl-output-port" "current-output-port" "repl-input-port" "current-input-port")}}})
"syntax"
 ({Lisp-File-Entry {File :context "syntax" "syntax.scm"} 236918187. scheme
    {Lisp-Entry "kernel.syntax" block #f 37 7 37 20 ("kernel-declares" "jazz:kernel-declares")
      {Lisp-Entry "define-setting" define-macro ("macro") 48 20 48 39 ("set!" ",name" ",expr" ",global" "define" "begin" "symbol->string" "generate-symbol" "jazz:generate-symbol" "global" "%%car" "%%null?" "if" "expr" "let" "rest" "name")}
      {Lisp-Entry "define-variable" define-macro ("macro") 64 20 64 40 (",expr" "set!" ",name" "define" "begin" "%%car" "%%null?" "if" "expr" "let" "rest" "name")}
      {Lisp-Entry "define-variable-override" define-macro ("macro") 71 20 71 49 (",value" ",name" "set!" "value" "name")}
      {Lisp-Entry "%%make-repository" define-macro ("macro") 85 20 85 37 (",binary?" ",library-directory" ",library-root" ",directory" ",name" "repository" "%%vector" "binary?" "library-directory" "library-root" "directory" "name")}
      {Lisp-Entry "%%repository-name" define-macro ("macro") 89 20 89 37 ("1" ",repository" "%%vector-ref" "repository")}
      {Lisp-Entry "%%repository-directory" define-macro ("macro") 92 20 92 42 ("2" ",repository" "%%vector-ref" "repository")}
      {Lisp-Entry "%%repository-library-root" define-macro ("macro") 95 20 95 45 ("3" ",repository" "%%vector-ref" "repository")}
      {Lisp-Entry "%%repository-library-directory" define-macro ("macro") 98 20 98 50 ("4" ",repository" "%%vector-ref" "repository")}
      {Lisp-Entry "%%repository-binary?" define-macro ("macro") 101 20 101 40 ("5" ",repository" "%%vector-ref" "repository")}
      {Lisp-Entry "%%repository-packages-table" define-macro ("macro") 104 20 104 47 ("6" ",repository" "%%vector-ref" "repository")}
      {Lisp-Entry "%%repository-packages-table-set!" define-macro ("macro") 107 20 107 52 (",packages-table" "6" ",repository" "%%vector-set!" "packages-table" "repository")}
      {Lisp-Entry "%%make-package" define-macro ("macro") 120 20 120 34 ("eq?" "test:" "%%make-table" ",project" ",profiles" ",products" ",char-encoding" ",install" ",units-path" ",units-root" ",library-path" ",library-root" ",parent" ",name" ",repository" "package" "%%vector" "project" "profiles" "products" "char-encoding" "install" "units-path" "units-root" "library-path" "library-root" "parent" "name" "repository")}
      {Lisp-Entry "%%package-repository" define-macro ("macro") 124 20 124 40 ("1" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-name" define-macro ("macro") 127 20 127 34 ("2" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-parent" define-macro ("macro") 130 20 130 36 ("3" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-library-root" define-macro ("macro") 133 20 133 42 ("4" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-library-path" define-macro ("macro") 136 20 136 42 ("5" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-units-root" define-macro ("macro") 139 20 139 40 ("6" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-units-path" define-macro ("macro") 142 20 142 40 ("7" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-install" define-macro ("macro") 145 20 145 37 ("8" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-char-encoding" define-macro ("macro") 148 20 148 43 ("9" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-products" define-macro ("macro") 151 20 151 38 ("10" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-profiles" define-macro ("macro") 154 20 154 38 ("11" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-profiles-set!" define-macro ("macro") 157 20 157 43 ("11" ",package" "%%vector-set!" "profiles" "package")}
      {Lisp-Entry "%%package-project" define-macro ("macro") 160 20 160 37 ("12" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%make-product" define-macro ("macro") 172 20 172 34 (",descriptor" ",package" ",build-library" ",build" ",update" ",test" ",run" ",icon" ",title" ",name" "product" "%%vector" "descriptor" "package" "build-library" "build" "update" "test" "run" "icon" "title" "name")}
      {Lisp-Entry "%%product-name" define-macro ("macro") 175 20 175 34 ("1" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-title" define-macro ("macro") 178 20 178 35 ("2" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-icon" define-macro ("macro") 181 20 181 34 ("3" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-run" define-macro ("macro") 184 20 184 33 ("4" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-test" define-macro ("macro") 187 20 187 34 ("5" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-update" define-macro ("macro") 190 20 190 36 ("6" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-build" define-macro ("macro") 193 20 193 35 ("7" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-build-library" define-macro ("macro") 196 20 196 43 ("8" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-package" define-macro ("macro") 199 20 199 37 ("9" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-descriptor" define-macro ("macro") 202 20 202 40 ("10" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%make-resource" define-macro ("macro") 216 20 216 35 (",extension" ",path" ",package" "resource" "%%vector" "extension" "path" "package")}
      {Lisp-Entry "%%resource-package" define-macro ("macro") 220 20 220 38 ("1" ",resource" "%%vector-ref" "resource")}
      {Lisp-Entry "%%resource-path" define-macro ("macro") 223 20 223 35 ("2" ",resource" "%%vector-ref" "resource")}
      {Lisp-Entry "%%resource-extension" define-macro ("macro") 226 20 226 40 ("3" ",resource" "%%vector-ref" "resource")}
      {Lisp-Entry "%%make-image-unit" define-macro ("macro") 235 20 235 37 (",compile-time-hash" ",load-proc" "image-unit" "%%vector" "compile-time-hash" "load-proc")}
      {Lisp-Entry "%%image-unit-load-proc" define-macro ("macro") 238 20 238 42 ("1" ",image-unit" "%%vector-ref" "image-unit")}
      {Lisp-Entry "%%image-unit-compile-time-hash" define-macro ("macro") 241 20 241 50 ("2" ",image-unit" "%%vector-ref" "image-unit")}
      {Lisp-Entry "%%make-digest" define-macro ("macro") 250 20 250 33 (",time" ",hash" ",pathname" "digest" "%%vector" "time" "hash" "pathname")}
      {Lisp-Entry "%%digest-pathname" define-macro ("macro") 254 20 254 37 ("1" ",digest" "%%vector-ref" "digest")}
      {Lisp-Entry "%%digest-pathname-set!" define-macro ("macro") 257 20 257 42 (",pathname" "1" ",digest" "%%vector-set!" "pathname" "digest")}
      {Lisp-Entry "%%digest-hash" define-macro ("macro") 260 20 260 33 ("2" ",digest" "%%vector-ref" "digest")}
      {Lisp-Entry "%%digest-hash-set!" define-macro ("macro") 263 20 263 38 (",hash" "2" ",digest" "%%vector-set!" "hash" "digest")}
      {Lisp-Entry "%%digest-time" define-macro ("macro") 266 20 266 33 ("3" ",digest" "%%vector-ref" "digest")}
      {Lisp-Entry "%%digest-time-set!" define-macro ("macro") 269 20 269 38 (",time" "3" ",digest" "%%vector-set!" "time" "digest")}
      {Lisp-Entry "%%make-manifest" define-macro ("macro") 278 20 278 35 (",references" ",source-digests" ",compile-time-hash" ",version" ",name" "manifest" "%%vector" "references" "source-digests" "compile-time-hash" "version" "name")}
      {Lisp-Entry "%%manifest-name" define-macro ("macro") 282 20 282 35 ("1" ",manifest" "%%vector-ref" "manifest")}
      {Lisp-Entry "%%manifest-version" define-macro ("macro") 285 20 285 38 ("2" ",manifest" "%%vector-ref" "manifest")}
      {Lisp-Entry "%%manifest-version-set!" define-macro ("macro") 288 20 288 43 (",version" "2" ",manifest" "%%vector-set!" "version" "manifest")}
      {Lisp-Entry "%%manifest-compile-time-hash" define-macro ("macro") 291 20 291 48 ("3" ",manifest" "%%vector-ref" "manifest")}
      {Lisp-Entry "%%manifest-compile-time-hash-set!" define-macro ("macro") 294 20 294 53 (",compile-time-hash" "3" ",manifest" "%%vector-set!" "compile-time-hash" "manifest")}
      {Lisp-Entry "%%manifest-source-digests" define-macro ("macro") 297 20 297 45 ("4" ",manifest" "%%vector-ref" "manifest")}
      {Lisp-Entry "%%manifest-source-digests-set!" define-macro ("macro") 300 20 300 50 (",source-digests" "4" ",manifest" "%%vector-set!" "source-digests" "manifest")}
      {Lisp-Entry "%%manifest-references" define-macro ("macro") 303 20 303 41 ("5" ",manifest" "%%vector-ref" "manifest")}
      {Lisp-Entry "%%manifest-references-set!" define-macro ("macro") 306 20 306 46 (",references" "5" ",manifest" "%%vector-set!" "references" "manifest")}
      {Lisp-Entry "unit" define-macro ("syntax") 315 20 315 24 ("source-code" "jazz:source-code" "%%cdr" "expand-unit-source" "jazz:expand-unit-source" "form-src" "lambda")}
      {Lisp-Entry "require" define-macro ("syntax") 320 20 320 27 ("source-code" "jazz:source-code" "%%cdr" "expand-require" "jazz:expand-require" "form-src" "lambda")}}})
"unit"
 ({Lisp-File-Entry {File :context "runtime" "unit.scm"} 236918186. scheme
    {Lisp-Entry "kernel.unit" block #f 38 7 38 18 ("scheme-readtable" "jazz:scheme-readtable" "lambda" "register-reader-extension" "jazz:register-reader-extension" "kernel-source" "jazz:kernel-source" "jazz-source" "jazz:jazz-source" "set!" "kernel-declares" "jazz:kernel-declares")
      {Lisp-Entry "display" define-macro ("variable") 49 22 49 34 ("display")}
      {Lisp-Entry "write" define-macro ("variable") 50 22 50 32 ("write")}
      {Lisp-Entry "format" define #f 58 9 58 20 ("get-output-string" "open-output-string" "port" "write-char" "%%eqv?" "cond" "begin" "%%eof-object?" "%%not" "c" "iter" "kernel-error" "jazz:kernel-error" "else" "newline" "%" "element" "lambda" "for-each" "first?" "l" "t" "write" "jazz:write" "s" "set!" "display" "jazz:display" "a" "case" "read-char" "read" "directive" "format-directive" "done?" "open-input-string" "control" "let" "arguments" "fmt-string" "output" "format-to" "%%cddr" "%%cadr" "%%cdr" ":string" "%%car" "%%string?" "if" "proc" "parse-format" "define" "rest")}
      {Lisp-Entry "pristine-thread-continuation" define #f 122 8 122 41 ("cont" "continuation-capture" "lambda" "make-thread" "thread-start!" "thread-join!")}
      {Lisp-Entry "kernel-error" define #f 137 9 137 26 ("error" "%%apply" "rest")}
      {Lisp-Entry "raise-system-error" define #f 141 9 141 32 ("error" "format" "jazz:format" "apply" "error-string" "let" "rest" "fmt-string")}
      {Lisp-Entry "error" define-macro ("variable") 146 22 146 32 ("raise-system-error" "jazz:raise-system-error")}
      {Lisp-Entry "primitive-type-error" define #f 150 9 150 34 ("%%cons" "format" "jazz:format" "error" "args" "proc" "type" "num")}
      {Lisp-Entry "some?" define #f 159 9 159 19 ("%%cdr" "%%car" "or" "%%null?" "if" "scan" "iter" "let" "proper-tail-calls" "declare" "lst" "predicate")}
      {Lisp-Entry "every?" define #f 168 9 168 20 ("%%cdr" "%%car" "and" "%%null?" "or" "scan" "iter" "let" "proper-tail-calls" "declare" "lst" "predicate")}
      {Lisp-Entry "file-delete" define #f 183 12 183 28 ("delete-file")}
      {Lisp-Entry "file-copy" define #f 186 12 186 26 ("copy-file")}
      {Lisp-Entry "directory-exists?" define #f 189 12 189 34 ("file-exists?")}
      {Lisp-Entry "directory-create" define #f 192 12 192 33 ("create-directory")}
      {Lisp-Entry "marker?" define #f 203 9 203 21 ("#!rest" "#!key" "#!optional" "%%eq?" "or" "obj")}
      {Lisp-Entry "kernel-built" define #f 214 8 214 25 ("built" "jazz:built")}
      {Lisp-Entry "kernel-install" define #f 218 8 218 27 ("built" "jazz:built" "pathname-normalize" "jazz:pathname-normalize" "executable-directory" "jazz:executable-directory" "executable" "image" "jazz:image" "%%eq?" "and" "or")}
      {Lisp-Entry "install-path" define #f 223 9 223 26 ("%%string-append" "kernel-install" "jazz:kernel-install" "%%not" "if" "filename")}
      {Lisp-Entry "kernel-source-built" define #f 229 8 229 32 ("source-built" "jazz:source-built")}
      {Lisp-Entry "kernel-source" define #f 233 8 233 26 ("kernel-install" "jazz:kernel-install" "absolutize-directory" "jazz:absolutize-directory" "source" "jazz:source" "if")}
      {Lisp-Entry "kernel-source-access?" define #f 242 8 242 34 ("product" "jazz:product" "not" "source-access?" "jazz:source-access?" "or")}
      {Lisp-Entry "kernel-binary-repositories" define #f 246 8 246 39 ("binary-repositories" "jazz:binary-repositories")}
      {Lisp-Entry "kernel-source-repositories" define #f 250 8 250 39 ("source-repositories" "jazz:source-repositories")}
      {Lisp-Entry "jazz-product" define #f 254 9 254 26 ("product" "jazz:product")}
      {Lisp-Entry "jazz-profile" define #f 258 9 258 26 ("profile" "jazz:profile")}
      {Lisp-Entry "profile" define #f 262 8 262 20 ("make-parameter")}
      {Lisp-Entry "run-loop?" define #f 267 8 267 22 ("make-parameter")}
      {Lisp-Entry "Repository-Filename" define #f 276 8 276 32 ()}
      {Lisp-Entry "repository?" define #f 280 9 280 25 ("repository" "%%vector-ref" "%%eq?" "0" "%%vector-length" "%%fx>" "%%vector?" "and" "obj")}
      {Lisp-Entry "Repositories" define-macro ("variable") 286 22 286 39 ()}
      {Lisp-Entry "Build-Repository" define-macro ("variable") 289 22 289 43 ()}
      {Lisp-Entry "get-repositories" define #f 293 9 293 30 ("Repositories" "jazz:Repositories")}
      {Lisp-Entry "get-build-repository" define #f 296 9 296 34 ("Build-Repository" "jazz:Build-Repository")}
      {Lisp-Entry "prepare-repositories" define #f 300 9 300 34 ("%%append" "Repositories" "jazz:Repositories" "Build-Repository" "jazz:Build-Repository" "set!" "jazz:repositories" "kernel-source-repositories" "jazz:kernel-source-repositories" "kernel-binary-repositories" "jazz:kernel-binary-repositories" "kernel-source" "jazz:kernel-source" "jazz-repository" "jazz:jazz-repository" "Jazz" "and" "create?:" "binary?:" "build-repository" "jazz:build-repository" "or" "Build" "make-repository" "jazz:make-repository" "kernel-source-access?" "jazz:kernel-source-access?" "source-access?" "error?:" "Binaries" "name:" "kernel-install" "jazz:kernel-install" "absolutize-directory" "jazz:absolutize-directory" "dir" "let" "path" "lambda" "collect" "jazz:collect" "split-string" "jazz:split-string" "load-repository" "jazz:load-repository" "map" "%%list" "if" "repository" "listify" "repositories" "source-repositories" "binary-repositories" "jazz" "build" "all-repositories" "define")}
      {Lisp-Entry "make-repository" define #f 333 9 333 29 ("else" "create-directories" "jazz:create-directories" "load-repository" "jazz:load-repository" "file-exists?" "jazz:file-exists?" "cond" "Repository-Filename" "jazz:Repository-Filename" "%%string-append" "dirname-normalize" "jazz:dirname-normalize" "let" "%%equal?" "%%not" "error" "jazz:error" "repository-inexistant" "write" "newline" "begin" "or" "if" "display" "output" "lambda" "kernel-platform" "jazz:kernel-platform" "platform-eol-encoding" "jazz:platform-eol-encoding" "eol-encoding:" "path:" "list" "call-with-output-file" "repository-file" "create-repository" "define" "create?" "binary?" "#!key" "directory" "library" "name")}
      {Lisp-Entry "load-repository" define #f 374 9 374 29 ("dirname-normalize" "jazz:dirname-normalize" "error" "jazz:error" "repository-inexistant" "%%make-repository" "%%not" "library-directory" "library-root" "library" "library-pair" "binary?" "%%assq" "binary-pair" "pathname-normalize" "jazz:pathname-normalize" "%%cddr" "alist" "%%cadr" "or" "read" "form" "input" "lambda" "cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "file-exists?" "jazz:file-exists?" "Repository-Filename" "jazz:Repository-Filename" "%%string-append" "repository-file" "let" "directory-exists?" "jazz:directory-exists?" "if" "load-repository" "define" "error?" "name" "#!key" "directory")}
      {Lisp-Entry "install-repository" define #f 404 9 404 32 ("setup-repository" "jazz:setup-repository" "setup-repositories-called?" "jazz:setup-repositories-called?" "%%list" "%%append" "Repositories" "jazz:Repositories" "set!" "name:" "load-repository" "jazz:load-repository" "repository?" "jazz:repository?" "if" "repository" "let" "name" "#!key" "directory/repository")}
      {Lisp-Entry "install-repository-if-exists" define #f 412 9 412 42 ("name:" "install-repository" "jazz:install-repository" "directory-exists?" "jazz:directory-exists?" "if" "name" "#!key" "directory")}
      {Lisp-Entry "uninstall-repository" define #f 417 9 417 34 ("%%remove" "Repositories" "jazz:Repositories" "set!" "repository")}
      {Lisp-Entry "find-repository" define #f 421 9 421 29 ("%%cdr" "%%repository-name" "%%eq?" "%%car" "repository" "%%null?" "if" "Repositories" "jazz:Repositories" "repositories" "iter" "let" "name")}
      {Lisp-Entry "find-package" define #f 431 9 431 26 ("repository-find-package" "jazz:repository-find-package" "package" "%%cdr" "%%repository-binary?" "%%car" "repository" "%%null?" "if" "Repositories" "jazz:Repositories" "repositories" "iter" "let" "package-name")}
      {Lisp-Entry "repository-pathname" define #f 444 9 444 33 ("%%repository-library-directory" "%%string-append" "path" "repository")}
      {Lisp-Entry "repository-packages-table" define #f 449 9 449 39 ("repository-install-packages" "jazz:repository-install-packages" "%%repository-packages-table-set!" "eq?" "test:" "%%make-table" "table" "let" "%%repository-packages-table" "or" "repository")}
      {Lisp-Entry "setup-repositories-called?" define-macro ("variable") 457 22 457 53 ()}
      {Lisp-Entry "setup-repositories" define #f 461 9 461 32 ("setup-repositories-called?" "jazz:setup-repositories-called?" "set!" "Repositories" "jazz:Repositories" "setup-repository" "jazz:setup-repository" "for-each")}
      {Lisp-Entry "setup-repository" define #f 466 9 466 30 ("setup-package" "jazz:setup-package" "package" "name" "lambda" "iterate-table-safe" "jazz:iterate-table-safe" "repository-packages-table" "jazz:repository-packages-table" "table" "let" "repository")}
      {Lisp-Entry "repository-packages" define #f 473 9 473 33 ("%%cons" "set!" "package" "name" "lambda" "iterate-table" "jazz:iterate-table" "packages" "repository-packages-table" "jazz:repository-packages-table" "table" "let" "repository")}
      {Lisp-Entry "repository-find-package" define #f 482 9 482 37 ("repository-packages-table" "jazz:repository-packages-table" "%%table-ref" "package-name" "repository")}
      {Lisp-Entry "repository-install-packages" define #f 486 9 486 41 ("%%package-name" "%%table-set!" "lambda" "for-each" "%%repository-library-directory" "%%package-repository" "repository-pathname" "jazz:repository-pathname" "%%package-library-path" "library-path" "%%cons" "load-package" "jazz:load-package" "package" "%%cdr" "%%table-ref" "%%string->symbol" "package-name" "file-exists?" "jazz:file-exists?" "Package-Filename" "jazz:Package-Filename" "package-pathname" "%%string-append" "directory" "%%car" "dirname" "%%null?" "directory-directories" "jazz:directory-directories" "dirnames" "iter" "directory-exists?" "jazz:directory-exists?" "if" "packages" "library-directory" "parent" "discover-packages" "%%repository-packages-table" "table" "let" "repository-discover-packages" "define" "repository")}
      {Lisp-Entry "repository-add-package" define #f 521 9 521 36 ("%%package-name" "%%table-set!" "repository-packages-table" "jazz:repository-packages-table" "table" "let" "package" "repository")}
      {Lisp-Entry "repository-remove-package" define #f 526 9 526 39 ("%%package-name" "%%table-clear" "repository-packages-table" "jazz:repository-packages-table" "table" "let" "package" "repository")}
      {Lisp-Entry "load-package" define #f 531 9 531 26 ("error" "jazz:error" "cache-package-roots" "jazz:cache-package-roots" "%%cdr" "make-package" "jazz:make-package" "package" "project" "profiles" "products" "char-encoding" "install" "root" "%%assq" "library" "%%eq?" "if" "%%cddr" "alist" "%%cadr" "name" "read" "form" "let" "input" "lambda" "cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "package-pathname" "package-name" "parent" "repository")}
      {Lisp-Entry "create-build-package" define #f 559 9 559 34 ("file-copy" "jazz:file-copy" "file-delete" "jazz:file-delete" "create-directories" "jazz:create-directories" "begin" "repository-find-package" "jazz:repository-find-package" "or" "file-modification-time" "jazz:file-modification-time" ">=" "file-exists?" "jazz:file-exists?" "and" "%%repository-packages-table" "%%table-set!" "jazz:load-package" "let" "load-package" "define" "Build-Repository" "jazz:Build-Repository" "dst" "%%package-repository" "repository-pathname" "jazz:repository-pathname" "src" "Package-Filename" "jazz:Package-Filename" "path" "%%symbol->string" "%%package-library-path" "%%string-append" "dir" "create-build-package" "jazz:create-build-package" "if" "bin-parent" "%%package-parent" "parent" "%%package-name" "name" "let*" "package")}
      {Lisp-Entry "setup-package" define #f 585 9 585 27 ("load-unit" "jazz:load-unit" "if" "%%package-install" "install" "let" "package")}
      {Lisp-Entry "inspect-install" define #f 591 9 591 29 ("Repositories" "jazz:Repositories" "%%package-units-path" "%%package-units-root" "%%package-name" ":package" "package" "repository-packages" "jazz:repository-packages" "inspect-package" "map" "%%repository-library-directory" "%%repository-name" ":repository" "repository" "inspect-repository" "path-expand" ",path" ":path" "path" "inspect-path" "define")}
      {Lisp-Entry "Package-Filename" define #f 617 8 617 29 ()}
      {Lisp-Entry "package?" define #f 621 9 621 22 ("package" "%%vector-ref" "%%eq?" "0" "%%vector-length" "%%fx>" "%%vector?" "and" "obj")}
      {Lisp-Entry "make-package" define #f 627 9 627 26 ("%%make-package" "units-path" "%%symbol->string" "%%string-append" "%%not" "if" "library-path" "let" "project" "profiles" "products" "char-encoding" "install" "units-root" "library-root" "parent" "name" "repository")}
      {Lisp-Entry "package-root" define #f 637 9 637 26 ("%%package-name" "%%symbol->string" "%%package-library-path" "if" "%%package-repository" "%%repository-library-root" "library-root" "%%string-append" "%%package-parent" "parent" "let" "package")}
      {Lisp-Entry "package-pathname" define #f 647 9 647 30 ("%%package-name" "%%symbol->string" "%%string-append" "%%package-repository" "repository-pathname" "jazz:repository-pathname" "path" "package")}
      {Lisp-Entry "package-root-pathname" define #f 652 9 652 35 ("%%package-repository" "relocate-package-pathname" "jazz:relocate-package-pathname" "path" "package")}
      {Lisp-Entry "relocate-package-pathname" define #f 656 9 656 39 ("or" "%%package-units-path" "%%package-library-path" "if" "%%string-append" "repository-pathname" "jazz:repository-pathname" "%%package-parent" "parent" "let" "path" "package" "repository")}
      {Lisp-Entry "iterate-packages" define #f 665 9 665 30 ("package" "repository-packages" "jazz:repository-packages" "packages" "iter" "%%cdr" "%%repository-binary?" "%%neq?" "%%car" "repository" "%%null?" "%%not" "if" "Repositories" "jazz:Repositories" "repositories" "iter-repo" "let" "proc" "binary?")}
      {Lisp-Entry "find-resource" define #f 679 9 679 27 ("%%make-resource" "%%fx>=" "previous-pos" "name-length" "name" "%%string-ref" "%%eqv?" "%%fx<" "2" "name-pos" "string-find-reversed" "jazz:string-find-reversed" "pos" "len" "1" "%%fx+" "%%fx-" "set!" "pathname-extension" "jazz:pathname-extension" "extension" "path" "let*" "0" "%%substring" "%%string=?" "%%fx<=" "and" "package-length" "%%string-length" "pathname-length" "package-root-pathname" "jazz:package-root-pathname" "package-pathname" "package" "%%cdr" "%%car" "repository-packages" "jazz:repository-packages" "packages" "iter" "%%null?" "if" "Repositories" "jazz:Repositories" "repositories" "iter-repo" "let" "pathname")}
      {Lisp-Entry "descendant-unit?" define #f 712 9 712 30 ("%%string-ref" "%%eqv?" "0" "%%substring" "%%string=?" "%%fx>" "and" "descendant-length" "%%string-length" "unit-length" "descendant" "%%symbol->string" "unit" "let" "descendant-name" "unit-name")}
      {Lisp-Entry "find-pathname-unit" define #f 722 9 722 32 ("%%resource-path" "path->name" "jazz:path->name" "if" "find-resource" "jazz:find-resource" "resource" "let" "pathname")}
      {Lisp-Entry "gather-profiles" define #f 734 9 734 29 ("%%cons" "package-profile" "lambda" "map" "%%append" "%%package-profiles" "package-profiles" "package" "repository-packages" "jazz:repository-packages" "packages" "iter" "%%cdr" "%%repository-binary?" "%%car" "repository" "%%null?" "if" "profiles" "Repositories" "jazz:Repositories" "repositories" "iter-repo" "let")}
      {Lisp-Entry "make-profile" define #f 752 9 752 26 (",unit-name" "unit" ",name" "unit-name" "name")}
      {Lisp-Entry "profile-name" define #f 756 9 756 26 ("%%car" "profile")}
      {Lisp-Entry "profile-title" define #f 759 9 759 27 ("profile-name" "jazz:profile-name" "%%symbol->string" "profile")}
      {Lisp-Entry "profile-unit" define #f 762 9 762 26 ("%%cadr" "error" "jazz:error" "%%not" "if" "%%cdr" "unit" "%%assq" "pair" "let" "profile")}
      {Lisp-Entry "lower-case-unit-name?" define #f 774 9 774 35 ("%%char<=?" "and" "%%symbol->string" "first-char" "else" "0" "%%fx=" "error" "jazz:error" "%%fx+" "%%fx<" "if" "%%char=?" "cond" "%%string-ref" "ch" "1" "%%string-length" "%%fx-" "offset" "loop" "let" "str" "first-char-of-last-name" "define" "unit-name")}
      {Lisp-Entry "find-unit-src" define #f 792 9 792 27 ("error" "jazz:error" "cache-package" "jazz:cache-package" "begin" "iterate-packages" "jazz:iterate-packages" "*source-packages-cache*" "jazz:*source-packages-cache*" "cached-packages" "jazz:cached-packages" "continuation-return" "src" "for-each" "name->path" "jazz:name->path" "return" "lambda" "continuation-capture" "error?" "pathname-name" "jazz:pathname-name" "lower-case-unit-name?" "jazz:lower-case-unit-name?" "directory-exists?" "jazz:directory-exists?" "and" "%%cdr" "%%car" "%%null?" "or" "iter" "let" "%%make-resource" "%%string-append" "package-root-pathname" "jazz:package-root-pathname" "file-exists?" "jazz:file-exists?" "if" "extension" "try-extension" "try" "path" "package" "find-src" "define" "rest" "extensions" "unit-name")}
      {Lisp-Entry "with-unit-resources" define #f 837 9 837 33 ("%%image-unit-load-proc" "image-unit-uptodate-src?" "jazz:image-unit-uptodate-src?" "image-unit-uptodate?" "jazz:image-unit-uptodate?" "lib-uptodate?" "bin-uptodate?" "obj-uptodate?" "get-image-unit" "jazz:get-image-unit" "image-unit" "find-unit-src" "jazz:find-unit-src" "cache-package" "jazz:cache-package" "begin" "iterate-packages" "jazz:iterate-packages" "*binary-packages-cache*" "jazz:*binary-packages-cache*" "cached-packages" "jazz:cached-packages" "continuation-return" "receive" "for-each" "name->path" "jazz:name->path" "return" "lambda" "continuation-capture" "values" "manifest-needs-rebuild?" "jazz:manifest-needs-rebuild?" "manifest-uptodate?" "jazz:manifest-uptodate?" "%%not" "uptodate?" "resource-pathname" "jazz:resource-pathname" "manifest-pathname" "jazz:manifest-pathname" "%%resource-package" "digest-pathname" "jazz:digest-pathname" "load-updated-manifest" "jazz:load-updated-manifest" "or" "obj/bin" "manifest" "bin" "obj" "find-uptodate" "pathname-name" "jazz:pathname-name" "lower-case-unit-name?" "jazz:lower-case-unit-name?" "directory-exists?" "jazz:directory-exists?" "and" "%%make-resource" "%%string-append" "package-root-pathname" "jazz:package-root-pathname" "file-exists?" "jazz:file-exists?" "if" "try" "extension" "path" "package" "find" "src" "find-unit-binaries" "%%memv" "else" "%%eq?" "%%symbol?" "%%boolean?" "cond" "jazz:force-interpreted?" "interpreted?" "let" "force-interpreted?" "define" "proc" "extensions" "unit-name")}
      {Lisp-Entry "unit-status" define #f 929 9 929 25 ("sha-1" "resource-pathname" "jazz:resource-pathname" "digest-file" "begin" "if" "newline" "display" "unit-loaded?" "jazz:unit-loaded?" "loaded?" "let" "manifest" "lib-uptodate?" "bin-uptodate?" "obj-uptodate?" "load-proc" "bin" "obj" "src" "lambda" "with-unit-resources" "jazz:with-unit-resources" "unit-name")}
      {Lisp-Entry "unit-uptodate-binary?" define #f 946 9 946 35 ("or" "manifest" "lib-uptodate?" "bin-uptodate?" "obj-uptodate?" "lib" "bin" "obj" "src" "lambda" "with-unit-resources" "jazz:with-unit-resources" "unit-name")}
      {Lisp-Entry "image-unit-uptodate?" define #f 952 9 952 34 ("%%digest-hash" "%%image-unit-compile-time-hash" "%%string=?" "and" "resource-pathname" "jazz:resource-pathname" "find-source-digest" "jazz:find-source-digest" "digest" "let" "manifest" "src" "image-unit")}
      {Lisp-Entry "image-unit-uptodate-src?" define #f 957 9 957 38 ("%%image-unit-compile-time-hash" "%%string=?" "sha-1" "resource-pathname" "jazz:resource-pathname" "digest-file" "source-hash" "let" "src" "image-unit")}
      {Lisp-Entry "validate-repository-unicity" define #f 962 9 962 41 ("%%repository-name" "or" "error" "jazz:error" "%%not" "%%cdr" "%%car" "package" "%%null?" "if" "found?" "repository-packages" "jazz:repository-packages" "packages" "iter" "let" "repository-unique?" "define" "proc" "unit-name" "repository")}
      {Lisp-Entry "*binary-packages-cache*" define #f 994 8 994 36 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "*source-packages-cache*" define #f 997 8 997 36 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "cache-package" define #f 1001 9 1001 27 ("%%cons" "%%table-set!" "%%memq" "%%not" "if" "%%table-ref" "packages" "let" "singleton-prefix" "prefix" "lambda" "with-cached-prefix" "jazz:with-cached-prefix" "package" "unit-name" "cache")}
      {Lisp-Entry "cached-packages" define #f 1009 9 1009 29 ("if" "%%table-ref" "or" "singleton-prefix" "prefix" "lambda" "with-cached-prefix" "jazz:with-cached-prefix" "unit-name" "cache")}
      {Lisp-Entry "with-cached-prefix" define #f 1019 9 1019 32 ("0" "%%substring" "%%string->symbol" "1" "%%fx+" "second-period" "if" "string-find" "jazz:string-find" "first-period" "%%symbol->string" "name" "let" "proc" "unit-name")}
      {Lisp-Entry "cache-package-roots" define #f 1031 9 1031 33 ("directory-directories" "jazz:directory-directories" "directory-content" "jazz:directory-content" "cache-package" "jazz:cache-package" "%%string->symbol" "unit-name" "directory" "set!" "regular" "pathname-type" "jazz:pathname-type" "case" "%%string-append" "second-path" "second-part" "has-files?" "string-append" "first-dir" "first-part" "lambda" "for-each" "directory-exists?" "jazz:directory-exists?" "package-root-pathname" "jazz:package-root-pathname" "toplevel-dir" "*source-packages-cache*" "jazz:*source-packages-cache*" "*binary-packages-cache*" "jazz:*binary-packages-cache*" "%%package-repository" "%%repository-binary?" "if" "cache" "let" "package")}
      {Lisp-Entry "load-debuggee" define #f 1059 9 1059 27 ("jazz.debuggee.update" "jazz.debuggee.setup" "load-unit" "jazz:load-unit" "load-debuggee-units" "jazz:load-debuggee-units")}
      {Lisp-Entry "load-debuggee-units" define #f 1065 9 1065 33 ("jazz.debugger.jazz.stub-autoload" "jazz.debugger.jazz.stub" "jazz.debuggee.stub" "jazz.debuggee.Debuggee-Thread" "jazz.debuggee.Debuggee-Stop" "jazz.debuggee.Debuggee-Process" "jazz.debuggee.Debuggee-Frame" "jazz.debuggee" "jazz" "load-unit" "jazz:load-unit" "load-foundation" "jazz:load-foundation")}
      {Lisp-Entry "find-product-descriptor" define #f 1083 9 1083 37 ("else" "set!" "%%repository-binary?" "find-product-descriptor" "jazz:find-product-descriptor" "cond" "product-descriptor-alias" "jazz:product-descriptor-alias" "alias" "%%package-products" "%%assq" "pair" "package" "%%cdr" "repository-packages" "jazz:repository-packages" "packages" "iter" "%%car" "repository" "values" "%%null?" "if" "Repositories" "jazz:Repositories" "repositories" "iter-repo" "binary-descriptor" "binary-package" "let" "name")}
      {Lisp-Entry "product-descriptor-name" define #f 1108 9 1108 37 ("%%car" "descriptor")}
      {Lisp-Entry "product-descriptor-alias" define #f 1111 9 1111 38 ("%%cadr" "if" "%%cdr" "alias" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "product-descriptor-unit" define #f 1117 9 1117 37 ("%%cadr" "if" "%%cdr" "unit" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "product-descriptor-title" define #f 1123 9 1123 38 ("%%cadr" "if" "%%cdr" "title" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "product-descriptor-icon" define #f 1129 9 1129 37 ("%%cadr" "if" "%%cdr" "icon" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "product-descriptor-run" define #f 1135 9 1135 36 ("if" "%%cdr" "run" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "product-descriptor-test" define #f 1141 9 1141 37 ("if" "%%cdr" "test" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "product-descriptor-update" define #f 1147 9 1147 39 ("if" "%%cdr" "update" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "product-descriptor-build" define #f 1153 9 1153 38 ("if" "%%cdr" "build" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "product-descriptor-library" define #f 1159 9 1159 40 ("if" "%%cdr" "library" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "product-descriptor-dependencies" define #f 1166 9 1166 45 ("if" "%%cdr" "dependencies" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "Products-Table" define #f 1173 8 1173 27 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "Products-Run-Table" define #f 1176 8 1176 31 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "process-name" define-macro ("variable") 1180 22 1180 39 ()}
      {Lisp-Entry "process-title" define-macro ("variable") 1183 22 1183 40 ()}
      {Lisp-Entry "process-icon" define-macro ("variable") 1186 22 1186 39 ()}
      {Lisp-Entry "process-version" define-macro ("variable") 1189 22 1189 42 ()}
      {Lisp-Entry "current-process-name" define #f 1193 9 1193 34 ("process-name" "jazz:process-name")}
      {Lisp-Entry "current-process-name-set!" define #f 1196 9 1196 39 ("process-name" "jazz:process-name" "set!" "name")}
      {Lisp-Entry "current-process-title" define #f 1199 9 1199 35 ("process-title" "jazz:process-title")}
      {Lisp-Entry "current-process-title-set!" define #f 1202 9 1202 40 ("process-title" "jazz:process-title" "set!" "title")}
      {Lisp-Entry "current-process-icon" define #f 1205 9 1205 34 ("process-icon" "jazz:process-icon")}
      {Lisp-Entry "current-process-icon-set!" define #f 1208 9 1208 39 ("process-icon" "jazz:process-icon" "set!" "icon")}
      {Lisp-Entry "current-process-version" define #f 1211 9 1211 37 ("process-version" "jazz:process-version")}
      {Lisp-Entry "current-process-version-set!" define #f 1214 9 1214 42 ("process-version" "jazz:process-version" "set!" "version")}
      {Lisp-Entry "current-process-present" define #f 1218 9 1218 37 ("%%symbol->string" "if" "current-process-name" "jazz:current-process-name" "name" "let" "current-process-title" "jazz:current-process-title" "or")}
      {Lisp-Entry "register-product" define #f 1226 9 1226 30 ("%%make-product" "Products-Table" "jazz:Products-Table" "%%table-set!" "find-product-descriptor" "jazz:find-product-descriptor" "descriptor" "package" "receive" "library" "build" "update" "test" "run" "icon" "title" "#!key" "name")}
      {Lisp-Entry "get-product-descriptor" define #f 1231 9 1231 36 ("error" "jazz:error" "values" "and" "if" "find-product-descriptor" "jazz:find-product-descriptor" "descriptor" "package" "receive" "name")}
      {Lisp-Entry "get-product" define #f 1238 9 1238 25 ("build-library-descriptor" "jazz:build-library-descriptor" "build-product-descriptor" "jazz:build-product-descriptor" "update-product-descriptor" "jazz:update-product-descriptor" "%%make-product" "product-descriptor-icon" "jazz:product-descriptor-icon" "icon" "product-descriptor-title" "jazz:product-descriptor-title" "title" "load-unit" "jazz:load-unit" "begin" "if" "product-descriptor-unit" "jazz:product-descriptor-unit" "unit" "product-descriptor-name" "jazz:product-descriptor-name" "let" "get-product-descriptor" "jazz:get-product-descriptor" "descriptor" "package" "receive" "error" "jazz:error" "Products-Table" "jazz:Products-Table" "%%table-ref" "or" "get-registered-product" "define" "name")}
      {Lisp-Entry "setup-product" define #f 1262 9 1262 27 ("load-debuggee" "jazz:load-debuggee" "debugger" "jazz:debugger" "if" "product-descriptor-icon" "jazz:product-descriptor-icon" "%%product-icon" "process-icon" "jazz:process-icon" "product-descriptor-title" "jazz:product-descriptor-title" "%%product-title" "or" "process-title" "jazz:process-title" "process-name" "jazz:process-name" "set!" "%%product-descriptor" "descriptor" "get-product" "jazz:get-product" "product" "let" "name")}
      {Lisp-Entry "register-product-run" define #f 1273 9 1273 34 ("Products-Run-Table" "jazz:Products-Run-Table" "%%table-set!" "proc" "name")}
      {Lisp-Entry "run-product" define #f 1277 9 1277 25 ("%%product-descriptor" "%%product-run" "setup-product" "jazz:setup-product" "product" "Products-Run-Table" "jazz:Products-Run-Table" "%%table-ref" "or" "error" "jazz:error" "get-registered-run" "proc" "load-unit" "jazz:load-unit" "for-each" "begin" "if" "product-descriptor-run" "jazz:product-descriptor-run" "run" "product-descriptor-name" "jazz:product-descriptor-name" "let" "descriptor" "run-product-descriptor" "define" "name")}
      {Lisp-Entry "test-product" define #f 1300 9 1300 26 ("%%product-descriptor" "%%product-test" "setup-product" "jazz:setup-product" "product" "error" "jazz:error" "load-unit" "jazz:load-unit" "for-each" "if" "product-descriptor-test" "jazz:product-descriptor-test" "test" "product-descriptor-name" "jazz:product-descriptor-name" "let" "descriptor" "test-product-descriptor" "define" "name")}
      {Lisp-Entry "ill-formed-field-error" define #f 1316 9 1316 36 ("error" "jazz:error" "lambda" "product-name" "field-name")}
      {Lisp-Entry "cond-expand-each" define #f 1321 9 1321 30 ("map" "append" "%%apply" "%%list" "%%symbol?" "update" "expand-update" "null?" "else" "%%eq?" "%%cdr" "feature-satisfied?" "jazz:feature-satisfied?" "clause" "let" "%%car" "%%pair?" "and" "cond" "exp" "apply-cond-expand" "define" "updates" "error-proc")}
      {Lisp-Entry "update-product" define #f 1349 9 1349 28 ("update-product-descriptor" "jazz:update-product-descriptor" "if" "%%product-descriptor" "descriptor" "%%product-update" "update" "setup-product" "jazz:setup-product" "product" "let" "name")}
      {Lisp-Entry "update-product-descriptor" define #f 1358 9 1358 39 ("build-unit" "jazz:build-unit" "for-each" "product-descriptor-update" "jazz:product-descriptor-update" "ill-formed-field-error" "jazz:ill-formed-field-error" "cond-expand-each" "jazz:cond-expand-each" "update" "product-descriptor-name" "jazz:product-descriptor-name" "name" "let*" "descriptor")}
      {Lisp-Entry "build-product" define #f 1365 9 1365 27 ("build-library-descriptor" "jazz:build-library-descriptor" "link-libraries?" "jazz:link-libraries?" "build-product-descriptor" "jazz:build-product-descriptor" "if" "load-build" "jazz:load-build" "feedback" "jazz:feedback" "%%product-descriptor" "descriptor" "%%product-build-library" "build-library" "%%product-build" "build" "setup-product" "jazz:setup-product" "product" "let" "name")}
      {Lisp-Entry "build-product-descriptor" define #f 1383 9 1383 38 ("force?:" "compile-unit" "jazz:compile-unit" "%%apply" "build-image" "jazz:build-image" "%%symbol?" "obj" "lambda" "for-each" "if" "product-descriptor-build" "jazz:product-descriptor-build" "build" "let" "update-product-descriptor" "jazz:update-product-descriptor" "build-product" "define" "force?" "unit" "#!key" "descriptor")}
      {Lisp-Entry "build-library-descriptor" define #f 1399 9 1399 38 ("options:" "product-descriptor-name" "jazz:product-descriptor-name" "build-library" "jazz:build-library" "if" "product-descriptor-library" "jazz:product-descriptor-library" "library" "let" "descriptor")}
      {Lisp-Entry "make-product" define #f 1406 9 1406 26 ("exit" "current-user-interrupt-handler" "parameterize" "debug-build?" "jazz:debug-build?" "thread" "map" "remote-make" "build-product" "jazz:build-product" "product-descriptor-dependencies" "jazz:product-descriptor-dependencies" "ill-formed-field-error" "jazz:ill-formed-field-error" "cond-expand-each" "jazz:cond-expand-each" "get-product-descriptor" "jazz:get-product-descriptor" "descriptor" "package" "receive" "%%table-set!" "make" "%%table-ref" "subname" "for-each" "local-make" "send-command" "%%null?" "%%not" "and" "changes" "build-process-ended" "condition-variable-signal!" "remove" "jazz:remove" "build-process-died" "build" "else" "%%cons" "begin" "eof-object?" "not" "read-line" "iter" "lambda" "make-thread" "thread-start!" "read" "stderr-redirection:" "stdout-redirection:" "stdin-redirection:" "tcp-server-socket-info" "socket-info-port-number" "number->string" "repositories" "jazz:repositories" "jazz-repository" "jazz:jazz-repository" "build-repository" "jazz:build-repository" "save-emit?" "jazz:save-emit?" "expansion" "compile-options" "jazz:compile-options" "keep-c" "if" "link" "jazz:link" "%%symbol->string" "arguments:" "install-path" "jazz:install-path" "path:" "list" "open-process" "process" "%%fx<" "set!" "%%pair?" "cond" "build-jobs" "jazz:build-jobs" "jazz:jobs" "or" "jobs" "%%length" "active-count" "grab-build-process" "thread-join!" "close-port" "write" "%%cdr" "echo-thread" "%%car" "established-port" "port/echo" "end-port/echo" "mutex-unlock!" "force-output" "newline" "display" "mutex-lock!" "line" "atomic-output" "jazz" "core" "%%memq" "key-product?" "define" "stop-build?" "output-mutex" "0" "open-tcp-server" "listening-port" "make-condition-variable" "process-condition" "process-mutex" "outdated-processes" "free-processes" "active-processes" "make-mutex" "subproduct-table-mutex" "make-table" "subproduct-table" "let" "name")}
      {Lisp-Entry "subprocess-build-products" define #f 1555 9 1555 39 ("get-changed-units" "jazz:get-changed-units" "write" "build-product" "jazz:build-product" "reset-changed-units" "jazz:reset-changed-units" "exit" "force-output" "display-exception" "exc" "lambda" "with-exception-handler" "close-port" "null?" "eof-object?" "or" "if" "read" "product" "iter" "open-tcp-client" "established-port" "let" "port")}
      {Lisp-Entry "default-char-encoding" define #f 1580 8 1580 34 ("UTF")}
      {Lisp-Entry "resource-char-encoding" define #f 1584 9 1584 36 ("default-char-encoding" "jazz:default-char-encoding" "%%resource-package" "%%package-char-encoding" "or" "resource")}
      {Lisp-Entry "resource-pathname" define #f 1589 9 1589 31 ("resource-package-pathname" "jazz:resource-package-pathname" "%%resource-package" "package-root-pathname" "jazz:package-root-pathname" "resource")}
      {Lisp-Entry "resource-package-pathname" define #f 1594 9 1594 39 ("%%string-append" "%%resource-path" "%%not" "if" "%%resource-extension" "ext" "let" "resource")}
      {Lisp-Entry "name->path" define #f 1601 9 1601 24 ("%%symbol->string" "string-replace" "jazz:string-replace" "resource-name")}
      {Lisp-Entry "path->name" define #f 1605 9 1605 24 ("string-replace" "jazz:string-replace" "%%string->symbol" "resource-name")}
      {Lisp-Entry "binary-with-extension" define #f 1609 9 1609 35 ("string-append" "pathname-base" "jazz:pathname-base" "name-base" "resource-pathname" "jazz:resource-pathname" "pathname" "resource-build-dir" "jazz:resource-build-dir" "bindir" "let*" "extension" "src")}
      {Lisp-Entry "probe-numbered-pathname" define #f 1616 9 1616 37 ("1" "%%fx+" "probe-numbered-pathname" "jazz:probe-numbered-pathname" "file-exists?" "%%not" "if" "%%number->string" "string-append" "candidate" "let" "n" "pathname")}
      {Lisp-Entry "for-each-numbered-pathname" define #f 1623 9 1623 40 ("1" "%%fx+" "begin" "file-exists?" "if" "%%number->string" "string-append" "candidate" "n" "iter" "let" "proc" "n0" "pathname")}
      {Lisp-Entry "with-numbered-pathname" define #f 1632 9 1632 36 ("%%fx+" "1" "%%fx-" "file-exists?" "%%not" "if" "%%number->string" "string-append" "candidate" "exists?" "n" "iter" "let" "proc" "n0" "fresh?" "pathname")}
      {Lisp-Entry "product-library-name-base" define #f 1644 9 1644 39 ("%%package-repository" "relocate-product-library-name-base" "jazz:relocate-product-library-name-base" "product-name" "package")}
      {Lisp-Entry "relocate-product-library-name-base" define #f 1648 9 1648 48 ("string-append" "%%package-name" "%%symbol->string" "%%package-library-path" "if" "%%string-append" "repository-pathname" "jazz:repository-pathname" "%%package-parent" "parent" "let" "build-dir" "define" "product-name" "package" "repository")}
      {Lisp-Entry "manifest-pathname" define #f 1665 9 1665 31 ("Manifest-Extension" "jazz:Manifest-Extension" "%%resource-path" "%%string-append" "package-root-pathname" "jazz:package-root-pathname" "resource" "package")}
      {Lisp-Entry "digest-pathname" define #f 1672 9 1672 29 ("Digest-Extension" "jazz:Digest-Extension" "%%resource-path" "%%string-append" "package-root-pathname" "jazz:package-root-pathname" "resource" "package")}
      {Lisp-Entry "load-indent" define #f 1684 8 1684 24 ("0" "make-parameter")}
      {Lisp-Entry "load-resource" define #f 1688 9 1688 27 ("resource-char-encoding" "jazz:resource-char-encoding" "char-encoding:" "resource-pathname" "jazz:resource-pathname" "path:" "%%list" "load" "jazz:load" "lambda" "resource-package-pathname" "jazz:resource-package-pathname" "load-verbose?" "jazz:load-verbose?" "with-verbose" "jazz:with-verbose" "%%car" "%%null?" "if" "quiet?" "let" "rest" "resource")}
      {Lisp-Entry "with-verbose" define #f 1698 9 1698 26 ("done-verbose?" "jazz:done-verbose?" "2" "%%fx+" "parameterize" "result" "begin" "if" "verbose-done" "force-output" "newline" "load-indent" "jazz:load-indent" "make-string" "display" "verbose-load" "define" "console-port" "port" "let" "proc" "path" "action" "flag")}
      {Lisp-Entry "walk-for" define #f 1730 8 1730 21 ("make-parameter")}
      {Lisp-Entry "load-unit-src/bin" define #f 1734 9 1734 31 ("with-extension-reader" "jazz:with-extension-reader" "0" "generate-symbol-counter" "jazz:generate-symbol-counter" "generate-symbol-context" "jazz:generate-symbol-context" "generate-symbol-for" "jazz:generate-symbol-for" "interpret" "walk-for" "jazz:walk-for" "%%memq" "%%pair?" "else" "Load-Stack" "jazz:Load-Stack" "pp" "feedback" "jazz:feedback" "stack" "jazz:error" "error" "case" "warn-interpreted?" "jazz:warn-interpreted?" "warn" "increment-interpreted-load-counter" "jazz:increment-interpreted-load-counter" "load-resource" "jazz:load-resource" "%%string=?" "and" "%%resource-extension" "ext" "%%not" "or" "quiet?" "let" "increment-object-load-counter" "jazz:increment-object-load-counter" "symbol->string" "load-verbose?" "jazz:load-verbose?" "with-verbose" "jazz:with-verbose" "increment-image-load-counter" "jazz:increment-image-load-counter" "cond" "if" "requested-unit-resource" "jazz:requested-unit-resource" "requested-unit-name" "jazz:requested-unit-name" "parameterize" "manifest" "lib-uptodate?" "bin-uptodate?" "obj-uptodate?" "load-proc" "bin" "obj" "src" "lambda" "with-unit-resources" "jazz:with-unit-resources" "unit-name")}
      {Lisp-Entry "load-foundation" define #f 1774 9 1774 29 ("core.module" "load-unit" "jazz:load-unit")}
      {Lisp-Entry "load-build" define #f 1778 9 1778 24 ("core.unit.builder" "load-unit" "jazz:load-unit" "load-foundation" "jazz:load-foundation")}
      {Lisp-Entry "resource-build-dir" define #f 1788 9 1788 32 ("Build-Repository" "jazz:Build-Repository" "relocate-resource" "jazz:relocate-resource" "resource")}
      {Lisp-Entry "relocate-resource" define #f 1792 9 1792 31 ("relocate-package-pathname" "jazz:relocate-package-pathname" "%%resource-path" "pathname-dir" "jazz:pathname-dir" "dir" "%%resource-package" "package" "let" "resource" "repository")}
      {Lisp-Entry "Unloaded-State" define #f 1803 8 1803 27 ()}
      {Lisp-Entry "Loading-State" define #f 1806 8 1806 26 ("loading")}
      {Lisp-Entry "Loaded-State" define #f 1809 8 1809 25 ("loaded")}
      {Lisp-Entry "Environment" define #f 1818 8 1818 24 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "get-environment" define #f 1822 9 1822 29 ("Environment" "jazz:Environment")}
      {Lisp-Entry "get-environment-unit" define #f 1826 9 1826 34 ("Unloaded-State" "jazz:Unloaded-State" "Environment" "jazz:Environment" "%%table-ref" "name")}
      {Lisp-Entry "set-environment-unit" define #f 1830 9 1830 34 ("Environment" "jazz:Environment" "%%table-set!" "unit" "name")}
      {Lisp-Entry "Image-Units" define #f 1839 8 1839 24 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "get-image-unit" define #f 1842 9 1842 28 ("Image-Units" "jazz:Image-Units" "%%table-ref" "name")}
      {Lisp-Entry "set-image-unit" define #f 1845 9 1845 28 ("%%make-image-unit" "Image-Units" "jazz:Image-Units" "%%table-set!" "compile-time-hash" "load-proc" "name")}
      {Lisp-Entry "Load-Mutex" define #f 1854 8 1854 23 ("load" "make-mutex")}
      {Lisp-Entry "Load-Thread" define-macro ("variable") 1857 22 1857 38 ()}
      {Lisp-Entry "Load-Stack" define-macro ("variable") 1860 22 1860 37 ()}
      {Lisp-Entry "requested-unit-name" define #f 1864 8 1864 32 ("make-parameter")}
      {Lisp-Entry "requested-unit-resource" define #f 1867 8 1867 36 ("make-parameter")}
      {Lisp-Entry "compiled-source" define #f 1871 8 1871 28 ("make-parameter")}
      {Lisp-Entry "get-load-mutex" define #f 1875 9 1875 28 ("Load-Mutex" "jazz:Load-Mutex")}
      {Lisp-Entry "get-load-thread" define #f 1878 9 1878 29 ("Load-Thread" "jazz:Load-Thread")}
      {Lisp-Entry "get-load-stack" define #f 1881 9 1881 28 ("Load-Stack" "jazz:Load-Stack")}
      {Lisp-Entry "push-load-stack" define #f 1885 9 1885 29 ("%%cons" "Load-Stack" "jazz:Load-Stack" "set!" "unit-name" "mode")}
      {Lisp-Entry "pop-load-stack" define #f 1889 9 1889 28 ("%%cdr" "Load-Stack" "jazz:Load-Stack" "set!")}
      {Lisp-Entry "call-with-load-lock" define #f 1893 9 1893 33 ("mutex-unlock!" "set!" "Load-Mutex" "jazz:Load-Mutex" "mutex-lock!" "lambda" "dynamic-wind" "current-thread" "Load-Thread" "jazz:Load-Thread" "%%eq?" "if" "thunk")}
      {Lisp-Entry "unit-loaded?" define #f 1906 9 1906 26 ("Loaded-State" "jazz:Loaded-State" "get-environment-unit" "jazz:get-environment-unit" "%%eq?" "unit-name")}
      {Lisp-Entry "circular-dependency-error" define #f 1910 9 1910 39 ("symbol->string" "map" "join-strings" "jazz:join-strings" "error" "jazz:error" "%%list" "%%eq?" "name" "lambda" "append" "circular-unit-list" "%%cdr" "%%cons" "%%car" "elem" "%%null?" "if" "out" "in" "loop" "let" "list" "predicate" "take-until" "define" "unit-name-list" "unit-name")}
      {Lisp-Entry "load-unit" define #f 1931 9 1931 23 ("error" "jazz:error" "pop-load-stack" "jazz:pop-load-stack" "load-unit-src/bin" "jazz:load-unit-src/bin" ":load" "push-load-stack" "jazz:push-load-stack" "set-environment-unit" "jazz:set-environment-unit" "dynamic-wind" "Unloaded-State" "jazz:Unloaded-State" "get-load-stack" "jazz:get-load-stack" "cdr" "map" "circular-dependency-error" "jazz:circular-dependency-error" "Loading-State" "jazz:Loading-State" "cond" "lambda" "call-with-load-lock" "jazz:call-with-load-lock" "Loaded-State" "jazz:Loaded-State" "%%eq?" "%%not" "get-environment-unit" "jazz:get-environment-unit" "unit-state" "let" "%%symbol?" "if" "unit-name")}
      {Lisp-Entry "load-script" define #f 1955 9 1955 25 ("UTF" "char-encoding:" "path:" "%%list" "load" "jazz:load" "lambda" "pathname-extension" "jazz:pathname-extension" "with-extension-reader" "jazz:with-extension-reader" "0" "generate-symbol-counter" "jazz:generate-symbol-counter" "gensym" "generate-symbol-context" "jazz:generate-symbol-context" "generate-symbol-for" "jazz:generate-symbol-for" "interpret" "walk-for" "jazz:walk-for" "parameterize" "path")}
      {Lisp-Entry "unload-unit" define #f 1968 9 1968 25 ("unload-unit" "jazz:unload-unit" "mutex-unlock!" "Unloaded-State" "jazz:Unloaded-State" "set-environment-unit" "jazz:set-environment-unit" "begin" "Load-Mutex" "jazz:Load-Mutex" "mutex-lock!" "if" "unit-name")}
      {Lisp-Entry "reload-unit" define #f 1977 9 1977 25 ("load-unit" "jazz:load-unit" "unload-unit" "jazz:unload-unit" "unit-name")}
      {Lisp-Entry "Services" define #f 1987 8 1987 21 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "register-service" define #f 1991 9 1991 30 ("Services" "jazz:Services" "%%table-set!" "thunk" "name")}
      {Lisp-Entry "get-service" define #f 1995 9 1995 25 ("set!" "load-unit" "jazz:load-unit" "begin" "%%symbol?" "if" "Services" "jazz:Services" "%%table-ref" "symbol/proc" "let" "name")}
      {Lisp-Entry "require-service" define #f 2006 9 2006 29 ("error" "get-service" "jazz:get-service" "or" "name")}
      {Lisp-Entry "Literal-Constructors" define #f 2016 8 2016 33 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "register-literal-constructor" define #f 2020 9 2020 42 ("%%cons" "Literal-Constructors" "jazz:Literal-Constructors" "%%table-set!" "constructor" "constructor-reference" "name")}
      {Lisp-Entry "require-literal-constructor" define #f 2024 9 2024 41 ("error" "jazz:error" "Literal-Constructors" "jazz:Literal-Constructors" "%%table-ref" "or" "name")}
      {Lisp-Entry "define-literal" define-macro ("macro") 2029 20 2029 39 (",constructor-locator" "global-ref" "jazz:global-ref" "%%apply" ",constructor-module" "load-unit" "jazz:load-unit" "arguments" "lambda" ",constructor-reference" ",name" "register-literal-constructor" "jazz:register-literal-constructor" "compose-reference" "jazz:compose-reference" "constructor-locator" "let" "break-reference" "jazz:break-reference" "constructor-name" "constructor-module" "receive" "constructor-reference" "name")}
      {Lisp-Entry "construct-literal" define #f 2038 9 2038 31 ("require-literal-constructor" "jazz:require-literal-constructor" "%%cdr" "constructor" "let" "arguments" "name")}
      {Lisp-Entry "Literal-Walkers" define #f 2043 8 2043 28 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "register-literal-walker" define #f 2047 9 2047 37 ("%%cons" "Literal-Walkers" "jazz:Literal-Walkers" "%%table-set!" "walker" "walker-locator" "name")}
      {Lisp-Entry "define-literal-walker" define-macro ("macro") 2051 20 2051 46 ("global-ref" "jazz:global-ref" ",walker-module" "load-unit" "jazz:load-unit" "proc" "arguments" "lambda" ",walker-locator" ",name" "register-literal-walker" "jazz:register-literal-walker" "compose-reference" "jazz:compose-reference" "walker-locator" "let" "break-reference" "jazz:break-reference" "walker-name" "walker-module" "receive" "walker-reference" "name")}
      {Lisp-Entry "walk-literal" define #f 2060 9 2060 26 ("%%cdr" "walker" "if" "Literal-Walkers" "jazz:Literal-Walkers" "%%table-ref" "info" "let" "proc" "arguments" "name")}
      {Lisp-Entry "Extension-Readers" define #f 2072 8 2072 30 ("equal?" "test:" "%%make-table")}
      {Lisp-Entry "get-extension-reader" define #f 2076 9 2076 34 ("Extension-Readers" "jazz:Extension-Readers" "%%table-ref" "extension")}
      {Lisp-Entry "with-extension-reader" define #f 2080 9 2080 35 ("current-readtable" "parameterize" "if" "get-extension-reader" "jazz:get-extension-reader" "readtable-getter" "let" "thunk" "extension")}
      {Lisp-Entry "register-reader-extension" define #f 2088 9 2088 39 ("Extension-Readers" "jazz:Extension-Readers" "%%table-set!" "readtable-getter" "extension")}
      {Lisp-Entry "scheme-readtable" define #f 2097 8 2097 29 ("%%current-readtable")}}})
