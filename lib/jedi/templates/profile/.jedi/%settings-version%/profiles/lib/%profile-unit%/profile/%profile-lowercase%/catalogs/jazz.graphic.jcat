"Bitmap"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "platform" "windows" "Bitmap.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.platform.windows.Bitmap" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Bitmap" class #f 43 20 43 26 ("Object")
        {Lisp-Entry "handle" slot #f 46 8 46 14 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("destroy-mandatory" "get-hdc" "CreateCompatibleBitmap" "handle~self" "set!" "not" "if" "nextmethod" "height" "height:" "width" "width:" "surface" "surface:" "handle" "handle:")}
        {Lisp-Entry "destroy" method #f 60 20 60 27 ("nextmethod" "handle" "DeleteObject")}
        {Lisp-Entry "get-handle" method #f 65 11 65 21 ("handle")}
        {Lisp-Entry "get-size" method #f 69 18 69 26 ("BITMAP-bmHeight-ref" "BITMAP-bmWidth-ref" "Dimension" "new" "BITMAP-sizeof" "handle" "GetObject" "BITMAP-make" "info" "let")}}}})
"Color"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "Color.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.Color" module #f 37 18 37 36 ("jazz")
      {Lisp-Entry "Color" class #f 43 7 43 12 ("Object")
        {Lisp-Entry "name" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-name" accessor #f 46 21 46 29 ()}
        {Lisp-Entry "red" slot #f 47 8 47 11 ()}
        {Lisp-Entry "get-red" accessor #f 47 21 47 29 ()}
        {Lisp-Entry "green" slot #f 48 8 48 13 ()}
        {Lisp-Entry "get-green" accessor #f 48 21 48 29 ()}
        {Lisp-Entry "blue" slot #f 49 8 49 12 ()}
        {Lisp-Entry "get-blue" accessor #f 49 21 49 29 ()}
        {Lisp-Entry "alpha" slot #f 50 8 50 13 ()}
        {Lisp-Entry "get-alpha" accessor #f 50 24 50 32 ()}
        {Lisp-Entry "set-alpha" accessor #f 50 24 50 32 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("alpha~self" "blue~self" "green~self" "red~self" "name~self" "set!" "nextmethod" "alpha" "alpha:" "blue" "blue:" "green" "green:" "red" "red:" "name" "name:")}
        {Lisp-Entry "copy-object" method #f 66 20 66 31 ("alpha" "alpha:" "blue" "blue:" "green" "green:" "red" "red:" "name" "name:" "Color" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 75 20 75 34 (":not-equal" "else" ":equal" "self" "color=?" "get-name" "=" "name" "if" ":incompatible" "Color" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 86 20 86 25 ("blue" "green" "red" "alpha" "self" "class-of" "category-name" "format" "name" "if" "readably" "printer")}
        {Lisp-Entry "white?" method #f 105 18 105 24 ("alpha" "not" "blue" "green" "255" "red" "=" "and")}
        {Lisp-Entry "Constants" definition #f 117 26 117 35 ("Dark" "Medium" "Light" "Dark-Purple" "Purple" "Light-Purple" "Dark-Blue" "Blue" "Light-Blue" "Dark-Green" "Green" "Light-Green" "Dark-Yellow" "Yellow" "Light-Yellow" "Soft-Yellow" "Ochre" "Dark-Orange" "Orange" "Light-Orange" "Dark-Red" "Red" "Light-Red" "Text-Gray" "Dark-Gray" "Gray" "Light-Gray" "White" "Black")}
        {Lisp-Entry "parse-string" method #f 129 23 129 35 ("blue:" "green:" "red:" "integer?" "blue" "green" "red" "bind" "3" "registered-color" "Constants" "memq?" "car" "symbol?" "1" "=" "and" "self" "type:" "object:" "Convertion-Error" "new" "signal" "lambda" "err" "length" "len" "read-string-content" "lst" "let*" "empty-string?" "if" "string")}
        {Lisp-Entry "present" method #f 147 18 147 25 ("alpha" "blue" "green" "red" "format" "->string" "name" "if")}
        {Lisp-Entry "determine-color" method #f 162 18 162 33 ("self" "else" "get-opposite" "Dark" "'Dark" "registered-color" "not" "cond" "selected?" "enabled?")}
        {Lisp-Entry "get-opposite" method #f 169 18 169 30 ("else" "Gray" "'Gray" "Dark-Gray" "Yellow" "'Yellow" "registered-color" "Dark-Red" "name" "case")}
        {Lisp-Entry "rgb->hls" method #f 177 18 177 26 ("rgb" "colorref:" "Color" "new" "ref" "ColorRGBToHLS" "saturation" "lightness" "hue" "receive")}
        {Lisp-Entry "hls->rgb" method #f 182 18 182 26 ("colorref:" "Color" "new" "blue-part" "green-part" "red-part" "ColorHLSToRGB" "ref" "let")}
        {Lisp-Entry "color-cycle" method #f 193 23 193 34 ("hls->rgb" "blue:" "green:" "red:" "Color" "new" "hls" "round" "+" "n" "lambda" "map" "blue-part" "sat" "green-part" "lig" "red-part" "hue" "rgb->hls" "get-colorref" "ref" "240" "/" "inc" "*" "cardinality" "cycle-naturals" "seq" "let*" "subcycle" "cycle" "base")}}}})
"DC-Snapshot"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "DC-Snapshot.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.DC-Snapshot" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "DC-Snapshot" class #f 43 20 43 31 ("Viewable" "Object")}
      {Lisp-Entry "Snapshot-Size" constant #f 47 10 47 23 ("200" "Dimension")}
      {Lisp-Entry "DC-Snapshot" class #f 52 20 52 31 ("Viewable" "Object")
        {Lisp-Entry "memory-dc" slot #f 55 8 55 17 ()}
        {Lisp-Entry "initialize" method #f 58 11 58 21 ("Snapshot-Size" "destination-size:" "size:" "bit-blit" "Memory-Surface" "new" "memory-dc" "set!" "nextmethod" "size" "surface")}
        {Lisp-Entry "get-title" method #f 65 11 65 20 ()}
        {Lisp-Entry "get-viewer-class" method #f 69 11 69 27 ("DC-Viewer")}
        {Lisp-Entry "get-memory-dc" method #f 73 18 73 31 ("memory-dc")}}
      {Lisp-Entry "DC-Viewer" class #f 83 7 83 16 ("entry" "style:" "edge" "border-type:" "202" "Dimension" "size:" "center" "layout-type:" "Layout-View")
        {Lisp-Entry "client" property #f 92 12 92 18 ()}
        {Lisp-Entry "get-client" accessor #f 92 29 92 37 ()}
        {Lisp-Entry "set-client" accessor #f 92 29 92 37 ()}}
      {Lisp-Entry "DC-Renderer" class #f 101 7 101 18 ("View")
        {Lisp-Entry "client" property #f 104 12 104 18 ()}
        {Lisp-Entry "draw" method #f 107 11 107 15 ("get-size" "destination-size:" "size:" "bit-blit" "client" "get-memory-dc" "memory-dc" "Snapshot-Size" "size" "let" "lv" "lh" "context" "surface")}}}})
"Font"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "font" "Font.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.font.Font" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Font" class #f 45 7 45 11 ("initialize" "Object")
        {Lisp-Entry "name" slot #f 48 8 48 12 ()}
        {Lisp-Entry "get-name" accessor #f 48 41 48 49 ()}
        {Lisp-Entry "font-name" slot #f 49 8 49 17 ()}
        {Lisp-Entry "get-font-name" accessor #f 49 41 49 49 ()}
        {Lisp-Entry "point-size" slot #f 50 8 50 18 ()}
        {Lisp-Entry "get-point-size" accessor #f 50 41 50 49 ()}
        {Lisp-Entry "color" slot #f 51 8 51 13 ()}
        {Lisp-Entry "get-color" accessor #f 51 41 51 49 ()}
        {Lisp-Entry "bold?" slot #f 52 8 52 13 ()}
        {Lisp-Entry "get-bold?" accessor #f 52 41 52 49 ()}
        {Lisp-Entry "italic?" slot #f 53 8 53 15 ()}
        {Lisp-Entry "get-italic?" accessor #f 53 41 53 49 ()}
        {Lisp-Entry "underline?" slot #f 54 8 54 18 ()}
        {Lisp-Entry "get-underline?" accessor #f 54 41 54 49 ()}
        {Lisp-Entry "antialias" slot #f 55 8 55 17 ()}
        {Lisp-Entry "get-antialias" accessor #f 55 41 55 49 ()}
        {Lisp-Entry "hint-style" slot #f 56 8 56 18 ()}
        {Lisp-Entry "get-hint-style" accessor #f 56 41 56 49 ()}
        {Lisp-Entry "local?" slot #f 57 8 57 14 ()}
        {Lisp-Entry "get-local?" accessor #f 57 41 57 49 ()}
        {Lisp-Entry "handle" slot #f 58 8 58 14 ()}
        {Lisp-Entry "get-handle" accessor #f 58 41 58 49 ()}
        {Lisp-Entry "font-face" slot #f 59 8 59 17 ()}
        {Lisp-Entry "get-font-face" accessor #f 59 41 59 49 ()}
        {Lisp-Entry "scaled-font" slot #f 60 8 60 19 ()}
        {Lisp-Entry "get-scaled-font" accessor #f 60 41 60 49 ()}
        {Lisp-Entry "metrics" slot #f 61 8 61 15 ()}
        {Lisp-Entry "all-widths" slot #f 62 8 62 18 ()}
        {Lisp-Entry "glyph-cache" slot #f 63 8 63 19 ()}
        {Lisp-Entry "initialize" method #f 66 20 66 30 ("eqv?" "test:" "make-table" "glyph-cache" "scaled-font" "create-cairo-font-face" "font-face~self" "local?" "create-font-handle" "handle~self" "symbol?" "local?~self" "hint-style~self" "antialias~self" "underline?~self" "italic?~self" "bold?~self" "color~self" "point-size~self" "font-name~self" "name~self" "set!" "nextmethod" "cairo_font_options_destroy" "cairo_matrix_t-free" "cairo_scaled_font_create" "prog1" "cairo_matrix_init_identity" "cairo_matrix_init_scale" "if" "default-hint-style" "cairo_font_options_set_hint_style" "'subpixel" "or" "cairo_font_options_set_antialias" "cairo_font_options_create" "options" "ctm" "cairo_matrix_t-make" "matrix" "calculate-height" "and" "height" "let" "CAIRO_HINT_STYLE_FULL" "full" "CAIRO_HINT_STYLE_MEDIUM" "medium" "CAIRO_HINT_STYLE_SLIGHT" "slight" "CAIRO_HINT_STYLE_NONE" "CAIRO_HINT_STYLE_DEFAULT" "style" "cairo-hint-style" "CAIRO_ANTIALIAS_SUBPIXEL" "subpixel" "CAIRO_ANTIALIAS_GRAY" "gray" "CAIRO_ANTIALIAS_NONE" "none" "CAIRO_ANTIALIAS_DEFAULT" "default" "case" "cairo-antialias" "font-face" "create-cairo-scaled-font" "define" "hint-style" "hint-style:" "antialias" "antialias:" "underline?" "underline?:" "italic?" "italic?:" "bold?" "bold?:" "color" "color:" "point-size" "point-size:" "font-name" "font-name:" "name" "name:")}
        {Lisp-Entry "calculate-height" definition #f 125 19 125 35 ("72" "96" "*" "/" "exact->inexact" "point-size")}
        {Lisp-Entry "calculate-height" definition #f 128 19 128 35 ("point-size")}
        {Lisp-Entry "default-hint-style" definition #f 134 19 134 37 ("slight" "'slight" "bold?")}
        {Lisp-Entry "default-hint-style" definition #f 137 19 137 37 ("full" "'full" "slight" "'slight" "if" "bold?")}
        {Lisp-Entry "destroy" method #f 141 20 141 27 ("nextmethod" "handle" "local?" "destroy-font-handle" "font-face" "destroy-cairo-font-face" "scaled-font" "cairo_scaled_font_destroy")}
        {Lisp-Entry "compare-object" method #f 148 20 148 34 (":not-equal" "else" "get-handle" "handle" "get-underline?" "underline?" "get-italic?" "italic?" "get-bold?" "bold?" "get-color" "color" "get-point-size" "point-size" "get-font-name" "font-name" ":equal" "get-name" "=" "name" "and" ":incompatible" "Font" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 166 20 166 25 ("lambda" "print-unreadable" "else" "underline?" "italic?" "bold?" "color" "point-size" "font-name" "self" "class-of" "category-name" "format" "name" "cond" "readably" "printer")}
        {Lisp-Entry "Work-DC" definition #f 191 14 191 21 ()}
        {Lisp-Entry "work-dc" definition #f 195 15 195 22 ("0" "Dimension" "Memory-Surface" "new" "set!" "Work-DC" "unless")}
        {Lisp-Entry "text-extent" method #f 201 18 201 29 ("get-text-extent" "self" "work-dc" "set-font" "text")}
        {Lisp-Entry "text-width" method #f 206 18 206 28 ("get-text-width" "self" "work-dc" "set-font" "when" "text")}
        {Lisp-Entry "font-height" method #f 212 18 212 29 ("get-font-height" "self" "work-dc" "set-font")}
        {Lisp-Entry "glyph-index" method #f 217 18 217 29 ("table-set!" "index" "let" "glyph-cache" "table-ref" "or" "self" "cairo_glyph_index" "255" ">" "if" "char")}
        {Lisp-Entry "get-metrics" method #f 231 18 231 29 ("get-text-metrics" "Font-Metrics" "new" "self" "work-dc" "set-font" "begin" "set!" "metrics" "unless")}
        {Lisp-Entry "get-all-widths" method #f 240 18 240 32 ("get-char-widths" "self" "work-dc" "set-font" "begin" "set!" "all-widths" "unless")}
        {Lisp-Entry "get-widths" method #f 249 18 249 28 ("get-char-widths" "self" "work-dc" "set-font" "rest")}
        {Lisp-Entry "get-char-width" method #f 254 18 254 32 ("get-char-width" "self" "work-dc" "set-font" "get-all-widths" "vector-ref" "256" "<" "if" "char->integer" "n" "let" "c")}
        {Lisp-Entry "extend-font-name" method #f 267 18 267 34 ("underline?" "underline?:" "italic?" "italic?:" "bold?" "bold?:" "point-size" "point-size:" "font-name:" "Font" "new" "name")}
        {Lisp-Entry "extend-point-size" method #f 276 18 276 35 ("underline?" "underline?:" "italic?" "italic?:" "bold?" "bold?:" "point-size:" "font-name" "font-name:" "Font" "new" "point-size")}
        {Lisp-Entry "toggle-bold" method #f 285 18 285 29 ("underline?" "underline?:" "italic?" "italic?:" "bold?" "not" "bold?:" "point-size" "point-size:" "font-name" "font-name:" "Font" "new")}
        {Lisp-Entry "toggle-italic" method #f 294 18 294 31 ("underline?" "underline?:" "italic?" "not" "italic?:" "bold?" "bold?:" "point-size" "point-size:" "font-name" "font-name:" "Font" "new")}
        {Lisp-Entry "toggle-underline" method #f 303 18 303 34 ("underline?" "not" "underline?:" "italic?" "italic?:" "bold?" "bold?:" "point-size" "point-size:" "font-name" "font-name:" "Font" "new")}}}})
"Font-Metrics"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "Font-Metrics.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.Font-Metrics" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Font-Metrics" class #f 43 7 43 19 ("Object")
        {Lisp-Entry "metrics" slot #f 46 8 46 15 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("metrics~self" "set!" "nextmethod" "metrics")}
        {Lisp-Entry "destroy" method #f 54 20 54 27 ("nextmethod" "metrics" "cairo_font_extents_t-free")}
        {Lisp-Entry "print" method #f 58 20 58 25 ("lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-height" method #f 71 22 71 32 ("metrics" "cairo_font_extents_t-height-ref" "fxround")}
        {Lisp-Entry "get-height" method #f 75 21 75 31 ("metrics" "cairo_font_extents_t-height-ref" "fxceiling" "1" "+")}
        {Lisp-Entry "get-ascent" method #f 79 18 79 28 ("metrics" "cairo_font_extents_t-ascent-ref" "fxround")}
        {Lisp-Entry "get-max-char-width" method #f 83 18 83 36 ("metrics" "cairo_font_extents_t-max_x_advance-ref" "fxround")}}}})
"Gradient"
 ({Lisp-File-Entry {File jazz.graphic "src" "jazz" "graphic" "Gradient.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.Gradient" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Gradient" class #f 43 7 43 15 ("Object")
        {Lisp-Entry "kind" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-kind" accessor #f 46 21 46 29 ()}
        {Lisp-Entry "parts" slot #f 47 8 47 13 ()}
        {Lisp-Entry "get-parts" accessor #f 47 21 47 29 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("parts~self" "kind~self" "set!" "nextmethod" "parts" "kind")}
        {Lisp-Entry "copy-object" method #f 56 20 56 31 ("parts" "kind" "Gradient" "new" "apply" "deep?")}
        {Lisp-Entry "compare-object" method #f 60 20 60 34 (":not-equal" "else" ":equal" "get-parts" "parts" "equal?" "get-kind" "kind" "eq?" "and" ":incompatible" "Gradient" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 70 20 70 25 ("parts" "not-null?" "kind" "self" "class-of" "category-name" "format" "readably" "printer")}}}})
"Image"
 ({Lisp-File-Entry {File jazz.graphic "src" "jazz" "graphic" "image" "Image.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.image.Image" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Image" class #f 47 7 47 12 ("0" "Point" "initialize" "Object")
        {Lisp-Entry "background" slot #f 50 8 50 18 ()}
        {Lisp-Entry "get-background" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "set-background" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "portfolio" slot #f 51 8 51 17 ()}
        {Lisp-Entry "get-portfolio" accessor #f 51 55 51 63 ()}
        {Lisp-Entry "set-portfolio" accessor #f 51 55 51 63 ()}
        {Lisp-Entry "resource" slot #f 52 8 52 16 ()}
        {Lisp-Entry "get-resource" accessor #f 52 55 52 63 ()}
        {Lisp-Entry "set-resource" accessor #f 52 55 52 63 ()}
        {Lisp-Entry "moniker" slot #f 53 8 53 15 ()}
        {Lisp-Entry "handle" slot #f 54 8 54 14 ()}
        {Lisp-Entry "get-handle" accessor #f 54 55 54 63 ()}
        {Lisp-Entry "set-handle" accessor #f 54 55 54 63 ()}
        {Lisp-Entry "view-position" slot #f 55 8 55 21 ()}
        {Lisp-Entry "get-view-position" accessor #f 55 55 55 63 ()}
        {Lisp-Entry "set-view-position" accessor #f 55 55 55 63 ()}
        {Lisp-Entry "view-size" slot #f 56 8 56 17 ()}
        {Lisp-Entry "get-view-size" accessor #f 56 55 56 63 ()}
        {Lisp-Entry "set-view-size" accessor #f 56 55 56 63 ()}
        {Lisp-Entry "initialize" method #f 59 20 59 30 ("set-handle" "set-moniker" "cond" "view-size~self" "view-position~self" "resource~self" "portfolio~self" "background~self" "set!" "nextmethod" "view-size" "view-size:" "0" "Point" "view-position" "view-position:" "handle" "handle:" "moniker" "moniker:" "resource" "resource:" "portfolio" "portfolio:" "background" "background:")}
        {Lisp-Entry "destroy" method #f 77 20 77 27 ("nextmethod" "set!" "cairo_surface_destroy" "handle" "when")}
        {Lisp-Entry "draw" method #f 89 18 89 22 ("cond" "get-v" "view-position" "get-h" "+" "let" "handle" "draw-handle" "portfolio" "draw-opaque-image" "background" "if" "resource" "when" "draw-image" "define" "v" "h" "context" "surface")}
        {Lisp-Entry "get-position" method #f 110 18 110 30 ("view-position")}
        {Lisp-Entry "get-size" method #f 114 18 114 26 ("view-size" "else" "get-cairo-image-surface-size" "handle" "resource" "cond")}
        {Lisp-Entry "get-moniker" method #f 123 18 123 29 ("moniker")}
        {Lisp-Entry "set-moniker" method #f 127 18 127 29 ("image" "'image" "load-image" "handle" "when" "moniker" "set!" "mnk")}}}})
"Memory-Surface"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "Memory-Surface.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.Memory-Surface" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Memory-Surface" class #f 44 7 44 21 ("Surface")
        {Lisp-Entry "size" slot #f 47 8 47 12 ()}
        {Lisp-Entry "get-size" accessor #f 47 20 47 28 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("size~self" "set!" "nextmethod" "get-height" "get-width" "create-cairo-image-surface" "surface" "let" "size" "compatibility")}
        {Lisp-Entry "renew-context" method #f 56 19 56 32 ("surface" "cairo_create" "context" "set!" "destroy-context")}}}})
"Picture"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "platform" "windows" "Picture.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.platform.windows.Picture" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Picture" class #f 43 7 43 14 ("Surface")}
      {Lisp-Entry "Picture" class #f 49 7 49 14 ("Surface")
        {Lisp-Entry "initialize" method #f 52 11 52 21 ("destroy-mandatory" "10000" "0" "Rect" "set-clipper" "CreateEnhMetaFile" "nextmethod" "NULL" "parse" "if" "filename" "let" "file" "file:")}
        {Lisp-Entry "destroy" method #f 59 11 59 18 ("nextmethod" "set!" "CloseEnhMetaFile" "hdc" "not" "unless")}
        {Lisp-Entry "get-metafile" method #f 66 18 66 30 ("set!" "CloseEnhMetaFile" "prog1" "hdc" "not" "unless")}
        {Lisp-Entry "delete-metafile" method #f 72 23 72 38 ("DeleteEnhMetaFile" "metafile")}}}})
"Picture-Job"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "platform" "windows" "Picture-Job.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.platform.windows.Picture-Job" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Picture-Job" class #f 40 20 40 31 ("Object")}
      {Lisp-Entry "Picture-Job" class #f 44 20 44 31 ("Print-Job")
        {Lisp-Entry "directory" slot #f 47 8 47 17 ()}
        {Lisp-Entry "filename" slot #f 48 8 48 16 ()}
        {Lisp-Entry "initialize" method #f 51 11 51 21 ("nextmethod" "apply" "filename~self" "directory~self" "set!" "rest" "resolution" "page-setup" "client" "filename" "directory")}
        {Lisp-Entry "start-page" method #f 62 11 62 21 ("1" "+" "filename" "format" "directory" "new-file" "file:" "Picture" "new" "surface" "set!" "no")}
        {Lisp-Entry "end-page" method #f 66 11 66 19 ("Picture" "delete-metafile" "close" "surface" "get-metafile" "metafile" "let" "no")}}}})
"Portfolio"
 ({Lisp-File-Entry {File jazz.graphic "src" "jazz" "graphic" "image" "Portfolio.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.image.Portfolio" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Portfolio" class #f 47 7 47 16 ("equal?" "test:" "make-table" "initialize" "Component")
        {Lisp-Entry "images" slot #f 50 8 50 14 ()}
        {Lisp-Entry "opaque-images" slot #f 51 8 51 21 ()}
        {Lisp-Entry "finish" method #f 59 20 59 26 ("destroy-mandatory" "nextmethod" "initargs")}
        {Lisp-Entry "destroy" method #f 69 20 69 27 ("nextmethod" "opaque-images" "images" "table-values" "for-each" "close" "destroy-opaque-image" "cairo_surface_destroy" "image" "destroy-image" "define")}
        {Lisp-Entry "get-image" method #f 86 18 86 27 ("table-ref" "or" "name" "'image" "get-name" "images" "table-set!" "icon" "'icon" "load-image" "image" "let" "add-image" "Image-Resource" "add-icon" "Icon-Resource" "typecase" "add-resource" "define" "resource")}
        {Lisp-Entry "get-opaque-image" method #f 107 18 107 34 ("table-ref" "or" "get-name" "cons" "opaque-images" "table-set!" "0" "draw-image" "size-rect" "fill-rect" "Memory-Surface" "new" "surface" "get-cairo-image-surface-size" "size" "get-image" "image" "let" "key" "add-opaque-image" "define" "background" "resource")}
        {Lisp-Entry "draw-image" method #f 127 18 127 28 ("draw-image" "get-image" "image" "let" "v" "h" "resource" "context" "surface")}
        {Lisp-Entry "draw-opaque-image" method #f 132 18 132 35 ("get-surface" "draw-image" "get-opaque-image" "image" "let" "v" "h" "background" "resource" "context" "surface")}}}})
"Portfolio-Domain"
 ({Lisp-File-Entry {File jazz.graphic "src" "jazz" "graphic" "image" "Portfolio-Domain.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.image.Portfolio-Domain" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Portfolio-Domain" class #f 47 20 47 36 ("Text-Domain")
        {Lisp-Entry "present" method #f 55 20 55 27 ("get-name" "Portfolio" "is?" "symbol->string" "not" "if" "value")}
        {Lisp-Entry "parse" method #f 69 20 69 25 ("read-string-element" "equal?" "if" "text")}}}})
"Rectangles-Region"
 ({Lisp-File-Entry {File jazz.graphic "src" "jazz" "graphic" "Rectangles-Region.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.Rectangles-Region" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Rectangles-Region" class #f 44 7 44 24 ("initialize" "Object")
        {Lisp-Entry "keep-rectangles?" slot #f 47 8 47 24 ()}
        {Lisp-Entry "rectangles" slot #f 48 8 48 18 ()}
        {Lisp-Entry "bounding-box" slot #f 49 8 49 20 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("cdr" "bottom" "right" "top" "bind" "fixnum?" "rect?" "cond" "first" "let" "car" "bounding-box" "0" "Rect" "new" "list" "rectangles" "begin" "null?" "if" "when" "keep-rectangles?" "set!" "nextmethod" "rest" "keep?")}
        {Lisp-Entry "keep-rectangles" method #f 70 18 70 33 ("car" "bounding-box" "get-box" "list" "rectangles" "keep-rectangles?" "set!")}
        {Lisp-Entry "get-rectangles" method #f 76 18 76 32 ("rectangles" "keep-rectangles?" "assert")}
        {Lisp-Entry "offset!" method #f 81 26 81 33 ("bounding-box" "rectangles" "offset-rect!" "rect" "lambda" "for-each" "keep-rectangles?" "when" "v" "h")}
        {Lisp-Entry "combine!" method #f 89 26 89 34 ("get-box" "rect-union" "bounding-box" "get-rectangles" "append" "rectangles" "set!" "xor" "or" "case" "keep-rectangles?" "when" "mode" "region")}
        {Lisp-Entry "empty?" method #f 97 26 97 32 ("0" "Rect" "get-box" "=")}
        {Lisp-Entry "intersects-rect?" method #f 101 26 101 42 ("get-box" "rect-intersect?" "rect")}
        {Lisp-Entry "get-box" method #f 105 26 105 33 ("bounding-box")}}}})
"Region"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "platform" "carbon" "Region.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.platform.carbon.Region" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Region" class #f 46 7 46 13 ("Rectangles-Region")
        {Lisp-Entry "handle" slot #f 49 8 49 14 ()}
        {Lisp-Entry "get-handle" accessor #f 49 22 49 30 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("destroy-mandatory" "cdr" "bottom" "right" "top" "bind" "fixnum?" "get-bottom" "get-right" "get-top" "get-left" "RectRgn" "rect?" "foreign?" "cond" "car" "first" "let" "NewRgn" "handle" "set!" "null?" "if" "nextmethod" "rest")}
        {Lisp-Entry "destroy" method #f 67 20 67 27 ("nextmethod" "handle" "DisposeRgn")}
        {Lisp-Entry "offset!" method #f 72 20 72 27 ("nextmethod" "handle" "OffsetRgn" "v" "h")}
        {Lisp-Entry "combine!" method #f 77 20 77 28 ("nextmethod" "error" "else" "get-handle" "handle" "UnionRgn" "xor" "or" "case" "mode" "region")}
        {Lisp-Entry "empty?" method #f 84 20 84 26 ("0" "Rect" "get-box" "=")}
        {Lisp-Entry "intersects-rect?~" method #f 88 20 88 37 ("get-box" "rect-intersect?" "rect")}
        {Lisp-Entry "get-box" method #f 92 20 92 27 ("Rect" "new" "handle" "GetRegionBounds" "r" "b" "t" "l" "receive")}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "platform" "windows" "Region.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.platform.windows.Region" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Region" class #f 45 7 45 13 ("Rectangles-Region")
        {Lisp-Entry "handle" slot #f 48 8 48 14 ()}
        {Lisp-Entry "get-handle" accessor #f 48 22 48 30 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("destroy-mandatory" "cdr" "bottom" "right" "top" "bind" "fixnum?" "get-bottom" "get-right" "get-top" "get-left" "rect?" "foreign?" "cond" "car" "first" "let" "0" "CreateRectRgn" "handle" "set!" "null?" "if" "nextmethod" "rest")}
        {Lisp-Entry "destroy" method #f 66 20 66 27 ("nextmethod" "handle" "DeleteObject")}
        {Lisp-Entry "offset!" method #f 71 20 71 27 ("nextmethod" "handle" "OffsetRgn" "v" "h")}
        {Lisp-Entry "combine!" method #f 76 20 76 28 ("nextmethod" "get-handle" "handle" "CombineRgn" "error" "else" "RGN_DIFF" "diff" "RGN_XOR" "xor" "RGN_OR" "or" "RGN_AND" "and" "case" "get-combine-mode" "define" "mode" "region")}
        {Lisp-Entry "empty?" method #f 89 20 89 26 ("0" "Rect" "get-box" "=")}
        {Lisp-Entry "intersects-rect?" method #f 93 20 93 36 ("empty?" "not" "and" "'and" "self" "combine!" "Region" "new" "region" "with" "rect")}
        {Lisp-Entry "get-box" method #f 99 20 99 27 ("RECT-free" "RECT->rect" "prog1" "handle" "GetRgnBox" "RECT-make" "rect" "let")}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "platform" "x11" "Region.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.platform.x11.Region" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Region" class #f 45 7 45 13 ("Rectangles-Region")
        {Lisp-Entry "initialize" method #f 48 20 48 30 ("nextmethod" "rest")}}}})
"Surface"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "Surface.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.Surface" module #f 38 18 38 38 ("jazz")
      {Lisp-Entry "Surface" class #f 55 7 55 14 ("0" "Rect" "new" "initialize" "Object")
        {Lisp-Entry "surface" slot #f 58 8 58 15 ()}
        {Lisp-Entry "get-surface" accessor #f 58 61 58 69 ()}
        {Lisp-Entry "context" slot #f 59 8 59 15 ()}
        {Lisp-Entry "get-context" accessor #f 59 61 59 69 ()}
        {Lisp-Entry "clipper" slot #f 60 8 60 15 ()}
        {Lisp-Entry "font" slot #f 61 8 61 12 ()}
        {Lisp-Entry "dash-array" slot #f 62 8 62 18 ()}
        {Lisp-Entry "empty-array" slot #f 63 8 63 19 ()}
        {Lisp-Entry "glyph-array" slot #f 64 8 64 19 ()}
        {Lisp-Entry "array-length" slot #f 65 8 65 20 ()}
        {Lisp-Entry "landscape?" slot #f 66 8 66 18 ()}
        {Lisp-Entry "landscape-rotation" slot #f 67 8 67 26 ()}
        {Lisp-Entry "landscape-page" slot #f 68 8 68 22 ()}
        {Lisp-Entry "update-region" slot #f 69 8 69 21 ()}
        {Lisp-Entry "get-update-region" accessor #f 69 64 69 72 ()}
        {Lisp-Entry "set-update-region" accessor #f 69 64 69 72 ()}
        {Lisp-Entry "initialize" method #f 72 20 72 30 ("destroy-mandatory" "cairo_create" "context~self" "surface~self" "set!" "nextmethod" "rest" "surface")}
        {Lisp-Entry "destroy" method #f 79 20 79 27 ("nextmethod" "destroy-context" "destroy-surface" "destroy-glyph-array")}
        {Lisp-Entry "destroy-glyph-array" method #f 86 11 86 30 ("set!" "glyph-array-free" "glyph-array" "when")}
        {Lisp-Entry "destroy-surface" method #f 92 11 92 26 ("set!" "cairo_status_to_string" "error" "0" "/=" "cairo-surface-status" "err" "let" "cairo_surface_destroy" "surface" "when")}
        {Lisp-Entry "destroy-context" method #f 102 11 102 26 ("set!" "cairo_status_to_string" "error" "0" "/=" "cairo-status" "err" "let" "cairo_destroy" "context" "when")}
        {Lisp-Entry "cairo-finish" method #f 112 18 112 30 ("surface" "cairo_surface_finish")}
        {Lisp-Entry "show-page" method #f 116 18 116 27 ("surface" "cairo_surface_show_page")}
        {Lisp-Entry "logical->device" method #f 134 18 134 33 ("context" "cairo_user_to_device" "shape")}
        {Lisp-Entry "device->logical" method #f 138 18 138 33 ("get-v" "get-h" "get-bottom" "get-right" "pt2" "get-top" "get-left" "new" "pt1" "let" "Rect" "context" "cairo_device_to_user" "Point" "typecase" "shape")}
        {Lisp-Entry "get-clipper" method #f 153 18 153 29 ("get-bottom" "get-right" "get-top" "clipper" "get-left" "Rect" "new")}
        {Lisp-Entry "get-logical-clipper" method #f 160 18 160 37 ("get-clipper" "device->logical")}
        {Lisp-Entry "set-clipper" method #f 164 18 164 29 ("select-clipper" "get-bottom" "set-bottom" "get-right" "set-right" "get-top" "set-top" "get-left" "clipper" "set-left" "rect")}
        {Lisp-Entry "select-clipper" method #f 172 18 172 32 ("cairo_clip" "draw-rectangle" "context" "cairo_reset_clip" "debug-painting?" "unless" "rect")}
        {Lisp-Entry "with-clipper" method #f 179 18 179 30 ("when" "set!" "set-clipper" "begin" "unwind-protect" "selected?" "let" "rect-intersection" "new-clipper" "get-clipper" "old-clipper" "let*" "proc" "clip-rect")}
        {Lisp-Entry "with-landscape" method #f 197 18 197 32 ("landscape-page" "landscape-rotation" "set!" "begin" "unwind-protect" "landscape?" "preserved" "let" "proc" "page" "rotation")}
        {Lisp-Entry "set-transform" method #f 220 18 220 31 ("cairo_translate" "set-transform-unscaled" "values" "cairo_matrix_t-free" "cairo_set_matrix" "cairo_matrix_t-y0-set!" "exact->inexact" "cairo_matrix_t-x0-set!" "cairo_matrix_t-yy-set!" "cairo_matrix_t-yx-set!" "cairo_matrix_t-xy-set!" "0.0" "cairo_matrix_t-xx-set!" "set-clipper" "rect-intersection" "new-clipper" "get-clipper" "old-clipper" "counterclockwise" "Rect" "new" "clipper" "cairo_identity_matrix" "context" "cairo_get_matrix" "new-matrix" "cairo_matrix_t-make" "old-matrix" "let" "cheight" "fxceiling" "cwidth" "cv" "fxround" "ch" "get-width" "dy" "else" "landscape-page" "cast" "get-height" "clockwise" "landscape-rotation" "case" "*" "+" "landscape?" "not" "if" "dx" "dv" "-" "dh" "let*" "set-transform-scaled" "define" "sc?" "sc" "sv" "sh" "height" "width" "lv" "lh")}
        {Lisp-Entry "with-transform" method #f 276 18 276 32 ("cairo_matrix_t-free" "cairo_set_matrix" "set-clipper" "context" "cairo_identity_matrix" "set-transform" "old-matrix" "old-clipper" "receive" "proc" "sc?" "sc" "sv" "sh" "height" "width" "lv" "lh")}
        {Lisp-Entry "set-text-color" method #f 290 18 290 32 ("set-color" "color")}
        {Lisp-Entry "get-char-width" method #f 294 18 294 32 ("cairo_text_extents_t-free" "cairo_glyph_t-free" "cairo_text_extents_t-x_advance-ref" "fxround" "width" "1" "context" "cairo_glyph_extents" "cairo_glyph_t-y-set!" "0." "cairo_glyph_t-x-set!" "cairo_glyph_t-index-set!" "font" "glyph-index" "ch" "cairo_glyph_t-make" "gly" "cairo_text_extents_t-make" "ext" "let" "n")}
        {Lisp-Entry "get-char-widths" method #f 308 18 308 33 ("cairo_text_extents_t-free" "cairo_glyph_t-free" "cairo_text_extents_t-x_advance-ref" "fxround" "vector-set!" "context" "cairo_glyph_extents" "cairo_glyph_t-y-set!" "0." "cairo_glyph_t-x-set!" "cairo_glyph_t-index-set!" "font" "glyph-index" "ch" "do" "to" "from" "i" "for" "loop" "1" "-" "+" "make-vector" "vec" "cairo_glyph_t-make" "gly" "cairo_text_extents_t-make" "ext" "let" "255" "last" "last:" "0" "first" "first:")}
        {Lisp-Entry "get-text-extent" method #f 325 18 325 33 ("cairo_font_extents_t-free" "cairo_text_extents_t-free" "cairo_font_extents_t-height-ref" "cairo_text_extents_t-x_advance-ref" "fxround" "Dimension" "new" "prog1" "context" "cairo_text_extents" "get-text-metrics" "metrics" "cairo_text_extents_t-make" "extents" "let" "text")}
        {Lisp-Entry "get-font-height" method #f 336 18 336 33 ("cairo_font_extents_t-free" "cairo_font_extents_t-height-ref" "fxround" "prog1" "context" "cairo_font_extents" "cairo_font_extents_t-make" "extents" "let")}
        {Lisp-Entry "get-text-metrics" method #f 343 18 343 34 ("context" "cairo_font_extents" "cairo_font_extents_t-make" "info" "let")}
        {Lisp-Entry "get-text-width" method #f 349 18 349 32 ("cairo_text_extents_t-free" "cairo_text_extents_t-x_advance-ref" "fxceiling" "prog1" "context" "cairo_text_extents" "cairo_text_extents_t-make" "extents" "let" "text")}
        {Lisp-Entry "draw-text" method #f 356 18 356 27 ("-" "cairo_text_extents_t-free" "cairo_font_extents_t-free" "cairo_show_glyphs" "cairo_text_extents_t-x_advance-ref" "1" "cairo_glyph_extents" "cairo_glyph_t-y-set!" "cast" "cairo_glyph_t-x-set!" "cairo_glyph_t-index-set!" "element" "char->integer" "font" "glyph-index" "ch" "glyph-array-ref" "glyph" "when" "0" "i" "iter" "cairo_font_extents_t-ascent-ref" "fxround" "+" "y" "context" "cairo_font_extents" "2" "*" "glyph-array-make" "glyph-array" "set!" "destroy-glyph-array" "begin" "array-length" "<" "if" "cardinality" "len" "cairo_text_extents_t-make" "extents" "cairo_font_extents_t-make" "font-ext" "uph" "let" "rest" "str" "v" "h")}
        {Lisp-Entry "draw-tabbed-text" method #f 385 18 385 34 ("cdr" "car" "<=" "while" "subseq!" "/=" "eqv?" "below" "from" "for" "loop" "stops" "beginning" "-" "cairo_text_extents_t-free" "cairo_font_extents_t-free" "cairo_show_glyphs" "set-text-color" "cairo_font_extents_t-height-ref" "Rect" "new" "fill-rect" "cairo_text_extents_t-x_advance-ref" "1" "cairo_glyph_extents" "cairo_glyph_t-y-set!" "cast" "cairo_glyph_t-x-set!" "cairo_glyph_t-index-set!" "element" "char->integer" "font" "glyph-index" "ch" "glyph-array-ref" "glyph" "when" "0" "i" "iter" "cairo_font_extents_t-ascent-ref" "fxround" "+" "y" "context" "cairo_font_extents" "2" "*" "glyph-array-make" "glyph-array" "set!" "destroy-glyph-array" "begin" "array-length" "<" "if" "cardinality" "len" "cairo_text_extents_t-make" "extents" "cairo_font_extents_t-make" "font-ext" "uph" "let" "draw-substring" "define" "highlight-color" "color" "origin" "tabs" "str" "v" "h")}
        {Lisp-Entry "fill-region" method #f 438 18 438 29 ("fill-rect" "do" "get-rectangles" "in" "rect" "for" "loop" "color" "region")}
        {Lisp-Entry "gradient-fill" method #f 443 18 443 31 ("cairo_pattern_destroy" "fill" "context" "cairo_set_source" "draw-rectangle" "add-color-stop" "color" "offset" "bind" "stop" "lambda" "for-each" "vertical" "create-linear-pattern" "case" "pattern" "vertmid" "2" "-" "fxfloor/" "horzmid" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "let*" "horizontal" "'horizontal" "direction" "direction:" "stops" "rect")}
        {Lisp-Entry "ellipse" method #f 465 18 465 25 ("fill" "stroke-preserve" "stroke" "not" "self" "set-color" "Color" "is?" "if" "when" "M_PI" "*" "1" "0" "cast" "cairo_arc" "cairo_scale" "context" "cairo_translate" "ty" "2" "/" "+" "exact->inexact" "tx" "h" "-" "w" "get-bottom" "bottom" "get-top" "top" "get-right" "right" "get-left" "left" "let" "inside" "outside" "rect")}
        {Lisp-Entry "draw-image" method #f 492 18 492 28 ("paint" "set-source-surface" "y" "x" "handle")}
        {Lisp-Entry "fill-background" method #f 497 18 497 33 ("error" "else" "fill-background" "lambda" "for-each" "List" "fill-texture" "Texture" "fill-gradient" "Gradient" "fill-rect" "Color" "typecase" "background" "rect")}
        {Lisp-Entry "fill-gradient" method #f 508 18 508 31 ("direction:" "gradient-fill" "get-kind" "direction" "increase!" "list" "prog1" "color" "map" "1" "length" "exact->inexact" "-" "/" "incr" "0.0" "stop" "Color" "is?" "part" "lambda" "every?" "if" "stops" "get-parts" "parts" "let" "gradient" "rect")}
        {Lisp-Entry "fill-texture" method #f 524 18 524 30 ("error" "else" "tile" "fill" "case" "Red" "name:" "Color" "fill-rect" "not" "if" "get-mode" "mode" "cairo_fill" "get-top" "get-left" "cast" "context" "cairo_rectangle" "CAIRO_EXTEND_REPEAT" "get-source" "cairo_pattern_set_extend" "set-source-surface" "handle" "draw-tiled" "0" "rect-height" "rect-width" "get-handle" "resize-image" "handle:" "resized" "with" "draw-filled" "get-v" "get-h" "self" "draw" "rect-size" "get-size" "center" "pos" "image" "draw-centered" "moniker:" "exists?" "and" "File" "resource:" "Image" "new" "Image-Resource" "typecase" "get-parts" "car" "part" "let" "texture-image" "define" "texture" "rect")}
        {Lisp-Entry "draw-scroll-bar" method #f 562 18 562 33 ("4" "get-top" "3" "get-left" "+" "draw-arrow-tip" "Black" "0" "else" "dv" "down" "'down" "up" "'up" "2" "right" "'right" "1" "left" "'left" "eq?" "cond" "dh" "let" "rectangle" "'rectangle" "edges:" "outer:" "raised" "'raised" "inner:" "draw-edge" "fill" "Draw-Edge-Light" "name:" "Color" "set-color" "draw-rectangle" "direction" "rect")}
        {Lisp-Entry "draw-caption" method #f 578 18 578 30 ("7.5" "9" "-8.5" "-7" "8.5" "maximize" "'maximize" "2.5" "8" "-1" "move-to-rel" "-5.5" "-4" "0" "5.5" "line-to-rel" "0.5" "restore" "'restore" "6" "5" "minimize" "'minimize" "stroke" "line-to" "3" "4" "move-to" "blue:" "green:" "90" "red:" "unless" "close" "'close" "eq?" "cond" "let" "Black" "raised" "'raised" "outer:" "get-bottom" "get-right" "-" "get-top" "get-left" "+" "Rect" "new" "rectangle" "'rectangle" "edges:" "sunken" "'sunken" "inner:" "draw-edge" "begin" "if" "fill" "Draw-Edge-Light" "draw-rectangle" "when" "1" "set-line-width" "Dark" "name:" "Color" "set-color" "in-rectangle?" "pushed?" "type" "rect")}
        {Lisp-Entry "draw-radio-button" method #f 636 18 636 35 ("Black" "when" "Draw-Edge-Light" "Draw-Edge-Dark" "stroke" "Draw-Edge-Medium" "7" "4" "3" "exact->inexact" "1" "set-line-width" "fill" "White" "Light-Background" "name:" "Color" "if" "set-color" "M_PI" "2" "*" "0" "cast" "context" "cairo_arc" "r" "get-bottom" "get-top" "y" "2." "get-right" "-" "/" "get-left" "+" "x" "let" "selected?" "selected?:" "inactive?" "inactive?:" "rect")}
        {Lisp-Entry "draw-push-button" method #f 664 18 664 34 ("stroke" "line-to-no-stroke" "move-to" "White" "2" "+" "Draw-Edge-Medium" "get-bottom" "get-right" "-" "get-top" "get-left" "line" "Draw-Edge-Dark" "name:" "Color" "set-color" "begin" "if" "1" "set-line-width" "pushed?" "rect")}
        {Lisp-Entry "set-source-surface" method #f 696 18 696 36 ("get-surface" "Surface" "is?" "if" "context" "cairo_set_source_surface" "y" "x" "surface")}
        {Lisp-Entry "blit-surface" method #f 703 18 703 30 ("paint" "get-v" "get-h" "set-source-surface" "0" "Point" "destination" "destination:" "surface")}
        {Lisp-Entry "blit-surface-ext" method #f 708 18 708 34 ("cairo_fill" "cast" "context" "cairo_rectangle" "-" "set-source-surface" "destination-v" "destination-h" "height" "width" "v" "h" "surface")}
        {Lisp-Entry "set-font" method #f 719 18 719 26 ("get-scaled-font" "context" "cairo_set_scaled_font" "font~self" "set!" "font")}
        {Lisp-Entry "set-style" method #f 724 18 724 27 ("error" "else" "cairo_set_alternate" "alternate" "context" "cairo_set_solid" "solid" "case" "style")}
        {Lisp-Entry "draw-edge" method #f 731 18 731 27 ("Draw-Edge-Light" "'bottom" "226" "blue:" "239" "green:" "241" "red:" "new" "2" "-" "Draw-Edge-Medium" "'right" "get-bottom" "'left" "Draw-Edge-Dark" "sunken" "'sunken" "get-right" "get-top" "+" "get-left" "line" "White" "name:" "Color" "set-color" "raised" "'raised" "cond" "'top" "memq?" "when" "1" "set-line-width" "bottom" "top" "right" "left" "eq?" "if" "let" "outer" "outer:" "inner" "inner:" "rectangle" "'rectangle" "edges" "edges:" "rect")}
        {Lisp-Entry "fill-rect" method #f 808 18 808 27 ("fill" "draw-rectangle" "set-color" "color" "rect")}
        {Lisp-Entry "fill-insets" method #f 814 18 814 29 ("fill" "Rect" "new" "draw-rectangle" "set-color" "-" "bbi" "+" "tti" "bi" "ri" "ti" "li" "get-bottom" "b" "get-right" "r" "get-top" "t" "get-left" "l" "let" "color" "insets" "rect")}
        {Lisp-Entry "draw-check" method #f 833 18 833 28 ("stroke" "7" "4" "6" "3" "5" "2" "0" "+" "line" "1" "set-line-width" "v" "h")}
        {Lisp-Entry "draw-raised" method #f 845 18 845 29 ("line-to" "Dark" "stroke" "get-right" "get-top" "line-to-no-stroke" "get-bottom" "-" "get-left" "move-to" "1" "set-line-width" "Light-Background" "name:" "Color" "set-color" "rect")}
        {Lisp-Entry "draw-arrow-tip" method #f 858 18 858 32 ("right" "height" "left" "down" "0" "naturals" "2" "decrease!" "line" "n" "lambda" "for-each" "increase!" "+" "-" "width" "let" "up" "case" "1" "set-line-width" "direction" "size" "v" "h")}
        {Lisp-Entry "start-doc" method #f 904 22 904 31 ("surface" "cairo_win32_surface_get_dc" "StartDoc" "rec")}
        {Lisp-Entry "end-doc" method #f 908 22 908 29 ("surface" "cairo_win32_surface_get_dc" "EndDoc")}
        {Lisp-Entry "start-page" method #f 912 22 912 32 ("surface" "cairo_win32_surface_get_dc" "StartPage")}
        {Lisp-Entry "end-page" method #f 916 22 916 30 ("surface" "cairo_win32_surface_get_dc" "EndPage")}
        {Lisp-Entry "with-outside/inside" method #f 921 11 921 30 ("stroke-preserve" "fill" "self" "set-color" "Color" "is?" "if" "when" "inside-proc" "outside-proc" "inside" "outside")}
        {Lisp-Entry "frame-rect" method #f 936 18 936 28 ("stroke" "get-bottom" "get-right" "-" "get-top" "0.5" "get-left" "+" "Rect$fl$" "new" "draw-rectangle$fl$" "set-color" "1" "set-line-width" "color" "rect")}
        {Lisp-Entry "frame-round-rect" method #f 948 18 948 34 ("-" "line-to" "+" "move-to" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "let" "set-color" "1" "set-line-width" "color" "rect")}
        {Lisp-Entry "rectangle" method #f 965 18 965 27 ("rect->rect$fl$" "-0.5" "inflate-rect" "draw-rectangle$fl$" "lambda" "with-outside/inside" "inside" "outside" "rect")}
        {Lisp-Entry "cairo-move-to" method #f 978 18 978 31 ("context" "cairo_move_to" "v" "h")}
        {Lisp-Entry "cairo-line-to" method #f 982 18 982 31 ("context" "cairo_line_to" "v" "h")}
        {Lisp-Entry "arc" method #f 986 18 986 21 ("cast" "context" "cairo_arc" "angle2" "angle1" "radius" "vc" "hc")}
        {Lisp-Entry "curve-to-relative" method #f 990 18 990 35 ("cast" "context" "cairo_rel_curve_to" "dy3" "dx3" "dy2" "dx2" "dy1" "dx1")}
        {Lisp-Entry "close-path" method #f 994 18 994 28 ("context" "cairo_close_path")}
        {Lisp-Entry "create-linear-pattern" definition #f 998 15 998 36 ("cast" "cairo_pattern_create_linear" "ev" "eh" "sv" "sh")}
        {Lisp-Entry "get-source" method #f 1002 18 1002 28 ("context" "cairo_get_source")}
        {Lisp-Entry "set-source" method #f 1006 18 1006 28 ("context" "cairo_set_source" "pattern")}
        {Lisp-Entry "translate" method #f 1010 18 1010 27 ("exact->inexact" "context" "cairo_translate" "tv" "th")}
        {Lisp-Entry "scale" method #f 1014 18 1014 23 ("exact->inexact" "context" "cairo_scale" "sv" "sh")}
        {Lisp-Entry "rotate" method #f 1018 18 1018 24 ("exact->inexact" "context" "cairo_rotate" "angle")}
        {Lisp-Entry "move-to" method #f 1027 18 1027 25 ("context" "cairo_move_to" "v" "h")}
        {Lisp-Entry "line-to" method #f 1031 18 1031 25 ("stroke" "line-to-no-stroke" "v" "h")}
        {Lisp-Entry "line-to-preserve" method #f 1036 18 1036 34 ("stroke-preserve" "line-to-no-stroke" "v" "h")}
        {Lisp-Entry "line-to-no-stroke" method #f 1041 18 1041 35 ("cairo_line_to" "0.5" "+" "move-to" "begin" "=" "if" "let" "get-v" "cur-v" "get-h" "cur-h" "context" "cairo_current_point" "pt" "let*" "v" "h")}
        {Lisp-Entry "line-to-rel" method #f 1058 18 1058 29 ("context" "cairo_rel_line_to" "dv" "dh")}
        {Lisp-Entry "move-to-rel" method #f 1062 18 1062 29 ("context" "cairo_rel_move_to" "dv" "dh")}
        {Lisp-Entry "line" method #f 1066 18 1066 22 ("line-to" "move-to" "dest-v" "dest-h" "v" "h")}
        {Lisp-Entry "pixel-to" method #f 1071 18 1071 26 ("+" "line-to" "move-to" "1" "set-line-width" "v" "h")}
        {Lisp-Entry "set-line-width" method #f 1077 18 1077 32 ("context" "cairo_set_line_width" "w")}
        {Lisp-Entry "get-line-width" method #f 1081 18 1081 32 ("context" "cairo_get_line_width")}
        {Lisp-Entry "set-operator" method #f 1085 18 1085 30 ("context" "cairo_set_operator" "op")}
        {Lisp-Entry "stroke" method #f 1089 18 1089 24 ("context" "cairo_stroke")}
        {Lisp-Entry "stroke-preserve" method #f 1093 18 1093 33 ("context" "cairo_stroke_preserve")}
        {Lisp-Entry "fill" method #f 1097 18 1097 22 ("context" "cairo_fill")}
        {Lisp-Entry "fill-preserve" method #f 1101 18 1101 31 ("context" "cairo_fill_preserve")}
        {Lisp-Entry "paint" method #f 1105 18 1105 23 ("context" "cairo_paint")}
        {Lisp-Entry "draw-rectangle" method #f 1109 18 1109 32 ("cast" "context" "cairo_rectangle" "get-bottom" "h" "get-right" "-" "w" "get-top" "y" "get-left" "x" "let" "rect")}
        {Lisp-Entry "draw-rectangle$fl$" method #f 1121 18 1121 36 ("context" "cairo_rectangle" "get-bottom" "h" "get-right" "-" "w" "get-top" "y" "get-left" "x" "let" "rect")}
        {Lisp-Entry "set-color" method #f 1133 18 1133 27 ("cairo_set_source_rgba" "context" "cairo_set_source_rgb" "not" "if" "get-alpha" "a" "get-blue" "b" "get-green" "g" "255.0" "get-red" "/" "exact->inexact" "r" "let" "color")}
        {Lisp-Entry "add-color-stop" definition #f 1143 15 1143 29 ("cairo_pattern_add_color_stop_rgba" "exact->inexact" "cairo_pattern_add_color_stop_rgb" "not" "if" "get-alpha" "a" "get-blue" "b" "get-green" "g" "255" "get-red" "/" "r" "let" "color" "offset" "pattern")}
        {Lisp-Entry "export-to-png" method #f 1153 18 1153 31 ("parse" "surface" "cairo_surface_write_to_png" "file")}
        {Lisp-Entry "cairo-status" method #f 1157 18 1157 30 ("context" "cairo_status")}
        {Lisp-Entry "cairo-surface-status" method #f 1161 18 1161 38 ("surface" "cairo_surface_status")}}}})
"Texture"
 ({Lisp-File-Entry {File jazz.graphic "src" "jazz" "graphic" "Texture.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.Texture" module #f 37 18 37 38 ("jazz")
      {Lisp-Entry "Texture" class #f 43 7 43 14 ("Object")
        {Lisp-Entry "mode" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-mode" accessor #f 46 21 46 29 ()}
        {Lisp-Entry "parts" slot #f 47 8 47 13 ()}
        {Lisp-Entry "get-parts" accessor #f 47 21 47 29 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("parts~self" "mode~self" "set!" "nextmethod" "parts" "mode")}
        {Lisp-Entry "copy-object" method #f 56 20 56 31 ("parts" "mode" "Texture" "new" "apply" "deep?")}
        {Lisp-Entry "compare-object" method #f 60 20 60 34 (":not-equal" "else" ":equal" "get-parts" "parts" "equal?" "get-mode" "mode" "eq?" "and" ":incompatible" "Texture" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 70 20 70 25 ("parts" "not-null?" "mode" "self" "class-of" "category-name" "format" "readably" "printer")}}}})
"Viewable"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "Viewable.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.Viewable" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Viewable" interface #f 40 24 40 32 ()
        {Lisp-Entry "get-title" method #f 43 35 43 44 ()}
        {Lisp-Entry "get-viewer-class" method #f 44 35 44 51 ()}}}})
"_font"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "font" "_font.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.font" module #f 37 8 37 25 ("jazz")}})
"_graphic"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "_graphic.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "registered-object" definition #f 51 13 51 30 ("table-set!" "object" "procedure?" "if" "table-ref" "procedure/object" "let" "name" "table")}
      {Lisp-Entry "for-each-object" definition #f 60 13 60 28 ("procedure?" "if" "value" "name" "lambda" "iterate-table" "proc" "table")}
      {Lisp-Entry "*colors*" definition #f 73 12 73 20 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-color" definition #f 77 21 77 35 ("*colors*" "table-set!" "color" "name")}
      {Lisp-Entry "registered-color" definition #f 81 21 81 37 ("set-alpha" "registered-color" "copy" "if" "error" "*colors*" "registered-object" "or" "color" "let" "jazz.graphic.literals.colors" "'jazz.graphic.literals.colors" "load-unit" "alpha" "name")}
      {Lisp-Entry "symbolic-colors" definition #f 92 20 92 35 ("value" "name" "lambda" "*colors*" "map-table")}
      {Lisp-Entry "symbolic-color" definition #f 98 20 98 34 ("registered-color" "symbol?" "if" "color")}
      {Lisp-Entry "symbolize-color" definition #f 104 20 104 35 ("continuation-return" "color=?" "when" "col" "name" "*colors*" "iterate-table" "return" "lambda" "continuation-capture" "color")}
      {Lisp-Entry "for-each-color" definition #f 114 20 114 34 ("*colors*" "for-each-object" "proc")}
      {Lisp-Entry "color=?" definition #f 118 20 118 27 ("get-alpha" "eqv?" "get-blue" "get-green" "get-red" "=" "and" "y" "x")}
      {Lisp-Entry "*fonts*" definition #f 130 12 130 19 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-font" definition #f 134 21 134 34 ("*fonts*" "table-set!" "font" "name")}
      {Lisp-Entry "registered-font" definition #f 138 21 138 36 ("error" "*fonts*" "registered-object" "or" "jazz.graphic.literals.fonts" "'jazz.graphic.literals.fonts" "load-unit" "name")}
      {Lisp-Entry "symbolic-fonts" definition #f 144 20 144 34 ("value" "name" "lambda" "*fonts*" "map-table")}
      {Lisp-Entry "symbolic-font" definition #f 150 20 150 33 ("registered-font" "symbol?" "if" "font")}
      {Lisp-Entry "for-each-font" definition #f 156 20 156 33 ("*fonts*" "for-each-object" "proc")}
      {Lisp-Entry "copy-region" definition #f 165 20 165 31 ("or" "'or" "combine!" "Region" "new" "copy" "let" "region")}
      {Lisp-Entry "region-union" definition #f 171 20 171 32 ("or" "'or" "combine!" "copy-region" "region" "let" "y" "x")}
      {Lisp-Entry "region-intersection" definition #f 177 20 177 39 ("and" "'and" "combine!" "copy-region" "region" "let" "y" "x")}
      {Lisp-Entry "region-difference" definition #f 183 20 183 37 ("diff" "'diff" "combine!" "copy-region" "region" "let" "y" "x")}
      {Lisp-Entry "debug-paint?" definition #f 194 19 194 31 ("make-parameter")}
      {Lisp-Entry "debug-painting?" definition #f 197 19 197 34 ("make-parameter")}}})
"_image"
 ({Lisp-File-Entry {File jazz.graphic "src" "jazz" "graphic" "image" "_image.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.image" module #f 37 8 37 26 ("jazz")
      {Lisp-Entry "load-image" definition #f 50 20 50 30 ("resource?" "case" "Image-Load-Error" "new" "signal" "0" "cairo_surface_status" "/=" "if" "parse" "cairo_image_surface_create_from_png" "handle" "let" "file" "create-cairo-surface-from-png" "'image" "find-image-file" "get-name" "icon" "'icon" "get-application" "get-resource" "resource" "find-icon-file" "define" "image" "type")}
      {Lisp-Entry "load-image-from-u8vector" definition #f 76 20 76 44 ("Image-Load-Error" "new" "signal" "0" "cairo_surface_status" "/=" "if" "load-png-image-from-u8vector" "handle" "let" "u8vector")}
      {Lisp-Entry "resize-image" definition #f 88 20 88 32 ("cairo_destroy" "cairo_paint" "0." "cairo_set_source_surface" "/" "exact->inexact" "cairo_scale" "cairo_image_surface_get_height" "height" "cairo_image_surface_get_width" "width" "cairo_create" "context" "CAIRO_CONTENT_COLOR_ALPHA" "cairo_surface_create_similar" "new-handle" "let" "new-height" "new-width" "handle")}
      {Lisp-Entry "Image-Load-Error" class #f 107 15 107 31 ("Error")
        {Lisp-Entry "get-message" method #f 110 20 110 31 ()}}}})
"_literals"
 ({Lisp-File-Entry {File jazz.graphic "src" "jazz" "graphic" "literals" "_literals.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.literals" module #f 37 8 37 29 ("jazz")
      {Lisp-Entry "construct-color" definition #f 48 21 48 36 ("Color" "new" "apply" "alpha:" "getf" "registered-color" "if" "others" "name" "bind-keywords" "rest")}
      {Lisp-Entry "construct-gradient" definition #f 60 21 60 39 ("Gradient" "new" "apply" "rest" "kind")}
      {Lisp-Entry "construct-texture" definition #f 69 21 69 38 ("Texture" "new" "apply" "rest" "mode")}
      {Lisp-Entry "construct-font" definition #f 78 21 78 35 ("Font" "new" "apply" "registered-font" "if" "others" "name" "bind-keywords" "rest")}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "autoload.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.autoload" module #f 37 18 37 39 ("jazz")}})
"colors"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "literals" "colors.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.literals.colors" module #f 37 8 37 36 ("jazz")
      {Lisp-Entry "Black" define ("color") 43 14 43 19 ("blue:" "green:" "0" "red:")}
      {Lisp-Entry "White" define ("color") 44 14 44 19 ("blue:" "green:" "255" "red:")}
      {Lisp-Entry "Light-Gray" define ("color") 45 14 45 24 ("blue:" "green:" "236" "red:")}
      {Lisp-Entry "Gray" define ("color") 46 14 46 18 ("blue:" "green:" "218" "red:")}
      {Lisp-Entry "Medium-Gray" define ("color") 47 14 47 25 ("blue:" "green:" "160" "red:")}
      {Lisp-Entry "Dark-Gray" define ("color") 48 14 48 23 ("blue:" "green:" "132" "red:")}
      {Lisp-Entry "Text-Gray" define ("color") 49 14 49 23 ("blue:" "green:" "90" "red:")}
      {Lisp-Entry "Light-Red" define ("color") 50 14 50 23 ("blue:" "171" "green:" "255" "red:")}
      {Lisp-Entry "Red" define ("color") 51 14 51 17 ("blue:" "0" "green:" "255" "red:")}
      {Lisp-Entry "Dark-Red" define ("color") 52 14 52 22 ("blue:" "0" "green:" "179" "red:")}
      {Lisp-Entry "Light-Orange" define ("color") 53 14 53 26 ("102" "blue:" "204" "green:" "255" "red:")}
      {Lisp-Entry "Orange" define ("color") 54 14 54 20 ("0" "blue:" "140" "green:" "255" "red:")}
      {Lisp-Entry "Dark-Orange" define ("color") 55 14 55 25 ("0" "blue:" "106" "green:" "213" "red:")}
      {Lisp-Entry "Ochre" define ("color") 56 14 56 19 ("0" "blue:" "91" "green:" "121" "red:")}
      {Lisp-Entry "Soft-Yellow" define ("color") 57 14 57 25 ("193" "blue:" "green:" "255" "red:")}
      {Lisp-Entry "Light-Yellow" define ("color") 58 14 58 26 ("153" "blue:" "green:" "255" "red:")}
      {Lisp-Entry "Yellow" define ("color") 59 14 59 20 ("0" "blue:" "green:" "255" "red:")}
      {Lisp-Entry "Dark-Yellow" define ("color") 60 14 60 25 ("55" "blue:" "197" "green:" "200" "red:")}
      {Lisp-Entry "Light-Green" define ("color") 61 14 61 25 ("blue:" "255" "green:" "135" "red:")}
      {Lisp-Entry "Green" define ("color") 62 14 62 19 ("blue:" "255" "green:" "0" "red:")}
      {Lisp-Entry "Dark-Green" define ("color") 63 14 63 24 ("31" "blue:" "128" "green:" "18" "red:")}
      {Lisp-Entry "Light-Blue" define ("color") 64 14 64 24 ("blue:" "255" "green:" "128" "red:")}
      {Lisp-Entry "Blue" define ("color") 65 14 65 18 ("255" "blue:" "green:" "0" "red:")}
      {Lisp-Entry "Dark-Blue" define ("color") 66 14 66 23 ("179" "blue:" "green:" "0" "red:")}
      {Lisp-Entry "Light-Purple" define ("color") 67 14 67 26 ("255" "blue:" "green:" "215" "red:")}
      {Lisp-Entry "Purple" define ("color") 68 14 68 20 ("blue:" "0" "green:" "128" "red:")}
      {Lisp-Entry "Dark-Purple" define ("color") 69 14 69 25 ("161" "blue:" "31" "green:" "102" "red:")}
      {Lisp-Entry "Light" define ("color") 72 14 72 19 ("blue:" "green:" "255" "red:")}
      {Lisp-Entry "Medium" define ("color") 73 14 73 20 ("216" "blue:" "233" "green:" "236" "red:")}
      {Lisp-Entry "Dark" define ("color") 74 14 74 18 ("153" "blue:" "168" "green:" "172" "red:")}
      {Lisp-Entry "Tooltip" define ("color") 75 14 75 21 ("225" "blue:" "green:" "255" "red:")}
      {Lisp-Entry "Active-Caption" define ("color") 76 14 76 28 ("227" "blue:" "84" "green:" "0" "red:")}
      {Lisp-Entry "Draw-Edge-Dark" define ("color") 78 14 78 28 ("100" "blue:" "111" "green:" "113" "red:")}
      {Lisp-Entry "Draw-Edge-Medium" define ("color") 79 14 79 30 ("153" "blue:" "168" "green:" "172" "red:")}
      {Lisp-Entry "Draw-Edge-Light" define ("color") 80 14 80 29 ("226" "blue:" "239" "green:" "241" "red:")}
      {Lisp-Entry "Light-Background" define ("color") 81 14 81 30 ("240" "blue:" "248" "green:" "249" "red:")}
      {Lisp-Entry "Group-Border" define ("color") 82 14 82 26 ("191" "blue:" "209" "green:" "208" "red:")}
      {Lisp-Entry "Outline-Border" define ("color") 83 14 83 28 ("191" "blue:" "209" "green:" "208" "red:")}
      {Lisp-Entry "Entry-Border" define ("color") 84 14 84 26 ("185" "blue:" "157" "green:" "127" "red:")}
      {Lisp-Entry "Uneditable-Border" define ("color") 85 14 85 31 ("207" "blue:" "188" "green:" "167" "red:")}
      {Lisp-Entry "Focused-Selection" define ("color") 86 14 86 31 ("197" "blue:" "106" "green:" "49" "red:")}
      {Lisp-Entry "Unfocused-Selection" define ("color") 87 14 87 33 ("194" "blue:" "222" "green:" "226" "red:")}
      {Lisp-Entry "Focused-Selected-Text" define ("color") 88 14 88 35 ("blue:" "green:" "255" "red:")}
      {Lisp-Entry "Unfocused-Selected-Text" define ("color") 89 14 89 37 ("blue:" "green:" "0" "red:")}
      {Lisp-Entry "Hyperlink" define ("color") 90 14 90 23 ("240" "blue:" "green:" "0" "red:")}
      {Lisp-Entry "Slide-Title" define ("color") 91 14 91 25 ("102" "blue:" "204" "green:" "255" "red:")}
      {Lisp-Entry "Slide-Bullet" define ("color") 92 14 92 26 ("255" "blue:" "102" "green:" "51" "red:")}
      {Lisp-Entry "Debug" define ("color") 93 14 93 19 ("blue:" "green:" "90" "red:")}
      {Lisp-Entry "Reference" define ("color") 94 14 94 23 ("0" "blue:" "132" "green:" "240" "red:")}
      {Lisp-Entry "Match" define ("color") 95 14 95 19 ("102" "blue:" "204" "green:" "255" "red:")}
      {Lisp-Entry "Found" define ("color") 96 14 96 19 ("47" "blue:" "162" "green:" "255" "red:")}
      {Lisp-Entry "Highlight" define ("color") 97 14 97 23 ("120" "blue:" "green:" "255" "red:")}}})
"fonts"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "literals" "fonts.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.literals.fonts" module #f 37 8 37 35 ("jazz")
      {Lisp-Entry "Label" define ("font") 46 19 46 24 ("8" "point-size:" "font-name:")}
      {Lisp-Entry "Label-Bold" define ("font") 47 19 47 29 ("bold?:" "8" "point-size:" "font-name:")}
      {Lisp-Entry "Label-User" define ("font") 48 19 48 29 ("none" "'none" "hint-style:" "8" "point-size:" "font-name:")}
      {Lisp-Entry "Caption" define ("font") 49 19 49 26 ("bold?:" "8" "point-size:" "font-name:")}
      {Lisp-Entry "Text" define ("font") 50 19 50 23 ("12" "point-size:" "font-name:")}
      {Lisp-Entry "Text-Italic" define ("font") 51 19 51 30 ("italic?:" "12" "point-size:" "font-name:")}
      {Lisp-Entry "Code" define ("font") 52 19 52 23 ("none" "'none" "hint-style:" "10" "point-size:" "font-name:")}
      {Lisp-Entry "Code-Bold" define ("font") 53 19 53 28 ("none" "'none" "hint-style:" "bold?:" "10" "point-size:" "font-name:")}
      {Lisp-Entry "Hyperlink" define ("font") 54 19 54 28 ("underline?:" "12" "point-size:" "font-name:")}
      {Lisp-Entry "Hyperlink-Small" define ("font") 55 19 55 34 ("underline?:" "8" "point-size:" "font-name:")}
      {Lisp-Entry "Password" define ("font") 56 19 56 27 ("9" "point-size:" "font-name:")}
      {Lisp-Entry "Heading0" define ("font") 57 19 57 27 ("28" "point-size:" "font-name:")}
      {Lisp-Entry "Heading1" define ("font") 58 19 58 27 ("18" "point-size:" "font-name:")}
      {Lisp-Entry "Heading2" define ("font") 59 19 59 27 ("italic?:" "16" "point-size:" "font-name:")}
      {Lisp-Entry "Heading3" define ("font") 60 19 60 27 ("italic?:" "13" "point-size:" "font-name:")}
      {Lisp-Entry "Heading4" define ("font") 61 19 61 27 ("12" "point-size:" "font-name:")}
      {Lisp-Entry "Heading5" define ("font") 62 19 62 27 ("11" "point-size:" "font-name:")}
      {Lisp-Entry "Doc-Heading0" define ("font") 63 19 63 31 ("28" "point-size:" "font-name:")}
      {Lisp-Entry "Doc-Heading1" define ("font") 64 19 64 31 ("14" "point-size:" "font-name:")}
      {Lisp-Entry "Doc-Heading2" define ("font") 65 19 65 31 ("italic?:" "12" "point-size:" "font-name:")}
      {Lisp-Entry "Doc-Heading3" define ("font") 66 19 66 31 ("italic?:" "10" "point-size:" "font-name:")}
      {Lisp-Entry "Label" define ("font") 70 19 70 24 ("10.5" "point-size:" "vera-sans" "'vera-sans" "font-name:")}
      {Lisp-Entry "Label-Bold" define ("font") 71 19 71 29 ("bold?:" "10.5" "point-size:" "vera-sans" "'vera-sans" "font-name:")}
      {Lisp-Entry "Label-User" define ("font") 72 19 72 29 ("10.5" "point-size:" "vera-sans" "'vera-sans" "font-name:")}
      {Lisp-Entry "Caption" define ("font") 73 19 73 26 ("bold?:" "10.5" "point-size:" "vera-sans" "'vera-sans" "font-name:")}
      {Lisp-Entry "Text" define ("font") 74 19 74 23 ("14" "point-size:" "vera-serif" "'vera-serif" "font-name:")}
      {Lisp-Entry "Text-Italic" define ("font") 75 19 75 30 ("italic?:" "14" "point-size:" "vera-serif" "'vera-serif" "font-name:")}
      {Lisp-Entry "Code" define ("font") 76 19 76 23 ("12" "point-size:" "vera-mono" "'vera-mono" "font-name:")}
      {Lisp-Entry "Code-Bold" define ("font") 77 19 77 28 ("bold?:" "12" "point-size:" "vera-mono" "'vera-mono" "font-name:")}
      {Lisp-Entry "Hyperlink" define ("font") 78 19 78 28 ("underline?:" "14" "point-size:" "vera-serif" "'vera-serif" "font-name:")}
      {Lisp-Entry "Hyperlink-Small" define ("font") 79 19 79 34 ("underline?:" "10.5" "point-size:" "vera-sans" "'vera-sans" "font-name:")}
      {Lisp-Entry "Password" define ("font") 80 19 80 27 ("11.5" "point-size:" "vera-mono" "'vera-mono" "font-name:")}
      {Lisp-Entry "Heading0" define ("font") 81 19 81 27 ("36" "point-size:" "vera-serif" "'vera-serif" "font-name:")}
      {Lisp-Entry "Heading1" define ("font") 82 19 82 27 ("24" "point-size:" "vera-sans" "'vera-sans" "font-name:")}
      {Lisp-Entry "Heading2" define ("font") 83 19 83 27 ("italic?:" "18" "point-size:" "vera-serif" "'vera-serif" "font-name:")}
      {Lisp-Entry "Heading3" define ("font") 84 19 84 27 ("italic?:" "16" "point-size:" "vera-serif" "'vera-serif" "font-name:")}
      {Lisp-Entry "Heading4" define ("font") 85 19 85 27 ("14" "point-size:" "vera-serif" "'vera-serif" "font-name:")}
      {Lisp-Entry "Heading5" define ("font") 86 19 86 27 ("12" "point-size:" "vera-serif" "'vera-serif" "font-name:")}
      {Lisp-Entry "Doc-Heading0" define ("font") 87 19 87 31 ("36" "point-size:" "vera-serif" "'vera-serif" "font-name:")}
      {Lisp-Entry "Doc-Heading1" define ("font") 88 19 88 31 ("16" "point-size:" "vera-sans" "'vera-sans" "font-name:")}
      {Lisp-Entry "Doc-Heading2" define ("font") 89 19 89 31 ("14" "point-size:" "vera-sans" "'vera-sans" "font-name:")}
      {Lisp-Entry "Doc-Heading3" define ("font") 90 19 90 31 ("12" "point-size:" "vera-sans" "'vera-sans" "font-name:")}}})
"freetype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "font" "platform" "freetype.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.font.platform.freetype" module #f 37 18 37 53 ("10x20" "'10x20" "droid-serif" "'droid-serif" "droid-mono" "'droid-mono" "droid-sans" "'droid-sans" "vera-serif" "'vera-serif" "vera-mono" "'vera-mono" "vera-sans" "'vera-sans" "freetype-font-table" "table-set!" "jazz")
      {Lisp-Entry "freetype-font-table" definition #f 49 12 49 31 ("make-table")}
      {Lisp-Entry "get-freetype-font" definition #f 53 13 53 30 ("error" "freetype-font-table" "table-ref" "or" "name")}
      {Lisp-Entry "set-freetype-font" definition #f 57 13 57 30 ("freetype-font-table" "table-set!" "paths" "name")}
      {Lisp-Entry "create-font-handle" definition #f 75 20 75 38 ("Fc-make-pattern" "Fc-font-match" "error" "ft-library" "FT_New_Face" "/=" "when" "kernel-source" "string-append" "make-FT_Face" "face" "let" "list-ref" "or" "path" "0" "else" "1" "2" "3" "and" "cond" "index" "get-freetype-font" "paths" "let*" "if" "underline?" "underline?:" "italic?" "italic?:" "bold?" "bold?:" "point-size" "point-size:" "font-name" "font-name:" "local?")}
      {Lisp-Entry "create-cairo-font-face" definition #f 101 20 101 42 ("cairo_ft_font_face_create_for_pattern" "0" "cairo_ft_font_face_create_for_ft_face" "if" "handle" "local?")}
      {Lisp-Entry "destroy-font-handle" definition #f 107 20 107 39 ("FcPatternDestroy" "free-FT_Face" "if" "handle" "local?")}
      {Lisp-Entry "destroy-cairo-font-face" definition #f 113 20 113 43 ("cairo_font_face_destroy" "handle")}}})
"install"
 ({Lisp-File-Entry {File jazz.graphic "src" "jazz" "graphic" "install.scm"} 1288732033
    {Lisp-Entry "jazz.graphic.install" unit #f 37 6 37 26 ()
      {Lisp-Entry "Color" define ("literal") 40 21 40 26 ("jazz.graphic.literals.construct-color")}
      {Lisp-Entry "Gradient" define ("literal") 41 21 41 29 ("jazz.graphic.literals.construct-gradient")}
      {Lisp-Entry "Texture" define ("literal") 42 21 42 28 ("jazz.graphic.literals.construct-texture")}
      {Lisp-Entry "Font" define ("literal") 43 21 43 25 ("jazz.graphic.literals.construct-font")}}})
"logfont"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.graphic" "src" "jazz" "graphic" "font" "platform" "logfont.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.font.platform.logfont" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "create-font-handle" definition #f 44 20 44 38 ("DEFAULT_PITCH" "DEFAULT_QUALITY" "CLIP_DEFAULT_PRECIS" "OUT_DEFAULT_PRECIS" "ANSI_CHARSET" "1" "FW_NORMAL" "FW_BOLD" "0" "calculate-height" "fxround" "CreateFont" "error" "if" "underline?" "underline?:" "italic?" "italic?:" "bold?" "bold?:" "point-size" "point-size:" "font-name" "font-name:" "local?")}
      {Lisp-Entry "calculate-height" definition #f 70 20 70 36 ("72" "96" "*" "fxround/" "point-size")}
      {Lisp-Entry "create-cairo-font-face" definition #f 74 20 74 42 ("LOGFONTW-free" "cairo_win32_font_face_create_for_logfontw" "prog1" "get-logfont" "logfont" "let" "handle" "local?")}
      {Lisp-Entry "get-logfont" definition #f 80 20 80 31 ("LOGFONTW*->PVOID" "LOGFONTW-sizeof" "GetObject" "LOGFONTW-make" "info" "let" "handle")}
      {Lisp-Entry "destroy-font-handle" definition #f 86 20 86 39 ("DeleteObject" "handle" "local?")}
      {Lisp-Entry "destroy-cairo-font-face" definition #f 90 20 90 43 ("cairo_font_face_destroy" "handle")}}})
"syntax"
 ({Lisp-File-Entry {File jazz.graphic "src" "jazz" "graphic" "syntax.jazz"} 1288732033
    {Lisp-Entry "jazz.graphic.syntax" module #f 37 18 37 37 ("jazz")
      {Lisp-Entry "define-color" macro ("macro") 40 15 40 27 (",@rest" "name:" "Color" "new" "lambda" ",name" "',name" "register-color" "rest" "name")}
      {Lisp-Entry "define-font" macro ("macro") 46 15 46 26 (",@rest" "name:" "Font" "new" "lambda" ",name" "',name" "register-font" "rest" "name")}}})
