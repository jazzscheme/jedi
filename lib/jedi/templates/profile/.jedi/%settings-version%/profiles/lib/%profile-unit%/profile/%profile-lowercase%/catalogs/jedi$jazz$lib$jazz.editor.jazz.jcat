"Class-Browser"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "tools" "Class-Browser.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.tools.Class-Browser" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.ide")}
      {Lisp-Entry "Class-Browser" class () #f 48 7 48 20 ("initialize" "View")
        {Lisp-Entry "text" property () #f 51 12 51 16 ()}
        {Lisp-Entry "form" anonymous #f #f 54 3 54 7 ("419" "width:" "display-images?:" "Tree-Node-Column" "<Tree-Node-Column>" "on-double-click" "double-click-handler:" ":images" "portfolio:" "multiple-selection?:" "classes" "Tree-View" "<Tree-View>" "Tree-Header" "<Tree-Header>" "document" "562" "391" "35" "classes-border" "on-browse" "action-handler:" "22" "120" "7" "272" "title:" "browse" "Push-Button" "<Push-Button>" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "left-padding:" "name" "IDE-Text-View" "<IDE-Text-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "19" "250" "9" "2" "Point" "position:" "name-border" "name:" "Border-View" "<Border-View>" "599" "395" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 70 25 70 38 ("class-browser" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 79 25 79 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 83 25 83 35 ()}
        {Lisp-Entry "host-position" method (meta override) #f 87 25 87 38 ("20" "90" "Point")}
        {Lisp-Entry "host-size" method (meta override) #f 91 25 91 34 ("600" "395" "Dimension")}
        {Lisp-Entry "focus-default" method (override) #f 95 20 95 33 ("name" "locate" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "get-text" method (public) #f 104 18 104 26 ("name" "locate" "get-string-content" "get-string-content~")}
        {Lisp-Entry "set-text" method (public) #f 108 18 108 26 ("or" "name" "locate" "set-string-content" "set-string-content~" "value")}
        {Lisp-Entry "guest-actions" method (override) #f 118 20 118 33 ("nextmethod" "class-browser" "find-actions" "cons")}
        {Lisp-Entry "resize" method (override) #f 128 20 128 26 ("classes-border" "size-figure" "size-figure~" "0" "browse" "locate" "move-figure" "move-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-browse" method () #f 134 11 134 20 ("root:" "browse-inheritance-tree" "lambda" ":wait" "with-cursor" "else" "class?" "locate" "get-string-content" "get-string-content~" "format" "message-box" "not" "cond" "root" "category?" "global-ref" "value" "global-bound?" "autoload" "get-autoload" "string->symbol" "name" "Object" "empty-string?" "if" "get-text" "text" "let" "get-root-class" "define" "evt")}
        {Lisp-Entry "on-return-press" method (override) #f 160 20 160 35 ("on-browse" "evt")}
        {Lisp-Entry "on-double-click" method () #f 164 11 164 26 ("category-name" "edit-definitions" "edit-definitions~" "get-application" "appl" "get-user-data" "get-user-data~" "type" "get-row" "get-row~" "row" "when" "get-single-selection" "get-single-selection~" "selection" "get-sender" "get-sender~" "tree" "let*" "evt")}
        {Lisp-Entry "browse-inheritance-tree" method () #f 179 11 179 34 ("with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "symbol->string" "key:" "category-descendants" "string<?" "sort" "subtype" "lambda" "for-each" "downward" "user-data:" "Image-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "add-row~" "and" "father" "class-ascendant" "ascendant" "category-identifier" "->string" "title" "expanded" "state" "let*" "type" "upward" "define" "classes" "locate" "tree" "let" "Object" "root" "root:")}
        {Lisp-Entry "selected-categories" method () #f 209 11 209 30 ("get-row" "get-row~" "get-user-data" "get-user-data~" "rank" "lambda" "map" "get-selection" "get-selection~" "selection" "classes" "locate" "tree" "let*")}}}})
"Class-Browser-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "tools" "Class-Browser-Actions.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.editor.jazz.tools.Class-Browser-Actions" module (protected) #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Class-Browser-Actions" class () #f 43 7 43 28 ("Actions")}}})
"Documentation-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "documentation" "Documentation-Text-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.documentation.Documentation-Text-View" module (protected) #f 37 18 37 72 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Documentation-Text-View" class () #f 44 7 44 30 ("Formatted-Text-View")
        {Lisp-Entry "new-model" method (override) #f 47 20 47 29 ("4" "left-padding:" "Text" "Font" "font:" "Text-Style" "base-style:" "Formatted-Text-Model" "new")}
        {Lisp-Entry "install" method (override) #f 51 20 51 27 ("Variable" "Code" "Dark-Blue" "Link" "Reference" "Purple" "Comment" "Dark-Red" "Color" "color:" "Title" "Doc-Heading4" "Doc-Heading3" "Doc-Heading2" "Doc-Heading1" "Font" "font:" "Text-Style" "add-style" "Heading4" "Heading3" "Heading2" "Base" "Format" "Heading1" "add-format" "nextmethod" "rest")}
        {Lisp-Entry "get-context-menu" method (override) #f 71 20 71 36 ("new-text-context-menu")}}}})
"Event-Spy"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "spy" "Event-Spy.jazz"} 246612978. jazz
    {Lisp-Entry "jazz.editor.jazz.spy.Event-Spy" module (protected) #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.editor.jazz")}
      {Lisp-Entry "Event-Categories" constant () #f 51 10 51 26 ("unknown" "menu" "focus" "clipboard" "keyboard" "mouse" "action" "paint" "window" "component" "Image-Resource" "general")}
      {Lisp-Entry "Event-Classes" constant () #f 65 10 65 23 ("Selection-Event" "Print-Event" "Paint-Event" "mouse" "Mouse-Event" "Keyboard-Event" "Focus-Event" "focus" "Edition-Event" "paint" "Draw-Event" "window" "Cursor-Event" "Component-Event" "general" "Break-Event" "component" "Action-Event")}
      {Lisp-Entry "Event-Spy" class () #f 85 7 85 16 ("Spy-View")
        {Lisp-Entry "form" anonymous #f #f 88 3 88 7 ("213" "component" "226" "kind" "Tree-Label-Column" "<Tree-Label-Column>" "toplevel-controls?:" "140" "width:" "title:" "event" "Tree-Node-Column" "<Tree-Node-Column>" "properties" "filled-column:" "tree" "tree-header" "content" "tree-scroller" "tree-border" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "host-title" method (meta override) #f 107 25 107 35 ()}
        {Lisp-Entry "host-position" method (meta override) #f 111 25 111 38 ("152" "154" "Point")}
        {Lisp-Entry "host-size" method (meta override) #f 115 25 115 34 ("339" "736" "Dimension")}
        {Lisp-Entry "spy-domain" method (override) #f 124 20 124 30 ("views")}
        {Lisp-Entry "spy" method (override) #f 128 20 128 23 ("self" "Spyer" "new" "set-event-consumer" "set-event-consumer~" "get-event-consumer" "get-event-consumer~" "old-consumer" "set!" "Event-Consumer" "is?" "when" "client")}
        {Lisp-Entry "unspy" method (override) #f 134 20 134 25 ("old-consumer" "set-event-consumer" "set-event-consumer~" "Event-Consumer" "is?" "when" "client")}
        {Lisp-Entry "incoming-event" method () #f 139 11 139 25 ("slowdown-quantum" "sleep" "slowdown?" "update-view" "ensure-at-end" "ensure-at-end~" "list" "children:" "add-row" "add-row~" "get-visible-count" "get-visible-count~" "item" "5" "*" "make-string" "c3" "c2" "get-kind" "get-kind~" "Tree-Label" "c1" "image:" "title:" "Tree-Node" "new" "c0" "get-properties" "get-properties~" "format" "properties" "Event-Categories" "assq" "cdr" "image" "get-tree" "tree" "all" "category" "eq?" "or" "when" "unknown" "second" "if" "cat" "car" "key:" "Event-Classes" "find-in" "info" "class-of" "category-name" "type" "let*" "evt" "client" "window" "level")}
        {Lisp-Entry "incoming-result" method () #f 160 11 160 26 ("result" "item" "level")}}
      {Lisp-Entry "Spyer" class () #f 169 7 169 12 ("0" "initialize" "Event-Consumer" "Object")
        {Lisp-Entry "level" slot () #f 172 8 172 13 ()}
        {Lisp-Entry "spy-window" slot () #f 173 8 173 18 ()}
        {Lisp-Entry "client" slot () #f 174 8 174 14 ()}
        {Lisp-Entry "get-event-consumer" method (override) #f 177 20 177 38 ()}
        {Lisp-Entry "set-event-consumer" method (override) #f 178 20 178 38 ("consumer")}
        {Lisp-Entry "initialize" method (override) #f 181 20 181 30 ("client" "spy-window" "set!" "nextmethod" "clt" "wnd")}
        {Lisp-Entry "deliver-event" method (override) #f 187 20 187 33 ("decrease!" "increase!" "client" "level" "spy-window" "incoming-event" "incoming-event~" "evt" "proc" "target" "handler")}}}})
"Inspector"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "inspector" "Inspector.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.inspector.Inspector" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.debugger" "jazz.editor.jazz.inspector")}
      {Lisp-Entry "inspector-max-content" constant () #f 49 10 49 31 ("256")}
      {Lisp-Entry "Inspector" class () #f 53 7 53 16 ("alphabetic" "explicit" "initialize" "Tree-View")
        {Lisp-Entry "process" property () #f 56 12 56 19 ()}
        {Lisp-Entry "get-process" accessor #f #f 56 54 56 62 ()}
        {Lisp-Entry "set-process" accessor #f #f 56 54 56 62 ()}
        {Lisp-Entry "client" property () #f 57 12 57 18 ()}
        {Lisp-Entry "filter" property () #f 58 12 58 18 ()}
        {Lisp-Entry "ordering" property () #f 59 12 59 20 ()}
        {Lisp-Entry "get-ordering" accessor #f #f 59 54 59 62 ()}
        {Lisp-Entry "set-ordering" accessor #f #f 59 54 59 62 ()}
        {Lisp-Entry "form" anonymous #f #f 62 3 62 7 ("Tree-Label-Column" "<Tree-Label-Column>" "title:" "name" "name:" "Tree-Node-Column" "<Tree-Node-Column>" "on-context-menu" ":form" "Event-Handler" "context-menu-handler:" ":images" "portfolio:" "row" "selection-mode:" "multiple-selection?:" "value" "filled-column:" "install" "<install>")}
        {Lisp-Entry "get-client" method (public) #f 73 18 73 28 ("client")}
        {Lisp-Entry "set-client" method (public) #f 77 18 77 28 ("inspect-client" "set!" "client" "neq?" "or" "when" "force?" "force?:" "clt")}
        {Lisp-Entry "get-filter" method (public) #f 88 18 88 28 ("filter")}
        {Lisp-Entry "set-filter" method (public) #f 92 18 92 28 ("filter-update" "filter" "set!" "flt")}
        {Lisp-Entry "filter-update" method (protected) #f 97 21 97 34 ("filter-rows" "filter" "when")}
        {Lisp-Entry "update-row" method (override) #f 107 20 107 30 ("inspector-max-content" "safe-inspect-serial" "inspect-content" "get-user-data" "get-user-data~" "kind" "mutable?" "more?" "presentation" "class" "serial" "name" "bind" "row")}
        {Lisp-Entry "inspect-client" method (protected) #f 117 21 117 35 ("inspector-max-content" "inspect" "inspect-content" "kind" "data" "bind" "when" "lambda" "with-update-locked" "remove-every-row" "client")}
        {Lisp-Entry "inspect-content" method () #f 126 11 126 26 ("filter-update" "0" "naturals" "expanded" "elements" "not" "length" "1" "=" "and" "caar" "partition" "natural" "car" "second" "->string" "key:" "string<?" "sort" "for-each" "alphabetic" "ordering" "case" "lambda" "with-update-locked" "user-data:" "Tree-Label" "Image-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "collapsed" "dynamic" "if" "state" "or" "title" "let" "backward-compatible-key" "rank" "name" "category" "kind" "mutable?" "more?" "presentation" "class" "serial" "key" "bind" "info" "father" "insert-info" "define" "values" "row")}
        {Lisp-Entry "focus-actions" method (override) #f 166 20 166 33 ("nextmethod" "inspector" "find-actions" "cons")}
        {Lisp-Entry "on-context-menu" method () #f 176 11 176 26 ("layout-menu" "layout-menu~" "cleanup-separators" "cleanup-separators~" "refresh" "locate" "locate~" "set-visible?" "set-visible?~" "Value-Menu" "track-popup-menu" "self" "client:" "Missing-Menu" "new" "menu" "not" "if" "backward-compatible-key" "rank" "name" "category" "kind" "mutable?" "more?" "presentation" "class" "serial" "key" "bind" "pair?" "get-single-selected-data" "info" "let" "when" "lambda" "with-context-click" "with-context-click~" "acquire" "acquired" "view->tree" "cell" "get-position" "get-position~" "pos" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "on-open" method () #f 199 11 199 18 ("cdr" "process" "get-application" "get-local-debugger" "get-local-debugger~" "inspect-info" "inspect-info~" "bell" "pair?" "not" "if" "get-single-selected-data" "info" "let" "evt")}
        {Lisp-Entry "on-refresh" method () #f 206 11 206 21 ("expand/collapse" "expanded" "eq?" "when" "dynamic" "set-state" "set-state~" "remove-every-son" "remove-every-son~" "collapse" "get-state" "get-state~" "actual-state" "bell" "get-user-data" "get-user-data~" "pair?" "not" "or" "if" "get-selected-row" "row" "let" "evt")}
        {Lisp-Entry "on-retrieve-all" method () #f 218 11 218 26 ("retrieve-all" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "retrieve-all" method (protected) #f 224 21 224 33 ("safe-inspect-serial" "get-user-data" "get-user-data~" "mutable?" "more?" "presentation" "class" "serial" "name" "remove-every-son" "remove-every-son~" "inspect" "inspect-content" "client" "kind" "data" "bind" "remove-every-row" "begin" "not" "root-row" "eq?" "if" "get-selected-row" "get-father" "get-father~" "father" "let" "determine-father" "define")}
        {Lisp-Entry "inspect" method (public virtual) #f 247 26 247 33 ("safe-inspect-serial" "if" "mutable?" "more?" "presentation" "class" "serial" "bind" ":remote" "inspect-value" ":value" "case" "max-content" "kind" "data")}
        {Lisp-Entry "safe-inspect-serial" method () #f 258 11 258 30 ("process" "inspect-serial" "inspect-serial~" "lambda" "with-jrm-exception-handler" "max-content" "serial")}}
      {Lisp-Entry "Missing-Menu" class () #f 268 7 268 19 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f #f 271 3 271 7 ("on-retrieve-all" ":client" ":form" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "title:" "retrieve-all" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}
      {Lisp-Entry "Value-Menu" class () #f 280 7 280 17 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f #f 283 3 283 7 ("on-refresh" "refresh" "Separator-Item" "<Separator-Item>" "on-open" ":client" ":form" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "title:" "open" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Inspector-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "inspector" "Inspector-Actions.jazz"} 245733924. jazz
    {Lisp-Entry "jazz.editor.jazz.inspector.Inspector-Actions" module (protected) #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Inspector-Actions" class (undocumented) #f 45 20 45 37 ("Actions")
        {Lisp-Entry "form" anonymous #f #f 48 3 48 7 ("on-forward" "forward" ":control" "Shortcut" "shortcut:" "on-backward" ":focus-guest" "Event-Handler" "action-handler:" "backward" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Inspector-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "inspector" "Inspector-Preferences.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.inspector.Inspector-Preferences" module (protected) #f 37 18 37 66 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Inspector-Preferences" class () #f 45 7 45 28 ("initialize" "Preferences")
        {Lisp-Entry "ordering" property () #f 48 12 48 20 ()}
        {Lisp-Entry "get-ordering" accessor #f #f 48 45 48 53 ()}
        {Lisp-Entry "set-ordering" accessor #f #f 48 45 48 53 ()}
        {Lisp-Entry "form" anonymous #f #f 51 3 51 7 ("title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 60 25 60 45 ("Inspector-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 69 11 69 17 ()
        {Lisp-Entry "import" anonymous #f #f 72 1 72 7 ("jazz.designer")}
        {Lisp-Entry "Inspector-Preferences-Descriptor" class () #f 75 7 75 39 ("Preferences-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 78 3 78 7 ("ordering" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Inspector-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "inspector" "Inspector-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.inspector.Inspector-View" module (protected) #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.editor.jazz")}
      {Lisp-Entry "Inspector-View" class () #f 49 7 49 21 ("self" "History-Manager" "new" "explicit" "initialize" "History-Provider" "Filterable" "Layout-View")
        {Lisp-Entry "process" property () #f 52 12 52 19 ()}
        {Lisp-Entry "client" property () #f 53 12 53 18 ()}
        {Lisp-Entry "history-manager" slot () #f 56 8 56 23 ()}
        {Lisp-Entry "form" anonymous #f #f 59 3 59 7 ("261" "value" "width:" "name" "double-click-handler:" "on-drill-down" "return-press-handler:" "row" "selection-mode:" "inspector" "Inspector" "<Inspector>" "header" "Tree-Header" "<Tree-Header>" "tool" "center" "scroller" "on-natural-order" "ordering" "Toggle-Tool" "<Toggle-Tool>" "8" "on-forward" "forward" "on-backward" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "tail" "backward" "Push-Tool" "<Push-Tool>" "on-filter-text-change" ":form" "Event-Handler" "content-change-handler:" "filter-text" "Filter-Text-View" "<Filter-Text-View>" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-insets:" "fill" "border-type:" "21" "170" "Border-View" "<Border-View>" "4" "Label" "Font" "font:" "20" "31" "title:" "-2" "head" "justification:" "filter-label" "Label-View" "<Label-View>" "2" "Separator" "<Separator>" "1" "0" "Rect" "layout-insets:" "flow" "north" "location:" "25" "300" "Dimension" "size:" "toolbar" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "install" "<install>")}
        {Lisp-Entry "install" method (override) #f 83 20 83 27 ("nextmethod" "update-ordering" "natural" "eq?" "locate" "set-selected?" "set-selected?~" "when" "inspector" "get-preferences" "get-ordering" "get-ordering~" "ordering" "let" "setup-ordering" "define" "rest")}
        {Lisp-Entry "host-title" method (meta override) #f 99 25 99 35 ()}
        {Lisp-Entry "host-size" method (meta override) #f 103 25 103 34 ("641" "446" "Dimension")}
        {Lisp-Entry "install-in-host" method (override) #f 107 20 107 35 ("update-title" "nextmethod" "host")}
        {Lisp-Entry "filter" method (override) #f 117 20 117 26 ("get-inspector" "set-filter" "set-filter~" "filter-search")}
        {Lisp-Entry "get-filter-text" method () #f 121 11 121 26 ("filter-text" "locate")}
        {Lisp-Entry "current-history-item" method (override) #f 130 20 130 40 ("get-client" "History-Inspector-Item" "new")}
        {Lisp-Entry "update-history-actions" method (override) #f 134 20 134 42 ()}
        {Lisp-Entry "add-to-history" method () #f 138 11 138 25 ("get-client" "History-Inspector-Item" "new" "history-manager" "add-history" "add-history~")}
        {Lisp-Entry "reset-history" method () #f 142 11 142 24 ("self" "History-Manager" "new" "history-manager" "set!")}
        {Lisp-Entry "get-inspector" method (public) #f 151 18 151 31 ("inspector" "locate")}
        {Lisp-Entry "get-process" method (public) #f 155 18 155 29 ("get-inspector" "get-process" "get-process~")}
        {Lisp-Entry "set-process" method (public) #f 159 18 159 29 ("get-inspector" "set-process" "set-process~" "process")}
        {Lisp-Entry "get-client" method (public) #f 163 18 163 28 ("get-inspector" "get-client" "get-client~")}
        {Lisp-Entry "set-client" method (public) #f 167 18 167 28 ("change-client" "reset-history" "client")}
        {Lisp-Entry "change-client" method (public) #f 172 18 172 31 ("update-history" "update-title" "get-inspector" "set-client" "set-client~" "force?" "force?:" "client")}
        {Lisp-Entry "on-backward" method () #f 183 11 183 22 ("get-client" "get-client~" "change-client" "when" "history-manager" "go-backward-history" "go-backward-history~" "item" "let" "evt")}
        {Lisp-Entry "on-forward" method () #f 189 11 189 21 ("get-client" "get-client~" "change-client" "when" "history-manager" "go-forward-history" "go-forward-history~" "item" "let" "evt")}
        {Lisp-Entry "on-filter-text-change" method () #f 195 11 195 32 ("get-filter-text" "filter-target" "filter-target~" "evt")}
        {Lisp-Entry "on-natural-order" method () #f 199 11 199 27 ("force?:" "get-client" "change-client" "update-ordering" "evt")}
        {Lisp-Entry "on-drill-down" method () #f 204 11 204 24 ("bell" "else" ":remote" "cons" "change-client" "add-to-history" "get-inspector" "retrieve-all" "retrieve-all~" "lambda" ":wait" "with-cursor" "not" "if" "second" "name" "value" "key" "bind" "pair?" "get-application" "edit-definitions" "edit-definitions~" "symbol?" "cond" "get-single-selected-data" "get-single-selected-data~" "info" "get-sender" "get-sender~" "tree" "let" "evt")}
        {Lisp-Entry "update-ordering" method () #f 227 11 227 26 ("alphabetic" "natural" "if" "get-inspector" "set-ordering" "set-ordering~" "ordering" "locate" "get-selected?" "get-selected?~" "natural?" "let")}
        {Lisp-Entry "update-title" method () #f 240 11 240 23 ("set-title" "set-title~" "title" "get-host" "host" "reference-name" ":string" "format" "mutable?" "more?" "presentation" "class" "serial" ":remote" "eq?" "if" "kind" "data" "bind" "when" "get-client" "client" "let" "get-presentation" "define")}
        {Lisp-Entry "update-history" method () #f 256 11 256 25 ("not-null?" "locate" "set-enabled?" "set-enabled?~" "get-forward-history" "get-forward-history~" "forward" "history-manager" "get-backward-history" "get-backward-history~" "backward" "let")}}
      {Lisp-Entry "History-Inspector-Item" class () #f 268 7 268 29 ("History-Item")
        {Lisp-Entry "client" slot () #f 271 8 271 14 ()}
        {Lisp-Entry "get-client" accessor #f #f 271 22 271 30 ()}
        {Lisp-Entry "initialize" method (override) #f 274 20 274 30 ("self" "client~self" "set!" "nextmethod" "client")}
        {Lisp-Entry "print" method (override) #f 279 20 279 25 ("client" "format" "lambda" "self" "print-unreadable" "readably" "output")}}}})
"Jazz-Code-Location"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "text" "Jazz-Code-Location.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.editor.jazz.text.Jazz-Code-Location" module (protected) #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system" "jazz.runtime" "jazz.editor.jazz" "jazz.catalog")}
      {Lisp-Entry "Jazz-Code-Location" class () #f 46 7 46 25 ("initialize" "Code-Location")
        {Lisp-Entry "unit-name" slot () #f 49 8 49 17 ()}
        {Lisp-Entry "sublocation" slot () #f 50 8 50 19 ()}
        {Lisp-Entry "initialize" method (override) #f 53 20 53 30 ("nextmethod" "last" "cons" "butlast" "sublocation" "unit-name" "set!" "begin" "find-unit-source" "compose-reference" "apply" "name" "location:" "unknown" "kind:" "Location-Error" "new" "signal" "null?" "if" "cdr" "sub" "car" "split-reference" "path" "iterate" "let" "setup-location" "define" "location")}
        {Lisp-Entry "print" method (override) #f 71 20 71 25 ("format" "sublocation" "unit-name" "and" "when" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "edit" method (override) #f 84 20 84 24 ("focus-host" "focus-host~" "set-visible?" "set-visible?~" "bring-to-front" "bring-to-front~" "head" "force-vertical:" "ensure-displayed" "ensure-displayed~" "ensure-displayed?:" "set-selection-safe" "set-selection-safe~" "range" "text" "frame" "receive" "when" "find-location" "location" "let" "error?" "error?:" "activate-focus?" "activate-focus?:" "workspace" "workspace:")}
        {Lisp-Entry "find-source" method (public) #f 97 18 97 29 ("unit-name" "find-unit-source")}
        {Lisp-Entry "find-location" method (public) #f 101 18 101 31 ("values" "cons" "toplevel-location:" "sublocation" "location-range" "location-range~" "range" "is?" "get-guest" "get-guest~" "text" "frame" "location:" "unknown" "kind:" "Location-Error" "new" "signal" "when" "visible?:" "Jazz-Text-View" "class:" "edit-document" "edit-document~" "or" "find-unit-source" "source" "get-application" "appl" "let" "unit-name" "find-unit" "define" "error?" "error?:" "workspace" "workspace:")}}}})
"Jazz-Explorer"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "text" "Jazz-Explorer.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.editor.jazz.text.Jazz-Explorer" module (protected) #f 37 18 37 53 ("jazz")
      {Lisp-Entry "require" anonymous #f #f 40 1 40 8 ("jazz.editor.scheme.forms")}
      {Lisp-Entry "require" anonymous #f #f 41 1 41 8 ("jazz.editor.jazz.forms")}
      {Lisp-Entry "import" anonymous #f #f 43 1 43 7 ("jazz.editor.scheme" "jazz.editor.lisp" "jazz.editor.jazz")}
      {Lisp-Entry "proclaim" anonymous #f #f 48 1 48 9 ("optimizations" "warn")}
      {Lisp-Entry "Jazz-Explorer" class () #f 51 7 51 20 ("Scheme-Explorer")
        {Lisp-Entry "expression-comment?" method (override) #f 54 20 54 39 ("nextmethod" "get-range" "get-range~" "char=?" "or" "get-start" "get-start~" "get-char" "range" "get-first-char" "define" "mark")}
        {Lisp-Entry "forward-location" method (public) #f 67 18 67 34 ("symbol?" ":form" ":new-form" "meta" "unless" "bad" "enter-composite" "1" "cdr" "forward" "eqv?" "char-forward" "c0" "forward-whites" "car" "ref" "not-null?" "scan" "else" "named-comment" "eq?" "cond" "kind" "decrease!" "0" ">=" "fx" "<fx>" "n" "forward-numeric" "declaration-name" "neq?" "declaration-expr?" "name" "forward-declaration" "location:" "unknown" "kind:" "Location-Error" "new" "signal" "forward-valid-expr" "when" "form" "form-expr" "not" "forward-form" "get-start" "forward-new-form" "set-end" "set-start" "implements" "extends" "metaclass" "interface" "class" "module" "unit" "memq?" "expression-syntax-namespace?" "or" "find-marked-symbol" "set!" "begin" "forward-expr" "and" "while" "get-end" "previous" "keyword" "let" "forward-category-keywords" "define" "toplevel-location" "toplevel-location:" "Object" "<Object>" "location")}
        {Lisp-Entry "namespace-declaration-range" method (public) #f 150 18 150 45 ("set-end" "set-start" "Range$Cell$" "new" "prog1" "forward-namespace" "end" "e" "start" "copy" "s" "let" "include-invoices?" "include-invoices?:")}
        {Lisp-Entry "forward-namespace" method (public) #f 159 18 159 35 ("forward-interface" "interface" "forward-class" "class" "forward-submodule" "submodule" "forward-module" "module" "forward-unit" "unit" "case" "intern-marked-symbol" "type" "let" "forward-expr" "enter-list" "start" "set-end" "include-invoices?" "include-invoices?:")}
        {Lisp-Entry "forward-unit" method () #f 172 11 172 23 ("forward-name" "expression-syntax-modifiers" "forward-modifiers" "unit" "list")}
        {Lisp-Entry "forward-module" method () #f 178 11 178 25 ("forward-invoices" "when" "forward-name" "expression-syntax-modifiers" "forward-modifiers" "module" "list" "include-invoices?")}
        {Lisp-Entry "forward-submodule" method () #f 187 11 187 28 ("forward-invoices" "when" "forward-name" "expression-syntax-modifiers" "forward-modifiers" "submodule" "list" "include-invoices?")}
        {Lisp-Entry "forward-class" method () #f 195 11 195 24 ("expression-syntax-keywords" "forward-keywords" "forward-name" "expression-syntax-modifiers" "forward-modifiers" "class" "list")}
        {Lisp-Entry "forward-interface" method () #f 202 11 202 28 ("expression-syntax-keywords" "forward-keywords" "forward-name" "expression-syntax-modifiers" "forward-modifiers" "interface" "list")}
        {Lisp-Entry "forward-name" method () #f 209 11 209 23 ("intern-marked-symbol" "forward-expr")}
        {Lisp-Entry "forward-keywords" method () #f 214 11 214 27 ("list" "append" "read-marked" "value" "begin" "memq?" "intern-marked-symbol" "expr" "symbol" "kind" "eq?" "if" "forward-expr" "set-end" "done" "define" "result" "end" "copy" "finish" "iterate" "let" "keywords")}
        {Lisp-Entry "forward-invoices" method () #f 233 11 233 27 ("forward-invoice" "while")}
        {Lisp-Entry "forward-invoice" method () #f 238 11 238 26 ("begin" "or" "invoices" "read-marked" "exit-list" "import" "export" "intern-marked-symbol" "memq?" "symbol" "kind" "eq?" "and" "forward-expr" "enter-list" "when" "forward" "set-end" "set-start" "reset" "define" "end" "e" "start" "copy" "s" "let")}
        {Lisp-Entry "filter-existing-import-invoices" method () #f 265 11 265 42 ("not" "find-import-invoice" "first?" "found?" "receive" "enter-import" "forward-namespace" "goto-beginning" "unit" "lambda" "collect-if" "units")}
        {Lisp-Entry "find-import" method () #f 275 11 275 22 ("backward-expr" "get-end" "set-start" "exit-list" "enter-import")}
        {Lisp-Entry "enter-import" method () #f 282 11 282 23 ("import" "intern-marked-symbol" "expr" "symbol" "enter-list" "set-end" "e" "get-start" "s" "list" "kind" "eq?" "if" "get-end" "copy" "pos" "forward-expr" "when" "iterate" "let")}
        {Lisp-Entry "find-import-invoice" method () #f 303 11 303 30 ("else" "string>?" "and" "values" "set-start" "exit-list" "string=?" "cond" "get-marked" "name" "enter-list" "start" "set-end" "begin" "forward-expr" "if" "get-end" "copy" "pos" "first?" "iterate" "symbol->string" "target" "let" "ordered-insert?" "unit")}
        {Lisp-Entry "insert-import-invoice" method (public) #f 327 18 327 39 ("else" "tabulate" "tabulate~" "insert-newline" "insert-newline~" "format" "insert-string" "insert-string~" "cond" "get-end" "set-caret" "set-caret~" "assert" "single-client" "single-client~" "text" "let" "lambda" "model" "get-undoer" "get-undoer~" "with-atomic-undo" "with-atomic-undo~" "unless" "find-import-invoice" "first?" "found?" "receive" "error" "enter-import" "not" "if" "forward-namespace" "unit")}
        {Lisp-Entry "remove-import-invoice" method (public) #f 348 18 348 39 ("one" "keep:" "get-start" "remove-spaces" "remove-spaces~" "get-range" "delete-range" "delete-range~" "assert" "single-client" "single-client~" "text" "let" "lambda" "model" "get-undoer" "get-undoer~" "with-atomic-undo" "with-atomic-undo~" "when" "find-import-invoice" "first?" "found?" "receive" "error" "enter-import" "not" "if" "forward-namespace" "unit")}
        {Lisp-Entry "find-named-walker" method (override) #f 368 20 368 37 ("nextmethod" "else" "walk-define-handler" ":define-handler" "walk-datacontainer" ":datacontainer" "walk-com-external" ":com-external" "walk-c-external" ":c-external" "walk-c-define" ":c-definition" "walk-c-structure" ":c-structure" "walk-c-type" ":c-type" "walk-c-include" ":c-include" "walk-c-named-declare" ":c-named-declare" "walk-c-enumeration" ":c-enumeration" "walk-c-constant" ":c-constant" "walk-enumeration" ":enumeration" "walk-constant" ":constant" "walk-global" ":global" "walk-form" ":form" "walk-property" ":property" "walk-slot" ":slot" "walk-method" ":method" "walk-submodule" ":submodule" "walk-remotable-stub" ":remotable-stub" "walk-interface" ":interface" "walk-class" ":class" "walk-specialize" ":specialize" "walk-definition" ":definition" "walk-native" ":native" "walk-attributes" ":attributes" "walk-properties" ":properties" "walk-proclaim" ":proclaim" "case" "name")}
        {Lisp-Entry "walk-proclaim" method () #f 401 11 401 24 ("walk-anonymous" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-properties" method () #f 405 11 405 26 ("walk-expressions" "end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-attributes" method () #f 410 11 410 26 ("exit-list" "walk-expressions" "else" "test" "initialize" "case" "lambda" "walk-keywords/properties" "setter" "string-append" "getter" "accessor" "find-marked-symbol" "symbol-documented?" "definition" "get-marked" "marked" "kind" "eq?" "enter-list" "when" "iterate" "let" "forward-expr" "code" "walk-expression" "end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-definition" method () #f 435 11 435 26 ("code" "walk-expressions" "exit-list" "walk-parameters" "enter-list" "else" "find-marked-symbol" "symbol-documented?" "get-marked" "definition" "set!" "kind" "eq?" "forward-expr" "and" "when" "not" "cond" "0" "char-forward" "eqv?" "list?" "forward-whites" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-specialize" method () #f 454 11 454 26 ("code" "walk-expressions" "exit-list" "walk-parameters" "enter-list" "else" "set!" "cond" "list?" "symbol-documented?" "get-marked" "specialize" "as" "find-marked-symbol" "kind" "eq?" "forward-expr" "and" "0" "char-forward" "eqv?" "not" "when" "forward-whites" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-class" method () #f 479 11 479 21 ("class" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-interface" method () #f 482 11 482 25 ("interface" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-remotable-stub" method () #f 485 11 485 30 ("remotable-stub" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-submodule" method () #f 488 11 488 25 ("submodule" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-method" method (public) #f 492 18 492 29 ("code" "walk-expressions" "exit-list" "walk-parameters" "forward-whites" "find-marked-symbol" "symbol-documented?" "get-marked" "method" "set!" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-keywords/properties" method () #f 506 11 506 35 ("code" "walk-expression" "if" "find-marked-symbol" "marked-symbol" "let" "symbol" "kind" "eq?" "and" "unless" "forward-expr" "while" "proc" "expression" "context")}
        {Lisp-Entry "walk-slot/property-accessors" method () #f 516 11 516 39 ("else" "get-marked" "string=?" "kind" "eq?" "forward-expr" "and" "when" "accessors" "initialize" "symbol" "lambda" "walk-keywords/properties" "find-marked-symbol" "symbol-documented?" "end" "start" "setter" "getter" "case" "string-append" "name" "let" "accessor" "declare-accessor" "define" "doc" "expression" "keyword" "declaration" "slot-name" "context")}
        {Lisp-Entry "walk-slot" method () #f 543 11 543 20 ("walk-expressions" "walk-slot/property-accessors" "find-marked-symbol" "symbol-documented?" "slot" "set!" "get-marked" "marked" "kind" "eq?" "forward-expr" "and" "when" "forward-whites" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-property" method () #f 556 11 556 24 ("walk-expressions" "walk-slot/property-accessors" "find-marked-symbol" "symbol-documented?" "property" "set!" "get-marked" "marked" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-form" method () #f 568 11 568 20 ("walk-anonymous" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-global" method () #f 572 11 572 22 ("find-marked-symbol" "symbol-documented?" "get-marked" "global" "set!" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-constant" method () #f 581 11 581 24 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "constant" "set!" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-enumeration" method () #f 591 11 591 27 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "enumeration" "set!" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-constant" method () #f 601 11 601 26 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "c-constant" "set!" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-enumeration" method () #f 611 11 611 29 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "c-enumeration" "set!" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-named-declare" method () #f 621 11 621 31 ("walk-expressions" "end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-include" method () #f 626 11 626 25 ("walk-expressions" "end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-type" method () #f 631 11 631 22 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "c-type" "set!" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-structure" method () #f 641 11 641 27 ("walk-expressions" "exit-list" "find-marked-symbol" "symbol-documented?" "get-marked" "c-structure" "set!" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-external" method () #f 657 11 657 26 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "external" "set!" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "entered?" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-com-external" method () #f 672 11 672 28 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "com-external" "set!" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "entered?" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-datacontainer" method () #f 687 11 687 29 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "datacontainer" "set!" "forward-expr" "when" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-define-handler" method () #f 696 11 696 30 ("code" "walk-expressions" "exit-list" "walk-parameters" "enter-list" "else" "find-marked-symbol" "symbol-documented?" "get-marked" "definition" "set!" "kind" "eq?" "forward-expr" "and" "when" "not" "cond" "0" "char-forward" "eqv?" "list?" "forward-whites" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}}}})
"Jazz-File"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "builder" "Jazz-File.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.editor.jazz.builder.Jazz-File" module (protected) #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.project" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Jazz-File" class () #f 45 7 45 16 ("initialize" "Project-File")
        {Lisp-Entry "tester?" property () #f 48 12 48 19 ()}
        {Lisp-Entry "get-tester?" accessor #f #f 48 44 48 52 ()}
        {Lisp-Entry "set-tester?" accessor #f #f 48 44 48 52 ()}
        {Lisp-Entry "print" method (override) #f 51 20 51 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-product" method (public) #f 65 18 65 29 ("project" "Product" "self" "is?" "if")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 78 25 78 45 ("Jazz-File-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 87 11 87 17 ()
        {Lisp-Entry "import" anonymous #f #f 90 1 90 7 ("jazz.designer")}
        {Lisp-Entry "Jazz-File-Descriptor" class () #f 93 7 93 27 ("Project-File-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 96 3 96 7 ("domain" "Boolean-Domain" "<Boolean-Domain>" "name:" "Property-Descriptor" "<Property-Descriptor>" "tester?" "build?" "source" "categorized:" ">" "<properties" "<properties~>" "can-rename?:" "title:" "install" "<install>")}}}}})
"Jazz-Parser"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "parser" "Jazz-Parser.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.parser.Jazz-Parser" module (protected) #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.editor.lisp" "jazz.editor.jazz")}
      {Lisp-Entry "Jazz-Parser" class () #f 44 7 44 18 ("Lisp-Parser")
        {Lisp-Entry "iterate-references" method (meta override) #f 52 25 52 43 ("nextmethod" "string-ref" "eqv?" "empty-string?" "or" "unless" "ref" "string-length" "1" "+" "substring" "0" "call-proc" "when" "string-find-reversed" "pos" "let" "parse-tilde" "define" "procedure" "<procedure>" "proc" "string" "<string>" "name")}
        {Lisp-Entry "get-constituent-test" method (meta override) #f 74 25 74 45 ("jazz-constituent?")}
        {Lisp-Entry "text-view-class" method (override) #f 83 20 83 35 ("Jazz-Text-View")}
        {Lisp-Entry "explorer-class" method (override) #f 87 20 87 34 ("Jazz-Explorer" "file")}}}})
"Jazz-Plain-Syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "text" "Jazz-Plain-Syntax.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.text.Jazz-Plain-Syntax" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.editor.jazz")}
      {Lisp-Entry "Jazz-Plain-Syntax" class () #f 44 7 44 24 ("Text-Syntax")
        {Lisp-Entry "Comment" definition () #f 52 14 52 21 ("1" "make-string")}
        {Lisp-Entry "Title-Comment" definition () #f 56 14 56 27 ("4" "make-string" "string-append")}
        {Lisp-Entry "comment-string" method (override) #f 60 20 60 34 ("Comment")}
        {Lisp-Entry "title-comment-string" method (override) #f 64 20 64 40 ("Title-Comment")}
        {Lisp-Entry "colorize-syntax" method (override) #f 73 20 73 35 ("colorize-comments" "nextmethod" "finish-current" "finish-current~" "when" "new-colorizer" "new-colorizer~" "not" "and" "colorizer" "end:" "text-beginning" "text-beginning~" "start:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "let" "proc" "colorize" "define" "recoloring?" "recoloring?:")}
        {Lisp-Entry "colorize-comments" method (override) #f 85 20 85 37 ("Title" "4" "+" "Comment" "stylize" "stylize~" "not" "if" "title?" "end" "Cell" "<Cell>" "start" "lambda" "for-each-comment" "for-each-comment~" "text-beginning" "text-beginning~" "end:" "model" "Jazz-Explorer" "new" "expl" "let" "jazz" "type-heuristic" "eq?" "when" "rest")}
        {Lisp-Entry "recolorize-text" method (override) #f 96 20 96 35 ("for-each" "1" "get-line" "get-line~" "naturals" "range" "jazz" "type-heuristic" "eq?" "Title" "Cell" "new" "Comment" "stylize" "stylize~" "begin" "subseq" "nu=?" "<" "if" "+" "title-end" "let" "20" "<=" "and" "when" "search" "comment" "comment-string" "comment-str" "string-length" "title-comment-size" "title-comment-string" "title-comment-str" "cardinality" "len" "model" "paragraph-string" "paragraph-string~" "str" "let*" "recolorize-comments" "line" "recolorize-row" "define" "end-line" "start")}
        {Lisp-Entry "type-heuristic" method () #f 120 11 120 25 ("c" "jazz" "starts-with?" "if" "0" "model" "paragraph-string" "paragraph-string~" "first-line" "let")}}}})
"Jazz-Plain-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "text" "Jazz-Plain-Text-View.jazz"} 231466230. jazz
    {Lisp-Entry "jazz.editor.jazz.text.Jazz-Plain-Text-View" module (protected) #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.editor.jazz")}
      {Lisp-Entry "Jazz-Plain-Text-View" class () #f 44 7 44 27 ("Plain-Text-View")
        {Lisp-Entry "new-syntax" method (override) #f 47 20 47 30 ("model" "Jazz-Plain-Syntax" "new")}
        {Lisp-Entry "install" method (override) #f 51 20 51 27 ("get-comment-style" "get-comment-style~" "Comment" "get-title-style" "get-title-style~" "Title" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}}}})
"Jazz-Syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "syntax" "Jazz-Syntax.jazz"} 231466230. jazz
    {Lisp-Entry "jazz.editor.jazz.syntax.Jazz-Syntax" module (protected) #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.clipboard" "jazz.ui" "jazz.system" "jazz.runtime" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.editor.lisp" "jazz.editor.jazz")}
      {Lisp-Entry "Jazz-Syntax" class () #f 52 7 52 18 ("Lisp-Syntax")
        {Lisp-Entry "preferences" method (override) #f 60 20 60 31 ("jazz-text" "documents" "get-preferences")}
        {Lisp-Entry "default-extension" method (override) #f 69 20 69 37 ()}
        {Lisp-Entry "extensions" method (override) #f 73 20 73 30 ()}
        {Lisp-Entry "parser-class" method (override) #f 82 20 82 32 ("Jazz-Parser")}
        {Lisp-Entry "translate-key" method (override) #f 91 20 91 33 ("translate-lisp-key" "jazz-text" "documents" "get-preferences" "get-translate-keys?" "get-translate-keys?~" "not" "if" "key")}
        {Lisp-Entry "get-constituent-test" method (override) #f 102 20 102 40 ("jazz-constituent?")}
        {Lisp-Entry "explorer-class" method (override) #f 111 20 111 34 ("Jazz-Explorer")}
        {Lisp-Entry "get-readtable" method (override) #f 120 20 120 33 ("jazz-readtable")}
        {Lisp-Entry "declaration-style" method (override) #f 129 20 129 37 ("Undocumented-Declaration" "Documented-Declaration" "if" "documented?")}
        {Lisp-Entry "colorize-tag" method (override) #f 135 20 135 32 ("Tag" "apply-coloring" "end" "start" "colorizer")}
        {Lisp-Entry "colorize-specifier" method (override) #f 139 20 139 38 ("Specifier" "apply-coloring" "end" "start" "colorizer")}
        {Lisp-Entry "recolorize-named-comments" method () #f 143 11 143 36 ("get-start" "get-start~" "Named-Comment" "apply-style" "apply-style~" "get-line" "get-line~" "=" "symbol" "eq?" "when" "get-end" "get-end~" "end" "forward-expr" "forward-expr~" "kind" "end:" "explorer-class" "Text-Explorer" "<Text-Explorer>" "expl" "+" "Cell" "new" "pos" "1" "-" "element" "eqv?" ">" "and" "unless" "set!" "if" "start:" "search" "comment" "let" "not" "while" "done?" "0" "col" "cardinality" "len" "model" "paragraph-string" "paragraph-string~" "str" "let*" "line")}
        {Lisp-Entry "find-imports" method (override) #f 167 20 167 32 ("throw-cancel" "cancel" "insert-import-invoice" "insert-import-invoice~" "set-end" "set-end~" "text-beginning" "text-beginning~" "set-start" "set-start~" "jazz" "model" "explorer-class" "expl" "no" "map" "join" "set-clipboard-text" "null?" "unless" "yes" "case" "cons" "set!" "public-access" "lookup-declaration" "public" "get-access" "get-access~" "eq?" "Module-Declaration" "is?" "and" "when" "outline-unit" "declaration" "iterate-units" "user-feedback" "unit-name" "outline-feedback" "parameterize" "default" "0" "=" "if" "sound:" "content:" "no:" "yes:" "confirmation" "type:" "format-plural" "format-cardinality" "format" "message-box" "Image-Resource" "image:" "title:" "Tree-Node" "list" "children:" "add-row" "add-row~" "symbol->string" "title" "let" "import" "lambda" "for-each" "length" "count" "locate" "locate~" "tree" "150" "450" "Dimension" "size:" "Imports-Border" "new" "border" "let*" "imports" "present-imports" "define" "symbol")}}
      {Lisp-Entry "Imports-Border" class () #f 216 7 216 21 ("Border-View")
        {Lisp-Entry "form" anonymous #f #f 219 3 219 7 ("display-images?:" "toplevel-controls?:" "300" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" "row" "selection-mode:" ":images" "portfolio:" "tree" "Tree-View" "<Tree-View>" "Tree-Header" "<Tree-Header>" "fill" "layout-type:" "content" "name:" "!" "<!>" "vscroll?:" "hscroll?:" "tool" "style:" "Scroller-View" "<Scroller-View>" "Outline-Border" "Color" "border-color:" "solid" "border-type:" "install" "<install>")}}}})
"Jazz-Text-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "text" "Jazz-Text-Actions.jazz"} 247108738. jazz
    {Lisp-Entry "jazz.editor.jazz.text.Jazz-Text-Actions" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Jazz-Text-Actions" class () #f 45 7 45 24 ("Actions")
        {Lisp-Entry "form" anonymous #f #f 48 3 48 7 ("on-set-read/write" "set-read/write" "on-remove-break" "remove-break" "F9" "on-add-break" "add-break" "F12" ":shift" "on-edit-documentation" "edit-documentation" "F1" "on-present-documentation" "present-documentation" ":alt" "on-reprint-current-form" "reprint-current-form" ":control" "Shortcut" "shortcut:" "on-design-form" ":focus" "Event-Handler" "action-handler:" "design-form" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Jazz-Text-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "text" "Jazz-Text-Preferences.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.text.Jazz-Text-Preferences" module (protected) #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.editor.lisp" "jazz.designer")}
      {Lisp-Entry "Jazz-Text-Preferences" class () #f 46 7 46 28 ("initialize" "Lisp-Text-Preferences")
        {Lisp-Entry "documented-declaration-style" property () #f 49 12 49 40 ()}
        {Lisp-Entry "get-documented-declaration-style" accessor #f #f 49 67 49 75 ()}
        {Lisp-Entry "set-documented-declaration-style" accessor #f #f 49 67 49 75 ()}
        {Lisp-Entry "undocumented-declaration-style" property () #f 50 12 50 42 ()}
        {Lisp-Entry "get-undocumented-declaration-style" accessor #f #f 50 67 50 75 ()}
        {Lisp-Entry "set-undocumented-declaration-style" accessor #f #f 50 67 50 75 ()}
        {Lisp-Entry "literal-style" property () #f 51 12 51 25 ()}
        {Lisp-Entry "get-literal-style" accessor #f #f 51 67 51 75 ()}
        {Lisp-Entry "set-literal-style" accessor #f #f 51 67 51 75 ()}
        {Lisp-Entry "form" anonymous #f #f 54 3 54 7 ("completions:" "Text-Literal" "literal-style:" "Text-Undocumented-Declaration" "undocumented-declaration-style:" "Text-Documented-Declaration" "Base" "Text-Style" "documented-declaration-style:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 221 25 221 45 ("Jazz-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 230 11 230 17 ()
        {Lisp-Entry "import" anonymous #f #f 233 1 233 7 ("jazz.designer")}
        {Lisp-Entry "Jazz-Text-Preferences-Descriptor" class () #f 236 7 236 39 ("Document-Preferences-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 239 3 239 7 ("literal-style" "name:" "Property-Descriptor" "<Property-Descriptor>" "match-action" "translate-keys?" "string-style" "specifier-style" "keyword-style" "undocumented-declaration-style" "documented-declaration-style" "named-comment-style" "expr-comment-style" "comment-style" "title-style" "completions" "categorized:" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Jazz-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "text" "Jazz-Text-View.jazz"} 247108738. jazz
    {Lisp-Entry "jazz.editor.jazz.text.Jazz-Text-View" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.editor.lisp" "jazz.editor.jazz" "jazz.doc" "jazz.designer")}
      {Lisp-Entry "Jazz-Text-View" class () #f 53 7 53 21 ("Lisp-Text-View")
        {Lisp-Entry "form" anonymous #f #f 56 3 56 7 ("tooltip?:" "install" "<install>")}
        {Lisp-Entry "install" method (override) #f 60 20 60 27 ("get-literal-style" "get-literal-style~" "Literal" "get-undocumented-declaration-style" "get-undocumented-declaration-style~" "Undocumented-Declaration" "get-documented-declaration-style" "get-documented-declaration-style~" "Documented-Declaration" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" method (meta override) #f 68 25 68 38 ("jazz-text" "rest")}
        {Lisp-Entry "preferences" method (override) #f 72 20 72 31 ("jazz-text" "documents" "get-preferences")}
        {Lisp-Entry "new-syntax" method (override) #f 76 20 76 30 ("model" "Jazz-Syntax" "new")}
        {Lisp-Entry "focus-actions" method (override) #f 85 20 85 33 ("nextmethod" "jazz-text" "find-actions" "cons")}
        {Lisp-Entry "get-context-menu" method (override) #f 95 20 95 36 ("layout-menu" "layout-menu~" "set-read/write" "locate" "locate~" "set-visible?" "set-visible?~" "read/write?" "read/write?~" "not" "or" "when" "get-moniker" "get-moniker~" "moniker" "get-document-controller" "controller" "Jazz-Text-Menu" "new" "menu" "let*")}
        {Lisp-Entry "on-design-form" method () #f 111 11 111 25 ("client:" "new-frame" "Manager-View" "View-Editor" "View" "editor-class" "new" "component" "focus-host" "focus-host~" "get-class-form" "get-class-form~" "error" "Component" "subtype?" "not" "if" "autoload" "class" "current-category-name" "name" "let*" "on-design-form" "unimplemented" "include-invisibles?:" "all-frames" "continuation-return" "get-form" "get-form~" "eq?" "and" "get-designer" "get-designer~" "designer" "Component-Editor" "get-guest" "get-guest~" "guest" "let" "Host-View" "is?" "when" "frame" "for-each" "return" "lambda" "continuation-capture" "form" "find-editor" "define" "evt")}
        {Lisp-Entry "on-copy-list" method () #f 140 11 140 23 ("length" "user-message" "push-clipboard-list" "push-clipboard-list~" "get-selected-string" "read-string-content" ":reader" "->string" "object" "lambda" "map" "list" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "get-tooltip-context" method (override) #f 152 20 152 39 ("Label" "Font" "font:" "bounds:" "rect-height" "-10" "Point" "rect-position" "+" "position:" "text:" "self" "view:" "Tooltip-Context" "in-rect?" "get-end" "get-end~" "get-col" "get-col~" "get-start" "get-start~" "get-line" "get-line~" "line-range-rect" "bounds" "present-location" "and" "text" "range-location" "location" "get-range" "get-range~" "range" "symbol" "eq?" "get-kind" "get-kind~" "kind" "let" "explore-whitespace?:" "atomic?:" "outer-expr" "outer-expr~" "when" "err" "Explore-Error" "catch" "end:" "start:" "model" "Jazz-Explorer" "new" "expl" "view->text" "pos" "let*" "view")}
        {Lisp-Entry "prepare-expressions" method (override) #f 180 20 180 39 ("jazz" "list" "receive" "get-locat-container" "container" "get-output-string" "values" "length" "string" "split" "cardinality" "newline" "begin" "not" "cdr" "null?" "last?" "str" "pair" "for-each-pair" "get-string" "lambda" "for-each" "0" "1" "+" "-" "make-string" "display" "=" "iterate" ">=" "c" "l" "rng" "fill" "open-output-string" "output" "col" "line" "get-col" "get-col~" "first-col" "get-start" "get-start~" "get-line" "get-line~" "first-line" "car" "not-null?" "if" "first" "expressions" "package-expressions" "cons" "set!" "include-invoices?:" "namespace-declaration-range" "namespace-declaration-range~" "namespace" "namespace-expr?" "namespace-expr?~" "when" "outer-expr" "outer-expr~" "while" "range:" "model" "Jazz-Explorer" "new" "expl" "namespaces" "let" "collect-namespaces" "define" "range")}
        {Lisp-Entry "on-add-break" method (package) #f 243 19 243 31 ("1" "+" "get-start" "get-start~" "Break" "apply-style" "add-break" "add-break~" "error" "not" "if" "Interpreter" "resolve-location" "resolve-location~" "object" "toplevel-closure" "in-context?" "resolved?" "receive" "range-location" "loc" "current-expr-range" "range" "let*" "evt")}
        {Lisp-Entry "on-remove-break" method (package) #f 254 19 254 34 ("get-line" "get-line~" "get-paragraph" "invalidate-paragraph" "default-style" "set-style" "set-style~" "when" "1" "get-start" "get-start~" "+" "get-run-at" "run" "let" "remove-break" "remove-break~" "bell" "not" "if" "Interpreter" "resolve-location" "resolve-location~" "object" "toplevel-closure" "in-context?" "resolved?" "receive" "range-location" "loc" "current-expr-range" "range" "let*" "evt")}
        {Lisp-Entry "present-location" definition () #f 274 15 274 31 ("location")}
        {Lisp-Entry "current-location" method () #f 283 11 283 27 ("get-start" "position->location")}
        {Lisp-Entry "position->location" method () #f 287 11 287 29 ("range-location" "get-range" "get-range~" "range" "outer-composite?:" "outer-expr" "outer-expr~" "when" "end:" "start:" "model" "Jazz-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "location-class" method () #f 294 11 294 25 ("cdr" "class-of" "category-field" "definition-value" "set!" "meta" "eq?" "name" "lambda" "for-each" "meta?" "let" "error" "not" "if" "global-ref" "global-ref~" "class" "car" "class-name" "let*" "load?" "load?:" "loc")}
        {Lisp-Entry "declaration-name-info" method () #f 310 11 310 32 ("else" "2" "external?" "procedure?" "definition-value" "value" "let" "field?" "field-modifiers-count" "+" "slot?" "1" "values" "category?" "cond" "declaration-name-info" "unimplemented" "object")}
        {Lisp-Entry "declaration-name-location?" method () #f 326 11 326 37 ("0" "and" "list" "=" "or" "inside-allowed?" "skip" "receive" "when" "declaration-name-info" "info" "let" "internal-location" "object")}
        {Lisp-Entry "range-location" method () #f 334 11 334 25 ("meta" "memq?" "cons" "loc" "declaration-modifiers/name" "declaration-modifiers/name~" "name" "modifiers" "receive" "declaration-expr?" "declaration-expr?~" "def?" "set!" "if" "outer-expr" "outer-expr~" "rank" "not" "while" "done?" "previous-def?" "location" "get-end" "get-end~" "end:" "get-start" "get-start~" "start:" "model" "Jazz-Explorer" "new" "expl" "let" "range")}
        {Lisp-Entry "location-range" method (public) #f 355 18 355 32 ("get-range" "get-range~" "forward-location" "forward-location~" "text-beginning" "end:" "model" "Jazz-Explorer" "new" "expl" "let" "toplevel-location" "toplevel-location:" "location")}
        {Lisp-Entry "on-edit-documentation" method () #f 366 11 366 32 ("edit-documentation" "edit-documentation~" "get-application" "appl" "bell" "not" "if" "current-symbol" "symbol" "let" "evt")}
        {Lisp-Entry "on-present-documentation" method () #f 374 11 374 35 ("current-symbol" "present-documentation" "evt")}
        {Lisp-Entry "present-documentation" method () #f 378 11 378 32 ("border:" "alternate-position:" "popup" "popup~" "DocToText-Transformation" "parse-jml" "transform-jml" "set-text" "set-text~" "get-display" "display" "solid" "border-type:" "Border-View" "border" "alternate" "100" "Point" "pos" "locate" "locate~" "text" "300" "600" "Dimension" "size:" "Documentation-View" "new" "view" "let*" "bell" "not" "if" "jml" "present-text" "present-text~" "get-application" "get-documentation" "get-documentation~" "doc" "let" "when" "doc-jml" "define" "symbol")}
        {Lisp-Entry "show-arguments" method (override) #f 408 20 408 34 ("0" "char-backward" "char-backward~" "case" "get-kind" "get-kind~" "=" "backward-expr" "backward-expr~" "and" "get-end" "end:" "get-start" "start:" "model" "Jazz-Explorer" "new" "empty-selection?" "cdr" "car" "pair?" "cond" "else" "variable-symbol" "variable-symbol~" "format" "Variable" "parameter" "present-parameter" "get-output-string" "present-parameters" "rest" "open-output-string" "output" "function-parameters" "function-parameters~" "parameters" "let*" "function" "proxy-result" "proxy-result~" "proxy-rest?" "proxy-rest?~" "if" "List" "get-type" "get-type~" "proxy-parameters" "proxy-parameters~" "accumulate" "category-identifier" "map" "user-message" "external" "Interpreter" "closure-function" "closure-function~" "Closure" "show-function-arguments" "%function" "show-external-arguments" "External" "typecase" "definition-value" "value" "find-in" "field" "unimplemented" "packages" "class" "show-symbol-arguments" "uses" "getf" "imports" "find-symbol" "symbol" "keywords" "meta?" "kind" "category" "bind" "category-info" "in" "receive" "when" "current-toplevel-info" "info" "get-marked" "get-marked~" "name" "let" "expl" "show-declaration-arguments" "define")}
        {Lisp-Entry "current-category-name" method () #f 483 11 483 32 ("keywords" "name" "meta?" "kind" "category" "bind" "current-toplevel-info" "category-info" "in" "receive")}
        {Lisp-Entry "toplevel-expr" method () #f 490 11 490 24 ("get-range" "get-range~" "set!" "outer-expr" "outer-expr~" "while" "range" "end:" "start:" "model" "Jazz-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "edit-symbol-class" method (override) #f 503 20 503 37 ("get-application" "edit-class" "edit-class~" "in-manifest?" "when" "symbol")}
        {Lisp-Entry "on-reprint-current-form" method (public) #f 515 18 515 41 ("reprint-current-form" "evt")}
        {Lisp-Entry "reprint-current-form" method (public) #f 519 18 519 38 ("insert-string" "set-selection" "with-update-locked" "user-message" "string=?" "2" "saved-form" "saved-form~" "output" "form:" "Designer" "new" "designer" "bell" "Form" "is-not?" "if" "read-string-element" "lambda" "with-jazz-readtable" "second" "jml->form" "form" "get-string" "str" "get-end" "declaration-range" "range" "let*" "align-name?" "align-name?:" "space-properties?" "space-properties?:")}}
      {Lisp-Entry "Documentation-View" class () #f 541 7 541 25 ("Layout-View")
        {Lisp-Entry "form" anonymous #f #f 544 3 544 7 ("editable?:" "Tooltip" "Color" "background:" "text" "Documentation-Text-View" "<Documentation-Text-View>" "content" "name:" "!" "<!>" "tool" "style:" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "fill" "layout-type:" "install" "<install>")}}
      {Lisp-Entry "Jazz-Text-Menu" class () #f 556 7 556 21 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f #f 559 3 559 7 ("Format-Menu" "<Format-Menu>" "Column-Menu" "<Column-Menu>" "paste" "copy" "view" "french:" "english:" "Locales" "cut" "set-read/write" "remove-break" "add-break" "edit-documentation" "edit-references" "edit-definitions" "jazz-text" "design-form" "Separator-Item" "<Separator-Item>" "code-text" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "evaluate" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Location-Error"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "text" "Location-Error.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.text.Location-Error" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Location-Error" class () #f 40 7 40 21 ("Error")
        {Lisp-Entry "kind" slot () #f 43 8 43 12 ()}
        {Lisp-Entry "get-kind" accessor #f #f 43 24 43 32 ()}
        {Lisp-Entry "location" slot () #f 44 8 44 16 ()}
        {Lisp-Entry "get-location" accessor #f #f 44 24 44 32 ()}
        {Lisp-Entry "initialize" method (override) #f 47 20 47 30 ("location~self" "self" "kind~self" "set!" "nextmethod" "apply" "others" "location" "bad" "kind" "bind-keywords" "rest")}
        {Lisp-Entry "get-message" method (override) #f 59 20 59 31 ("unknown" "location" "format" "bad" "kind" "case")}}}})
"Logs-Viewer"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "log" "Logs-Viewer.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.log.Logs-Viewer" module (protected) #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.dialog" "jazz.ui" "jazz.log" "jazz.locale" "jazz.library" "jazz.jml" "jazz.io" "jazz.graphic" "jazz.geometry" "jazz.debuggee")}
      {Lisp-Entry "Logs-Viewer" class () #f 52 7 52 18 ("initialize" "Layout-View")
        {Lisp-Entry "logs-directory" slot () #f 55 8 55 22 ()}
        {Lisp-Entry "data-viewer" slot () #f 56 8 56 19 ()}
        {Lisp-Entry "form" anonymous #f #f 59 3 59 7 ("No-Data-Viewer" "<No-Data-Viewer>" "data-container" "log-tree" "header" "scroller" "log-view" "Log-View" "<Log-View>" "second" "log-border" "200" "width:" "toplevel-controls?:" "Tree-Node-Column" "<Tree-Node-Column>" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "log" "filled-column:" "logs-tree" "Tree-View" "<Tree-View>" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "vscroll?:" "document" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "logs-border" "Border-View" "<Border-View>" "20" "horz" "first" "horizontal" "50" "division:" "relative" "mode:" "vert" "orientation:" "center" "vertical" "Splitter-View" "<Splitter-View>" "on-refresh" "refresh" "on-clear" "clear" "10" "on-open" "tail" "open" "on-refresh-logs" "refresh-logs" "on-directory-logs" "directory-logs" "Separator" "<Separator>" "on-memory-logs" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "memory-logs" "Push-Tool" "<Push-Tool>" "0" "6" "flow" "north" "location:" "33" "300" "Dimension" "size:" "tools" "name:" "Layout-View" "<Layout-View>" "2" "Rect" "layout-insets:" "border" "layout-type:" "title:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) #f 92 20 92 26 ("refresh-logs" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" method (meta override) #f 102 25 102 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 106 25 106 35 ()}
        {Lisp-Entry "host-position" method (meta override) #f 110 25 110 38 ("50" "Point")}
        {Lisp-Entry "host-size" method (meta override) #f 114 25 114 34 ("500" "850" "Dimension")}
        {Lisp-Entry "client-activate" method (override) #f 118 20 118 35 ("perserving-refresh-logs")}
        {Lisp-Entry "get-tree" method () #f 127 11 127 19 ("logs-tree" "locate")}
        {Lisp-Entry "Logs-Directory" definition () #f 136 14 136 28 ("Build" "Directory")}
        {Lisp-Entry "with-directory" definition () #f 140 15 140 29 ("lambda" "with-preserved-current-directory" "Logs-Directory" "exists?" "exists?~" "and" "if" "proc" "default?")}
        {Lisp-Entry "on-memory-logs" method () #f 148 11 148 25 ("refresh-logs" "logs-directory" "set!" "evt")}
        {Lisp-Entry "on-directory-logs" method () #f 153 11 153 28 ("refresh-logs" "logs-directory" "set!" "directory:" "choose-directory" "directory" "let" "dir" "lambda" "get-shift?" "get-shift?~" "with-directory" "evt")}
        {Lisp-Entry "on-refresh-logs" method () #f 161 11 161 26 ("refresh-logs" "evt")}
        {Lisp-Entry "perserving-refresh-logs" method () #f 165 11 165 34 ("generate-event?:" "data" "use:" "refresh-logs" "lambda" "with-preserved-selection" "with-preserved-selection~" "get-tree" "tree" "let")}
        {Lisp-Entry "refresh-logs" method (public) #f 174 18 174 30 ("view-logs" "log-view" "locate" "view-log" "view-log~" "close-data-viewer")}
        {Lisp-Entry "on-open" method () #f 180 11 180 18 ("view-log" "view-log~" "set-selection" "set-selection~" "locate" "log-view" "load?:" "file:" "Log" "new" "log" "directory:" "extensions:" "choose-file" "file" "get-tree" "tree" "let*" "dir" "lambda" "get-shift?" "get-shift?~" "with-directory" "evt")}
        {Lisp-Entry "on-clear" method () #f 191 11 191 19 ("on-refresh" "evt")}
        {Lisp-Entry "on-refresh" method (package) #f 195 19 195 29 ("update" "update~" "locate" "log-view" "let" "evt")}
        {Lisp-Entry "on-selection-change" method () #f 200 11 200 30 ("view-data" "node" "log-tree" "view-log" "view-log~" "reload" "reload~" "get-file" "get-file~" "when" "close-data-viewer" "get-row" "get-row~" "get-user-data" "get-user-data~" "and" "log" "locate" "log-view" "get-single-selection" "get-single-selection~" "selection" "logs-tree" "get-name" "get-name~" "case" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "on-double-click" method () #f 218 11 218 26 ("edit-data" "get-row" "get-row~" "get-user-data" "get-user-data~" "node" "when" "get-single-selection" "get-single-selection~" "selection" "log-tree" "get-name" "get-name~" "case" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" method (override) #f 228 20 228 35 ("on-double-click" "evt")}
        {Lisp-Entry "view-logs" method () #f 237 11 237 20 ("extension=?" "when" "get-extension" "get-extension~" "extension" "iterate-directory" "iterate-directory~" "get-logs" "for-each" "logs-directory" "not" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "get-tree" "file:" "Log" "get-base" "get-base~" "file" "insert-file" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "Image-Resource" "get-file" "get-file~" "if" "image" "get-name" "get-name~" "->string" "name" "let" "log" "tree" "insert-log" "define")}
        {Lisp-Entry "view-data" method (protected virtual) #f 267 29 267 38 ("layout-view" "layout-view~" "parent:" "client:" "new" "data-viewer" "set!" "data-container" "locate" "container" "class" "get-property" "get-property~" "let*" "JML-Node" "when" "close-data-viewer" "No-Data-Viewer" "get-viewer-class" "get-viewer-class~" "or" "Viewable" "is?" "and" "if" "data" "data-viewer-class" "define" "node")}
        {Lisp-Entry "close-data-viewer" method () #f 285 11 285 28 ("set!" "close" "close~" "data-viewer" "when")}
        {Lisp-Entry "edit-data" method (protected virtual) #f 296 29 296 38 ("node")}}
      {Lisp-Entry "No-Data-Viewer" class () #f 305 7 305 21 ("Border-View")
        {Lisp-Entry "client" property () #f 308 12 308 18 ()}
        {Lisp-Entry "get-client" accessor #f #f 308 29 308 37 ()}
        {Lisp-Entry "set-client" accessor #f #f 308 29 308 37 ()}
        {Lisp-Entry "form" anonymous #f #f 311 3 311 7 ("entry" "style:" "edge" "border-type:" "install" "<install>")}
        {Lisp-Entry "draw" method (override) #f 315 20 315 24 ("nextmethod" "get-v" "get-v~" "get-h" "get-h~" "draw-text" "draw-text~" "Medium-Gray" "Color" "set-text-color" "set-text-color~" "get-display-size" "center" "pos" "get-text-extent" "get-text-extent~" "extent" "localize" "title" "let*" "set-font" "set-font~" "draw-no-data" "Heading2" "Font" "Background-Font" "define" "context" "surface")}}}})
"Profile-Results"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "profiler" "Profile-Results.jazz"} 246932864. jazz
    {Lisp-Entry "jazz.editor.jazz.profiler.Profile-Results" module (protected) #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.debugger")}
      {Lisp-Entry "Profile-Results" class () #f 49 7 49 22 ("Layout-View")
        {Lisp-Entry "form" anonymous #f #f 52 3 52 7 ("on-return-press" "return-press-handler:" "on-select-location" "Selection-Handler" "selection-handler:" "calls" "Calls-Tree" "<Calls-Tree>" "Tree-Header" "<Tree-Header>" "content!" "<content!>" "vscroll?:" "hscroll?:" "document" "style:" "Scroller-View" "<Scroller-View>" "on-change-depth" "depth" "30" "40" "12" "on-change-profiler" "content-change-handler:" "profiler" "Combo-Box" "<Combo-Box>" "Dark" "border-color:" "Border-View" "<Border-View>" "2" "fill" "85" "31" "title:" "width" "auto-size?:" "23" "250" "profile" "Label-View" "<Label-View>" "on-choose-profile" ":form" "view" "Rect" "layout-insets:" "flow" "north" "24" "100" "Medium" "Color" "background:" "center" "on-reset-profile" "reset" "4" "on-refresh-profile" "refresh" "6" "Separator" "<Separator>" "on-stop-profiler" "stop" "on-start-profiler" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "start" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "0" "1" "Point" "position:" "border" "layout-type:" "400" "600" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) #f 82 20 82 26 ("2" "->string" "list" "collect" "8" "to" "0" "from" "d" "for" "loop" "depth" "set-value" "set-value~" "detprof" "statprof" "profiler" "locate" "set-choices" "set-choices~" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" method (meta override) #f 99 25 99 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 103 25 103 35 ()}
        {Lisp-Entry "host-position" method (meta override) #f 107 25 107 38 ("14" "28" "Point")}
        {Lisp-Entry "host-size" method (meta override) #f 111 25 111 34 ("608" "408" "Dimension")}
        {Lisp-Entry "get-tools-view" method (override) #f 120 20 120 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) #f 124 20 124 33 ("get-tree" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "get-tree" method () #f 133 11 133 19 ("calls" "locate")}
        {Lisp-Entry "on-start-profiler" method () #f 142 11 142 28 ("get-debugger-manager" "require-focused-process" "require-focused-process~" "profiler-start" "profiler-start~" "user-feedback" "evt")}
        {Lisp-Entry "on-stop-profiler" method () #f 147 11 147 27 ("user-message" "view-profile" "get-debugger-manager" "require-focused-process" "require-focused-process~" "profiler-stop" "profiler-stop~" "evt")}
        {Lisp-Entry "on-choose-profile" method () #f 153 11 153 28 ("view-profile" "selected:" "present:" "invite:" "title:" "key:" "string<?" "sort" "request-list" "profiler-selected-profile-set!" "profiler-selected-profile-set!~" "profiler-selected-profile" "profiler-selected-profile~" "profiler-profiles" "profiler-profiles~" "profiles" "get-debugger-manager" "require-focused-process" "require-focused-process~" "process" "let" "or" "profile" "present-profile" "define" "evt")}
        {Lisp-Entry "on-change-profiler" method () #f 164 11 164 29 ("get-sender" "get-sender~" "get-value" "get-value~" "reset-profile" "evt")}
        {Lisp-Entry "on-change-depth" method () #f 168 11 168 26 ("get-sender" "get-sender~" "get-value" "get-value~" "reset-profile" "evt")}
        {Lisp-Entry "on-reset-profile" method () #f 172 11 172 27 ("reset-profile" "evt")}
        {Lisp-Entry "reset-profile" method () #f 176 11 176 24 ("view-profile" "get-debugger-manager" "require-focused-process" "require-focused-process~" "profile-reset" "profile-reset~" "depth" "profiler")}
        {Lisp-Entry "track-history" definition (public) #f 181 22 181 35 ("initiator" "sender")}
        {Lisp-Entry "on-refresh-profile" method () #f 185 11 185 29 ("view-profile" "evt")}
        {Lisp-Entry "on-select-location" method () #f 189 11 189 29 ("calls" "locate" "acquire-focus" "acquire-focus~" "when" "edit-source" "get-user-origin" "get-user-origin~" "user-origin" "let" "evt")}
        {Lisp-Entry "*frame-indicator*" definition () #f 203 14 203 31 ("94" "blue:" "146" "green:" "255" "red:" "Color" "Location-Indicator" "new")}
        {Lisp-Entry "edit-source" method () #f 207 11 207 22 ("selected-location" "*frame-indicator*" "edit-location" "edit-location~")}
        {Lisp-Entry "selected-frame" method () #f 216 11 216 25 ("get-row" "get-row~" "get-user-data" "get-user-data~" "not" "if" "get-single-selection" "get-single-selection~" "rank" "get-tree" "tree" "let")}
        {Lisp-Entry "selected-location" method () #f 224 11 224 28 ("second" "not" "if" "selected-frame" "frame" "let")}
        {Lisp-Entry "view-profile" method () #f 236 11 236 23 ("table->list" "second" "key:" ">" "sort" "row" "frames" "head-frame" "father:" "user-data:" "children:" "add-row" "add-row~" "father" "locator-name" "kv" "with-update-locked" "with-update-locked~" "locator" "cons" "+" "table-set!" "table-ref" "total-count" "null?" "stack" "call" "for-each" "null-stack" "eq?" "test:" "make-table" "locator-table" "set-title" "set-title~" "fps" "1024" "fxfloor/" "alloc" "bytes-allocated" "gc-time" "real-time" "sys-time" "user-time" "remove-every-row" "remove-every-row~" "locate" "set-value" "set-value~" "milliseconds->seconds" "exact->inexact" "truncate" "inexact->exact" "/=" "calculate-fps" "present-reference" "car" "name" "string?" "100." "format" "->string" "Tree-Label" "Image-Resource" "image:" "present-frame" "title:" "Tree-Node" "new" "list" "1" "max" "fl" "<fl>" "cast" "/" "*" "if" "0" "eqv?" "not" "and" "unless" "total-duration" "duration" "count" "frame" "make-children" "define" "calls" "process-info" "calls-duration" "calls-count" "frames-duration" "frames-count" "depth" "profiler" "label" "bind" "when" "get-tree" "tree" "get-debugger-manager" "require-focused-process" "require-focused-process~" "profiler-profile" "profiler-profile~" "profile" "let" "lambda" ":wait" "with-cursor")}}
      {Lisp-Entry "Calls-Tree" class () #f 312 7 312 17 ("Tree-View")
        {Lisp-Entry "form" anonymous #f #f 315 3 315 7 ("percentage" "75" "duration" "50" "count" "Tree-Label-Column" "<Tree-Label-Column>" "250" "width:" "title:" "name:" "Tree-Node-Column" "<Tree-Node-Column>" "procedure" "filled-column:" ":images" "portfolio:" "install" "<install>")}}}})
"References-Analyser"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "tools" "References-Analyser.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.tools.References-Analyser" module (protected) #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.runtime" "jazz.library" "jazz.jml" "jazz.ide")}
      {Lisp-Entry "References-Analyser" class () #f 49 7 49 26 ("View")
        {Lisp-Entry "form" anonymous #f #f 52 3 52 7 ("419" "Tree-Label-Column" "<Tree-Label-Column>" "200" "width:" "display-images?:" "Tree-Node-Column" "<Tree-Node-Column>" "on-double-click" "double-click-handler:" ":images" "portfolio:" "multiple-selection?:" "info" "filled-column:" "declarations" "Tree-View" "<Tree-View>" "Tree-Header" "<Tree-Header>" "document" "562" "391" "35" "declarations-border" "on-find-dead-code" "action-handler:" "22" "120" "7" "272" "title:" "browse" "Push-Button" "<Push-Button>" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "left-padding:" "repository" "IDE-Text-View" "<IDE-Text-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "19" "250" "9" "2" "Point" "position:" "name-border" "name:" "Border-View" "<Border-View>" "599" "395" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 69 25 69 38 ("references-analyser" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 78 25 78 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 82 25 82 35 ()}
        {Lisp-Entry "host-position" method (meta override) #f 86 25 86 38 ("20" "90" "Point")}
        {Lisp-Entry "host-size" method (meta override) #f 90 25 90 34 ("600" "395" "Dimension")}
        {Lisp-Entry "focus-default" method (override) #f 94 20 94 33 ("repository" "locate" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "get-repositories" method (public) #f 103 18 103 34 ("list" "assert" "string->symbol" "find-repository" "empty-string?" "if" "repository" "locate" "get-string-content" "get-string-content~" "content" "let")}
        {Lisp-Entry "resize" method (override) #f 117 20 117 26 ("declarations-border" "size-figure" "size-figure~" "0" "browse" "locate" "move-figure" "move-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-find-dead-code" method () #f 123 11 123 28 ("find-dead-code" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-return-press" method (override) #f 129 20 129 35 ("on-find-dead-code" "evt")}
        {Lisp-Entry "on-double-click" method () #f 133 11 133 26 ("category-name" "edit-definitions" "edit-definitions~" "get-application" "appl" "get-user-data" "get-user-data~" "type" "get-row" "get-row~" "row" "when" "get-single-selection" "get-single-selection~" "selection" "get-sender" "get-sender~" "tree" "let*" "evt")}
        {Lisp-Entry "find-dead-code" method () #f 148 11 148 25 ("get-row-count" "get-row-count~" "user-feedback" "get-children" "get-children~" "queue-list" "user-data:" "Tree-Label" "title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "info" "get-name" "get-name~" "symbol->string" "Category-Declaration" "for-each" "Module-Declaration" "get-catalog-entry" "table-set!" "decl" "name" "set!" "set-hits" "set-hits~" "eq?" "test:" "make-table" "table" "not" "when" "declaration-hits" "get-hits" "get-hits~" "hits" "resolve-binding" "get-autoload-reference" "get-autoload-reference~" "autoload-reference" "data" "locator" "analysis-data" "iterate-table" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "declarations" "locate" "tree" "let" "category-name" "get-core-classes" "table-ref" "Class-Declaration" "is?" "and" "declaration" "exception-declaration?" "user-message" "unit-name" "feedback" "feedback:" "get-repositories" "repositories:" "walk-unit" "iterate-units" "analysis-mode?" "parameterize" "analyse" "define")}
        {Lisp-Entry "selected-declarations" method () #f 201 11 201 32 ("get-row" "get-row~" "get-user-data" "get-user-data~" "rank" "lambda" "map" "get-selection" "get-selection~" "selection" "declarations" "locate" "tree" "let*")}}}})
"Registry-Viewer"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "registry" "Registry-Viewer.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.registry.Registry-Viewer" module (protected) #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Registry-Viewer" class () #f 43 7 43 22 ("Layout-View")}
      {Lisp-Entry "Registry-Viewer" class () #f 49 7 49 22 ("Layout-View")
        {Lisp-Entry "form" anonymous #f #f 52 3 52 7 ("419" "width:" "Tree-Node-Column" "<Tree-Node-Column>" ":images" "portfolio:" "on-selection-change" "selection-handler:" "registry" "Tree-View" "<Tree-View>" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "vscroll?:" "hscroll?:" "document" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "center" "registry-border" "Border-View" "<Border-View>" "on-view-type-libs" ":form" "Event-Handler" "action-handler:" "selected?:" "22" "70" "title:" "type-libs" "Radio-Button" "<Radio-Button>" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "639" "436" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "conclude" method () #f 65 11 65 19 ("view-type-libs" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" method (meta) #f 75 16 75 25 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta) #f 79 16 79 26 ()}
        {Lisp-Entry "host-position" method (meta) #f 83 16 83 29 ("14" "28" "Point")}
        {Lisp-Entry "host-size" method (meta) #f 87 16 87 25 ("635" "416" "Dimension")}
        {Lisp-Entry "host-workspaces" method () #f 91 11 91 26 ("home")}
        {Lisp-Entry "on-view-type-libs" method () #f 100 11 100 28 ("view-type-libs" "evt")}
        {Lisp-Entry "view-type-libs" method () #f 104 11 104 25 ("second" "key:" "get-output" "get-output~" "<" "sort" "user-data:" "Image-Resource" "image:" "title:" "Tree-Node" "list" "children:" "add-row" "add-row~" "empty-string?" "not" "pathname" "language-id" "minor-version" "major-version" "desc" "bind" "with-update-locked" "with-update-locked~" "cons" "put" "put~" "when" "get-information" "get-information~" "info" "let" "guid-name" "lambda" "for-each" "List-Factory" "new" "informations" "gather" "guid-names" "iterate-subkeys" "iterate-subkeys~" "all" "registry" "locate" "tree" "let*" "user-message" "Registry" "open-type-lib" "open-type-lib~" "type-lib" "with")}
        {Lisp-Entry "on-selection-change" method () #f 127 11 127 30 ("focus-host" "focus-host~" "view-file" "view-file~" "get-guest" "get-guest~" "view-registered-typelib" "view-registered-typelib~" "cardinality" "-" "1" "subseq" "GUID" "new" "guid" "Type-Viewer" "singleton" "frame" "pathname" "language-id" "minor-version" "major-version" "desc" "guid-name" "bind" "get-row" "get-row~" "get-user-data" "get-user-data~" "info" "let" "when" "get-single-selection" "get-single-selection~" "selection" "get-sender" "get-sender~" "sender" "let*" "evt")}}}})
"Spy-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "spy" "Spy-View.jazz"} 246601672. jazz
    {Lisp-Entry "jazz.editor.jazz.spy.Spy-View" module (protected) #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.picker" "jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Spy-View" class () #f 46 7 46 15 ("all" "1." "explicit" "initialize" "View")
        {Lisp-Entry "clients" property () #f 49 12 49 19 ()}
        {Lisp-Entry "active?" slot () #f 52 8 52 15 ()}
        {Lisp-Entry "slowdown?" slot () #f 53 8 53 17 ()}
        {Lisp-Entry "slowdown-quantum" slot () #f 54 8 54 24 ()}
        {Lisp-Entry "category" slot () #f 55 8 55 16 ()}
        {Lisp-Entry "old-consumer" slot () #f 56 8 56 20 ()}
        {Lisp-Entry "form" anonymous #f #f 59 3 59 7 ("row" "selection-mode:" "tree" "Tree-View" "<Tree-View>" "tree-header" "Tree-Header" "<Tree-Header>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "tree-scroller" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "306" "33" "0" "tree-border" "Border-View" "<Border-View>" "on-on/off" "710" "on/off" "on-slowdown" "686" "slowdown" "Toggle-Tool" "<Toggle-Tool>" "on-clear" "605" "clear" "on-spy-family" "180" "spy-family" "on-spy" "156" "spy" "Push-Tool" "<Push-Tool>" "76" "keyboard" "52" "mouse" "28" "paint" "selected?:" ":images" "portfolio:" "on-category" ":form" "Event-Handler" "action-handler:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "6" "4" "Point" "position:" "all" "name:" "Radio-Tool" "<Radio-Tool>" "east" "location:" "339" "736" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "get-tree" method (public) #f 83 18 83 26 ("tree" "locate")}
        {Lisp-Entry "get-clients" method (public) #f 92 18 92 29 ("clients")}
        {Lisp-Entry "set-clients" method (public) #f 96 18 96 29 ("activate" "set!" "clients" "unspy" "for-each" "active?" "when" "list")}
        {Lisp-Entry "activate" method () #f 103 11 103 19 ("on/off" "locate" "set-selected?" "set-selected?~" "clients" "spy" "for-each" "active?" "set!")}
        {Lisp-Entry "destroy" method (override) #f 114 20 114 27 ("nextmethod" "set-clients")}
        {Lisp-Entry "resize" method (override) #f 119 20 119 26 ("tree-border" "size-figure" "size-figure~" "on/off" "slowdown" "0" "clear" "locate" "move-figure" "move-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-category" method () #f 127 11 127 22 ("get-sender" "get-sender~" "get-name" "get-name~" "category" "set!" "evt")}
        {Lisp-Entry "on-spy" method () #f 131 11 131 17 ("list" "set-clients" "views" "get-player" "get-player~" "windows" "spy-domain" "case" "figure" "let" "pos" "view" "lambda" "pick-client" "evt")}
        {Lisp-Entry "on-spy-family" method () #f 140 11 140 24 ("collect-descendants" "collect-descendants~" "set-clients" "views" "get-player" "get-player~" "windows" "spy-domain" "case" "figure" "let" "pos" "view" "lambda" "pick-client" "evt")}
        {Lisp-Entry "pick-client" method () #f 149 11 149 22 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "views" "neq?" "highlight-root-only?:" "highlight:" "click:" "get-player" "list" "exclude:" "pick-figure" "spy-domain" "domain" "let" "action")}
        {Lisp-Entry "on-clear" method () #f 161 11 161 19 ("get-tree" "remove-every-row" "remove-every-row~" "evt")}
        {Lisp-Entry "on-slowdown" method () #f 165 11 165 22 ("not" "slowdown?" "set!" "evt")}
        {Lisp-Entry "on-on/off" method () #f 169 11 169 20 ("unspy" "clients" "spy" "for-each" "if" "not" "active?" "set!" "evt")}
        {Lisp-Entry "spy-domain" method (protected virtual) #f 181 29 181 39 ()}
        {Lisp-Entry "spy" method (protected virtual) #f 185 29 185 32 ("client")}
        {Lisp-Entry "unspy" method (protected virtual) #f 189 29 189 34 ("client")}}}})
"Type-Extractor"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "registry" "Type-Extractor.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.registry.Type-Extractor" module (protected) #f 42 18 42 58 ("jazz")
      {Lisp-Entry "Type-Extractor" class () #f 45 7 45 21 ("Object")}
      {Lisp-Entry "Type-Extractor" class () #f 51 7 51 21 ("Object")
        {Lisp-Entry "library" slot () #f 54 8 54 15 ()}
        {Lisp-Entry "name" slot () #f 55 8 55 12 ()}
        {Lisp-Entry "to-emit" slot () #f 56 8 56 15 ()}
        {Lisp-Entry "emited" slot () #f 57 8 57 14 ()}
        {Lisp-Entry "waiting" slot () #f 58 8 58 15 ()}
        {Lisp-Entry "initialize" method () #f 61 11 61 21 ("name~self" "self" "library~self" "set!" "nextmethod" "default-name" "name" "name:" "library" "library:")}
        {Lisp-Entry "default-name" method () #f 67 11 67 23 ("get-name" "get-name~" "lib")}
        {Lisp-Entry "extract" method (public) #f 71 18 71 25 ("emit-package-footer" "emit-library-types" "emit-package-header" "format" "name" "output-header" "output" "lambda" "path-settings" "call-with-output-file" "activity" "activity:" "file")}
        {Lisp-Entry "emit-package-header" method () #f 86 11 86 30 ("name" "format" "output")}
        {Lisp-Entry "emit-package-footer" method () #f 94 11 94 30 ("format" "output")}
        {Lisp-Entry "emit-section-header" method () #f 98 11 98 30 ("format" "output" "section-name")}
        {Lisp-Entry "emit-library-types" method () #f 105 11 105 29 ("debug" "not-null?" "emit-type-information" "info" "lambda" "for-each" "length" "0" "Range" "new" "set-range" "set-range~" "when" "waiting" "emited" "info-name" "map" "to-emit" "set!" "library" "get-types" "get-types~" "types" "let" "activity" "output")}
        {Lisp-Entry "emit-type-information" method () #f 119 11 119 32 ("1" "delta-pos" "delta-pos~" "emit-waiting" "emited" "emit-type-info" "cons" "waiting" "set!" "waiting-implemented" "waiting-upon" "user-message" "user-message~" "when" "get-name" "get-name~" "name" "let" "throw-cancel" "cancel-requested?" "cancel-requested?~" "and" "if" "activity" "output" "info")}
        {Lisp-Entry "emit-waiting" method () #f 135 11 135 23 ("remove!" "waiting" "cons" "set!" "emit-type-information" "emited" "every?" "member?" "and" "when" "names" "info" "bind" "pair" "lambda" "for-each" "processed" "let" "activity" "output" "name")}
        {Lisp-Entry "waiting-implemented" method () #f 151 11 151 30 ("get-implemented-types" "get-implemented-types~" "emited" "not" "to-emit" "member?" "and" "when" "get-name" "get-name~" "name" "let" "lambda" "collect" "info")}
        {Lisp-Entry "emit-type-info" method () #f 160 11 160 25 ("error" "else" "emit-max" "TKIND_MAX" "emit-union" "TKIND_UNION" "emit-alias" "TKIND_ALIAS" "emit-com-class" "TKIND_COCLASS" "emit-dispatch" "TKIND_DISPATCH" "emit-interface" "TKIND_INTERFACE" "emit-package" "TKIND_MODULE" "emit-record" "TKIND_RECORD" "emit-enum" "TKIND_ENUM" "ecase" "get-kind" "get-kind~" "kind" "let" "output" "info")}
        {Lisp-Entry "emit-enum" method () #f 175 11 175 20 ("emit-variables" "null?" "if" "format" "emit-section-header" "get-variables" "get-variables~" "variables" "get-name" "get-name~" "name" "let" "output" "info")}
        {Lisp-Entry "emit-record" method () #f 186 11 186 22 ("emit-variables" "null?" "if" "format" "emit-section-header" "get-variables" "get-variables~" "variables" "get-name" "get-name~" "name" "let" "output" "info")}
        {Lisp-Entry "emit-package" method () #f 197 11 197 23 ("format" "emit-section-header" "get-name" "get-name~" "name" "let" "output" "info")}
        {Lisp-Entry "emit-interface" method () #f 203 11 203 25 ("com-external" "emit-functions" "intern-type" "type-name" "final-typedesc" "TYPEDESC" "coerce" "and" "ptr-typedesc" "VT_PTR" "=" "pointer?" "vt" "type" "tdesc" "elemdescVar" "get" "typedesc" "get-member-name" "get-member-name~" "name" "desc" "lambda" "for-each" "or" "->string" "format" "emit-section-header" "append" "set!" "member?" "when" "car" "ascendant" "get-implemented-types" "get-implemented-types~" "interfaces" "get-functions" "get-functions~" "functions" "get-variables" "get-variables~" "variables" "get-guid" "get-guid~" "guid" "get-name" "get-name~" "interface-name" "let*" "output" "info")}
        {Lisp-Entry "emit-dispatch" method () #f 232 11 232 24 ("emit-interface" "output" "info")}
        {Lisp-Entry "emit-com-class" method () #f 236 11 236 25 ("car" "->string" "format" "emit-section-header" "info-name" "map" "interface-names" "get-implemented-types" "get-implemented-types~" "interfaces" "get-guid" "get-guid~" "guid" "get-name" "get-name~" "name" "let*" "output" "info")}
        {Lisp-Entry "emit-alias" method () #f 246 11 246 21 ("list" "cons" "waiting" "set!" "emit-alias-code" "emited" "member?" "if" "desc" "tdescAlias" "get-attr" "get-attr~" "get" "get-referenced-type" "get-referenced-type~" "aliased" "get-name" "get-name~" "name" "let" "output" "info")}
        {Lisp-Entry "emit-alias-code" method () #f 254 11 254 26 ("format" "emit-section-header" "output" "aliased" "name")}
        {Lisp-Entry "emit-union" method () #f 261 11 261 21 ("format" "emit-section-header" "get-name" "get-name~" "name" "let" "output" "info")}
        {Lisp-Entry "emit-max" method () #f 269 11 269 19 ("format" "emit-section-header" "get-name" "get-name~" "name" "let" "output" "info")}
        {Lisp-Entry "emit-functions" method () #f 275 11 275 25 ("cons" "set!" "nil?" "essay" "emit-function" "memq?" "not" "invkind" "get" "effective-name" "effective" "get-member-name" "get-member-name~" "name" "let*" "tail" "desc" "bind" "pair" "lambda" "for-each-pair" "format" "when" "null?" "if" "trailer" "output" "namespace" "modifiers" "header" "functions" "names" "info")}
        {Lisp-Entry "emit-function" method () #f 290 11 290 24 ("reverse!" "VARENUM" "value->name" "value->name~" "item" "map" "4" "quotient" "cParams" "0" "naturals" "in-out" "<in-out>" "parameter-direction" "param-direction" "param-type-name" "interface-kind?" "if" "param-pointer?" "get-referenced-type" "get-referenced-type~" "VT_USERDEFINED" "param-referenced" "param-typedesc" "param-type" "ptr-ptr-type" "ptr-ptr-typedesc" "ptr-pointer?" "ptr-type" "ptr-typedesc" "pointer?" "type" "typedesc" "array-ref" "param" "n" "lambda" "for-each" "get-function-parameters" "get-function-parameters~" "params" "let" "cons" "set!" "unpl" "eq?" "when" "format" "intern-type" "return-type-name" "or" "final-return-typedesc" "TYPEDESC" "coerce" "and" "ptr-return-typedesc" "VT_PTR" "=" "return-pointer?" "vt" "return-type" "tdesc" "elemdescFunc" "return-typedesc" "oVft" "get" "virtual-offset" "unimplemented" "let*" "equal?" "test:" "member?" "unless" "trailer" "output" "namespace" "modifiers" "header" "desc" "effective" "info")}
        {Lisp-Entry "interface-kind?" method () #f 345 11 345 26 ("TKIND_COCLASS" "TKIND_DISPATCH" "TKIND_INTERFACE" "=" "or" "get-kind" "get-kind~" "kind" "let" "when" "info")}
        {Lisp-Entry "effective-name" method () #f 353 11 353 25 ("putref-name" "INVOKE_PROPERTYPUTREF" "put-name" "INVOKE_PROPERTYPUT" "get-name" "INVOKE_PROPERTYGET" "INVOKE_FUNC" "ecase" "name" "kind")}
        {Lisp-Entry "get-name" method () #f 361 11 361 19 ("concatenate" "string->symbol" "name")}
        {Lisp-Entry "put-name" method () #f 365 11 365 19 ("concatenate" "string->symbol" "name")}
        {Lisp-Entry "putref-name" method () #f 369 11 369 22 ("concatenate" "string->symbol" "name")}
        {Lisp-Entry "parameter-direction" method () #f 373 11 373 30 ("error" "else" "out" "in" "or" "in-out" "cond" "not" "and" "unspecified?" "IDLFLAG_FOUT" "out?" "IDLFLAG_FIN" "mask-bit-set?" "in?" "wIDLFlags" "idldesc" "get" "flags" "let*" "param")}
        {Lisp-Entry "emit-variables" method () #f 384 11 384 25 ("and" "emit-variable" "tail" "desc" "bind" "pair" "lambda" "for-each-pair" "format" "when" "null?" "if" "trailer" "output" "variables" "info")}
        {Lisp-Entry "emit-variable" method () #f 394 11 394 24 ("VARENUM" "value->name" "value->name~" "unpl" "=" "and" "when" "TKIND_RECORD" "read-variant" "TKIND_ENUM" "ecase" "format" "intern-type" "variable-type-name" "lpvarValue" "value" "vt" "basetype" "tdesc" "elemdescVar" "get" "typedesc" "get-member-name" "get-member-name~" "name" "get-kind" "get-kind~" "kind" "let*" "trailer" "output" "desc" "info")}
        {Lisp-Entry "info-name" method () #f 411 11 411 20 ("get-name" "get-name~" "info")}
        {Lisp-Entry "intern-type" method () #f 420 11 420 22 ("cdr" "car" "pair?" "name" "idl-type-info" "let*" "else" "TKIND_ALIAS" "TKIND_DISPATCH" "get-name" "get-name~" "add-modifier" ":string" "format" "TKIND_ENUM" "get-kind" "get-kind~" "ecase" "get-referenced-type" "get-referenced-type~" "referenced" "VT_USERDEFINED" "=" "if" "vt" "get" "type" "let" "pointer?" "desc" "info")}
        {Lisp-Entry "idl-type-info" method () #f 441 11 441 24 ("VARENUM" "value->name" "value->name~" "error" "else" "VT_LPWSTR" "VT_LPSTR" "VT_CY" "VT_SAFEARRAY" "VT_DISPATCH" "VT_UNKNOWN" "VT_USERDEFINED" "VT_DATE" "VT_VARIANT" "VT_BSTR" "VT_CARRAY" "cons" "VT_PTR" "VT_HRESULT" "VT_BOOL" "VT_INT" "VT_R8" "VT_R4" "VT_I4" "VT_I2" "VT_I1" "VT_UINT" "VT_UI4" "VT_UI2" "VT_UI1" "VT_VOID" "ecase" "type")}
        {Lisp-Entry "add-modifier" method () #f 471 11 471 23 (":string" "format" "if" "pointer?" "name")}}}})
"Type-Viewer"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "registry" "Type-Viewer.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.registry.Type-Viewer" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Type-Viewer" class () #f 43 7 43 18 ("Layout-View")}
      {Lisp-Entry "Type-Viewer" class () #f 49 7 49 18 ("initialize" "Layout-View")
        {Lisp-Entry "library" slot () #f 52 8 52 15 ()}
        {Lisp-Entry "form" anonymous #f #f 55 3 55 7 ("Code-Base" "Text-Style" "base-style:" "descr" "Text-View" "<Text-View>" "second" "descr-border" "269" "width:" "Tree-Node-Column" "<Tree-Node-Column>" "on-selection-change" "selection-handler:" "library" "Type-Tree" "<Type-Tree>" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "vscroll?:" "document" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "first" "library-border" "Border-View" "<Border-View>" "30" "division:" "relative" "mode:" "horz" "orientation:" "center" "splitter" "Splitter-View" "<Splitter-View>" "on-browse" "tail" "100" "title:" "browse" "Push-Button" "<Push-Button>" "on-generate" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" ":images" "portfolio:" "Image-Resource" "resource:" "22" "generate" "Push-Tool" "<Push-Tool>" "0" "6" "1" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "739" "693" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "singleton" method (meta public) #f 73 23 73 32 ("new-frame" "Type-Viewer" "find-frame-host" "or")}
        {Lisp-Entry "destroy" method () #f 78 11 78 18 ("nextmethod" "library" "set!")}
        {Lisp-Entry "host-icon" method (meta) #f 88 16 88 25 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta) #f 92 16 92 26 ()}
        {Lisp-Entry "host-position" method (meta) #f 96 16 96 29 ("14" "503" "Point")}
        {Lisp-Entry "host-size" method (meta) #f 100 16 100 25 ("635" "557" "Dimension")}
        {Lisp-Entry "host-workspaces" method () #f 104 11 104 26 ("home")}
        {Lisp-Entry "on-generate" method () #f 113 11 113 22 ("extract" "extract~" ":pure-dispatch?" ":library" "Type-Extractor" "new" "extractor" "shift-down?" "pure-dispatch?" "extensions:" "default-extension:" "initial-filename:" "choose-new-file" "file" "get-name" "get-name~" "name" "let*" "bell" "library" "null?" "if" "evt")}
        {Lisp-Entry "on-browse" method () #f 123 11 123 20 ("extensions:" "choose-file" "view-file" "evt")}
        {Lisp-Entry "on-selection-change" method () #f 127 11 127 30 ("get-row" "get-row~" "get-user-data" "get-user-data~" "library" "describe-item" "null?" "if" "get-single-selection" "get-single-selection~" "selection" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "view-file" method (public) #f 135 18 135 27 ("file:" "Type-Lib" "new" "view-library" "file")}
        {Lisp-Entry "view-registered-library" method (public) #f 139 18 139 41 (":language-id" ":minor-version" ":major-version" "guid:" "Type-Lib" "new" "view-library" "li" "mi" "ma" "g")}
        {Lisp-Entry "view-library" method (public) #f 143 18 143 30 ("describe-item" "insert-library" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "locate" "tree" "let" "library" "set!" "lambda" ":wait" "with-cursor" "lib")}
        {Lisp-Entry "insert-library" method () #f 160 11 160 25 ("get-types" "get-types~" "insert-info" "info" "lambda" "for-each" "user-data:" "Image-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "state:" "add-row" "add-row~" "node" "library" "get-name" "get-name~" "title" "let*" "tree")}
        {Lisp-Entry "insert-info" method () #f 168 11 168 22 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "dynamic" "state:" "father:" "add-row" "add-row~" "else" "TKIND_UNION" "TKIND_ALIAS" "TKIND_DISPATCH" "TKIND_INTERFACE" "TKIND_COCLASS" "TKIND_RECORD" "Image-Resource" "TKIND_ENUM" "ecase" "icon" "get-kind" "get-kind~" "kind" "get-doc" "get-doc~" "doc" "get-name" "get-name~" "name" "let*" "node" "tree" "info")}
        {Lisp-Entry "update-info-row" method () #f 184 11 184 26 ("get-variables" "get-variables~" "insert-variable" "get-functions" "get-functions~" "insert-function" "desc" "lambda" "for-each" "get-user-data" "get-user-data~" "info" "get-parent" "get-parent~" "tree" "let" "row")}
        {Lisp-Entry "insert-function" method () #f 195 11 195 26 ("cons" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "state:" "father:" "add-row" "add-row~" "else" "INVOKE_PROPERTYPUTREF" "INVOKE_PROPERTYPUT" "INVOKE_PROPERTYGET" "Image-Resource" "INVOKE_FUNC" "invkind" "get" "ecase" "icon" "get-member-name" "get-member-name~" "name" "let" "node" "tree" "desc" "info")}
        {Lisp-Entry "insert-variable" method () #f 206 11 206 26 ("cons" "user-data:" "Image-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "state:" "father:" "add-row" "add-row~" "get-member-name" "get-member-name~" "name" "let" "node" "tree" "desc" "info")}
        {Lisp-Entry "describe-item" method () #f 216 11 216 24 ("get-output" "get-output~" "set-content" "set-content~" "describe-member" "else" "describe-info" "Type-Info" "describe-lib" "Type-Lib" "typecase" "List-Factory" "new" "fact" "descr" "locate" "text" "let" "when" "item")}
        {Lisp-Entry "describe-lib" method () #f 227 11 227 23 ("get-lib-file" "get-lib-file~" "get-lib-guid" "get-lib-guid~" "get-doc" "get-doc~" "get-name" "get-name~" "format" "put" "put~" "fact" "item")}
        {Lisp-Entry "describe-info" method () #f 235 11 235 24 ("get-implemented-types" "get-implemented-types~" "map" "get-guid" "get-guid~" "get-kind" "get-kind~" "TYPEKIND" "value->name" "value->name~" "get-doc" "get-doc~" "get-name" "get-name~" "format" "put" "put~" "fact" "item")}
        {Lisp-Entry "describe-member" method () #f 243 11 243 26 ("describe-variable" "VARDESC" "describe-function" "FUNCDESC" "typecase" "desc" "info" "bind" "fact" "item")}
        {Lisp-Entry "describe-function" method () #f 250 11 250 28 ("0" "naturals" "get-name" "get-name~" "get-referenced-type" "get-referenced-type~" "referenced" "ptr-ptr-type" "ptr-ptr-typedesc" "when" "make-string" "length" "10" "-" "1" "max" "padding" "param-type-name" "ptr-type" "TYPEDESC" "coerce" "and" "ptr-typedesc" "VT_USERDEFINED" "user?" "VT_PTR" "=" "pointer?" "parameter-direction" "direction" "vt" "type" "typedesc" "array-ref" "param" "let*" "n" "lambda" "for-each" "get-function-parameters" "get-function-parameters~" "params" "let" "tdesc" "elemdescFunc" "describe-type" "cParamsOpt" "cParams" "oVft" "callconv" "CALLCONV" "invkind" "INVOKEKIND" "funckind" "get" "FUNCKIND" "value->name" "value->name~" "format" "put" "put~" "fact" "desc" "info")}
        {Lisp-Entry "describe-type" method () #f 284 11 284 24 ("VARENUM" "value->name" "value->name~" "get-name" "get-name~" "get-referenced-type" "get-referenced-type~" "referenced" "VT_USERDEFINED" "=" "if" "vt" "get" "type" "let" "desc" "info")}
        {Lisp-Entry "parameter-direction" method () #f 292 11 292 30 ("error" "else" "out" "<out>" "in" "<in>" "or" "in-out" "<in-out>" "cond" "not" "and" "unspecified?" "IDLFLAG_FOUT" "out?" "IDLFLAG_FIN" "mask-bit-set?" "in?" "wIDLFlags" "idldesc" "get" "flags" "let*" "param")}
        {Lisp-Entry "describe-variable" method () #f 303 11 303 28 ("TKIND_UNION" "else" "cElements" "rgbounds" "tdescElem" "ARRAYDESC" "coerce" "arraydesc" "let" "VT_CARRAY" "case" "TKIND_RECORD" "read-variant" "format" "put" "put~" "TKIND_ENUM" "ecase" "lpvarValue" "value" "describe-type" "type" "tdesc" "elemdescVar" "get" "typedesc" "get-kind" "get-kind~" "kind" "let*" "fact" "desc" "info")}}
      {Lisp-Entry "Type-Tree" class () #f 333 7 333 16 ("Tree-View")
        {Lisp-Entry "update-row" method () #f 336 11 336 21 ("update-info-row" "row")}}}})
"User-Log"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "log" "User-Log.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.log.User-Log" module (protected) #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.debuggee")}
      {Lisp-Entry "User-Log" class () #f 44 7 44 15 ("Log-View")
        {Lisp-Entry "external-name" method (meta override) #f 47 25 47 38 ("user-log" "rest")}
        {Lisp-Entry "finish" method (override) #f 51 20 51 26 ("separator3" "0" "8" "Dimension" "separator2" "set-size" "set-size~" "separator1" "close" "close~" "none" "set-border-type" "set-border-type~" "log-border" "splitter" "locate" "zoom" "zoom~" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" method (meta override) #f 65 25 65 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 69 25 69 35 ()}
        {Lisp-Entry "get-tools-view" method (override) #f 78 20 78 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) #f 82 20 82 33 ("acquire-focus" "acquire-focus~" "log-tree" "locate" "tree" "let")}
        {Lisp-Entry "view-entry" method () #f 92 11 92 21 ("node")}
        {Lisp-Entry "edit-entry" method () #f 101 11 101 21 ("bell" "user-message" "else" "output-table" "Data-Table" "typecase" "when" "get-entry" "get-entry~" "entry" "let" "node")}
        {Lisp-Entry "output-tables" method () #f 114 11 114 24 ("sql" "select-workspace" "select-workspace~" "get-application" "appl" "when" "output-tables" "output-tables~" "get-sql-console-text" "text" "let" "select?" "select?:" "name" "name:" "tables")}
        {Lisp-Entry "output-table" method () #f 124 11 124 23 ("list" "output-tables" "select?" "select?:" "name" "name:" "table")}}}})
"_inspector"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "inspector" "_inspector.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz.inspector" module () #f 37 8 37 34 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.jrm")}
      {Lisp-Entry "presentation-limit" definition () #f 48 12 48 30 ("256")}
      {Lisp-Entry "Unbound" definition () #f 52 12 52 19 ("cons")}
      {Lisp-Entry "package-unbound" definition (public) #f 56 20 56 35 ("Unbound")}
      {Lisp-Entry "package-info" definition (public) #f 60 20 60 32 ("list" "context:" "frame:" "memq?" "more?" "safe-present-object" "->string" "presentation" "category-identifier" "class" ":raw" "raw?" "Unbound" "eq?" "unbound?" "let*" "gc-protect" "object->serial" "serial" "subseq" "concatenate" "if" "presentation-limit" "or" "limit" "let" "str" "truncate" "else" "class-of" "get-instance-slots" "get-instance-slots~" "not-null?" "object?" "cardinality" "sequence?" "string?" "structure-kind" "kind-length" "structure?" "0" "table-length" ">" "table?" "pair?" "cond" "more-value?" "define" "max-width" "max-width:" "mutable?" "mutable?:" ":value" "kind" "kind:" "value")}
      {Lisp-Entry "inspect-max-content" constant () #f 95 10 95 29 ("256")}
      {Lisp-Entry "inspect-value" definition (public) #f 99 20 99 33 ("object?" "List" "coerce" "sequence?" "structure?" "table?" "null/pair?" "format" "-1" ">" "-" "missing" "length" "naturals" "get-object-slot" "safe-present-property" "get-offset" "get-offset~" "offset" "field-name" ":raw" "kind:" "symbol?" "slot-info" "class-of" "slot-infos" "get-ascendant" "get-ascendant~" "get-slots" "get-slots~" "slot" "append" "category-name" "class-name" "not" "class" "class-slot-info" "object" "inspect-object" "second" "key:" "string<?" "sort" "sorted" "safe-present-object" "key" "if" "table->list" "table-length" "table" "inspect-table" "add-missing" "rest" "car" ">=" "and" "or" "scan" "iter" "content" "0" "total" "else" "1" "+" "cdr" "pair?" "null?" "cond" "n" "l" "proper-length" "lst" "inspect-list" "cached-kind-fields" "structure-ref" "list" "cons" "rank" "name" "bind" "info" "lambda" "map" "structure-kind" "kind" "let" "struct" "inspect-structure" "define" "package-info" "packager" "packager:" "inspect-max-content" "max-content" "max-content:" "max-width" "max-width:" "value")}
      {Lisp-Entry "kind-cache" definition () #f 177 12 177 22 ("eq?" "test:" "make-table")}
      {Lisp-Entry "cached-kind-fields" definition () #f 181 13 181 31 ("table-set!" "kind-fields" "fields" "let" "kind-cache" "table-ref" "or" "kind")}}})
"_jazz"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "_jazz.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.jazz" module () #f 37 8 37 24 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.editor.jazz.autoload")}
      {Lisp-Entry "export" anonymous #f #f 43 1 43 7 ("jazz.editor.jazz.autoload")}
      {Lisp-Entry "call-with-saved-text" definition (public) #f 46 20 46 40 ("save" "save~" "result" "let" "text" "lambda" "call-with-text" "func" "file")}
      {Lisp-Entry "call-with-text" definition (public) #f 54 20 54 34 ("set-moniker" "set-moniker~" "get-syntax" "get-syntax~" "set-colorize?" "set-colorize?~" "Jazz-Text-View" "new" "text" "let" "func" "file")}
      {Lisp-Entry "insert-imports" definition (public) #f 61 20 61 34 ("cdr" "remove-duplicates" "filter-existing-import-invoices" "filter-existing-import-invoices~" "for-each" "car" "else" "tabulate" "tabulate~" "insert-newline" "insert-newline~" "cond" "find-import-invoice" "find-import-invoice~" "first?" "found?" "receive" "unit" "insert-import" "format" "insert-string" "insert-string~" "get-end" "get-end~" "set-caret" "set-caret~" "enter-import" "enter-import~" "unless" "forward-namespace" "forward-namespace~" "get-model" "get-model~" "Jazz-Explorer" "new" "explorer" "let" "initial-import" "insert-import-declaration" "define" "imports" "text")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "autoload.jazz"} 245733927. jazz
    {Lisp-Entry "jazz.editor.jazz.autoload" module (protected) #f 37 18 37 43 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("References-Analyser" "jazz.editor.jazz.tools.References-Analyser" "Class-Browser-Actions" "jazz.editor.jazz.tools.Class-Browser-Actions" "Class-Browser" "jazz.editor.jazz.tools.Class-Browser" "Location-Error" "jazz.editor.jazz.text.Location-Error" "Jazz-Text-View" "jazz.editor.jazz.text.Jazz-Text-View" "Jazz-Text-Preferences" "jazz.editor.jazz.text.Jazz-Text-Preferences" "Jazz-Text-Actions" "jazz.editor.jazz.text.Jazz-Text-Actions" "Jazz-Plain-Text-View" "jazz.editor.jazz.text.Jazz-Plain-Text-View" "Jazz-Plain-Syntax" "jazz.editor.jazz.text.Jazz-Plain-Syntax" "Jazz-Explorer" "jazz.editor.jazz.text.Jazz-Explorer" "Jazz-Code-Location" "jazz.editor.jazz.text.Jazz-Code-Location" "Jazz-Syntax" "jazz.editor.jazz.syntax.Jazz-Syntax" "Spy-View" "jazz.editor.jazz.spy.Spy-View" "Event-Spy" "jazz.editor.jazz.spy.Event-Spy" "Type-Viewer" "jazz.editor.jazz.registry.Type-Viewer" "Type-Extractor" "jazz.editor.jazz.registry.Type-Extractor" "Registry-Viewer" "jazz.editor.jazz.registry.Registry-Viewer" "Profile-Results" "jazz.editor.jazz.profiler.Profile-Results" "Jazz-Parser" "jazz.editor.jazz.parser.Jazz-Parser" "User-Log" "jazz.editor.jazz.log.User-Log" "Logs-Viewer" "jazz.editor.jazz.log.Logs-Viewer" "Inspector-View" "jazz.editor.jazz.inspector.Inspector-View" "Inspector-Preferences" "jazz.editor.jazz.inspector.Inspector-Preferences" "Inspector-Actions" "jazz.editor.jazz.inspector.Inspector-Actions" "Inspector" "jazz.editor.jazz.inspector.Inspector" "Documentation-Text-View" "jazz.editor.jazz.documentation.Documentation-Text-View" "Jazz-File" "autoload" "jazz.editor.jazz.builder.Jazz-File")}}})
"forms"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "jazz" "forms.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.editor.jazz.forms" module () #f 37 8 37 30 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.editor.lisp")}
      {Lisp-Entry "class" define #f ("expression") 48 19 48 24 (":class" "walk:" "0" "tabulate:" "attributes" "implements" "extends" "metaclass" "keywords:" "native" "primitive" "uptodate" "undocumented" "deprecated" "concrete" "abstract" "public" "package" "protected" "private" "modifiers:" "declaration?:" "namespace?:")}
      {Lisp-Entry "interface" define #f ("expression") 57 19 57 28 (":interface" "walk:" "0" "tabulate:" "attributes" "extends" "metaclass" "keywords:" "native" "primitive" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "modifiers:" "declaration?:" "namespace?:")}
      {Lisp-Entry "remotable-stub" define #f ("expression") 66 19 66 33 ("name-mangler:" ":remotable-stub" "walk:" "0" "tabulate:" "extends" "keywords:" "public" "package" "protected" "private" "modifiers:" "declaration?:" "namespace?:")}
      {Lisp-Entry "submodule" define #f ("expression") 76 19 76 28 (":submodule" "walk:" "-1" "tabulate:" "public" "package" "protected" "private" "modifiers:" "declaration?:" "namespace?:")}
      {Lisp-Entry "constant" define #f ("expression") 89 19 89 27 (":constant" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "datacontainer" define #f ("expression") 94 19 94 32 (":datacontainer" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "definition" define #f ("expression") 99 19 99 29 (":definition" "walk:" "1" "tabulate:" "onsite" "inline" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "define-expression" define #f ("expression") 105 19 105 36 ("name-mangler:" ":define" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "define-setting" define #f ("expression") 111 19 111 33 ("name-mangler:" ":define-macro" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "enumeration" define #f ("expression") 117 19 117 30 (":enumeration" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "form" define #f ("expression") 122 19 122 23 (":form" "walk:" "0" "tabulate:" "anonymous?:" "declaration?:")}
      {Lisp-Entry "generic" define #f ("expression") 128 19 128 26 (":generic/specific" "walk:" "1" "tabulate:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "global" define #f ("expression") 134 19 134 25 (":global" "walk:" "declaration?:")}
      {Lisp-Entry "macro" define #f ("expression") 138 19 138 24 ("name-mangler:" ":macro" "walk:" "1" "tabulate:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "local-macro" define #f ("expression") 145 19 145 30 ("name-mangler:" ":macro" "walk:" "1" "tabulate:" "modifiers:" "declaration?:")}
      {Lisp-Entry "method" define #f ("expression") 152 19 152 25 (":method" "walk:" "1" "tabulate:" "value" "call" "exec" "post" "notsynchronized" "synchronized" "notremote" "remote" "onsite" "inline" "concrete" "abstract" "override" "chained" "virtual" "final" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "pattern" define #f ("expression") 158 19 158 26 ("name-mangler:" ":method" "walk:" "1" "tabulate:" "notsynchronized" "synchronized" "notremote" "remote" "onsite" "inline" "concrete" "abstract" "override" "chained" "virtual" "final" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "property" define #f ("expression") 165 19 165 27 (":property" "walk:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "modifiers:" "declaration?:")}
      {Lisp-Entry "slot" define #f ("expression") 170 19 170 23 (":slot" "walk:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "special" define #f ("expression") 175 19 175 26 (":define-macro" "walk:" "declaration?:")}
      {Lisp-Entry "specialize" define #f ("expression") 179 19 179 29 (":specialize" "walk:" "inline" "modifiers:" "declaration?:")}
      {Lisp-Entry "specific" define #f ("expression") 184 19 184 27 (":generic/specific" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "syntax" define #f ("expression") 189 19 189 25 ("name-mangler:" ":macro" "walk:" "1" "tabulate:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "meta" "modifiers:" "declaration?:")}
      {Lisp-Entry "define-local-syntax" define #f ("expression") 196 19 196 38 (":macro" "walk:" "1" "tabulate:" "modifiers:" "declaration?:")}
      {Lisp-Entry "%macro" define #f ("expression") 202 19 202 25 (":macro" "walk:" "declaration?:")}
      {Lisp-Entry "define-color" define #f ("expression") 206 19 206 31 ("name-mangler:" ":define" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "define-font" define #f ("expression") 212 19 212 30 ("name-mangler:" ":define" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "define-format" define #f ("expression") 218 19 218 32 ("name-mangler:" ":define" "walk:" "declaration?:")}
      {Lisp-Entry "define-style" define #f ("expression") 223 19 223 31 ("name-mangler:" ":define" "walk:" "declaration?:")}
      {Lisp-Entry "define-text-style" define #f ("expression") 228 19 228 36 ("name-mangler:" ":define" "walk:" "declaration?:")}
      {Lisp-Entry "define-form" define #f ("expression") 233 19 233 30 (":define" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "define-trait" define #f ("expression") 238 19 238 31 (":define" "walk:" "2" "tabulate:" "declaration?:")}
      {Lisp-Entry "define-handler" define #f ("expression") 243 19 243 33 (":define-handler" "walk:" "1" "tabulate:" "select" "edit" "calculate" "modifiers:" "declaration?:")}
      {Lisp-Entry "assert" define #f ("expression") 255 19 255 25 ("1" "tabulate:")}
      {Lisp-Entry "attributes" define #f ("expression") 258 19 258 29 (":attributes" "walk:" "1" "tabulate:")}
      {Lisp-Entry "bind" define #f ("expression") 262 19 262 23 ("2" "tabulate:")}
      {Lisp-Entry "call-with-catch" define #f ("expression") 265 19 265 34 ("2" "tabulate:")}
      {Lisp-Entry "catch" define #f ("expression") 268 19 268 24 ("1" "tabulate:")}
      {Lisp-Entry "cotry" define #f ("expression") 271 19 271 24 ("1" "tabulate:")}
      {Lisp-Entry "ecase" define #f ("expression") 274 19 274 24 ("1" "tabulate:")}
      {Lisp-Entry "<form>" define #f ("expression") 277 19 277 25 ("0" "tabulate:")}
      {Lisp-Entry "jml" define #f ("expression") 280 19 280 22 ("0" "tabulate:")}
      {Lisp-Entry "<jml>" define #f ("expression") 283 19 283 24 ("0" "tabulate:")}
      {Lisp-Entry "match" define #f ("expression") 286 19 286 24 ("1" "tabulate:")}
      {Lisp-Entry "match-regexp" define #f ("expression") 289 19 289 31 ("1" "tabulate:")}
      {Lisp-Entry "new" define #f ("expression") 292 19 292 22 ("1" "tabulate:")}
      {Lisp-Entry "proclaim" define #f ("expression") 295 19 295 27 (":proclaim" "walk:")}
      {Lisp-Entry "prog1" define #f ("expression") 298 19 298 24 ("1" "tabulate:")}
      {Lisp-Entry "properties" define #f ("expression") 301 19 301 29 (":properties" "walk:")}
      {Lisp-Entry "synchronize" define #f ("expression") 304 19 304 30 ("1" "tabulate:")}
      {Lisp-Entry "typecase" define #f ("expression") 307 19 307 27 ("1" "tabulate:")}
      {Lisp-Entry "unless" define #f ("expression") 310 19 310 25 ("1" "tabulate:")}
      {Lisp-Entry "unwind-protect" define #f ("expression") 313 19 313 33 ("1" "tabulate:")}
      {Lisp-Entry "when" define #f ("expression") 316 19 316 23 ("1" "tabulate:")}
      {Lisp-Entry "while" define #f ("expression") 319 19 319 24 ("1" "tabulate:")}
      {Lisp-Entry "with" define #f ("expression") 322 19 322 23 ("1" "tabulate:")}
      {Lisp-Entry "c-constant" define #f ("expression") 331 19 331 29 (":c-constant" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "c-declare" define #f ("expression") 336 19 336 28 (":c-declare" "walk:")}
      {Lisp-Entry "c-definition" define #f ("expression") 339 19 339 31 (":c-definition" "walk:" "5" "tabulate:" "public" "package" "protected" "private" "modifiers:" "declaration?:")}
      {Lisp-Entry "c-enumeration" define #f ("expression") 345 19 345 32 (":c-enumeration" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "c-external" define #f ("expression") 350 19 350 29 (":c-external" "walk:" "declaration?:")}
      {Lisp-Entry "c-include" define #f ("expression") 354 19 354 28 (":c-include" "walk:")}
      {Lisp-Entry "c-initialize" define #f ("expression") 357 19 357 31 (":c-initialize" "walk:")}
      {Lisp-Entry "c-named-declare" define #f ("expression") 360 19 360 34 (":c-named-declare" "walk:")}
      {Lisp-Entry "c-structure" define #f ("expression") 363 19 363 30 (":c-structure" "walk:" "1" "tabulate:" "declaration?:")}
      {Lisp-Entry "c-type" define #f ("expression") 368 19 368 25 (":c-type" "walk:" "declaration?:")}
      {Lisp-Entry "com-external" define #f ("expression") 378 19 378 31 (":com-external" "walk:" "declaration?:")}}})
