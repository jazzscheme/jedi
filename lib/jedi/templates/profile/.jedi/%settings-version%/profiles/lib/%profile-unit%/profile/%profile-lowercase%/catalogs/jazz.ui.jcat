"Action"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "action" "Action.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.action.Action" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Action" class #f 40 7 40 13 ("Object")
        {Lisp-Entry "action-context" slot #f 43 8 43 22 ()}
        {Lisp-Entry "get-action-context" accessor #f 43 30 43 38 ()}
        {Lisp-Entry "action-name" slot #f 44 8 44 19 ()}
        {Lisp-Entry "get-action-name" accessor #f 44 30 44 38 ()}
        {Lisp-Entry "properties" slot #f 45 8 45 18 ()}
        {Lisp-Entry "get-properties" accessor #f 45 30 45 38 ()}
        {Lisp-Entry "initialize" method #f 48 20 48 30 ("properties~self" "action-name~self" "action-context~self" "set!" "nextmethod" "properties" "action-name" "action-context")}
        {Lisp-Entry "print" method #f 55 20 55 25 ("properties" "not-null?" "action-name" "action-context" "self" "class-of" "category-name" "format" "readably" "printer")}}}})
"Action-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Action-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Action-Event" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Action-Event" class #f 43 7 43 19 ("Event")}}})
"Action-Icon"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Action-Icon.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Action-Icon" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Action-Icon" class #f 45 20 45 31 (":images" "portfolio:" "tooltip?:" "22" "Dimension" "size:" "Push-Tool")}}})
"Action-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "action" "Action-Item.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.action.Action-Item" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Action-Item" class #f 45 7 45 18 ("explicit" "initialize" "Component")
        {Lisp-Entry "action-handler" property #f 48 12 48 26 ()}
        {Lisp-Entry "get-action-handler" accessor #f 48 55 48 63 ()}
        {Lisp-Entry "set-action-handler" accessor #f 48 55 48 63 ()}
        {Lisp-Entry "shortcut" property #f 49 12 49 20 ()}
        {Lisp-Entry "alternate-shortcut" property #f 50 12 50 30 ()}
        {Lisp-Entry "enabled?" property #f 51 12 51 20 ()}
        {Lisp-Entry "actionables" slot #f 54 8 54 19 ()}
        {Lisp-Entry "get-actionables" accessor #f 54 42 54 50 ()}
        {Lisp-Entry "get-shortcut" method #f 62 18 62 30 ("shortcut")}
        {Lisp-Entry "set-shortcut" method #f 66 18 66 30 ("process-shortcut-update" "shortcut" "set!" "value")}
        {Lisp-Entry "get-alternate-shortcut" method #f 71 18 71 40 ("alternate-shortcut")}
        {Lisp-Entry "set-alternate-shortcut" method #f 75 18 75 40 ("process-shortcut-update" "alternate-shortcut" "set!" "value")}
        {Lisp-Entry "get-enabled?" method #f 80 18 80 30 ("enabled?")}
        {Lisp-Entry "set-enabled?" method #f 84 18 84 30 ("process-enabled-update" "set!" "boolean" "enabled?" "neq?" "when" "value")}
        {Lisp-Entry "register-actionable" method #f 95 18 95 37 ("enabled-update" "self" "shortcut-update" "cons" "actionables" "set!" "actionable")}
        {Lisp-Entry "unregister-actionable" method #f 101 18 101 39 ("remove!" "actionables" "set!" "actionable")}
        {Lisp-Entry "process-shortcut-update" method #f 105 11 105 34 ("actionables" "self" "shortcut-update" "actionable" "lambda" "for-each")}
        {Lisp-Entry "process-enabled-update" method #f 111 11 111 33 ("actionables" "self" "enabled-update" "actionable" "lambda" "for-each")}
        {Lisp-Entry "invoke" method #f 124 18 124 24 ("invoke" ":action" "Action-Event" "new" "apply" "action-handler" "get-properties" "or" "let*" "enabled?" "when" "event" "event:" "action" "action:" "properties" "sender")}
        {Lisp-Entry "get-class-descriptor" method #f 136 25 136 45 ("Action-Item-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 145 11 145 17 ()
        {Lisp-Entry "Action-Item-Descriptor" class #f 151 7 151 29 ("enabled?" "alternate-shortcut" "action-handler" "name:" "shortcut" "categorized:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Image-Resource" "image:" "Component-Descriptor")}}}})
"Actionable"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "action" "Actionable.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.action.Actionable" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Actionable" interface #f 43 11 43 21 ()
        {Lisp-Entry "shortcut-update" method #f 46 35 46 50 ("action-item")}
        {Lisp-Entry "enabled-update" method #f 47 35 47 49 ("action-item")}}}})
"Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "action" "Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.action.Actions" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Actions" class #f 45 7 45 14 ("Component")
        {Lisp-Entry "actions-orphaned?" method #f 53 26 53 43 ()}
        {Lisp-Entry "get-class-descriptor" method #f 62 25 62 45 ("Actions-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 71 11 71 17 ()
        {Lisp-Entry "Actions-Descriptor" class #f 77 7 77 25 ("categorized:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Component-Descriptor")
          {Lisp-Entry "component-get-addable-classes" method #f 85 20 85 49 ("Action-Item" "list" "component")}
          {Lisp-Entry "component-get-addable-details" method #f 90 20 90 49 ("shortcut" "200" "name-info" "component")}}}}})
"Activities-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "activity" "Activities-Manager.jazz"} 1289844379
    {Lisp-Entry "jazz.ui.activity.Activities-Manager" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Activities-Manager" class #f 45 20 45 38 ("100" "337" "375" "width:" "title:" "row" "selection-mode:" "multiple-selection?:" "on-return-press" "return-press-handler:" "on-context-menu" "context-menu-handler:" "on-double-click" ":form" "double-click-handler:" "results" "header" "fill" "content" "tool" "style:" "hscroll?:" "vscroll?:" "center" "scroller" "on-launch" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "launch" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "external-name" method #f 62 25 62 38 ("activities-manager" "'activities-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 71 25 71 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 75 25 75 35 ()}
        {Lisp-Entry "get-tools-view" method #f 84 20 84 34 ("tools" "'tools" "locate")}}}})
"Activity"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "activity" "Activity.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.activity.Activity" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Activity" class #f 40 20 40 28 ("Object")}
      {Lisp-Entry "Activity" class #f 46 20 46 28 ("initialize" "Thread")
        {Lisp-Entry "reporter" slot #f 49 8 49 16 ()}
        {Lisp-Entry "unregister?" slot #f 50 8 50 19 ()}
        {Lisp-Entry "initialize" method #f 58 11 58 21 ("destroy-mandatory" "unregister?~self" "set!" "nextmethod" "apply" "others" "unregister?" "bind-keywords" "rest")}
        {Lisp-Entry "destroy" method #f 70 11 70 18 ("nextmethod" "unregister-reporter")}
        {Lisp-Entry "unregister-reporter" method #f 75 11 75 30 ("set!" "get-manager" "unregister-activity" "reporter" "unregister?" "and" "when")}
        {Lisp-Entry "get-manager" method #f 86 18 86 29 ("get-activity-manager" "visible?" "visible?:")}
        {Lisp-Entry "get-reporter" method #f 95 18 95 30 ("get-manager" "register-activity" "set!" "reporter" "unless")}
        {Lisp-Entry "cancel-requested?" method #f 101 18 101 35 ("get-reporter" "cancel-requested?")}
        {Lisp-Entry "set-range" method #f 105 18 105 27 ("get-reporter" "set-range" "range")}
        {Lisp-Entry "user-message" method #f 109 18 109 30 ("get-reporter" "get-user-message" "apply" "rest" "fmt")}
        {Lisp-Entry "update-view" method #f 113 18 113 29 ("get-reporter" "get-root" "update-view")}
        {Lisp-Entry "set-pos" method #f 117 18 117 25 ("get-reporter" "set-pos" "pos")}
        {Lisp-Entry "delta-pos" method #f 121 18 121 27 ("get-reporter" "delta-pos" "increment")}
        {Lisp-Entry "set-step" method #f 125 18 125 26 ("get-reporter" "set-step" "increment")}
        {Lisp-Entry "step-it" method #f 129 18 129 25 ("get-reporter" "step-it")}
        {Lisp-Entry "set-done" method #f 133 18 133 26 ("get-reporter" "set-done")}}}})
"Activity-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "activity" "Activity-Manager.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.activity.Activity-Manager" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Activity-Manager" class #f 46 20 46 36 ("border" "fill" "layout-type:" "root" "name:" "57" "247" "Dimension" "size:" "917" "787" "Point" "position:" "title:" "Palette")
        {Lisp-Entry "window-style" method #f 56 11 56 23 ("WS_CLIPCHILDREN" "WS_POPUP" "bitwise-ior" "rest")}
        {Lisp-Entry "show" method #f 60 20 60 24 ("show-noactivate" "get-application" "get-active?" "when" "set-visible-flag")}
        {Lisp-Entry "mouse-activate?" method #f 66 20 66 35 ()}
        {Lisp-Entry "on-close" method #f 75 20 75 28 ("hide" "evt")}
        {Lisp-Entry "destroy" method #f 79 20 79 27 ("nextmethod" "destroy-manager")}
        {Lisp-Entry "close-manager" method #f 89 18 89 31 ("close" "get-reporters" "not-null?" "unless")}
        {Lisp-Entry "toggle-visible?" method #f 99 18 99 33 ("set-visible?" "delay:" "up" "'up" "direction:" "Wipe-Effect" "new" "root" "set-effect" "length" "1" "null?" "if" "0.005" "/" "delay" "get-reporters" "reporters" "let*" "when" "get-visible?" "not" "visible?" "let")}
        {Lisp-Entry "register-activity" method #f 114 18 114 35 ("update-rectangle" "update-title" "14" "get-width" "-" "Dimension" "set-size" "get-height" "height" "rank:" "parent:" "Activity-Reporter" "new" "reporter" "'border" "locate" "border" "1" "max-reporter-rank" "+" "0" "null?" "if" "rank" "get-reporters" "reporters" "get-size" "size" "let*")}
        {Lisp-Entry "unregister-activity" method #f 127 18 127 37 ("update-rectangle" "update-title" "close" "reporter")}
        {Lisp-Entry "update-title" method #f 138 21 138 33 ("activities" "'activities" "child" "when" "get-application" "find-status-bar" "status" "let" "set-title" "1" "format-cardinality" "capitalize" "format" "0" "=" "if" "text" "get-reporters" "get-done" "not" "reporter" "lambda" "count-if" "n" "let*")}
        {Lisp-Entry "update-rectangle" method #f 152 21 152 37 ("get-v" "-" "get-h" "Point" "new" "2" "8" "*" "10" "height" "car" "get-size" "get-height" "v" "max-reporter-rank" "1" "+" "n" "let*" "57" "247" "Dimension" "set-size" "set-position" "hide" "begin" "null?" "if" "manager-position" "base" "reporters" "get-width" "width" "reporter-rank" "key:" "get-reporters" "<" "sort" "increase!" "set-rank" "reporter" "lambda" "for-each" "0" "rank" "let" "compact-reporters" "define")}
        {Lisp-Entry "clear-done" method #f 176 18 176 28 ("update-rectangle" "get-reporters" "close" "get-done" "when" "reporter" "lambda" "for-each")}
        {Lisp-Entry "get-reporters" method #f 189 21 189 34 ("border" "'border" "locate" "get-children")}
        {Lisp-Entry "max-reporter-rank" definition #f 193 15 193 32 ("reporter-rank" "map" "max" "apply" "reporters")}
        {Lisp-Entry "reporter-rank" definition #f 197 15 197 28 ("get-rank" "reporter")}}
      {Lisp-Entry "Activities-Border" class #f 206 7 206 24 ("View")
        {Lisp-Entry "draw" method #f 209 20 209 24 ("bottom" "sunken" "'sunken" "right" "top" "left" "edges:" "outer:" "raised" "'raised" "inner:" "draw-edge" "get-bounds" "bounds" "let" "lv" "lh" "context" "surface")}}}})
"Activity-Reporter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "activity" "Activity-Reporter.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.activity.Activity-Reporter" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Activity-Reporter" class #f 45 20 45 37 ("on-cancel" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "15" "157" "cancel" "20" "progress" "16" "150" "0" "Point" "position:" "message" "name:" "37" "180" "Dimension" "size:" "explicit" "initialize" "View")
        {Lisp-Entry "rank" property #f 48 12 48 16 ()}
        {Lisp-Entry "cancelled?" slot #f 51 8 51 18 ()}
        {Lisp-Entry "done?" slot #f 52 8 52 13 ()}
        {Lisp-Entry "install" method #f 62 20 62 27 ("0" "set-pos" "'progress" "locate" "progress" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-rank" method #f 73 18 73 26 ("rank")}
        {Lisp-Entry "set-rank" method #f 77 18 77 26 ("8" "get-height" "*" "+" "10" "Point" "new" "set-position" "get-size" "size" "let" "set!" "/=" "rank" "not" "or" "when" "r")}
        {Lisp-Entry "cancel-requested?" method #f 84 18 84 35 ("cancelled?")}
        {Lisp-Entry "get-done" method #f 88 18 88 26 ("done?")}
        {Lisp-Entry "resize" method #f 97 20 97 26 ("cancel" "'cancel" "move-figure" "progress" "'progress" "0" "message" "'message" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-cancel" method #f 104 11 104 20 ("set-message" "cancelled?" "set!" "update-rectangle" "close" "get-frame" "frame" "let" "done?" "if" "evt")}
        {Lisp-Entry "set-message" method #f 118 18 118 29 ("message" "'message" "locate" "set-title" "msg")}
        {Lisp-Entry "user-message" method #f 122 18 122 30 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "set-done" method #f 126 18 126 26 ("get-frame" "update-title" "Image-Resource" "cancel" "'cancel" "locate" "set-resource" "done?" "set!")}
        {Lisp-Entry "set-infinite?" method #f 132 18 132 31 ("progress" "'progress" "locate" "set-infinite?" "flag")}
        {Lisp-Entry "set-range" method #f 136 18 136 27 ("progress" "'progress" "locate" "set-range" "range")}
        {Lisp-Entry "set-pos" method #f 140 18 140 25 ("progress" "'progress" "locate" "set-pos" "pos")}
        {Lisp-Entry "delta-pos" method #f 144 18 144 27 ("progress" "'progress" "locate" "delta-pos" "increment")}
        {Lisp-Entry "set-step" method #f 148 18 148 26 ("progress" "'progress" "locate" "set-step" "increment")}
        {Lisp-Entry "step-it" method #f 152 18 152 25 ("progress" "'progress" "locate" "step-it")}}}})
"Anchor-Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Anchor-Style.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Anchor-Style" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Anchor-Style" class #f 43 7 43 19 ("Text-Style")}
      {Lisp-Entry "Anchor-Style" class #f 49 7 49 19 ("attributes" "Text-Style")
        {Lisp-Entry "label" definition #f 53 5 53 10 ()}
        {Lisp-Entry "get-label" accessor #f 53 5 53 10 ()}
        {Lisp-Entry "set-label" accessor #f 53 5 53 10 ()}}}})
"Bindings"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "action" "Bindings.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.action.Bindings" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Bindings" class #f 44 7 44 15 ("Component")}}})
"Bindings-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Bindings-Manager.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.preference.Bindings-Manager" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Bindings-Manager" class #f 49 20 49 36 ("shortcuts" "visible?:" "shortcuts-border" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "document" "center" "actions-border" "120" "default?:" "on-bind-shortcut" "100" "tail" "bind-shortcut" "on-edit-action" "edit-action" "on-restore-shortcut" "restore-shortcut" "on-unbind-shortcut" "unbind-shortcut" "on-filter-text-change" "content-change-handler:" "actions" "target-name:" "filter-text" "content" "vscroll?:" "hscroll?:" "entry" "style:" "edge" "fill" "border-type:" "21" "170" "Label" "Font" "font:" "20" "31" "title:" "-2" "head" "justification:" "filter-label" "traits" "Entry-Border" "Medium" "Color" "border-color:" "1" "2" "border-insets:" "140" "16" "on-categorize" "4" "on-shortcuts" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "border" "layout-type:" "639" "420" "Dimension" "size:" "initialize" "Layout-View")
        {Lisp-Entry "categorized?" slot #f 52 8 52 20 ()}
        {Lisp-Entry "shortcuts?" slot #f 53 8 53 18 ()}
        {Lisp-Entry "conclude" method #f 103 20 103 28 ("update-buttons" "update-traits" "view-bindings" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" method #f 115 25 115 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 119 25 119 35 ()}
        {Lisp-Entry "host-position" method #f 123 25 123 38 ("14" "28" "Point")}
        {Lisp-Entry "host-size" method #f 127 25 127 34 ("635" "595" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 131 20 131 35 ("home")}
        {Lisp-Entry "focus-default" method #f 135 20 135 33 ("filter-text" "'filter-text" "locate" "acquire-focus")}
        {Lisp-Entry "get-tree" method #f 144 11 144 19 ("actions" "'actions" "shortcuts" "'shortcuts" "locate" "shortcuts?" "if")}
        {Lisp-Entry "get-filter-text" method #f 150 11 150 26 ("filter-text" "'filter-text" "locate")}
        {Lisp-Entry "on-shortcuts" method #f 159 11 159 23 ("filter-target" "view-bindings" "layout-view" "categorized?" "get-node-column" "set-toplevel-controls?" "shortcuts-border" "'shortcuts-border" "actions-border" "'actions-border" "locate" "set-visible?" "get-tree" "get-name" "get-filter-text" "set-target-name" "not" "shortcuts?" "set!" "evt")}
        {Lisp-Entry "on-categorize" method #f 170 11 170 24 ("get-filter-text" "filter-target" "view-bindings" "get-tree" "get-node-column" "set-toplevel-controls?" "not" "categorized?" "set!" "evt")}
        {Lisp-Entry "on-show-all" method #f 177 11 177 22 ("evt")}
        {Lisp-Entry "on-double-click" method #f 181 11 181 26 ("bind-shortcut" "edit-action" "evt")}
        {Lisp-Entry "on-return-press" method #f 187 20 187 35 ("bind-shortcut" "edit-action" "evt")}
        {Lisp-Entry "on-unbind-shortcut" method #f 193 11 193 29 ("unbind-shortcut" "evt")}
        {Lisp-Entry "on-restore-shortcut" method #f 197 11 197 30 ("restore-shortcut" "evt")}
        {Lisp-Entry "on-bind-shortcut" method #f 201 11 201 27 ("bind-shortcut" "evt")}
        {Lisp-Entry "on-edit-action" method #f 205 11 205 25 ("edit-action" "evt")}
        {Lisp-Entry "on-selection-change" method #f 209 11 209 30 ("update-buttons" "evt")}
        {Lisp-Entry "trait-change" method #f 213 11 213 23 ("update-buttons" "get-filter-text" "filter-target" "view-bindings" "get-name" "active-bindings" "'active-bindings" "get-preferences" "set-preferences-property" "set-active-trait" "lambda" ":wait" "with-cursor" "get-active-trait" "neq?" "when" "get-bindings" "bindings" "get-application" "appl" "let" "trait")}
        {Lisp-Entry "on-filter-text-change" method #f 226 11 226 32 ("get-filter-text" "filter-target" "evt")}
        {Lisp-Entry "unbind-shortcut" method #f 235 11 235 26 ("update-action-item" "update-shortcut" "shortcut" "'shortcut" "set-property" "get-shortcut" "old" "get-bindings-designer" "designer" "selected-action-item/rank" "rank" "action-item" "receive" "get-tree" "tree" "get-application" "appl" "let")}
        {Lisp-Entry "restore-shortcut" method #f 246 11 246 27 ("update-action-item" "update-shortcut" "shortcut" "'shortcut" "remove-property" "get-shortcut" "old" "get-bindings-designer" "designer" "selected-action-item/rank" "rank" "action-item" "receive" "get-tree" "tree" "get-application" "appl" "let")}
        {Lisp-Entry "bind-shortcut" method #f 257 11 257 24 ("update-action-item" "update-shortcut" "Shortcut-Chooser" "get-modal" "shortcut" "'shortcut" "set-property" "get-shortcut" "old" "get-bindings-designer" "designer" "selected-action-item/rank" "rank" "action-item" "receive" "get-tree" "tree" "get-application" "appl" "let")}
        {Lisp-Entry "update-action-item" definition #f 268 15 268 33 ("invalidate-cell" "shortcut" "'shortcut" "owner-image" "image:" "Tree-Image" "get-shortcut" "present-shortcut" "title:" "Tree-Label" "set-cell-data" "2" "owner-cell" "1" "Cell" "new" "shortcut-cell" "let" "rank" "action-item" "designer" "tree")}
        {Lisp-Entry "edit-action" method #f 282 11 282 22 ("get-method-name" "get-application" "edit-definitions" "bell" "not" "if" "selected-action-item" "get-action-handler" "action-handler" "let")}
        {Lisp-Entry "selected-action-item/rank" method #f 294 11 294 36 ("values" "get-row" "get-user-data" "data" "let" "when" "get-single-selection" "rank" "get-tree" "tree" "let*")}
        {Lisp-Entry "selected-action-item" method #f 302 11 302 31 ("rank" "action-item" "receive" "not" "if" "selected-action-item/rank" "info" "let")}
        {Lisp-Entry "view-bindings" method #f 315 11 315 24 ("view-bindings" "get-tree" "tree" "flat" "'flat" "categorized" "'categorized" "categorized?" "kind" "actions" "'actions" "shortcuts" "'shortcuts" "shortcuts?" "if" "what" "get-bindings" "bindings" "get-bindings-designer" "designer" "get-application" "appl" "let")}
        {Lisp-Entry "update-traits" method #f 325 11 325 24 ("get-branch" "get-trait" "set-value" "child-traits" "get-name" "->string" "list" "trait" "lambda" "map" "set-choices" "traits" "'traits" "locate" "combo" "get-bindings" "bindings" "let")}
        {Lisp-Entry "update-buttons" method #f 334 11 334 25 ("bind-shortcut" "'bind-shortcut" "edit-action" "'edit-action" "restore-shortcut" "'restore-shortcut" "unbind-shortcut" "'unbind-shortcut" "locate" "set-enabled?" "selected-action-item" "action-item" "let")}}
      {Lisp-Entry "Traits-Combo" class #f 350 7 350 19 ("Combo-Box")
        {Lisp-Entry "content-change" method #f 353 20 353 34 ("get-value" "get-host" "get-guest" "trait-change" "origin")}}}})
"Bindings-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "action" "Bindings-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.action.Bindings-Preferences" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Bindings-Preferences" class #f 44 20 44 40 ("title:" "Preferences")
        {Lisp-Entry "get-class-descriptor" method #f 56 25 56 45 ("Bindings-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 65 11 65 17 ()
        {Lisp-Entry "Bindings-Preferences-Descriptor" class #f 71 7 71 38 ("can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")}}}})
"Bindings-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Bindings-Tree.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Bindings-Tree" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Bindings-Tree" class #f 45 20 45 33 ("Tree-View")
        {Lisp-Entry "category-icon" definition #f 53 14 53 27 ("Image-Resource")}
        {Lisp-Entry "action-icon" definition #f 56 14 56 25 ("Image-Resource")}
        {Lisp-Entry "shortcut-icon" definition #f 59 14 59 27 ("Image-Resource")}
        {Lisp-Entry "view-bindings" method #f 63 21 63 34 ("shortcuts" "categorized" "flat" "with-update-locked" "remove-every-row" "get-key" "equal?" "get-modifiers" "queue-list" "memq?" "set-third!" "not-null?" "'warning" "'conflict" "eq?" "if" "neq?" "and" "act" "collect" "conflicts" "table-ref" "flag-conflicts!" "table-add" "enqueue" "add-binding" "shortcut-hash" "hash:" "shortcut=?" "test:" "make-table" "table" "new-queue" "queue" "view-shortcuts-categorized" "gather-bindings" "partition-bindings" "car" "key:" "nu<?" "sort" "present-key" "shortcut-icon" "present-modifiers" "else" "Image-Resource" "warning" "case" "conflict" "binding" "modifiers" "bind" "partition" "view-shortcuts-flat" "father:" "category-icon" "->string" "row" "view-actions-categorized" "get-children" "Actions" "is?" "when" "actions" "view-actions-flat" "user-data:" "present-shortcut" "Tree-Label" "action-icon" "get-parent" "get-name" "format" "title:" "Tree-Node" "list" "children:" "add-row" "shortcut-owner-image" "image:" "Tree-Image" "new" "owner" "get-alternate-shortcut" "alternate-shortcut" "get-shortcut" "shortcut" "let" "action" "lambda" "for-each" "view-actions-list" "define" "kind" "what" "bindings" "designer")}
        {Lisp-Entry "present-shortcut" method #f 188 21 188 37 ("present" "not" "if" "shortcut")}
        {Lisp-Entry "shortcut-owner-image" method #f 194 21 194 41 ("default-owner-image" "else" "root-owner-image" "get-reference" "eq?" "trait-owner-image" "Trait" "is?" "or" "cond" "alternate-shortcut" "'alternate-shortcut" "alternate-owner" "shortcut" "'shortcut" "find-owner" "shortcut-owner" "let" "component" "designer")}
        {Lisp-Entry "default-owner-image" method #f 202 11 202 30 ()}
        {Lisp-Entry "root-owner-image" method #f 206 11 206 27 ("Image-Resource")}
        {Lisp-Entry "trait-owner-image" method #f 210 11 210 28 ("Image-Resource")}}
      {Lisp-Entry "BindingsByActions-Tree" class #f 219 7 219 29 ("center" "justification:" "25" "owner" "alternate-shortcut" "115" "shortcut" "toplevel-controls?:" "235" "width:" "title:" "name:" "action" "filled-column:" ":images" "portfolio:" "Bindings-Tree")}
      {Lisp-Entry "BindingsByShortcuts-Tree" class #f 235 7 235 31 ("25" "owner" "center" "justification:" "80" "conflict" "235" "60" "key" "toplevel-controls?:" "110" "width:" "title:" "modifier" "name:" "action" "filled-column:" ":images" "portfolio:" "Bindings-Tree")}}})
"Border-Layout"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "layout" "Border-Layout.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.layout.Border-Layout" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Border-Layout" class #f 43 7 43 20 ("0" "Rect" "initialize" "Layout")
        {Lisp-Entry "insets" property #f 46 12 46 18 ()}
        {Lisp-Entry "get-insets" accessor #f 46 63 46 71 ()}
        {Lisp-Entry "set-insets" accessor #f 46 63 46 71 ()}
        {Lisp-Entry "padding" property #f 47 12 47 19 ()}
        {Lisp-Entry "get-padding" accessor #f 47 63 47 71 ()}
        {Lisp-Entry "set-padding" accessor #f 47 63 47 71 ()}
        {Lisp-Entry "layout" method #f 55 20 55 26 ("get-bottom" "get-right" "get-top" "insets" "get-left" "+" "center" "'center" "east" "'east" "get-width" "west" "'west" "decrease!" "-" "south" "'south" "padding" "set!" "increase!" "Dimension" "set-size" "Point" "new" "set-position" "get-size" "get-height" "let" "north" "'north" "get-location" "eq?" "when" "for-each" "bottom-padding" "right-padding" "top-padding" "left-padding" "bottom" "right" "top" "0" "left" "reverse" "reversed" "get-visible?" "Figure" "is?" "and" "figure" "lambda" "collect-if" "visibles" "let*" "height" "width" "figures")}}}})
"Border-Look"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Border-Look.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Border-Look" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Border-Look" class #f 43 7 43 18 ("initialize" "Look")
        {Lisp-Entry "edge-flat?" property #f 46 12 46 22 ()}
        {Lisp-Entry "get-edge-flat?" accessor #f 46 47 46 55 ()}
        {Lisp-Entry "set-edge-flat?" accessor #f 46 47 46 55 ()}}}})
"Border-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Border-View.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.view.Border-View" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Border-View" class #f 49 7 49 18 ("fill" "layout-type:" "1" "Rect" "Black" "name:" "Color" "explicit" "solid" "'solid" "initialize" "Layout-View")
        {Lisp-Entry "border-type" property #f 53 12 53 23 ()}
        {Lisp-Entry "border-color" property #f 54 12 54 24 ()}
        {Lisp-Entry "border-insets" property #f 55 12 55 25 ()}
        {Lisp-Entry "style" property #f 56 12 56 17 ()}
        {Lisp-Entry "get-border-type" method #f 68 18 68 33 ("border-type")}
        {Lisp-Entry "set-border-type" method #f 72 18 72 33 ("invalidate-borders" "recalculate-border-insets" "border-type" "set!" "type")}
        {Lisp-Entry "get-border-color" method #f 78 18 78 34 ("border-color")}
        {Lisp-Entry "set-border-color" method #f 82 18 82 34 ("invalidate-borders" "border-color" "set!" "color")}
        {Lisp-Entry "get-border-insets" method #f 87 18 87 35 ("border-insets")}
        {Lisp-Entry "set-border-insets" method #f 91 18 91 35 ("layout-view" "border-insets" "set!" "insets")}
        {Lisp-Entry "get-style" method #f 96 18 96 27 ("style")}
        {Lisp-Entry "set-style" method #f 100 18 100 27 ("recalculate-border-insets" "style" "set!" "value")}
        {Lisp-Entry "recalculate-border-insets" method #f 105 29 105 54 ("3" "shadow" "2" "else" "1" "entry" "style" "palette" "raised" "edge" "0" "Rect" "set-border-insets" "none" "border-type" "case")}
        {Lisp-Entry "add-child" method #f 117 20 117 29 ("layout-view" "View" "is?" "when" "nextmethod" "child")}
        {Lisp-Entry "fill-position" method #f 128 20 128 33 ("get-top" "border-insets" "get-left" "Point" "new" "nextmethod" "+")}
        {Lisp-Entry "fill-size" method #f 133 20 133 29 ("get-bottom" "get-top" "get-right" "border-insets" "get-left" "+" "Dimension" "new" "nextmethod" "-")}
        {Lisp-Entry "inner?" method #f 145 20 145 26 ("children" "memq?" "view")}
        {Lisp-Entry "invalidate-borders" method #f 154 11 154 29 ("border-insets" "insets:" "invalidate-border")}
        {Lisp-Entry "draw" method #f 163 20 163 24 ("+" "line" "set-line-width" "Black" "set-color" "get-bottom" "get-right" "-" "0" "expand-rect" "shadow" "'raised" "raised" "rectangle" "'rectangle" "edges:" "2" "1" "border-insets" "get-left" "inner:" "sunken" "'sunken" "outer:" "draw-edge" "else" "Outline-Border" "-1" "inflate-rect" "inner" "outline" "'outline" "Entry-Border" "get-edge-flat?" "entry" "'entry" "style" "eq?" "and" "cond" "get-look" "look" "edge" "border-color" "when" "solid" "unspecified" "none" "border-type" "case" "Dark" "name:" "Color" "frame-rect" "view-enabled?" "not" "if" "get-bounds" "bounds" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-children" method #f 195 20 195 33 ("top" "edges:" "raised" "'raised" "inner:" "sunken" "'sunken" "outer:" "draw-edge" "get-bounds" "bounds" "let" "palette" "border-type" "case" "nextmethod" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "nodes" "surface")}
        {Lisp-Entry "get-look" method #f 208 20 208 28 ("border/outline" "'border/outline" "outline" "border/entry" "'border/entry" "find-look" "entry" "style" "case")}
        {Lisp-Entry "get-class-descriptor" method #f 219 25 219 45 ("Border-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 228 11 228 17 ()
        {Lisp-Entry "Border-Type-Domain" class #f 234 7 234 25 ("Enumeration-Domain")
          {Lisp-Entry "Choices" definition #f 237 14 237 21 ("shadow" "palette" "raised" "edge" "solid" "none")}
          {Lisp-Entry "finish" method #f 246 20 246 26 ("Choices" "set-choices" "nextmethod" "rest")}}
        {Lisp-Entry "Border-View-Descriptor" class #f 251 7 251 29 ("style" "border-insets" "border-color" "domain" "title:" "border-type" "name:" "Layout-View-Descriptor")}}}})
"Capture-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Capture-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Capture-Event" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Capture-Event" class #f 43 7 43 20 ("Event")
        {Lisp-Entry "window" slot #f 46 8 46 14 ()}
        {Lisp-Entry "get-window" accessor #f 46 22 46 30 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("window" "set!" "nextmethod" "wnd" "sender" "kind")}}}})
"Check-Box"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Check-Box.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Check-Box" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Check-Box" class #f 48 7 48 16 ("Black" "name:" "Color" "explicit" "initialize" "View")
        {Lisp-Entry "box-size" definition #f 51 14 51 22 ("13")}
        {Lisp-Entry "checked?" property #f 55 12 55 20 ()}
        {Lisp-Entry "selectable?" property #f 56 12 56 23 ()}
        {Lisp-Entry "get-selectable?" accessor #f 56 65 56 73 ()}
        {Lisp-Entry "set-selectable?" accessor #f 56 65 56 73 ()}
        {Lisp-Entry "editable?" property #f 57 12 57 21 ()}
        {Lisp-Entry "get-editable?" accessor #f 57 65 57 73 ()}
        {Lisp-Entry "set-editable?" accessor #f 57 65 57 73 ()}
        {Lisp-Entry "color" property #f 58 12 58 17 ()}
        {Lisp-Entry "flat?" property #f 59 12 59 17 ()}
        {Lisp-Entry "get-flat?" accessor #f 59 65 59 73 ()}
        {Lisp-Entry "set-flat?" accessor #f 59 65 59 73 ()}
        {Lisp-Entry "tracking?" slot #f 62 8 62 17 ()}
        {Lisp-Entry "inside?" slot #f 63 8 63 15 ()}
        {Lisp-Entry "default-size" method #f 66 20 66 32 ("16" "100" "Dimension")}
        {Lisp-Entry "get-sort-value" method #f 70 20 70 34 ("title" "localize")}
        {Lisp-Entry "get-checked?" method #f 79 18 79 30 ("checked?")}
        {Lisp-Entry "set-checked?" method #f 83 18 83 30 ("invalidate-view" "set-modified?" "call-content-change" "checked?" "set!" "flag")}
        {Lisp-Entry "get-color" method #f 90 18 90 27 ("color")}
        {Lisp-Entry "set-color" method #f 94 18 94 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "change-state" method #f 104 29 104 41 ("checked?" "not" "set-checked?" "reverse?")}
        {Lisp-Entry "process-change-state" method #f 108 11 108 31 ("self" "process-action" "outline-view" "not" "if" "set-modified?" "shift-down?" "change-state")}
        {Lisp-Entry "text-extent" method #f 121 11 121 22 ("effective-font" "text-extent" "localize" "title" "let")}
        {Lisp-Entry "box-rect" method #f 126 11 126 19 ("Rect" "new" "get-height" "v" "2" "0" "5" "title" "if" "box-size" "+" "get-width" "-" "quotient" "h" "text-extent" "extent" "let*")}
        {Lisp-Entry "draw" method #f 138 20 138 24 ("draw-text" "color" "determine-color" "set-text-color" "effective-font" "set-font" "Focused-Selection" "cell" "row" "get-selection-mode" "memq?" "Tree-View" "outline-view" "is?" "rect" "text-v" "18" "text-h" "selected?:" "getf" "selected?" "let" "when" "3" "draw-check" "White" "Medium" "name:" "Color" "-2" "inflate-rect" "fill-rect" "rectangle" "'rectangle" "edges:" "outer:" "sunken" "'sunken" "inner:" "draw-edge" "flat?" "unless" "inside?" "tracking?" "and" "or" "grayed?" "view-enabled?" "enabled?" "+" "Rect" "new" "box-rect" "get-height" "box-v" "0" "2" "box-size" "get-width" "-" "quotient" "box-h" "not" "center?" "text-extent" "if" "extent" "localize" "title" "let*" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-check" method #f 168 29 168 39 ("draw-check" "Black" "Dark" "name:" "Color" "if" "set-color" "checked?" "when" "grayed?" "v" "h" "surface")}
        {Lisp-Entry "key-press" method #f 179 20 179 29 ("process-change-state" "case" "key")}
        {Lisp-Entry "mouse-down" method #f 190 20 190 30 ("invalidate-view" "acquire-capture" "inside?" "tracking?" "set!" "editable?" "view-enabled?" "when" "focus?:" "outline-select" "box-rect" "in-rect?" "not" "outline-view" "and" "if" "pos")}
        {Lisp-Entry "drag-move" method #f 200 20 200 29 ("invalidate-view" "set!" "inside?" "neq?" "over-view?" "over?" "let" "tracking?" "when" "pos")}
        {Lisp-Entry "drag-up" method #f 208 20 208 27 ("process-change-state" "acquire-focus" "selectable?" "inside?" "set!" "release-capture" "tracking?" "when" "rest" "pos")}
        {Lisp-Entry "get-class-descriptor" method #f 223 25 223 45 ("Check-Box-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 232 11 232 17 ()
        {Lisp-Entry "Check-Box-Descriptor" class #f 238 7 238 27 ("flat?" "color" "editable?" "selectable?" "domain" "title:" "checked?" "name:" "title" "default:" "View-Descriptor")}}}})
"Check-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Check-Item.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Check-Item" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Check-Item" class #f 46 7 46 17 ("explicit" "initialize" "Label-Item")
        {Lisp-Entry "checked?" property #f 49 12 49 20 ()}
        {Lisp-Entry "get-checked?" method #f 57 18 57 30 ("checked?")}
        {Lisp-Entry "set-checked?" method #f 61 18 61 30 ("invalidate-view" "checked?" "set!" "flag")}
        {Lisp-Entry "preferred-prefix-width" method #f 71 20 71 42 ("0" "12" "checked?" "if")}
        {Lisp-Entry "draw-prefix" method #f 80 20 80 31 ("Image-Resource" "get-images-portfolio" "draw-image" "2" "top" "5" "left" "get-application" "appl" "let" "checked?" "when" "context" "surface")}
        {Lisp-Entry "get-class-descriptor" method #f 93 25 93 45 ("Check-Item-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 102 11 102 17 ()
        {Lisp-Entry "Check-Item-Descriptor" class #f 108 7 108 28 ("title:" "checked?" "name:" "Label-Item-Descriptor")}}}})
"Chooser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Chooser.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Chooser" module #f 37 18 37 38 ("jazz")
      {Lisp-Entry "Chooser" class #f 46 20 46 27 ("on-cancel" "310" "cancel" "on-ok" ":host" "Event-Handler" "action-handler:" "24" "80" "172" "220" "title:" "ok" "116" "404" "44" "-2" "content" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title" "name:" "206" "400" "Dimension" "size:" "View")
        {Lisp-Entry "resize" method #f 63 20 63 26 ("cancel" "'cancel" "ok" "'ok" "move-figure" "content" "'content" "locate" "size-figure" "nextmethod" "dv" "dh")}}}})
"Code-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Code-Explorer.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Code-Explorer" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Code-Explorer" class #f 46 20 46 33 ("Text-Explorer")
        {Lisp-Entry "backward-expr" method #f 49 26 49 39 ("string" "'string" "kind" "set!" "backward-constituent" "when")}
        {Lisp-Entry "forward-expr" method #f 55 26 55 38 ("string" "'string" "kind" "set!" "forward-constituent" "when")}
        {Lisp-Entry "collect-backward-exprs" method #f 61 18 61 40 ("get-mark" "cons" "set!" "backward-expr" "while" "list" "let")}
        {Lisp-Entry "collect-forward-exprs" method #f 68 18 68 39 ("get-output" "decrease!" "get-mark" "put" "forward-expr" "0" ">=" "and" "while" "List-Factory" "new" "fact" "let" "n")}
        {Lisp-Entry "expression-comment?" method #f 76 19 76 38 ("mark")}
        {Lisp-Entry "remove-expression-comments" method #f 80 18 80 44 ("cons" "cddr" "cdr" "car" "mark" "pair?" "scan" "iterate" "let" "expression-comment?" "some?" "if" "list")}}}})
"Code-Syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "syntax" "Code-Syntax.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.syntax.Code-Syntax" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Code-Syntax" class #f 43 20 43 31 ("Text-Syntax")}}})
"Code-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Code-Text-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Code-Text-Actions" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Code-Text-Actions" class #f 45 20 45 37 ("on-find-all-imports" "find-all-imports" "on-find-imports" "find-imports" "on-tabify" "tabify" "on-transpose-expr" "transpose-expr" "on-transpose-word" "transpose-word" "F5" "on-recolorize-syntax" "recolorize-syntax" "Up" "on-exit-composite" "exit-composite" "Down" "on-enter-composite" "enter-composite" "on-forward-outline" "forward-outline" "on-backward-outline" "backward-outline" "Right" "on-forward-composite" "forward-composite" "Left" ":alt" "on-backward-composite" "backward-composite" "on-edit-references" "edit-references" "F12" "on-edit-definitions" "edit-definitions" ":shift" "on-evaluate-buffer" "evaluate-buffer" "Return" ":control" "Shortcut" "shortcut:" "on-evaluate" ":focus" "Event-Handler" "action-handler:" "evaluate" "name:" "Actions")}}})
"Code-Text-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Code-Text-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Code-Text-Event" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Code-Text-Event" class #f 43 20 43 35 ("Text-Event")}}})
"Code-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Code-Text-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Code-Text-Preferences" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Code-Text-Preferences" class #f 45 20 45 41 ("Match" "highlight:" "Text-Style-Preference" "match-style:" "title:" "both" "'both" "0.5" "0" "flash" "'flash" "initialize" "Text-Preferences")
        {Lisp-Entry "default-style" property #f 48 12 48 25 ()}
        {Lisp-Entry "get-default-style" accessor #f 48 56 48 64 ()}
        {Lisp-Entry "set-default-style" accessor #f 48 56 48 64 ()}
        {Lisp-Entry "base-styles" property #f 49 12 49 23 ()}
        {Lisp-Entry "get-base-styles" accessor #f 49 56 49 64 ()}
        {Lisp-Entry "set-base-styles" accessor #f 49 56 49 64 ()}
        {Lisp-Entry "match-style" property #f 50 12 50 23 ()}
        {Lisp-Entry "get-match-style" accessor #f 50 56 50 64 ()}
        {Lisp-Entry "set-match-style" accessor #f 50 56 50 64 ()}
        {Lisp-Entry "match-action" property #f 51 12 51 24 ()}
        {Lisp-Entry "get-match-action" accessor #f 51 56 51 64 ()}
        {Lisp-Entry "set-match-action" accessor #f 51 56 51 64 ()}
        {Lisp-Entry "flash-delay" property #f 52 12 52 23 ()}
        {Lisp-Entry "get-flash-delay" accessor #f 52 56 52 64 ()}
        {Lisp-Entry "set-flash-delay" accessor #f 52 56 52 64 ()}
        {Lisp-Entry "flash-duration" property #f 53 12 53 26 ()}
        {Lisp-Entry "get-flash-duration" accessor #f 53 56 53 64 ()}
        {Lisp-Entry "set-flash-duration" accessor #f 53 56 53 64 ()}
        {Lisp-Entry "highlight-mode" property #f 54 12 54 26 ()}
        {Lisp-Entry "get-highlight-mode" accessor #f 54 56 54 64 ()}
        {Lisp-Entry "set-highlight-mode" accessor #f 54 56 54 64 ()}
        {Lisp-Entry "get-class-descriptor" method #f 68 25 68 45 ("Code-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 77 11 77 17 ()
        {Lisp-Entry "Code-Text-Preferences-Descriptor" class #f 83 7 83 39 ("highlight-mode" "flash-duration" "flash-delay" "match-action" "match-style" "base-styles" "default-style" "name:" "Text-Preferences-Descriptor")}}}})
"Code-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Code-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Code-Text-View" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Code-Text-View" class #f 54 20 54 34 ("12" "left-padding:" "Code" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "initialize" "Text-View")
        {Lisp-Entry "matching-highlights" slot #f 57 8 57 27 ()}
        {Lisp-Entry "flashing-thread" slot #f 58 8 58 23 ()}
        {Lisp-Entry "new-syntax" method #f 65 20 65 30 ("Code-Syntax" "new")}
        {Lisp-Entry "install" method #f 69 20 69 27 ("get-match-style" "Match" "'Match" "default-style" "get-name" "default" "base-style-preference" "lambda" "for-each" "get-base-styles" "base-styles-preferences" "set-default-style" "Default" "'Default" "add-style-preference" "style" "get-default-style" "default-style-preference" "when" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "host-workspaces" method #f 92 20 92 35 ("multi" "empty" "emacs" "reference" "test" "debugger" "text")}
        {Lisp-Entry "tab-press" method #f 101 20 101 29 ("tabulate" "insert-char" "get-end" "get-start" "get-line" "=" "empty-selection?" "nextmethod" "accepts-returns?" "not" "has-completion?" "or" "if" "modifiers" "key")}
        {Lisp-Entry "char-press" method #f 110 20 110 30 ("show-arguments" "eqv?" "when" "nextmethod" "key")}
        {Lisp-Entry "select-outer" method #f 116 20 116 32 ("nextmethod" "end-completion")}
        {Lisp-Entry "context-menu" method #f 121 20 121 32 ("get-context-menu" "track-popup-menu" "edit-references" "edit-definitions" "move-caret:" "context-menu-click" "always" "'always" "else" "never" "'never" "outside-selection" "'outside-selection" "not" "and" "cond" "move-caret" "let" "modifiers-down" "alt?" "control?" "shift?" "receive" "pos")}
        {Lisp-Entry "focus-actions" method #f 139 20 139 33 ("nextmethod" "code-text" "'code-text" "find-actions" "cons")}
        {Lisp-Entry "on-find-imports" method #f 149 11 149 26 ("message-box" "self" "get-syntax" "find-imports" "lambda" ":wait" "with-cursor" "symbol?" "if" "current-expr" "expr" "let" "evt")}
        {Lisp-Entry "on-find-all-imports" method #f 158 11 158 30 ("evt")}
        {Lisp-Entry "explorer-class" method #f 167 20 167 34 ("Code-Explorer")}
        {Lisp-Entry "backward-compound" method #f 176 20 176 37 ("backward-expr" "extend?" "extend?:")}
        {Lisp-Entry "forward-compound" method #f 180 20 180 36 ("forward-expr" "extend?" "extend?:")}
        {Lisp-Entry "upward-compound" method #f 184 20 184 35 ("exit-composite")}
        {Lisp-Entry "downward-compound" method #f 188 20 188 37 ("enter-composite")}
        {Lisp-Entry "on-backward-composite" method #f 192 19 192 40 ("backward-expr" "evt")}
        {Lisp-Entry "on-forward-composite" method #f 196 19 196 39 ("forward-expr" "evt")}
        {Lisp-Entry "on-backward-outline" method #f 200 19 200 38 ("get-range" "set-selection" "backward-expr" "when" "get-start" "end:" "self" "explorer-class" "new" "expl" "let" "evt")}
        {Lisp-Entry "on-forward-outline" method #f 206 19 206 37 ("get-range" "set-selection" "forward-expr" "when" "get-end" "end:" "self" "explorer-class" "new" "expl" "let" "evt")}
        {Lisp-Entry "on-enter-composite" method #f 212 19 212 37 ("enter-composite" "evt")}
        {Lisp-Entry "on-exit-composite" method #f 216 19 216 36 ("exit-composite" "evt")}
        {Lisp-Entry "backward-expr" method #f 220 29 220 42 ("set-caret" "change-selection" "if" "backward-expr" "when" "get-start" "start:" "self" "explorer-class" "new" "expl" "let" "locked-anchor?" "extend?" "extend?:")}
        {Lisp-Entry "forward-expr" method #f 228 29 228 41 ("set-caret" "change-selection" "if" "forward-expr" "when" "get-end" "end:" "self" "explorer-class" "new" "expl" "let" "locked-anchor?" "extend?" "extend?:")}
        {Lisp-Entry "enter-composite" method #f 236 29 236 44 ("set-caret" "enter-composite" "when" "get-end" "end:" "get-start" "start:" "self" "explorer-class" "new" "expl" "let")}
        {Lisp-Entry "exit-composite" method #f 242 29 242 43 ("set-caret" "exit-list" "when" "end:" "get-end" "start:" "self" "explorer-class" "new" "expl" "let")}
        {Lisp-Entry "move-caret" method #f 248 20 248 30 ("end-completion" "nextmethod" "shift?" "direction" "pos")}
        {Lisp-Entry "on-transpose-expr" method #f 253 11 253 28 ("transpose-expr" "evt")}
        {Lisp-Entry "transpose-expr" method #f 257 18 257 32 ("backward-expr" "forward-expr" "transpose-movements")}
        {Lisp-Entry "get-context" method #f 266 26 266 37 ()}
        {Lisp-Entry "edition-workspace" method #f 270 29 270 46 ()}
        {Lisp-Entry "on-edit-definitions" method #f 274 11 274 30 ("get-context" "context:" "history-item:" "edit-definitions" "edit-composite" "use-composite-name-heuristic?" "keyword->symbol" "keyword?" "if" "standardize-form" "current-history-item" "item" "else" "edition-workspace" "workspace:" "file?" "tokenise-filename" "File" "new" "edit-document" "string?" "cond" "when" "get-application" "appl" "current-expr" "form" "let" "evt")}
        {Lisp-Entry "on-edit-references" method #f 290 11 290 29 ("get-context" "context:" "current-history-item" "history-item:" "get-constituent-test" "constituent-test:" "edit-references" "standardize-form" "when" "get-application" "appl" "current-expr" "form" "let" "evt")}
        {Lisp-Entry "standardize-form" method #f 298 11 298 27 ("else" "dispatch->name" "dispatch?" "tag->name" "tag?" "cond" "form")}
        {Lisp-Entry "use-composite-name-heuristic?" method #f 304 11 304 40 ("jazz" "'jazz" "car" "eq?" "2" "length" "=" "not" "split-identifier" "parts" "let" "composite-name?" "and" "name")}
        {Lisp-Entry "expr-at" method #f 311 29 311 36 ("pos")}
        {Lisp-Entry "edit-symbol-class" method #f 315 29 315 46 ("symbol")}
        {Lisp-Entry "edit-definitions" method #f 319 21 319 37 ("definitions:" "history-item:" "Definitions-Menu" "track-popup-menu" "car" "edit" "add-history" "1" "bell" "0" "length" "case" "get-context" "context:" "get-coalesced-definitions" "definitions" "edit-composite" "use-composite-name-heuristic?" "keyword->symbol" "keyword?" "if" "standardize-form" "current-history-item" "item" "get-cataloguer" "cataloguer" "appl" "let*" "else" "edition-workspace" "workspace:" "file?" "tokenise-filename" "File" "new" "get-application" "edit-document" "string?" "cond" "when" "view->text" "expr-at" "form" "let" "pos")}
        {Lisp-Entry "edit-references" method #f 341 21 341 36 ("definitions:" "target:" "history-item:" "References-Menu" "new" "track-popup-menu" "else" "car" "edit-reference" "add-history" "1" "bell" "0" "length" "case" "get-constituent-test" "constituent-test:" "whole-words?:" "->string" "make-search-context" "list" "target" "get-context" "context:" "get-references" "references" "standardize-form" "current-history-item" "item" "get-cataloguer" "cataloguer" "get-application" "appl" "let*" "when" "view->text" "expr-at" "form" "let" "pos")}
        {Lisp-Entry "edit-composite" definition #f 357 15 357 29 ("edit" "add-history" "bell" "not" "if" "locator->entry" "entry" "let" "form" "item" "appl")}
        {Lisp-Entry "current-history-item" method #f 370 20 370 40 ("History-File-Item" "History-Document-Item" "new" "when" "get-frame" "frame" "not" "if" "get-moniker" "moniker" "get-selection" "selection" "let")}
        {Lisp-Entry "save-content" method #f 385 20 385 32 ("update-catalog" "nextmethod" "moniker")}
        {Lisp-Entry "update-catalog" method #f 395 11 395 25 ("update-file" "lambda" "post-catalog" "find-catalog" "catalog" "when" "get-moniker" "moniker" "let")}
        {Lisp-Entry "find-catalog" method #f 405 11 405 23 ("get-catalog" "car" "entry" "not-null?" "get-application" "get-cataloguer" "get-file-entries" "entries" "when" "get-moniker" "moniker" "let")}
        {Lisp-Entry "on-recolorize-syntax" method #f 420 19 420 39 ("recolorize-syntax" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "recolorize-syntax" method #f 426 18 426 35 ("recoloring?:" "colorize-syntax" "uncolorize-all")}
        {Lisp-Entry "uncolorize-all" method #f 431 11 431 25 ("get-length" "0" "naturals" "uncolorize-row" "for-each")}
        {Lisp-Entry "syntax-targets" method #f 435 29 435 43 ()}
        {Lisp-Entry "syntax-automata" method #f 439 29 439 44 ()}
        {Lisp-Entry "compute-syntax-targets" method #f 443 29 443 51 ()}
        {Lisp-Entry "compute-syntax-automata" method #f 447 29 447 52 ("c-constituent?" "build-search-automata" "when" "syntax-targets" "targets" "let")}
        {Lisp-Entry "colorize-syntax" method #f 453 20 453 35 ("colorize-entries" "text-beginning" "finish-current" "colorize-type" "set!" "string-length" "+" "end" "Cell" "start" "col" "line" "type" "target" "bind" "car" "info" "not-null?" "while" "self" "new-colorizer" "not" "and" "colorizer" "0" "get-limit" "get-paragraphs" "TextTape" "new" "automata-search" "found" "when" "syntax-automata" "automata" "let" "pos" "colorize-syntax-from" "define" "entries?" "entries?:" "recoloring?" "recoloring?:")}
        {Lisp-Entry "apply-coloring" method #f 473 21 473 35 ("apply-style" "not" "if" "style-name" "end" "start" "colorizer")}
        {Lisp-Entry "colorize-type" method #f 479 29 479 42 ("error" "recolorize?" "colorizer" "end" "start" "type" "found")}
        {Lisp-Entry "colorize-balanced-comment" method #f 483 29 483 54 ("set!" "cdr" "continuation-return" "apply-coloring" "2" "+" "Cell" "new" "balanced-comment-backward" "'balanced-comment-backward" "eq?" "if" "col" "line" "type" "target" "bind" "car" "info" "let" "not-null?" "while" "return" "lambda" "continuation-capture" "style" "colorizer" "end" "start" "found")}
        {Lisp-Entry "colorize-balanced-comment-backward" method #f 497 21 497 55 ("apply-coloring" "eq?" "type" "target" "pos" "bind" "reversed?:" "position:" "'open" "'close" "user-data:" "make-search-context" "list" "text-contextual-search" "let" "when" "cdr" "close" "close:" "open" "open:" "recolorize?" "style" "colorizer" "end" "start" "found")}
        {Lisp-Entry "colorize-line-comment" method #f 509 21 509 42 ("car" "second" "=" "not-null?" "while" "cdr" "set!" "line" "3" "nu+" "paragraph-length" "get-line" "Cell" "new" "apply-coloring" "not" "if" "2" "next-pos" "get-char" "eqv?" "and" "title?" "let" "title-char" "title-style" "line-style" "colorizer" "end" "start" "found")}
        {Lisp-Entry "colorize-keyword" method #f 522 21 522 37 ("cdr" "apply-coloring" "style" "colorizer" "end" "start" "found")}
        {Lisp-Entry "find-specifier-end" method #f 527 11 527 29 ("Cell" "new" "when" "position" "'position" "return:" "start:" "find-balanced" "eqv?" "or" "element" "nxt" "let" "cardinality" "1" "+" ">=" "unless" "paragraph-string" "str" "get-col" "col" "get-line" "line" "let*" "start")}
        {Lisp-Entry "recolorize-text" method #f 539 20 539 35 ("finish-current" "colorize-type" "string-length" "end" "col" "line" "car" "info" "not-null?" "while" "self" "new-colorizer" "colorizer" "get-col" "get-paragraphs" "TextTape" "automata-search" "found" "syntax-automata" "automata" "uncolorize-row" "for-each" "1" "+" "naturals" "range" "set!" "eq?" "type" "target" "bind" "reversed?:" "position:" "close" "'close" "open" "'open" "user-data:" "make-search-context" "list" "text-contextual-search" "opening" "when" "syntax-targets" "targets" "0" "get-line" "Cell" "new" "pos" "let" "end-line" "start")}
        {Lisp-Entry "colorize-entries" method #f 564 26 564 42 ("colorize-entry" "for-each" "when" "get-parsed-entries" "entries" "let")}
        {Lisp-Entry "get-parsed-entries" method #f 570 29 570 47 ("get-definitions" "get-controller" "get-moniker-time" "get-time" "time->seconds" "=" "car" "file-entry" "not-null?" "c" "context:" "get-file-entries" "entries" "get-application" "get-cataloguer" "cataloguer" "get-modified?" "not" "file?" "and" "when" "get-moniker" "moniker" "let")}
        {Lisp-Entry "colorize-entry" method #f 582 11 582 25 ("get-definitions" "for-each" "get-implements" "get-extends" "colorize-entry" "class-of" "Class-Entry" "equal?" "Definition" "'Definition" "stylize" "get-limit" "<=" "when" "string-length" "+" "end" "Cell" "new" "start" "get-column" "column" "get-line" "line" "get-name" "name" "let*" "lambda" "proc" "letrec" "entry")}
        {Lisp-Entry "recolorize-entries" method #f 601 18 601 36 ("colorize-entry" "for-each" "entries?:" "colorize-syntax" "uncolorize-all" "when" "get-parsed-entries" "entries" "let")}
        {Lisp-Entry "get-readtable" method #f 614 29 614 42 ("current-readtable")}
        {Lisp-Entry "read-text-form" method #f 618 11 618 25 ("read" "init:" "list" "call-with-input-string" "get-string" "or" "let" "get-readtable" "readtable" "readtable:" "string" "string:" "range")}
        {Lisp-Entry "read-text-forms" method #f 624 11 624 26 ("eof-object?" "read-until" "port" "lambda" "init:" "list" "call-with-input-string" "get-string" "or" "let" "get-readtable" "readtable" "readtable:" "string" "string:" "range")}
        {Lisp-Entry "offset-pos/range" definition #f 631 15 631 31 ("get-col" "Cell" "+" "Range$Cell$" "new" "get-end" "get-start" "get-line" "0" "=" "if" "range" "pos")}
        {Lisp-Entry "on-evaluate" method #f 644 11 644 22 ("evaluate-selection" "evt")}
        {Lisp-Entry "on-evaluate-buffer" method #f 648 11 648 29 ("evaluate-buffer" "evt")}
        {Lisp-Entry "evaluate-selection" method #f 652 29 652 47 ()}
        {Lisp-Entry "evaluate-buffer" method #f 656 29 656 44 ()}
        {Lisp-Entry "evaluate-range" method #f 660 29 660 43 ("range")}
        {Lisp-Entry "tabulate" method #f 669 26 669 34 ("subseq" "insert-string" "position" "'position" "return:" "whitespace?" "not" "lambda" "find-if" "rank" "-" "paragraph-string" "str" "=" ">" "and" "get-col" "col" "get-line" "get-start" "pos" "let*" "selected-lines" "tabulate-line" "shift-down?" "for-each" "has-selection?" "if" "memq?" "c" "list" "1" "Range$Cell$" "replace-text" "0" "Cell" "new" "get-char" "space/tab?" "when" "line" "untabulate-line" "define")}
        {Lisp-Entry "tabulate-line" method #f 692 29 692 42 ("string" "list" "0" "Cell" "Range$Cell$" "new" "replace-text" "line")}
        {Lisp-Entry "tabulate-lines" method #f 697 26 697 40 ("end" "start")}
        {Lisp-Entry "auto-complete?" method #f 706 20 706 34 ()}
        {Lisp-Entry "completion-name" method #f 710 20 710 35 ("get-symbol-string" "not" "or" "0" "char-backward" "string" "keyword" "symbol" "get-kind" "memq?" "backward-expr" "and" "end:" "start:" "self" "explorer-class" "new" "expl" "string-delimiter?" "c" "when" "previous-cell" "prev" "let" "get-end" "has-selection?" "if" "get-char" "syntax" "text-constituent?" "unless" "pos")}
        {Lisp-Entry "symbol-completions" method #f 724 20 724 38 ("table-keys" "table-set!" "compare-n" "when" "->string" "alias" "ignore" "symbol" "lambda" "get-aliases" "iterate-table" "get-context" "context:" "add-completions" "string-length" "len" "equal?" "test:" "make-table" "table" "not" "get-application" "get-cataloguer" "cataloguer" "let" "numeric?" "if" "name")}
        {Lisp-Entry "show-arguments" method #f 746 29 746 43 ()}
        {Lisp-Entry "left-arrow-move" method #f 755 20 755 35 ("nextmethod" "convert-completion" "word?" "extend?")}
        {Lisp-Entry "right-arrow-move" method #f 760 20 760 36 ("nextmethod" "convert-completion" "word?" "extend?")}
        {Lisp-Entry "up-arrow-move" method #f 765 20 765 33 ("nextmethod" "convert-completion" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method #f 770 20 770 35 ("nextmethod" "convert-completion" "scroll?" "extend?")}
        {Lisp-Entry "on-tabify" method #f 780 11 780 20 ("tabify" "evt")}
        {Lisp-Entry "tabify" method #f 784 11 784 17 ("1" "get-end" "+" "get-start" "get-line" "naturals" "for-each" "make-string" "append!" "list" "Cell" "Range$Cell$" "new" "replace-text" "modulo" "spaces" "tab-size" "/" "floor" "tabs" "char->column" "column" "0" ">" "and" "when" "position" "'position" "return:" "whitespace?" "not" "c" "lambda" "find-if" "char" "paragraph-string" "str" "let*" "line" "tabify-line" "define")}
        {Lisp-Entry "match-backwards?" method #f 805 29 805 45 ("char")}
        {Lisp-Entry "match-forwards?" method #f 809 29 809 44 ("char")}
        {Lisp-Entry "flash-matching-character" method #f 813 11 813 35 ("car" "infinity" "'infinity" "neq?" "not" "find-matching-highlight" "flash" "'flash" "get-match-action" "eq?" "and" "preferences" "thread-exit" "thread-interrupt!" "when" "exit-flashing-thread" "3" "collect-forward-exprs" "get-string" "mark" "map" "user-message" "end:" "1" "nu+" "start:" "self" "explorer-class" "new" "expl" "remove-matching-highlights" "add-matching-highlight" "execute-event" "sleep" "lambda" "new-thread" "thread-start!" "flashing-thread" "set!" "cell-displayed?" "get-range" "get-start" "start" "let" "highlight" "flash-character" "get-flash-duration" "flash-duration" "get-flash-delay" "0" "keyboard-input?" "if" "flash-delay" "define" "pref")}
        {Lisp-Entry "highlight-matching-character" method #f 858 11 858 39 ("remove-matching-highlights" "cdr" "both" "'both" "get-highlight-mode" "eq?" "car" "add-matching-highlight" "when" "find-matching-highlight" "highlight" "let" "highlight-character" "define" "pref")}
        {Lisp-Entry "find-matching-highlight" method #f 870 11 870 34 ("and" "or" "get-caret" "empty-selection?" "get-application" "macro-playing?" "show-unfocused?:" "Text-Highlight" "Match" "'Match" "get-style" "style" "new-range" "range" "get-end" "end" "forward-expr" "match-forwards?" "at-end?" "find-forward" "next-cell" "new-highlight" "cons" "get-start" "start" "backward-expr" "start:" "self" "explorer-class" "new" "expl" "bell" "err" "Explore-Error" "catch" "get-char" "match-backwards?" "when" "previous-cell" "previous" "let" "at-beginning?" "unless" "pos" "find-backward" "define" "forward?")}
        {Lisp-Entry "add-matching-highlight" method #f 908 11 908 33 ("cons" "matching-highlights" "set!" "invalidate-highlight" "add-highlight" "highlight")}
        {Lisp-Entry "remove-matching-highlights" method #f 914 11 914 37 ("set!" "matching-highlights" "invalidate-highlight" "remove-highlight" "highlight" "lambda" "for-each")}
        {Lisp-Entry "selection-change" method #f 922 20 922 36 ("highlight-matching-character" "highlight" "flash-matching-character" "flash" "get-match-action" "case" "when" "preferences" "pref" "let")}
        {Lisp-Entry "on-browse-java" method #f 935 11 935 25 ("browse-java" "evt")}
        {Lisp-Entry "browse-java" method #f 939 11 939 22 ("list" "browse-classes" "get-guest" "manager" "Java-Manager" "new-frame" "host" "error" "not" "org.apache.bcel.Repository" "lookupClass" "javaClass" "->string" "classname" "let*" "bell" "Symbol" "is-not?" "if" "current-expr" "expr" "let")}
        {Lisp-Entry "on-set-read/write" method #f 958 11 958 28 ("update-status" "set-read/write" "controller" "get-moniker" "moniker" "let" "evt")}}
      {Lisp-Entry "Definitions-Menu" class #f 969 7 969 23 ("Context-Menu")
        {Lisp-Entry "definitions" property #f 972 12 972 23 ()}
        {Lisp-Entry "get-definitions" accessor #f 972 35 972 43 ()}
        {Lisp-Entry "set-definitions" accessor #f 972 35 972 43 ()}
        {Lisp-Entry "history-item" property #f 973 12 973 24 ()}
        {Lisp-Entry "get-history-item" accessor #f 973 35 973 43 ()}
        {Lisp-Entry "set-history-item" accessor #f 973 35 973 43 ()}
        {Lisp-Entry "finish" method #f 976 20 976 26 ("key:" "make-condensed-menu" "get-string" "parent" "user-data" "create-item" "menu" "let*" "definition<?" "sort" "definition:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "present" "title" "let" "definition" "lambda" "for-each" "20" "definitions" "length" "<" "if" "nextmethod" "rest")}
        {Lisp-Entry "definition<?" definition #f 990 15 990 27 ("present" "string<?" "y" "x")}
        {Lisp-Entry "on-action" method #f 994 11 994 20 ("definition:" "get-property" "edit" "history-item" "get-application" "add-history" "evt")}}
      {Lisp-Entry "References-Menu" class #f 1004 7 1004 22 ("Context-Menu")
        {Lisp-Entry "target" property #f 1007 12 1007 18 ()}
        {Lisp-Entry "get-target" accessor #f 1007 35 1007 43 ()}
        {Lisp-Entry "set-target" accessor #f 1007 35 1007 43 ()}
        {Lisp-Entry "definitions" property #f 1008 12 1008 23 ()}
        {Lisp-Entry "get-definitions" accessor #f 1008 35 1008 43 ()}
        {Lisp-Entry "set-definitions" accessor #f 1008 35 1008 43 ()}
        {Lisp-Entry "history-item" property #f 1009 12 1009 24 ()}
        {Lisp-Entry "get-history-item" accessor #f 1009 35 1009 43 ()}
        {Lisp-Entry "set-history-item" accessor #f 1009 35 1009 43 ()}
        {Lisp-Entry "finish" method #f 1012 20 1012 26 ("key:" "make-condensed-menu" "get-string" "parent" "user-data" "create-item" "menu" "let*" "definition<?" "sort" "definition:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "present" "->string" "title" "let" "definition" "lambda" "for-each" "20" "definitions" "length" "<" "if" "nextmethod" "rest")}
        {Lisp-Entry "definition<?" definition #f 1026 15 1026 27 ("present" "string<?" "y" "x")}
        {Lisp-Entry "on-action" method #f 1030 11 1030 20 ("target" "definition:" "get-property" "edit-reference" "history-item" "get-application" "add-history" "evt")}}}})
"Color-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Color-Button.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Color-Button" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Color-Button" class #f 45 20 45 32 ("explicit" "initialize" "Push-Icon")
        {Lisp-Entry "color" property #f 48 12 48 17 ()}
        {Lisp-Entry "get-color" method #f 56 18 56 27 ("color")}
        {Lisp-Entry "set-color" method #f 60 18 60 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "action-properties" method #f 70 20 70 37 ("color" "color:" "list")}
        {Lisp-Entry "draw-tool" method #f 79 20 79 29 ("Dark" "name:" "Color" "view-enabled?" "fill-rect" "18" "14" "Rect" "new" "offset-rect" "rect" "1" "2" "pushed" "'pushed" "state" "eq?" "if" "offset" "let*" "color" "when" "nextmethod" "context" "surface")}}}})
"Color-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Color-Combo.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.view.Color-Combo" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Color-Combo" class #f 46 20 46 31 ("color" "Black" "border-color:" "solid" "border-type:" "color-border" "2" "1" "Rect" "layout-insets:" "fill" "layout-type:" "15" "Dimension" "size:" "color-contour" "White" "name:" "Color" "background:" "Combo-Box")
        {Lisp-Entry "form-model" method #f 56 20 56 30 ("nextmethod" "else" "Color-Text-View" "body" "get-name" "case" "form")}
        {Lisp-Entry "get-color" method #f 67 18 67 27 ("color" "'color" "locate" "get-background")}
        {Lisp-Entry "set-color" method #f 71 18 71 27 ("select-all" "present" "not" "if" "set-string-content" "body" "'body" "locate" "text" "let" "set-color-value" "color")}
        {Lisp-Entry "set-color-value" method #f 78 11 78 26 ("'color" "locate" "set-background" "color")}
        {Lisp-Entry "content-change" method #f 87 20 87 34 ("set-modified?" "get-content" "Color" "parse-string" "set-color-value" "origin")}
        {Lisp-Entry "button-action" method #f 92 20 92 33 ("initiator:" "on-color-picked" "'on-color-picked" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "colors:" "Color-Picker" "popup" "get-height" "12" "get-width" "-" "Point" "new" "pos" "let")}
        {Lisp-Entry "on-color-picked" method #f 97 11 97 26 ("popup" "'popup" "content-change" "set-color" "close-popups" "color:" "get-property" "color" "let" "evt")}
        {Lisp-Entry "layout" method #f 109 20 109 26 ("pick" "'pick" "15" "get-width" "-" "Dimension" "set-size" "get-right" "new" "scroller" "'scroller" "0" "Point" "set-position" "color-contour" "'color-contour" "locate" "countour" "get-height" "width" "get-size" "size" "let")}}
      {Lisp-Entry "Color-View" class #f 125 7 125 17 ("View")
        {Lisp-Entry "draw" method #f 128 20 128 24 ("get-height" "0" "get-width" "line" "1" "set-line-width" "Black" "name:" "Color" "set-color" "get-size" "size" "let" "background" "not" "when" "nextmethod" "lv" "lh" "context" "surface")}}}})
"Color-Picker"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Color-Picker.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.view.Color-Picker" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Color-Picker" class #f 48 20 48 32 ("title:" "more" "0" "fill" "south" "20" "100" "Dimension" "size:" "center" "location:" "colors" "4" "Rect" "layout-insets:" "border" "layout-type:" "Medium" "name:" "Color" "background:" "explicit" "initialize" "Layout-View")
        {Lisp-Entry "colors" property #f 51 12 51 18 ()}
        {Lisp-Entry "geometry" property #f 52 12 52 20 ()}
        {Lisp-Entry "get-colors" method #f 67 18 67 28 ("colors")}
        {Lisp-Entry "set-colors" method #f 71 18 71 28 ("layout-view" "invalidate-tools" "colors" "set!" "value")}
        {Lisp-Entry "get-geometry" method #f 77 18 77 30 ("geometry")}
        {Lisp-Entry "set-geometry" method #f 81 18 81 30 ("layout-view" "geometry" "set!" "value")}
        {Lisp-Entry "set-action-handler" method #f 91 20 91 38 ("more" "'more" "colors" "'colors" "locate" "get-children" "set-action-handler" "tool" "lambda" "for-each" "action-handler" "set!" "handler")}
        {Lisp-Entry "Default-Colors" definition #f 104 14 104 28 ("Dark-Gray" "Gray" "Light-Gray" "Dark-Purple" "Purple" "Light-Purple" "Dark-Blue" "Blue" "Light-Blue" "Dark-Green" "Green" "Light-Green" "Dark-Yellow" "Yellow" "Light-Yellow" "Dark-Orange" "Orange" "Light-Orange" "Dark-Red" "Red" "Light-Red" "Black" "White" "name:" "Color")}
        {Lisp-Entry "effective-colors" method #f 139 11 139 27 ("Default-Colors" "colors" "or")}
        {Lisp-Entry "invalidate-tools" method #f 148 11 148 27 ("effective-colors" "action-handler" "action-handler:" "color:" "18" "Dimension" "size:" "parent:" "Color-Tool" "new" "color" "lambda" "get-children" "close" "for-each" "colors" "'colors" "locate" "view" "let")}
        {Lisp-Entry "layout" method #f 161 20 161 26 ("nextmethod" "30" "Dimension" "set-size" "0" "naturals" "18" "2" "Point" "new" "set-position" "element" "tool" "*" "+" "n" "v" "h" "lambda" "for-each" "get-col" "columns" "get-line" "lines" "8" "3" "Cell" "or" "geometry" "not-null?" "when" "get-children" "children" "colors" "'colors" "locate" "view" "let*")}}
      {Lisp-Entry "Color-Tool" class #f 184 7 184 17 ("initialize" "Push-Tool")
        {Lisp-Entry "client" property #f 187 12 187 18 ()}
        {Lisp-Entry "color" property #f 188 12 188 17 ()}
        {Lisp-Entry "get-color" accessor #f 188 43 188 51 ()}
        {Lisp-Entry "set-color" accessor #f 188 43 188 51 ()}
        {Lisp-Entry "get-tooltip?" method #f 191 20 191 32 ()}
        {Lisp-Entry "get-tooltip-text" method #f 195 20 195 36 ("get-name" "->string" "color" "not" "if")}
        {Lisp-Entry "action-properties" method #f 201 20 201 37 ("color" "color:" "list")}
        {Lisp-Entry "mouse-enter" method #f 205 20 205 31 ("invalidate-view" "highlighted" "'highlighted" "set-state")}
        {Lisp-Entry "mouse-leave" method #f 210 20 210 31 ("invalidate-view" "inactive" "'inactive" "set-state")}
        {Lisp-Entry "mouse-up" method #f 215 20 215 28 ("self" "process-action" "pos")}
        {Lisp-Entry "up" method #f 219 20 219 22 ()}
        {Lisp-Entry "draw-highlighted" method #f 223 20 223 36 ("nextmethod" "draw-pushed" "mouse-down?" "if" "surface")}
        {Lisp-Entry "draw-tool" method #f 229 20 229 29 ("get-bottom" "get-left" "get-top" "get-right" "line" "1" "set-line-width" "set-color" "fill-rect" "color" "if" "Dark" "name:" "Color" "frame-rect" "-1" "inside" "-3" "inflate-rect" "outside" "get-bounds" "rect" "let*" "nextmethod" "context" "surface")}}
      {Lisp-Entry "More-Tool" class #f 247 7 247 16 ("Label-Tool")
        {Lisp-Entry "mouse-enter" method #f 250 20 250 31 ("invalidate-view" "highlighted" "'highlighted" "set-state")}
        {Lisp-Entry "mouse-leave" method #f 255 20 255 31 ("invalidate-view" "inactive" "'inactive" "set-state")}
        {Lisp-Entry "mouse-up" method #f 260 20 260 28 ("choose-color" "color:" "list" "self" "process-action" "close-popups" "pos")}
        {Lisp-Entry "up" method #f 265 20 265 22 ()}
        {Lisp-Entry "draw-highlighted" method #f 269 20 269 36 ("nextmethod" "draw-pushed" "mouse-down?" "if" "surface")}}}})
"Color-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Color-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Color-Text-View" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Color-Text-View" class #f 43 20 43 35 ("Combo-Text-View")
        {Lisp-Entry "symbol-completions" method #f 52 11 52 29 ("complete" "Symbol-Completer" "new" "completer" "Color.Constants" "domain" "let*" "name")}}}})
"Column-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Column-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Column-Menu" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Column-Menu" class #f 44 20 44 31 ("fill-to-column" "text" "Action" "action-handler:" "title:" "mark-column" "name:" "Context-Menu")}}})
"Combo-Box"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Combo-Box.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Combo-Box" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Combo-Box" class #f 49 7 49 16 ("explicit" "initialize" "Combo-Text")
        {Lisp-Entry "condensed?" property #f 65 12 65 22 ()}
        {Lisp-Entry "get-condensed?" accessor #f 65 53 65 61 ()}
        {Lisp-Entry "set-condensed?" accessor #f 65 53 65 61 ()}
        {Lisp-Entry "choices" property #f 66 12 66 19 ()}
        {Lisp-Entry "nullable?" property #f 67 12 67 21 ()}
        {Lisp-Entry "get-nullable?" accessor #f 67 53 67 61 ()}
        {Lisp-Entry "set-nullable?" accessor #f 67 53 67 61 ()}
        {Lisp-Entry "choices-updater" property #f 68 12 68 27 ()}
        {Lisp-Entry "entry-test" property #f 69 12 69 22 ()}
        {Lisp-Entry "get-entry-test" accessor #f 69 53 69 61 ()}
        {Lisp-Entry "set-entry-test" accessor #f 69 53 69 61 ()}
        {Lisp-Entry "button-action" method #f 77 20 77 33 ("5" "alternate-position:" "1" "+" "-1" "Point" "new" "track-popup-menu" "4" "-" "width:" "layout-menu" "get-height" "height" "get-width" "width" "get-size" "size" "inactive" "'inactive" "highlighted" "'highlighted" "mouse-view" "picker-view?" "set-state" "bell" "begin" "not" "if" "get-pick" "pick" "new-choices-menu" "menu" "let" "update-choices" "get-body" "acquire-focus" "selectable?" "when")}
        {Lisp-Entry "on-action" method #f 94 29 94 38 ("combo-choice" "popup" "'popup" "call-content-change" "set-modified?" "select-all" "set-entry" "get-body" "text" "get-user-data" "choice" "get-title" "entry" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "combo-choice" method #f 106 29 106 41 ()}
        {Lisp-Entry "get-choices-updater" method #f 115 18 115 37 ("choices-updater")}
        {Lisp-Entry "set-choices-updater" method #f 119 18 119 37 ("get-pick" "set-enabled?" "pick" "'pick" "kind" "eq?" "and" "when" "choices-updater" "set!" "value")}
        {Lisp-Entry "update-choices" method #f 130 29 130 43 ("self" "choices" "null?" "choices-updater" "and" "if")}
        {Lisp-Entry "new-choices-menu" method #f 136 29 136 45 ("condensed?" "key:" "make-condensed-menu" "get-string" "cons" "equal?" "parent" "string" "value" "create-leaf" "new-choices-menu-condensed" "action-handler:" "user-data:" "string=?" "checked?:" "title:" "Check-Item" "present-choice" "title" "parent:" "Separator-Item" "not" "if" "choice" "lambda" "for-each" "on-action" "'on-action" "method-name:" "self" "target:" "Event-Handler" "action-handler" "or" "handler" "Context-Menu" "new" "menu" "get-entry" "current" "let" "choices" "when" "new-choices-menu-plain" "define")}
        {Lisp-Entry "get-choices" method #f 172 18 172 29 ("choices")}
        {Lisp-Entry "set-choices" method #f 176 18 176 29 ("car" "set-value" "not-null?" "choices-updater" "or" "get-pick" "set-enabled?" "pick" "'pick" "kind" "eq?" "when" "choices" "set!" "get-choice" "old" "let" "value")}
        {Lisp-Entry "get-choice" method #f 185 11 185 21 ("get-entry" "entry->choice")}
        {Lisp-Entry "present-choices" method #f 194 18 194 33 ("choices" "present-choice" "map" "format")}
        {Lisp-Entry "present-choice" method #f 199 21 199 35 ("first" "localize" "value->presented" "not" "if" "presented" "value" "bind" "when" "choice")}
        {Lisp-Entry "present-value" method #f 212 18 212 31 ("present-choice" "value->presented" "not" "if" "value->choice" "choice" "let" "value")}
        {Lisp-Entry "value->choice" method #f 219 11 219 24 ("choices" "assoc" "value")}
        {Lisp-Entry "value->presented" method #f 223 26 223 42 ("localize" "->string" "not" "if" "value")}
        {Lisp-Entry "invalid->value" method #f 229 26 229 40 ("format" "message:" "Parse-Error" "new" "signal" "presented")}
        {Lisp-Entry "entry->choice" method #f 238 11 238 24 ("choices" "value->presented" "not" "if" "continuation-return" "localize" "localized" "string" "tryout" "presented" "value" "bind" "when" "choice" "for-each" "return" "lambda" "continuation-capture" "nu=?" "entry-test" "or" "test" "let" "entry")}
        {Lisp-Entry "get-entry" method #f 262 26 262 35 ("get-content")}
        {Lisp-Entry "set-entry" method #f 266 26 266 35 ("set-content" "content")}
        {Lisp-Entry "valid-value?" method #f 270 18 270 30 ("get-choice" "boolean")}
        {Lisp-Entry "get-value" method #f 274 18 274 27 ("car" "get-content" "invalid->value" "not" "if" "get-choice" "choice" "let")}
        {Lisp-Entry "set-value" method #f 281 18 281 27 ("call-content-change" "when" "present-value" "set-entry" "generate-event?" "generate-event?:" "value")}
        {Lisp-Entry "validate-content" method #f 292 20 292 36 ("get-value" "set-entry" "throw-cancel" "focus-body" "yes" "no:" "yes:" "type:" "exception-reason" "message-box" "case" "err" "Parse-Error" "catch" "format" "no" "message" "'message" "question" "'question" "if" "type" "present-choice" "unique-entry" "car" "and" "unique" "choices" "length" "1" "=" "unique?" "let*")}
        {Lisp-Entry "get-class-descriptor" method #f 313 25 313 45 ("Combo-Box-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 322 11 322 17 ()
        {Lisp-Entry "Combo-Box-Descriptor" class #f 328 7 328 27 ("entry-test" "choices-updater" "nullable?" "choices" "title:" "condensed?" "name:" "Combo-View-Descriptor")}}}})
"Combo-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Combo-Button.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Combo-Button" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Combo-Button" class #f 45 20 45 32 ("Push-Tool")
        {Lisp-Entry "get-combo" method #f 53 18 53 27 ("parent")}
        {Lisp-Entry "get-enabled?" method #f 63 20 63 32 ("parent" "get-enabled?" "enabled?" "and")}
        {Lisp-Entry "get-state" method #f 67 20 67 29 ("self" "parent" "child-state")}
        {Lisp-Entry "mouse-enter" method #f 71 20 71 31 ("self" "parent" "enter-child")}
        {Lisp-Entry "mouse-leave" method #f 75 20 75 31 ("self" "parent" "leave-child")}
        {Lisp-Entry "mouse-down" method #f 79 20 79 30 ("self" "parent" "child-down" "pos")}
        {Lisp-Entry "drag-up" method #f 83 20 83 27 ("self" "parent" "child-up" "rest" "pos")}
        {Lisp-Entry "down" method #f 92 20 92 24 ("self" "process-action" "pick" "'pick" "parent" "get-kind" "eq?" "view-enabled?" "when")}
        {Lisp-Entry "up" method #f 98 20 98 22 ("self" "process-action" "choose" "'choose" "parent" "get-kind" "eq?" "when")}
        {Lisp-Entry "close-popups" method #f 108 20 108 32 ("invalidate-view" "nextmethod" "double-click" "mouse-down" "memq?" "unless" "exclude" "exclude:" "all?" "all?:" "event" "event:")}
        {Lisp-Entry "light-color" method #f 119 20 119 31 ("Light-Background" "name:" "Color")}
        {Lisp-Entry "dark-color" method #f 123 20 123 30 ("Dark" "name:" "Color")}
        {Lisp-Entry "draw-inactive" method #f 127 20 127 33 ("Medium" "Light" "name:" "Color" "view-enabled?" "if" "frame-rect" "get-bounds" "bounds" "let" "parent" "highlight-pick?" "when" "surface")}
        {Lisp-Entry "draw-tool" method #f 133 20 133 29 ("draw-ellipsis" "choose" "draw-arrow" "pick" "parent" "get-kind" "case" "context" "surface")}
        {Lisp-Entry "draw-arrow" method #f 139 11 139 21 ("down" "'down" "3" "draw-arrow-tip" "1" "get-height" "v" "2" "get-width" "quotient" "-" "+" "h" "get-offset" "offset" "get-size" "size" "let*" "Dark" "Black" "name:" "Color" "view-enabled?" "if" "set-color" "surface")}
        {Lisp-Entry "draw-ellipsis" method #f 148 11 148 24 ("view-enabled?" "get-v" "get-h" "draw-text" "Black" "name:" "Color" "set-text-color" "center" "size" "get-text-extent" "lambda" "justify-lazy" "pos" "title" "let" "surface")}
        {Lisp-Entry "get-offset" method #f 157 11 157 21 ("0" "1" "choose" "pushed" "get-state" "memq?" "if")}}}})
"Combo-Text"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Combo-Text.jazz"} 1290094048
    {Lisp-Entry "jazz.ui.view.Combo-Text" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Combo-Text" class #f 49 7 49 17 ("Label" "Font" "font:" "Default" "Text-Style" "default-style:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "editable?:" "selectable?:" "top-padding:" "2" "left-padding:" "body" "content" "scroller" "name:" "explicit" "initialize" "Combo-View")
        {Lisp-Entry "selectable?" property #f 52 12 52 23 ()}
        {Lisp-Entry "get-selectable?" accessor #f 52 55 52 63 ()}
        {Lisp-Entry "set-selectable?" accessor #f 52 55 52 63 ()}
        {Lisp-Entry "editable?" property #f 53 12 53 21 ()}
        {Lisp-Entry "complete?" property #f 54 12 54 21 ()}
        {Lisp-Entry "content" property #f 55 12 55 19 ()}
        {Lisp-Entry "default-size" method #f 65 20 65 32 ("17" "100" "Dimension")}
        {Lisp-Entry "get-editable?" method #f 74 11 74 24 ("editable?")}
        {Lisp-Entry "set-editable?" method #f 78 11 78 24 ("set-visible?" "Medium" "White" "name:" "Color" "if" "set-background" "set-selectable?" "set-editable?" "get-pick" "pick" "get-body" "text" "let" "editable?" "set!" "flag")}
        {Lisp-Entry "get-text" method #f 93 18 93 26 ("get-body")}
        {Lisp-Entry "get-complete?" method #f 97 18 97 31 ("complete?")}
        {Lisp-Entry "set-complete?" method #f 101 18 101 31 ("set-editable?" "set-selectable?" "get-body" "text" "let" "when" "complete?" "set!" "value")}
        {Lisp-Entry "highlight-pick?" method #f 114 20 114 35 ()}
        {Lisp-Entry "set-enabled?" method #f 123 20 123 32 ("invalidate-view" "get-pick" "Medium" "White" "name:" "Color" "if" "set-background" "get-body" "set-enabled?" "enabled?" "set!" "flag")}
        {Lisp-Entry "inner?" method #f 136 20 136 26 ("children" "memq?" "view")}
        {Lisp-Entry "edit" method #f 145 18 145 22 ("focus-body")}
        {Lisp-Entry "focus-body" method #f 149 11 149 21 ("select-all" "acquire-focus" "get-body" "text" "let")}
        {Lisp-Entry "get-content" method #f 160 18 160 29 ("get-body" "get-string-content")}
        {Lisp-Entry "set-content" method #f 164 18 164 29 ("localize" "if" "get-body" "set-string-content" "content")}
        {Lisp-Entry "get-modified?" method #f 168 20 168 33 ("get-body" "get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 172 20 172 33 ("get-body" "get-controller" "set-modified?" "flag")}
        {Lisp-Entry "layout" method #f 181 20 181 26 ("get-width" "-" "Dimension" "new" "set-size" "Point" "set-position" "0" "get-default-row-height" "get-top-padding" "+" "get-height" "min" "width" "get-pick" "pick" "'scroller" "locate" "scroller" "get-body" "text" "get-size" "size" "let")}
        {Lisp-Entry "get-class-descriptor" method #f 198 25 198 45 ("Combo-Text-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 207 11 207 17 ()
        {Lisp-Entry "Combo-Text-Descriptor" class #f 213 7 213 28 ("content" "complete?" "editable?" "title:" "selectable?" "name:" "Combo-View-Descriptor")}}}})
"Combo-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Combo-Text-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Combo-Text-Actions" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Combo-Text-Actions" class #f 45 20 45 38 ("Return" ":control" "Shortcut" "shortcut:" "on-push-button" ":focus" "Event-Handler" "action-handler:" "push-button" "name:" "Actions")}}})
"Combo-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Combo-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Combo-Text-View" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Combo-Text-View" class #f 44 20 44 35 ("Text-View")
        {Lisp-Entry "get-combo" method #f 52 11 52 20 ("parent" "get-parent")}
        {Lisp-Entry "focus-actions" method #f 61 20 61 33 ("nextmethod" "combo-text" "'combo-text" "find-actions" "cons")}
        {Lisp-Entry "on-push-button" method #f 66 11 66 25 ("push-button" "get-combo" "combo" "let" "evt")}
        {Lisp-Entry "return-press" method #f 76 20 76 32 ("return" "'return" "get-combo" "content-change" "key")}
        {Lisp-Entry "mouse-enter" method #f 85 20 85 31 ("get-pick" "enter-child" "get-combo" "combo" "let" "nextmethod" "selectable?" "if")}
        {Lisp-Entry "mouse-leave" method #f 92 20 92 31 ("get-pick" "leave-child" "get-combo" "combo" "let" "nextmethod" "selectable?" "if")}
        {Lisp-Entry "mouse-down" method #f 99 20 99 30 ("get-pick" "child-down" "get-combo" "combo" "let" "nextmethod" "selectable?" "if" "pos")}
        {Lisp-Entry "drag-up" method #f 106 20 106 27 ("get-pick" "child-up" "get-combo" "combo" "let" "nextmethod" "selectable?" "if" "rest" "pos")}
        {Lisp-Entry "close-popups" method #f 118 20 118 32 ("invalidate-view" "nextmethod" "double-click" "mouse-down" "memq?" "not" "choose" "'choose" "get-combo" "get-state" "neq?" "or" "when" "exclude" "exclude:" "all?" "all?:" "event" "event:")}
        {Lisp-Entry "auto-complete?" method #f 129 20 129 34 ("get-combo" "get-complete?")}
        {Lisp-Entry "completion-name" method #f 133 20 133 35 ("0" "Cell" "Range$Cell$" "new" "get-string" "get-line" "line" "when" "previous-cell" "prev" "let" "get-end" "has-selection?" "if" "get-char" "syntax" "text-constituent?" "unless" "pos")}
        {Lisp-Entry "complete-name?" method #f 141 20 141 34 ("1" ">=" "size")}
        {Lisp-Entry "symbol-completions" method #f 145 20 145 38 ("di=?" "test:" "complete" "Symbol-Completer" "new" "completer" "present-choice" "choice" "lambda" "map" "domain" "get-choices" "choices" "get-combo" "combo" "let*" "name")}
        {Lisp-Entry "completions-prefix" method #f 153 20 153 38 ("di=?" "test:" "prefix" "completions")}}}})
"Combo-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Combo-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Combo-View" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Combo-View" class #f 47 20 47 30 ("on-pick" ":form" "Event-Handler" "action-handler:" "name:" "inactive" "'inactive" "explicit" "pick" "'pick" "initialize" "View")
        {Lisp-Entry "kind" property #f 50 12 50 16 ()}
        {Lisp-Entry "state" slot #f 53 8 53 13 ()}
        {Lisp-Entry "get-body" method #f 66 18 66 26 ("body" "'body" "locate")}
        {Lisp-Entry "get-pick" method #f 70 18 70 26 ("pick" "'pick" "locate")}
        {Lisp-Entry "get-kind" method #f 74 18 74 26 ("kind")}
        {Lisp-Entry "set-kind" method #f 78 18 78 26 ("invalidate-view" "get-pick" "set-enabled?" "'choose" "eq?" "when" "set!" "error" "choose" "pick" "kind" "memq?" "not" "if" "value")}
        {Lisp-Entry "get-state" method #f 87 18 87 27 ("state")}
        {Lisp-Entry "set-state" method #f 91 18 91 27 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "picker-view?" method #f 101 11 101 23 ("or" "eq?" "get-selectable?" "if" "get-pick" "pick" "get-body" "text" "let" "view")}
        {Lisp-Entry "on-pick" method #f 115 19 115 26 ("button-action" "evt")}
        {Lisp-Entry "button-action" method #f 119 29 119 42 ()}
        {Lisp-Entry "push-button" method #f 123 18 123 29 ("inactive" "'inactive" "button-action" "pushed" "'pushed" "set-state" "begin" "unwind-protect")}
        {Lisp-Entry "child-state" method #f 136 18 136 29 ("else" "pushed" "'pushed" "pick" "highlighted" "'highlighted" "body" "out-choose" "choose-failed" "choose" "state" "case" "get-name" "name" "let" "child")}
        {Lisp-Entry "highlight-pick?" method #f 143 26 143 41 ()}
        {Lisp-Entry "popup-destroy" method #f 152 20 152 33 ("invalidate-view" "inactive" "'inactive" "out-choose" "highlighted" "'highlighted" "set-state" "choose" "state" "case" "popup")}
        {Lisp-Entry "layout" method #f 164 20 164 26 ("9" "22" "Dimension" "set-size" "0" "Point" "set-position" "get-pick" "pick" "get-body" "body" "let")}
        {Lisp-Entry "enter-child" method #f 178 18 178 29 ("invalidate-view" "choose" "'choose" "out-choose" "pushed" "'pushed" "out-pushed" "highlighted" "'highlighted" "set-state" "inactive" "state" "case" "get-enabled?" "when" "child")}
        {Lisp-Entry "leave-child" method #f 187 18 187 29 ("invalidate-view" "out-choose" "'out-choose" "choose" "out-pushed" "'out-pushed" "pushed" "inactive" "'inactive" "set-state" "highlighted" "state" "case" "child")}
        {Lisp-Entry "child-down" method #f 195 18 195 28 ("invalidate-view" "'highlighted" "close-popups" "inactive" "'inactive" "not" "popup" "let" "kind" "choose" "'choose" "highlighted" "state" "pick" "down" "pushed" "'pushed" "set-state" "body" "get-name" "case" "view-enabled?" "when" "child")}
        {Lisp-Entry "child-up" method #f 219 18 219 26 ("invalidate-view" "out-pushed" "highlighted" "'highlighted" "choose-failed" "pushed" "state" "case" "inactive" "'inactive" "set-state" "choose" "'choose" "kind" "eq?" "if" "up" "unwind-protect" "view-enabled?" "when" "child")}
        {Lisp-Entry "get-class-descriptor" method #f 236 25 236 45 ("Combo-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 245 11 245 17 ()
        {Lisp-Entry "Combo-View-Descriptor" class #f 251 7 251 28 ("title:" "kind" "name:" "View-Descriptor")}}}})
"Combo-Widget"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "widget" "Combo-Widget.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.widget.Combo-Widget" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Combo-Widget" class #f 45 20 45 32 ("box" "Entry-Border" "Medium" "name:" "Color" "border-color:" "1" "2" "Rect" "border-insets:" "Border-View")
        {Lisp-Entry "default-size" method #f 54 20 54 32 ("22" "150" "Dimension")}}}})
"Command-Execute-Actions"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "command" "Command-Execute-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.command.Command-Execute-Actions" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Command-Execute-Actions" class #f 45 7 45 30 ("Escape" "alternate-shortcut:" ":control" "on-cancel" "cancel" "Return" "Shortcut" "shortcut:" "on-finish" ":mode" ":focus" "Event-Handler" "action-handler:" "finish" "name:" "Actions")}}})
"Command-Extended-Actions"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "command" "Command-Extended-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.command.Command-Extended-Actions" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Command-Extended-Actions" class #f 45 7 45 31 ("Escape" "on-cancel" "cancel" "Return" "on-finish" "finish" "on-select-all" "select-all" "on-upcase-selection" "upcase-selection" "on-downcase-selection" "downcase-selection" "on-play-recording" "play-recording" "on-stop-recording" "stop-recording" "on-start-recording" "start-recording" "on-quit" "quit" "on-split-stage-horizontally" "split-stage-horizontally" "on-split-stage-vertically" "split-stage-vertically" "on-delete-other-stages" "delete-other-stages" "on-delete-stage" "delete-stage" "on-kill-buffer" "kill-buffer" "on-revert-buffer" "revert-buffer" "on-save-all" "save-all" "on-save-buffer-as" "save-buffer-as" "on-save-buffer" "save-buffer" ":shift" "on-find-filename" "find-filename" "on-find-file" "find-file" ":control" "alternate-shortcut:" "Shortcut" "shortcut:" "on-find-buffer" ":mode" ":focus" "Event-Handler" "action-handler:" "find-buffer" "name:" "Actions")}}})
"Command-Find-Actions"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "command" "Command-Find-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.command.Command-Find-Actions" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Command-Find-Actions" class #f 45 7 45 27 ("Escape" "alternate-shortcut:" ":control" "on-cancel" "cancel" "Return" "Shortcut" "shortcut:" "on-finish" ":mode" ":focus" "Event-Handler" "action-handler:" "finish" "name:" "Actions")}}})
"Command-Search-Actions"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "command" "Command-Search-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.command.Command-Search-Actions" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Command-Search-Actions" class #f 45 7 45 29 ("Escape" "on-cancel" "cancel" "Return" "on-finish" "finish" "End" "on-end" "end" "alternate-shortcut:" "Home" "on-home" "home" "on-next" "next" "on-prior" "prior" "on-center-caret" "center-caret" "Space" "on-select-outer" "select-outer" "on-widen" "widen" "on-current" "current" "on-backward" "backward" ":control" "on-forward" "forward" "on-ignore-case" "ignore-case" ":alt" "Shortcut" "shortcut:" "on-whole-words" ":mode" ":focus" "Event-Handler" "action-handler:" "whole-words" "name:" "Actions")}}})
"Command-Shell"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "command" "Command-Shell.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.command.Command-Shell" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Command-Shell" class #f 44 7 44 20 ("text" "content" "vscroll?:" "hscroll?:" "scroller" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "install" method #f 54 20 54 27 ("get-controller" "set-tool?" "scroller" "'scroller" "set-client" "'text" "locate" "text" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-text" method #f 66 18 66 26 ("text" "'text" "scroller" "'scroller" "locate" "get-content" "child")}
        {Lisp-Entry "get-string-content" method #f 70 18 70 36 ("get-text" "get-string-content")}}}})
"Command-Text-View"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "command" "Command-Text-View.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.command.Command-Text-View" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Command-Text-View" class #f 53 7 53 24 ("tooltip-text:" "tooltip?:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "show-unfocused-selection?:" "focus-selects-all?:" "initialize" "IDE-Text-View")
        {Lisp-Entry "mode" slot #f 56 8 56 12 ()}
        {Lisp-Entry "get-mode" accessor #f 56 49 56 57 ()}
        {Lisp-Entry "set-mode" accessor #f 56 49 56 57 ()}
        {Lisp-Entry "client" slot #f 57 8 57 14 ()}
        {Lisp-Entry "get-client" accessor #f 57 46 57 54 ()}
        {Lisp-Entry "client-selection" slot #f 58 8 58 24 ()}
        {Lisp-Entry "get-client-selection" accessor #f 58 46 58 54 ()}
        {Lisp-Entry "client-position" slot #f 59 8 59 23 ()}
        {Lisp-Entry "get-client-position" accessor #f 59 46 59 54 ()}
        {Lisp-Entry "client-restore" slot #f 60 8 60 22 ()}
        {Lisp-Entry "get-client-restore" accessor #f 60 49 60 57 ()}
        {Lisp-Entry "set-client-restore" accessor #f 60 49 60 57 ()}
        {Lisp-Entry "finish" method #f 74 20 74 26 ("self" "Execute-Mode" "new" "mode" "set!" "nextmethod" "rest")}
        {Lisp-Entry "component-alias" method #f 79 20 79 35 ("nextmethod" "else" "mode" ":mode" "case" "name")}
        {Lisp-Entry "setup-client" method #f 90 11 90 23 ("client-selection" "get-focus" "client" "set!")}
        {Lisp-Entry "setup-search-client" method #f 95 11 95 30 ("get-scrolled-position" "client-position" "get-selection" "client-selection" "client" "set!" "in-cell-edit?" "not" "Text-View" "is?" "and" "when" "get-focus" "focus" "let" "determine-client" "define")}
        {Lisp-Entry "cleanup-client" method #f 106 11 106 25 ("client-selection" "client" "set!")}
        {Lisp-Entry "restore-client" method #f 111 11 111 25 ("set!" "client-restore" "when")}
        {Lisp-Entry "focus-lose" method #f 122 20 122 30 ("set-mode-execute" "cleanup-client" "mode" "cleanup" "nextmethod")}
        {Lisp-Entry "focus-actions" method #f 129 20 129 33 ("nextmethod" "mode" "mode-actions" "cons")}
        {Lisp-Entry "key-press" method #f 139 20 139 29 ("mode" "key-press" "nextmethod" "key")}
        {Lisp-Entry "backspace-press" method #f 144 20 144 35 ("mode" "backspace-press" "nextmethod" "word?" "word?:" "key")}
        {Lisp-Entry "next-page" method #f 149 20 149 29 ("mode" "next-page" "evt")}
        {Lisp-Entry "prior-page" method #f 153 20 153 30 ("mode" "prior-page" "evt")}
        {Lisp-Entry "get-constituent-test" method #f 157 20 157 40 ("nextmethod" "mode" "get-constituent-test" "or")}
        {Lisp-Entry "auto-complete?" method #f 162 20 162 34 ("mode" "auto-complete?")}
        {Lisp-Entry "auto-complete-char?" method #f 166 20 166 39 ("nextmethod" "default" "'default" "eq?" "if" "mode" "auto-complete-char?" "value" "let" "last" "key")}
        {Lisp-Entry "favorite-completions?" method #f 173 20 173 41 ("nextmethod" "default" "'default" "eq?" "if" "mode" "favorite-completions?" "value" "let")}
        {Lisp-Entry "complete-name?" method #f 180 20 180 34 ("nextmethod" "default" "'default" "eq?" "if" "mode" "complete-name?" "value" "let" "size")}
        {Lisp-Entry "completion-name" method #f 187 20 187 35 ("nextmethod" "mode" "completion-name" "or" "pos")}
        {Lisp-Entry "symbol-completions" method #f 192 20 192 38 ("nextmethod" "mode" "symbol-completions" "or" "name")}
        {Lisp-Entry "select-search" method #f 202 18 202 31 ("whole-words?:" "search" "select-all" "set-text" "when" "mode" "prepare-search" "acquire-focus" "setup-search-client" "set-mode-search" "whole-words?" "again?" "initial" "range" "direction")}
        {Lisp-Entry "set-mode-search" method #f 213 11 213 26 ("user-message" "self" "Search-Mode" "new" "mode" "set!" "direction")}
        {Lisp-Entry "select-extended" method #f 218 18 218 33 ("acquire-focus" "setup-client" "set-mode-extended")}
        {Lisp-Entry "set-mode-extended" method #f 224 11 224 28 ("user-message" "self" "Extended-Mode" "new" "mode" "set!")}
        {Lisp-Entry "select-execute" method #f 229 18 229 32 ("acquire-focus" "setup-client" "set-mode-execute")}
        {Lisp-Entry "set-mode-execute" method #f 235 11 235 27 ("user-message" "self" "Execute-Mode" "new" "mode" "set!")}}
      {Lisp-Entry "Command-Mode" class #f 245 7 245 19 ("Object")
        {Lisp-Entry "text" slot #f 248 8 248 12 ()}
        {Lisp-Entry "initialize" method #f 251 20 251 30 ("text~self" "set!" "nextmethod" "text")}
        {Lisp-Entry "get-client" method #f 256 11 256 21 ("text" "get-client")}
        {Lisp-Entry "get-client-selection" method #f 260 11 260 31 ("text" "get-client-selection")}
        {Lisp-Entry "get-client-position" method #f 264 11 264 30 ("text" "get-client-position")}
        {Lisp-Entry "mode-actions" method #f 268 19 268 31 ()}
        {Lisp-Entry "key-press" method #f 272 19 272 28 ("key")}
        {Lisp-Entry "backspace-press" method #f 276 19 276 34 ("word?" "word?:" "key")}
        {Lisp-Entry "next-page" method #f 280 19 280 28 ()}
        {Lisp-Entry "prior-page" method #f 284 19 284 29 ()}
        {Lisp-Entry "get-constituent-test" method #f 288 19 288 39 ()}
        {Lisp-Entry "auto-complete?" method #f 292 19 292 33 ()}
        {Lisp-Entry "auto-complete-char?" method #f 296 19 296 38 ("default" "'default" "last" "key")}
        {Lisp-Entry "favorite-completions?" method #f 300 19 300 40 ("default" "'default")}
        {Lisp-Entry "complete-name?" method #f 304 19 304 33 ("default" "'default" "size")}
        {Lisp-Entry "completion-name" method #f 308 19 308 34 ("pos")}
        {Lisp-Entry "symbol-completions" method #f 312 19 312 37 ("name")}
        {Lisp-Entry "finish" method #f 316 19 316 25 ("cleanup")}
        {Lisp-Entry "cancel" method #f 320 19 320 25 ("cleanup")}
        {Lisp-Entry "cleanup" method #f 324 19 324 26 ("clear-user-message" "acquire-focus" "unless" "when" "get-client" "client" "let" "text" "restore-client" "lose-focus?")}}
      {Lisp-Entry "Search-Mode" class #f 338 7 338 18 ("ignore-case?:" "make-search-context" "initialize" "Command-Mode")
        {Lisp-Entry "direction" slot #f 341 8 341 17 ()}
        {Lisp-Entry "context" slot #f 342 8 342 15 ()}
        {Lisp-Entry "ranges" slot #f 343 8 343 14 ()}
        {Lisp-Entry "found-style" slot #f 344 8 344 19 ()}
        {Lisp-Entry "highlight-style" slot #f 345 8 345 23 ()}
        {Lisp-Entry "initialize" method #f 348 20 348 30 ("direction~self" "set!" "nextmethod" "direction" "text")}
        {Lisp-Entry "prepare-search" method #f 353 11 353 25 ("Highlight" "'Highlight" "highlight-style" "Color" "highlight:" "get-styles-domain" "domain:" "Default" "'Default" "base:" "Found" "'Found" "name:" "Text-Style" "new" "found-style" "or" "list" "if" "ranges" "set!" "Text-View" "is?" "and" "text?" "get-client-selection" "client-selection" "get-client" "client" "let" "context" "set-target" "range")}
        {Lisp-Entry "mode-actions" method #f 363 20 363 32 ("command-search" "'command-search" "find-actions")}
        {Lisp-Entry "key-press" method #f 367 20 367 29 ("whole-words?:" "direction" "search" "key")}
        {Lisp-Entry "backspace-press" method #f 371 20 371 35 ("whole-words?:" "direction" "search" "word?" "word?:" "key")}
        {Lisp-Entry "next-page" method #f 375 20 375 29 ("forward" "'forward" "search")}
        {Lisp-Entry "prior-page" method #f 379 20 379 30 ("backward" "'backward" "search")}
        {Lisp-Entry "select-whole-words?" method #f 383 11 383 30 ("context" "set-whole-words?" "whole-words?")}
        {Lisp-Entry "select-ignore-case?" method #f 387 11 387 30 ("context" "set-ignore-case?" "ignore-case?")}
        {Lisp-Entry "on-whole-words" method #f 391 11 391 25 ("rehighlight-target" "if" "user-message" "context" "get-whole-words?" "not" "select-whole-words?" "evt")}
        {Lisp-Entry "on-ignore-case" method #f 397 11 397 25 ("rehighlight-target" "if" "user-message" "context" "get-ignore-case?" "not" "select-ignore-case?" "evt")}
        {Lisp-Entry "on-forward" method #f 403 11 403 21 ("forward" "'forward" "search" "evt")}
        {Lisp-Entry "on-backward" method #f 407 11 407 22 ("backward" "'backward" "search" "evt")}
        {Lisp-Entry "on-current" method #f 411 11 411 21 ("cancel" "evt")}
        {Lisp-Entry "on-widen" method #f 415 11 415 19 ("whole-words?:" "direction" "search" "text" "insert-string" "bell" "empty-string?" "if" "Range$Cell$" "new" "range-first-string" "add" "next-word" "extend" "get-end" "end" "get-selection" "selection" "get-client" "client" "let" "evt")}
        {Lisp-Entry "on-select-outer" method #f 427 11 427 26 ("get-client" "select-outer" "evt")}
        {Lisp-Entry "on-center-caret" method #f 431 11 431 26 ("get-client" "center-caret" "evt")}
        {Lisp-Entry "on-prior" method #f 435 11 435 19 ("get-client" "prior-page" "evt")}
        {Lisp-Entry "on-next" method #f 439 11 439 18 ("get-client" "next-page" "evt")}
        {Lisp-Entry "on-home" method #f 443 11 443 18 ("finish" "get-client" "on-home" "evt")}
        {Lisp-Entry "on-end" method #f 448 11 448 17 ("finish" "get-client" "on-end" "evt")}
        {Lisp-Entry "on-finish" method #f 453 11 453 20 ("finish" "evt")}
        {Lisp-Entry "on-cancel" method #f 457 11 457 20 ("cancel" "evt")}
        {Lisp-Entry "search" method #f 461 11 461 17 ("iterate" "get-whole-words?" "or" "suffix" "prefix" "text" "first-line" "content" "select-whole-words?" "Text-View" "is?" "when" "get-client" "set-selection" "found-style" "text-contextual-search-all" "highlight-style" "Text-Highlight" "add-highlight" "nu=?" "end" "start" "lambda" "for-each" "empty-string?" "unless" "remove-highlights" "found-range" "highlight-target" "Range$Cell$" "new" "to" "from" "bind" "bell" "begin" "append" "set-car!" "last-pair" "pair" "range" "update-range" "reversed?:" "start:" "list" "text-contextual-search" "found" "set-whole-words?" "'backward" "eq?" "reversed?" "cardinality" "nu+" "backward" "get-start" "get-end" "forward" "case" "pos" "last" "last-range" "format" "concatenate" "not" "if" "target" "let" "key" "client" "search-key" "1" "+" "ranges" "set!" "set-regexp" "0" "get-target" "subseq" "context" "set-target" "len" "reset-prefix" "define" "keep" "'keep" "whole-words?" "whole-words?:" "again?" "direction")}
        {Lisp-Entry "rehighlight-target" method #f 526 11 526 29 ("direction" "search")}
        {Lisp-Entry "remove-highlights" method #f 530 11 530 28 ("remove-all-highlights" "Text-View" "is?" "when" "get-client" "client" "let")}
        {Lisp-Entry "finish" method #f 536 20 536 26 ("cleanup")}
        {Lisp-Entry "cancel" method #f 540 20 540 26 ("cleanup" "get-client-position" "scroll-to" "ensure-displayed?:" "set-selection" "when" "get-client-selection" "client-selection" "get-client" "client" "let")}
        {Lisp-Entry "cleanup" method #f 549 20 549 27 ("clear-user-message" "acquire-focus" "unless" "remove-highlights" "when" "get-client" "client" "let" "text" "restore-client" "lose-focus?")}}
      {Lisp-Entry "Extended-Mode" class #f 564 7 564 20 ("Command-Mode")
        {Lisp-Entry "mode-actions" method #f 567 20 567 32 ("command-extended" "'command-extended" "find-actions")}
        {Lisp-Entry "on-find-file" method #f 571 11 571 23 ("user-message" "refresh-focus-actions" "text-ending" "set-caret" "current-directory" "standardize-filename" "set-text" "Find-File-Mode" "new" "text" "set-mode" "evt")}
        {Lisp-Entry "on-find-filename" method #f 579 11 579 27 ("user-message" "refresh-focus-actions" "set-text" "Find-Filename-Mode" "new" "text" "set-mode" "evt")}
        {Lisp-Entry "on-find-buffer" method #f 586 11 586 25 ("user-message" "refresh-focus-actions" "Find-Buffer-Mode" "new" "text" "set-mode" "evt")}
        {Lisp-Entry "on-save-buffer" method #f 592 11 592 25 ("on-save" "bell" "not" "if" "current-document" "guest" "let" "finish" "evt")}
        {Lisp-Entry "on-save-buffer-as" method #f 600 11 600 28 ("on-save-as" "bell" "not" "if" "current-document" "guest" "let" "finish" "evt")}
        {Lisp-Entry "on-save-all" method #f 608 11 608 22 ("on-save-all" "get-application" "appl" "let" "finish" "evt")}
        {Lisp-Entry "on-revert-buffer" method #f 614 11 614 27 ("on-revert-saved" "bell" "not" "if" "current-document" "guest" "let" "finish" "evt")}
        {Lisp-Entry "on-kill-buffer" method #f 622 11 622 25 ("on-close" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-delete-stage" method #f 627 11 627 26 ("finish" "delete-stage" "evt")}
        {Lisp-Entry "on-delete-other-stages" method #f 632 11 632 33 ("finish" "delete-other-stages" "evt")}
        {Lisp-Entry "on-split-stage-vertically" method #f 637 11 637 36 ("finish" "split-stage-vertically" "evt")}
        {Lisp-Entry "on-split-stage-horizontally" method #f 642 11 642 38 ("finish" "split-stage-horizontally" "evt")}
        {Lisp-Entry "on-quit" method #f 647 11 647 18 ("on-quit-application" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-start-recording" method #f 652 11 652 29 ("on-start-recording" "get-application" "get-recorder" "recorder" "let" "finish" "evt")}
        {Lisp-Entry "on-stop-recording" method #f 658 11 658 28 ("on-stop-recording" "get-application" "get-recorder" "recorder" "let" "finish" "evt")}
        {Lisp-Entry "on-play-recording" method #f 664 11 664 28 ("on-play-recording" "get-application" "get-recorder" "recorder" "let" "finish" "evt")}
        {Lisp-Entry "on-downcase-selection" method #f 670 11 670 32 ("on-downcase-selection" "bell" "Text-View" "is-not?" "if" "current-document" "text" "let" "finish" "evt")}
        {Lisp-Entry "on-upcase-selection" method #f 678 11 678 30 ("on-upcase-selection" "bell" "Text-View" "is-not?" "if" "current-document" "text" "let" "finish" "evt")}
        {Lisp-Entry "on-select-all" method #f 686 11 686 24 ("on-select-all" "bell" "not" "if" "current-document" "view" "let" "finish" "evt")}
        {Lisp-Entry "on-finish" method #f 694 11 694 20 ("finish" "evt")}
        {Lisp-Entry "on-cancel" method #f 698 11 698 20 ("cancel" "evt")}}
      {Lisp-Entry "Find-Mode" class #f 707 7 707 16 ("Command-Mode")
        {Lisp-Entry "mode-actions" method #f 710 20 710 32 ("command-find" "'command-find" "find-actions")}
        {Lisp-Entry "get-constituent-test" method #f 714 20 714 40 ("alphanumeric?")}
        {Lisp-Entry "auto-complete?" method #f 718 20 718 34 ()}
        {Lisp-Entry "auto-complete-char?" method #f 722 20 722 39 ("memv?" "last" "key")}
        {Lisp-Entry "favorite-completions?" method #f 726 20 726 41 ()}
        {Lisp-Entry "complete-name?" method #f 730 20 730 34 ("1" ">=" "size")}
        {Lisp-Entry "completion-name" method #f 734 20 734 35 ("0" "Cell" "Range$Cell$" "new" "text" "get-string" "pos")}
        {Lisp-Entry "on-finish" method #f 738 11 738 20 ("finish" "evt")}
        {Lisp-Entry "on-cancel" method #f 742 11 742 20 ("cancel" "evt")}
        {Lisp-Entry "cancel" method #f 746 20 746 26 ("cleanup")}
        {Lisp-Entry "cleanup" method #f 750 20 750 27 ("clear-user-message" "acquire-focus" "unless" "when" "get-client" "client" "let" "restore-client" "text" "set-string-content" "lose-focus?")}}
      {Lisp-Entry "Find-File-Mode" class #f 765 7 765 21 ("Find-Mode")
        {Lisp-Entry "symbol-completions" method #f 768 20 768 38 ("dot-and-dot-dot" "'dot-and-dot-dot" "ignore-hidden:" "current-directory" "path:" "list" "directory-content" "string-append" "standardize-filename" "path" "char-ci=?" "test:" "compare-n" "lambda" "collect" "directory" "'directory" "pathname-type" "eq?" "file-exists?" "and" "or" "when" "dir" "receive" "string-length" "1" "+" "0" "substring" "values" "not" "if" "reversed?:" "find" "pos" "let" "filename" "split-filename" "define" "name")}
        {Lisp-Entry "finish" method #f 790 20 790 26 ("bell" "cleanup" "get-application" "edit-document" "get-parent" "set-current-directory" "pathname-normalize" "tokenise-filename" "File" "new" "anchorize" "file" "regular" "'regular" "pathname-type" "eq?" "file-exists?" "and" "if" "text" "first-line" "filename" "let")}}
      {Lisp-Entry "Find-Filename-Mode" class #f 806 7 806 25 ("Find-Mode")
        {Lisp-Entry "filenames" slot #f 809 8 809 17 ()}
        {Lisp-Entry "initialize" method #f 812 20 812 30 ("filenames" "set!" "nextmethod" "table-set!" "get-name" "downcase" "name" "when" "get-source" "source" "file" "lambda" "for-each-project-file" "equal?" "test:" "make-table" "table" "get-workbench" "workbench" "let" "collect-filenames" "define" "text")}
        {Lisp-Entry "symbol-completions" method #f 828 20 828 38 ("queue-list" "enqueue" "char-ci=?" "test:" "string-length" "compare-n" "when" "file" "filename" "lambda" "filenames" "iterate-table" "new-queue" "queue" "let" "name")}
        {Lisp-Entry "finish" method #f 837 20 837 26 ("bell" "get-application" "edit-document" "if" "text" "first-line" "continuation-return" "1" "start:" "find" "not" "0" "string-ref" "eqv?" "and" "empty-string?" "or" "substring" "remaining" "char-ci=?" "test:" "compare-n" "when" "file" "filename" "filenames" "iterate-table" "string-length" "len" "let" "return" "lambda" "continuation-capture" "name" "find-file" "define")}}
      {Lisp-Entry "Find-Buffer-Mode" class #f 864 7 864 23 ("Find-Mode")
        {Lisp-Entry "symbol-completions" method #f 867 20 867 38 ("all-views" "char-ci=?" "test:" "string-length" "compare-n" "when" "present-title" "presentation" "let" "view" "lambda" "collect" "name")}
        {Lisp-Entry "finish" method #f 875 20 875 26 ("cleanup" "bell" "current-frame" "focus-host" "first" "send-to-back" "begin" "2" "length" ">=" "all-frames" "views" "empty-string?" "if" "text" "first-line" "let" "all-views" "present-title" "string-ci=?" "view" "lambda" "find-if" "name" "find-view" "define")}
        {Lisp-Entry "present-title" definition #f 897 15 897 28 ("empty-string?" "null?" "or" "get-controller" "name-status" "Document" "get-guest" "guest" "Host-View" "is?" "if" "View" "get-title" "Window" "typecase" "title" "let" "window/view")}
        {Lisp-Entry "all-views" definition #f 913 15 913 24 ("collect-palettes" "collect-frames" "append")}}
      {Lisp-Entry "Execute-Mode" class #f 923 7 923 19 ("Command-Mode")
        {Lisp-Entry "mode-actions" method #f 926 20 926 32 ("command-execute" "'command-execute" "find-actions")}
        {Lisp-Entry "auto-complete?" method #f 930 20 930 34 ()}
        {Lisp-Entry "on-finish" method #f 934 11 934 20 ("finish" "evt")}
        {Lisp-Entry "on-cancel" method #f 938 11 938 20 ("cancel" "evt")}}
      {Lisp-Entry "standardize-filename" definition #f 947 13 947 33 ("cardinality" "substring" "string-append" "starts-with?" "if" "pathname-normalize" "home" "let" "filename")}}})
"Command-Toolbar"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "view" "Command-Toolbar.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Command-Toolbar" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Command-Toolbar" class #f 45 7 45 22 ("command-shell" "name:" "entry" "style:" "edge" "border-type:" "2" "Rect" "layout-insets:" "fill" "layout-type:" "Toolbar")
        {Lisp-Entry "host-title" method #f 54 25 54 35 ()}}}})
"Commandbar-Preferences"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "preference" "Commandbar-Preferences.jazz"} 1290011726
    {Lisp-Entry "jazz.ui.preference.Commandbar-Preferences" module #f 37 8 37 49 ("jazz")
      {Lisp-Entry "Commandbar-Preferences" class #f 45 7 45 29 (":command" "model:" "second" "location:" "vert" "orientation:" "-27" "division:" "edge" "separator:" "Splitter-Preferences")}}})
"Completions-Domain"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "preference" "Completions-Domain.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Completions-Domain" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Completions-Domain" class #f 44 20 44 38 ("List-Domain")
        {Lisp-Entry "finish" method #f 47 20 47 26 ("Completion-Domain" "new" "domain" "set!" "nextmethod" "rest")}}
      {Lisp-Entry "Completion-Domain" class #f 57 7 57 24 ("String-Domain")
        {Lisp-Entry "present" method #f 60 20 60 27 ("cdr" "car" "format" "value")}}}})
"Connector"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Connector.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Connector" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Connector" class #f 46 20 46 29 ("explicit" "initialize" "Line-View")
        {Lisp-Entry "client" property #f 49 12 49 18 ()}
        {Lisp-Entry "get-client" accessor #f 49 43 49 51 ()}
        {Lisp-Entry "set-client" accessor #f 49 43 49 51 ()}
        {Lisp-Entry "start" property #f 50 12 50 17 ()}
        {Lisp-Entry "end" property #f 51 12 51 15 ()}
        {Lisp-Entry "start-view" slot #f 54 8 54 18 ()}
        {Lisp-Entry "end-view" slot #f 55 8 55 16 ()}
        {Lisp-Entry "get-start" method #f 63 18 63 27 ("start")}
        {Lisp-Entry "set-start" method #f 67 18 67 27 ("ending-removed" "start-view" "when" "start" "set!" "value")}
        {Lisp-Entry "get-end" method #f 74 18 74 25 ("end")}
        {Lisp-Entry "set-end" method #f 78 18 78 25 ("ending-removed" "end-view" "when" "end" "set!" "value")}
        {Lisp-Entry "default-client" method #f 90 29 90 43 ("parent")}
        {Lisp-Entry "get-start-view" method #f 99 18 99 32 ("setup-ending" "set!" "start" "and" "start-view" "or")}
        {Lisp-Entry "get-end-view" method #f 103 18 103 30 ("setup-ending" "set!" "end" "and" "end-view" "or")}
        {Lisp-Entry "setup-ending" method #f 107 11 107 23 ("ending-added" "find-ending" "view" "when" "default-client" "find-component" "if" "client" "let" "name")}
        {Lisp-Entry "find-ending" method #f 116 29 116 40 ("find-component" "name" "client")}
        {Lisp-Entry "ending-added" method #f 120 29 120 41 ("view")}
        {Lisp-Entry "ending-removed" method #f 124 29 124 43 ("view")}
        {Lisp-Entry "update" method #f 133 18 133 24 ("set-to" "set-from" "get-position" "p" "Rect" "new" "set-rect" "bottom" "max" "right" "get-h" "left" "get-v" "min" "-" "top" "Tolerance" "2" "line-width" "/" "+" "fxceiling" "lw" "get-center" "let*" "and" "when" "get-end-view" "e" "get-start-view" "s" "let")}
        {Lisp-Entry "Unselected-Color" definition #f 156 14 156 30 ("Black" "name:" "Color")}
        {Lisp-Entry "unselected-color" method #f 160 29 160 45 ("Unselected-Color")}
        {Lisp-Entry "line-color" method #f 164 20 164 30 ("unselected-color" "get-editor" "selected-color" "if" "surrogate" "selection-rank" "rank" "let")}
        {Lisp-Entry "get-class-descriptor" method #f 176 25 176 45 ("Connector-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 185 11 185 17 ()
        {Lisp-Entry "Connector-Descriptor" class #f 191 7 191 27 ("nullable?:" "domain" "title:" "client" "name:" "end" "start" "categorized:" "Line-View-Descriptor")
          {Lisp-Entry "component-surrogate-class" method #f 204 20 204 45 ("Connector-Surrogate" "component")}}}}})
"Connector-Surrogate"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Connector-Surrogate.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Connector-Surrogate" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Connector-Surrogate" class #f 43 20 43 39 ("Line-Surrogate")
        {Lisp-Entry "move-client?" method #f 46 20 46 32 ()}
        {Lisp-Entry "size-client?" method #f 50 20 50 32 ()}
        {Lisp-Entry "select" method #f 54 20 54 26 ("redraw-border" "focus?" "rank")}
        {Lisp-Entry "redraw-border" method #f 58 20 58 33 ("client" "invalidate-view")}
        {Lisp-Entry "draw" method #f 62 20 62 24 ("draw-showed-property" "surface")}
        {Lisp-Entry "draw-selected" method #f 66 20 66 33 ("rank" "surface")}}}})
"Container"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Container.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Container" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Container" class #f 44 7 44 16 ("content" "name:" "Layout-View")
        {Lisp-Entry "get-content" method #f 57 18 57 29 ("content" "'content" "child")}
        {Lisp-Entry "inner?" method #f 66 20 66 26 ("get-content" "eq?" "view")}
        {Lisp-Entry "content-inner?" method #f 70 26 70 40 ("view")}}}})
"Content-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Content-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Content-View" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Content-View" class #f 45 20 45 32 ("Layout-View")
        {Lisp-Entry "size-change" method #f 53 20 53 31 ("content-size-change" "when" "get-client" "client" "let" "nextmethod" "size")}
        {Lisp-Entry "add-child" method #f 61 20 61 29 ("layout-view" "nextmethod" "child")}
        {Lisp-Entry "remove-child" method #f 67 20 67 32 ("layout-view" "destroying?" "unless" "nextmethod" "child")}
        {Lisp-Entry "get-container" method #f 78 18 78 31 ("parent")}
        {Lisp-Entry "get-client" method #f 82 18 82 28 ("car" "children" "not-null?" "if")}
        {Lisp-Entry "inner?" method #f 93 20 93 26 ("parent" "content-inner?" "nextmethod" "or" "view")}
        {Lisp-Entry "get-scroll-client" method #f 103 20 103 37 ("get-scroll-client" "when" "get-client" "client" "let")}
        {Lisp-Entry "get-class-descriptor" method #f 114 25 114 45 ("Content-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 123 11 123 17 ()
        {Lisp-Entry "Content-View-Descriptor" class #f 129 7 129 30 ("can-move?:" "can-delete?:" "can-rename?:" "Image-Resource" "image:" "Layout-View-Descriptor")}}}})
"Context-Action"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "context" "Context-Action.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.context.Context-Action" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Context-Action" class #f 43 20 43 34 ("initialize" "Component")
        {Lisp-Entry "image" property #f 46 12 46 17 ()}
        {Lisp-Entry "get-image" accessor #f 46 44 46 52 ()}
        {Lisp-Entry "set-image" accessor #f 46 44 46 52 ()}
        {Lisp-Entry "title" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-title" accessor #f 47 44 47 52 ()}
        {Lisp-Entry "set-title" accessor #f 47 44 47 52 ()}
        {Lisp-Entry "handler" property #f 48 12 48 19 ()}
        {Lisp-Entry "get-handler" accessor #f 48 44 48 52 ()}
        {Lisp-Entry "set-handler" accessor #f 48 44 48 52 ()}
        {Lisp-Entry "construct-literal" method #f 52 16 52 33 ("self" "new" "handler" "title" "image" "context")}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("handler~self" "title~self" "image~self" "set!" "nextmethod" "handler" "title" "image")}
        {Lisp-Entry "print" method #f 63 20 63 25 ("handler" "title" "image" "self" "class-of" "category-name" "format" "readably" "printer")}}}})
"Context-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "context" "Context-Combo.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.context.Context-Combo" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Context-Combo" class #f 47 20 47 33 ("Label" "Font" "font:" "Default" "Text-Style" "default-style:" "top-padding:" "2" "left-padding:" "body" "name:" "Combo-Box")
        {Lisp-Entry "finish" method #f 55 20 55 26 ("update" "nextmethod" "rest")}
        {Lisp-Entry "update" method #f 65 11 65 17 ("set-value" "when" "->string" "list" "get-name" "name" "let" "trait" "lambda" "map" "set-choices" "get-process" "get-context" "active" "get-children" "Trait" "collect-type" "all" "get-preferences" "pref" "let*")}
        {Lisp-Entry "selection-change" method #f 82 11 82 27 ("get-value" "get-process" "set-context")}
        {Lisp-Entry "combo-choice" method #f 91 20 91 32 ("selection-change")}}}})
"Context-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "context" "Context-Manager.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.context.Context-Manager" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Context-Manager" class #f 48 20 48 35 ("251" "blue:" "174" "green:" "123" "red:" "Color" "background:" "Layout-View")
        {Lisp-Entry "external-name" method #f 55 25 55 38 ("context-manager" "'context-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 64 25 64 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 68 25 68 35 ()}
        {Lisp-Entry "client-activate" method #f 72 20 72 35 ("current-document" "install-context")}
        {Lisp-Entry "client-deactivate" method #f 76 20 76 37 ("install-context")}
        {Lisp-Entry "workspace-minimisable?" method #f 80 20 80 42 ()}
        {Lisp-Entry "layout" method #f 89 20 89 26 ("children" "+" "increase!" "20" "-" "Dimension" "set-size" "Point" "new" "set-position" "view-height" "get-height" "height" "get-width" "width" "view" "lambda" "for-each" "10" "top" "let")}
        {Lisp-Entry "install-context" method #f 106 11 106 26 ("layout-view" "get-application" "install-text" "close-children" "guest")}
        {Lisp-Entry "install-text" method #f 113 11 113 23 ("get-context-text" "12" "24" "get-height" "+" "get-width" "Dimension" "set-size" "set-text" "title:" "Image-Resource" "icon:" "self" "parent:" "Context-View" "new" "view" "let" "text-view" "title" "bind" "info" "lambda" "for-each" "when" "provider")}}}})
"Context-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Context-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Context-Menu" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Context-Menu" class #f 43 7 43 19 ("initialize" "Menu")
        {Lisp-Entry "client" property #f 46 12 46 18 ()}
        {Lisp-Entry "get-client" accessor #f 46 43 46 51 ()}
        {Lisp-Entry "set-client" accessor #f 46 43 46 51 ()}
        {Lisp-Entry "component-alias" method #f 49 20 49 35 ("nextmethod" "else" "client" ":client" "case" "name")}
        {Lisp-Entry "make-condensed-menu" method #f 60 18 60 37 ("Separator-Item" "set!" "section" "first?" "collect-sections" "sections" "0" "prefix" "cdr" "string=?" "group" "equal?" "test:" "+" "subseq" "string-length" "title" "leaf" "partition" "groups" "2" "level" "layout-menu" "Context-Menu" "submenu" "user-data:" "string-append" "title:" "parent:" "Label-Item" "new" "menu-item" "let*" "first" "sub-items" "else" ":leaves" "eq?" "null?" "cond" "rest" "string" "value" "bind" "item" "for-each" "super-count" "menu" "proc" "letrec" "second" "list" "user-item" "lambda" "map" "string<?" "sort" "create-tree" "values-tree" "self" "top-menu" "condense-section" "*" "<=" "car" "third" "leaves" "1" "=" "if" "length" "sub-count" "let" "count" "items" "collapse?" "define" "30" "max-leaves" "max-leaves:" "identity" "key" "key:" "create-leaf" "user-items")}}}})
"Context-Provider"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "context" "Context-Provider.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.context.Context-Provider" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Context-Provider" interface #f 43 24 43 40 ()
        {Lisp-Entry "get-context-text" method #f 46 35 46 51 ()}}}})
"Context-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "context" "Context-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.context.Context-View" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Context-View" class #f 47 20 47 32 ("fill" "layout-type:" "content" "White" "name:" "Color" "background:" "explicit" "initialize" "Container")
        {Lisp-Entry "icon" property #f 50 12 50 16 ()}
        {Lisp-Entry "get-icon" accessor #f 50 42 50 50 ()}
        {Lisp-Entry "set-icon" accessor #f 50 42 50 50 ()}
        {Lisp-Entry "title" property #f 51 12 51 17 ()}
        {Lisp-Entry "get-title" method #f 64 20 64 29 ("title")}
        {Lisp-Entry "set-title" method #f 68 20 68 29 ("title" "set!" "value")}
        {Lisp-Entry "get-text" method #f 77 18 77 26 ("text" "'text" "get-content" "find-component")}
        {Lisp-Entry "set-text" method #f 81 18 81 26 ("get-content" "set-parent" "close" "when" "get-text" "let" "close-text" "define" "text")}
        {Lisp-Entry "size-change" method #f 96 20 96 31 ("2" "Rect" "insets:" "invalidate-border" "invalidate-caption" "nextmethod" "size")}
        {Lisp-Entry "layout" method #f 107 20 107 26 ("-" "Dimension" "new" "set-size" "24" "0" "Point" "set-position" "get-content" "content" "get-height" "height" "get-width" "width" "let")}
        {Lisp-Entry "caption-rect" method #f 120 11 120 23 ("24" "get-width" "0" "Rect" "new")}
        {Lisp-Entry "invalidate-caption" method #f 129 11 129 29 ("caption-rect" "invalidate-rect")}
        {Lisp-Entry "Active-Colors" definition #f 138 14 138 27 ("223" "blue:" "94" "green:" "6" "red:" "Color" "list")}
        {Lisp-Entry "Frame-Dark-Color" definition #f 142 14 142 30 ("blue:" "green:" "128" "red:" "Color")}
        {Lisp-Entry "Frame-Medium-Color" definition #f 145 14 145 32 ("blue:" "green:" "142" "red:" "Color")}
        {Lisp-Entry "Frame-Light-Color" definition #f 148 14 148 31 ("blue:" "green:" "160" "red:" "Color")}
        {Lisp-Entry "draw" method #f 152 20 152 24 ("7" "6" "22" "if" "draw-text" "White" "Color" "set-text-color" "Label" "name:" "Font" "set-font" "title" "5" "4" "get-application" "get-images-portfolio" "draw-image" "icon" "when" "second" "1" "Active-Colors" "first" "0" "list" "gradient-fill" "caption-rect" "caption" "get-bounds" "bounds" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "mouse-down" method #f 169 20 169 30 ("caption-rect" "in-rect?" "cond" "pos")}}}})
"Cursor-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Cursor-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Cursor-Event" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Cursor-Event" class #f 43 7 43 19 ("Event")
        {Lisp-Entry "position" slot #f 46 8 46 16 ()}
        {Lisp-Entry "get-position" accessor #f 46 24 46 32 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("position" "set!" "nextmethod" "pos" "sender" "kind")}}}})
"Date-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "Date-Request.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.Date-Request" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Date-Request" class #f 43 20 43 32 ("String-Request")}
      {Lisp-Entry "Date-Request" class #f 49 20 49 32 ("title:" "prefix" "name:" "String-Request")
        {Lisp-Entry "form-model" method #f 57 11 57 21 ("nextmethod" "else" "Date-Text-View" "text" "get-name" "case" "form")}}}})
"Date-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Date-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Date-Text-View" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Date-Text-View" class #f 43 20 43 34 ("Text-View")}}})
"Default-Skin"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Default-Skin.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Default-Skin" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Default-Skin" class #f 44 7 44 19 ("scrollbar/document" "scrollbar/tool" "scrollbar" "header/document" "header/tool" "flat?:" "header" "border-flat?:" "group" "border/outline" "edge-flat?:" "border/entry" "name:" "title:" "Skin")}}})
"Desktop"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "Desktop.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.Desktop" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Desktop" class #f 43 7 43 14 ("Window")}}})
"Dialog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "Dialog.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.Dialog" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Dialog" class #f 44 7 44 13 ("initialize" "Overlapped")
        {Lisp-Entry "sizable?" property #f 47 12 47 20 ()}
        {Lisp-Entry "get-sizable?" accessor #f 47 46 47 54 ()}
        {Lisp-Entry "set-sizable?" accessor #f 47 46 47 54 ()}
        {Lisp-Entry "closable?" property #f 48 12 48 21 ()}
        {Lisp-Entry "get-closable?" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "set-closable?" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "new-root" method #f 51 20 51 28 ("offscreen?:" "Dialog-Host" "new")}
        {Lisp-Entry "close-window" method #f 60 20 60 32 ("processed" "root" "cancel-modal" "lambda" "delay-event")}
        {Lisp-Entry "destroy" method #f 68 20 68 27 ("nextmethod" "root" "destroy-modal")}}}})
"Dialog-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "Dialog-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.Dialog-Actions" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Dialog-Actions" class #f 43 20 43 34 ("Actions")}}})
"Dialog-Host"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "hosting" "Dialog-Host.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.hosting.Dialog-Host" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Dialog-Host" class #f 50 20 50 31 ("Medium" "name:" "Color" "background:" "initialize" "Host-View")
        {Lisp-Entry "modal-done?" slot #f 53 8 53 19 ()}
        {Lisp-Entry "modal-closed?" slot #f 54 8 54 21 ()}
        {Lisp-Entry "modal-result" slot #f 55 8 55 20 ()}
        {Lisp-Entry "modal-signal" slot #f 56 8 56 20 ()}
        {Lisp-Entry "modal-action" slot #f 57 8 57 20 ()}
        {Lisp-Entry "processing-modal?" method #f 69 18 69 35 ("modal-done?" "not")}
        {Lisp-Entry "destroy-modal" method #f 78 11 78 24 ("modal-done?" "modal-result" "modal-closed?" "set!")}
        {Lisp-Entry "class-actions" method #f 89 20 89 33 ("nextmethod" "dialog" "'dialog" "find-actions" "cons")}
        {Lisp-Entry "on-ok" method #f 99 18 99 23 ("get-modal-result" "end-modal" "validate-dialog" "evt")}
        {Lisp-Entry "on-cancel" method #f 104 18 104 27 ("cancel-modal" "evt")}
        {Lisp-Entry "validate-dialog" method #f 113 20 113 35 ("validate-dialog" "guest" "when")}
        {Lisp-Entry "get-modal-result" method #f 118 20 118 36 ("guest" "get-modal-result")}
        {Lisp-Entry "process-modal" method #f 122 18 122 31 ("modal-action" "close" "enable-window" "modal-result" "else" "signal" "modal-signal" "throw-cancel" "modal-closed?" "cond" "process-events" "with-current-loop" "Cancel-Signal" "Modal-Done" "catch" "lambda" "execute-event" "show" "update-modal-actions" "self" "set-current-modal" "modal-done?" "set!" "begin" "unwind-protect" "disable-window" "when" "get-player" "player" "current-modal" "preserved" "current-window" "overlapped" "get-toplevel" "toplevel" "get-application" "application" "let*" "prog1" "release-captured-view" "close-popups")}
        {Lisp-Entry "end-modal" method #f 165 18 165 27 ("modal-done" "modal-result" "modal-closed?" "set!" "result")}
        {Lisp-Entry "signal-modal" method #f 171 18 171 30 ("modal-done" "modal-signal" "set!" "signal")}
        {Lisp-Entry "cancel-modal" method #f 176 18 176 30 ("Cancel-Signal" "new" "signal-modal")}
        {Lisp-Entry "close-modal" method #f 180 18 180 29 ("modal-done" "modal-action" "modal-result" "modal-closed?" "set!" "action")}}
      {Lisp-Entry "Modal-Done" class #f 187 7 187 17 ("Signal")}
      {Lisp-Entry "modal-done" definition #f 190 13 190 23 ("Modal-Done" "new" "throw")}}})
"Directories-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "Directories-Request.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.Directories-Request" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Directories-Request" class #f 47 20 47 39 ("on-cancel" "694" "cancel" "default?:" "on-ok" ":host" "315" "610" "ok" "8" "770" "300" "6" "on-remove-directory" "123" "remove-directory" "on-add-directory" "95" "692" "add-directory" "on-move-down" "61" "move-down" "on-move-up" "24" "80" "691" "move-up" "400" "width:" "display-images?:" "toplevel-controls?:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-selection-change" "selection-handler:" "on-action" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "2" "top-padding:" "directory" "filled-column:" "directories-tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "254" "671" "33" "directories-border" "Label" "name:" "Font" "font:" "16" "191" "9" "10" "Point" "position:" "title:" "350" "782" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "directories" property #f 50 12 50 23 ()}
        {Lisp-Entry "get-directories" accessor #f 50 49 50 57 ()}
        {Lisp-Entry "set-directories" accessor #f 50 49 50 57 ()}
        {Lisp-Entry "edited-directory" slot #f 53 8 53 24 ()}
        {Lisp-Entry "finish" method #f 73 20 73 26 ("acquire-focus" "update-buttons" "setup-selection" "setup-directories" "get-tree" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-tree" method #f 87 11 87 19 ("directories-tree" "'directories-tree" "locate")}
        {Lisp-Entry "host-title" method #f 96 25 96 35 ()}
        {Lisp-Entry "host-position" method #f 100 25 100 38 ("300" "450" "Point")}
        {Lisp-Entry "host-size" method #f 104 25 104 34 ("120" "302" "Dimension")}
        {Lisp-Entry "on-action" method #f 113 11 113 20 ("update-buttons" "evt")}
        {Lisp-Entry "on-selection-change" method #f 117 11 117 30 ("update-buttons" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-add-directory" method #f 123 11 123 27 ("update" "list" "append" "directories" "set!" "choose-directory" "directory" "get-tree" "tree" "let" "evt")}
        {Lisp-Entry "on-remove-directory" method #f 130 11 130 30 ("set-single-selection" "get-visible-count" "<" "when" "update" "remove" "set!" "directories" "element" "directory" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-move-up" method #f 140 11 140 21 ("set-single-selection" "acquire-focus" "setup-directories" "1" "-" "insert!" "remove!" "set!" "directories" "element" "directory" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-move-down" method #f 151 11 151 23 ("set-single-selection" "acquire-focus" "setup-directories" "1" "+" "insert!" "remove!" "set!" "directories" "element" "directory" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-reset" method #f 163 11 163 19 ("on-reset" "'on-reset" "unimplemented" "evt")}
        {Lisp-Entry "on-return-press" method #f 168 20 168 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" method #f 174 20 174 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update" method #f 184 11 184 17 ("get-tree" "setup-directories")}
        {Lisp-Entry "setup-directories" method #f 188 11 188 28 ("directories" "user-data:" "present" "title:" "Tree-Node" "new" "list" "children:" "add-row" "directory" "for-each" "lambda" "with-update-locked" "remove-every-row" "tree")}
        {Lisp-Entry "setup-selection" method #f 197 11 197 26 ("0" "list" "set-selection" "directories" "when" "tree")}
        {Lisp-Entry "update-buttons" method #f 207 11 207 25 ("defaults" "reset" "'reset" "1" "-" "<" "0" ">" "directories" "element" "directory" "let" "remove-directory" "'remove-directory" "add-directory" "'add-directory" "move-down" "'move-down" "move-up" "'move-up" "locate" "set-enabled?" "begin" "null?" "if" "get-visible-count" "count" "get-single-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "edit-directory" method #f 231 11 231 25 ("enter-directory" "selection")}
        {Lisp-Entry "enter-directory" method #f 235 11 235 26 ()}
        {Lisp-Entry "get-modal-result" method #f 244 20 244 36 ("get-output" "put" "get-user-data" "directory" "rank" "row" "lambda" "for-each-visible-row" "List-Factory" "new" "directories" "get-tree" "tree" "let" "enter-directory")}}}})
"Directories-Search"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Directories-Search.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.search.Directories-Search" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Directories-Search" class #f 51 20 51 38 ("extensions" "46" "48" "static-ext" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "focus-selects-all?:" "show-unfocused-selection?:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "directories" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "Entry-Border" "Color" "border-color:" "solid" "border-type:" "19" "248" "83" "16" "62" "Dimension" "size:" "18" "13" "Point" "position:" "static-dir" "title:" "domain" "name:" "Search-View")
        {Lisp-Entry "search-targets" method #f 75 20 75 34 ("search" "'search" "search-threaded" "lambda" "new-thread" "thread-start!" "search-set")}
        {Lisp-Entry "search-threaded" method #f 83 24 83 39 ("close-manager" "unregister-activity" "get-activity-manager" "manager" "when" "user-feedback" "select-results" "get-search-targets" "get-output" "add-results" "text" "'text" "set-mode" "get-results" "results" "let" "post-event" "search-in-directories" "List-Factory" "factory" "get-expression?" "expression?" "default-search-extensions" "not-null?" "if" "effective-extensions" "'extensions" "append!" "apply" "->string" "extensions" "'directories" "locate" "get-string-content" "read-delimited-string" "Directory" "list" "lambda" "map" "directories" "get-search-reporter" "User-Reporter" "new" "reporter" "get-application" "appl" "let*" "search-set")}
        {Lisp-Entry "on-action" method #f 113 11 113 20 ("on-search" "evt")}
        {Lisp-Entry "get-tab-stops" method #f 117 20 117 33 ("targets" "'targets" "extensions" "'extensions" "directories" "'directories" "locate" "list")}
        {Lisp-Entry "setup-search-reporter" method #f 129 20 129 41 ("set-step" "1" "set-pos" "500" "0" "Range" "set-range" "set-infinite?" "count" "reporter")}}}})
"Directories-Search-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Directories-Search-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.search.Directories-Search-Preferences" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "Directories-Search-Preferences" class #f 44 20 44 50 ("title:" "Search-View-Preferences")}}})
"Directory-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "Directory-Request.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.Directory-Request" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Directory-Request" class #f 45 20 45 37 ("title:" "ok" "buttonbar" "name:" "Pathname-Request")
        {Lisp-Entry "host-title" method #f 54 25 54 35 ()}
        {Lisp-Entry "update-content" method #f 63 20 63 34 ("for-each" "lambda" "with-update-locked" "remove-every-row" "add-pathname" "pathname" "add" "define" "get-tree" "tree" "leaves?:" "nodes?:" "directory" "get-content" "directories" "let")}
        {Lisp-Entry "update-buttons" method #f 75 20 75 34 ("directory?" "ok" "'ok" "locate" "set-enabled?" "selected-pathname" "pathname" "let" "nextmethod")}
        {Lisp-Entry "default-action" method #f 86 20 86 34 ("down" "directory?" "cond" "selected-pathname" "pathname" "let")}}}})
"DnD"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dnd" "DnD.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dnd.DnD" module #f 37 18 37 33 ("jazz")
      {Lisp-Entry "DnD" class #f 40 7 40 10 ("initialize" "Object")
        {Lisp-Entry "source" slot #f 43 8 43 14 ()}
        {Lisp-Entry "get-source" accessor #f 43 39 43 47 ()}
        {Lisp-Entry "set-source" accessor #f 43 39 43 47 ()}
        {Lisp-Entry "target" slot #f 44 8 44 14 ()}
        {Lisp-Entry "get-target" accessor #f 44 39 44 47 ()}
        {Lisp-Entry "set-target" accessor #f 44 39 44 47 ()}
        {Lisp-Entry "view" slot #f 45 8 45 12 ()}
        {Lisp-Entry "get-view" accessor #f 45 39 45 47 ()}
        {Lisp-Entry "set-view" accessor #f 45 39 45 47 ()}
        {Lisp-Entry "initialize" method #f 48 20 48 30 ("source~self" "set!" "nextmethod" "source" "source:")}
        {Lisp-Entry "print" method #f 53 20 53 25 ("view" "target" "source" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}}})
"Docked-Host"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "hosting" "Docked-Host.jazz"} 1289843906
    {Lisp-Entry "jazz.ui.hosting.Docked-Host" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Docked-Host" class #f 52 20 52 31 ("flow" "layout-type:" "22" "0" "Dimension" "size:" "tools" "name:" "initialize" "Host-View")
        {Lisp-Entry "fullscreen?" property #f 55 12 55 23 ()}
        {Lisp-Entry "get-fullscreen?" accessor #f 55 48 55 56 ()}
        {Lisp-Entry "set-fullscreen?" accessor #f 55 48 55 56 ()}
        {Lisp-Entry "caption?" property #f 56 12 56 20 ()}
        {Lisp-Entry "get-caption?" accessor #f 56 48 56 56 ()}
        {Lisp-Entry "set-caption?" accessor #f 56 48 56 56 ()}
        {Lisp-Entry "zoomable?" property #f 57 12 57 21 ()}
        {Lisp-Entry "get-zoomable?" accessor #f 57 48 57 56 ()}
        {Lisp-Entry "set-zoomable?" accessor #f 57 48 57 56 ()}
        {Lisp-Entry "size-change" method #f 70 20 70 31 ("invalidate-border" "invalidate-top" "nextmethod" "size")}
        {Lisp-Entry "on-close" method #f 80 11 80 19 ("selection" "'selection" "first-child" "Pad-View" "close" "get-location" "set-location" "layout-view" "zoom" "'zoom" "set-mode" "begin" "Workspace-Splitter" "if" "when" "first-view" "other" "let" "Splitter-View" "is?" "cond" "get-toplevel" "set-parent" "set-visible?" "lambda" "with-locked-update" "grand" "get-parent" "parent" "let*" "evt")}
        {Lisp-Entry "on-close" method #f 105 11 105 19 ("hide-splitted" "evt")}
        {Lisp-Entry "hide-splitted" method #f 109 18 109 31 ("selection" "'selection" "first-child" "Pad-View" "close" "get-location" "set-location" "layout-view" "zoom" "'zoom" "set-mode" "begin" "Workspace-Splitter" "if" "when" "first-view" "other" "let" "Splitter-View" "is?" "cond" "get-toplevel" "set-parent" "set-visible?" "lambda" "with-locked-update" "grand" "get-parent" "parent" "let*")}
        {Lisp-Entry "mouse-activate?" method #f 139 20 139 35 ()}
        {Lisp-Entry "activate-focus" method #f 143 20 143 34 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "deactivate-focus" method #f 148 20 148 36 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "install-tools" method #f 158 20 158 33 ("22" "tools-width" "Dimension" "new" "set-size" "set-visible?" "layout-view" "set-parent" "tail" "'tail" "set-location" "tool" "lambda" "for-each" "'tools" "locate" "dest" "get-children" "tools" "let" "when" "get-tools-view" "view" "get-guest" "guest" "let*")}
        {Lisp-Entry "add-tool" method #f 175 18 175 26 ("22" "get-children" "tools-width" "Dimension" "new" "set-size" "layout-view" "set-parent" "'tools" "locate" "tools" "let" "tool")}
        {Lisp-Entry "remove-tool" method #f 183 18 183 29 ("22" "get-children" "tools-width" "Dimension" "new" "set-size" "layout-view" "set-parent" "'tools" "locate" "tools" "let" "tool")}
        {Lisp-Entry "refresh-tools" method #f 191 19 191 32 ("layout-view" "22" "get-children" "tools-width" "Dimension" "new" "set-size" "'tools" "locate" "tools" "let")}
        {Lisp-Entry "tools-width" definition #f 197 15 197 26 ("get-size" "get-width" "increase!" "get-visible?" "when" "tool" "lambda" "for-each" "0" "total" "let" "tools")}
        {Lisp-Entry "layout" method #f 211 20 211 26 ("else" "26" "25" "1" "caption?" "Dimension" "set-size" "set-visible?" "fullscreen?" "cond" "get-height" "height" "let" "guest" "when" "2" "0" "get-width" "3" "-" "max" "Point" "new" "set-position" "get-size" "size" "'tools" "locate" "tools" "let*" "width" "layout-tools" "define")}
        {Lisp-Entry "caption-rect" method #f 242 11 242 23 ("24" "2" "get-width" "-" "1" "Rect" "new")}
        {Lisp-Entry "top-rect" method #f 246 11 246 19 ("25" "2" "get-width" "-" "1" "Rect" "new")}
        {Lisp-Entry "invalidate-top" method #f 255 11 255 25 ("top-rect" "invalidate-rect")}
        {Lisp-Entry "invalidate-caption" method #f 259 20 259 38 ("caption-rect" "invalidate-rect")}
        {Lisp-Entry "Active-Start-Color" definition #f 268 14 268 32 ("252" "blue:" "234" "green:" "225" "red:" "Color")}
        {Lisp-Entry "Active-End-Color" definition #f 271 14 271 30 ("243" "blue:" "186" "green:" "153" "red:" "Color")}
        {Lisp-Entry "Inactive-Start-Color" definition #f 274 14 274 34 ("Medium" "name:" "Color")}
        {Lisp-Entry "Inactive-End-Color" definition #f 277 14 277 32 ("Medium" "name:" "Color")}
        {Lisp-Entry "draw" method #f 281 20 281 24 ("get-width" "line" "increase!" "7" "21" "draw-text" "0" "75" "100" "Black" "set-text-color" "Label" "Font" "set-font" "5" "3" "get-application" "get-images-portfolio" "draw-image" "stroke" "cairo-line-to" "cairo-move-to" "not" "set-line-width" "184" "215" "220" "204" "blue:" "225" "green:" "230" "red:" "Dark" "name:" "Color" "if" "set-color" "get-active-background" "and" "when" "bottom" "right" "height" "37" "get-text-width" "+" "width" "top" ".5" "-" "left" "let*" "selected?" "first?" "get-guest" "class-of" "host-icon" "icon" "get-title" "title" "docked" "lambda" "for-each" "first" "1" "h" "get-frame-color" "frame-rect" "get-inactive-background" "24" "get-right" "get-top" "get-left" "Rect" "new" "fill-background" "get-look" "look" "collect-all" "all" "get-focused-host" "self" "eq?" "focused?" "get-bounds" "bounds" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-look" method #f 328 20 328 28 ("docked" "'docked" "find-look")}
        {Lisp-Entry "get-opaque?" method #f 337 20 337 31 ()}
        {Lisp-Entry "mouse-down" method #f 346 20 346 30 ("focus-host" "focused-host?" "unless" "set-selection" "Pad-View" "is?" "get-parent" "parent" "let" "in-rect?" "when" "rect" "docked" "lambda" "for-all" "pos")}
        {Lisp-Entry "toggle-docked" method #f 357 11 357 24 ("select-next" "lambda" "with-locked-update" "get-h" "<" "text-width" "28" "+" "h" "Label" "name:" "Font" "font" "get-title" "localize" "title" "let*" "Pad-View" "is?" "when" "get-parent" "parent" "let" "pos")}
        {Lisp-Entry "double-click" method #f 369 20 369 32 ("unzoom" "zoom" "split" "'split" "get-state" "eq?" "lambda" "with-locked-update" "Splitter-View" "splitter" "let" "get-application" "toggle-full-screen" "shift-down?" "self" "Pad-View" "is?" "if" "target" "get-parent" "parent" "let*" "zoomable?" "when" "pos")}
        {Lisp-Entry "container-focusable?" method #f 389 20 389 40 ("self" "get-selection" "eq?" "Pad-View" "parent" "is-not?" "or")}
        {Lisp-Entry "ensure-container-focusable" method #f 394 20 394 46 ("self" "set-selection" "Pad-View" "parent" "is?" "when")}
        {Lisp-Entry "for-all" method #f 404 11 404 18 ("increase!" "Rect" "new" "23" "height" "37" "Label" "name:" "Font" "text-width" "width" "top" "1" "+" "if" "left" "eq?" "first?" "get-title" "title" "docked" "lambda" "for-each" "first" "0" "h" "collect-all" "all" "let" "proc")}
        {Lisp-Entry "collect-all" method #f 420 11 420 22 ("self" "list" "get-children" "Pad-View" "is?" "if" "get-parent" "pad" "let")}
        {Lisp-Entry "collect-brothers" method #f 427 11 427 27 ("get-children" "self" "neq?" "host" "lambda" "collect-if" "Pad-View" "is?" "when" "get-parent" "pad" "let")}
        {Lisp-Entry "select-menu" method #f 440 11 440 22 ("25" "2" "Point" "track-popup-menu" "layout-menu" "host:" "list" "properties:" "on-select" "'on-select" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "parent:" "Label-Item" "class-of" "host-icon" "icon" "get-title" "title" "get-guest" "guest" "let*" "docked" "lambda" "for-each" "Context-Menu" "new" "menu" "when" "collect-brothers" "brothers" "let")}
        {Lisp-Entry "on-select" method #f 454 11 454 20 ("focus-host" "set-selection" "lambda" "with-locked-update" "host:" "get-property" "host" "get-parent" "pad" "let" "evt")}}}})
"Docked-Look"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Docked-Look.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Docked-Look" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Docked-Look" class #f 44 7 44 18 ("Frame-Color" "Inactive-Background" "Active-Background" "initialize" "Look")
        {Lisp-Entry "Active-Background" definition #f 47 14 47 31 ("243" "186" "153" "252" "blue:" "234" "green:" "225" "red:" "Color" "vertical" "Gradient")}
        {Lisp-Entry "Inactive-Background" definition #f 50 14 50 33 ("Medium" "name:" "Color")}
        {Lisp-Entry "Frame-Color" definition #f 53 14 53 25 ("blue:" "green:" "128" "red:" "Color")}
        {Lisp-Entry "active-background" property #f 57 12 57 29 ()}
        {Lisp-Entry "get-active-background" accessor #f 57 73 57 81 ()}
        {Lisp-Entry "set-active-background" accessor #f 57 73 57 81 ()}
        {Lisp-Entry "inactive-background" property #f 58 12 58 31 ()}
        {Lisp-Entry "get-inactive-background" accessor #f 58 73 58 81 ()}
        {Lisp-Entry "set-inactive-background" accessor #f 58 73 58 81 ()}
        {Lisp-Entry "frame-color" property #f 59 12 59 23 ()}
        {Lisp-Entry "get-frame-color" accessor #f 59 73 59 81 ()}
        {Lisp-Entry "set-frame-color" accessor #f 59 73 59 81 ()}}}})
"Docked-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Docked-Preferences.jazz"} 1290011420
    {Lisp-Entry "jazz.ui.preference.Docked-Preferences" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Docked-Preferences" class #f 46 20 46 38 ("Image-Resource" "icon:" "initialize" "Figure-Preferences")
        {Lisp-Entry "model" property #f 49 12 49 17 ()}
        {Lisp-Entry "get-model" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "set-model" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "caption?" property #f 50 12 50 20 ()}
        {Lisp-Entry "get-caption?" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "set-caption?" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "zoomable?" property #f 51 12 51 21 ()}
        {Lisp-Entry "get-zoomable?" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "set-zoomable?" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "apply-preferences" method #f 63 20 63 37 ("set-visible?" "get-guest" "client-activate" "location" "set-location" "zoomable?" "set-zoomable?" "caption?" "set-caption?" "set-title" "title" "when" "set-parent" "name" "singleton-docked" "host" "model" "resolve-reference" "class" "let*" "assert" "parent")}
        {Lisp-Entry "get-class-descriptor" method #f 82 25 82 45 ("Docked-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 91 11 91 17 ()
        {Lisp-Entry "Docked-Preferences-Descriptor" class #f 97 7 97 36 ("name:" "zoomable?" "caption?" "model" "location" "categorized:" "Image-Resource" "image:" "Figure-Preferences-Descriptor")
          {Lisp-Entry "component-presentation-property?" method #f 113 20 113 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 117 20 117 46 ("get-title" "or" "component")}
          {Lisp-Entry "component-set-presentation" method #f 121 20 121 46 ("title:" "set-property" "title" "designer" "component")}}}}})
"Document"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "document" "Document.jazz"} 1290089186
    {Lisp-Entry "jazz.ui.document.Document" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Document" interface #f 40 11 40 19 ()
        {Lisp-Entry "get-controller" method #f 43 35 43 49 ()}
        {Lisp-Entry "new-controller" method #f 44 35 44 49 ()}
        {Lisp-Entry "load-content" method #f 45 35 45 47 ("moniker")}
        {Lisp-Entry "save-content" method #f 46 35 46 47 ("moniker")}
        {Lisp-Entry "verify-reload" method #f 47 35 47 48 ()}
        {Lisp-Entry "reload-moniker" method #f 48 35 48 49 ("moniker")}
        {Lisp-Entry "default-extension" method #f 49 35 49 52 ()}
        {Lisp-Entry "extensions" method #f 50 35 50 45 ()}
        {Lisp-Entry "focus-document" method #f 51 35 51 49 ()}
        {Lisp-Entry "install-scroller?" method #f 52 35 52 52 ()}
        {Lisp-Entry "tool-update" method #f 53 35 53 46 ("tool?")}
        {Lisp-Entry "console-update" method #f 54 35 54 49 ("console?")}
        {Lisp-Entry "current-history-item" method #f 55 35 55 55 ()}
        {Lisp-Entry "compare-moniker" method #f 56 35 56 50 ("moniker")}
        {Lisp-Entry "frame-guest?" method #f 57 35 57 47 ()}}}})
"Document-Controller"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "document" "Document-Controller.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.document.Document-Controller" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Document-Controller" class #f 50 7 50 26 ("initialize" "Object")
        {Lisp-Entry "document" slot #f 53 8 53 16 ()}
        {Lisp-Entry "newname" slot #f 54 8 54 15 ()}
        {Lisp-Entry "get-newname" accessor #f 54 47 54 55 ()}
        {Lisp-Entry "set-newname" accessor #f 54 47 54 55 ()}
        {Lisp-Entry "moniker" slot #f 55 8 55 15 ()}
        {Lisp-Entry "tool?" slot #f 56 8 56 13 ()}
        {Lisp-Entry "console?" slot #f 57 8 57 16 ()}
        {Lisp-Entry "modified?" slot #f 58 8 58 17 ()}
        {Lisp-Entry "read-only?" slot #f 59 8 59 18 ()}
        {Lisp-Entry "get-read-only?" accessor #f 59 44 59 52 ()}
        {Lisp-Entry "moniker-time" slot #f 60 8 60 20 ()}
        {Lisp-Entry "get-moniker-time" accessor #f 60 44 60 52 ()}
        {Lisp-Entry "moniker-digest" slot #f 61 8 61 22 ()}
        {Lisp-Entry "initialize" method #f 64 20 64 30 ("console?~self" "tool?~self" "document~self" "set!" "nextmethod" "console?" "console?:" "tool?" "tool?:" "document")}
        {Lisp-Entry "install-in-host" method #f 76 18 76 33 ("document" "focus-document" "get-visible?" "when" "update-status" "position-host" "install-container" "host")}
        {Lisp-Entry "install-container" method #f 84 29 84 46 ("install-scroller" "document" "install-scroller?" "when")}
        {Lisp-Entry "install-scroller" method #f 89 21 89 37 ("set-content" "set-client" "get-content" "set-parent" "hscroll?:" "vscroll?:" "parent:" "Scroller-View" "new" "scroller" "document" "get-host" "host" "let*")}
        {Lisp-Entry "position-host" method #f 97 11 97 24 ("set-size" "100" "get-height" "-" "Dimension" "new" "size" "documents" "'documents" "get-preferences" "get-default-width" "width" "get-parent" "get-size" "parent-size" "let*" "Internal-Frame-Host" "is?" "when" "host")}
        {Lisp-Entry "confirm-close" method #f 110 26 110 39 ("throw-cancel" "cancel" "no" "save-all" "yes" "case" "confirmation" "'confirmation" "type:" "name-status" "format" "message-box" "code" "let" "get-modified?" "when")}
        {Lisp-Entry "close-on-close-all?" method #f 120 18 120 37 ("get-tool?" "not")}
        {Lisp-Entry "effective-newname" method #f 129 11 129 28 ("localize" "newname" "or")}
        {Lisp-Entry "get-moniker" method #f 133 18 133 29 ("moniker")}
        {Lisp-Entry "set-moniker" method #f 137 18 137 29 ("document" "load-content" "set!" "moniker" "/=" "when" "mnk")}
        {Lisp-Entry "change-moniker" method #f 143 18 143 32 ("moniker" "set!" "1" "car" "Moniker" "is-not?" "when" "mnk")}
        {Lisp-Entry "save" method #f 149 26 149 30 ("save-content" "write-allowed?" "when" "save-as" "moniker" "not" "if")}
        {Lisp-Entry "save-as" method #f 156 26 156 33 ("save-to" "set-read/write" "read-only?" "exists?" "and" "when" "extensions:" "default-extension:" "get-name" "effective-newname" "not" "if" "initial-filename:" "choose-new-file" "moniker" "extensions" "document" "default-extension" "extension" "let*")}
        {Lisp-Entry "save-to" method #f 165 18 165 25 ("update-status" "moniker" "set!" "save-content" "mnk")}
        {Lisp-Entry "save-all" method #f 171 18 171 26 ("save")}
        {Lisp-Entry "save-content" method #f 175 11 175 23 ("document" "save-content" "moniker")}
        {Lisp-Entry "revert-saved" method #f 179 18 179 30 ("throw-cancel" "cancel" "no" "document" "reload-moniker" "yes" "case" "confirmation" "'confirmation" "type:" "message-box" "code" "let" "bell" "moniker" "not" "if")}
        {Lisp-Entry "compare-saved" method #f 190 18 190 31 ("document" "compare-moniker" "bell" "moniker" "not" "if")}
        {Lisp-Entry "get-modified?" method #f 201 26 201 39 ("modified?" "console?" "if")}
        {Lisp-Entry "set-modified?" method #f 207 26 207 39 ("update-status" "set!" "modified?" "neq?" "when" "state")}
        {Lisp-Entry "dependent-document?" method #f 218 26 218 45 ()}
        {Lisp-Entry "set-caption" method #f 227 18 227 29 ("invalidate-caption" "get-toplevel" "set-caption" "front-view?" "get-maximized?" "Internal-Frame-Host" "is?" "and" "if" "get-visible?" "when" "set-title" "document" "get-host" "host" "let" "title")}
        {Lisp-Entry "update-status" method #f 242 26 242 39 ("document-status" "set-caption" "get-guest" "eq?" "Host-View" "is?" "and" "when" "document" "get-host" "host" "let" "update-state")}
        {Lisp-Entry "document-status" method #f 249 26 249 41 ("read/write-status" "directory-status" "modified-status" "name-status" "format")}
        {Lisp-Entry "name-status" method #f 257 26 257 37 ("get-name" "get-base" "tool?" "effective-newname" "moniker" "not" "if")}
        {Lisp-Entry "modified-status" method #f 265 11 265 26 ("get-modified?" "if")}
        {Lisp-Entry "directory-status" method #f 271 11 271 27 ("present-location" "format" "get-parent" "parent" "let" "tool?" "moniker" "not" "or" "if")}
        {Lisp-Entry "read/write-status" method #f 280 11 280 28 ("read-only?" "tool?" "moniker" "not" "or" "if")}
        {Lisp-Entry "update-state" method #f 293 18 293 30 ("read-only?" "set!" "exists?" "moniker" "not" "or" "if")}
        {Lisp-Entry "update-moniker-time" method #f 299 26 299 45 ("SHA-1" "'SHA-1" "parse" "digest-file" "moniker-digest" "get-modification-time" "moniker-time" "set!" "moniker")}
        {Lisp-Entry "verify-reload" method #f 304 18 304 31 ("propose-reload" "needs-reload?" "when" "cancel-edition?" "cancel-edition?:" "propose-reload?" "propose-reload?:")}
        {Lisp-Entry "needs-reload?" method #f 309 18 309 31 ("moniker-digest" "SHA-1" "'SHA-1" "parse" "digest-file" "equal?" "not" "get-modification-time" "time->seconds" "/=" "exists?" "moniker-time" "moniker" "and")}
        {Lisp-Entry "propose-reload" method #f 316 18 316 32 ("update-status" "update-moniker-time" "no" "throw-cancel" "when" "moniker" "document" "reload-moniker" "case" "question" "'question" "type:" "title:" "get-moniker" "format" "message-box" "yes" "'yes" "not" "if" "code" "let" "cancel-edition?" "cancel-edition?:" "propose-reload?" "propose-reload?:")}
        {Lisp-Entry "write-allowed?" method #f 337 18 337 32 ("get-read-only?" "not")}
        {Lisp-Entry "in-write-allowed?" method #f 341 11 341 28 ("no-action" "read-only" "update-status" "read/write" "case" "ensure-read/write" "code" "let" "moniker")}
        {Lisp-Entry "out-write-allowed?" method #f 349 11 349 29 ("throw-cancel" "cancel" "no" "update-status" "set-read/write" "yes" "case" "confirmation" "'confirmation" "type:" "title:" "get-name" "format" "message-box" "code" "let" "moniker")}
        {Lisp-Entry "get-tool?" method #f 369 18 369 27 ("tool?")}
        {Lisp-Entry "set-tool?" method #f 373 18 373 27 ("document" "tool-update" "set!" "tool?" "neq?" "when" "flag")}
        {Lisp-Entry "get-console?" method #f 379 18 379 30 ("console?")}
        {Lisp-Entry "set-console?" method #f 383 18 383 30 ("document" "console-update" "set!" "console?" "neq?" "when" "flag")}
        {Lisp-Entry "select-next" method #f 394 26 394 37 ("rest" "search-context")}
        {Lisp-Entry "select-previous" method #f 398 26 398 41 ("rest" "search-context")}
        {Lisp-Entry "select-expr" method #f 402 26 402 37 ("search-context")}
        {Lisp-Entry "select-expr-backward" method #f 406 26 406 46 ("search-context")}}}})
"Document-Moniker"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "document" "Document-Moniker.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.document.Document-Moniker" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Document-Moniker-Class" class #f 45 7 45 29 ("Moniker" ":class")
        {Lisp-Entry "get-protocol" method #f 48 20 48 32 ("doc" "'doc")}}
      {Lisp-Entry "Document-Moniker" class #f 52 7 52 23 ("Moniker" "Document-Moniker-Class")
        {Lisp-Entry "pathname" slot #f 55 8 55 16 ()}
        {Lisp-Entry "construct-literal" method #f 59 16 59 33 ("self" "new" "pathname" "context")}
        {Lisp-Entry "print" method #f 63 20 63 25 ("pathname" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "present" method #f 74 20 74 27 ("pathname" "get-list" "format")}
        {Lisp-Entry "initialize" method #f 83 20 83 30 ("pathname" "set!" "nextmethod" "path")}
        {Lisp-Entry "get-name" method #f 93 20 93 28 ("pathname" "get-name")}
        {Lisp-Entry "get-document" method #f 97 18 97 30 ("get-guest" "error" "null?" "if" "pathname" "find-document" "frame" "get-application" "appl" "let*")}
        {Lisp-Entry "load-lines" method #f 105 20 105 30 ("get-document" "get-content" "rest")}
        {Lisp-Entry "load-form" method #f 109 20 109 29 ("get-document" "get-designer" "get-form")}}
      {Lisp-Entry "moniker-new" generic/specific ("<Document-Moniker-Class>") 113 11 113 22 ("File" "class" "new" "parameters")}}})
"Document-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "document" "Document-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.document.Document-Preferences" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Document-Preferences" class #f 45 20 45 40 ("Image-Resource" "icon:" "title:" "Preferences")
        {Lisp-Entry "get-class-descriptor" method #f 57 25 57 45 ("Document-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 66 11 66 17 ()
        {Lisp-Entry "Document-Preferences-Descriptor" class #f 72 7 72 38 ("can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")}}}})
"Documents-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "document" "Documents-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.document.Documents-Preferences" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Documents-Preferences" class #f 46 20 46 41 ("title:" "White" "name:" "Color" "800" "initialize" "Preferences")
        {Lisp-Entry "default-width" property #f 49 12 49 25 ()}
        {Lisp-Entry "get-default-width" accessor #f 49 72 49 80 ()}
        {Lisp-Entry "set-default-width" accessor #f 49 72 49 80 ()}
        {Lisp-Entry "default-background" property #f 50 12 50 30 ()}
        {Lisp-Entry "get-default-background" accessor #f 50 72 50 80 ()}
        {Lisp-Entry "set-default-background" accessor #f 50 72 50 80 ()}
        {Lisp-Entry "get-class-descriptor" method #f 62 25 62 45 ("Documents-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 71 11 71 17 ()
        {Lisp-Entry "Documents-Preferences-Descriptor" class #f 77 7 77 39 ("domain" "name:" "default-background" "default-width" "categorized:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")}}}})
"Drag-Source"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dnd" "Drag-Source.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dnd.Drag-Source" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Drag-Source" class #f 43 7 43 18 ("initialize" "Object")
        {Lisp-Entry "view" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-view" accessor #f 46 38 46 46 ()}
        {Lisp-Entry "position" slot #f 47 8 47 16 ()}
        {Lisp-Entry "get-position" accessor #f 47 38 47 46 ()}
        {Lisp-Entry "image" slot #f 48 8 48 13 ()}
        {Lisp-Entry "get-image" accessor #f 48 38 48 46 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("image~self" "position~self" "view~self" "set!" "nextmethod" "image" "image:" "position" "position:" "view" "view:")}
        {Lisp-Entry "print" method #f 58 20 58 25 ("image" "position" "view" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}}})
"Draw-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Draw-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Draw-Event" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Draw-Event" class #f 43 7 43 17 ("Event")
        {Lisp-Entry "surface" slot #f 46 8 46 15 ()}
        {Lisp-Entry "update" slot #f 47 8 47 14 ()}
        {Lisp-Entry "lh" slot #f 48 8 48 10 ()}
        {Lisp-Entry "lv" slot #f 49 8 49 10 ()}
        {Lisp-Entry "info" slot #f 50 8 50 12 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("info~self" "lv~self" "lh~self" "update~self" "surface~self" "set!" "nextmethod" "info" "lv" "lh" "update" "surface" "sender" "kind")}
        {Lisp-Entry "get-dc" method #f 62 18 62 24 ("surface")}}}})
"Drawing"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Drawing.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Drawing" module #f 38 18 38 38 ("jazz")
      {Lisp-Entry "Drawing" class #f 47 7 47 14 ("Figure")
        {Lisp-Entry "get-player" method #f 55 26 55 36 ("get-player" "parent" "and")}
        {Lisp-Entry "set-player" method #f 59 26 59 36 ("children" "set-player" "Drawing" "is?" "when" "child" "lambda" "for-each" "plr")}
        {Lisp-Entry "get-lie" method #f 71 18 71 25 ("fxround" "Point" "new" "1.0" "0.0" "get-lie-parent" "sc" "v" "h" "receive")}
        {Lisp-Entry "get-lie-parent" method #f 76 29 76 43 ("get-v" "position" "get-h" "+" "get-lie-parent" "values" "parent" "not" "if" "sc" "v" "h")}
        {Lisp-Entry "set-lie" method #f 82 18 82 25 ("set-position" "position" "+" "pos" "-" "delta" "get-lie" "actual" "let*" "lie")}
        {Lisp-Entry "get-root" method #f 94 26 94 34 ("get-root" "when" "get-player" "player" "let")}
        {Lisp-Entry "acquire" method #f 105 18 105 25 ("acquire-delta" "get-delta" "sc" "dv" "dh" "receive" "shape" "origin")}
        {Lisp-Entry "acquire-delta" method #f 110 18 110 31 ("error" "else" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "Rect" "*" "+" "fxround" "new" "get-v" "v" "get-h" "h" "let" "Point" "typecase" "shape" "sc" "dv" "dh")}
        {Lisp-Entry "get-delta" method #f 130 29 130 38 ("-" "/" "values" "sc" "v" "h" "1.0" "0.0" "get-lie-parent" "origin-sc" "origin-v" "origin-h" "receive" "origin")}
        {Lisp-Entry "get-size" method #f 141 20 141 28 ("size")}
        {Lisp-Entry "set-size" method #f 145 20 145 28 ("call-layout" "get-finished?" "invalidate-layout" "set!" "size" "/=" "when" "sz")}
        {Lisp-Entry "set-size-noevent" method #f 153 26 153 42 ("size" "set!" "sz")}
        {Lisp-Entry "get-width" method #f 157 18 157 27 ("size" "get-width")}
        {Lisp-Entry "set-width" method #f 161 18 161 27 ("get-height" "Dimension" "new" "set-size" "width")}
        {Lisp-Entry "get-height" method #f 165 18 165 28 ("size" "get-height")}
        {Lisp-Entry "set-height" method #f 169 18 169 28 ("get-width" "Dimension" "new" "set-size" "height")}
        {Lisp-Entry "set-height-noevent" method #f 173 18 173 36 ("get-width" "Dimension" "new" "set-size-noevent" "height")}
        {Lisp-Entry "get-left" method #f 177 18 177 26 ("position" "get-h")}
        {Lisp-Entry "get-top" method #f 181 18 181 25 ("position" "get-v")}
        {Lisp-Entry "get-right" method #f 185 18 185 27 ("size" "get-width" "position" "get-h" "+")}
        {Lisp-Entry "get-bottom" method #f 189 18 189 28 ("size" "get-height" "position" "get-v" "+")}
        {Lisp-Entry "get-bounds" method #f 193 18 193 28 ("get-size" "size-rect")}
        {Lisp-Entry "get-rect" method #f 197 18 197 26 ("get-size" "get-position" "position/size->rect")}
        {Lisp-Entry "set-rect" method #f 201 18 201 26 ("rect-size" "set-size" "rect-position" "set-position" "rect")}
        {Lisp-Entry "grow-rect" method #f 206 18 206 27 ("set-position" "set-size" "Dimension" "get-size" "size" "Point" "new" "get-position" "+" "pos" "let" "dheight" "dwidth" "dv" "dh")}
        {Lisp-Entry "get-scaled?" method #f 218 26 218 37 ()}
        {Lisp-Entry "set-scaled?" method #f 222 26 222 37 ("value")}
        {Lisp-Entry "get-scaling" method #f 226 26 226 37 ("1.0")}
        {Lisp-Entry "set-scaling" method #f 230 26 230 37 ("value")}
        {Lisp-Entry "logical->device" method #f 234 18 234 33 ("error" "else" "case" "Number" "get-bottom" "get-right" "get-top" "get-left" "Rect" "get-height" "get-width" "Dimension" "get-v" "get-h" "new" "Point" "typecase" "lv" "vert" "-" "*" "+" "fxround" "lh" "lambda" "horz" "sc" "sv" "sh" "receive" "not" "if" "scaling-info" "or" "let" "info" "info:" "orientation" "orientation:" "shape")}
        {Lisp-Entry "device->logical" method #f 252 18 252 33 ("error" "else" "case" "Number" "get-bottom" "get-right" "get-top" "get-left" "Rect" "get-height" "get-width" "Dimension" "get-v" "get-h" "new" "Point" "typecase" "dv" "vert" "-" "quotient" "+" "dh" "lambda" "horz" "sc" "sv" "sh" "receive" "not" "if" "scaling-info" "or" "let" "info" "info:" "orientation" "orientation:" "shape")}
        {Lisp-Entry "scaling-info" method #f 272 11 272 23 ("get-parent" "set!" "get-v" "get-h" "decrease!" "get-position" "pos" "values" "continuation-return" "if" "get-scaling" "sc" "get-scaled?" "sc?" "while" "return" "lambda" "continuation-capture" "sv" "0" "sh" "self" "drawing" "let")}
        {Lisp-Entry "view-visible?" method #f 295 18 295 31 ("get-root" "self" "eq?" "view-visible?" "parent" "if" "get-visible?" "and" "get-player" "player" "let")}
        {Lisp-Entry "get-opaque?" method #f 307 26 307 37 ()}
        {Lisp-Entry "get-transparent?" method #f 311 26 311 42 ()}
        {Lisp-Entry "invalidate-layout" method #f 320 21 320 38 ("set-layout-valid?")}
        {Lisp-Entry "call-layout" method #f 324 21 324 32 ("set-layout-valid?" "layout" "get-layout-valid?" "unless")}
        {Lisp-Entry "layout-drawing" method #f 330 18 330 32 ("call-layout" "invalidate-layout" "get-finished?" "when")}
        {Lisp-Entry "layout" method #f 338 26 338 32 ()}
        {Lisp-Entry "for-each-view" method #f 347 18 347 31 ("get-visible?" "or" "View" "is?" "and" "when" "children" "in" "child" "for" "loop" "include-invisibles?" "include-invisibles?:" "proc")}
        {Lisp-Entry "for-each-view-reversed" method #f 354 18 354 40 ("children" "get-visible?" "or" "View" "is?" "and" "when" "child" "lambda" "for-each-reversed" "include-invisibles?" "include-invisibles?:" "proc")}
        {Lisp-Entry "find-drawing" method #f 367 18 367 30 ("self" "get-transparent?" "unless" "find-subdrawing" "or" "size" "in-drawing?" "when" "ignore" "ignore:" "pos")}
        {Lisp-Entry "in-drawing?" method #f 374 29 374 40 ("in-size?" "size" "pos")}
        {Lisp-Entry "find-subdrawing" method #f 378 29 378 44 ("continuation-return" "memq?" "or" "and" "when" "get-v" "get-h" "/" "fxround" "Point" "new" "scaled" "get-scaling" "scaling" "find-drawing" "not" "if" "found" "get-scaled?" "scaled?" "let*" "get-position" "-" "delta" "let" "view" "for-each-view-reversed" "return" "lambda" "continuation-capture" "ignore" "pos")}
        {Lisp-Entry "invalidate-drawing" method #f 402 18 402 36 ("parent" "invalidate-rect" "get-rect" "rect" "let")}
        {Lisp-Entry "paint-root" method #f 412 18 412 28 ("1.0" "paint" "0" "painting-tree" "nodes" "draw-self?" "view" "bind" "get-update-region" "copy-region" "region" "with" "surface")}
        {Lisp-Entry "paint-drawing" method #f 418 18 418 31 ("paint" "painting-tree" "nodes" "draw-self?" "view" "bind" "get-clipper" "Region" "new" "region" "with" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "painting-tree" method #f 424 18 424 31 ("self" "full-painting-tree" "windows" "'windows" "kernel-platform" "neq?" "close" "or" "'or" "diff" "'diff" "combine!" "cons" "set!" "node" "child-coverage" "bind" "empty?" "not" "when" "region-intersection" "intersection" "child-region" "get-v" "cv" "get-h" "ch" "get-size" "size" "get-position" "position" "child" "lambda" "for-each-view-reversed" "get-height" "get-width" "+" "Region" "new" "get-opaque?" "if" "coverage" "copy-region" "update" "with" "nodes" "let" "view" "make-tree" "define" "lv" "lh" "region")}
        {Lisp-Entry "full-painting-tree" method #f 453 18 453 36 ("self" "cons" "set!" "child" "lambda" "for-each-view-reversed" "nodes" "let" "view" "make-tree" "define")}
        {Lisp-Entry "paint" method #f 464 18 464 23 ("blit-surface" "get-update-region" "set-update-region" "get-clipper" "set-clipper" "get-offscreen" "offscreen" "let" "paint-content" "get-offscreen?" "not" "if" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "nodes" "draw-self?" "surface")}
        {Lisp-Entry "paint-content" method #f 474 18 474 31 ("render" "lambda" "get-height" "size" "get-width" "with-transform" "new-sc?" "get-scaling" "new-sc" "new-sv" "not" "if" "new-sh" "get-scaled?" "scaled?" "let" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "nodes" "draw-self?" "surface")}
        {Lisp-Entry "render" method #f 485 26 485 32 ("draw-children" "draw-content" "draw-background" "cycle-debug-color!" "get-bounds" "fill-rect" "debug-paint?" "if" "when" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "nodes" "draw-self?" "surface")}
        {Lisp-Entry "draw-background" method #f 494 26 494 41 ("context" "surface")}
        {Lisp-Entry "draw-content" method #f 498 26 498 38 ("draw" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw" method #f 502 26 502 30 ("lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-children" method #f 506 26 506 39 ("get-v" "get-h" "+" "paint" "get-position" "pos" "let" "draw-self?" "drawing" "bind" "node" "lambda" "for-each" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "nodes" "surface")}
        {Lisp-Entry "get-offscreen" method #f 519 29 519 42 ("surface")}
        {Lisp-Entry "get-clipper" method #f 528 18 528 29 ("0" "get-translated-clipper")}
        {Lisp-Entry "get-translated-clipper" method #f 532 19 532 41 ("self" "get-parent/child-clipper" "fxround" "get-bounds" "offset-rect" "parent" "not" "if" "v" "h")}
        {Lisp-Entry "get-parent/child-clipper" method #f 538 29 538 53 ("rect-intersection" "fxround" "get-bounds" "offset-rect" "c" "get-v" "get-position" "get-h" "-" "get-translated-clipper" "p" "let" "v" "h" "child")}
        {Lisp-Entry "get-root-clipper" method #f 544 18 544 34 ("get-clipper" "self" "acquire" "when" "get-root" "root" "let")}
        {Lisp-Entry "get-offscreen?" method #f 550 26 550 40 ()}
        {Lisp-Entry "set-offscreen?" method #f 554 26 554 40 ("flag")}
        {Lisp-Entry "get-layer" method #f 563 26 563 35 ()}
        {Lisp-Entry "set-layer" method #f 567 26 567 35 ("value")}
        {Lisp-Entry "get-effect" method #f 576 26 576 36 ()}
        {Lisp-Entry "set-effect" method #f 580 26 580 36 ("value")}}}})
"Drop-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dnd" "Drop-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dnd.Drop-Event" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Drop-Event" class #f 43 7 43 17 ("Mouse-Event")
        {Lisp-Entry "drag-drop" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-drag-drop" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("drag-drop~self" "set!" "nextmethod" "drag-drop" "pos" "sender" "kind")}
        {Lisp-Entry "print" method #f 54 20 54 25 ("lambda" "self" "print-unreadable" "readably" "printer")}}}})
"Drop-Target"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dnd" "Drop-Target.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dnd.Drop-Target" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Drop-Target" class #f 43 7 43 18 ("Object")
        {Lisp-Entry "view" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-view" accessor #f 46 24 46 32 ()}
        {Lisp-Entry "position" slot #f 47 8 47 16 ()}
        {Lisp-Entry "get-position" accessor #f 47 24 47 32 ()}
        {Lisp-Entry "criteria" slot #f 48 8 48 16 ()}
        {Lisp-Entry "get-criteria" accessor #f 48 24 48 32 ()}
        {Lisp-Entry "handler" slot #f 49 8 49 15 ()}
        {Lisp-Entry "get-handler" accessor #f 49 24 49 32 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("handler~self" "criteria~self" "position~self" "view~self" "set!" "nextmethod" "handler" "handler:" "criteria" "criteria:" "position" "position:" "view" "view:")}
        {Lisp-Entry "print" method #f 60 20 60 25 ("view" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}}})
"Edit-Base-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Edit-Base-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Edit-Base-Menu" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Edit-Base-Menu" class #f 46 7 46 21 ("select-all" "delete" "end-paste" "paste" "copy" "cut" "redo" "view" "Action" "action-handler:" "Image-Resource" "icon:" "undo" "name:" "french:" "english:" "Locales" "title:" "Menu")}}})
"Edit-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Edit-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Edit-Menu" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Edit-Menu" class #f 45 7 45 16 ("forward-history" "backward-history" "Image-Resource" "icon:" "add-history" "history" "history-separator" "visible?:" "view" "paste-properties" "application" "Action" "action-handler:" "end-paste" "before:" "title:" "paste-cycle-stack" "name:" "Edit-Base-Menu")}}})
"Edition-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Edition-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Edition-Event" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Edition-Event" class #f 43 7 43 20 ("Event")}}})
"Effect"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "effect" "Effect.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.effect.Effect" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Effect" class #f 43 20 43 26 ("Object")
        {Lisp-Entry "animate" method #f 46 26 46 33 ("size" "pos" "dst" "src")}}}})
"Entities-Controller"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "entity" "Entities-Controller.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.entity.Entities-Controller" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Entities-Controller" class #f 52 20 52 39 ("Object")
        {Lisp-Entry "add-child" method #f 60 35 60 44 ("parent" "child")}
        {Lisp-Entry "remove-child" method #f 61 35 61 47 ("child")}
        {Lisp-Entry "set-name" method #f 62 35 62 43 ("name" "entity")}
        {Lisp-Entry "set-property" method #f 63 35 63 47 ("value" "property" "entity")}
        {Lisp-Entry "cut-entities" method #f 64 35 64 47 ("entities")}
        {Lisp-Entry "copy-entities" method #f 65 35 65 48 ("entities")}
        {Lisp-Entry "paste-parcels" method #f 66 35 66 48 ("parent" "parcels")}
        {Lisp-Entry "delete-entities" method #f 74 26 74 41 ("delete-entity" "entity" "lambda" "for-each" "entities")}
        {Lisp-Entry "delete-entity" method #f 80 26 80 39 ("remove-child" "entity")}}}})
"Entities-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "entity" "Entities-Tree.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.entity.Entities-Tree" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Entities-Tree" class #f 62 20 62 33 ("initialize" "Tree-View")
        {Lisp-Entry "client" slot #f 65 8 65 14 ()}
        {Lisp-Entry "get-client" accessor #f 65 43 65 51 ()}
        {Lisp-Entry "set-client" accessor #f 65 43 65 51 ()}
        {Lisp-Entry "controller" slot #f 66 8 66 18 ()}
        {Lisp-Entry "get-controller" accessor #f 66 43 66 51 ()}
        {Lisp-Entry "set-controller" accessor #f 66 43 66 51 ()}
        {Lisp-Entry "focus-actions" method #f 74 20 74 33 ("nextmethod" "entities-tree" "'entities-tree" "find-actions" "cons")}
        {Lisp-Entry "on-delete-selection" method #f 84 11 84 30 ("delete-selection" "evt")}
        {Lisp-Entry "on-rename-selection" method #f 88 11 88 30 ("rename-selection" "evt")}
        {Lisp-Entry "context-menu" method #f 92 20 92 32 ("track-popup-menu" "when" "get-context-menu" "menu" "let" "lambda" "with-context-click" "pos")}
        {Lisp-Entry "get-context-menu" method #f 100 20 100 36 ("self" "client:" "Entity-Menu" "new")}
        {Lisp-Entry "on-properties" method #f 104 20 104 33 ("show-properties" "evt")}
        {Lisp-Entry "focus-update-actions" method #f 113 20 113 40 ("can-rename?" "rename" "entities-tree" "Action" "set-action-enabled?")}
        {Lisp-Entry "get-factories" method #f 122 26 122 39 ("get-factories" "root-factories" "null?" "if" "selected-entity" "entity" "let")}
        {Lisp-Entry "root-factories" method #f 129 26 129 40 ()}
        {Lisp-Entry "add-entity" method #f 133 26 133 36 ("select-entity" "append" "install-new-entity" "lambda" "with-update-locked" "set-name" "when" "get-controller" "controller" "presentation->name" "name" "new" "child" "let" "add-entity-request" "values" "if" "added-properties" "receive" "extra-properties" "client" "relocation-parent" "or" "selected-entity" "selected" "get-class" "class" "let*" "select?" "select?:" "properties" "properties:" "presentation" "presentation:" "parent" "parent:" "factory")}
        {Lisp-Entry "add-entity-request" method #f 152 29 152 47 ("entity-properties-request" "entity-children" "entity-presentation-request" "values" "parent" "factory")}
        {Lisp-Entry "entity-presentation-request" method #f 157 29 157 56 ("validator:" "unicity-domain:" "not" "accepts-empty?:" "french:" "format" "english:" "Locales" "new" "title:" "request-string" "presentation" "get-factory-presentation" "localize" "pres" "entity-name-validator" "name-validator" "get-presentation" "map" "and" "unicity-domain" "get-name-unicity?" "name-unicity?" "get-name-mandatory?" "name-mandatory?" "let*" "get-name-prohibited?" "if" "initial-value" "initial-value:" "brothers" "factory")}
        {Lisp-Entry "entity-properties-request" method #f 169 29 169 54 ("factory")}
        {Lisp-Entry "entity-name-validator" method #f 173 29 173 50 ()}
        {Lisp-Entry "install-new-entity" method #f 177 29 177 47 ("add-properties" "set-presentation" "add-child" "properties" "presentation" "parent" "child" "controller")}
        {Lisp-Entry "add-properties" method #f 183 29 183 43 ("controller" "set-property" "value" "property" "lambda" "for-each-property" "properties" "entity")}
        {Lisp-Entry "rename-selection" method #f 194 20 194 36 ("rename-entity" "when" "selected-entity" "entity" "let")}
        {Lisp-Entry "rename-entity" method #f 200 18 200 31 ("end-rename" "0" "Cell" "new" "cell" "row->line" "line" "get-presentation" "initial-value:" "entity-brothers" "get-factory" "entity-presentation-request" "presentation" "let*" "ensure-expanded" "when" "entity-row" "row" "let" "entity")}
        {Lisp-Entry "end-rename" method #f 210 11 210 21 ("select-entity" "acquire-focus" "sort-entitys?" "when" "get-parent" "parent" "controller" "set-name" "get-cell-data" "set-title" "with-update-locked" "find-entity-position" "not" "if" "lambda" "move-row" "sort-entities?" "sort?" "client" "or" "destination" "get-user-data" "source" "let*" "get-sons" "cardinality" "1" "=" "eq?" "and" "unless" "position" "position:" "father" "get-father" "move-entity-row" "find-row" "row" "let" "reorder-entity" "define" "presentation" "cell" "entity")}
        {Lisp-Entry "move-entities" method #f 242 11 242 24 ("select-entities" "send-entity-before" "send-before" "for-each" "and" "target-data" "element" "cardinality" "<" "1" "+" "after" "before" "case" "position" "son-rank" "rank" "get-sons" "sons" "get-father" "father" "move-entities" "bell" "not" "class-of" "relocation-parent" "entity" "key:" "uniform" "parent" "let" "row" "'row" "eq?" "if" "lambda" "with-update-locked" "get-user-data" "destination" "get-part" "part" "get-row" "dst" "get-view" "get-selected-data" "entities" "get-controller" "controller" "let*" "target" "source")}
        {Lisp-Entry "find-entity-position" method #f 267 29 267 49 ("get-presentation" "find-ordered-position" "father" "row" "entity")}
        {Lisp-Entry "find-entity-insertion" method #f 271 29 271 50 ("find-row" "son-rank" "when" "target" "entity" "parent-row")}
        {Lisp-Entry "send-entity-before" method #f 276 29 276 47 ("before" "entity")}
        {Lisp-Entry "get-draggable?" method #f 285 20 285 34 ("can-move-entity?" "and" "selected-entity" "entity" "let")}
        {Lisp-Entry "get-row-reorder-target" method #f 298 11 298 33 ("part:" "row:" "self" "view:" "Tree-Drop-Target" "new" "when" "else" "after" "'after" "'before" "=" "'row" "4" "3" "cond" "part" "can-send-before?" "cdr" "/=" "addable-class?" "has-parent?" "every?" "neq?" "null?" "or" "not" "move?" "visible-count" "<" "before" "+" "2" "1" "memq?" "if" "and" "before-rank" "get-sons" "last" "before-last" "eq?" "before?" "dst-parent" "row->line" "dst-line" "get-father" "dst-father" "dst" "get-parent" "parent-relocation" "entity" "key:" "uniform" "src-parent" "class-of" "remove-duplicates" "src-types" "get-row" "get-user-data" "n" "lambda" "map" "src" "contiguous-range" "src-range" "get-source" "get-view" "get-selection" "src-selection" "let*" "quarter" "row" "drag-drop")}
        {Lisp-Entry "get-row-target" method #f 323 11 323 25 ("get-view" "view" "get-source" "source" "let*" "row" "drag-drop")}
        {Lisp-Entry "receive-drop" method #f 330 11 330 23 ("move-entities" "self" "eq?" "when" "get-target" "target" "get-view" "view" "get-source" "source" "let*" "drag-drop" "pos" "sender")}
        {Lisp-Entry "receive-model" method #f 339 11 339 24 ("rename-entity" "centered?:" "0" "Point" "position:" "get-controller" "add-view" "lambda" "with-update-locked" "visible?:" "new" "child" "get-row" "get-user-data" "parent" "get-model" "self" "class-of" "dispatch" "model" "let*" "target" "window")}
        {Lisp-Entry "parent-relocation" method #f 354 29 354 46 ("parent")}
        {Lisp-Entry "relocation-parent" method #f 358 29 358 46 ("class" "destination")}
        {Lisp-Entry "can-undo?" method #f 367 20 367 29 ()}
        {Lisp-Entry "can-redo?" method #f 371 20 371 29 ()}
        {Lisp-Entry "can-cut?" method #f 375 20 375 28 ("can-cut-entity?" "every?" "and" "selected-entities" "entities" "let")}
        {Lisp-Entry "can-copy?" method #f 381 20 381 29 ("can-copy-entity?" "every?" "and" "selected-entities" "entities" "let")}
        {Lisp-Entry "can-paste?" method #f 387 20 387 30 ("remove-duplicates" "length" "1" "=" "memq?" "not" "and" "determine-paster" "map" "parents" "selected-entities" "entities" "let*")}
        {Lisp-Entry "can-delete?" method #f 394 20 394 31 ("can-delete-entity?" "every?" "and" "selected-entities" "entities" "let")}
        {Lisp-Entry "can-rename?" method #f 400 20 400 31 ("can-rename-entity?" "car" "entity" "1" "length" "=" "and" "selected-entities" "entities" "let")}
        {Lisp-Entry "can-select-all?" method #f 407 20 407 35 ()}
        {Lisp-Entry "cut-selection" method #f 411 20 411 33 ("controller" "cut-entities" "get-selection" "with-deleted-selection" "lambda" "with-update-locked" "bell" "null?" "if" "selected-entities" "entities" "let")}
        {Lisp-Entry "copy-selection" method #f 422 20 422 34 (".150" "duration:" "get-application" "update-focus-actions" "controller" "copy-entities" "lambda" ":wait" "with-cursor" "bell" "null?" "if" "selected-entities" "entities" "let")}
        {Lisp-Entry "paste-clipboard" method #f 433 20 433 35 ("get-model" "get-content" "car" "master" "parcel" "key:" "partition" "relocation-parent" "controller" "paste-parcels" "model" "bind" "info" "for-each" ":wait" "with-cursor" "lambda" "with-update-locked" "get-jazz-parcels" "parcels" "client" "selected-entity" "or" "parent" "let")}
        {Lisp-Entry "delete-selection" method #f 446 20 446 36 ("controller" "delete-entities" "lambda" "with-deleted-selection" "confirm-close" "get-selected-data" "entities" "not-null?" "when" "get-selection" "selection" "let")}
        {Lisp-Entry "confirm-close" method #f 456 20 456 33 ("confirm-action" "entities")}
        {Lisp-Entry "confirm-action" method #f 460 11 460 25 ("throw-cancel" "cancel" "no" "yes" "case" "confirmation" "'confirmation" "type:" "localize" "message-box" "code" "let" "text")}
        {Lisp-Entry "selection-change" method #f 473 20 473 36 ("update-focus-actions" "get-application" "appl" "let" "user-origin?" "force?" "old-selection")}
        {Lisp-Entry "selected-entity" method #f 478 18 478 33 ("get-row" "get-user-data" "client" "null?" "if" "get-single-selection" "selection" "let")}
        {Lisp-Entry "selected-entities" method #f 485 18 485 35 ("get-row" "get-user-data" "row" "lambda" "map" "client" "list" "null?" "if" "get-ordered-selection" "selection" "let")}
        {Lisp-Entry "entity-row" method #f 494 18 494 28 ("continuation-return" "get-user-data" "eq?" "when" "rank" "row" "for-each-row" "return" "lambda" "continuation-capture" "entity")}
        {Lisp-Entry "entity-visible-row" method #f 504 11 504 29 ("user-data-index" "entity")}
        {Lisp-Entry "select-entity" method #f 508 18 508 31 ("set-single-selection" "when" "entity-visible-row" "row" "let" "entity")}
        {Lisp-Entry "select-entities" method #f 515 18 515 33 ("set-selection" "entity-visible-row" "map" "remove-false" "rows" "let" "entities")}
        {Lisp-Entry "find-row" method #f 521 29 521 37 ("entity-row" "entity")}
        {Lisp-Entry "preserving-update" method #f 530 18 530 35 ("selected-entities" ":selected-entities" "get-expand-state" "expand-state:" "update")}
        {Lisp-Entry "update" method #f 534 26 534 32 ("rest")}
        {Lisp-Entry "entity-parent" method #f 543 38 543 51 ("entity")}
        {Lisp-Entry "entity-children" method #f 547 38 547 53 ("entity")}
        {Lisp-Entry "entity-brothers" method #f 551 11 551 26 ("entity-children" "remove" "when" "entity-parent" "parent" "let" "entity")}
        {Lisp-Entry "update-menu" method #f 562 18 562 29 ("before-properties" "'before-properties" "end-edit-group" "'end-edit-group" "or" "empty-properties?" "get-visible?" "empty-entity?" "empty-edit?" "properties" "'properties" "rename-selection" "'rename-selection" "delete-selection" "'delete-selection" "'paste" "'copy" "'cut" "not" "set!" "end-add-group" "'end-add-group" "set-before" "set-parent" "get-title" "localize" "format" "set-title" "get-icon" "set-icon" "unique" "set-visible?" "when" "get-children" "children" "self" "add-entities" "1" "=" "if" "'add-item" "add-item" "'add-menu" "locate" "add-menu" "let" "empty-add?" "get-categorized-properties" "can-view-properties?" "and" "can-properties?" "rename" "entities-tree" "can-rename?" "delete" "can-delete?" "paste" "can-paste?" "copy" "can-copy?" "cut" "view" "Action" "get-action-enabled?" "can-cut?" "length" "count" "car" "entity" "selected-entities" "entities" "get-application" "appl" "let*" "menu")}
        {Lisp-Entry "show-properties" method #f 615 18 615 33 ("focus?:" "workspace:" "Properties-Manager" "select-docked")}}}})
"Entities-Tree-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "entity" "Entities-Tree-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.entity.Entities-Tree-Actions" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Entities-Tree-Actions" class #f 45 20 45 41 ("F2" "Shortcut" "shortcut:" "on-rename" ":focus" "Event-Handler" "action-handler:" "rename" "name:" "Actions")}}})
"Entity-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "entity" "Entity-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.entity.Entity-Menu" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Entity-Menu" class #f 58 20 58 31 ("properties" "before-properties" "rename" "components-tree" "rename-selection" "delete" "delete-selection" "end-edit-group" "paste" "copy" "view" "Action" "action-handler:" "cut" "end-add-group" "add-menu" "Image-Resource" "icon:" "title:" "add-item" "name:" "Context-Menu")
        {Lisp-Entry "finish" method #f 76 20 76 26 ("self" "client" "update-menu" "nextmethod" "rest")}}
      {Lisp-Entry "Add-Menu" class #f 86 7 86 15 ("Context-Menu")
        {Lisp-Entry "add-entities" method #f 89 21 89 33 (":factory" "client:" "list" "properties:" "on-add" "'on-add" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "icon:" "Label-Item" "get-factory-presentation" "localize" "format" "title" "get-factory-image" "icon" "self" "parent:" "Separator-Item" "new" "null?" "if" "factory" "for-each" "get-factories" "factories" "let" "lambda" "with-update-locked" "client")}
        {Lisp-Entry "on-add" method #f 103 11 103 17 ("add-entity" "factory:" "factory" "client:" "get-property" "client" "let" "evt")}}}})
"Entity-Parcel"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "entity" "Entity-Parcel.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.entity.Entity-Parcel" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Entity-Parcel" class #f 44 20 44 33 ("Clipboard-Parcel")}}})
"Entry-Combo-Box"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Entry-Combo-Box.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Entry-Combo-Box" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Entry-Combo-Box" class #f 43 20 43 35 ("Combo-Box")
        {Lisp-Entry "form-model" method #f 46 20 46 30 ("nextmethod" "else" "Entry-Combo-Text-View" "body" "get-name" "case" "form")}}}})
"Entry-Combo-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Entry-Combo-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Entry-Combo-Text-View" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Entry-Combo-Text-View" class #f 45 20 45 41 ("show-unfocused-selection?:" "focus-selects-all?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "initialize" "Combo-Text-View")
        {Lisp-Entry "editor" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-editor" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "set-editor" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "focus-gained" method #f 55 20 55 32 ("editor-focus-gained" "get-manager" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}
        {Lisp-Entry "focus-lose" method #f 63 20 63 30 ("editor-focus-lose" "get-manager" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}
        {Lisp-Entry "get-context-menu" method #f 71 20 71 36 ("new-text-context-menu")}}}})
"Entry-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Entry-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Entry-Text-View" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Entry-Text-View" class #f 45 20 45 35 ("force-tab-navigate?:" "show-unfocused-selection?:" "focus-selects-all?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "initialize" "Plain-Text-View")
        {Lisp-Entry "editor" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-editor" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "set-editor" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "focus-gained" method #f 60 20 60 32 ("editor-focus-gained" "get-manager" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}
        {Lisp-Entry "focus-lose" method #f 68 20 68 30 ("editor-focus-lose" "get-manager" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}
        {Lisp-Entry "up-arrow-move" method #f 76 20 76 33 ("editor-up-arrow" "get-manager" "manager" "let" "selectable?" "editor" "and" "when" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method #f 83 20 83 35 ("editor-down-arrow" "get-manager" "manager" "let" "selectable?" "editor" "and" "when" "scroll?" "extend?")}
        {Lisp-Entry "tab-press" method #f 90 20 90 29 ("editor-tab" "get-manager" "manager" "let" "selectable?" "editor" "and" "when" "end-completion" "has-completion?" "if" "modifiers" "key")}
        {Lisp-Entry "return-press" method #f 99 20 99 32 ("editor-return" "get-manager" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod" "key")}
        {Lisp-Entry "get-context-menu" method #f 107 20 107 36 ("new-text-context-menu")}}}})
"Entry-Widget"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "widget" "Entry-Widget.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.widget.Entry-Widget" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Entry-Widget" class #f 44 20 44 32 ("text" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "scroller" "name:" "entry" "style:" "edge" "border-type:" "Border-View")
        {Lisp-Entry "default-size" method #f 54 20 54 32 ("19" "200" "Dimension")}}}})
"Explorer-Mark"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Explorer-Mark.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Explorer-Mark" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Explorer-Mark" class #f 40 20 40 33 ("Object")
        {Lisp-Entry "kind" slot #f 43 8 43 12 ()}
        {Lisp-Entry "get-kind" accessor #f 43 21 43 29 ()}
        {Lisp-Entry "range" slot #f 44 8 44 13 ()}
        {Lisp-Entry "get-range" accessor #f 44 21 44 29 ()}
        {Lisp-Entry "initialize" method #f 47 20 47 30 ("range~self" "kind~self" "set!" "nextmethod" "range" "kind")}
        {Lisp-Entry "print" method #f 53 20 53 25 ("range" "kind" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}}})
"External-Frame"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "window" "External-Frame.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.External-Frame" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "External-Frame" class #f 44 7 44 21 ("Overlapped")
        {Lisp-Entry "default-parent" method #f 52 20 52 34 ("get-desktop")}
        {Lisp-Entry "new-root" method #f 61 20 61 28 ("offscreen?:" "External-Frame-Host" "new")}
        {Lisp-Entry "get-host" method #f 70 11 70 19 ("get-host" "root" "when")}
        {Lisp-Entry "close-window" method #f 80 20 80 32 ("close" "confirm-close" "when" "get-host" "host" "let")}}}})
"External-Frame-Host"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "hosting" "External-Frame-Host.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.hosting.External-Frame-Host" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "External-Frame-Host" class #f 43 20 43 39 ("Frame-Host")
        {Lisp-Entry "close-host" method #f 51 20 51 30 ("player" "close" "confirm?" "confirm?:")}
        {Lisp-Entry "set-title" method #f 60 20 60 29 ("set-title" "player" "when" "nextmethod" "value")}}}})
"Figure"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "layout" "Figure.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.layout.Figure" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Figure" class #f 45 7 45 13 ("default-size" "default-position" "explicit" "initialize" "Component")
        {Lisp-Entry "location" property #f 48 12 48 20 ()}
        {Lisp-Entry "position" property #f 49 12 49 20 ()}
        {Lisp-Entry "size" property #f 50 12 50 16 ()}
        {Lisp-Entry "get-location" method #f 58 26 58 38 ("location")}
        {Lisp-Entry "set-location" method #f 62 26 62 38 ("location" "set!" "loc")}
        {Lisp-Entry "find-located" method #f 66 18 66 30 ("children" "get-location" "eq?" "child" "lambda" "find-if" "location")}
        {Lisp-Entry "default-position" method #f 77 29 77 45 ("0" "Point")}
        {Lisp-Entry "get-position" method #f 81 26 81 38 ("position")}
        {Lisp-Entry "get-effective-position" method #f 85 26 85 48 ("get-position")}
        {Lisp-Entry "set-position" method #f 89 26 89 38 ("position" "set!" "pos")}
        {Lisp-Entry "move-figure" method #f 93 18 93 29 ("get-v" "get-h" "+" "Point" "new" "set-position" "get-position" "pos" "let" "dv" "dh")}
        {Lisp-Entry "get-center" method #f 98 18 98 28 ("get-height" "get-v" "2" "size" "get-width" "quotient" "position" "get-h" "+" "Point" "new")}
        {Lisp-Entry "get-bottom-right" method #f 104 18 104 34 ("get-height" "get-v" "size" "get-width" "position" "get-h" "+" "Point" "new")}
        {Lisp-Entry "default-size" method #f 115 29 115 41 ("100" "Dimension")}
        {Lisp-Entry "get-size" method #f 119 26 119 34 ("size")}
        {Lisp-Entry "get-effective-size" method #f 123 26 123 44 ("get-size")}
        {Lisp-Entry "set-size" method #f 127 26 127 34 ("size" "set!" "sz")}
        {Lisp-Entry "size-figure" method #f 131 18 131 29 ("get-height" "get-width" "+" "Dimension" "new" "set-size" "get-size" "size" "let" "dh" "dw")}
        {Lisp-Entry "get-class-descriptor" method #f 141 25 141 45 ("Figure-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 150 11 150 17 ()
        {Lisp-Entry "Figure-Descriptor" class #f 156 7 156 24 ("size" "domain" "position" "title:" "location" "name:" "Component-Descriptor")}}}})
"Figure-Mover"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "action" "Figure-Mover.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.action.Figure-Mover" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Figure-Mover" class #f 43 20 43 32 ("explicit" "initialize" "Component")
        {Lisp-Entry "client" property #f 46 12 46 18 ()}
        {Lisp-Entry "dragging?" slot #f 49 8 49 17 ()}
        {Lisp-Entry "base-position" slot #f 50 8 50 21 ()}
        {Lisp-Entry "get-client" method #f 58 18 58 28 ("client")}
        {Lisp-Entry "set-client" method #f 62 18 62 28 ("child" "client" "set!" "clt")}
        {Lisp-Entry "on-mouse-down" method #f 71 11 71 24 ("get-sender" "acquire-capture" "get-position" "base-position" "dragging?" "set!" "evt")}
        {Lisp-Entry "on-drag-move" method #f 77 11 77 23 ("get-v" "get-h" "client" "move-figure" "base-position" "get-position" "-" "delta" "let" "dragging?" "when" "evt")}
        {Lisp-Entry "on-drag-up" method #f 83 11 83 21 ("set!" "get-sender" "release-capture" "dragging?" "when" "evt")}}}})
"Figure-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Figure-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Figure-Preferences" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Figure-Preferences" class #f 44 20 44 38 ("initialize" "Preferences")
        {Lisp-Entry "location" property #f 47 12 47 20 ()}
        {Lisp-Entry "get-location" accessor #f 47 45 47 53 ()}
        {Lisp-Entry "set-location" accessor #f 47 45 47 53 ()}
        {Lisp-Entry "position" property #f 48 12 48 20 ()}
        {Lisp-Entry "get-position" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "set-position" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "size" property #f 49 12 49 16 ()}
        {Lisp-Entry "get-size" accessor #f 49 45 49 53 ()}
        {Lisp-Entry "set-size" accessor #f 49 45 49 53 ()}
        {Lisp-Entry "find-located" method #f 57 18 57 30 ("children" "get-location" "eq?" "child" "lambda" "find-if" "location")}
        {Lisp-Entry "apply-root" method #f 68 26 68 36 ("self" "error" "player")}
        {Lisp-Entry "apply-preferences" method #f 72 20 72 37 ("set-size" "size" "set-position" "position" "when" "find-client" "or" "let" "client")}
        {Lisp-Entry "save-preferences" method #f 86 20 86 36 ("get-effective-size" "size" "'size" "get-effective-position" "position" "'position" "set-property" "when" "find-client" "or" "let" "client" "designer")}
        {Lisp-Entry "find-client" method #f 98 29 98 40 ()}
        {Lisp-Entry "get-class-descriptor" method #f 107 25 107 45 ("Figure-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 116 11 116 17 ()
        {Lisp-Entry "Figure-Preferences-Descriptor" class #f 122 7 122 36 ("size" "position" "location" "name:" "Preferences-Descriptor")
          {Lisp-Entry "component-presentation-property?" method #f 133 20 133 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 137 20 137 46 ("get-name" "->string" "get-title" "or" "component")}
          {Lisp-Entry "component-set-presentation" method #f 141 20 141 46 ("title:" "set-property" "title" "designer" "component")}}}}})
"File-Base-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "File-Base-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.File-Base-Menu" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "File-Base-Menu" class #f 46 7 46 21 ("exit" "on-quit-application" "end-revert-group" "revert-saved" "on-revert-saved" "end-save-group" "save-all" "on-save-all" "save-as" "on-save-as" "save" "guest" "on-save" "end-open-group" "close-all" "on-close-all" "close" "on-close" "open" "on-open" "new" "application" "Action" "action-handler:" "Image-Resource" "icon:" "on-new" "name:" "french:" "english:" "Locales" "title:" "Menu")}}})
"File-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "File-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.File-Menu" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "File-Menu" class #f 46 7 46 16 ("end-print-group" "print-preview" "on-print-preview" "print-layout" "on-print-layout" "print" "application" "Image-Resource" "icon:" "on-quit-application" "french:" "english:" "Locales" "on-print" "guest" "Action" "action-handler:" "end-revert-group" "before:" "title:" "compare-saved" "name:" "File-Base-Menu")}}})
"File-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "File-Request.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.File-Request" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "File-Request" class #f 45 20 45 32 ("initialize" "title:" "ok" "buttonbar" "name:" "Pathname-Request")
        {Lisp-Entry "host-title" method #f 54 25 54 35 ()}
        {Lisp-Entry "multiple-selection?" property #f 58 12 58 31 ()}
        {Lisp-Entry "finish" method #f 61 20 61 26 ("multiple-selection?" "get-tree" "set-multiple-selection?" "nextmethod" "rest")}
        {Lisp-Entry "update-content" method #f 71 20 71 34 ("for-each" "lambda" "with-update-locked" "remove-every-row" "add-pathname" "pathname" "add" "define" "get-tree" "tree" "files" "leaves?:" "nodes?:" "directory" "get-content" "directories" "let")}
        {Lisp-Entry "update-buttons" method #f 85 20 85 34 ("file?" "every?" "not-null?" "and" "ok" "'ok" "locate" "set-enabled?" "selected-pathnames" "pathnames" "let" "nextmethod")}
        {Lisp-Entry "get-modal-result" method #f 96 20 96 36 ("selected-pathname" "selected-pathnames" "anchorize" "map" "multiple-selection?" "if" "directory" "set-current-directory")}
        {Lisp-Entry "default-action" method #f 108 20 108 34 ("get-modal-result" "get-host" "end-modal" "ok-enabled?" "down" "car" "directory?" "1" "length" "=" "and" "cond" "selected-pathnames" "pathnames" "let")}
        {Lisp-Entry "selected-pathnames" method #f 121 11 121 29 ("get-tree" "get-selected-data")}}}})
"Filter-Text-View"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "text" "Filter-Text-View.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.text.Filter-Text-View" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Filter-Text-View" class #f 56 7 56 23 ("show-unfocused-selection?:" "focus-selects-all?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "initialize" "Plain-Text-View")
        {Lisp-Entry "target-name" property #f 59 12 59 23 ()}
        {Lisp-Entry "get-target-name" accessor #f 59 48 59 56 ()}
        {Lisp-Entry "set-target-name" accessor #f 59 48 59 56 ()}
        {Lisp-Entry "find-target" method #f 71 11 71 22 ("get-guest" "locate" "target-name" "when")}
        {Lisp-Entry "return-press" method #f 81 20 81 32 ("filter-target" "key")}
        {Lisp-Entry "filter-target" method #f 85 18 85 31 ("rank" "for-each-row" "with-update-locked" "set-selection" ":wait" "with-cursor" "get-string-content" "->search-set" "find-target" "target" "get-father" "node" "loop" "let" "set-visible?" "visible?" "make-row-visible" "get-children" "ignore-case?:" "search" "get-title" "when" "cell" "lambda" "some?" "filter" "row" "determine-visible?" "define")}}}})
"Flow-Layout"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "layout" "Flow-Layout.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.layout.Flow-Layout" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Flow-Layout" class #f 44 7 44 18 ("horizontal" "'horizontal" "0" "Rect" "initialize" "Layout")
        {Lisp-Entry "insets" property #f 47 12 47 18 ()}
        {Lisp-Entry "get-insets" accessor #f 47 69 47 77 ()}
        {Lisp-Entry "set-insets" accessor #f 47 69 47 77 ()}
        {Lisp-Entry "justification" property #f 48 12 48 25 ()}
        {Lisp-Entry "get-justification" accessor #f 48 69 48 77 ()}
        {Lisp-Entry "set-justification" accessor #f 48 69 48 77 ()}
        {Lisp-Entry "padding" property #f 49 12 49 19 ()}
        {Lisp-Entry "get-padding" accessor #f 49 69 49 77 ()}
        {Lisp-Entry "set-padding" accessor #f 49 69 49 77 ()}
        {Lisp-Entry "fill?" property #f 50 12 50 17 ()}
        {Lisp-Entry "get-fill?" accessor #f 50 69 50 77 ()}
        {Lisp-Entry "set-fill?" accessor #f 50 69 50 77 ()}
        {Lisp-Entry "layout" method #f 59 20 59 26 ("vertical" "justification" "case" "values" "second" "pair?" "first" "else" "symbol?" "integer?" "not" "or" "cond" "location" "get-h" "get-top" "get-right" "layout-horizontal" "get-width" "if" "center" "'center" "decrease!" "get-v" ">" "let*" "'tail" "for-each-reversed" "padding" "increase!" "get-height" "Dimension" "set-size" "fill?" "0" "+" "set-position" "get-size" "size" "'head" "eq?" "get-visible?" "and" "when" "get-location" "standardize-location" "offset" "where" "receive" "figure" "lambda" "for-each" "get-bottom" "-" "get-left" "Point" "new" "tail" "insets" "rect-position" "head" "let" "layout-vertical" "define" "rest" "height" "width" "figures")}}}})
"Focus-Container"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "hosting" "Focus-Container.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.hosting.Focus-Container" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Focus-Container" class #f 47 20 47 35 ("initialize" "View")
        {Lisp-Entry "focused" slot #f 50 8 50 15 ()}
        {Lisp-Entry "mouse-activate?" method #f 58 20 58 35 ()}
        {Lisp-Entry "mouse-activate" method #f 62 26 62 40 ("focus-host")}
        {Lisp-Entry "get-focus-container" method #f 71 20 71 39 ("self")}
        {Lisp-Entry "get-focused" method #f 80 18 80 29 ("self" "get-focus-container" "eq?" "focused" "and" "if")}
        {Lisp-Entry "set-focused" method #f 88 18 88 29 ("focused" "set!" "view")}
        {Lisp-Entry "focus-host" method #f 92 26 92 36 ("else" "acquire-focus" "cond" "get-focused" "focused" "let")}
        {Lisp-Entry "preserve-focused" method #f 100 18 100 34 ("focus-master" "focused" "set!" "focus")}
        {Lisp-Entry "container-focusable?" method #f 104 26 104 46 ()}
        {Lisp-Entry "ensure-container-focusable" method #f 108 26 108 52 ()}
        {Lisp-Entry "focus-default" method #f 112 20 112 33 ()}
        {Lisp-Entry "view-destroyed" method #f 116 21 116 35 ("set!" "focused" "eq?" "when" "view")}}}})
"Focus-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Focus-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Focus-Event" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Focus-Event" class #f 43 7 43 18 ("Event")
        {Lisp-Entry "focus" slot #f 46 8 46 13 ()}
        {Lisp-Entry "get-focus" accessor #f 46 21 46 29 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("focus~self" "set!" "nextmethod" "focus" "sender" "kind")}
        {Lisp-Entry "print" method #f 54 20 54 25 ("lambda" "self" "print-unreadable" "readably" "printer")}}}})
"Font-Preferences"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "preference" "Font-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Font-Preferences" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Font-Preferences" class #f 46 20 46 36 ("Image-Resource" "icon:" "title:" "Preferences")
        {Lisp-Entry "font-name" property #f 49 12 49 21 ()}
        {Lisp-Entry "get-font-name" accessor #f 49 33 49 41 ()}
        {Lisp-Entry "set-font-name" accessor #f 49 33 49 41 ()}
        {Lisp-Entry "point-size" property #f 50 12 50 22 ()}
        {Lisp-Entry "get-point-size" accessor #f 50 33 50 41 ()}
        {Lisp-Entry "set-point-size" accessor #f 50 33 50 41 ()}
        {Lisp-Entry "color" property #f 51 12 51 17 ()}
        {Lisp-Entry "get-color" accessor #f 51 33 51 41 ()}
        {Lisp-Entry "set-color" accessor #f 51 33 51 41 ()}
        {Lisp-Entry "bold?" property #f 52 12 52 17 ()}
        {Lisp-Entry "get-bold?" accessor #f 52 33 52 41 ()}
        {Lisp-Entry "set-bold?" accessor #f 52 33 52 41 ()}
        {Lisp-Entry "italic?" property #f 53 12 53 19 ()}
        {Lisp-Entry "get-italic?" accessor #f 53 33 53 41 ()}
        {Lisp-Entry "set-italic?" accessor #f 53 33 53 41 ()}
        {Lisp-Entry "underline?" property #f 54 12 54 22 ()}
        {Lisp-Entry "get-underline?" accessor #f 54 33 54 41 ()}
        {Lisp-Entry "set-underline?" accessor #f 54 33 54 41 ()}
        {Lisp-Entry "antialias" property #f 55 12 55 21 ()}
        {Lisp-Entry "get-antialias" accessor #f 55 33 55 41 ()}
        {Lisp-Entry "set-antialias" accessor #f 55 33 55 41 ()}
        {Lisp-Entry "hint-style" property #f 56 12 56 22 ()}
        {Lisp-Entry "get-hint-style" accessor #f 56 33 56 41 ()}
        {Lisp-Entry "set-hint-style" accessor #f 56 33 56 41 ()}
        {Lisp-Entry "get-class-descriptor" method #f 68 25 68 45 ("Font-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 77 11 77 17 ()
        {Lisp-Entry "Font-Preferences-Descriptor" class #f 83 7 83 34 ("name:" "hint-style" "antialias" "underline?" "italic?" "bold?" "color" "point-size" "font-name" "categorized:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")}}}})
"Fonts-Preferences"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "preference" "Fonts-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Fonts-Preferences" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Fonts-Preferences" class #f 46 20 46 37 ("Image-Resource" "icon:" "title:" "Preferences")
        {Lisp-Entry "get-class-descriptor" method #f 58 25 58 45 ("Fonts-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 67 11 67 17 ()
        {Lisp-Entry "Fonts-Preferences-Descriptor" class #f 73 7 73 35 ("categorized:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")}}}})
"Format"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Format.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Format" module #f 37 18 37 37 ("jazz")
      {Lisp-Entry "Format" class #f 43 7 43 13 ("left" "'left" "0" "attributes" "Exemplar")
        {Lisp-Entry "left-margin" definition #f 47 5 47 16 ()}
        {Lisp-Entry "get-left-margin" accessor #f 47 5 47 16 ()}
        {Lisp-Entry "set-left-margin" accessor #f 47 5 47 16 ()}
        {Lisp-Entry "right-margin" definition #f 48 5 48 17 ()}
        {Lisp-Entry "get-right-margin" accessor #f 48 5 48 17 ()}
        {Lisp-Entry "set-right-margin" accessor #f 48 5 48 17 ()}
        {Lisp-Entry "justification" definition #f 49 5 49 18 ()}
        {Lisp-Entry "get-justification" accessor #f 49 5 49 18 ()}
        {Lisp-Entry "set-justification" accessor #f 49 5 49 18 ()}
        {Lisp-Entry "bulleted?" definition #f 50 5 50 14 ()}
        {Lisp-Entry "get-bulleted?" accessor #f 50 5 50 14 ()}
        {Lisp-Entry "set-bulleted?" accessor #f 50 5 50 14 ()}
        {Lisp-Entry "bullet-outside" definition #f 51 5 51 19 ()}
        {Lisp-Entry "get-bullet-outside" accessor #f 51 5 51 19 ()}
        {Lisp-Entry "set-bullet-outside" accessor #f 51 5 51 19 ()}
        {Lisp-Entry "bullet-inside" definition #f 52 5 52 18 ()}
        {Lisp-Entry "get-bullet-inside" accessor #f 52 5 52 18 ()}
        {Lisp-Entry "set-bullet-inside" accessor #f 52 5 52 18 ()}
        {Lisp-Entry "keep-with-next?" definition #f 53 5 53 20 ()}
        {Lisp-Entry "get-keep-with-next?" accessor #f 53 5 53 20 ()}
        {Lisp-Entry "set-keep-with-next?" accessor #f 53 5 53 20 ()}}}})
"Format-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Format-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Format-Menu" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Format-Menu" class #f 44 20 44 31 ("capitalize" "capitalize-selection" "downcase" "downcase-selection" "upcase" "text" "upcase-selection" "tabify" "code-text" "Action" "action-handler:" "title:" "tabify-selection" "name:" "Context-Menu")}}})
"Formatted-Text"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Formatted-Text.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Formatted-Text" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Formatted-Text" class #f 43 7 43 21 ("Text")
        {Lisp-Entry "formats" slot #f 46 18 46 25 ()}
        {Lisp-Entry "get-formats" accessor #f 46 36 46 44 ()}
        {Lisp-Entry "set-formats" accessor #f 46 36 46 44 ()}
        {Lisp-Entry "styles" slot #f 47 18 47 24 ()}
        {Lisp-Entry "get-styles" accessor #f 47 36 47 44 ()}
        {Lisp-Entry "set-styles" accessor #f 47 36 47 44 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("styles~self" "formats~self" "set!" "nextmethod" "apply" "others" "styles" "formats" "bind-keywords" "rest")}
        {Lisp-Entry "print" method #f 57 20 57 25 ("paragraphs" "styles" "formats" "self" "class-of" "category-name" "format" "readably" "printer")}}}})
"Formatted-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Formatted-Text-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Formatted-Text-Actions" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Formatted-Text-Actions" class #f 45 20 45 42 ("on-bulleted" "bulleted" "Heading5" "heading5-style" "Heading4" "heading4-style" "Heading3" "heading3-style" "Heading2" "heading2-style" "Heading1" "heading1-style" "Heading0" "heading0-style" ":alt" "Shortcut" "shortcut:" "Default" "style:" "on-paragraph-style" ":focus" "Event-Handler" "action-handler:" "default-style" "name:" "Actions")}}})
"Formatted-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Formatted-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Formatted-Text-View" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Formatted-Text-View" class #f 47 7 47 26 ("wrap?:" "initialize" "Text-View")
        {Lisp-Entry "ruler" slot #f 50 8 50 13 ()}
        {Lisp-Entry "external-name" method #f 62 25 62 38 ("formatted-text" "'formatted-text" "rest")}
        {Lisp-Entry "default-extension" method #f 66 20 66 37 ()}
        {Lisp-Entry "extensions" method #f 70 20 70 30 ()}
        {Lisp-Entry "focus-actions" method #f 79 20 79 33 ("nextmethod" "formatted-text" "'formatted-text" "find-actions" "cons")}
        {Lisp-Entry "host-workspaces" method #f 89 20 89 35 ("formatted")}
        {Lisp-Entry "Formatted-Text-Controller" class #f 99 9 99 34 ("Document-Controller")
          {Lisp-Entry "install-container" method #f 102 13 102 30 ("install-ruler" "install-scroller")}
          {Lisp-Entry "install-ruler" method #f 107 13 107 26 ("set-client" "set-parent" "set-ruler" "get-content" "parent:" "Ruler" "new" "ruler" "get-scroller" "scroller" "document" "get-root" "root" "let*")}}
        {Lisp-Entry "new-controller" method #f 117 20 117 34 ("self" "Formatted-Text-Controller" "new")}
        {Lisp-Entry "get-ruler" method #f 126 20 126 29 ("ruler")}
        {Lisp-Entry "set-ruler" method #f 130 18 130 27 ("ruler" "set!" "r")}
        {Lisp-Entry "empty-content" method #f 139 20 139 33 ("list" "paragraphs:" "styles:" "formats:" "Formatted-Text" "new")}
        {Lisp-Entry "get-content" method #f 146 20 146 31 ("get-formatted-content")}
        {Lisp-Entry "set-content" method #f 150 20 150 31 ("empty-content" "or" "set-formatted-content" "text")}
        {Lisp-Entry "get-context-menu" method #f 160 20 160 36 ()}
        {Lisp-Entry "cursor-update" method #f 169 20 169 33 (":ibeam" ":finger" "Hyperlink-Style" "is?" "get-style-at" "style" "let" ":left-arrow" "set-cursor" "paragraph-left" "get-h" "<" "if" "get-line" "get-paragraph" "par" "view->text" "pos" "let*" "selectable?" "view-enabled?" "and" "when" "show-text-cursor" "view")}
        {Lisp-Entry "mouse-down" method #f 187 20 187 30 ("nextmethod" "Hyperlink-Style" "is?" "unless" "get-style-at" "style" "view->text" "pos" "let*" "view-enabled?" "when" "view")}
        {Lisp-Entry "drag-up" method #f 195 20 195 27 ("bell" "get-action" "get-anchor" "Hyperlink-Style" "get-style-at" "style" "view->text" "pos" "let*" "not" "view-enabled?" "and" "nextmethod" "mouse-selecting?" "let" "cardinality" "0" "Cell" "Range$Cell$" "set-selection" "=" "when" "string" "line" "heading" "lambda" "for-each-heading" "anchor" "goto-anchor" "else" "get-properties" ":hyperlink" "Event" "new" "apply" "self" "invoke" "Event-Handler" "is?" "cond" "action" "invoke-action" "define" "rest" "view")}
        {Lisp-Entry "copy-selection" method #f 231 20 231 34 ("copy-formatted-selection" "nextmethod")}
        {Lisp-Entry "paste-clipboard" method #f 236 20 236 35 ("paste-formatted-clipboard")}
        {Lisp-Entry "read-moniker" method #f 245 20 245 32 ("read-formatted" "moniker")}
        {Lisp-Entry "save-to" method #f 249 20 249 27 ("save-formatted" "moniker")}
        {Lisp-Entry "for-each-heading" method #f 258 18 258 34 ("get-string" "get-name" "memq?" "style" "first-run" "run" "let*" "paragraph" "row" "lambda" "for-each-paragraph" "list" "all" "and" "when" "Heading3" "'Heading3" "heading3" "Heading2" "'Heading2" "heading2" "Heading1" "'Heading1" "heading1" "error?:" "Heading0" "'Heading0" "get-style" "heading0" "let" "proc")}
        {Lisp-Entry "collect-headings" method #f 273 18 273 34 ("get-output" "list" "put" "string" "row" "heading" "lambda" "for-each-heading" "List-Factory" "new" "headings" "let")}
        {Lisp-Entry "insert-table-of-content" method #f 286 20 286 43 ("toggle-bulleted" "unless" "anchor:" "insert-hyperlink" "get-line" "line" "get-start" "start" "let*" "eq?" "when" "string" "row" "bind" "heading" "lambda" "for-each" "insert-newline" "Heading0" "'Heading0" "insert-styled" "collect-headings" "headings" "let")}
        {Lisp-Entry "Heading-Levels" definition #f 310 14 310 28 ("5" "Heading5" "4" "Heading4" "3" "Heading3" "2" "Heading2" "1" "Heading1" "0" "Heading0")}
        {Lisp-Entry "heading-level" definition #f 319 15 319 28 ("error" "cdr" "if" "Heading-Levels" "assq" "info" "let" "heading")}
        {Lisp-Entry "get-chapters" method #f 331 20 331 32 ("collect-headings" "0" "Cell" "new" "heading-level" "list" "string" "line" "bind" "heading" "lambda" "map")}
        {Lisp-Entry "get-first-chapter" method #f 338 20 338 37 ("lst")}
        {Lisp-Entry "get-remaining-chapters" method #f 342 20 342 42 ("lst")}}}})
"Frame-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Frame-Button.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Frame-Button" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Frame-Button" class #f 46 20 46 32 ("inactive" "'inactive" "explicit" "initialize" "View")
        {Lisp-Entry "type" property #f 49 12 49 16 ()}
        {Lisp-Entry "state" slot #f 52 8 52 13 ()}
        {Lisp-Entry "get-type" method #f 60 18 60 26 ("type")}
        {Lisp-Entry "set-type" method #f 64 18 64 26 ("invalidate-view" "type" "set!" "value")}
        {Lisp-Entry "get-state" method #f 74 18 74 27 ("state")}
        {Lisp-Entry "set-state" method #f 78 18 78 27 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "mouse-activate?" method #f 88 20 88 35 ()}
        {Lisp-Entry "mouse-enter" method #f 92 20 92 31 ("pushed" "'pushed" "out-pushed" "highlighted" "'highlighted" "set-state" "inactive" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "view-enabled?" "and" "when")}
        {Lisp-Entry "mouse-leave" method #f 99 20 99 31 ("out-pushed" "'out-pushed" "pushed" "inactive" "'inactive" "set-state" "highlighted" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "view-enabled?" "and" "when")}
        {Lisp-Entry "mouse-down" method #f 106 20 106 30 ("pushed" "'pushed" "set-state" "view-enabled?" "when" "pos")}
        {Lisp-Entry "drag-up" method #f 111 20 111 27 ("inactive" "'inactive" "out-pushed" "highlighted" "'highlighted" "set-state" "pushed" "get-state" "case" "up" "unwind-protect" "view-enabled?" "when" "rest" "pos")}
        {Lisp-Entry "up" method #f 120 11 120 13 ("self" "process-action" "pushed" "'pushed" "get-state" "eq?" "when")}
        {Lisp-Entry "draw" method #f 130 20 130 24 ("pushed" "'pushed" "state" "eq?" "if" "draw-caption" "+" "16" "Rect" "new" "rect" "0" "Medium" "name:" "Color" "get-application" "get-images-portfolio" "draw-opaque-image" "get-height" "14" "center" "top" "let" "close" "restore" "Image-Resource" "maximize" "case" "type" "type-icon" "define" "lv" "lh" "context" "surface")}}}})
"Frame-Host"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "hosting" "Frame-Host.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.hosting.Frame-Host" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Frame-Host" class #f 46 20 46 30 ("Host-View")
        {Lisp-Entry "conclude" method #f 54 20 54 28 ("self" "register-frame" "destroy-mandatory" "nextmethod" "rest")}
        {Lisp-Entry "activate-frame" method #f 65 29 65 43 ("simulate-mouse-move" "get-player" "when" "get-application" "update-windowing-actions" "client-activate" "for-each-docked" "bring-frame-to-front" "self" "set-active-frame" "close-popups")}
        {Lisp-Entry "deactivate-frame" method #f 76 29 76 45 ("set-active-frame")}
        {Lisp-Entry "close-host" method #f 85 29 85 39 ("confirm?" "confirm?:")}
        {Lisp-Entry "close-with-confirm" method #f 89 20 89 38 ("nextmethod" "confirm-close" "close-popups")}
        {Lisp-Entry "destroy" method #f 100 20 100 27 ("get-application" "update-windowing-actions" "self" "unregister-frame" "remove-surrogate" "get-surrogate" "when" "nextmethod")}
        {Lisp-Entry "confirm-close" method #f 113 20 113 33 ("confirm-close" "guest" "when" "rest")}}}})
"Frame-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Frame-Preferences.jazz"} 1290095102
    {Lisp-Entry "jazz.ui.preference.Frame-Preferences" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Frame-Preferences" class #f 46 20 46 37 ("Image-Resource" "icon:" "Figure-Preferences")}}})
"Group-Box"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Group-Box.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Group-Box" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Group-Box" class #f 48 7 48 16 ("explicit" "initialize" "Container")
        {Lisp-Entry "flat?" property #f 51 12 51 17 ()}
        {Lisp-Entry "style" property #f 52 12 52 17 ()}
        {Lisp-Entry "get-flat?" method #f 60 18 60 27 ("flat?")}
        {Lisp-Entry "set-flat?" method #f 64 18 64 27 ("invalidate-view" "flat?" "set!" "value")}
        {Lisp-Entry "get-style" method #f 69 18 69 27 ("style")}
        {Lisp-Entry "set-style" method #f 73 18 73 27 ("invalidate-view" "style" "set!" "value")}
        {Lisp-Entry "set-title" method #f 78 20 78 29 ("layout-view" "nextmethod" "value")}
        {Lisp-Entry "layout" method #f 88 20 88 26 ("Dimension" "set-size" "Point" "new" "set-position" "get-content" "content" "height" "4" "-" "width" "else" "+" "title" "cond" "top" "2" "1" "flat?" "if" "left" "get-ascent" "ascent" "effective-font" "get-metrics" "metrics" "get-height" "box-height" "get-width" "box-width" "get-size" "size" "let*")}
        {Lisp-Entry "draw" method #f 108 20 108 24 ("draw-text" "Black" "set-text-color" "+" "-" "fill-rect" "when" "rectangle" "'rectangle" "edges:" "sunken" "'sunken" "outer:" "raised" "'raised" "inner:" "draw-edge" "Rect" "new" "frame-rect" "cairo_font_extents_t-free" "0" "2" "cairo_font_extents_t-ascent-ref" "/" "fxceiling" "if" "top" "get-text-extent" "and" "extent" "get-text-metrics" "metrics" "get-bounds" "rect" "Group-Border" "else" "Entry-Border" "entry" "style" "case" "frame-color" "flat-look?" "flat?" "Medium" "name:" "Color" "color" "9" "offset" "get-height" "height" "get-width" "width" "get-size" "size" "get-title" "localize" "title" "let*" "lv" "lh" "context" "surface")}
        {Lisp-Entry "flat-look?" method #f 136 11 136 21 ("flat?" "else" "group" "'group" "find-look" "get-border-flat?" "styled" "style" "case")}
        {Lisp-Entry "get-class-descriptor" method #f 147 25 147 45 ("Group-Box-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 156 11 156 17 ()
        {Lisp-Entry "Group-Box-Descriptor" class #f 162 7 162 27 ("style" "title:" "flat?" "name:" "title" "default:" "Layout-View-Descriptor")}}}})
"Group-Look"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Group-Look.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Group-Look" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Group-Look" class #f 43 7 43 17 ("initialize" "Look")
        {Lisp-Entry "border-flat?" property #f 46 12 46 24 ()}
        {Lisp-Entry "get-border-flat?" accessor #f 46 49 46 57 ()}
        {Lisp-Entry "set-border-flat?" accessor #f 46 49 46 57 ()}}}})
"Groupable"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Groupable.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Groupable" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Groupable" interface #f 43 24 43 33 ()
        {Lisp-Entry "get-group" method #f 46 35 46 44 ()}
        {Lisp-Entry "set-group" method #f 47 35 47 44 ("value")}}}})
"Guest-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "hosting" "Guest-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.hosting.Guest-Actions" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Guest-Actions" class #f 45 20 45 33 ("on-compare-saved" "compare-saved" "on-revert-saved" "revert-saved" "on-save-as" "save-as" ":alt" ":control" "Shortcut" "shortcut:" "on-save" ":document" "Event-Handler" "action-handler:" "save" "name:" "Actions")}}})
"Guest-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "hosting" "Guest-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.hosting.Guest-Preferences" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Guest-Preferences" class #f 43 20 43 37 ("initialize" "Frame-Preferences")
        {Lisp-Entry "initargs" property #f 46 12 46 20 ()}
        {Lisp-Entry "get-initargs" accessor #f 46 46 46 54 ()}
        {Lisp-Entry "set-initargs" accessor #f 46 46 46 54 ()}}}})
"Header-Bar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Header-Bar.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Header-Bar" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Header-Bar" class #f 46 7 46 17 ("explicit" "initialize" "Container")
        {Lisp-Entry "flat?" property #f 49 12 49 17 ()}
        {Lisp-Entry "shown?" property #f 50 12 50 18 ()}
        {Lisp-Entry "style" property #f 51 12 51 17 ()}
        {Lisp-Entry "get-style" accessor #f 51 43 51 51 ()}
        {Lisp-Entry "set-style" accessor #f 51 43 51 51 ()}
        {Lisp-Entry "client" slot #f 54 8 54 14 ()}
        {Lisp-Entry "get-client" accessor #f 54 39 54 47 ()}
        {Lisp-Entry "set-client" accessor #f 54 39 54 47 ()}
        {Lisp-Entry "get-flat?" method #f 62 18 62 27 ("flat?")}
        {Lisp-Entry "set-flat?" method #f 66 18 66 27 ("layout-view" "set!" "flat?" "neq?" "when" "value")}
        {Lisp-Entry "get-shown?" method #f 72 18 72 28 ("shown?")}
        {Lisp-Entry "set-shown?" method #f 76 18 76 28 ("layout-view" "set!" "shown?" "neq?" "when" "value")}
        {Lisp-Entry "layout" method #f 87 20 87 26 ("content-size" "set-size" "content-position" "set-position" "get-size" "size" "when" "get-content" "content" "let")}
        {Lisp-Entry "content-position" method #f 95 11 95 27 ("get-header-height" "0" "Point" "new" "size")}
        {Lisp-Entry "content-size" method #f 99 11 99 23 ("get-header-height" "get-height" "-" "get-width" "Dimension" "new" "size")}
        {Lisp-Entry "get-header-height" method #f 105 26 105 43 ("0" "16" "15" "flat?" "shown?" "if")}
        {Lisp-Entry "get-class-descriptor" method #f 114 25 114 45 ("Header-Bar-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 123 11 123 17 ()
        {Lisp-Entry "Header-Bar-Descriptor" class #f 129 7 129 28 ("style" "shown?" "domain" "flat?" "name:" "Layout-View-Descriptor")}}}})
"Header-Look"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Header-Look.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Header-Look" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Header-Look" class #f 43 7 43 18 ("initialize" "Look")
        {Lisp-Entry "flat?" property #f 46 12 46 17 ()}
        {Lisp-Entry "get-flat?" accessor #f 46 42 46 50 ()}
        {Lisp-Entry "set-flat?" accessor #f 46 42 46 50 ()}}}})
"Header-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Header-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Header-View" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Header-View" class #f 46 7 46 18 ("explicit" "initialize" "Container")
        {Lisp-Entry "flat?" property #f 49 12 49 17 ()}
        {Lisp-Entry "shown?" property #f 50 12 50 18 ()}
        {Lisp-Entry "selector?" property #f 51 12 51 21 ()}
        {Lisp-Entry "style" property #f 52 12 52 17 ()}
        {Lisp-Entry "get-style" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "set-style" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "client" slot #f 55 8 55 14 ()}
        {Lisp-Entry "default-name" method #f 58 20 58 32 ("header" "'header")}
        {Lisp-Entry "get-flat?" method #f 67 18 67 27 ("flat?")}
        {Lisp-Entry "set-flat?" method #f 71 18 71 27 ("layout-view" "set!" "flat?" "neq?" "when" "value")}
        {Lisp-Entry "get-shown?" method #f 77 18 77 28 ("shown?")}
        {Lisp-Entry "set-shown?" method #f 81 18 81 28 ("layout-view" "set!" "shown?" "neq?" "when" "value")}
        {Lisp-Entry "get-selector?" method #f 87 18 87 31 ("selector?")}
        {Lisp-Entry "set-selector?" method #f 91 18 91 31 ("layout-view" "set!" "selector?" "neq?" "when" "value")}
        {Lisp-Entry "get-client" method #f 102 18 102 28 ("set!" "find-client" "clt" "let" "client" "or")}
        {Lisp-Entry "set-client" method #f 108 18 108 28 ("client" "set!" "clt")}
        {Lisp-Entry "find-client" method #f 112 29 112 40 ()}
        {Lisp-Entry "content-inner?" method #f 121 20 121 34 ("view")}
        {Lisp-Entry "layout" method #f 130 20 130 26 ("content-size" "set-size" "content-position" "set-position" "get-size" "size" "when" "get-content" "content" "let")}
        {Lisp-Entry "content-position" method #f 138 11 138 27 ("get-header-height" "get-selector-width" "Point" "new" "size")}
        {Lisp-Entry "content-size" method #f 142 11 142 23 ("get-header-height" "get-height" "-" "get-width" "Dimension" "new" "size")}
        {Lisp-Entry "get-header-height" method #f 148 26 148 43 ("0" "16" "15" "flat?" "shown?" "if")}
        {Lisp-Entry "get-selector-width" method #f 152 26 152 44 ("0" "16" "15" "flat?" "selector?" "if")}
        {Lisp-Entry "get-look" method #f 161 20 161 28 ("header" "'header" "else" "header/document" "'header/document" "document" "header/tool" "'header/tool" "find-look" "tool" "style" "case")}
        {Lisp-Entry "get-class-descriptor" method #f 173 25 173 45 ("Header-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 182 11 182 17 ()
        {Lisp-Entry "Header-View-Descriptor" class #f 188 7 188 29 ("style" "selector?" "shown?" "domain" "title:" "flat?" "name:" "Layout-View-Descriptor")}}}})
"History-Document-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "history" "History-Document-Item.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.history.History-Document-Item" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "History-Document-Item" class #f 43 20 43 41 ("History-Item")
        {Lisp-Entry "document" slot #f 46 8 46 16 ()}
        {Lisp-Entry "selection" slot #f 47 8 47 17 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("selection~self" "document~self" "set!" "nextmethod" "selection" "document")}
        {Lisp-Entry "valid?" method #f 56 20 56 26 ("document" "get-guest")}
        {Lisp-Entry "open-item" method #f 60 20 60 29 ("bring-to-front" "selection" "document" "get-guest" "set-selection")}
        {Lisp-Entry "present" method #f 65 20 65 27 ("document" "get-guest" "get-controller" "name-status")}}}})
"History-File-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "history" "History-File-Item.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.history.History-File-Item" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "History-File-Item" class #f 44 20 44 37 ("History-Item")
        {Lisp-Entry "file" slot #f 47 8 47 12 ()}
        {Lisp-Entry "selection" slot #f 48 8 48 17 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("selection~self" "file~self" "set!" "nextmethod" "selection" "file")}
        {Lisp-Entry "open-item" method #f 57 20 57 29 ("selection" "selection:" "file" "get-application" "edit-document")}
        {Lisp-Entry "present" method #f 61 20 61 27 ("get-col" "get-line" "file" "get-name" "format" "get-end" "end" "selection" "get-start" "start" "let")}}}})
"History-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "history" "History-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.history.History-Menu" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "History-Menu" class #f 46 20 46 32 ("Context-Menu")
        {Lisp-Entry "manager" property #f 49 12 49 19 ()}
        {Lisp-Entry "get-manager" accessor #f 49 32 49 40 ()}
        {Lisp-Entry "set-manager" accessor #f 49 32 49 40 ()}
        {Lisp-Entry "direction" property #f 50 12 50 21 ()}
        {Lisp-Entry "get-direction" accessor #f 50 32 50 40 ()}
        {Lisp-Entry "set-direction" accessor #f 50 32 50 40 ()}
        {Lisp-Entry "finish" method #f 58 20 58 26 ("direction" "manager" "get-history" "increase!" "rank:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "present" "title" "item" "lambda" "for-each" "0" "rank" "let" "nextmethod" "rest")}
        {Lisp-Entry "on-action" method #f 73 11 73 20 ("go-forward-history" "forward" "manager" "go-backward-history" "backward" "direction" "case" "rank:" "get-property" "rank" "get-application" "appl" "let" "evt")}}}})
"History-Search-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "History-Search-Item.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.search.History-Search-Item" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "History-Search-Item" class #f 44 20 44 39 ("History-Item")
        {Lisp-Entry "mode" slot #f 47 18 47 22 ()}
        {Lisp-Entry "domain" slot #f 48 18 48 24 ()}
        {Lisp-Entry "targets" slot #f 49 18 49 25 ()}
        {Lisp-Entry "whole-words?" slot #f 50 18 50 30 ()}
        {Lisp-Entry "ignore-case?" slot #f 51 18 51 30 ()}
        {Lisp-Entry "preserve-case?" slot #f 52 18 52 32 ()}
        {Lisp-Entry "play-recording?" slot #f 53 18 53 33 ()}
        {Lisp-Entry "expression?" slot #f 54 18 54 29 ()}
        {Lisp-Entry "content" slot #f 55 18 55 25 ()}
        {Lisp-Entry "selection" slot #f 56 18 56 27 ()}
        {Lisp-Entry "initialize" method #f 59 20 59 30 ("selection~self" "content~self" "expression?~self" "play-recording?~self" "preserve-case?~self" "ignore-case?~self" "whole-words?~self" "targets~self" "domain~self" "mode~self" "set!" "nextmethod" "selection" "content" "expression?" "play-recording?" "preserve-case?" "ignore-case?" "whole-words?" "targets" "domain" "mode")}
        {Lisp-Entry "open-item" method #f 73 20 73 29 ("select-results" "set-visible?" "bring-to-front" "self" "install-history-item" "get-application" "get-search-manager" "search" "let")}
        {Lisp-Entry "present" method #f 81 20 81 27 ("format" "null?" "if" "targets" "caar" "target" "let")}}}})
"Horizontal-Line"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Horizontal-Line.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Horizontal-Line" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Horizontal-Line" class #f 44 7 44 22 ("View")
        {Lisp-Entry "default-size" method #f 47 20 47 32 ("8" "100" "Dimension")}
        {Lisp-Entry "draw" method #f 56 20 56 24 ("top" "edges:" "sunken" "'sunken" "outer:" "raised" "'raised" "inner:" "2" "0" "Rect" "new" "draw-edge" "Medium" "name:" "Color" "color" "get-width" "width" "let" "lv" "lh" "context" "surface")}}}})
"Host-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "hosting" "Host-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.hosting.Host-View" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Host-View" class #f 47 20 47 29 ("explicit" "initialize" "Focus-Container")
        {Lisp-Entry "content" property #f 50 12 50 19 ()}
        {Lisp-Entry "guest" property #f 51 12 51 17 ()}
        {Lisp-Entry "destroy-component" method #f 54 20 54 37 ("nextmethod" "close" "set-guest" "view" "let" "guest" "when" "close-guest" "define")}
        {Lisp-Entry "get-content" method #f 70 18 70 29 ("content")}
        {Lisp-Entry "set-content" method #f 74 18 74 29 ("layout-view" "set!" "content" "neq?" "when" "view")}
        {Lisp-Entry "get-guest" method #f 80 20 80 29 ("guest")}
        {Lisp-Entry "set-guest" method #f 84 18 84 27 ("install-guest" "set!" "content" "not" "uninstall-guest" "guest" "neq?" "when" "view")}
        {Lisp-Entry "layout" method #f 100 20 100 26 ("get-size" "set-size" "0" "Point" "new" "set-position" "content" "when")}
        {Lisp-Entry "invalidate-caption" method #f 111 26 111 44 ()}
        {Lisp-Entry "get-host" method #f 120 20 120 28 ("self")}
        {Lisp-Entry "install-guest" method #f 129 11 129 24 ("install-tools" "install-in-host" "set-visible?" "get-size" "set-size" "0" "Point" "set-position" "self" "guest" "set-parent")}
        {Lisp-Entry "uninstall-guest" method #f 138 11 138 26 ("close" "self" "guest" "uninstall-from-host")}
        {Lisp-Entry "focus-host" method #f 148 20 148 30 ("else" "focus-default" "guest" "acquire-focus" "cond" "get-focused" "focused" "let")}
        {Lisp-Entry "activate-focus" method #f 158 26 158 40 ("host-activate" "get-guest-actions" "get-application" "set-guest-actions" "guest" "when")}
        {Lisp-Entry "deactivate-focus" method #f 164 26 164 42 ("host-deactivate" "guest" "when" "get-application" "set-guest-actions")}
        {Lisp-Entry "install-tools" method #f 175 29 175 42 ("layout-view")}}}})
"Hyperlink-Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Hyperlink-Style.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Hyperlink-Style" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Hyperlink-Style" class #f 43 7 43 22 ("attributes" "Text-Style")
        {Lisp-Entry "anchor" definition #f 47 5 47 11 ()}
        {Lisp-Entry "get-anchor" accessor #f 47 5 47 11 ()}
        {Lisp-Entry "set-anchor" accessor #f 47 5 47 11 ()}
        {Lisp-Entry "action" definition #f 48 5 48 11 ()}
        {Lisp-Entry "get-action" accessor #f 48 5 48 11 ()}
        {Lisp-Entry "set-action" accessor #f 48 5 48 11 ()}}}})
"Image-Browser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "image" "Image-Browser.jazz"} 1289844324
    {Lisp-Entry "jazz.ui.image.Image-Browser" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Image-Browser" class #f 48 20 48 33 ("toplevel-controls?:" "419" "width:" "title:" "tree" "header" "content" "vscroll?:" "hscroll?:" "document" "style:" "scroller" "on-select-directory" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "select" "tools" "name:" "fill" "layout-type:" "initialize" "Layout-View")
        {Lisp-Entry "directory" slot #f 51 8 51 17 ()}
        {Lisp-Entry "external-name" method #f 66 25 66 38 ("images-browser" "'images-browser" "rest")}
        {Lisp-Entry "on-select-directory" method #f 70 11 70 30 ("update-images" "choose-directory" "directory" "set!" "evt")}
        {Lisp-Entry "update-images" method #f 75 11 75 24 ("recursive?:" "directories?:" "files?:" "load-image" "image-file?" "when" "file" "directory" "iterate-directory" "lambda" "with-update-locked" "get-tree" "tree" "let")}
        {Lisp-Entry "image-file?" definition #f 88 15 88 26 ("ci=?" "test:" "get-extension" "member?" "file")}
        {Lisp-Entry "load-image" definition #f 93 15 93 25 ("image:" "title:" "Tree-Node" "list" "children:" "add-row" "Resource" "new" "image" "get-base" "name" "let*" "file" "tree")}
        {Lisp-Entry "host-icon" method #f 104 25 104 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 108 25 108 35 ()}
        {Lisp-Entry "get-tools-view" method #f 117 20 117 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 121 20 121 33 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" method #f 131 11 131 19 ("tree" "'tree" "locate")}
        {Lisp-Entry "install" method #f 140 20 140 27 ("header" "'header" "locate" "set-shown?" "nextmethod" "rest")}}}})
"Image-Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Image-Style.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Image-Style" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Image-Style" class #f 44 7 44 18 ("1.0" "Image" "new" "initialize" "Style")
        {Lisp-Entry "properties" definition #f 47 14 47 24 ("scaling:" "scaled?:" "resource:" "portfolio:" "moniker:" "alignment:")}
        {Lisp-Entry "image" slot #f 56 8 56 13 ()}
        {Lisp-Entry "get-image" accessor #f 56 46 56 54 ()}
        {Lisp-Entry "scaled?" slot #f 57 8 57 15 ()}
        {Lisp-Entry "scaling" slot #f 58 8 58 15 ()}
        {Lisp-Entry "get-value" method #f 61 20 61 29 ("nextmethod" "else" "get-scaling" "scaling:" "get-scaled?" "scaled?:" "get-resource" "resource:" "get-portfolio" "portfolio:" "image" "get-moniker" "moniker:" "case" "property")}
        {Lisp-Entry "set-value" method #f 71 20 71 29 ("nextmethod" "else" "set-scaling" "scaling:" "set-scaled?" "scaled?:" "set-resource" "resource:" "set-portfolio" "portfolio:" "image" "set-moniker" "moniker:" "case" "value" "property")}
        {Lisp-Entry "get-width" method #f 86 20 86 29 ("image" "get-width")}
        {Lisp-Entry "get-height" method #f 90 20 90 30 ("image" "get-height")}
        {Lisp-Entry "run-width" method #f 94 20 94 29 ("get-width" "run")}
        {Lisp-Entry "propagate?" method #f 103 20 103 30 ()}
        {Lisp-Entry "wrap" method #f 112 20 112 24 ("get-width" "+" "run" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "draw-style" method #f 122 20 122 30 ("+" "image" "draw" "justify-element" "top" "get-height" "height" "get-width" "width" "let*" "enabled?" "left" "tabs" "line-height" "v" "h" "string" "context" "surface")}}}})
"Image-Tool"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Image-Tool.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Image-Tool" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Image-Tool" class #f 45 7 45 17 ("2" "Point" "view-position:" "Image" "new" "explicit" "initialize" "Tool-Button")
        {Lisp-Entry "portfolio" property #f 48 12 48 21 ()}
        {Lisp-Entry "resource" property #f 49 12 49 20 ()}
        {Lisp-Entry "disabled-resource" property #f 50 12 50 29 ()}
        {Lisp-Entry "image" slot #f 53 8 53 13 ()}
        {Lisp-Entry "disabled-image" slot #f 54 8 54 22 ()}
        {Lisp-Entry "set-background" method #f 62 20 62 34 ("invalidate-view" "disabled-image" "image" "set-background" "background" "set!" "color")}
        {Lisp-Entry "get-portfolio" method #f 69 18 69 31 ("image" "get-portfolio")}
        {Lisp-Entry "set-portfolio" method #f 73 18 73 31 ("invalidate-view" "disabled-image" "image" "set-portfolio" "child" "Portfolio" "is?" "if" "let" "portfolio")}
        {Lisp-Entry "get-resource" method #f 80 18 80 30 ("image" "get-resource")}
        {Lisp-Entry "set-resource" method #f 84 18 84 30 ("invalidate-view" "image" "set-resource" "default-disabled-resource" "set-disabled-resource" "get-disabled-resource" "not" "when" "name")}
        {Lisp-Entry "get-disabled-resource" method #f 91 18 91 39 ("disabled-image" "get-resource")}
        {Lisp-Entry "set-disabled-resource" method #f 95 18 95 39 ("invalidate-view" "disabled-image" "set-resource" "name")}
        {Lisp-Entry "draw-tool" method #f 105 20 105 29 ("draw-image" "1" "2" "pushed" "'pushed" "get-state" "eq?" "if" "offset" "let" "context" "surface")}
        {Lisp-Entry "draw-image" method #f 110 21 110 31 ("disabled-image" "image" "view-enabled?" "if" "draw" "v" "h" "context" "surface")}
        {Lisp-Entry "get-class-descriptor" method #f 124 25 124 45 ("Image-Tool-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 133 11 133 17 ()
        {Lisp-Entry "Image-Tool-Descriptor" class #f 139 7 139 28 ("disabled-resource" "resource" "domain" "title:" "portfolio" "name:" "Layout-View-Descriptor")}}}})
"Image-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "image" "Image-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.image.Image-View" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Image-View" class #f 48 20 48 30 ("Image" "new" "0" "Point" "explicit" "initialize" "Document" "View")
        {Lisp-Entry "portfolio" property #f 51 12 51 21 ()}
        {Lisp-Entry "resource" property #f 52 12 52 20 ()}
        {Lisp-Entry "moniker" property #f 53 12 53 19 ()}
        {Lisp-Entry "view-position" property #f 54 12 54 25 ()}
        {Lisp-Entry "view-size" property #f 55 12 55 21 ()}
        {Lisp-Entry "mode" property #f 56 12 56 16 ()}
        {Lisp-Entry "image" slot #f 59 8 59 13 ()}
        {Lisp-Entry "get-image" accessor #f 59 52 59 60 ()}
        {Lisp-Entry "dragging?" slot #f 60 8 60 17 ()}
        {Lisp-Entry "base-position" slot #f 61 8 61 21 ()}
        {Lisp-Entry "controller" slot #f 62 8 62 18 ()}
        {Lisp-Entry "save-content" method #f 65 20 65 32 ("moniker")}
        {Lisp-Entry "default-extension" method #f 66 20 66 37 ()}
        {Lisp-Entry "extensions" method #f 67 20 67 30 ()}
        {Lisp-Entry "focus-document" method #f 68 20 68 34 ()}
        {Lisp-Entry "current-history-item" method #f 69 20 69 40 ()}
        {Lisp-Entry "compare-moniker" method #f 70 20 70 35 ("moniker")}
        {Lisp-Entry "external-name" method #f 73 25 73 38 ("image-view" "'image-view" "rest")}
        {Lisp-Entry "destroy" method #f 77 20 77 27 ("nextmethod" "image" "close" "controller" "when")}
        {Lisp-Entry "install-in-host" method #f 89 20 89 35 ("centered" "'centered" "set-mode" "set-view-size" "set-size" "get-size" "size" "let" "nextmethod" "host")}
        {Lisp-Entry "size-change" method #f 97 20 97 31 ("invalidate-view" "set-view-size" "nextmethod" "size")}
        {Lisp-Entry "host-workspaces" method #f 103 20 103 35 ("image")}
        {Lisp-Entry "get-controller" method #f 112 20 112 34 ("new-controller" "set!" "controller" "unless")}
        {Lisp-Entry "new-controller" method #f 118 20 118 34 ("self" "Document-Controller" "new")}
        {Lisp-Entry "install-scroller?" method #f 122 20 122 37 ()}
        {Lisp-Entry "get-moniker" method #f 126 11 126 22 ("get-controller" "get-moniker")}
        {Lisp-Entry "set-moniker" method #f 130 11 130 22 ("get-controller" "image" "set-moniker" "moniker")}
        {Lisp-Entry "load-content" method #f 135 20 135 32 ("invalidate-view" "image" "set-moniker" "moniker")}
        {Lisp-Entry "verify-reload" method #f 140 20 140 33 ()}
        {Lisp-Entry "reload-moniker" method #f 144 20 144 34 ("moniker")}
        {Lisp-Entry "get-modified?" method #f 148 20 148 33 ("get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 152 20 152 33 ("get-controller" "set-modified?" "state")}
        {Lisp-Entry "update-status" method #f 156 11 156 24 ("get-controller" "update-status")}
        {Lisp-Entry "update-moniker-time" method #f 160 11 160 30 ("get-controller" "update-moniker-time" "moniker")}
        {Lisp-Entry "tool-update" method #f 164 20 164 31 ("tool?")}
        {Lisp-Entry "console-update" method #f 168 20 168 34 ("console?")}
        {Lisp-Entry "draw" method #f 177 20 177 24 ("get-rect" "fill-rect" "0.85" "set-alpha" "Medium" "name:" "Color" "copy-object" "background" "or" "color" "let" "view-enabled?" "unless" "0" "draw-at" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-at" method #f 185 29 185 36 ("draw-image" "v" "h" "context" "surface")}
        {Lisp-Entry "draw-image" method #f 189 11 189 21 ("image" "draw" "v" "h" "context" "surface")}
        {Lisp-Entry "mouse-down" method #f 198 20 198 30 ("acquire-capture" "base-position" "dragging?" "set!" "scroller" "when" "pos")}
        {Lisp-Entry "drag-move" method #f 205 20 205 29 ("get-v" "get-h" "move-figure" "base-position" "-" "delta" "let" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" method #f 211 20 211 27 ("set!" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "get-portfolio" method #f 222 18 222 31 ("image" "get-portfolio")}
        {Lisp-Entry "set-portfolio" method #f 226 18 226 31 ("invalidate-view" "child" "Portfolio" "is?" "if" "image" "set-portfolio" "pf")}
        {Lisp-Entry "get-resource" method #f 231 18 231 30 ("image" "get-resource")}
        {Lisp-Entry "set-resource" method #f 235 18 235 30 ("invalidate-view" "image" "set-resource" "name")}
        {Lisp-Entry "get-view-position" method #f 240 18 240 35 ("image" "get-view-position")}
        {Lisp-Entry "set-view-position" method #f 244 18 244 35 ("invalidate-view" "image" "set-view-position" "pos")}
        {Lisp-Entry "get-view-size" method #f 249 18 249 31 ("image" "get-view-size")}
        {Lisp-Entry "set-view-size" method #f 253 18 253 31 ("invalidate-view" "image" "set-view-size" "s")}
        {Lisp-Entry "get-mode" method #f 258 18 258 26 ("mode")}
        {Lisp-Entry "set-mode" method #f 262 18 262 26 ("invalidate-view" "image" "set-mode" "md")}
        {Lisp-Entry "set-handle" method #f 267 18 267 28 ("invalidate-view" "image" "set-handle" "handle")}
        {Lisp-Entry "cursor-update" method #f 277 20 277 33 (":arrow" ":finger" "scroller" "if" "set-cursor" "pos")}
        {Lisp-Entry "get-context-menu" method #f 281 20 281 36 ("Image-Menu" "new")}
        {Lisp-Entry "on-change-mode" method #f 285 11 285 25 ("invalidate-view" "get-sender" "get-name" "image" "set-mode" "evt")}
        {Lisp-Entry "save-session" method #f 295 20 295 32 ("Opened-Windows" "'Opened-Windows" "properties" "push-property" "get-size" "size:" "get-position" "position:" "get-moniker" "moniker:" "external-name" "list" "info" "get-host" "host" "let*")}
        {Lisp-Entry "get-class-descriptor" method #f 311 25 311 45 ("Image-View-Descriptor" "new")}}
      {Lisp-Entry "Image-Menu" class #f 320 7 320 17 ("stretched" "filled" "tiled" "on-change-mode" ":focus" "Event-Handler" "action-handler:" "title:" "centered" "name:" "Context-Menu")}
      {Lisp-Entry "design" submodule #f 336 11 336 17 ()
        {Lisp-Entry "Image-View-Descriptor" class #f 342 7 342 28 ("mode" "view-size" "view-position" "moniker" "resource" "domain" "title:" "portfolio" "name:" "View-Descriptor")}}}})
"Info-Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Info-Style.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Info-Style" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Info-Style" class #f 46 7 46 17 ("attributes" "Text-Style")
        {Lisp-Entry "what" definition #f 50 5 50 9 ()}
        {Lisp-Entry "get-what" accessor #f 50 5 50 9 ()}
        {Lisp-Entry "set-what" accessor #f 50 5 50 9 ()}
        {Lisp-Entry "get-width" method #f 58 20 58 29 ("16")}
        {Lisp-Entry "propagate?" method #f 67 20 67 30 ()}
        {Lisp-Entry "scan" method #f 76 20 76 24 ("default-scan" "proc" "run" "tabs" "end" "start" "h")}
        {Lisp-Entry "wrap" method #f 85 20 85 24 ("+" "get-width" "info-value" "->string" "font" "text-width" ":printing?" "getf" "if" "get-context-width" "define" "run" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "info-icon" method #f 100 11 100 20 ("time" "date" "count" "no" "Image-Resource" "filename" "what" "case")}
        {Lisp-Entry "info-value" method #f 109 11 109 21 ("print-time:" "time" "print-date:" "date" "page-count:" "count" "page-no:" "1" "+" "no" "filename:" "getf" "filename" "what" "case" "context")}
        {Lisp-Entry "draw-style" method #f 123 20 123 30 ("+" "get-application" "get-images-portfolio" "draw-image" "info-icon" "icon" "16" "justify-element" "top" "get-width" "width" "let" "info-value" "->string" "nextmethod" "printing?:" "getf" "if" "enabled?" "left" "tabs" "line-height" "v" "h" "string" "context" "surface")}}}})
"Interface-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Interface-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Interface-Preferences" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Interface-Preferences" class #f 44 20 44 41 ("print" "tree" "fonts" "name:" "title:" "Preferences")
        {Lisp-Entry "get-class-descriptor" method #f 59 25 59 45 ("Interface-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 68 11 68 17 ()
        {Lisp-Entry "Interface-Preferences-Descriptor" class #f 74 7 74 39 ("categorized:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")}}}})
"Internal-Frame-Host"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "hosting" "Internal-Frame-Host.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.hosting.Internal-Frame-Host" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Internal-Frame-Host" class #f 53 20 53 39 ("on-close" "close" "on-maximize" ":form" "Event-Handler" "action-handler:" "french:" "english:" "Locales" "tooltip-text:" "tooltip?:" "type:" "maximize" "Medium" "name:" "Color" "background:" "initialize" "Frame-Host")
        {Lisp-Entry "dragging?" slot #f 56 8 56 17 ()}
        {Lisp-Entry "current-part" slot #f 57 8 57 20 ()}
        {Lisp-Entry "start-mouse" slot #f 58 8 58 19 ()}
        {Lisp-Entry "start-position" slot #f 59 8 59 22 ()}
        {Lisp-Entry "start-size" slot #f 60 8 60 18 ()}
        {Lisp-Entry "preserved-position" slot #f 61 8 61 26 ()}
        {Lisp-Entry "get-preserved-position" accessor #f 61 49 61 57 ()}
        {Lisp-Entry "preserved-size" slot #f 62 8 62 22 ()}
        {Lisp-Entry "get-preserved-size" accessor #f 62 49 62 57 ()}
        {Lisp-Entry "workspace" slot #f 63 8 63 17 ()}
        {Lisp-Entry "get-workspace" accessor #f 63 52 63 60 ()}
        {Lisp-Entry "set-workspace" accessor #f 63 52 63 60 ()}
        {Lisp-Entry "workspace-stages" slot #f 64 8 64 24 ()}
        {Lisp-Entry "get-workspace-stages" accessor #f 64 52 64 60 ()}
        {Lisp-Entry "set-workspace-stages" accessor #f 64 52 64 60 ()}
        {Lisp-Entry "maximized?" slot #f 65 8 65 18 ()}
        {Lisp-Entry "get-stage" method #f 79 11 79 20 ("get-parent")}
        {Lisp-Entry "get-maximized?" method #f 83 18 83 32 ("maximized?")}
        {Lisp-Entry "set-maximized?" method #f 87 18 87 32 ("restore" "maximize" "if" "value")}
        {Lisp-Entry "size-change" method #f 98 20 98 31 ("4" "Rect" "insets:" "invalidate-border" "invalidate-caption" "nextmethod" "size")}
        {Lisp-Entry "on-maximize" method #f 104 29 104 40 ("get-stage" "maximize" "evt")}
        {Lisp-Entry "on-close" method #f 108 29 108 37 ("close-host" "evt")}
        {Lisp-Entry "activate-frame" method #f 117 20 117 34 ("get-title" "get-stage" "get-maximized?" "and" "get-toplevel" "set-caption" "nextmethod")}
        {Lisp-Entry "deactivate-frame" method #f 122 20 122 36 ("acquire-focus" "stage-empty-activate" "get-player" "get-views" "null?" "and" "when" "get-stage" "stage" "let" "nextmethod")}
        {Lisp-Entry "close-host" method #f 135 20 135 30 ("close" "close-with-confirm" "if" "confirm?" "confirm?:")}
        {Lisp-Entry "destroy" method #f 146 20 146 27 ("focus-host" "activate-frame" "deactivate-frame" "nextmethod" "new-active" "active-frame" "self" "was-active?" "player" "get-player" "eq?" "and" "when" "second-frame" "frame" "let" "determine-new-active" "define")}
        {Lisp-Entry "set-title" method #f 167 20 167 29 ("get-toplevel" "set-caption" "get-stage" "get-maximized?" "active-frame" "self" "eq?" "and" "when" "nextmethod" "value")}
        {Lisp-Entry "show" method #f 178 20 178 24 ("maximize/restore" "nextmethod")}
        {Lisp-Entry "maximize/restore" method #f 183 21 183 37 ("restore" "else" "guest" "get-size" "maximize-bounds" "maximize" "get-maximized?" "cond" "get-stage" "stage" "let")}
        {Lisp-Entry "select-workspace" method #f 199 18 199 34 ("restore-focus?:" "apply-preferences" "car" "find-workspace" "memq?" "not" "not-null?" "and" "effective-host-workspaces" "else" "list" "workspace" "cond" "workspaces" "get-name" "current" "get-workspace-preferences" "pref" "let" "guest" "when")}
        {Lisp-Entry "ensure-displayed" method #f 215 18 215 34 ("set-position" "set-size" "8" "padding:" "fit-within" "new-size" "new-position" "receive" "get-rect" "rect" "parent" "get-size" "outer" "let")}
        {Lisp-Entry "remember-workspace-stage" method #f 223 18 223 42 ("get-active-stages" "difference" "get-stage" "cons" "workspace-stages" "set!")}
        {Lisp-Entry "get-effective-position" method #f 232 20 232 42 ("get-position" "get-preserved-position" "get-maximized?" "if")}
        {Lisp-Entry "get-effective-size" method #f 238 20 238 38 ("get-size" "get-preserved-size" "get-maximized?" "if")}
        {Lisp-Entry "dispatch-mouse-copy" method #f 249 11 249 30 ("mouse-position" "mouse-copy" "and" "when" "get-focus" "dest" "mouse-view" "view" "let")}
        {Lisp-Entry "caption-rect" method #f 261 11 261 23 ("20" "+" "get-width" "-" "Rect" "new" "4" "0" "maximized?" "if" "border" "let")}
        {Lisp-Entry "maximize-rect" method #f 266 29 266 42 ("17" "21" "3" "+" "37" "-" "Rect" "new" "right" "top")}
        {Lisp-Entry "close-rect" method #f 270 29 270 39 ("17" "3" "+" "19" "-" "Rect" "new" "right" "top")}
        {Lisp-Entry "mouse-activate?" method #f 279 20 279 35 ()}
        {Lisp-Entry "mouse-activate" method #f 283 20 283 34 ("nextmethod" "bring-to-front")}
        {Lisp-Entry "activate-focus" method #f 288 20 288 34 ("set-current-stage" "in-player?" "when" "get-stage" "stage" "let" "invalidate-caption" "nextmethod")}
        {Lisp-Entry "deactivate-focus" method #f 296 20 296 36 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "maximize" method #f 306 20 306 28 ("update-buttons" "get-size" "preserved-size" "get-position" "preserved-position" "set!" "maximized?" "unless")}
        {Lisp-Entry "maximize-bounds" method #f 314 18 314 33 ("invalidate-view" "layout-view" "set-size" "0" "Point" "set-position" "size")}
        {Lisp-Entry "restore" method #f 321 20 321 27 ("invalidate-view" "layout-view" "update-buttons" "maximized?" "set!" "set-size" "preserved-size" "set-position" "preserved-position" "when")}
        {Lisp-Entry "layout" method #f 339 20 339 26 ("get-height" "get-width" "-" "Dimension" "set-size" "+" "Point" "new" "set-position" "content" "when" "layout-buttons" "rect-height" "caption-height" "caption-rect" "0" "4" "if" "border" "caption-visible?" "caption?" "let*")}
        {Lisp-Entry "layout-buttons" method #f 350 29 350 43 ("close-rect" "close" "'close" "maximize-rect" "maximize" "'maximize" "locate" "set-rect" "get-right" "-" "right" "get-bounds" "bounds" "top" "buttons-border" "border" "let*")}
        {Lisp-Entry "buttons-border" method #f 359 29 359 43 ("0" "4" "caption-visible?" "if")}
        {Lisp-Entry "invalidate-caption" method #f 368 20 368 38 ("caption-rect" "invalidate-rect")}
        {Lisp-Entry "update-buttons" method #f 372 29 372 43 ("close" "'close" "maximize" "'maximize" "locate" "set-visible?" "caption-visible?" "visible?" "let")}
        {Lisp-Entry "caption-icon" method #f 383 11 383 23 ("guest" "guest-icon")}
        {Lisp-Entry "caption-title" method #f 387 11 387 24 ("get-title")}
        {Lisp-Entry "caption-font" method #f 391 11 391 23 ("Caption" "name:" "Font")}
        {Lisp-Entry "caption-focused?" method #f 395 11 395 27 ("get-focused-host" "self" "eq?")}
        {Lisp-Entry "caption-visible?" method #f 399 11 399 27 ("maximized?" "not")}
        {Lisp-Entry "container-focusable?" method #f 408 20 408 40 ("get-visible?")}
        {Lisp-Entry "ensure-container-focusable" method #f 412 20 412 46 ("bring-to-front" "set-visible?" "select-workspace")}
        {Lisp-Entry "cursor-update" method #f 423 20 423 33 ("get-resize-cursor" "full?:" "get-size" "find-resize-part" "maximized?" "and" "part" "let" ":arrow" "set-cursor" "resizeable?" "not" "if" "pos")}
        {Lisp-Entry "moveable?" method #f 437 29 437 38 ()}
        {Lisp-Entry "resizeable?" method #f 441 29 441 40 ()}
        {Lisp-Entry "mouse-down" method #f 445 20 445 30 ("acquire-capture" "start-size" "get-position" "start-position" "to-desktop" "start-mouse" "resizeable?" "current-part" "dragging?" "set!" "or" "full?:" "get-size" "find-resize-part" "part" "moveable?" "when" "send-to-back" "control-down?" "and" "if" "caption-rect" "in-rect?" "in-caption?" "let" "pos")}
        {Lisp-Entry "drag-move" method #f 460 20 460 29 ("set-size" "set-position" "get-height" "get-width" "max" "effective-size" "min" "Point" "effective-position" "new-size" "Dimension" "new" "start-size" "max-position" "dheight" "dwidth" "lambda" "resize-client" "player" "update-window" "get-parent" "scroll-view" "set-position-noupdate" "get-rect" "rect" "get-position" "nu-" "delta-position" "start-position" "nu+" "new-position" "let" "current-part" "not" "if" "get-v" "dv" "get-h" "dh" "start-mouse" "point-" "delta" "to-desktop" "desktop-pos" "guest" "host-minimal-size" "minimal" "let*" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" method #f 490 20 490 27 ("set!" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "double-click" method #f 496 20 496 32 ("toggle-maximized" "caption-rect" "in-rect?" "close-host" "in-close-rect?" "cond" "pos")}
        {Lisp-Entry "in-close-rect?" method #f 505 15 505 29 ("22" "6" "Rect" "in-rect?" "pos")}
        {Lisp-Entry "in-close-rect?" method #f 508 15 508 29 ("pos")}
        {Lisp-Entry "toggle-maximized" method #f 512 29 512 45 ("get-stage" "toggle-maximized")}
        {Lisp-Entry "Active-Colors" definition #f 521 14 521 27 ("255" "113" "28" "227" "blue:" "84" "green:" "0" "red:" "Color" "list")}
        {Lisp-Entry "Inactive-Colors" definition #f 524 14 524 29 ("235" "185" "157" "223" "blue:" "150" "green:" "122" "red:" "Color" "list")}
        {Lisp-Entry "draw" method #f 528 20 528 24 ("draw-caption" "caption-visible?" "rectangle" "'rectangle" "edges:" "outer:" "raised" "'raised" "inner:" "draw-edge" "get-bounds" "bounds" "let" "maximized?" "not" "when" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-caption" method #f 536 11 536 23 ("draw-text" "title-offset" "White" "set-text-color" "set-font" "get-v" "get-top" "get-h" "get-left" "+" "get-application" "get-images-portfolio" "draw-image" "icon-offset" "offset" "when" "vertical" "'vertical" "direction:" "0" "list" "gradient-fill" "24" "3" "-" "line" "1" "set-line-width" "Light" "name:" "Color" "set-color" "get-height" "height" "get-width" "width" "second" "end" "first" "start" "Inactive-Colors" "Active-Colors" "if" "colors" "caption-focused?" "focused?" "caption-font" "font" "caption-title" "title" "caption-icon" "icon" "let*" "caption-rect" "rect" "let" "context" "surface")}
        {Lisp-Entry "icon-offset" method #f 561 29 561 40 ("2" "Point")}
        {Lisp-Entry "title-offset" method #f 565 29 565 41 ("3" "22" "Point")}}}})
"Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Item.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Item" module #f 37 18 37 35 ("jazz")
      {Lisp-Entry "Item" class #f 43 7 43 11 ("0" "initialize" "View")
        {Lisp-Entry "prefix-width" slot #f 46 8 46 20 ()}
        {Lisp-Entry "set-prefix-width" accessor #f 46 43 46 51 ()}
        {Lisp-Entry "icon-width" slot #f 47 8 47 18 ()}
        {Lisp-Entry "set-icon-width" accessor #f 47 43 47 51 ()}
        {Lisp-Entry "body-width" slot #f 48 8 48 18 ()}
        {Lisp-Entry "set-body-width" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "shortcut-width" slot #f 49 8 49 22 ()}
        {Lisp-Entry "set-shortcut-width" accessor #f 49 43 49 51 ()}
        {Lisp-Entry "arrow-width" slot #f 50 8 50 19 ()}
        {Lisp-Entry "set-arrow-width" accessor #f 50 43 50 51 ()}
        {Lisp-Entry "in?" slot #f 51 8 51 11 ()}
        {Lisp-Entry "actionable-reachable?" method #f 59 20 59 41 ("actionable-reachable?" "get-item" "owner-item" "Menubar" "is?" "or" "get-parent" "menu" "let" "get-visible?" "and")}
        {Lisp-Entry "get-menubar" method #f 72 11 72 22 ("Menubar" "find-ascendant")}
        {Lisp-Entry "preferred-prefix-width" method #f 81 26 81 48 ("0")}
        {Lisp-Entry "preferred-icon-width" method #f 85 26 85 46 ("0")}
        {Lisp-Entry "preferred-body-width" method #f 89 26 89 46 ("0")}
        {Lisp-Entry "preferred-shortcut-width" method #f 93 26 93 50 ("0")}
        {Lisp-Entry "preferred-arrow-width" method #f 97 26 97 47 ("0")}
        {Lisp-Entry "layout-menu" method #f 101 21 101 32 ("layout-menu" "Menu" "parent" "is?" "when")}
        {Lisp-Entry "mouse-enter" method #f 111 20 111 31 ("invalidate-view" "when" "popup-initiator" "initiator" "let" "redraw-view" "in?" "set!")}
        {Lisp-Entry "mouse-leave" method #f 119 20 119 31 ("redraw-view" "in?" "set!")}
        {Lisp-Entry "poped?" method #f 129 21 129 27 ("self" "popup-initiator" "eq?" "and" "parent" "get-poped" "poped" "let")}
        {Lisp-Entry "close-other-popups" method #f 134 21 134 39 ("list" "exclude:" "close-popups" "poped?" "if" "get-player" "self" "popup-initiator" "eq?" "and" "when" "parent" "get-poped" "poped" "let" "poped-tool" "define")}}}})
"Jazz-Skin"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Jazz-Skin.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Jazz-Skin" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Jazz-Skin" class #f 45 7 45 16 ("statusbar" "menubar" "toolbar" "stage" "White" "frame-color:" "inactive-background:" "active-background:" "docked" "splitter" "tool" "109" "129" "133" "disabled-text-color:" "Orange" "Light-Orange" "vertical" "highlight:" "190" "146" "112" "218" "blue:" "192" "green:" "173" "red:" "Color" "horizontal" "Gradient" "background:" "menu" "name:" "title:" "Default-Skin")}}})
"Keyboard-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Keyboard-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Keyboard-Event" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Keyboard-Event" class #f 43 7 43 21 ("Event")
        {Lisp-Entry "key" slot #f 46 8 46 11 ()}
        {Lisp-Entry "get-key" accessor #f 46 19 46 27 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("key" "set!" "nextmethod" "k" "sender" "kind")}
        {Lisp-Entry "print" method #f 54 20 54 25 ("key" "kind" "self" "class-of" "category-name" "format" "readably" "printer")}}}})
"Label-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Label-Item.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Label-Item" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Label-Item" class #f 49 7 49 17 ("explicit" "initialize" "Item")
        {Lisp-Entry "icon" property #f 52 12 52 16 ()}
        {Lisp-Entry "disabled-icon" property #f 53 12 53 25 ()}
        {Lisp-Entry "shortcut" property #f 54 12 54 20 ()}
        {Lisp-Entry "default?" property #f 55 12 55 20 ()}
        {Lisp-Entry "get-default?" accessor #f 55 50 55 58 ()}
        {Lisp-Entry "set-default?" accessor #f 55 50 55 58 ()}
        {Lisp-Entry "content" property #f 56 12 56 19 ()}
        {Lisp-Entry "mouse-activate?" method #f 59 20 59 35 ()}
        {Lisp-Entry "component-alias" method #f 68 20 68 35 ("nextmethod" "else" "content" "case" "name")}
        {Lisp-Entry "shortcut-update" method #f 79 20 79 35 ("get-alternate-shortcut" "get-shortcut" "or" "set-shortcut" "action-item")}
        {Lisp-Entry "add-child" method #f 89 20 89 29 ("set-content" "child")}
        {Lisp-Entry "get-content" method #f 93 18 93 29 ("content")}
        {Lisp-Entry "set-content" method #f 97 18 97 29 ("self" "set-item" "content" "set!" "menu")}
        {Lisp-Entry "get-title" method #f 107 20 107 29 ("get-title" "content" "when" "title" "or")}
        {Lisp-Entry "get-icon" method #f 113 18 113 26 ("icon")}
        {Lisp-Entry "set-icon" method #f 117 18 117 26 ("layout-menu" "icon" "set!" "icn")}
        {Lisp-Entry "get-disabled-icon" method #f 122 18 122 35 ("disabled-icon")}
        {Lisp-Entry "set-disabled-icon" method #f 126 18 126 35 ("layout-menu" "disabled-icon" "set!" "icn")}
        {Lisp-Entry "get-shortcut" method #f 131 18 131 30 ("shortcut")}
        {Lisp-Entry "set-shortcut" method #f 135 18 135 30 ("layout-menu" "shortcut" "set!" "shc")}
        {Lisp-Entry "default-size" method #f 145 20 145 32 ("17" "100" "Dimension")}
        {Lisp-Entry "preferred-icon-width" method #f 149 20 149 40 ("0" "16" "+" "icon" "if" "4" "left" "let")}
        {Lisp-Entry "preferred-body-width" method #f 154 20 154 40 ("get-width" "+" "10" "6" "menubar-label?" "if" "left" "text-extent" "extent" "get-title" "localize" "title" "effective-font" "font" "let*")}
        {Lisp-Entry "preferred-shortcut-width" method #f 162 20 162 44 ("get-width" "+" "12" "right" "6" "left" "present-shortcut" "text-extent" "extent" "effective-font" "font" "let*" "0" "shortcut" "not" "if")}
        {Lisp-Entry "preferred-arrow-width" method #f 172 20 172 41 ("0" "10" "menubar-label?" "not" "content" "and" "if")}
        {Lisp-Entry "preferred-height" method #f 178 20 178 36 ("4" "+" "font-height" "height" "get-title" "localize" "title" "effective-font" "font" "let*")}
        {Lisp-Entry "Label-Font" definition #f 190 14 190 24 ("Label" "name:" "Font")}
        {Lisp-Entry "Default-Label-Font" definition #f 193 14 193 32 ()}
        {Lisp-Entry "get-label-font" definition #f 197 15 197 29 ("Label-Font")}
        {Lisp-Entry "get-default-label-font" definition #f 200 15 200 37 ("Label-Font" "toggle-bold" "set!" "Default-Label-Font" "unless")}
        {Lisp-Entry "effective-font" method #f 206 20 206 34 ("get-label-font" "get-default-label-font" "default?" "if")}
        {Lisp-Entry "draw-background" method #f 210 20 210 35 ("get-bounds" "fill-background" "menubar" "'menubar" "find-look" "get-highlight" "highlight" "let" "item-selected?" "when" "context" "surface")}
        {Lisp-Entry "draw" method #f 217 20 217 24 ("draw-arrow" "draw-shortcut" "draw-body" "draw-icon" "draw-prefix" "draw-highlight" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-highlight" method #f 226 11 226 25 ("Focused-Selection" "name:" "Color" "or" "fill-background" "get-look" "get-highlight" "highlight" "rectangle" "'rectangle" "edges:" "sunken" "'sunken" "outer:" "raised" "'raised" "highlight-flag" "inner:" "draw-edge" "menubar-label?" "if" "get-bounds" "bounds" "let" "item-selected?" "when" "surface")}
        {Lisp-Entry "draw-prefix" method #f 235 29 235 40 ("context" "surface")}
        {Lisp-Entry "draw-icon" method #f 239 11 239 20 ("0" "draw-image" "default-disabled-resource" "or" "disabled-icon" "let" "view-enabled?" "not" "if" "get-images-portfolio" "portfolio" "9" "prefix-width" "+" "left" "get-application" "appl" "let*" "icon" "when" "context" "surface")}
        {Lisp-Entry "draw-body" method #f 250 11 250 20 ("text-enabled?" "draw-text" "effective-font" "set-font" "text-color" "set-text-color" "2" "get-height" "quotient" "-" "v" "icon-width" "prefix-width" "+" "h" "1" "0" "top" "10" "6" "menubar-label?" "if" "left" "get-font-height" "height" "let*" "when" "get-title" "localize" "title" "let" "surface")}
        {Lisp-Entry "draw-shortcut" method #f 263 11 263 24 ("text-enabled?" "draw-text" "2" "get-height" "quotient" "-" "v" "body-width" "icon-width" "prefix-width" "+" "h" "1" "top" "6" "left" "get-font-height" "height" "present-shortcut" "text" "let*" "shortcut" "when" "surface")}
        {Lisp-Entry "draw-arrow" method #f 274 11 274 21 ("right" "'right" "4" "5" "10" "-" "draw-arrow-tip" "tip-color" "set-color" "get-width" "width" "let" "menubar-label?" "not" "content" "and" "when" "surface")}
        {Lisp-Entry "item-selected?" method #f 281 11 281 25 ("get-player" "owned?" "self" "popup-initiator" "eq?" "in?" "or" "mouse-view" "view" "parent" "get-poped" "poped" "let" "surrogate" "not" "and")}
        {Lisp-Entry "menubar-label?" method #f 292 11 292 25 ("Menubar" "parent" "is?")}
        {Lisp-Entry "in-menubar?" method #f 296 11 296 22 ("Context-Menu" "parent" "is-not?")}
        {Lisp-Entry "highlight-flag" method #f 300 11 300 25 ("parent" "get-poped" "eq?" "content" "and")}
        {Lisp-Entry "tip-color" method #f 304 11 304 20 ("Black" "White" "name:" "Color" "item-selected?" "if")}
        {Lisp-Entry "text-enabled?" method #f 308 11 308 24 ("item-selected?" "view-enabled?" "or")}
        {Lisp-Entry "text-color" method #f 312 11 312 21 ("Black" "get-text-color" "else" "White" "get-selected-text-color" "menubar-label?" "item-selected?" "and" "Dark" "name:" "Color" "get-disabled-text-color" "or" "view-enabled?" "not" "cond" "get-look" "look" "let")}
        {Lisp-Entry "get-look" method #f 324 20 324 28 ("menu" "'menu" "find-look")}
        {Lisp-Entry "mouse-enter" method #f 333 20 333 31 ("popup-content" "poped?" "close-other-popups" "if" "content" "popup-initiator" "invalidate-view" "track-hovering" "parent" "get-poped" "poped" "let" "unless" "nextmethod" "Label-Item" "mouse-down-view" "is?" "mouse-down?" "menubar-label?" "not" "or" "view-enabled?" "and" "when")}
        {Lisp-Entry "mouse-leave" method #f 350 20 350 31 ("cancel-hovering" "menubar-label?" "not" "when" "nextmethod")}
        {Lisp-Entry "mouse-hover" method #f 356 20 356 31 ("popup-content" "surrogate" "not" "content" "and" "when" "close-other-popups" "pos")}
        {Lisp-Entry "mouse-down" method #f 362 20 362 30 ("popup-content" "neq?" "not" "or" "content" "and" "when" "list" "if" "exclude:" "close-popups" "menubar-label?" "menubar?" "parent" "get-poped" "poped" "let" "pos")}
        {Lisp-Entry "mouse-up" method #f 370 20 370 28 ("self" "process-action" "view-enabled?" "all?:" "player" "close-popups" "content" "not" "in?" "and" "when" "pos")}
        {Lisp-Entry "popup-content" method #f 382 11 382 24 ("invalidate-view" "parent" "set-poped" "3" "get-width" "-" "get-height" "0" "menubar-label?" "if" "get-size" "size" "let*" "get-children" "when" "update" "get-content" "content" "let" "-2" "2" "Point" "new" "alternate-position:" "detach-root" "'detach-root" "close-behavior:" "3.0" "fade-speed:" "Menu-Transient" "class:" "popup" "position" "menu" "popup-menu" "define")}
        {Lisp-Entry "close-popups" method #f 396 20 396 32 ("invalidate-view" "nextmethod" "double-click" "mouse-down" "memq?" "unless" "exclude" "exclude:" "all?" "all?:" "event" "event:")}
        {Lisp-Entry "popup-destroy" method #f 402 20 402 33 ("parent" "set-poped" "popup")}
        {Lisp-Entry "get-class-descriptor" method #f 411 25 411 45 ("Label-Item-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 420 11 420 17 ()
        {Lisp-Entry "Label-Item-Descriptor" class #f 426 7 426 28 ("content" "default?" "shortcut" "disabled-icon" "title:" "icon" "name:" "View-Descriptor")}}}})
"Label-Tool"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Label-Tool.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Label-Tool" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Label-Tool" class #f 46 7 46 17 ("Black" "name:" "Color" "explicit" "center" "'center" "initialize" "Tool-Button")
        {Lisp-Entry "justification" property #f 49 12 49 25 ()}
        {Lisp-Entry "color" property #f 50 12 50 17 ()}
        {Lisp-Entry "default-size" method #f 53 20 53 32 ("20" "100" "Dimension")}
        {Lisp-Entry "get-justification" method #f 62 18 62 35 ("justification")}
        {Lisp-Entry "set-justification" method #f 66 18 66 35 ("invalidate-view" "justification" "set!" "value")}
        {Lisp-Entry "get-color" method #f 71 18 71 27 ("color")}
        {Lisp-Entry "set-color" method #f 75 18 75 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "draw-tool" method #f 85 20 85 29 ("view-enabled?" "get-v" "get-h" "+" "draw-text" "color" "set-text-color" "center" "'center" "justification" "list" "get-size" "get-text-extent" "lambda" "justify-lazy" "pos" "0" "1" "pushed" "'pushed" "get-state" "eq?" "if" "offset" "localize" "title" "let" "context" "surface")}}}})
"Label-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Label-View.jazz"} 1289853931
    {Lisp-Entry "jazz.ui.view.Label-View" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Label-View" class #f 50 7 50 17 ("Black" "name:" "Color" "explicit" "head" "'head" "initialize" "View")
        {Lisp-Entry "justification" property #f 53 12 53 25 ()}
        {Lisp-Entry "color" property #f 54 12 54 17 ()}
        {Lisp-Entry "shadow?" property #f 55 12 55 19 ()}
        {Lisp-Entry "default-size" method #f 58 20 58 32 ("16" "100" "Dimension")}
        {Lisp-Entry "get-justification" method #f 67 18 67 35 ("justification")}
        {Lisp-Entry "set-justification" method #f 71 18 71 35 ("invalidate-view" "justification" "set!" "value")}
        {Lisp-Entry "get-color" method #f 76 18 76 27 ("color")}
        {Lisp-Entry "set-color" method #f 80 18 80 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "get-shadow?" method #f 85 18 85 29 ("shadow?")}
        {Lisp-Entry "set-shadow?" method #f 89 18 89 29 ("invalidate-view" "shadow?" "set!" "value")}
        {Lisp-Entry "label-title" method #f 99 29 99 40 ("title")}
        {Lisp-Entry "preferred-size" method #f 108 20 108 34 ("effective-font" "text-extent" "default-size" "not" "if" "label-title" "localize" "title" "let")}
        {Lisp-Entry "cursor-update" method #f 120 20 120 33 ("nextmethod" ":finger" "set-cursor" "alt-down?" "if" "pos")}
        {Lisp-Entry "mouse-data" method #f 126 20 126 30 ("title" "pos")}
        {Lisp-Entry "draw" method #f 135 20 135 24 ("Dark" "color" "view-enabled?" "enabled?" "get-v" "2" "get-h" "+" "draw-text" "Dark-Gray" "name:" "Color" "set-text-color" "shadow?" "when" "center" "'center" "list" "justification" "pair?" "if" "get-size" "get-text-extent" "lambda" "justify-lazy" "pos" "label-title" "or" "localize" "title" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-class-descriptor" method #f 153 25 153 45 ("Label-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 162 11 162 17 ()
        {Lisp-Entry "Label-View-Descriptor" class #f 168 7 168 28 ("domain" "title:" "name:" "auto-size?" "shadow?" "justification" "font" "size" "position" "color" "background" "name-info" "class-info" "categorized:" "title" "default:" "View-Descriptor")}}}})
"Layout"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "layout" "Layout.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.layout.Layout" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Layout" class #f 44 7 44 13 ("Component")
        {Lisp-Entry "layout" method #f 47 26 47 32 ("rest" "height" "width" "figures")}}}})
"Layout-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Layout-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Layout-Text-View" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Layout-Text-View" class #f 43 20 43 36 ("Formatted-Text-View")}}})
"Layout-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Layout-View.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.view.Layout-View" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Layout-View" class #f 47 7 47 18 ("center" "'center" "0" "Rect" "explicit" "initialize" "View")
        {Lisp-Entry "layout-type" property #f 50 12 50 23 ()}
        {Lisp-Entry "layout-insets" property #f 51 12 51 25 ()}
        {Lisp-Entry "layout-justification" property #f 52 12 52 32 ()}
        {Lisp-Entry "layout-padding" property #f 53 12 53 26 ()}
        {Lisp-Entry "get-layout-type" method #f 61 18 61 33 ("layout-type")}
        {Lisp-Entry "set-layout-type" method #f 65 18 65 33 ("layout-view" "set!" "layout-type" "neq?" "when" "type")}
        {Lisp-Entry "get-layout-insets" method #f 72 18 72 35 ("layout-insets")}
        {Lisp-Entry "set-layout-insets" method #f 76 18 76 35 ("layout-view" "layout-type" "when" "layout-insets" "set!" "insets")}
        {Lisp-Entry "get-layout-justification" method #f 82 18 82 42 ("layout-justification")}
        {Lisp-Entry "set-layout-justification" method #f 86 18 86 42 ("layout-view" "layout-type" "when" "layout-justification" "set!" "just")}
        {Lisp-Entry "get-layout-padding" method #f 92 18 92 36 ("layout-padding")}
        {Lisp-Entry "set-layout-padding" method #f 96 18 96 36 ("layout-view" "layout-type" "when" "layout-padding" "set!" "pad")}
        {Lisp-Entry "inner?" method #f 107 20 107 26 ("children" "memq?" "layout-type" "and" "view")}
        {Lisp-Entry "layout" method #f 116 20 116 26 ("error" "else" "fill?:" "box" "Flow-Layout" "flow" "self" "justification:" "Snap-Layout" "snap" "layout" "layout-padding" "padding:" "insets:" "Border-Layout" "ly" "border" "nu+" "layout-justification" "get-location" "or" "justification" "rect-size" "topleft" "-" "expand-rect" "rect" "get-bounds" "bounds" "let*" "justify" "pos" "get-size" "center" "get-bottom" "get-height" "get-top" "get-right" "get-width" "get-left" "+" "Dimension" "new" "set-size-noevent" "layout-insets" "rect-position" "first-child" "fit" "children" "set-size" "set-position" "View" "is?" "when" "child" "lambda" "for-each" "fill-size" "size" "fill-position" "position" "let" "fill" "layout-type" "case")}
        {Lisp-Entry "fill-position" method #f 168 29 168 42 ("get-top" "layout-insets" "get-left" "Point" "new")}
        {Lisp-Entry "fill-size" method #f 172 29 172 38 ("get-bottom" "get-top" "get-right" "layout-insets" "get-left" "+" "Dimension" "new" "get-size" "-")}
        {Lisp-Entry "get-class-descriptor" method #f 181 25 181 45 ("Layout-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 190 11 190 17 ()
        {Lisp-Entry "Layout-View-Descriptor" class #f 196 7 196 29 ("layout-padding" "layout-justification" "layout-insets" "domain" "title:" "layout-type" "name:" "View-Descriptor")
          {Lisp-Entry "class-image" method #f 212 20 212 31 ("Image-Resource" "class")}}
        {Lisp-Entry "Type-Domain" class #f 221 7 221 18 ("Enumeration-Domain")
          {Lisp-Entry "Choices" definition #f 224 14 224 21 ("box" "flow" "snap" "border" "justify" "center" "fit" "fill")}
          {Lisp-Entry "finish" method #f 236 20 236 26 ("Choices" "set-choices" "nextmethod" "rest")}}
        {Lisp-Entry "Justification-Domain" class #f 246 7 246 27 ("Enumeration-Domain")
          {Lisp-Entry "Choices" definition #f 249 14 249 21 ("tail" "center" "head")}
          {Lisp-Entry "finish" method #f 265 20 265 26 ("Choices" "set-choices" "nextmethod" "rest")}}}}})
"Line"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Line.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Line" module #f 37 18 37 35 ("jazz")
      {Lisp-Entry "Line" class #f 44 7 44 11 ("Object")
        {Lisp-Entry "text" slot #f 47 18 47 22 ()}
        {Lisp-Entry "get-text" accessor #f 47 37 47 45 ()}
        {Lisp-Entry "runs" slot #f 48 18 48 22 ()}
        {Lisp-Entry "get-runs" accessor #f 48 37 48 45 ()}
        {Lisp-Entry "rank" slot #f 49 18 49 22 ()}
        {Lisp-Entry "get-rank" accessor #f 49 37 49 45 ()}
        {Lisp-Entry "offset" slot #f 50 18 50 24 ()}
        {Lisp-Entry "get-offset" accessor #f 50 37 50 45 ()}
        {Lisp-Entry "length" slot #f 51 18 51 24 ()}
        {Lisp-Entry "get-length" accessor #f 51 37 51 45 ()}
        {Lisp-Entry "left" slot #f 52 18 52 22 ()}
        {Lisp-Entry "get-left" accessor #f 52 37 52 45 ()}
        {Lisp-Entry "top" slot #f 53 18 53 21 ()}
        {Lisp-Entry "get-top" accessor #f 53 37 53 45 ()}
        {Lisp-Entry "width" slot #f 54 18 54 23 ()}
        {Lisp-Entry "get-width" accessor #f 54 37 54 45 ()}
        {Lisp-Entry "height" slot #f 55 18 55 24 ()}
        {Lisp-Entry "get-height" accessor #f 55 40 55 48 ()}
        {Lisp-Entry "set-height" accessor #f 55 40 55 48 ()}
        {Lisp-Entry "initialize" method #f 58 20 58 30 ("height~self" "length~self" "width~self" "top~self" "left~self" "offset~self" "rank~self" "runs~self" "text~self" "nextmethod" "max" "set!" "run-height" "height" "get-default-style" "get-height" "null?" "if" "compute-height" "get-length" "increase!" "run" "lambda" "for-each" "0" "len" "let" "compute-length" "define" "width" "top" "left" "offset" "rank" "runs" "text")}
        {Lisp-Entry "print" method #f 88 20 88 25 ("runs" "write" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-limit" method #f 99 18 99 27 ("length" "offset" "+")}
        {Lisp-Entry "get-bottom" method #f 103 18 103 28 ("height" "top" "+")}
        {Lisp-Entry "range-region" method #f 112 21 112 33 ("keep-rectangles" "acquire-delta" "Region" "region" "offset-rect" "offset" "get-bottom" "top" "Rect" "new" "rect" "let*" "not" "if" "right" "0" "or" "col->view" "get-h" "left" "let" "sc" "dv" "dh" "paragraph" "end" "start" "paragraph-width" "paragraph-top" "paragraph-left")}
        {Lisp-Entry "scan" method #f 127 21 127 25 ("runs" "1" "increase!" "set!" "continuation-return" "+" ">=" "and" "if" "right" "mid" "n" "c" "scan" "get-length" "len" "rightmost" "nmost" "run" "for-each" "return" "lambda" "continuation-capture" "text" "get-tabs" "tabs" "left" "h" "0" "b" "let" "proc" "end")}
        {Lisp-Entry "draw-line" method #f 154 21 154 30 ("runs" "increase!" "height" "draw-run" "width" "run" "lambda" "for-each" "text" "draw-enabled?" "enabled?" "left~self" "+" "let" "left" "tabs" "v" "h" "context" "surface")}
        {Lisp-Entry "view->col" method #f 168 21 168 30 ("get-length" "continuation-return" ">" "right" "mid" "left" "n" "c" "scan" "return" "lambda" "continuation-capture" "get-bottom" "<" "top" ">=" "and" "when" "get-v" "v" "get-h" "h" "let" "view")}
        {Lisp-Entry "col->view" method #f 181 21 181 30 ("runs" "not-null?" "unless" "set!" "top" "Point" "new" "continuation-return" "=" "when" "right" "mid" "left" "n" "c" "scan" "return" "lambda" "continuation-capture" "0" "rightmost" "let" "strict?" "col")}
        {Lisp-Entry "col->text" method #f 198 21 198 30 ("-" "rank" "Cell" "new" "get-limit" "<" "offset" ">=" "and" "when" "col")}}}})
"Line-Surrogate"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Line-Surrogate.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Line-Surrogate" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Line-Surrogate" class #f 44 20 44 34 ("View-Surrogate")}}})
"Line-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Line-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Line-View" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Line-View" class #f 46 20 46 29 ("solid" "'solid" "explicit" "initialize" "View")
        {Lisp-Entry "from" property #f 49 12 49 16 ()}
        {Lisp-Entry "to" property #f 50 12 50 14 ()}
        {Lisp-Entry "color" property #f 51 12 51 17 ()}
        {Lisp-Entry "style" property #f 52 12 52 17 ()}
        {Lisp-Entry "get-style" accessor #f 52 43 52 51 ()}
        {Lisp-Entry "get-from" method #f 60 18 60 26 ("from")}
        {Lisp-Entry "set-from" method #f 64 18 64 26 ("invalidate-view" "from" "set!" "value")}
        {Lisp-Entry "get-to" method #f 69 18 69 24 ("to")}
        {Lisp-Entry "set-to" method #f 73 18 73 24 ("invalidate-view" "to" "set!" "value")}
        {Lisp-Entry "get-color" method #f 78 18 78 27 ("color")}
        {Lisp-Entry "set-color" method #f 82 18 82 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "set-style" method #f 87 18 87 27 ("invalidate-view" "style" "set!" "value")}
        {Lisp-Entry "Tolerance" definition #f 97 22 97 31 ("4.0")}
        {Lisp-Entry "in-drawing?" method #f 101 20 101 31 ("Tolerance" "<" "line-distance" "distance" "let" "to" "from" "null?" "or" "nextmethod" "and" "size" "pos")}
        {Lisp-Entry "mouse-down" method #f 109 20 109 30 ("pos")}
        {Lisp-Entry "draw" method #f 118 20 118 24 ("solid" "'solid" "alternate" "'alternate" "style" "eq?" "get-v" "get-h" "line" "line-color" "set-color" "line-width" "set-line-width" "line-style" "set-style" "to" "from" "and" "when" "lv" "lh" "context" "surface")}
        {Lisp-Entry "line-style" method #f 128 29 128 39 ("style")}
        {Lisp-Entry "line-width" method #f 132 29 132 39 ("1")}
        {Lisp-Entry "line-color" method #f 136 29 136 39 ("Black" "name:" "Color" "color" "or")}
        {Lisp-Entry "get-class-descriptor" method #f 145 25 145 45 ("Line-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 154 11 154 17 ()
        {Lisp-Entry "Line-View-Descriptor" class #f 160 7 160 27 ("style" "color" "to" "from" "name:" "View-Descriptor")
          {Lisp-Entry "component-surrogate-class" method #f 172 20 172 45 ("Line-Surrogate" "component")}}}}})
"List-Request"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "dialog" "List-Request.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.List-Request" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "List-Request" class #f 47 20 47 32 ("on-cancel" "694" "cancel" "default?:" "on-ok" ":host" "action-handler:" "24" "80" "315" "610" "ok" "8" "770" "300" "6" "separator" "400" "width:" "display-images?:" "toplevel-controls?:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" ":form" "Event-Handler" "double-click-handler:" ":images" "portfolio:" "2" "top-padding:" "element" "filled-column:" "tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "254" "766" "33" "7" "border" "Label" "Font" "font:" "16" "191" "9" "10" "Point" "position:" "title:" "invite" "name:" "350" "782" "Dimension" "size:" "explicit" "initialize" "View")
        {Lisp-Entry "present" property #f 50 12 50 19 ()}
        {Lisp-Entry "get-present" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "set-present" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "content" property #f 51 12 51 19 ()}
        {Lisp-Entry "focus-default" method #f 67 20 67 33 ("get-tree" "acquire-focus")}
        {Lisp-Entry "get-tree" method #f 76 11 76 19 ("tree" "'tree" "locate")}
        {Lisp-Entry "set-invite" method #f 85 18 85 28 ("invite" "'invite" "locate" "set-title" "value")}
        {Lisp-Entry "get-content" method #f 94 11 94 22 ("content")}
        {Lisp-Entry "set-content" method #f 98 11 98 22 ("setup-selection" "setup-content" "get-tree" "tree" "let" "content" "set!" "value")}
        {Lisp-Entry "set-selected" method #f 105 11 105 23 ("row->line" "set-single-selection" "when" "user-data-row" "row" "get-tree" "tree" "let" "selected")}
        {Lisp-Entry "host-title" method #f 117 25 117 35 ()}
        {Lisp-Entry "host-position" method #f 121 25 121 38 ("300" "450" "Point")}
        {Lisp-Entry "host-size" method #f 125 25 125 34 ("500" "300" "Dimension")}
        {Lisp-Entry "on-double-click" method #f 134 11 134 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "resize" method #f 139 20 139 26 ("cancel" "'cancel" "ok" "'ok" "0" "separator" "'separator" "move-figure" "border" "'border" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-return-press" method #f 149 20 149 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" method #f 155 20 155 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update" method #f 165 11 165 17 ("get-tree" "setup-content")}
        {Lisp-Entry "setup-content" method #f 169 11 169 24 ("content" "user-data:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "->string" "present" "or" "title" "let" "element" "for-each" "lambda" "with-update-locked" "remove-every-row" "tree")}
        {Lisp-Entry "setup-selection" method #f 179 11 179 26 ("0" "list" "set-selection" "content" "not-null?" "when" "tree")}
        {Lisp-Entry "get-modal-result" method #f 189 20 189 36 ("get-single-selected-data" "get-tree" "tree" "let")}}}})
"Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "listener" "Listener.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.listener.Listener" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Listener" interface #f 43 11 43 19 ()}}})
"Localized-Domain"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "locale" "Localized-Domain.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.locale.Localized-Domain" module #f 37 18 37 49 ("0" "cardinality" ">" "and" "or" "in-edition?" "close-in-list-editor" "close-in-cell-editor" "close-editor" "is-not?" "when" "select-editor" "get-tree" "expand/collapse" "user-data:" "Locale-Row" "class:" "get-locale" "self" "add-row" "locale" "for-each" "edit-in-cell" "set!" "edit" "set-list-edited-modified?" "flag" "set-edited-modified?" "get-list-edited-modified?" "nextmethod" "get-edited-modified?" "get-output" "apply" "get-value" "get-user-data" "put" "subrow" "lambda" "get-sons" "iterate" "List-Factory" "new" "fact" "let" "editor" "get-string-content" "not" "get-edited-value" "get-locales" "format" "Locales" "is?" "if" "value" "present" "override" "method" "initialize" "localized?" "slot" "Value-Domain" "extends" "Localized-Domain" "undocumented" "class" "jazz")
      {Lisp-Entry "Localized-Domain" class #f 47 20 47 36 ("String-Domain")}}})
"Look"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Look.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Look" module #f 37 18 37 35 ("jazz")
      {Lisp-Entry "Look" class #f 49 7 49 11 ("Component")}}})
"Mac-Skin"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Mac-Skin.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Mac-Skin" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Mac-Skin" class #f 44 7 44 15 ("title:" "Skin")}}})
"Mainbar-Preferences"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "preference" "Mainbar-Preferences.jazz"} 1290011726
    {Lisp-Entry "jazz.ui.preference.Mainbar-Preferences" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Mainbar-Preferences" class #f 45 7 45 26 (":toolbar" "model:" "first" "location:" "vert" "orientation:" "27" "division:" "edge" "separator:" "Splitter-Preferences")}}})
"Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Menu" module #f 37 18 37 35 ("jazz")
      {Lisp-Entry "Menu" class #f 44 7 44 11 ("visible?:" "initialize" "View")
        {Lisp-Entry "item" slot #f 47 8 47 12 ()}
        {Lisp-Entry "get-item" accessor #f 47 38 47 46 ()}
        {Lisp-Entry "set-item" accessor #f 47 38 47 46 ()}
        {Lisp-Entry "poped" slot #f 48 8 48 13 ()}
        {Lisp-Entry "conclude" method #f 60 20 60 28 ("layout-menu" "nextmethod" "rest")}
        {Lisp-Entry "get-poped" method #f 70 18 70 27 ("poped")}
        {Lisp-Entry "set-poped" method #f 74 18 74 27 ("set!" "invalidate-view" "popup-initiator" "initiator" "let" "poped" "when" "menu")}
        {Lisp-Entry "inner?" method #f 87 20 87 26 ("children" "memq?" "view")}
        {Lisp-Entry "invalidate-update" method #f 96 20 96 37 ("layout-menu")}
        {Lisp-Entry "update" method #f 100 26 100 32 ()}
        {Lisp-Entry "layout-menu" method #f 109 26 109 37 ("2" "300" "120" "if" "increase!" "set-arrow-width" "set-shortcut-width" "set-body-width" "set-icon-width" "set-prefix-width" "Dimension" "set-size" "Point" "new" "set-position" "preferred-height" "height" "empty?" "1" "v" "or" "+" "max" "receive" "get-finished?" "width" "bind-keywords" "values" "set!" ">" "when" "preferred-arrow-width" "arrow" "preferred-shortcut-width" "shortcut" "preferred-body-width" "body" "preferred-icon-width" "icon" "preferred-prefix-width" "prefix" "view" "lambda" "for-each-view" "arrow-max" "shortcut-max" "body-max" "icon-max" "0" "prefix-max" "let" "collect-maximums" "define" "rest")}
        {Lisp-Entry "cleanup-separators" method #f 158 18 158 36 ("set!" "when" "set-visible?" "if" "and" "consecutive?" "Separator-Item" "is?" "separator?" "let*" "item" "lambda" "for-each" "kept-separator" "previous-separator?" "children" "get-visible?" "collect-if" "visibles" "let")}}}})
"Menu-Host"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "hosting" "Menu-Host.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.hosting.Menu-Host" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Menu-Host" class #f 46 20 46 29 ("Host-View")
        {Lisp-Entry "draw-background" method #f 49 20 49 35 ("get-bounds" "fill-background" "Medium" "name:" "Color" "menu" "'menu" "find-look" "get-background" "or" "background" "let" "context" "surface")}}}})
"Menu-Look"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Menu-Look.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Menu-Look" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Menu-Look" class #f 43 7 43 16 ("initialize" "Look")
        {Lisp-Entry "background" property #f 46 12 46 22 ()}
        {Lisp-Entry "get-background" accessor #f 46 56 46 64 ()}
        {Lisp-Entry "set-background" accessor #f 46 56 46 64 ()}
        {Lisp-Entry "highlight" property #f 47 12 47 21 ()}
        {Lisp-Entry "get-highlight" accessor #f 47 56 47 64 ()}
        {Lisp-Entry "set-highlight" accessor #f 47 56 47 64 ()}
        {Lisp-Entry "text-color" property #f 48 12 48 22 ()}
        {Lisp-Entry "get-text-color" accessor #f 48 56 48 64 ()}
        {Lisp-Entry "set-text-color" accessor #f 48 56 48 64 ()}
        {Lisp-Entry "selected-text-color" property #f 49 12 49 31 ()}
        {Lisp-Entry "get-selected-text-color" accessor #f 49 56 49 64 ()}
        {Lisp-Entry "set-selected-text-color" accessor #f 49 56 49 64 ()}
        {Lisp-Entry "disabled-text-color" property #f 50 12 50 31 ()}
        {Lisp-Entry "get-disabled-text-color" accessor #f 50 56 50 64 ()}
        {Lisp-Entry "set-disabled-text-color" accessor #f 50 56 50 64 ()}}}})
"Menu-Transient"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "Menu-Transient.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.Menu-Transient" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Menu-Transient" class #f 43 20 43 34 ("Transient")
        {Lisp-Entry "new-root" method #f 46 20 46 28 ("offscreen?:" "Menu-Host" "new")}}}})
"Menubar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Menubar.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Menubar" module #f 37 18 37 38 ("jazz")
      {Lisp-Entry "Menubar" class #f 49 7 49 14 ("on-close" "close" "on-restore" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" "type:" "restore" "name:" "visible?:" "20" "1024" "Dimension" "size:" "initialize" "Menu")
        {Lisp-Entry "showing?" slot #f 52 8 52 16 ()}
        {Lisp-Entry "on-restore" method #f 66 11 66 21 ("current-stage" "restore" "evt")}
        {Lisp-Entry "on-close" method #f 70 11 70 19 ("close-host" "current-frame" "frame" "let" "evt")}
        {Lisp-Entry "maximize" method #f 80 20 80 28 ("show-buttons")}
        {Lisp-Entry "restore" method #f 84 20 84 27 ("hide-buttons")}
        {Lisp-Entry "update-buttons" method #f 88 26 88 40 ("hide-buttons" "show-buttons" "get-maximized?" "not-null?" "and" "get-views" "frames" "if" "current-stage" "stage" "let")}
        {Lisp-Entry "show-buttons" method #f 98 11 98 23 ("close" "'close" "restore" "'restore" "locate" "set-visible?" "always-maximized?" "unless")}
        {Lisp-Entry "hide-buttons" method #f 104 11 104 23 ("close" "'close" "restore" "'restore" "locate" "set-visible?")}
        {Lisp-Entry "always-maximized?" method #f 109 29 109 46 ()}
        {Lisp-Entry "layout" method #f 118 20 118 26 ("close" "'close" "restore" "'restore" "locate" "set-rect" "get-right" "0" "get-bounds" "bounds" "let*" "3" "19" "close-rect" "18" "21" "4" "+" "37" "-" "Rect" "new" "right" "top" "restore-rect" "define")}
        {Lisp-Entry "layout-menu" method #f 132 20 132 31 ("increase!" "-" "Dimension" "set-size" "preferred-body-width" "width" "2" "Point" "new" "set-position" "Item" "is?" "when" "view" "lambda" "for-each-view" "0" "h" "get-height" "height" "let")}
        {Lisp-Entry "draw-background" method #f 149 20 149 35 ("fill-background" "get-bounds" "bounds" "nextmethod" "not" "if" "get-background" "background" "get-look" "look" "let" "context" "surface")}
        {Lisp-Entry "get-look" method #f 163 20 163 28 ("menubar" "'menubar" "find-look")}}}})
"Menubar-Look"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Menubar-Look.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Menubar-Look" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Menubar-Look" class #f 43 7 43 19 ("initialize" "Look")
        {Lisp-Entry "background" property #f 46 12 46 22 ()}
        {Lisp-Entry "get-background" accessor #f 46 47 46 55 ()}
        {Lisp-Entry "set-background" accessor #f 46 47 46 55 ()}
        {Lisp-Entry "highlight" property #f 47 12 47 21 ()}
        {Lisp-Entry "get-highlight" accessor #f 47 47 47 55 ()}
        {Lisp-Entry "set-highlight" accessor #f 47 47 47 55 ()}}}})
"Menubar-Preferences"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "preference" "Menubar-Preferences.jazz"} 1290011726
    {Lisp-Entry "jazz.ui.preference.Menubar-Preferences" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Menubar-Preferences" class #f 45 7 45 26 (":menubar" "model:" "first" "location:" "vert" "orientation:" "21" "division:" "edge" "separator:" "Splitter-Preferences")}}})
"Message-Box"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "Message-Box.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.dialog.Message-Box" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Message-Box" class #f 51 20 51 31 ("editable?:" "selectable?:" "0" "top-padding:" "2" "left-padding:" "background:" "text" "fill" "layout-type:" "content" "tool" "style:" "vscroll?:" "hscroll?:" "scroller" "Dark" "Color" "border-color:" "border-type:" "100" "56" "border" ":images" "portfolio:" "Image-Resource" "resource:" "32" "12" "Point" "position:" "icon" "name:" "120" "302" "Dimension" "size:" "View")
        {Lisp-Entry "type" slot #f 54 8 54 12 ()}
        {Lisp-Entry "process-keys?" slot #f 55 8 55 21 ()}
        {Lisp-Entry "user-content" slot #f 56 8 56 20 ()}
        {Lisp-Entry "action-buttons" slot #f 57 8 57 22 ()}
        {Lisp-Entry "default-button" slot #f 58 8 58 22 ()}
        {Lisp-Entry "finish" method #f 70 20 70 26 ("self" "text" "'text" "locate" "set-client" "nextmethod" "initargs")}
        {Lisp-Entry "focus-default" method #f 80 20 80 33 ("text" "'text" "locate" "acquire-focus")}
        {Lisp-Entry "Type-Infos" definition #f 89 14 89 24 ("custom" "'custom" "error" "'error" ":hand" ":error" "problem" "'problem" "cancel" "'cancel" "confirmation" "'confirmation" "no" "'no" ":exclamation" "question" "'question" "yes" "'yes" ":asterisk" ":information" "message" "'message" "list")}
        {Lisp-Entry "type-info" definition #f 99 15 99 24 ("error" "cdr" "if" "Type-Infos" "assq" "info" "let" "type")}
        {Lisp-Entry "resize" method #f 111 20 111 26 ("action-buttons" "move-figure" "button" "lambda" "for-each" "user-content" "border" "'border" "locate" "size-figure" "2" "get-width" "resize-parts" "second-dh" "first-dh" "bind" "current-modal" "get-host" "eq?" "when" "nextmethod" "dv" "dh")}
        {Lisp-Entry "process-return" method #f 124 11 124 25 ("default-button" "end-modal-dialog" "get-host" "dialog" "let")}
        {Lisp-Entry "process-escape" method #f 129 11 129 25 ("end-modal-dialog" "get-host" "dialog" "let" "when" "type" "type-info" "close-result" "cancelable?" "default-cancel" "default-no" "default-yes" "default-sound" "default-icon" "default-title" "bind")}
        {Lisp-Entry "process-key" method #f 136 11 136 22 ("action-buttons" "for-each" "continuation-return" "end-modal-dialog" "ci=?" "0" "element" "or" "first" "get-title" "localize" "get-name" "result" "car" "null?" "if" "shortcut-key" "let" "get-user-data" "optional" "name" "title" "bind" "get-visible?" "button" "try-button" "get-host" "dialog" "let*" "return" "lambda" "continuation-capture" "process-keys?" "when" "key")}
        {Lisp-Entry "on-select" method #f 155 11 155 20 ("end-modal-dialog" "button:" "get-property" "button" "let" "evt")}
        {Lisp-Entry "process-box" method #f 165 18 165 29 ("process-modal" "play-sound" "layout-box" "dialog-size" "first" "'yes" "'no" "list" "cons" "second" "key:" "'cancel" "member?" "not" "and" "when" "eq?" "if" "or" "get-host" "host" "get-player" "let" "user-content~self" "process-keys?~self" "type~self" "set!" "type-info" "close-result" "cancelable?" "default-cancel" "default-no" "default-yes" "default-sound" "default-icon" "default-title" "bind" "set-size" "set-position" "set-title" "get-size" "center" "position" "get-desktop" "desktop" "let*" "dialog" "layout-dialog" "define" "process-keys?" "process-keys?:" "default-button" "default-button:" "actions" "actions:" "cancel" "cancel:" "no" "no:" "yes" "yes:" "selection" "selection:" "default" "'default" "sound" "sound:" "content" "content:" "icon" "icon:" "size" "size:" "title" "title:" "message" "'message" "type" "type:" "text")}
        {Lisp-Entry "Left-Padding" definition #f 216 14 216 26 ("2")}
        {Lisp-Entry "Top-Padding" definition #f 219 14 219 25 ("0")}
        {Lisp-Entry "Content-Spacing" definition #f 222 14 222 29 ("10")}
        {Lisp-Entry "Buttons-Spacing" definition #f 225 14 225 29 ("6")}
        {Lisp-Entry "layout-box" method #f 229 29 229 39 ("10" "center" "solid" "'solid" "set-border-type" ">" "overflow?" "set-icon" "58" "dialog-height" "68" "dialog-width" "2" "Content-Spacing" "get-left" "set-parent" "get-bottom" "bottom" "200" "36" "get-visible-height" "text-height" "100" "500" "208" "compute-width" "min" "if" "set-selection" "set-text" "Top-Padding" "Left-Padding" "1" "height" "size-border" "border" "'border" "border-view" "scroller" "'scroller" "scroller-view" "'text" "text-view" "'icon" "locate" "icon-view" "+" "set-position" "get-visible?" "position-button" "let" "v" "h" "position-buttons" "default-button" "get-output" "action-buttons" "set!" "for-each" "put" "Buttons-Spacing" "/=" "when" "get-height" "set-size" "get-width" "max" "width" "preferred-size" "localize" "set-title" "eq?" "default?:" "action-handler:" "user-data:" "size:" "72" "75" "*" "Point" "position:" "self" "parent:" "name:" "Push-Button" "button" "button:" "list" "properties:" "on-select" "'on-select" "method-name:" ":guest" "target-name:" "Event-Handler" "handler" "increase!" "shortcut-key" "button-name" "bind" "action" "lambda" "setup-button" "List-Factory" "fact" "count" "24" "80" "Dimension" "new" "0" "buttons-width" "let*" "setup-buttons" "define" "default" "actions" "content" "icon" "size" "title" "selection" "text")}}
      {Lisp-Entry "Message-Text-View" class #f 302 7 302 24 ("Formatted-Text-View")
        {Lisp-Entry "client" property #f 305 12 305 18 ()}
        {Lisp-Entry "get-client" accessor #f 305 29 305 37 ()}
        {Lisp-Entry "set-client" accessor #f 305 29 305 37 ()}
        {Lisp-Entry "get-context-menu" method #f 308 20 308 36 ("new-text-context-menu")}
        {Lisp-Entry "return-press" method #f 312 20 312 32 ("client" "process-return" "key")}
        {Lisp-Entry "escape-press" method #f 316 20 316 32 ("client" "process-escape" "key")}
        {Lisp-Entry "key-press" method #f 320 20 320 29 ("client" "process-key" "key")}}}})
"Minibuffer-Preferences"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "preference" "Minibuffer-Preferences.jazz"} 1290011726
    {Lisp-Entry "jazz.ui.preference.Minibuffer-Preferences" module #f 37 8 37 49 ("jazz")
      {Lisp-Entry "Minibuffer-Preferences" class #f 45 7 45 29 (":minibuffer" "model:" "second" "location:" "first" "target:" "zoom" "state:" "vert" "orientation:" "-18" "division:" "edge" "separator:" "Splitter-Preferences")}}})
"Minibuffer-Toolbar"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "view" "Minibuffer-Toolbar.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Minibuffer-Toolbar" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Minibuffer-Toolbar" class #f 45 7 45 25 ("top-padding:" "1" "left-padding:" "text" "content" "scroller" "command-shell" "name:" "0" "Rect" "layout-insets:" "fill" "layout-type:" "Toolbar")
        {Lisp-Entry "host-title" method #f 56 25 56 35 ()}}}})
"Moniker-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "widget" "Moniker-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.widget.Moniker-Text-View" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Moniker-Text-View" class #f 44 20 44 37 ("IDE-Text-View")
        {Lisp-Entry "get-scroll-context" method #f 47 20 47 38 ("0" "cons")}}}})
"Moniker-Widget"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "widget" "Moniker-Widget.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.widget.Moniker-Widget" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Moniker-Widget" class #f 52 7 52 21 ("on-browse" "action-handler:" "Image-Resource" "resource:" ":images" "portfolio:" "pick" "on-receive-files" "receive-files-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "body" "content" "scroller" "name:" "editable?:" "selectable?:" "choose" "kind:" "file" "'file" "explicit" "open" "'open" "initialize" "Combo-Text")
        {Lisp-Entry "mode" property #f 55 12 55 16 ()}
        {Lisp-Entry "protocol" property #f 56 12 56 20 ()}
        {Lisp-Entry "get-protocol" accessor #f 56 62 56 70 ()}
        {Lisp-Entry "set-protocol" accessor #f 56 62 56 70 ()}
        {Lisp-Entry "parameters" property #f 57 12 57 22 ()}
        {Lisp-Entry "get-parameters" accessor #f 57 62 57 70 ()}
        {Lisp-Entry "set-parameters" accessor #f 57 62 57 70 ()}
        {Lisp-Entry "display-logical?" property #f 58 12 58 28 ()}
        {Lisp-Entry "get-display-logical?" accessor #f 58 62 58 70 ()}
        {Lisp-Entry "set-display-logical?" accessor #f 58 62 58 70 ()}
        {Lisp-Entry "display-protocol?" property #f 59 12 59 29 ()}
        {Lisp-Entry "get-display-protocol?" accessor #f 59 62 59 70 ()}
        {Lisp-Entry "set-display-protocol?" accessor #f 59 62 59 70 ()}
        {Lisp-Entry "anchors" property #f 60 12 60 19 ()}
        {Lisp-Entry "get-anchors" accessor #f 60 62 60 70 ()}
        {Lisp-Entry "set-anchors" accessor #f 60 62 60 70 ()}
        {Lisp-Entry "moniker-update-handler" property #f 61 12 61 34 ()}
        {Lisp-Entry "get-moniker-update-handler" accessor #f 61 62 61 70 ()}
        {Lisp-Entry "set-moniker-update-handler" accessor #f 61 62 61 70 ()}
        {Lisp-Entry "on-browse" method #f 77 11 77 20 ("browse-moniker" "evt")}
        {Lisp-Entry "on-return-press" method #f 81 20 81 35 ("self" "invoke-handler" "return-press-handler" "when" "evt")}
        {Lisp-Entry "on-receive-files" method #f 86 11 86 27 ("bell" "set-moniker" "car" "is?" "1" "length" "=" "and" "protocol" "get-protocol-handler" "handler" ":receive-files" "Event" "new" "self" "invoke-handler" "receive-files-handler" "if" "files:" "files" "position:" "get-property" "pos" "let" "evt")}
        {Lisp-Entry "get-mode" method #f 103 18 103 26 ("mode")}
        {Lisp-Entry "set-mode" method #f 107 18 107 26 ("save" "Image-Resource" "set-resource" "open" "case" "get-pick" "browse" "let" "mode" "set!" "value")}
        {Lisp-Entry "call-moniker-update" method #f 115 18 115 37 ("moniker-update" ":update" "Event" "new" "self" "invoke-handler" "moniker-update-handler" "if")}
        {Lisp-Entry "browse-moniker" method #f 126 18 126 32 ("focus-body" "set-moniker" "moniker-modal" "apply" "moniker" "parameters" "actual:" "mode" "mode:" "augment" "arguments" "actual" "protocol" "get-protocol-handler" "handler" "let*" "get-moniker" "throw-cancel" "get-message" "message-box" "err" "Parse-Error" "catch" "get-moniker-safe" "define")}
        {Lisp-Entry "get-moniker" method #f 146 18 146 29 ("else" "Pathname" "Directory-Group" "typecase" "moniker" "receive" "read-string-content" "anchors" "anchors:" "moniker-new" "anchorize" "tokenise-filename" "parameters" "handler" "alias-displayed?" "empty-string?" "unless" "get-content" "string" "let" "list" "bind" "protocol" "get-protocol-handler" "values" "protocol-displayed?" "not" "if" "content" "parse-content" "define")}
        {Lisp-Entry "set-moniker" method #f 168 18 168 29 ("call-moniker-update" "when" "present-moniker" "not" "if" "set-content" "generate-event?" "generate-event?:" "moniker")}
        {Lisp-Entry "moniker-update" method #f 174 29 174 43 ()}
        {Lisp-Entry "present-moniker" method #f 178 18 178 33 ("class-of" "get-protocol" "format" "else" "present" "protocol-displayed?" "->string" "parse" "Pathname" "is?" "if" "alias-displayed?" "not" "cond" "moniker")}
        {Lisp-Entry "alias-displayed?" method #f 193 11 193 27 ("get-application" "display-aliases?" "display-logical?" "unspecified?" "if")}
        {Lisp-Entry "protocol-displayed?" method #f 199 11 199 30 ("get-application" "display-protocol?" "unspecified?" "if")}
        {Lisp-Entry "get-class-descriptor" method #f 210 25 210 45 ("Moniker-Widget-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 219 11 219 17 ()
        {Lisp-Entry "Moniker-Widget-Descriptor" class #f 225 7 225 32 ("moniker-update-handler" "anchors" "display-protocol?" "display-logical?" "parameters" "protocol" "title:" "mode" "name:" "View-Descriptor")}}}})
"Mouse-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Mouse-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Mouse-Event" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Mouse-Event" class #f 43 7 43 18 ("Event")
        {Lisp-Entry "position" slot #f 46 8 46 16 ()}
        {Lisp-Entry "get-position" accessor #f 46 24 46 32 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("position" "set!" "nextmethod" "pos" "sender" "kind")}
        {Lisp-Entry "print" method #f 54 20 54 25 ("position" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-h" method #f 65 18 65 23 ("position" "get-h")}
        {Lisp-Entry "get-v" method #f 69 18 69 23 ("position" "get-v")}}}})
"Navigable-Results"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Navigable-Results.jazz"} 1289844320
    {Lisp-Entry "jazz.ui.search.Navigable-Results" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Navigable-Results" class #f 47 20 47 37 ("on-return-press" "return-press-handler:" "on-double-click" ":form" "double-click-handler:" "row" "selection-mode:" "results" "header" "fill" "content" "tool" "style:" "hscroll?:" "vscroll?:" "center" "scroller" "on-clear-results" "clear" "0" "4" "on-edit-selection" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "edit" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "finish" method #f 63 20 63 26 ("get-tree" "invalidate-columns" "nextmethod" "rest")}
        {Lisp-Entry "get-tools-view" method #f 73 20 73 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "host-activated" method #f 77 11 77 25 ("self" "set-active-results" "get-application" "appl" "let")}
        {Lisp-Entry "get-tree" method #f 87 18 87 26 ("results" "'results" "locate")}
        {Lisp-Entry "on-double-click" method #f 96 11 96 26 ("edit-selection" "results" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" method #f 103 20 103 35 ("edit-selection" "evt")}
        {Lisp-Entry "on-edit-selection" method #f 107 11 107 28 ("edit-selection" "evt")}
        {Lisp-Entry "on-clear-results" method #f 111 11 111 27 ("clear-results" "evt")}
        {Lisp-Entry "clear-results" method #f 120 26 120 39 ("get-tree" "remove-every-row")}
        {Lisp-Entry "edit-next" method #f 129 18 129 27 ("edit-selection" "update-view" "list" "set-selection" "begin" "not" "if" "next-editable" "rank" "last" "not-null?" "and" "current" "get-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "edit-previous" method #f 144 18 144 31 ("edit-selection" "list" "set-selection" "begin" "not" "if" "previous-editable" "rank" "car" "not-null?" "and" "current" "get-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "edit-current" method #f 158 18 158 30 ("edit-selection")}
        {Lisp-Entry "edit-selection" method #f 162 29 162 43 ("forward?")}
        {Lisp-Entry "editable-row?" method #f 166 29 166 42 ("user-data")}
        {Lisp-Entry "next-editable" method #f 170 11 170 24 ("increase!" "continuation-return" "get-user-data" "editable-row?" "get-row" "row" "let" "<" "while" "return" "lambda" "continuation-capture" "0" "1" "+" "if" "rank" "get-visible-count" "count" "get-tree" "tree" "let*" "current")}
        {Lisp-Entry "previous-editable" method #f 184 11 184 28 ("decrease!" "continuation-return" "get-user-data" "editable-row?" "get-row" "row" "let" "0" ">=" "while" "return" "lambda" "continuation-capture" "1" "-" "if" "rank" "get-visible-count" "count" "get-tree" "tree" "let*" "current")}
        {Lisp-Entry "select-results" method #f 198 18 198 32 ("acquire-focus" "get-tree" "tree" "let" "get-application" "get-active?" "when")}
        {Lisp-Entry "select-first" method #f 204 18 204 30 ("list" "set-selection" "bell" "not" "if" "next-editable" "rank" "get-tree" "tree" "let")}}}})
"NewFile-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "NewFile-Request.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.NewFile-Request" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "NewFile-Request" class #f 48 20 48 35 ("initialize" "title:" "ok" "on-content-change" "content-change-handler:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "Label" "Font" "font:" "Default" "Text-Style" "default-style:" "focus-selects-all?:" "show-unfocused-selection?:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "filename" "content" "vscroll?:" "hscroll?:" "Entry-Border" "Color" "border-color:" "solid" "border-type:" "22" "288" "3" "Rect" "layout-insets:" "fill" "layout-type:" "0" "4" "Dimension" "size:" "buttonbar" "name:" "Pathname-Request")
        {Lisp-Entry "host-title" method #f 63 25 63 35 ()}
        {Lisp-Entry "initial-filename" property #f 67 12 67 28 ()}
        {Lisp-Entry "default-extension" property #f 68 12 68 29 ()}
        {Lisp-Entry "finish" method #f 71 20 71 26 ("select-all" "set-string-content" "1" "cardinality" "-" "0" "subseq" "concatenate" "ends-with?" "default-extension" "and" "if" "content" "filename" "'filename" "locate" "text" "let" "initial-filename" "when" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 83 20 83 33 ("filename" "'filename" "locate" "acquire-focus")}
        {Lisp-Entry "get-tab-stops" method #f 92 20 92 33 ("filename" "'filename" "locate" "get-tree" "list")}
        {Lisp-Entry "update" method #f 103 20 103 26 ("update-buttons" "update-filename" "update-content" "update-history" "update-hierarchy")}
        {Lisp-Entry "update-content" method #f 111 20 111 34 ("for-each" "lambda" "with-update-locked" "remove-every-row" "add-pathname" "pathname" "add" "define" "get-tree" "tree" "files" "leaves?:" "nodes?:" "directory" "get-content" "directories" "let")}
        {Lisp-Entry "update-filename" method #f 125 11 125 26 ("filename" "'filename" "locate" "set-string-content")}
        {Lisp-Entry "update-buttons" method #f 129 20 129 34 ("get-string-content" "empty-string?" "not" "ok" "'ok" "set-enabled?" "filename" "'filename" "locate" "text" "let" "nextmethod")}
        {Lisp-Entry "validate-dialog" method #f 140 20 140 35 ("throw-cancel" "cancel" "no" "memq?" "confirmation" "'confirmation" "type:" "parse" "format" "message-box" "code" "exists?" "when" "get-newfile" "newfile" "let")}
        {Lisp-Entry "get-modal-result" method #f 149 20 149 36 ("get-newfile" "directory" "set-current-directory")}
        {Lisp-Entry "get-newfile" method #f 154 11 154 22 ("directory" "new-file" "anchorize" "concatenate" "search" "not" "default-extension" "and" "if" "filename" "'filename" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "selection-change" method #f 168 20 168 36 ("update-buttons" "get-name" "filename" "'filename" "locate" "set-string-content" "file?" "when" "selected-pathname" "pathname" "let")}
        {Lisp-Entry "on-content-change" method #f 175 11 175 28 ("update-buttons" "evt")}
        {Lisp-Entry "default-action" method #f 179 20 179 34 ("get-modal-result" "get-host" "end-modal" "ok-enabled?" "down" "directory?" "cond" "selected-pathname" "pathname" "let")}}}})
"Note-Widget"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "widget" "Note-Widget.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.widget.Note-Widget" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Note-Widget" class #f 45 7 45 18 ("Label-Bold" "Font" "font:" "text" "center" "layout-type:" "Tooltip" "name:" "Color" "background:" "150" "300" "Dimension" "size:" "Layout-View")}
      {Lisp-Entry "Note-Text-View" class #f 58 7 58 21 ("Plain-Text-View")
        {Lisp-Entry "dynamic-scrollee?" method #f 61 20 61 37 ()}
        {Lisp-Entry "dynamic-set-scrollee-size" method #f 65 20 65 45 ("parent" "layout-view" "50" "scrollee-size" "dimension-max" "set-size")}
        {Lisp-Entry "dynamic-scrollee-width?" method #f 70 20 70 43 ()}}}})
"Orphaned-Actions"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "action" "Orphaned-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.action.Orphaned-Actions" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Orphaned-Actions" class #f 45 7 45 23 ("Actions")
        {Lisp-Entry "actions-orphaned?" method #f 53 20 53 37 ()}
        {Lisp-Entry "get-class-descriptor" method #f 62 25 62 45 ("Orphaned-Actions-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 71 11 71 17 ()
        {Lisp-Entry "Orphaned-Actions-Descriptor" class #f 77 7 77 34 ("Actions-Descriptor")}}}})
"Outline-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "outline" "Outline-Row.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.outline.Outline-Row" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Outline-Row" class #f 48 7 48 18 ("collapsed" "'collapsed" "0" "Axis" "new" "explicit" "initialize" "Drawing")
        {Lisp-Entry "father" property #f 51 22 51 28 ()}
        {Lisp-Entry "sons" property #f 52 22 52 26 ()}
        {Lisp-Entry "level" property #f 53 22 53 27 ()}
        {Lisp-Entry "state" property #f 54 22 54 27 ()}
        {Lisp-Entry "row-height" property #f 55 22 55 32 ()}
        {Lisp-Entry "previous" slot #f 57 18 57 26 ()}
        {Lisp-Entry "get-previous" accessor #f 57 51 57 59 ()}
        {Lisp-Entry "set-previous" accessor #f 57 51 57 59 ()}
        {Lisp-Entry "next" slot #f 58 18 58 22 ()}
        {Lisp-Entry "get-next" accessor #f 58 51 58 59 ()}
        {Lisp-Entry "set-next" accessor #f 58 51 58 59 ()}
        {Lisp-Entry "initialize-component" method #f 68 20 68 40 ("rest")}
        {Lisp-Entry "install-in-parent" method #f 72 20 72 37 ()}
        {Lisp-Entry "set-player" method #f 76 20 76 30 ("set-player" "row" "lambda" "sons" "iterate" "nextmethod" "plr")}
        {Lisp-Entry "set-parent" method #f 82 20 82 30 ("parent" "set!" "prt")}
        {Lisp-Entry "get-outline-view" method #f 91 25 91 41 ("parent")}
        {Lisp-Entry "get-father" method #f 95 25 95 35 ("father")}
        {Lisp-Entry "set-father" method #f 99 25 99 35 ("father" "set!" "row")}
        {Lisp-Entry "get-sons" method #f 103 25 103 33 ("sons")}
        {Lisp-Entry "set-sons" method #f 107 25 107 33 ("sons" "set!" "s")}
        {Lisp-Entry "get-level" method #f 111 25 111 34 ("level")}
        {Lisp-Entry "set-level" method #f 115 25 115 34 ("level" "set!" "lvl")}
        {Lisp-Entry "get-state" method #f 119 25 119 34 ("state")}
        {Lisp-Entry "set-state" method #f 123 25 123 34 ("state" "set!" "s")}
        {Lisp-Entry "get-row-height" method #f 127 25 127 39 ("row-height")}
        {Lisp-Entry "set-row-height" method #f 131 25 131 39 ("row-height" "set!" "height")}
        {Lisp-Entry "effective-row-height" method #f 135 18 135 38 ("get-outline-view" "get-default-row-height" "row-height" "or")}
        {Lisp-Entry "increase-row-height" method #f 139 18 139 37 ("effective-row-height" "+" "row-height" "set!" "inc")}
        {Lisp-Entry "change-father" method #f 148 18 148 31 ("get-sons" "cardinality" "or" "add-son" "set-father" "self" "remove-son" "father" "when" "position" "position:" "father-row")}
        {Lisp-Entry "for-each-father" method #f 156 18 156 33 ("for-each-father" "father" "when" "proc")}
        {Lisp-Entry "for-each-ancestor" method #f 162 18 162 35 ("for-each-father" "self" "proc")}
        {Lisp-Entry "remove-every-son" method #f 172 18 172 34 ("List" "sons" "coerce" "remove-row" "son" "lambda" "for-each" "get-outline-view" "outline-view" "let")}
        {Lisp-Entry "son-rank" method #f 179 18 179 26 ("sons" "find" "son")}
        {Lisp-Entry "last-son" method #f 183 18 183 26 ("sons" "last")}
        {Lisp-Entry "get-transparent?" method #f 192 20 192 36 ()}
        {Lisp-Entry "expanded?" method #f 201 18 201 27 ("expanded" "'expanded" "state" "eq?")}
        {Lisp-Entry "collapsed?" method #f 205 18 205 28 ("collapsed" "'collapsed" "state" "eq?")}
        {Lisp-Entry "expandable?" method #f 209 18 209 29 ("first-visible-son" "dynamic" "'dynamic" "state" "eq?" "or")}
        {Lisp-Entry "collapsable?" method #f 214 18 214 30 ("expanded" "'expanded" "state" "eq?")}
        {Lisp-Entry "set-descendants-level" method #f 223 21 223 42 ("sons" "1" "+" "set-descendants-level" "son" "lambda" "for-each" "level" "set!" "lvl")}
        {Lisp-Entry "get-effective-width" method #f 235 26 235 45 ("get-width")}
        {Lisp-Entry "get-effective-height" method #f 239 18 239 38 ("get-height" "row-height" "or")}
        {Lisp-Entry "draw" method #f 248 20 248 24 ("draw-selection" "selected?:" "getf" "when" "nextmethod" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-selection" method #f 254 29 254 43 ("Light-Gray" "Black" "name:" "Color" "frame-rect" "-1" "inflate-rect" "inner" "get-bounds" "outer" "let*" "surface")}
        {Lisp-Entry "show" method #f 266 20 266 24 ("link" "show-rows" "visible-in-father?" "visible?" "let" "parent" "nextmethod" "first-visible-son" "father" "and" "get-next" "if" "next" "self" "previous-visible-row" "previous" "last-descendant" "last" "let*" "get-visible-flag" "unless")}
        {Lisp-Entry "hide" method #f 281 20 281 24 ("unlink" "visible-in-father?" "hide-rows" "parent" "if" "nextmethod" "self" "last-descendant" "or" "last" "let" "get-visible-flag" "when")}
        {Lisp-Entry "get-visible?" method #f 291 20 291 32 ("row-visible?" "father" "and")}
        {Lisp-Entry "row-visible?" method #f 295 18 295 30 ("visible-in-father?" "get-visible-flag" "and")}
        {Lisp-Entry "visible-in-father?" method #f 300 18 300 36 ("row-visible?" "expanded?" "and" "father" "not" "or")}
        {Lisp-Entry "count-visible" method #f 305 18 305 31 ("increase!" "get-next" "set!" "level" "get-level" ">" "and" "while" "0" "count" "next" "scan" "let")}
        {Lisp-Entry "node-height" method #f 314 18 314 29 ("sons-height" "parent" "get-row-spacing" "get-effective-height" "+")}
        {Lisp-Entry "sons-height" method #f 318 18 318 29 ("get-next" "set!" "get-effective-height" "+" "increase!" "level" "get-level" ">" "and" "while" "parent" "get-row-spacing" "rs" "0" "total" "next" "scan" "let")}
        {Lisp-Entry "sons-width" method #f 328 18 328 28 ("get-next" "set!" "when" "get-effective-width" "w" "level" "get-level" ">" "and" "while" "0" "width" "next" "scan" "let")}
        {Lisp-Entry "first-visible-son" method #f 339 18 339 35 ("find-if" "get-visible-flag" "if" "first" "let" "sons" "empty?" "not" "when")}
        {Lisp-Entry "previous-visible-row" method #f 348 18 348 38 ("expanded?" "last-descendant" "and" "or" "get-father" "father" "previous-visible-sibling" "let" "target")}
        {Lisp-Entry "previous-visible-sibling" method #f 355 18 355 42 ("get-visible-flag" "when" "set!" "self" "eq?" "if" "unless" "lambda" "iterate" "found-self?" "first" "scan" "get-sons" "father" "and" "siblings" "sibling" "let*")}
        {Lisp-Entry "last-visible-descendant" method #f 370 21 370 44 ("set!" "level" "get-level" ">" "get-next" "and" "while" "when" "first-visible-son" "scan" "let")}
        {Lisp-Entry "add-son" method #f 383 18 383 25 ("insert!" "set!" "link" "first-visible-son" "/=" "level" "get-level" "after" "get-next" "and" "following" "element" "previous-visible-row" "last-visible-descendant" "if" "0" "=" "before" "get-visible-flag" "when" "else" ">" "not" "cond" "pos" "sons" "cardinality" "count" "last-descendant" "end" "expanded" "'expanded" "state" "eq?" "expanded?" "let*" "self" "set-father" "position" "row")}
        {Lisp-Entry "remove-son" method #f 405 18 405 28 ("axis-remove!" "sons" "set!" "set-previous" "set-next" "get-previous" "error" "Outline-Row" "is-not?" "and" "when" "next-non-descendant" "following" "let" "row")}
        {Lisp-Entry "relink" method #f 420 18 420 24 ("last-descendant" "expanded?" "or" "set!" "link" "get-visible-flag" "when" "row" "lambda" "iterate" "let" "after" "before" "replacement")}
        {Lisp-Entry "replace-sons" method #f 430 18 430 30 ("replace-subseq!" "sons" "set!" "relink" "after" "get-previous" "and" "before" "let" "end" "end-row" "start" "start-row" "replacement")}
        {Lisp-Entry "reorder-sons" method #f 437 18 437 30 ("sons" "set!" "relink" "next-non-descendant" "after" "self" "expanded?" "when" "before" "let" "replacement")}
        {Lisp-Entry "link" definition #f 445 15 445 19 ("set-previous" "set-next" "when" "after" "before")}
        {Lisp-Entry "unlink" definition #f 453 15 453 21 ("set-next" "set-previous" "link" "get-next" "next" "get-previous" "previous" "let" "last" "first")}
        {Lisp-Entry "attached?" method #f 466 18 466 27 ("parent")}
        {Lisp-Entry "detach-descendants" method #f 470 18 470 36 ("sons" "detach-descendants" "for-each")}
        {Lisp-Entry "first-descendant" method #f 479 21 479 37 ("first-visible-son" "sons" "empty?" "not" "expanded" "'expanded" "state" "eq?" "and" "when")}
        {Lisp-Entry "last-proper-descendant" method #f 484 21 484 43 ("set!" "level" "get-level" ">" "get-next" "and" "while" "when" "first-descendant" "scan" "let")}
        {Lisp-Entry "last-descendant" method #f 492 21 492 36 ("self" "last-proper-descendant" "or")}
        {Lisp-Entry "next-non-descendant" method #f 497 21 497 40 ("last-descendant" "get-next")}
        {Lisp-Entry "visible-sibling-follows?" method #f 501 21 501 45 ("get-sons" "set!" "self" "eq?" "get-visible-flag" "and" "prog1" "son" "lambda" "some?" "found?" "let" "father" "when")}
        {Lisp-Entry "sibling-follows?" method #f 511 21 511 37 ("get-sons" "last" "self" "neq?" "father" "and")}
        {Lisp-Entry "get-spine" method #f 520 18 520 27 ("get-father" "cons" "set!" "neq?" "while" "spine" "parent" "get-root-row" "root" "self" "row" "let")}
        {Lisp-Entry "internal-fields" method #f 535 18 535 33 ("next" "previous" "state" "level" "values")}}}})
"Outline-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "outline" "Outline-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.outline.Outline-View" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Outline-View" class #f 48 7 48 19 ("320" "16" "explicit" "0" "17" "initialize" "View")
        {Lisp-Entry "default-row-height" property #f 61 22 61 40 ()}
        {Lisp-Entry "get-default-row-height" accessor #f 61 72 61 80 ()}
        {Lisp-Entry "set-default-row-height" accessor #f 61 72 61 80 ()}
        {Lisp-Entry "row-spacing" property #f 62 22 62 33 ()}
        {Lisp-Entry "left-padding" property #f 63 22 63 34 ()}
        {Lisp-Entry "top-padding" property #f 64 22 64 33 ()}
        {Lisp-Entry "background-filler" property #f 65 22 65 39 ()}
        {Lisp-Entry "fit-in-scroller?" property #f 66 22 66 38 ()}
        {Lisp-Entry "root-row" slot #f 69 18 69 26 ()}
        {Lisp-Entry "get-root-row" accessor #f 69 69 69 77 ()}
        {Lisp-Entry "outline" slot #f 70 18 70 25 ()}
        {Lisp-Entry "get-outline" accessor #f 70 69 70 77 ()}
        {Lisp-Entry "visible-count" slot #f 71 18 71 31 ()}
        {Lisp-Entry "get-visible-count" accessor #f 71 69 71 77 ()}
        {Lisp-Entry "visible-height" slot #f 72 18 72 32 ()}
        {Lisp-Entry "get-visible-height" accessor #f 72 69 72 77 ()}
        {Lisp-Entry "visible-width" slot #f 73 18 73 31 ()}
        {Lisp-Entry "get-visible-width" accessor #f 73 69 73 77 ()}
        {Lisp-Entry "selection" slot #f 74 18 74 27 ()}
        {Lisp-Entry "line-size" slot #f 75 18 75 27 ()}
        {Lisp-Entry "page-size" slot #f 76 18 76 27 ()}
        {Lisp-Entry "hscrollbar?" slot #f 77 18 77 29 ()}
        {Lisp-Entry "vscrollbar?" slot #f 78 18 78 29 ()}
        {Lisp-Entry "install" method #f 86 20 86 27 ("setup-outline" "nextmethod" "rest")}
        {Lisp-Entry "finish" method #f 91 20 91 26 ("layout-scrollee" "nextmethod" "rest")}
        {Lisp-Entry "set-player" method #f 96 20 96 30 ("set-player" "root-row" "nextmethod" "player" "neq?" "when" "plr")}
        {Lisp-Entry "setup-outline" method #f 103 11 103 24 ("expanded" "'expanded" "set-state" "-1" "set-level" "set-father" "self" "set-parent" "row-spacing" "Display-Outline" "outline" "row-class" "new" "root-row" "set!")}
        {Lisp-Entry "size-change" method #f 117 20 117 31 ("layout-scrollee" "get-finished?" "not" "update-locked?" "or" "unless" "nextmethod" "size")}
        {Lisp-Entry "get-row-spacing" method #f 128 18 128 33 ("row-spacing")}
        {Lisp-Entry "set-row-spacing" method #f 132 18 132 33 ("invalidate-view" "set-row-spacing" "outline" "when" "row-spacing" "set!" "spacing")}
        {Lisp-Entry "get-left-padding" method #f 139 18 139 34 ("left-padding")}
        {Lisp-Entry "set-left-padding" method #f 143 18 143 34 ("invalidate-view" "left-padding" "set!" "padding")}
        {Lisp-Entry "get-top-padding" method #f 148 18 148 33 ("top-padding")}
        {Lisp-Entry "set-top-padding" method #f 152 18 152 33 ("invalidate-view" "top-padding" "set!" "padding")}
        {Lisp-Entry "get-background-filler" method #f 157 18 157 39 ("background-filler")}
        {Lisp-Entry "set-background-filler" method #f 161 18 161 39 ("invalidate-view" "background-filler" "set!" "value")}
        {Lisp-Entry "get-fit-in-scroller?" method #f 166 18 166 38 ("fit-in-scroller?")}
        {Lisp-Entry "set-fit-in-scroller?" method #f 170 18 170 38 ("layout-scrollee" "fit-in-scroller?" "set!" "value")}
        {Lisp-Entry "get-expand-state" method #f 180 18 180 34 ("List" "type:" "collect" "cons" "expanded" "'expanded" "eq?" "0" "cardinality" ">" "and" "or" "get-sons" "sons" "get-state" "state" "first-child" "get-title" "title" "let" "row" "lambda" "proc" "letrec" "root-row" "when" "include-invisibles?" "include-invisibles?:")}
        {Lisp-Entry "set-expand-state" method #f 197 18 197 34 ("for-each" "iterate" "update-row" "dynamic" "'dynamic" "and" "expand/collapse" "unless" "expanded" "'expanded" "eq?" "if" "get-state" "actual" "find-by-title" "subrow" "let" "children" "title" "bind" "info" "row" "lambda" "proc" "letrec" "root-row" "when" "state")}
        {Lisp-Entry "expand-spine" method #f 223 18 223 30 ("if" "expand/collapse" "null?" "expanded" "'expanded" "eq?" "or" "unless" "get-state" "actual" "find-by-title" "subrow" "let" "subspine" "title" "bind" "row" "lambda" "proc" "letrec" "root-row" "when" "spine")}
        {Lisp-Entry "find-subdrawing" method #f 244 20 244 35 ("get-position" "-" "find-drawing" "get-row" "cast" "when" "get-v" "v->row" "row" "let" "ignore" "pos")}
        {Lisp-Entry "layout-scrollee-content" method #f 256 20 256 43 ("row-spacing" "increase!" "set!" "Dimension" "set-size" "Point" "new" "set-position" "+" "rb" "effective-row-height" "height" "let*" "while" "top-padding" "rt" "root-row" "get-next" "row" "left-padding" "get-width" "-" "width" "let" "layout-rows" "define")}
        {Lisp-Entry "scrollee-size" method #f 278 20 278 33 ("scrollee-height" "scrollee-width" "Dimension" "new")}
        {Lisp-Entry "scrollee-width" method #f 282 20 282 34 ("get-display-width" "max" "fit-in-scroller?" "scroller" "and" "if" "visible-width" "left-padding" "+" "width" "let")}
        {Lisp-Entry "scrollee-height" method #f 289 20 289 35 ("get-display-height" "max" "fit-in-scroller?" "scroller" "and" "if" "visible-height" "top-padding" "+" "height" "let")}
        {Lisp-Entry "scrollee-content-size" method #f 296 11 296 32 ("scrollee-content-height" "scrollee-content-width" "Dimension" "new")}
        {Lisp-Entry "scrollee-content-width" method #f 300 26 300 48 ("visible-width" "left-padding" "+")}
        {Lisp-Entry "scrollee-content-height" method #f 304 26 304 49 ("visible-height" "top-padding" "+")}
        {Lisp-Entry "invalidate-update" method #f 313 20 313 37 ("update-scrollbars" "invalidate-view" "layout-scrollee" "update-visible" "update-displayed")}
        {Lisp-Entry "update-visible" method #f 321 26 321 40 ()}
        {Lisp-Entry "draw-background" method #f 330 20 330 35 ("context" "surface")}
        {Lisp-Entry "draw-children" method #f 334 20 334 33 ("draw-outline" "fill-rect" "when" "get-drawing-background" "else" "Medium" "name:" "Color" "view-enabled?" "not" "cycle-debug-color!" "debug-paint?" "cond" "background" "get-logical-clipper" "clipper" "let" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "nodes" "surface")}
        {Lisp-Entry "draw-outline" method #f 347 29 347 41 ("get-bottom" "get-top" "get-scrolled-position" "draw-empty" "get-next" "set!" "increase!" ">=" "when" "rb" "<" "and" "while" "get-first-displayed-offset" "top-padding" "-" "rt" "get-first-displayed-line" "outline" "get-first-displayed" "get-v" "get-h" "paint-content" "optimize-context" "new-context" "let" "effective-font" "set-font" "get-position" "pos" "line-draw-selected?" "selected?" "row-spacing" "+" "total-height" "get-height" "height" "get-width" "width" "let*" "line" "row" "draw-row" "bottom" "top" "draw-rows" "define" "sc?" "sc" "sv" "sh" "lv" "lh" "clipper" "context" "surface")}
        {Lisp-Entry "draw-empty" method #f 380 29 380 39 ("width" "rt" "sc?" "sc" "sv" "sh" "bottom" "top" "surface")}
        {Lisp-Entry "optimized-context" definition #f 386 14 386 31 ("0" "line:" "selected?:" "list")}
        {Lisp-Entry "optimize-context" definition #f 390 15 390 31 ("set-fourth!" "optimized-context" "set-second!" "line:" "selected?:" "cons" "if" "context" "line" "selected?")}
        {Lisp-Entry "on-prior" method #f 403 19 403 27 ("get-shift?" "prior-page" "evt")}
        {Lisp-Entry "prior-page" method #f 407 29 407 39 ("vert" "'vert" "get-page-size" "0" "Point" "new" "scroll" "evt")}
        {Lisp-Entry "on-next" method #f 411 19 411 26 ("get-shift?" "next-page" "evt")}
        {Lisp-Entry "next-page" method #f 415 29 415 38 ("vert" "'vert" "get-page-size" "-" "0" "Point" "new" "scroll" "evt")}
        {Lisp-Entry "get-line-size" method #f 419 20 419 33 ("8" "horz" "default-row-height" "vert" "case" "orientation")}
        {Lisp-Entry "scroll-invalidate" method #f 425 20 425 37 ("-" "follow" "dv" "dh")}
        {Lisp-Entry "row-class" method #f 434 29 434 38 ("Outline-Row")}
        {Lisp-Entry "add-row" method #f 438 18 438 25 ("update-father-control" "Rect" "0" "scroll-view" "-" "<" "layout-scrollee" "added-update-selection" "get-height" "display-height" "get-width" "display-width" "get-size" "display-size" "get-display" "display" "row-top" "top" "row->line" "line" "update-visible" "update-displayed" "get-effective-width" "update-visible-width-incremental" "visible-height" "node-height" "height" "let" "update-locked?" "not" "count-visible" "visible-count" "increase!" "row-visible?" "when" "add-son" "set-descendants-level" "default-row-height" "set-height-noevent" "self" "parent:" "new" "apply" "1" "get-level" "+" "level" "root-row" "or" "let*" "others" "position" "father" "row" "row-class" "class" "bind-keywords" "rest")}
        {Lisp-Entry "update-visible-width-incremental" method #f 469 29 469 61 ("width" "level")}
        {Lisp-Entry "remove-row" method #f 473 26 473 36 ("update-father-control" "detach-descendants" "Rect" "new" "-" "scroll-view" "<" "layout-scrollee" "get-height" "display-height" "get-width" "display-width" "get-size" "display-size" "get-display" "display" "update-visible" "update-displayed" "update-locked?" "not" "removed-update-selection" "collapsed" "'collapsed" "set-state" "0" "get-sons" "cardinality" "=" "remove-son" "visible-height" "count-visible" "1" "+" "visible-count" "decrease!" "row-top" "and" "top" "row->line" "line" "node-height" "height" "row-visible?" "visible?" "get-father" "father" "let*" "attached?" "when" "row")}
        {Lisp-Entry "move-row" method #f 503 18 503 26 ("father:" "row:" "add-row" "procedure?" "if" "let" "remove-row" "position" "position:" "father" "row")}
        {Lisp-Entry "find-ordered-position" method #f 509 18 509 39 ("smaller/equal" "'smaller/equal" "sort-predicate" "test:" "row-title" "key:" "get-sons" "ordered-position" "0" "not" "if" "father" "title")}
        {Lisp-Entry "remove-every-row" method #f 515 26 515 42 ("invalidate-view" "layout-scrollee" "update-displayed" "update-locked?" "unless" "horz" "'horz" "vert" "'vert" "set-scroll-pos" "Dimension" "set-size" "Point" "set-position" "scroller" "when" "selection" "visible-width" "visible-height" "0" "visible-count" "set!" "setup-outline")}
        {Lisp-Entry "update-father-control" method #f 532 29 532 50 ("father")}
        {Lisp-Entry "update-displayed" method #f 536 20 536 36 ("get-display-v" "outline" "update-displayed")}
        {Lisp-Entry "first-row" method #f 540 18 540 27 ("root-row" "get-sons" "first")}
        {Lisp-Entry "get-root-rows" method #f 544 18 544 31 ("root-row" "get-sons")}
        {Lisp-Entry "first-visible-row" method #f 548 18 548 35 ("root-row" "get-next")}
        {Lisp-Entry "get-row" method #f 552 18 552 25 ("get-row" "1" "+" "root-row" "outline" "get-row-from" "update-locked?" "if" "line")}
        {Lisp-Entry "get-visible-row" method #f 559 18 559 33 ("continuation-return" "=" "when" "line" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "l")}
        {Lisp-Entry "get-row-classic" method #f 570 11 570 26 ("decrease!" "get-next" "set!" "0" ">=" "and" "while" "root-row" "row" "let" "line")}
        {Lisp-Entry "row->line" method #f 578 18 578 27 ("continuation-return" "eq?" "when" "line" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "target")}
        {Lisp-Entry "rows->lines" method #f 588 18 588 29 ("row->line" "map" "targets")}
        {Lisp-Entry "row-title" method #f 592 18 592 27 ("first-child" "get-title" "row")}
        {Lisp-Entry "forward" method #f 596 11 596 18 ("decrease!" "get-next" "set!" "0" ">" "while" "line" "row")}
        {Lisp-Entry "backward" method #f 603 11 603 19 ("decrease!" "get-previous" "set!" "0" ">" "while" "line" "row")}
        {Lisp-Entry "ensure-row-exists" method #f 610 18 610 35 ("1" "+" "ensure-visible-count" "row")}
        {Lisp-Entry "ensure-visible-count" method #f 614 18 614 38 ("add-empty-row" "visible-count" "<" "while" "line")}
        {Lisp-Entry "add-empty-row" method #f 619 26 619 39 ("add-row" "root-row" "or" "let" "father" "father:")}
        {Lisp-Entry "line-selected?" method #f 624 29 624 43 ("selection" "=" "line")}
        {Lisp-Entry "line-draw-selected?" method #f 628 29 628 48 ("line-selected?" "line")}
        {Lisp-Entry "get-row-count" method #f 632 18 632 31 ("get-sons" "cardinality" "0" "root-row" "not" "if")}
        {Lisp-Entry "mouse-down" method #f 643 20 643 30 ("set-selection" "get-v" "v->row" "row" "let" "acquire-focus" "view")}
        {Lisp-Entry "double-click" method #f 649 20 649 32 ("get-row" "expand/collapse" "when" "get-v" "v->row" "row" "let" "view")}
        {Lisp-Entry "empty-selection" method #f 660 29 660 44 ()}
        {Lisp-Entry "get-selection" method #f 664 26 664 39 ("selection")}
        {Lisp-Entry "set-selection" method #f 668 26 668 39 ("call-selection-handler" "invalidate-selection" "not-null?" "ensure-displayed" "set!" "old" "let" "selection" "/=" "or" "when" "user-origin?" "user-origin?:" "generate-event?" "generate-event?:" "ensure-displayed?" "ensure-displayed?:" "force?" "force?:" "sel")}
        {Lisp-Entry "invalidate-selection" method #f 686 26 686 46 ("player" "invalidate-region" "selection-region" "region" "with" "self" "get-delta" "sc" "dv" "dh" "receive" "get-root" "root" "let" "view-visible?" "when" "sel")}
        {Lisp-Entry "selection-region" method #f 694 29 694 45 ("selection-row-region" "sc" "dv" "dh" "sel")}
        {Lisp-Entry "selection-row-region" method #f 698 21 698 41 ("selection-row-rect" "acquire-delta" "Region" "new" "sc" "dv" "dh" "line")}
        {Lisp-Entry "selection-row-rect" method #f 702 29 702 47 ("get-row" "get-rect" "line")}
        {Lisp-Entry "added-update-selection" method #f 707 29 707 51 ("increase!" ">=" "selection" "and" "when" "count" "line")}
        {Lisp-Entry "removed-update-selection" method #f 713 29 713 53 ("set!" "decrease!" "+" "if" ">=" "selected?" "let" "selection" "not-null?" "when" "count" "line")}
        {Lisp-Entry "for-each-row" method #f 729 18 729 30 ("root-row" "lambda" "get-sons" "iterate" "recurse-sons" "increase!" "when" "expanded?" "son-visible?" "get-visible-flag" "and" "let*" "visible?" "row" "recurse" "define" "0" "line" "let" "proc")}
        {Lisp-Entry "for-each-visible-row" method #f 747 18 747 38 ("for-each-visible-row" "not" "increase!" "set!" "neq?" "and" "while" "when" "0" "row->line" "if" "line" "root-row" "get-next" "or" "row" "let" "wrap?" "wrap?:" "end" "end:" "start" "start:" "proc")}
        {Lisp-Entry "for-each-visible-descendant" method #f 759 18 759 45 ("end:" "start:" "for-each-visible-row" "when" "get-next" "and" "end-row" "last-visible-descendant" "last-son" "first-visible-son" "first-son" "let*" "proc" "parent-row")}
        {Lisp-Entry "collect-visible-rows" method #f 767 18 767 38 ("queue-list" "enqueue" "line" "row" "lambda" "for-each-visible-row" "new-queue" "queue" "let")}
        {Lisp-Entry "get-content" method #f 780 26 780 37 ("root-row" "get-sons")}
        {Lisp-Entry "set-content" method #f 784 26 784 37 ("invalidate-view" "layout-scrollee" "update-displayed" "empty-selection" "set-selection" "sons-height" "visible-height" "count-visible" "visible-count" "set!" "invalidate-columns" "car" "set-next" "root-row" "set-sons" "content")}
        {Lisp-Entry "set-subrows" method #f 796 18 796 29 ("visible-height" "visible-count" "last-proper-descendant" "last" "link-rows" "first" "first-son" "get-next" "old-next" "expanded" "'expanded" "get-state" "eq?" "Axis" "coerce" "and" "set-sons" "get-row-height" "increase!" "set!" "set-next" "set-previous" "when" "set-level" "set-father" "subrow" "let" "info" "lambda" "map" "rows" "previous" "1" "get-level" "+" "level" "height" "0" "count" "root-row" "or" "let*" "empty?" "unless" "proc" "seq" "row")}
        {Lisp-Entry "invalidate-columns" method #f 827 26 827 44 ()}
        {Lisp-Entry "expand/collapse" method #f 836 26 836 41 ("collapse" "expanded" "expand" "collapsed" "get-state" "case" "row")}
        {Lisp-Entry "update-row" method #f 842 29 842 39 ("row")}
        {Lisp-Entry "expand" method #f 846 18 846 24 ("row-visible?" "show-rows" "in-expand?" "get-next" "next" "previous" "last-visible-descendant" "last" "first-descendant" "first" "let" "set-state" "expanded" "'expanded" "get-state" "neq?" "when" "dynamic?" "row")}
        {Lisp-Entry "invalidate-expand" method #f 858 29 858 46 ("dynamic?" "top" "row")}
        {Lisp-Entry "expand-all" method #f 862 18 862 28 ("expand-all" "get-sons" "iterate" "expand/collapse" "expanded" "'expanded" "get-state" "eq?" "unless" "lambda" "with-update-locked" "row")}
        {Lisp-Entry "collapse" method #f 870 18 870 26 ("row-visible?" "last-proper-descendant" "hide-rows" "invalidate-collapse" "line-selected?" "selected?" "get-position" "get-v" "top" "row->line" "line" "set-state" "not" "if" "in-collapse?" "first-descendant" "first" "let" "collapsed" "'collapsed" "get-state" "neq?" "when" "row")}
        {Lisp-Entry "collapse-selection" method #f 883 29 883 47 ("selected?" "line")}
        {Lisp-Entry "invalidate-collapse" method #f 887 29 887 48 ("line-rect" "invalidate-rect" "when" "selected?" "top" "row" "line")}
        {Lisp-Entry "collapse-all" method #f 892 18 892 30 ("expand/collapse" "expanded" "'expanded" "get-state" "eq?" "when" "collapse-all" "get-sons" "iterate" "lambda" "with-update-locked" "row")}
        {Lisp-Entry "link-rows" definition #f 900 15 900 24 ("set-previous" "set-next" "when" "after" "before")}
        {Lisp-Entry "unlink-rows" definition #f 907 15 907 26 ("set-next" "set-previous" "link-rows" "get-next" "next" "get-previous" "previous" "let" "last" "first")}
        {Lisp-Entry "ensure-expanded" method #f 915 18 915 33 ("set!" "expand" "collapsed" "'collapsed" "get-state" "eq?" "when" "while" "get-father" "scan" "let" "row")}
        {Lisp-Entry "ensure-expanded-rows" method #f 923 18 923 38 ("ensure-expanded" "for-each" "rows")}
        {Lisp-Entry "set-visibilities" method #f 933 18 933 34 ("set!" "link-rows" "when" "visible?" "row" "lambda" "get-sons" "iterate" "root-row" "previous" "let" "predicate")}
        {Lisp-Entry "show-rows" method #f 943 19 943 28 ("ensure-row-range-displayed" ">" "layout-scrollee" "Rect" "new" "scroll-view" "invalidate-expand" "get-scrolled-v" "<" "invalidate-view" "1" "added-update-selection" "display-height" "get-width" "display-width" "get-size" "display-size" "get-display" "display" "get-height" "+" "opens" "0" "get-position" "get-v" "top" "-1" "row->line" "or" "line" "let*" "update-visible" "update-displayed" "get-level" "update-visible-width-incremental" "visible-height" "visible-count" "increase!" "count-visible-size" "width" "height" "count" "receive" "update-locked?" "not" "and" "when" "link-rows" "dynamic?" "in-expand?" "visible?" "next" "previous" "last" "first")}
        {Lisp-Entry "hide-rows" method #f 972 19 972 28 ("layout-scrollee" "Rect" "new" "-" "scroll-view" "invalidate-collapse" "<" "invalidate-view" "collapse-selection" "display-height" "get-width" "display-width" "get-size" "display-size" "get-display" "display" "1" "removed-update-selection" "removed" "get-height" "+" "opens" "0" "get-position" "get-v" "top" "-1" "row->line" "or" "line" "let*" "update-visible" "update-displayed" "update-locked?" "not" "collapsed" "'collapsed" "set-state" "and" "unlink-rows" "get-previous" "previous" "let" "visible-height" "visible-count" "decrease!" "when" "count-visible-size" "width" "height" "count" "receive" "in-collapse?" "visible?" "last" "first")}
        {Lisp-Entry "count-visible-size" method #f 1002 18 1002 36 ("values" "set!" ">" "when" "get-effective-width" "w" "row-spacing" "get-effective-height" "+" "increase!" "neq?" "while" "width" "height" "0" "count" "get-next" "stop" "and" "scan" "let" "visible?" "last" "first")}
        {Lisp-Entry "follow" method #f 1023 11 1023 17 ("get-display-v" "outline" "follow" "v")}
        {Lisp-Entry "ensure-displayed" method #f 1027 26 1027 42 ("ensure-row-displayed" "selection" "not-null?" "when" "rest")}
        {Lisp-Entry "ensure-row-displayed" method #f 1032 18 1032 38 ("get-scroll-context" "0" "Point" "new" "scroll-needed" "scroll" "get-bottom" "bottom" "get-top" "top" "get-row" "row" "let*" "line")}
        {Lisp-Entry "ensure-row-range-displayed" method #f 1039 18 1039 44 ("get-scroll-context" "0" "Point" "new" "scroll-needed" "scroll" "get-bottom" "bottom" "get-row" "get-top" "top" "let" "to" "from")}
        {Lisp-Entry "ensure-at-end" method #f 1045 18 1045 31 ("1" "visible-count" "-" "ensure-row-displayed")}
        {Lisp-Entry "get-scroll-context" method #f 1049 29 1049 47 ("0.20" "0.15" "cons")}
        {Lisp-Entry "row-top" method #f 1060 21 1060 28 ("get-next" "set!" "row-spacing" "get-height" "increase!" "decrease!" ">" "while" "0" "v" "first-visible-row" "row" "let" "line")}
        {Lisp-Entry "line-rect" method #f 1071 29 1071 38 ("get-height" "+" "Rect" "new" "get-width" "right" "row-top" "top" "0" "left" "get-row" "row" "let" "line")}
        {Lisp-Entry "row-region" method #f 1079 11 1079 21 ("get-row" "get-bounds" "Region" "new" "line")}
        {Lisp-Entry "row->v" method #f 1083 21 1083 27 ("get-row" "get-top" "r")}
        {Lisp-Entry "v->row" method #f 1087 21 1087 27 ("height" "line" "lambda" "call-with-v->row" "v")}
        {Lisp-Entry "call-with-v->row" method #f 1093 21 1093 37 ("get-scrolled-v" "outline" "call-with-v->row" "proc" "v")}
        {Lisp-Entry "get-class-descriptor" method #f 1103 25 1103 45 ("Outline-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 1112 11 1112 17 ()
        {Lisp-Entry "Outline-View-Descriptor" class #f 1118 7 1118 30 ("fit-in-scroller?" "background-filler" "top-padding" "left-padding" "row-spacing" "title:" "default-row-height" "name:" "View-Descriptor")}}}})
"Overlapped"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "Overlapped.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.Overlapped" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Overlapped" class #f 44 7 44 17 ("initialize" "View-Player")
        {Lisp-Entry "owner" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-owner" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "set-owner" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "conclude" method #f 50 20 50 28 ("self" "register-overlapped" "nextmethod" "rest")}
        {Lisp-Entry "destroy" method #f 55 20 55 27 ("nextmethod" "self" "unregister-overlapped")}
        {Lisp-Entry "get-owners" method #f 65 18 65 28 ("get-owners" "cons" "self" "list" "owner" "not" "if")}}}})
"Pad-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Pad-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Pad-Preferences" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Pad-Preferences" class #f 45 20 45 35 ("Image-Resource" "icon:" "title:" "Figure-Preferences")
        {Lisp-Entry "apply-root" method #f 57 20 57 30 ("get-root" "apply-to" "offscreen?:" "Pad-View" "new" "set-root" "player")}
        {Lisp-Entry "apply-preferences" method #f 62 20 62 37 ("parent:" "Pad-View" "new" "apply-to" "assert" "parent")}
        {Lisp-Entry "apply-to" method #f 67 11 67 19 ("layout-view" "get-children" "get-guest" "host-install" "Host-View" "is?" "when" "child" "children" "apply-preferences" "pref" "lambda" "for-each" "get-visible?" "set-visible?" "location" "set-location" "remove-children" "pad")}
        {Lisp-Entry "get-class-descriptor" method #f 86 25 86 45 ("Pad-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 95 11 95 17 ()
        {Lisp-Entry "Pad-Preferences-Descriptor" class #f 101 7 101 33 ("location" "categorized:" "Image-Resource" "image:" "Figure-Preferences-Descriptor")
          {Lisp-Entry "component-get-addable-classes" method #f 109 20 109 49 ("Stage-Preferences" "Docked-Preferences" "Pad-Preferences" "Splitter-Preferences" "list" "component")}}}}})
"Pad-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Pad-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Pad-View" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Pad-View" class #f 43 7 43 15 ("View")
        {Lisp-Entry "size-change" method #f 51 20 51 31 ("layout-view" "nextmethod" "size")}
        {Lisp-Entry "layout" method #f 56 20 56 26 ("neq?" "children" "selection" "'selection" "get-location" "eq?" "when" "for-each" "set-size" "0" "Point" "set-position" "set-visible?" "visible?" "child" "lambda" "proc" "get-size" "size" "let*")}
        {Lisp-Entry "add-view" method #f 78 18 78 26 ("self" "set-parent" "view")}
        {Lisp-Entry "remove-view" method #f 82 18 82 29 ("set-parent" "view")}
        {Lisp-Entry "remove-children" method #f 86 18 86 33 ("children" "get-guest" "host-uninstall" "Host-View" "is?" "when" "set-parent" "set-visible?" "child" "lambda" "for-each")}
        {Lisp-Entry "get-selection" method #f 100 18 100 31 ("children" "selection" "'selection" "get-location" "eq?" "child" "lambda" "find-if")}
        {Lisp-Entry "set-selection" method #f 106 18 106 31 ("layout-view" "children" "selection" "'selection" "eq?" "if" "set-location" "child" "lambda" "for-each" "target")}
        {Lisp-Entry "select-next" method #f 113 18 113 29 ("get-host" "focus-host" "set-selection" "get-selection" "next-child" "next" "let")}}}})
"Page-Content"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Page-Content.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Page-Content" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Page-Content" class #f 45 20 45 32 ("White" "name:" "Color" "background:" "View")}}})
"Page-Document"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Page-Document.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Page-Document" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Page-Document" class #f 45 20 45 33 ("10" "0" "Rect" "layout-insets:" "border" "layout-type:" "White" "name:" "Color" "background:" "Layout-View")}}})
"Page-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Page-Editor.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Page-Editor" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Page-Editor" class #f 50 20 50 31 ("shadow" "border-type:" "664" "514" "Dimension" "size:" "0" "Point" "position:" "border" "Dark" "name:" "Color" "background:" "center" "layout-type:" "explicit" "initialize" "Layout-View")
        {Lisp-Entry "client" property #f 53 12 53 18 ()}
        {Lisp-Entry "host-workspaces" method #f 66 20 66 35 ("page")}
        {Lisp-Entry "find-page-setup" method #f 75 11 75 26 ("border" "'border" "locate" "first-child")}
        {Lisp-Entry "on-print" method #f 84 11 84 19 ("client" "print-document" "evt")}
        {Lisp-Entry "on-print-preview" method #f 88 11 88 27 ("from-layout?:" "client" "print-preview" "evt")}
        {Lisp-Entry "on-page-setup" method #f 92 11 92 24 ("page-setup" "evt")}
        {Lisp-Entry "on-layout" method #f 96 11 96 20 ("update-page" "child" "set-active-trait" "save-header/footer" "find-page-setup" "page-setup" "layout:" "get-property" "layout" "let" "evt")}
        {Lisp-Entry "on-fit" method #f 104 11 104 17 ("set-fit" "fit:" "get-property" "fit" "let" "evt")}
        {Lisp-Entry "set-fit" method #f 109 11 109 18 ("'fit" "set-property" "client" "get-page-setup-designer" "designer" "find-page-setup" "page-setup" "let" "fit")}
        {Lisp-Entry "on-close" method #f 115 11 115 19 ("close-workspace" "evt")}
        {Lisp-Entry "escape-press" method #f 119 20 119 32 ("close-workspace" "key")}
        {Lisp-Entry "activate-page" method #f 128 21 128 34 ("update-page" "setup-defaults" "install" "'install" "action:" "textual?:" "Form" "client-form:" "set-property" "set-name" "trait:" "add-child" "parent:" "Trait" "new" "trait" "find-component" "name" "child" "set-active-trait" "get-active-branch" "not" "when" "file" "'file" "printer" "'printer" "setup-trait" "client" "get-page-setup-designer" "designer" "find-page-setup" "page-setup" "let" "setup-traits" "define")}
        {Lisp-Entry "update-page" method #f 156 11 156 22 ("find-page-setup" "Page-Toolbar" "find-docked" "get-toplevel" "toplevel" "let*" "layout-view" "4" "Dimension" "get-size" "nu+" "set-size" "'border" "border" "update-border" "get-fit" "fit" "update-fit" "locate" "set-selected?" "get-active-trait-name" "name" "let" "page-setup" "toolbar" "update-branch" "define")}
        {Lisp-Entry "close-workspace" method #f 184 11 184 26 ("get-previous" "apply-preferences" "close" "restore-client" "save-header/footer" "selected-workspace" "workspace" "get-host" "frame" "let")}
        {Lisp-Entry "get-client" method #f 198 18 198 28 ("client")}
        {Lisp-Entry "set-client" method #f 202 18 202 28 ("set-parent" "4" "Dimension" "get-size" "nu+" "set-size" "printer" "'printer" "get-page-setup-for" "page-setup" "'border" "locate" "border" "let" "client" "set!" "value")}
        {Lisp-Entry "restore-client" method #f 210 21 210 35 ("set-parent" "find-page-setup" "page-setup" "let")}
        {Lisp-Entry "page-setup" method #f 222 15 222 25 ("update-page" "subtract-rects" "'paper-source" "'paper-size" "symbolize-orientation" "'orientation" "layout-insets" "'layout-insets" "'size" "set-property" "paper-source:" "paper-size:" "numerize-orientation" "orientation:" "add-rects" "scale" "margins:" "page-setup-dialog" "size" "receive" "client" "get-page-setup-designer" "designer" "setup-ratio" "1000" "/" "dialog-ratio" "margins" "get-layout-insets" "min-margins" "get-printable" "printable" "get-paper-source" "paper-source" "get-paper-size" "paper-size" "get-orientation" "orientation" "get-resolution" "resolution" "find-page-setup" "page-setup" "let*")}
        {Lisp-Entry "page-setup" method #f 243 14 243 24 ()}
        {Lisp-Entry "numerize-orientation" definition #f 249 19 249 39 ("DMORIENT_LANDSCAPE" "landscape" "DMORIENT_PORTRAIT" "portrait" "case" "orientation")}
        {Lisp-Entry "numerize-orientation" definition #f 254 19 254 39 ("orientation")}
        {Lisp-Entry "symbolize-orientation" definition #f 260 19 260 40 ("landscape" "'landscape" "DMORIENT_LANDSCAPE" "portrait" "'portrait" "DMORIENT_PORTRAIT" "ecase" "orientation")}
        {Lisp-Entry "symbolize-orientation" definition #f 265 19 265 40 ("orientation")}
        {Lisp-Entry "save-header/footer" method #f 274 11 274 29 ("get-content" "text-content:" "set-property" "get-footer" "footer" "get-header" "header" "when" "client" "get-page-setup-designer" "designer" "find-page-setup" "page-setup" "let")}}}})
"Page-Footer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Page-Footer.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Page-Footer" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Page-Footer" class #f 44 20 44 31 ("Page-Text-View")
        {Lisp-Entry "get-drawing-background" method #f 52 20 52 42 ("Light-Green" "name:" "Color" "nextmethod" "printing?:" "getf" "if" "context")}}}})
"Page-Header"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Page-Header.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Page-Header" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Page-Header" class #f 44 20 44 31 ("Page-Text-View")
        {Lisp-Entry "get-drawing-background" method #f 52 20 52 42 ("Light-Yellow" "name:" "Color" "nextmethod" "printing?:" "getf" "if" "context")}}}})
"Page-Printable"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Page-Printable.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Page-Printable" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Page-Printable" class #f 44 20 44 34 ("Layout-View")
        {Lisp-Entry "get-drawing-background" method #f 52 20 52 42 ("Light-Purple" "name:" "Color" "nextmethod" "printing?:" "getf" "if" "context")}}}})
"Page-Setup"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Page-Setup.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Page-Setup" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Page-Setup" class #f 47 20 47 30 ("south" "footer" "center" "content" "north" "location:" "19" "100" "header" "document" "50" "printable" "White" "name:" "Color" "background:" "10" "Rect" "layout-insets:" "fill" "layout-type:" "660" "510" "Dimension" "size:" "DMBIN_AUTO" "DMPAPER_LETTER" "portrait" "'portrait" "60" "width" "'width" "initialize" "Layout-View")
        {Lisp-Entry "fit" property #f 50 12 50 15 ()}
        {Lisp-Entry "get-fit" accessor #f 50 61 50 69 ()}
        {Lisp-Entry "set-fit" accessor #f 50 61 50 69 ()}
        {Lisp-Entry "resolution" property #f 51 12 51 22 ()}
        {Lisp-Entry "get-resolution" accessor #f 51 61 51 69 ()}
        {Lisp-Entry "set-resolution" accessor #f 51 61 51 69 ()}
        {Lisp-Entry "orientation" property #f 52 12 52 23 ()}
        {Lisp-Entry "get-orientation" accessor #f 52 61 52 69 ()}
        {Lisp-Entry "set-orientation" accessor #f 52 61 52 69 ()}
        {Lisp-Entry "paper-size" property #f 53 12 53 22 ()}
        {Lisp-Entry "get-paper-size" accessor #f 53 61 53 69 ()}
        {Lisp-Entry "set-paper-size" accessor #f 53 61 53 69 ()}
        {Lisp-Entry "paper-source" property #f 54 12 54 24 ()}
        {Lisp-Entry "get-paper-source" accessor #f 54 61 54 69 ()}
        {Lisp-Entry "set-paper-source" accessor #f 54 61 54 69 ()}
        {Lisp-Entry "get-printable" method #f 71 18 71 31 ("printable" "'printable" "locate")}
        {Lisp-Entry "get-document" method #f 80 18 80 30 ("document" "'document" "locate")}
        {Lisp-Entry "get-header" method #f 89 18 89 28 ("header" "'header" "locate")}
        {Lisp-Entry "get-content" method #f 98 18 98 29 ("content" "'content" "locate")}
        {Lisp-Entry "get-content-rect" method #f 102 18 102 34 ("get-bounds" "acquire" "get-content" "content" "let")}
        {Lisp-Entry "scale-content" method #f 107 18 107 31 ("resolution" "fit" "fit-rects" "*" "/" "get-content-rect" "content-rect" "get-print-area" "area" "let" "dest-resolution" "client")}
        {Lisp-Entry "get-footer" method #f 118 18 118 28 ("footer" "'footer" "locate")}
        {Lisp-Entry "wrap-header/footer" method #f 127 18 127 36 ("get-footer" "get-header" "wrap-content" "context")}
        {Lisp-Entry "get-drawing-background" method #f 137 20 137 42 ("255" "blue:" "green:" "193" "red:" "Color" "nextmethod" "printing?:" "getf" "if" "context")}}}})
"Page-Status"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Page-Status.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Page-Status" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Page-Status" class #f 45 20 45 31 ("center" "location:" "20" "782" "Dimension" "size:" "message" "name:" "Status-Toolbar")
        {Lisp-Entry "host-icon" method #f 58 25 58 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 62 25 62 35 ()}}}})
"Page-Text-Palette"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Page-Text-Palette.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Page-Text-Palette" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Page-Text-Palette" class #f 45 20 45 37 ("on-insert-time" "insert-time" "on-insert-date" "insert-date" "on-insert-count" "insert-count" "on-insert-no" "insert-no" "on-insert-filename" ":focus" "Event-Handler" "action-handler:" "enabled?:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "insert-filename" "insert-table" "table-separator" "insert-image" "image-separator" "toggle-ruler" "ruler-separator" "visible?:" "style-border" "name:" "Text-Palette")
        {Lisp-Entry "enable-buttons" method #f 65 20 65 34 ("insert-time" "'insert-time" "insert-date" "'insert-date" "insert-count" "'insert-count" "insert-no" "'insert-no" "insert-filename" "'insert-filename" "locate" "set-enabled?" "nextmethod" "enabled?")}}}})
"Page-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Page-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Page-Text-View" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Page-Text-View" class #f 45 20 45 34 ("Text" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "0" "left-padding:" "Formatted-Text-View")
        {Lisp-Entry "scrollee-height" method #f 52 20 52 35 ("visible-height" "top-padding" "+")}
        {Lisp-Entry "layout-scrollee-content" method #f 56 20 56 43 ("parent" "layout-view" "nextmethod")}
        {Lisp-Entry "get-context-menu" method #f 61 20 61 36 ("new-text-context-menu")}
        {Lisp-Entry "on-insert-filename" method #f 70 11 70 29 ("filename" "'filename" "insert-info" "evt")}
        {Lisp-Entry "on-insert-no" method #f 74 11 74 23 ("no" "'no" "insert-info" "evt")}
        {Lisp-Entry "on-insert-count" method #f 78 11 78 26 ("count" "'count" "insert-info" "evt")}
        {Lisp-Entry "on-insert-date" method #f 82 11 82 25 ("date" "'date" "insert-info" "evt")}
        {Lisp-Entry "on-insert-time" method #f 86 11 86 25 ("time" "'time" "insert-info" "evt")}
        {Lisp-Entry "insert-info" method #f 95 11 95 22 ("insert-styled" "what:" "Default" "'Default" "base:" "Info-Style" "new" "style" "let" "what")}}}})
"Page-Toolbar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Page-Toolbar.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Page-Toolbar" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Page-Toolbar" class #f 46 20 46 32 ("on-close" "60" "close" "14" "height" "width" "fit:" "on-fit" "selected?:" "tooltip?:" ":images" "portfolio:" "both" "on-page-setup" "page-setup" "38" "file" ":layout" "on-layout" "22" "56" "title:" "printer" "0" "12" "Dimension" "size:" "active-separator" "on-print-preview" "print-preview" "on-print" ":document" "Event-Handler" "action-handler:" "Image-Resource" "resource:" "tooltip-text:" "print" "name:" "Toolbar")
        {Lisp-Entry "install" method #f 66 20 66 27 ("file" "'file" "printer" "'printer" "active-separator" "'active-separator" "locate" "set-visible?" "nextmethod" "rest")}
        {Lisp-Entry "client-activate" method #f 74 20 74 35 ("activate-page" "when" "Page-Editor" "find-frame-guest" "editor" "let")}
        {Lisp-Entry "host-icon" method #f 85 25 85 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 89 25 89 35 ()}}}})
"Page-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Page-Workspace.jazz"} 1290011726
    {Lisp-Entry "jazz.ui.print.Page-Workspace" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Page-Workspace" class #f 45 20 45 34 ("Page-Text-Palette" "-32" "status" "Page-Status" "-23" "line" "second" "text" "Page-Toolbar" "model:" "first" "vert" "orientation:" "27" "division:" "edge" "separator:" "root" "location:" "toolbar" "name:" "Image-Resource" "icon:" "title:" "initialize" "Workspace-Preferences")
        {Lisp-Entry "previous" property #f 48 12 48 20 ()}
        {Lisp-Entry "get-previous" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "set-previous" accessor #f 48 45 48 53 ()}}}})
"Paint-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Paint-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Paint-Event" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Paint-Event" class #f 43 7 43 18 ("Event")
        {Lisp-Entry "surface" slot #f 46 8 46 15 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("surface~self" "set!" "nextmethod" "surface" "sender" "kind")}
        {Lisp-Entry "get-dc" method #f 54 18 54 24 ("surface")}
        {Lisp-Entry "get-hdc" method #f 58 18 58 25 ("surface" "get-hdc")}}}})
"Palette"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "Palette.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.Palette" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Palette" class #f 47 7 47 14 ("hide" "close-behavior:" "Overlapped")
        {Lisp-Entry "default-parent" method #f 59 20 59 34 ("palette-parent")}
        {Lisp-Entry "new-root" method #f 68 20 68 28 ("offscreen?:" "Palette-Host" "new")}
        {Lisp-Entry "mouse-activate?" method #f 77 20 77 35 ()}}}})
"Palette-Host"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "hosting" "Palette-Host.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.hosting.Palette-Host" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Palette-Host" class #f 45 20 45 32 ("Medium" "name:" "Color" "background:" "Host-View")
        {Lisp-Entry "on-close" method #f 57 11 57 19 ("player" "hide" "evt")}
        {Lisp-Entry "dock-palette" method #f 67 11 67 23 ("dock-feedback" "highlight:" "get-toplevel" "list" "include:" "dock-to" "click:" "pick-figure")}
        {Lisp-Entry "dock-feedback" method #f 74 11 74 24 ("figure-rect" "self" "set-feedback-rect" "pos" "figure" "picker")}
        {Lisp-Entry "figure-rect" method #f 79 16 79 27 ("get-bounds" "get-parent" "acquire" "get-root" "root" "get-display" "display" "get-player" "player" "let" "View" "is?" "when" "figure" "picker")}
        {Lisp-Entry "dock-to" method #f 88 11 88 18 ("set-selection" "set-guest" "set-title" "parent:" "Docked-Host" "new" "new-host" "close" "unanchor-guest" "set-parent" "get-title" "title" "guest" "player" "let*" "null?" "Pad-Window" "find-ascendant" "to-pad" "get-guest" "to-guest" "bell" "Host-View" "is-not?" "if" "get-player" "to-player" "let" "pos" "to-view")}}
      {Lisp-Entry "Palette-Menu" class #f 114 7 114 19 ("on-dock" ":form" "Event-Handler" "action-handler:" "title:" "dock" "name:" "Context-Menu")
        {Lisp-Entry "on-dock" method #f 122 11 122 18 ("dock-palette" "evt")}}}})
"Palette-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Palette-Preferences.jazz"} 1290095300
    {Lisp-Entry "jazz.ui.preference.Palette-Preferences" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Palette-Preferences" class #f 46 20 46 39 ("Image-Resource" "icon:" "Figure-Preferences")
        {Lisp-Entry "apply-preferences" method #f 58 20 58 37 ("set-visible?" "client-activate" "nextmethod" "client")}}}})
"Paragraph"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Paragraph.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Paragraph" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Paragraph" class #f 48 7 48 16 ("initialize" "Outline-Row")
        {Lisp-Entry "format" slot #f 51 18 51 24 ()}
        {Lisp-Entry "get-format" accessor #f 51 58 51 66 ()}
        {Lisp-Entry "set-format" accessor #f 51 58 51 66 ()}
        {Lisp-Entry "string" slot #f 52 18 52 24 ()}
        {Lisp-Entry "get-string" accessor #f 52 58 52 66 ()}
        {Lisp-Entry "set-string" accessor #f 52 58 52 66 ()}
        {Lisp-Entry "runs" slot #f 53 18 53 22 ()}
        {Lisp-Entry "get-runs" accessor #f 53 58 53 66 ()}
        {Lisp-Entry "set-runs" accessor #f 53 58 53 66 ()}
        {Lisp-Entry "lines" slot #f 54 18 54 23 ()}
        {Lisp-Entry "get-lines" accessor #f 54 58 54 66 ()}
        {Lisp-Entry "set-lines" accessor #f 54 58 54 66 ()}
        {Lisp-Entry "print" method #f 57 20 57 25 ("string" "write" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "set-size" method #f 65 20 65 28 ("size" "set!" "sz")}
        {Lisp-Entry "get-length" method #f 74 18 74 28 ("string" "cardinality" "cast")}
        {Lisp-Entry "paragraph-left" method #f 78 18 78 32 ("format" "get-left-margin" "position" "get-h" "+")}
        {Lisp-Entry "paragraph-top" method #f 82 18 82 31 ("position" "get-v")}
        {Lisp-Entry "compute-width" method #f 91 18 91 31 ("runs" "compute-width" "increase!" "run" "lambda" "for-each" "format" "get-left-margin" "width" "let")}
        {Lisp-Entry "range-region" method #f 105 21 105 33 ("'or" "combine!" "self" "if" "range-region" "sub" "with" "limit" "lambda" "for-each-logical-range" "w" "e" "col->text" "s" "else" "offset-rect" "offset" "get-bottom" "get-top" "-" "right" "col->view" "get-h" "beginning" "lines" "last" "line" "let*" "keep-rectangles" "acquire-delta" "Region" "region" "get-height" "+" "Rect" "new" "rect" "not" "=" "and" "cond" "size" "get-width" "width" "paragraph-top" "top" "paragraph-left" "left" "string" "cardinality" "re" "0" "or" "rs" "let" "sc" "dv" "dh" "end" "start" "left-padding")}
        {Lisp-Entry "for-each-logical-range" method #f 141 11 141 33 ("else" "cond" "get-length" "len" "line" "let*" "to" "from" "n" "for" "loop" "limit" "beginning" "let" "get-col" "get-line" "=" "if" "/=" "when" "proc" "ignored" "end" "start")}
        {Lisp-Entry "get-line" method #f 160 18 160 26 ("lines" "element" "n")}
        {Lisp-Entry "get-line-at" method #f 164 18 164 29 ("col->text" "get-line" "col")}
        {Lisp-Entry "get-run" method #f 173 18 173 25 ("continuation-return" "<=" ">" "and" "when" "limit" "offset" "run" "runs" "for-each-run" "return" "lambda" "continuation-capture" "col")}
        {Lisp-Entry "first-run" method #f 183 18 183 27 ("car" "runs" "null?" "if")}
        {Lisp-Entry "range-runs" method #f 189 21 189 31 ("get-output" "right" "left" "over" "put" "inside" "case" "limit" "offset" "where" "for-each-range-run" "get-style" "string" "subseq!" "Run" "e" "s" "run" "lambda" "make" "List-Factory" "new" "fact" "let" "end" "start")}
        {Lisp-Entry "for-each-run" definition #f 208 15 208 27 ("set!" "+" "limit" "get-length" "len" "let*" "run" "lambda" "for-each" "0" "offset" "let" "proc" "runs")}
        {Lisp-Entry "for-each-range-run" method #f 226 11 226 29 ("right" "'right" "else" "left" "'left" "over" "'over" ">" "<" "inside" "'inside" "and" "outside" "'outside" ">=" "<=" "or" "cond" "limit" "offset" "run" "lambda" "runs" "for-each-run" "proc" "end" "start")}
        {Lisp-Entry "set-style" method #f 249 21 249 30 ("s" "lambda" "modify-style" "style" "end" "start")}
        {Lisp-Entry "set-text-alignment" method #f 255 21 255 39 ("set-alignment" "extend" "let" "style" "lambda" "modify-style" "alignment" "end" "start")}
        {Lisp-Entry "set-text-font" method #f 263 21 263 34 ("set-font" "extend" "let" "style" "lambda" "modify-style" "font" "end" "start")}
        {Lisp-Entry "set-text-color" method #f 271 21 271 35 ("set-color" "extend" "let" "style" "lambda" "modify-style" "color" "end" "start")}
        {Lisp-Entry "set-highlight-color" method #f 279 21 279 40 ("set-highlight" "extend" "let" "style" "lambda" "modify-style" "color" "end" "start")}
        {Lisp-Entry "set-font-name" method #f 287 21 287 34 ("set-font" "get-font" "extend-font-name" "font" "extend" "let*" "font:" "supports?" "when" "style" "lambda" "modify-style" "name" "end" "start")}
        {Lisp-Entry "set-point-size" method #f 297 21 297 35 ("set-font" "get-font" "extend-point-size" "font" "extend" "let*" "font:" "supports?" "when" "style" "lambda" "modify-style" "size" "end" "start")}
        {Lisp-Entry "toggle-bold" method #f 307 21 307 32 ("set-font" "get-font" "toggle-bold" "font" "extend" "let*" "style" "lambda" "modify-style" "end" "start")}
        {Lisp-Entry "toggle-italic" method #f 316 21 316 34 ("set-font" "get-font" "toggle-italic" "font" "extend" "let*" "style" "lambda" "modify-style" "end" "start")}
        {Lisp-Entry "toggle-underline" method #f 325 21 325 37 ("set-font" "get-font" "toggle-underline" "font" "extend" "let*" "style" "lambda" "modify-style" "end" "start")}
        {Lisp-Entry "modify-style" method #f 334 11 334 23 ("get-output" "coalesce-runs" "runs" "set!" "right" "left" "over" "inside" "put" "outside" "case" "limit" "offset" "where" "for-each-range-run" "intern-style" "new-style" "style" "make" "get-style" "subseq!" "Run" "e" "s" "run" "lambda" "split" "List-Factory" "new" "fact" "string" "cardinality" "0" "or" "parent" "text" "let*" "proc" "end" "start")}
        {Lisp-Entry "remove-coloring" method #f 367 21 367 36 ("runs" "set!" "set-style" "get-color" "Text-Style" "is?" "and" "when" "get-style" "style" "run" "lambda" "for-each" "modified?" "parent" "text" "let" "default-style")}
        {Lisp-Entry "coalesce-runs" definition #f 379 15 379 28 ("set-cdr!" "cardinality" "cast" "get-string" "grow-subseq!" "set!" "propagate?" "not" "neq?" "or" "get-style" "previous-style" "car" "previous-run" "not-null?" "while" "cdr" "scan" "previous" "let" "null?" "if" "runs")}
        {Lisp-Entry "flatten" method #f 400 21 400 28 ("get-height" "row-height" "list" "lines" "set!" "0" "runs" "parent" "Line" "new" "line" "let")}
        {Lisp-Entry "wrap" method #f 406 21 406 25 ("+" "row-height" "lines~self" "wrap" "get-length" "increase!" "set!" "reset" "height-update" "for-each" "get-height" "height" "Line" "line" "tail" "'tail" "justify" "center" "centered" "case" "line-left" "get-output" "runs" "right" "break-line" "put" "run" "lambda" "place" "lruns" "List-Factory" "new" "lines" "get-tabs" "tabs" "top" "left" "get-paragraph-spacing" "spacing" "get-left-margin" "margin" "format" "get-justification" "justification" "offset" "0" "rank" "parent" "text" "let*" "width" "context")}
        {Lisp-Entry "Bullet-Outside" definition #f 447 14 447 28 ("Blue" "name:" "Color")}
        {Lisp-Entry "Bullet-Inside" definition #f 450 14 450 27 ("255" "blue:" "102" "green:" "51" "red:" "Color")}
        {Lisp-Entry "draw" method #f 454 20 454 24 ("increase!" "draw-line" "line" "lambda" "for-each" "get-bulleted?" "0" "get-left-margin" "get-tabs" "tabs" "parent" "text" "Rect" "new" "ellipse" "7" "set!" "8" "=" "when" "1" "2" "-" "fxround/" "+" "vert" "Bullet-Inside" "get-bullet-inside" "inside" "Bullet-Outside" "format" "get-bullet-outside" "or" "outside" "40" "percent" "fxround" "size" "lines" "car" "get-height" "height" "let*" "left" "v" "h" "draw-bullet" "define" "lv" "lh" "context" "surface")}
        {Lisp-Entry "replace-range" method #f 484 21 484 34 ("append!" "coalesce-runs" "set-string" "limit" "offset" "for-each-run" "list" ">" "replacement-list" "subseq!" "Run" "new" "replacement" "replace-subseq!" "set!" "propagate-styles?" "not-null?" "and" "if" "get-length" "after" "0" "range-runs" "before" "-" "delta" "+" "new-end" "string" "or" "cardinality" "inserted" "text" "let*" "parent" "get-default-style" "continuation-return" "propagate?" "when" "get-style" "style" "let" "run" "for-each-reversed" "return" "lambda" "continuation-capture" "runs" "find-propagatable-style" "define" "str" "end" "start")}
        {Lisp-Entry "replace-runs" method #f 518 21 518 33 ("append!" "coalesce-runs" "self" "get-view" "set-parent" "View-Style" "is?" "when" "get-style" "style" "subseq!" "set-string" "limit" "offset" "for-each-run" "replace-subseq!" "set!" "get-length" "after" "0" "range-runs" "before" "-" "delta" "+" "new-end" "string" "or" "cardinality" "inserted" "str" "let*" "get-output-string" "get-string" "display" "run" "lambda" "for-each" "open-output-string" "printer" "let" "runs" "runs->str" "define" "replacement" "end" "start")}
        {Lisp-Entry "replace-beginning" method #f 549 21 549 38 ("0" "replace-runs" "runs")}
        {Lisp-Entry "replace-ending" method #f 553 21 553 35 ("replace-runs" "string" "cardinality" "cast" "len" "let" "runs")}
        {Lisp-Entry "view->col" method #f 564 21 564 30 ("get-length" "lines" "get-offset" "+" "continuation-return" "when" "view->col" "col" "line" "for-each" "return" "lambda" "continuation-capture" "get-v" "format" "get-left-margin" "get-h" "-" "Point" "new" "let" "view")}
        {Lisp-Entry "col->view" method #f 576 21 576 30 ("get-v" "get-h" "paragraph-left" "+" "Point" "new" "continuation-return" "when" "get-offset" "-" "col->view" "view" "neq?" "strict?" "let*" "line" "for-each" "return" "lambda" "continuation-capture" "lines" "last" "let" "col")}
        {Lisp-Entry "col->view-extended" method #f 588 21 588 39 ("get-v" "get-h" "paragraph-left" "+" "Point" "new" "cons" "continuation-return" "when" "get-offset" "-" "col->view" "view" "neq?" "strict?" "let*" "line" "for-each" "return" "lambda" "continuation-capture" "lines" "last" "let" "col")}
        {Lisp-Entry "col->text" method #f 600 21 600 30 ("get-length" "get-rank" "Cell" "new" "lines" "set!" "continuation-return" "when" "col->text" "text" "line" "for-each" "return" "lambda" "continuation-capture" "last" "let" "col")}
        {Lisp-Entry "text->col" method #f 613 21 613 30 ("text")}
        {Lisp-Entry "view->text" method #f 618 21 618 31 ("view->col" "col->text" "view")}
        {Lisp-Entry "text->view" method #f 623 21 623 31 ("text->col" "col->view" "text")}}}})
"Password-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "Password-Request.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.Password-Request" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Password-Request" class #f 44 20 44 36 ("prefix" "name:" "title:" "String-Request")}}})
"Password-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Password-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Password-Text-View" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Password-Text-View" class #f 46 7 46 25 ("top-padding:" "2" "left-padding:" "Password" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Text-View")
        {Lisp-Entry "copy-selection" method #f 53 20 53 34 ("bell")}
        {Lisp-Entry "get-context-menu" method #f 57 20 57 36 ("new-text-context-menu")}
        {Lisp-Entry "draw-outline" method #f 61 20 61 32 ("draw-caret" "draw-password" "draw-selection" "unless" "printing?:" "getf" "printing?" "bottom" "top" "let" "sc?" "sc" "sv" "sh" "lv" "lh" "clipper" "context" "surface")}
        {Lisp-Entry "draw-password" method #f 72 11 72 24 ("view-enabled?" "draw-text" "Black" "name:" "Color" "set-text-color" "set-font" "-" "get-v" "+" "v" "get-h" "h" "get-font" "font" "get-default-style" "style" "effective-font" "get-metrics" "font-height" "get-height" "height" "get-position" "pos" "cardinality" "make-string" "hidden" "get-string" "password" "0" "get-paragraph" "paragraph" "let*" "surface")}}}})
"Pathname-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "Pathname-Request.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.dialog.Pathname-Request" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Pathname-Request" class #f 47 20 47 36 ("self" "History-Manager" "new" "initialize" "5" "on-cancel" "cancel" "on-ok" ":host" "default?:" "enabled?:" "24" "80" "tail" "ok" "south" "36" "buttonbar" "toplevel-controls?:" "235" "width:" "title:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "name" "filled-column:" "content" "fill" "vscroll?:" "hscroll?:" "document" "entry" "style:" "edge" "border-type:" "center" "content-border" "hierarchy" "Dark" "Medium" "Color" "border-color:" "1" "3" "border-insets:" "200" "2" "on-up" "up" "on-forward" "forward" "on-backward" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "backward" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "toolbar" "name:" "border" "layout-type:" "300" "500" "Dimension" "size:" "History-Provider" "Layout-View")
        {Lisp-Entry "directory" property #f 72 12 72 21 ()}
        {Lisp-Entry "get-directory" accessor #f 72 47 72 55 ()}
        {Lisp-Entry "set-directory" accessor #f 72 47 72 55 ()}
        {Lisp-Entry "filenames" property #f 73 12 73 21 ()}
        {Lisp-Entry "extensions" property #f 74 12 74 22 ()}
        {Lisp-Entry "anchors" property #f 75 12 75 19 ()}
        {Lisp-Entry "history-manager" slot #f 78 8 78 23 ()}
        {Lisp-Entry "finish" method #f 81 20 81 26 ("update" "setup-directory" "nextmethod" "rest")}
        {Lisp-Entry "setup-directory" method #f 87 11 87 26 ("get-current-directory" "set!" "directory" "not" "when")}
        {Lisp-Entry "focus-default" method #f 92 20 92 33 ("get-tree" "acquire-focus")}
        {Lisp-Entry "get-tree" method #f 101 11 101 19 ("content" "'content" "locate")}
        {Lisp-Entry "get-hierarchy" method #f 105 11 105 24 ("hierarchy" "'hierarchy" "locate")}
        {Lisp-Entry "install-directory" method #f 109 18 109 35 ("update" "set-directory" "directory" "History-Directory" "new" "history-manager" "add-history" "dir")}
        {Lisp-Entry "update" method #f 120 29 120 35 ("update-buttons" "update-content" "update-history" "update-hierarchy")}
        {Lisp-Entry "update-hierarchy" method #f 127 11 127 27 ("set-value" "directory" "get-hierarchy" "reverse" "get-name" "list" "pathname" "lambda" "map" "set-choices" "hierarchy" "'hierarchy" "locate" "combo" "let")}
        {Lisp-Entry "update-history" method #f 135 11 135 25 ("'forward" "not-null?" "'backward" "locate" "set-enabled?" "get-forward-history" "forward" "history-manager" "get-backward-history" "backward" "let")}
        {Lisp-Entry "update-content" method #f 142 29 142 43 ()}
        {Lisp-Entry "update-buttons" method #f 146 29 146 43 ("up" "'up" "locate" "set-enabled?" "get-directory" "get-parent" "parent" "let")}
        {Lisp-Entry "add-pathname" method #f 151 11 151 23 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "Image-Resource" "directory?" "image" "title" "let" "get-extension" "ci=?" "test:" "get-name" "member?" "filenames" "and" "file?" "when" "cdr" "string?" "not" "or" "if" "extension" "effective-extension" "map" "extensions" "effective-extensions" "define" "pathname" "tree")}
        {Lisp-Entry "get-modal-result" method #f 173 20 173 36 ("selected-pathname" "anchorize" "directory" "get-directory" "set-current-directory")}
        {Lisp-Entry "down" method #f 183 11 183 15 ("install-directory" "dir")}
        {Lisp-Entry "current-history-item" method #f 192 20 192 40 ("directory" "History-Directory" "new")}
        {Lisp-Entry "update-history-actions" method #f 196 20 196 42 ()}
        {Lisp-Entry "on-backward" method #f 205 11 205 22 ("update" "history-manager" "go-backward-history" "get-directory" "set-directory" "evt")}
        {Lisp-Entry "on-forward" method #f 210 11 210 21 ("update" "history-manager" "go-forward-history" "get-directory" "set-directory" "evt")}
        {Lisp-Entry "on-up" method #f 215 11 215 16 ("get-directory" "get-parent" "install-directory" "evt")}
        {Lisp-Entry "hierarchy-change" method #f 219 29 219 45 ("install-directory" "dir")}
        {Lisp-Entry "selection-change" method #f 223 29 223 45 ("update-buttons")}
        {Lisp-Entry "default-action" method #f 227 29 227 43 ()}
        {Lisp-Entry "ok-enabled?" method #f 231 11 231 22 ("ok" "'ok" "locate" "get-enabled?")}
        {Lisp-Entry "on-double-click" method #f 235 11 235 26 ("default-action" "evt")}
        {Lisp-Entry "on-return-press" method #f 240 20 240 35 ("default-action" "evt")}
        {Lisp-Entry "on-escape-press" method #f 245 20 245 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "selected-pathname" method #f 255 11 255 28 ("get-tree" "get-single-selected-data")}
        {Lisp-Entry "anchorize" method #f 259 11 259 20 ("anchors" "anchors:" "anchorize" "pathname")}}
      {Lisp-Entry "Hierarchy-Combo" class #f 268 7 268 22 ("Combo-Box")
        {Lisp-Entry "content-change" method #f 271 20 271 34 ("get-value" "get-host" "get-guest" "hierarchy-change" "origin")}}
      {Lisp-Entry "History-Directory" class #f 280 7 280 24 ("History-Item")
        {Lisp-Entry "directory" slot #f 283 8 283 17 ()}
        {Lisp-Entry "get-directory" accessor #f 283 25 283 33 ()}
        {Lisp-Entry "initialize" method #f 286 20 286 30 ("directory~self" "set!" "nextmethod" "directory")}
        {Lisp-Entry "print" method #f 291 20 291 25 ("directory" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "Content-Tree" class #f 302 7 302 19 ("Tree-View")
        {Lisp-Entry "selection-change" method #f 305 20 305 36 ("get-host" "get-guest" "selection-change" "user-origin?" "force?" "old-selection")}}}})
"Plain-Formatted-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Plain-Formatted-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Plain-Formatted-Text-View" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Plain-Formatted-Text-View" class #f 45 20 45 45 ("Text" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Formatted-Text-View")
        {Lisp-Entry "install" method #f 52 20 52 27 ("Variable" "Code" "Hyperlink-Style" "Dark-Blue" "Hyperlink" "Reference" "Dark-Red" "Color" "color:" "Font" "font:" "Text-Style" "add-style" "Heading5" "Heading4" "Heading3" "Heading2" "Heading1" "keep-with-next?:" "Default" "base:" "Heading0" "name:" "Format" "add-format" "nextmethod" "rest")}}}})
"Plain-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Plain-Text-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Plain-Text-Preferences" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Plain-Text-Preferences" class #f 46 20 46 42 ("Blue" "comment-style:" "Dark-Red" "color:" "Text-Style-Preference" "title-style:" "title:" "initialize" "Text-Preferences")
        {Lisp-Entry "title-style" property #f 49 12 49 23 ()}
        {Lisp-Entry "get-title-style" accessor #f 49 50 49 58 ()}
        {Lisp-Entry "set-title-style" accessor #f 49 50 49 58 ()}
        {Lisp-Entry "comment-style" property #f 50 12 50 25 ()}
        {Lisp-Entry "get-comment-style" accessor #f 50 50 50 58 ()}
        {Lisp-Entry "set-comment-style" accessor #f 50 50 50 58 ()}
        {Lisp-Entry "get-class-descriptor" method #f 65 25 65 45 ("Plain-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 74 11 74 17 ()
        {Lisp-Entry "Plain-Text-Preferences-Descriptor" class #f 80 7 80 40 ("title:" "name:" "comment-style" "title-style" "categorized:" "Document-Preferences-Descriptor")}}}})
"Plain-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Plain-Text-View.jazz"} 1289940794
    {Lisp-Entry "jazz.ui.text.Plain-Text-View" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Plain-Text-View" class #f 46 7 46 22 ("12" "left-padding:" "Code" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Text-View")
        {Lisp-Entry "external-name" method #f 53 25 53 38 ("plain-text" "'plain-text" "rest")}
        {Lisp-Entry "type-heuristic" method #f 57 11 57 25 ("c" "'c" "jazz" "'jazz" "starts-with?" "if" "0" "paragraph-string" "first-line" "let")}
        {Lisp-Entry "host-workspaces" method #f 69 20 69 35 ("text")}
        {Lisp-Entry "headers" constant #f 78 12 78 19 ("4" "make-string" "string-append" "list")}
        {Lisp-Entry "get-headers" method #f 83 20 83 31 ("headers")}
        {Lisp-Entry "default-preferences" definition #f 92 14 92 33 ("Purple" "comment-style:" "Dark-Red" "color:" "Text-Style-Preference" "title-style:" "instantiate")}
        {Lisp-Entry "preferences" method #f 100 20 100 31 ("default-preferences" "error?:" "plain-text" "documents" "get-preferences" "or")}}}})
"Popup"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "Popup.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.Popup" module #f 37 18 37 38 ("jazz")
      {Lisp-Entry "Popup" class #f 44 7 44 12 ("initialize" "Overlapped")
        {Lisp-Entry "initiator" slot #f 47 8 47 17 ()}
        {Lisp-Entry "get-initiator" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "set-initiator" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "conclude" method #f 55 20 55 28 ("destroy-mandatory" "nextmethod" "rest")}
        {Lisp-Entry "show" method #f 60 20 60 24 ("show-noactivate" "set-visible-flag")}
        {Lisp-Entry "destroy" method #f 70 20 70 27 ("nextmethod" "self" "popup-destroy" "initiator" "when")}
        {Lisp-Entry "mouse-activate?" method #f 81 20 81 35 ()}
        {Lisp-Entry "popup-key-press" method #f 90 26 90 41 ("popup-escape-press" "eqv?" "when" "char")}
        {Lisp-Entry "popup-escape-press" method #f 96 26 96 44 ("self" "close-popup" "char")}}}})
"Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Preferences" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Preferences" class #f 45 20 45 31 ("Image-Resource" "initialize" "Component")
        {Lisp-Entry "title" property #f 48 12 48 17 ()}
        {Lisp-Entry "get-title" accessor #f 48 71 48 79 ()}
        {Lisp-Entry "set-title" accessor #f 48 71 48 79 ()}
        {Lisp-Entry "icon" property #f 49 12 49 16 ()}
        {Lisp-Entry "get-icon" accessor #f 49 71 49 79 ()}
        {Lisp-Entry "set-icon" accessor #f 49 71 49 79 ()}
        {Lisp-Entry "apply-preferences" method #f 57 26 57 43 ("children" "apply-preferences" "child" "lambda" "for-each" "client")}
        {Lisp-Entry "save-preferences" method #f 68 26 68 42 ("children" "save-preferences" "child" "lambda" "for-each" "client" "designer")}
        {Lisp-Entry "set-property" method #f 74 18 74 30 ("self" "set-property" "value" "property" "designer")}
        {Lisp-Entry "get-class-descriptor" method #f 83 25 83 45 ("Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 92 11 92 17 ()
        {Lisp-Entry "Preferences-Descriptor" class #f 98 7 98 29 ("icon" "title" "name:" "Component-Descriptor")
          {Lisp-Entry "component-get-component-image" method #f 108 20 108 49 ("get-icon" "component")}
          {Lisp-Entry "component-presentation-property?" method #f 112 20 112 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 116 20 116 46 ("get-title" "component")}
          {Lisp-Entry "component-set-presentation" method #f 120 20 120 46 ("title:" "set-property" "title" "designer" "component")}
          {Lisp-Entry "component-display-property?" method #f 124 20 124 47 ("icon" "title" "visible?" "children" "before" "presentation-info" "name-info" "class-info" "field-name" "memq?" "not" "property" "component")}}}}})
"Preferences-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Preferences-Manager.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Preferences-Manager" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Preferences-Manager" class #f 49 20 49 39 ("Canvas-Manager")
        {Lisp-Entry "form-model" method #f 52 20 52 30 ("nextmethod" "else" "Preferences-Editor" "descendants" "get-name" "case" "form")}
        {Lisp-Entry "install-in-host" method #f 58 20 58 35 ("get-process" "apply-preferences" "when" "tool-preferences" "preferences" "let" "nextmethod" "host")}
        {Lisp-Entry "external-name" method #f 65 25 65 38 ("preferences-manager" "'preferences-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 74 25 74 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 78 25 78 35 ()}
        {Lisp-Entry "host-position" method #f 82 25 82 38 ()}
        {Lisp-Entry "host-size" method #f 86 25 86 34 ()}
        {Lisp-Entry "host-workspaces" method #f 90 20 90 35 ("home")}
        {Lisp-Entry "focus-default" method #f 99 20 99 33 ("acquire-focus" "descendants" "locate" "tree" "let")}
        {Lisp-Entry "install" method #f 109 20 109 27 ("get-preferences-root" "set-client" "get-application" "get-preferences-rights" "set-rights" "nextmethod" "rest")}
        {Lisp-Entry "new-controller" method #f 120 20 120 34 ("self" "Preferences-Manager-Controller" "new")}
        {Lisp-Entry "get-modified?" method #f 129 20 129 33 ()}
        {Lisp-Entry "tool-preferences" method #f 138 20 138 36 ("preferences-manager" "tools" "get-preferences")}
        {Lisp-Entry "confirm-close" method #f 147 20 147 33 ("save-session" "rest")}
        {Lisp-Entry "save-session" method #f 151 20 151 32 ("get-host" "save-preferences" "get-application" "get-preferences-designer" "designer" "tool-preferences" "pref" "let")}
        {Lisp-Entry "on-save-preferences" method #f 162 19 162 38 ("save" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-edit" method #f 168 19 168 26 ("Profile" "File" "edit-document" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-update" method #f 173 19 173 28 ("get-preferences-root" "set-client" "load-preferences" "get-process" "process" "let" "tree" "descendants" "locate" "set-selection" "evt")}
        {Lisp-Entry "show-properties" method #f 185 20 185 35 ("set-single-selection" "0" "get-visible-count" ">" "get-selection" "null?" "and" "when" "acquire-focus" "'tree" "locate" "tree" "bell" "not" "if" "get-card" "card" "let")}
        {Lisp-Entry "set-application-selection" method #f 201 11 201 36 ("force?" "selection")}
        {Lisp-Entry "close-application-selection" method #f 205 11 205 38 ()}}
      {Lisp-Entry "Preferences-Manager-Controller" class #f 214 7 214 37 ("Component-Editor-Controller")
        {Lisp-Entry "document-status" method #f 217 20 217 35 ()}}
      {Lisp-Entry "Preferences-Editor" class #f 226 7 226 25 ("Descendants-Editor")
        {Lisp-Entry "form-model" method #f 229 20 229 30 ("nextmethod" "else" "Preferences-Tree" "tree" "get-name" "case" "form")}}
      {Lisp-Entry "Preferences-Tree" class #f 240 7 240 23 ("reorderable?:" "draggable?:" ":images" "portfolio:" "Descendants-Tree")
        {Lisp-Entry "update-selection" method #f 247 20 247 36 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" method #f 251 20 251 29 ("collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "if" "level" "update?" "component")}}}})
"Preferences-Manager-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Preferences-Manager-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Preferences-Manager-Preferences" module #f 37 18 37 68 ("jazz")
      {Lisp-Entry "Preferences-Manager-Preferences" class #f 45 20 45 51 ("441" "791" "Dimension" "size:" "94" "54" "Point" "position:" "Image-Resource" "icon:" "title:" "Frame-Preferences")}}})
"Preview-Job"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Preview-Job.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Preview-Job" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Preview-Job" class #f 43 20 43 31 ("Print-Job")
        {Lisp-Entry "printed-page" method #f 51 20 51 32 ("page-setup")}
        {Lisp-Entry "print-landscape?" method #f 55 20 55 36 ()}}}})
"Preview-Page"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Preview-Page.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Preview-Page" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Preview-Page" class #f 46 20 46 32 ("explicit" "initialize" "View")
        {Lisp-Entry "client" property #f 49 12 49 18 ()}
        {Lisp-Entry "no" property #f 50 12 50 14 ()}
        {Lisp-Entry "dragging?" slot #f 53 8 53 17 ()}
        {Lisp-Entry "start-position" slot #f 54 8 54 22 ()}
        {Lisp-Entry "get-client" method #f 62 18 62 28 ("client")}
        {Lisp-Entry "set-client" method #f 66 18 66 28 ("invalidate-view" "client" "set!" "value")}
        {Lisp-Entry "get-no" method #f 71 18 71 24 ("no")}
        {Lisp-Entry "set-no" method #f 75 18 75 24 ("invalidate-view" "no" "set!" "value")}
        {Lisp-Entry "get-pane" method #f 80 11 80 19 ("get-guest")}
        {Lisp-Entry "cursor-update" method #f 89 20 89 33 (":arrow" ":opened-hand" ":closed-hand" "set-cursor" "get-mouse-down?" "hscroll-needed?" "vscroll-needed?" "or" "if" "'scrollee" "locate" "scrollee" "get-pane" "pane" "let*" "pos")}
        {Lisp-Entry "mouse-down" method #f 104 20 104 30 ("acquire-capture" "start-position" "dragging?" "set!" "pos")}
        {Lisp-Entry "drag-move" method #f 110 20 110 29 ("scroll" "'scrollee" "locate" "scrollee" "get-pane" "pane" "start-position" "nu-" "delta" "let*" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" method #f 118 20 118 27 ("set!" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "double-click" method #f 124 20 124 32 ("no" "set-start" "zoom" "'zoom" "Preview-Toolbar" "find-docked" "locate" "set-value" "1.0" "set-zoom" "get-toplevel" "toplevel" "get-pane" "pane" "let" "pos")}
        {Lisp-Entry "draw" method #f 137 20 137 24 ("print-page" "no" "get-page" "page" "get-job" "job" "get-pane" "pane" "let*" "lv" "lh" "context" "surface")}}}})
"Preview-Pane"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Preview-Pane.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Preview-Pane" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Preview-Pane" class #f 47 20 47 32 ("centered" "center" "664" "1078" "Dimension" "size:" "scrollee" "content" "vscroll?:" "hscroll?:" "scroller" "Dark" "name:" "Color" "background:" "fill" "layout-type:" "0" "explicit" "initialize" "Layout-View")
        {Lisp-Entry "client" property #f 50 12 50 18 ()}
        {Lisp-Entry "job" slot #f 53 8 53 11 ()}
        {Lisp-Entry "get-job" accessor #f 53 21 53 29 ()}
        {Lisp-Entry "pages" slot #f 54 8 54 13 ()}
        {Lisp-Entry "start" slot #f 55 8 55 13 ()}
        {Lisp-Entry "preserved" slot #f 56 8 56 17 ()}
        {Lisp-Entry "host-workspaces" method #f 72 20 72 35 ("preview")}
        {Lisp-Entry "guest-actions" method #f 81 20 81 33 ("nextmethod" "preview-pane" "'preview-pane" "find-actions" "cons")}
        {Lisp-Entry "on-print" method #f 91 11 91 19 ("client" "print-document" "evt")}
        {Lisp-Entry "on-print-layout" method #f 95 11 95 26 ("from-preview?:" "client" "print-layout" "evt")}
        {Lisp-Entry "on-home" method #f 99 11 99 18 ("0" "set-start" "evt")}
        {Lisp-Entry "on-end" method #f 103 11 103 17 ("modulo" "set-start" "1" "-" "last" "job" "get-pages" "pages" "length" "count" "let*" "evt")}
        {Lisp-Entry "on-previous" method #f 110 11 110 22 ("previous" "evt")}
        {Lisp-Entry "on-next" method #f 114 11 114 18 ("next" "evt")}
        {Lisp-Entry "on-close" method #f 118 11 118 19 ("close-workspace" "evt")}
        {Lisp-Entry "escape-press" method #f 122 20 122 32 ("close-workspace" "key")}
        {Lisp-Entry "close-workspace" method #f 126 11 126 26 ("get-previous" "apply-preferences" "close" "restore-client" "selected-workspace" "workspace" "get-host" "frame" "let")}
        {Lisp-Entry "get-client" method #f 139 18 139 28 ("client")}
        {Lisp-Entry "set-client" method #f 143 18 143 28 ("setup-printing" "preserved" "client" "set!" "value")}
        {Lisp-Entry "restore-client" method #f 148 21 148 35 ("preserved" "restore-printing" "printer" "'printer" "client" "get-page-setup-for" "wrap-header/footer")}
        {Lisp-Entry "Zoom" definition #f 158 14 158 18 ("0.5")}
        {Lisp-Entry "get-zoom" method #f 162 18 162 26 ("Zoom")}
        {Lisp-Entry "set-zoom" method #f 166 18 166 26 ("layout-view" "0" "Point" "scrollee" "'scrollee" "locate" "scroll-to" "Zoom" "set!" "value")}
        {Lisp-Entry "layout" method #f 177 20 177 26 ("start" "set-start" "set-client" "lambda" "for-each" "zoom:" "Preview-Job" "job" "update-scrollbars" "layout-view" "13" "-" "set-size" "get-output" "pages" "get-height" "+" ">" "when" "put" "max" "set!" "get-width" "increase!" "Preview-Page" "page" "shadow" "'shadow" "border-type:" "size:" "Point" "position:" "parent:" "Border-View" "border" "not" "while" "List-Factory" "new" "fact" "horz-done?" "vert-done?" "max-v" "max-h" "v" "0" "h" "let" "close-children" "50" "separator" "4" "Dimension" "scale" "nu+" "border-size" "get-size" "display-size" "Zoom" "/" "zoom" "60" "scale-content" "scaling" "printer" "'printer" "get-page-setup-for" "page-setup" "client" "get-print-area" "print-area" "'centered" "centered" "'scrollee" "locate" "scrollee" "let*" "nextmethod")}
        {Lisp-Entry "get-page-height" method #f 230 11 230 26 ("size" "get-height")}
        {Lisp-Entry "previous" method #f 239 18 239 26 ("start" "-" "0" "max" "set-start" "pages" "length" "count" "let")}
        {Lisp-Entry "next" method #f 244 18 244 22 ("set-start" "<" "when" "start" "+" "pg" "job" "get-pages" "pages" "length" "count" "let*")}
        {Lisp-Entry "set-start" method #f 252 18 252 27 ("0" "naturals" "pages" "set-no" "set-visible?" ">=" "if" "+" "pg" "get-parent" "border" "n" "page" "lambda" "for-each" "job" "get-pages" "length" "count" "let" "start" "set!" "value")}}}})
"Preview-Pane-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Preview-Pane-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Preview-Pane-Actions" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Preview-Pane-Actions" class #f 45 20 45 40 ("Next" "on-next" "next" "Prior" "on-previous" "previous" "End" "on-end" "end" "Home" "Shortcut" "shortcut:" "on-home" ":focus" "Event-Handler" "action-handler:" "home" "name:" "Actions")}}})
"Preview-Status"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Preview-Status.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Preview-Status" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Preview-Status" class #f 45 20 45 34 ("center" "location:" "20" "782" "Dimension" "size:" "message" "name:" "Status-Toolbar")
        {Lisp-Entry "host-icon" method #f 58 25 58 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 62 25 62 35 ()}}}})
"Preview-Toolbar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Preview-Toolbar.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Preview-Toolbar" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Preview-Toolbar" class #f 47 20 47 35 ("on-close" "22" "60" "title:" "close" "zoom" "Dark" "Medium" "Color" "border-color:" "2" "Rect" "border-insets:" "21" "80" "Dimension" "size:" "on-next" "next" "on-previous" "previous" "on-print-layout" "print-layout" "on-print" ":document" "Event-Handler" "action-handler:" "Image-Resource" "resource:" "tooltip-text:" "print" "name:" "Toolbar")
        {Lisp-Entry "Zoom-Factors" definition #f 65 14 65 26 ("0.25" "0.33" "0.50" "0.75" "1.0" "1.5" "2.0" "5.0")}
        {Lisp-Entry "finish" method #f 76 20 76 26 ("0.50" "set-value" "Zoom-Factors" "zoom" "'zoom" "locate" "set-choices" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" method #f 87 25 87 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 91 25 91 35 ()}
        {Lisp-Entry "set-preview-zoom" method #f 100 11 100 27 ("set-zoom" "current-document" "pane" "let" "zoom")}}
      {Lisp-Entry "Zoom-Combo" class #f 110 20 110 30 ("Combo-Box")
        {Lisp-Entry "combo-choice" method #f 113 20 113 32 ("get-value" "creator" "set-preview-zoom")}}}})
"Preview-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Preview-Workspace.jazz"} 1290011753
    {Lisp-Entry "jazz.ui.print.Preview-Workspace" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Preview-Workspace" class #f 45 20 45 37 ("Preview-Status" "-23" "line" "second" "status" "Preview-Toolbar" "model:" "first" "vert" "orientation:" "27" "division:" "edge" "separator:" "root" "location:" "toolbar" "name:" "Image-Resource" "icon:" "title:" "initialize" "Workspace-Preferences")
        {Lisp-Entry "previous" property #f 48 12 48 20 ()}
        {Lisp-Entry "get-previous" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "set-previous" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "pane" property #f 49 12 49 16 ()}
        {Lisp-Entry "get-pane" accessor #f 49 45 49 53 ()}
        {Lisp-Entry "set-pane" accessor #f 49 45 49 53 ()}
        {Lisp-Entry "apply-preferences" method #f 66 20 66 37 ("nextmethod" "apply" "pane" "layout-view" "rest")}}}})
"Print-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Print-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Print-Event" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Print-Event" class #f 43 20 43 31 ("Event")
        {Lisp-Entry "surface" slot #f 46 8 46 15 ()}
        {Lisp-Entry "context" slot #f 47 8 47 15 ()}
        {Lisp-Entry "get-context" accessor #f 47 23 47 31 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("context~self" "surface~self" "set!" "nextmethod" "context" "surface" "sender" "kind")}
        {Lisp-Entry "get-dc" method #f 56 18 56 24 ("surface")}
        {Lisp-Entry "get-hdc" method #f 60 18 60 25 ("surface" "get-hdc")}}}})
"Print-Job"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Print-Job.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Print-Job" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Print-Job" class #f 44 20 44 29 ("Object")
        {Lisp-Entry "surface" slot #f 47 8 47 15 ()}
        {Lisp-Entry "selection?" slot #f 48 8 48 18 ()}
        {Lisp-Entry "get-selection?" accessor #f 48 26 48 34 ()}
        {Lisp-Entry "from" slot #f 49 8 49 12 ()}
        {Lisp-Entry "get-from" accessor #f 49 26 49 34 ()}
        {Lisp-Entry "to" slot #f 50 8 50 10 ()}
        {Lisp-Entry "get-to" accessor #f 50 26 50 34 ()}
        {Lisp-Entry "nb-copies" slot #f 51 8 51 17 ()}
        {Lisp-Entry "get-nb-copies" accessor #f 51 26 51 34 ()}
        {Lisp-Entry "client" slot #f 52 8 52 14 ()}
        {Lisp-Entry "get-client" accessor #f 52 26 52 34 ()}
        {Lisp-Entry "page-setup" slot #f 53 8 53 18 ()}
        {Lisp-Entry "resolution" slot #f 54 8 54 18 ()}
        {Lisp-Entry "scaling" slot #f 55 8 55 15 ()}
        {Lisp-Entry "zoom" slot #f 56 8 56 12 ()}
        {Lisp-Entry "pages" slot #f 57 8 57 13 ()}
        {Lisp-Entry "get-pages" accessor #f 57 26 57 34 ()}
        {Lisp-Entry "initialize" method #f 60 20 60 30 ("paginate" "pages" "zoom~self" "scale-content" "or" "scaling~self" "resolution~self" "page-setup~self" "client~self" "nb-copies~self" "to~self" "from~self" "selection?~self" "surface~self" "set!" "nextmethod" "1" "nb-copies" "nb-copies:" "to" "to:" "from" "from:" "selection?" "selection?:" "zoom" "zoom:" "scaling" "scaling:" "resolution" "page-setup" "client" "surface")}
        {Lisp-Entry "get-dc" method #f 86 18 86 24 ("surface")}
        {Lisp-Entry "get-page" method #f 90 18 90 26 ("pages" "element" "n")}
        {Lisp-Entry "print-job" method #f 99 18 99 27 ("print-document" "nb-copies" "repeat" "loop" "lambda" "with-document")}
        {Lisp-Entry "print-document" method #f 106 11 106 25 ("length" "to" "1" "-" "from" "if" "naturals" "pages" "0" "surface" "print-page" "with-page" "no" "page" "lambda" "for-each")}
        {Lisp-Entry "with-orientation" method #f 116 11 116 27 ("with-landscape" "rect-size" "page-size" "counterclockwise" "'counterclockwise" "orientation" "let" "not" "inverse-rect" "if" "with-clipper" "lambda" "print-landscape?" "landscape?" "let*" "proc" "clipper" "page" "surface")}
        {Lisp-Entry "print-page" method #f 131 18 131 28 ("set-clipper" "clipper" "new-lv" "new-lh" "get-top" "top" "get-left" "left" "content" "get-v" "get-h" "-" "get-content-rect" "content-rect" "0" "Point" "acquire" "offset" "paint-drawing" "lambda" "with-orientation" "page-setup" "wrap-header/footer" "scale" "offset-rect" "printed-rect" "get-bounds" "printed-bounds" "printed-page" "printed" "scaling" "60" "resolution" "/" "*" "ratio" "1.0" "zoom" "context" "let*" "get-name" "get-controller" "get-moniker" "moniker" "Document" "is?" "when" "client" "get-guest" "guest" "let" "present-date-hour" "print-time:" "local-date" "present-date-day" "print-date:" "pages" "length" "page-count:" "page-no:" "client-filename" "or" "filename:" "selection?" "print-selection?:" "print-black/white?:" "printing?:" "list" "print-context" "define" "no" "page" "lv" "lh" "surface")}
        {Lisp-Entry "printed-page" method #f 177 29 177 41 ("page-setup" "get-printable")}
        {Lisp-Entry "print-landscape?" method #f 181 29 181 45 ("landscape" "'landscape" "page-setup" "get-orientation" "eq?")}
        {Lisp-Entry "paginate" method #f 190 11 190 19 ("client" "paginate" "paginate-height" "scaling" "60" "resolution" "*" "/" "ceiling" "paginate-width" "get-height" "height" "get-width" "width" "page-setup" "get-content" "content" "let*")}
        {Lisp-Entry "with-document" method #f 204 18 204 31 ("end-document" "start-document" "proc")}
        {Lisp-Entry "start-document" method #f 210 29 210 43 ()}
        {Lisp-Entry "end-document" method #f 214 29 214 41 ()}
        {Lisp-Entry "with-page" method #f 223 18 223 27 ("end-page" "start-page" "proc" "no")}
        {Lisp-Entry "start-page" method #f 229 29 229 39 ("no")}
        {Lisp-Entry "end-page" method #f 233 29 233 37 ("no")}}}})
"Print-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Print-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Print-Preferences" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Print-Preferences" class #f 45 20 45 37 ("title:" "initialize" "Preferences")
        {Lisp-Entry "color?" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-color?" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "set-color?" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "get-class-descriptor" method #f 60 25 60 45 ("Print-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 69 11 69 17 ()
        {Lisp-Entry "Print-Preferences-Descriptor" class #f 75 7 75 35 ("domain" "name:" "color?" "categorized:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")}}}})
"Printer-Job"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "Printer-Job.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.Printer-Job" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Printer-Job" class #f 45 20 45 31 ("Print-Job")
        {Lisp-Entry "start-document" method #f 53 20 53 34 ("DOCINFO-free" "surface" "get-surface" "cairo_win32_surface_get_dc" "StartDoc" "0" "DOCINFO-fwType-set!" "DOCINFO-lpszDocName-set!" "DOCINFO-sizeof" "DOCINFO-cbSize-set!" "DOCINFO-make" "rec" "let")}
        {Lisp-Entry "end-document" method #f 62 20 62 32 ("surface" "get-surface" "cairo_win32_surface_get_dc" "EndDoc")}
        {Lisp-Entry "start-page" method #f 71 20 71 30 ("surface" "get-surface" "cairo_win32_surface_get_dc" "StartPage" "no")}
        {Lisp-Entry "end-page" method #f 75 20 75 28 ("surface" "get-surface" "cairo_win32_surface_get_dc" "EndPage" "no")}}}})
"Progress-Bar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Progress-Bar.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Progress-Bar" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Progress-Bar" class #f 45 7 45 19 ("1" "9" "Range" "0" "initialize" "View")
        {Lisp-Entry "Bar-Width" definition #f 48 14 48 23 ("12")}
        {Lisp-Entry "Bar-Spacing" definition #f 51 14 51 25 ("2")}
        {Lisp-Entry "infinite?" property #f 55 12 55 21 ()}
        {Lisp-Entry "get-infinite?" accessor #f 55 46 55 54 ()}
        {Lisp-Entry "set-infinite?" accessor #f 55 46 55 54 ()}
        {Lisp-Entry "pos" slot #f 58 8 58 11 ()}
        {Lisp-Entry "range" slot #f 59 8 59 13 ()}
        {Lisp-Entry "step" slot #f 60 8 60 12 ()}
        {Lisp-Entry "set-step" accessor #f 60 44 60 52 ()}
        {Lisp-Entry "bars" slot #f 61 8 61 12 ()}
        {Lisp-Entry "default-size" method #f 64 20 64 32 ("20" "100" "Dimension")}
        {Lisp-Entry "get-pos" method #f 73 18 73 25 ("pos")}
        {Lisp-Entry "set-pos" method #f 77 18 77 25 ("invalidate-bars" "pos" "set!" "p")}
        {Lisp-Entry "delta-pos" method #f 82 18 82 27 ("invalidate-bars" "range" "get-end" "modulo" "set!" "infinite?" "when" "pos" "increase!" "increment")}
        {Lisp-Entry "step-it" method #f 89 18 89 25 ("step" "delta-pos")}
        {Lisp-Entry "set-done" method #f 93 18 93 26 ("range" "get-end" "set-pos")}
        {Lisp-Entry "get-range" method #f 97 18 97 27 ("range")}
        {Lisp-Entry "set-range" method #f 101 18 101 27 ("invalidate-bars" "range" "set!" "rng")}
        {Lisp-Entry "invalidate-bars" method #f 111 11 111 26 ("invalidate-view" "set!" "bars" "/=" "when" "n" "Bar-Spacing" "Bar-Width" "quotient" "1" "pos" "*" "fxceiling/" "+" "right" "2" "get-width" "-" "width" "get-bounds" "bounds" "let*" "0" "=" "if" "get-end" "end" "range" "get-start" "start" "let" "calculate-bars" "define")}
        {Lisp-Entry "draw" method #f 133 20 133 24 ("0" "naturals" "Bar-Spacing" "increase!" "Focused-Selection" "name:" "Color" "min" "Rect" "new" "fill-rect" "=" "infinite?" "not" "or" "when" "Bar-Width" "+" "right" "let" "n" "lambda" "for-each" "1" "bars" "last" "3" "-" "max-right" "top" "2" "left" "get-height" "height" "get-width" "width" "let*" "rectangle" "'rectangle" "edges:" "sunken" "'sunken" "outer:" "get-bounds" "draw-edge" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-class-descriptor" method #f 154 25 154 45 ("Progress-Bar-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 163 11 163 17 ()
        {Lisp-Entry "Progress-Bar-Descriptor" class #f 169 7 169 30 ("title:" "infinite?" "name:" "View-Descriptor")}}}})
"Progress-Reporter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "Progress-Reporter.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.Progress-Reporter" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Progress-Reporter" class #f 45 20 45 37 ("on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-action" ":form" "Event-Handler" "action-handler:" "22" "90" "87" "319" "action" "88" "progress" "297" "70" "message" "16" "300" "23" "50" "invite" "name:" "Image-Resource" "resource:" ":images" "portfolio:" "32" "20" "10" "Point" "position:" "128" "420" "Dimension" "size:" "title:" "initialize" "Reporter" "View")
        {Lisp-Entry "cancelled?" slot #f 48 8 48 18 ()}
        {Lisp-Entry "done?" slot #f 49 8 49 13 ()}
        {Lisp-Entry "install" method #f 61 20 61 27 ("action" "'action" "acquire-focus" "0" "set-pos" "'progress" "locate" "progress" "let" "nextmethod" "rest")}
        {Lisp-Entry "host-title" method #f 73 25 73 35 ()}
        {Lisp-Entry "dialog-class" method #f 78 16 78 28 ("Progress-Reporter-Dialog")}
        {Lisp-Entry "meta" class #f 83 9 83 13 ("Dialog" "extends" "Progress-Reporter-Dialog")
          {Lisp-Entry "on-close" method #f 86 13 86 21 ("processed" "guest" "request-cancel" "closable?" "when" "evt")}}
        {Lisp-Entry "disable-cancel" method #f 97 20 97 34 ("action" "'action" "locate" "set-enabled?")}
        {Lisp-Entry "cancel-enabled?" method #f 101 11 101 26 ("action" "'action" "locate" "get-enabled?")}
        {Lisp-Entry "cancel-requested?" method #f 105 20 105 37 ("cancelled?")}
        {Lisp-Entry "test-cancelled" method #f 109 20 109 34 ("throw-cancel" "cancel-requested?" "when")}
        {Lisp-Entry "on-action" method #f 119 11 119 20 ("current-action" "evt")}
        {Lisp-Entry "on-return-press" method #f 124 20 124 35 ("current-action" "evt")}
        {Lisp-Entry "escape-press" method #f 129 20 129 32 ("request-cancel" "cancel-enabled?" "when" "key")}
        {Lisp-Entry "section-title" method #f 139 20 139 33 ("set-message" "title")}
        {Lisp-Entry "set-message" method #f 143 20 143 31 ("message" "'message" "locate" "set-title" "msg")}
        {Lisp-Entry "user-message" method #f 147 20 147 32 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "set-range" method #f 151 20 151 29 ("progress" "'progress" "locate" "set-range" "range")}
        {Lisp-Entry "set-pos" method #f 155 20 155 27 ("progress" "'progress" "locate" "set-pos" "pos")}
        {Lisp-Entry "delta-pos" method #f 159 20 159 29 ("progress" "'progress" "locate" "delta-pos" "increment")}
        {Lisp-Entry "set-step" method #f 163 20 163 28 ("progress" "'progress" "locate" "set-step" "increment")}
        {Lisp-Entry "step-it" method #f 167 20 167 27 ("progress" "'progress" "locate" "step-it")}
        {Lisp-Entry "set-done" method #f 171 20 171 28 ("set-default?" "done-title" "action" "'action" "set-title" "progress" "'progress" "locate" "set-done" "done?" "set!")}
        {Lisp-Entry "current-action" method #f 183 11 183 25 ("request-cancel" "done-action" "done?" "if")}
        {Lisp-Entry "request-cancel" method #f 190 26 190 40 ("set-message" "cancelled?" "set!")}
        {Lisp-Entry "done-title" method #f 195 29 195 39 ()}
        {Lisp-Entry "done-action" method #f 199 29 199 40 ("get-modal-result" "end-modal" "get-guest" "guest" "get-host" "dialog" "let*")}}}})
"Projects-Search"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Projects-Search.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.search.Projects-Search" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Projects-Search" class #f 48 20 48 35 ("entries" "41" "45" "condensed?:" "catalog" "Entry-Border" "Medium" "Color" "border-color:" "1" "3" "2" "Rect" "border-insets:" "22" "155" "17" "163" "16" "46" "21" "115" "44" "references" "selected?:" "18" "100" "Dimension" "size:" "20" "13" "Point" "position:" "definitions" "title:" "domain" "name:" "Search-View")
        {Lisp-Entry "finish" method #f 67 20 67 26 ("nextmethod" "entries" "'entries" "set-value" "cons" "set-choices" "'catalog" "locate" "combo" "let" "get-application" "get-cataloguer" "get-catalogs" "get-name" "->string" "list" "catalog" "lambda" "map" "collect-catalogs" "setup-catalogs" "define" "rest")}
        {Lisp-Entry "get-search-domains" method #f 90 20 90 38 ("references" "definitions")}
        {Lisp-Entry "catalog-change" method #f 100 11 100 25 ("catalog")}
        {Lisp-Entry "search-targets" method #f 109 20 109 34 ("domain" "'domain" "locate" "get-content" "get-selected-element" "set-context" "'references" "edit-reference" "search-references" "references" "search-targets-references" "select-results" "get-search-targets" "add-results" "'definitions" "set-mode" "get-results" "results" "else" "car" "edit" "1" "length" "case" "message-box" "null?" "search-definitions" "if" "definitions" "get-application" "get-cataloguer" "cataloguer" "selected-catalog" "catalog" "let" "search-targets-definitions" "define" "search-set")}
        {Lisp-Entry "selected-catalog" method #f 153 11 153 27 ("catalog" "'catalog" "locate" "get-value")}}
      {Lisp-Entry "Catalog-Combo" class #f 162 7 162 20 ("Combo-Box")
        {Lisp-Entry "content-change" method #f 165 20 165 34 ("get-value" "get-creator" "catalog-change" "origin")}}
      {Lisp-Entry "Entries-Combo" class #f 174 7 174 20 ("Combo-Box")}}})
"Projects-Search-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Projects-Search-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.search.Projects-Search-Preferences" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Projects-Search-Preferences" class #f 44 20 44 47 ("title:" "Search-View-Preferences")}}})
"Prop-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Prop-Text-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Prop-Text-Preferences" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Prop-Text-Preferences" class #f 46 20 46 41 ("Purple" "comment-style:" "Dark-Red" "color:" "Text-Style-Preference" "title-style:" "title:" "initialize" "Code-Text-Preferences")
        {Lisp-Entry "title-style" property #f 49 12 49 23 ()}
        {Lisp-Entry "get-title-style" accessor #f 49 50 49 58 ()}
        {Lisp-Entry "set-title-style" accessor #f 49 50 49 58 ()}
        {Lisp-Entry "comment-style" property #f 50 12 50 25 ()}
        {Lisp-Entry "get-comment-style" accessor #f 50 50 50 58 ()}
        {Lisp-Entry "set-comment-style" accessor #f 50 50 50 58 ()}
        {Lisp-Entry "get-class-descriptor" method #f 65 25 65 45 ("Prop-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 74 11 74 17 ()
        {Lisp-Entry "Prop-Text-Preferences-Descriptor" class #f 80 7 80 39 ("name:" "comment-style" "title-style" "categorized:" "Document-Preferences-Descriptor")}}}})
"Push-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Push-Button.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Push-Button" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Push-Button" class #f 49 7 49 18 ("Medium" "name:" "Color" "background:" "inactive" "'inactive" "explicit" "initialize" "View")
        {Lisp-Entry "default?" property #f 52 12 52 20 ()}
        {Lisp-Entry "flat?" property #f 53 12 53 17 ()}
        {Lisp-Entry "get-flat?" accessor #f 53 45 53 53 ()}
        {Lisp-Entry "set-flat?" accessor #f 53 45 53 53 ()}
        {Lisp-Entry "state" slot #f 56 8 56 13 ()}
        {Lisp-Entry "mouse-activate?" method #f 63 20 63 35 ()}
        {Lisp-Entry "get-default?" method #f 72 18 72 30 ("default?")}
        {Lisp-Entry "set-default?" method #f 76 18 76 30 ("invalidate-view" "default?" "set!" "flag")}
        {Lisp-Entry "get-state" method #f 86 18 86 27 ("state")}
        {Lisp-Entry "set-state" method #f 90 18 90 27 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "default-size" method #f 100 20 100 32 ("22" "100" "Dimension")}
        {Lisp-Entry "preferred-size" method #f 104 20 104 34 ("22" "50" "effective-font" "text-extent" "get-width" "+" "Dimension" "new" "default-size" "not" "if" "localize" "title" "let")}
        {Lisp-Entry "mouse-enter" method #f 116 20 116 31 ("pushed" "'pushed" "out-pushed" "highlighted" "'highlighted" "set-state" "inactive" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "view-enabled?" "and" "when")}
        {Lisp-Entry "mouse-leave" method #f 123 20 123 31 ("out-pushed" "'out-pushed" "pushed" "inactive" "'inactive" "set-state" "highlighted" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "view-enabled?" "and" "when")}
        {Lisp-Entry "mouse-down" method #f 130 20 130 30 ("pushed" "'pushed" "set-state" "view-enabled?" "when" "pos")}
        {Lisp-Entry "drag-up" method #f 135 20 135 27 ("inactive" "'inactive" "out-pushed" "highlighted" "'highlighted" "set-state" "pushed" "get-state" "case" "up" "unwind-protect" "view-enabled?" "when" "rest" "pos")}
        {Lisp-Entry "up" method #f 144 11 144 13 ("self" "process-action" "pushed" "'pushed" "get-state" "eq?" "when")}
        {Lisp-Entry "draw" method #f 154 20 154 24 ("+" "draw-text" "set-text-color" "v" "2" "-" "quotient" "h" "get-text-extent" "extent" "get-height" "height" "get-width" "width" "get-size" "size" "let*" "'pushed" "eq?" "draw-push-button" "rectangle" "'rectangle" "edges:" "raised" "'raised" "outer:" "draw-edge" "flat?" "-1" "inflate-rect" "set!" "Dark" "Black" "name:" "Color" "if" "frame-rect" "default?" "when" "view-enabled?" "enabled?" "get-bounds" "rect" "0" "else" "1" "pushed" "state" "case" "offset" "localize" "or" "title" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-class-descriptor" method #f 180 25 180 45 ("Push-Button-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 189 11 189 17 ()
        {Lisp-Entry "Push-Button-Descriptor" class #f 195 7 195 29 ("flat?" "domain" "title:" "default?" "name:" "title" "default:" "View-Descriptor")}}}})
"Push-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Push-Combo.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Push-Combo" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Push-Combo" class #f 44 7 44 17 ("body" "name:" "22" "31" "Dimension" "size:" "Combo-View")}}})
"Push-Icon"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Push-Icon.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Push-Icon" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Push-Icon" class #f 44 7 44 16 (":images" "portfolio:" "tooltip?:" "22" "Dimension" "size:" "Push-Tool")
        {Lisp-Entry "get-combo" method #f 56 18 56 27 ("parent")}
        {Lisp-Entry "get-enabled?" method #f 65 20 65 32 ("parent" "get-enabled?")}
        {Lisp-Entry "get-state" method #f 69 20 69 29 ("self" "parent" "child-state")}
        {Lisp-Entry "mouse-enter" method #f 73 20 73 31 ("self" "parent" "enter-child")}
        {Lisp-Entry "mouse-leave" method #f 77 20 77 31 ("self" "parent" "leave-child")}
        {Lisp-Entry "mouse-down" method #f 81 20 81 30 ("self" "parent" "child-down" "pos")}
        {Lisp-Entry "drag-up" method #f 85 20 85 27 ("self" "parent" "child-up" "rest" "pos")}}}})
"Push-Tool"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Push-Tool.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Push-Tool" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Push-Tool" class #f 43 7 43 16 ("Image-Tool")
        {Lisp-Entry "default-size" method #f 46 20 46 32 ("22" "Dimension")}
        {Lisp-Entry "up" method #f 50 20 50 22 ("self" "process-action" "pushed" "'pushed" "get-state" "eq?" "when")}}}})
"Radio-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Radio-Button.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Radio-Button" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Radio-Button" class #f 48 7 48 19 ("explicit" "initialize" "Selectable" "Groupable" "View")
        {Lisp-Entry "box-size" definition #f 51 14 51 22 ("13")}
        {Lisp-Entry "group" property #f 55 12 55 17 ()}
        {Lisp-Entry "selected?" property #f 56 12 56 21 ()}
        {Lisp-Entry "tracking?" slot #f 59 8 59 17 ()}
        {Lisp-Entry "inside?" slot #f 60 8 60 15 ()}
        {Lisp-Entry "default-size" method #f 63 20 63 32 ("16" "100" "Dimension")}
        {Lisp-Entry "get-group" method #f 72 20 72 29 ("group")}
        {Lisp-Entry "set-group" method #f 76 20 76 29 ("group" "set!" "value")}
        {Lisp-Entry "get-selected?" method #f 85 20 85 33 ("selected?")}
        {Lisp-Entry "set-selected?" method #f 89 20 89 33 ("not" "set-selected-state" "get-current-selection" "current" "let" "selected?" "neq?" "when" "flag")}
        {Lisp-Entry "unselect" method #f 97 20 97 28 ("set-selected-state" "selected?" "when")}
        {Lisp-Entry "get-current-selection" method #f 102 11 102 32 ("parent" "get-children" "get-selected?" "Radio-Button" "is?" "and" "child" "lambda" "find-if")}
        {Lisp-Entry "set-selected-state" method #f 109 11 109 29 ("invalidate-view" "selected?" "set!" "flag")}
        {Lisp-Entry "draw" method #f 119 20 119 24 ("draw-text" "Black" "name:" "Color" "set-text-color" "inside?" "tracking?" "and" "inactive?:" "selected?" "selected?:" "box-size" "1" "+" "0" "Rect" "new" "draw-radio-button" "view-enabled?" "enabled?" "let" "2" "-" "quotient" "v" "18" "h" "get-text-extent" "get-height" "13" "empty-string?" "not" "if" "height" "localize" "or" "title" "let*" "lv" "lh" "context" "surface")}
        {Lisp-Entry "mouse-down" method #f 135 20 135 30 ("invalidate-view" "acquire-capture" "inside?" "tracking?" "set!" "view-enabled?" "when" "pos")}
        {Lisp-Entry "drag-move" method #f 143 20 143 29 ("invalidate-view" "set!" "inside?" "neq?" "over-view?" "over?" "let" "tracking?" "when" "pos")}
        {Lisp-Entry "drag-up" method #f 151 20 151 27 ("self" "process-action" "set-modified?" "selected?" "not" "set-selected?" "inside?" "set!" "release-capture" "tracking?" "when" "rest" "pos")}
        {Lisp-Entry "get-class-descriptor" method #f 166 25 166 45 ("Radio-Button-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 175 11 175 17 ()
        {Lisp-Entry "Radio-Button-Descriptor" class #f 181 7 181 30 ("selected?" "title:" "group" "name:" "title" "default:" "View-Descriptor")}}}})
"Radio-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Radio-Item.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Radio-Item" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Radio-Item" class #f 47 7 47 17 ("explicit" "initialize" "Selectable" "Groupable" "Label-Item")
        {Lisp-Entry "group" property #f 50 12 50 17 ()}
        {Lisp-Entry "selected?" property #f 51 12 51 21 ()}
        {Lisp-Entry "get-group" method #f 59 20 59 29 ("group")}
        {Lisp-Entry "set-group" method #f 63 20 63 29 ("group" "set!" "value")}
        {Lisp-Entry "radio-group" method #f 67 11 67 22 ("parent" "get-children" "group" "get-group" "eq?" "Radio-Item" "is?" "and" "component" "lambda" "collect-if")}
        {Lisp-Entry "get-selected?" method #f 79 20 79 33 ("selected?")}
        {Lisp-Entry "set-selected?" method #f 83 20 83 33 ("not" "set-selected-state" "current" "let" "selected?" "neq?" "when" "radio-group" "get-selected?" "find-if" "find-selected" "define" "flag")}
        {Lisp-Entry "unselect" method #f 94 20 94 28 ("set-selected-state" "selected?" "when")}
        {Lisp-Entry "set-selected-state" method #f 99 11 99 29 ("invalidate-view" "selected?" "set!" "flag")}
        {Lisp-Entry "preferred-prefix-width" method #f 109 20 109 42 ("0" "12" "selected?" "if")}
        {Lisp-Entry "draw-prefix" method #f 118 20 118 31 ("Image-Resource" "get-images-portfolio" "draw-image" "2" "top" "5" "left" "get-application" "appl" "let" "selected?" "when" "context" "surface")}
        {Lisp-Entry "get-class-descriptor" method #f 131 25 131 45 ("Radio-Item-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 140 11 140 17 ()
        {Lisp-Entry "Radio-Item-Descriptor" class #f 146 7 146 28 ("selected?" "title:" "group" "name:" "Label-Item-Descriptor")}}}})
"Radio-Tool"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Radio-Tool.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Radio-Tool" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Radio-Tool" class #f 46 7 46 17 ("explicit" "initialize" "Selectable" "Groupable" "Image-Tool")
        {Lisp-Entry "group" property #f 49 12 49 17 ()}
        {Lisp-Entry "selected?" property #f 50 12 50 21 ()}
        {Lisp-Entry "default-size" method #f 53 20 53 32 ("22" "Dimension")}
        {Lisp-Entry "preferred-size" method #f 62 20 62 34 ("21" "24" "localize" "effective-font" "text-width" "+" "Dimension" "new" "default-size" "title" "not" "if")}
        {Lisp-Entry "draw-frame" method #f 73 20 73 30 ("nextmethod" "draw-pushed" "out-pushed" "highlighted" "inactive" "get-state" "memq?" "selected?" "and" "if" "surface")}
        {Lisp-Entry "draw-tool" method #f 79 20 79 29 ("view-enabled?" "get-v" "get-h" "+" "draw-text" "Black" "name:" "Color" "set-text-color" "get-size" "get-text-extent" "lambda" "justify-lazy" "center" "localize" "draw-image" "not" "1" "2" "pushed" "'pushed" "get-state" "eq?" "selected?" "or" "0" "title" "if" "offset" "let" "context" "surface")}
        {Lisp-Entry "draw-background" method #f 91 20 91 35 ("nextmethod" "-1" "1" "expand-rect" "fill-rect" "Light-Background" "White" "name:" "Color" "title" "color" "get-bounds" "bounds" "let" "selected?" "if" "context" "surface")}
        {Lisp-Entry "up" method #f 104 20 104 22 ("self" "process-action" "set-selected?" "find-pushed" "let" "selected?" "not" "pushed" "'pushed" "get-state" "eq?" "and" "when")}
        {Lisp-Entry "get-group" method #f 118 20 118 29 ("group")}
        {Lisp-Entry "set-group" method #f 122 20 122 29 ("group" "set!" "value")}
        {Lisp-Entry "radio-group" method #f 126 11 126 22 ("parent" "get-children" "group" "get-group" "eq?" "Radio-Tool" "is?" "and" "component" "lambda" "collect-if")}
        {Lisp-Entry "find-pushed" method #f 133 11 133 22 ("radio-group" "get-selected?" "find-if")}
        {Lisp-Entry "get-selected?" method #f 142 20 142 33 ("selected?")}
        {Lisp-Entry "set-selected?" method #f 146 20 146 33 ("not" "set-selected-state" "find-pushed" "current" "let" "selected?" "neq?" "when" "flag")}
        {Lisp-Entry "unselect" method #f 154 20 154 28 ("set-selected-state" "selected?" "when")}
        {Lisp-Entry "set-selected-state" method #f 159 11 159 29 ("invalidate-view" "selected?" "set!" "flag")}}}})
"Recorder-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Recorder-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Recorder-Menu" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Recorder-Menu" class #f 45 20 45 33 ("play-recording-5" "play-recording-4" "play-recording-3" "play-recording-2" "play-recording-1" "play-recording" "output-recording" "present-recording" "set-active-recording" "register-recording" "resume-recording" "stop-recording" "ide" "Action" "action-handler:" "Image-Resource" "icon:" "start-recording" "name:" "title:" "Menu")}}})
"Renderer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Renderer.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Renderer" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Renderer" interface #f 43 24 43 32 ()
        {Lisp-Entry "render" method #f 46 35 46 41 ("sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface" "drawing")}}}})
"Ruler"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Ruler.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Ruler" module #f 37 18 37 36 ("jazz")
      {Lisp-Entry "Ruler" class #f 47 7 47 12 ("fill" "layout-type:" "content" "name:" "shown?:" "Header-View")
        {Lisp-Entry "get-header-height" method #f 60 20 60 37 ("0" "22" "shown?" "if")}
        {Lisp-Entry "Tabbed-Color" definition #f 69 14 69 26 ("Dark-Red" "name:" "Color")}
        {Lisp-Entry "Untabbed-Color" definition #f 72 14 72 28 ("blue:" "green:" "90" "red:" "Color")}
        {Lisp-Entry "draw" method #f 76 20 76 24 ("get-top" "<" "when" "get-header-height" "get-width" "get-logical-clipper" "clipper" "let" "naturals" "line-to" "move-to" "Untabbed-Color" "Tabbed-Color" "5" "if" "offset" "modulo" "=" "major?" "memq?" "tab?" ">=" "unless" "+" "pixel" "*" "rank" "n" "lambda" "for-each" "set-line-width" "Black" "set-color" "get-user-tabs" "tabs" "client" "get-left-padding" "left" "1" "-" "limit" "quotient" "number" "4" "major" "8" "unit" "Medium" "name:" "Color" "fill-rect" "rectangle" "'rectangle" "edges:" "raised" "'raised" "inner:" "draw-edge" "-1" "inflate-rect" "inner" "0" "Rect" "new" "outer" "let*" "draw-measurements" "draw-border" "height" "width" "draw-ruler" "define" "lv" "lh" "context" "surface")}
        {Lisp-Entry "cursor-update" method #f 120 20 120 33 (":arrow" "set-cursor" "pos")}
        {Lisp-Entry "mouse-down" method #f 129 20 129 30 ("pos")}
        {Lisp-Entry "drag-move" method #f 133 20 133 29 ("pos")}
        {Lisp-Entry "drag-up" method #f 137 20 137 27 ("rest" "pos")}}}})
"Run"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Run.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Run" module #f 37 18 37 34 ("jazz")
      {Lisp-Entry "Run" class #f 44 7 44 10 ("Object")
        {Lisp-Entry "string" slot #f 47 18 47 24 ()}
        {Lisp-Entry "get-string" accessor #f 47 52 47 60 ()}
        {Lisp-Entry "set-string" accessor #f 47 52 47 60 ()}
        {Lisp-Entry "style" slot #f 48 18 48 23 ()}
        {Lisp-Entry "get-style" accessor #f 48 52 48 60 ()}
        {Lisp-Entry "set-style" accessor #f 48 52 48 60 ()}
        {Lisp-Entry "height" slot #f 49 18 49 24 ()}
        {Lisp-Entry "get-height" accessor #f 49 52 49 60 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("get-height" "height~self" "style~self" "string~self" "set!" "nextmethod" "style" "string")}
        {Lisp-Entry "print" method #f 59 20 59 25 ("style" "string" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-length" method #f 72 18 72 28 ("string" "cardinality" "cast")}
        {Lisp-Entry "compute-width" method #f 81 18 81 31 ("self" "style" "run-width")}
        {Lisp-Entry "scan" method #f 90 21 90 25 ("self" "style" "scan" "proc" "tabs" "end" "start" "h")}
        {Lisp-Entry "wrap" method #f 99 21 99 25 ("self" "style" "wrap" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "height-update" method #f 103 21 103 34 ("style" "height-update" "height")}
        {Lisp-Entry "draw-run" method #f 112 21 112 29 ("string" "style" "draw-style" "enabled?" "left" "tabs" "line-height" "v" "h" "context" "surface")}}}})
"Runtime-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Runtime-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Runtime-Event" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Runtime-Event" class #f 43 20 43 33 ("Event")}}})
"Runtime-Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "listener" "Runtime-Listener.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.listener.Runtime-Listener" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Runtime-Listener" interface #f 43 24 43 40 ("Listener")
        {Lisp-Entry "on-thread-added" method #f 46 35 46 50 ("evt")}
        {Lisp-Entry "on-thread-removed" method #f 47 35 47 52 ("evt")}
        {Lisp-Entry "on-gc-marking" method #f 48 35 48 48 ("evt")}
        {Lisp-Entry "on-gc-sweeping" method #f 49 35 49 49 ("evt")}
        {Lisp-Entry "on-gc-completed" method #f 50 35 50 50 ("evt")}
        {Lisp-Entry "on-zone-expanded" method #f 51 35 51 51 ("evt")}
        {Lisp-Entry "on-zone-shrinked" method #f 52 35 52 51 ("evt")}}}})
"Scrollbar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Scrollbar.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Scrollbar" module #f 38 18 38 40 ("jazz")
      {Lisp-Entry "Scrollbar" class #f 50 7 50 16 ("3" "1" "9" "Range" "0" "explicit" "vert" "'vert" "initialize" "View")
        {Lisp-Entry "autorepeat-delay" definition #f 53 14 53 30 ("0.3")}
        {Lisp-Entry "autorepeat-period" definition #f 56 14 56 31 ("0.001")}
        {Lisp-Entry "orientation" property #f 60 12 60 23 ()}
        {Lisp-Entry "pos" property #f 61 12 61 15 ()}
        {Lisp-Entry "range" property #f 62 12 62 17 ()}
        {Lisp-Entry "line-height" property #f 63 12 63 23 ()}
        {Lisp-Entry "page-height" property #f 64 12 64 23 ()}
        {Lisp-Entry "flat?" property #f 65 12 65 17 ()}
        {Lisp-Entry "style" property #f 66 12 66 17 ()}
        {Lisp-Entry "tracking?" slot #f 69 8 69 17 ()}
        {Lisp-Entry "tracking-start" slot #f 70 8 70 22 ()}
        {Lisp-Entry "tracking-start-pos" slot #f 71 8 71 26 ()}
        {Lisp-Entry "autorepeat-pulse" slot #f 72 8 72 24 ()}
        {Lisp-Entry "print" method #f 75 20 75 25 ("range" "pos" "size" "position" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-orientation" method #f 86 18 86 33 ("orientation")}
        {Lisp-Entry "set-orientation" method #f 90 18 90 33 ("invalidate-view" "set!" "orientation" "neq?" "when" "or")}
        {Lisp-Entry "get-pos" method #f 96 18 96 25 ("pos")}
        {Lisp-Entry "set-pos" method #f 100 18 100 25 ("invalidate-view" "redraw-view-only" "if" "set!" "pos" "/=" "when" "min" "max" "new-pos" "let" "page-height" "get-end" "-" "max-pos" "range" "get-start" "min-pos" "define" "redraw?" "redraw?:" "p")}
        {Lisp-Entry "get-range" method #f 115 18 115 27 ("range")}
        {Lisp-Entry "set-range" method #f 119 18 119 27 ("invalidate-view" "set!" "/=" "range" "range=?" "not" "when" "rg")}
        {Lisp-Entry "get-line-height" method #f 125 18 125 33 ("line-height")}
        {Lisp-Entry "set-line-height" method #f 129 18 129 33 ("invalidate-view" "set!" "line-height" "/=" "when" "height")}
        {Lisp-Entry "get-page-height" method #f 135 18 135 33 ("page-height")}
        {Lisp-Entry "set-page-height" method #f 139 18 139 33 ("invalidate-view" "set!" "page-height" "/=" "when" "height")}
        {Lisp-Entry "set-info" method #f 145 18 145 26 ("set-page-height" "Range" "new" "set-range" "page" "max" "min")}
        {Lisp-Entry "get-flat?" method #f 150 18 150 27 ("flat?")}
        {Lisp-Entry "set-flat?" method #f 154 18 154 27 ("invalidate-view" "set!" "flat?" "neq?" "when" "value")}
        {Lisp-Entry "get-style" method #f 160 18 160 27 ("style")}
        {Lisp-Entry "set-style" method #f 164 18 164 27 ("invalidate-view" "set!" "style" "neq?" "when" "value")}
        {Lisp-Entry "get-client" method #f 175 18 175 28 ("parent")}
        {Lisp-Entry "call-scroll" method #f 184 11 184 22 ("on-hscroll" "horz" "on-vscroll" "vert" "orientation" "case" "get-client" "client" "let" "thumb-pos" "action")}
        {Lisp-Entry "line-up" method #f 196 11 196 18 ("setup-autorepeat" "line-up" "'line-up" "call-scroll")}
        {Lisp-Entry "line-down" method #f 201 11 201 20 ("setup-autorepeat" "line-down" "'line-down" "call-scroll")}
        {Lisp-Entry "page-up" method #f 211 11 211 18 ("setup-autorepeat" "page-up" "'page-up" "call-scroll")}
        {Lisp-Entry "page-down" method #f 216 11 216 20 ("setup-autorepeat" "page-down" "'page-down" "call-scroll")}
        {Lisp-Entry "get-breadth" method #f 226 11 226 22 ("get-height" "horz" "get-width" "vert" "orientation" "case")}
        {Lisp-Entry "get-extent" method #f 232 11 232 21 ("get-width" "horz" "get-height" "vert" "orientation" "case")}
        {Lisp-Entry "new-rect" method #f 238 11 238 19 ("horz" "Rect" "new" "vert" "orientation" "case" "bottom" "right" "top" "left")}
        {Lisp-Entry "get-place" method #f 244 11 244 20 ("get-h" "horz" "get-v" "vert" "orientation" "case" "point")}
        {Lisp-Entry "up-rect" method #f 255 11 255 18 ("0" "new-rect" "get-breadth" "b" "let")}
        {Lisp-Entry "down-rect" method #f 260 11 260 20 ("-" "0" "new-rect" "get-extent" "e" "get-breadth" "b" "let")}
        {Lisp-Entry "thumb-range" method #f 266 11 266 22 ("values" "pos" "+" "thumb-pos" "page-height" "fl/" "1" "min" "*" "fxround" "6" "max" "thumb" "shaft" "let*" "0" ">" "when" "get-start" "range" "get-end" "-" "r" "get-extent" "e" "get-breadth" "b" "let")}
        {Lisp-Entry "thumb-rect" method #f 277 11 277 21 ("0" "new-rect" "get-breadth" "b" "end" "start" "receive" "when" "thumb-range" "info" "let")}
        {Lisp-Entry "mouse-down" method #f 290 20 290 30 ("page-down" ">=" "page-up" "<=" "end" "start" "receive" "when" "thumb-range" "info" "place" "let" "else" "thumb-rect" "line-down" "down-rect" "line-up" "up-rect" "in-rect?" "cond" "acquire-capture" "get-pos" "tracking-start-pos" "get-place" "tracking-start" "tracking?" "set!" "start-tracking" "define" "pos")}
        {Lisp-Entry "drag-move" method #f 309 20 309 29 ("tracking?" "when" "tracking-start-pos" "+" "thumb-track" "'thumb-track" "call-scroll" "*" "quotient" "dp" "shaft" "tracking-start" "get-place" "dv" "get-start" "range" "get-end" "-" "r" "get-extent" "e" "get-breadth" "b" "let*" "track-thumb" "define" "pos")}
        {Lisp-Entry "drag-up" method #f 323 20 323 27 ("when" "release-capture" "kill-autorepeat" "tracking?" "set!" "end-tracking" "define" "rest" "pos")}
        {Lisp-Entry "Flat-Color" definition #f 338 14 338 24 ()}
        {Lisp-Entry "Background-Color" definition #f 341 14 341 30 ()}
        {Lisp-Entry "get-flat-color" method #f 345 11 345 25 ("flat-color" "set!" "Flat-Color" "unless")}
        {Lisp-Entry "flat-color" definition #f 351 15 351 25 ("166" "200" "176" "blue:" "188" "green:" "194" "red:" "Light" "name:" "Color" "white?" "if")}
        {Lisp-Entry "get-background-color" method #f 357 11 357 31 ("background-color" "set!" "Background-Color" "unless")}
        {Lisp-Entry "background-color" definition #f 363 15 363 31 ("227" "blue:" "240" "green:" "242" "red:" "white?" "if" "Light" "name:" "Color" "color" "let")}
        {Lisp-Entry "draw" method #f 370 20 370 24 ("7" "9" "Dark" "6" "line" "set-line-width" "Light" "8" "quotient" "v" "rect-height" "height" "let*" "-" "2" "width" "rectangle" "'rectangle" "edges:" "outer:" "raised" "'raised" "inner:" "draw-edge" "Entry-Border" "frame-rect" "when" "draw-scroll-bar" "else" "right" "'right" "down" "'down" "left" "'left" "up" "'up" "vert" "case" "cond" "get-background-color" "or" "cycle-debug-color!" "debug-paint?" "fill-background" "get-flat?" "flat?" "get-thumb" "thumb" "get-background" "background" "thumb-rect" "down-rect" "up-rect" "get-bounds" "bounds" "get-look" "look" "4" "get-top" "3" "get-left" "+" "draw-arrow-tip" "dv" "0" "1" "horz" "'horz" "orientation" "eq?" "if" "dh" "Black" "set-color" "Medium" "name:" "Color" "fill-rect" "-1" "inflate-rect" "inflated" "let" "draw-raised" "direction" "rect" "draw-button" "define" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-look" method #f 423 20 423 28 ("scrollbar" "'scrollbar" "else" "scrollbar/document" "'scrollbar/document" "document" "scrollbar/tool" "'scrollbar/tool" "find-look" "tool" "style" "case")}
        {Lisp-Entry "get-opaque?" method #f 435 20 435 31 ()}
        {Lisp-Entry "setup-autorepeat" method #f 444 11 444 27 ("autorepeat-delay" "delay:" "autorepeat-period" "autorepeat" "'autorepeat" "Pulse" "new" "set!" "autorepeat-pulse" "not" "when" "page-down" "page-up" "line-down" "line-up" "case" "pulse-action" "define" "action")}
        {Lisp-Entry "kill-autorepeat" method #f 456 11 456 26 ("set!" "close" "autorepeat-pulse" "when")}
        {Lisp-Entry "get-class-descriptor" method #f 467 25 467 45 ("Scrollbar-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 476 11 476 17 ()
        {Lisp-Entry "Scrollbar-Descriptor" class #f 482 7 482 27 ("style" "flat?" "page-height" "line-height" "range" "pos" "title:" "orientation" "name:" "View-Descriptor")
          {Lisp-Entry "class-image" method #f 498 20 498 31 ("Image-Resource" "class")}}}}})
"Scrollbar-Look"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Scrollbar-Look.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Scrollbar-Look" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Scrollbar-Look" class #f 43 7 43 21 ("initialize" "Look")
        {Lisp-Entry "background" property #f 46 12 46 22 ()}
        {Lisp-Entry "get-background" accessor #f 46 47 46 55 ()}
        {Lisp-Entry "set-background" accessor #f 46 47 46 55 ()}
        {Lisp-Entry "thumb" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-thumb" accessor #f 47 47 47 55 ()}
        {Lisp-Entry "set-thumb" accessor #f 47 47 47 55 ()}
        {Lisp-Entry "flat?" property #f 48 12 48 17 ()}
        {Lisp-Entry "get-flat?" accessor #f 48 47 48 55 ()}
        {Lisp-Entry "set-flat?" accessor #f 48 47 48 55 ()}}}})
"Scroller-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Scroller-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Scroller-View" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Scroller-View" class #f 48 7 48 20 ("explicit" "initialize" "Container")
        {Lisp-Entry "client" property #f 51 12 51 18 ()}
        {Lisp-Entry "vscroll?" property #f 52 12 52 20 ()}
        {Lisp-Entry "get-vscroll?" accessor #f 52 45 52 53 ()}
        {Lisp-Entry "set-vscroll?" accessor #f 52 45 52 53 ()}
        {Lisp-Entry "hscroll?" property #f 53 12 53 20 ()}
        {Lisp-Entry "get-hscroll?" accessor #f 53 45 53 53 ()}
        {Lisp-Entry "set-hscroll?" accessor #f 53 45 53 53 ()}
        {Lisp-Entry "flat?" property #f 54 12 54 17 ()}
        {Lisp-Entry "get-flat?" accessor #f 54 45 54 53 ()}
        {Lisp-Entry "set-flat?" accessor #f 54 45 54 53 ()}
        {Lisp-Entry "style" property #f 55 12 55 17 ()}
        {Lisp-Entry "get-style" accessor #f 55 45 55 53 ()}
        {Lisp-Entry "set-style" accessor #f 55 45 55 53 ()}
        {Lisp-Entry "vscroll" slot #f 58 8 58 15 ()}
        {Lisp-Entry "get-vscroll" accessor #f 58 37 58 45 ()}
        {Lisp-Entry "hscroll" slot #f 59 8 59 15 ()}
        {Lisp-Entry "get-hscroll" accessor #f 59 37 59 45 ()}
        {Lisp-Entry "default-name" method #f 62 20 62 32 ("scroller" "'scroller")}
        {Lisp-Entry "finish" method #f 66 20 66 26 ("get-content" "get-scroll-client" "set-client" "client" "unless" "nextmethod" "rest")}
        {Lisp-Entry "get-client" method #f 77 18 77 28 ("client")}
        {Lisp-Entry "set-client" method #f 81 18 81 28 ("layout-scrollee" "self" "set-scroller" "invalidate-layout" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "inner?" method #f 95 20 95 26 ("hscroll" "vscroll" "eq?" "nextmethod" "or" "view")}
        {Lisp-Entry "content-inner?" method #f 101 20 101 34 ("view")}
        {Lisp-Entry "size-change" method #f 110 20 110 31 ("layout-scrollee-patch" "layout-scrollee" "get-content" "get-client" "eq?" "client" "and" "when" "nextmethod" "size")}
        {Lisp-Entry "layout" method #f 124 20 124 26 ("layout-scrollee" "client" "set-size" "set-position" "when" "'content" "find-child" "content" "get-size" "let" "hscroll-size" "hscroll-position" "vscroll-size" "vscroll-position" "hscroll" "get-height" "scrollbar-size" "vscroll" "if" "get-width" "-" "Dimension" "new" "content-size" "0" "Point" "size" "content-position" "define")}
        {Lisp-Entry "draw" method #f 166 20 166 24 ("Medium" "name:" "Color" "fill-rect" "scrollbar-size" "-" "Rect" "new" "rect" "get-bottom" "b" "get-right" "r" "get-bounds" "bounds" "let" "hscroll?" "vscroll?" "and" "when" "lv" "lh" "context" "surface")}
        {Lisp-Entry "set-scroll-pos" method #f 180 20 180 34 ("hscroll" "horz" "set-pos" "vscroll" "when" "vert" "case" "redraw?" "redraw?:" "pos" "part")}
        {Lisp-Entry "set-scroll-info" method #f 186 20 186 35 ("hscroll" "horz" "set-info" "vscroll" "when" "vert" "case" "page" "max" "min" "part")}
        {Lisp-Entry "on-vscroll" method #f 192 20 192 30 ("get-scrolled-position" "get-v" "thumb-track" "page-down" "get-page-size" "page-up" "-" "line-down" "redraw?:" "get-line-size" "0" "Point" "new" "scroll" "line-up" "case" "client" "when" "orientation" "thumb-pos" "code")}
        {Lisp-Entry "on-hscroll" method #f 202 20 202 30 ("get-scrolled-position" "get-h" "thumb-track" "page-down" "get-page-size" "page-up" "-" "line-down" "redraw?:" "0" "get-line-size" "Point" "new" "scroll" "line-up" "case" "client" "when" "orientation" "thumb-pos" "code")}
        {Lisp-Entry "set-vscroll-needed?" method #f 217 18 217 37 ("layout-view" "close" "style" "style:" "flat?" "flat?:" "vert" "'vert" "orientation:" "self" "parent:" "Scrollbar" "new" "set!" "not" "if" "vscroll" "boolean" "neq?" "vscroll?" "and" "when" "flag")}
        {Lisp-Entry "set-hscroll-needed?" method #f 226 18 226 37 ("layout-view" "close" "style" "style:" "flat?" "flat?:" "horz" "'horz" "orientation:" "self" "parent:" "Scrollbar" "new" "set!" "not" "if" "hscroll" "boolean" "neq?" "hscroll?" "and" "when" "flag")}
        {Lisp-Entry "get-class-descriptor" method #f 240 25 240 45 ("Scroller-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 249 11 249 17 ()
        {Lisp-Entry "Scroller-View-Descriptor" class #f 255 7 255 31 ("style" "flat?" "hscroll?" "domain" "vscroll?" "title:" "client" "name:" "Layout-View-Descriptor")}}}})
"Search-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Search-Manager.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.search.Search-Manager" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Search-Manager" class #f 46 20 46 34 ("159" "848" "5" "4" "Point" "position:" "tab" "name:" "169" "857" "Dimension" "size:" "View")
        {Lisp-Entry "external-name" method #f 54 25 54 38 ("search-manager" "'search-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 63 25 63 34 ("Image-Resource")}
        {Lisp-Entry "host-position" method #f 67 25 67 38 ("220" "300" "Point")}
        {Lisp-Entry "host-size" method #f 71 25 71 34 ("169" "857" "Dimension")}
        {Lisp-Entry "host-title" method #f 75 25 75 35 ()}
        {Lisp-Entry "install" method #f 84 20 84 27 ("load-session" "nextmethod" "rest")}
        {Lisp-Entry "load-session" method #f 94 11 94 23 ("get-children" "get-content" "first-child" "set-session-properties" "when" "find-component" "sheet" "get-name" "name" "config" "lambda" "for-each" "focus?:" "set-selection-name" "'tab" "locate" "tab" "get-active" "active" "search-manager" "tools" "get-preferences" "pref" "let*")}
        {Lisp-Entry "confirm-close" method #f 107 20 107 33 ("save-session" "rest")}
        {Lisp-Entry "save-session" method #f 111 20 111 32 ("get-session-properties" "Search-Manager" "'Search-Manager" "set-property" "Opened-Windows" "'Opened-Windows" "properties" "push-property" "get-size" "size:" "get-position" "position:" "external-name" "list" "info" "let")}
        {Lisp-Entry "get-session-properties" method #f 121 11 121 33 ("get-children" "get-content" "first-child" "get-session-properties" "get-name" "sheet" "lambda" "map" "get-selection-name" "cons" "'tab" "locate" "tab" "let")}
        {Lisp-Entry "guest-actions" method #f 134 20 134 33 ("nextmethod" "search-manager" "'search-manager" "find-actions" "cons")}
        {Lisp-Entry "resize" method #f 144 20 144 26 ("tab" "'tab" "locate" "size-figure" "dv" "dh")}
        {Lisp-Entry "on-whole-words" method #f 148 11 148 25 ("toggle-whole-words" "evt")}
        {Lisp-Entry "on-ignore-case" method #f 152 11 152 25 ("toggle-ignore-case" "evt")}
        {Lisp-Entry "on-regexp" method #f 156 11 156 20 ("toggle-regexp" "evt")}
        {Lisp-Entry "on-preserve-case" method #f 160 11 160 27 ("toggle-preserve-case" "evt")}
        {Lisp-Entry "on-play-recording" method #f 164 11 164 28 ("toggle-play-recording" "evt")}
        {Lisp-Entry "toggle-whole-words" method #f 168 11 168 29 ("get-checked?" "not" "set-checked?" "whole-words?" "'whole-words?" "get-search" "locate" "checkbox" "let")}
        {Lisp-Entry "toggle-ignore-case" method #f 173 11 173 29 ("get-checked?" "not" "set-checked?" "ignore-case?" "'ignore-case?" "get-search" "locate" "checkbox" "let")}
        {Lisp-Entry "toggle-regexp" method #f 178 11 178 24 ("get-checked?" "not" "set-checked?" "regexp?" "'regexp?" "get-search" "locate" "checkbox" "let")}
        {Lisp-Entry "toggle-preserve-case" method #f 183 11 183 31 ("get-checked?" "not" "set-checked?" "preserve-case?" "'preserve-case?" "get-search" "locate" "checkbox" "let")}
        {Lisp-Entry "toggle-play-recording" method #f 188 11 188 32 ("get-checked?" "not" "set-checked?" "play-recording?" "'play-recording?" "get-search" "locate" "checkbox" "let")}
        {Lisp-Entry "get-search" method #f 198 18 198 28 ("get-sheet-search" "selected-sheet" "sheet" "'tab" "locate" "tab" "let*")}
        {Lisp-Entry "get-search-named" method #f 204 18 204 34 ("get-sheet-search" "when" "child" "sheet" "'tab" "locate" "tab" "let*" "name")}
        {Lisp-Entry "get-searches" method #f 211 18 211 30 ("get-children" "get-sheet-search" "map" "'tab" "locate" "tab" "let")}
        {Lisp-Entry "get-sheet-search" definition #f 216 15 216 31 ("get-content" "first-child" "sheet")}
        {Lisp-Entry "current-history-item" method #f 225 11 225 31 ("get-search" "current-history-item")}
        {Lisp-Entry "install-history-item" method #f 229 21 229 41 ("get-search" "install-history-item" "item")}
        {Lisp-Entry "edit-definitions" method #f 238 18 238 34 ("select-results" "->string" "list" "add-results" "'definitions" "set-mode" "get-application" "get-search-results" "results" "let" "definitions" "name")}
        {Lisp-Entry "edit-references" method #f 245 18 245 33 ("select-results" "constituent-test:" "whole-words?:" "make-search-context" "->string" "list" "add-results" "set-context" "'references" "set-mode" "get-application" "get-search-results" "results" "let" "context" "constituent-test" "references" "name")}}}})
"Search-Manager-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Search-Manager-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.search.Search-Manager-Actions" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Search-Manager-Actions" class #f 45 20 45 42 ("on-play-recording" "play-recording" "on-preserve-case" "preserve-case" "on-regexp" "regexp" "on-ignore-case" "ignore-case" ":alt" "Shortcut" "shortcut:" "on-whole-words" ":focus-guest" "Event-Handler" "action-handler:" "whole-words" "name:" "Actions")}}})
"Search-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Search-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.search.Search-Menu" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Search-Menu" class #f 45 20 45 31 ("replace-selected" "replace-all" "replace&find-forward" "replace" "replace-separator" "find-backward" "find-forward" "find-separator" "pop-results" "edit-current" "edit-previous" "edit-next" "edit-separator" "find-in-projects" "find-in-directories" "find-in-text" "Image-Resource" "icon:" "application" "Action" "action-handler:" "find" "name:" "title:" "Menu")}}})
"Search-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Search-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.search.Search-Preferences" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Search-Preferences" class #f 45 20 45 38 ("projects" "directories" "text" "name:" "Image-Resource" "icon:" "title:" "initialize" "Tool-Preferences")
        {Lisp-Entry "active" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-active" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "set-active" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "get-class-descriptor" method #f 63 25 63 45 ("Search-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 72 11 72 17 ()
        {Lisp-Entry "Search-Preferences-Descriptor" class #f 78 7 78 36 ("active" "name:" "Tool-Preferences-Descriptor")
          {Lisp-Entry "component-get-addable-base" method #f 87 20 87 46 ("Search-View-Preferences" "component")}
          {Lisp-Entry "component-get-addable-details" method #f 91 20 91 49 ("expression?" "play-recording?" "preserve-case?" "ignore-case?" "100" "whole-words?" "targets" "150" "name-info" "component")}}}}})
"Search-Results"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Search-Results.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.search.Search-Results" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Search-Results" class #f 53 20 53 34 ("100" "type" "337" "200" "width:" "title:" "name" "on-context-menu" ":form" "Event-Handler" "context-menu-handler:" "multiple-selection?:" "location" "filled-column:" "results" "header" "content" "scroller" "stack" "Dark" "Medium" "Color" "border-color:" "2" "Rect" "border-insets:" "21" "120" "0" "4" "Dimension" "size:" "tooltip-text:" "clear" "tools" "name:" "initialize" "Navigable-Results")
        {Lisp-Entry "mode" slot #f 56 8 56 12 ()}
        {Lisp-Entry "get-mode" accessor #f 56 48 56 56 ()}
        {Lisp-Entry "set-mode" accessor #f 56 48 56 56 ()}
        {Lisp-Entry "context" slot #f 57 8 57 15 ()}
        {Lisp-Entry "get-context" accessor #f 57 48 57 56 ()}
        {Lisp-Entry "set-context" accessor #f 57 48 57 56 ()}
        {Lisp-Entry "current-results" slot #f 58 8 58 23 ()}
        {Lisp-Entry "results-stack" slot #f 59 8 59 21 ()}
        {Lisp-Entry "get-results-stack" accessor #f 59 46 59 54 ()}
        {Lisp-Entry "external-name" method #f 80 25 80 38 ("search-results" "'search-results" "rest")}
        {Lisp-Entry "form-model" method #f 84 20 84 30 ("nextmethod" "else" "Search-Results-Tree" "results" "get-name" "case" "form")}
        {Lisp-Entry "host-icon" method #f 95 25 95 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 99 25 99 35 ()}
        {Lisp-Entry "on-context-menu" method #f 108 11 108 26 ("track-popup-menu" "lambda" "with-context-click" "when" "get-context-menu" "menu" "acquire" "acquired" "get-position" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "get-context-menu" method #f 119 20 119 36 ("Found-Menu" "new")}
        {Lisp-Entry "clear-results" method #f 123 20 123 33 ("pop-results" "bell" "1" "results-stack" "length" "<=" "if")}
        {Lisp-Entry "edit-selection" method #f 134 20 134 34 ("with-locked-update" "else" "1" "0" "length" "case" "first-frame" "focus-host" "edit-item" "item" "lambda" "for-each" "edit" "define" "get-tree" "get-selection" "selection" "let" "forward?")}
        {Lisp-Entry "edit-item" method #f 150 18 150 27 ("edit-document" "get-tree" "get-row" "get-user-data" "definition" "let" "visible?" "focus?" "forward?" "item")}
        {Lisp-Entry "edit-document" method #f 160 11 160 24 ("class" "Moniker" "target" "entry" "bind" "car" "pair?" "edit" "else" "activate-focus?:" "get-references-target" "edit-reference" "references" "mode" "case" "Catalog-Entry" "cond" "lambda" ":wait" "with-cursor" "values" "focus-host" "select-expr-backward" "select-expr" "Cell" "new" "set-caret" "number?" "if" "Text-View" "is?" "and" "when" "get-guest" "guest" "let" "return-new?:" "visible?:" "edit-document" "new?" "frame" "receive" "get-application" "appl" "let*" "targets" "results" "source" "edit-source" "define" "visible?" "focus?" "forward?" "info")}
        {Lisp-Entry "item-icon" method #f 203 29 203 38 ("else" "Method-Entry" "Constructor-Entry" "Variable-Entry" "Instance-Init-Entry" "Static-Init-Entry" "Interface-Entry" "Image-Resource" "Class-Entry" "is?" "cond" "info")}
        {Lisp-Entry "item-moniker" method #f 214 29 214 41 ("cadr" "Moniker" "car" "get-moniker" "Catalog-Entry" "is?" "if" "info")}
        {Lisp-Entry "item-location" method #f 222 29 222 42 ("present-location" "not" "if" "item-moniker" "moniker" "let" "info")}
        {Lisp-Entry "item-type" method #f 229 29 229 38 ("else" "Method-Entry" "Constructor-Entry" "Variable-Entry" "Instance-Init-Entry" "Static-Init-Entry" "Interface-Entry" "Class-Entry" "is?" "cond" "info")}
        {Lisp-Entry "present-info" method #f 240 18 240 30 ("->string" "present-name" "target" "pos" "moniker" "bind" "Moniker" "car" "present" "Catalog-Entry" "is?" "if" "info")}
        {Lisp-Entry "add-results" method #f 249 18 249 29 ("update-stack-combo" "update-results" "cons" "results-stack" "list" "current-results" "set!" "preserve-current-selection" "target" "targets" "results")}
        {Lisp-Entry "pop-results" method #f 257 11 257 22 ("update-stack-combo" "update-results" "update-search-targets" "car" "current-results" "cdr" "results-stack" "set!")}
        {Lisp-Entry "set-results" method #f 265 11 265 22 ("update-stack-combo" "update-results" "update-search-targets" "current-results" "set!" "preserve-current-selection" "info")}
        {Lisp-Entry "get-references-target" method #f 273 11 273 32 ("current-results" "third")}
        {Lisp-Entry "preserve-current-selection" method #f 277 11 277 37 ("get-tree" "get-selection" "set-fourth!" "current-results" "when")}
        {Lisp-Entry "update-search-targets" method #f 282 11 282 32 ("set-search-targets" "end-search-edition" "get-application" "appl" "let" "current-results" "target" "targets" "results" "bind")}
        {Lisp-Entry "update-stack-combo" method #f 289 11 289 29 ("current-results" "set-value" "results-stack" "first" "join" "list" "target" "targets" "results" "bind" "info" "lambda" "map" "set-choices" "stack" "'stack" "locate" "combo" "let")}
        {Lisp-Entry "update-results" method #f 298 11 298 25 ("update-search-actions" "Search-Results" "select-docked" "with-locked-update" "list" "or" "set-selection" "0" "get-visible-count" ">" "and" "when" "present-info" "key:" "string<?" "sort" "target:" "add-item" "info" "for-each" "get-node-column" "set-toplevel-controls?" "else" "references" "mode" "case" "flag" "lambda" "with-update-locked" "remove-every-row" "get-tree" "tree" "get-application" "appl" "let" "current-results" "selection" "target" "targets" "results" "bind")}
        {Lisp-Entry "add-item" method #f 321 11 321 19 ("user-data:" "list" "children:" "state:" "add-row" "cons" "user-data" "item-type" "type" "item-location" "Tree-Label" "location" "item-icon" "image:" "present-info" "title:" "Tree-Node" "new" "node" "collapsed" "'collapsed" "dynamic" "'dynamic" "references" "'references" "mode" "eq?" "if" "state" "get-tree" "tree" "let" "target" "target:" "father" "father:" "info")}
        {Lisp-Entry "update-tree-row" method #f 331 21 331 36 ("present-info" "key:" "string<?" "sort" "whole-words?:" "->string" "make-search-context" "list" "target:" "father:" "add-item" "info" "lambda" "for-each" "context" "context:" "get-references" "definitions" "get-cataloguer" "cataloguer" "get-application" "appl" "get-name" "name" "let*" "get-user-data" "target" "entry" "bind" "references" "mode" "case" "row")}
        {Lisp-Entry "selected-files" method #f 344 11 344 25 ("File" "car" "Pair" "is?" "and" "when" "get-row" "get-user-data" "info" "let" "rank" "lambda" "collect" "get-selection" "selection" "results" "'results" "locate" "tree" "let*")}}
      {Lisp-Entry "Stack-Combo" class #f 359 7 359 18 ("Combo-Box")
        {Lisp-Entry "content-change" method #f 362 20 362 34 ("get-value" "parent" "get-creator" "set-results" "origin")}}
      {Lisp-Entry "Found-Menu" class #f 371 7 371 17 ("on-copy" ":focus" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "title:" "copy" "name:" "Context-Menu")}}})
"Search-Results-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Search-Results-Tree.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.search.Search-Results-Tree" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Search-Results-Tree" class #f 44 20 44 39 ("Tree-View")
        {Lisp-Entry "focus-actions" method #f 52 20 52 33 ("nextmethod" "search-results-tree" "'search-results-tree" "find-actions" "cons")}
        {Lisp-Entry "get-search" method #f 62 11 62 21 ("Search-Results" "find-ascendant")}
        {Lisp-Entry "return-press" method #f 71 20 71 32 ("get-search" "edit-selection" "key")}
        {Lisp-Entry "copy-selection" method #f 75 20 75 34 ("get-selection" "get-row" "get-user-data" "get-search" "present-info" "n" "lambda" "map" "format" "set-clipboard-text")}
        {Lisp-Entry "select-all" method #f 83 20 83 30 ("rest")}
        {Lisp-Entry "on-edit-definitions" method #f 87 11 87 30 ("get-search" "edit-selection" "evt")}
        {Lisp-Entry "update-row" method #f 91 20 91 30 ("get-search" "update-tree-row" "row")}}}})
"Search-Results-Tree-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Search-Results-Tree-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.search.Search-Results-Tree-Actions" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Search-Results-Tree-Actions" class #f 45 20 45 47 (":alt" "alternate-shortcut:" "F12" "on-edit-definitions" "edit-definitions" "Return" ":control" "Shortcut" "shortcut:" "on-action" ":focus" "Event-Handler" "action-handler:" "action" "name:" "Actions")}}})
"Search-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Search-View.jazz"} 1290007746
    {Lisp-Entry "jazz.ui.search.Search-View" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Search-View" class #f 54 20 54 31 ("200" "388" "visible?:" "expression?" "483" "play-recording?" "375" "preserve-case?" "226" "regexp?" "118" "ignore-case?" "18" "100" "114" "whole-words?" "173" "display-images?:" "toplevel-controls?:" "176" "width:" "15" "default-row-height:" "Label-User" "Font" "font:" "targets" "fill" "layout-type:" "vscroll?:" "style:" "edge" "border-type:" "91" "373" "370" "targets-border" "on-splitter-move" "move-handler:" "6" "362" "vertical" "97" "350" "8" "10" "domain" "default?:" "on-search" ":form" "Event-Handler" "action-handler:" "24" "80" "Dimension" "size:" "14" "755" "Point" "position:" "title:" "search" "name:" "Layout-View")
        {Lisp-Entry "next-radio" method #f 79 18 79 28 ("length" "1" "+" "modulo" "element" "set-search-domain" "when" "find" "pos" "get-search-domains" "domains" "get-search-domain" "domain" "let*")}
        {Lisp-Entry "next-tab" method #f 87 18 87 26 ("set-selection" "1" "+" "modulo" "new-selection" "get-selection" "old-selection" "get-children" "length" "max-selection" "get-manager" "manager" "let*")}
        {Lisp-Entry "finish" method #f 100 20 100 26 ("get-columns" "1" "set-justification" "column" "lambda" "for-each" "targets" "'targets" "locate" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-session-properties" method #f 113 26 113 48 ("get-expression?" "expression?" "'expression?" "get-play-recording?" "play-recording?" "'play-recording?" "get-preserve-case?" "preserve-case?" "'preserve-case?" "get-ignore-case?" "ignore-case?" "'ignore-case?" "get-whole-words?" "whole-words?" "'whole-words?" "get-search-targets" "targets" "'targets" "get-search-domain" "domain" "'domain" "list")}
        {Lisp-Entry "set-session-properties" method #f 124 26 124 48 ("get-expression?" "set-expression?" "get-play-recording?" "set-play-recording?" "get-preserve-case?" "set-preserve-case?" "get-ignore-case?" "set-ignore-case?" "get-whole-words?" "set-whole-words?" "get-targets" "set-search-targets" "config")}
        {Lisp-Entry "get-manager" method #f 138 11 138 22 ("3" "child")}
        {Lisp-Entry "get-results" method #f 147 21 147 32 ("get-application" "get-search-results")}
        {Lisp-Entry "get-targets-tree" method #f 151 18 151 34 ("targets" "'targets" "locate")}
        {Lisp-Entry "get-search-targets" method #f 155 18 155 36 ("get-output" "naturals" "list" "put" "empty-string?" "and" "unless" "1" "repl" "0" "Cell" "get-cell-data" "get-title" "find" "let" "line" "lambda" "for-each" "in-edition?" "if" "List-Factory" "new" "fact" "get-visible-count" "height" "targets" "'targets" "locate" "tree" "let*")}
        {Lisp-Entry "set-search-targets" method #f 171 18 171 36 ("0" "naturals" "invalidate-cell" "set-cell-title" "Cell" "new" "cell" "col" "line" "target" "for-each" "lambda" "with-update-locked" "get-visible-count" "height" "get-columns-count" "width" "ensure-visible-count" "length" "count" "'targets" "locate" "tree" "let" "targets")}
        {Lisp-Entry "get-find-targets" method #f 197 18 197 34 ("get-search-targets" "regexp?:" "ignore-case?:" "whole-words?:" "first" "make-search-context" "target" "lambda" "map" "->search-set" "get-regexp?" "regexp?" "get-ignore-case?" "ignore-case?" "get-whole-words?" "whole-words?" "let")}
        {Lisp-Entry "get-replace-targets" method #f 210 11 210 30 ("get-search-targets" "second" "map")}
        {Lisp-Entry "get-search-domain" method #f 214 18 214 35 ("get-search-domains" "get-selected?" "and" "when" "find-component" "radio" "name" "lambda" "find-if" "domain" "'domain" "locate" "get-content" "group" "let")}
        {Lisp-Entry "set-search-domain" method #f 223 18 223 35 ("get-children" "eq?" "set-selected?" "Radio-Button" "is?" "child" "lambda" "for-each" "when" "find-component" "radio" "'domain" "locate" "get-content" "group" "let*" "domain")}
        {Lisp-Entry "get-whole-words?" method #f 233 18 233 34 ("whole-words?" "'whole-words?" "locate" "get-checked?")}
        {Lisp-Entry "set-whole-words?" method #f 237 18 237 34 ("whole-words?" "'whole-words?" "locate" "set-checked?" "flag")}
        {Lisp-Entry "get-ignore-case?" method #f 241 18 241 34 ("ignore-case?" "'ignore-case?" "locate" "get-checked?")}
        {Lisp-Entry "set-ignore-case?" method #f 245 18 245 34 ("ignore-case?" "'ignore-case?" "locate" "set-checked?" "flag")}
        {Lisp-Entry "get-regexp?" method #f 249 18 249 29 ("regexp?" "'regexp?" "locate" "get-checked?")}
        {Lisp-Entry "set-regexp?" method #f 253 18 253 29 ("regexp?" "'regexp?" "locate" "set-checked?" "flag")}
        {Lisp-Entry "get-preserve-case?" method #f 257 18 257 36 ("preserve-case?" "'preserve-case?" "locate" "get-checked?")}
        {Lisp-Entry "set-preserve-case?" method #f 261 18 261 36 ("preserve-case?" "'preserve-case?" "locate" "set-checked?" "flag")}
        {Lisp-Entry "get-play-recording?" method #f 265 18 265 37 ("play-recording?" "'play-recording?" "locate" "get-checked?")}
        {Lisp-Entry "set-play-recording?" method #f 269 18 269 37 ("play-recording?" "'play-recording?" "locate" "set-checked?" "flag")}
        {Lisp-Entry "get-expression?" method #f 273 18 273 33 ("expression?" "'expression?" "locate" "get-checked?")}
        {Lisp-Entry "set-expression?" method #f 277 18 277 33 ("expression?" "'expression?" "locate" "set-checked?" "flag")}
        {Lisp-Entry "get-search-domains" method #f 286 26 286 44 ()}
        {Lisp-Entry "get-active-window-domain" method #f 290 26 290 50 ()}
        {Lisp-Entry "on-search" method #f 299 19 299 28 ("search-targets" "bell" "get-contexts" "null?" "if" "get-find-targets" "search-set" "end-edition" "'targets" "locate" "targets" "let" "get-player" "hide" "evt")}
        {Lisp-Entry "search-targets" method #f 309 29 309 43 ("targets")}
        {Lisp-Entry "resize" method #f 313 20 313 26 ("expression?" "'expression?" "play-recording?" "'play-recording?" "preserve-case?" "'preserve-case?" "regexp?" "'regexp?" "ignore-case?" "'ignore-case?" "whole-words?" "'whole-words?" "targets-border" "'targets-border" "domain" "'domain" "size-figure" "0" "search" "'search" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-splitter-move" method #f 326 11 326 27 ("update-view" "-" "targets-border" "'targets-border" "move-figure" "0" "domain" "'domain" "locate" "size-figure" "delta:" "get-property" "delta" "let" "evt")}
        {Lisp-Entry "on-return-press" method #f 334 20 334 35 ("on-search" "evt")}
        {Lisp-Entry "on-find-forward" method #f 338 19 338 34 ("bell" "follow-search-results?" "find-forward" "and" "get-search-domain" "domain" "get-target-text" "target" "get-contexts" "null?" "unless" "get-find-targets" "search-set" "let" "evt")}
        {Lisp-Entry "on-find-backward" method #f 347 19 347 35 ("bell" "follow-search-results?" "find-backward" "and" "get-search-domain" "domain" "get-target-text" "target" "get-contexts" "null?" "unless" "get-find-targets" "search-set" "let" "evt")}
        {Lisp-Entry "on-replace" method #f 356 19 356 29 ("bell" "replace" "and" "unless" "get-target-text" "target" "get-expression?" "expression?" "get-play-recording?" "play?" "get-preserve-case?" "case?" "get-ignore-case?" "ignore-case?" "get-application" "appl" "get-replace-targets" "repl" "get-find-targets" "get-contexts" "find" "let*" "evt")}
        {Lisp-Entry "on-replace&find-forward" method #f 369 19 369 42 ("bell" "replace&find-forward" "and" "unless" "get-target-text" "target" "follow-search-results?" "next?" "get-expression?" "expression?" "get-play-recording?" "play?" "get-preserve-case?" "case?" "get-ignore-case?" "ignore-case?" "get-application" "appl" "get-search-domain" "domain" "get-replace-targets" "repl" "get-find-targets" "get-contexts" "find" "let*" "evt")}
        {Lisp-Entry "on-replace-all" method #f 384 19 384 33 ("replace-all" "bell" "not" "if" "get-target-text" "target" "get-expression?" "expression?" "get-play-recording?" "play?" "get-preserve-case?" "case?" "get-ignore-case?" "ignore-case?" "get-application" "appl" "get-replace-targets" "repl" "get-find-targets" "get-contexts" "find" "let*" "evt")}
        {Lisp-Entry "on-replace-selected" method #f 398 19 398 38 ("format-plural" "format" "close" "increase!" "save" "get-modified?" "and" "when" "replace-all" "get-name" "user-feedback" "get-controller" "get-moniker" "moniker" "get-text-view" "target" "get-guest" "guest" "edit-item" "new?" "frame" "receive" "item" "lambda" "for-each" "0" "modified-count" "get-selection" "selection" "'results" "locate" "tree" "get-results" "results" "get-expression?" "expression?" "get-play-recording?" "play?" "get-preserve-case?" "case?" "get-ignore-case?" "ignore-case?" "get-application" "appl" "get-replace-targets" "repl" "get-find-targets" "get-contexts" "find" "yes" "'yes" "auto-save/close?" "let*" "throw-cancel" "cancel" "'cancel" "eq?" "if" "confirmation" "'confirmation" "type:" "message-box" "code" "let" "evt")}
        {Lisp-Entry "get-target-text" method #f 432 11 432 26 ("get-text-view" "Document" "get-guest" "guest" "Frame-Host" "is?" "when" "first-frame" "frame" "let")}
        {Lisp-Entry "follow-search-results?" method #f 440 11 440 33 ("get-active-window-domain" "neq?" "not" "or" "domain")}
        {Lisp-Entry "get-search-reporter" method #f 449 21 449 40 ("show" "setup-search-reporter" "register-activity" "reporter" "get-activity-manager" "manager" "let*" "count")}
        {Lisp-Entry "setup-search-reporter" method #f 457 29 457 50 ("count" "reporter")}
        {Lisp-Entry "replace" method #f 466 11 466 18 ("get-application" "get-recorder" "play-current-recording" "acquire-focus" "insert-string" "not" "when" "get-selected-string" "let*" "else" "char->integer" "irregex-match-substring" "2" "+" "string-ref" "eqv?" "reverse" "string-append" "apply" ">=" "cond" "substring" "cons" "collect" "res" "i" "from" "lp" "string-length" "-" "end" "repl" "cdr" "expand-replacement" "get-regexp?" "car" "search-context-regexp" "irregex-match" "m" "let" "pair?" "and" "get-replacement" "capitalize" "upcase" "downcase" "case" "cs" "convert-case" "capitalized" "'capitalized" "upper-case" "'upper-case" "upper-case?" "1" "cardinality" "=" "lower-case" "'lower-case" "0" "element" "lower-case?" "empty-string?" "or" "if" "str" "determine-case" "define" "expression?" "play?" "case?" "ignore-case?" "repl-list" "find-list" "target")}
        {Lisp-Entry "replace&find-forward" method #f 520 11 520 31 ("find-forward" "null?" "unless" "replace" "next?" "expression?" "play?" "case?" "ignore-case?" "repl" "find" "target")}
        {Lisp-Entry "replace-all" method #f 526 11 526 22 ("find-forward" "while" "replace" "expression?" "play?" "case?" "ignore-case?" "repl" "find" "target")}
        {Lisp-Entry "find-forward" method #f 532 21 532 33 ("get-results" "edit-next" "and" "select-next" "or" "next?" "search-set" "target")}
        {Lisp-Entry "find-backward" method #f 537 21 537 34 ("get-results" "edit-previous" "and" "select-previous" "or" "previous?" "search-set" "target")}
        {Lisp-Entry "search-in-file" method #f 547 11 547 25 ("list" "put" "search-file" "info" "let" "step-it" "get-name" "user-feedback" "when" "cancel-requested?" "and" "unless" "reporter" "factory" "expression?" "file" "search-set")}
        {Lisp-Entry "search-in-directories" method #f 557 21 557 42 ("search-in-directory" "directory" "lambda" "for-each" "reporter" "factory" "expression?" "extensions" "directories" "search-set")}
        {Lisp-Entry "search-in-directory" method #f 563 21 563 40 ("ignored-toplevel-directories:" "search-in-file" "512000" "get-size" "<=" "ci=?" "test:" "member?" "not" "and" "cond" "get-extension" "ext" "file" "lambda" "iterate-directory" "equal?" "all-extensions?" "let" "reporter" "factory" "expression?" "extensions" "directory" "search-set")}
        {Lisp-Entry "search-file" method #f 576 11 576 22 ("search-expressions" "quotation" "'quotation" "code" "'code" "ci=?" "mode" "end:" "start:" "Jazz-Explorer" "expl" "text-beginning" "beginning" "let*" "set-moniker" "Jazz-Text-View" "new" "text" "constituent-test:" "contextual-search" "extension-constituent-test" "constituent-test" "read-content-string" "content" "reader" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "char-encoding-errors:" "parse" "path:" "list" "call-with-input-file" "not" "if" "get-extension" "ext" "let" "exists?" "when" "expression?" "search-set" "file")}
        {Lisp-Entry "select-search" method #f 598 26 598 39 ("0" "Cell" "select-cell" "'targets" "locate" "targets" "let")}
        {Lisp-Entry "current-history-item" method #f 608 11 608 31 ("get-selection" "get-content" "get-expression?" "get-play-recording?" "get-preserve-case?" "get-ignore-case?" "get-whole-words?" "get-search-targets" "get-search-domain" "get-results" "get-mode" "History-Search-Item" "new" "results" "'results" "locate" "tree" "let")}
        {Lisp-Entry "install-history-item" method #f 623 21 623 41 ("get-selection" "set-selection" "get-content" "set-content" "get-expression?" "set-expression?" "get-play-recording?" "set-play-recording?" "get-preserve-case?" "set-preserve-case?" "get-ignore-case?" "set-ignore-case?" "get-whole-words?" "set-whole-words?" "get-targets" "set-search-targets" "get-domain" "set-search-domain" "get-mode" "get-results" "set-mode" "results" "'results" "locate" "tree" "let" "item")}}
      {Lisp-Entry "Search-Targets" class #f 642 7 642 21 ("Tree-View")
        {Lisp-Entry "mouse-down" method #f 645 20 645 30 ("select-cell" "nextmethod" "not" "if" "uniform-height?:" "any?:" "view->tree" "cell" "let" "pos")}
        {Lisp-Entry "tab-stop-enter" method #f 652 20 652 34 ("0" "Cell" "select-cell")}
        {Lisp-Entry "add-empty-row" method #f 656 20 656 33 ("children:" "add-row" "columns" "new-empty-cell" "map" "children" "root-row" "or" "let" "father" "father:")}
        {Lisp-Entry "select-cell" method #f 662 20 662 31 ("select-all" "acquire-focus" "layout-scrollee" "self" "set-tree" "set-client" "get-string-content" "set-title" "lambda" "after-end:" "editor:" "edit-cell" "get-line" "ensure-row-exists" "get-title" "set-string-content" "when" "font" "font:" "top-padding:" "left-padding:" "get-content" "Tree-Embedded-Search-Text-View" "text" "hscroll?:" "vscroll?:" "parent:" "Scroller-View" "scroller" "Medium" "name:" "Color" "border-color:" "solid" "'solid" "border-type:" "Border-View" "new" "editor" "3" "0" "get-col" "=" "if" "left" "get-cell-data" "data" "let*" "end-edition" "cell")}}}})
"Search-View-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Search-View-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.search.Search-View-Preferences" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Search-View-Preferences" class #f 46 20 46 43 ("Image-Resource" "icon:" "initialize" "Preferences")
        {Lisp-Entry "targets" property #f 49 12 49 19 ()}
        {Lisp-Entry "get-targets" accessor #f 49 53 49 61 ()}
        {Lisp-Entry "set-targets" accessor #f 49 53 49 61 ()}
        {Lisp-Entry "whole-words?" property #f 50 12 50 24 ()}
        {Lisp-Entry "get-whole-words?" accessor #f 50 53 50 61 ()}
        {Lisp-Entry "set-whole-words?" accessor #f 50 53 50 61 ()}
        {Lisp-Entry "ignore-case?" property #f 51 12 51 24 ()}
        {Lisp-Entry "get-ignore-case?" accessor #f 51 53 51 61 ()}
        {Lisp-Entry "set-ignore-case?" accessor #f 51 53 51 61 ()}
        {Lisp-Entry "preserve-case?" property #f 52 12 52 26 ()}
        {Lisp-Entry "get-preserve-case?" accessor #f 52 53 52 61 ()}
        {Lisp-Entry "set-preserve-case?" accessor #f 52 53 52 61 ()}
        {Lisp-Entry "play-recording?" property #f 53 12 53 27 ()}
        {Lisp-Entry "get-play-recording?" accessor #f 53 53 53 61 ()}
        {Lisp-Entry "set-play-recording?" accessor #f 53 53 53 61 ()}
        {Lisp-Entry "expression?" property #f 54 12 54 23 ()}
        {Lisp-Entry "get-expression?" accessor #f 54 53 54 61 ()}
        {Lisp-Entry "set-expression?" accessor #f 54 53 54 61 ()}
        {Lisp-Entry "get-domain" method #f 66 25 66 35 ("nextmethod" "else" "Boolean-Domain" "new" "expression?" "play-recording?" "preserve-case?" "ignore-case?" "whole-words?" "field-name" "case" "property")}
        {Lisp-Entry "get-class-descriptor" method #f 77 25 77 45 ("Search-View-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 86 11 86 17 ()
        {Lisp-Entry "Search-View-Preferences-Descriptor" class #f 92 7 92 41 ("expression?" "play-recording?" "preserve-case?" "ignore-case?" "domain" "whole-words?" "title:" "targets" "name:" "Preferences-Descriptor")}}}})
"Selectable"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Selectable.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Selectable" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Selectable" interface #f 43 24 43 34 ()
        {Lisp-Entry "get-selected?" method #f 46 35 46 48 ()}
        {Lisp-Entry "set-selected?" method #f 47 35 47 48 ("selected?")}
        {Lisp-Entry "unselect" method #f 48 35 48 43 ()}}}})
"Selected-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Selected-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Selected-Event" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Selected-Event" class #f 43 7 43 21 ("Event")
        {Lisp-Entry "owner" slot #f 46 8 46 13 ()}
        {Lisp-Entry "get-owner" accessor #f 46 24 46 32 ()}
        {Lisp-Entry "old" slot #f 47 8 47 11 ()}
        {Lisp-Entry "get-old" accessor #f 47 24 47 32 ()}
        {Lisp-Entry "selected" slot #f 48 8 48 16 ()}
        {Lisp-Entry "get-selected" accessor #f 48 24 48 32 ()}
        {Lisp-Entry "force?" slot #f 49 8 49 14 ()}
        {Lisp-Entry "get-force?" accessor #f 49 24 49 32 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("force?~self" "selected~self" "old~self" "owner~self" "set!" "nextmethod" "user-origin?" "user-origin?:" "force?" "force?:" "selected" "old" "owner" "sender" "kind")}}}})
"Selection-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Selection-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Selection-Event" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Selection-Event" class #f 43 7 43 22 ("Event")
        {Lisp-Entry "old" slot #f 46 8 46 11 ()}
        {Lisp-Entry "get-old" accessor #f 46 29 46 37 ()}
        {Lisp-Entry "selection" slot #f 47 8 47 17 ()}
        {Lisp-Entry "get-selection" accessor #f 47 29 47 37 ()}
        {Lisp-Entry "origin" slot #f 48 8 48 14 ()}
        {Lisp-Entry "get-origin" accessor #f 48 29 48 37 ()}
        {Lisp-Entry "force-parent?" slot #f 49 8 49 21 ()}
        {Lisp-Entry "get-force-parent?" accessor #f 49 29 49 37 ()}
        {Lisp-Entry "force?" slot #f 50 8 50 14 ()}
        {Lisp-Entry "get-force?" accessor #f 50 29 50 37 ()}
        {Lisp-Entry "user-origin?" slot #f 51 8 51 20 ()}
        {Lisp-Entry "get-user-origin?" accessor #f 51 29 51 37 ()}
        {Lisp-Entry "initialize" method #f 54 20 54 30 ("user-origin?~self" "force?~self" "force-parent?~self" "origin~self" "selection~self" "old~self" "set!" "nextmethod" "user-origin?" "user-origin?:" "force?" "force?:" "force-parent?" "force-parent?:" "origin" "origin:" "selection" "old" "sender" "kind")}
        {Lisp-Entry "print" method #f 64 20 64 25 ("properties" "selection" "old" "kind" "self" "class-of" "category-name" "format" "readably" "printer")}}}})
"Selection-Handler"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "handler" "Selection-Handler.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.handler.Selection-Handler" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Selection-Handler" class #f 43 7 43 24 ("Event-Handler")
        {Lisp-Entry "force?" slot #f 46 8 46 14 ()}
        {Lisp-Entry "get-force?" accessor #f 46 22 46 30 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("force?~self" "set!" "nextmethod" "apply" "others" "force?" "bind-keywords" "rest")}
        {Lisp-Entry "print" method #f 55 20 55 25 ("properties" "null?" "force?" "if" "method-name" "target-name" "target" "or" "self" "class-of" "category-name" "format" "readably" "printer")}}}})
"Selection-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "selection" "Selection-Manager.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.selection.Selection-Manager" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Selection-Manager" class #f 40 20 40 37 ("0" "initialize" "Object")
        {Lisp-Entry "modifiers" property #f 43 12 43 21 ()}
        {Lisp-Entry "get-modifiers" accessor #f 43 53 43 61 ()}
        {Lisp-Entry "shift?" property #f 44 12 44 18 ()}
        {Lisp-Entry "get-shift?" accessor #f 44 53 44 61 ()}
        {Lisp-Entry "control?" property #f 45 12 45 20 ()}
        {Lisp-Entry "get-control?" accessor #f 45 53 45 61 ()}
        {Lisp-Entry "alt?" property #f 46 12 46 16 ()}
        {Lisp-Entry "get-alt?" accessor #f 46 53 46 61 ()}
        {Lisp-Entry "multiple-selection?" property #f 47 12 47 31 ()}
        {Lisp-Entry "get-multiple-selection?" accessor #f 47 53 47 61 ()}
        {Lisp-Entry "mouse-down-part" property #f 48 12 48 27 ()}
        {Lisp-Entry "get-mouse-down-part" accessor #f 48 53 48 61 ()}
        {Lisp-Entry "mouse-down-view" property #f 49 12 49 27 ()}
        {Lisp-Entry "get-mouse-down-view" accessor #f 49 53 49 61 ()}
        {Lisp-Entry "provider" slot #f 52 8 52 16 ()}
        {Lisp-Entry "current-operation" slot #f 53 8 53 25 ()}
        {Lisp-Entry "delay-selection?" slot #f 54 8 54 24 ()}
        {Lisp-Entry "initialize" method #f 57 20 57 30 ("provider" "set!" "nextmethod" "p")}
        {Lisp-Entry "debug-current-operation" method #f 67 18 67 41 ("current-operation")}
        {Lisp-Entry "mouse-down?" method #f 71 18 71 29 ("mouse-down" "'mouse-down" "current-operation" "eq?")}
        {Lisp-Entry "mouse-up?" method #f 75 18 75 27 ("mouse-up" "'mouse-up" "current-operation" "eq?")}
        {Lisp-Entry "mouse-double-down?" method #f 79 18 79 36 ("mouse-double-down" "'mouse-double-down" "current-operation" "eq?")}
        {Lisp-Entry "mouse-double-up?" method #f 83 18 83 34 ("mouse-double-up" "'mouse-double-up" "current-operation" "eq?")}
        {Lisp-Entry "keyboard?" method #f 87 18 87 27 ("keyboard" "'keyboard" "current-operation" "eq?")}
        {Lisp-Entry "locked?" method #f 91 18 91 25 ("locked" "'locked" "current-operation" "eq?")}
        {Lisp-Entry "set-modifiers" method #f 95 11 95 24 ("alt?" "control?" "shift?" "set!" "a?" "c?" "s?")}
        {Lisp-Entry "with-locked-operation" method #f 106 18 106 39 ("locked" "'locked" "set!" "begin" "unwind-protect" "current-operation" "old-operation" "let" "proc")}
        {Lisp-Entry "collapse?" method #f 115 18 115 27 ("row")}
        {Lisp-Entry "expand?" method #f 119 18 119 25 ("row")}
        {Lisp-Entry "end-delayed?" method #f 123 18 123 30 ("mouse-up?" "content" "'content" "mouse-down-part" "eq?" "control?" "shift?" "not" "multiple-selection?" "and" "if")}
        {Lisp-Entry "allow-start-drag?" method #f 129 18 129 35 ("mouse-down?" "content" "'content" "mouse-down-part" "eq?" "and")}
        {Lisp-Entry "mouse-down-part-control?" method #f 134 18 134 42 ("control" "'control" "mouse-down-part" "eq?")}
        {Lisp-Entry "delay-selection" method #f 143 18 143 33 ("delay-selection?" "set!")}
        {Lisp-Entry "change-selection?" method #f 147 18 147 35 ("else" "mouse-up" "delay-selection?" "not" "mouse-down" "current-operation" "case")}
        {Lisp-Entry "mouse-down" method #f 154 18 154 28 ("multiple-selection?" "set-modifiers" "mouse-down-part" "mouse-down-view" "mouse-down" "'mouse-down" "current-operation" "set!" "ms?" "alt?" "control?" "shift?" "part" "view")}
        {Lisp-Entry "mouse-up" method #f 162 18 162 26 ("set-modifiers" "mouse-up" "'mouse-up" "mouse-double-up" "'mouse-double-up" "current-operation" "set!" "mouse-double-down?" "if" "alt?" "control?" "shift?")}
        {Lisp-Entry "double-click" method #f 169 18 169 30 ("set-modifiers" "mouse-double-down" "'mouse-double-down" "current-operation" "set!" "alt?" "control?" "shift?")}
        {Lisp-Entry "keyboard" method #f 174 18 174 26 ("set-modifiers" "keyboard" "'keyboard" "current-operation" "set!" "alt?" "control?" "shift?")}
        {Lisp-Entry "reset" method #f 179 18 179 23 ("delay-selection?" "multiple-selection?" "set-modifiers" "mouse-down-part" "current-operation" "set!")}}}})
"Selection-Provider"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "selection" "Selection-Provider.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.selection.Selection-Provider" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Selection-Provider" interface #f 43 24 43 42 ()}}})
"Separator"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "layout" "Separator.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.layout.Separator" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Separator" class #f 43 7 43 16 ("Figure")
        {Lisp-Entry "default-size" method #f 46 20 46 32 ("0" "8" "Dimension")}}}})
"Separator-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Separator-Item.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Separator-Item" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Separator-Item" class #f 44 7 44 21 ("Item")
        {Lisp-Entry "default-size" method #f 52 20 52 32 ("8" "100" "Dimension")}
        {Lisp-Entry "preferred-height" method #f 56 20 56 36 ("8")}
        {Lisp-Entry "draw" method #f 65 20 65 24 ("4" "Light" "3" "line" "Dark" "name:" "Color" "set-color" "set-line-width" "get-width" "-" "right" "1" "left" "let" "lv" "lh" "context" "surface")}}}})
"Separator-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Separator-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Separator-View" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Separator-View" class #f 44 7 44 21 ("View")
        {Lisp-Entry "draw" method #f 52 20 52 24 ("Light" "0" "line" "Dark" "name:" "Color" "set-color" "set-line-width" "1" "get-height" "-" "top" "get-size" "size" "let*" "lv" "lh" "context" "surface")}}}})
"Shortcut"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "action" "Shortcut.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.action.Shortcut" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Shortcut" class #f 44 7 44 15 ("Object")
        {Lisp-Entry "modifiers" slot #f 47 8 47 17 ()}
        {Lisp-Entry "get-modifiers" accessor #f 47 25 47 33 ()}
        {Lisp-Entry "key" slot #f 48 8 48 11 ()}
        {Lisp-Entry "get-key" accessor #f 48 25 48 33 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("key~self" "modifiers~self" "nextmethod" ":control" ":shift" ":alt" "cons" "set!" "memq?" "when" "modifier" "lambda" "try" "standard" "let" "standardize-modifiers" "upcase" "char?" "if" "standardize-key" "define" "key" "modifiers")}
        {Lisp-Entry "hash-object" method #f 73 20 73 31 ("self" "shortcut-hash")}
        {Lisp-Entry "compare-object" method #f 77 20 77 34 (":not-equal" "else" ":equal" "get-key" "key" "get-modifiers" "modifiers" "=" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 87 20 87 25 ("key" "modifiers" "not-null?" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "present" method #f 100 18 100 25 ("key" "modifiers" "format")}
        {Lisp-Entry "present-shortcut" method #f 104 18 104 34 ("->string" "format" "key" "char?" ":shift" ":alt" "string-append" "set!" "modifiers" ":control" "memq?" "when" "str" "cdr" "localize" "not" "if" "assq" "info" "let" "shortcut" "localize-shortcut" "Multiply" "Subtract" "Add" "Delete" "Insert" "Next" "Prior" "Down" "Right" "Up" "Left" "End" "Home" "Tab" "Space" "Return" "Backspace" "Localized-Shortcuts" "define")}}}})
"Shortcut-Chooser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Shortcut-Chooser.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Shortcut-Chooser" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Shortcut-Chooser" class #f 44 20 44 36 ("ok" "buttons" "bindings-view" "title:" "title" "header" "name:" "initialize" "Shortcut-Viewer")
        {Lisp-Entry "action-name" property #f 47 12 47 23 ()}
        {Lisp-Entry "get-action-name" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "set-action-name" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "host-title" method #f 65 25 65 35 ()}
        {Lisp-Entry "setup-description" method #f 74 20 74 37 ("action-name" "format" "description" "'description" "locate" "set-title")}
        {Lisp-Entry "choose-hook" method #f 84 20 84 31 ("get-host" "end-modal" "begin" "null?" "if" "bindings" "shortcut")}}}})
"Shortcut-Viewer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Shortcut-Viewer.jazz"} 1289842868
    {Lisp-Entry "jazz.ui.preference.Shortcut-Viewer" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Shortcut-Viewer" class #f 49 20 49 35 ("on-cancel" "351" "cancel" "on-ok" ":host" "default?:" "90" "255" "ok" "on-choose" "action-handler:" "enabled?:" "120" "7" "choose" "south" "40" "buttons" "210" "on-context-menu" "context-menu-handler:" "on-double-click" "double-click-handler:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "bindings" "fill" "content" "vscroll?:" "hscroll?:" "document" "entry" "style:" "edge" "border-type:" "124" "436" "24" "bindings-border" "6" "center" "bindings-view" "2" "448" "54" "0" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "north" "location:" "56" "100" "Dimension" "size:" "header" "name:" "border" "layout-type:" "initialize" "Layout-View")
        {Lisp-Entry "selected-shortcut" slot #f 52 8 52 25 ()}
        {Lisp-Entry "finish" method #f 76 20 76 26 ("setup-chooser" "setup-description" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 82 20 82 33 ("get-tree" "acquire-focus")}
        {Lisp-Entry "host-title" method #f 91 25 91 35 ()}
        {Lisp-Entry "host-size" method #f 95 25 95 34 ("249" "448" "Dimension")}
        {Lisp-Entry "dialog-class" method #f 99 25 99 37 ("Shortcut-Chooser-Dialog")}
        {Lisp-Entry "setup-description" method #f 108 19 108 36 ("description" "'description" "locate" "set-title")}
        {Lisp-Entry "setup-chooser" method #f 113 11 113 24 ("choose" "shortcut" "lambda" "get-application" "set-shortcut-hook")}
        {Lisp-Entry "get-tree" method #f 125 11 125 19 ("bindings" "'bindings" "locate")}
        {Lisp-Entry "guest-actions" method #f 134 20 134 33 ("nextmethod" "shortcut-viewer" "'shortcut-viewer" "find-actions" "cons")}
        {Lisp-Entry "on-choose" method #f 144 11 144 20 ("setup-chooser" "ok" "'ok" "choose" "'choose" "locate" "set-enabled?" "get-tree" "remove-every-row" "selected-shortcut" "set!" "evt")}
        {Lisp-Entry "on-double-click" method #f 152 11 152 26 ("close-modal-dialog" "edit-action" "evt")}
        {Lisp-Entry "on-context-menu" method #f 157 11 157 26 ("track-popup-menu" "when" "new-menu" "menu" "let" "lambda" "with-context-click" "acquire" "acquired" "get-position" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-edit-action" method #f 168 11 168 25 ("close-modal-dialog" "edit-action" "evt")}
        {Lisp-Entry "on-return-press" method #f 173 20 173 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 179 20 179 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "get-modal-result" method #f 184 20 184 36 ("selected-shortcut")}
        {Lisp-Entry "choose" method #f 193 11 193 17 ("ok" "'ok" "choose" "'choose" "locate" "set-enabled?" "list" "'list" "'actions" "view-bindings" "get-tree" "tree" "get-application" "get-bindings-designer" "designer" "selected-shortcut" "set!" "choose-hook" "bindings" "get-output" "get-bindings" "get-children" "put" "shortcut=?" "and" "or" "when" "get-alternate-shortcut" "action-alternate-shortcut" "get-shortcut" "action-shortcut" "action" "actions" "lambda" "for-each" "List-Factory" "new" "fact" "let" "gather-bindings" "define" "shortcut")}
        {Lisp-Entry "choose-hook" method #f 217 29 217 40 ("bindings" "shortcut")}
        {Lisp-Entry "edit-action" method #f 226 11 226 22 ("get-method-name" "get-application" "edit-definitions" "bell" "not" "if" "get-action-handler" "action-handler" "when" "get-tree" "get-single-selected-data" "action" "let")}
        {Lisp-Entry "new-menu" method #f 240 11 240 19 ("self" "client:" "Action-Menu" "new" "when" "get-tree" "get-single-selected-data" "action" "let")}}
      {Lisp-Entry "Shortcut-Chooser-Dialog" class #f 251 7 251 30 ("Dialog")
        {Lisp-Entry "destroy" method #f 254 20 254 27 ("nextmethod" "get-application" "set-shortcut-hook")}}
      {Lisp-Entry "Shortcut-Header" class #f 264 7 264 22 ("View")
        {Lisp-Entry "Header-Color" definition #f 267 14 267 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 271 20 271 24 ("Header-Color" "1" "White" "name:" "Color" "0" "list" "get-bounds" "gradient-fill" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Action-Menu" class #f 280 7 280 18 ("shortcut-viewer" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "edit-action" "name:" "Context-Menu")}}})
"Shortcut-Viewer-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Shortcut-Viewer-Actions.jazz"} 1289842840
    {Lisp-Entry "jazz.ui.preference.Shortcut-Viewer-Actions" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Shortcut-Viewer-Actions" class #f 45 20 45 43 ("on-edit-action" "edit-action" ":shift" ":control" "Shortcut" "shortcut:" "on-choose" ":focus-guest" "Event-Handler" "action-handler:" "choose" "name:" "Actions")}}})
"Skin"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Skin.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Skin" module #f 37 18 37 35 ("jazz")
      {Lisp-Entry "Skin" class #f 45 7 45 11 ("statusbar" "menubar" "toolbar" "stage" "docked" "splitter" "tool" "menu" "scrollbar/document" "scrollbar/tool" "scrollbar" "header/document" "header/tool" "header" "group" "border/outline" "border/entry" "name:" "initialize" "Component")
        {Lisp-Entry "title" property #f 48 12 48 17 ()}
        {Lisp-Entry "get-title" accessor #f 48 42 48 50 ()}
        {Lisp-Entry "set-title" accessor #f 48 42 48 50 ()}
        {Lisp-Entry "present" method #f 77 26 77 33 ("title")}}}})
"Skins"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Skins.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Skins" module #f 37 18 37 36 ("jazz")
      {Lisp-Entry "Skins" class #f 49 7 49 12 ("initialize" "Component")
        {Lisp-Entry "active" property #f 52 12 52 18 ()}
        {Lisp-Entry "get-active" accessor #f 52 43 52 51 ()}
        {Lisp-Entry "set-active" accessor #f 52 43 52 51 ()}}}})
"Snap-Layout"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "layout" "Snap-Layout.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.layout.Snap-Layout" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Snap-Layout" class #f 44 7 44 18 ("center" "'center" "0" "Rect" "initialize" "Layout")
        {Lisp-Entry "insets" property #f 47 12 47 18 ()}
        {Lisp-Entry "get-insets" accessor #f 47 69 47 77 ()}
        {Lisp-Entry "set-insets" accessor #f 47 69 47 77 ()}
        {Lisp-Entry "justification" property #f 48 12 48 25 ()}
        {Lisp-Entry "get-justification" accessor #f 48 69 48 77 ()}
        {Lisp-Entry "set-justification" accessor #f 48 69 48 77 ()}
        {Lisp-Entry "padding" property #f 49 12 49 19 ()}
        {Lisp-Entry "get-padding" accessor #f 49 69 49 77 ()}
        {Lisp-Entry "set-padding" accessor #f 49 69 49 77 ()}
        {Lisp-Entry "layout" method #f 57 20 57 26 ("Dimension" "set-size-noevent" "move-figure" "b" "r" "t" "insets" "l" "get-bottom" "get-right" "max" "get-top" "get-left" "min" "east" "west" "south" "padding" "north" "get-location" "case" "h" "w" "for-each" "Point" "new" "set-position" "+" "-" "hh" "2" "fxfloor/" "hw" "get-height" "get-width" "set!" "when" "bottom" "right" "top" "left" "second" "cv" "first" "ch" "find-located" "get-visible?" "Figure" "is?" "and" "figure" "lambda" "collect-if" "visibles" "0" "justify" "integer?" "if" "else" "center" "'center" "fit" "'fit" "eq?" "pair?" "cond" "justification" "let" "part" "size" "justify-center" "define" "height" "width" "figures" "layout")}}}})
"Split-Layout"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "layout" "Split-Layout.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.layout.Split-Layout" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Split-Layout" class #f 43 7 43 19 ("Layout")
        {Lisp-Entry "layout" method #f 46 20 46 26 ("split" "zoom" "Rect" "second-height" "second-width" "first-height" "first-width" "positive?" "cast" "abs" "percent" "fxround" "pct" "relative" "quotient" ">" "<" "or" "'horz" "+" "set!" "negative?" "absolute" "1" "line" "2" "edge" "4" "resize" "splitter-size" "vert" "horz" "case" "size" "let" "error" "not" "unspecified" "bar" "'second" "second" "'first" "first" "eq?" "find-if" "location" "find" "let*" "when" "layout-split" "get-bottom" "get-right" "-" "Dimension" "set-size" "get-top" "get-left" "Point" "new" "set-position" "get-location" "neq?" "Figure" "is?" "if" "layout-zoom" "set-visible?" "figure" "lambda" "for-each" "layout-empty" "define" "insets" "insets:" "division" "division:" "mode" "mode:" "orientation" "orientation:" "target" "target:" "state" "state:" "separator" "separator:" "height" "width" "figures")}}}})
"Splitter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Splitter.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Splitter" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Splitter" class #f 47 7 47 15 ("vert" "'vert" "initialize" "View")
        {Lisp-Entry "orientation" property #f 50 12 50 23 ()}
        {Lisp-Entry "get-orientation" accessor #f 50 52 50 60 ()}
        {Lisp-Entry "set-orientation" accessor #f 50 52 50 60 ()}
        {Lisp-Entry "move-handler" property #f 51 12 51 24 ()}
        {Lisp-Entry "get-move-handler" accessor #f 51 52 51 60 ()}
        {Lisp-Entry "set-move-handler" accessor #f 51 52 51 60 ()}
        {Lisp-Entry "dragging?" slot #f 54 8 54 17 ()}
        {Lisp-Entry "base-position" slot #f 55 8 55 21 ()}
        {Lisp-Entry "displacement" slot #f 56 8 56 20 ()}
        {Lisp-Entry "cursor-update" method #f 64 20 64 33 (":horizontal-splitter" "horz" ":vertical-splitter" "vert" "orientation" "case" "set-cursor" "pos")}
        {Lisp-Entry "mouse-down" method #f 76 20 76 30 ("acquire-capture" "0" "Point" "displacement" "base-position" "dragging?" "set!" "pos")}
        {Lisp-Entry "drag-move" method #f 83 20 83 29 ("get-v" "horz" "self" "process-move" "0" "get-h" "move-figure" "vert" "orientation" "case" "nu+" "displacement" "set!" "base-position" "nu-" "delta" "let" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" method #f 96 20 96 27 ("set!" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "process-move" method #f 107 26 107 38 ("self" "invoke-handler" "delta:" ":move" "Event" "new" "evt" "let" "move-handler" "when" "delta" "sender")}
        {Lisp-Entry "get-class-descriptor" method #f 118 25 118 45 ("Splitter-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 127 11 127 17 ()
        {Lisp-Entry "Splitter-Descriptor" class #f 133 7 133 26 ("domain" "handler" "category:" "move-handler" "title:" "orientation" "name:" "View-Descriptor")}}}})
"Splitter-Look"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Splitter-Look.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Splitter-Look" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Splitter-Look" class #f 44 7 44 20 ("initialize" "Look")
        {Lisp-Entry "background" property #f 47 12 47 22 ()}
        {Lisp-Entry "get-background" accessor #f 47 47 47 55 ()}
        {Lisp-Entry "set-background" accessor #f 47 47 47 55 ()}}}})
"Splitter-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Splitter-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Splitter-Preferences" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Splitter-Preferences" class #f 46 20 46 40 ("Image-Resource" "icon:" "title:" "0" "Rect" "absolute" "'absolute" "horz" "'horz" "split" "'split" "resize" "'resize" "initialize" "Figure-Preferences")
        {Lisp-Entry "separator" property #f 49 12 49 21 ()}
        {Lisp-Entry "get-separator" accessor #f 49 60 49 68 ()}
        {Lisp-Entry "set-separator" accessor #f 49 60 49 68 ()}
        {Lisp-Entry "state" property #f 50 12 50 17 ()}
        {Lisp-Entry "get-state" accessor #f 50 60 50 68 ()}
        {Lisp-Entry "set-state" accessor #f 50 60 50 68 ()}
        {Lisp-Entry "target" property #f 51 12 51 18 ()}
        {Lisp-Entry "get-target" accessor #f 51 60 51 68 ()}
        {Lisp-Entry "set-target" accessor #f 51 60 51 68 ()}
        {Lisp-Entry "orientation" property #f 52 12 52 23 ()}
        {Lisp-Entry "get-orientation" accessor #f 52 60 52 68 ()}
        {Lisp-Entry "set-orientation" accessor #f 52 60 52 68 ()}
        {Lisp-Entry "mode" property #f 53 12 53 16 ()}
        {Lisp-Entry "get-mode" accessor #f 53 60 53 68 ()}
        {Lisp-Entry "set-mode" accessor #f 53 60 53 68 ()}
        {Lisp-Entry "division" property #f 54 12 54 20 ()}
        {Lisp-Entry "get-division" accessor #f 54 60 54 68 ()}
        {Lisp-Entry "set-division" accessor #f 54 60 54 68 ()}
        {Lisp-Entry "insets" property #f 55 12 55 18 ()}
        {Lisp-Entry "get-insets" accessor #f 55 60 55 68 ()}
        {Lisp-Entry "set-insets" accessor #f 55 60 55 68 ()}
        {Lisp-Entry "apply-root" method #f 67 20 67 30 ("get-root" "apply-to" "self" "preferences:" "offscreen?:" "Splitter-View" "new" "set-root" "player")}
        {Lisp-Entry "apply-preferences" method #f 72 20 72 37 ("self" "preferences:" "parent:" "Splitter-View" "new" "apply-to" "assert" "parent")}
        {Lisp-Entry "apply-to" method #f 77 11 77 19 ("layout-view" "get-children" "get-guest" "host-install" "Host-View" "is?" "when" "child" "children" "apply-preferences" "pref" "lambda" "for-each" "location" "set-location" "get-visible?" "set-visible?" "insets" "set-insets" "division" "set-division" "mode" "set-mode" "orientation" "set-orientation" "target" "set-target" "state" "set-state" "separator" "set-separator" "remove-children" "splitter")}
        {Lisp-Entry "get-class-descriptor" method #f 103 25 103 45 ("Splitter-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 112 11 112 17 ()
        {Lisp-Entry "Splitter-Preferences-Descriptor" class #f 118 7 118 38 ("separator" "name:" "insets" "division" "mode" "orientation" "target" "state" "location" "categorized:" "Image-Resource" "image:" "Figure-Preferences-Descriptor")
          {Lisp-Entry "component-get-addable-classes" method #f 133 20 133 49 ("Stage-Preferences" "Docked-Preferences" "Pad-Preferences" "Splitter-Preferences" "list" "component")}}}}})
"Splitter-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Splitter-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Splitter-View" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Splitter-View" class #f 49 7 49 20 ("Split-Layout" "new" "0" "Rect" "100" "absolute" "'absolute" "horz" "'horz" "split" "'split" "resize" "'resize" "initialize" "View")
        {Lisp-Entry "separator" property #f 52 12 52 21 ()}
        {Lisp-Entry "get-separator" accessor #f 52 62 52 70 ()}
        {Lisp-Entry "set-separator" accessor #f 52 62 52 70 ()}
        {Lisp-Entry "state" property #f 53 12 53 17 ()}
        {Lisp-Entry "get-state" accessor #f 53 62 53 70 ()}
        {Lisp-Entry "set-state" accessor #f 53 62 53 70 ()}
        {Lisp-Entry "target" property #f 54 12 54 18 ()}
        {Lisp-Entry "get-target" accessor #f 54 62 54 70 ()}
        {Lisp-Entry "set-target" accessor #f 54 62 54 70 ()}
        {Lisp-Entry "orientation" property #f 55 12 55 23 ()}
        {Lisp-Entry "get-orientation" accessor #f 55 62 55 70 ()}
        {Lisp-Entry "set-orientation" accessor #f 55 62 55 70 ()}
        {Lisp-Entry "mode" property #f 56 12 56 16 ()}
        {Lisp-Entry "get-mode" accessor #f 56 62 56 70 ()}
        {Lisp-Entry "set-mode" accessor #f 56 62 56 70 ()}
        {Lisp-Entry "division" property #f 57 12 57 20 ()}
        {Lisp-Entry "get-division" accessor #f 57 62 57 70 ()}
        {Lisp-Entry "set-division" accessor #f 57 62 57 70 ()}
        {Lisp-Entry "insets" property #f 58 12 58 18 ()}
        {Lisp-Entry "get-insets" accessor #f 58 62 58 70 ()}
        {Lisp-Entry "set-insets" accessor #f 58 62 58 70 ()}
        {Lisp-Entry "full?" property #f 59 12 59 17 ()}
        {Lisp-Entry "get-full?" accessor #f 59 62 59 70 ()}
        {Lisp-Entry "set-full?" accessor #f 59 62 59 70 ()}
        {Lisp-Entry "after-handler" property #f 60 12 60 25 ()}
        {Lisp-Entry "get-after-handler" accessor #f 60 62 60 70 ()}
        {Lisp-Entry "set-after-handler" accessor #f 60 62 60 70 ()}
        {Lisp-Entry "preferences" property #f 61 12 61 23 ()}
        {Lisp-Entry "get-preferences" accessor #f 61 62 61 70 ()}
        {Lisp-Entry "set-preferences" accessor #f 61 62 61 70 ()}
        {Lisp-Entry "split-layout" slot #f 64 8 64 20 ()}
        {Lisp-Entry "bar-bounds" slot #f 65 8 65 18 ()}
        {Lisp-Entry "dragging?" slot #f 66 8 66 17 ()}
        {Lisp-Entry "previous" slot #f 67 8 67 16 ()}
        {Lisp-Entry "preserved-insets" slot #f 68 8 68 24 ()}
        {Lisp-Entry "get-preserved-insets" accessor #f 68 49 68 57 ()}
        {Lisp-Entry "set-preserved-insets" accessor #f 68 49 68 57 ()}
        {Lisp-Entry "size-change" method #f 76 20 76 31 ("layout-view" "nextmethod" "size")}
        {Lisp-Entry "layout" method #f 81 20 81 26 ("insets" "insets:" "division" "division:" "mode:" "orientation" "orientation:" "target" "target:" "state" "state:" "separator" "separator:" "get-height" "get-width" "split-layout" "layout" "bar-bounds" "set!" "absolute" "'absolute" "dragging?" "if" "mode" "get-size" "size" "let" "children" "null?" "unless")}
        {Lisp-Entry "remove-children" method #f 93 18 93 33 ("children" "get-guest" "host-uninstall" "Host-View" "set-parent" "set-visible?" "close" "if" "Pad-View" "remove-children" "Splitter-View" "is?" "when" "child" "lambda" "for-each")}
        {Lisp-Entry "workspace-zoomable?" method #f 113 18 113 37 ("workspace-minimisable?" "get-guest" "guest" "Host-View" "is-not?" "or" "brother" "let" "children" "neq?" "child" "lambda" "find-if" "get-brother" "define" "view")}
        {Lisp-Entry "zoom" method #f 130 18 130 22 ("layout-view" "target" "zoom" "'zoom" "state" "set!" "view")}
        {Lisp-Entry "rezoom" method #f 136 18 136 24 ("layout-view" "zoom" "'zoom" "state" "set!")}
        {Lisp-Entry "unzoom" method #f 141 18 141 24 ("layout-view" "split" "'split" "state" "set!")}
        {Lisp-Entry "get-effective-target" method #f 146 18 146 38 ("find-located" "Figure" "target" "is?" "if")}
        {Lisp-Entry "cursor-update" method #f 157 20 157 33 ("nextmethod" ":horizontal-splitter" "vert" ":vertical-splitter" "set-cursor" "horz" "orientation" "case" "in-rect?" "dragging?" "or" "bar-bounds" "resize" "'resize" "separator" "eq?" "and" "if" "pos")}
        {Lisp-Entry "draw" method #f 170 20 170 24 ("or" "get-bounds" "fill-insets" "insets" "empty-rect?" "not" "line" "top" "vert" "left" "edges:" "sunken" "'sunken" "outer:" "raised" "'raised" "inner:" "draw-edge" "horz" "orientation" "edge" "Medium" "name:" "Color" "resize" "separator" "case" "fill-rect" "if" "bar-bounds" "split" "'split" "state" "eq?" "and" "when" "get-background" "background" "get-look" "look" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-look" method #f 196 20 196 28 ("splitter" "'splitter" "find-look")}
        {Lisp-Entry "absolute->relative" method #f 205 11 205 29 ("percentage" "get-height" "vert" "get-width" "horz" "orientation" "case" "size" "let" "division")}
        {Lisp-Entry "relative->absolute" method #f 212 11 212 29 ("-" "set!" "positive?" "if" "abs" "percent" "fxround" "pct" "get-height" "vert" "get-width" "horz" "orientation" "case" "size" "let*" "division")}
        {Lisp-Entry "mouse-down" method #f 228 20 228 30 ("acquire-capture" "relative->absolute" "division" "relative" "'relative" "mode" "get-v" "vert" "get-h" "horz" "orientation" "case" "previous" "dragging?" "set!" "in-rect?" "bar-bounds" "resize" "'resize" "separator" "eq?" "and" "when" "pos")}
        {Lisp-Entry "drag-move" method #f 237 20 237 29 ("call-after-handler" "update-view" "layout-view" "set!" "division" "increase!" "previous" "-" "delta" "get-v" "vert" "get-h" "horz" "orientation" "case" "n" "let*" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" method #f 248 20 248 27 ("absolute->relative" "division" "set!" "relative" "'relative" "mode" "eq?" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "call-after-handler" method #f 261 11 261 29 ("after:" "Event" "new" "self" "invoke-handler" "after-handler" "when")}
        {Lisp-Entry "get-class-descriptor" method #f 271 25 271 45 ("Splitter-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 280 11 280 17 ()
        {Lisp-Entry "Splitter-View-Descriptor" class #f 286 7 286 31 ("preferences" "after-handler" "full?" "insets" "division" "mode" "orientation" "target" "state" "title:" "separator" "name:" "View-Descriptor")
          {Lisp-Entry "class-image" method #f 305 20 305 31 ("Image-Resource" "class")}}}}})
"Stage"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Stage.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Stage" module #f 37 18 37 36 ("jazz")
      {Lisp-Entry "Stage" class #f 50 7 50 12 ("Dark" "name:" "Color" "background:" "initialize" "View")
        {Lisp-Entry "maximized?" slot #f 53 8 53 18 ()}
        {Lisp-Entry "fullscreen?" slot #f 54 8 54 19 ()}
        {Lisp-Entry "figure-preferences" slot #f 55 8 55 26 ()}
        {Lisp-Entry "get-figure-preferences" accessor #f 55 51 55 59 ()}
        {Lisp-Entry "set-figure-preferences" accessor #f 55 51 55 59 ()}
        {Lisp-Entry "external-name" method #f 62 25 62 38 ("stage" "'stage" "rest")}
        {Lisp-Entry "get-border" method #f 71 18 71 28 ("parent")}
        {Lisp-Entry "stage-activate" method #f 80 26 80 40 ("maximized?" "get-toplevel" "set-caption?")}
        {Lisp-Entry "stage-empty-activate" method #f 84 26 84 46 ("get-toplevel" "set-caption" "client-deactivate" "for-each-docked" "get-player" "assert")}
        {Lisp-Entry "focus-gained" method #f 91 20 91 32 ("self" "set-current-stage" "workspace-activation?" "unless")}
        {Lisp-Entry "get-maximized?" method #f 101 18 101 32 ("maximized?")}
        {Lisp-Entry "set-maximized?" method #f 105 18 105 32 ("restore" "maximize" "if" "value")}
        {Lisp-Entry "toggle-maximized" method #f 111 18 111 34 ("maximized?" "not" "set-maximized?")}
        {Lisp-Entry "maximize" method #f 115 20 115 28 ("get-title" "set-caption" "children" "get-guest" "get-host" "maximize" "get-visible?" "when" "frame" "for-each" "set-caption?" "maximized?" "set!" "first-view" "current" "find-menubar" "menubar" "get-application" "appl" "get-player" "player" "get-toplevel" "toplevel" "get-border" "border" "let*" "lambda" "with-locked-update")}
        {Lisp-Entry "restore" method #f 138 20 138 27 ("children" "get-guest" "get-host" "restore" "get-visible?" "when" "frame" "for-each" "set-caption?" "maximized?" "set!" "find-menubar" "menubar" "get-application" "appl" "get-toplevel" "toplevel" "get-border" "border" "let*" "lambda" "with-locked-update")}
        {Lisp-Entry "get-fullscreen?" method #f 162 18 162 33 ("fullscreen?")}
        {Lisp-Entry "set-fullscreen?" method #f 166 18 166 33 ("get-size" "layout-stage" "get-border" "border" "let" "set!" "fullscreen?" "neq?" "when" "value")}
        {Lisp-Entry "install-wallpaper" method #f 178 26 178 43 ()}
        {Lisp-Entry "size-change" method #f 187 20 187 31 ("nextmethod" "children" "get-host" "maximize-bounds" "get-visible?" "frame" "lambda" "for-each" "maximized?" "when" "layout-frames" "define" "size")}
        {Lisp-Entry "mouse-down" method #f 204 20 204 30 ("acquire-focus" "pos")}}}})
"Stage-Border"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Stage-Border.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Stage-Border" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Stage-Border" class #f 45 7 45 19 ("View")
        {Lisp-Entry "size-change" method #f 48 20 48 31 ("layout-stage" "nextmethod" "size")}
        {Lisp-Entry "get-stage" method #f 58 18 58 27 ("stage" "'stage" "child")}
        {Lisp-Entry "maximize" method #f 67 20 67 28 ("get-size" "layout-stage")}
        {Lisp-Entry "restore" method #f 71 20 71 27 ("get-size" "layout-stage")}
        {Lisp-Entry "layout-stage" method #f 80 11 80 23 ("+" "Dimension" "-" "set-size" "Point" "new" "set-position" "2" "1" "0" "if" "width" "get-fullscreen?" "fullscreen?" "get-maximized?" "maximized?" "get-stage" "stage" "let*" "size")}
        {Lisp-Entry "Active-Color" definition #f 94 14 94 26 ("blue:" "0" "green:" "128" "red:" "Color")}
        {Lisp-Entry "Frame-Color" definition #f 97 14 97 25 ("blue:" "green:" "128" "red:" "Color")}
        {Lisp-Entry "draw" method #f 101 20 101 24 ("White" "name:" "Color" "-" "or" "unless" "get-fullscreen?" "fullscreen?" "get-maximized?" "maximized?" "stage" "let*" "get-bottom" "get-right" "0" "Rect" "new" "frame-rect" "Frame-Color" "Active-Color" "if" "color" "get-bounds" "bounds" "let" "1" "get-active-stages" "length" ">" "current-stage" "get-stage" "eq?" "and" "draw-active?" "define" "lv" "lh" "context" "surface")}}}})
"Stage-Look"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Stage-Look.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Stage-Look" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Stage-Look" class #f 43 7 43 17 ("initialize" "Look")
        {Lisp-Entry "background" property #f 46 12 46 22 ()}
        {Lisp-Entry "get-background" accessor #f 46 47 46 55 ()}
        {Lisp-Entry "set-background" accessor #f 46 47 46 55 ()}}}})
"Stage-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Stage-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Stage-Preferences" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Stage-Preferences" class #f 48 20 48 37 ("Image-Resource" "icon:" "title:" "initialize" "Figure-Preferences")
        {Lisp-Entry "maximized?" property #f 51 12 51 22 ()}
        {Lisp-Entry "get-maximized?" accessor #f 51 47 51 55 ()}
        {Lisp-Entry "set-maximized?" accessor #f 51 47 51 55 ()}
        {Lisp-Entry "stage" slot #f 54 8 54 13 ()}
        {Lisp-Entry "apply-root" method #f 66 20 66 30 ("apply-to" "get-root" "set-offscreen?" "remember-stage" "get-parent" "set-root" "player")}
        {Lisp-Entry "apply-preferences" method #f 72 20 72 37 ("apply-to" "set-parent" "remember-stage" "get-parent" "stage-border" "let" "assert" "parent")}
        {Lisp-Entry "apply-to" method #f 79 11 79 19 ("maximized?" "stage" "set-maximized?" "get-visible?" "set-visible?" "location" "set-location" "stage-border")}
        {Lisp-Entry "remember-stage" method #f 85 11 85 25 ("set-current-stage" "current-stage" "self" "set-figure-preferences" "create-stage" "set!" "stage" "unless")}
        {Lisp-Entry "get-class-descriptor" method #f 99 25 99 45 ("Stage-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 108 11 108 17 ()
        {Lisp-Entry "Stage-Preferences-Descriptor" class #f 114 7 114 35 ("maximized?" "name:" "location" "categorized:" "Image-Resource" "image:" "Figure-Preferences-Descriptor")}}}})
"Status-Label"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Status-Label.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Status-Label" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Status-Label" class #f 48 7 48 19 ("initialize" "View")
        {Lisp-Entry "icon" property #f 51 12 51 16 ()}
        {Lisp-Entry "get-icon" accessor #f 51 41 51 49 ()}
        {Lisp-Entry "set-icon" accessor #f 51 41 51 49 ()}
        {Lisp-Entry "mouse-activate?" method #f 54 20 54 35 ()}
        {Lisp-Entry "set-title" method #f 63 20 63 29 ("nextmethod" "title~self" "empty-string?" "and" "unless" "title")}
        {Lisp-Entry "mouse-up" method #f 73 20 73 28 ("self" "process-action" "pos")}
        {Lisp-Entry "draw-background" method #f 82 20 82 35 ("fill-rect" "-1" "inflate-rect" "rect" "get-bounds" "bounds" "let*" "background" "when" "context" "surface")}
        {Lisp-Entry "draw" method #f 89 20 89 24 ("draw-body" "draw-icon" "rectangle" "'rectangle" "edges:" "sunken" "'sunken" "outer:" "get-bounds" "draw-edge" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-icon" method #f 95 11 95 20 ("get-images-portfolio" "draw-image" "top" "2" "left" "get-application" "appl" "let" "icon" "when" "context" "surface")}
        {Lisp-Entry "draw-body" method #f 103 11 103 20 ("draw-text" "Black" "Color" "set-text-color" "Caption" "name:" "Font" "set-font" "4" "top" "3" "20" "icon" "if" "left" "localize" "let" "title" "when" "surface")}}}})
"Status-Preferences"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "preference" "Status-Preferences.jazz"} 1290011753
    {Lisp-Entry "jazz.ui.preference.Status-Preferences" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Status-Preferences" class #f 45 7 45 25 (":status" "model:" "second" "location:" "vert" "orientation:" "-23" "division:" "line" "separator:" "Splitter-Preferences")}}})
"Status-Toolbar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Status-Toolbar.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Status-Toolbar" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Status-Toolbar" class #f 48 7 48 21 ("Medium" "name:" "Color" "background:" "Toolbar")
        {Lisp-Entry "finish" method #f 55 20 55 26 ("update-status" "when" "selected-workspace" "workspace" "let" "nextmethod" "rest")}
        {Lisp-Entry "host-title" method #f 62 25 62 35 ()}
        {Lisp-Entry "layout" method #f 71 20 71 26 ("get-height" "get-width" "children" "layout" "padding:" "2" "0" "Rect" "insets:" "Flow-Layout" "new" "flow" "let")}
        {Lisp-Entry "draw-background" method #f 81 20 81 35 ("fill-background" "get-bounds" "bounds" "nextmethod" "not" "if" "get-background" "background" "get-look" "look" "let" "context" "surface")}
        {Lisp-Entry "get-look" method #f 95 20 95 28 ("statusbar" "'statusbar" "find-look")}}}})
"Statusbar-Look"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Statusbar-Look.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Statusbar-Look" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Statusbar-Look" class #f 43 7 43 21 ("Toolbar-Look")}}})
"String-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "String-Request.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.String-Request" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "String-Request" class #f 47 20 47 34 ("167" "cancel" "default?:" "on-ok" "action-handler:" "24" "80" "ok" "Entry-Border" "Color" "color:" "south" "16" "100" "message" "on-cancel" ":host" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-content-change" ":form" "Event-Handler" "content-change-handler:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "text" "fill" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "center" "width" "auto-size?:" "-20" "head" "justification:" "Label" "Font" "font:" "west" "location:" "title:" "prefix" "layout-padding:" "border" "layout-type:" "37" "294" "30" "10" "Point" "position:" "layout" "name:" "120" "322" "Dimension" "size:" "explicit" "initialize" "View")
        {Lisp-Entry "accepts-empty?" property #f 50 12 50 26 ()}
        {Lisp-Entry "unicity-domain" property #f 51 12 51 26 ()}
        {Lisp-Entry "validator" property #f 52 12 52 21 ()}
        {Lisp-Entry "get-accepts-empty?" method #f 74 18 74 36 ("accepts-empty?")}
        {Lisp-Entry "set-accepts-empty?" method #f 78 18 78 36 ("name-change" "accepts-empty?" "set!" "value")}
        {Lisp-Entry "get-unicity-domain" method #f 83 18 83 36 ("unicity-domain")}
        {Lisp-Entry "set-unicity-domain" method #f 87 18 87 36 ("name-change" "unicity-domain" "set!" "value")}
        {Lisp-Entry "get-validator" method #f 92 18 92 31 ("validator")}
        {Lisp-Entry "set-validator" method #f 96 18 96 31 ("name-change" "validator" "set!" "value")}
        {Lisp-Entry "get-prefix" method #f 101 18 101 28 ("prefix" "'prefix" "locate" "get-title")}
        {Lisp-Entry "set-prefix" method #f 105 18 105 28 ("layout" "'layout" "layout-view" "prefix" "'prefix" "locate" "set-title" "value")}
        {Lisp-Entry "host-title" method #f 115 25 115 35 ()}
        {Lisp-Entry "on-content-change" method #f 124 11 124 28 ("name-change" "evt")}
        {Lisp-Entry "on-return-press" method #f 128 20 128 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "name-change" method #f 134 11 134 22 ("null?" "let" "equal" "'equal" "sort-predicate" "test:" "member?" "empty-string?" "continuation-return" "if" "'message" "set-title" "ok" "'ok" "set-enabled?" "message" "enabled?" "proc" "get-string-content" "name" "'text" "locate" "text" "let*" "return" "lambda" "continuation-capture" "when" "validator" "unicity-domain" "accepts-empty?" "not" "or" "name-validated?" "define")}
        {Lisp-Entry "get-modal-result" method #f 163 20 163 36 ("text" "'text" "locate" "get-string-content")}}}})
"Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Style.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Style" module #f 37 18 37 36 ("jazz")
      {Lisp-Entry "Style" class #f 44 7 44 12 ("bottom" "'bottom" "attributes" "Exemplar")
        {Lisp-Entry "alignment" definition #f 48 5 48 14 ()}
        {Lisp-Entry "get-alignment" accessor #f 48 5 48 14 ()}
        {Lisp-Entry "set-alignment" accessor #f 48 5 48 14 ()}
        {Lisp-Entry "get-width" method #f 56 26 56 35 ()}
        {Lisp-Entry "get-height" method #f 60 26 60 36 ()}
        {Lisp-Entry "run-width" method #f 64 26 64 35 ("run")}
        {Lisp-Entry "justify-element" method #f 73 21 73 36 ("2" "fxceiling/" "center" "-" "0" "top" "bottom" "'bottom" "alignment" "or" "case" "height" "element-height")}
        {Lisp-Entry "propagate?" method #f 85 26 85 36 ()}
        {Lisp-Entry "scan" method #f 94 29 94 33 ("default-scan" "proc" "run" "tabs" "end" "start" "h")}
        {Lisp-Entry "default-scan" method #f 98 11 98 23 ("2" "fxround/" "0" "+" "right" "get-width" "width" "let*" "proc" "run" "tabs" "end" "start" "h")}
        {Lisp-Entry "wrap" method #f 109 29 109 33 ("else" "place-update" "<=" "cond" "get-width" "+" "right" "let" "run" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "place-update" method #f 122 29 122 41 ("v" "h")}
        {Lisp-Entry "height-update" method #f 126 29 126 42 ("height")}
        {Lisp-Entry "draw-style" method #f 135 29 135 39 ("get-width" "enabled?" "left" "tabs" "line-height" "v" "h" "string" "context" "surface")}}}})
"Symbol-Completer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Symbol-Completer.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Symbol-Completer" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Symbol-Completer" class #f 40 20 40 36 ("Object")
        {Lisp-Entry "domain" slot #f 43 8 43 14 ()}
        {Lisp-Entry "initialize" method #f 46 20 46 30 ("domain~self" "set!" "nextmethod" "domain")}
        {Lisp-Entry "complete" method #f 56 26 56 34 ("get-output" "domain" "put" "compare-n" "when" "target" "lambda" "for-each" "List-Factory" "new" "result" "cardinality" "length" "let" "eqv?" "test" "test:" "string")}}}})
"Symbol-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "Symbol-Request.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.Symbol-Request" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Symbol-Request" class #f 44 20 44 34 ("String-Request")
        {Lisp-Entry "form-model" method #f 47 20 47 30 ("nextmethod" "else" "IDE-Text-View" "text" "get-name" "case" "form")}}}})
"Tab-Sheet"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Tab-Sheet.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Tab-Sheet" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Tab-Sheet" class #f 47 7 47 16 ("content" "name:" "explicit" "initialize" "Focus-Container")
        {Lisp-Entry "title-color" property #f 50 12 50 23 ()}
        {Lisp-Entry "header-color" property #f 51 12 51 24 ()}
        {Lisp-Entry "get-header-color" accessor #f 51 55 51 63 ()}
        {Lisp-Entry "header-end-color" property #f 52 12 52 28 ()}
        {Lisp-Entry "border-color" property #f 53 12 53 24 ()}
        {Lisp-Entry "get-border-color" accessor #f 53 55 53 63 ()}
        {Lisp-Entry "closable?" property #f 54 12 54 21 ()}
        {Lisp-Entry "get-closable?" accessor #f 54 55 54 63 ()}
        {Lisp-Entry "set-closable?" accessor #f 54 55 54 63 ()}
        {Lisp-Entry "borders" slot #f 57 18 57 25 ()}
        {Lisp-Entry "get-borders" accessor #f 57 63 57 71 ()}
        {Lisp-Entry "set-borders" accessor #f 57 63 57 71 ()}
        {Lisp-Entry "close-button-enter?" slot #f 58 18 58 37 ()}
        {Lisp-Entry "get-close-button-enter?" accessor #f 58 63 58 71 ()}
        {Lisp-Entry "set-close-button-enter?" accessor #f 58 63 58 71 ()}
        {Lisp-Entry "close-button-down?" slot #f 59 18 59 36 ()}
        {Lisp-Entry "get-close-button-down?" accessor #f 59 63 59 71 ()}
        {Lisp-Entry "set-close-button-down?" accessor #f 59 63 59 71 ()}
        {Lisp-Entry "get-content" method #f 72 18 72 29 ("content" "'content" "child")}
        {Lisp-Entry "set-title" method #f 76 20 76 29 ("invalidate-header" "parent" "update-borders" "nextmethod" "value")}
        {Lisp-Entry "get-title-color" method #f 82 18 82 33 ("Dark" "name:" "Color" "title-color" "is-enabled?" "if")}
        {Lisp-Entry "set-title-color" method #f 88 18 88 33 ("invalidate-header" "title-color" "set!" "value")}
        {Lisp-Entry "set-header-color" method #f 93 18 93 34 ("invalidate-header" "header-color" "set!" "value")}
        {Lisp-Entry "get-header-end-color" method #f 98 18 98 38 ("Medium" "name:" "Color" "background" "get-background" "backgound" "let" "header-end-color" "if")}
        {Lisp-Entry "set-header-end-color" method #f 107 18 107 38 ("invalidate-header" "header-end-color" "set!" "value")}
        {Lisp-Entry "set-border-color" method #f 112 18 112 34 ("invalidate-header" "border-color" "set!" "value")}
        {Lisp-Entry "is-enabled?" method #f 122 18 122 29 ("parent" "view-enabled?" "enabled?" "and")}
        {Lisp-Entry "set-enabled?" method #f 126 20 126 32 ("invalidate-header" "enabled?" "set!" "flag")}
        {Lisp-Entry "invalidate-header" method #f 136 11 136 28 ("invalidate-header" "when" "self" "parent" "sheet->rank" "rank" "let")}
        {Lisp-Entry "get-transparent?" method #f 147 20 147 36 ()}
        {Lisp-Entry "layout" method #f 156 20 156 26 ("21" "get-height" "2" "get-width" "-" "Dimension" "new" "set-size" "20" "1" "Point" "set-position" "get-size" "size" "when" "'content" "find-child" "content" "let")}
        {Lisp-Entry "container-focusable?" method #f 169 20 169 40 ("self" "parent" "selected-sheet" "eq?")}
        {Lisp-Entry "ensure-container-focusable" method #f 173 20 173 46 ("focus?:" "self" "child-rank" "parent" "set-selection")}
        {Lisp-Entry "get-class-descriptor" method #f 182 25 182 45 ("Tab-Sheet-Descriptor" "new")}
        {Lisp-Entry "in-close-button?" method #f 191 11 191 27 ("self" "parent" "get-close-button-borders" "in-rect?" "closable?" "and" "pt")}
        {Lisp-Entry "invalidate-close-button" method #f 195 11 195 34 ("self" "get-close-button-borders" "parent" "invalidate-rect" "closable?" "when")}
        {Lisp-Entry "close-button-enter" method #f 200 18 200 36 ("invalidate-close-button" "self" "parent" "set-close-button-enter" "set-close-button-enter?")}
        {Lisp-Entry "close-button-leave" method #f 206 18 206 36 ("invalidate-close-button" "parent" "set-close-button-enter" "set-close-button-down?" "set-close-button-enter?")}
        {Lisp-Entry "close-button-down" method #f 213 18 213 35 ("invalidate-close-button" "set-close-button-down?")}
        {Lisp-Entry "close-button-up" method #f 218 18 218 33 ("invalidate-close-button" "set-close-button-down?")}}
      {Lisp-Entry "design" submodule #f 229 11 229 17 ()
        {Lisp-Entry "Tab-Sheet-Descriptor" class #f 235 7 235 27 ("closable?" "border-color" "header-end-color" "header-color" "title:" "title-color" "name:" "title" "default:" "Layout-View-Descriptor")}}}})
"Tab-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Tab-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Tab-View" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Tab-View" class #f 49 7 49 15 ("0" "20" "10" "explicit" "top" "'top" "initialize" "View")
        {Lisp-Entry "close-border-left" definition #f 52 14 52 31 ("-20")}
        {Lisp-Entry "close-border-top" definition #f 53 14 53 30 ("3")}
        {Lisp-Entry "close-border-right" definition #f 54 14 54 32 ("-4")}
        {Lisp-Entry "close-border-bottom" definition #f 55 14 55 33 ("17")}
        {Lisp-Entry "orientation" property #f 58 12 58 23 ()}
        {Lisp-Entry "keep-one-sheet?" property #f 59 12 59 27 ()}
        {Lisp-Entry "get-keep-one-sheet?" accessor #f 59 54 59 62 ()}
        {Lisp-Entry "set-keep-one-sheet?" accessor #f 59 54 59 62 ()}
        {Lisp-Entry "padding" slot #f 62 8 62 15 ()}
        {Lisp-Entry "headers-height" slot #f 63 8 63 22 ()}
        {Lisp-Entry "selection" slot #f 64 8 64 17 ()}
        {Lisp-Entry "close-button-enter" slot #f 65 8 65 26 ()}
        {Lisp-Entry "get-close-button-enter" accessor #f 65 54 65 62 ()}
        {Lisp-Entry "set-close-button-enter" accessor #f 65 54 65 62 ()}
        {Lisp-Entry "default-size" method #f 68 20 68 32 ("200" "400" "Dimension")}
        {Lisp-Entry "add-child" method #f 77 20 77 29 ("layout-view" "update-borders" "set-visible?" "not" "when" "nextmethod" "children" "null?" "first?" "let" "child")}
        {Lisp-Entry "remove-child" method #f 86 20 86 32 ("set-selection" "layout-view" "update-borders" "sheet-ranked" "set-visible?" "invalidate-header" "children" "length" "=" "1" "-" "set!" "child-rank" ">=" "0" "selection" ">" "and" "when" "nextmethod" "destroying?" "if" "child")}
        {Lisp-Entry "get-orientation" method #f 108 18 108 33 ("orientation")}
        {Lisp-Entry "set-orientation" method #f 112 18 112 33 ("invalidate-view" "orientation" "set!" "o")}
        {Lisp-Entry "get-content" method #f 117 18 117 29 ("content" "'content" "locate")}
        {Lisp-Entry "mouse-down" method #f 126 20 126 30 ("user-origin?:" "find-header" "set-selection" "close-button-down" "in-close-button?" "selected-sheet?" "and" "if" "when" "find-tab-sheet" "header" "let" "pos")}
        {Lisp-Entry "mouse-up" method #f 134 20 134 28 ("remove-child" "close-button-up" "get-close-button-down?" "in-close-button?" "selected-sheet?" "and" "when" "find-tab-sheet" "header" "let" "pos")}
        {Lisp-Entry "mouse-move" method #f 144 20 144 30 ("close-button-leave" "when" "eq?" "close-button-enter" "unless" "in-close-button?" "selected-sheet?" "and" "if" "find-tab-sheet" "header" "let" "pos")}
        {Lisp-Entry "drag-move" method #f 159 20 159 29 ("mouse-move" "pos")}
        {Lisp-Entry "mouse-leave" method #f 163 20 163 31 ("close-button-leave" "close-button-enter" "when")}
        {Lisp-Entry "update-borders" method #f 173 19 173 33 ("set!" "increase!" "cons" "set-borders" "10" "8" "effective-font" "text-extent" "get-width" "if" "padding" "+" "next" "1" "children" "length" ">" "keep-one-sheet?" "not" "or" "get-closable?" "and" "closable?" "get-title" "localize" "title" "let*" "header" "lambda" "for-each" "2" "h" "0" "n" "let")}
        {Lisp-Entry "find-header" method #f 189 11 189 22 ("length" "0" "naturals" "children" "continuation-return" ">=" "and" "get-borders" "right" "left" "bind" "is-enabled?" "n" "header" "for-each" "return" "lambda" "continuation-capture" "headers-height" "<" "when" "get-v" "v" "get-h" "h" "let" "pt")}
        {Lisp-Entry "find-tab-sheet" method #f 205 11 205 25 ("children" "list-ref" "if" "find-header" "rank" "let" "pt")}
        {Lisp-Entry "get-close-button-borders" method #f 212 11 212 35 ("close-border-bottom" "close-border-right" "close-border-top" "close-border-left" "+" "Rect" "new" "offset-rect" "0" "top" "2" "4" "if" "left" "selected-sheet" "eq?" "selected?" "let" "get-borders" "rg" "lf" "bind" "header")}
        {Lisp-Entry "get-selection" method #f 227 18 227 31 ("selection")}
        {Lisp-Entry "set-selection" method #f 231 26 231 39 ("simulate-mouse-move" "player" "call-selection-handler" "invalidate-header" "focus-host" "set!" "set-visible?" "sheet-ranked" "sheet" "when" "selection" "old" "let" "user-origin?" "user-origin?:" "force?" "force?:" "focus?" "focus?:" "sel")}
        {Lisp-Entry "invalidate-header" method #f 249 18 249 35 ("headers-height" "+" "0" "2" "-" "Rect" "new" "invalidate-rect" "sheet-ranked" "get-borders" "rg" "lf" "bind" "n")}
        {Lisp-Entry "get-selection-name" method #f 254 18 254 36 ("selected-sheet" "get-name")}
        {Lisp-Entry "set-selection-name" method #f 258 18 258 36 ("set-selection" "child-rank" "rank" "child" "sheet" "let*" "focus?" "focus?:" "name")}
        {Lisp-Entry "selected-sheet?" method #f 264 18 264 33 ("selected-sheet" "eq?" "sheet")}
        {Lisp-Entry "selected-sheet" method #f 268 18 268 32 ("selection" "sheet-ranked")}
        {Lisp-Entry "sheet->rank" method #f 272 18 272 29 ("children" "find" "sheet")}
        {Lisp-Entry "sheet-ranked" method #f 276 11 276 23 ("child-ranked" "n")}
        {Lisp-Entry "inner?" method #f 285 20 285 26 ("children" "memq?" "view")}
        {Lisp-Entry "all-sheets" method #f 294 18 294 28 ("get-children")}
        {Lisp-Entry "remove-every-sheet" method #f 298 18 298 36 ("close-children")}
        {Lisp-Entry "layout" method #f 307 20 307 26 ("children" "set-size" "0" "Point" "set-position" "Tab-Sheet" "is?" "when" "child" "lambda" "for-each" "get-size" "size" "let")}
        {Lisp-Entry "draw" method #f 321 20 321 24 ("orientation" "case" "get-size" "draw-bottom" "last" "cdr" "h" "line" "naturals" "get-close-button-enter?" "get-close-button-down?" "close" "'close" "draw-caption" "get-close-button-borders" "length" ">" "keep-one-sheet?" "get-closable?" "and" "5" "draw-text" "Black" "or" "set-text-color" "241" "243" "unless" "4" "line-to-preserve" "fill-rect" "not" "vertical" "'vertical" "direction:" "list" "gradient-fill" "3" "rect" "let" "cond" "increase!" "decrease!" "when" "get-borders" "rg" "lf" "bind" "187" "blue:" "198" "green:" "200" "red:" "background" "2" "-" "next?" "previous?" "selection" "=" "selected?" "get-header-end-color" "header-end-color" "get-header-color" "header-color" "get-border-color" "border-color" "get-title-color" "title-color" "get-title" "localize" "title" "n" "header" "lambda" "for-each" "line-to" "move-to" "edges:" "outer:" "raised" "'raised" "inner:" "Rect" "new" "draw-edge" "1" "set-line-width" "Light" "Color" "set-color" "Label" "name:" "Font" "set-font" "-1" "headers-height" "+" "children" "null?" "if" "content" "get-height" "bottom" "get-width" "right" "top" "0" "left" "let*" "size" "draw-top" "define" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-class-descriptor" method #f 427 25 427 45 ("Tab-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 436 11 436 17 ()
        {Lisp-Entry "Tab-View-Descriptor" class #f 442 7 442 26 ("keep-one-sheet?" "title:" "orientation" "name:" "View-Descriptor")
          {Lisp-Entry "component-surrogate-class" method #f 452 20 452 45 ("Tab-View-Surrogate" "component")}
          {Lisp-Entry "component-get-addable-classes" method #f 456 20 456 49 ("Tab-Sheet" "list" "component")}}}}})
"Table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Table.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Table" module #f 37 18 37 36 ("jazz")
      {Lisp-Entry "Table" class #f 45 7 45 12 ("Object")
        {Lisp-Entry "rows" slot #f 48 18 48 22 ()}
        {Lisp-Entry "construct-literal" method #f 52 16 52 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "initialize" method #f 56 11 56 21 ("rows~self" "set!" "nextmethod" "rows" "rows:")}
        {Lisp-Entry "print" method #f 61 11 61 16 ("rows" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "get-rows" method #f 72 18 72 26 ("rows")}}}})
"Table-Border"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Table-Border.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Table-Border" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Table-Border" class #f 45 20 45 32 ("Label" "Font" "font:" ":images" "portfolio:" "row-spacing:" "1" "column-spacing:" "filled-column:" "Entry-Border" "Color" "background:" "tree" "header" "fill" "layout-type:" "content" "vscroll?:" "document" "scroller" "name:" "entry" "style:" "edge" "border-type:" "Border-View")}}})
"Table-Cell"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Table-Cell.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Table-Cell" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Table-Cell" class #f 45 20 45 30 ("Label" "Font" "font:" "text" "fill" "layout-type:" "content" "vscroll?:" "document" "scroller" "name:" "entry" "style:" "edge" "border-type:" "Border-View")}}})
"Table-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Table-Row.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Table-Row" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Table-Row" class #f 40 20 40 29 ("Object")
        {Lisp-Entry "children" slot #f 43 18 43 26 ()}
        {Lisp-Entry "sons" slot #f 44 18 44 22 ()}
        {Lisp-Entry "get-sons" accessor #f 44 30 44 38 ()}
        {Lisp-Entry "construct-literal" method #f 48 16 48 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("sons~self" "children~self" "set!" "nextmethod" "sons" "children")}
        {Lisp-Entry "print" method #f 58 20 58 25 ("sons" "self" "class-of" "category-name" "format" "readably" "printer")}}}})
"Table-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Table-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Table-Text-View" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Table-Text-View" class #f 44 20 44 35 ("2" "top-padding:" "4" "left-padding:" "Formatted-Text-View")}}})
"Table-Tree-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Table-Tree-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Table-Tree-View" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Table-Tree-View" class #f 43 20 43 35 ("Tree-View")}}})
"Text"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Text.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Text" module #f 37 18 37 35 ("jazz")
      {Lisp-Entry "Text" class #f 43 7 43 11 ("Object")
        {Lisp-Entry "paragraphs" slot #f 46 18 46 28 ()}
        {Lisp-Entry "get-paragraphs" accessor #f 46 36 46 44 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("paragraphs~self" "set!" "nextmethod" "paragraphs" "paragraphs:")}
        {Lisp-Entry "print" method #f 54 20 54 25 ("paragraphs" "self" "class-of" "category-name" "format" "readably" "printer")}}}})
"Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Text-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Text-Actions" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Text-Actions" class #f 45 20 45 32 ("on-toggle-lock-anchor" "lock-anchor" "one/none" "one/no-space" "one" "one-space" "none" "keep:" "on-remove-spaces" "no-space" "on-display-info" "display-info" "on-top-caret" "top-caret" "on-center-caret" "center-caret" "on-capitalize-selection" "capitalize" "on-downcase-selection" "downcase" "on-upcase-selection" "upcase" "on-fill-to-column" "fill-to-column" "on-mark-column" "mark-column" "extend-mark" "on-jump-mark" "jump-mark" "on-set-mark" "set-mark" "Space" "on-select-outer" "select-outer" "on-goto-line" "goto-line" "on-find-backward" "find-backward" "on-find-forward" "find-forward" "on-search-current" "search-current" "on-search-backward-mode" "search-backward-mode" "on-search-forward-mode" "search-forward-mode" "on-widen-forward" "widen-forward" "on-open-line" "open-line" "on-kill-line" "kill-line" "on-paste&next" "paste&next" "on-paste&stay" "paste&stay" "on-paste" "paste" "Insert" "on-copy" "copy" "on-cut" "cut" "backspace-word-alt" "Backspace" "on-backspace-press" "backspace-word" "extend-next" "Next" "on-next" "next" "extend-prior" "Prior" "on-prior" "prior" "extend-document-end" "document-end" "extend-document-home" "document?:" "document-home" "extend-end" "End" "on-end" "end" "extend-home" "Home" "on-home" "home" "delete-word-alt" "on-delete-word" "delete-word" "Delete" "on-delete-char" "delete-char" "on-downward-compound" "downward-compound" "on-upward-compound" "upward-compound" "extend-forward-compound" "on-forward-compound" "forward-compound" "extend-backward-compound" ":alt" "on-backward-compound" "backward-compound" "scroll-downward" "extend-downward" "Down" "down" "move-downward" "scroll?:" "scroll-upward" "extend-upward" "Up" "up" "move-upward" "extend-forward-word" "move-forward-word" "extend-forward-char" "Right" "right" "move-forward-char" "extend-backward-word" ":control" "move-backward-word" ":shift" "extend-backward-char" "Left" "Shortcut" "shortcut:" "word?:" "extend?:" "left" "direction:" "on-move" ":focus" "Event-Handler" "action-handler:" "move-backward-char" "name:" "Actions")}}})
"Text-Color-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Text-Color-Combo.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Text-Color-Combo" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Text-Color-Combo" class #f 44 20 44 36 ("pick" "tooltip-text:" "tooltip?:" "body" "name:" "Push-Combo")
        {Lisp-Entry "form-model" method #f 53 20 53 30 ("nextmethod" "else" "Color-Button" "body" "get-name" "case" "form")}
        {Lisp-Entry "popup-colors" method #f 64 18 64 30 ("self" "initiator:" "action-handler" "action-handler:" "Color-Picker" "popup" "get-height" "get-width" "0" "Point" "new" "pos" "let" "geometry" "geometry:" "colors" "colors:")}}}})
"Text-Colorizer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Text-Colorizer.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Text-Colorizer" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Text-Colorizer" class #f 43 20 43 34 ("initialize" "Object")
        {Lisp-Entry "text" slot #f 46 8 46 12 ()}
        {Lisp-Entry "row" slot #f 47 8 47 11 ()}
        {Lisp-Entry "col" slot #f 48 8 48 11 ()}
        {Lisp-Entry "runs" slot #f 49 8 49 12 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("List-Factory" "new" "runs" "0" "col" "text" "set!" "nextmethod" "t")}
        {Lisp-Entry "apply-style" method #f 59 18 59 29 ("el" "sl" "Run" "new" "else" "get-col" "=" "cond" "for" "loop" "limit" "get-line" "beginning" "add-runs" "get-runs" "get-style" "subseq!" "put-run" "put" "if" "<" "and" "cardinality" "cast" "+" "to" "str" "run" "lambda" "for-each" "from" "let" ">" "get-string" "string" "text" "get-paragraph" "paragraph" "let*" "runs" "reset" "0" "col" "set!" "finish-current" "/=" "row" "not" "or" "when" "style" "n" "add-run" "define" "name/style" "end" "start")}
        {Lisp-Entry "finish-current" method #f 106 18 106 32 ("wrap-paragraph" "set-runs" "get-output" "let" "get-default-style" "subseq!" "Run" "new" "put" "col" ">" "cardinality" "len" "get-string" "string" "text" "get-paragraph" "paragraph" "let*" "runs" "row" "and" "when")}}}})
"Text-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Text-Combo.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Text-Combo" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Text-Combo" class #f 43 20 43 30 ("explicit" "initialize" "Combo-Box")
        {Lisp-Entry "client" property #f 46 12 46 18 ()}
        {Lisp-Entry "get-client" method #f 54 18 54 28 ("client")}
        {Lisp-Entry "set-client" method #f 58 18 58 28 ("client-update" "set!" "client" "neq?" "when" "value")}
        {Lisp-Entry "client-update" method #f 64 29 64 42 ()}
        {Lisp-Entry "selection-change" method #f 73 26 73 42 ()}}}})
"Text-Context-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Text-Context-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Text-Context-Menu" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Text-Context-Menu" class #f 46 7 46 24 ("select-all" "paste" "copy" "view" "Action" "action-handler:" "Image-Resource" "icon:" "french:" "english:" "Locales" "title:" "cut" "name:" "Context-Menu")}}})
"Text-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "event" "Text-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.event.Text-Event" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Text-Event" class #f 43 7 43 17 ("Event")}}})
"Text-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Text-Explorer.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Text-Explorer" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Text-Explorer" class #f 46 20 46 33 ("0" "Cell" "new" "initialize" "Explorer")
        {Lisp-Entry "text" slot #f 49 8 49 12 ()}
        {Lisp-Entry "get-text" accessor #f 49 38 49 46 ()}
        {Lisp-Entry "paragraphs" slot #f 50 8 50 18 ()}
        {Lisp-Entry "limit" slot #f 51 8 51 13 ()}
        {Lisp-Entry "beginning" slot #f 52 8 52 17 ()}
        {Lisp-Entry "ending" slot #f 53 8 53 14 ()}
        {Lisp-Entry "start" slot #f 54 8 54 13 ()}
        {Lisp-Entry "end" slot #f 55 8 55 11 ()}
        {Lisp-Entry "kind" slot #f 56 8 56 12 ()}
        {Lisp-Entry "line-hook" slot #f 57 8 57 17 ()}
        {Lisp-Entry "get-line-hook" accessor #f 57 56 57 64 ()}
        {Lisp-Entry "set-line-hook" accessor #f 57 56 57 64 ()}
        {Lisp-Entry "initialize" method #f 60 20 60 30 ("set-end" "set-start" "or" "when" "set-range" "if" "set-direction" "text-ending" "ending" "text-beginning" "beginning" "get-limit" "limit" "get-paragraphs" "paragraphs" "text" "set!" "nextmethod" "range" "range:" "end" "end:" "start" "start:" "forward" "'forward" "direction" "direction:" "txt")}
        {Lisp-Entry "get-syntax" method #f 75 29 75 39 ()}
        {Lisp-Entry "goto-beginning" method #f 84 20 84 34 ("beginning" "set-start")}
        {Lisp-Entry "goto-ending" method #f 88 11 88 22 ("ending" "set-end")}
        {Lisp-Entry "at-beginning?" method #f 92 18 92 31 ("beginning" "start" "<=")}
        {Lisp-Entry "at-ending?" method #f 96 18 96 28 ("ending" "end" ">=")}
        {Lisp-Entry "get-start" method #f 100 18 100 27 ("start" "copy")}
        {Lisp-Entry "set-start" method #f 104 18 104 27 ("get-col" "set-col" "get-line" "start" "set-line" "pos")}
        {Lisp-Entry "get-end" method #f 109 18 109 25 ("end" "copy")}
        {Lisp-Entry "set-end" method #f 113 18 113 25 ("get-col" "set-col" "get-line" "end" "set-line" "pos")}
        {Lisp-Entry "get-range" method #f 118 18 118 27 ("end" "start" "copy" "Range$Cell$" "new")}
        {Lisp-Entry "set-range" method #f 122 18 122 27 ("get-end" "set-end" "get-start" "set-start" "range")}
        {Lisp-Entry "set-pos" method #f 127 18 127 25 ("set-end" "set-start" "pos")}
        {Lisp-Entry "call-line-hook" method #f 132 21 132 35 ("self" "line-hook" "when")}
        {Lisp-Entry "looking-at?" method #f 137 18 137 29 ("1" "+" "else" "char-forward" "string-ref" "eqv?" "not" ">=" "cond" "0" "i" "lp" "string-length" "len" "let" "str")}
        {Lisp-Entry "looking-back?" method #f 145 18 145 31 ("+" "else" "char-backward" "1" "-" "string-ref" "eqv?" "not" ">=" "cond" "0" "i" "lp" "string-length" "len" "let" "str")}
        {Lisp-Entry "get-kind" method #f 158 25 158 33 ("kind")}
        {Lisp-Entry "set-kind" method #f 162 28 162 36 ("kind" "set!" "knd")}
        {Lisp-Entry "get-paragraph" method #f 166 18 166 31 ("paragraphs" "element" "n")}
        {Lisp-Entry "paragraph-string" method #f 170 18 170 34 ("get-paragraph" "get-string" "n")}
        {Lisp-Entry "paragraph-length" method #f 174 18 174 34 ("paragraph-string" "cardinality" "n")}
        {Lisp-Entry "get-char" method #f 178 18 178 26 ("element" "cardinality" "cast" "<" "if" "get-paragraph" "get-string" "string" "get-col" "col" "get-line" "line" "let" "pos")}
        {Lisp-Entry "get-range-string" method #f 187 18 187 34 ("Range$Cell$" "new" "text" "get-string" "end" "start")}
        {Lisp-Entry "get-marked" method #f 191 18 191 28 ("end" "start" "get-range-string")}
        {Lisp-Entry "read-marked" method #f 195 18 195 29 ("get-marked" "read-string-element")}
        {Lisp-Entry "get-symbol-string" method #f 201 18 201 35 ("get-marked" "end" "1" "+" "get-range-string" "start" "get-char" "eqv?" "if")}
        {Lisp-Entry "find-marked-symbol" method #f 207 18 207 36 ("get-marked" "find-symbol")}
        {Lisp-Entry "intern-marked-symbol" method #f 211 18 211 38 ("get-marked" "string->symbol")}
        {Lisp-Entry "get-range-symbol" method #f 215 18 215 34 ("get-range-string" "find-symbol" "end" "start")}
        {Lisp-Entry "get-mark" method #f 219 18 219 26 ("get-range" "get-kind" "Explorer-Mark" "new")}
        {Lisp-Entry "next!" method #f 228 11 228 16 ("else" "0" "set-col" "1" "+" "set-line" "limit" "increase-col" "paragraph-length" "<" "cond" "get-col" "col" "get-line" "line" "let" "pos")}
        {Lisp-Entry "previous!" method #f 242 11 242 20 ("else" "paragraph-length" "set-col" "set-line" "1" "-" "previous-line" "-1" "increase-col" "0" ">" "cond" "get-col" "col" "get-line" "line" "let" "pos")}
        {Lisp-Entry "next-cell!" method #f 257 11 257 21 ("next!" "when" "pos")}
        {Lisp-Entry "previous-cell!" method #f 262 11 262 25 ("previous!" "when" "pos")}
        {Lisp-Entry "next-pos" method #f 267 11 267 19 ("else" "1" "-" "next!" "0" "<=" "cond" "iterate" "copy" "let" "offset" "pos")}
        {Lisp-Entry "previous-pos" method #f 278 11 278 23 ("else" "1" "-" "previous!" "0" "<=" "cond" "iterate" "copy" "let" "offset" "pos")}
        {Lisp-Entry "forward" method #f 289 20 289 27 ("end" "next!")}
        {Lisp-Entry "forward-n" method #f 293 11 293 20 ("forward" ">=" "1" "+" "0" "i" "do" "offset")}
        {Lisp-Entry "backward" method #f 297 20 297 28 ("start" "previous!")}
        {Lisp-Entry "backward-n" method #f 301 11 301 21 ("backward" ">=" "1" "+" "0" "i" "do" "offset")}
        {Lisp-Entry "next-char" method #f 305 18 305 27 ("get-char" "when" "next-pos" "<=" "or" "0" ">=" "paragraph-length" "=" "and" "in-text?" "limit" "<" "if" "get-col" "col" "get-line" "line" "let" "next-in-text?" "define" "offset" "pos")}
        {Lisp-Entry "char-forward" method #f 323 25 323 37 ("end" "next-char" "offset")}
        {Lisp-Entry "previous-char" method #f 327 18 327 31 ("get-char" "when" "1" "+" "previous-pos" "let" "offset" "pos")}
        {Lisp-Entry "char-backward" method #f 333 25 333 38 ("start" "previous-char" "offset")}
        {Lisp-Entry "forward-while" method #f 337 18 337 31 ("forward" "not" "if" "0" "char-forward" "c" "iterate" "let" "predicate")}
        {Lisp-Entry "backward-while" method #f 349 18 349 32 ("backward" "not" "if" "0" "char-backward" "c" "iterate" "let" "predicate")}
        {Lisp-Entry "forward-until" method #f 361 18 361 31 ("not" "c" "lambda" "forward-while" "predicate")}
        {Lisp-Entry "backward-until" method #f 365 18 365 32 ("not" "c" "lambda" "backward-while" "predicate")}
        {Lisp-Entry "forward-to" method #f 369 18 369 28 ("eqv?" "c" "lambda" "forward-until" "char")}
        {Lisp-Entry "backward-to" method #f 373 18 373 29 ("eqv?" "c" "lambda" "backward-until" "char")}
        {Lisp-Entry "forward-whitespaces" method #f 377 18 377 37 ("whitespace?" "forward-while")}
        {Lisp-Entry "backward-whitespaces" method #f 381 18 381 38 ("whitespace?" "backward-while")}
        {Lisp-Entry "forward-word" method #f 390 18 390 30 ("forward" "alphanumeric?" "not" "or" "if" "0" "char-forward" "c" "iterate" "let")}
        {Lisp-Entry "forward-non-word" method #f 399 18 399 34 ("forward" "alphanumeric?" "not" "or" "if" "0" "char-forward" "c" "iterate" "let")}
        {Lisp-Entry "backward-word" method #f 408 18 408 31 ("backward" "alphanumeric?" "not" "or" "if" "0" "char-backward" "c" "iterate" "let")}
        {Lisp-Entry "backward-non-word" method #f 417 18 417 35 ("backward" "alphanumeric?" "not" "or" "if" "0" "char-backward" "c" "iterate" "let")}
        {Lisp-Entry "forward-constituent" method #f 426 29 426 48 ("else" "symbol" "'symbol" "kind" "text-constituent?" "not" "or" "set!" "forward" "eqv?" "cond" "0" "char-forward" "c" "iterate" "last" "let")}
        {Lisp-Entry "backward-constituent" method #f 444 29 444 49 ("else" "symbol" "'symbol" "kind" "text-constituent?" "not" "or" "set!" "backward" "1" "eqv?" "cond" "0" "char-backward" "c" "iterate" "last" "let")}
        {Lisp-Entry "outer-expr" method #f 462 26 462 36 ("backward-constituent" "forward-constituent" "rest")}
        {Lisp-Entry "text-constituent?" method #f 472 18 472 35 ("text" "get-syntax" "text-constituent?" "char")}
        {Lisp-Entry "paragraph-start" method #f 481 18 481 33 ("0" "start" "set-col")}
        {Lisp-Entry "paragraph-end" method #f 485 18 485 31 ("get-line" "paragraph-length" "end" "set-col")}
        {Lisp-Entry "previous-paragraph" method #f 489 18 489 36 ("0" "set-col" "-1" "start" "increase-line")}
        {Lisp-Entry "next-paragraph" method #f 494 18 494 32 ("0" "set-col" "end" "increase-line")}
        {Lisp-Entry "paragraph-column" method #f 499 18 499 34 ("eqv?" "c" "lambda" "forward-while")}
        {Lisp-Entry "backward-style" method #f 508 18 508 32 ("backward" "get-style" "not" "or" "when" "start" "text" "get-run-at" "run" "iterate" "let" "predicate")}
        {Lisp-Entry "forward-style" method #f 516 18 516 31 ("forward" "get-style" "not" "or" "text" "get-run-at" "run" "when" "1" "end" "next-pos" "next" "iterate" "let" "predicate")}
        {Lisp-Entry "select-style" method #f 526 18 526 30 ("forward-style" "backward-style" "predicate")}}}})
"Text-File-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "Text-File-Request.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.Text-File-Request" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Text-File-Request" class #f 45 20 45 37 ("char-encoding" "Dark" "Medium" "Color" "border-color:" "1" "2" "Rect" "border-insets:" "22" "150" "0" "80" "auto-size?:" "3" "4" "Point" "position:" "title:" "24" "250" "Dimension" "size:" "buttonbar" "name:" "File-Request")
        {Lisp-Entry "host-title" method #f 58 25 58 35 ()}
        {Lisp-Entry "finish" method #f 62 20 62 26 ("update-char-encoding" "nextmethod" "rest")}
        {Lisp-Entry "Char-Encodings" definition #f 72 14 72 28 ("UTF-16" "UTF-8" "UTF" "ISO-8859-1" "ASCII")}
        {Lisp-Entry "update-char-encoding" method #f 80 11 80 31 ("UTF" "'UTF" "set-value" "Char-Encodings" "set-choices" "char-encoding" "'char-encoding" "locate" "combo" "let")}
        {Lisp-Entry "get-modal-result" method #f 91 20 91 36 ("char-encoding" "'char-encoding" "locate" "get-value" "nextmethod" "values")}}}})
"Text-Font-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Text-Font-Combo.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Text-Font-Combo" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Text-Font-Combo" class #f 43 20 43 35 ("Text-Combo")
        {Lisp-Entry "font-list" definition #f 46 14 46 23 ()}
        {Lisp-Entry "client-update" method #f 55 20 55 33 ("font-list" "list" "name" "lambda" "map" "set-choices")}
        {Lisp-Entry "selection-change" method #f 66 20 66 36 ("get-font" "get-font-name" "set-content" "Text-Style" "is?" "if" "get-style-at" "style" "client" "get-end" "end" "let*")}
        {Lisp-Entry "combo-choice" method #f 79 20 79 32 ("selection-change" "get-value" "client" "set-selection-font-name")}}}})
"Text-Highlight"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "text" "Text-Highlight.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Text-Highlight" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Text-Highlight" class #f 44 7 44 21 ("Object")
        {Lisp-Entry "range" slot #f 47 8 47 13 ()}
        {Lisp-Entry "get-range" accessor #f 47 31 47 39 ()}
        {Lisp-Entry "style" slot #f 48 8 48 13 ()}
        {Lisp-Entry "get-style" accessor #f 48 31 48 39 ()}
        {Lisp-Entry "show-unfocused?" slot #f 49 8 49 23 ()}
        {Lisp-Entry "get-show-unfocused?" accessor #f 49 31 49 39 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("show-unfocused?~self" "style~self" "range~self" "set!" "nextmethod" "show-unfocused?" "show-unfocused?:" "style" "range")}}}})
"Text-Palette"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Text-Palette.jazz"} 1290011753
    {Lisp-Entry "jazz.ui.text.Text-Palette" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Text-Palette" class #f 48 20 48 32 ("on-insert-table" "insert-table" "table-separator" "on-insert-image" ":form" "insert-image" "image-separator" "on-toggle-ruler" "toggle-ruler" "ruler-separator" "on-pick-highlight-color" "Dark-Red" "on-highlight-color" "highlight-color" "0" "4" "on-pick-text-color" "pick" "Dark-Blue" "color:" "body" "on-text-color" "31" "text-color" "on-increase-indent" "increase-indent" "on-decrease-indent" "decrease-indent" "on-bulleted" "bulleted" "right" "justify-right" "centered" "justify-centered" "left" ":justification" "on-justify" "justification" "justify-left" "top" "selected?:" "alignment-top" "center" "alignment-center" "bottom" "alignment:" "on-alignment" "alignment" "group:" "alignment-bottom" "on-underline" "underline" "on-italic" "italic" "on-bold" ":focus" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "bold" "size" "40" "size-border" "font" "font-border" "enabled?:" "style" "166" "blue:" "188" "green:" "200" "red:" "Medium" "Color" "border-color:" "2" "Rect" "border-insets:" "21" "120" "Dimension" "size:" "style-border" "name:" "initialize" "View")
        {Lisp-Entry "flow-layout" slot #f 51 8 51 19 ()}
        {Lisp-Entry "client" slot #f 52 8 52 14 ()}
        {Lisp-Entry "external-name" method #f 99 25 99 38 ("text-palette" "'text-palette" "rest")}
        {Lisp-Entry "mouse-activate?" method #f 103 20 103 35 ()}
        {Lisp-Entry "host-icon" method #f 112 25 112 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 116 25 116 35 ()}
        {Lisp-Entry "host-install" method #f 120 20 120 32 ("on-focus-change" "'on-focus-change" "method-name:" "self" "target:" "Event-Handler" "new" "add-focus-listener" "get-application" "appl" "let")}
        {Lisp-Entry "host-uninstall" method #f 125 20 125 34 ("self" "remove-focus-listener" "get-application" "appl" "let")}
        {Lisp-Entry "finish" method #f 135 20 135 26 ("layout-view" "0" "5" "4" "Rect" "insets:" "Flow-Layout" "new" "flow-layout" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "layout" method #f 141 20 141 26 ("get-height" "get-width" "children" "flow-layout" "layout")}
        {Lisp-Entry "on-focus-change" method #f 150 11 150 26 ("get-guest" "eq?" "get-host" "host" "or" "enable-buttons" "activate-text" "on-text" "'on-text" "method-name:" "target:" "Event-Handler" "new" "add-text-listener" "not" "remove-text-listener" "self" "text-listener?" "Formatted-Text-View" "old-focus" "is?" "and" "when" "get-focus" "focus" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-text" method #f 170 11 170 18 ("selection-change" ":selection-change" "get-kind" "case" "evt")}
        {Lisp-Entry "on-insert-image" method #f 175 11 175 26 ("insert-styled" "moniker:" "Image-Style" "new" "style" "choose-file" "moniker" "let*" "title:" "client" "insert-view" "evt")}
        {Lisp-Entry "on-insert-table" method #f 183 11 183 26 ("2" "row-count:" "100" "width:" "columns:" "node-column?:" "header?:" "101" "304" "Dimension" "size:" "client" "insert-table" "evt")}
        {Lisp-Entry "enable-buttons" method #f 187 29 187 43 ("insert-table" "'insert-table" "insert-image" "'insert-image" "toggle-ruler" "'toggle-ruler" "highlight-color" "'highlight-color" "text-color" "'text-color" "increase-indent" "'increase-indent" "decrease-indent" "'decrease-indent" "bulleted" "'bulleted" "numbered" "'numbered" "justify-right" "'justify-right" "justify-centered" "'justify-centered" "justify-left" "'justify-left" "alignment-top" "'alignment-top" "alignment-center" "'alignment-center" "alignment-bottom" "'alignment-bottom" "underline" "'underline" "italic" "'italic" "bold" "'bold" "size" "'size" "font" "'font" "style" "'style" "locate" "set-enabled?" "enabled?")}
        {Lisp-Entry "activate-text" method #f 217 11 217 24 ("selection-change" "size" "'size" "font" "'font" "style" "'style" "locate" "set-client" "set!" "client" "neq?" "when" "text")}
        {Lisp-Entry "selection-change" method #f 231 11 231 27 ("let" "else" "list" "get-application" "set-selected" "reference:" "class-of" "category-identifier" "model:" "'new" "action:" "Form" "form:" "Designer" "new" "designer" "get-view" "view" "View-Style" "typecase" "get-bulleted?" "bulleted" "'bulleted" "right" "'right" "justify-right" "'justify-right" "centered" "'centered" "justify-centered" "'justify-centered" "left" "'left" "get-justification" "justify-left" "'justify-left" "top" "'top" "alignment-top" "'alignment-top" "center" "'center" "alignment-center" "'alignment-center" "eq?" "alignment-bottom" "'alignment-bottom" "get-underline?" "underline" "'underline" "get-italic?" "italic" "'italic" "get-bold?" "bold" "'bold" "set-selected?" "get-font" "Text-Style" "is?" "and" "bottom" "'bottom" "get-alignment" "or" "alignment" "get-style-at" "get-line" "get-paragraph" "get-format" "format" "client" "get-end" "end" "let*" "size" "'size" "font" "'font" "style" "'style" "locate" "selection-change")}}}})
"Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Text-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Text-Preferences" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Text-Preferences" class #f 45 20 45 36 ("Image-Resource" "icon:" "title:" "initialize" "Document-Preferences")
        {Lisp-Entry "background" property #f 48 12 48 22 ()}
        {Lisp-Entry "get-background" accessor #f 48 49 48 57 ()}
        {Lisp-Entry "set-background" accessor #f 48 49 48 57 ()}
        {Lisp-Entry "pulse-caret?" property #f 49 12 49 24 ()}
        {Lisp-Entry "get-pulse-caret?" accessor #f 49 49 49 57 ()}
        {Lisp-Entry "set-pulse-caret?" accessor #f 49 49 49 57 ()}
        {Lisp-Entry "get-class-descriptor" method #f 61 25 61 45 ("Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 70 11 70 17 ()
        {Lisp-Entry "Text-Preferences-Descriptor" class #f 76 7 76 34 ("pulse-caret?" "background" "name:" "Document-Preferences-Descriptor")}}}})
"Text-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "Text-Request.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.Text-Request" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Text-Request" class #f 45 20 45 32 ("209" "cancel" "default?:" "on-ok" "action-handler:" "24" "80" "143" "122" "title:" "ok" "on-cancel" "escape-press-handler:" "on-return" ":host" "Event-Handler" "return-press-handler:" "wrap?:" "top-padding:" "2" "left-padding:" "text" "fill" "layout-type:" "content" "name:" "vscroll?:" "hscroll?:" "edge" "border-type:" "121" "390" "7" "6" "Point" "position:" "180" "402" "Dimension" "size:" "View")
        {Lisp-Entry "dialog-class" method #f 64 16 64 28 ("Text-Request-Dialog")}
        {Lisp-Entry "meta" class #f 69 9 69 13 ("Dialog" "extends" "Text-Request-Dialog")
          {Lisp-Entry "focus-gained" method #f 72 13 72 25 ("text" "'text" "guest" "locate" "acquire-focus" "nextmethod")}
          {Lisp-Entry "on-return" method #f 77 13 77 22 ("get-modal-result" "end-modal" "text" "'text" "guest" "locate" "insert-newline" "get-shift?" "if" "evt")}
          {Lisp-Entry "get-modal-result" method #f 83 13 83 29 ("text" "'text" "guest" "locate" "get-string-content")}}}}})
"Text-Search"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Text-Search.jazz"} 1290008287
    {Lisp-Entry "jazz.ui.search.Text-Search" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Text-Search" class #f 49 20 49 31 ("54" "user-files" "34" "jazz-files" "18" "120" "Dimension" "size:" "14" "13" "Point" "position:" "active-window" "title:" "domain" "name:" "Search-View")
        {Lisp-Entry "finish" method #f 61 20 61 26 ("user-files" "'user-files" "get-user-label" "jazz-files" "'jazz-files" "locate" "set-title" "when" "get-jazz-label" "label" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "preferences" method #f 72 11 72 22 ("text" "search-manager" "tools" "get-preferences")}
        {Lisp-Entry "get-search-domains" method #f 81 20 81 38 ("user-files" "jazz-files" "active-window")}
        {Lisp-Entry "get-active-window-domain" method #f 87 20 87 44 ("active-window" "'active-window")}
        {Lisp-Entry "search-targets" method #f 96 20 96 34 ("search" "'search" "search-threaded" "lambda" "new-thread" "thread-start!" "else" "search-active-window" "active-window" "get-search-domain" "case" "search-set")}
        {Lisp-Entry "search-threaded" method #f 108 24 108 39 ("close-manager" "unregister-activity" "get-activity-manager" "manager" "when" "user-feedback" "select-results" "get-search-targets" "add-results" "text" "'text" "set-mode" "get-results" "results" "let" "lambda" "post-event" "search" "found" "count-files" "get-search-reporter" "User-Reporter" "new" "reporter" "let*" "search-set")}
        {Lisp-Entry "search" method #f 125 11 125 17 ("search-user-files" "user-files" "search-jazz-files" "jazz-files" "get-search-domain" "case" "reporter" "search-set")}
        {Lisp-Entry "set-session-properties" method #f 136 20 136 42 ("get-active-domain" "set-search-domain" "nextmethod" "config")}
        {Lisp-Entry "Jazz-Count" definition #f 146 14 146 24 ()}
        {Lisp-Entry "count-jazz-files" method #f 150 11 150 27 ("count-jazz-directories" "set!" "Jazz-Count" "unless")}
        {Lisp-Entry "count-jazz-directories" method #f 156 11 156 33 ("ignored-toplevel-directories:" "increase!" "ci=?" "test:" "get-extension" "member?" "when" "file" "iterate-directory" "directory" "lambda" "for-each" "default-search-extensions" "get-jazz-extensions" "extensions" "default-search-directories" "get-jazz-directories" "or" "filter-existing" "directories" "0" "count" "preferences" "pref" "let")}
        {Lisp-Entry "User-Count" definition #f 171 14 171 24 ()}
        {Lisp-Entry "count-user-files" method #f 175 11 175 27 ("set!" "User-Count" "unless" "increase!" "get-extension" "member?" "when" "file" "iterate-directory" "directory" "for-each" "0" "lambda" "count" "default-search-extensions" "get-user-extensions" "extensions" "default-search-directories" "get-user-directories" "or" "filter-existing" "directories" "preferences" "pref" "let")}
        {Lisp-Entry "count-files" method #f 194 11 194 22 ("count-user-files" "user-files" "count-jazz-files" "jazz-files" "get-search-domain" "case")}
        {Lisp-Entry "filter-existing" definition #f 200 15 200 30 ("exists?" "collect-if" "directories")}
        {Lisp-Entry "default-search-directories" definition #f 204 15 204 41 ("Profiles" "'Profiles" "User" "'User" "Directory" "list" "Jazz" "'Jazz" "is-alias?" "if" "append")}
        {Lisp-Entry "setup-search-reporter" method #f 216 20 216 41 ("set-step" "set-pos" "1" "Range" "new" "set-range" "count" "reporter")}
        {Lisp-Entry "search-active-window" method #f 227 11 227 31 ("acquire-focus" "bring-to-front" "find-forward" "get-start" "set-caret" "Text-View" "get-guest" "guest" "Frame-Host" "is?" "car" "frame" "1" "length" ">=" "when" "all-frames" "frames" "let" "search-set")}
        {Lisp-Entry "search-jazz-files" method #f 240 11 240 28 ("get-output" "get-expression?" "search-in-directories" "default-search-extensions" "get-jazz-extensions" "extensions" "default-search-directories" "get-jazz-directories" "or" "filter-existing" "directories" "preferences" "pref" "List-Factory" "new" "factory" "let" "reporter" "search-set")}
        {Lisp-Entry "search-user-files" method #f 249 11 249 28 ("get-output" "get-expression?" "search-in-directories" "default-search-extensions" "get-user-extensions" "extensions" "default-search-directories" "get-user-directories" "or" "filter-existing" "directories" "preferences" "pref" "List-Factory" "new" "factory" "let" "reporter" "search-set")}}}})
"Text-Search-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "search" "Text-Search-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.search.Text-Search-Preferences" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Text-Search-Preferences" class #f 44 20 44 43 ("title:" "initialize" "Search-View-Preferences")
        {Lisp-Entry "active-domain" property #f 47 12 47 25 ()}
        {Lisp-Entry "get-active-domain" accessor #f 47 53 47 61 ()}
        {Lisp-Entry "set-active-domain" accessor #f 47 53 47 61 ()}
        {Lisp-Entry "jazz-label" property #f 48 12 48 22 ()}
        {Lisp-Entry "get-jazz-label" accessor #f 48 53 48 61 ()}
        {Lisp-Entry "set-jazz-label" accessor #f 48 53 48 61 ()}
        {Lisp-Entry "jazz-directories" property #f 49 12 49 28 ()}
        {Lisp-Entry "get-jazz-directories" accessor #f 49 53 49 61 ()}
        {Lisp-Entry "set-jazz-directories" accessor #f 49 53 49 61 ()}
        {Lisp-Entry "jazz-extensions" property #f 50 12 50 27 ()}
        {Lisp-Entry "get-jazz-extensions" accessor #f 50 53 50 61 ()}
        {Lisp-Entry "set-jazz-extensions" accessor #f 50 53 50 61 ()}
        {Lisp-Entry "user-label" property #f 51 12 51 22 ()}
        {Lisp-Entry "get-user-label" accessor #f 51 53 51 61 ()}
        {Lisp-Entry "set-user-label" accessor #f 51 53 51 61 ()}
        {Lisp-Entry "user-directories" property #f 52 12 52 28 ()}
        {Lisp-Entry "get-user-directories" accessor #f 52 53 52 61 ()}
        {Lisp-Entry "set-user-directories" accessor #f 52 53 52 61 ()}
        {Lisp-Entry "user-extensions" property #f 53 12 53 27 ()}
        {Lisp-Entry "get-user-extensions" accessor #f 53 53 53 61 ()}
        {Lisp-Entry "set-user-extensions" accessor #f 53 53 53 61 ()}}}})
"Text-Size-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Text-Size-Combo.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Text-Size-Combo" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Text-Size-Combo" class #f 43 20 43 35 ("Text-Combo")
        {Lisp-Entry "client-update" method #f 51 20 51 33 ("->string" "list" "size" "lambda" "map" "set-choices" "72" "48" "36" "24" "18" "14" "12" "10" "9" "8" "size-list" "define")}
        {Lisp-Entry "selection-change" method #f 65 20 65 36 ("get-font" "get-point-size" "->string" "set-content" "Text-Style" "is?" "if" "get-style-at" "style" "client" "get-end" "end" "let*")}
        {Lisp-Entry "combo-choice" method #f 78 20 78 32 ("selection-change" "get-value" "client" "set-selection-point-size")}}}})
"Text-Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Text-Style.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Text-Style" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Text-Style" class #f 44 7 44 17 ("attributes" "Style")
        {Lisp-Entry "font-family" definition #f 48 5 48 16 ()}
        {Lisp-Entry "get-font-family" accessor #f 48 5 48 16 ()}
        {Lisp-Entry "set-font-family" accessor #f 48 5 48 16 ()}
        {Lisp-Entry "font-size" definition #f 49 5 49 14 ()}
        {Lisp-Entry "get-font-size" accessor #f 49 5 49 14 ()}
        {Lisp-Entry "set-font-size" accessor #f 49 5 49 14 ()}
        {Lisp-Entry "font-weight" definition #f 50 5 50 16 ()}
        {Lisp-Entry "get-font-weight" accessor #f 50 5 50 16 ()}
        {Lisp-Entry "set-font-weight" accessor #f 50 5 50 16 ()}
        {Lisp-Entry "font-style" definition #f 51 5 51 15 ()}
        {Lisp-Entry "get-font-style" accessor #f 51 5 51 15 ()}
        {Lisp-Entry "set-font-style" accessor #f 51 5 51 15 ()}
        {Lisp-Entry "font" definition #f 52 5 52 9 ()}
        {Lisp-Entry "get-font" accessor #f 52 5 52 9 ()}
        {Lisp-Entry "set-font" accessor #f 52 5 52 9 ()}
        {Lisp-Entry "color" definition #f 53 5 53 10 ()}
        {Lisp-Entry "get-color" accessor #f 53 5 53 10 ()}
        {Lisp-Entry "set-color" accessor #f 53 5 53 10 ()}
        {Lisp-Entry "highlight" definition #f 54 5 54 14 ()}
        {Lisp-Entry "get-highlight" accessor #f 54 5 54 14 ()}
        {Lisp-Entry "set-highlight" accessor #f 54 5 54 14 ()}
        {Lisp-Entry "frame" definition #f 55 5 55 10 ()}
        {Lisp-Entry "get-frame" accessor #f 55 5 55 10 ()}
        {Lisp-Entry "set-frame" accessor #f 55 5 55 10 ()}
        {Lisp-Entry "get-height" method #f 63 20 63 30 ("font" "get-metrics" "get-height")}
        {Lisp-Entry "run-width" method #f 67 20 67 29 ("String" "coerce" "font" "text-width" "get-string" "string" "let" "run")}
        {Lisp-Entry "scan" method #f 78 20 78 24 ("increase!" "font" "get-char-width" "2" "fxround/" "+" "-" "width" "cdr" "set!" "car" "<=" "while" "begin" "eqv?" "if" "element" "c" "min" "max" "below" "from" "n" "for" "loop" "cardinality" "len" "right" "mid" "left" "get-string" "string" "let" "proc" "run" "tabs" "end" "start" "h")}
        {Lisp-Entry "Break-Characters" definition #f 106 14 106 30 ()}
        {Lisp-Entry "wrap" method #f 110 20 110 24 ("=" ">=" "if" "self" "subseq!" "Run" "new" "let" "not" "or" ">" "and" "+" "Break-Characters" "memq?" "when" "set!" "right" "mid" "left" "n" "c" "lambda" "scan" "rightmost" "brk-right" "brk" "0" "offset" "1" "-" "end" "cardinality" "len" "get-string" "string" "start" "let*" "run" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "height-update" method #f 142 20 142 33 ("height")}
        {Lisp-Entry "draw-style" method #f 151 20 151 30 ("frame-rect" "Rect" "new" "rect" "frame" "when" "highlight" "draw-tabbed-text" "width" "let" "0" "String" "coerce" "draw-text" "Dark" "name:" "Color" "set-text-color" "begin" "not" "or" "Black" "'Black" "registered-color" "print-black/white?:" "getf" "if" "color" "justify-element" "+" "get-metrics" "get-height" "font-height" "let*" "font" "set-font" "enabled?" "left" "tabs" "line-height" "v" "h" "string" "context" "surface")}}}})
"Text-Style-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Text-Style-Combo.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.Text-Style-Combo" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Text-Style-Combo" class #f 43 20 43 36 ("Text-Combo")
        {Lisp-Entry "client-update" method #f 51 20 51 33 ("set-choices" "List" "->string" "list" "name" "lambda" "names" "union" "get-styles" "styles" "get-name" "client" "get-formats" "accumulate" "remove-false" "formats" "let" "get-all-styles" "define")}
        {Lisp-Entry "selection-change" method #f 69 20 69 36 ("get-base" "get-name" "or" "->string" "set-content" "get-style-at" "style" "client" "get-end" "end" "let*")}
        {Lisp-Entry "combo-choice" method #f 80 20 80 32 ("selection-change" "get-value" "client" "set-selection-style")}}}})
"Text-Style-Preference"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "preference" "Text-Style-Preference.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Text-Style-Preference" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Text-Style-Preference" class #f 45 20 45 41 ("initialize" "Object")
        {Lisp-Entry "name" property #f 48 12 48 16 ()}
        {Lisp-Entry "get-name" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "set-name" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "base" property #f 49 12 49 16 ()}
        {Lisp-Entry "get-base" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "set-base" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "font" property #f 50 12 50 16 ()}
        {Lisp-Entry "get-font" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "set-font" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "color" property #f 51 12 51 17 ()}
        {Lisp-Entry "get-color" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "set-color" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "highlight" property #f 52 12 52 21 ()}
        {Lisp-Entry "get-highlight" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "set-highlight" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "frame" property #f 53 12 53 17 ()}
        {Lisp-Entry "get-frame" accessor #f 53 46 53 54 ()}
        {Lisp-Entry "set-frame" accessor #f 53 46 53 54 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("frame~self" "highlight~self" "color~self" "font~self" "base~self" "name~self" "set!" "nextmethod" "frame" "frame:" "highlight" "highlight:" "color" "color:" "font" "font:" "base" "base:" "name" "name:")}
        {Lisp-Entry "print" method #f 66 20 66 25 ("frame" "frame:" "highlight" "highlight:" "color" "color:" "font" "font:" "base" "base:" "name" "name:" "list" "self" "class-of" "category-name" "format" "readably" "printer")}}}})
"Text-Syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "syntax" "Text-Syntax.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.syntax.Text-Syntax" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Text-Syntax" class #f 44 7 44 18 ("Object")
        {Lisp-Entry "comment-string" method #f 52 26 52 40 ()}
        {Lisp-Entry "title-comment-string" method #f 56 26 56 46 ()}
        {Lisp-Entry "get-constituent-test" method #f 65 26 65 46 ("word-constituent?")}
        {Lisp-Entry "text-constituent?" method #f 69 18 69 35 ("get-constituent-test" "proc" "let" "char")}
        {Lisp-Entry "get-catalog-context" method #f 79 11 79 30 ("get-application" "get-catalog-context")}
        {Lisp-Entry "translate-key" method #f 88 26 88 39 ("key")}
        {Lisp-Entry "auto-complete-characters" method #f 97 26 97 50 ()}
        {Lisp-Entry "auto-complete-char?" method #f 101 26 101 45 ("text-constituent?" "not" "auto-complete-characters" "memq?" "or" "last" "key")}
        {Lisp-Entry "find-imports" method #f 111 26 111 38 ("symbol")}}}})
"Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "Text-View.jazz"} 1290011753
    {Lisp-Entry "jazz.ui.text.Text-View" module #f 38 18 38 40 ("jazz")
      {Lisp-Entry "Text-View" class #f 56 7 56 16 ("16" "default-row-height:" "12" "left-padding:" "White" "name:" "Color" "background:" "Exemplar-Domain" "self" "Undoer" "new" "char" "'char" "Caret-Color" "Completion-Color" "Inactive-Selection-Color" "Active-Selection-Color" "0" "explicit" "initialize" "Document" "Outline-View")
        {Lisp-Entry "Active-Selection-Color" definition #f 68 21 68 43 ("230" "blue:" "green:" "190" "red:" "Color")}
        {Lisp-Entry "Inactive-Selection-Color" definition #f 71 21 71 45 ("Unfocused-Selection" "name:" "Color")}
        {Lisp-Entry "Completion-Color" definition #f 75 21 75 37 ("blue:" "240" "green:" "128" "red:" "Color")}
        {Lisp-Entry "Caret-Color" definition #f 79 14 79 25 ("Black" "name:" "Color")}
        {Lisp-Entry "text" property #f 84 22 84 26 ()}
        {Lisp-Entry "text-content" property #f 86 22 86 34 ()}
        {Lisp-Entry "selectable?" property #f 87 22 87 33 ()}
        {Lisp-Entry "get-selectable?" accessor #f 87 99 87 107 ()}
        {Lisp-Entry "set-selectable?" accessor #f 87 99 87 107 ()}
        {Lisp-Entry "editable?" property #f 88 22 88 31 ()}
        {Lisp-Entry "get-editable?" accessor #f 88 99 88 107 ()}
        {Lisp-Entry "set-editable?" accessor #f 88 99 88 107 ()}
        {Lisp-Entry "wrap?" property #f 89 22 89 27 ()}
        {Lisp-Entry "get-wrap?" accessor #f 89 99 89 107 ()}
        {Lisp-Entry "set-wrap?" accessor #f 89 99 89 107 ()}
        {Lisp-Entry "default-format" property #f 90 22 90 36 ()}
        {Lisp-Entry "default-style" property #f 91 22 91 35 ()}
        {Lisp-Entry "paragraph-spacing" property #f 92 22 92 39 ()}
        {Lisp-Entry "get-paragraph-spacing" accessor #f 92 99 92 107 ()}
        {Lisp-Entry "set-paragraph-spacing" accessor #f 92 99 92 107 ()}
        {Lisp-Entry "accepts-returns?" property #f 93 22 93 38 ()}
        {Lisp-Entry "get-accepts-returns?" accessor #f 93 99 93 107 ()}
        {Lisp-Entry "set-accepts-returns?" accessor #f 93 99 93 107 ()}
        {Lisp-Entry "focus-selects-all?" property #f 94 22 94 40 ()}
        {Lisp-Entry "get-focus-selects-all?" accessor #f 94 99 94 107 ()}
        {Lisp-Entry "set-focus-selects-all?" accessor #f 94 99 94 107 ()}
        {Lisp-Entry "show-unfocused-selection?" property #f 95 22 95 47 ()}
        {Lisp-Entry "get-show-unfocused-selection?" accessor #f 95 99 95 107 ()}
        {Lisp-Entry "set-show-unfocused-selection?" accessor #f 95 99 95 107 ()}
        {Lisp-Entry "active-selection-color" property #f 96 22 96 44 ()}
        {Lisp-Entry "inactive-selection-color" property #f 97 22 97 46 ()}
        {Lisp-Entry "completion-color" property #f 98 22 98 38 ()}
        {Lisp-Entry "caret-color" property #f 99 22 99 33 ()}
        {Lisp-Entry "char-encoding" property #f 100 22 100 35 ()}
        {Lisp-Entry "get-char-encoding" accessor #f 100 99 100 107 ()}
        {Lisp-Entry "set-char-encoding" accessor #f 100 99 100 107 ()}
        {Lisp-Entry "eol-encoding" property #f 101 22 101 34 ()}
        {Lisp-Entry "get-eol-encoding" accessor #f 101 99 101 107 ()}
        {Lisp-Entry "set-eol-encoding" accessor #f 101 99 101 107 ()}
        {Lisp-Entry "colorize?" property #f 104 22 104 31 ()}
        {Lisp-Entry "get-colorize?" accessor #f 104 99 104 107 ()}
        {Lisp-Entry "set-colorize?" accessor #f 104 99 104 107 ()}
        {Lisp-Entry "force-tab-navigate?" property #f 105 22 105 41 ()}
        {Lisp-Entry "get-force-tab-navigate?" accessor #f 105 99 105 107 ()}
        {Lisp-Entry "set-force-tab-navigate?" accessor #f 105 99 105 107 ()}
        {Lisp-Entry "syntax" slot #f 108 18 108 24 ()}
        {Lisp-Entry "get-syntax" accessor #f 108 84 108 92 ()}
        {Lisp-Entry "set-syntax" accessor #f 108 84 108 92 ()}
        {Lisp-Entry "selection-anchor" slot #f 109 18 109 34 ()}
        {Lisp-Entry "locked-anchor?" slot #f 110 18 110 32 ()}
        {Lisp-Entry "mouse-selecting?" slot #f 111 18 111 34 ()}
        {Lisp-Entry "selection-mode" slot #f 112 18 112 32 ()}
        {Lisp-Entry "special-mode" slot #f 113 18 113 30 ()}
        {Lisp-Entry "virtual-h" slot #f 114 18 114 27 ()}
        {Lisp-Entry "caret-position" slot #f 115 18 115 32 ()}
        {Lisp-Entry "caret-pulse" slot #f 116 18 116 29 ()}
        {Lisp-Entry "caret-visible?" slot #f 117 18 117 32 ()}
        {Lisp-Entry "caret-pulse?" slot #f 118 18 118 30 ()}
        {Lisp-Entry "completion-active?" slot #f 119 18 119 36 ()}
        {Lisp-Entry "text-listeners" slot #f 120 18 120 32 ()}
        {Lisp-Entry "undoer" slot #f 121 18 121 24 ()}
        {Lisp-Entry "get-undoer" accessor #f 121 81 121 89 ()}
        {Lisp-Entry "user-tabs" slot #f 122 18 122 27 ()}
        {Lisp-Entry "tabs" slot #f 123 18 123 22 ()}
        {Lisp-Entry "get-tabs" accessor #f 123 84 123 92 ()}
        {Lisp-Entry "set-tabs" accessor #f 123 84 123 92 ()}
        {Lisp-Entry "mark" slot #f 124 18 124 22 ()}
        {Lisp-Entry "get-mark" accessor #f 124 84 124 92 ()}
        {Lisp-Entry "set-mark" accessor #f 124 84 124 92 ()}
        {Lisp-Entry "formats" slot #f 125 18 125 25 ()}
        {Lisp-Entry "styles" slot #f 126 18 126 24 ()}
        {Lisp-Entry "controller" slot #f 127 18 127 28 ()}
        {Lisp-Entry "previous-position" slot #f 128 18 128 35 ()}
        {Lisp-Entry "autoscroll-pulse" slot #f 129 18 129 34 ()}
        {Lisp-Entry "wrap-width" slot #f 130 18 130 28 ()}
        {Lisp-Entry "get-wrap-width" accessor #f 130 84 130 92 ()}
        {Lisp-Entry "set-wrap-width" accessor #f 130 84 130 92 ()}
        {Lisp-Entry "wrap-patch" slot #f 131 18 131 28 ()}
        {Lisp-Entry "contiguous-undo-range" slot #f 132 18 132 39 ()}
        {Lisp-Entry "mouse-copy-selection" slot #f 133 18 133 38 ()}
        {Lisp-Entry "mouse-copy-destination" slot #f 134 18 134 40 ()}
        {Lisp-Entry "highlights" slot #f 135 18 135 28 ()}
        {Lisp-Entry "verify-reload" method #f 143 20 143 33 ()}
        {Lisp-Entry "current-history-item" method #f 144 20 144 40 ()}
        {Lisp-Entry "preferences" method #f 147 29 147 40 ()}
        {Lisp-Entry "prepare" method #f 151 20 151 27 ("get-default-style" "add-style" "get-default-format" "add-format" "default-style" "default-format" "set!" "nextmethod" "Label" "Font" "font:" "styles" "Text-Style" "new-default-style" "formats" "domain:" "Default" "'Default" "name:" "Format" "new" "new-default-format" "define" "rest")}
        {Lisp-Entry "install" method #f 165 20 165 27 ("get-pulse-caret?" "caret-pulse?" "symbolic-color" "set-background" "get-background" "background" "when" "preferences" "pref" "let" "new-syntax" "syntax" "set!" "nextmethod" "rest")}
        {Lisp-Entry "install-child" method #f 176 20 176 33 ("nextmethod" "else" "form->node" "set-text" "text" "get-model" "case" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "finish" method #f 183 20 183 26 ("make-tabs" "tabs" "set!" "empty-content" "set-content" "text" "not" "when" "nextmethod" "rest")}
        {Lisp-Entry "destroy" method #f 190 20 190 27 ("nextmethod" "show-text-cursor" "close" "controller" "when")}
        {Lisp-Entry "new-syntax" method #f 197 29 197 39 ("Text-Syntax" "new")}
        {Lisp-Entry "get-text-view" method #f 201 20 201 33 ("self")}
        {Lisp-Entry "get-active-selection-color" method #f 210 18 210 44 ("active-selection-color")}
        {Lisp-Entry "set-active-selection-color" method #f 214 18 214 44 ("invalidate-view" "active-selection-color" "set!" "value")}
        {Lisp-Entry "set-inactive-selection-color" method #f 219 18 219 46 ("invalidate-view" "inactive-selection-color" "set!" "value")}
        {Lisp-Entry "get-completion-color" method #f 224 18 224 38 ("completion-color")}
        {Lisp-Entry "set-completion-color" method #f 228 18 228 38 ("invalidate-view" "completion-color" "set!" "value")}
        {Lisp-Entry "get-paragraphs" method #f 233 21 233 35 ("root-row" "get-sons")}
        {Lisp-Entry "set-paragraphs" method #f 237 21 237 35 ("root-row" "set-sons" "lst")}
        {Lisp-Entry "host-workspaces" method #f 246 20 246 35 ("text")}
        {Lisp-Entry "install-in-host" method #f 250 20 250 35 ("get-controller" "install-in-host" "nextmethod" "host")}
        {Lisp-Entry "focus-actions" method #f 260 20 260 33 ("nextmethod" "text" "'text" "find-actions" "cons")}
        {Lisp-Entry "get-controller" method #f 270 20 270 34 ("new-controller" "set!" "controller" "unless")}
        {Lisp-Entry "new-controller" method #f 276 20 276 34 ("default-console?" "console?:" "default-tool?" "tool?:" "self" "Document-Controller" "new")}
        {Lisp-Entry "default-tool?" method #f 280 29 280 42 ()}
        {Lisp-Entry "default-console?" method #f 284 29 284 45 ()}
        {Lisp-Entry "save" method #f 288 20 288 24 ("get-controller" "save")}
        {Lisp-Entry "save-as" method #f 292 20 292 27 ("get-controller" "save-as")}
        {Lisp-Entry "save-all" method #f 296 26 296 34 ("get-controller" "save-all")}
        {Lisp-Entry "get-moniker" method #f 300 18 300 29 ("get-controller" "get-moniker")}
        {Lisp-Entry "set-moniker" method #f 304 18 304 29 ("get-controller" "set-moniker" "moniker")}
        {Lisp-Entry "get-modified?" method #f 308 20 308 33 ("get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 312 20 312 33 ("get-controller" "set-modified?" "state")}
        {Lisp-Entry "get-read-only?" method #f 316 11 316 25 ("get-controller" "get-read-only?")}
        {Lisp-Entry "write-allowed?" method #f 320 11 320 25 ("get-controller" "write-allowed?" "editable?" "and")}
        {Lisp-Entry "update-status" method #f 324 11 324 24 ("get-controller" "update-status")}
        {Lisp-Entry "update-moniker-time" method #f 328 11 328 30 ("get-controller" "update-moniker-time" "moniker")}
        {Lisp-Entry "confirm-close" method #f 332 20 332 33 ("get-controller" "confirm-close" "rest")}
        {Lisp-Entry "tool-update" method #f 336 20 336 31 ("tool?")}
        {Lisp-Entry "console-update" method #f 340 20 340 34 ("console?")}
        {Lisp-Entry "revert-saved" method #f 344 20 344 32 ("get-controller" "revert-saved")}
        {Lisp-Entry "compare-saved" method #f 348 20 348 33 ("get-controller" "compare-saved")}
        {Lisp-Entry "explorer-class" method #f 357 26 357 40 ("Text-Explorer")}
        {Lisp-Entry "on-select-outer" method #f 361 11 361 26 ("select-outer" "evt")}
        {Lisp-Entry "select-outer" method #f 365 29 365 41 ("get-range" "set-selection" "reset-mode" "outer-expr" "when" "lambda" "with-safe-explore" "get-selection" "range:" "self" "explorer-class" "new" "expl" "let")}
        {Lisp-Entry "focus-gained" method #f 379 20 379 32 ("invalidate-non-showed-highlights" "selection" "invalidate-selection" "has-selection?" "select-all" "focus-selects-all?" "when" "update-caret" "show-text-cursor" "nextmethod")}
        {Lisp-Entry "focus-lose" method #f 390 20 390 30 ("hide-caret" "end-completion" "show-text-cursor" "nextmethod")}
        {Lisp-Entry "focus-lost" method #f 397 20 397 30 ("invalidate-non-showed-highlights" "selection" "invalidate-selection" "has-selection?" "when" "nextmethod")}
        {Lisp-Entry "focus-activate" method #f 404 20 404 34 ("focus-document")}
        {Lisp-Entry "focus-document" method #f 408 20 408 34 ("acquire-focus")}
        {Lisp-Entry "mouse-leave" method #f 412 20 412 31 ("show-text-cursor")}
        {Lisp-Entry "on-backspace-press" method #f 416 20 416 38 ("get-property" "word?:" "backspace-press" "evt")}
        {Lisp-Entry "on-delete-press" method #f 420 11 420 26 ("get-property" "word?:" "delete-press" "evt")}
        {Lisp-Entry "on-paragraph-style" method #f 424 11 424 29 ("style:" "get-property" "set-selection-style" "evt")}
        {Lisp-Entry "on-numbered" method #f 428 11 428 22 ("on-numbered" "'on-numbered" "unimplemented" "evt")}
        {Lisp-Entry "on-bulleted" method #f 432 11 432 22 ("toggle-bulleted" "paragraph" "line" "lambda" "for-each-selected-paragraph" "evt")}
        {Lisp-Entry "on-decrease-indent" method #f 438 11 438 29 ("-32" "indent-paragraph" "paragraph" "line" "lambda" "for-each-selected-paragraph" "evt")}
        {Lisp-Entry "on-increase-indent" method #f 444 11 444 29 ("32" "indent-paragraph" "paragraph" "line" "lambda" "for-each-selected-paragraph" "evt")}
        {Lisp-Entry "on-justify" method #f 450 11 450 21 ("set-justification" "paragraph" "line" "lambda" "for-each-selected-paragraph" "justification:" "get-property" "justification" "let" "evt")}
        {Lisp-Entry "on-alignment" method #f 457 11 457 23 ("get-selection" "set-text-alignment" "alignment:" "get-property" "alignment" "let" "evt")}
        {Lisp-Entry "on-text-style" method #f 462 11 462 24 ("bell" "evt")}
        {Lisp-Entry "on-text-font" method #f 466 11 466 23 ("get-selection" "set-text-font" "close-popups" "initial-font:" "choose-font" "font" "get-style" "get-font" "and" "current" "get-col" "get-run" "run" "get-line" "get-paragraph" "par" "get-caret" "caret" "let*" "evt")}
        {Lisp-Entry "on-text-color" method #f 476 11 476 24 ("get-selection" "set-text-color" "Black" "name:" "Color" "or" "get-body" "set-color" "when" "close-popups" "get-sender" "popup-initiator" "combo" "color:" "get-property" "color" "let" "evt")}
        {Lisp-Entry "on-pick-text-color" method #f 485 11 485 29 ("get-sender" "pick-text-color" "evt")}
        {Lisp-Entry "on-highlight-color" method #f 489 11 489 29 ("get-selection" "set-highlight-color" "White" "name:" "Color" "or" "get-body" "set-color" "when" "close-popups" "get-sender" "popup-initiator" "combo" "color:" "get-property" "color" "let" "evt")}
        {Lisp-Entry "on-pick-highlight-color" method #f 498 11 498 34 ("get-sender" "pick-highlight-color" "evt")}
        {Lisp-Entry "add-text-listener" method #f 507 18 507 35 ("add-listener" "text-listeners" "set!" "listener")}
        {Lisp-Entry "remove-text-listener" method #f 511 18 511 38 ("remove-listener" "text-listeners" "set!" "listener")}
        {Lisp-Entry "text-listener?" method #f 515 18 515 32 ("text-listeners" "listener?" "object")}
        {Lisp-Entry "process-selection-change" method #f 519 18 519 42 ("invoke" "listener" "lambda" "for-each" "self" ":selection-change" "Text-Event" "new" "evt" "let" "text-listeners" "when")}
        {Lisp-Entry "key-press" method #f 532 20 532 29 ("syntax" "translate-key" "char-press" "hide-text-cursor" "key")}
        {Lisp-Entry "backspace-press" method #f 537 20 537 35 ("get-start" "complete-at" "completion-active?" "when" "insert-char/backspace" "word?" "word?:" "key")}
        {Lisp-Entry "delete-press" method #f 543 11 543 23 ("delete-action" "word?" "word?:" "key")}
        {Lisp-Entry "on-delete-char" method #f 547 11 547 25 ("delete-char" "evt")}
        {Lisp-Entry "on-delete-word" method #f 551 11 551 25 ("delete-word" "evt")}
        {Lisp-Entry "on-kill-line" method #f 555 11 555 23 ("delete-range" "not" "get-clipboard-text" "neq?" "string-append" "actual" "append-clipboard" "kill-line" "'kill-line" "special-mode" "set!" "set-clipboard-text" "get-application" "add-clipboard" "replace-clipboard" "get-string" "string" "when" "range" "let" "0" "1" "+" "Cell" "Range$Cell$" "new" "get-limit" "=" "if" "paragraph-length" "len" "get-col" "col" "get-line" "line" "forward" "'forward" "selection-tail" "pos" "let*" "kill-range" "define" "evt")}
        {Lisp-Entry "on-open-line" method #f 587 11 587 23 ("left-arrow-move" "insert-newline" "evt")}
        {Lisp-Entry "return-press" method #f 592 20 592 32 ("insert-newline" "accepts-returns?" "when" "key")}
        {Lisp-Entry "escape-press" method #f 597 20 597 32 ("remove-completion" "key")}
        {Lisp-Entry "tab-press" method #f 601 20 601 29 ("insert-char" "else" "shift-key?" "navigate-view" "force-tab-navigate?" "accepts-returns?" "not" "or" "end-completion" "has-completion?" "cond" "modifiers" "key")}
        {Lisp-Entry "char-press" method #f 610 26 610 36 ("insert-char" "auto-complete" "auto-complete?" "if" "keyboard-input?" "parameterize" "key")}
        {Lisp-Entry "reset-mode" method #f 617 11 617 21 ("virtual-h" "virtual" "'virtual" "eq?" "unless" "special-mode" "set!" "keep" "keep:")}
        {Lisp-Entry "on-insert" method #f 623 19 623 28 ("insert-string" ":string" "call-key-press" ":char" ":key" "case" "content:" "get-property" "content" "get-kind" "kind" "let" "evt")}
        {Lisp-Entry "install-scroller?" method #f 636 20 636 37 ()}
        {Lisp-Entry "default-extension" method #f 640 20 640 37 ()}
        {Lisp-Entry "extensions" method #f 644 20 644 30 ()}
        {Lisp-Entry "load-content" method #f 648 20 648 32 ("update-status" "read-content" "set-content" "not" "if" "moniker")}
        {Lisp-Entry "empty-content" method #f 655 29 655 42 ("list" "paragraphs:" "Text" "new")}
        {Lisp-Entry "get-content" method #f 659 20 659 31 ("List" "paragraph->string" "get-paragraphs" "accumulate")}
        {Lisp-Entry "set-content" method #f 663 20 663 31 ("set-unformatted-content" "lst")}
        {Lisp-Entry "set-unformatted-content" method #f 667 11 667 34 ("complete-setup" "get-row-height" "increase!" "wrap-paragraph" "set!" "set-next" "set-previous" "make-string-paragraph" "paragraph" "let" "string" "lambda" "map" "rows" "root-row" "previous" "height" "0" "count" "get-paragraphs" "null/pair?" "if" "empty-content" "or" "let*" "lst")}
        {Lisp-Entry "get-string-content" method #f 686 18 686 36 ("get-content" "join-lines")}
        {Lisp-Entry "set-string-content" method #f 690 18 690 36 ("call-content-change" "colorize-syntax" "parse-string-content" "set-content" "content")}
        {Lisp-Entry "make-string-paragraph" method #f 696 11 696 32 ("get-default-style" "cardinality" "cast" "0" "subseq!" "Run" "new" "list" "empty-string?" "if" "make-paragraph" "string" "format")}
        {Lisp-Entry "make-paragraph" method #f 705 11 705 25 ("fix-view-style-parent" "get-default-style" "get-font" "get-metrics" "get-height" "set-row-height" "0" "set-level" "root-row" "set-father" "set-runs" "set-string" "get-default-format" "or" "set-format" "self" "set-parent" "Paragraph" "new" "paragraph" "let" "runs" "string" "format")}
        {Lisp-Entry "read-content" method #f 718 26 718 38 ("colorize-syntax" "colorize?" "when" "update-moniker-time" "read-moniker" "set-content" "moniker")}
        {Lisp-Entry "read-moniker" method #f 725 29 725 41 ("if" "char-encoding-errors:" "char-encoding" "char-encoding:" "load-lines" "moniker")}
        {Lisp-Entry "save-content" method #f 729 20 729 32 ("undoer" "reset-save-depth" "set-modified?" "update-status" "get-modified?" "not" "if" "update-moniker-time" "save-to" "moniker")}
        {Lisp-Entry "save-to" method #f 738 20 738 27 ("eol-encoding" "eol-encoding:" "char-encoding" "char-encoding:" "save-lines" "get-content" "content" "let" "moniker")}
        {Lisp-Entry "reload-moniker" method #f 743 20 743 34 ("update-moniker-time" "read-moniker" "reload-content" "when" "moniker")}
        {Lisp-Entry "reload-content" method #f 749 18 749 32 ("update-status" "set-modified?" "0" "get-paragraphs" "cardinality" "min" "Cell" "new" "set-caret" "colorize-syntax" "set-content" "remove-every-row" "get-start" "get-line" "line" "let" "lst")}
        {Lisp-Entry "compare-moniker" method #f 759 20 759 35 ("focus-host" "Document-Moniker" "new" "get-guest" "compare-monikers" "host-visible?:" "Compare-Files" "'Compare-Files" "require-service" "new-frame" "frame" "let" "when" "moniker")}
        {Lisp-Entry "content-size-change" method #f 771 20 771 39 ("wrap-content" "wrap?" "when" "get-width" "visible-width" "set!" "size")}
        {Lisp-Entry "hide-text-cursor" method #f 782 18 782 34 ("hide-cursor" "mouse-over?" "editable?" "selectable?" "view-enabled?" "and" "when")}
        {Lisp-Entry "show-text-cursor" method #f 787 18 787 34 ("show-cursor" "editable?" "selectable?" "view-enabled?" "and" "when")}
        {Lisp-Entry "cursor-update" method #f 792 20 792 33 (":ibeam" ":left-arrow" "paragraph-left" "get-h" "<" "view->text" "get-line" "get-paragraph" "par" "let" ":finger" "set-cursor" "alt-down?" "if" "selectable?" "view-enabled?" "and" "when" "show-text-cursor" "view")}
        {Lisp-Entry "get-caret-color" method #f 808 18 808 33 ("caret-color")}
        {Lisp-Entry "set-caret-color" method #f 812 18 812 33 ("caret-color" "set!" "value")}
        {Lisp-Entry "show-caret" method #f 816 11 816 21 ("0.5" "caret" "'caret" "Pulse" "new" "caret-pulse" "caret-pulse?" "has-focus?" "and" "invalidate-caret" "not" "caret-visible?" "set!" "editable?" "when" "pulse-caret" "define")}
        {Lisp-Entry "hide-caret" method #f 829 11 829 21 ("invalidate-caret" "caret-visible?" "set!" "close" "caret-pulse" "editable?" "when")}
        {Lisp-Entry "without-caret" method #f 838 11 838 24 ("update-caret" "when" "hide-caret" "begin" "unwind-protect" "caret-visible?" "shown?" "let" "editable?" "not" "if" "proc")}
        {Lisp-Entry "update-caret" method #f 850 11 850 23 ("show-caret" "get-start" "set-caret-position" "hide-caret" "has-selection?" "if" "has-focus?" "editable?" "player" "and" "when")}
        {Lisp-Entry "set-caret-position" method #f 858 11 858 29 ("set!" "lambda" "without-caret" "caret-position" "nu/=?" "when" "pos")}
        {Lisp-Entry "invalidate-caret" method #f 865 11 865 27 ("invalidate-rect" "1" "caret-position" "caret-rect" "rect" "let" "fit-caret" "editable?" "when")}
        {Lisp-Entry "caret-rect" method #f 873 11 873 21 ("get-h" "Rect" "new" "-" "get-v" "+" "top" "get-height" "if" "height" "get-run" "run" "get-col" "get-line-at" "lne" "get-line" "get-paragraph" "par" "text->view" "pos" "let*" "when" "width" "caret-pos")}
        {Lisp-Entry "mouse-down" method #f 889 20 889 30 ("previous-position" "reset-mode" "update-caret" "set-caret" "change-selection" "focus-selects-all?" "set-anchor?:" "selection-line" "set-selection" "paragraph-left" "get-h" "<" "if" "get-line" "get-paragraph" "par" "reset-selection" "not" "shift-down?" "or" "char" "'char" "selection-mode" "mouse-selecting?" "set!" "unlock-anchor" "acquire-capture" "acquire-focus" "unless" "end-completion" "view->text" "pos" "alt-down?" "mouse-copy?" "has-focus?" "focus?" "let" "selectable?" "view-enabled?" "and" "when" "view")}
        {Lisp-Entry "mouse-copy" method #f 916 20 916 30 ("call-mouse-down" "mouse-copy-destination" "get-selection" "mouse-copy-selection" "set!" "destination" "pos")}
        {Lisp-Entry "drag-move" method #f 923 20 923 29 ("drag-move-action" "mouse-selecting?" "when" "view")}
        {Lisp-Entry "drag-move-action" method #f 928 11 928 27 ("calculate-autoscroll-amount" "setup-autoscroll" "get-scroller" "when" "drag-select" "view")}
        {Lisp-Entry "drag-up" method #f 934 20 934 27 ("update-focus-actions" "play-current-recording" "get-recorder" "recorder" "not" "and" "ensure-displayed" "mouse-copy-destination" "mouse-insert" "ensure-displayed?:" "set-selection" "get-string" "copy" "get-start" "expr-range" "selection" "has-selection?" "range" "mouse-copy-selection" "if" "get-selected-string" "lambda" "mouse-select-copy" "process-selection-change" "char" "'char" "selection-mode" "update-caret" "previous-position" "set!" "drag-select" "kill-autoscroll" "release-capture" "get-application" "appl" "shift-down?" "shift?" "control-down?" "control?" "alt-down?" "alt?" "let" "mouse-selecting?" "when" "rest" "view")}
        {Lisp-Entry "drag-select" method #f 968 11 968 22 ("region:" "redraw-window" "invalidate-region" "if" "multi-part-region" "region" "with" "change-selection" "self" "get-delta" "sc" "dv" "dh" "receive" "get-root" "root" "get-player" "player" "selection" "range-difference" "parts" "selection-range" "range" "let*" "previous-position" "/=" "selection-line" "set!" "selection-anchor" "get-end" "cell>=?" "get-line" "get-paragraph" "paragraph-left" "get-h" "<" "and" "when" "view->text" "pos" "let" "final?" "view")}
        {Lisp-Entry "double-click" method #f 990 20 990 32 ("call-mouse-down" "previous-position" "reset-mode" "word" "'word" "selection-mode" "mouse-selecting?" "set!" "ensure-displayed?:" "set-anchor?:" "get-range" "set-selection" "outer-expr" "when" "lambda" "with-safe-explore" "end:" "start:" "self" "explorer-class" "new" "expl" "let" "select-paragraph" "paragraph-left" "get-h" "<" "get-line" "get-paragraph" "par" "view->text" "pos" "let*" "selectable?" "view-enabled?" "and" "if" "view")}
        {Lisp-Entry "middle-mouse-down" method #f 1008 20 1008 37 ("mouse-down" "paste-clipboard-string" "text" "lambda" "middle-mouse-paste" "unless" "pos")}
        {Lisp-Entry "context-menu-click" method #f 1015 21 1015 39 ("update-caret" "set-caret" "get-end" ">=" "get-start" "<" "always" "'always" "eq?" "or" "never" "'never" "neq?" "view->text" "text" "let" "acquire-focus" "selectable?" "view-enabled?" "and" "when" "move-caret" "move-caret:" "pos")}
        {Lisp-Entry "right-mouse-down" method #f 1025 20 1025 36 ("context-menu-click" "pos")}
        {Lisp-Entry "context-menu" method #f 1029 20 1029 32 ("track-popup-menu" "get-context-menu" "menu" "let" "selectable?" "view-enabled?" "and" "when" "pos")}
        {Lisp-Entry "get-context-menu" method #f 1036 20 1036 36 ("self" "get-application" "text-menu")}
        {Lisp-Entry "new-text-context-menu" method #f 1040 18 1040 39 ("layout-menu" "paste" "'paste" "cut" "'cut" "locate" "set-visible?" "editable?" "not" "when" "Text-Context-Menu" "new" "menu" "let")}
        {Lisp-Entry "new-range" method #f 1049 25 1049 34 ("Range$Cell$" "new" "end" "start")}
        {Lisp-Entry "select-paragraph" method #f 1053 11 1053 27 ("0" "Cell" "Range$Cell$" "new" "set-selection" "get-length" "len" "get-paragraph" "par" "let*" "<=" "when" "get-limit" "limit" "let" "line")}
        {Lisp-Entry "selection-line" method #f 1061 11 1061 25 ("1" "+" "paragraph-length" "0" "Cell" "Range$Cell$" "new" "=" "if" "<=" "when" "get-limit" "limit" "let" "line")}
        {Lisp-Entry "selection-range" method #f 1069 11 1069 26 ("minimum" "list" "maximum" "not" "get-range" "and" "range" "explore-whitespace?:" "outer-expr" "kind" "end:" "start:" "self" "explorer-class" "expl" "let*" "inside?" "if" "word" "char" "selection-mode" "case" "else" "get-start" "after?" "get-end" "Range$Cell$" "new" "selection-anchor" "before?" "cond" "selection-range-from-anchor" "define" "pos")}
        {Lisp-Entry "range-difference" definition #f 1098 15 1098 31 ("get-output" "Range$Cell$" "put" "List-Factory" "new" "parts" "else" ">" "<" "or" "list" "cond" "=" "and" "if" "ey" "sy" "get-end" "ex" "get-start" "sx" "let" "y" "x")}
        {Lisp-Entry "multi-part-region" method #f 1118 11 1118 28 ("or" "'or" "combine!" "and" "when" "second" "union" "let" "first" "region" "with" "2" "car" "range-region" "1" "0" "length" "case" "sc" "dv" "dh" "parts")}
        {Lisp-Entry "calculate-autoscroll-amount" method #f 1129 11 1129 38 ("Point" "new" "-" "get-height" "av" "else" "-8" "get-width" ">" "8" "0" "<" "cond" "ah" "get-default-height" "height" "get-v" "v" "get-h" "h" "get-display-size" "size" "view->display" "display" "let*" "view")}
        {Lisp-Entry "setup-autoscroll" method #f 1140 11 1140 27 ("delay:" "0.01" "autoscroll" "'autoscroll" "Pulse" "new" "set!" "autoscroll-pulse" "not" "when" "kill-autoscroll" "0" "Point" "nu=?" "if" "update-view" "scroll" "mouse-position" "drag-move-action" "autoscroll-action" "define" "amount")}
        {Lisp-Entry "kill-autoscroll" method #f 1152 11 1152 26 ("set!" "autoscroll-pulse" "close")}
        {Lisp-Entry "home-column" method #f 1162 29 1162 40 ("0" "=" "if" "get-column" "column" "let" "col" "line")}
        {Lisp-Entry "on-home" method #f 1169 19 1169 26 ("extend?:" "locked-anchor?" "or" "document?:" "get-property" "goto-home" "evt")}
        {Lisp-Entry "goto-home" method #f 1174 18 1174 27 ("process-selection-change" "ensure-scrolled-left" "Cell" "new" "start" "get-col" "home-column" "col" "get-line" "line" "backward" "'backward" "selection-tail" "pos" "let*" "set-caret" "text-beginning" "change-selection" "if" "reset-mode" "extend?" "document?")}
        {Lisp-Entry "on-end" method #f 1191 19 1191 25 ("extend?:" "locked-anchor?" "or" "document?:" "get-property" "goto-end" "evt")}
        {Lisp-Entry "goto-end" method #f 1196 18 1196 26 ("process-selection-change" "extend-selection?:" "goto-paragraph-end" "set-caret" "text-ending" "change-selection" "if" "reset-mode" "extend?" "document?")}
        {Lisp-Entry "goto-paragraph-end" method #f 1206 18 1206 36 ("set-caret" "change-selection" "if" "paragraph-length" "get-line" "Cell" "new" "end" "forward" "'forward" "selection-tail" "pos" "let*" "extend-selection?" "extend-selection?:")}
        {Lisp-Entry "on-move" method #f 1214 11 1214 18 ("arrow-move" "scroll?:" "scroll?" "word?:" "word?" "extend?:" "locked-anchor?" "or" "extend?" "direction:" "get-property" "direction" "let" "self" "invoke-handler" "arrow-press-handler" "if" "evt")}
        {Lisp-Entry "arrow-move" method #f 1224 18 1224 28 ("down-arrow-move" "down" "up-arrow-move" "up" "right-arrow-move" "right" "left-arrow-move" "left" "case" "scroll?" "word?" "extend?" "direction")}
        {Lisp-Entry "left-arrow-move" method #f 1232 29 1232 44 ("process-selection-change" "get-start" "set-caret" "empty-selection?" "backward" "'backward" "selection-tail" "move-backward" "change-selection" "if" "reset-mode" "word?" "extend?")}
        {Lisp-Entry "right-arrow-move" method #f 1242 29 1242 45 ("process-selection-change" "get-end" "set-caret" "empty-selection?" "forward" "'forward" "selection-tail" "move-forward" "change-selection" "if" "reset-mode" "word?" "extend?")}
        {Lisp-Entry "up-arrow-move" method #f 1252 29 1252 42 ("process-selection-change" "reset-selection" "unless" "-1" "move-verticaly" ">" "else" "0" "Point" "new" "scroll" "get-default-height" "height" "let" "cond" "get-col" "col" "get-line" "line" "get-start" "backward" "'backward" "selection-tail" "if" "pos" "let*" "reset-mode-on-anchor" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method #f 1267 29 1267 44 ("process-selection-change" "reset-selection" "unless" "1" "move-verticaly" "get-limit" "<" "else" "-" "0" "Point" "new" "scroll" "get-default-height" "height" "let" "cond" "get-col" "col" "get-line" "line" "get-end" "forward" "'forward" "selection-tail" "if" "pos" "let*" "reset-mode-on-anchor" "scroll?" "extend?")}
        {Lisp-Entry "on-widen-forward" method #f 1282 11 1282 27 ("Range$Cell$" "new" "set-selection" "next-word" "extend" "get-end" "end" "get-start" "start" "let" "evt")}
        {Lisp-Entry "reset-mode-on-anchor" method #f 1289 11 1289 31 ("virtual" "'virtual" "keep:" "reset-mode" "get-end" "selection-anchor" "get-start" "nu=?" "has-selection?" "and" "if")}
        {Lisp-Entry "move-verticaly" method #f 1295 11 1295 25 ("else" "set!" ">" "get-top" "Point" "view->text" "min" "move-caret" "virtual-h" "cond" "new-end" "paragraph-length" "new-len" "new-par" "+" "new-line" "forward" "'forward" "selection-tail" "get-col" "has-selection?" "if" "Cell" "new" "text->view" "get-h" "h" "get-paragraph" "par" "let*" "shift?" "direction" "inc" "col" "line")}
        {Lisp-Entry "move-caret" method #f 1311 29 1311 39 ("set-caret" "change-selection" "if" "backward" "-" "forward" "case" "0" "Point" "new" "scroll" "get-default-height" "height" "let" "cell-displayed?" "unless" "shift?" "direction" "pos")}
        {Lisp-Entry "on-backward-compound" method #f 1320 11 1320 31 ("backward-compound" "extend?:" "get-property" "extend?" "let" "evt")}
        {Lisp-Entry "on-forward-compound" method #f 1325 11 1325 30 ("forward-compound" "extend?:" "get-property" "extend?" "let" "evt")}
        {Lisp-Entry "on-upward-compound" method #f 1330 11 1330 29 ("upward-compound" "evt")}
        {Lisp-Entry "on-downward-compound" method #f 1334 11 1334 31 ("downward-compound" "evt")}
        {Lisp-Entry "backward-compound" method #f 1338 29 1338 46 ("left-arrow-move" "extend?" "extend?:")}
        {Lisp-Entry "forward-compound" method #f 1342 29 1342 45 ("right-arrow-move" "extend?" "extend?:")}
        {Lisp-Entry "upward-compound" method #f 1346 29 1346 44 ("up-arrow-move")}
        {Lisp-Entry "downward-compound" method #f 1350 29 1350 46 ("down-arrow-move")}
        {Lisp-Entry "on-transpose-word" method #f 1354 11 1354 28 ("transpose-word" "evt")}
        {Lisp-Entry "transpose-movements" method #f 1358 18 1358 37 ("set-modified?" "replace" "rs" "range-strings" "ls" "not" "or" "right" "get-range" "left" "get-end" "get-start" "set-pos" "right-expl" "self" "explorer-class" "new" "left-expl" "let" "lambda" "undoer" "with-atomic-undo" "bell" "has-selection?" "if" "backward" "forward")}
        {Lisp-Entry "transpose-word" method #f 1380 18 1380 32 ("backward-word" "get-start" "set-end" "backward-non-word" "forward-word" "get-end" "set-start" "forward-non-word" "expl" "lambda" "transpose-movements")}
        {Lisp-Entry "prior-page" method #f 1386 20 1386 30 ("set-caret" "change-selection" "if" "Cell" "dest" "display-v->row" "line" "vert" "'vert" "get-page-size" "0" "Point" "new" "scroll" "get-line" "line->display-v" "v" "get-start" "start" "let*" "shift?")}
        {Lisp-Entry "next-page" method #f 1397 20 1397 29 ("set-caret" "change-selection" "if" "Cell" "dest" "display-v->row" "line" "vert" "'vert" "get-page-size" "-" "0" "Point" "new" "scroll" "get-line" "line->display-v" "v" "get-start" "start" "let*" "shift?")}
        {Lisp-Entry "line->display-v" method #f 1408 11 1408 26 ("line->view" "v" "position" "get-v" "-" "top" "let" "line")}
        {Lisp-Entry "display-v->row" method #f 1414 11 1414 25 ("get-line" "view->text" "text" "+" "left-padding" "Point" "new" "pos" "position" "get-v" "-" "top" "let*" "v")}
        {Lisp-Entry "selection-tail" method #f 1421 11 1421 25 ("forward" "backward" "case" "else" "get-start" "before?" "get-end" "selection-anchor" "after?" "cond" "direction")}
        {Lisp-Entry "on-remove-spaces" method #f 1434 19 1434 35 ("get-property" "keep:" "get-caret" "remove-spaces" "bell" "empty-selection?" "not" "if" "evt")}
        {Lisp-Entry "remove-spaces" method #f 1440 18 1440 31 ("if" "one" "list" "none" "case" "replace" "1" "get-col" "+" "get-end" "get-start" "get-line" "=" "and" "one-left?" "get-range" "range" "let*" "forward-whitespaces" "backward-whitespaces" "end:" "start:" "self" "explorer-class" "new" "expl" "let" "one/none" "'one/none" "keep" "keep:" "pos")}
        {Lisp-Entry "on-display-info" method #f 1453 19 1453 34 ("info-message" "user-message" "evt")}
        {Lisp-Entry "info-message" method #f 1457 29 1457 41 ("get-col" "1" "get-line" "+" "format" "get-end" "end" "get-start" "start" "let")}
        {Lisp-Entry "on-user-code" method #f 1465 19 1465 31 ("self" "text-macro" "get-profile" "profile" "get-application" "appl" "let*" "evt")}
        {Lisp-Entry "range-region" method #f 1476 11 1476 23 ("and" "'and" "clipper" "when" "get-root-clipper" "root-clipper" "or" "'or" "combine!" "left-padding" "range-region" "sub" "with" "end" "start" "paragraph" "lambda" "for-each-logical-range" "keep-rectangles" "Region" "new" "region" "get-root" "root" "let" "bottom" "bottom:" "top" "top:" "sc" "dv" "dh" "range")}
        {Lisp-Entry "line-range-rect" method #f 1491 11 1491 26 ("get-default-height" "get-line-at" "get-height" "+" "get-width" "1" "max" "if" "line->view" "col->view" "get-h" "Rect" "new" "get-paragraph" "paragraph" "let" "end" "start" "line")}
        {Lisp-Entry "block-rect" method #f 1500 11 1500 21 ("get-width" "line->view" "left-padding" "Rect" "new" "end" "start")}
        {Lisp-Entry "invalidate-line" method #f 1508 18 1508 33 ("0" "line-range-rect" "invalidate-rect" "line")}
        {Lisp-Entry "invalidate-range" method #f 1512 11 1512 27 ("player" "invalidate-region" "range-region" "region" "with" "self" "get-delta" "sc" "dv" "dh" "receive" "get-root" "root" "let" "view-visible?" "when" "range")}
        {Lisp-Entry "text-selection-region" method #f 1521 11 1521 32 ("bottom:" "top:" "selection" "range-region" "bottom" "top" "sc" "dv" "dh")}
        {Lisp-Entry "selection-region-all" method #f 1525 11 1525 31 ("get-display-height" "0" "text-selection-region" "sc" "dv" "dh")}
        {Lisp-Entry "get-selection-color" method #f 1529 29 1529 48 ("active-selection-color" "completion-color" "completion-active?" "if")}
        {Lisp-Entry "get-inactive-selection-color" method #f 1535 29 1535 57 ("inactive-selection-color")}
        {Lisp-Entry "for-each-logical-range" method #f 1539 11 1539 33 ("else" "cond" "paragraph" "to" "from" "line" "for" "loop" "limit" "beginning" "get-col" "get-paragraph" "get-line" "=" "if" "/=" "when" "get-end" "end" "get-start" "start" "let" "proc" "range")}
        {Lisp-Entry "for-each-range" method #f 1554 11 1554 25 ("get-length" "0" "or" "end" "start" "paragraph" "lambda" "for-each-logical-range" "proc" "range")}
        {Lisp-Entry "make-tabs" method #f 1569 11 1569 20 ("512" "32" "0" "make-tabs-from")}
        {Lisp-Entry "make-tabs-from" method #f 1573 18 1573 32 ("0" "naturals" "increase!" "prog1" "n" "lambda" "map" "stop" "let" "number" "tab-size" "from")}
        {Lisp-Entry "can-undo?" method #f 1586 20 1586 29 ("undoer" "can-undo?")}
        {Lisp-Entry "can-redo?" method #f 1590 20 1590 29 ("undoer" "can-redo?")}
        {Lisp-Entry "can-cut?" method #f 1594 20 1594 28 ("has-selection?")}
        {Lisp-Entry "can-copy?" method #f 1598 20 1598 29 ("has-selection?")}
        {Lisp-Entry "can-paste?" method #f 1602 20 1602 30 ()}
        {Lisp-Entry "can-delete?" method #f 1606 20 1606 31 ("has-selection?")}
        {Lisp-Entry "can-select-all?" method #f 1610 20 1610 35 ()}
        {Lisp-Entry "undo" method #f 1614 20 1614 24 ("get-application" "update-focus-actions" "undoer" "undo")}
        {Lisp-Entry "redo" method #f 1619 20 1619 24 ("get-application" "update-focus-actions" "undoer" "redo")}
        {Lisp-Entry "cut-selection" method #f 1624 20 1624 33 ("delete-selection" "copy-selection")}
        {Lisp-Entry "copy-selection" method #f 1629 20 1629 34 ("selection-lines" "join-lines" "set-clipboard-text" "get-application" "add-clipboard" "bell" "empty-selection?" "if")}
        {Lisp-Entry "paste-clipboard" method #f 1636 20 1636 35 ("paste-clipboard-string" "when" "get-clipboard-text" "text" "let")}
        {Lisp-Entry "paste-clipboard-string" method #f 1642 18 1642 40 ("split-lines" "replace-selection" "string")}
        {Lisp-Entry "on-paste&stay" method #f 1646 19 1646 32 ("paste&stay" "evt")}
        {Lisp-Entry "on-paste&next" method #f 1650 19 1650 32 ("down-arrow-move" "paste&stay" "evt")}
        {Lisp-Entry "paste&stay" method #f 1655 11 1655 21 ("set-caret" "paste-clipboard" "get-start" "pos" "let")}
        {Lisp-Entry "delete-selection" method #f 1661 20 1661 36 ("list" "replace-selection")}
        {Lisp-Entry "select-all" method #f 1665 20 1665 30 ("buffer-selection" "set-selection" "rest")}
        {Lisp-Entry "clear-all" method #f 1669 18 1669 27 ("delete-selection" "select-all")}
        {Lisp-Entry "on-set-mark" method #f 1679 19 1679 30 ("user-message" "selection" "set-mark" "evt")}
        {Lisp-Entry "on-jump-mark" method #f 1684 19 1684 31 ("get-selection" "set-mark" "new-mark" "let" "get-end" "maximum" "selection-anchor" "get-start" "list" "minimum" "Range$Cell$" "new" "set-selection" "extend?:" "get-property" "locked-anchor?" "or" "if" "mark" "when" "evt")}
        {Lisp-Entry "empty-selection" method #f 1703 20 1703 35 ("text-beginning" "Range$Cell$" "new")}
        {Lisp-Entry "buffer-selection" method #f 1707 11 1707 27 ("text-ending" "text-beginning" "Range$Cell$" "new")}
        {Lisp-Entry "line-selected?" method #f 1711 20 1711 34 ("line")}
        {Lisp-Entry "text-beginning" method #f 1715 18 1715 32 ("0" "Cell" "new")}
        {Lisp-Entry "text-ending" method #f 1719 18 1719 29 ("paragraph-length" "Cell" "new" "get-limit" "limit" "let")}
        {Lisp-Entry "text-range" method #f 1724 18 1724 28 ("text-ending" "text-beginning" "Range$Cell$" "new")}
        {Lisp-Entry "text-empty?" method #f 1728 18 1728 29 ("text-ending" "text-beginning" "=")}
        {Lisp-Entry "get-start" method #f 1732 25 1732 34 ("selection" "cast" "get-start")}
        {Lisp-Entry "get-end" method #f 1736 25 1736 32 ("selection" "cast" "get-end")}
        {Lisp-Entry "get-selection" method #f 1740 27 1740 40 ("selection")}
        {Lisp-Entry "set-selection" method #f 1744 20 1744 33 ("selection-change" "get-application" "update-focus-actions" "self" "get-mouse-in" "mouse-down?" "unless" "center-caret" "'center-caret" "eq?" "center?:" "ensure-displayed" "mouse-selecting?" "update-caret" "update-selection" "set-selection-anchor" "selection-anchor" "not" "or" "selection" "cast" "/=" "and" "when" "validate-range" "set-anchor?" "set-anchor?:" "ensure-displayed?" "ensure-displayed?:" "range")}
        {Lisp-Entry "update-selection" method #f 1758 18 1758 34 ("when" "player" "invalidate-region" "xor" "'xor" "combine!" "begin" "and" "new" "selection-region-all" "old" "with" "self" "get-delta" "sc" "dv" "dh" "receive" "get-root" "root" "let" "selection" "set!" "view-visible?" "not" "if" "range")}
        {Lisp-Entry "reset-selection" method #f 1776 18 1776 33 ("set-anchor?:" "set-selection" "Range$Cell$" "new" "range" "let" "pos")}
        {Lisp-Entry "fit-range" method #f 1781 11 1781 20 ("Range$Cell$" "new" "or" "e" ">" "when" "s" "get-end" "end" "get-start" "start" "text-ending" "ending" "let*" "range")}
        {Lisp-Entry "fit-selection" method #f 1791 11 1791 24 ("set-selection" "when" "get-selection" "fit-range" "range" "let")}
        {Lisp-Entry "fit-anchor" method #f 1797 11 1797 21 ("set!" "when" "selection-anchor" "fit-range" "range" "let")}
        {Lisp-Entry "get-selection-anchor" method #f 1803 18 1803 38 ("selection-anchor")}
        {Lisp-Entry "set-selection-anchor" method #f 1807 18 1807 38 ("copy" "selection-anchor" "set!" "range")}
        {Lisp-Entry "lock-anchor" method #f 1811 18 1811 29 ("locked-anchor?" "set!")}
        {Lisp-Entry "unlock-anchor" method #f 1815 18 1815 31 ("locked-anchor?" "set!")}
        {Lisp-Entry "change-selection" method #f 1820 18 1820 34 ("set-anchor?:" "selection-range" "set-selection" "apply" "when" "others" "set-anchor?" "bind-keywords" "rest" "pos")}
        {Lisp-Entry "fit-caret" method #f 1825 11 1825 20 (">" "paragraph-length" "len" "0" "1" "-" "Cell" "new" "set!" ">=" "if" "get-paragraphs" "cardinality" "count" "get-col" "col" "get-line" "line" "let" "caret-position" "when")}
        {Lisp-Entry "get-caret" method #f 1837 18 1837 27 ("get-start")}
        {Lisp-Entry "set-caret" method #f 1841 18 1841 27 ("Cell" "new" "reset-selection" "=" "and" "if" "get-length" "get-col" "col" "get-paragraph" "par" "get-limit" "get-line" "0" "max" "min" "line" "let*" "when" "pos")}
        {Lisp-Entry "selection-change" method #f 1853 29 1853 45 ()}
        {Lisp-Entry "has-selection?" method #f 1857 18 1857 32 ("get-end" "get-start" "/=")}
        {Lisp-Entry "empty-selection?" method #f 1861 18 1861 34 ("get-end" "get-start" "=")}
        {Lisp-Entry "at-beginning?" method #f 1865 18 1865 31 ("text-beginning" "get-end" "get-start" "=" "and")}
        {Lisp-Entry "at-end?" method #f 1870 18 1870 25 ("text-ending" "get-end" "get-start" "=" "and")}
        {Lisp-Entry "at-line-start?" method #f 1875 18 1875 32 ("0" "get-start" "get-col" "=")}
        {Lisp-Entry "selected-lines" method #f 1879 18 1879 32 ("+" "naturals" "1" "get-line" "-" "0" "get-col" "=" "if" "end-line" "get-end" "end" "get-start" "start" "let*")}
        {Lisp-Entry "invalidate-selection" method #f 1886 20 1886 40 ("invalidate-range" "sel")}
        {Lisp-Entry "selection-region" method #f 1890 20 1890 36 ("self" "range-region" "sc" "dv" "dh" "sel")}
        {Lisp-Entry "get-char" method #f 1894 18 1894 26 ("element" "cardinality" "<" "if" "get-paragraph" "get-string" "string" "get-col" "col" "get-line" "line" "let" "pos")}
        {Lisp-Entry "get-string" method #f 1903 18 1903 28 ("range-strings" "join-lines" "range")}
        {Lisp-Entry "next!" method #f 1907 18 1907 23 ("else" "0" "set-col" "increase-line" "get-limit" "<" "increase-col" "get-line" "paragraph-length" "get-col" "/=" "cond" "pos")}
        {Lisp-Entry "previous!" method #f 1919 18 1919 27 ("else" "paragraph-length" "set-col" "increase-line" "get-line" ">" "-1" "increase-col" "0" "get-col" "/=" "cond" "pos")}
        {Lisp-Entry "next-cell" method #f 1931 18 1931 27 ("next!" "when" "copy" "cell" "let" "pos")}
        {Lisp-Entry "previous-cell" method #f 1937 18 1937 31 ("previous!" "when" "copy" "cell" "let" "pos")}
        {Lisp-Entry "selection-lines" method #f 1943 11 1943 26 ("selection" "range-strings")}
        {Lisp-Entry "get-selected-string" method #f 1947 18 1947 37 ("get-selection" "get-string" "has-selection?" "when")}
        {Lisp-Entry "next-pos" method #f 1952 18 1952 26 ("else" "1" "-" "next!" "0" "<=" "cond" "iterate" "copy" "let" "offset" "pos")}
        {Lisp-Entry "previous-pos" method #f 1963 18 1963 30 ("else" "1" "-" "previous!" "0" "<=" "cond" "iterate" "copy" "let" "offset" "pos")}
        {Lisp-Entry "get-column" method #f 1974 18 1974 28 ("get-col" "increase!" "get-char" "memq?" "while" "0" "Cell" "new" "pos" "let" "line")}
        {Lisp-Entry "current-name" method #f 1981 26 1981 38 ("get-marked" "outer-expr" "when" "get-selection" "range:" "self" "explorer-class" "new" "expl" "let")}
        {Lisp-Entry "on-goto-line" method #f 1987 11 1987 23 ("parse-integer" "-" "goto-line" "->string" "initial-value:" "prefix:" "title:" "request-string" "string" "1" "get-line" "+" "line" "get-start" "start" "let*" "evt")}
        {Lisp-Entry "goto-line" method #f 1994 18 1994 27 ("+" "else" "paragraph-length" "let" "get-limit" ">=" "1" "Cell" "Range$Cell$" "new" "set-selection" "0" "<" "cond" "line")}
        {Lisp-Entry "added-update-selection" method #f 2004 20 2004 42 ("count" "line")}
        {Lisp-Entry "removed-update-selection" method #f 2008 20 2008 44 ("count" "line")}
        {Lisp-Entry "on-lock-anchor" method #f 2015 19 2015 33 ("user-message" "lock-anchor" "evt")}
        {Lisp-Entry "on-unlock-anchor" method #f 2020 19 2020 35 ("user-message" "unlock-anchor" "evt")}
        {Lisp-Entry "on-toggle-lock-anchor" method #f 2025 19 2025 40 ("on-lock-anchor" "on-unlock-anchor" "locked-anchor?" "if" "evt")}
        {Lisp-Entry "add-highlight" method #f 2036 18 2036 31 ("cons" "highlights" "set!" "highlight")}
        {Lisp-Entry "remove-highlight" method #f 2040 18 2040 34 ("remove!" "highlights" "set!" "highlight")}
        {Lisp-Entry "remove-all-highlights" method #f 2044 18 2044 39 ("invalidate-view" "highlights" "set!")}
        {Lisp-Entry "invalidate-highlight" method #f 2049 18 2049 38 ("get-range" "restrict-range" "invalidate-range" "highlight")}
        {Lisp-Entry "invalidate-non-showed-highlights" method #f 2053 18 2053 50 ("highlights" "invalidate-highlight" "get-show-unfocused?" "not" "when" "highlight" "lambda" "for-each")}
        {Lisp-Entry "layout-scrollee-patch" method #f 2066 20 2066 41 ("update-displayed")}
        {Lisp-Entry "scrollee-width" method #f 2075 20 2075 34 ("4000" "calculate-scrollee-width" "left-padding" "+" "dynamic-scrollee-width?" "width" "let" "visible-width" "get-display-width" "max" "fit-in-scroller?" "scroller" "and" "wrap-width" "or" "wrap?" "if")}
        {Lisp-Entry "scrollee-content-width" method #f 2088 20 2088 42 ("calculate-scrollee-width" "left-padding" "+")}
        {Lisp-Entry "dynamic-scrollee-width?" method #f 2093 29 2093 52 ("16" "visible-count" "<=")}
        {Lisp-Entry "calculate-scrollee-width" method #f 2097 11 2097 35 ("set!" ">" "when" "compute-width" "paragraph-width" "paragraph" "line" "lambda" "for-each-paragraph" "0" "width" "let")}
        {Lisp-Entry "invalidate-update" method #f 2112 20 2112 37 ("wrap-content" "nextmethod")}
        {Lisp-Entry "get-length" method #f 2122 18 2122 28 ("get-paragraphs" "cardinality")}
        {Lisp-Entry "get-limit" method #f 2126 18 2126 27 ("1" "get-length" "-")}
        {Lisp-Entry "get-paragraph" method #f 2130 18 2130 31 ("get-paragraphs" "element" "line")}
        {Lisp-Entry "paragraph-string" method #f 2134 18 2134 34 ("get-paragraph" "get-string" "line")}
        {Lisp-Entry "paragraph-length" method #f 2138 18 2138 34 ("paragraph-string" "cardinality" "line")}
        {Lisp-Entry "paragraph->string" method #f 2142 11 2142 28 ("get-string" "paragraph")}
        {Lisp-Entry "first-line" method #f 2146 18 2146 28 ("0" "paragraph-string")}
        {Lisp-Entry "get-print-area" method #f 2155 20 2155 34 ("scrollee-height" "800" "0" "Rect" "new" "context")}
        {Lisp-Entry "paginate" method #f 2159 20 2159 28 ("get-output" "get-keep-with-next?" "empty-string?" "not" "Rect" "put" "or" "effective-bottom" "let" "set!" "<=" "bot" "get-height" "height" "get-format" "format" "get-string" "string" "paragraph-top" "<" ">=" "and" "when" "paragraph" "line" "lambda" "for-each-paragraph" "together" "bottom" "top" "page" "List-Factory" "new" "pages" "1" "get-limit" "get-end" "+" "end" "0" "get-start" "get-line" "if" "start" "has-selection?" "selected?" "let*" "page-height" "page-width")}
        {Lisp-Entry "setup-printing" method #f 2190 20 2190 34 ("nextmethod" ":wrap-width" "cons" "wrap-content" "layout-scrollee" "50" "wrap-patch" "800" "set!" "wrap-width" "width" "let")}
        {Lisp-Entry "restore-printing" method #f 2201 20 2201 36 ("wrap-content" "layout-scrollee" "wrap-patch" ":wrap-width" "getf" "wrap-width" "set!" "nextmethod" "preserved")}
        {Lisp-Entry "draw-enabled?" method #f 2214 29 2214 42 ("view-enabled?")}
        {Lisp-Entry "get-drawing-background" method #f 2218 20 2218 42 ("nextmethod" "Medium" "name:" "Color" "draw-enabled?" "not" "if" "context")}
        {Lisp-Entry "draw-outline" method #f 2224 20 2224 32 ("draw-caret" "nextmethod" "draw-selection" "unless" "printing?:" "getf" "printing?" "bottom" "top" "highlights" "tabs" "get-v" "get-h" "draw-style" "draw-enabled?" "enabled?" "get-left-margin" "left" "get-format" "format" "get-height" "height" "cdr" "pos" "car" "line" "text->view-extended" "info" "get-col" "get-string" "subseq" "target" "get-line" "get-paragraph" "paragraph" "get-end" "end" "get-start" "start" "let*" "get-style" "style" "get-range" "range" "get-show-unfocused?" "or" "when" "highlight" "lambda" "for-each" "has-focus?" "focus?" "let" "draw-highlights" "define" "sc?" "sc" "sv" "sh" "lv" "lh" "clipper" "context" "surface")}
        {Lisp-Entry "draw-selection" method #f 2256 21 2256 35 ("get-inactive-selection-color" "get-selection-color" "if" "fill-region" "1.0" "0.0" "text-selection-region" "region" "with" "show-unfocused-selection?" "has-focus?" "or" "when" "bottom" "top" "surface")}
        {Lisp-Entry "draw-caret" method #f 2266 21 2266 31 ("*" "fxround" "Rect" "new" "scaled" "if" "0" "get-caret" "caret-rect" "get-bottom" "get-right" "get-top" "get-left" "line" "1" "set-line-width" "caret-color" "set-color" "rect" "lambda" "proc" "let" "alt-down?" "mouse-down?" "not" "or" "empty-selection?" "caret-visible?" "and" "when" "sc?" "sc" "surface")}
        {Lisp-Entry "ensure-displayed" method #f 2290 20 2290 36 ("ensure-range-displayed" "apply" "selection" "when" "rest")}
        {Lisp-Entry "ensure-cell-displayed" method #f 2295 18 2295 39 ("get-scroll-context" "scroll-needed" "scroll" "get-height-at" "0" "Point" "new" "+" "end" "text->view" "start" "let*" "pos")}
        {Lisp-Entry "ensure-range-displayed" method #f 2301 18 2301 40 ("get-scroll-context" "0" "Point" "new" "+" "text->view" "scroll-needed" "apply" "scroll" "get-height-at" "end-height" "get-end" "end" "get-start" "start" "let*" "player" "not" "update-locked?" "or" "unless" "rest" "range")}
        {Lisp-Entry "ensure-scrolled-left" method #f 2309 18 2309 38 ("Point" "new" "scroll" "-" "<" "get-end" "text->view" "end" "get-display-h" "+" "tail" "*" "fxround" "if" "get-scroll-context" "cdr" "context" "get-display-width" "size" "let*" "get-position" "get-h" "0" "/=" "when" "player" "not" "update-locked?" "or" "unless")}
        {Lisp-Entry "cell-displayed?" method #f 2321 18 2321 33 ("scroll-needed" "=" "get-height-at" "0" "Point" "new" "+" "end" "text->view" "start" "let*" "pos")}
        {Lisp-Entry "on-center-caret" method #f 2327 11 2327 26 ("center-caret" "evt")}
        {Lisp-Entry "on-top-caret" method #f 2331 11 2331 23 ("top-caret" "evt")}
        {Lisp-Entry "center-caret" method #f 2335 18 2335 30 ("0" "Point" "new" "scroll-to" "2" "fxround/" "half" "let" ">=" "if" "top" "get-display-height" "height" "-" "size" "get-end" "get-top" "end" "get-start" "get-line" "get-row" "get-bottom" "start" "let*")}
        {Lisp-Entry "center-undisplayed-caret" method #f 2347 18 2347 42 ("center-caret" "get-end" "get-start" "cell-displayed?" "not" "or" "when")}
        {Lisp-Entry "top-caret" method #f 2353 18 2353 27 ("-" "0" "Point" "new" "scroll-to" "get-start" "get-line" "get-row" "get-top" "start" "let")}
        {Lisp-Entry "next-word" method #f 2363 18 2363 27 ("get-end" "not" "c" "lambda" "forward-until" "alphanumeric?" "or" "test" "end:" "start:" "self" "Text-Explorer" "new" "expl" "let" "constituent-test" "constituent-test:" "pos")}
        {Lisp-Entry "previous-word" method #f 2371 18 2371 31 ("get-start" "not" "c" "lambda" "backward-until" "alphanumeric?" "or" "test" "end:" "start:" "self" "Text-Explorer" "new" "expl" "let" "constituent-test" "constituent-test:" "pos")}
        {Lisp-Entry "get-constituent-test" method #f 2384 26 2384 46 ("syntax" "get-constituent-test")}
        {Lisp-Entry "text-constituent?" method #f 2388 26 2388 43 ("syntax" "text-constituent?" "char")}
        {Lisp-Entry "move-forward" method #f 2397 18 2397 30 ("next-cell" "next-word" "if" "when" "word?" "pos")}
        {Lisp-Entry "move-backward" method #f 2402 18 2402 31 ("previous-cell" "previous-word" "if" "when" "word?" "pos")}
        {Lisp-Entry "insert-char" method #f 2412 18 2412 29 ("string" "insert-string" "c")}
        {Lisp-Entry "insert-string" method #f 2416 18 2416 31 ("split-lines" "replace-selection" "str")}
        {Lisp-Entry "insert-styled" method #f 2420 18 2420 31 ("Range$Cell$" "new" "set-style" "insert-string" "get-style" "else" "default-style" "not" "Style" "is?" "cond" "get-start" "start" "let" "style" "string")}
        {Lisp-Entry "insert-line" method #f 2427 18 2427 29 ("list" "if" "replace-selection" "proper?" "line")}
        {Lisp-Entry "insert-bulleted-line" method #f 2431 18 2431 38 ("toggle-bulleted" "insert-line" "get-start" "get-line" "let" "line")}
        {Lisp-Entry "insert-newline" method #f 2437 18 2437 32 ("insert-string" "end-completion")}
        {Lisp-Entry "insert-hyperlink" method #f 2442 18 2442 34 ("insert-styled" "Color" "color:" "Hyperlink-Style" "new" "style" "Hyperlink" "name:" "Font" "or" "let*" "action" "action:" "anchor" "anchor:" "font" "font:" "string")}
        {Lisp-Entry "insert-image" method #f 2448 18 2448 30 ("insert-styled" "moniker:" "Image-Style" "new" "style" "let" "moniker")}
        {Lisp-Entry "insert-view" method #f 2453 18 2453 29 ("insert-styled" "view:" "View-Style" "new" "style" "let" "set-parent" "get-line" "get-paragraph" "paragraph" "get-end" "end" "instantiate" "View" "is?" "if" "view" "let*" "view/form")}
        {Lisp-Entry "create-table" method #f 2467 18 2467 30 ("header" "'header" "set-shown?" "set-size" "'tree" "locate" "Table-Border" "border" "0" "naturals" "children:" "row-height:" "add-row" "Formatted-Text-View" "new" "map" "children" "line" "cast" "quotient" "row-height" "16" "increase!" "not" "get-height" "height" "when" "setup-rows" "class:" "add-column" "" "apply" "set!" ":display-images?" "list" "others" "width:" "width" "title:" "getf" "title" "Tree-Label-Column" "Tree-Node-Column" "if" "class" "and" "node?" "let*" "column" "lambda" "for-each" "first?" "let" "tree" "setup-columns" "define" "row-count" "row-count:" "columns" "columns:" "node-column?" "node-column?:" "header?" "header?:" "size" "size:")}
        {Lisp-Entry "insert-table" method #f 2505 18 2505 30 ("insert-view" "create-table" "apply" "table" "let" "rest")}
        {Lisp-Entry "insert-table-of-content" method #f 2516 26 2516 49 ()}
        {Lisp-Entry "backspace" method #f 2525 18 2525 27 ("get-end" "get-start" "move-backward" "Range$Cell$" "new" "delete-range" "delete-selection" "has-selection?" "if" "at-beginning?" "unless" "write-allowed?" "when" "word?")}
        {Lisp-Entry "delete-char" method #f 2533 26 2533 37 ("delete-action")}
        {Lisp-Entry "delete-word" method #f 2537 26 2537 37 ("delete-action")}
        {Lisp-Entry "delete-action" method #f 2541 18 2541 31 ("get-end" "move-forward" "get-start" "Range$Cell$" "new" "delete-range" "delete-selection" "has-selection?" "if" "at-end?" "unless" "write-allowed?" "when" "word?")}
        {Lisp-Entry "delete-range" method #f 2549 18 2549 30 ("list" "replace" "range")}
        {Lisp-Entry "replace-selection" method #f 2553 18 2553 35 ("selection" "replace" "strings")}
        {Lisp-Entry "replace" method #f 2557 18 2557 25 ("update-caret" "set-caret" "when" "replace-text" "caret" "let" "strings" "range")}
        {Lisp-Entry "replace-text" method #f 2564 21 2564 33 ("update-focus-actions" "call-content-change" "set-selection" "replace" "set-end" "delete-range" "undoer" "register-undo" "Range$Cell$" "new" "let" "contiguous-undo-range" "not" "if" "set-modified?" "+" "-" "recolorize-text" "fit-caret" "fit-anchor" "fit-selection" "first-displayed-line" "get-paragraph" "first-displayed" "set!" "update-displayed" "car" "cast" "cardinality" "1" "=" "and" "inserting-single-char?" "selection" "copy" "old-selection" "get-application" "appl" "replace-range" "caret" "outline" "get-first-displayed-line" "get-line" "<=" "ufd?" "range-strings" "old" "length" "count" "get-end" "end" "get-start" "start" "let*" "lambda" "without-caret" "write-allowed?" "when" "strings" "range")}
        {Lisp-Entry "replace-range" method #f 2610 11 2610 24 ("with-update-locked" "<=" "and" "count" "make-string-paragraph" "map" "get-format" "last-format" "get-row-height" "set!" "do" "to" "from" "n" "for" "get-row" "row" "with" "loop" "visible-height" "visible-count" "increase!" "after" "wrap-paragraph-lowlevel" "lambda" "for-each" "car" "paragraph-height" "cdr" "null?" "sum" "iterate" "paragraphs-height" "invalidate-paragraph" "scroll-view" "get-height" "get-width" "Rect" "rect" "get-size" "size" "/=" "layout-scrollee" "dynamic-scrollee-width?" "wrap?" "or" "when" "wrap-paragraph" "delta" "let" "invalidate-replacements" "replace-ending" "replace-beginning" "get-next" "root-row" "replace-sons" "=" "if" "caret-col" "-1" "caret-line" "last" "cast" "last-length" "get-length" "last-runs" "get-col" "0" "range-runs" "first-runs" "strings->paragraphs" "paragraphs" "bottom" "last-par" "first-par" "range-height" "before" "length" "1" "-" "replaced" "el" "get-line" "sl" "get-end" "get-start" "replace-paragraphs" "+" "Cell" "new" "invalidate-replacement" "replace-range" "get-bottom" "top" "cardinality" "inserted" "get-paragraph" "paragraph" "let*" "string" "end" "start" "line" "replace-paragraph" "define" "strings" "range")}
        {Lisp-Entry "invalidate-paragraph" method #f 2704 11 2704 31 ("invalidate-drawing" "paragraph")}
        {Lisp-Entry "colorize-syntax" method #f 2713 29 2713 44 ("rest")}
        {Lisp-Entry "colorize-comments" method #f 2717 29 2717 46 ("rest")}
        {Lisp-Entry "colorize-declarations" method #f 2721 29 2721 50 ("rest")}
        {Lisp-Entry "recolorize-text" method #f 2725 29 2725 44 ("end-line" "start")}
        {Lisp-Entry "get-text" method #f 2734 18 2734 26 ("text")}
        {Lisp-Entry "set-text" method #f 2738 18 2738 26 ("text" "set!" "parse-text-content" "set-content" "value")}
        {Lisp-Entry "parse-text-content" method #f 2743 11 2743 29 ("class-of" "category-identifier" "error" "else" "parse-jml-content" "JML-Node" "parse-formatted-content" "Formatted-Text-View" "self" "is?" "null/pair?" "and" "parse-string-content" "string?" "empty-content" "not" "cond" "content")}
        {Lisp-Entry "parse-string-content" method #f 2756 11 2756 31 ("split-lines" "paragraphs:" "Text" "new" "content")}
        {Lisp-Entry "parse-formatted-content" method #f 2760 11 2760 34 ("paragraphs:" "styles:" "get-output" "formats:" "Formatted-Text" "map" "paragraphs" "put" "styles" "List-Factory" "formats" "action:" "Hyperlink" "Hyperlink-Small" "name:" "Hyperlink-Style" "scaled?:" "scaling:" "eq?" "peek" "next" "scaling" "moniker" "moniker:" "resource:" "portfolio:" "Image-Style" "get-application" "get-images-portfolio" "portfolio" "image" "image:" "set-font" "Font" "font" "font:" "set-highlight" "highlight" "highlight:" "set-color" "Color" "class-of" "dispatch" "symbol?" "color" "color:" "new-hyperlink-style" "action" ":hyperlink" "get-style" "name" "style:" "Default" "'Default" "base:" "Text-Style" "add-styling" "style" "string" "error" "parse-run" "pair?" "cond" "run" "accumulate" "unget" "else" "32" "*" "get-left-margin" "+" "n" "indent:" "16" "set-left-margin" "set-bulleted?" ":bulleted" "case" "get-next" "target" "let" "done?" "and" "while" "out?" "Format" "new" "set!" "not" "when" "proc" "lambda" "add-formatting" "parse-runs" "parse-format" "format" "iterate-sequence" "scan" "let*" "list" "cons" "string?" "if" "intern-style" "intern-format" "par" "parse-paragraph" "define" "content")}
        {Lisp-Entry "formatted-start-delimiter" definition #f 2879 24 2879 49 ()}
        {Lisp-Entry "formatted-end-delimiter" definition #f 2882 24 2882 47 ()}
        {Lisp-Entry "insert-formatted-line" method #f 2886 26 2886 47 ("process-formatted" "call-with-input-string" "line")}
        {Lisp-Entry "process-formatted" method #f 2891 21 2891 38 ("else" "process-formatted-directive" "read-formatted-parameter" "directive" "cond" "not" "and" "when" "process" "read-char" "write-char" "Output" "'Output" "get-output-string" "insert-styled" "formatted-end-delimiter" "formatted-start-delimiter" "eqv?" "eof-object?" "or" "if" "peek-char" "c" "iterate" "open-output-string" "output" "let" "process-string" "define" "input")}
        {Lisp-Entry "with-formatted-range" method #f 2918 11 2918 31 ("Range$Cell$" "new" "end" "error" "eof-object?" "if" "read-char" "end-char" "process-formatted" "get-start" "start" "let" "proc" "input")}
        {Lisp-Entry "process-formatted-directive" method #f 2928 29 2928 56 ("error" "else" "registered-font" "set-text-font" "font" "registered-color" "set-text-color" "read-formatted-parameter" "let" "color" "toggle-underline" "underline" "toggle-italic" "italic" "toggle-bold" "range" "lambda" "with-formatted-range" "bold" "at-line-start?" "unless" "$" "insert-newline" "%" "case" "input" "directive")}
        {Lisp-Entry "read-formatted-parameter" definition #f 2961 15 2961 39 ("read-char" "read" "prog1" "input")}
        {Lisp-Entry "parse-jml-content" method #f 2992 11 2992 28 ("paragraphs:" "styles:" "get-output" "formats:" "Formatted-Text" "par" "paragraphs" "put" "styles" "List-Factory" "formats" "Color" "class-of" "dispatch" "get-properties" "parse-color" "set-color" "color" "set-font-weight" "font-weight" "value" "property" "for-each-property" "Default" "'Default" "base:" "Text-Style" "first-child" "string" "parse-style-tag" "style" "get-children" "parse-p-run" "map" "16" "set-left-margin" "set-bulleted?" "bulleted?" "'bulleted?" "get-property" "Format" "new" "set!" "not" "when" "proc" "lambda" "add-formatting" "let*" "parse-p-runs" "parse-p-format" "format" "error" "else" "parse-p-tag" "p" "case" "get-tag" "tag" "let" "get-text" "list" "cons" "JML-Text" "is?" "if" "intern-style" "intern-format" "parse-jml-paragraph" "define" "node")}
        {Lisp-Entry "get-text-content" method #f 3070 18 3070 34 ("text-content")}
        {Lisp-Entry "set-text-content" method #f 3074 18 3074 34 ("set-content" "text-content" "set!" "value")}
        {Lisp-Entry "patch-formatted-bug" method #f 3084 18 3084 37 ("get-runs" "get-style" "intern-style" "set-style" "run" "for-each" "get-format" "intern-format" "set-format" "paragraph" "line" "lambda" "for-each-paragraph" "styles" "formats" "empty-content")}
        {Lisp-Entry "read-formatted" method #f 3095 21 3095 35 ("read" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "moniker")}
        {Lisp-Entry "save-formatted" method #f 3100 21 3100 35 ("print-formatted" "printer" "lambda" "get-eol-encoding" "eol-encoding:" "parse" "path:" "list" "call-with-output-file" "moniker")}
        {Lisp-Entry "print-formatted" method #f 3106 21 3106 36 ("get-style" "style-reference" "get-string" "run" "get-format" "format-reference" "iterate" "range-paragraphs" "get-paragraphs" "paragraphs" "collect-persistent" "range-runs" "get-length" "end" "0" "get-col" "start" "get-end" "last?" "get-start" "get-line" "get-paragraph" "eq?" "get-runs" "not" "paragraph" "range-paragraph-runs" "style" "styles" "print-styles" "set!" "if" "fmt" "lambda" "for-each" "first?" "let" "format" "formats" "print-formats" "define" "range" "printer")}
        {Lisp-Entry "get-formatted-content" method #f 3164 18 3164 39 ("paragraphs:" "styles:" "List" "coerce" "formats:" "Formatted-Text" "get-output" "get-runs" "get-style" "style-reference" "get-string" "list" "run" "map" "get-format" "format-reference" "cons" "put" "paragraph" "line" "lambda" "for-each-paragraph" "List-Factory" "new" "fact" "get-formatted-paragraphs" "define" "styles" "collect-persistent" "formats" "let")}
        {Lisp-Entry "set-formatted-content" method #f 3183 18 3183 39 ("error" "else" "set-unformatted-content" "Text" "complete-setup" "get-row-height" "increase!" "wrap-paragraph" "set!" "set-next" "set-previous" "make-paragraph" "paragraph" "make-runs" "run-infos->string" "string" "reference-format" "and" "runs" "format" "bind" "info" "lambda" "accumulate" "rows" "root-row" "previous" "height" "0" "count" "setup-style" "setup-format" "map" "let*" "get-paragraphs" "paragraphs" "get-styles" "styles" "get-formats" "formats" "let" "Formatted-Text" "typecase" "text")}
        {Lisp-Entry "complete-setup" method #f 3215 11 3215 25 ("invalidate-update" "selection-anchor" "empty-selection" "selection" "get-width" "visible-width" "visible-height" "visible-count" "set!" "Axis" "coerce" "set-paragraphs" "height" "count" "rows")}
        {Lisp-Entry "wrap-content" method #f 3225 18 3225 30 ("invalidate-view" "layout-scrollee" "visible-height" "set!" "get-row-height" "increase!" "wrap-paragraph" "paragraph" "lambda" "get-paragraphs" "iterate" "0" "height" "let" "update-locked?" "unless" "context")}
        {Lisp-Entry "wrap-paragraph" method #f 3240 21 3240 35 ("visible-height" "increase!" "-" "delta" "wrap-paragraph-lowlevel" "get-row-height" "before" "let" "paragraph" "context")}
        {Lisp-Entry "wrap-paragraph-lowlevel" method #f 3248 21 3248 44 ("wrap" "width" "let" "flatten" "wrap?" "not" "get-format" "get-left-margin" "left-padding" "get-display-width" "wrap-patch" "wrap-width" "if" "-" "40" "max" "get-paragraph-width" "define" "paragraph" "context")}
        {Lisp-Entry "range-paragraphs" method #f 3258 11 3258 27 ("get-output" "set!" "eq?" "unless" "put" "not" "if" "get-paragraph" "paragraph" "get-end" "to" "get-start" "get-line" "from" "line" "for" "loop" "List-Factory" "new" "fact" "last" "let" "range")}
        {Lisp-Entry "copy-formatted-selection" method #f 3271 11 3271 35 ("jazz-formatted-text" "'jazz-formatted-text" "format:" "set-clipboard-text" "get-output-string" "output" "get-selection" "print-formatted" "open-output-string" "printer" "let" "bell" "empty-selection?" "if" "copy-formatted-selection" "'copy-formatted-selection" "unimplemented")}
        {Lisp-Entry "paste-formatted-clipboard" method #f 3282 11 3282 36 ("replace-selection" "split-lines" "strings" "let" "get-selection" "replace-formatted" "apply" "read-string-content" "info" "format:" "get-clipboard-text" "text" "let*" "jazz-formatted-text" "'jazz-formatted-text" "clipboard-format-available?" "if")}
        {Lisp-Entry "replace-formatted" method #f 3291 18 3291 35 ("set-caret" "when" "error" "else" "split-lines" "replace-text" "Text" "replace-formatted-text" "run-infos->string" "runs" "format" "bind" "run-info" "lambda" "strings" "setup-style" "intern-style" "interned-styles" "setup-format" "intern-format" "map" "interned-formats" "get-paragraphs" "paragraphs" "get-styles" "styles" "get-formats" "formats" "let*" "Formatted-Text" "typecase" "caret" "let" "info" "range")}
        {Lisp-Entry "replace-formatted-text" method #f 3313 21 3313 43 ("update-focus-actions" "call-content-change" "set-selection" "replace-formatted" "copy" "selection" "undoer" "register-undo" "set-modified?" "recolorize-text" "fit-caret" "fit-anchor" "fit-selection" "first-displayed-line" "first-displayed" "set!" "update-displayed" "get-application" "appl" "replace-range" "caret" "outline" "get-first-displayed-line" "<=" "ufd?" "old" "length" "count" "get-end" "without-caret" "write-allowed?" "set-line" "fix-view-style-parent" "reference-format" "set-format" "0" "inside?" "and" "when" "1" "get-length" "-" "line-length" "get-paragraph" "full-paragraph" "Range$Cell$" "set-style" "cardinality" "cast" "+" "set-col" "reference-style" "style" "ref" "string" "run" "runs" "format" "bind" "paragraph" "lambda" "for-each" "end" "get-col" "get-start" "get-line" "Cell" "new" "start" "let*" "apply-formats/styles" "get-output-string" "read-string-content" "car" "print-formatted" "open-output-string" "printer" "let" "'range-formatted-text" "unimplemented" "range-formatted-text" "define" "paragraphs" "styles" "formats" "strings" "range")}
        {Lisp-Entry "toggle-bulleted" method #f 3383 18 3383 33 ("16" "-16" "if" "+" "set-left-margin" "not" "set-bulleted?" "get-bulleted?" "bulleted?" "get-left-margin" "left-margin" "let" "format" "lambda" "get-paragraph" "modify-format" "line")}
        {Lisp-Entry "indent-paragraph" method #f 3392 18 3392 34 ("+" "set-left-margin" "get-left-margin" "left" "let" "format" "lambda" "modify-format" "delta" "paragraph" "line")}
        {Lisp-Entry "set-justification" method #f 3399 11 3399 28 ("set-justification" "format" "lambda" "modify-format" "justification" "paragraph" "line")}
        {Lisp-Entry "modify-format" method #f 3405 11 3405 24 ("set-paragraph-format" "get-format" "extend" "format" "let" "proc" "paragraph")}
        {Lisp-Entry "set-paragraph-format" method #f 3411 11 3411 31 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "intern-format" "set-format" "format" "paragraph")}
        {Lisp-Entry "apply-style" method #f 3419 18 3419 29 ("get-style" "stylize" "end" "start" "name")}
        {Lisp-Entry "stylize" method #f 3423 18 3423 25 ("get-style" "Range$Cell$" "set-text-style" "paragraph-length" "get-line" "Cell" "new" "set!" "not" "when" "end" "start" "name/style")}
        {Lisp-Entry "set-style" method #f 3429 18 3429 27 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "set-style" "end" "start" "paragraph" "lambda" "for-each-range" "intern-style" "let" "style" "range")}
        {Lisp-Entry "remove-style" method #f 3440 18 3440 30 ("get-end" "get-start" "default-style" "apply-style" "range")}
        {Lisp-Entry "set-text-alignment" method #f 3444 18 3444 36 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "set-text-alignment" "end" "start" "paragraph" "lambda" "for-each-range" "alignment" "range")}
        {Lisp-Entry "set-text-font" method #f 3454 18 3454 31 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "set-text-font" "end" "start" "paragraph" "lambda" "for-each-range" "font" "range")}
        {Lisp-Entry "set-text-style" method #f 3464 18 3464 32 ("set-modified?" "invalidate-drawing" "wrap-paragraph" "set-style" "end" "start" "paragraph" "lambda" "for-each-range" "intern-style" "let" "style" "range")}
        {Lisp-Entry "set-text-color" method #f 3474 18 3474 32 ("set-modified?" "invalidate-drawing" "wrap-paragraph" "set-text-color" "end" "start" "paragraph" "lambda" "for-each-range" "color" "range")}
        {Lisp-Entry "set-highlight-color" method #f 3483 18 3483 37 ("set-modified?" "invalidate-drawing" "wrap-paragraph" "set-highlight-color" "end" "start" "paragraph" "lambda" "for-each-range" "color" "range")}
        {Lisp-Entry "toggle-bold" method #f 3492 18 3492 29 ("invalidate-drawing" "wrap-paragraph" "toggle-bold" "end" "start" "paragraph" "lambda" "for-each-range" "range")}
        {Lisp-Entry "toggle-italic" method #f 3500 18 3500 31 ("invalidate-drawing" "wrap-paragraph" "toggle-italic" "end" "start" "paragraph" "lambda" "for-each-range" "range")}
        {Lisp-Entry "toggle-underline" method #f 3508 18 3508 34 ("invalidate-drawing" "wrap-paragraph" "toggle-underline" "end" "start" "paragraph" "lambda" "for-each-range" "range")}
        {Lisp-Entry "for-each-paragraph" method #f 3516 18 3516 36 ("element" "to" "from" "line" "for" "loop" "get-paragraphs" "paragraphs" "or" "let" "get-limit" "end" "end:" "0" "start" "start:" "proc")}
        {Lisp-Entry "for-each-selected-paragraph" method #f 3524 18 3524 45 ("get-end" "end:" "get-start" "get-line" "start:" "for-each-paragraph" "get-selection" "selection" "let" "proc")}
        {Lisp-Entry "get-default-format" method #f 3536 18 3536 36 ("default-format")}
        {Lisp-Entry "set-default-format" method #f 3540 18 3540 36 ("copy" "setup-format" "formats" "set-domain" "default-format" "set!" "value")}
        {Lisp-Entry "get-formats-domain" method #f 3546 18 3546 36 ("formats")}
        {Lisp-Entry "get-formats" method #f 3550 18 3550 29 ("formats" "get-content")}
        {Lisp-Entry "get-named-formats" method #f 3554 18 3554 35 ("get-formats" "get-name" "collect-if")}
        {Lisp-Entry "setup-format" method #f 3558 11 3558 23 ("modify-from" "intern-format" "not" "if" "error?:" "formats" "locate" "and" "actual" "get-name" "name" "let*" "format")}
        {Lisp-Entry "add-format" method #f 3567 18 3567 28 ("modify-from" "register" "set-persistent?" "set-domain" "copy" "let" "not" "if" "error?:" "formats" "locate" "and" "actual" "get-name" "name" "let*" "format")}
        {Lisp-Entry "get-format" method #f 3580 18 3580 28 ("formats" "locate" "error?" "error?:" "name")}
        {Lisp-Entry "intern-format" method #f 3584 18 3584 31 ("register" "set-domain" "begin" "formats" "similar" "or" "format")}
        {Lisp-Entry "format-reference" definition #f 3592 15 3592 31 ("get-name" "get-rank" "or" "formats" "format")}
        {Lisp-Entry "reference-format" method #f 3597 11 3597 27 ("element" "get-format" "symbol?" "if" "reference" "formats")}
        {Lisp-Entry "get-default-style" method #f 3608 18 3608 35 ("default-style")}
        {Lisp-Entry "set-default-style" method #f 3612 18 3612 35 ("copy" "setup-style" "styles" "set-domain" "default-style" "set!" "value")}
        {Lisp-Entry "propagate-styles?" method #f 3618 26 3618 43 ()}
        {Lisp-Entry "patch-default-style-height" method #f 3624 18 3624 44 ("get-line" "set-height" "set-row-height" "default-style" "get-font" "get-metrics" "get-height" "height" "0" "get-paragraph" "paragraph" "let" "text-empty?" "when")}
        {Lisp-Entry "get-styles-domain" method #f 3633 18 3633 35 ("styles")}
        {Lisp-Entry "get-styles" method #f 3637 18 3637 28 ("styles" "get-content")}
        {Lisp-Entry "get-named-styles" method #f 3641 18 3641 34 ("get-styles" "get-name" "style" "lambda" "collect-if")}
        {Lisp-Entry "setup-style" method #f 3647 11 3647 22 ("modify-from" "intern-style" "not" "if" "error?:" "styles" "locate" "and" "actual" "get-name" "name" "let*" "style")}
        {Lisp-Entry "add-style" method #f 3656 18 3656 27 ("modify-from" "register" "set-persistent?" "set-domain" "copy" "let" "not" "if" "error?:" "styles" "locate" "and" "actual" "get-name" "name" "let*" "style")}
        {Lisp-Entry "add-style-preference" method #f 3669 18 3669 38 ("add-style" "preference->text-style" "style" "let" "preference" "default-base" "name")}
        {Lisp-Entry "get-style" method #f 3675 18 3675 27 ("styles" "locate" "Style" "is?" "if" "error?" "error?:" "name/style")}
        {Lisp-Entry "intern-style" method #f 3681 18 3681 30 ("register" "set-domain" "begin" "styles" "similar" "or" "style")}
        {Lisp-Entry "style-reference" definition #f 3689 15 3689 30 ("get-name" "get-rank" "or" "styles" "style")}
        {Lisp-Entry "reference-style" method #f 3694 11 3694 26 ("element" "get-style" "symbol?" "if" "reference" "styles")}
        {Lisp-Entry "fix-view-style-parent" definition #f 3700 15 3700 36 ("set-parent" "get-view" "view" "View-Style" "is?" "when" "get-style" "style" "run" "lambda" "for-each" "get-runs" "runs" "let" "paragraph")}
        {Lisp-Entry "commented?" method #f 3710 26 3710 36 ("pos")}
        {Lisp-Entry "comment-style?" method #f 3714 26 3714 40 ("style")}
        {Lisp-Entry "string-style?" method #f 3718 26 3718 39 ("style")}
        {Lisp-Entry "textual-style?" method #f 3722 26 3722 40 ("style")}
        {Lisp-Entry "run-infos->string" definition #f 3731 15 3731 32 ("get-output-string" "format" "car" "string" "info" "lambda" "for-each" "open-output-string" "printer" "let" "infos")}
        {Lisp-Entry "make-runs" method #f 3740 11 3740 20 ("Run" "new" "set!" "reference-style" "get-default-style" "not" "if" "style" "subseq!" "subseq" "cardinality" "cast" "+" "limit" "let*" "cdr" "rank" "bind-optionals" "car" "str" "info" "lambda" "map" "0" "offset" "let" "infos" "styles" "string")}
        {Lisp-Entry "get-default-height" method #f 3758 18 3758 36 ("default-style" "get-height")}
        {Lisp-Entry "get-height-at" method #f 3762 18 3762 31 ("get-col" "get-line" "get-paragraph" "get-line-at" "get-height" "pos")}
        {Lisp-Entry "compute-width" method #f 3771 18 3771 31 ("set!" ">" "when" "compute-width" "w" "paragraph" "line" "lambda" "for-each-paragraph" "0" "width" "let")}
        {Lisp-Entry "get-headers" method #f 3786 26 3786 37 ()}
        {Lisp-Entry "get-chapters" method #f 3790 26 3790 38 ("get-output" "list" "put" "get-chapter-label" "label" "2" "1" "0" "level" "subseq" "header" "paragraph-string" "string" "get-column" "=" "when" "get-col" "col" "get-line" "line" "to" "from" "bind" "info" "lambda" "for-each" "List-Factory" "new" "chapters" "make-search-context" "map" "text-contextual-search-all" "occurences" "not" "if" "get-headers" "headers" "let")}
        {Lisp-Entry "get-chapter-label" method #f 3810 26 3810 43 ("position-offset" "-" "+" "subseq" "to" "from" "col" "string")}
        {Lisp-Entry "get-first-special?" method #f 3814 26 3814 44 ()}
        {Lisp-Entry "get-first-chapter" method #f 3818 26 3818 43 ("get-name" "not" "text-beginning" "0" "list" "get-moniker" "file" "let" "car" "null?" "get-first-special?" "if" "lst")}
        {Lisp-Entry "get-remaining-chapters" method #f 3830 26 3830 48 ("cdr" "null?" "get-first-special?" "if" "lst")}
        {Lisp-Entry "current-expr" method #f 3841 26 3841 38 ()}
        {Lisp-Entry "current-expr-range" method #f 3845 26 3845 44 ("get-end" "expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "current-expr-string" method #f 3851 18 3851 37 ("get-string" "when" "current-expr-range" "range" "let")}
        {Lisp-Entry "range-expr" method #f 3857 26 3857 36 ("range")}
        {Lisp-Entry "expr-range" method #f 3861 26 3861 36 ("get-range" "outer-expr" "end:" "start:" "self" "explorer-class" "new" "expl" "let" "pos")}
        {Lisp-Entry "mouse-insert" method #f 3872 20 3872 32 ("insert-string" "last" "string-append" "set!" "0" "element" "text-ending" "next" "previous-cell" "get-char" "text-beginning" "/=" "prev" "nu=?" "when" "get-end" "end" "get-start" "start" "let" "text-constituent?" "memv?" "or" "not" "and" "after" "before" "separate?" "define" "copy")}
        {Lisp-Entry "range-strings" method #f 3896 18 3896 31 ("get-output" "0" "1" "+" "naturals" "map" "put-sequence" "put" "List-Factory" "new" "dest" "get-col" "paragraph-string" "subseq" "list" "get-line" "=" "if" "get-end" "end" "get-start" "start" "let" "range")}
        {Lisp-Entry "range-first-string" method #f 3908 18 3908 36 ("range-strings" "first" "range")}
        {Lisp-Entry "Marked-Column" definition #f 3917 14 3917 27 ()}
        {Lisp-Entry "on-mark-column" method #f 3921 11 3921 25 ("mark-column" "evt")}
        {Lisp-Entry "on-fill-to-column" method #f 3925 11 3925 28 ("fill-to-column" "evt")}
        {Lisp-Entry "mark-column" method #f 3929 11 3929 22 ("user-message" "Marked-Column" "set!" "get-col" "col" "get-start" "start" "let*")}
        {Lisp-Entry "fill-to-column" method #f 3936 11 3936 25 ("make-string" "insert-string" "1" "sign" "case" "-" "delta" "get-col" "col" "get-start" "start" "let*" "bell" "Marked-Column" "not" "has-selection?" "or" "if")}
        {Lisp-Entry "position-offset" method #f 3951 11 3951 26 ("1" "paragraph-length" "+" "increase!" "below" "from" "n" "for" "loop" "0" "offset" "get-col" "col" "get-line" "line" "let" "pos")}
        {Lisp-Entry "offset-position" method #f 3960 11 3960 26 ("set!" "-" "Cell" "new" "continuation-return" ">" "if" "1" "get-string" "cardinality" "+" "next" "paragraph" "line" "for-each-paragraph" "return" "lambda" "continuation-capture" "0" "scan" "let" "offset")}
        {Lisp-Entry "on-upcase-selection" method #f 3977 11 3977 30 ("get-selected-string" "upcase" "insert-string" "lambda" "with-preserved-selection" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "on-downcase-selection" method #f 3985 11 3985 32 ("get-selected-string" "downcase" "insert-string" "lambda" "with-preserved-selection" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "on-capitalize-selection" method #f 3993 11 3993 34 ("get-selected-string" "capitalize" "insert-string" "lambda" "with-preserved-selection" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "with-preserved-selection" method #f 4001 11 4001 35 ("set-selection" "get-selection" "selection" "let" "proc")}
        {Lisp-Entry "get-run-at" method #f 4012 18 4012 28 ("get-col" "get-run" "get-line" "get-paragraph" "paragraph" "let" "pos")}
        {Lisp-Entry "get-style-at" method #f 4017 18 4017 30 ("get-style" "get-default-style" "not" "if" "get-run-at" "run" "let" "pos")}
        {Lisp-Entry "uncolorize-row" method #f 4024 18 4024 32 ("invalidate-paragraph" "default-style" "remove-coloring" "when" "get-paragraph" "paragraph" "let" "line")}
        {Lisp-Entry "colorize" method #f 4030 18 4030 26 ("Range$Cell$" "set-text-color" "paragraph-length" "get-line" "Cell" "new" "set!" "not" "when" "end" "start" "color")}
        {Lisp-Entry "fill" method #f 4036 18 4036 22 ("set-highlight-color" "1" "+" "Range$Cell$" "new" "range" "let" "pos" "color")}
        {Lisp-Entry "unfill" method #f 4041 18 4041 24 ("set-highlight-color" "1" "+" "Range$Cell$" "new" "range" "let" "pos")}
        {Lisp-Entry "new-colorizer" method #f 4051 18 4051 31 ("Text-Colorizer" "new" "text")}
        {Lisp-Entry "view->text" method #f 4060 18 4060 28 ("get-position" "-" "view->col" "new" "get-paragraph" "par" "get-limit" "v->row" "visible-height" "line" "let*" "Cell" "0" "<" "if" "get-v" "v" "let" "pos")}
        {Lisp-Entry "text->view" method #f 4069 18 4069 28 ("get-v" "line->view" "+" "get-h" "Point" "new" "get-col" "col->view" "view" "get-line" "get-paragraph" "par" "let*" "pos")}
        {Lisp-Entry "text->view-extended" method #f 4077 18 4077 37 ("get-v" "line->view" "+" "get-h" "Point" "new" "cons" "cdr" "view" "car" "line" "get-col" "col->view-extended" "info" "get-line" "get-paragraph" "par" "let*" "pos")}
        {Lisp-Entry "line->view" method #f 4087 11 4087 21 ("get-position" "get-v" "get-paragraph" "par" "let" "line")}
        {Lisp-Entry "string-width" method #f 4092 11 4092 23 ("Code" "name:" "Font" "get-all-widths" "JzStringWidth" "string-width" "'string-width" "unimplemented" "end" "start" "string")}
        {Lisp-Entry "validate-range" method #f 4104 11 4104 25 ("error" "get-line" ">" "or" "when" "get-end" "end" "get-start" "start" "get-limit" "limit" "let" "range")}
        {Lisp-Entry "set-selection-safe" method #f 4113 18 4113 36 ("restrict-range" "set-selection" "apply" "rest" "range")}
        {Lisp-Entry "restrict-range" method #f 4117 18 4117 32 ("get-end" "get-start" "Range$Cell$" "paragraph-length" "len" "get-col" "col" "line" "restrict-col" "0" "Cell" "new" "get-line" ">" "if" "cell" "restrict-row" "define" "get-limit" "limit" "let" "range")}
        {Lisp-Entry "set-selection-style" method #f 4142 18 4142 37 ("invalidate-view" "layout-scrollee" "set-modified?" "set-paragraph-format" "else" "end:" "start:" "get-length" "0" "Cell" "Range$Cell$" "new" "set-text-style" "paragraph" "line" "lambda" "for-each-paragraph" "empty-selection?" "or" "cond" "when" "get-line" "get-paragraph" "neq?" "span?" "get-end" "end" "get-start" "start" "get-selection" "selection" "get-style" "style" "error?:" "get-format" "format" "let*" "name")}
        {Lisp-Entry "on-bold" method #f 4169 11 4169 18 ("get-selection" "toggle-bold" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "on-italic" method #f 4175 11 4175 20 ("get-selection" "toggle-italic" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "on-underline" method #f 4181 11 4181 23 ("get-selection" "toggle-underline" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "get-ruler" method #f 4192 26 4192 35 ()}
        {Lisp-Entry "on-toggle-ruler" method #f 4196 11 4196 26 ("get-shown?" "set-shown?" "bell" "not" "if" "get-ruler" "ruler" "let" "evt")}
        {Lisp-Entry "set-selection-font-name" method #f 4208 18 4208 41 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "set-font-name" "end" "start" "paragraph" "lambda" "get-selection" "for-each-range" "name")}
        {Lisp-Entry "set-selection-point-size" method #f 4218 18 4218 42 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "set-point-size" "end" "start" "paragraph" "lambda" "get-selection" "for-each-range" "size")}
        {Lisp-Entry "pick-text-color" definition #f 4233 15 4233 30 ("8" "3" "Cell" "geometry:" "get-parent" "popup-colors" "sender")}
        {Lisp-Entry "pick-highlight-color" definition #f 4237 15 4237 35 ("8" "3" "Cell" "geometry:" "get-parent" "popup-colors" "sender")}
        {Lisp-Entry "has-completion?" method #f 4246 21 4246 36 ("has-selection?" "completion-active?" "and")}
        {Lisp-Entry "set-completion" method #f 4250 21 4250 35 ("set-selection" "completion-active?" "set!" "range")}
        {Lisp-Entry "remove-completion" method #f 4255 11 4255 28 ("set!" "delete-selection" "completion-active?" "when")}
        {Lisp-Entry "end-completion" method #f 4261 21 4261 35 ("get-end" "set-caret" "set!" "completion-active?" "when")}
        {Lisp-Entry "auto-complete?" method #f 4267 29 4267 43 ()}
        {Lisp-Entry "favorite-completions?" method #f 4271 29 4271 50 ()}
        {Lisp-Entry "favorite-completions" method #f 4275 29 4275 49 ()}
        {Lisp-Entry "favorite-completion" method #f 4279 29 4279 48 ("favorite-completions" "assoc-value" "name")}
        {Lisp-Entry "completion-name" method #f 4283 29 4283 44 ("pos")}
        {Lisp-Entry "completion-string" method #f 4287 11 4287 28 ("else" "alphabet" "completions-prefix" "common" "5" "string=?" "user-message" "car" "found" "=" "cond" "length" "count" "symbol-completions" "let*" "complete-name?" "subseq" "clear-user-message" "begin" "get-application" "macro-playing?" "not" "feedback?" "favorite-completion" "get-user-completion" "or" "favorite-completions?" "favorite" "size" "when" "completion-name" "String" "coerce" "element" "completion" "lambda" "map" "char<?" "sort" "remove-duplicates" "alphabet-char" "offset" "completions" "alphabetize-completion" "1" "substring" "string-ref" "eqv?" "0" ">" "and" "string-length" "len" "let" "if" "name" "skip-prefix" "define" "pos")}
        {Lisp-Entry "complete-name?" method #f 4346 29 4346 43 ("2" ">=" "size")}
        {Lisp-Entry "symbol-completions" method #f 4350 29 4350 47 ("name")}
        {Lisp-Entry "completions-prefix" method #f 4354 29 4354 47 ("prefix" "completions")}
        {Lisp-Entry "auto-complete" method #f 4358 29 4358 42 ("insert-char/backspace" "end-completion" "list" "replace-selection" "completion-active?" "when" "subseq" "replacement" "find" "offset" "selection-lines" "join-lines" "completion" "complete-at" "insert-char" "begin" "auto-complete-char?" "not" "if" "self" "class-of" "class" "1" "-" "get-char" "0" "get-col" ">" "and" "last" "get-end" "end" "let*" "get-start" "get-style-at" "lambda" "undoer" "with-atomic-undo" "key")}
        {Lisp-Entry "auto-complete-char?" method #f 4379 29 4379 48 ("syntax" "auto-complete-char?" "last" "key")}
        {Lisp-Entry "complete-at" method #f 4383 11 4383 22 ("cardinality" "cast" "+" "Range$Cell$" "new" "set-completion" "insert-string" "completion-active?" "set!" "not" "if" "completion-string" "completion" "let" "get-application" "macro-recording?" "get-style-at" "textual-style?" "or" "unless" "pos")}
        {Lisp-Entry "convert-completion" method #f 4393 21 4393 39 ("set-anchor?:" "Range$Cell$" "new" "set-selection" "end-completion" "get-end" "end" "get-start" "start" "let" "completion-active?" "when")}
        {Lisp-Entry "insert-char/backspace" method #f 4401 21 4401 42 ("insert-char" "else" "backspace" "delete-selection" "completion-active?" "when" "case" "keyboard-input?" "parameterize" "word?" "word?:" "c")}
        {Lisp-Entry "on-search-forward-mode" method #f 4418 11 4418 33 ("get-selection" "get-string" "has-selection?" "and" "forward" "'forward" "get-application" "select-command-search" "evt")}
        {Lisp-Entry "on-search-backward-mode" method #f 4423 11 4423 34 ("get-selection" "get-string" "has-selection?" "and" "backward" "'backward" "get-application" "select-command-search" "evt")}
        {Lisp-Entry "on-search-current" method #f 4428 11 4428 28 ("select-command-search-current" "get-string" "current" "forward" "'forward" "get-application" "select-command-search" "current-expr-range" "range" "0" "substring" "not" "if" "find" "pos" "let" "str" "single-line" "define" "evt")}
        {Lisp-Entry "on-find-forward" method #f 4447 19 4447 34 ("on-find-forward" "bell" "select-next" "unless" "get-find-targets" "search-set" "not" "if" "active-search" "search" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-find-backward" method #f 4457 19 4457 35 ("on-find-backward" "bell" "select-previous" "unless" "get-find-targets" "search-set" "not" "if" "active-search" "search" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "find-context" method #f 4467 11 4467 23 ("application-search-context" "not" "if" "current-expr-string" "get-selected-string" "or" "string" "let")}
        {Lisp-Entry "application-search-context" method #f 4474 11 4474 37 ("get-constituent-test" "constituent-test:" "get-ignore-case?" "ignore-case?:" "get-whole-words?" "whole-words?:" "make-search-context" "get-application" "appl" "let" "string")}
        {Lisp-Entry "on-find-next" method #f 4482 19 4482 31 ("list" "select-next" "unless" "get-selected-string" "application-search-context" "context" "let" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "on-find-previous" method #f 4490 19 4490 35 ("list" "select-previous" "unless" "get-selected-string" "application-search-context" "context" "let" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "select-next" method #f 4498 26 4498 37 ("ensure-scrolled-left" "ensure-displayed" "-" "position-offset" "+" "offset-position" "Range$Cell$" "new" "set-selection" "to" "from" "bind" "when" "reversed?:" "get-end" "start:" "text-contextual-search" "found" "let" "search-context")}
        {Lisp-Entry "select-previous" method #f 4508 26 4508 41 ("ensure-scrolled-left" "ensure-displayed" "-" "position-offset" "+" "offset-position" "Range$Cell$" "new" "set-selection" "to" "from" "bind" "when" "reversed?:" "get-start" "start:" "text-contextual-search" "found" "let" "search-context")}
        {Lisp-Entry "select-expr" method #f 4518 26 4518 37 ("select-next" "text-beginning" "set-caret" "search-context")}
        {Lisp-Entry "select-expr-backward" method #f 4523 26 4523 46 ("select-previous" "text-ending" "set-caret" "search-context")}
        {Lisp-Entry "text-contextual-search" method #f 4533 18 4533 40 ("+" "1" "-" "Cell" "new" "paragraph-string" "string" "<=" "0" ">=" "n" "iter" "get-col" "col" "get-line" "line" "get-limit" "text-beginning" "text-ending" "or" "pos" "offset-position" "cons" "to" "from" "bind" "when" "position-offset" "constituent-test:" "contextual-search" "found" "get-string-content" "content" "get-contexts" "get-target" "search" "context" "lambda" "some?" "if" "->search-set" "search-set" "get-constituent-test" "constituent-test" "let" "reversed?" "reversed?:" "end" "end:" "start" "start:" "search-context")}
        {Lisp-Entry "text-contextual-search-all" method #f 4560 18 4560 44 ("queue-list" "constituent-test:" "contextual-search-all" "Cell" "new" "cons" "enqueue" "to" "from" "bind" "found" "for-each" "get-string" "str" "paragraph" "line" "lambda" "for-each-paragraph" "->search-set" "search-set" "get-constituent-test" "constituent-test" "new-queue" "queue" "let" "end" "end:" "start" "start:" "search-context")}
        {Lisp-Entry "text-search" method #f 4576 18 4576 29 ("car" "if" "text-contextual-search" "apply" "found" "let" "rest" "context")}
        {Lisp-Entry "text-search-all" method #f 4583 18 4583 33 ("text-contextual-search-all" "apply" "car" "map" "rest" "context")}
        {Lisp-Entry "text-expression-search" method #f 4587 18 4587 40 ("car" "when" "position" "search-expressions" "found" "quotation" "'quotation" "code" "'code" "get-extension" "ci=?" "not" "or" "if" "mode" "get-moniker" "moniker" "text-beginning" "self" "explorer-class" "new" "expl" "let*" "reversed?" "reversed?:" "get-limit" "end" "end:" "start" "start:" "string")}
        {Lisp-Entry "get-class-descriptor" method #f 4601 25 4601 45 ("Text-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 4610 11 4610 17 ()
        {Lisp-Entry "Text-View-Descriptor" class #f 4616 7 4616 27 ("force-tab-navigate?" "colorize?" "eol-encoding" "char-encoding" "completion-color" "show-unfocused-selection?" "paragraph-spacing" "editable?" "domain" "selectable?" "text-content" "title:" "text" "name:" "caret-color" "inactive-selection-color" "active-selection-color" "background" "default-style" "default-format" "focus-selects-all?" "accepts-returns?" "wrap?" "name-info" "class-info" "categorized:" "Outline-View-Descriptor")
          {Lisp-Entry "class-image" method #f 4655 20 4655 31 ("Image-Resource" "class")}
          {Lisp-Entry "component-surrogate-class" method #f 4659 20 4659 45 ("Text-View-Surrogate" "component")}
          {Lisp-Entry "component-save-properties" method #f 4663 20 4663 45 ("set-modified?" "design-events?:" "get-content" "text-content" "'text-content" "set-property" "get-modified?" "when" "designer" "component")}}}}})
"Text-Widget"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "widget" "Text-Widget.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.widget.Text-Widget" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Text-Widget" class #f 44 20 44 31 ("text" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "scroller" "name:" "edge" "border-type:" "Border-View")
        {Lisp-Entry "default-size" method #f 54 20 54 32 ("150" "300" "Dimension")}}}})
"TextToHTML-Exporter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "TextToHTML-Exporter.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.TextToHTML-Exporter" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "TextToHTML-Exporter" class #f 44 20 44 39 ("Object")
        {Lisp-Entry "text" slot #f 47 8 47 12 ()}
        {Lisp-Entry "printer" slot #f 48 8 48 15 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("printer~self" "text~self" "set!" "nextmethod" "printer" "text")}
        {Lisp-Entry "export-html" method #f 57 18 57 29 ("print-footer" "text" "to-html" "print-header")}
        {Lisp-Entry "to-html" method #f 63 11 63 18 ("error" "else" "text" "'text" "to-html" "Table-Cell" "header" "'header" "get-shown?" "tree" "'tree" "locate" "Table-Border" "tree-column->html" "Tree-Label-Column" "tree-label->html" "Tree-Label" "row->html" "Tree-Row" "tree->html" "Tree-View" "paragraph->html" "Paragraph" "text->html" "Text-View" "typecase" "in-table?" "element")}
        {Lisp-Entry "paragraph->html" method #f 77 11 77 26 ("unless" "get-runs" "run->html" "run" "lambda" "for-each" "64" "16" "get-left-margin" "-" "/" "printer" "format" "when" "get-bulleted?" "bulleted?" "get-format" "fmt" "let*" "in-table?" "paragraph")}
        {Lisp-Entry "run->html" method #f 93 11 93 20 ("get-string" "printer" "format" "not-null?" "not" "when" "color:" "get-value" "color" "Default" "'Default" "get-name" "eqv?" "default?" "get-style" "style" "let*" "in-table?" "run")}
        {Lisp-Entry "run->html" method #f 107 11 107 20 ("else" "Heading3" "Heading2" "Heading1" "Heading0" "case" "Text-Style" "printer" "format" "Hyperlink-Style" "typecase" "get-string" "string" "get-name" "name" "get-view" "to-html" "View-Style" "is?" "if" "get-style" "style" "let" "in-table?" "run")}
        {Lisp-Entry "text->html" method #f 125 11 125 21 ("get-paragraphs" "paragraph->html" "paragraph" "lambda" "for-each" "in-table?" "element")}
        {Lisp-Entry "tree->html" method #f 131 11 131 21 ("row->html" "for-each-row" "get-columns" "to-html" "column" "lambda" "for-each" "when" "printer" "format" "header?" "tree")}
        {Lisp-Entry "row->html" method #f 147 11 147 20 ("get-children" "set!" "to-html" "0" "get-level" "/=" "and" "when" "child" "lambda" "for-each" "first?" "in-table?" "let" "printer" "format" "row")}
        {Lisp-Entry "tree-label->html" method #f 162 11 162 27 ("printer" "format" "empty-string?" "if" "get-title" "localize" "string" "let" "data")}
        {Lisp-Entry "tree-column->html" method #f 169 11 169 28 ("get-title" "localize" "printer" "format" "column")}
        {Lisp-Entry "print-header" method #f 173 18 173 30 ("centered?:" "print-title" "localize" "/=" "when" "printer" "format" "style-sheet" "style-sheet:" "2" "header-level" "header-level:" "header?" "header?:" "name" "name:")}
        {Lisp-Entry "print-footer" method #f 190 18 190 30 ("printer" "format")}}}})
"Threeway-Checkbox"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Threeway-Checkbox.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Threeway-Checkbox" module #f 41 18 41 48 ("jazz")
      {Lisp-Entry "Threeway-Checkbox" class #f 48 7 48 24 ("none" "'none" "set-property" "get-property" "explicit" "initialize" "Check-Box")
        {Lisp-Entry "type" property #f 51 12 51 16 ()}
        {Lisp-Entry "property_" property #f 52 12 52 21 ()}
        {Lisp-Entry "state" property #f 53 12 53 17 ()}
        {Lisp-Entry "get-type" method #f 56 11 56 19 ("type")}
        {Lisp-Entry "set-type" method #f 60 11 60 19 ("type" "set!" "value")}
        {Lisp-Entry "get-property" method #f 64 11 64 23 ("property_")}
        {Lisp-Entry "set-property" method #f 68 11 68 23 ("property_" "set!" "value")}
        {Lisp-Entry "get-state" method #f 72 11 72 20 ("state")}
        {Lisp-Entry "set-state" method #f 76 11 76 20 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "change-state" method #f 81 20 81 32 ("invalidate-view" "if" "set!" "next-state" "'none" "displayed" "'displayed" "validated" "'validated" "none" "case" "state" "previous-state" "define" "reverse?")}
        {Lisp-Entry "Validated-Color" definition #f 98 14 98 29 ("Dark-Red" "name:" "Color")}
        {Lisp-Entry "Validated-Color-Grayed" definition #f 101 14 101 36 ("blue:" "101" "green:" "154" "red:" "Color")}
        {Lisp-Entry "draw-check" method #f 105 20 105 30 ("draw-check" "set-color" "none" "'none" "eq?" "unless" "Validated-Color" "Validated-Color-Grayed" "validated" "Black" "Dark" "name:" "Color" "if" "displayed" "state" "case" "state-color" "define" "grayed?" "v" "h" "surface")}}}})
"Toggle-Tool"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Toggle-Tool.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Toggle-Tool" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Toggle-Tool" class #f 44 7 44 18 ("explicit" "initialize" "Image-Tool")
        {Lisp-Entry "selected?" property #f 47 12 47 21 ()}
        {Lisp-Entry "default-size" method #f 50 20 50 32 ("22" "Dimension")}
        {Lisp-Entry "draw-frame" method #f 59 20 59 30 ("nextmethod" "draw-pushed" "out-pushed" "highlighted" "inactive" "get-state" "memq?" "selected?" "and" "if" "surface")}
        {Lisp-Entry "draw-tool" method #f 65 20 65 29 ("draw-image" "1" "2" "pushed" "'pushed" "get-state" "eq?" "selected?" "or" "if" "offset" "let" "context" "surface")}
        {Lisp-Entry "draw-background" method #f 70 20 70 35 ("nextmethod" "Light-Background" "name:" "Color" "fill-rect" "get-bounds" "bounds" "selected?" "if" "get-state" "state" "let" "context" "surface")}
        {Lisp-Entry "up" method #f 83 20 83 22 ("self" "process-action" "toggle-selected?" "pushed" "'pushed" "get-state" "eq?" "when")}
        {Lisp-Entry "get-selected?" method #f 94 18 94 31 ("selected?")}
        {Lisp-Entry "set-selected?" method #f 98 18 98 31 ("invalidate-view" "set!" "selected?" "neq?" "when" "flag")}
        {Lisp-Entry "toggle-selected?" method #f 104 18 104 34 ("selected?" "not" "set-selected?")}}}})
"Tool-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Tool-Button.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Tool-Button" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Tool-Button" class #f 47 7 47 18 ("inactive" "'inactive" "initialize" "Layout-View")
        {Lisp-Entry "state" slot #f 54 8 54 13 ()}
        {Lisp-Entry "default-size" method #f 57 20 57 32 ("22" "100" "Dimension")}
        {Lisp-Entry "mouse-activate?" method #f 61 20 61 35 ()}
        {Lisp-Entry "get-state" method #f 70 26 70 35 ("state")}
        {Lisp-Entry "set-state" method #f 74 26 74 35 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "set-enabled?" method #f 84 20 84 32 ("nextmethod" "inactive" "'inactive" "state" "set!" "not" "when" "flag")}
        {Lisp-Entry "draw-background" method #f 95 20 95 35 ("-1" "1" "get-bounds" "expand-rect" "fill-background" "get-highlight" "highlight" "get-look" "look" "let" "pushed" "highlighted" "get-state" "memq?" "when" "context" "surface")}
        {Lisp-Entry "draw" method #f 103 20 103 24 ("draw-tool" "draw-frame" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-frame" method #f 108 29 108 39 ("draw-out-pushed" "out-pushed" "draw-pushed" "pushed" "draw-highlighted" "highlighted" "draw-inactive" "inactive" "get-state" "case" "surface")}
        {Lisp-Entry "draw-inactive" method #f 116 29 116 42 ("surface")}
        {Lisp-Entry "draw-highlighted" method #f 120 29 120 45 ("dark-color" "light-color" "draw-border" "surface")}
        {Lisp-Entry "draw-pushed" method #f 124 29 124 40 ("light-color" "dark-color" "draw-border" "surface")}
        {Lisp-Entry "light-color" method #f 128 29 128 40 ("Light" "name:" "Color")}
        {Lisp-Entry "dark-color" method #f 132 29 132 39 ("Dark" "name:" "Color")}
        {Lisp-Entry "draw-out-pushed" method #f 136 29 136 44 ("surface")}
        {Lisp-Entry "draw-border" method #f 140 11 140 22 ("line-to-no-stroke" "line-to" "move-to" "set-line-width" "set-color" "get-bottom" "bottom" "1" "get-right" "-" "right" "top" "0" "left" "get-bounds" "rect" "let" "lower" "upper" "surface")}
        {Lisp-Entry "draw-tool" method #f 157 29 157 38 ("context" "surface")}
        {Lisp-Entry "get-look" method #f 166 20 166 28 ("tool" "'tool" "find-look")}
        {Lisp-Entry "mouse-enter" method #f 175 20 175 31 ("pushed" "'pushed" "out-pushed" "highlighted" "'highlighted" "set-state" "inactive" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "view-enabled?" "and" "when")}
        {Lisp-Entry "mouse-leave" method #f 182 20 182 31 ("out-pushed" "'out-pushed" "pushed" "inactive" "'inactive" "set-state" "highlighted" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "when")}
        {Lisp-Entry "mouse-down" method #f 189 20 189 30 ("invalidate-view" "down" "pushed" "'pushed" "state" "set!" "view-enabled?" "when" "pos")}
        {Lisp-Entry "down" method #f 196 26 196 30 ()}
        {Lisp-Entry "drag-up" method #f 200 20 200 27 ("inactive" "'inactive" "out-pushed" "highlighted" "'highlighted" "set-state" "pushed" "get-state" "case" "up" "unwind-protect" "view-enabled?" "when" "rest" "pos")}
        {Lisp-Entry "up" method #f 209 26 209 28 ()}}}})
"Tool-Look"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Tool-Look.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Tool-Look" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Tool-Look" class #f 43 7 43 16 ("initialize" "Look")
        {Lisp-Entry "highlight" property #f 46 12 46 21 ()}
        {Lisp-Entry "get-highlight" accessor #f 46 46 46 54 ()}
        {Lisp-Entry "set-highlight" accessor #f 46 46 46 54 ()}}}})
"Tool-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tool" "Tool-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tool.Tool-Preferences" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Tool-Preferences" class #f 44 20 44 36 ("title:" "Frame-Preferences")
        {Lisp-Entry "get-class-descriptor" method #f 56 25 56 45 ("Tool-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 65 11 65 17 ()
        {Lisp-Entry "Tool-Preferences-Descriptor" class #f 71 7 71 34 ("can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Figure-Preferences-Descriptor")}}}})
"Tool-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tool" "Tool-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tool.Tool-View" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Tool-View" class #f 44 7 44 16 ("Layout-View")
        {Lisp-Entry "install-in-host" method #f 52 20 52 35 ("get-process" "apply-preferences" "when" "tool-preferences" "preferences" "let" "nextmethod" "host")}
        {Lisp-Entry "confirm-close" method #f 64 20 64 33 ("save-session" "rest")}
        {Lisp-Entry "save-session" method #f 68 20 68 32 ("get-host" "save-preferences" "get-application" "get-preferences-designer" "designer" "when" "tool-preferences" "pref" "let")}}}})
"Toolbar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Toolbar.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Toolbar" module #f 37 18 37 38 ("jazz")
      {Lisp-Entry "Toolbar" class #f 46 7 46 14 ("0" "3" "2" "Rect" "layout-insets:" "flow" "layout-type:" "Layout-View")
        {Lisp-Entry "mouse-activate?" method #f 53 20 53 35 ()}
        {Lisp-Entry "draw-background" method #f 62 20 62 35 ("fill-background" "get-bounds" "bounds" "nextmethod" "not" "if" "get-background" "background" "get-look" "look" "let" "context" "surface")}
        {Lisp-Entry "get-look" method #f 76 20 76 28 ("toolbar" "'toolbar" "find-look")}}}})
"Toolbar-Host"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "hosting" "Toolbar-Host.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.hosting.Toolbar-Host" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Toolbar-Host" class #f 49 20 49 32 ("Medium" "name:" "Color" "background:" "Host-View")
        {Lisp-Entry "size-change" method #f 61 20 61 31 ("2" "Rect" "insets:" "invalidate-border" "invalidate-top" "nextmethod" "size")}
        {Lisp-Entry "on-close" method #f 67 11 67 19 ("selection" "'selection" "first-child" "Pad-View" "close" "get-location" "set-location" "layout-view" "zoom" "'zoom" "set-mode" "begin" "Workspace-Splitter" "if" "when" "first-view" "other" "let" "Splitter-View" "is?" "cond" "get-toplevel" "set-parent" "set-visible?" "lambda" "with-locked-update" "grand" "get-parent" "parent" "let*" "evt")}
        {Lisp-Entry "mouse-activate?" method #f 97 20 97 35 ()}
        {Lisp-Entry "activate-focus" method #f 101 20 101 34 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "deactivate-focus" method #f 106 20 106 36 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "layout" method #f 116 20 116 26 ("Dimension" "new" "set-size" "0" "Point" "set-position" "get-height" "height" "get-width" "width" "let" "guest" "when")}
        {Lisp-Entry "menu-rect" method #f 129 11 129 20 ("25" "1" "Rect" "new")}
        {Lisp-Entry "caption-rect" method #f 133 11 133 23 ("24" "2" "get-width" "-" "1" "Rect" "new")}
        {Lisp-Entry "top-rect" method #f 137 11 137 19 ("25" "2" "get-width" "-" "1" "Rect" "new")}
        {Lisp-Entry "invalidate-top" method #f 146 11 146 25 ("top-rect" "invalidate-rect")}
        {Lisp-Entry "invalidate-caption" method #f 150 20 150 38 ("caption-rect" "invalidate-rect")}
        {Lisp-Entry "mouse-down" method #f 159 20 159 30 ("toggle-docked" "caption-rect" "select-menu" "menu-rect" "in-rect?" "cond" "pos")}
        {Lisp-Entry "toggle-docked" method #f 166 11 166 24 ("select-next" "lambda" "with-locked-update" "get-h" "<" "text-width" "28" "+" "h" "Label" "name:" "Font" "font" "get-title" "title" "let*" "Pad-View" "is?" "when" "get-parent" "parent" "let" "pos")}
        {Lisp-Entry "double-click" method #f 178 20 178 32 ("unzoom" "zoom" "split" "'split" "get-state" "=" "lambda" "with-locked-update" "Splitter-View" "when" "splitter" "self" "Pad-View" "is?" "if" "target" "get-parent" "parent" "let*" "pos")}
        {Lisp-Entry "select-menu" method #f 195 11 195 22 ("25" "2" "Point" "track-popup-menu" "layout-menu" "host:" "list" "properties:" "on-select" "'on-select" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "parent:" "Label-Item" "class-of" "host-icon" "icon" "get-title" "title" "get-guest" "guest" "let*" "docked" "lambda" "for-each" "Context-Menu" "new" "menu" "when" "collect-brothers" "brothers" "let")}
        {Lisp-Entry "collect-brothers" method #f 209 11 209 27 ("get-children" "self" "neq?" "host" "lambda" "collect-if" "Pad-View" "is?" "when" "get-parent" "pad" "let")}
        {Lisp-Entry "on-select" method #f 217 11 217 20 ("focus-host" "set-selection" "lambda" "with-locked-update" "host:" "get-property" "host" "get-parent" "parent" "let" "evt")}}}})
"Toolbar-Look"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Toolbar-Look.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Toolbar-Look" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Toolbar-Look" class #f 43 7 43 19 ("initialize" "Look")
        {Lisp-Entry "background" property #f 46 12 46 22 ()}
        {Lisp-Entry "get-background" accessor #f 46 47 46 55 ()}
        {Lisp-Entry "set-background" accessor #f 46 47 46 55 ()}}}})
"Toolbar-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Toolbar-Preferences.jazz"} 1290092383
    {Lisp-Entry "jazz.ui.preference.Toolbar-Preferences" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Toolbar-Preferences" class #f 48 20 48 39 ("Image-Resource" "icon:" "initialize" "Figure-Preferences")
        {Lisp-Entry "model" property #f 51 12 51 17 ()}
        {Lisp-Entry "get-model" accessor #f 51 42 51 50 ()}
        {Lisp-Entry "set-model" accessor #f 51 42 51 50 ()}
        {Lisp-Entry "apply-root" method #f 63 20 63 30 ("get-root" "apply-to" "model" "get-class" "singleton-toolbar" "set-root" "player")}
        {Lisp-Entry "apply-preferences" method #f 68 20 68 37 ("set-visible?" "get-guest" "client-activate" "location" "set-location" "set-title" "title" "when" "set-parent" "model" "get-class" "singleton-toolbar" "host" "let" "assert" "parent")}
        {Lisp-Entry "apply-to" method #f 79 11 79 19 ("set-visible?" "get-guest" "client-activate" "location" "set-location" "set-title" "title" "when" "toolbar")}
        {Lisp-Entry "default-toolbar-classes" define #f 87 10 87 33 ("Minibuffer-Toolbar" ":minibuffer" "Command-Toolbar" ":command" "Status-Toolbar" ":status" "Toolbar" ":toolbar" "Menubar" "Reference" ":menubar")}
        {Lisp-Entry "get-class" method #f 96 11 96 20 ("resolve-reference" "cdr" "error" "not" "default-toolbar-classes" "get-data" "get-preferences-root" "get-toolbar-classes" "assq" "or" "pair" "let" "model" "symbol?" "if" "get-reference" "define")}
        {Lisp-Entry "get-class-descriptor" method #f 113 25 113 45 ("Toolbar-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 122 11 122 17 ()
        {Lisp-Entry "Toolbar-Preferences-Descriptor" class #f 128 7 128 37 ("name:" "model" "location" "categorized:" "Image-Resource" "image:" "Figure-Preferences-Descriptor")
          {Lisp-Entry "component-presentation-property?" method #f 142 20 142 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 146 20 146 46 ("get-title" "or" "component")}
          {Lisp-Entry "component-set-presentation" method #f 150 20 150 46 ("title:" "set-property" "title" "designer" "component")}}}}})
"Tools-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tool" "Tools-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tool.Tools-Preferences" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Tools-Preferences" class #f 44 20 44 37 ("title:" "Preferences")
        {Lisp-Entry "get-class-descriptor" method #f 56 25 56 45 ("Tools-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 65 11 65 17 ()
        {Lisp-Entry "Tools-Preferences-Descriptor" class #f 71 7 71 35 ("can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")}}}})
"Tooltip"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "Tooltip.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.Tooltip" module #f 37 18 37 40 ("set-passing-through?" "begin" "unwind-protect" "get-passing-through?" "preserved" "let" "proc" "with-passing-through" "method" "jazz")
      {Lisp-Entry "Tooltip" class #f 43 7 43 14 ("Transient")}}})
"Tooltip-Context"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Tooltip-Context.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Tooltip-Context" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Tooltip-Context" class #f 40 7 40 22 ("initialize" "Object")
        {Lisp-Entry "view" slot #f 43 8 43 12 ()}
        {Lisp-Entry "get-view" accessor #f 43 38 43 46 ()}
        {Lisp-Entry "text" slot #f 44 8 44 12 ()}
        {Lisp-Entry "get-text" accessor #f 44 38 44 46 ()}
        {Lisp-Entry "bounds" slot #f 45 8 45 14 ()}
        {Lisp-Entry "get-bounds" accessor #f 45 38 45 46 ()}
        {Lisp-Entry "position" slot #f 46 8 46 16 ()}
        {Lisp-Entry "get-position" accessor #f 46 38 46 46 ()}
        {Lisp-Entry "padding" slot #f 47 8 47 15 ()}
        {Lisp-Entry "get-padding" accessor #f 47 38 47 46 ()}
        {Lisp-Entry "font" slot #f 48 8 48 12 ()}
        {Lisp-Entry "get-font" accessor #f 48 38 48 46 ()}
        {Lisp-Entry "tooltip" slot #f 49 8 49 15 ()}
        {Lisp-Entry "get-tooltip" accessor #f 49 41 49 49 ()}
        {Lisp-Entry "set-tooltip" accessor #f 49 41 49 49 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("font~self" "padding~self" "position~self" "bounds~self" "text~self" "view~self" "set!" "nextmethod" "font" "font:" "padding" "padding:" "position" "position:" "bounds" "bounds:" "text" "text:" "view" "view:")}
        {Lisp-Entry "print" method #f 62 20 62 25 ("font" "position" "bounds" "text" "view" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}}})
"Tooltip-Label"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Tooltip-Label.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Tooltip-Label" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Tooltip-Label" class #f 46 20 46 33 ("Caption" "name:" "Font" "font:" "View")
        {Lisp-Entry "preferred-size" method #f 53 20 53 34 ("length" "13" "*" "3" "get-width" "+" "new" "localize" "effective-font" "text-extent" "str" "lambda" "map" "maximum" "extent" "20" "100" "Dimension" "null?" "if" "standard-title" "title" "let")}
        {Lisp-Entry "standard-title" method #f 66 11 66 25 ("equal?" "test:" "list" "title" "null/pair?" "if" "remove-trailing")}
        {Lisp-Entry "Background-Color" definition #f 79 14 79 30 ("Tooltip" "name:" "Color")}
        {Lisp-Entry "draw" method #f 83 20 83 24 ("13" "increase!" "localize" "draw-text" "str" "lambda" "for-each" "effective-font" "set-font" "standard-title" "title" "1" "v" "2" "h" "let" "Black" "name:" "Color" "set-text-color" "Background-Color" "get-bounds" "fill-rect" "lv" "lh" "context" "surface")}}}})
"Tooltip-Text"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Tooltip-Text.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Tooltip-Text" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Tooltip-Text" class #f 45 20 45 32 ("editable?:" "Tooltip" "Color" "background:" "text" "content" "name:" "tool" "style:" "vscroll?:" "hscroll?:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "get-text" method #f 60 18 60 26 ("text" "'text" "locate")}}}})
"Tooltip-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Tooltip-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Tooltip-Text-View" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Tooltip-Text-View" class #f 45 20 45 37 ("Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "4" "left-padding:" "Formatted-Text-View")
        {Lisp-Entry "install" method #f 52 20 52 27 ("Variable" "Code" "Dark-Blue" "Hyperlink" "Reference" "Purple" "Comment" "Dark-Red" "Color" "color:" "Title" "Doc-Heading2" "Doc-Heading1" "Font" "font:" "Text-Style" "add-style" "Heading2" "Heading1" "Default" "base:" "Heading0" "name:" "Format" "add-format" "nextmethod" "rest")}
        {Lisp-Entry "get-context-menu" method #f 70 20 70 36 ("new-text-context-menu")}}}})
"Toplevel"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "Toplevel.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.Toplevel" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Toplevel" class #f 48 7 48 15 ("visible?:" "explicit" "initialize" "Overlapped")
        {Lisp-Entry "fullscreen?" property #f 51 12 51 23 ()}
        {Lisp-Entry "previous-state" slot #f 54 8 54 22 ()}
        {Lisp-Entry "get-previous-state" accessor #f 54 51 54 59 ()}
        {Lisp-Entry "previous-position" slot #f 55 8 55 25 ()}
        {Lisp-Entry "get-previous-position" accessor #f 55 51 55 59 ()}
        {Lisp-Entry "previous-size" slot #f 56 8 56 21 ()}
        {Lisp-Entry "get-previous-size" accessor #f 56 51 56 59 ()}
        {Lisp-Entry "workspace-preferences" slot #f 57 8 57 29 ()}
        {Lisp-Entry "get-workspace-preferences" accessor #f 57 54 57 62 ()}
        {Lisp-Entry "set-workspace-preferences" accessor #f 57 54 57 62 ()}
        {Lisp-Entry "prepare-root" method #f 69 20 69 32 ()}
        {Lisp-Entry "mouse-activate?" method #f 78 20 78 35 ()}
        {Lisp-Entry "on-activate" method #f 82 20 82 31 ("nextmethod" "toplevel-deactivate" "inactive" "'inactive" "eq?" "when" "kind")}
        {Lisp-Entry "activate-application" method #f 88 20 88 40 ("processed" "get-application" "activate" "Cancel-Signal" "catch")}
        {Lisp-Entry "deactivate-application" method #f 94 20 94 42 ("processed" "get-application" "deactivate" "Cancel-Signal" "catch")}
        {Lisp-Entry "position-change" method #f 100 20 100 35 ("nextmethod" "previous-position" "set!" "get-size" "get-position" "not" "or" "and" "when" "get-workspace-preferences" "pref" "let" "position")}
        {Lisp-Entry "size-change" method #f 107 20 107 31 ("nextmethod" "get-window-size" "previous-size" "restored" "'restored" "eq?" "previous-state" "set!" "get-size" "get-position" "not" "or" "and" "when" "get-workspace-preferences" "pref" "let" "size" "state")}
        {Lisp-Entry "show" method #f 116 20 116 24 ("simulate-mouse-move" "update-window" "workspace-installed" "show-undisplayed-message" "get-application" "appl" "get-window-size" "previous-size" "get-position" "previous-position" "set-window-size" "set-position" "when" "show-restored" "'maximized" "previous-state" "set!" "show-maximized" "maximized" "restored" "'restored" "if" "case" "get-toplevel-size" "size" "get-toplevel-position" "position" "get-toplevel-state" "state" "handle" "assert" "error?:" "get-preferences" "pref" "let" "set-visible-flag")}
        {Lisp-Entry "close-window" method #f 143 20 143 32 ("processed" "get-process" "exit-process" "lambda" "delay-event")}
        {Lisp-Entry "restore-state" method #f 156 19 156 32 ("previous-size" "previous-position" "set-placement" "restored" "maximize" "maximized" "previous-state" "case")}
        {Lisp-Entry "get-fullscreen?" method #f 167 18 167 33 ("fullscreen?")}
        {Lisp-Entry "set-fullscreen?" method #f 171 18 171 33 ("set!" "fullscreen?" "neq?" "when" "value")}
        {Lisp-Entry "get-palettes" method #f 181 18 181 30 ("children" "get-visible?" "Palette" "is?" "and" "window" "lambda" "collect-if")}}}})
"Transient"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "Transient.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.Transient" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Transient" class #f 43 7 43 16 ("Popup")}}})
"Tree-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Actions" module #f 38 18 38 43 ("jazz")
      {Lisp-Entry "Tree-Actions" class #f 46 20 46 32 ("Return" ":alt" "on-properties" "properties" "Subtract" "on-collapse" "collapse" "Multiply" "on-expand-all" "expand-all" "Add" "on-expand" "expand" "Next" "on-next" "next" "Prior" "on-prior" "prior" "extend-end" "End" "on-end" "end" ":shift" "extend-home" "Home" "Shortcut" "shortcut:" "extend?:" "on-home" "home" "right" "move-right" "left" "move-left" "down" "move-downward" "up" "direction:" "on-move" ":focus" "Event-Handler" "action-handler:" "move-upward" "name:" "Actions")}}})
"Tree-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Column.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Column" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Tree-Column" class #f 49 7 49 18 ("2" "1" "0" "explicit" "initialize" "Component")
        {Lisp-Entry "title" property #f 52 22 52 27 ()}
        {Lisp-Entry "width" property #f 53 22 53 27 ()}
        {Lisp-Entry "background" property #f 54 22 54 32 ()}
        {Lisp-Entry "justification" property #f 55 22 55 35 ()}
        {Lisp-Entry "user-data" property #f 56 22 56 31 ()}
        {Lisp-Entry "get-user-data" accessor #f 56 64 56 72 ()}
        {Lisp-Entry "set-user-data" accessor #f 56 64 56 72 ()}
        {Lisp-Entry "down?" slot #f 59 18 59 23 ()}
        {Lisp-Entry "print" method #f 62 20 62 25 ("title" "name" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-title" method #f 75 18 75 27 ("title")}
        {Lisp-Entry "set-title" method #f 79 18 79 27 ("self" "invalidate-column-header" "get-header" "header" "let" "parent" "get-player" "when" "title" "set!" "value")}
        {Lisp-Entry "get-width" method #f 87 18 87 27 ("0" "width" "get-visible?" "if")}
        {Lisp-Entry "set-width" method #f 91 18 91 27 ("invalidate-view" "parent" "invalidate-columns" "width" "set!" "value")}
        {Lisp-Entry "get-background" method #f 97 18 97 32 ("background")}
        {Lisp-Entry "set-background" method #f 101 18 101 32 ("parent" "invalidate-view" "background" "set!" "value")}
        {Lisp-Entry "get-justification" method #f 106 18 106 35 ("justification")}
        {Lisp-Entry "set-justification" method #f 110 18 110 35 ("parent" "invalidate-view" "justification" "set!" "just")}
        {Lisp-Entry "set-visible?" method #f 115 20 115 32 ("invalidate-view" "fill-column" "parent" "invalidate-columns" "nextmethod" "flag")}
        {Lisp-Entry "cell-class" method #f 127 26 127 36 ()}
        {Lisp-Entry "new-empty-cell" method #f 131 26 131 40 ("title:" "cell-class" "new")}
        {Lisp-Entry "find-part" method #f 140 26 140 35 ("content" "'content" "pos" "cell")}
        {Lisp-Entry "content-rect" method #f 149 29 149 41 ("0" "Rect" "new" "get-level" "content-h" "h" "let" "height" "width" "cell" "row")}
        {Lisp-Entry "content-h" method #f 154 29 154 38 ("0" "level")}
        {Lisp-Entry "text-h" method #f 158 29 158 35 ("0" "level")}
        {Lisp-Entry "sort-value" method #f 167 29 167 39 ("get-sort-value" "data" "row")}
        {Lisp-Entry "get-header-tooltip" method #f 176 26 176 44 ("self" "parent" "get-column-tooltip")}
        {Lisp-Entry "get-data-tooltip" method #f 180 26 180 42 ("data")}
        {Lisp-Entry "header-down" method #f 189 26 189 37 ("self" "parent" "get-header" "invalidate-column-header" "down?" "set!" "pos")}
        {Lisp-Entry "header-move" method #f 194 26 194 37 ("pos")}
        {Lisp-Entry "header-up" method #f 198 26 198 35 ("header-click" "self" "parent" "get-header" "invalidate-column-header" "down?" "set!" "pos")}
        {Lisp-Entry "header-double-click" method #f 204 26 204 45 ("header-down" "pos")}
        {Lisp-Entry "mouse-down" method #f 208 26 208 36 ("complete-mouse-down" "parent" "acquire-focus" "control?" "shift?" "pos" "cell")}
        {Lisp-Entry "complete-mouse-down" method #f 213 26 213 45 ("parent" "process-selection" "control?" "shift?" "pos" "cell")}
        {Lisp-Entry "drag-move" method #f 217 26 217 35 ("pos" "cell")}
        {Lisp-Entry "drag-up" method #f 221 26 221 33 ("pos" "cell")}
        {Lisp-Entry "double-click" method #f 225 26 225 38 ("pos" "cell")}
        {Lisp-Entry "context-menu" method #f 229 26 229 38 ("parent" "call-context-menu" "pos" "cell")}
        {Lisp-Entry "layout-cell" method #f 238 26 238 37 ("Dimension" "set-size" "Point" "set-position" "merge-cell-rect" "acquire" "set-rect" "if" "self" "Site" "new" "parent" "get-merge-cell" "merge-cell" "let" "View" "is?" "when" "height" "width" "v" "h" "data" "row")}
        {Lisp-Entry "Text-Color" definition #f 252 14 252 24 ("Black" "name:" "Color")}
        {Lisp-Entry "paint-data" method #f 256 18 256 28 ("draw-data" "lambda" "with-transform" "sc?" "sc" "sv" "sh" "data" "row" "height" "width" "v" "h" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-data" method #f 262 26 262 35 ("0" "draw-at" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "draw-at" method #f 266 26 266 33 ("draw-background" "height" "width" "v" "h" "data" "row" "context" "surface")}
        {Lisp-Entry "draw-background" method #f 270 26 270 41 ("frame-rect" "get-frame-color" "frame-color" "Tree-Data" "is?" "when" "fill-rect" "background-color" "else" "Medium" "name:" "Color" "parent" "view-enabled?" "not" "cycle-debug-color!" "debug-paint?" "cond" "color" "0" "Rect" "new" "rect" "let" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "background-color" method #f 285 11 285 27 ("White" "name:" "Color" "get-cell-background" "get-background" "Tree-Data" "is?" "or" "parent" "selection-color" "cell-selected?" "and" "if" "selected?:" "getf" "selected?" "let" "context" "data")}
        {Lisp-Entry "cell-selected?" method #f 294 21 294 35 ("row" "0" "node" "merge-cell-selected?" "when" "Cell" "new" "cell->site" "get-merge-cell" "merge-cell" "get-selection" "get-col" "get-line" "=" "and" "lambda" "some?" "or" "self" "column->col" "col" "line:" "getf" "line" "let" "cell" "parent" "get-selection-mode" "case" "context")}
        {Lisp-Entry "draw-header" method #f 310 26 310 37 ("down?" "title" "localize" "draw-header-at" "enabled?" "flat?" "spaced?" "sorted" "height" "width" "v" "h" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-header-at" method #f 314 11 314 25 ("draw-raised-button" "draw-sunken-button" "if" "enabled?" "flat?" "spaced?" "sorted" "down?" "title" "height" "width" "v" "h" "lv" "lh" "surface")}
        {Lisp-Entry "draw-raised-button" method #f 320 11 320 29 ("draw-sorted" "draw-text" "lambda" "1.0" "-" "with-transform" "Dark" "Black" "name:" "Color" "set-text-color" "parent" "header-color" "background" "or" "fill-rect" "rect" "bottom" "right" "outer:" "rectangle" "'rectangle" "left" "top" "edges:" "raised" "'raised" "inner:" "draw-edge" "smaller" "header-title-h" "text-h" "0" "1" "expand-rect" "inner" "+" "Rect" "new" "outer" "let*" "-2" "-1" "if" "thick" "let" "enabled?" "flat?" "spaced?" "sorted" "title" "height" "width" "v" "h" "lv" "lh" "surface")}
        {Lisp-Entry "header-title-h" method #f 342 29 342 43 ("justification" "4" "-" "justify-title" "get-h" "2" "+" "title" "height" "width" "surface")}
        {Lisp-Entry "justify-title" method #f 346 21 346 34 ("list" "pair?" "if" "Dimension" "new" "get-text-extent" "lambda" "justify-lazy" "justification" "title" "height" "width" "surface")}
        {Lisp-Entry "draw-sorted" definition #f 356 15 356 26 ("down" "'down" "descending" "up" "'up" "draw-arrow-tip" "ascending" "case" "4" "size" "6" "+" "get-text-width" "width" "let*" "Dark" "name:" "Color" "set-color" "when" "sorted" "title" "v" "h" "surface")}
        {Lisp-Entry "draw-sunken-button" method #f 368 11 368 29 ("draw-sorted" "2" "draw-text" "lambda" "1.0" "0" "-" "with-transform" "Black" "if" "set-text-color" "parent" "header-color" "background" "or" "fill-rect" "frame-rect" "Dark" "name:" "Color" "set-color" "1" "header-title-h" "text-h" "-1" "inflate-rect" "inner" "+" "Rect" "new" "outer" "let*" "enabled?" "flat?" "spaced?" "sorted" "title" "height" "width" "v" "h" "lv" "lh" "surface")}
        {Lisp-Entry "get-debugged" method #f 387 26 387 38 ("values" "pos" "cell")}
        {Lisp-Entry "get-class-descriptor" method #f 396 25 396 45 ("Tree-Column-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 405 11 405 17 ()
        {Lisp-Entry "Tree-Column-Descriptor" class #f 411 7 411 29 ("justification" "background" "width" "title:" "title" "name:" "can-move?:" "Image-Resource" "image:" "Component-Descriptor")}}}})
"Tree-Data"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Data.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Data" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Tree-Data" class #f 43 7 43 16 ("Object")
        {Lisp-Entry "background" slot #f 46 18 46 28 ()}
        {Lisp-Entry "get-background" accessor #f 46 40 46 48 ()}
        {Lisp-Entry "set-background" accessor #f 46 40 46 48 ()}
        {Lisp-Entry "frame-color" slot #f 47 18 47 29 ()}
        {Lisp-Entry "get-frame-color" accessor #f 47 40 47 48 ()}
        {Lisp-Entry "set-frame-color" accessor #f 47 40 47 48 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("frame-color~self" "background~self" "set!" "nextmethod" "frame-color" "frame-color:" "background" "background:")}
        {Lisp-Entry "print" method #f 56 20 56 25 ("frame-color" "background" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}}})
"Tree-Data-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Data-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Data-View" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Tree-Data-View" class #f 44 20 44 34 ("fill" "layout-type:" "initialize" "Layout-View")
        {Lisp-Entry "cover-spacing?" property #f 47 12 47 26 ()}
        {Lisp-Entry "get-cover-spacing?" accessor #f 47 52 47 60 ()}
        {Lisp-Entry "set-cover-spacing?" accessor #f 47 52 47 60 ()}
        {Lisp-Entry "preserved-data" property #f 48 12 48 26 ()}
        {Lisp-Entry "get-preserved-data" accessor #f 48 52 48 60 ()}
        {Lisp-Entry "set-preserved-data" accessor #f 48 52 48 60 ()}
        {Lisp-Entry "before-end" property #f 49 12 49 22 ()}
        {Lisp-Entry "get-before-end" accessor #f 49 52 49 60 ()}
        {Lisp-Entry "set-before-end" accessor #f 49 52 49 60 ()}
        {Lisp-Entry "after-end" property #f 50 12 50 21 ()}
        {Lisp-Entry "get-after-end" accessor #f 50 52 50 60 ()}
        {Lisp-Entry "set-after-end" accessor #f 50 52 50 60 ()}
        {Lisp-Entry "get-editor" method #f 62 18 62 28 ("first-child")}
        {Lisp-Entry "draw" method #f 71 20 71 24 ("lv" "lh" "context" "surface")}}}})
"Tree-Drag-Source"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Drag-Source.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Drag-Source" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Tree-Drag-Source" class #f 43 7 43 23 ("initialize" "Drag-Source")
        {Lisp-Entry "row" slot #f 46 8 46 11 ()}
        {Lisp-Entry "get-row" accessor #f 46 33 46 41 ()}
        {Lisp-Entry "col" slot #f 47 8 47 11 ()}
        {Lisp-Entry "get-col" accessor #f 47 33 47 41 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("col~self" "row~self" "set!" "nextmethod" "apply" "others" "col" "row" "bind-keywords" "rest")}
        {Lisp-Entry "get-cell" method #f 62 18 62 26 ("col" "row" "view" "row->line" "Cell" "new")}}}})
"Tree-Drop-Target"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Drop-Target.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Drop-Target" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Tree-Drop-Target" class #f 43 7 43 23 ("Drop-Target")
        {Lisp-Entry "row" slot #f 46 8 46 11 ()}
        {Lisp-Entry "get-row" accessor #f 46 23 46 31 ()}
        {Lisp-Entry "col" slot #f 47 8 47 11 ()}
        {Lisp-Entry "get-col" accessor #f 47 23 47 31 ()}
        {Lisp-Entry "quarter" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-quarter" accessor #f 48 23 48 31 ()}
        {Lisp-Entry "part" slot #f 49 8 49 12 ()}
        {Lisp-Entry "get-part" accessor #f 49 23 49 31 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("part~self" "quarter~self" "col~self" "row~self" "set!" "nextmethod" "apply" "others" "'row" "part" "quarter" "col" "row" "bind-keywords" "rest")}
        {Lisp-Entry "print" method #f 61 20 61 25 ("part" "quarter" "col" "row" "view" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-cell" method #f 72 18 72 26 ("col" "row" "view" "row->line" "Cell" "new")}}}})
"Tree-Embedded-Search-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Embedded-Search-Text-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Embedded-Search-Text-Actions" module #f 37 18 37 64 ("jazz")
      {Lisp-Entry "Tree-Embedded-Search-Text-Actions" class #f 45 20 45 53 ("Return" ":control" "Shortcut" "shortcut:" "on-end-edition" ":focus" "Event-Handler" "action-handler:" "end-edition" "name:" "Actions")}}})
"Tree-Embedded-Search-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Embedded-Search-Text-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Embedded-Search-Text-View" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Tree-Embedded-Search-Text-View" class #f 48 20 48 50 ("IDE-Text-View")
        {Lisp-Entry "tree" slot #f 51 8 51 12 ()}
        {Lisp-Entry "set-tree" method #f 59 18 59 26 ("tree" "set!" "t")}
        {Lisp-Entry "get-tree" method #f 68 11 68 19 ("tree")}
        {Lisp-Entry "get-cell" method #f 72 11 72 19 ("get-tree" "get-edited-cell")}
        {Lisp-Entry "get-cell-values" method #f 76 11 76 26 ("get-col" "get-line" "values" "get-cell" "cell" "let")}
        {Lisp-Entry "focus-actions" method #f 86 20 86 33 ("nextmethod" "tree-embedded-search-text" "'tree-embedded-search-text" "find-actions" "cons")}
        {Lisp-Entry "upward-compound" method #f 92 20 92 35 ("get-guest" "toggle-play-recording")}
        {Lisp-Entry "focus-lose" method #f 101 20 101 30 ("end-edition" "lambda" "delay-event" "nextmethod")}
        {Lisp-Entry "return-press" method #f 108 20 108 32 ("on-search" "bell" "get-find-targets" "get-contexts" "null?" "if" "get-search" "search" "end-edition" "get-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-end-edition" method #f 117 11 117 25 ("end-edition" "key")}
        {Lisp-Entry "tab-press" method #f 121 20 121 29 ("end-edition" "select-cell" "when" "Cell" "new" "cell" "+" "modulo" "else" "-1" "cond" "row-direction" "1" "-" "max-col" "navigate-tab" "0" "=" "get-cell-values" "col" "line" "receive" "get-visible-count" "height" "get-columns-count" "width" "neq?" "to-navigable?" "navigated-view" "to-view" "find-tab-manager" "tab-manager" "get-tree" "tree" "let*" "end-completion" "not" "has-completion?" "and" "if" "shift-key?" "shift?" "let" "modifiers" "key")}
        {Lisp-Entry "left-arrow-move" method #f 147 20 147 35 ("nextmethod" "get-cell" "get-tree" "select-left" "if" "word?" "extend?")}
        {Lisp-Entry "right-arrow-move" method #f 153 20 153 36 ("nextmethod" "get-cell" "get-tree" "select-right" "if" "word?" "extend?")}
        {Lisp-Entry "up-arrow-move" method #f 159 20 159 33 ("get-cell" "get-tree" "select-up" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method #f 163 20 163 35 ("get-cell" "get-tree" "select-down" "scroll?" "extend?")}
        {Lisp-Entry "end-edition" method #f 167 11 167 22 ("get-tree" "end-edition" "player" "when")}}}})
"Tree-Header"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Header.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Header" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Tree-Header" class #f 52 7 52 18 ("0" "explicit" "initialize" "Header-View")
        {Lisp-Entry "empty-background" property #f 55 12 55 28 ()}
        {Lisp-Entry "resizing?" slot #f 58 18 58 27 ()}
        {Lisp-Entry "autofiting?" slot #f 59 18 59 29 ()}
        {Lisp-Entry "resized-column" slot #f 60 18 60 32 ()}
        {Lisp-Entry "resized-column-ref" slot #f 61 18 61 36 ()}
        {Lisp-Entry "resize-start-width" slot #f 62 18 62 36 ()}
        {Lisp-Entry "resize-start-h" slot #f 63 18 63 32 ()}
        {Lisp-Entry "initial-row" slot #f 64 18 64 29 ()}
        {Lisp-Entry "finish" method #f 67 20 67 26 ("invalidate-layout" "nextmethod" "rest")}
        {Lisp-Entry "get-empty-background" method #f 77 18 77 38 ("empty-background")}
        {Lisp-Entry "set-empty-background" method #f 81 18 81 38 ("invalidate-view" "set!" "empty-background" "neq?" "when" "value")}
        {Lisp-Entry "find-client" method #f 92 20 92 31 ("content" "'content" "child" "get-scroll-client")}
        {Lisp-Entry "get-column" method #f 101 18 101 28 ("get-columns" "element" "col")}
        {Lisp-Entry "column->col" method #f 105 18 105 29 ("get-columns" "find" "column")}
        {Lisp-Entry "borders-left" definition #f 114 15 114 27 ("car" "borders")}
        {Lisp-Entry "borders-right" definition #f 118 15 118 28 ("cdr" "borders")}
        {Lisp-Entry "get-borders" method #f 122 18 122 29 ("get-columns-borders" "element" "col")}
        {Lisp-Entry "column-width" method #f 126 18 126 30 ("-" "get-borders" "right" "left" "bind" "col")}
        {Lisp-Entry "get-columns" method #f 136 11 136 22 ("get-client" "get-columns")}
        {Lisp-Entry "get-columns-count" method #f 140 11 140 28 ("get-client" "get-columns-count")}
        {Lisp-Entry "get-columns-borders" method #f 144 11 144 30 ("get-client" "get-columns-borders")}
        {Lisp-Entry "invalidate-columns" method #f 148 11 148 29 ("get-client" "invalidate-columns")}
        {Lisp-Entry "invalidate-borders" method #f 152 11 152 29 ("get-client" "invalidate-borders")}
        {Lisp-Entry "layout-column" method #f 156 11 156 24 ("get-client" "layout-column" "column")}
        {Lisp-Entry "get-rows" method #f 165 11 165 19 ("get-client" "get-root-rows")}
        {Lisp-Entry "invalidate-row-selector" method #f 169 18 169 41 ("invalidate-rect" "selector-rect" "rect" "let" "get-finished?" "when" "row")}
        {Lisp-Entry "selector-rect" method #f 175 18 175 31 ("+" "get-selector-width" "0" "Rect" "new" "parent" "get-height" "height" "let" "row")}
        {Lisp-Entry "size-change" method #f 185 20 185 31 ("layout-scrollee" "when" "get-client" "client" "let" "nextmethod" "size")}
        {Lisp-Entry "set-scroller" method #f 197 20 197 32 ("get-client" "set-scroller" "view")}
        {Lisp-Entry "get-scroll-client" method #f 201 20 201 37 ("get-client" "get-scroll-client")}
        {Lisp-Entry "get-hscroll-amount" method #f 205 11 205 29 ("0" "get-position" "get-h" "get-selector-width" "+" "if" "get-client" "client" "let")}
        {Lisp-Entry "get-vscroll-amount" method #f 210 11 210 29 ("0" "get-position" "get-v" "get-header-height" "+" "if" "get-client" "client" "let")}
        {Lisp-Entry "on-vscroll" method #f 216 20 216 30 ("on-vscroll" "when" "get-client" "client" "let" "orientation" "thumb-pos" "code")}
        {Lisp-Entry "on-hscroll" method #f 223 20 223 30 ("on-hscroll" "when" "get-client" "client" "let" "orientation" "thumb-pos" "code")}
        {Lisp-Entry "draw" method #f 234 20 234 24 ("get-selector-width" "draw-selector" "get-height" "row-height" "row" "get-rows" "iterate" "get-row-spacing" "get-vscroll-amount" "selector?" "increase!" "line" "-" "set-line-width" "set-color" "eq?" "draw-header" "descending" "'descending" "ascending" "'ascending" "=" "sorted" "get-visible?" "column" "lambda" "for-each" "rank" "enabled?" "get-flat?" "get-look" "look" "last" "not-null?" "and" "last-column" "get-columns" "columns" ">" "spaced?" "get-sort-ascending?" "sort-ascending?" "get-sorted-column" "sorted-column" "get-column-spacing" "cs" "get-hscroll-amount" "get-top" "<" "when" "Medium" "empty-background" "Dark" "view-enabled?" "get-header-height" "get-width" "get-columns-right" "right" "get-logical-clipper" "clipper" "get-client" "Black" "name:" "Color" "set-text-color" "header-color" "background" "or" "fill-rect" "left" "top" "edges:" "raised" "'raised" "inner:" "draw-edge" "0" "smaller" "1" "expand-rect" "inner" "+" "Rect" "new" "outer" "let*" "-2" "-1" "if" "thick" "let" "flat?" "height" "width" "v" "h" "client" "draw-intersection" "define" "lv" "lh" "context" "surface")}
        {Lisp-Entry "cursor-update" method #f 296 20 296 33 (":arrow" ":west-east" "set-cursor" "get-hscroll-amount" "get-h" "-" "resized-col" "resizing?" "or" "client" "view-enabled?" "and" "if" "pos")}
        {Lisp-Entry "calculate-tooltip-bounds" method #f 307 11 307 35 ("0" "header-rect" "offset-rect" "get-hscroll-amount" "hscrolled" "let" "column")}
        {Lisp-Entry "get-tooltip-bounds" method #f 312 20 312 38 ("get-column" "calculate-tooltip-bounds" "when" "h->col" "col" "get-h" "-" "h" "get-hscroll-amount" "hscrolled" "let*" "pos")}
        {Lisp-Entry "get-tooltip-context" method #f 320 20 320 39 ("bounds:" "text:" "self" "view:" "Tooltip-Context" "new" "0" "header-rect" "offset-rect" "rect" "get-header-tooltip" "text" "get-column" "column" "let" "h->col" "col" "get-h" "-" "h" "get-hscroll-amount" "hscrolled" "let*" "when" "pos")}
        {Lisp-Entry "mouse-down" method #f 341 20 341 30 ("selector-down" "initial-row" "get-row" "row" "v->row" "row-no" "get-client" "tree" "resize-start-h" "get-width" "resize-start-width" "resized-column-ref" "resized-column" "resizing?" "header-coordinates" "header-down" "get-column" "column" "h->col" "not" "if" "resized-col" "col" "get-vscroll-amount" "get-v" "v" "get-hscroll-amount" "get-h" "-" "h" "let" "autofiting?" "set!" "acquire-capture" "client" "view-enabled?" "and" "when" "pos")}
        {Lisp-Entry "drag-move" method #f 367 20 367 29 ("selector-move" "get-row" "row" "v->row" "row-no" "get-client" "initial-row" "resized-column" "resize-column" "min-column-width" "resize-start-width" "+" "max" "width" "resize-start-h" "delta" "header-coordinates" "header-move" "get-column" "column" "h->col" "col" "resizing?" "not" "if" "get-vscroll-amount" "get-v" "v" "get-hscroll-amount" "get-h" "-" "h" "let" "client" "view-enabled?" "and" "when" "pos")}
        {Lisp-Entry "drag-up" method #f 388 20 388 27 ("release-capture" "resized-column" "set!" "selector-up" "get-row" "row" "tree" "initial-row" "header-coordinates" "header-up" "get-column" "column" "h->col" "col" "autofiting?" "unless" "resizing?" "not" "if" "get-vscroll-amount" "get-v" "v" "get-hscroll-amount" "get-h" "-" "h" "let" "client" "view-enabled?" "and" "when" "rest" "pos")}
        {Lisp-Entry "double-click" method #f 409 20 409 32 ("header-coordinates" "header-double-click" "column" "h->col" "autofiting?" "set!" "get-column" "autofit-column" "begin" "if" "resized-col" "col" "get-v" "v" "get-hscroll-amount" "get-h" "-" "h" "let" "client" "view-enabled?" "and" "when" "pos")}
        {Lisp-Entry "resize-column" method #f 424 11 424 24 ("get-height" "2" "Rect" "new" "scroll-view" "update-view" "invalidate-view" "layout-scrollee" "layout-column" "invalidate-borders" "invalidate-columns" "set-width" "client" "set-filled-column" "get-hscroll-amount" "get-client" "column->col" "get-borders" "borders-right" "+" "left" "get-width" "-" "delta" "let" "0" ">=" "when" "width" "column")}
        {Lisp-Entry "autofit-column" method #f 440 11 440 25 ("min-column-width" "max" "resize-column" "set!" ">" "2" "effective-font" "text-width" "get-level" "text-h" "+" "width" "get-title" "title" "Tree-Label" "is?" "when" "get-child" "data" "rank" "row" "lambda" "for-each-visible-row" "0" "max-width" "column->col" "col" "tree" "get-client" "client" "let" "column")}
        {Lisp-Entry "header-coordinates" method #f 459 11 459 29 ("header-position" "point-" "pos" "col")}
        {Lisp-Entry "resized-col" method #f 463 11 463 22 ("continuation-return" "4" "near?" "when" "right" "left" "bind" "get-columns-count" "below" "0" "from" "col" "get-columns-borders" "in" "borders" "for" "loop" "return" "lambda" "continuation-capture" "h")}
        {Lisp-Entry "invalidate-column-header" method #f 479 18 479 42 ("invalidate-rect" "header-rect" "rect" "let" "get-finished?" "when" "column")}
        {Lisp-Entry "header-rect" method #f 485 18 485 29 ("get-height" "0" "Rect" "new" "column->col" "get-borders" "right" "left" "bind" "column")}
        {Lisp-Entry "header-position" method #f 495 11 495 26 ("0" "get-borders" "borders-left" "Point" "new" "col")}
        {Lisp-Entry "h->col" method #f 499 11 499 17 ("continuation-return" "<=" ">=" "and" "when" "right" "left" "bind" "get-columns-count" "below" "0" "from" "n" "get-columns-borders" "in" "borders" "for" "loop" "return" "lambda" "continuation-capture" "h")}}}})
"Tree-Highlight"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Highlight.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Highlight" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Tree-Highlight" class #f 43 20 43 34 ("Object")
        {Lisp-Entry "row" slot #f 46 8 46 11 ()}
        {Lisp-Entry "get-row" accessor #f 46 27 46 35 ()}
        {Lisp-Entry "col" slot #f 47 8 47 11 ()}
        {Lisp-Entry "get-col" accessor #f 47 27 47 35 ()}
        {Lisp-Entry "insert" slot #f 48 8 48 14 ()}
        {Lisp-Entry "get-insert" accessor #f 48 27 48 35 ()}
        {Lisp-Entry "outer-color" slot #f 49 8 49 19 ()}
        {Lisp-Entry "get-outer-color" accessor #f 49 27 49 35 ()}
        {Lisp-Entry "inner-color" slot #f 50 8 50 19 ()}
        {Lisp-Entry "get-inner-color" accessor #f 50 27 50 35 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("inner-color~self" "outer-color~self" "insert~self" "col~self" "row~self" "set!" "nextmethod" "inner-color" "inner-color:" "outer-color" "outer-color:" "insert" "insert:" "col" "row")}
        {Lisp-Entry "compare-object" method #f 62 20 62 34 (":not-equal" "else" ":equal" "get-insert" "insert" "get-col" "col" "=" "get-row" "row" "eq?" "and" ":incompatible" "Tree-Highlight" "is-not?" "cond" "target")}}}})
"Tree-Image"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Image.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Image" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Tree-Image" class #f 43 7 43 17 ("Tree-Label")
        {Lisp-Entry "image" slot #f 46 18 46 23 ()}
        {Lisp-Entry "get-image" accessor #f 46 34 46 42 ()}
        {Lisp-Entry "set-image" accessor #f 46 34 46 42 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("image~self" "set!" "nextmethod" "apply" "others" "image" "bind-keywords" "rest")}
        {Lisp-Entry "print" method #f 55 20 55 25 ("image" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-sort-value" method #f 66 20 66 34 ("image")}}}})
"Tree-Image-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Image-Column.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Image-Column" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Tree-Image-Column" class #f 45 7 45 24 ("Tree-Label-Column")
        {Lisp-Entry "draw-data" method #f 53 20 53 29 ("draw-title" "draw-image" "1" "2" "16" "-" "quotient" "+" "0" "if" "h" "get-title" "title" "get-images-portfolio" "images" "get-application" "appl" "let*" "when" "get-image" "image" "let" "draw-background" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "sort-value" method #f 71 20 71 30 ("get-name" "not" "if" "get-image" "image" "let" "get-title" "or" "data" "row")}}}})
"Tree-Label"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Label.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Label" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Tree-Label" class #f 45 7 45 17 ("Tree-Data")
        {Lisp-Entry "title" slot #f 48 18 48 23 ()}
        {Lisp-Entry "font" slot #f 49 18 49 22 ()}
        {Lisp-Entry "get-font" accessor #f 49 34 49 42 ()}
        {Lisp-Entry "set-font" accessor #f 49 34 49 42 ()}
        {Lisp-Entry "color" slot #f 50 18 50 23 ()}
        {Lisp-Entry "get-color" accessor #f 50 34 50 42 ()}
        {Lisp-Entry "set-color" accessor #f 50 34 50 42 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("color~self" "font~self" "set!" "set-title" "nextmethod" "apply" "others" "color" "font" "title" "bind-keywords" "rest")}
        {Lisp-Entry "print" method #f 61 20 61 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-title" method #f 72 18 72 27 ("title")}
        {Lisp-Entry "set-title" method #f 76 18 76 27 ("->string" "Locales" "is?" "if" "and" "title" "set!" "value")}
        {Lisp-Entry "get-sort-value" method #f 85 20 85 34 ("title")}}}})
"Tree-Label-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Label-Column.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Label-Column" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Tree-Label-Column" class #f 46 7 46 24 ("explicit" "0" "initialize" "Tree-Column")
        {Lisp-Entry "padding" property #f 49 22 49 29 ()}
        {Lisp-Entry "cell-class" method #f 57 20 57 30 ("Tree-Label")}
        {Lisp-Entry "get-padding" method #f 66 18 66 29 ("padding")}
        {Lisp-Entry "set-padding" method #f 70 18 70 29 ("parent" "invalidate-view" "padding" "set!" "value")}
        {Lisp-Entry "get-data-tooltip" method #f 80 20 80 36 ("get-title" "Tree-Label" "is?" "when" "data")}
        {Lisp-Entry "Default-Color" definition #f 90 14 90 27 ("Black" "name:" "Color")}
        {Lisp-Entry "draw-at" method #f 94 20 94 27 ("draw-title" "nextmethod" "height" "width" "v" "h" "data" "row" "context" "surface")}
        {Lisp-Entry "draw-title" method #f 99 29 99 39 ("get-v" "0" "else" "-1" "-" "tail" "padding" "1" "head" "justification" "case" "get-h" "+" "draw-text" "title-position" "pos" "set-font" "cell-color" "set-text-color" "get-color" "color" "parent" "effective-font" "get-font" "font" "get-title" "or" "localize" "title" "let" "height" "width" "v" "h" "data" "row" "context" "surface")}
        {Lisp-Entry "title-position" method #f 109 29 109 43 ("justification" "justify-title" "title" "height" "width" "surface")}
        {Lisp-Entry "cell-color" method #f 113 21 113 31 ("Default-Color" "else" "selected-text-color" "Dark" "name:" "Color" "not" "cond" "focused?" "determine-color" "or" "cell-selected?" "selected?:" "getf" "and" "selected?" "parent" "view-enabled?" "enabled?" "let" "context" "color")}
        {Lisp-Entry "text-h" method #f 123 20 123 26 ("1" "level")}
        {Lisp-Entry "get-class-descriptor" method #f 132 25 132 45 ("Tree-Label-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 141 11 141 17 ()
        {Lisp-Entry "Tree-Label-Descriptor" class #f 147 7 147 28 ("title:" "padding" "name:" "Tree-Column-Descriptor")}}}})
"Tree-Node"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Node.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Node" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Tree-Node" class #f 43 7 43 16 ("Tree-Label")
        {Lisp-Entry "image" slot #f 46 18 46 23 ()}
        {Lisp-Entry "get-image" accessor #f 46 34 46 42 ()}
        {Lisp-Entry "set-image" accessor #f 46 34 46 42 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("image~self" "set!" "break" "title:" "getf" "not" "when" "nextmethod" "apply" "others" "image" "bind-keywords" "rest")}}}})
"Tree-Node-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Node-Column.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Node-Column" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Tree-Node-Column" class #f 47 7 47 23 ("1" "explicit" "initialize" "Tree-Label-Column")
        {Lisp-Entry "controls?" property #f 50 22 50 31 ()}
        {Lisp-Entry "toplevel-controls?" property #f 51 22 51 40 ()}
        {Lisp-Entry "display-images?" property #f 52 22 52 37 ()}
        {Lisp-Entry "image-offset" slot #f 55 8 55 20 ()}
        {Lisp-Entry "get-controls?" method #f 63 18 63 31 ("controls?")}
        {Lisp-Entry "set-controls?" method #f 67 18 67 31 ("parent" "invalidate-view" "controls?" "set!" "flag")}
        {Lisp-Entry "get-toplevel-controls?" method #f 72 18 72 40 ("toplevel-controls?")}
        {Lisp-Entry "set-toplevel-controls?" method #f 76 18 76 40 ("parent" "invalidate-view" "toplevel-controls?" "set!" "flag")}
        {Lisp-Entry "get-display-images?" method #f 81 18 81 37 ("display-images?")}
        {Lisp-Entry "set-display-images?" method #f 85 18 85 37 ("parent" "invalidate-view" "display-images?" "set!" "flag")}
        {Lisp-Entry "set-image-offset" method #f 90 18 90 34 ("parent" "invalidate-view" "image-offset" "set!" "offset")}
        {Lisp-Entry "cell-class" method #f 100 20 100 30 ("Tree-Node")}
        {Lisp-Entry "complete-mouse-down" method #f 109 20 109 39 ("process-selection" "content" "expand/collapse" "control" "find-part" "case" "get-line" "parent" "get-row" "row" "let" "control?" "shift?" "pos" "cell")}
        {Lisp-Entry "double-click" method #f 116 20 116 32 ("get-line" "get-row" "parent" "expand/collapse" "pos" "cell")}
        {Lisp-Entry "find-part" method #f 125 20 125 29 ("content" "'content" "control" "'control" "13" "<" "4" "+" ">=" "toplevel-controls?" "controls?" "and" "if" "get-line" "parent" "get-row" "get-level" "level-h" "base" "get-v" "v" "get-h" "h" "let" "pos" "cell")}
        {Lisp-Entry "row-text-left" method #f 139 21 139 34 ("1" "get-level" "text-h" "-" "row")}
        {Lisp-Entry "text-rect" method #f 143 21 143 30 ("4" "+" "0" "Rect" "new" "get-columns-count" "<=" "if" "min" "get-width" "title-width" "text-extent" "extent" "let" "parent" "effective-font" "get-font" "or" "font" "2" "max" "1" "get-level" "text-h" "-" "h" "get-title" "localize" "title" "let*" "force-node?" "height" "width" "data" "row")}
        {Lisp-Entry "control-rect" method #f 159 21 159 33 ("13" "4" "+" "Rect" "new" "get-level" "control-h" "h" "let" "top" "row")}
        {Lisp-Entry "plus/minus-rect" method #f 164 21 164 36 ("12" "5" "+" "Rect" "new" "get-level" "control-h" "h" "let" "top" "row")}
        {Lisp-Entry "image-rect" method #f 169 21 169 31 ("16" "0" "+" "Rect" "new" "get-level" "image-h" "h" "let" "top" "row")}
        {Lisp-Entry "layout-cell" method #f 179 20 179 31 ("-" "Dimension" "set-size" "+" "Point" "new" "set-position" "get-level" "image-h" "offset" "let" "View" "is?" "when" "height" "width" "v" "h" "data" "row")}
        {Lisp-Entry "Line-Color" definition #f 191 14 191 24 ("Dark" "name:" "Color")}
        {Lisp-Entry "draw-data" method #f 195 20 195 29 ("0" "draw-title" "draw-image" "draw-control" "draw-level" "draw-background" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "draw-background" method #f 203 20 203 35 ("frame-rect" "get-frame-color" "frame-color" "gradient-fill" "" "apply" "pair?" "selection-color" "get-left" "r" "when" "get-background" "background" "text-rect" "cell-selected?" "and" "selected?:" "getf" "selected?" "White" "name:" "Color" "parent" "get-cell-background" "or" "cycle-debug-color!" "debug-paint?" "if" "fill-rect" "0" "Rect" "new" "rect" "let" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "draw-level" method #f 226 18 226 28 ("Black" "name:" "Color" "solid" "'solid" "get-father" "set!" "19" "horz-adjusted" "odd?" "and" "half-adjusted" "-1" "top-adjusted" "2" "fxround/" "half" "let*" "8" "+" "line" "0" "even?" "adjust" "when" "/=" "if" "visible-sibling-follows?" "sf?" "level-h" "h" "downto" "from" "n" "for" "loop" "get-position" "get-v" "row-v" "get-level" "level" "let" "1" "set-line-width" "Line-Color" "set-color" "alternate" "'alternate" "set-style" "height" "width" "data" "row" "surface")}
        {Lisp-Entry "draw-control" method #f 250 21 250 33 ("expanded" "'expanded" "get-state" "neq?" "11" "8" "6" "line" "1" "set-line-width" "Black" "set-color" "White" "name:" "Color" "fill-rect" "12" "5" "parent" "get-background" "background" "Line-Color" "frame-rect" "13" "4" "+" "Rect" "new" "rect" "control-h" "h" "let" "toplevel-controls?" "not" "or" "controls?" "expandable?" "and" "when" "0" "=" "toplevel?" "get-level" "level" "let*" "height" "width" "data" "row" "surface")}
        {Lisp-Entry "draw-image" method #f 268 11 268 21 ("0" "White" "name:" "Color" "parent" "get-portfolio" "draw-opaque-image" "display-images?" "and" "when" "get-image" "image" "get-level" "image-h" "h" "let" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "draw-title" method #f 275 20 275 30 ("draw-text" "set-font" "get-color" "cell-color" "set-text-color" "parent" "effective-font" "get-font" "font" "title-position" "get-v" "get-level" "text-h" "get-title" "or" "localize" "title" "let" "height" "width" "v" "h" "data" "row" "context" "surface")}
        {Lisp-Entry "level-h" method #f 285 11 285 18 ("16" "toplevel-controls?" "0" "=" "or" "if" "parent" "get-indentation" "*" "-" "level")}
        {Lisp-Entry "control-h" method #f 290 11 290 20 ("level-h" "level")}
        {Lisp-Entry "image-h" method #f 294 18 294 25 ("image-offset" "display-images?" "16" "toplevel-controls?" "0" "/=" "or" "if" "control-h" "+" "level")}
        {Lisp-Entry "content-h" method #f 298 20 298 29 ("0" "14" "display-images?" "if" "image-h" "+" "level")}
        {Lisp-Entry "text-h" method #f 302 20 302 26 ("4" "3" "0" "16" "display-images?" "if" "image-h" "+" "level")}
        {Lisp-Entry "get-debugged" method #f 311 20 311 32 ("find-part" "values" "pos" "cell")}
        {Lisp-Entry "get-class-descriptor" method #f 320 25 320 45 ("Tree-Node-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 329 11 329 17 ()
        {Lisp-Entry "Tree-Node-Descriptor" class #f 336 7 336 27 ("display-images?" "toplevel-controls?" "title:" "controls?" "name:" "Image-Resource" "image:" "Tree-Label-Descriptor")}}}})
"Tree-Path"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Path.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Path" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Tree-Path" class #f 43 20 43 29 ("Tree-Label")
        {Lisp-Entry "father-row" slot #f 46 18 46 28 ()}
        {Lisp-Entry "get-father-row" accessor #f 46 36 46 44 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("update-path-title" "father-row~self" "set!" "nextmethod" "apply" "rest" "father-row")}
        {Lisp-Entry "update-path-title" method #f 60 18 60 35 ("list" "join" "if" "set-title" "father-path" "get-title" "father-title" "get-path-child" "path-cell" "get-node-child" "title-cell" "let*" "0" "get-level" ">" "father-row" "when")}}}})
"Tree-Path-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Path-Column.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Path-Column" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Tree-Path-Column" class #f 43 20 43 36 ("Tree-Label-Column")}}})
"Tree-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "Tree-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.Tree-Preferences" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Tree-Preferences" class #f 46 20 46 36 ("Image-Resource" "icon:" "title:" "initialize" "Preferences")
        {Lisp-Entry "sort-case-sensitive?" property #f 49 12 49 32 ()}
        {Lisp-Entry "get-sort-case-sensitive?" accessor #f 49 57 49 65 ()}
        {Lisp-Entry "set-sort-case-sensitive?" accessor #f 49 57 49 65 ()}
        {Lisp-Entry "get-class-descriptor" method #f 61 25 61 45 ("Tree-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 70 11 70 17 ()
        {Lisp-Entry "Tree-Preferences-Descriptor" class #f 76 7 76 34 ("domain" "title:" "name:" "sort-case-sensitive?" "categorized:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")}}}})
"Tree-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-Row.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-Row" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Tree-Row" class #f 46 7 46 15 ("explicit" "initialize" "Outline-Row")
        {Lisp-Entry "user-data" property #f 49 22 49 31 ()}
        {Lisp-Entry "get-user-data" accessor #f 49 57 49 65 ()}
        {Lisp-Entry "set-user-data" accessor #f 49 57 49 65 ()}
        {Lisp-Entry "background" property #f 50 22 50 32 ()}
        {Lisp-Entry "node-width" slot #f 53 18 53 28 ()}
        {Lisp-Entry "get-node-width" accessor #f 53 50 53 58 ()}
        {Lisp-Entry "down?" slot #f 54 18 54 23 ()}
        {Lisp-Entry "default-size" method #f 57 20 57 32 ("17" "100" "Dimension")}
        {Lisp-Entry "initialize" method #f 66 20 66 30 ("set-visible-flag" "set-finished?" "set-installed?" "user-data~self" "set-children" "row-height~self" "state~self" "level~self" "father~self" "parent~self" "set!" "nextmethod" "user-data" "user-data:" "visible?" "visible?:" "children" "children:" "row-height" "row-height:" "collapsed" "'collapsed" "state" "state:" "level" "level:" "father" "father:" "parent" "parent:")}
        {Lisp-Entry "print" method #f 85 20 85 25 ("user-data" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-tree" method #f 96 18 96 26 ("parent")}
        {Lisp-Entry "get-background" method #f 100 18 100 32 ("background")}
        {Lisp-Entry "set-background" method #f 104 18 104 32 ("parent" "invalidate-view" "background" "set!" "value")}
        {Lisp-Entry "set-children" method #f 114 20 114 32 ("add-child" "self" "set-parent" "View" "if" "child" "lambda" "for-each" "children" "get-title" "localize" "parent" "effective-font" "text-width" "node-width" "set!" "Tree-Node" "is?" "car" "node" "not-null?" "get-columns" "length" "=" "assert" "when" "get-tree" "tree" "let" "lst")}
        {Lisp-Entry "replace-child" method #f 130 20 130 33 ("parent" "layout-scrollee" "remove!" "insert!" "set!" "self" "set-parent" "begin" "View" "is?" "if" "children" "element" "current" "let" "child" "rank")}
        {Lisp-Entry "get-child" method #f 143 18 143 27 ("children" "element" "rank")}
        {Lisp-Entry "get-node-child" method #f 147 18 147 32 ("children" "Tree-Node" "is?" "child" "lambda" "find-if")}
        {Lisp-Entry "get-path-child" method #f 153 18 153 32 ("children" "Tree-Path" "is?" "child" "lambda" "find-if")}
        {Lisp-Entry "flatten" method #f 164 18 164 25 ("sons" "flatten" "disconnect" "flatten-row?" "if" "son" "lambda" "for-each" "get-tree" "tree" "let" "root-row")}
        {Lisp-Entry "disconnect" method #f 173 18 173 28 ("0" "set-descendants-level" "position:" "change-father" "get-spine" "first" "son-rank" "position" "get-tree" "get-root-row" "root-row" "get-father-row" "and" "father-row" "get-path-child" "path" "let*")}
        {Lisp-Entry "reconnect" method #f 182 18 182 27 ("change-father" "get-level" "1" "+" "set-descendants-level" "get-father-row" "father-row" "let")}
        {Lisp-Entry "disconnected?" method #f 188 26 188 39 ("father" "/=" "and" "get-father-row" "father-row" "let")}
        {Lisp-Entry "get-father-row" method #f 193 26 193 40 ("get-father-row" "and" "get-path-child" "path" "let")}
        {Lisp-Entry "auto-collapsable?" method #f 203 26 203 43 ("collapsable?")}
        {Lisp-Entry "layout" method #f 212 20 212 26 ("get-columns" "+" "increase!" "self" "layout-cell" "get-width" "width" "data" "column" "lambda" "for-each" "get-effective-height" "height" "get-column-spacing" "cs" "0" "h" "children" "and" "when" "get-tree" "tree" "let")}
        {Lisp-Entry "get-effective-width" method #f 226 20 226 39 ("node-width")}
        {Lisp-Entry "context-menu" method #f 235 26 235 38 ("pos")}
        {Lisp-Entry "double-click" method #f 239 26 239 38 ("pos")}
        {Lisp-Entry "selector-down" method #f 243 26 243 39 ("selector-click" "self" "invalidate-row-selector" "parent" "get-header" "acquire-capture" "down?" "set!")}
        {Lisp-Entry "selector-up" method #f 250 26 250 37 ("self" "invalidate-row-selector" "parent" "get-header" "release-capture" "down?" "set!")}
        {Lisp-Entry "selector-move" method #f 256 26 256 39 ("selector-multi-select" "self" "parent" "get-header" "invalidate-row-selector" "initial-row")}
        {Lisp-Entry "draw-children" method #f 266 20 266 33 ("children" "get-columns" "increase!" "paint-drawing" "draw-control" "draw-level" "Tree-Node-Column" "is?" "paint-data" "View" "is-not?" "if" "cell-v" "+" "cell-h" "unless" "self" "row/column->site" "get-merge-cell" "merge-cell" "get-width" "width" "let" "get-visible?" "when" "data" "column" "lambda" "for-each" "get-height" "height" "get-column-spacing" "cs" "get-tree" "tree" "v" "0" "h" "let*" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "nodes" "surface")}
        {Lisp-Entry "draw-selection" method #f 290 20 290 34 ("surface")}
        {Lisp-Entry "draw-selector" method #f 294 26 294 39 ("draw-raised-button" "draw-sunken-button" "down?" "if" "flat?" "height" "width" "v" "h" "context" "surface")}
        {Lisp-Entry "draw-sunken-button" method #f 300 11 300 29 ("Black" "set-text-color" "parent" "header-color" "background" "or" "fill-rect" "frame-rect" "Dark" "name:" "Color" "set-color" "-1" "inflate-rect" "inner" "+" "Rect" "new" "outer" "let*" "flat?" "height" "width" "v" "h" "surface")}
        {Lisp-Entry "draw-raised-button" method #f 309 11 309 29 ("Black" "name:" "Color" "set-text-color" "parent" "header-color" "background" "or" "fill-rect" "left" "top" "edges:" "raised" "'raised" "inner:" "draw-edge" "0" "smaller" "1" "expand-rect" "inner" "+" "Rect" "new" "outer" "let*" "-2" "-1" "if" "thick" "let" "flat?" "height" "width" "v" "h" "surface")}
        {Lisp-Entry "get-parent/child-clipper" method #f 325 20 325 44 ("rect-intersection" "fxround" "get-bounds" "offset-rect" "c" "get-translated-clipper" "t" "get-v" "tv" "position" "get-position" "get-h" "-" "th" "nextmethod" "not" "if" "find-merged-view" "merge-cell" "get-tree" "tree" "let" "v" "h" "child")}
        {Lisp-Entry "find-by-title" method #f 343 18 343 31 ("sons" "first-child" "get-title" "string=?" "row" "lambda" "find-if" "title")}
        {Lisp-Entry "auto-in-place?" method #f 354 26 354 40 ()}
        {Lisp-Entry "auto-expand" method #f 358 26 358 37 ("self" "parent" "expand/collapse" "expandable?" "when")}
        {Lisp-Entry "auto-select" method #f 363 26 363 37 ()}
        {Lisp-Entry "auto-collapse" method #f 367 26 367 39 ("self" "parent" "collapse" "collapsable?" "when")}}}})
"Tree-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "tree" "Tree-View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.tree.Tree-View" module #f 38 18 38 40 ("jazz")
      {Lisp-Entry "Tree-View" class #f 54 7 54 16 ("White" "name:" "Color" "background:" "site-hash" "hash:" "site=?" "test:" "make-table" "Selection-Manager" "self" "Tree-Locator" "new" "16" "0" "row" "'row" "explicit" "initialize" "Selection-Provider" "Outline-View")
        {Lisp-Entry "delayed-autorow" definition #f 80 14 80 29 ()}
        {Lisp-Entry "portfolio" property #f 84 22 84 31 ()}
        {Lisp-Entry "show-header?" property #f 85 22 85 34 ()}
        {Lisp-Entry "get-show-header?" accessor #f 85 74 85 82 ()}
        {Lisp-Entry "set-show-header?" accessor #f 85 74 85 82 ()}
        {Lisp-Entry "selection-mode" property #f 87 22 87 36 ()}
        {Lisp-Entry "multiple-selection?" property #f 88 22 88 41 ()}
        {Lisp-Entry "can-select-empty?" property #f 89 22 89 39 ()}
        {Lisp-Entry "show-unfocused-selection?" property #f 90 22 90 47 ()}
        {Lisp-Entry "focused-on-descendants?" property #f 91 22 91 45 ()}
        {Lisp-Entry "auto-expand/collapse?" property #f 92 22 92 43 ()}
        {Lisp-Entry "get-auto-expand/collapse?" accessor #f 92 74 92 82 ()}
        {Lisp-Entry "set-auto-expand/collapse?" accessor #f 92 74 92 82 ()}
        {Lisp-Entry "cell-background" property #f 93 22 93 37 ()}
        {Lisp-Entry "empty-background" property #f 94 22 94 38 ()}
        {Lisp-Entry "filled-column" property #f 95 22 95 35 ()}
        {Lisp-Entry "get-filled-column" accessor #f 95 74 95 82 ()}
        {Lisp-Entry "set-filled-column" accessor #f 95 74 95 82 ()}
        {Lisp-Entry "column-spacing" property #f 96 22 96 36 ()}
        {Lisp-Entry "reorderable?" property #f 97 22 97 34 ()}
        {Lisp-Entry "get-reorderable?" accessor #f 97 74 97 82 ()}
        {Lisp-Entry "set-reorderable?" accessor #f 97 74 97 82 ()}
        {Lisp-Entry "content" property #f 98 22 98 29 ()}
        {Lisp-Entry "columns" slot #f 101 18 101 25 ()}
        {Lisp-Entry "get-columns" accessor #f 101 71 101 79 ()}
        {Lisp-Entry "node-column" slot #f 102 18 102 29 ()}
        {Lisp-Entry "get-node-column" accessor #f 102 71 102 79 ()}
        {Lisp-Entry "sorted-column" slot #f 103 18 103 31 ()}
        {Lisp-Entry "get-sorted-column" accessor #f 103 71 103 79 ()}
        {Lisp-Entry "sort-ascending?" slot #f 104 18 104 33 ()}
        {Lisp-Entry "get-sort-ascending?" accessor #f 104 71 104 79 ()}
        {Lisp-Entry "selection-pivot" slot #f 105 18 105 33 ()}
        {Lisp-Entry "highlighted" slot #f 106 18 106 29 ()}
        {Lisp-Entry "indentation" slot #f 107 18 107 29 ()}
        {Lisp-Entry "get-indentation" accessor #f 107 71 107 79 ()}
        {Lisp-Entry "columns-borders" slot #f 108 18 108 33 ()}
        {Lisp-Entry "get-columns-borders" accessor #f 108 71 108 79 ()}
        {Lisp-Entry "columns-right" slot #f 109 18 109 31 ()}
        {Lisp-Entry "get-columns-right" accessor #f 109 71 109 79 ()}
        {Lisp-Entry "edited-cell" slot #f 110 18 110 29 ()}
        {Lisp-Entry "get-edited-cell" accessor #f 110 71 110 79 ()}
        {Lisp-Entry "cell-editor" slot #f 111 18 111 29 ()}
        {Lisp-Entry "get-cell-editor" accessor #f 111 71 111 79 ()}
        {Lisp-Entry "close-cell-editor?" slot #f 112 18 112 36 ()}
        {Lisp-Entry "auto-expanded-row" slot #f 113 18 113 35 ()}
        {Lisp-Entry "set-auto-expanded-row" accessor #f 113 71 113 79 ()}
        {Lisp-Entry "locator" slot #f 114 18 114 25 ()}
        {Lisp-Entry "selection-manager" slot #f 115 18 115 35 ()}
        {Lisp-Entry "merge-cell-list" slot #f 116 18 116 33 ()}
        {Lisp-Entry "get-merge-cell-list" accessor #f 116 71 116 79 ()}
        {Lisp-Entry "merge-cell-table" slot #f 117 18 117 34 ()}
        {Lisp-Entry "get-merge-cell-table" accessor #f 117 108 117 116 ()}
        {Lisp-Entry "finish" method #f 129 20 129 26 ("invalidate-columns" "nextmethod" "rest")}
        {Lisp-Entry "destroy-component" method #f 134 20 134 37 ("nextmethod" "end-edition")}
        {Lisp-Entry "add-child" method #f 144 20 144 29 ("invalidate-columns" "list" "append!" "columns" "set!" "Tree-Column" "is?" "when" "nextmethod" "child")}
        {Lisp-Entry "remove-child" method #f 152 20 152 32 ("invalidate-columns" "remove!" "columns" "set!" "Tree-Column" "is?" "when" "destroying?" "unless" "nextmethod" "child")}
        {Lisp-Entry "get-portfolio" method #f 166 18 166 31 ("child" "set!" "Portfolio" "is?" "if" "portfolio" "when")}
        {Lisp-Entry "set-portfolio" method #f 174 18 174 31 ("invalidate-view" "portfolio" "set!" "object")}
        {Lisp-Entry "get-multiple-selection?" method #f 179 18 179 41 ("multiple-selection?")}
        {Lisp-Entry "set-multiple-selection?" method #f 183 18 183 41 ("invalidate-view" "multiple-selection?" "set!" "flag")}
        {Lisp-Entry "get-can-select-empty?" method #f 188 18 188 39 ("can-select-empty?")}
        {Lisp-Entry "set-can-select-empty?" method #f 192 18 192 39 ("invalidate-view" "can-select-empty?" "set!" "flag")}
        {Lisp-Entry "get-show-unfocused-selection?" method #f 197 18 197 47 ("show-unfocused-selection?")}
        {Lisp-Entry "set-show-unfocused-selection?" method #f 201 18 201 47 ("invalidate-view" "show-unfocused-selection?" "set!" "flag")}
        {Lisp-Entry "get-focused-on-descendants?" method #f 206 18 206 45 ("focused-on-descendants?")}
        {Lisp-Entry "set-focused-on-descendants?" method #f 210 18 210 45 ("invalidate-view" "focused-on-descendants?" "set!" "flag")}
        {Lisp-Entry "get-selection-mode" method #f 215 18 215 36 ("selection-mode")}
        {Lisp-Entry "set-selection-mode" method #f 219 18 219 36 ("invalidate-view" "selection-mode" "set!" "value")}
        {Lisp-Entry "get-cell-background" method #f 224 18 224 37 ("cell-background")}
        {Lisp-Entry "set-cell-background" method #f 228 18 228 37 ("invalidate-view" "cell-background" "set!" "color")}
        {Lisp-Entry "get-empty-background" method #f 233 18 233 38 ("empty-background")}
        {Lisp-Entry "set-empty-background" method #f 237 18 237 38 ("invalidate-view" "empty-background" "set!" "color")}
        {Lisp-Entry "get-column-spacing" method #f 242 18 242 36 ("column-spacing")}
        {Lisp-Entry "set-column-spacing" method #f 246 18 246 36 ("invalidate-view" "column-spacing" "set!" "spacing")}
        {Lisp-Entry "focus-gained" method #f 256 20 256 32 ("selection" "invalidate-selection" "nextmethod")}
        {Lisp-Entry "focus-lost" method #f 261 20 261 30 ("selection" "invalidate-selection" "nextmethod")}
        {Lisp-Entry "selection-color" method #f 266 18 266 33 ("unfocused-color" "focused-color" "focused?" "if")}
        {Lisp-Entry "focused-color" method #f 272 29 272 42 ("Focused-Selection" "name:" "Color")}
        {Lisp-Entry "unfocused-color" method #f 276 29 276 44 ("Unfocused-Selection" "name:" "Color")}
        {Lisp-Entry "selected-text-color" method #f 280 18 280 37 ("Unfocused-Selected-Text" "Focused-Selected-Text" "name:" "Color" "focused?" "if")}
        {Lisp-Entry "focused?" method #f 286 26 286 34 ("self" "has-parent?" "get-focus" "focus" "let" "focused-on-descendants?" "and" "has-focus?" "or")}
        {Lisp-Entry "focus-and-select" method #f 293 18 293 34 ("set-single-selection" "0" "get-visible-count" ">" "when" "acquire-focus")}
        {Lisp-Entry "focus-actions" method #f 304 20 304 33 ("nextmethod" "tree" "'tree" "find-actions" "cons")}
        {Lisp-Entry "on-expand" method #f 314 11 314 20 ("expand" "bell" "not" "if" "get-selected-row" "row" "let" "evt")}
        {Lisp-Entry "on-expand-all" method #f 321 11 321 24 ("expand-all" "bell" "not" "if" "get-selected-row" "row" "let" "evt")}
        {Lisp-Entry "on-collapse" method #f 328 11 328 22 ("collapse" "bell" "not" "if" "get-selected-row" "row" "let" "evt")}
        {Lisp-Entry "on-properties" method #f 335 29 335 42 ("evt")}
        {Lisp-Entry "get-header" method #f 344 18 344 28 ("Tree-Header" "is?" "when" "parent" "get-parent" "header" "let")}
        {Lisp-Entry "invalidate-header" method #f 350 18 350 35 ("invalidate-view" "when" "get-header" "header" "let")}
        {Lisp-Entry "find-subdrawing" method #f 361 20 361 35 ("nextmethod" "merge-cell-list" "self" "acquire" "find-drawing" "continuation-return" "in-rect?" "merge-cell-rect" "rect" "View" "is?" "when" "get-master-cell" "get-cell-data" "data" "let" "merge-cell" "for-each" "return" "lambda" "continuation-capture" "or" "ignore" "pos")}
        {Lisp-Entry "layout-column" method #f 380 21 380 34 ("row-spacing" "increase!" "set!" "columns-right" "Dimension" "new" "set-size" "+" "rb" "get-effective-height" "height" "let*" "while" "0" "rt" "root-row" "get-next" "row" "let" "column")}
        {Lisp-Entry "layout-scrollee" method #f 397 20 397 35 ("nextmethod" "fill-column" "filled-column" "when" "update-locked?" "unless")}
        {Lisp-Entry "scrollee-width" method #f 405 20 405 34 ("get-display-width" "max" "fit-in-scroller?" "scroller" "and" "column-spacing" "visible-width" "+" "columns-right" "show-header?" "if" "width" "let")}
        {Lisp-Entry "update-visible" method #f 418 20 418 34 ("set-width" "cons" "list" "columns-borders" "columns-right" "visible-width" ">" "get-level" "text-h" "w" "get-node-width" "or" "+" "nw" "3" "highlight-border" "let*" "Tree-Node-Column" "node-column" "is?" "width" "show-header?" "not" "when" "update-visible-width" "visible-height" "visible-count" "row-spacing" "set!" "if" "get-effective-height" "increase!" "line" "row" "lambda" "for-each-visible-row" "first?" "height" "0" "count" "let" "update-visible-height" "define")}
        {Lisp-Entry "scroll-invalidate" method #f 456 20 456 37 ("invalidate-header" "nextmethod" "dv" "dh")}
        {Lisp-Entry "Highlighted-Outer-Color" definition #f 466 14 466 37 ("128" "blue:" "green:" "0" "red:" "Color" "new")}
        {Lisp-Entry "Highlighted-Inner-Color" definition #f 469 14 469 37 ("255" "blue:" "green:" "218" "red:" "Color" "new")}
        {Lisp-Entry "Highlighted-Insert-Color" definition #f 472 14 472 38 ("Dark-Red" "name:" "Color")}
        {Lisp-Entry "draw-outline" method #f 476 20 476 32 ("draw-highlighted" "cycle-debug-color!" "debug-paint?" "fill-rect" "0" "*" "fxround" "if" "Rect" "new" "rect" "let" "columns-right" "<=" "empty-background" "view-enabled?" "and" "when" "get-height" "height" "get-right" "right" "get-h" "get-left" "+" "left" "get-position" "pos" "let*" "nextmethod" "sc?" "sc" "sv" "sh" "lv" "lh" "clipper" "context" "surface")}
        {Lisp-Entry "draw-empty" method #f 490 20 490 30 ("cycle-debug-color!" "debug-paint?" "fill-rect" "*" "if" "fxround" "0" "Rect" "new" "rect" "let" "<=" "empty-background" "view-enabled?" "and" "when" "width" "rt" "sc?" "sc" "sv" "sh" "bottom" "top" "surface")}
        {Lisp-Entry "draw-highlighted" method #f 496 11 496 27 ("highlighted" "Highlighted-Insert-Color" "fill-rect" "highlighted-insert-rect" "rect" "draw-highlighted-cell" "not" "if" "get-insert" "insert" "get-col" "col" "get-row" "row" "let" "highlight" "lambda" "for-each-reversed" "surface")}
        {Lisp-Entry "draw-highlighted-cell" method #f 508 29 508 50 ("highlight-inner?" "when" "frame-rect" "highlighted-inner-color" "get-inner-color" "inner-color" "highlighted-outer-color" "get-outer-color" "or" "outer-color" "let" "1" "inflate-rect" "outer-rect" "highlighted-target-rect" "inner-rect" "let*" "highlight" "col" "row" "surface")}
        {Lisp-Entry "highlighted-outer-color" method #f 518 29 518 52 ("Highlighted-Outer-Color")}
        {Lisp-Entry "highlighted-inner-color" method #f 522 29 522 52 ("Highlighted-Inner-Color")}
        {Lisp-Entry "highlight-inner?" method #f 526 29 526 45 ()}
        {Lisp-Entry "header-color" method #f 530 26 530 38 ("Medium" "name:" "Color")}
        {Lisp-Entry "draw-children" method #f 534 20 534 33 ("merge-cell-list" "for-each" "nextmethod" "0" "line:" "selected?:" "cons" "new-context" "merge-cell-selected?" "selected?" "get-master-cell" "get-cell-data" "get-row" "row->line" "top-line" "get-column" "left-column" "and" "when" "merge-corner-site" "receive" "merge-cell" "paint-merge-cell-data" "-" "values" "get-bottom" "bottom" "get-right" "right" "get-left" "left" "get-top" "top" "bottom-right-rect" "unmerged-site-rect" "top-left-rect" "bottom-right" "top-left" "merge-geometry" "paint-drawing" "View" "is-not?" "if" "cell-v" "+" "cell-h" "let" "data" "height" "width" "v" "h" "row" "column" "paint-data" "define" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "nodes" "surface")}
        {Lisp-Entry "get-highlighted" method #f 571 18 571 33 ("highlighted")}
        {Lisp-Entry "set-highlighted" method #f 575 18 575 33 ("set!" "old" "equal?" "when" "Tree-Highlight" "is?" "object" "every?" "assert" "highlighted-insert-rect" "invalidate-rect" "invalidate-highlighted-cell" "not" "if" "get-insert" "insert" "get-col" "col" "get-row" "row" "let" "highlight" "lambda" "for-each" "highlighted" "invalidate-highlighted" "define" "value")}
        {Lisp-Entry "invalidate-highlighted-cell" method #f 594 29 594 56 ("invalidate-region" "2" "Rect" "insets:" "frame-region" "region" "1" "inflate-rect" "outer" "highlighted-target-rect" "inner" "with" "col" "row")}
        {Lisp-Entry "highlighted-target-rect" method #f 601 11 601 34 ("cell-rect" "0" "row->line" "Cell" "new" "cell-text-rect" "not" "if" "col" "row")}
        {Lisp-Entry "highlighted-insert-rect" method #f 607 11 607 34 ("get-bottom" "get-top" "case" "get-right" "get-left" "Rect" "bottom" "+" "top" "v" "lambda" "proc" "else" "-2" "cond" "offset" "2" "row-spacing" "fxround/" "half-spacing" "after" "'after" "1" "visible-count" "-" "after-last?" "before" "'before" "eq?" "=" "and" "before-first?" "0" "Cell" "new" "cell-content-rect" "line-rect" "rect" "row->line" "line" "get-height" "height" "let*" "insert" "row")}
        {Lisp-Entry "update-visible-width-incremental" method #f 633 20 633 52 ("set!" "visible-width" ">" "when" "node-column" "text-h" "+" "let" "width" "level")}
        {Lisp-Entry "remove-row" method #f 640 20 640 30 ("nextmethod" "close-auto-expanded-row" "auto-expanded-row" "eq?" "attached?" "and" "when" "row")}
        {Lisp-Entry "remove-every-row" method #f 646 20 646 36 ("nextmethod" "merge-cell-table" "empty-table" "merge-cell-list" "selection-pivot" "highlighted" "set!" "set-sorted" "close-auto-expanded-row")}
        {Lisp-Entry "cursor-update" method #f 661 20 661 33 ("nextmethod" ":finger" "set-cursor" "alt-down?" "if" "pos")}
        {Lisp-Entry "allow-start-drag?" method #f 672 20 672 37 ("selection-manager" "allow-start-drag?" "nextmethod" "and" "pos")}
        {Lisp-Entry "mouse-down" method #f 677 20 677 30 ("column" "set-selection" "can-select-empty?" "when" "not" "if" "control?" "shift?" "let" "acquire-capture" "acquire-focus" "get-multiple-selection?" "alt-down?" "control-down?" "shift-down?" "selection-manager" "mouse-down" "get-col" "get-column" "find-part" "part" "cell-coordinates" "and" "pos" "view->tree" "cell" "let*" "view")}
        {Lisp-Entry "drag-move" method #f 695 20 695 29 ("drag-move" "get-col" "get-column" "column" "cell-coordinates" "pos" "when" "view->tree" "cell" "let" "view")}
        {Lisp-Entry "drag-up" method #f 703 20 703 27 ("reset" "self" "process-action" "release-capture" "drag-up" "focus-delegate" "auto-select" "auto-expand/collapse?" "complete-mouse-down" "mouse-down-part-control?" "get-col" "get-column" "column" "get-line" "get-row" "row" "cell-coordinates" "pos" "not" "and" "when" "set-selection" "control?" "shift?" "get-mouse-down-view" "unless" "or" "view->tree" "cell" "let" "alt-down?" "control-down?" "shift-down?" "selection-manager" "mouse-up" "dragging?" "view")}
        {Lisp-Entry "call-double-click" method #f 727 20 727 37 ("double-click" "else" "nextmethod" "content" "mouse-down" "control" "case" "find-part" "part" "get-col" "get-column" "column" "cell-coordinates" "pos" "let*" "when" "view->tree" "cell" "let" "view")}
        {Lisp-Entry "double-click" method #f 739 20 739 32 ("find-part" "part" "get-col" "get-column" "column" "cell-coordinates" "pos" "let*" "when" "view->tree" "cell" "let" "alt-down?" "control-down?" "shift-down?" "selection-manager" "double-click" "view")}
        {Lisp-Entry "context-menu" method #f 749 20 749 32 ("self" "acquire" "context-menu" "get-line" "get-row" "row" "when" "view->tree" "cell" "let" "view")}
        {Lisp-Entry "cell-coordinates" method #f 756 11 756 27 ("cell-position" "-" "pos" "cell")}
        {Lisp-Entry "mouse-data" method #f 765 20 765 30 ("get-cell-title" "when" "view->tree" "cell" "let" "pos")}
        {Lisp-Entry "key-press" method #f 776 20 776 29 ("locator" "enter" "0" "visible-count" ">" "alphanumeric?" "use-locator?" "and" "when" "key")}
        {Lisp-Entry "use-locator?" method #f 786 29 786 41 ()}
        {Lisp-Entry "locate-prefix" method #f 790 18 790 31 ("locator" "locate" "prefix")}
        {Lisp-Entry "header-click" method #f 799 26 799 38 ("ensure-displayed" "column->col" "sort-column" "column")}
        {Lisp-Entry "selector-click" method #f 804 18 804 32 ("list" "else" "set-selection" "row->line" "Cell" "new" "collect" "get-columns-count" "below" "from" "n" "for" "loop" "select-list" "0" "get-col" "selection-pivot" "if" "col" "let" "cell" "selection-mode" "case" "acquire-focus" "row")}
        {Lisp-Entry "selector-multi-select" method #f 817 18 817 39 ("collect" "else" "queue-list" "set-selection" "Cell" "new" "enqueue" "get-columns-count" "below" "0" "col" "to" "from" "line" "for" "loop" "new-queue" "select-list" "cell" "selection-mode" "case" "max" "to-line" "min" "from-line" "row->line" "new-line" "let" "initial-line" "row")}
        {Lisp-Entry "set-sorted" method #f 835 11 835 21 ("sort-ascending?" "set!" "get-column" "invalidate-column-header" "not" "and" "when" "sorted-column" "eqv?" "same?" "get-header" "header" "let" "ascending?" "column")}
        {Lisp-Entry "sort-column" method #f 846 18 846 29 ("ensure-displayed?:" "root-row" "with-update-locked" "with-preserved-selection" "iterate" "reorder-sons" "get-sons" "sorted" "proc" "if" "letrec" "sort-predicates" "greater" "smaller" "receive" "sort-ascending?" "sorted-column" "not" "set-sorted" "and" "ny" "localize" "nx" "cy" "get-children" "cx" "let*" "ry" "rx" "sort" "get-column" "sort-value" "or" "element" "data" "n" "children" "row" "lambda" "get-node" "0" "/=" "dual?" "let" "direction" "equal" "rows" "sort-rows" "define" "column")}
        {Lisp-Entry "get-content" method #f 884 20 884 31 ("content")}
        {Lisp-Entry "set-content" method #f 888 20 888 31 ("invalidate-cell" "set-title" "get-cell-data" "data" "Cell" "new" "cell" "let*" "do" "j" "info" "0" "from" "i" "in" "row" "for" "loop" "value")}
        {Lisp-Entry "with-context-click" method #f 904 20 904 38 ("update-view" "auto-select" "auto-expand/collapse?" "memq?" "else" "list" "get-selection" "member?" "unless" "selection-mode" "case" "get-line" "get-row" "row" "set-selection" "can-select-empty?" "when" "not" "if" "view->tree" "cell" "let" "acquire-focus" "proc" "pos")}
        {Lisp-Entry "flattened?" method #f 929 18 929 28 ("get-visible?" "and" "get-path-column" "path-column" "let")}
        {Lisp-Entry "flatten/unflatten" method #f 934 18 934 35 ("flatten" "unflatten" "with-update-locked" "lambda" "with-preserved-selection" "fill-column" "set-visible?" "error" "not" "if" "flattened?" "get-path-column" "path-column" "let*")}
        {Lisp-Entry "get-path-column" method #f 950 18 950 33 ("columns" "Tree-Path-Column" "is?" "column" "lambda" "find-if")}
        {Lisp-Entry "flatten-row?" method #f 956 26 956 38 ("row")}
        {Lisp-Entry "flatten" method #f 960 18 960 25 ("set-visible?" "disconnected?" "unless" "flatten" "disconnect" "flatten-row?" "if" "son" "lambda" "iterate" "root-row" "get-sons" "sons" "let")}
        {Lisp-Entry "unflatten" method #f 973 18 973 27 ("set-visible?" "get-visible?" "unless" "reconnect" "disconnected?" "when" "son" "lambda" "root-row" "get-sons" "iterate")}
        {Lisp-Entry "get-tooltip?" method #f 989 20 989 32 ()}
        {Lisp-Entry "calculate-tooltip-bounds" method #f 993 11 993 35 ("cell-rect" "cell")}
        {Lisp-Entry "get-tooltip-bounds" method #f 997 20 997 38 ("calculate-tooltip-bounds" "when" "view->tree" "cell" "let" "pos")}
        {Lisp-Entry "get-tooltip-context" method #f 1003 20 1003 39 ("font:" "Dimension" "padding:" "get-tooltip-position" "position:" "bounds:" "split-lines" "text:" "self" "view:" "Tooltip-Context" "new" "-2" "=" "get-level" "content-h" "h" "calculate-tooltip-bounds" "rect" "rect-width" ">" "cell-tooltips?" "or" "2" "effective-font" "+" "0" "text-width" "get-formatted-tooltip?" "formatted?" "content-rect" "get-height" "height" "column-width" "width" "let*" "get-cell-tooltip" "localize" "text" "get-col" "get-column" "column" "get-line" "get-row" "row" "when" "view->tree" "cell" "let" "nextmethod" "get-tooltip-text" "if" "pos")}
        {Lisp-Entry "cell-tooltips?" method #f 1029 29 1029 43 ("cell")}
        {Lisp-Entry "get-cell-tooltip" method #f 1033 29 1033 45 ("get-data-tooltip" "get-cell-data" "data" "get-col" "get-column" "column" "let" "cell")}
        {Lisp-Entry "get-tooltip-position" method #f 1039 29 1039 49 ("5" "rect-height" "10" "-" "Point" "new" "rect-position" "+" "v" "h" "rect" "text")}
        {Lisp-Entry "get-column-tooltip" method #f 1043 29 1043 47 ("column")}
        {Lisp-Entry "get-drag-drop" method #f 1052 20 1052 33 ("nextmethod" "mouse-down-point" "view->tree" "when")}
        {Lisp-Entry "get-drag-source" method #f 1062 20 1062 35 ("get-drag-cell-source" "get-col" "col" "get-line" "get-row" "row" "view->tree" "cell" "get-drag-position" "pos" "let*")}
        {Lisp-Entry "get-drag-cell-source" method #f 1070 29 1070 49 ("col:" "row:" "get-drag-image" "image:" "position:" "self" "view:" "Tree-Drag-Source" "new" "col" "row" "pos")}
        {Lisp-Entry "get-drag-hotspot" method #f 1074 20 1074 36 ("Point" "new" "get-position" "get-v" "top" "get-level" "node-column" "image-h" "left" "get-line" "get-row" "row" "mouse-down-point" "view->tree" "cell" "let*")}
        {Lisp-Entry "get-drag-image" method #f 1082 20 1082 34 ("get-node-image" "get-line" "line" "view->tree" "cell" "let*" "pos")}
        {Lisp-Entry "get-node-image" method #f 1088 18 1088 32 ("resource:" "portfolio:" "Image" "add-masked-bitmap" "no" "Portfolio" "get-bitmap" "set!" "2" "19" "draw-text" "Black" "set-text-color" "set-font" "draw-mask" "portfolio" "draw-image" "White" "name:" "Color" "Rect" "fill-rect" "maskdc" "keep-bitmap?:" "Dimension" "Memory-Surface" "memdc" "with" "mask" "unspecified" "bitmap" "get-height" "height" "get-node-column-index" "column-width" "width" "get-title" "title" "get-image" "image" "0" "Cell" "get-cell-data" "data" "get-row" "row" "effective-font" "font" "player" "Client-Surface" "new" "cdc" "let*" "line")}
        {Lisp-Entry "current-drop" method #f 1124 20 1124 32 ("get-tree-target" "get-source" "reorderable?" "nextmethod" "get-surrogate" "else" "3" "-" "1" "<" "cond" "2" "middle" "4" "/" "let" "get-row-reorder-target" "get-quarter" "eqv?" "get-view" "self" "eq?" "and" "if" "get-row" "row" "get-target" "current" "get-row-quarter" "quarter" "get-line" "line" "let*" "when" "height" "v" "cell" "lambda" "call-with-view->tree" "get-reorder-target" "define" "pos" "drag-drop")}
        {Lisp-Entry "get-row-reorder-target" method #f 1152 29 1152 51 ("part:" "row:" "self" "view:" "Tree-Drop-Target" "new" "after" "'after" "before" "'before" "=" "part" "let" "when" "cdr" "/=" "and" "not" "or" "accept?" "+" "2" "1" "if" "current-rank" "dst-line" "get-user-data" "dst" "contiguous-range" "src-range" "get-source" "get-view" "get-selection" "src-selection" "selection" "row->line" "memq?" "same-row?" "let*" "quarter" "row" "drag-drop")}
        {Lisp-Entry "get-tree-target" method #f 1165 29 1165 44 ("get-row-target" "get-view" "self" "eq?" "and" "if" "get-target" "current" "get-line" "get-row" "row" "let" "when" "height" "v" "cell" "lambda" "call-with-view->tree" "pos" "drag-drop")}
        {Lisp-Entry "get-tree-data-target" method #f 1176 18 1176 38 ("get-cell-target" "=" "eq?" "and" "if" "/=" "self" "get-view" "neq?" "or" "get-target" "current" "get-source" "source" "get-col" "col" "get-line" "get-row" "row" "let" "when" "height" "v" "cell" "lambda" "call-with-view->tree" "pos" "drag-drop")}
        {Lisp-Entry "get-row-target" method #f 1190 29 1190 43 ("row" "drag-drop")}
        {Lisp-Entry "get-cell-target" method #f 1194 29 1194 44 ("col" "row" "drag-drop")}
        {Lisp-Entry "highlight-drop" method #f 1198 20 1198 34 ("get-highlighted" "cons" "set-highlighted" "Highlighted-Inner-Color" "inner-color:" "Highlighted-Outer-Color" "outer-color:" "insert:" "Tree-Highlight" "new" "highlight" "'after" "after" "'before" "before" "case" "insert" "get-part" "part" "get-col" "col" "get-row" "row" "let*" "Tree-Drop-Target" "is?" "when" "get-target" "target" "let" "pos" "drag-drop")}
        {Lisp-Entry "unhighlight-drop" method #f 1214 20 1214 36 ("cdr" "highlighted" "null?" "if" "set-highlighted" "drag-drop")}
        {Lisp-Entry "tab-stop-enter" method #f 1225 20 1225 34 ()}
        {Lisp-Entry "on-move" method #f 1234 11 1234 18 ("right-arrow-action" "right" "left-arrow-action" "left" "down-arrow-action" "down" "up-arrow-action" "up" "case" "get-modifiers" "modifiers" "direction:" "get-property" "direction" "let" "self" "invoke-handler" "arrow-press-handler" "if" "evt")}
        {Lisp-Entry "on-home" method #f 1246 19 1246 26 ("home-action" "evt")}
        {Lisp-Entry "home-action" method #f 1250 18 1250 29 ("else" "Cell" "new" "list" "set-selection" "get-col" "selection-pivot" "if" "col" "cell" "selection-mode" "case" "0" ">" "when" "get-visible-count" "count" "let")}
        {Lisp-Entry "on-end" method #f 1261 19 1261 25 ("end-action" "evt")}
        {Lisp-Entry "end-action" method #f 1265 18 1265 28 ("else" "1" "-" "Cell" "new" "list" "set-selection" "get-col" "selection-pivot" "if" "col" "cell" "selection-mode" "case" "0" ">" "when" "get-visible-count" "count" "let")}
        {Lisp-Entry "left-arrow-press" method #f 1276 20 1276 36 ("left-arrow-action" "modifiers")}
        {Lisp-Entry "left-arrow-action" method #f 1280 18 1280 35 ("get-father" "row->line" "list" "set-selection" "get-level" "expand/collapse" "expanded?" "bell" "not" "get-selected-row" "row" "left" "'left" "1" "-" "get-line" "Cell" "new" "move-cell" "0" ">" "col" "selection-pivot" "selection" "not-null?" "selection-mode" "case" "get-col" "get-first-col" "if" "get-merge-cell" "merge-cell" "when" "cell->site" "site" "let" "cell" "logical-col" "define" "user-origin?" "modifiers")}
        {Lisp-Entry "up-arrow-press" method #f 1306 20 1306 34 ("up-arrow-action" "modifiers")}
        {Lisp-Entry "up-arrow-action" method #f 1310 18 1310 33 ("car" "backward" "'backward" "move-selection" "null?" "get-visible-count" "count" "else" "up" "'up" "get-col" "1" "-" "Cell" "new" "move-cell" "0" ">" "line" "selection-pivot" "selection" "not-null?" "selection-mode" "case" "get-line" "get-first-line" "if" "get-merge-cell" "merge-cell" "when" "cell->site" "site" "let" "cell" "logical-row" "define" "user-origin?" "modifiers")}
        {Lisp-Entry "right-arrow-press" method #f 1336 20 1336 37 ("right-arrow-action" "modifiers")}
        {Lisp-Entry "right-arrow-action" method #f 1340 18 1340 36 ("expand/collapse" "expanded?" "unless" "bell" "not" "get-selected-row" "row" "else" "right" "'right" "+" "get-line" "Cell" "new" "move-cell" "1" "get-columns-count" "-" "<" "col" "selection-pivot" "selection" "not-null?" "selection-mode" "case" "get-col" "get-last-col" "if" "get-merge-cell" "merge-cell" "when" "cell->site" "site" "let" "cell" "logical-col" "define" "user-origin?" "modifiers")}
        {Lisp-Entry "down-arrow-press" method #f 1364 20 1364 36 ("down-arrow-action" "modifiers")}
        {Lisp-Entry "down-arrow-action" method #f 1368 18 1368 35 ("car" "forward" "'forward" "move-selection" "0" ">" "null?" "else" "down" "'down" "get-col" "+" "Cell" "new" "move-cell" "<" "line" "selection-pivot" "selection" "not-null?" "selection-mode" "case" "1" "-" "last" "get-visible-count" "count" "let*" "get-line" "get-last-line" "if" "get-merge-cell" "merge-cell" "when" "cell->site" "site" "let" "cell" "logical-row" "define" "user-origin?" "modifiers")}
        {Lisp-Entry "move-selection" method #f 1395 11 1395 25 ("update-view" "auto-select" "auto-expand/collapse?" "when" "user-origin?:" "list" "set-selection" "get-row" "row" "let" "user-origin?" "direction" "line")}
        {Lisp-Entry "move-cell" method #f 1404 11 1404 20 ("update-view" "when" "get-bottom" "down" "forward" "'forward" "get-right" "right" "get-top" "vertical-scroll-needed" "up" "0" "backward" "'backward" "get-left" "horizontal-scroll-needed" "Point" "new" "scroll" "left" "case" "cell-rect" "rect" "let" "user-origin?:" "ensure-displayed?:" "list" "set-selection" "user-origin?" "direction" "cell")}
        {Lisp-Entry "line-displayed?" method #f 1416 11 1416 26 ("get-v" "=" "0" "Point" "new" "scroll-needed" "needed" "get-bottom" "bottom" "get-top" "top" "get-row" "row" "let*" "line")}
        {Lisp-Entry "cell-displayed?" method #f 1424 11 1424 26 ("get-v" "0" "get-h" "=" "and" "get-bottom" "get-right" "get-top" "get-left" "Point" "new" "scroll-needed" "needed" "cell-rect" "rect" "let*" "cell")}
        {Lisp-Entry "select-all" method #f 1431 20 1431 30 ("visible-count" "0" "naturals" "set-selection" "multiple-selection?" "when" "user-origin?" "user-origin?:")}
        {Lisp-Entry "fill-column" method #f 1441 18 1441 29 ("invalidate-header" "Rect" "new" "invalidate-rect" "get-height" "bottom" "right" "top" "0" "2" "min" "left" "min-column-width" "set-width" "increase!" "1" "tail" "set-cdr!" "car" "set-car!" "pair" "for-each" "+" "new-right" "cdr" "old-right" "get-width" "borders-width" "max" "delta" "get-display-size" "size" "borders-right" "columns-right" "-" "space-after" "filled-borders" "let*" "length" "<" "column->col" "col" "let" "columns-borders" "filled-column" "when" "get-name" "column" "lambda" "find-if" "else" "last" "not-null?" "and" "eq?" "columns" "element" "integer?" "cond" "name" "find-filled-column" "define")}
        {Lisp-Entry "add-column" method #f 1476 18 1476 28 ("invalidate-header" "fill-column" "set-title" "set-width" "node-column" "set!" "Tree-Node-Column" "is?" "when" "self" "parent:" "new" "apply" "column" "let" "others" "width" "title" "Tree-Column" "class" "bind-keywords" "rest")}
        {Lisp-Entry "remove-column" method #f 1490 18 1490 31 ("invalidate-header" "fill-column" "invalidate-columns" "node-column" "eq?" "when" "remove!" "columns" "set!" "column")}
        {Lisp-Entry "remove-columns" method #f 1499 18 1499 32 ("if" "node-column" "0" "columns-right" "columns-borders" "columns" "set!" "set-children" "remove-all-columns" "invalidate-header" "get-columns" "remove-column" "get-name" "memq?" "Tree-Node-Column" "is?" "and" "or" "unless" "column" "lambda" "for-each" "remove-every-row" "remove-columns-preserving" "define" "preserve" "preserve:" "preserve-node-column?" "preserve-node-column?:")}
        {Lisp-Entry "invalidate-columns" method #f 1523 20 1523 38 ("invalidate-borders" "invalidate-node-column" "columns" "not-null?" "when")}
        {Lisp-Entry "invalidate-node-column" method #f 1529 11 1529 33 ("columns" "Tree-Node-Column" "is?" "column" "lambda" "find-if" "node-column" "set!")}
        {Lisp-Entry "invalidate-borders" method #f 1535 21 1535 39 ("last" "borders-right" "columns-right" "columns" "column-spacing" "get-visible?" "when" "cons" "prog1" "+" "right" "get-width" "width" "let*" "column" "lambda" "map" "columns-borders" "set!" "0" "left" "let")}
        {Lisp-Entry "get-columns-count" method #f 1548 18 1548 35 ("columns" "length")}
        {Lisp-Entry "get-column" method #f 1552 18 1552 28 ("columns" "element" "col")}
        {Lisp-Entry "find-column" method #f 1556 18 1556 29 ("find-component" "name")}
        {Lisp-Entry "get-node-column-index" method #f 1560 18 1560 39 ("node-column" "column->col")}
        {Lisp-Entry "column->col" method #f 1564 18 1564 29 ("columns" "find" "column")}
        {Lisp-Entry "row-class" method #f 1573 20 1573 29 ("Tree-Row")}
        {Lisp-Entry "update-father-control" method #f 1577 20 1577 41 ("image-rect" "node-column" "control-rect" "invalidate-rect" "get-height" "<" "row-top" "top" "row->line" "line" "let*" "row-visible?" "root-row" "neq?" "update-locked?" "not" "and" "when" "father")}
        {Lisp-Entry "add-empty-row" method #f 1586 20 1586 33 ("columns" "new-empty-cell" "column" "lambda" "map" "children:" "add-row" "root-row" "or" "let" "father" "father:")}
        {Lisp-Entry "line-selected?" method #f 1593 20 1593 34 ("memq?" "else" "selection" "get-line" "=" "lambda" "some?" "cell" "selection-mode" "case" "line")}
        {Lisp-Entry "line-draw-selected?" method #f 1599 20 1599 39 ("show-unfocused-selection?" "has-focus?" "or" "nextmethod" "and" "line")}
        {Lisp-Entry "merge-cells" method #f 1609 18 1609 29 ("invalidate-rect" "get-parent" "acquire" "set-rect" "View" "is?" "merge-cell-rect" "rect" "set-merge-cell!" "merged-site" "lambda" "for-each" "cons" "merge-cell-list" "set!" "self" "queue-list" "Merge-Cell" "new-merge-cell" "error" "enqueue" "Site" "new-site" "get-column" "new-column" "get-row" "new-row" "equal?" "Cell" "new" "merged-cell" "c" "below" "from" "r" "for" "loop" "new-sites" "new-columns" "new-queue" "new-rows" "get-columns-count" "get-row-count" "-1" "+" "<" "get-col" "cell-col" "get-line" "cell-line" "1" "or" "unmerge-cells" "get-merge-cell" "when" "cell->site" "site" "get-cell-title" "title" "get-cell-data" "cell-data" "let" "0" ">" "and" "if" "nbcol" "nbline" "cell")}
        {Lisp-Entry "unmerge-cells" method #f 1652 18 1652 31 ("invalidate-rect" "clear-merge-cell" "row/column->site" "site" "column" "row" "lambda" "for-each-cell" "remove!" "merge-cell-list" "set!" "merge-cell-rect" "rect" "when" "cell->site" "get-merge-cell" "merge-cell-to-remove" "let" "cell")}
        {Lisp-Entry "add-merged-row" method #f 1665 18 1665 32 ("error" "not" "when" "clear-merge-cell" "add-merged-row" "get-merged-columns" "cons" "set!" "set-merge-cell!" "Site" "new" "site" "equal?" "if" "column->col" "get-child" "get-data-title" "new-title" "column" "lambda" "for-each" "site-list" "is-valid?" "get-master-cell" "get-cell-title" "merged-title" "let" "merge-cell" "row")}
        {Lisp-Entry "get-merge-cell" method #f 1685 18 1685 32 ("merge-cell-table" "table-ref" "site")}
        {Lisp-Entry "safe-get-merge-cell" method #f 1689 18 1689 37 ("else" "get-merge-cell" "cell" "selection-mode" "case" "site")}
        {Lisp-Entry "set-merge-cell!" method #f 1695 18 1695 33 ("merge-cell-table" "table-set!" "merge-cell" "site")}
        {Lisp-Entry "clear-merge-cell" method #f 1699 18 1699 34 ("merge-cell-table" "table-clear" "site")}
        {Lisp-Entry "merge-cell-selected?" method #f 1703 11 1703 31 ("else" "get-selection" "get-merge-cell" "eq?" "when" "cell->site" "site" "let" "lambda" "some?" "cell" "selection-mode" "case" "show-unfocused-selection?" "has-focus?" "or" "and" "merge-cell")}
        {Lisp-Entry "merge-corner-site" method #f 1716 11 1716 28 ("get-last-site" "get-first-site" "values" "merge-cell")}
        {Lisp-Entry "merge-corner-cell" method #f 1720 11 1720 28 ("get-last-cell" "get-first-cell" "values" "merge-cell")}
        {Lisp-Entry "merge-cell-rect" method #f 1724 18 1724 33 ("get-bottom" "get-right" "get-top" "get-left" "Rect" "new" "bottom-right-rect" "unmerged-site-rect" "top-left-rect" "let" "and" "if" "merge-corner-site" "bottom-right" "top-left" "receive" "merge-cell")}
        {Lisp-Entry "invalidate-merge-cell" method #f 1733 18 1733 39 ("player" "invalidate-region" "get-clipper" "merge-cell-rect" "rect-intersection" "acquire-delta" "Region" "new" "region" "with" "self" "get-delta" "sc" "dv" "dh" "receive" "get-root" "root" "let" "view-visible?" "when" "merge-cell")}
        {Lisp-Entry "get-master-cell" method #f 1741 18 1741 33 ("get-master-cell" "if" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "cell")}
        {Lisp-Entry "get-top-cell" method #f 1748 18 1748 30 ("get-first-cell" "if" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "cell")}
        {Lisp-Entry "find-merged-view" method #f 1755 19 1755 35 ("merge-cell-list" "continuation-return" "eq?" "when" "get-master-cell" "get-cell-data" "data" "let" "merge-cell" "for-each" "return" "lambda" "continuation-capture" "view")}
        {Lisp-Entry "row-index" method #f 1771 18 1771 27 ("continuation-return" "eq?" "when" "line" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "target")}
        {Lisp-Entry "user-data-row" method #f 1781 18 1781 31 ("continuation-return" "get-user-data" "when" "line" "row" "for-each-row" "for-each-visible-row" "if" "return" "lambda" "continuation-capture" "visible?" "visible?:" "eqv?" "test" "test:" "data")}
        {Lisp-Entry "user-data-rows" method #f 1791 18 1791 32 ("get-output" "put" "member?" "when" "get-user-data" "user-data" "line" "row" "lambda" "for-each-row" "for-each-visible-row" "if" "List-Factory" "new" "fact" "let" "visible?" "visible?:" "eqv?" "test" "test:" "data-list")}
        {Lisp-Entry "user-data-index" method #f 1802 18 1802 33 ("continuation-return" "get-user-data" "when" "line" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "eqv?" "test" "test:" "data")}
        {Lisp-Entry "user-data-indexes" method #f 1813 18 1813 35 ("get-output" "put" "member?" "when" "get-user-data" "user-data" "line" "row" "lambda" "for-each-visible-row" "List-Factory" "new" "fact" "let" "eqv?" "test" "test:" "data-list")}
        {Lisp-Entry "select-user-data-row" method #f 1823 18 1823 38 ("row->line" "set-single-selection" "error" "not" "if" "user-data-row" "row" "let" "data")}
        {Lisp-Entry "get-cell-data" method #f 1835 18 1835 31 ("get-child" "error" "selection" "set!" "get-children" "length" "get-col" ">=" "when" "get-line" "get-row" "row" "let" "cell")}
        {Lisp-Entry "set-cell-data" method #f 1844 18 1844 31 ("get-col" "get-children" "set-element!" "get-line" "get-row" "row" "let" "data" "cell")}
        {Lisp-Entry "get-data-title" method #f 1849 18 1849 32 ("get-preserved-data" "Tree-Data-View" "get-title" "Tree-Label" "is?" "cond" "data")}
        {Lisp-Entry "set-data-title" method #f 1856 18 1856 32 ("get-preserved-data" "Tree-Data-View" "set-title" "Tree-Label" "is?" "cond" "title" "data")}
        {Lisp-Entry "get-cell-title" method #f 1863 18 1863 32 ("get-data-title" "when" "get-cell-data" "data" "let" "cell")}
        {Lisp-Entry "set-cell-title" method #f 1869 18 1869 32 ("set-data-title" "when" "get-cell-data" "data" "let" "title" "cell")}
        {Lisp-Entry "invalidate-cell" method #f 1875 18 1875 33 ("cell-rect" "invalidate-rect" "cell")}
        {Lisp-Entry "redraw-cell" method #f 1879 18 1879 29 ("update-view" "invalidate-cell" "cell")}
        {Lisp-Entry "expand/collapse" method #f 1889 20 1889 35 ("nextmethod" "else" "dynamic-expand" "dynamic" "get-state" "case" "node-column" "control-rect" "invalidate-rect" "get-position" "get-v" "top" "let" "row")}
        {Lisp-Entry "dynamic-expand" method #f 1897 18 1897 32 ("expand" "update-row" "row")}
        {Lisp-Entry "invalidate-expand" method #f 1902 20 1902 37 ("plus/minus-rect" "control-rect" "0" "get-sons" "cardinality" "=" "and" "if" "image-rect" "invalidate-rect" "node-column" "when" "dynamic?" "top" "row")}
        {Lisp-Entry "invalidate-collapse" method #f 1910 20 1910 39 ("plus/minus-rect" "line-rect" "if" "image-rect" "invalidate-rect" "node-column" "when" "selected?" "top" "row" "line")}
        {Lisp-Entry "collapse-selection" method #f 1918 20 1918 38 ("car" "not-null?" "set!" "selection-pivot" "line-selected?" "not" "and" "else" "cons" "set-selection" "selection" "member?" "unless" "get-col" "Cell" "new" "let" "when" "cell" "selection-mode" "case" "removed" "line")}
        {Lisp-Entry "auto-expand/collapse" method #f 1932 18 1932 38 ("rows->selection" "else" "not" "get-father" "close-delayed-row" "mouse-up?" "auto-in-place?" "delayed-autorow" "force?:" "get-spine" "new-spine:" "close-auto-expanded" "neq?" "and" "selection-manager" "mouse-down?" "cond" "selection" "selection->rows" "selected-rows" "let" "auto-expand" "auto-expanded-row" "set!" "auto-collapse" "when" "expanded?" "if" "auto-toggle" "define" "auto-toggle?" "auto-toggle?:" "close-auto-expanded?" "close-auto-expanded?:" "row")}
        {Lisp-Entry "close-delayed-row" method #f 1967 18 1967 35 ("auto-collapse" "memq?" "and" "if" "unless" "row" "lambda" "for-each-reversed" "set!" "done?" "get-spine" "old-spine" "let" "delayed-autorow" "when" "new-spine" "new-spine:")}
        {Lisp-Entry "close-auto-expanded" method #f 1980 18 1980 37 ("auto-collapse" "auto-in-place?" "or" "memq?" "and" "if" "unless" "row" "lambda" "for-each-reversed" "set!" "done?" "get-spine" "old-spine" "let" "auto-expanded-row" "when" "force?" "force?:" "new-spine" "new-spine:")}
        {Lisp-Entry "close-auto-expanded-row" method #f 1996 11 1996 34 ("set!" "auto-collapse" "auto-expanded-row" "when")}
        {Lisp-Entry "set-dynamic" method #f 2002 18 2002 29 ("node-column" "control-rect" "invalidate-rect" "row-top" "top" "row->line" "line" "let*" "set-state" "dynamic" "'dynamic" "get-state" "neq?" "when" "row")}
        {Lisp-Entry "ensure-displayed" method #f 2015 20 2015 36 ("selection-row" "ensure-row-displayed" "car" "ensure-cell-displayed" "cell" "'cell" "selection-mode" "eq?" "if" "selection" "not-null?" "when" "rest")}
        {Lisp-Entry "ensure-cell-displayed" method #f 2022 11 2022 32 ("get-scroll-context" "rect-end-position" "rect-position" "scroll-needed" "scroll" "cell-rect" "rect" "let" "cell")}
        {Lisp-Entry "cell->site" method #f 2033 11 2033 21 ("Site" "new" "get-line" "get-row" "row" "get-col" "get-column" "column" "let" "Cell" "is?" "if" "cell")}
        {Lisp-Entry "row/column->site" method #f 2041 11 2041 27 ("Site" "new" "column" "row")}
        {Lisp-Entry "site->cell" method #f 2045 11 2045 21 ("Cell" "new" "get-row" "row->line" "line" "get-column" "column->col" "col" "let" "Site" "is?" "if" "site")}
        {Lisp-Entry "process-selection" method #f 2053 18 2053 35 ("delay-selection" "selection-manager" "allow-start-drag?" "last" "car" "null?" "when" "cons" "equal?" "test:" "remove" "<" "1" "+" "naturals" ">" "=" "0" "pivot" "'cell" "eq?" "user-origin?:" "set-pivot?:" "list" "set-selection" "selection" "member?" "unless" "selection-pivot" "set!" "cond" "or" "multiple-selection?" "and" "if" "get-line" "else" "selection-mode" "case" "element" "let" "control?" "shift?" "cell")}
        {Lisp-Entry "get-selection" method #f 2080 20 2080 33 ("selection")}
        {Lisp-Entry "get-ordered-selection" method #f 2084 18 2084 39 ("selection" "<" "sort")}
        {Lisp-Entry "set-selection" method #f 2088 20 2088 33 ("ensure-displayed" "end-delayed?" "auto-select" "auto-toggle?:" "auto-expand/collapse" "collapsed?" "not" "or" "multiple-selection?" "auto-expand/collapse?" "selection-row" "get-row" "auto-row" "selection-change" "car" "null?" "selection-pivot" "set!" "old-selection" "change-selection?" "locator" "reset" "selection-manager" "locked?" "unless" "list" "invalidate-selection" "invalidate-merge-cell" "if" "cell->site" "get-merge-cell" "Cell" "is?" "and" "merge-cell" "let" "cell" "lambda" "for-each" "not-null?" "when" "selection" "inval-selection" "define" "user-origin?" "user-origin?:" "generate-event?" "generate-event?:" "auto-expand?" "auto-expand?:" "ensure-displayed?" "ensure-displayed?:" "set-pivot?" "set-pivot?:" "force?" "force?:" "sel")}
        {Lisp-Entry "selection-change" method #f 2126 29 2126 45 ("selection" "call-selection-handler" "lambda" "selection-manager" "with-locked-operation" "user-origin?" "force?" "old-selection")}
        {Lisp-Entry "with-preserved-selection" method #f 2132 18 2132 42 ("nu-" "scroll-to" "auto-expand?:" "set-selection" "cell-editor" "replace-cell" "get-master-cell" "kill-edition" "not" "if" "edited" "null?" "car" "not-null?" "cond" "set!" "pivot" "edited-cell" "saved-edited" "list" "selection-pivot" "and" "saved-pivot" "get-scrolled-position" "nu+" "saved-position" "get-selection" "get-box" "rect-position" "1.0" "0" "selection-region" "region" "with" "selection-position" "user-data-index" "row->line" "Cell" "new" "when" "line" "let" "col" "bind" "saved" "restore-row" "restore-cell" "remove-false" "saved-selection" "restore-selection" "get-user-data" "data" "rank" "get-row" "get-col" "get-line" "cons" "save-row" "else" "save-cell" "map" "cell" "selection-mode" "case" "selection" "save-selection" "define" "generate-event?" "generate-event?:" "ensure-displayed?" "ensure-displayed?:" "eqv?" "test" "test:" "row" "'row" "use" "use:" "thunk")}
        {Lisp-Entry "get-single-selection" method #f 2190 18 2190 38 ("car" "selection" "null?" "if")}
        {Lisp-Entry "set-single-selection" method #f 2196 18 2196 38 ("list" "set-selection" "apply" "Cell" "is?" "integer?" "or" "assert" "rest" "sel")}
        {Lisp-Entry "auto-select-first" method #f 2201 18 2201 35 ("list" "set-selection" "0" "get-visible-count" ">" "selection" "null?" "and" "when")}
        {Lisp-Entry "selected-row-proc" method #f 2206 11 2206 28 ("else" "get-line" "get-row" "lambda" "cell" "selection-mode" "case")}
        {Lisp-Entry "get-selected-row" method #f 2215 18 2215 34 ("selected-row-proc" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "get-selected-rows" method #f 2221 18 2221 35 ("selection" "selected-row-proc" "map")}
        {Lisp-Entry "get-selected-data" method #f 2225 18 2225 35 ("get-selected-rows" "get-user-data" "map")}
        {Lisp-Entry "get-single-selected-data" method #f 2229 18 2229 42 ("get-user-data" "when" "get-selected-row" "row" "let")}
        {Lisp-Entry "get-selection-data" method #f 2235 18 2235 36 ("get-user-data" "get-row" "row" "let" "line" "lambda" "map" "selection")}
        {Lisp-Entry "with-deleted-selection" method #f 2242 18 2242 40 ("set-single-selection" "1" "-" "previous" "0" ">" "when" "set-selection" "length" "=" "if" "user-data-index" "map" "remove-false" "sel" "min" "apply" "smallest" "get-selection-data" "and" "data" "let" "can-survive?" "can-survive?:" "proc" "selection")}
        {Lisp-Entry "selection->rows" method #f 2254 11 2254 26 ("else" "get-col" "get-line" "get-visible-row" "cons" "lambda" "map" "cell" "selection-mode" "case" "selection")}
        {Lisp-Entry "rows->selection" method #f 2264 11 2264 26 ("else" "row-index" "Cell" "new" "col" "row" "bind" "pair" "lambda" "map" "remove-false" "cell" "selection-mode" "case" "rows")}
        {Lisp-Entry "added-update-selection" method #f 2276 20 2276 42 ("new-pivot" "selection-pivot" "map" "selection" "set!" "else" "get-col" "Cell" "new" "if" "l" "lambda" "cell" "selection-mode" "case" "proc" "let" "+" "set-line" "get-line" ">=" "edited-cell" "and" "when" "count" "line")}
        {Lisp-Entry "removed-update-selection" method #f 2297 20 2297 44 ("car" "not-null?" "pivot" "selection-pivot" "or" "unless" "old" "collect" "selection" "set!" "else" "get-col" "Cell" "new" "<" "cond" "l" "lambda" "cell" "selection-mode" "case" "proc" "removed" "+" "end-line" "let" "-" "set-line" "get-line" ">=" "edited-cell" "and" "when" "count" "line")}
        {Lisp-Entry "selection-region" method #f 2330 20 2330 36 ("and" "'and" "clipper" "when" "get-root-clipper" "root-clipper" "or" "'or" "combine!" "merge-cell-rect" "row-region" "with" "if" "cell->site" "safe-get-merge-cell" "merge-cell" "in" "for" "loop" "region" "let" "selection-row-region" "else" "cell-rect" "acquire-delta" "Region" "new" "cell" "selection-mode" "case" "element" "element-region" "define" "sc" "dv" "dh" "sel")}
        {Lisp-Entry "selection-row-rect" method #f 2351 20 2351 38 ("get-height" "+" "3" "-" "Rect" "new" "columns-right" "right" "get-position" "get-v" "top" "second" "car" "min" "1" "columns-borders" "length" ">" "if" "left" "node-column" "row-text-left" "node-left" "get-row" "row" "let*" "line")}
        {Lisp-Entry "selection-row" method #f 2362 11 2362 24 ("else" "get-line" "cell" "selection-mode" "case" "element")}
        {Lisp-Entry "cell-visible?" method #f 2373 18 2373 31 ("get-columns-count" "get-col" "visible-count" "get-line" "<" "and" "cell")}
        {Lisp-Entry "borders-left" definition #f 2383 15 2383 27 ("car" "borders")}
        {Lisp-Entry "borders-right" definition #f 2387 15 2387 28 ("cdr" "borders")}
        {Lisp-Entry "borders-width" definition #f 2391 15 2391 28 ("borders-left" "borders-right" "-" "borders")}
        {Lisp-Entry "get-borders" method #f 2395 18 2395 29 ("columns-borders" "element" "col")}
        {Lisp-Entry "column-width" method #f 2399 18 2399 30 ("-" "get-borders" "right" "left" "bind" "col")}
        {Lisp-Entry "line-rect" method #f 2410 20 2410 29 ("get-height" "+" "Rect" "new" "columns-right" "right" "get-position" "get-v" "top" "columns-borders" "car" "borders-left" "left" "get-row" "row" "let*" "line")}
        {Lisp-Entry "cell-position" method #f 2418 18 2418 31 ("get-top" "get-left" "Point" "new" "cell-rect" "rect" "let" "cell")}
        {Lisp-Entry "cell-rect" method #f 2423 18 2423 27 ("unmerged-cell-rect" "merge-cell-rect" "if" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "cell")}
        {Lisp-Entry "unmerged-site-rect" method #f 2430 18 2430 36 ("get-height" "+" "borders-right" "borders-left" "Rect" "new" "get-position" "get-v" "top" "get-row" "row" "get-column" "column->col" "get-borders" "borders" "let*" "site")}
        {Lisp-Entry "unmerged-cell-rect" method #f 2437 18 2437 36 ("get-height" "+" "borders-right" "borders-left" "Rect" "new" "get-position" "get-v" "top" "get-line" "get-row" "row" "get-col" "get-borders" "borders" "let*" "cell")}
        {Lisp-Entry "cell-region" method #f 2444 18 2444 29 ("cell-rect" "Region" "new" "cell")}
        {Lisp-Entry "cell-content-rect" method #f 2448 11 2448 28 ("get-height" "get-column" "content-rect" "offset-rect" "borders-left" "left" "get-borders" "borders" "column-width" "width" "get-cell-data" "data" "get-position" "get-v" "top" "get-row" "row" "get-col" "col" "get-line" "line" "let*" "cell")}
        {Lisp-Entry "cell-text-rect" method #f 2460 11 2460 25 ("0" "get-height" "get-column" "text-rect" "offset-rect" "get-node-column-index" "column-width" "width" "get-cell-data" "data" "get-position" "get-v" "top" "get-row" "row" "get-col" "col" "get-line" "line" "let*" "cell")}
        {Lisp-Entry "view->tree" method #f 2470 18 2470 28 ("cell-visible?" "get-top-cell" "Cell" "new" "cell" "0" ">=" "and" "h->merged-cells-col" "v->merged-cells-line" "set!" "not" "when" "get-h" "h->col" "col" "v->row" "default-row-height" "get-v" "quotient" "if" "line" "let" "uniform-height?" "uniform-height?:" "any?" "any?:" "pos")}
        {Lisp-Entry "call-with-view->tree" method #f 2486 18 2486 38 ("cell-visible?" "Cell" "new" "cell" "0" ">=" "and" "get-h" "h->col" "col" "let" "if" "height" "v" "line" "lambda" "get-v" "call-with-v->row" "proc" "pos")}
        {Lisp-Entry "tree->view" method #f 2500 18 2500 28 ("get-line" "row->v" "get-col" "col->h" "Point" "new" "cell")}
        {Lisp-Entry "h->col" method #f 2506 18 2506 24 ("continuation-return" "/=" "<=" ">=" "and" "when" "right" "left" "bind" "get-columns-count" "below" "0" "from" "col" "columns-borders" "in" "borders" "for" "loop" "return" "lambda" "continuation-capture" "h")}
        {Lisp-Entry "col->h" method #f 2517 11 2517 17 ("get-borders" "borders-left" "col")}
        {Lisp-Entry "h->merged-cells-col" method #f 2521 18 2521 37 ("get-first-col" "continuation-return" "/=" "<=" ">=" "and" "when" "get-right" "right" "get-left" "left" "merge-cell-rect" "rect" "let" "merge-cell-list" "in" "merge-cell" "for" "loop" "return" "lambda" "continuation-capture" "h")}
        {Lisp-Entry "v->merged-cells-line" method #f 2533 18 2533 38 ("get-first-line" "continuation-return" "/=" "<=" ">=" "and" "get-bottom" "bottom" "get-top" "top" "when" "merge-cell-rect" "rect" "let" "merge-cell-list" "in" "merge-cell" "for" "loop" "return" "lambda" "continuation-capture" "v")}
        {Lisp-Entry "in-edition?" method #f 2551 18 2551 29 ("edited-cell")}
        {Lisp-Entry "edit-cell" method #f 2555 18 2555 27 ("set-visible?" "close-cell-editor?" "cell-editor" "edited-cell" "set!" "self" "get-parent" "acquire" "set-rect" "get-top-cell" "replace-cell" "list" "children:" "visible?:" "get-cell-data" "preserved-data:" "Tree-Data-View" "new" "view" "cell-editor-rect" "rect" "let" "end-edition" "get-columns-count" "get-col" "<" "update-locked?" "not" "assert" "after-end" "after-end:" "before-end" "before-end:" "close-editor?" "close-editor?:" "cover-spacing?" "cover-spacing?:" "editor" "editor:" "cell")}
        {Lisp-Entry "end-edition" method #f 2575 18 2575 29 ("invalidate-rect" "set-parent" "close" "close-cell-editor?" "get-master-cell" "replace-cell" "if" "cell->site" "safe-get-merge-cell" "merge-cell" "get-preserved-data" "preserved-data" "set!" "get-after-end" "after-end" "get-before-end" "before-end" "cell-editor-rect" "bounds" "cell-editor" "editor" "cell" "let" "edited-cell" "when")}
        {Lisp-Entry "kill-edition" method #f 2599 18 2599 30 ("set-parent" "close" "close-cell-editor?" "if" "set!" "cell-editor" "editor" "cell" "let" "edited-cell" "when")}
        {Lisp-Entry "replace-cell" method #f 2610 18 2610 30 ("get-col" "get-line" "get-row" "replace-child" "child" "cell")}
        {Lisp-Entry "cell-editor-rect" method #f 2614 11 2614 27 ("offset-rect" "get-height" "content-rect" "rect" "get-level" "text-h" "h" "borders-left" "left" "get-borders" "borders" "get-width" "column-width" "show-header?" "width" "get-cell-data" "get-position" "get-v" "top" "get-column" "column" "get-row" "row" "get-col" "col" "get-line" "line" "let*" "merge-cell-rect" "if" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "cell")}
        {Lisp-Entry "cell-up" method #f 2633 18 2633 25 ("Cell" "new" "0" ">=" "when" "get-col" "col" "1" "get-line" "get-first-line" "if" "-" "line" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "cell")}
        {Lisp-Entry "cell-down" method #f 2643 18 2643 27 ("Cell" "new" "get-visible-count" "<" "not" "or" "when" "get-col" "col" "1" "get-line" "get-last-line" "if" "+" "line" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "validate?" "cell")}
        {Lisp-Entry "cell-left" method #f 2653 18 2653 27 ("Cell" "new" "0" ">=" "when" "1" "get-col" "get-first-col" "if" "-" "col" "get-line" "line" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "cell")}
        {Lisp-Entry "cell-right" method #f 2663 18 2663 28 ("Cell" "new" "get-columns-count" "<" "when" "1" "get-col" "get-first-col" "if" "+" "col" "get-line" "line" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "cell")}
        {Lisp-Entry "select-up" method #f 2673 18 2673 27 ("select-cell" "end-edition" "when" "cell-up" "sel" "let" "cell")}
        {Lisp-Entry "select-down" method #f 2680 18 2680 29 ("select-cell" "end-edition" "when" "cell-down" "sel" "let" "validate?" "cell")}
        {Lisp-Entry "select-left" method #f 2687 18 2687 29 ("select-cell" "end-edition" "when" "cell-left" "sel" "let" "cell")}
        {Lisp-Entry "select-right" method #f 2694 18 2694 30 ("select-cell" "end-edition" "when" "cell-right" "sel" "let" "cell")}
        {Lisp-Entry "select-cell" method #f 2701 26 2701 37 ("get-line" "set-single-selection" "cell")}
        {Lisp-Entry "get-class-descriptor" method #f 2710 25 2710 45 ("Tree-View-Descriptor" "new")}}
      {Lisp-Entry "Tree-Locator" class #f 2719 7 2719 19 ("initialize" "Locator")
        {Lisp-Entry "tree" slot #f 2722 8 2722 12 ()}
        {Lisp-Entry "column" slot #f 2723 8 2723 14 ()}
        {Lisp-Entry "initialize" method #f 2726 20 2726 30 ("nextmethod" "apply" "tree~self" "set!" "rest" "tree")}
        {Lisp-Entry "iterate" method #f 2731 20 2731 27 ("wrap?:" "get-next" "prefix" "when" "start:" "get-title" "title" "node" "let*" "line" "for-each-visible-row" "proc2" "bind" "car" "else" "get-children" "element" "row" "lambda" "get-line" "get-row" "and" "cons" "0" "get-col" "if" "column" "set!" "cell" "get-selection-mode" "case" "tree" "get-single-selection" "sel" "let" "prepare-iterate" "define" "proc")}
        {Lisp-Entry "select" method #f 2753 20 2753 26 ("else" "column" "Cell" "new" "set-single-selection" "cell" "tree" "get-selection-mode" "case" "line")}}
      {Lisp-Entry "Merge-Cell" class #f 2764 7 2764 17 ("initialize" "Object")
        {Lisp-Entry "master-cell" slot #f 2767 8 2767 19 ()}
        {Lisp-Entry "get-master-cell" accessor #f 2767 48 2767 56 ()}
        {Lisp-Entry "set-master-cell" accessor #f 2767 48 2767 56 ()}
        {Lisp-Entry "merged-rows" slot #f 2768 8 2768 19 ()}
        {Lisp-Entry "get-merged-rows" accessor #f 2768 48 2768 56 ()}
        {Lisp-Entry "set-merged-rows" accessor #f 2768 48 2768 56 ()}
        {Lisp-Entry "merged-columns" slot #f 2769 8 2769 22 ()}
        {Lisp-Entry "get-merged-columns" accessor #f 2769 48 2769 56 ()}
        {Lisp-Entry "set-merged-columns" accessor #f 2769 48 2769 56 ()}
        {Lisp-Entry "tree" slot #f 2770 8 2770 12 ()}
        {Lisp-Entry "get-tree" accessor #f 2770 48 2770 56 ()}
        {Lisp-Entry "set-tree" accessor #f 2770 48 2770 56 ()}
        {Lisp-Entry "initialize" method #f 2773 20 2773 30 ("tree" "merged-columns" "merged-rows" "master-cell" "set!" "nextmethod" "cells-tree" "columns-list" "rows-list" "cell")}
        {Lisp-Entry "print" method #f 2781 20 2781 25 ("format-plural" "format" "merged-columns" "c" "merged-rows" "length" "r" "let" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "add-merged-row" method #f 2789 18 2789 32 ("cons" "merged-rows" "set!" "row")}
        {Lisp-Entry "for-each-cell" method #f 2793 18 2793 31 ("merged-rows" "merged-columns" "column" "row" "lambda" "for-each" "proc")}
        {Lisp-Entry "get-first-row" method #f 2801 18 2801 31 ("merged-rows" "first")}
        {Lisp-Entry "get-last-row" method #f 2805 18 2805 30 ("merged-rows" "last")}
        {Lisp-Entry "get-first-column" method #f 2809 18 2809 34 ("merged-columns" "first")}
        {Lisp-Entry "get-last-column" method #f 2813 18 2813 33 ("merged-columns" "last")}
        {Lisp-Entry "get-first-site" method #f 2817 18 2817 32 ("get-first-column" "get-first-row" "Site" "new")}
        {Lisp-Entry "get-last-site" method #f 2821 18 2821 31 ("get-last-column" "get-last-row" "Site" "new")}
        {Lisp-Entry "get-first-line" method #f 2825 18 2825 32 ("merged-rows" "set!" "<" "not" "or" "tree" "row->line" "line" "get-visible?" "when" "row" "lambda" "for-each" "first-line" "let")}
        {Lisp-Entry "get-last-line" method #f 2837 18 2837 31 ("merged-rows" "set!" ">" "tree" "row->line" "line" "get-visible?" "when" "row" "lambda" "for-each" "0" "last-line" "let")}
        {Lisp-Entry "get-first-col" method #f 2848 18 2848 31 ("merged-columns" "set!" "<" "not" "or" "tree" "column->col" "col" "get-visible?" "when" "column" "lambda" "for-each" "first-col" "let")}
        {Lisp-Entry "get-last-col" method #f 2860 18 2860 30 ("merged-columns" "set!" ">" "tree" "column->col" "col" "get-visible?" "when" "column" "lambda" "for-each" "0" "last-col" "let")}
        {Lisp-Entry "get-first-cell" method #f 2871 18 2871 32 ("Cell" "new" "and" "if" "get-first-col" "first-col" "get-first-line" "first-line" "let")}
        {Lisp-Entry "get-last-cell" method #f 2879 18 2879 31 ("Cell" "new" "get-last-col" "last-col" "get-last-line" "last-line" "let")}}
      {Lisp-Entry "design" submodule #f 2891 11 2891 17 ()
        {Lisp-Entry "Tree-View-Descriptor" class #f 2897 7 2897 27 ("content" "reorderable?" "column-spacing" "filled-column" "empty-background" "cell-background" "auto-expand/collapse?" "focused-on-descendants?" "show-unfocused-selection?" "can-select-empty?" "multiple-selection?" "selection-mode" "show-header?" "domain" "title:" "portfolio" "name:" "Outline-View-Descriptor")
          {Lisp-Entry "class-image" method #f 2928 20 2928 31 ("Image-Resource" "class")}}}}})
"Tree-Widget"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "widget" "Tree-Widget.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.widget.Tree-Widget" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Tree-Widget" class #f 44 7 44 18 (":images" "portfolio:" "tree" "header" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "document" "scroller" "entry" "style:" "edge" "border-type:" "border" "name:" "Outline-View")}}})
"User-Reporter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "User-Reporter.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.User-Reporter" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "User-Reporter" class #f 44 20 44 33 ("Reporter" "Object")
        {Lisp-Entry "section-title" method #f 47 20 47 33 ("user-message" "title")}
        {Lisp-Entry "set-message" method #f 51 20 51 31 ("get-application" "set-status-message" "update?" "msg")}
        {Lisp-Entry "user-message" method #f 55 20 55 32 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "user-feedback" method #f 59 20 59 33 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "set-range" method #f 63 20 63 29 ("range")}
        {Lisp-Entry "set-pos" method #f 67 20 67 27 ("pos")}
        {Lisp-Entry "delta-pos" method #f 71 20 71 29 ("increment")}
        {Lisp-Entry "set-step" method #f 75 20 75 28 ("increment")}
        {Lisp-Entry "step-it" method #f 79 20 79 27 ()}
        {Lisp-Entry "set-done" method #f 83 20 83 28 ()}
        {Lisp-Entry "disable-cancel" method #f 87 20 87 34 ()}
        {Lisp-Entry "cancel-requested?" method #f 91 20 91 37 ()}
        {Lisp-Entry "test-cancelled" method #f 95 20 95 34 ()}}}})
"Vertical-Line"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Vertical-Line.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Vertical-Line" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Vertical-Line" class #f 44 7 44 20 ("View")
        {Lisp-Entry "default-size" method #f 47 20 47 32 ("100" "8" "Dimension")}
        {Lisp-Entry "draw" method #f 56 20 56 24 ("left" "edges:" "sunken" "'sunken" "outer:" "raised" "'raised" "inner:" "2" "0" "Rect" "new" "draw-edge" "Medium" "name:" "Color" "color" "get-height" "height" "let" "lv" "lh" "context" "surface")}}}})
"View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "View.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.View" module #f 38 18 38 35 ("jazz")
      {Lisp-Entry "View" class #f 57 7 57 11 ("1.0" "0" "5" "explicit" "initialize" "Context-Provider" "Actionable" "Drawing")
        {Lisp-Entry "title" property #f 60 12 60 17 ()}
        {Lisp-Entry "font" property #f 61 12 61 16 ()}
        {Lisp-Entry "background" property #f 62 12 62 22 ()}
        {Lisp-Entry "auto-size?" property #f 63 12 63 22 ()}
        {Lisp-Entry "tooltip?" property #f 64 12 64 20 ()}
        {Lisp-Entry "tooltip-text" property #f 65 12 65 24 ()}
        {Lisp-Entry "draggable?" property #f 66 12 66 22 ()}
        {Lisp-Entry "drag-tolerance" property #f 67 12 67 26 ()}
        {Lisp-Entry "get-drag-tolerance" accessor #f 67 73 67 81 ()}
        {Lisp-Entry "set-drag-tolerance" accessor #f 67 73 67 81 ()}
        {Lisp-Entry "enabled?" property #f 68 12 68 20 ()}
        {Lisp-Entry "outline-view" property #f 69 12 69 24 ()}
        {Lisp-Entry "get-outline-view" accessor #f 69 73 69 81 ()}
        {Lisp-Entry "set-outline-view" accessor #f 69 73 69 81 ()}
        {Lisp-Entry "offscreen?" property #f 70 12 70 22 ()}
        {Lisp-Entry "layer" property #f 72 12 72 17 ()}
        {Lisp-Entry "effect" property #f 73 12 73 18 ()}
        {Lisp-Entry "user-data" property #f 74 12 74 21 ()}
        {Lisp-Entry "get-user-data" accessor #f 74 73 74 81 ()}
        {Lisp-Entry "set-user-data" accessor #f 74 73 74 81 ()}
        {Lisp-Entry "disabled-navigate?" property #f 75 12 75 30 ()}
        {Lisp-Entry "get-disabled-navigate?" accessor #f 75 73 75 81 ()}
        {Lisp-Entry "set-disabled-navigate?" accessor #f 75 73 75 81 ()}
        {Lisp-Entry "focus-gained-handler" property #f 78 12 78 32 ()}
        {Lisp-Entry "get-focus-gained-handler" accessor #f 78 73 78 81 ()}
        {Lisp-Entry "set-focus-gained-handler" accessor #f 78 73 78 81 ()}
        {Lisp-Entry "focus-lose-handler" property #f 79 12 79 30 ()}
        {Lisp-Entry "get-focus-lose-handler" accessor #f 79 73 79 81 ()}
        {Lisp-Entry "set-focus-lose-handler" accessor #f 79 73 79 81 ()}
        {Lisp-Entry "cursor-update-handler" property #f 80 12 80 33 ()}
        {Lisp-Entry "get-cursor-update-handler" accessor #f 80 73 80 81 ()}
        {Lisp-Entry "set-cursor-update-handler" accessor #f 80 73 80 81 ()}
        {Lisp-Entry "mouse-enter-handler" property #f 81 12 81 31 ()}
        {Lisp-Entry "get-mouse-enter-handler" accessor #f 81 73 81 81 ()}
        {Lisp-Entry "set-mouse-enter-handler" accessor #f 81 73 81 81 ()}
        {Lisp-Entry "mouse-hover-handler" property #f 82 12 82 31 ()}
        {Lisp-Entry "get-mouse-hover-handler" accessor #f 82 73 82 81 ()}
        {Lisp-Entry "set-mouse-hover-handler" accessor #f 82 73 82 81 ()}
        {Lisp-Entry "mouse-leave-handler" property #f 83 12 83 31 ()}
        {Lisp-Entry "get-mouse-leave-handler" accessor #f 83 73 83 81 ()}
        {Lisp-Entry "set-mouse-leave-handler" accessor #f 83 73 83 81 ()}
        {Lisp-Entry "mouse-down-handler" property #f 84 12 84 30 ()}
        {Lisp-Entry "get-mouse-down-handler" accessor #f 84 73 84 81 ()}
        {Lisp-Entry "set-mouse-down-handler" accessor #f 84 73 84 81 ()}
        {Lisp-Entry "mouse-move-handler" property #f 85 12 85 30 ()}
        {Lisp-Entry "get-mouse-move-handler" accessor #f 85 73 85 81 ()}
        {Lisp-Entry "set-mouse-move-handler" accessor #f 85 73 85 81 ()}
        {Lisp-Entry "mouse-up-handler" property #f 86 12 86 28 ()}
        {Lisp-Entry "get-mouse-up-handler" accessor #f 86 73 86 81 ()}
        {Lisp-Entry "set-mouse-up-handler" accessor #f 86 73 86 81 ()}
        {Lisp-Entry "drag-move-handler" property #f 87 12 87 29 ()}
        {Lisp-Entry "get-drag-move-handler" accessor #f 87 73 87 81 ()}
        {Lisp-Entry "set-drag-move-handler" accessor #f 87 73 87 81 ()}
        {Lisp-Entry "drag-up-handler" property #f 88 12 88 27 ()}
        {Lisp-Entry "get-drag-up-handler" accessor #f 88 73 88 81 ()}
        {Lisp-Entry "set-drag-up-handler" accessor #f 88 73 88 81 ()}
        {Lisp-Entry "double-click-handler" property #f 89 12 89 32 ()}
        {Lisp-Entry "get-double-click-handler" accessor #f 89 73 89 81 ()}
        {Lisp-Entry "set-double-click-handler" accessor #f 89 73 89 81 ()}
        {Lisp-Entry "current-drop-handler" property #f 90 12 90 32 ()}
        {Lisp-Entry "get-current-drop-handler" accessor #f 90 73 90 81 ()}
        {Lisp-Entry "set-current-drop-handler" accessor #f 90 73 90 81 ()}
        {Lisp-Entry "receive-drop-handler" property #f 91 12 91 32 ()}
        {Lisp-Entry "get-receive-drop-handler" accessor #f 91 73 91 81 ()}
        {Lisp-Entry "set-receive-drop-handler" accessor #f 91 73 91 81 ()}
        {Lisp-Entry "receive-files-handler" property #f 92 12 92 33 ()}
        {Lisp-Entry "get-receive-files-handler" accessor #f 92 73 92 81 ()}
        {Lisp-Entry "set-receive-files-handler" accessor #f 92 73 92 81 ()}
        {Lisp-Entry "context-menu-handler" property #f 93 12 93 32 ()}
        {Lisp-Entry "get-context-menu-handler" accessor #f 93 73 93 81 ()}
        {Lisp-Entry "set-context-menu-handler" accessor #f 93 73 93 81 ()}
        {Lisp-Entry "key-press-handler" property #f 94 12 94 29 ()}
        {Lisp-Entry "get-key-press-handler" accessor #f 94 73 94 81 ()}
        {Lisp-Entry "set-key-press-handler" accessor #f 94 73 94 81 ()}
        {Lisp-Entry "arrow-press-handler" property #f 95 12 95 31 ()}
        {Lisp-Entry "get-arrow-press-handler" accessor #f 95 73 95 81 ()}
        {Lisp-Entry "set-arrow-press-handler" accessor #f 95 73 95 81 ()}
        {Lisp-Entry "escape-press-handler" property #f 96 12 96 32 ()}
        {Lisp-Entry "get-escape-press-handler" accessor #f 96 73 96 81 ()}
        {Lisp-Entry "set-escape-press-handler" accessor #f 96 73 96 81 ()}
        {Lisp-Entry "backspace-press-handler" property #f 97 12 97 35 ()}
        {Lisp-Entry "get-backspace-press-handler" accessor #f 97 73 97 81 ()}
        {Lisp-Entry "set-backspace-press-handler" accessor #f 97 73 97 81 ()}
        {Lisp-Entry "return-press-handler" property #f 98 12 98 32 ()}
        {Lisp-Entry "get-return-press-handler" accessor #f 98 73 98 81 ()}
        {Lisp-Entry "set-return-press-handler" accessor #f 98 73 98 81 ()}
        {Lisp-Entry "tab-press-handler" property #f 99 12 99 29 ()}
        {Lisp-Entry "get-tab-press-handler" accessor #f 99 73 99 81 ()}
        {Lisp-Entry "set-tab-press-handler" accessor #f 99 73 99 81 ()}
        {Lisp-Entry "content-change-handler" property #f 100 12 100 34 ()}
        {Lisp-Entry "get-content-change-handler" accessor #f 100 73 100 81 ()}
        {Lisp-Entry "set-content-change-handler" accessor #f 100 73 100 81 ()}
        {Lisp-Entry "selection-handler" property #f 101 12 101 29 ()}
        {Lisp-Entry "get-selection-handler" accessor #f 101 73 101 81 ()}
        {Lisp-Entry "set-selection-handler" accessor #f 101 73 101 81 ()}
        {Lisp-Entry "action-handler" property #f 102 12 102 26 ()}
        {Lisp-Entry "player" slot #f 105 8 105 14 ()}
        {Lisp-Entry "offscreen" slot #f 106 8 106 17 ()}
        {Lisp-Entry "scroller" slot #f 107 8 107 16 ()}
        {Lisp-Entry "renderer" slot #f 108 8 108 16 ()}
        {Lisp-Entry "get-renderer" accessor #f 108 73 108 81 ()}
        {Lisp-Entry "set-renderer" accessor #f 108 73 108 81 ()}
        {Lisp-Entry "scaled?" slot #f 109 8 109 15 ()}
        {Lisp-Entry "scaling" slot #f 110 8 110 15 ()}
        {Lisp-Entry "previous-size" slot #f 111 8 111 21 ()}
        {Lisp-Entry "update-locked?" slot #f 112 8 112 22 ()}
        {Lisp-Entry "get-update-locked?" accessor #f 112 70 112 78 ()}
        {Lisp-Entry "scrollee-locked?" slot #f 113 8 113 24 ()}
        {Lisp-Entry "modified?" slot #f 114 8 114 17 ()}
        {Lisp-Entry "hover-history" slot #f 115 8 115 21 ()}
        {Lisp-Entry "hover-pulse" slot #f 116 8 116 19 ()}
        {Lisp-Entry "tools-info" slot #f 117 8 117 18 ()}
        {Lisp-Entry "shortcut-update" method #f 120 20 120 35 ("action-item")}
        {Lisp-Entry "conclude" method #f 128 20 128 28 ("layout-scrollee" "layout" "nextmethod" "rest")}
        {Lisp-Entry "print" method #f 134 20 134 25 ("size" "position" "title" "name" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "close-with-confirm" method #f 145 26 145 44 ("close")}
        {Lisp-Entry "destroy-component" method #f 149 20 149 37 ("nextmethod" "reset-focus" "get-window-focus" "window-focus" "get-focus" "focus" "call-mouse-leave" "reset-mouse-in" "self" "has-ascendant?" "and" "when" "get-mouse-in" "mouse-in" "let")}
        {Lisp-Entry "destroy" method #f 162 20 162 27 ("invalidate-rect" "View" "is?" "player" "set!" "set-offscreen?" "self" "view-destroyed" "when" "get-host" "host" "get-rect" "rect" "parent" "let" "nextmethod")}
        {Lisp-Entry "component-alias" method #f 180 20 180 35 ("nextmethod" "else" "popup-initiator" ":initiator" "get-root" ":root" "get-guest" ":guest" "get-host" ":host" "case" "name")}
        {Lisp-Entry "get-player" method #f 194 20 194 30 ("player")}
        {Lisp-Entry "set-player" method #f 198 20 198 30 ("acquire-focus" "nextmethod" "set!" "call-mouse-leave" "reset-mouse-in" "not" "and" "reset-focus" "player" "neq?" "get-mouse-in" "mouse" "own-mouse" "self" "eq?" "when" "get-focus" "focus" "let" "own-focus" "define" "plr")}
        {Lisp-Entry "in-player?" method #f 223 18 223 28 ("player" "boolean")}
        {Lisp-Entry "get-overlapped" method #f 227 18 227 32 ("get-overlapped" "when" "get-player" "player" "let")}
        {Lisp-Entry "different-overlapped?" method #f 233 18 233 39 ("get-overlapped" "neq?" "not" "or" "window")}
        {Lisp-Entry "get-host" method #f 242 26 242 34 ("Host-View" "find-ascendant")}
        {Lisp-Entry "get-guest" method #f 246 26 246 35 ("get-guest" "and" "get-host" "host" "let")}
        {Lisp-Entry "install-in-host" method #f 251 26 251 41 ("host")}
        {Lisp-Entry "uninstall-from-host" method #f 255 26 255 45 ("host")}
        {Lisp-Entry "save-guest" method #f 259 26 259 36 ("session" "designer")}
        {Lisp-Entry "add-guest-preferences" method #f 263 18 263 39 ("select?:" "design-events?:" "add-child" "cons" "initargs:" "self" "class-of" "category-identifier" "name:" "get-size" "size:" "get-position" "position:" "Guest-Preferences" "new" "pref" "get-host" "host" "let*" "add-guest-preferences" "'add-guest-preferences" "unimplemented" "initargs" "session" "designer")}
        {Lisp-Entry "host-activate" method #f 277 26 277 39 ()}
        {Lisp-Entry "host-deactivate" method #f 281 26 281 41 ()}
        {Lisp-Entry "focus-default" method #f 285 26 285 39 ("acquire-focus")}
        {Lisp-Entry "get-text-view" method #f 289 26 289 39 ()}
        {Lisp-Entry "frame-guest?" method #f 293 18 293 30 ("self" "get-guest" "eq?" "Frame-Host" "is?" "and" "get-host" "host" "let")}
        {Lisp-Entry "dialog-class" method #f 304 34 304 46 ("Dialog")}
        {Lisp-Entry "frame-class" method #f 308 34 308 45 ("Internal-Frame-Host")}
        {Lisp-Entry "palette-class" method #f 312 34 312 47 ("Palette")}
        {Lisp-Entry "docked-class" method #f 316 34 316 46 ("Docked-Host")}
        {Lisp-Entry "toolbar-class" method #f 320 34 320 47 ("Toolbar-Host")}
        {Lisp-Entry "host-icon" method #f 324 34 324 43 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 328 34 328 44 ()}
        {Lisp-Entry "host-position" method #f 332 34 332 47 ()}
        {Lisp-Entry "host-size" method #f 336 34 336 43 ()}
        {Lisp-Entry "host-minimal-size" method #f 340 26 340 43 ("100" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 344 26 344 41 ()}
        {Lisp-Entry "effective-host-workspaces" method #f 348 18 348 43 ("assq" "and" "or" "error?:" "external-name" "external" "get-associations" "associations" "get-workspaces-preferences" "let*" "host-workspaces" "memq?" "name" "lambda" "collect-if" "get-children" "get-name" "map" "names" "let" "workspaces" "pref" "filter-inexistant-workspaces" "define")}
        {Lisp-Entry "for-each-view-docked" method #f 365 18 365 38 ("children" "Host-View" "get-children" "get-guest" "map" "Pad-View" "for-each-view-docked" "Splitter-View" "is?" "cond" "child" "lambda" "for-each" "proc")}
        {Lisp-Entry "find-view-docked" method #f 376 18 376 34 ("continuation-return" "is?" "when" "guest" "for-each-view-docked" "return" "lambda" "continuation-capture" "type")}
        {Lisp-Entry "find-host" method #f 386 18 386 27 ("children" "get-guest" "Host-View" "is?" "and" "view" "lambda" "find-if" "guest-type")}
        {Lisp-Entry "find-guest" method #f 393 18 393 28 ("get-guest" "when" "find-host" "host" "let" "guest-type")}
        {Lisp-Entry "collect-guest" method #f 399 18 399 31 ("children" "get-guest" "guest" "let" "Host-View" "is?" "when" "view" "lambda" "collect" "guest-type")}
        {Lisp-Entry "get-frame" method #f 408 18 408 27 ("Frame-Host" "find-ascendant")}
        {Lisp-Entry "guest-icon" method #f 412 26 412 36 ("self" "class-of" "host-icon")}
        {Lisp-Entry "focus-activate" method #f 416 26 416 40 ()}
        {Lisp-Entry "focus-deactivate" method #f 420 26 420 42 ()}
        {Lisp-Entry "maximize" method #f 424 26 424 34 ()}
        {Lisp-Entry "restore" method #f 428 26 428 33 ()}
        {Lisp-Entry "new-event" method #f 437 31 437 40 ("self" "new-frame" "apply" "rest")}
        {Lisp-Entry "tool-preferences" method #f 446 26 446 42 ()}
        {Lisp-Entry "get-tools-info" method #f 455 11 455 25 ("eq?" "test:" "make-table" "set!" "tools-info" "unless")}
        {Lisp-Entry "get-tool-info" method #f 461 26 461 39 ("get-tools-info" "table-ref" "tool-name")}
        {Lisp-Entry "set-tool-info" method #f 465 26 465 39 ("get-tools-info" "table-set!" "info" "tool-name")}
        {Lisp-Entry "host-install" method #f 474 26 474 38 ()}
        {Lisp-Entry "host-uninstall" method #f 478 26 478 40 ()}
        {Lisp-Entry "client-activate" method #f 482 26 482 41 ()}
        {Lisp-Entry "client-deactivate" method #f 486 26 486 43 ()}
        {Lisp-Entry "get-tools-view" method #f 495 26 495 40 ()}
        {Lisp-Entry "workspace-minimisable?" method #f 499 26 499 48 ()}
        {Lisp-Entry "validate-dialog" method #f 508 26 508 41 ()}
        {Lisp-Entry "get-modal-result" method #f 512 26 512 42 ()}
        {Lisp-Entry "has-dialog-result?" method #f 516 26 516 44 ()}
        {Lisp-Entry "get-component-editor" method #f 525 26 525 46 ()}
        {Lisp-Entry "content-valid?" method #f 534 26 534 40 ()}
        {Lisp-Entry "validate-content" method #f 538 26 538 42 ()}
        {Lisp-Entry "setup-parent" method #f 547 20 547 32 ("get-player" "parent" "if" "set-player" "nextmethod")}
        {Lisp-Entry "set-parent" method #f 552 20 552 30 ("invalidate-view" "when" "get-player" "and" "set-player" "nextmethod" "view-invalidater" "invalidater" "let" "parent")}
        {Lisp-Entry "get-title" method #f 567 26 567 35 ("title")}
        {Lisp-Entry "set-title" method #f 571 26 571 35 ("adjust-size" "title" "set!" "value")}
        {Lisp-Entry "initially-visible?" method #f 581 20 581 38 ()}
        {Lisp-Entry "show" method #f 585 20 585 24 ("invalidate-view" "nextmethod")}
        {Lisp-Entry "hide" method #f 590 20 590 24 ("when" "nextmethod" "view-invalidater" "invalidater" "let")}
        {Lisp-Entry "update-displayed" method #f 597 29 597 45 ()}
        {Lisp-Entry "get-enabled?" method #f 606 26 606 38 ("enabled?")}
        {Lisp-Entry "set-enabled?" method #f 610 26 610 38 ("invalidate-view" "enabled?" "set!" "flag")}
        {Lisp-Entry "view-enabled?" method #f 615 18 615 31 ("view-enabled?" "View" "parent" "is-not?" "or" "get-enabled?" "and")}
        {Lisp-Entry "get-scaled?" method #f 626 20 626 31 ("scaled?")}
        {Lisp-Entry "set-scaled?" method #f 630 20 630 31 ("invalidate-view" "parent" "if" "update-scrollbars" "update-displayed" "scaled?" "set!" "value")}
        {Lisp-Entry "get-scaling" method #f 641 20 641 31 ("scaling")}
        {Lisp-Entry "set-scaling" method #f 645 20 645 31 ("1000" "*" "round" "/" "scaling" "set!" "value")}
        {Lisp-Entry "enabled-update" method #f 654 20 654 34 ("get-enabled?" "set-enabled?" "action-item")}
        {Lisp-Entry "actionable-reachable?" method #f 658 26 658 47 ("view-visible?")}
        {Lisp-Entry "outline-select" method #f 667 18 667 32 ("list" "set-selection" "acquire-focus" "when" "0" "Cell" "new" "cell" "'cell" "get-selection-mode" "eq?" "Tree-View" "is?" "and" "if" "elem" "outline-view" "row->line" "line" "outline-row" "row" "let*" "focus?" "focus?:")}
        {Lisp-Entry "outline-row" method #f 676 18 676 29 ("Outline-Row" "find-ascendant")}
        {Lisp-Entry "get-offscreen?" method #f 685 20 685 34 ("offscreen?")}
        {Lisp-Entry "set-offscreen?" method #f 689 20 689 34 ("close-offscreen" "not" "set!" "offscreen?" "neq?" "when" "flag")}
        {Lisp-Entry "get-layer" method #f 701 20 701 29 ("layer")}
        {Lisp-Entry "set-layer" method #f 705 20 705 29 ("layer" "set!" "value")}
        {Lisp-Entry "get-effect" method #f 714 20 714 30 ("effect")}
        {Lisp-Entry "set-effect" method #f 718 20 718 30 ("effect" "set!" "value")}
        {Lisp-Entry "get-lie-parent" method #f 727 20 727 34 ("get-v" "scaling" "*" "position" "get-h" "+" "get-lie-parent" "nextmethod" "scaled?" "parent" "not" "or" "if" "sc" "v" "h")}
        {Lisp-Entry "get-global" method #f 738 18 738 28 ("get-lie" "player" "cast" "get-position-in-root" "+")}
        {Lisp-Entry "get-delta" method #f 747 20 747 29 ("nextmethod" "get-v" "get-h" "*" "values" "get-global" "-" "delta" "1.0" "0.0" "get-lie-parent" "sc" "v" "h" "receive" "neq?" "player" "and" "if" "get-player" "origin-player" "let" "origin")}
        {Lisp-Entry "default-position" method #f 761 20 761 36 ("0" "Point")}
        {Lisp-Entry "set-position" method #f 765 20 765 32 ("position-change" "invalidate-rect" "new" "set!" "self" "acquire" "old" "get-bounds" "bounds" "let*" "View" "parent" "is?" "player" "and" "inval?" "let" "position" "/=" "when" "pos")}
        {Lisp-Entry "set-position-noupdate" method #f 780 19 780 40 ("position-change" "set!" "position" "/=" "when" "pos")}
        {Lisp-Entry "default-size" method #f 791 20 791 32 ("100" "Dimension")}
        {Lisp-Entry "minimal-size" method #f 795 26 795 38 ()}
        {Lisp-Entry "preferred-size" method #f 799 26 799 40 ("get-size")}
        {Lisp-Entry "preferred-width" method #f 802 26 802 41 ("preferred-size" "get-width")}
        {Lisp-Entry "preferred-height" method #f 805 26 805 42 ("preferred-size" "get-height")}
        {Lisp-Entry "fit-size" method #f 809 26 809 34 ()}
        {Lisp-Entry "invaled-size" method #f 813 11 813 23 ("rect-union" "self" "acquire" "size-rect" "new" "get-bounds" "old" "let" "View" "parent" "is?" "player" "and" "when" "sz")}
        {Lisp-Entry "set-size" method #f 820 20 820 28 ("parent" "invalidate-rect" "content-size-change" "scroller" "unless" "size-change" "set!" "invaled-size" "let" "size" "/=" "when" "sz")}
        {Lisp-Entry "set-size-noevent" method #f 831 20 831 36 ("parent" "invalidate-rect" "set!" "invaled-size" "let" "size" "/=" "when" "sz")}
        {Lisp-Entry "set-preferred-size" method #f 839 18 839 36 ("preferred-size" "set-size")}
        {Lisp-Entry "set-preferred-width" method #f 842 18 842 37 ("preferred-width" "set-width")}
        {Lisp-Entry "set-preferred-height" method #f 845 18 845 38 ("preferred-height" "set-height")}
        {Lisp-Entry "layout-view" method #f 854 18 854 29 ("layout-drawing")}
        {Lisp-Entry "front-view" method #f 863 18 863 28 ("children" "last")}
        {Lisp-Entry "back-view" method #f 867 18 867 27 ("children" "first")}
        {Lisp-Entry "send-before" method #f 871 20 871 31 ("invalidate-view" "nextmethod" "target")}
        {Lisp-Entry "bring-to-front" method #f 876 20 876 34 ("invalidate-view" "nextmethod" "front?" "unless")}
        {Lisp-Entry "send-to-back" method #f 882 20 882 32 ("invalidate-view" "nextmethod" "back?" "unless")}
        {Lisp-Entry "front-child?" method #f 888 20 888 32 ("children" "last" "eq?" "child")}
        {Lisp-Entry "back-child?" method #f 892 20 892 31 ("children" "first" "eq?" "child")}
        {Lisp-Entry "send-child-to-front" method #f 896 20 896 39 ("move-to-tail!" "children" "set!" "child")}
        {Lisp-Entry "send-child-to-back" method #f 900 20 900 38 ("move-to-head!" "children" "set!" "child")}
        {Lisp-Entry "scrollee-width" method #f 909 29 909 43 ("get-width")}
        {Lisp-Entry "scrollee-height" method #f 913 29 913 44 ("get-height")}
        {Lisp-Entry "dynamic-scrollee?" method #f 919 29 919 46 ()}
        {Lisp-Entry "dynamic-set-scrollee-size" method #f 922 29 922 54 ("scrollee-size" "set-size")}
        {Lisp-Entry "with-update-locked" method #f 931 18 931 36 ("invalidate-update" "set!" "begin" "unwind-protect" "update-locked?" "if" "proc")}
        {Lisp-Entry "invalidate-update" method #f 942 29 942 46 ("update-scrollbars" "invalidate-view")}
        {Lisp-Entry "render" method #f 952 20 952 26 ("nextmethod" "self" "render" "renderer" "if" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "nodes" "draw-self?" "surface")}
        {Lisp-Entry "draw-background" method #f 963 20 963 35 ("fill-rect" "get-bounds" "bounds" "when" "get-drawing-background" "background" "let" "context" "surface")}
        {Lisp-Entry "get-drawing-background" method #f 970 26 970 48 ("background" "context")}
        {Lisp-Entry "draw-content" method #f 974 20 974 32 ("draw" "effective-font" "set-font" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-look" method #f 984 26 984 34 ()}
        {Lisp-Entry "get-offscreen" method #f 993 20 993 33 ("new-offscreen" "set!" "close-offscreen" "renew-context" "begin" "<=" "get-size" "offscreen" "and" "if" "get-height" "height" "size" "get-width" "width" "let" "surface")}
        {Lisp-Entry "new-offscreen" definition #f 1008 15 1008 28 ("Dimension" "Memory-Surface" "new" "height" "width" "surface")}
        {Lisp-Entry "close-offscreen" method #f 1012 19 1012 34 ("set!" "close" "offscreen" "when")}
        {Lisp-Entry "get-opaque?" method #f 1023 20 1023 31 ("background" "boolean")}
        {Lisp-Entry "get-page-setup" method #f 1032 26 1032 40 ("get-application" "default-page-setup")}
        {Lisp-Entry "get-page-setup-designer" method #f 1036 26 1036 49 ("get-application" "default-page-setup-designer")}
        {Lisp-Entry "get-page-setup-for" method #f 1040 18 1040 36 ("set-active-trait" "when" "find-component" "trait" "get-page-setup" "page-setup" "let*" "name")}
        {Lisp-Entry "print-document" method #f 1053 26 1053 40 ("self" "platform-print-document")}
        {Lisp-Entry "print-picture" method #f 1057 26 1057 39 ("self" "platform-print-picture")}
        {Lisp-Entry "print-layout" method #f 1061 26 1061 38 ("acquire-focus" "get-guest" "pane" "client:" "host-title:" "Page-Editor" "new-frame" "frame" "layout-view" "not" "print-preview" "'print-preview" "locate" "set-visible?" "Page-Toolbar" "find-docked" "toolbar" "get-toplevel" "toplevel" "apply-preferences" "previous:" "page" "'page" "name:" "Page-Workspace" "new" "ws" "selected-workspace" "current" "current-document" "client" "let*" "lambda" "with-locked-update" "from-preview?" "from-preview?:")}
        {Lisp-Entry "print-preview" method #f 1077 26 1077 39 ("acquire-focus" "layout-view" "not" "print-layout" "'print-layout" "locate" "set-visible?" "Preview-Toolbar" "find-docked" "toolbar" "get-toplevel" "toplevel" "apply-preferences" "pane:" "previous:" "preview" "'preview" "name:" "Preview-Workspace" "new" "ws" "selected-workspace" "current" "get-guest" "pane" "self" "client:" "host-visible?:" "host-title:" "Preview-Pane" "new-frame" "frame" "let*" "lambda" "with-locked-update" "from-layout?" "from-layout?:")}
        {Lisp-Entry "get-print-area" method #f 1093 26 1093 40 ("scrollee-size" "0" "Point" "position/size->rect" "context")}
        {Lisp-Entry "paginate" method #f 1097 26 1097 34 ("get-output" "0" "naturals" "put" "Rect" "page" "get-top" "v" "*" "get-left" "+" "h" "col" "row" "lambda" "for-each" "List-Factory" "new" "pages" "rows" "fxceiling/" "cols" "rect-height" "height" "rect-width" "width" "get-print-area" "area" "let*" "page-height" "page-width")}
        {Lisp-Entry "with-printing" method #f 1115 21 1115 34 ("restore-printing" "when" "setup-printing" "set!" "begin" "unwind-protect" "preserved" "let" "proc")}
        {Lisp-Entry "setup-printing" method #f 1125 29 1125 43 ("scaled?:" "position:" "list" "update-displayed" "0" "Point" "new" "set!" "scaled?" "sc?" "position" "pos" "let")}
        {Lisp-Entry "restore-printing" method #f 1134 29 1134 45 ("update-displayed" "scaled?:" "scaled?" "position:" "getf" "position" "set!" "preserved")}
        {Lisp-Entry "export-picture" method #f 1145 18 1145 32 ("default-extension:" "choose-new-file" "or" "export-to-png" "1.0" "paint-drawing" "get-height" "get-width" "0" "Rect" "set-clipper" "get-size" "Memory-Surface" "new" "surface" "with" "destination" "destination:" "file" "'file" "where" "where:" "context" "context:")}
        {Lisp-Entry "export-picture" method #f 1153 18 1153 32 ("move-pathname" "exists?" "when" "extensions:" "default-extension:" "choose-new-file" "or" "dest" "delete-file" "Cancel-Signal" "catch" "delete-metafile" "set-clipboard-metafile" "'clipboard" "eq?" "if" "get-metafile" "set!" "1.0" "get-top" "get-left" "paint-drawing" "with-clipper" "offset-rect" "content" "get-v" "lv" "get-h" "lh" "get-lie" "lie" "get-print-area" "area" "let*" "with-printing" "file:" "Picture" "new" "picture" "with" "metafile" "lambda" ":wait" "with-cursor" "create-temporary-file" "clipboard" "case" "let" "destination" "destination:" "file" "'file" "where" "where:" "context" "context:")}
        {Lisp-Entry "get-scroller" method #f 1188 18 1188 30 ("scroller")}
        {Lisp-Entry "set-scroller" method #f 1192 26 1192 38 ("scroller" "set!" "view")}
        {Lisp-Entry "set-scroll-pos" method #f 1196 26 1196 40 ("set-scroll-pos" "scroller" "when" "redraw?" "redraw?:" "pos" "part")}
        {Lisp-Entry "set-scroll-info" method #f 1201 26 1201 41 ("set-scroll-info" "scroller" "when" "page" "max" "min" "part")}
        {Lisp-Entry "compute-scroll-info" method #f 1206 18 1206 37 ("values" "horz" "'horz" "get-width" "hupdate" ">" "vert" "'vert" "get-page-size" "get-height" "-" "set!" "0" "scrollbar-size" "if" "adjust" "vupdate" "define" "hscroll?" "hpage" "hmax" "hmin" "vscroll?" "vpage" "vmax" "vmin" "let")}
        {Lisp-Entry "update-scrollbars" method #f 1236 18 1236 35 ("horz" "'horz" "get-hscroll?" "set-hscroll-needed?" "vert" "'vert" "set-scroll-info" "get-vscroll?" ">" "set-vscroll-needed?" "compute-scroll-info" "hpage" "hmax" "hmin" "vpage" "vmax" "vmin" "receive" "update-locked?" "not" "scroller" "and" "when")}
        {Lisp-Entry "vscroll-needed?" method #f 1247 18 1247 33 (">" "compute-scroll-info" "hpage" "hmax" "hmin" "vpage" "vmax" "vmin" "receive")}
        {Lisp-Entry "hscroll-needed?" method #f 1252 18 1252 33 (">" "compute-scroll-info" "hpage" "hmax" "hmin" "vpage" "vmax" "vmin" "receive")}
        {Lisp-Entry "scroll" method #f 1257 18 1257 24 ("get-scrolled-position" "+" "scroll-to" "0" "Point" "=" "unless" "redraw?" "redraw?:" "delta")}
        {Lisp-Entry "scroll2" method #f 1262 18 1262 25 ("get-scrolled-position" "+" "scroll-to2" "0" "Point" "=" "unless" "redraw?" "redraw?:" "delta")}
        {Lisp-Entry "scroll-to" method #f 1267 18 1267 27 ("clip-rect:" "scroll-view" "get-clipper" "self" "acquire" "clip-rect" "get-bounds" "rect" "scroller" "invalidate-view" "scroll-invalidate" "dv" "dh" "update-scrollbars" "vert" "'vert" "horz" "'horz" "set-scroll-pos" "scrolled" "set!" "position" "*" "Point" "new" "new-pos" "get-v" "v" "get-h" "max" "min" "fxround" "h" "max-v" "0" "max-h" "get-height" "min-v" "get-width" "/" "-" "min-h" "1.0" "scaling" "scaled?" "if" "sc" "display-size" "get-display" "display" "get-size" "size" "let*" "/=" "get-scrolled-position" "pos" "let" "get-scroller" "when" "redraw?" "redraw?:" "dest")}
        {Lisp-Entry "scroll-to2" method #f 1301 18 1301 28 ("get-bounds" "scroll-view2" "scroller" "invalidate-view" "scroll-invalidate" "dv" "dh" "update-scrollbars" "vert" "'vert" "horz" "'horz" "set-scroll-pos" "scrolled" "set!" "position" "*" "Point" "new" "new-pos" "get-v" "v" "get-h" "max" "min" "fxround" "h" "max-v" "0" "max-h" "get-height" "min-v" "get-width" "/" "-" "min-h" "1.0" "scaling" "scaled?" "if" "sc" "display-size" "get-display" "display" "get-size" "size" "let*" "/=" "when" "get-scrolled-position" "pos" "let" "redraw?" "redraw?:" "dest")}
        {Lisp-Entry "redraw-scrollbars" method #f 1332 29 1332 46 ()}
        {Lisp-Entry "scroll-invalidate" method #f 1336 29 1336 46 ("dv" "dh")}
        {Lisp-Entry "scroll-view" method #f 1340 18 1340 29 ("*" "fxround" "scroll-window" "1.0" "0.0" "get-lie-parent" "sc" "v" "h" "receive" "get-clipper" "or" "self" "acquire" "acquired" "view-visible?" "and" "when" "get-display" "display" "get-root" "root" "get-player" "player" "let" "clip-rect" "clip-rect:" "rect" "dv" "dh")}
        {Lisp-Entry "scroll-view2" method #f 1352 18 1352 30 ("scroll-offscreen" "get-clipper" "or" "self" "acquire" "acquired" "when" "get-root" "root" "get-player" "player" "let" "clip-rect" "clip-rect:" "rect" "dv" "dh")}
        {Lisp-Entry "scroll-offscreen" method #f 1361 11 1361 27 (">" "+" "Rect" "new" "invalidate-rect" "0" "<" "when" "get-bottom" "mb" "get-right" "mr" "get-top" "mt" "get-left" "ml" "let" "fill" "draw-rectangle" "set-source-surface" "get-offscreen" "offscreen" "new-clipper" "rect-union" "modified-rect" "offset-rect" "dst-rect" "rect-intersection" "let*" "get-surface" "surface" "with" "clip-rect" "src-rect" "dv" "dh")}
        {Lisp-Entry "get-scrolled-position" method #f 1388 18 1388 39 ("get-display-position" "-")}
        {Lisp-Entry "get-scrolled-h" method #f 1392 18 1392 32 ("get-scrolled-position" "get-h")}
        {Lisp-Entry "get-scrolled-v" method #f 1396 18 1396 32 ("get-scrolled-position" "get-v")}
        {Lisp-Entry "get-scroll-client" method #f 1400 26 1400 43 ("self")}
        {Lisp-Entry "get-line-size" method #f 1404 26 1404 39 ("8" "horz" "13" "vert" "case" "orientation")}
        {Lisp-Entry "get-page-size" method #f 1410 26 1410 39 ("scaling" "/" "fxround" "scaled?" "not" "if" "get-width" "horz" "parent" "get-height" "vert" "case" "size" "let" "orientation")}
        {Lisp-Entry "with-scrollee-locked" method #f 1420 18 1420 38 ("set!" "begin" "unwind-protect" "scrollee-locked?" "if" "proc")}
        {Lisp-Entry "layout-scrollee" method #f 1430 26 1430 41 ("update-scrollbars" "lambda" "with-scrollee-locked" "scrollee-locked?" "set-size" "scrollee-size" "size" "layout-scrollee-content" "dynamic-set-scrollee-size" "dynamic-scrollee?" "begin" "scroller" "not" "if" "update-locked?" "unless" "get-display-width" "get-right" "right" "-" "0" "Point" "new" "scroll" "<" "when" "get-display-height" "fit" "get-bottom" "bottom" "let" "scroll-to-fit" "define")}
        {Lisp-Entry "layout-scrollee-patch" method #f 1463 26 1463 47 ()}
        {Lisp-Entry "layout-scrollee-content" method #f 1467 26 1467 49 ()}
        {Lisp-Entry "scrollee-size" method #f 1471 26 1471 39 ("get-size")}
        {Lisp-Entry "on-vscroll" method #f 1475 27 1475 37 ("orientation" "thumb-pos" "code")}
        {Lisp-Entry "on-hscroll" method #f 1479 27 1479 37 ("orientation" "thumb-pos" "code")}
        {Lisp-Entry "content-size-change" method #f 1491 26 1491 45 ("size")}
        {Lisp-Entry "get-display" method #f 1495 18 1495 29 ("self" "parent" "scroller" "if")}
        {Lisp-Entry "get-display-position" method #f 1501 18 1501 38 ("0" "get-v" "scaling" "get-h" "/" "fxround" "Point" "new" "scaled?" "not" "get-position" "-" "pos" "let" "scroller" "if")}
        {Lisp-Entry "get-display-h" method #f 1512 18 1512 31 ("get-display-position" "get-h")}
        {Lisp-Entry "get-display-v" method #f 1516 18 1516 31 ("get-display-position" "get-v")}
        {Lisp-Entry "get-display-size" method #f 1520 18 1520 34 ("get-height" "scaling" "get-width" "/" "fxround" "Dimension" "new" "scaled?" "not" "parent" "get-size" "size" "let" "scroller" "if")}
        {Lisp-Entry "get-display-width" method #f 1529 18 1529 35 ("get-display-size" "get-width" "scroller" "if")}
        {Lisp-Entry "get-display-height" method #f 1535 18 1535 36 ("get-display-size" "get-height" "scroller" "if")}
        {Lisp-Entry "get-display-rect" method #f 1541 18 1541 34 ("parent" "get-bounds" "scroller" "if")}
        {Lisp-Entry "view->display" method #f 1547 18 1547 31 ("get-v" "scaling" "/" "get-h" "fxround" "Point" "new" "position" "+" "scaled?" "not" "scroller" "if" "pos")}
        {Lisp-Entry "h-view->display" method #f 1555 18 1555 33 ("get-scrolled-position" "get-h" "+" "scroller" "if" "h")}
        {Lisp-Entry "v-view->display" method #f 1561 18 1561 33 ("get-scrolled-position" "get-v" "+" "scroller" "if" "v")}
        {Lisp-Entry "display->view" method #f 1567 18 1567 31 ("get-scrolled-position" "-" "scroller" "if" "pos")}
        {Lisp-Entry "h-display->view" method #f 1573 18 1573 33 ("get-scrolled-position" "get-h" "-" "scroller" "if" "h")}
        {Lisp-Entry "v-display->view" method #f 1579 18 1579 33 ("get-scrolled-position" "get-v" "-" "scroller" "if" "v")}
        {Lisp-Entry "scroll-needed" method #f 1585 18 1585 31 ("get-height" "cdr" "get-v" "get-width" "car" "get-h" "Point" "new" "else" "head" "'head" "eq?" "not" "tail" "'tail" "neq?" "2" "quotient" "<" "and" "cond" "0" "*" "fxround" "if" "use-head?" "proc" ">" "big-range?" "+" "end-offset" "-" "start-offset" "let*" "force-direction" "size" "pos" "lambda" "needed" "get-display-size" "display-size" "get-display-position" "display-pos" "let" "center?" "center?:" "reposition?" "reposition?:" "force-horizontal" "force-horizontal:" "force-vertical" "force-vertical:" "context" "end" "start")}
        {Lisp-Entry "horizontal-scroll-needed" method #f 1607 18 1607 42 (">" "forward" "0" "-" "<" "if" "backward" "case" "get-display-width" "+" "end" "get-display-h" "start" "let*" "direction" "target")}
        {Lisp-Entry "vertical-scroll-needed" method #f 1621 18 1621 40 (">" "forward" "0" "-" "<" "if" "backward" "case" "get-display-height" "+" "end" "get-display-v" "start" "let*" "direction" "target")}
        {Lisp-Entry "default-font" definition #f 1640 14 1640 26 ("Label" "'Label")}
        {Lisp-Entry "get-font" method #f 1644 18 1644 26 ("font")}
        {Lisp-Entry "set-font" method #f 1648 26 1648 34 ("adjust-size" "font" "set!" "fnt")}
        {Lisp-Entry "effective-font" method #f 1653 26 1653 40 ("default-font" "registered-font" "font" "or")}
        {Lisp-Entry "get-background" method #f 1662 18 1662 32 ("background")}
        {Lisp-Entry "set-background" method #f 1666 26 1666 40 ("invalidate-view" "background" "set!" "color")}
        {Lisp-Entry "get-auto-size?" method #f 1676 18 1676 32 ("auto-size?")}
        {Lisp-Entry "set-auto-size?" method #f 1680 18 1680 32 ("adjust-size" "auto-size?" "set!" "value")}
        {Lisp-Entry "adjust-size" method #f 1685 18 1685 29 ("invalidate-view" "set-preferred-size" "else" "set-preferred-height" "height" "set-preferred-width" "width" "case" "auto-size?" "when")}
        {Lisp-Entry "find-mouse-view" method #f 1699 18 1699 33 ("find-drawing" "get-captured-view" "or" "pos")}
        {Lisp-Entry "first-view" method #f 1709 18 1709 28 ("first" "null?" "if" "get-views" "views" "let")}
        {Lisp-Entry "second-view" method #f 1716 18 1716 29 ("second" "2" "length" ">=" "if" "get-views" "views" "let")}
        {Lisp-Entry "last-view" method #f 1723 18 1723 27 ("last" "null?" "if" "get-views" "views" "let")}
        {Lisp-Entry "get-views" method #f 1730 18 1730 27 ("get-children" "get-visible?" "or" "View" "is?" "and" "child" "lambda" "collect-if" "reverse!" "include-invisibles?" "include-invisibles?:")}
        {Lisp-Entry "front-view?" method #f 1738 18 1738 29 ("parent" "first-view" "self" "eq?")}
        {Lisp-Entry "focus-actions" method #f 1747 20 1747 33 ("nextmethod" "view" "'view" "find-actions" "cons")}
        {Lisp-Entry "guest-actions" method #f 1752 20 1752 33 ("nextmethod" "guest" "'guest" "find-actions" "cons")}
        {Lisp-Entry "call-content-change" method #f 1762 11 1762 30 ("content-change" "origin:" "list" ":change" "Event" "new" "self" "invoke-handler" "content-change-handler" "if" "origin")}
        {Lisp-Entry "content-change" method #f 1768 26 1768 40 ("origin")}
        {Lisp-Entry "call-selection-handler" method #f 1777 18 1777 40 ("user-origin?:" "force?:" ":selection-change" "Selection-Event" "new" "self" "invoke-handler" "selection-handler" "when" "user-origin?" "force?" "selection" "old")}
        {Lisp-Entry "get-modified?" method #f 1787 26 1787 39 ("modified?")}
        {Lisp-Entry "set-modified?" method #f 1791 26 1791 39 ("set!" "modified?" "neq?" "when" "state")}
        {Lisp-Entry "position-change" method #f 1801 26 1801 41 ("position")}
        {Lisp-Entry "size-change" method #f 1805 26 1805 37 ("call-layout" "get-finished?" "invalidate-layout" "resize" "0" "/=" "or" "dv" "-" "dh" "when" "set!" "height" "width" "get-height" "ph" "get-width" "previous-size" "and" "pw" "let" "size")}
        {Lisp-Entry "resize" method #f 1821 29 1821 35 ("dv" "dh")}
        {Lisp-Entry "acquire-focus" method #f 1830 18 1830 31 ("self" "set-focus")}
        {Lisp-Entry "call-focus-gained" method #f 1834 18 1834 35 ("focus-gained" ":focus-gained" "Event" "new" "invoke-handler" "focus-gained-handler" "if" "self" "get-focus-actions" "get-application" "set-focus-actions")}
        {Lisp-Entry "call-focus-lose" method #f 1841 18 1841 33 ("focus-lose" ":focus-lose" "Event" "new" "self" "invoke-handler" "focus-lose-handler" "if" "get-application" "set-focus-actions")}
        {Lisp-Entry "call-focus-lost" method #f 1848 18 1848 33 ("focus-lost")}
        {Lisp-Entry "has-focus?" method #f 1852 18 1852 28 ("get-focus" "self" "eq?")}
        {Lisp-Entry "focus-lose" method #f 1856 26 1856 36 ()}
        {Lisp-Entry "focus-lost" method #f 1860 26 1860 36 ()}
        {Lisp-Entry "focus-master" method #f 1864 26 1864 38 ("self")}
        {Lisp-Entry "focus-reset" method #f 1868 26 1868 37 ()}
        {Lisp-Entry "focus-gained" method #f 1872 26 1872 38 ()}
        {Lisp-Entry "focus-delegate" method #f 1876 26 1876 40 ()}
        {Lisp-Entry "focus-update-actions" method #f 1880 26 1880 46 ()}
        {Lisp-Entry "get-focus-container" method #f 1884 26 1884 45 ("Focus-Container" "find-ascendant")}
        {Lisp-Entry "focusable?" method #f 1888 26 1888 36 ("container-focusable?" "not" "or" "get-focus-container" "container" "let" "get-visible?" "in-player?" "and")}
        {Lisp-Entry "ensure-focusable" method #f 1896 26 1896 42 ("ensure-container-focusable" "when" "get-focus-container" "container" "let")}
        {Lisp-Entry "get-action-handler" method #f 1907 18 1907 36 ("action-handler")}
        {Lisp-Entry "set-action-handler" method #f 1911 26 1911 44 ("self" "register-actionable" "require-action-item" "action-item" "let" "Action" "is?" "when" "action-handler" "set!" "value")}
        {Lisp-Entry "process-action" method #f 1919 26 1919 40 ("notify-action" "action-properties" "properties" "sender")}
        {Lisp-Entry "action-properties" method #f 1923 29 1923 46 ()}
        {Lisp-Entry "notify-action" method #f 1927 18 1927 31 ("self" "notify-handler" "action-handler" "when" "properties" "sender")}
        {Lisp-Entry "dispatch-receive-files" method #f 1937 21 1937 43 ("call-receive-files" "self" "acquire" "view-pos" "when" "find-mouse-view" "view" "let" "files" "pos")}
        {Lisp-Entry "call-receive-files" method #f 1944 18 1944 36 ("receive-files" "files:" "position:" ":receive-files" "Event" "new" "self" "invoke-handler" "receive-files-handler" "if" "files" "pos")}
        {Lisp-Entry "receive-files" method #f 1950 26 1950 39 ("receive-files" "get-application" "appl" "let" "pathnames" "pos")}
        {Lisp-Entry "call-cursor-update" method #f 1960 18 1960 36 ("cursor-update" ":set-cursor" "Cursor-Event" "new" "self" "invoke-handler" "cursor-update-handler" "if" "pos")}
        {Lisp-Entry "cursor-update" method #f 1966 26 1966 39 (":arrow" "set-cursor" "current-drag-drop" "unless" "pos")}
        {Lisp-Entry "mouse-pressed?" method #f 1971 18 1971 32 ("mouse-down?")}
        {Lisp-Entry "mouse-right-pressed?" method #f 1975 18 1975 38 ("get-mouse-right-down?")}
        {Lisp-Entry "mouse-in?" method #f 1979 18 1979 27 ("get-mouse-in" "self" "eq?")}
        {Lisp-Entry "mouse-over?" method #f 1983 18 1983 29 ("mouse-position" "over-view?")}
        {Lisp-Entry "over-view?" method #f 1987 18 1987 28 ("in-rect?" "get-bounds" "bounds" "let" "point")}
        {Lisp-Entry "mouse-position" method #f 1992 18 1992 32 ("mouse-position" "acquire" "get-root" "root" "get-player" "player" "let")}
        {Lisp-Entry "call-mouse-hover" method #f 2003 11 2003 27 ("popup-tooltip" "get-tooltip?" "when" "mouse-hover" ":mouse-hover" "Mouse-Event" "new" "self" "invoke-handler" "mouse-hover-handler" "if" "pos")}
        {Lisp-Entry "dispatch-mouse-down" method #f 2011 21 2011 40 ("call-cursor-update" "call-mouse-down" "mouse-activate" "focused-host?" "not" "get-host" "host" "mouse-activate?" "mouse-copy" "alt-down?" "and" "unless" "set-mouse-down-point" "set-mouse-down-view" "set-mouse-down?" "self" "acquire" "acquired" "get-focus" "actual-focus" "let" "mouse-down" "'mouse-down" "event:" "close-popups" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "call-mouse-down" method #f 2030 18 2030 33 ("mouse-down" ":mouse-down" "Mouse-Event" "new" "self" "invoke-handler" "mouse-down-handler" "if" "pos")}
        {Lisp-Entry "dispatch-mouse-move" method #f 2036 21 2036 40 ("process-mouse-move" "process-drag-move" "call-cursor-update" "self" "mouse-down-view" "acquire" "acquired" "mouse-down?" "if" "track-tooltip" "current-drag-drop" "*current-tooltip-context*" "track-mouse-leave" "call-mouse-enter" "set-mouse-in" "cancel-tooltip-tracking" "in-tooltip?" "is?" "or" "unless" "get-handle" "cancel-mouse-leave-tracking" "call-mouse-leave" "get-mouse-in" "neq?" "Tooltip" "get-overlapped" "is-not?" "and" "get-player" "player" "when" "find-mouse-view" "view" "Point" "new" "pos" "let" "v" "h")}
        {Lisp-Entry "process-mouse-move" method #f 2063 11 2063 29 ("call-mouse-move" "process-tooltip" "*current-tooltip-context*" "when" "pos")}
        {Lisp-Entry "call-mouse-move" method #f 2069 11 2069 26 ("mouse-move" ":mouse-move" "Mouse-Event" "new" "self" "invoke-handler" "mouse-move-handler" "if" "pos")}
        {Lisp-Entry "dispatch-mouse-up" method #f 2075 21 2075 38 ("set-delayed-mouse-action" "action" "get-delayed-mouse-action" "process-mouse-up" "call-cursor-update" "acquired" "let" "self" "acquire" "mouse-down-view" "process-drag-up" "mouse-down?" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "process-mouse-up" method #f 2090 11 2090 27 ("call-mouse-up" "drag-drop" "current-drag-drop" "when" "pos")}
        {Lisp-Entry "call-mouse-up" method #f 2096 11 2096 24 ("mouse-up" ":mouse-up" "Mouse-Event" "new" "self" "invoke-handler" "mouse-up-handler" "if" "pos")}
        {Lisp-Entry "process-drag-move" method #f 2102 11 2102 28 ("call-drag-move" "drag-follow" "get-drag-hotspot" "mouse-down-point" "nu-" "drag-start" "get-drag-drop" "drag-drop" "let" "allow-start-drag?" "when" "begin" "get-source" "get-view" "current-drag-drop" "not" "or" "get-draggable?" "mouse-down-view" "self" "eq?" "and" "if" "pos")}
        {Lisp-Entry "allow-start-drag?" method #f 2114 29 2114 46 ("drag-tolerance" "mouse-down-point" "near?" "current-drag-drop" "not" "mouse-down?" "and" "pos")}
        {Lisp-Entry "call-drag-move" method #f 2118 11 2118 25 ("drag-move" ":drag-move" "Mouse-Event" "new" "self" "invoke-handler" "drag-move-handler" "if" "pos")}
        {Lisp-Entry "process-drag-up" method #f 2124 11 2124 26 ("call-drag-up" "player" "when" "set-mouse-down-point" "set-mouse-down-view" "set-mouse-down?" "current-drag-drop" "dragging?" "pos")}
        {Lisp-Entry "call-drag-up" method #f 2132 11 2132 23 ("drag-up" ":drag-up" "Mouse-Event" "new" "self" "invoke-handler" "drag-up-handler" "if" "dragging?" "pos")}
        {Lisp-Entry "dispatch-double-click" method #f 2138 21 2138 42 ("call-double-click" "mouse-activate" "focused-host?" "not" "and" "get-host" "host" "mouse-activate?" "set-mouse-down-point" "set-mouse-down-view" "set-mouse-down?" "self" "acquire" "acquired" "let" "double-click" "'double-click" "event:" "close-popups" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "call-double-click" method #f 2154 26 2154 43 ("double-click" ":double-click" "Mouse-Event" "new" "self" "invoke-handler" "double-click-handler" "if" "pos")}
        {Lisp-Entry "dispatch-context-menu" method #f 2160 21 2160 42 ("self" "acquire" "call-context-menu" "context-menu" "'context-menu" "event:" "close-popups" "view-enabled?" "and" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "call-context-menu" method #f 2168 18 2168 35 ("context-menu" ":context-menu" "Mouse-Event" "new" "self" "invoke-handler" "context-menu-handler" "if" "pos")}
        {Lisp-Entry "dispatch-middle-mouse-down" method #f 2174 21 2174 47 ("self" "acquire" "middle-mouse-down" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "dispatch-middle-mouse-up" method #f 2181 21 2181 45 ("self" "acquire" "middle-mouse-up" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "dispatch-right-mouse-down" method #f 2188 21 2188 46 ("self" "acquire" "right-mouse-down" "when" "set-mouse-right-down?" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "dispatch-right-mouse-up" method #f 2196 21 2196 44 ("self" "acquire" "right-mouse-up" "when" "set-mouse-right-down?" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "call-mouse-enter" method #f 2204 11 2204 27 ("mouse-enter" ":mouse-enter" "Mouse-Event" "new" "self" "invoke-handler" "mouse-enter-handler" "if")}
        {Lisp-Entry "call-mouse-leave" method #f 2210 11 2210 27 ("mouse-leave" ":mouse-leave" "Mouse-Event" "new" "self" "invoke-handler" "mouse-leave-handler" "if" "close-self-tooltip" "cancel-hovering")}
        {Lisp-Entry "mouse-hover" method #f 2218 26 2218 37 ("pos")}
        {Lisp-Entry "mouse-wheel" method #f 2222 26 2222 37 ("0" "3" "quotient" "Point" "new" "scroll" "shift-down?" "if" "get-scroller" "when" "delta" "pos")}
        {Lisp-Entry "mouse-enter" method #f 2229 26 2229 37 ()}
        {Lisp-Entry "mouse-leave" method #f 2233 26 2233 37 ()}
        {Lisp-Entry "mouse-down" method #f 2237 26 2237 36 ("pos")}
        {Lisp-Entry "mouse-move" method #f 2241 26 2241 36 ("pos")}
        {Lisp-Entry "mouse-up" method #f 2245 26 2245 34 ("pos")}
        {Lisp-Entry "drag-move" method #f 2249 26 2249 35 ("pos")}
        {Lisp-Entry "drag-up" method #f 2253 26 2253 33 ("rest" "pos")}
        {Lisp-Entry "double-click" method #f 2257 26 2257 38 ("call-mouse-down" "pos")}
        {Lisp-Entry "with-context-click" method #f 2261 26 2261 44 ("proc" "pos")}
        {Lisp-Entry "context-menu" method #f 2265 26 2265 38 ("pos")}
        {Lisp-Entry "get-context-menu" method #f 2269 26 2269 42 ()}
        {Lisp-Entry "middle-mouse-down" method #f 2273 26 2273 43 ("mouse-down" "pos")}
        {Lisp-Entry "middle-mouse-up" method #f 2277 26 2277 41 ("mouse-up" "pos")}
        {Lisp-Entry "right-mouse-down" method #f 2281 26 2281 42 ("pos")}
        {Lisp-Entry "right-mouse-up" method #f 2285 26 2285 40 ("pos")}
        {Lisp-Entry "mouse-activate?" method #f 2289 26 2289 41 ()}
        {Lisp-Entry "mouse-view" method #f 2293 18 2293 28 ("get-mouse-in" "get-captured-view" "or")}
        {Lisp-Entry "Hovering-Tolerance" definition #f 2302 14 2302 32 ("3")}
        {Lisp-Entry "Hovering-Time" definition #f 2305 14 2305 27 ("0.5")}
        {Lisp-Entry "Hovering-Steps" definition #f 2308 14 2308 28 ("5")}
        {Lisp-Entry "track-hovering" method #f 2312 18 2312 32 ("0" "delay:" "hovering" "'hovering" "Pulse" "new" "hover-pulse" "/" "period" "1" "-" "tail" "set-cdr!" "call-mouse-hover" "begin" "Hovering-Tolerance" "distance" "point" "lambda" "every?" "cons" "set!" "Hovering-Steps" "length" "<" "mouse-position" "pos" "let" "hover-history" "when" "cancel-hovering" "self" "mouse-view" "neq?" "if" "start" "check-hovering" "define" "Hovering-Time" "time" "time:")}
        {Lisp-Entry "cancel-hovering" method #f 2336 18 2336 33 ("hover-history" "set!" "close" "hover-pulse" "when")}
        {Lisp-Entry "*current-tooltip-context*" definition #f 2348 22 2348 47 ()}
        {Lisp-Entry "*recent-tooltip-close*" definition #f 2351 14 2351 36 ()}
        {Lisp-Entry "*last-tooltip-position*" definition #f 2354 14 2354 37 ()}
        {Lisp-Entry "track-tooltip" method #f 2358 11 2358 24 ("0.1" "time:" "track-hovering" "if" "get-player" "get-tooltip?" "when" "current-time" "time->seconds" "<" "*recent-tooltip-close*" "and" "recently-closed?" "define")}
        {Lisp-Entry "cancel-tooltip-tracking" method #f 2368 11 2368 34 ("close-tooltip" "cancel-hovering")}
        {Lisp-Entry "reset-tooltip" method #f 2373 18 2373 31 ("cancel-tooltip-tracking")}
        {Lisp-Entry "in-tooltip?" method #f 2377 11 2377 22 ("self" "acquire" "in-rect?" "get-bounds" "rect" "get-view" "view" "let" "*current-tooltip-context*" "when" "pos")}
        {Lisp-Entry "process-tooltip" method #f 2385 11 2385 26 ("reset-tooltip" "nu=?" "eq?" "and" "get-tooltip-bounds" "new-bounds" "get-bounds" "bounds" "*current-tooltip-context*" "get-view" "view" "Tooltip" "is?" "unless" "get-overlapped" "overlapped" "let" "pos")}
        {Lisp-Entry "popup-tooltip" method #f 2396 11 2396 24 ("reset-tooltip" "set-tooltip" "get-padding" "get-position" "get-font" "get-tooltip-context" "*current-tooltip-context*" "set!" "close-tooltip" "in-tooltip?" "current-drag-drop" "mouse-down?" "unless" "21" "else" "9" ":ibeam" "case" "get-cursor" "cursor" "border:" "Tooltip" "class:" "padding:" "popup" "get-cursor-height" "0" "or" "set-preferred-size" "set-font" "when" "solid" "'solid" "border-type:" "Border-View" "border" "let" "padding" "position" "font" "new-tooltip" "title:" "Tooltip-Label" "2" "scrollee-content-size" "nu+" "set-size" "set-text" "get-text" "text-view" "100" "4000" "Dimension" "size:" "Tooltip-Text" "new" "view" "let*" "pair?" "get-formatted-tooltip?" "if" "text" "new-tooltip-view" "nu=?" "*last-tooltip-position*" "and" "same-position?" "define" "pos")}
        {Lisp-Entry "update-tooltip" method #f 2440 18 2440 32 ("layout-view" "get-size" "6" "scrollee-content-size" "nu+" "set-text" "100" "4000" "Dimension" "set-size" "get-text" "text-view" "view" "get-root" "first-child" "border" "get-tooltip" "tooltip" "let*" "*current-tooltip-context*" "when" "text")}
        {Lisp-Entry "close-self-tooltip" method #f 2453 19 2453 37 ("close-tooltip" "get-view" "self" "eq?" "*current-tooltip-context*" "and" "when")}
        {Lisp-Entry "close-tooltip" method #f 2458 11 2458 24 ("0.5" "current-time" "time->seconds" "+" "*recent-tooltip-close*" "set!" "close-popup" "opened?" "and" "get-tooltip" "tooltip" "let" "*current-tooltip-context*" "when")}
        {Lisp-Entry "get-selected-element" method #f 2472 18 2472 38 ("get-name" "when" "children" "get-selected?" "get-group" "eq?" "not" "or" "is?" "and" "child" "lambda" "find-if" "element" "let" "group" "group:" "Radio-Button" "class" "class:")}
        {Lisp-Entry "set-selected-element" method #f 2483 18 2483 38 ("error" "unless" "children" "set!" "set-selected?" "get-name" "selected?" "get-group" "eq?" "not" "or" "is?" "and" "when" "child" "lambda" "for-each" "found?" "let" "group" "group:" "Radio-Button" "class" "class:" "name")}
        {Lisp-Entry "unselect-elements" method #f 2497 18 2497 35 ("children" "unselect" "get-group" "eq?" "not" "or" "is?" "and" "when" "child" "lambda" "for-each" "group" "group:" "Radio-Button" "class" "class:")}
        {Lisp-Entry "track-popup-menu" method #f 2510 18 2510 34 ("Menu-Transient" "class:" "popup" "let" "unless" "error" "Context-Menu" "is-not?" "if" "get-children" "get-visible?" "not" "item" "lambda" "every?" "all-invisible?" "define" "self" "initiator" "initiator:" "alternate-position" "alternate-position:" "pos" "menu")}
        {Lisp-Entry "get-context-text" method #f 2528 20 2528 36 ()}
        {Lisp-Entry "mouse-copy" method #f 2537 26 2537 36 ("mouse-insert" "not" "if" "mouse-data" "data" "let" "destination" "pos")}
        {Lisp-Entry "mouse-data" method #f 2545 26 2545 36 ("pos")}
        {Lisp-Entry "mouse-insert" method #f 2549 26 2549 38 ("object")}
        {Lisp-Entry "to-desktop" method #f 2558 18 2558 28 ("self" "acquire" "get-root" "root" "get-player" "player" "get-desktop" "desktop" "let" "shape")}
        {Lisp-Entry "from-desktop" method #f 2565 18 2565 30 ("acquire" "get-root" "root" "get-player" "player" "get-desktop" "desktop" "let" "shape")}
        {Lisp-Entry "popup" method #f 2577 18 2577 23 ("fade-in" "set-effect" "layout-view" "set-visible?" "set-size" "Point" "set-position" "get-root" "set-parent" "set-initiator" "size:" "fit-point" "position:" "popup" "raised" "'raised" "border-type:" "'border" "name:" "Border-View" "new" "0" "or" "4" "Dimension" "get-size" "+" "size" "to-desktop" "and" "alternate" "get-work-area" "rect-size" "max" "get-player" "player" "get-toplevel" "toplevel" "let*" "close-behavior" "close-behavior:" "effect" "effect:" "fade-speed" "fade-speed:" "border" "border:" "Popup" "class" "class:" "self" "initiator" "initiator:" "alternate-position" "alternate-position:" "padding" "padding:" "position" "view")}
        {Lisp-Entry "close-popups" method #f 2599 26 2599 38 ("close-popups" "player" "when" "exclude" "exclude:" "all?" "all?:" "event" "event:")}
        {Lisp-Entry "popup-destroy" method #f 2604 26 2604 39 ("popup")}
        {Lisp-Entry "popup-initiator" method #f 2608 18 2608 33 ("get-initiator" "Popup" "is?" "when" "get-overlapped" "overlapped" "let")}
        {Lisp-Entry "owned?" method #f 2614 18 2614 24 ("get-overlapped" "get-owners" "memq?" "overlapped")}
        {Lisp-Entry "get-draggable?" method #f 2623 26 2623 40 ("draggable?")}
        {Lisp-Entry "set-draggable?" method #f 2627 18 2627 32 ("draggable?" "set!" "flag")}
        {Lisp-Entry "get-drag-drop" method #f 2631 26 2631 39 ("source:" "DnD" "new" "when" "get-drag-source" "source" "let")}
        {Lisp-Entry "get-drag-hotspot" method #f 2637 26 2637 42 ("0" "Point")}
        {Lisp-Entry "get-drag-source" method #f 2641 26 2641 41 ("get-drag-image" "image:" "position:" "self" "view:" "Drag-Source" "new" "get-drag-position" "pos" "let")}
        {Lisp-Entry "get-drag-position" method #f 2646 26 2646 43 ("mouse-down-point")}
        {Lisp-Entry "get-drag-image" method #f 2650 26 2650 40 ("pos")}
        {Lisp-Entry "drag-start" method #f 2654 11 2654 21 ("process-drag-feedback" "hide-drag-image" "to-desktop" "global" "acquire-capture" "acquire-focus" ":no" "set-cursor" "get-source" "get-view" "view" "let" "set-current-drag-drop" "drag-drop" "hotspot" "pos")}
        {Lisp-Entry "drag-follow" method #f 2665 11 2665 22 ("process-drag-feedback" "to-desktop" "global" "get-source" "get-view" "view" "drag-drop" "let*" "current-drag-drop" "when" "pos")}
        {Lisp-Entry "drag-drop" method #f 2673 11 2673 20 ("drop" "get-target" "when" "drag-end" "pos" "drag-drop")}
        {Lisp-Entry "drag-end" method #f 2679 11 2679 19 ("set-current-drag-drop" "get-source" "get-view" "release-capture" "unhighlight-current" "hide-drag-image" "drag-drop" "let" "current-drag-drop" "when")}
        {Lisp-Entry "process-drag-feedback" method #f 2688 11 2688 32 ("show-drag-image" "highlight-current" "set-target" "unhighlight-current" "hide-drag-image" ":no" ":move" "if" "set-cursor" "get-target" "neq?" "call-current-drop" "target" "to-view" "local" "when" "set-view" "find-view" "view" "get-desktop" "desktop" "get-view" "current" "current-drag-drop" "drag-drop" "let*" "global")}
        {Lisp-Entry "hide-drag-image" method #f 2708 11 2708 26 ("ImageList_DragShowNolock")}
        {Lisp-Entry "show-drag-image" method #f 2712 11 2712 26 ("ImageList_DragShowNolock")}
        {Lisp-Entry "highlight-current" method #f 2716 11 2716 28 ("highlight-drop" "local" "view" "drag-drop")}
        {Lisp-Entry "unhighlight-current" method #f 2720 11 2720 30 ("get-view" "unhighlight-drop" "when" "get-target" "current-target" "let" "drag-drop")}
        {Lisp-Entry "highlight-drop" method #f 2726 26 2726 40 ("pos" "drag-drop")}
        {Lisp-Entry "unhighlight-drop" method #f 2730 26 2730 42 ("drag-drop")}
        {Lisp-Entry "call-current-drop" method #f 2739 18 2739 35 ("current-drop" ":drop-target" "Drop-Event" "new" "self" "invoke-handler" "current-drop-handler" "if" "pos" "drag-drop")}
        {Lisp-Entry "current-drop" method #f 2745 26 2745 38 ("pos" "drag-drop")}
        {Lisp-Entry "standard-current-drop" method #f 2749 18 2749 39 ("current-drop" "criteria:" "position:" "view:" "Drop-Target" "new" "accepts?" "lambda" "find-if" "criteria" "let" "neq?" "if" "cons" "drag-info" "drag-over" "get-source" "get-view" "drag-start" "get-target" "current" "get-drag-drop" "drag-drop" "get-position" "pos" "get-sender" "sender" "let*" "handler" "handler:" "acceptance" "evt")}
        {Lisp-Entry "drop" method #f 2765 26 2765 30 ("acquire" "self" "call-receive-drop" "when" "get-handler" "or" "dst" "get-target" "trg" "get-source" "get-view" "src" "let*" "pos" "drag-drop")}
        {Lisp-Entry "call-receive-drop" method #f 2773 18 2773 35 ("receive-drop" ":receive-drop" "Drop-Event" "new" "self" "invoke-handler" "receive-drop-handler" "if" "drag-drop" "pos" "sender")}
        {Lisp-Entry "receive-drop" method #f 2779 26 2779 38 ("drag-drop" "pos" "sender")}
        {Lisp-Entry "call-key-press" method #f 2788 21 2788 35 ("record" "content:" ":key" "char?" "Event" "event" "on-insert" ":focus" "Event-Handler" "handler" "get-recorder" "recorder" "macro-recording?" "when" "get-application" "appl" "let" "key-press" ":char" "Keyboard-Event" "new" "self" "invoke-handler" "key-press-handler" "if" "key")}
        {Lisp-Entry "on-arrow" method #f 2801 11 2801 19 ("call-arrow-press" "evt")}
        {Lisp-Entry "call-arrow-press" method #f 2805 11 2805 27 ("get-modifiers" "direction:" "get-property" "arrow-press" "self" "invoke-handler" "arrow-press-handler" "if" "evt")}
        {Lisp-Entry "arrow-press" method #f 2811 26 2811 37 ("down-arrow-press" "down" "up-arrow-press" "up" "right-arrow-press" "right" "left-arrow-press" "left" "case" "modifiers" "direction")}
        {Lisp-Entry "left-arrow-press" method #f 2819 26 2819 42 ("modifiers")}
        {Lisp-Entry "right-arrow-press" method #f 2823 26 2823 43 ("modifiers")}
        {Lisp-Entry "up-arrow-press" method #f 2827 26 2827 40 ("modifiers")}
        {Lisp-Entry "down-arrow-press" method #f 2831 26 2831 42 ("modifiers")}
        {Lisp-Entry "on-escape-press" method #f 2835 27 2835 42 ("call-escape-press" "evt")}
        {Lisp-Entry "call-escape-press" method #f 2839 11 2839 28 ("escape-press" ":char" "Keyboard-Event" "new" "self" "invoke-handler" "escape-press-handler" "if" "key")}
        {Lisp-Entry "escape-press" method #f 2845 26 2845 38 ("key")}
        {Lisp-Entry "on-backspace-press" method #f 2849 27 2849 45 ("call-backspace-press" "evt")}
        {Lisp-Entry "call-backspace-press" method #f 2853 11 2853 31 ("backspace-press" ":char" "Keyboard-Event" "new" "self" "invoke-handler" "backspace-press-handler" "if" "key")}
        {Lisp-Entry "backspace-press" method #f 2859 26 2859 41 ("rest" "key")}
        {Lisp-Entry "on-return-press" method #f 2863 27 2863 42 ("call-return-press" "evt")}
        {Lisp-Entry "call-return-press" method #f 2867 11 2867 28 ("return-press" ":char" "Keyboard-Event" "new" "self" "invoke-handler" "return-press-handler" "if" "key")}
        {Lisp-Entry "return-press" method #f 2873 26 2873 38 ("key")}
        {Lisp-Entry "on-tab-press" method #f 2877 27 2877 39 ("call-tab-press" "evt")}
        {Lisp-Entry "call-tab-press" method #f 2881 11 2881 25 ("modifiers-keys" "tab-press" ":char" "Keyboard-Event" "new" "self" "invoke-handler" "tab-press-handler" "if" "key")}
        {Lisp-Entry "tab-press" method #f 2887 26 2887 35 ("shift-key?" "navigate-view" "modifiers" "key")}
        {Lisp-Entry "on-key-press" method #f 2891 19 2891 31 ("key:" "get-property" "key-press" "evt")}
        {Lisp-Entry "key-press" method #f 2895 26 2895 35 ("key")}
        {Lisp-Entry "dispatch-key-press" method #f 2899 21 2899 39 ("call-key-press" "when" "get-focus" "view" "let" "complete-drag-up" "drag-end" "begin" "eqv?" "current-drag-drop" "and" "if" "key")}
        {Lisp-Entry "find-tab-manager" method #f 2914 18 2914 34 ("find-tab-manager" "not" "View" "find-ascendant" "ascendant" "let" "self" "get-tab-stops" "if")}
        {Lisp-Entry "navigate-tab" method #f 2923 26 2923 38 ("self" "navigate-tab" "View" "is?" "set!" "disabled-navigate?" "not" "and" "while" "view-enabled?" "enabled" "if" "navigated-view" "let" "tab-stop-enter" "acquire-focus" "tab-stop-exit" "to" "navigate" "define" "backward?" "from")}
        {Lisp-Entry "navigated-view" method #f 2941 18 2941 32 ("element" "+" "modulo" "1" "-" "0" "=" "if" "new-rank" "find" "rank" "length" "count" "when" "get-tab-stops" "stops" "let" "test" "test:" "backward?" "from")}
        {Lisp-Entry "navigate-view" method #f 2951 21 2951 34 ("self" "navigate-tab" "find-tab-manager" "manager" "let" "backward?")}
        {Lisp-Entry "get-tab-stops" method #f 2956 26 2956 39 ()}
        {Lisp-Entry "tab-stop-enter" method #f 2960 26 2960 40 ("select-all")}
        {Lisp-Entry "tab-stop-exit" method #f 2964 26 2964 39 ()}
        {Lisp-Entry "on-undo" method #f 2973 11 2973 18 ("undo" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-redo" method #f 2979 11 2979 18 ("redo" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-cut" method #f 2985 11 2985 17 ("cut-selection" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-copy" method #f 2991 11 2991 18 ("copy-selection" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-paste" method #f 2997 11 2997 19 ("paste-clipboard" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-paste-properties" method #f 3003 11 3003 30 ("paste-properties" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-delete" method #f 3009 11 3009 20 ("delete-selection" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-rename" method #f 3015 11 3015 20 ("rename-selection" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-select-all" method #f 3021 11 3021 24 ("select-all" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "can-undo?" method #f 3027 26 3027 35 ("can-undo?" "surrogate" "if")}
        {Lisp-Entry "can-redo?" method #f 3033 26 3033 35 ("can-redo?" "surrogate" "if")}
        {Lisp-Entry "can-cut?" method #f 3039 26 3039 34 ("can-cut?" "surrogate" "if")}
        {Lisp-Entry "can-copy?" method #f 3045 26 3045 35 ("can-copy?" "surrogate" "if")}
        {Lisp-Entry "can-paste?" method #f 3051 26 3051 36 ("can-paste?" "surrogate" "if")}
        {Lisp-Entry "can-paste-properties?" method #f 3057 26 3057 47 ("can-paste-properties?" "surrogate" "if")}
        {Lisp-Entry "can-delete?" method #f 3063 26 3063 37 ("can-delete?" "surrogate" "if")}
        {Lisp-Entry "can-rename?" method #f 3069 26 3069 37 ("can-rename?" "surrogate" "if")}
        {Lisp-Entry "can-select-all?" method #f 3075 26 3075 41 ("can-select-all?" "surrogate" "if")}
        {Lisp-Entry "undo" method #f 3081 26 3081 30 ()}
        {Lisp-Entry "redo" method #f 3085 26 3085 30 ()}
        {Lisp-Entry "cut-selection" method #f 3089 26 3089 39 ()}
        {Lisp-Entry "copy-selection" method #f 3093 26 3093 40 ()}
        {Lisp-Entry "paste-clipboard" method #f 3097 26 3097 41 ()}
        {Lisp-Entry "paste-properties" method #f 3101 26 3101 42 ()}
        {Lisp-Entry "delete-selection" method #f 3105 26 3105 42 ()}
        {Lisp-Entry "rename-selection" method #f 3109 26 3109 42 ()}
        {Lisp-Entry "select-all" method #f 3113 26 3113 36 ("rest")}
        {Lisp-Entry "acquire-capture" method #f 3122 18 3122 33 ("get-player" "acquire-capture" "self" "set-captured-view")}
        {Lisp-Entry "release-capture" method #f 3127 18 3127 33 ("get-player" "release-capture" "set-captured-view")}
        {Lisp-Entry "get-tooltip?" method #f 3137 26 3137 38 ("tooltip?")}
        {Lisp-Entry "set-tooltip?" method #f 3141 18 3141 30 ("set!" "tooltip?" "neq?" "when" "flag")}
        {Lisp-Entry "get-tooltip-text" method #f 3146 26 3146 42 ("present-shortcut" "format" "require-action-item" "get-shortcut" "Action" "action-handler" "is?" "and" "shortcut" "not" "if" "tooltip-text" "localize" "text" "let")}
        {Lisp-Entry "set-tooltip-text" method #f 3156 18 3156 34 ("tooltip-text" "set!" "text")}
        {Lisp-Entry "get-formatted-tooltip?" method #f 3161 26 3161 48 ()}
        {Lisp-Entry "get-tooltip-bounds" method #f 3165 26 3165 44 ("pos")}
        {Lisp-Entry "get-tooltip-context" method #f 3169 26 3169 45 ("bounds:" "text:" "self" "view:" "Tooltip-Context" "new" "when" "get-tooltip-bounds" "bounds" "get-tooltip-text" "text" "let" "pos")}
        {Lisp-Entry "get-parent/child-clipper" method #f 3181 20 3181 44 ("rect-intersection" "get-bottom" "set-bottom" "get-right" "set-right" "get-top" "set-top" "get-left" "/" "set-left" "when" "fxround" "get-bounds" "offset-rect" "c" "get-v" "get-position" "get-h" "*" "-" "get-translated-clipper" "p" "1.0" "scaling" "scaled?" "if" "sc" "let" "v" "h" "child")}
        {Lisp-Entry "get-surface" method #f 3198 18 3198 29 ("get-bounds" "set-clipper" "1.0" "0" "get-height" "get-width" "get-v" "get-h" "set-transform" "get-lie" "lie" "get-player" "get-window-surface" "Surface" "new" "surface" "let")}
        {Lisp-Entry "invalidate-view" method #f 3211 18 3211 33 ("invalidate-rect" "get-bounds" "bounds" "let")}
        {Lisp-Entry "invalidate-rect" method #f 3216 18 3216 33 ("player" "invalidate-rect" "get-clipper" "rect-intersection" "self" "get-root" "acquire" "acquired" "let" "view-visible?" "when" "rect")}
        {Lisp-Entry "invalidate-region" method #f 3223 18 3223 35 ("player" "invalidate-region" "and" "'and" "combine!" "get-clipper" "self" "acquire" "Region" "new" "clipper" "with" "get-v" "get-h" "offset!" "get-lie" "-" "delta" "get-root" "cast" "root" "let" "view-visible?" "when" "region")}
        {Lisp-Entry "redraw-view" method #f 3233 18 3233 29 ("get-bounds" "else" "and" "'and" "combine!" "Region" "new" "clipper" "with" "get-v" "get-h" "offset!" "get-lie" "-" "delta" "redraw-window" "get-clipper" "rect-intersection" "self" "acquire" "acquired" "cond" "get-root" "root" "when" "get-player" "player" "let" "region" "region:" "rect" "rect:")}
        {Lisp-Entry "redraw-view-only" method #f 3253 18 3253 34 ("self" "platform-redraw-view-only" "get-handle" "hwnd" "when" "get-player" "player" "let")}
        {Lisp-Entry "update-view" method #f 3260 18 3260 29 ("update-window" "set-effect" "when" "get-player" "player" "let" "effect" "effect:")}
        {Lisp-Entry "view-invalidater" method #f 3267 18 3267 34 ("invalidate-rect" "lambda" "get-bounds" "self" "get-root" "acquire" "rect" "let" "player" "when")}
        {Lisp-Entry "invalidate-border" method #f 3281 18 3281 35 ("invalidate-region" "border-region" "region" "with" "get-finished?" "when" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "redraw-border" method #f 3287 18 3287 31 ("region:" "redraw-view" "border-region" "region" "with" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "border-region" method #f 3292 18 3292 31 ("frame-region" "get-bounds" "bounds" "let" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "on-save" method #f 3302 19 3302 26 ("save" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-save-as" method #f 3308 19 3308 29 ("save-as" "evt")}
        {Lisp-Entry "on-revert-saved" method #f 3312 19 3312 34 ("revert-saved" "evt")}
        {Lisp-Entry "on-compare-saved" method #f 3316 19 3316 35 ("compare-saved" "evt")}
        {Lisp-Entry "save" method #f 3320 26 3320 30 ()}
        {Lisp-Entry "save-as" method #f 3324 26 3324 33 ()}
        {Lisp-Entry "save-to" method #f 3328 26 3328 33 ("moniker")}
        {Lisp-Entry "revert-saved" method #f 3332 26 3332 38 ()}
        {Lisp-Entry "compare-saved" method #f 3336 26 3336 39 ()}
        {Lisp-Entry "get-class-descriptor" method #f 3345 25 3345 45 ("View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 3354 11 3354 17 ()
        {Lisp-Entry "View-Descriptor" class #f 3360 7 3360 22 ("action-handler" "selection-handler" "content-change-handler" "tab-press-handler" "return-press-handler" "backspace-press-handler" "escape-press-handler" "arrow-press-handler" "key-press-handler" "context-menu-handler" "receive-files-handler" "receive-drop-handler" "current-drop-handler" "double-click-handler" "drag-up-handler" "drag-move-handler" "mouse-up-handler" "mouse-move-handler" "mouse-down-handler" "mouse-leave-handler" "mouse-hover-handler" "mouse-enter-handler" "cursor-update-handler" "focus-lose-handler" "handler" "category:" "focus-gained-handler" "disabled-navigate?" "user-data" "effect" "layer" "offscreen?" "outline-view" "action" "enabled?" "drag-tolerance" "draggable?" "nullable?:" "tooltip-text" "tooltip?" "auto-size?" "background" "font" "domain" "title:" "title" "name:" "Image-Resource" "image:" "Figure-Descriptor")
          {Lisp-Entry "component-surrogate-class" method #f 3444 20 3444 45 ("View-Surrogate" "component")}
          {Lisp-Entry "component-addable-class?" method #f 3448 20 3448 44 ("View" "subtype?" "class" "component")}}}}})
"View-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "View-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.View-Actions" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "View-Actions" class #f 45 20 45 32 ("scroll-down" "extend-down" "Down" "down" "move-down" "extend-right" "Right" "right" "move-right" "scroll-up" "extend-up" "Up" "up" "move-up" "extend-left" "Left" "left" "direction:" "on-arrow" "move-left" "on-select-all" "select-all" "Delete" "on-delete" "delete" "on-paste-properties" "paste-properties" "on-paste" "paste" "on-copy" "copy" "on-cut" "cut" "on-redo" "redo" "on-undo" "undo" "control-shift-return" ":control" "control-return" "shift-return" "Return" "on-return-press" "return" "shift-backspace" "Backspace" "on-backspace-press" "backspace" "shift-tab" "Tab" "on-tab-press" "tab" ":shift" "shift-escape" "Escape" "Shortcut" "shortcut:" "on-escape-press" ":focus" "Event-Handler" "action-handler:" "escape" "name:" "Actions")}}})
"View-Player"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "View-Player.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.View-Player" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "View-Player" class #f 51 7 51 18 ("explicit" "close-root" "'close-root" "initialize" "Window")
        {Lisp-Entry "close-behavior" property #f 57 12 57 26 ()}
        {Lisp-Entry "get-close-behavior" accessor #f 57 60 57 68 ()}
        {Lisp-Entry "set-close-behavior" accessor #f 57 60 57 68 ()}
        {Lisp-Entry "caption-base" property #f 58 12 58 24 ()}
        {Lisp-Entry "caption" property #f 59 12 59 19 ()}
        {Lisp-Entry "caption?" property #f 60 12 60 20 ()}
        {Lisp-Entry "root" slot #f 63 8 63 12 ()}
        {Lisp-Entry "view-focus" slot #f 64 8 64 18 ()}
        {Lisp-Entry "get-view-focus" accessor #f 64 43 64 51 ()}
        {Lisp-Entry "set-view-focus" accessor #f 64 43 64 51 ()}
        {Lisp-Entry "prepare" method #f 72 20 72 27 ("destroy-mandatory" "prepare-root" "nextmethod" "rest")}
        {Lisp-Entry "prepare-root" method #f 78 29 78 41 ("new-root" "set-root")}
        {Lisp-Entry "new-root" method #f 82 29 82 37 ("offscreen?:" "Host-View" "new")}
        {Lisp-Entry "find-to-modify" method #f 86 20 86 34 ("nextmethod" "get-root" "root" "'root" "eq?" "if" "test" "name")}
        {Lisp-Entry "close" method #f 97 20 97 25 ("nextmethod" "set-visible?" "hide" "'hide" "close-behavior" "eq?" "if")}
        {Lisp-Entry "destroy" method #f 103 20 103 27 ("nextmethod" "detach-root" "'detach-root" "close-behavior" "eq?" "if" "set!" "close" "root" "when" "close-root" "define")}
        {Lisp-Entry "get-caption-base" method #f 120 18 120 34 ("caption-base")}
        {Lisp-Entry "set-caption-base" method #f 124 18 124 34 ("invalidate-title" "caption-base" "set!" "value")}
        {Lisp-Entry "get-caption" method #f 129 18 129 29 ("caption")}
        {Lisp-Entry "set-caption" method #f 133 18 133 29 ("invalidate-title" "caption" "set!" "value")}
        {Lisp-Entry "get-caption?" method #f 138 18 138 30 ("caption?")}
        {Lisp-Entry "set-caption?" method #f 142 18 142 30 ("invalidate-title" "caption?" "set!" "value")}
        {Lisp-Entry "invalidate-title" method #f 152 11 152 27 ("set-title" "format" "localize" "caption-base" "caption?" "caption" "not" "or" "if" "effective-title" "define")}
        {Lisp-Entry "erase-background" method #f 170 20 170 36 ("nextmethod" "processed" "get-offscreen?" "root" "and" "if" "surface")}
        {Lisp-Entry "get-root" method #f 181 18 181 26 ("root")}
        {Lisp-Entry "set-root" method #f 185 18 185 26 ("layout-window" "set-offscreen?" "self" "set-player" "set-parent" "'root" "set-name" "set!" "detach-root" "root" "neq?" "when" "detach?" "detach?:" "value")}
        {Lisp-Entry "detach-root" method #f 197 11 197 22 ("set!" "set-offscreen?" "set-player" "root" "when")}
        {Lisp-Entry "size-change" method #f 209 20 209 31 ("layout-window" "nextmethod" "size" "state")}
        {Lisp-Entry "layout" method #f 214 20 214 26 ("get-size" "set-size" "0" "Point" "set-position" "root" "when")}
        {Lisp-Entry "in-error?" slot #f 225 8 225 17 ()}
        {Lisp-Entry "get-in-error?" method #f 228 18 228 31 ("in-error?")}
        {Lisp-Entry "set-in-error?" method #f 232 18 232 31 ("invalidate-window" "in-error?" "set!" "flag")}
        {Lisp-Entry "Error-Color" definition #f 237 14 237 25 ("Dark-Red" "name:" "Color")}
        {Lisp-Entry "paint" method #f 246 20 246 25 ("root" "paint-root" "set!" "in-error?" "if" "set-update-region" "set-clipper" "get-box" "update-rect" "lambda" "self" "with-platform-painting" "when" "debug-flicker" "proc" "let" "Error-Color" "fill-rect" "bounds" "surface" "paint-in-error" "define" "platform-data" "update-region")}
        {Lisp-Entry "receive-files" method #f 270 20 270 33 ("processed" "root" "dispatch-receive-files" "in-error?" "unless" "files" "pos")}
        {Lisp-Entry "mouse-down" method #f 281 20 281 30 ("processed" "root" "dispatch-mouse-down" "bell" "in-error?" "if" "v" "h")}
        {Lisp-Entry "mouse-move" method #f 288 20 288 30 ("processed" "root" "dispatch-mouse-move" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "simulate-mouse-move" method #f 294 11 294 30 ("get-v" "get-h" "root" "dispatch-mouse-move" "when" "find-view" "view" "mouse-position" "pos" "let")}
        {Lisp-Entry "mouse-up" method #f 301 20 301 28 ("processed" "root" "dispatch-mouse-up" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "double-click" method #f 307 20 307 32 ("processed" "root" "dispatch-double-click" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "context-menu" method #f 313 20 313 32 ("processed" "root" "dispatch-context-menu" "set-in-error?" "in-error?" "if" "v" "h")}
        {Lisp-Entry "middle-mouse-down" method #f 320 20 320 37 ("processed" "root" "dispatch-middle-mouse-down" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "middle-mouse-up" method #f 326 20 326 35 ("processed" "root" "dispatch-middle-mouse-up" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "right-mouse-down" method #f 332 20 332 36 ("processed" "root" "dispatch-right-mouse-down" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "right-mouse-up" method #f 338 20 338 34 ("unprocessed" "root" "dispatch-right-mouse-up" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "mouse-leave" method #f 344 20 344 31 ("reset-mouse-in" "cancel-tooltip-tracking" "call-mouse-leave" "mouse-in" "when")}
        {Lisp-Entry "for-each-docked" method #f 356 18 356 33 ("for-each-view-docked" "root" "when" "proc")}
        {Lisp-Entry "find-docked" method #f 361 18 361 29 ("find-view-docked" "root" "when" "type")}
        {Lisp-Entry "popup" method #f 371 18 371 23 ("get-popups" "cons" "set-popups" "popup" "let" "visible?:" "get-overlapped" "owner:" "new" "apply" "new-popup" "define" "initargs" "class")}
        {Lisp-Entry "close-popups" method #f 383 18 383 30 ("close-popup" "memq?" "or" "popup" "lambda" "for-each" "get-owners" "owners" "get-overlapped" "overlapped" "let*" "get-passing-through?" "not" "get-popups" "and" "when" "exclude" "exclude:" "all?" "all?:")}
        {Lisp-Entry "focus-gain" method #f 398 20 398 30 ("processed" "focus-delegate" "focus-view" "in-player?" "view-focus" "and" "when" "self" "set-focused-window")}
        {Lisp-Entry "focus-lose" method #f 406 20 406 30 ("processed" "set-focused-window" "unfocus-view")}
        {Lisp-Entry "focus-view" method #f 412 19 412 29 ("get-application" "process-focus-change" "process-active?" "activate-focus" "when" "get-host" "host" "let" "call-focus-gained" "view-focus" "set!" "new-focus")}
        {Lisp-Entry "unfocus-view" method #f 422 19 422 31 ("call-focus-lost" "focus-master" "set!" "call-focus-lose" "deactivate-focus" "get-host" "host" "preserve-focused" "get-focus-container" "container" "focus" "let" "view-focus" "when")}
        {Lisp-Entry "reset-focus" method #f 436 20 436 31 ("set!" "unfocus-view" "view-focus" "when" "nextmethod")}
        {Lisp-Entry "key-press" method #f 448 20 448 29 ("processed" "close-popups" "car" "popup-key-press" "unless" "root" "dispatch-key-press" "null?" "if" "get-popups" "popups" "let" "Key-Hook" "not" "or" "when" "char")}
        {Lisp-Entry "get-class-descriptor" method #f 465 25 465 45 ("View-Player-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 474 11 474 17 ()
        {Lisp-Entry "View-Player-Descriptor" class #f 480 7 480 29 ("caption?" "caption" "caption-base" "close-behavior" "name:" "Figure-Descriptor")
          {Lisp-Entry "component-get-components" method #f 492 20 492 44 ("get-children" "get-root" "cons" "component")}}}}})
"View-Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "text" "View-Style.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.text.View-Style" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "View-Style" class #f 43 7 43 17 ("Style")
        {Lisp-Entry "properties" definition #f 47 14 47 24 ("form:" "alignment:")}
        {Lisp-Entry "form" slot #f 53 18 53 22 ()}
        {Lisp-Entry "view" slot #f 54 18 54 22 ()}
        {Lisp-Entry "get-view" accessor #f 54 30 54 38 ()}
        {Lisp-Entry "construct-literal" method #f 58 16 58 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "initialize" method #f 62 20 62 30 ("view~self" "set!" "nextmethod" "apply" "others" "view" "bind-keywords" "rest")}
        {Lisp-Entry "compare-object" method #f 68 20 68 34 ("else" ":not-equal" "get-view" "view" "eq?" "if" ":equal" "case" "nextmethod" "result" "let" "target")}
        {Lisp-Entry "print" method #f 79 20 79 25 ("view" "alignment" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "get-value" method #f 87 11 87 20 ("nextmethod" "else" "form" "form:" "case" "property")}
        {Lisp-Entry "set-value" method #f 94 11 94 20 ("nextmethod" "else" "form" "set!" "form:" "case" "value" "property")}
        {Lisp-Entry "get-form" method #f 106 18 106 26 ("form")}
        {Lisp-Entry "set-view" method #f 111 18 111 26 ("view" "set!" "value")}
        {Lisp-Entry "get-width" method #f 120 20 120 29 ("view" "get-width")}
        {Lisp-Entry "get-height" method #f 124 20 124 30 ("view" "get-height")}
        {Lisp-Entry "run-width" method #f 128 20 128 29 ("get-width" "run")}
        {Lisp-Entry "propagate?" method #f 137 20 137 30 ()}
        {Lisp-Entry "place-update" method #f 146 20 146 32 ("Point" "new" "view" "set-position" "v" "h")}
        {Lisp-Entry "height-update" method #f 150 20 150 33 ("Point" "new" "set-position" "get-height" "justify-element" "get-v" "+" "v" "get-h" "h" "view" "get-position" "pos" "let*" "height")}}}})
"Wallpaper-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Wallpaper-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Wallpaper-Actions" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Wallpaper-Actions" class #f 45 20 45 37 ("on-display-info" "display-info" "on-previous" "previous" "on-change" "change" "on-paused" "paused" "on-random" "random" "on-delete-file" "delete-file" "on-add-to-favorite" "add-to-favorite" "stretched" "stretched-mode" "filled" "filled-mode" "tiled" "tiled-mode" ":alt" "centered" "mode:" "on-change-mode" "centered-mode" "Next" "on-next" "next" "Prior" "on-prior" "prior" "End" "on-end" "end" "Home" "on-home" "home" "Space" "Shortcut" "shortcut:" "on-empty" ":stage" "Event-Handler" "action-handler:" "empty" "name:" "Actions")}}})
"Wallpaper-Stage"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "Wallpaper-Stage.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view.Wallpaper-Stage" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Wallpaper-Stage" class #f 52 20 52 35 ("tooltip?:" "1.0" "max-delay:" "Wallpaper-Locator" "new" "initialize" "Stage")
        {Lisp-Entry "image" slot #f 55 8 55 13 ()}
        {Lisp-Entry "previous" slot #f 56 8 56 16 ()}
        {Lisp-Entry "wallpapers" slot #f 57 8 57 18 ()}
        {Lisp-Entry "mode" slot #f 58 8 58 12 ()}
        {Lisp-Entry "random?" slot #f 59 8 59 15 ()}
        {Lisp-Entry "browse?" slot #f 60 8 60 15 ()}
        {Lisp-Entry "configuration" slot #f 61 8 61 21 ()}
        {Lisp-Entry "choices" slot #f 62 8 62 15 ()}
        {Lisp-Entry "locator" slot #f 63 8 63 15 ()}
        {Lisp-Entry "changer" slot #f 64 8 64 15 ()}
        {Lisp-Entry "threads" slot #f 65 8 65 15 ()}
        {Lisp-Entry "paused?" slot #f 66 8 66 15 ()}
        {Lisp-Entry "done?" slot #f 67 8 67 13 ()}
        {Lisp-Entry "preferences" method #f 74 11 74 22 ("error?:" "wallpaper" "'wallpaper" "get-preferences")}
        {Lisp-Entry "install-wallpaper" method #f 78 20 78 37 ("child" "install-configuration" "get-active" "active" "when" "preferences" "pref" "let")}
        {Lisp-Entry "install-configuration" method #f 86 11 86 32 ("get-period" "setup-changer" "changer" "and" "get-startup" "startup-file" "set-source" "get-favorites" "setup-favorites" "get-recursive?" "setup-wallpapers" "Directory" "is?" "dir?" "get-directory" "wallpaper" "let" "get-size" "set-view-size" "get-random?" "set-random?" "get-mode" "set-mode" "cache?:" "Image" "new" "invalidate-view" "wallpapers" "image" "begin" "not" "if" "browse?" "set!" "configuration" "neq?" "when" "brws?" "config")}
        {Lisp-Entry "context-menu" method #f 111 11 111 23 ("track-popup-menu" "acquire-focus" "nextmethod" "preferences" "get-children" "null?" "layout-menu" "if" "set-title" "member?" "favorite?" "get-favorites" "favorites" "get-name" "name" "configuration" "and" "when" "favorite-separator" "'favorite-separator" "favorite" "'favorite" "set-visible?" "get-source" "source" "manage" "'manage" "locate" "get-content" "manage-menu" "Stage-Menu" "new" "menu" "let*" "new-stage-menu" "define" "pos")}
        {Lisp-Entry "on-change" method #f 133 11 133 20 ("change-wallpaper" "evt")}
        {Lisp-Entry "on-previous" method #f 137 11 137 22 ("show-previous" "evt")}
        {Lisp-Entry "on-add-to-favorite" method #f 141 11 141 29 ("format" "flash-message" "'favorites" "set-preference" "cons" "remove!" "new-favorites" "member?" "favorite?" "get-favorites" "favorites" "get-name" "name" "let*" "bell" "configuration" "not" "or" "if" "get-source" "source" "let" "evt")}
        {Lisp-Entry "on-delete-file" method #f 153 11 153 25 ("change-wallpaper" "choices" "=" "test:" "remove!" "wallpapers" "set!" "get-name" "format" "flash-message" "delete-file" "get-source" "source" "let" "image" "when" "evt")}
        {Lisp-Entry "on-change-mode" method #f 164 11 164 25 ("mode:" "get-property" "set-mode" "evt")}
        {Lisp-Entry "size-change" method #f 168 20 168 31 ("invalidate-view" "set-view-size" "image" "when" "nextmethod" "size")}
        {Lisp-Entry "get-tooltip-text" method #f 175 20 175 36 ("get-mode" "get-height" "get-width" "format" "list" "get-size" "image-size" "get-source" "source" "let" "alt-down?" "control-down?" "image" "and" "when")}
        {Lisp-Entry "get-source" method #f 188 11 188 21 ("get-source" "image" "when")}
        {Lisp-Entry "set-source" method #f 193 11 193 21 ("update-view" "invalidate-view" "format" "message-box" "else" "exists?" "image" "set-source" "not" "cond" "get-source" "previous" "set!" "file")}
        {Lisp-Entry "set-mode" method #f 206 11 206 19 ("invalidate-view" "set-mode" "image" "when" "mode~self" "set!" "mode")}
        {Lisp-Entry "set-random?" method #f 213 11 213 22 ("random?" "set!" "flag")}
        {Lisp-Entry "setup-wallpapers" method #f 217 11 217 27 ("get-name" "key:" "ci<?" "sort" "wallpapers" "recursive?:" "cons" "set!" "image-file?" "when" "file" "lambda" "iterate-directory" "files" "let" "recursive?" "dir")}
        {Lisp-Entry "image-file?" method #f 227 11 227 22 ("ci=?" "test:" "get-extension" "member?" "file")}
        {Lisp-Entry "setup-favorites" method #f 232 11 232 26 ("wallpaper-file" "favorite" "lambda" "map" "choices" "set!" "favorites" "dir")}
        {Lisp-Entry "startup-file" method #f 238 11 238 23 ("next-wallpaper" "else" "wallpaper-file" ":empty" "eq?" "if" "background" "not" "cond" "startup" "dir" "dir?")}
        {Lisp-Entry "setup-changer" method #f 244 11 244 24 ("wallpaper-changer" "'wallpaper-changer" "change-wallpaper" "paused?" "unless" "sleep" "done?" "not" "while" "lambda" "new-thread" "thread-start!" "changer" "set!" "unimplemented" "period")}
        {Lisp-Entry "wallpaper-file" definition #f 258 15 258 29 ("new-file" "name" "dir")}
        {Lisp-Entry "change-wallpaper" method #f 262 18 262 34 ("next-wallpaper" "set-source" "configuration" "when")}
        {Lisp-Entry "show-first" method #f 267 11 267 21 ("car" "set-source" "wallpapers" "when" "random?" "unless")}
        {Lisp-Entry "show-last" method #f 273 11 273 20 ("last" "set-source" "wallpapers" "when" "random?" "unless")}
        {Lisp-Entry "show-previous" method #f 279 11 279 24 ("previous" "set!" "set-source" "when" "previous-wallpaper" "wallpaper" "let")}
        {Lisp-Entry "next-wallpaper" method #f 286 11 286 25 ("remove!" "random-element" "wallpaper" "copy" "set!" "choices" "null?" "when" "length" "1" "wallpaper-rank" "+" "modulo" "element" "wallpapers" "car" "get-source" "source" "let" "random?" "not" "if")}
        {Lisp-Entry "previous-wallpaper" method #f 300 11 300 29 ("previous" "1" "-" "element" "0" "=" "wallpaper-rank" "rank" "length" "count" "last" "wallpapers" "and" "get-source" "source" "let" "random?" "not" "if")}
        {Lisp-Entry "wallpaper-rank" method #f 313 11 313 25 ("=" "test:" "wallpapers" "find" "wallpaper")}
        {Lisp-Entry "focus-actions" method #f 323 11 323 24 ("nextmethod" "wallpaper" "'wallpaper" "find-actions" "cons")}
        {Lisp-Entry "on-empty" method #f 333 11 333 19 ("install-configuration" "evt")}
        {Lisp-Entry "on-home" method #f 337 11 337 18 ("show-first" "evt")}
        {Lisp-Entry "on-end" method #f 341 11 341 17 ("show-last" "evt")}
        {Lisp-Entry "on-prior" method #f 345 11 345 19 ("show-previous" "evt")}
        {Lisp-Entry "on-next" method #f 349 11 349 18 ("change-wallpaper" "evt")}
        {Lisp-Entry "on-random" method #f 353 11 353 20 ("if" "flash-message" "change-wallpaper" "when" "not" "random?" "set!" "evt")}
        {Lisp-Entry "on-paused" method #f 360 11 360 20 ("if" "flash-message" "not" "paused?" "set!" "evt")}
        {Lisp-Entry "on-display-info" method #f 365 11 365 26 ("2.0" "delay:" "format" "member?" "favorite?" "configuration" "get-favorites" "favorites" "get-name" "name" "let*" "Image-Resource" "not" "if" "flash-message" "get-source" "source" "let" "evt")}
        {Lisp-Entry "flash-message" method #f 377 11 377 24 ("message-flasher" "'message-flasher" "clear-user-message" "sleep" "user-message" "lambda" "new-thread" "thread-start!" "unimplemented" "1.0" "delay" "delay:" "message")}
        {Lisp-Entry "key-press" method #f 394 20 394 29 ("locator" "enter" "wallpapers" "alphanumeric?" "and" "when" "key")}
        {Lisp-Entry "draw-background" method #f 404 20 404 35 ("fill-background" "get-bounds" "bounds" "nextmethod" "not" "if" "get-background" "background" "get-look" "look" "let" "context" "surface")}
        {Lisp-Entry "draw" method #f 413 20 413 24 ("size:" "0" "draw" "image" "when" "get-size" "size" "let" "nextmethod" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-look" method #f 425 20 425 28 ("stage" "'stage" "find-look")}
        {Lisp-Entry "on-configure" method #f 434 19 434 31 ("eq?" "if" "configuration:" "get-property" "let" "get-mode" "mode:" "get-period" "configuration" "and" "period:" "choose-directory" "directory:" "Wallpaper-Configuration" "new" "install-configuration" "browse-configuration" "define" "evt")}}
      {Lisp-Entry "Wallpaper-Locator" class #f 454 7 454 24 ("Locator")
        {Lisp-Entry "iterate" method #f 458 11 458 18 ("length" "0" "naturals" "wallpapers" "get-name" "title" "let" "rank" "wallpaper" "lambda" "for-each" "proc")}
        {Lisp-Entry "select" method #f 467 11 467 17 ("wallpapers" "element" "set-source" "rank")}}
      {Lisp-Entry "Stage-Menu" class #f 476 7 476 17 ("manage" "manage-separator" "previous" "change" "paused" "slide-separator" "random" "random-separator" "stretched-mode" "stretched" "filled-mode" "filled" "tiled-mode" "tiled" "centered-mode" "wallpaper" "Action" "action-handler:" "centered" "Image-Resource" "icon:" "title:" "configure" "name:" "Context-Menu")
        {Lisp-Entry "finish" method #f 500 11 500 17 ("get-name" "set-title" "or" "paused?" "random?" "set-checked?" "manage" "'manage" "manage-separator" "'manage-separator" "previous" "'previous" "change" "'change" "paused" "'paused" "slide-separator" "'slide-separator" "random" "'random" "random-separator" "'random-separator" "set-visible?" "begin" "not" "if" "get-source" "source" "let" "locate" "set-selected?" "mode" "when" "nextmethod" "rest")}}
      {Lisp-Entry "Configure-Menu" class #f 526 7 526 21 ("Context-Menu")
        {Lisp-Entry "finish" method #f 530 11 530 17 ("update-menu" "nextmethod" "rest")}
        {Lisp-Entry "update-menu" method #f 536 18 536 29 ("get-presentation-property" "get-active?" "config" "lambda" "for-each" "self" "parent:" "Separator-Item" "new" "when" "preferences" "get-children" "children" "let" "Image-Resource" "insert-item")}
        {Lisp-Entry "insert-item" method #f 550 11 550 22 ("configuration:" "list" "properties:" "on-configure" "'on-configure" "method-name:" ":stage" "target-name:" "Event-Handler" "action-handler:" "icon:" "selected?:" "title:" "self" "parent:" "Radio-Item" "new" "configuration" "eq?" "browse?" "if" "selected?" "let" "browse-item?" "config" "icon" "title")}}
      {Lisp-Entry "Manage-Menu" class #f 562 7 562 18 ("title:" "delete-file" "favorite-separator" "add-to-favorite" "wallpaper" "Action" "action-handler:" "Image-Resource" "icon:" "favorite" "name:" "Context-Menu")}}})
"Window"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "Window.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.Window" module #f 39 18 39 39 ("jazz")
      {Lisp-Entry "Window" class #f 51 7 51 13 ("explicit" "initialize" "Figure")
        {Lisp-Entry "title" property #f 54 12 54 17 ()}
        {Lisp-Entry "handle" slot #f 57 8 57 14 ()}
        {Lisp-Entry "get-handle" accessor #f 57 39 57 47 ()}
        {Lisp-Entry "set-handle" accessor #f 57 39 57 47 ()}
        {Lisp-Entry "initially-visible?" method #f 65 20 65 38 ()}
        {Lisp-Entry "default-parent" method #f 69 20 69 34 ("self" "window-default-parent")}
        {Lisp-Entry "prepare" method #f 73 20 73 27 ("prepare-handle" "nextmethod" "set-handle" "self" "set-window" "handle" "setup-handle" "define" "rest")}
        {Lisp-Entry "conclude" method #f 82 20 82 28 ("get-size" "restored" "'restored" "size-change" "nextmethod" "rest")}
        {Lisp-Entry "open?" method #f 87 18 87 23 ("handle" "boolean")}
        {Lisp-Entry "show" method #f 91 20 91 24 ("show-window" "handle" "assert" "nextmethod")}
        {Lisp-Entry "hide" method #f 97 20 97 24 ("hide-window" "handle" "assert" "nextmethod")}
        {Lisp-Entry "minimize" method #f 103 18 103 26 ("minimize-window" "handle" "assert")}
        {Lisp-Entry "get-state" method #f 108 18 108 27 ("window-state" "handle" "assert")}
        {Lisp-Entry "set-state" method #f 113 18 113 27 ("error" "else" "restore-window" "restored" "maximize-window" "maximized" "minimize-window" "minimized" "case" "handle" "assert" "state")}
        {Lisp-Entry "set-placement" method #f 122 18 122 31 ("set-window-placement" "handle" "assert" "size" "position")}
        {Lisp-Entry "maximize" method #f 127 18 127 26 ("show-maximized" "handle" "assert")}
        {Lisp-Entry "close" method #f 132 20 132 25 ("set-handle" "set-window" "handle" "destroy-window" "destroy-component" "set-visible?")}
        {Lisp-Entry "print" method #f 140 20 140 25 ("empty-string?" "title" "or" "get-size" "size" "get-position" "position" "let" "format" "handle" "not" "if" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "add-child" method #f 157 20 157 29 ("cons" "children" "set!" "child")}
        {Lisp-Entry "add-form" method #f 161 20 161 28 ("set-parent" "child-form" "parent-form")}
        {Lisp-Entry "unprocessed-message" method #f 170 29 170 48 ("unprocessed")}
        {Lisp-Entry "erase-background" method #f 179 29 179 45 ("platform-erase-background" "assert" "handle")}
        {Lisp-Entry "paint" method #f 184 29 184 34 ("draw" "surface" "lambda" "self" "with-platform-painting" "platform-data" "region")}
        {Lisp-Entry "*colors*" definition #f 190 14 190 22 ("Ochre" "Dark-Purple" "Dark-Blue" "Dark-Green" "Dark-Yellow" "Dark-Orange" "Dark-Red" "name:" "Color")}
        {Lisp-Entry "*nb-colors*" definition #f 199 14 199 25 ("*colors*" "length")}
        {Lisp-Entry "*current-color*" definition #f 202 14 202 29 ("0")}
        {Lisp-Entry "draw-placeholder" definition #f 206 15 206 31 ("paint" "cycle-debug-color!" "set-color" "surface")}
        {Lisp-Entry "draw" method #f 211 29 211 33 ("surface")}
        {Lisp-Entry "mouse-wheel" method #f 220 29 220 40 ("unprocessed" "processed" "mouse-wheel" "acquired" "if" "get-mouse-in" "view" "let" "delta" "v" "h")}
        {Lisp-Entry "mouse-down" method #f 229 29 229 39 ("unprocessed" "v" "h")}
        {Lisp-Entry "mouse-move" method #f 233 29 233 39 ("unprocessed" "v" "h")}
        {Lisp-Entry "mouse-up" method #f 237 29 237 37 ("unprocessed" "v" "h")}
        {Lisp-Entry "double-click" method #f 241 29 241 41 ("mouse-down" "v" "h")}
        {Lisp-Entry "middle-mouse-down" method #f 245 29 245 46 ("unprocessed" "v" "h")}
        {Lisp-Entry "middle-mouse-up" method #f 249 29 249 44 ("unprocessed" "v" "h")}
        {Lisp-Entry "right-mouse-down" method #f 253 29 253 45 ("unprocessed" "v" "h")}
        {Lisp-Entry "right-mouse-up" method #f 257 29 257 43 ("unprocessed" "v" "h")}
        {Lisp-Entry "call-context-menu" method #f 262 11 262 28 ("get-v" "get-h" "context-menu" "Point" "new" "get-desktop" "acquire" "pos" "let" "v" "h")}
        {Lisp-Entry "context-menu" method #f 267 29 267 41 ("unprocessed" "v" "h")}
        {Lisp-Entry "acquire-capture" method #f 276 18 276 33 ("set-capture" "handle" "assert")}
        {Lisp-Entry "release-capture" method #f 281 18 281 33 ("unset-capture")}
        {Lisp-Entry "cursor-update" method #f 290 29 290 42 ("unprocessed" "processed" "if" "hit")}
        {Lisp-Entry "system-key-down" method #f 301 11 301 26 ("processed" "update-cursor")}
        {Lisp-Entry "system-key-up" method #f 306 11 306 24 ("processed" "update-cursor")}
        {Lisp-Entry "key-down" method #f 311 29 311 37 ("unprocessed" "code")}
        {Lisp-Entry "key-up" method #f 315 29 315 35 ("unprocessed" "code")}
        {Lisp-Entry "call-key-press" method #f 319 11 319 25 ("key-press" "invalid-character?" "unless" "char")}
        {Lisp-Entry "key-press" method #f 324 26 324 35 ("unprocessed" "char")}
        {Lisp-Entry "reset-focus" method #f 333 27 333 38 ()}
        {Lisp-Entry "timer-pulse" method #f 342 29 342 40 ("thread-yield!")}
        {Lisp-Entry "call-position-change" method #f 351 18 351 38 ("Point" "new" "position-change" "v" "h")}
        {Lisp-Entry "position-change" method #f 355 29 355 44 ("unprocessed" "position")}
        {Lisp-Entry "call-size-change" method #f 359 18 359 34 ("unprocessed" "Dimension" "new" "size-change" "get-installed?" "if" "height" "width" "state")}
        {Lisp-Entry "size-change" method #f 365 29 365 40 ("unprocessed" "size" "state")}
        {Lisp-Entry "mouse-leave" method #f 369 29 369 40 ("unprocessed")}
        {Lisp-Entry "mouse-activate?" method #f 373 29 373 44 ()}
        {Lisp-Entry "on-mouse-activate" method #f 377 29 377 46 ("unprocessed")}
        {Lisp-Entry "on-activate" method #f 382 29 382 40 ("unprocessed" "on-activate-palette" "on-deactivate-palette" "inactive" "'inactive" "eq?" "if" "kind")}
        {Lisp-Entry "on-activate-palette" method #f 389 29 389 48 ()}
        {Lisp-Entry "on-deactivate-palette" method #f 393 29 393 50 ()}
        {Lisp-Entry "activate-application" method #f 399 29 399 49 ("unprocessed")}
        {Lisp-Entry "deactivate-application" method #f 405 29 405 51 ("unprocessed")}
        {Lisp-Entry "on-close" method #f 409 29 409 37 ("close-window" "evt")}
        {Lisp-Entry "close-window" method #f 413 26 413 38 ("close")}
        {Lisp-Entry "focus-gain" method #f 417 29 417 39 ("unprocessed")}
        {Lisp-Entry "focus-lose" method #f 421 29 421 39 ("unprocessed")}
        {Lisp-Entry "drop-files" method #f 430 11 430 21 ("self" "platform-drop-files" "wparam")}
        {Lisp-Entry "receive-files" method #f 434 29 434 42 ("files" "pos")}
        {Lisp-Entry "fade-in" method #f 447 18 447 25 ("set-layered?" "set!" "fl/" "-" "*" "fxceiling" "+" "<" "while" "start" "current-time" "time->seconds" "now" "0.15" "delay" "255" "max" "let*" "update-window" "set-visible?" "0" "handle" "set-alpha-blending" "fade-speed" "fade-speed:")}
        {Lisp-Entry "fade-out" method #f 464 18 464 26 ("=" "unless" "set!" "handle" "set-alpha-blending" "by" "from" "n" "for" "loop" "alpha" "let" "5" "step" "step:" "0" "to" "to:")}
        {Lisp-Entry "opened?" method #f 479 18 479 25 ("handle" "boolean")}
        {Lisp-Entry "set-parent" method #f 483 20 483 30 ("platform-set-parent" "handle" "assert" "nextmethod" "parent")}
        {Lisp-Entry "get-external-frame" method #f 489 18 489 36 ("get-frame" "parent" "when" "External-Frame" "self" "is?" "if")}
        {Lisp-Entry "get-overlapped" method #f 496 18 496 32 ("parent" "get-overlapped" "Overlapped" "self" "is?" "if")}
        {Lisp-Entry "get-title" method #f 502 26 502 35 ("title")}
        {Lisp-Entry "set-title" method #f 506 26 506 35 ("localize" "set-window-title" "handle" "assert" "title" "set!" "value")}
        {Lisp-Entry "get-window-title" method #f 512 18 512 34 ("get-window-handle-title" "handle" "assert")}
        {Lisp-Entry "acquire" method #f 517 18 517 25 ("error" "else" "acquire-rect" "Rect" "get-handle" "acquire-point" "Point" "typecase" "handle" "assert" "shape" "window")}
        {Lisp-Entry "get-position-in-root" method #f 528 18 528 38 ("get-position" "platform-translate-to-root" "handle" "assert")}
        {Lisp-Entry "get-position" method #f 533 20 533 32 ("platform-get-position" "handle" "assert")}
        {Lisp-Entry "set-position" method #f 538 20 538 32 ("platform-set-position" "get-position" "nu=?" "unless" "handle" "assert" "pos")}
        {Lisp-Entry "move-window" method #f 544 18 544 29 ("get-v" "get-h" "+" "Point" "new" "set-position" "get-position" "pos" "let" "dv" "dh")}
        {Lisp-Entry "get-size" method #f 549 20 549 28 ("platform-get-size" "handle" "assert")}
        {Lisp-Entry "set-size" method #f 554 20 554 28 ("get-window-size" "nu+" "set-window-size" "0" "Dimension" "nu=?" "unless" "platform-get-size" "nu-" "delta" "let" "handle" "assert" "new-size")}
        {Lisp-Entry "size-window" method #f 561 18 561 29 ("get-height" "get-width" "+" "Dimension" "new" "set-size" "get-size" "size" "let" "dheight" "dwidth")}
        {Lisp-Entry "get-window-size" method #f 566 18 566 33 ("platform-get-window-size" "handle" "assert")}
        {Lisp-Entry "set-window-size" method #f 571 18 571 33 ("platform-set-window-size" "handle" "assert" "size")}
        {Lisp-Entry "set-rect" method #f 576 18 576 26 ("platform-set-rect" "handle" "assert" "rect")}
        {Lisp-Entry "grow-rect" method #f 581 18 581 27 ("set-position" "set-window-size" "Dimension" "get-window-size" "size" "Point" "new" "get-position" "+" "pos" "let" "dheight" "dwidth" "dv" "dh")}
        {Lisp-Entry "get-width" method #f 588 18 588 27 ("get-size" "get-width")}
        {Lisp-Entry "get-height" method #f 592 18 592 28 ("get-size" "get-height")}
        {Lisp-Entry "get-rect" method #f 596 18 596 26 ("get-handle" "get-parent" "if" "platform-get-rect" "handle" "assert")}
        {Lisp-Entry "get-bounds" method #f 601 18 601 28 ("platform-get-bounds" "handle" "assert")}
        {Lisp-Entry "ensure-displayed" method #f 606 18 606 34 ("set-position" "set-size" "8" "padding:" "fit-within" "new-size" "new-position" "receive" "get-rect" "rect" "get-desktop" "get-size" "parent" "not" "if" "outer" "let")}
        {Lisp-Entry "mouse-position" method #f 614 18 614 32 ("platform-mouse-position" "get-desktop" "acquire")}
        {Lisp-Entry "mouse-window" method #f 618 18 618 30 ("mouse-position" "find-window")}
        {Lisp-Entry "mouse-in-window?" method #f 622 18 622 34 ("mouse-position" "point-in-window?")}
        {Lisp-Entry "point-in-window?" method #f 626 18 626 34 ("get-height" "get-v" "get-width" "0" "get-h" "in-interval?" "and" "get-window-size" "size" "let" "point")}
        {Lisp-Entry "find-window" method #f 632 18 632 29 ("platform-window-from-point" "get-window" "point")}
        {Lisp-Entry "flash-window" method #f 636 18 636 30 (".1" "sleep" "handle" "FlashWindow" "3" "repeat" "loop" "flash-window" "'flash-window" "unimplemented")}
        {Lisp-Entry "move" method #f 646 18 646 22 ("platform-move-window" "handle" "assert" "cy" "cx" "y" "x")}
        {Lisp-Entry "acquire-focus" method #f 651 18 651 31 ("self" "set-window-focus")}
        {Lisp-Entry "get-enabled?" method #f 655 18 655 30 ("platform-window-enabled?" "handle" "assert")}
        {Lisp-Entry "enable-window" method #f 660 18 660 31 ("platform-enable-window" "handle" "assert")}
        {Lisp-Entry "disable-window" method #f 665 18 665 32 ("platform-disable-window" "handle" "assert")}
        {Lisp-Entry "get-client-rect" method #f 670 18 670 33 ("platform-get-client-rect" "handle" "assert")}
        {Lisp-Entry "scroll-window" method #f 675 18 675 31 ("when" "debug-flicker" "proc" "let" "platform-scroll-window" "invalidate-window" "inhibit-updates?" "if" "handle" "assert" "clip-rect" "rect" "dv" "dh")}
        {Lisp-Entry "invalidate-rect" method #f 685 18 685 33 ("platform-invalidate-rect" "handle" "assert" "rect")}
        {Lisp-Entry "invalidate-region" method #f 690 18 690 35 ("platform-invalidate-region" "handle" "assert" "region")}
        {Lisp-Entry "invalidate-window" method #f 695 18 695 35 ("platform-invalidate-window" "handle" "assert")}
        {Lisp-Entry "redraw-window" method #f 700 18 700 31 ("get-client-rect" "platform-redraw-window" "or" "invalidate-window" "else" "invalidate-region" "invalidate-rect" "cond" "inhibit-updates?" "if" "handle" "assert" "region" "region:" "rect" "rect:")}
        {Lisp-Entry "invalidate-border" method #f 711 18 711 35 ("invalidate-region" "border-region" "region" "with" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "redraw-border" method #f 716 18 716 31 ("region:" "redraw-window" "border-region" "region" "with" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "border-region" method #f 721 18 721 31 ("get-client-rect" "frame-region" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "update-window" method #f 725 18 725 31 ("platform-update-window" "invalidate-window" "inhibit-updates?" "if" "handle" "assert")}
        {Lisp-Entry "show-noactivate" method #f 732 18 732 33 ("platform-show-noactivate" "handle" "assert")}
        {Lisp-Entry "hide-noactivate" method #f 737 18 737 33 ("platform-hide-noactivate" "handle" "assert")}
        {Lisp-Entry "first-window" method #f 747 18 747 30 ("first" "null?" "if" "get-windows" "windows" "let")}
        {Lisp-Entry "get-windows" method #f 754 18 754 29 ("get-children" "get-visible?" "or" "Window" "is?" "and" "child" "lambda" "collect-if" "include-invisibles?" "include-invisibles?:")}
        {Lisp-Entry "front-window?" method #f 761 18 761 31 ("parent" "first-window" "self" "eq?")}
        {Lisp-Entry "bring-to-front" method #f 770 20 770 34 ("platform-bring-window-to-front" "handle" "assert" "nextmethod")}
        {Lisp-Entry "send-to-back" method #f 776 20 776 32 ("platform-send-window-to-back" "handle" "assert" "nextmethod")}
        {Lisp-Entry "select-foreground" method #f 782 18 782 35 ("handle" "platform-select-foreground-window")}
        {Lisp-Entry "get-location" method #f 791 20 791 32 ("location")}
        {Lisp-Entry "set-location" method #f 795 20 795 32 ("location" "set!" "loc")}
        {Lisp-Entry "layout-window" method #f 799 18 799 31 ("layout")}
        {Lisp-Entry "layout" method #f 803 26 803 32 ()}
        {Lisp-Entry "mouse-view" method #f 812 18 812 28 ("mouse-position" "find-view")}
        {Lisp-Entry "find-view" method #f 816 18 816 27 ("self" "acquire" "find-drawing" "get-root" "root" "View-Player" "is?" "when" "find-window" "window" "let" "pos")}
        {Lisp-Entry "to-view" method #f 823 18 823 25 ("get-root" "self" "acquire" "acquired" "get-player" "player" "let*" "view" "shape")}
        {Lisp-Entry "debug-window" method #f 834 26 834 38 ("self" "Development" "set-%" "debug-window" "'debug-window" "unimplemented" "pos")}
        {Lisp-Entry "describe-window" method #f 840 26 840 41 ("WINEXSTYLE" "get-ex-style" "WINSTYLE" "bits->names" "get-client-rect" "get-bounds" "get-size" "get-position" "WS_CLIPSIBLINGS" "WS_CLIPCHILDREN" "get-style" "mask-bit-set?" "get-class-background" "get-name" "self" "class-of" ":console" "format" "describe-window" "'describe-window" "unimplemented" "pos")}}}})
"Window-Advanced-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Window-Advanced-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Window-Advanced-Menu" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Window-Advanced-Menu" class #f 44 7 44 27 ("current-frame" "application" "Action" "action-handler:" "tile-separator" "before:" "title:" "current" "name:" "Window-Menu")}}})
"Window-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Window-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Window-Menu" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Window-Menu" class #f 48 7 48 18 ("full-screen" "maximize/restore" "zoom-vertically" "zoom-horizontally" "zoom-separator" "tile-vertically" "tile-horizontally" "tile-separator" "previous-frame" "previous" "next-frame" "application" "Action" "action-handler:" "Image-Resource" "icon:" "next" "name:" "title:" "Menu")
        {Lisp-Entry "base-items" slot #f 51 8 51 18 ()}
        {Lisp-Entry "finish" method #f 68 20 68 26 ("get-children" "length" "base-items" "set!" "nextmethod" "rest")}
        {Lisp-Entry "update" method #f 73 20 73 26 ("layout-menu" "get-root" "on-select-palette" "'on-select-palette" "Palette" "palette" "host:" "list" "properties:" "on-select-frame" "'on-select-frame" "method-name:" ":application" "target-name:" "Event-Handler" "action-handler:" "icon:" "get-title" "title:" "Label-Item" "get-guest" "guest-icon" "Frame-Host" "is?" "icon" "frame" "lambda" "self" "parent:" "Separator-Item" "new" "not-null?" "when" "base-items" "get-children" "tail" "close" "for-each" "collect-frames" "frames" "collect-palettes" "palettes" "let" "empty-string?" "null?" "or" "if" "title" "present-title" "define")}}}})
"Windows-Skin"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "Windows-Skin.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.Windows-Skin" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Windows-Skin" class #f 44 7 44 19 ("scrollbar/document" "scrollbar/tool" "scrollbar" "header/document" "header/tool" "flat?:" "header" "border-flat?:" "group" "border/outline" "edge-flat?:" "border/entry" "name:" "title:" "Skin")}}})
"Wipe-Effect"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "effect" "Wipe-Effect.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.effect.Wipe-Effect" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Wipe-Effect" class #f 43 20 43 31 ("Effect")
        {Lisp-Entry "direction" slot #f 46 8 46 17 ()}
        {Lisp-Entry "delay" slot #f 47 8 47 13 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("delay~self" "direction~self" "set!" "nextmethod" "delay" "delay:" "direction" "direction:")}
        {Lisp-Entry "animate" method #f 56 20 56 27 ("up" "v" "get-height" "down" "left" "get-v" "get-h" "-" "Point" "new" "1" "*" "h" "let*" "get-width" "below" "0" "from" "n" "for" "loop" "right" "direction" "case" "destination:" "size:" "position:" "bit-blit" "sleep" "delay" "when" "p" "lambda" "blit" "let" "size" "pos" "dst" "src")}}}})
"Workspace-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "workspace" "Workspace-Button.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.workspace.Workspace-Button" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Workspace-Button" class #f 46 20 46 36 ("initialize" "Radio-Tool")
        {Lisp-Entry "visit?" property #f 49 12 49 18 ()}
        {Lisp-Entry "get-visit?" accessor #f 49 42 49 50 ()}
        {Lisp-Entry "problem?" property #f 50 12 50 20 ()}
        {Lisp-Entry "get-problem?" accessor #f 50 42 50 50 ()}
        {Lisp-Entry "set-visit?" method #f 58 18 58 28 ("invalidate-view" "set!" "visit?" "neq?" "when" "flag")}
        {Lisp-Entry "set-problem?" method #f 64 18 64 30 ("invalidate-view" "set!" "problem?" "neq?" "when" "flag")}
        {Lisp-Entry "notify" method #f 70 18 70 24 ("invalidate-view" "problem?~self" "visit?~self" "set!" "problem?" "visit?")}
        {Lisp-Entry "preferred-size" method #f 81 20 81 34 ("22" "localize" "effective-font" "text-width" "32" "+" "Dimension" "new" "default-size" "title" "not" "if")}
        {Lisp-Entry "problem-border" definition #f 92 14 92 28 ("Dark-Red" "name:" "Color")}
        {Lisp-Entry "visit-start" definition #f 95 14 95 25 ("Light-Red" "name:" "Color")}
        {Lisp-Entry "visit-end" definition #f 98 14 98 23 ("Red" "name:" "Color")}
        {Lisp-Entry "draw-frame" method #f 102 20 102 30 ("nextmethod" "problem-border" "get-bounds" "frame-round-rect" "problem?" "if" "surface")}
        {Lisp-Entry "draw-tool" method #f 108 20 108 29 ("view-enabled?" "get-v" "20" "draw-text" "Black" "name:" "Color" "set-text-color" "get-h" "+" "get-size" "get-text-extent" "24" "Dimension" "nu+" "lambda" "justify-lazy" "center" "0" "localize" "draw-image" "title" "not" "1" "2" "pushed" "'pushed" "get-state" "eq?" "selected?" "or" "if" "offset" "let" "context" "surface")}
        {Lisp-Entry "draw-background" method #f 122 20 122 35 ("nextmethod" "vertical" "'vertical" "direction:" "visit-end" "0.5" "visit-start" "0" "list" "-1" "1" "get-bounds" "expand-rect" "gradient-fill" "visit?" "if" "context" "surface")}}}})
"Workspace-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "menu" "Workspace-Menu.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.menu.Workspace-Menu" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Workspace-Menu" class #f 45 7 45 21 ("previous-workspace" "previous" "next-workspace" "next" "next-separator" "navigate-frame" "split-horizontally" "split-vertically" "delete-others" "application" "Action" "action-handler:" "Image-Resource" "icon:" "delete" "layout-separator" "name:" "title:" "Menu")}}})
"Workspace-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "workspace" "Workspace-Preferences.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.workspace.Workspace-Preferences" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Workspace-Preferences" class #f 51 20 51 41 ("Image-Resource" "icon:" "initialize" "Figure-Preferences")
        {Lisp-Entry "shortcut" property #f 54 12 54 20 ()}
        {Lisp-Entry "get-shortcut" accessor #f 54 48 54 56 ()}
        {Lisp-Entry "set-shortcut" accessor #f 54 48 54 56 ()}
        {Lisp-Entry "frame-model" property #f 55 12 55 23 ()}
        {Lisp-Entry "get-frame-model" accessor #f 55 48 55 56 ()}
        {Lisp-Entry "set-frame-model" accessor #f 55 48 55 56 ()}
        {Lisp-Entry "fullscreen?" property #f 56 12 56 23 ()}
        {Lisp-Entry "get-fullscreen?" accessor #f 56 48 56 56 ()}
        {Lisp-Entry "set-fullscreen?" accessor #f 56 48 56 56 ()}
        {Lisp-Entry "apply-preferences" method #f 68 20 68 37 ("activate" "parameterize" "workspace-activation?" "not" "assert" "deactivate" "selected-workspace" "when" "lambda" "without-local-debugger" "restore-focus?" "restore-focus?:")}
        {Lisp-Entry "activate" method #f 83 11 83 19 ("set-current-stage" "in-player?" "workspace:" "activate" "'activate" "workspace" "'workspace" "process-application-event" "restore-state" "fullscreen?" "update-status" "update-menubar-buttons" "update-windowing-actions" "set-selected-workspace" "self" "set-workspace-preferences" "set-offscreen?" "get-root" "previous-root" "find-located" "reset-current-stage" "full-screen-stage" "with-locked-update" "get-focus" "focus" "get-toplevel" "toplevel" "get-application" "appl" "acquire-focus" "focus-host" "first-view" "focus-stage" "client-activate" "for-each-docked" "stage-empty-activate" "process-activation" "ensure-displayed" "maximized?" "maximize/restore" "remember-workspace-stage" "current-stage" "stage" "car" "set-parent" "not-null?" "get-workspace-stages" "intersection" "preferred" "get-active-stages" "active-stages" "show-frames" "not" "bind" "info" "visibilities" "hide-frames" "null?" "name" "memq?" "or" "cons" "effective-host-workspaces" "list" "lst" "get-workspace" "ws" "get-guest" "guest" "get-visible?" "visible?" "frame" "collect" "reverse!" "include-invisibles?:" "all-internal-frames" "frames" "collect-visibilities" "children" "set-visible?" "maximize" "set-placement" "and" "if" "set-title" "when" "apply-root" "visible?:" "detach-root" "'detach-root" "close-behavior:" "Palette" "new" "palette" "first-child" "root-preferences" "get-size" "size" "get-position" "position" "get-title" "title" "let" "root" "'root" "get-location" "eq?" "unless" "preferences" "lambda" "process-palettes" "collect-palettes" "close" "for-each" "close-palettes" "define" "restore-focus?" "restore-focus?:")}
        {Lisp-Entry "deactivate" method #f 199 11 199 21 ("workspace:" "self" "deactivate" "'deactivate" "workspace" "'workspace" "get-application" "process-application-event")}
        {Lisp-Entry "update-status" method #f 203 18 203 31 ("get-icon" "set-icon" "get-title" "set-title" "when" "workspace" "'workspace" "find-component" "and" "label" "find-status-bar" "status" "get-application" "appl" "let*")}
        {Lisp-Entry "get-class-descriptor" method #f 217 25 217 45 ("Workspace-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 226 11 226 17 ()
        {Lisp-Entry "Workspace-Preferences-Descriptor" class #f 232 7 232 39 ("domain" "title:" "name:" "fullscreen?" "frame-model" "shortcut" "icon" "title" "categorized:" "Figure-Preferences-Descriptor")
          {Lisp-Entry "get-domain" method #f 244 25 244 35 ("nextmethod" "else" "Boolean-Domain" "new" "fullscreen?" "field-name" "case" "property")}
          {Lisp-Entry "component-get-addable-classes" method #f 250 20 250 49 ("Stage-Preferences" "Docked-Preferences" "Pad-Preferences" "Splitter-Preferences" "list" "component")}}}}})
"Workspaces-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "workspace" "Workspaces-Preferences.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.workspace.Workspaces-Preferences" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Workspaces-Preferences" class #f 45 20 45 42 ("title:" "initialize" "Preferences")
        {Lisp-Entry "active" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-active" accessor #f 48 50 48 58 ()}
        {Lisp-Entry "set-active" accessor #f 48 50 48 58 ()}
        {Lisp-Entry "associations" property #f 49 12 49 24 ()}
        {Lisp-Entry "get-associations" accessor #f 49 50 49 58 ()}
        {Lisp-Entry "set-associations" accessor #f 49 50 49 58 ()}
        {Lisp-Entry "get-class-descriptor" method #f 61 25 61 45 ("Workspaces-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 70 11 70 17 ()
        {Lisp-Entry "Workspaces-Preferences-Descriptor" class #f 76 7 76 40 ("domain" "associations" "active" "name:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")
          {Lisp-Entry "component-get-addable-classes" method #f 87 20 87 49 ("Workspace-Preferences" "list" "component")}
          {Lisp-Entry "component-get-addable-details" method #f 92 20 92 49 ("100" "fullscreen?" "frame-model" "shortcut" "150" "name-info" "component")}}
        {Lisp-Entry "Associations-Domain" class #f 101 7 101 26 ("List-Domain")
          {Lisp-Entry "finish" method #f 104 20 104 26 ("Association-Domain" "new" "domain" "set!" "nextmethod" "rest")}
          {Lisp-Entry "add-value" method #f 110 20 110 29 ("class:" "cdr" "car" "self" "add-row" "class" "value")}
          {Lisp-Entry "new-value" method #f 115 20 115 29 ()}}
        {Lisp-Entry "Association-Domain" class #f 124 7 124 25 ("Value-Domain")
          {Lisp-Entry "present" method #f 132 20 132 27 ("format" "model")}}}}})
"X11-Skin"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "X11-Skin.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin.X11-Skin" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "X11-Skin" class #f 44 7 44 15 ("title:" "Skin")}}})
"_activity"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "activity" "_activity.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.activity" module #f 37 8 37 24 ("jazz")
      {Lisp-Entry "Manager" definition #f 45 12 45 19 ()}
      {Lisp-Entry "get-activity-manager" definition #f 49 20 49 40 ("set!" "Manager" "unless" "manager-position" "position:" "Activity-Manager" "new" "new-manager" "define" "visible?" "visible?:")}
      {Lisp-Entry "manager-position" definition #f 59 21 59 37 ("acquire" "79" "get-height" "543" "get-width" "-" "Point" "new" "pos" "get-size" "size" "get-toplevel" "toplevel" "get-desktop" "desktop" "let*")}
      {Lisp-Entry "destroy-manager" definition #f 67 21 67 36 ("Manager" "set!")}}})
"_clipboard"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "clipboard" "_clipboard.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.clipboard" module #f 37 8 37 25 ("jazz")
      {Lisp-Entry "jazz-formatted-text" definition #f 54 12 54 31 ()}
      {Lisp-Entry "jazz-parcels" definition #f 57 12 57 24 ()}
      {Lisp-Entry "register-jazz-clipboard-formats" definition #f 61 21 61 52 ("jazz-parcels" "'jazz-parcels" "jazz-formatted-text" "'jazz-formatted-text" "register-clipboard-format" "string-append" "format" "prefixed-format" "define" "prefix")}
      {Lisp-Entry "get-jazz-parcels" definition #f 69 21 69 37 ("format:" "get-clipboard-text" "read-string-element" "lambda" "with-jazz-readtable" "jazz-parcels" "'jazz-parcels" "clipboard-format-available?" "if")}
      {Lisp-Entry "Clipboard-Parcel" class #f 82 20 82 36 ("Object")
        {Lisp-Entry "process-id" slot #f 85 8 85 18 ()}
        {Lisp-Entry "get-process-id" accessor #f 85 26 85 34 ()}
        {Lisp-Entry "object-id" slot #f 86 8 86 17 ()}
        {Lisp-Entry "get-object-id" accessor #f 86 26 86 34 ()}
        {Lisp-Entry "content" slot #f 87 8 87 15 ()}
        {Lisp-Entry "get-content" accessor #f 87 26 87 34 ()}
        {Lisp-Entry "initialize" method #f 90 20 90 30 ("content~self" "object-id~self" "process-id~self" "set!" "nextmethod" "content" "object-id" "process-id")}}}})
"_dialog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "_dialog.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog" module #f 37 8 37 22 ("jazz")
      {Lisp-Entry "*current-modal*" definition #f 52 12 52 27 ()}
      {Lisp-Entry "current-modal" definition #f 56 20 56 33 ("*current-modal*")}
      {Lisp-Entry "set-current-modal" definition #f 59 20 59 37 ("*current-modal*" "set!" "dialog")}
      {Lisp-Entry "in-modal?" definition #f 63 20 63 29 ("current-modal")}
      {Lisp-Entry "current-window" definition #f 67 20 67 34 ("get-toplevel" "get-player" "and" "or" "current-modal" "modal" "let")}
      {Lisp-Entry "end-modal-dialog" definition #f 73 20 73 36 ("current-modal" "end-modal" "result")}
      {Lisp-Entry "close-modal-dialog" definition #f 77 20 77 38 ("close-modal" "when" "current-modal" "dialog" "let" "action")}}})
"_history"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "history" "_history.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.history" module #f 37 8 37 23 ("jazz")
      {Lisp-Entry "track-history" definition #f 49 20 49 33 ("initiator:" "direction:" "manager:" "History-Menu" "track-popup-menu" "bell" "null?" "if" "get-history" "history" "get-size" "get-height" "0" "Point" "new" "pos" "let" "direction" "manager" "initiator" "sender")}
      {Lisp-Entry "get-history" definition #f 57 20 57 31 ("get-forward-history" "forward" "get-backward-history" "backward" "case" "direction" "manager")}}})
"_offscreen"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "offscreen" "_offscreen.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.offscreen" module #f 37 8 37 25 ("jazz")
      {Lisp-Entry "effect-offscreen" definition #f 46 12 46 28 ()}
      {Lisp-Entry "get-effect-offscreen" definition #f 51 20 51 40 ("new-offscreen" "set!" "close" "when" "get-height" "get-width" "<=" "get-size" "size" "let" "effect-offscreen" "and" "if" "height" "width" "surface")}}})
"_picker"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "picker" "_picker.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.picker" module #f 37 8 37 22 ("jazz")
      {Lisp-Entry "In-Pick?" definition #f 55 12 55 20 ()}
      {Lisp-Entry "All-Overlays" definition #f 58 12 58 24 ()}
      {Lisp-Entry "*highlighted-overlay*" definition #f 61 12 61 33 ()}
      {Lisp-Entry "pick-figure" definition #f 65 20 65 31 ("cons" "invalidate-view" "install-overlay" "overlay" "memq?" "not" "or" "and" "overlapped" "for-each" "All-Overlays" "set!" "setup-pick" "not-null?" "when" "process-windows" "windows" "let" "lambda" "with-locked-update" "In-Pick?" "unless" "tooltips?" "tooltips?:" "obscure-unhighlighted?" "obscure-unhighlighted?:" "report-figure?" "report-figure?:" "highlight-root-only?" "highlight-root-only?:" "highlight" "highlight:" "menu" "menu:" "click" "click:" "exclude" "exclude:" "include" "include:")}
      {Lisp-Entry "install-overlay" definition #f 91 13 91 28 ("tooltips?:" "obscure-unhighlighted?:" "report-figure?:" "highlight-root-only?:" "highlight:" "menu:" "click:" "get-size" "size:" "0" "Point" "position:" "parent:" "Picker-Overlay" "set-parent" "detach?:" "set-root" "Picker-Root" "new" "new-root" "get-root" "old-root" "let" "tooltips?" "obscure-unhighlighted?" "report-figure?" "highlight-root-only?" "highlight" "menu" "click" "overlapped")}
      {Lisp-Entry "remove-overlay" definition #f 109 13 109 27 ("close" "set-root" "set-parent" "first-child" "old-root" "when" "get-root" "new-root" "get-overlapped" "overlapped" "let" "overlay")}
      {Lisp-Entry "root-overlay" definition #f 119 13 119 25 ("get-children" "second" "root")}
      {Lisp-Entry "shortcut-hook" definition #f 123 13 123 26 ("get-toplevel" "simulate-mouse-move" "F8" "get-click" "click" "Return" "previous-brother" "Left" "type:" "next-brother" "brother" "Right" "first-view" "first" "Down" "bell" "Picker-Root" "is?" "or" "View" "find-ascendant" "parent" "get-last-view-rect" "change-highlight-rect" "get-last-cell-rect" "get-highlighted-rect" "eq?" "if" "Up" "user-message" "view-describe" "display-description" "update-tooltip" "default-highlight" "acquire" "pos" "view" "setup-view" "define" "get-highlighted-position" "highlighted-position" "get-highlighted-view" "highlighted-view" "let" "else" "*highlighted-overlay*" "not" "clear-user-message" "end-pick" "lambda" "with-locked-update" "Escape" "Shortcut" "shortcut=?" "cond" "shortcut")}
      {Lisp-Entry "display-description" definition #f 182 13 182 32 ("format" ":bulleted" "list" "value" "name" "bind" "info" "lambda" "map" "cons" "description")}
      {Lisp-Entry "setup-pick" definition #f 190 13 190 23 ("shortcut-hook" "get-application" "set-shortcut-hook")}
      {Lisp-Entry "end-pick" definition #f 194 13 194 21 ("get-application" "set-shortcut-hook" "In-Pick?" "set!" "All-Overlays" "remove-overlay" "for-each" "close-overlays" "define")}
      {Lisp-Entry "Picker-Root" class #f 209 7 209 18 ("View")}
      {Lisp-Entry "Picker-Overlay" class #f 217 7 217 21 ("initialize" "View")
        {Lisp-Entry "click" property #f 220 12 220 17 ()}
        {Lisp-Entry "get-click" accessor #f 220 45 220 53 ()}
        {Lisp-Entry "set-click" accessor #f 220 45 220 53 ()}
        {Lisp-Entry "menu" property #f 221 12 221 16 ()}
        {Lisp-Entry "get-menu" accessor #f 221 45 221 53 ()}
        {Lisp-Entry "set-menu" accessor #f 221 45 221 53 ()}
        {Lisp-Entry "highlight" property #f 222 12 222 21 ()}
        {Lisp-Entry "get-highlight" accessor #f 222 45 222 53 ()}
        {Lisp-Entry "set-highlight" accessor #f 222 45 222 53 ()}
        {Lisp-Entry "highlight-root-only?" property #f 223 12 223 32 ()}
        {Lisp-Entry "get-highlight-root-only?" accessor #f 223 45 223 53 ()}
        {Lisp-Entry "set-highlight-root-only?" accessor #f 223 45 223 53 ()}
        {Lisp-Entry "report-figure?" property #f 224 12 224 26 ()}
        {Lisp-Entry "get-report-figure?" accessor #f 224 45 224 53 ()}
        {Lisp-Entry "set-report-figure?" accessor #f 224 45 224 53 ()}
        {Lisp-Entry "obscure-unhighlighted?" property #f 225 12 225 34 ()}
        {Lisp-Entry "get-obscure-unhighlighted?" accessor #f 225 45 225 53 ()}
        {Lisp-Entry "set-obscure-unhighlighted?" accessor #f 225 45 225 53 ()}
        {Lisp-Entry "tooltips?" property #f 226 12 226 21 ()}
        {Lisp-Entry "get-tooltips?" accessor #f 226 45 226 53 ()}
        {Lisp-Entry "set-tooltips?" accessor #f 226 45 226 53 ()}
        {Lisp-Entry "highlighted-view" slot #f 229 8 229 24 ()}
        {Lisp-Entry "get-highlighted-view" accessor #f 229 50 229 58 ()}
        {Lisp-Entry "highlighted-rect" slot #f 230 8 230 24 ()}
        {Lisp-Entry "get-highlighted-rect" accessor #f 230 50 230 58 ()}
        {Lisp-Entry "highlighted-position" slot #f 231 8 231 28 ()}
        {Lisp-Entry "get-highlighted-position" accessor #f 231 50 231 58 ()}
        {Lisp-Entry "last-mouse-position" slot #f 232 8 232 27 ()}
        {Lisp-Entry "get-last-mouse-position" accessor #f 232 50 232 58 ()}
        {Lisp-Entry "last-cell-rect" slot #f 233 8 233 22 ()}
        {Lisp-Entry "get-last-cell-rect" accessor #f 233 50 233 58 ()}
        {Lisp-Entry "last-view-rect" slot #f 234 8 234 22 ()}
        {Lisp-Entry "get-last-view-rect" accessor #f 234 50 234 58 ()}
        {Lisp-Entry "cursor-update" method #f 242 20 242 33 (":spy" "set-cursor" "pos")}
        {Lisp-Entry "close-self-tooltip" method #f 251 20 251 38 ("close-tooltip" "*current-tooltip-context*" "when")}
        {Lisp-Entry "get-tooltip?" method #f 256 20 256 32 ("tooltips?")}
        {Lisp-Entry "get-formatted-tooltip?" method #f 260 20 260 42 ()}
        {Lisp-Entry "calculate-tooltip-bounds" definition #f 264 15 264 39 ("get-bounds" "acquire" "get-display" "display" "let" "get-tooltip-bounds" "values" "if" "pos" "view")}
        {Lisp-Entry "get-tooltip-bounds" method #f 272 20 272 38 ("or" "calculate-tooltip-bounds" "view-rect" "cell-rect" "find-view-info" "view" "receive" "pos")}
        {Lisp-Entry "get-tooltip-context" method #f 278 20 278 39 ("Label" "name:" "Font" "font:" "or" "bounds:" "view-describe" "display-description" "text:" "view:" "Tooltip-Context" "new" "calculate-tooltip-bounds" "view-rect" "cell-rect" "when" "find-view-info" "view" "receive" "pos")}
        {Lisp-Entry "mouse-move" method #f 294 20 294 30 ("self" "user-message" "not" "if" "report-figure?" "when" "else" "default-highlight" "highlight" "case" "find-view-info" "view" "receive" "set!" "nu=?" "last-mouse-position" "and" "unless" "nextmethod" "pos")}
        {Lisp-Entry "mouse-up" method #f 309 20 309 28 ("click" "end-pick" "lambda" "with-locked-update" "find-view-info" "view" "receive" "nextmethod" "pos")}
        {Lisp-Entry "find-view-info" method #f 318 11 318 25 ("values" "and" "view-pos" "list" "ignore:" "find-drawing" "view" "self" "acquire" "root-pos" "get-root" "root" "let*" "pos")}
        {Lisp-Entry "default-highlight" method #f 331 11 331 28 ("acquire" "and" "calculate-tooltip-bounds" "view-rect" "cell-rect" "receive" "get-bounds" "view-rect:" "cell-rect:" "update-highlight" "highlight-root-only?" "if" "root-overlay" "overlay" "get-player" "get-root" "root" "let" "pos" "view")}
        {Lisp-Entry "change-highlight-rect" method #f 342 11 342 32 ("override-rect:" "highlighted-position" "highlighted-view" "self" "update-highlight" "override-rect")}
        {Lisp-Entry "update-highlight" method #f 346 11 346 27 ("highlighted-position" "or" "highlighted-rect" "set!" "old-view" "old-overlay" "not" "highlighted-view" "*highlighted-overlay*" "eq?" "and" "unless" "redraw-view" "rect:" "redraw-window" "1" "get-bounds" "inflate-rect" "get-root" "acquire" "rect" "get-player" "player" "let" "when" "if" "same-overlay?" "redraw" "define" "override-rect" "override-rect:" "last-view-rect" "view-rect" "view-rect:" "last-cell-rect" "cell-rect" "cell-rect:" "pos" "view" "overlay")}
        {Lisp-Entry "context-menu" method #f 379 20 379 32 ("processed" "acquire" "track-popup-menu" "get-root" "root" "let" "find-view-info" "receive" "close-popups" "nextmethod" "not" "if" "get-children" "execute:" "Event-Handler" "set-action-handler" "invoke" "self" ":action" "Action-Event" "new" "apply" "get-properties" "pos:" "view:" "augment" "properties" "when" "end-pick" "event" "execute" "get-action-handler" "action-handler" "let*" "item" "lambda" "for-each" "view" "menu" "setup-actions" "define" "pos")}
        {Lisp-Entry "Overlay-Color" definition #f 408 14 408 27 ("0.25" "alpha:" "Black" "name:" "Color")}
        {Lisp-Entry "Highlight-Color" definition #f 411 14 411 29 ("177" "blue:" "green:" "109" "red:" "Color")}
        {Lisp-Entry "draw" method #f 415 20 415 24 ("rectangle" "highlighted-rect" "Overlay-Color" "get-bounds" "fill-rect" "obscure-unhighlighted?" "when" "get-root" "neq?" "*highlighted-overlay*" "not" "or" "cond" "Highlight-Color" "set-color" "2" "set-line-width" "solid" "'solid" "set-style" "highlighter" "define" "lv" "lh" "context" "surface")}}}})
"_print"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "_print.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print" module #f 37 8 37 21 ("jazz")}})
"_resizer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "resizer" "_resizer.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.resizer" module #f 37 8 37 23 ("jazz")
      {Lisp-Entry "Border-Size" constant #f 49 10 49 21 ("6")}
      {Lisp-Entry "Handle-Size" constant #f 50 10 50 21 ("16")}
      {Lisp-Entry "Middle-Size" constant #f 51 10 51 21 ("12")}
      {Lisp-Entry "Part-Array" constant #f 54 10 54 20 ("1" "0" "-1")}
      {Lisp-Entry "find-resize-part" definition #f 67 20 67 36 ("Part-Array" "element" "and" "when" "get-height" "get-v" "v" "get-width" "get-h" "h" "else" "+" "between?" "or" ">" "4" "-" ">=" "1" "0" "<" "cond" "2" "fxround/" "center" "Middle-Size" "middle" "3" "quotient" "Handle-Size" "min" "handle" "Border-Size" "border" "s" "n" "lambda" "p" "let" "full?" "full?:" "size" "pt")}
      {Lisp-Entry "get-resize-cursor" definition #f 85 20 85 37 ("Part-Cursor" "assoc-value" "part")}
      {Lisp-Entry "resize-client" definition #f 89 20 89 33 ("*" "cdr" "rv" "mv" "car" "rh" "mh" "receive" "0" "1" "values" "-1" "case" "r" "lambda" "p" "let" "proc" "part" "dv" "dh")}}})
"_search"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "search" "_search.jazz"} 1290013434
    {Lisp-Entry "jazz.ui.search" module #f 37 8 37 22 ("jazz")
      {Lisp-Entry "default-search-extensions" definition #f 40 21 40 46 ()}}})
"_skin"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "skin" "_skin.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.skin" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "*active-skin*" definition #f 48 12 48 25 ()}
      {Lisp-Entry "get-skin" definition #f 52 20 52 28 ("*active-skin*")}
      {Lisp-Entry "set-skin" definition #f 56 20 56 28 ("skin-update" "*active-skin*" "set!" "skin")}
      {Lisp-Entry "skin-update" definition #f 61 21 61 32 ("get-skin" "present" "set-title" "skin" "'skin" "locate-component" "label" "find-status-bar" "status" "when" "get-application" "appl" "let")}
      {Lisp-Entry "get-skins" definition #f 71 20 71 29 ("get-reference" "when" "get-application" "get-skins-designer" "designer" "let")}
      {Lisp-Entry "find-look" definition #f 82 20 82 29 ("get-skin" "child" "name")}}})
"_syntax"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "syntax" "_syntax.jazz"} 1289421809
    {Lisp-Entry "jazz.ui.syntax" module #f 37 18 37 32 ("jazz")
      {Lisp-Entry "define-handler" macro ("macro") 40 15 40 29 (",name" "',name" "register-handler" ",@body" ",handler" "define" "begin" "car" "name" "let" "body" "handler")}}})
"_ui"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "_ui.jazz"} 1288732034
    {Lisp-Entry "jazz.ui" module #f 37 8 37 15 ("jazz")
      {Lisp-Entry "default-disabled-resource" definition #f 53 21 53 46 ("get-name" "format" "class-of" "new" "resource")}
      {Lisp-Entry "preference->text-style" definition #f 63 20 63 42 ("frame:" "highlight:" "symbolic-color" "color:" "symbolic-font" "font:" "base:" "name:" "list" "Text-Style" "new" "apply" "get-frame" "frame" "get-highlight" "highlight" "get-color" "color" "get-font" "font" "get-base" "base" "or" "let" "error" "get-name" "and" "if" "preference" "default-base" "name")}
      {Lisp-Entry "shortcut=?" definition #f 86 20 86 30 ("get-key" "eqv?" "get-modifiers" "equal?" "and" "s2" "s1")}
      {Lisp-Entry "shortcut-hash" definition #f 91 20 91 33 ("get-modifiers" "equal?-hash" "get-key" "eqv?-hash" "fxwrap+" "shortcut")}
      {Lisp-Entry "*bindings*" definition #f 101 12 101 22 ()}
      {Lisp-Entry "get-bindings" definition #f 105 20 105 32 ("*bindings*")}
      {Lisp-Entry "set-bindings" definition #f 109 20 109 32 ("register-bindings" "*bindings*" "set!" "bindings")}
      {Lisp-Entry "register-bindings" definition #f 114 21 114 38 ("get-children" "get-name" "register-actions" "actions" "lambda" "for-each" "bindings")}
      {Lisp-Entry "*actions*" definition #f 125 12 125 21 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-actions" definition #f 129 21 129 32 ("*actions*")}
      {Lisp-Entry "register-actions" definition #f 132 21 132 37 ("*actions*" "table-set!" "actions" "context")}
      {Lisp-Entry "find-actions" definition #f 135 21 135 33 ("error" "*actions*" "table-ref" "or" "context")}
      {Lisp-Entry "find-action-item" definition #f 140 21 140 37 ("find-actions" "find-component" "name" "context")}
      {Lisp-Entry "require-action-item" definition #f 144 21 144 40 ("error" "get-action-name" "get-action-context" "find-action-item" "or" "action")}
      {Lisp-Entry "call-action" definition #f 149 21 149 32 ("action:" "invoke" "require-action-item" "action-item" "let" "event" "event:" "properties" "sender" "action")}
      {Lisp-Entry "get-action-enabled?" definition #f 154 21 154 40 ("get-enabled?" "require-action-item" "action-item" "let" "action")}
      {Lisp-Entry "set-action-enabled?" definition #f 159 21 159 40 ("set-enabled?" "require-action-item" "action-item" "let" "enabled?" "action")}
      {Lisp-Entry "set-actions-enabled?" definition #f 164 21 164 41 ("set-action-enabled?" "action" "lambda" "for-each" "enabled?" "actions")}
      {Lisp-Entry "get-class-actions" definition #f 170 21 170 38 ("class-actions" "object")}
      {Lisp-Entry "get-guest-actions" definition #f 174 21 174 38 ("guest-actions" "view")}
      {Lisp-Entry "extract-actions" definition #f 178 21 178 36 ("get-output" "get-children" "put" "when" "get-shortcut" "shortcut" "action-name" "let*" "action-item" "get-name" "context-name" "action-list" "lambda" "for-each" "List-Factory" "new" "fact" "let" "actions-list")}
      {Lisp-Entry "*handlers*" define #f 197 8 197 18 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-handlers" definition #f 201 20 201 32 ("*handlers*")}
      {Lisp-Entry "find-handler" definition #f 205 20 205 32 ("*handlers*" "table-ref" "name")}
      {Lisp-Entry "require-handler" definition #f 208 20 208 35 ("error" "find-handler" "or" "name")}
      {Lisp-Entry "register-handler" definition #f 213 20 213 36 ("*handlers*" "table-set!" "handler" "name")}
      {Lisp-Entry "unregister-handler" definition #f 216 20 216 38 ("*handlers*" "table-clear" "name")}
      {Lisp-Entry "notify-handler" definition #f 220 20 220 34 ("error" "else" "require-handler" "Symbol" "call-action" "Action" "invoke" ":action" "Event" "new" "apply" "event" "get-properties" "or" "let" "Handler" "typecase" "properties" "sender" "handler" "component")}
      {Lisp-Entry "invoke-handler" definition #f 236 20 236 34 ("error" "else" "require-handler" "let" "Symbol" "event:" "call-action" "Action" "invoke" "Handler" "typecase" "event" "handler" "component")}
      {Lisp-Entry "user-completions" definition #f 254 12 254 28 ("equal?" "test:" "make-table")}
      {Lisp-Entry "register-user-completion" definition #f 258 20 258 44 ("user-completions" "table-set!" "completion" "prefix")}
      {Lisp-Entry "register-user-completions" definition #f 262 20 262 45 ("register-user-completion" "completion" "prefix" "bind" "pair" "lambda" "for-each" "alist")}
      {Lisp-Entry "get-user-completion" definition #f 269 20 269 39 ("user-completions" "table-ref" "prefix")}
      {Lisp-Entry "LayoutType" enumeration #f 278 13 278 23 ("box" "flow" "snap" "border" "justify" "center" "fit" "fill")}
      {Lisp-Entry "iterate-cells" definition #f 295 13 295 26 ("set!" "while" "or" "horizontal" "'horizontal" "cell" "lambda" "advance" "previous-cell" "backward" "next-cell" "forward" "case" "next" "let*" "proc" "direction" "start" "bottom-right" "top-left")}
      {Lisp-Entry "previous-cell" definition #f 308 13 308 26 ("horizontal" "Cell" "new" "minor" "major" "receive" "when" ">" "-1" "get-line" "get-col" "loop-cell" "info" "let" "vertical" "case" "direction" "max-cell" "min-cell" "cell")}
      {Lisp-Entry "next-cell" definition #f 320 13 320 22 ("horizontal" "Cell" "new" "minor" "major" "receive" "when" "<" "1" "get-line" "get-col" "loop-cell" "info" "let" "vertical" "case" "direction" "max-cell" "min-cell" "cell")}
      {Lisp-Entry "loop-cell" definition #f 333 13 333 22 ("else" "+" "values" "cond" "test" "step" "end-minor" "end-major" "start-minor" "start-major" "minor" "major")}
      {Lisp-Entry "inhibit-updates?" definition #f 347 19 347 35 ("make-parameter")}
      {Lisp-Entry "keyboard-input?" definition #f 356 19 356 34 ("make-parameter")}
      {Lisp-Entry "in-cell-edit?" definition #f 365 20 365 33 ("Tree-Data-View" "find-ascendant" "view")}
      {Lisp-Entry "min-column-width" definition #f 369 19 369 35 ("9")}
      {Lisp-Entry "Site" class #f 378 7 378 11 ("Object")
        {Lisp-Entry "row" slot #f 381 8 381 11 ()}
        {Lisp-Entry "get-row" accessor #f 381 25 381 33 ()}
        {Lisp-Entry "set-row" accessor #f 381 25 381 33 ()}
        {Lisp-Entry "column" slot #f 382 8 382 14 ()}
        {Lisp-Entry "get-column" accessor #f 382 25 382 33 ()}
        {Lisp-Entry "set-column" accessor #f 382 25 382 33 ()}
        {Lisp-Entry "initialize" method #f 385 20 385 30 ("column~self" "row~self" "set!" "column" "row")}
        {Lisp-Entry "copy-object" method #f 390 20 390 31 ("column" "row" "Site" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 394 20 394 34 ("get-column" "column" ":equal" "eq?" "not" "get-row" "row" "compare" "compared" "let" ":incompatible" "Site" "is-not?" "if" "target")}
        {Lisp-Entry "print" method #f 403 20 403 25 ("column" "row" "self" "class-of" "category-name" "format" "readably" "printer")}}
      {Lisp-Entry "site=?" specialize #f 410 22 410 28 ()}
      {Lisp-Entry "=" specialize #f 410 30 410 31 ("get-column" "get-row" "eq?" "and" "s2" "s1")}
      {Lisp-Entry "site-hash" definition #f 415 20 415 29 ("get-column" "get-row" "eqv?-hash" "fxwrap+" "s")}}})
"_view"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "view" "_view.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.view" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "mouse-in" definition #f 55 20 55 28 ()}
      {Lisp-Entry "mouse-down?" definition #f 56 20 56 31 ()}
      {Lisp-Entry "mouse-right-down?" definition #f 57 20 57 37 ()}
      {Lisp-Entry "mouse-down-view" definition #f 58 20 58 35 ()}
      {Lisp-Entry "mouse-down-point" definition #f 59 20 59 36 ()}
      {Lisp-Entry "delayed-mouse-action" definition #f 64 12 64 32 ()}
      {Lisp-Entry "get-delayed-mouse-action" definition #f 68 20 68 44 ("delayed-mouse-action")}
      {Lisp-Entry "set-delayed-mouse-action" definition #f 71 20 71 44 ("delayed-mouse-action" "set!" "action")}
      {Lisp-Entry "get-mouse-in" definition #f 75 20 75 32 ("mouse-in")}
      {Lisp-Entry "set-mouse-in" definition #f 78 20 78 32 ("mouse-in" "set!" "view")}
      {Lisp-Entry "reset-mouse-in" definition #f 81 20 81 34 ("mouse-in" "set!")}
      {Lisp-Entry "get-mouse-down?" definition #f 85 20 85 35 ("mouse-down?")}
      {Lisp-Entry "set-mouse-down?" definition #f 88 20 88 35 ("mouse-down?" "set!" "flag")}
      {Lisp-Entry "get-mouse-right-down?" definition #f 92 20 92 41 ("mouse-right-down?")}
      {Lisp-Entry "set-mouse-right-down?" definition #f 95 20 95 41 ("mouse-right-down?" "set!" "flag")}
      {Lisp-Entry "get-mouse-down-view" definition #f 99 20 99 39 ("mouse-down-view")}
      {Lisp-Entry "set-mouse-down-view" definition #f 102 20 102 39 ("mouse-down-view" "set!" "view")}
      {Lisp-Entry "get-mouse-down-point" definition #f 106 20 106 40 ("mouse-down-point")}
      {Lisp-Entry "set-mouse-down-point" definition #f 109 20 109 40 ("mouse-down-point" "set!" "point")}
      {Lisp-Entry "mouse-view" definition #f 113 20 113 30 ("mouse-in" "Captured-View" "or")}
      {Lisp-Entry "toplevel-deactivate" definition #f 120 20 120 39 ("mouse-down-point" "mouse-down-view" "mouse-down?" "set!")}
      {Lisp-Entry "with-cursor" definition #f 131 20 131 31 ("update-cursor" "sleep" "when" "set-cursor" "begin" "unwind-protect" "duration" "duration:" "proc" "cursor")}
      {Lisp-Entry "update-cursor" definition #f 141 20 141 33 ("mouse-position" "call-cursor-update" "in-player?" "mouse-in" "and" "when")}
      {Lisp-Entry "Current-Drag-Drop" definition #f 151 12 151 29 ()}
      {Lisp-Entry "current-drag-drop" definition #f 155 20 155 37 ("Current-Drag-Drop")}
      {Lisp-Entry "set-current-drag-drop" definition #f 158 20 158 41 ("Current-Drag-Drop" "set!" "drag-drop")}
      {Lisp-Entry "Captured-View" definition #f 167 12 167 25 ()}
      {Lisp-Entry "get-captured-view" definition #f 171 20 171 37 ("Captured-View")}
      {Lisp-Entry "set-captured-view" definition #f 174 20 174 37 ("Captured-View" "set!" "view")}
      {Lisp-Entry "release-captured-view" definition #f 178 21 178 42 ("unset-capture" "set!" "Captured-View" "when")}
      {Lisp-Entry "external-name" definition #f 190 20 190 33 ("category-name" "guest-class")}
      {Lisp-Entry "get-focused-host" definition #f 199 20 199 36 ("get-host" "when" "get-focus" "focus" "let")}
      {Lisp-Entry "focused-host?" definition #f 205 20 205 33 ("get-focused-host" "eq?" "host")}
      {Lisp-Entry "new-guest" definition #f 214 13 214 22 ("new" "apply" "rest" "guest-class")}
      {Lisp-Entry "get-modal" definition #f 223 20 223 29 ("process-modal" "not" "if" "host-visible?:" "new-dialog" "apply" "dialog/result" "process?" "receive" "rest" "guest-class")}
      {Lisp-Entry "new-dialog" definition #f 230 20 230 30 ("focus-host" "select-foreground" "set-visible?" "get-modal-result" "values" "has-dialog-result?" "if" "when" "set-guest" "set-position" "set-size" "set-title" "center-dialog" "host-position" "pos" "get-size" "host-size" "size" "new-guest" "or" "get-root" "host" "visible?:" "closable?:" "sizable?:" "dialog-class" "new" "player" "let*" "others" "initialize" "guest" "host-visible?" "host-closable?" "host-sizable?" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "center-dialog" definition #f 254 20 254 33 ("50" "get-v" "-" "get-h" "Point" "new" "center" "pos" "get-desktop" "get-size" "outer" "let*" "inner")}
      {Lisp-Entry "Palettes" definition #f 265 20 265 28 ("eq?" "test:" "make-table")}
      {Lisp-Entry "singleton-palette" definition #f 269 20 269 37 ("table-set!" "host-visible?:" "new-palette" "apply" "procedure?" "if" "palette" "Palettes" "table-ref" "category-identifier" "or" "ref" "let" "rest" "name" "guest-class")}
      {Lisp-Entry "new-palette" definition #f 281 20 281 31 ("focus-host" "fade-in" "layout-view" "set-guest" "new-guest" "let" "set-size" "set-position" "when" "or" "set-title" "get-root" "host" "visible?:" "palette-class" "new" "player" "let*" "others" "initialize" "guest" "host-visible?" "host-size" "host-position" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "show-palette" definition #f 305 20 305 32 ("focus-host" "fade-in" "unless" "bring-to-front" "get-visible?" "visible?" "let" "client-activate" "when" "initialize:" "getf" "initialize" "get-player" "palette" "get-guest" "guest" "external-name" "singleton-palette" "apply" "host" "let*" "rest" "guest-class")}
      {Lisp-Entry "collect-palettes" definition #f 321 20 321 36 ("palette-parent" "get-windows" "Palette" "is?" "window" "lambda" "collect-if")}
      {Lisp-Entry "reset-palettes" definition #f 327 21 327 35 ("eq?" "test:" "make-table" "Palettes" "set!")}
      {Lisp-Entry "Dockeds" definition #f 336 20 336 27 ("eq?" "test:" "make-table")}
      {Lisp-Entry "singleton-docked" definition #f 340 20 340 36 ("table-set!" "name:" "new-docked" "palette" "Dockeds" "table-ref" "external-name" "or" "ref" "let" "rest" "name" "guest-class")}
      {Lisp-Entry "new-docked" definition #f 348 20 348 30 ("new-guest" "set-guest" "set-location" "when" "or" "set-title" "visible?:" "Docked-Host" "new" "host" "let" "others" "host-location" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "reset-dockeds" definition #f 358 21 358 34 ("eq?" "test:" "make-table" "Dockeds" "set!")}
      {Lisp-Entry "*stages*" definition #f 367 20 367 28 ()}
      {Lisp-Entry "*current-stage*" definition #f 370 20 370 35 ()}
      {Lisp-Entry "get-stages" definition #f 374 20 374 30 ("*stages*")}
      {Lisp-Entry "get-active-stages" definition #f 377 20 377 37 ("*stages*" "in-player?" "collect-if")}
      {Lisp-Entry "current-stage" definition #f 381 20 381 33 ("*current-stage*")}
      {Lisp-Entry "set-current-stage" definition #f 384 20 384 37 ("get-application" "update-menubar-buttons" "activate-current-frame" "stage-activate" "get-border" "invalidate-border" "remove!" "cons" "*stages*" "when" "set!" "previous" "let" "*current-stage*" "eq?" "unless" "stage")}
      {Lisp-Entry "reset-current-stage" definition #f 398 20 398 39 ("set-current-stage")}
      {Lisp-Entry "create-stage" definition #f 402 20 402 32 ("cons" "*stages*" "set!" "get-application" "new-stage" "stage" "let")}
      {Lisp-Entry "current-stage-border" definition #f 408 20 408 40 ("get-parent" "when" "current-stage" "stage" "let")}
      {Lisp-Entry "all-frames" definition #f 414 20 414 30 ("all-external-frames" "all-internal-frames" "append" "include-invisibles?" "include-invisibles?:")}
      {Lisp-Entry "all-internal-frames" definition #f 419 20 419 39 ("get-frames" "get-visible?" "or" "Internal-Frame-Host" "is?" "and" "frame" "lambda" "collect-if" "include-invisibles?" "include-invisibles?:")}
      {Lisp-Entry "all-external-frames" definition #f 426 20 426 39 ("get-frames" "get-visible?" "or" "External-Frame-Host" "is?" "and" "frame" "lambda" "collect-if" "include-invisibles?" "include-invisibles?:")}
      {Lisp-Entry "first-frame" definition #f 433 20 433 31 ("first" "null?" "if" "all-frames" "frames" "let")}
      {Lisp-Entry "second-frame" definition #f 440 20 440 32 ("second" "2" "length" ">=" "if" "all-frames" "frames" "let")}
      {Lisp-Entry "last-frame" definition #f 447 20 447 30 ("last" "null?" "if" "all-frames" "frames" "let")}
      {Lisp-Entry "collect-frames" definition #f 454 20 454 34 ("all-frames" "get-controller" "get-tool?" "not" "Document" "is-not?" "or" "get-guest" "guest" "let" "frame" "lambda" "collect-if")}
      {Lisp-Entry "find-frame-host" definition #f 462 20 462 35 ("include-invisibles?:" "all-frames" "get-guest" "Host-View" "is?" "and" "view" "lambda" "find-if" "guest-type")}
      {Lisp-Entry "find-frame-guest" definition #f 469 20 469 36 ("get-guest" "when" "find-frame-host" "host" "let" "guest-type")}
      {Lisp-Entry "delete-stage" definition #f 480 20 480 32 ("delete-stages" "bell" "Splitter-Preferences" "is-not?" "if" "get-parent" "splitter" "get-figure-preferences" "stage" "current-stage" "get-application" "get-workspaces-designer" "designer" "let")}
      {Lisp-Entry "delete-other-stages" definition #f 490 20 490 39 ("delete-stages" "bell" "is-not?" "get-figure-preferences" "stage" "current-stage" "get-application" "get-workspaces-designer" "designer" "let" "get-children" "Stage-Preferences" "or" "pref" "lambda" "every?" "Splitter-Preferences" "is?" "and" "get-parent" "stage-splitter?" "if" "parent" "splitter" "find-splitter" "define")}
      {Lisp-Entry "delete-stages" definition #f 512 13 512 26 ("select-current-workspace" "remove-child" "move-component" "get-location" "location" "'location" "set-property" "bell" "can-move-component?" "not" "if" "get-parent" "parent" "let" "get-children" "every?" "Splitter-Preferences" "and" "Stage-Preferences" "is?" "or" "view" "only-stages?" "define" "splitter" "stage" "designer")}
      {Lisp-Entry "split-stage-vertically" definition #f 528 20 528 42 ("vert" "'vert" "split-stage")}
      {Lisp-Entry "split-stage-horizontally" definition #f 532 20 532 44 ("horz" "'horz" "split-stage")}
      {Lisp-Entry "split-stage" definition #f 536 13 536 24 ("select-current-workspace" "get-maximized?" "maximized?" "'maximized?" "second" "'second" "first" "'first" "50" "division" "'division" "relative" "'relative" "mode" "'mode" "orientation" "'orientation" "get-location" "location" "'location" "set-property" "move-component" "add-child" "Stage-Preferences" "new-stage" "Splitter-Preferences" "new" "new-splitter" "get-parent" "parent" "get-figure-preferences" "stage" "bell" "not" "if" "current-stage" "get-application" "get-workspaces-designer" "designer" "let" "direction")}
      {Lisp-Entry "navigate-frame" definition #f 558 20 558 34 ("current-stage" "get-stage" "current-frame" "bell" "2" "<" "if" "set-current-stage" "remember-workspace-stage" "maximize/restore" "set-parent" "when" "1" "-" "modulo" "element" "next" "find" "rank" "frame" "stage" "navigate" "define" "length" "count" "get-active-stages" "stages" "let")}
      {Lisp-Entry "*active-frame*" definition #f 583 12 583 26 ()}
      {Lisp-Entry "active-frame" definition #f 587 21 587 33 ("*active-frame*")}
      {Lisp-Entry "set-active-frame" definition #f 590 21 590 37 ("*active-frame*" "set!" "frame")}
      {Lisp-Entry "activate-current-frame" definition #f 594 21 594 43 ("stage-empty-activate" "activate-frame" "if" "deactivate-frame" "neq?" "*active-frame*" "active" "front" "first-view" "when" "current-stage" "stage" "let" "front-frame" "define")}
      {Lisp-Entry "frame-region" definition #f 617 20 617 32 ("or" "'or" "combine!" "b" "-" "r" "t" "+" "l" "with" "Region" "region" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "let" "1" "Rect" "new" "insets" "insets:" "frame")}
      {Lisp-Entry "new-frame" definition #f 639 20 639 29 ("new-external-frame" "external" "new-internal-frame" "apply" "internal" "'internal" "or" "case" "others" "kind" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "new-internal-frame" definition #f 651 20 651 38 ("focus-host" "set-visible?" "bring-to-front" "ensure-displayed" "set-guest" "set-workspace" "when" "28" "8" "Dimension" "get-size" "nu+" "set-size" "cascade-position" "set-position" "set-title" "visible?:" "current-stage" "parent:" "Internal-Frame-Host" "new" "host" "new-guest" "or" "let" "others" "initialize" "guest" "host-focus?" "host-visible?" "host-workspace" "host-size" "host-position" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "Cascade-Position" definition #f 679 12 679 28 ("25" "Point")}
      {Lisp-Entry "Cascade-Step" definition #f 682 12 682 24 ("22" "Dimension")}
      {Lisp-Entry "cascade-position" definition #f 686 13 686 29 ("Cascade-Step" "nu+" "nu=?" "test:" "member?" "Cascade-Position" "pos" "iterate" "get-stage" "positions" "get-views" "get-position" "get-preserved-position" "if" "get-guest" "class-of" "eq?" "Internal-Frame-Host" "is?" "and" "when" "frame" "lambda" "collect" "get-maximized?" "maximized?" "let" "stage" "collect-positions" "define" "guest" "host")}
      {Lisp-Entry "new-external-frame" definition #f 709 20 709 38 ("activate-frame" "focus-host" "fade-in" "layout-view" "set-guest" "new-guest" "let" "set-size" "set-position" "when" "or" "set-title" "get-root" "host" "visible?:" "External-Frame" "new" "player" "let*" "others" "initialize" "guest" "host-focus?" "host-visible?" "host-workspace" "host-size" "host-position" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "Toolbars" definition #f 740 20 740 28 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-toolbar" definition #f 744 20 744 31 ("Toolbars" "table-ref" "name")}
      {Lisp-Entry "singleton-toolbar" definition #f 748 20 748 37 ("table-set!" "name:" "new-toolbar" "palette" "Toolbars" "table-ref" "category-identifier" "or" "ref" "let" "rest" "name" "guest-class")}
      {Lisp-Entry "new-toolbar" definition #f 756 20 756 31 ("new-guest" "set-guest" "set-location" "when" "or" "set-title" "visible?:" "Toolbar-Host" "new" "host" "let" "others" "host-location" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "reset-toolbars" definition #f 766 21 766 35 ("eq?" "test:" "make-table" "Toolbars" "set!")}
      {Lisp-Entry "scrollbar-size" definition #f 775 19 775 33 ("13")}
      {Lisp-Entry "with-progress" definition #f 784 13 784 26 ("process-modal" "worker" "'worker" "end-modal" "signal-modal" "signal" "forwardable?" "Signal" "catch" "unwind-protect" "set!" "sig" "abnormal" "resignal" "result" "let*" "lambda" "new-thread" "thread-start!" "disable-cancel" "when" "get-guest" "reporter" "let" "host-closable?:" "new-dialog" "dialog" "process?" "receive" "User-Reporter" "new" "not" "if" "with-progress" "'with-progress" "unimplemented" "abnormal-cleanup" "abnormal-cleanup:" "cancelable?" "cancelable?:" "Progress-Reporter" "progress-reporter" "progress-reporter:" "name" "name:" "threaded?" "threaded?:" "proc")}
      {Lisp-Entry "message-box" definition #f 834 20 834 31 ("process-box" "get-guest" "guest" "let" "host-sizable?:" "host-visible?:" "Message-Box" "or" "new-dialog" "dialog" "process?" "receive" "sizable?" "sizable?:" "process-keys?" "process-keys?:" "default-button" "default-button:" "actions" "actions:" "cancel" "cancel:" "no" "no:" "yes" "yes:" "selection" "selection:" "default" "'default" "sound" "sound:" "content" "content:" "icon" "icon:" "size" "size:" "title" "title:" "message" "'message" "type" "type:" "class" "class:" "text")}
      {Lisp-Entry "with-safe-execution" definition #f 873 20 873 39 ("wrap-exception" "obj" "lambda" "with-exception-filter" "get-controller-debugger" "if" "warn-exit" "exit" "cancel" "no" "post-stop" "yes" "case" "cancel:" "no:" "yes:" "confirmation" "'confirmation" "type:" "message-box" "result" "or" "exception-reason" "format" "text" "let" "err" "ask-continue" "define" "continue-handler" "continue-handler:" "continue-text" "continue-text:" "thunk" "context")}
      {Lisp-Entry "with-catched-exception" definition #f 909 20 909 42 ("throw-cancel" "wrap-exception" "if" "obj" "lambda" "with-exception-filter" "no" "yes" "case" "no:" "yes:" "question" "'question" "type:" "message-box" "result" "exception-reason" "text" "let" "err" "ask" "define" "thunk" "filter")}
      {Lisp-Entry "with-safe-explore" definition #f 930 20 930 37 ("throw-cancel" "no" "'no" "neq?" "selection:" "get-application" "edit-document" "get-range" "range" "get-source" "source" "yes" "'yes" "eq?" "cancel" "'cancel" "ignore" "cancel:" "no:" "yes:" "confirmation" "'confirmation" "type:" "exception-reason" "message-box" "case" "result" "when" "Explore-Error" "is?" "object?" "and" "exc" "let" "obj" "lambda" "with-exception-filter" "ask" "'ask" "action" "action:" "proc")}
      {Lisp-Entry "request-string" definition #f 957 20 957 34 ("empty-string?" "process-modal" "string" "let" "acquire-focus" "select-all" "->string" "if" "set-string-content" "set-prefix" "set-validator" "set-unicity-domain" "set-accepts-empty?" "or" "get-player" "set-title" "'text" "locate" "text" "get-guest" "view" "let*" "new-dialog" "host" "process?" "receive" "validator" "validator:" "unicity-domain" "unicity-domain:" "accepts-empty?" "accepts-empty?:" "initial-value" "initial-value:" "prefix" "prefix:" "title" "title:" "String-Request" "class" "class:")}
      {Lisp-Entry "request-name" definition #f 975 20 975 32 ("string->symbol" "not" "if" "prefix:" "title:" "request-string" "apply" "string" "or" "let*" "others" "prefix" "title" "bind-keywords" "rest")}
      {Lisp-Entry "request-text" definition #f 985 20 985 32 ("empty-string?" "if" "process-modal" "string" "let" "acquire-focus" "select-all" "set-string-content" "or" "set-title" "'text" "locate" "text" "get-guest" "view" "let*" "new-dialog" "dialog" "process?" "receive" "request-text" "'request-text" "unimplemented" "initial-text" "initial-text:" "title" "title:" "Text-Request" "class" "class:")}
      {Lisp-Entry "request-date" definition #f 1001 20 1001 32 ("Date" "parse-string" "empty-string?" "process-modal" "string" "let" "acquire-focus" "select-all" "present" "if" "set-string-content" "set-prefix" "or" "set-title" "'text" "locate" "text" "get-guest" "view" "let*" "new-dialog" "dialog" "process?" "receive" "request-date" "'request-date" "unimplemented" "initial-date" "initial-date:" "prefix" "prefix:" "title" "title:" "Date-Request" "class" "class:")}
      {Lisp-Entry "request-list" definition #f 1018 20 1018 32 ("process-modal" "set-selected" "set-content" "set-present" "set-invite" "set-title" "when" "get-player" "player" "get-guest" "view" "let" "new-dialog" "host" "process?" "receive" "selected" "selected:" "present" "present:" "invite" "invite:" "title" "title:" "List-Request" "class" "class:" "content")}
      {Lisp-Entry "get-output-log" definition #f 1038 20 1038 34 ("get-application" "get-output-log")}
      {Lisp-Entry "get-active-results" definition #f 1042 20 1042 38 ("get-application" "get-active-results")}
      {Lisp-Entry "all-windows" definition #f 1046 20 1046 31 ("get-windows" "cons" "if" "get-toplevel" "toplevel" "let")}
      {Lisp-Entry "select-docked" definition #f 1053 20 1053 33 ("get-workspace" "apply-preferences" "find-docked" "guest" "let" "focus-host" "Splitter-View" "if" "ensure-unzoomed" "set-selection" "Pad-View" "is?" "get-parent" "parent" "get-host" "host" "let*" "when" "view" "select-view" "define" "focus?" "focus?:" "home" "'home" "workspace" "workspace:" "name" "name:" "class")}
      {Lisp-Entry "find-docked" definition #f 1073 20 1073 31 ("continuation-return" "is?" "when" "view" "for-each-docked" "return" "lambda" "continuation-capture" "class")}
      {Lisp-Entry "for-each-docked" definition #f 1083 20 1083 35 ("all-windows" "for-each-docked" "window" "lambda" "for-each" "proc")}
      {Lisp-Entry "for-each-splitter" definition #f 1090 20 1090 37 ("set!" "is?" "while" "Splitter-View" "splitter-class" "get-parent" "splitter" "let" "proc" "view")}
      {Lisp-Entry "ensure-unzoomed" definition #f 1099 20 1099 35 ("unzoom" "get-effective-target" "neq?" "zoom" "'zoom" "get-state" "eq?" "and" "when" "splitter" "lambda" "for-each-splitter" "view")}
      {Lisp-Entry "current-frame" definition #f 1107 20 1107 33 ("first-frame")}
      {Lisp-Entry "current-document" definition #f 1111 20 1111 36 ("get-guest" "Frame-Host" "is?" "when" "current-frame" "frame" "let")}
      {Lisp-Entry "current-guest" definition #f 1117 20 1117 33 ("get-guest" "when" "get-focused-host" "host" "let")}
      {Lisp-Entry "focused-host" definition #f 1123 20 1123 32 ("get-host" "when" "get-focus" "focus" "let")}
      {Lisp-Entry "focused-guest" definition #f 1129 20 1129 33 ("get-guest" "when" "get-focus" "focus" "let")}
      {Lisp-Entry "get-focus" definition #f 1140 20 1140 29 ("get-view-focus" "when" "get-focused-window" "player" "let")}
      {Lisp-Entry "set-focus" definition #f 1146 20 1146 29 ("set-window-focus" "bring-to-front" "set-view-focus" "focus-view" "unfocus-view" "begin" "eq?" "if" "assert" "get-player" "new-player" "get-focused-window" "old-player" "ensure-focusable" "neq?" "when" "get-focus" "old-focus" "let" "new-focus")}
      {Lisp-Entry "set-default-focus" definition #f 1162 20 1162 37 ("get-toplevel" "get-root" "acquire-focus")}
      {Lisp-Entry "get-focus-actions" definition #f 1166 20 1166 37 ("focus-actions" "if" "get-surrogate" "surrogate" "let" "view")}
      {Lisp-Entry "refresh-focus-actions" definition #f 1173 20 1173 41 ("get-focus-actions" "get-application" "set-focus-actions" "get-focus" "eq?" "when" "view")}
      {Lisp-Entry "*debug-colors*" definition #f 1183 12 1183 26 ("Ochre" "Dark-Purple" "Dark-Blue" "Dark-Green" "Dark-Yellow" "Dark-Orange" "Dark-Red" "Purple" "Blue" "Green" "Yellow" "Orange" "Red" "Light-Purple" "Light-Blue" "Light-Green" "Light-Yellow" "Light-Orange" "Light-Red" "name:" "Color")}
      {Lisp-Entry "*nb-debug-colors*" definition #f 1204 12 1204 29 ("*debug-colors*" "length")}
      {Lisp-Entry "*current-debug-color*" definition #f 1207 12 1207 33 ("0")}
      {Lisp-Entry "cycle-debug-color!" definition #f 1211 20 1211 38 ("*nb-debug-colors*" "1" "+" "modulo" "set!" "*current-debug-color*" "*debug-colors*" "element" "prog1")}
      {Lisp-Entry "cleanup-mouse-processing" definition #f 1221 21 1221 45 ("complete-drag-up" "complete-drag-and-drop" "release-captured-view")}
      {Lisp-Entry "complete-drag-and-drop" definition #f 1227 21 1227 43 ("get-source" "get-view" "drag-end" "Current-Drag-Drop" "when")}
      {Lisp-Entry "complete-drag-up" definition #f 1232 21 1232 37 ("process-drag-up" "mouse-down-view" "mouse-position" "pos" "let" "mouse-down?" "when" "dragging?")}}})
"_window"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "_window.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window" module #f 37 8 37 22 ("jazz")
      {Lisp-Entry "desktop" definition #f 61 12 61 19 ()}
      {Lisp-Entry "Desktop-DC" definition #f 64 12 64 22 ()}
      {Lisp-Entry "desktop-dc" definition #f 67 20 67 30 ("0" "Dimension" "Memory-Surface" "new" "set!" "Desktop-DC" "unless")}
      {Lisp-Entry "get-desktop" definition #f 73 20 73 31 ("Desktop" "new" "set!" "desktop" "unless")}
      {Lisp-Entry "select-foreground-window" definition #f 84 20 84 44 ("platform-select-foreground-window" "assert" "handle")}
      {Lisp-Entry "get-window-handle-title" definition #f 89 20 89 43 ("platform-get-window-handle-title" "assert" "handle")}
      {Lisp-Entry "process-events" definition #f 99 20 99 34 ("get-events-single-threaded?" "0" "=" "if" "format" "get-level" "level" "current-loop" "thread-stop-loop" "thread-read" "unwind-protect" "thread-start!" "thread-start-loop" "process-messages-multi-threaded" "pump" "process-events-multi-threaded" "get-exception-debugger" "with-exception-debugger" "eof-object?" "not" "when" "thread-read-non-blocking" "thunk" "process-messages-single-threaded" "Cancel-Signal" "catch" "lambda" "present-event-loop-restart" "resume-loop" "'resume-loop" "with-restart-catcher" "loop" "let" "proper-tail-calls" "declare" "process-events-single-threaded" "define")}
      {Lisp-Entry "locked-update?" definition #f 153 12 153 26 ()}
      {Lisp-Entry "with-locked-update" definition #f 157 20 157 38 ("update-window" "open?" "when" "set!" "get-handle" "platform-lock-window-update" "begin" "unwind-protect" "get-toplevel" "toplevel" "let" "locked-update?" "if" "proc")}
      {Lisp-Entry "Key-Hook" definition #f 178 20 178 28 ()}
      {Lisp-Entry "get-key-hook" definition #f 182 20 182 32 ("Key-Hook")}
      {Lisp-Entry "set-key-hook" definition #f 186 20 186 32 ("Key-Hook" "set!" "hook")}
      {Lisp-Entry "Overlappeds" definition #f 195 12 195 23 ()}
      {Lisp-Entry "get-overlappeds" definition #f 199 20 199 35 ("Overlappeds")}
      {Lisp-Entry "set-overlappeds" definition #f 202 20 202 35 ("Overlappeds" "set!" "lst")}
      {Lisp-Entry "register-overlapped" definition #f 206 20 206 39 ("get-overlappeds" "cons" "set-overlappeds" "overlapped")}
      {Lisp-Entry "unregister-overlapped" definition #f 209 20 209 41 ("get-overlappeds" "remove!" "set-overlappeds" "overlapped")}
      {Lisp-Entry "palette-parent" definition #f 220 25 220 39 ("get-toplevel")}
      {Lisp-Entry "palette-parent" definition #f 223 25 223 39 ("get-desktop")}
      {Lisp-Entry "Passing-Through?" definition #f 232 12 232 28 ()}
      {Lisp-Entry "get-passing-through?" definition #f 236 20 236 40 ("Passing-Through?")}
      {Lisp-Entry "set-passing-through?" definition #f 239 20 239 40 ("Passing-Through?" "set!" "flag")}
      {Lisp-Entry "Popups" definition #f 243 12 243 18 ()}
      {Lisp-Entry "get-popups" definition #f 247 20 247 30 ("Popups")}
      {Lisp-Entry "set-popups" definition #f 250 20 250 30 ("Popups" "set!" "lst")}
      {Lisp-Entry "close-all-popups" definition #f 254 20 254 36 ("Popups" "close-popup" "for-each")}
      {Lisp-Entry "close-popup" definition #f 258 20 258 31 ("remove!" "Popups" "set!" "close" "popup")}
      {Lisp-Entry "Frames" definition #f 268 12 268 18 ()}
      {Lisp-Entry "get-frames" definition #f 272 20 272 30 ("Frames")}
      {Lisp-Entry "set-frames" definition #f 275 20 275 30 ("Frames" "set!" "lst")}
      {Lisp-Entry "register-frame" definition #f 279 20 279 34 ("get-frames" "cons" "set-frames" "frame")}
      {Lisp-Entry "unregister-frame" definition #f 282 20 282 36 ("get-frames" "remove!" "set-frames" "frame")}
      {Lisp-Entry "bring-frame-to-front" definition #f 286 20 286 40 ("get-frames" "remove!" "cons" "set-frames" "frame")}
      {Lisp-Entry "send-frame-to-back" definition #f 289 20 289 38 ("list" "get-frames" "remove!" "append" "set-frames" "frame")}
      {Lisp-Entry "process-windows" definition #f 298 20 298 35 ("get-overlappeds" "get-visible?" "or" "overlapped" "lambda" "collect-if" "include-invisibles?" "include-invisibles?:")}
      {Lisp-Entry "get-window-focus" definition #f 309 20 309 36 ("get-window" "when" "platform-get-focus" "focus" "let")}
      {Lisp-Entry "set-window-focus" definition #f 315 20 315 36 ("get-handle" "and" "platform-set-focus" "get-focused-window" "neq?" "when" "window")}
      {Lisp-Entry "*focused-window*" definition #f 323 12 323 28 ()}
      {Lisp-Entry "get-focused-window" definition #f 327 20 327 38 ("*focused-window*")}
      {Lisp-Entry "set-focused-window" definition #f 330 20 330 38 ("*focused-window*" "set!" "window")}
      {Lisp-Entry "debug-flicker" definition #f 339 19 339 32 ("make-parameter")}}})
"_workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "workspace" "_workspace.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.workspace" module #f 37 8 37 25 ("jazz")
      {Lisp-Entry "Selected-Workspace" definition #f 44 12 44 30 ()}
      {Lisp-Entry "workspace-activation?" definition #f 48 19 48 40 ("make-parameter")}
      {Lisp-Entry "get-workspace-preferences" definition #f 52 20 52 45 ("get-toplevel" "get-workspace-preferences")}
      {Lisp-Entry "set-workspace-preferences" definition #f 55 20 55 45 ("get-toplevel" "set-workspace-preferences" "preferences")}
      {Lisp-Entry "get-workspaces-preferences" definition #f 59 20 59 46 ("get-reference" "error" "when" "not" "if" "get-application" "get-workspaces-designer" "designer" "let" "error?" "error?:")}
      {Lisp-Entry "get-workspaces" definition #f 67 20 67 34 ("get-workspaces-preferences" "get-children")}
      {Lisp-Entry "find-workspace" definition #f 71 20 71 34 ("get-workspaces-preferences" "find-component" "name")}
      {Lisp-Entry "get-workspace" definition #f 75 20 75 33 ("error" "find-workspace" "or" "name")}
      {Lisp-Entry "selected-workspace" definition #f 80 20 80 38 ("Selected-Workspace")}
      {Lisp-Entry "set-selected-workspace" definition #f 83 20 83 42 ("Selected-Workspace" "set!" "workspace")}
      {Lisp-Entry "select-workspace" definition #f 87 20 87 36 ("get-workspace" "apply-preferences" "name")}
      {Lisp-Entry "select-current-workspace" definition #f 91 20 91 44 ("get-workspace-preferences" "apply-preferences")}
      {Lisp-Entry "select-next-workspace" definition #f 95 20 95 41 ("apply-preferences" "eq?" "unless" "length" "1" "+" "modulo" "element" "next" "find" "rank" "get-workspaces" "Workspace-Preferences" "collect-type" "workspaces" "get-workspace-preferences" "current" "let*")}
      {Lisp-Entry "select-previous-workspace" definition #f 104 20 104 45 ("apply-preferences" "eq?" "unless" "element" "previous" "1" "length" "-" "0" "=" "if" "previous-rank" "find" "rank" "get-workspaces" "Workspace-Preferences" "collect-type" "workspaces" "get-workspace-preferences" "current" "let*")}}})
"aliases"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "aliases.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.aliases" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Aliases-Preferences" class #f 50 20 50 39 ("title:" "Preferences")
        {Lisp-Entry "get-class-descriptor" method #f 62 25 62 45 ("Aliases-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 71 11 71 17 ()
        {Lisp-Entry "Aliases-Preferences-Descriptor" class #f 74 7 74 37 ("can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")
          {Lisp-Entry "component-get-addable-classes" method #f 82 20 82 49 ("Alias-Configuration" "list" "component")}
          {Lisp-Entry "component-get-addable-details" method #f 87 20 87 49 ("300" "directory" "150" "alias" "component")}}
        {Lisp-Entry "Alias-Configuration" class #f 96 20 96 39 ("Image-Resource" "icon:" "initialize" "Preferences")
          {Lisp-Entry "alias" property #f 99 12 99 17 ()}
          {Lisp-Entry "get-alias" accessor #f 99 46 99 54 ()}
          {Lisp-Entry "set-alias" accessor #f 99 46 99 54 ()}
          {Lisp-Entry "directory" property #f 100 12 100 21 ()}
          {Lisp-Entry "get-directory" accessor #f 100 46 100 54 ()}
          {Lisp-Entry "set-directory" accessor #f 100 46 100 54 ()}
          {Lisp-Entry "get-domain" method #f 112 25 112 35 ("nextmethod" "else" "field-name" "case" "property")}
          {Lisp-Entry "get-class-descriptor" method #f 122 25 122 45 ("Alias-Configuration-Descriptor" "new")}}
        {Lisp-Entry "design" submodule #f 131 11 131 17 ()
          {Lisp-Entry "Alias-Configuration-Descriptor" class #f 138 7 138 37 ("domain" "name:" "directory" "alias" "categorized:" "title:" "Preferences-Descriptor")
            {Lisp-Entry "component-presentation-property?" method #f 149 20 149 52 ("alias" "field-name" "memq?" "property" "component")}
            {Lisp-Entry "component-get-presentation" method #f 153 20 153 46 ("get-alias" "or" "component")}
            {Lisp-Entry "component-set-presentation" method #f 158 20 158 46 ("string->symbol" ":alias" "set-property" "presentation" "designer" "component")}}}}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "autoload.jazz"} 1289506008
    {Lisp-Entry "jazz.ui.autoload" module #f 37 18 37 34 ("jazz")}})
"carbon"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "clipboard" "platform" "carbon.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.clipboard.platform.carbon" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "initialize-clipboard" definition #f 48 21 48 41 ()}
      {Lisp-Entry "internal-clipboard" definition #f 52 12 52 30 ()}
      {Lisp-Entry "get-clipboard-text" definition #f 55 20 55 38 ("internal-clipboard" "format" "format:")}
      {Lisp-Entry "set-clipboard-text" definition #f 59 20 59 38 ("internal-clipboard" "set!" "format" "format:" "text")}
      {Lisp-Entry "register-clipboard-format" definition #f 63 33 63 58 ("Formats" "table-set!" "RegisterClipboardFormat" "id" "let" "format" "name")}
      {Lisp-Entry "clipboard-format-available?" definition #f 69 33 69 60 ("available-clipboard-formats" "member?" "error" "Formats" "table-ref" "or" "get-format" "define" "format")}
      {Lisp-Entry "available-clipboard-formats" definition #f 79 33 79 60 ("get-output" "put" "/=" "when" "EnumClipboardFormats" "format" "0" "previous" "iter" "List-Factory" "new" "formats" "let" "lambda" "with-opened-clipboard")}
      {Lisp-Entry "mouse-select-copy" definition #f 98 21 98 38 ("proc")}
      {Lisp-Entry "middle-mouse-paste" definition #f 102 21 102 39 ("proc")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "platform" "carbon.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.platform.carbon" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "choose-file" definition #f 53 20 53 31 ("host-title:" "File-Request" "get-modal" "anchors" "anchors:" "multiple-selection?" "multiple-selection?:" "extensions" "extensions:" "filenames" "filenames:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-new-file" definition #f 73 20 73 35 ("host-title:" "NewFile-Request" "get-modal" "anchors" "anchors:" "default-extension" "default-extension:" "initial-filename" "initial-filename:" "extensions" "extensions:" "filenames" "filenames:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-directory" definition #f 95 20 95 36 ("host-title:" "Directory-Request" "get-modal" "anchors" "anchors:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-color" definition #f 109 20 109 32 ("choose-color" "'choose-color" "unimplemented" "initial-color" "initial-color:")}
      {Lisp-Entry "choose-font" definition #f 118 20 118 31 ("choose-font" "'choose-font" "unimplemented" "initial-color" "initial-color:" "initial-font" "initial-font:")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "platform" "carbon.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.platform.carbon" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "platform-print-document" definition #f 49 21 49 44 ("view")}
      {Lisp-Entry "platform-print-picture" definition #f 52 21 52 43 ("view")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "resizer" "platform" "carbon.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.resizer.platform.carbon" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Part-Cursor" constant #f 43 10 43 21 ()}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "platform" "carbon.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.platform.carbon" module #f 37 18 37 48 ("process-control-message" "set-process-control-message" "process-window-message" "set-process-window-message" "jazz")
      {Lisp-Entry "unprocessed" definition #f 51 19 51 30 ("unprocessed")}
      {Lisp-Entry "processed" definition #f 52 19 52 28 ("processed")}
      {Lisp-Entry "desktop" definition #f 55 12 55 19 ()}
      {Lisp-Entry "processed-result" definition #f 58 13 58 29 ("cadr" "0" "cdr" "null?" "processed" "'processed" "car" "eq?" "pair?" "and" "if" "return")}
      {Lisp-Entry "is-window-HIView?" definition #f 66 13 66 30 ("Desktop" "Toplevel" "is?" "or" "not" "window")}
      {Lisp-Entry "Windows-Table" definition #f 76 19 76 32 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "Window-Title-Table" definition #f 80 19 80 37 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "get-window" definition #f 84 27 84 37 ("Windows-Table" "table-ref" "foreign-address" "foreign?" "if" "let" "hwnd")}
      {Lisp-Entry "set-window" definition #f 89 27 89 37 ("foreign-address" "Windows-Table" "table-set!" "window" "hwnd")}
      {Lisp-Entry "platform-get-window-handle-title" definition #f 93 27 93 59 ("Window-Title-Table" "table-ref" "handle")}
      {Lisp-Entry "set-window-title" definition #f 97 27 97 43 ("Window-Title-Table" "table-set!" "title" "handle")}
      {Lisp-Entry "window-parent" definition #f 101 21 101 34 ("get-handle" "if" "get-parent" "parent" "let" "window")}
      {Lisp-Entry "window-default-parent" definition #f 108 21 108 42 ("else" "get-toplevel" "Popup" "typecase" "window")}
      {Lisp-Entry "prepare-handle" definition #f 114 21 114 35 ("InstallControlEventHandler" "HIViewGetContent" "handle" "create-window-handle" "window-handle" "let*" "create-HIView-handle" "is-window-HIView?" "if" "rest" "window")}
      {Lisp-Entry "create-HIView-handle" definition #f 123 13 123 33 ("InstallControlEventHandler" "500.0" "0.0" "HIViewSetFrame" "0" "kHIViewFeatureAllowsSubviews" "HIViewChangeFeatures" "HIViewAddSubview" "HIViewCreate" "new-handle" "window-parent" "parent" "let*" "rest" "window")}
      {Lisp-Entry "create-window-handle" definition #f 133 13 133 33 ("fxfloor" "kWindowStructureRgn" "WindowSetBounds" "HIWindowGetAvailablePositioningBounds" "h" "w" "y" "x" "receive" "desktop" "set!" "Desktop" "is?" "when" "InstallWindowEventHandler" "500" "0" "kWindowCompositingAttribute" "kWindowLiveResizeAttribute" "kWindowStandardHandlerAttribute" "kWindowStandardDocumentAttributes" "bitwise-ior" "kDocumentWindowClass" "CreateNewWindow" "handle" "let" "rest" "window")}
      {Lisp-Entry "destroy-window" definition #f 151 21 151 35 ("HIViewGetWindow" "DestroyWindow" "DestroyView" "is-window-HIView?" "if" "focus-lose" "platform-get-focus" "=" "when" "get-window" "window" "let" "handle")}
      {Lisp-Entry "dispatch-message" definition #f 161 13 161 29 ("process-window-message" "msg" "window")}
      {Lisp-Entry "setup-events" definition #f 170 21 170 33 ()}
      {Lisp-Entry "process-messages-single-threaded" definition #f 179 21 179 53 ("RunApplicationEventLoop" "thunk")}
      {Lisp-Entry "process-messages-multi-threaded" definition #f 183 21 183 52 ("message-pump" "'message-pump" "new-thread" "RunApplicationEventLoop" "process" "define")}
      {Lisp-Entry "show-window" definition #f 190 21 190 32 ("SelectWindow" "HIViewGetWindow" "ShowWindow" "HIViewSetVisible" "is-window-HIView?" "Desktop" "get-window" "is?" "if" "handle")}
      {Lisp-Entry "show-maximized" definition #f 200 21 200 35 ("show-window" "handle")}
      {Lisp-Entry "show-restored" definition #f 204 21 204 34 ("show-window" "handle")}
      {Lisp-Entry "hide-window" definition #f 208 21 208 32 ("HIViewGetWindow" "HideWindow" "HIViewSetVisible" "get-window" "is-window-HIView?" "if" "handle")}
      {Lisp-Entry "bring-window-to-top" definition #f 214 21 214 40 ("platform-bring-window-to-front" "handle")}
      {Lisp-Entry "window-state" definition #f 218 21 218 33 ("restored" "'restored" "handle")}
      {Lisp-Entry "set-window-placement" definition #f 222 21 222 41 ("platform-set-window-size" "platform-set-position" "size" "position" "handle")}
      {Lisp-Entry "minimize-window" definition #f 227 21 227 36 ("minimize-window" "'minimize-window" "unimplemented" "handle")}
      {Lisp-Entry "maximize-window" definition #f 231 21 231 36 ("maximize-window" "'maximize-window" "unimplemented" "handle")}
      {Lisp-Entry "restore-window" definition #f 235 21 235 35 ("restore-window" "'restore-window" "unimplemented" "handle")}
      {Lisp-Entry "platform-erase-background" definition #f 239 21 239 46 ("platform-erase-background" "'platform-erase-background" "unimplemented" "handle")}
      {Lisp-Entry "convert-key" definition #f 243 13 243 24 ("else" "Down" "'Down" "Top" "'Top" "Right" "'Right" "Left" "'Left" "Tab" "'Tab" "Space" "'Space" "Return" "'Return" "Backspace" "'Backspace" "Escape" "'Escape" "F8" "'F8" "100" "F7" "'F7" "98" "F6" "'F6" "97" "F5" "'F5" "96" "F4" "'F4" "118" "F3" "'F3" "99" "F2" "'F2" "120" "F1" "'F1" "122" "case" "keycode" "char")}
      {Lisp-Entry "current-mouse-x" definition #f 266 12 266 27 ("0")}
      {Lisp-Entry "current-mouse-y" definition #f 267 12 267 27 ("0")}
      {Lisp-Entry "process-window-message" definition #f 270 13 270 35 ("get-current-focus" "call-key-press" "char?" "and" "Space" "'Space" "eq?" "Shortcut" "new" "get-application" "dispatch-shortcut" "not" ":alt" "optionKeyBit" ":control" "controlKeyBit" ":shift" "cons" "shiftKeyBit" "bit-set?" "when" "mods" "convert-key" "eventKeyUnicode" "unicode" "unmodifiedKey" "unmodified" "eventKeyMods" "state" "eventKeyboardType" "keyboard" "eventKeyCode" "keycode" "kEventRawKeyDown" "kEventClassKeyboard" "mouse-down" "kEventMouseDown" "mouse-up" "kEventMouseUp" "inexact->exact" "mouse-move" "HIViewGetRoot" "convertCoordinates" "if" "get-window" "win" "HIViewForPoint" "view" "let*" "current-mouse-y" "current-mouse-x" "set!" "convertPointToGlobal" "glo-y" "glo-x" "eventMouseLocation" "y" "x" "receive" "eventWindowRef" "window" "kEventMouseMoved" "kEventClassMouse" "eventNotHandledErr" "else" "kEventWindowBoundsChanged" "noErr" "QuitApplicationEventLoop" "kEventWindowClose" "kEventClassWindow" "=" "cond" "GetEventKind" "type" "GetEventClass" "class" "let" "userdata" "event" "handler")}
      {Lisp-Entry "process-control-message" definition #f 343 13 343 36 ("eventNotHandledErr" "else" "call-position-change" "inexact->exact" "restored" "'restored" "call-size-change" "show-window" "Docked-Host" "is?" "if" "HIViewGetBounds" "height" "width" "top" "left" "receive" "kEventControlBoundsChanged" "noErr" "eventControlRgn" "Region" "new" "get-window" "paint" "EventCGContext" "context" "kEventControlDraw" "=" "cond" "void*->HIViewRef" "handle" "GetEventKind" "type" "let" "userdata" "event" "handler")}
      {Lisp-Entry "get-toplevel-hwnd" definition #f 367 13 367 30 ("get-handle" "when" "get-toplevel" "toplevel" "let")}
      {Lisp-Entry "set-capture" definition #f 378 13 378 24 ("handle")}
      {Lisp-Entry "unset-capture" definition #f 382 20 382 33 ()}
      {Lisp-Entry "with-platform-painting" definition #f 386 21 386 43 ("close" "unwind-protect" "get-height" "get-width" "cairo_quartz_surface_create_for_cg_context" "Surface" "new" "surface" "car" "context" "let*" "proc" "platform-data" "window")}
      {Lisp-Entry "get-window-surface" definition #f 394 20 394 38 ("get-height" "get-width" "get-handle" "cairo_xlib_surface_create" "XDefaultVisual" "visual" "x11-default-display" "XDefaultScreen" "screen-no" "let*" "get-window-surface" "'get-window-surface" "unimplemented" "window")}
      {Lisp-Entry "set-alpha-blending" definition #f 402 13 402 31 ("RDW_INVALIDATE" "RDW_ERASE" "bitwise-ior" "NULL" "RedrawWindow" "LWA_ALPHA" "0" "SetLayeredWindowAttributes" "set-layered?" "n" "handle")}
      {Lisp-Entry "track-mouse-leave" definition #f 415 20 415 37 ("handle")}
      {Lisp-Entry "cancel-mouse-leave-tracking" definition #f 419 20 419 47 ("handle")}
      {Lisp-Entry "platform-set-parent" definition #f 428 21 428 40 ("get-handle" "HIViewAddSubview" "HIViewRemoveFromSuperview" "HIViewGetSuperview" "when" "parent" "handle")}
      {Lisp-Entry "platform-get-first-child" definition #f 434 21 434 45 ("XGetChildHandle" "0" "=" "if" "x11-default-display" "XNumberOfChildren" "num-of-children" "let" "platform-get-first-child" "'platform-get-first-child" "unimplemented" "handle")}
      {Lisp-Entry "platform-get-first-visible-child" definition #f 443 21 443 53 ("1" "+" "platform-is-window-visible?" "XGetChildHandle" "child-handle" "n" "loop" "0" "=" "if" "x11-default-display" "XNumberOfChildren" "num-of-children" "let" "platform-get-first-visible-child" "'platform-get-first-visible-child" "unimplemented" "handle")}
      {Lisp-Entry "platform-is-window-visible?" definition #f 458 21 458 48 ("IsViewable" "XWindowAttributes-map_state-ref" "=" "x11-default-display" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "let" "platform-is-window-visible?" "'platform-is-window-visible?" "unimplemented" "handle")}
      {Lisp-Entry "acquire-point" definition #f 466 20 466 33 ("inexact->exact" "Point" "new" "exact->inexact" "convertCoordinates" "receive" "get-v" "y" "get-h" "x" "let" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "acquire-rect" definition #f 473 20 473 32 ("RECT->rect" "2" "RECT->POINTS" "MapWindowPoints" "rect->RECT" "acquired" "let" "acquire-rect" "'acquire-rect" "unimplemented" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "platform-translate-to-root" definition #f 481 21 481 47 ("platform-translate-to-root" "'platform-translate-to-root" "unimplemented" "pt" "handle")}
      {Lisp-Entry "platform-get-position-in-root" definition #f 485 21 485 50 ("+" "inexact->exact" "Point" "new" "kWindowContentRgn" "WindowGetBounds" "h" "w" "t" "l" "0.0" "convertCoordinates" "y" "x" "receive" "HIViewGetRoot" "root" "HIViewGetWindow" "window" "let*" "handle")}
      {Lisp-Entry "platform-get-position" definition #f 492 21 492 42 ("inexact->exact" "Point" "new" "platform-get-system-rect" "height" "width" "top" "left" "receive" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-position" definition #f 497 21 497 42 ("kWindowContentRgn" "HIViewGetWindow" "WindowSetBounds" "exact->inexact" "HIViewSetFrame" "get-window" "is-window-HIView?" "if" "get-v" "get-h" "let" "platform-get-system-rect" "height" "width" "top" "left" "receive" "pos" "handle")}
      {Lisp-Entry "platform-get-size" definition #f 506 21 506 38 ("inexact->exact" "Dimension" "new" "platform-get-system-rect" "height" "width" "top" "left" "receive" "handle")}
      {Lisp-Entry "platform-get-window-size" definition #f 511 21 511 45 ("platform-get-size" "handle")}
      {Lisp-Entry "platform-get-system-rect" definition #f 515 21 515 45 ("kWindowContentRgn" "HIViewGetWindow" "WindowGetBounds" "else" "HIViewGetFrame" "get-window" "is-window-HIView?" "cond" "handle")}
      {Lisp-Entry "platform-set-window-size" definition #f 522 21 522 45 ("kWindowContentRgn" "HIViewGetWindow" "WindowSetBounds" "exact->inexact" "HIViewSetFrame" "get-window" "is-window-HIView?" "if" "get-height" "get-width" "let" "platform-get-system-rect" "height" "width" "top" "left" "receive" "size" "handle")}
      {Lisp-Entry "platform-set-position-size" definition #f 531 21 531 47 ("get-height" "get-width" "get-v" "get-h" "x11-default-display" "XMoveResizeWindow" "platform-set-position-size" "'platform-set-position-size" "unimplemented" "size" "pos" "handle")}
      {Lisp-Entry "platform-get-rect" definition #f 537 21 537 38 ("+" "Rect" "new" "platform-get-system-rect" "height" "width" "top" "left" "receive" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-rect" definition #f 542 21 542 38 ("SWP_NOACTIVATE" "SWP_NOZORDER" "bitwise-ior" "rect-height" "rect-width" "get-top" "get-left" "NULL" "SetWindowPos" "platform-set-rect" "'platform-set-rect" "unimplemented" "rect" "handle")}
      {Lisp-Entry "platform-get-bounds" definition #f 548 21 548 40 ("RECT-free" "RECT-bottom-ref" "RECT-right-ref" "RECT-top-ref" "RECT-left-ref" "Rect" "new" "prog1" "2" "NULL" "MapWindowPoints" "GetWindowRect" "RECT-make" "rect" "let" "platform-get-bounds" "'platform-get-bounds" "unimplemented" "handle")}
      {Lisp-Entry "platform-mouse-position" definition #f 558 21 558 44 ("current-mouse-y" "current-mouse-x" "Point" "new")}
      {Lisp-Entry "platform-window-from-point" definition #f 562 21 562 47 ("POINT-free" "WindowFromPoint" "prog1" "get-v" "POINT-y-set!" "get-h" "POINT-x-set!" "POINT-make" "pt" "let" "point")}
      {Lisp-Entry "platform-child-window-from-point" definition #f 572 21 572 53 ("POINT-free" "CWP_SKIPTRANSPARENT" "CWP_SKIPDISABLED" "CWP_SKIPINVISIBLE" "bitwise-ior" "ChildWindowFromPointEx" "prog1" "get-v" "POINT-y-set!" "get-h" "POINT-x-set!" "POINT-make" "pt" "let" "point" "handle")}
      {Lisp-Entry "platform-move-window" definition #f 582 21 582 41 ("MoveWindow" "platform-move-window" "'platform-move-window" "unimplemented" "cy" "cx" "y" "x" "handle")}
      {Lisp-Entry "platform-window-enabled?" definition #f 588 21 588 45 ("IsWindowEnabled" "platform-window-enabled?" "'platform-window-enabled?" "unimplemented" "handle")}
      {Lisp-Entry "platform-enable-window" definition #f 594 21 594 43 ("platform-enable-window" "'platform-enable-window" "warn-unimplemented" "handle")}
      {Lisp-Entry "platform-disable-window" definition #f 598 21 598 44 ("platform-disable-window" "'platform-disable-window" "warn-unimplemented" "handle")}
      {Lisp-Entry "platform-get-client-rect" definition #f 602 21 602 45 ("get-height" "get-width" "0" "Rect" "new" "platform-get-size" "size" "let" "handle")}
      {Lisp-Entry "platform-scroll-window" definition #f 607 21 607 43 ("platform-update-window" "platform-invalidate-rect" "clip-rect" "rect" "dv" "dh" "handle")}
      {Lisp-Entry "platform-invalidate-rect" definition #f 613 21 613 45 ("-" "HIViewSetNeedsDisplayInRect" "0" "=" "and" "unless" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "exact->inexact" "left" "let" "if" "rect" "handle")}
      {Lisp-Entry "platform-invalidate-region" definition #f 624 21 624 47 ("get-rectangles" "platform-invalidate-rect" "rect" "lambda" "for-each" "region" "handle")}
      {Lisp-Entry "platform-invalidate-window" definition #f 630 21 630 47 ("platform-invalidate-rect" "handle")}
      {Lisp-Entry "platform-redraw-window" definition #f 634 21 634 43 ("platform-update-window" "HIViewGetWindow" "HIWindowFlush" "HIViewRender" "platform-invalidate-region" "platform-invalidate-rect" "if" "region" "rect" "handle")}
      {Lisp-Entry "platform-get-update-rect" definition #f 644 21 644 45 ("RECT-free" "RECT->rect" "prog1" "GetUpdateRect" "RECT-make" "rect" "let" "platform-get-update-rect" "'platform-get-update-rect" "unimplemented" "handle")}
      {Lisp-Entry "platform-get-update-region" definition #f 653 21 653 47 ("get-handle" "GetUpdateRgn" "Region" "new" "region" "let" "platform-get-update-region" "'platform-get-update-region" "unimplemented" "handle")}
      {Lisp-Entry "platform-redraw-view-only" definition #f 661 21 661 46 ("platform-invalidate-rect" "get-height" "get-width" "0" "Rect" "new" "rct" "platform-get-size" "size" "let*" "handle" "view")}
      {Lisp-Entry "platform-update-window" definition #f 667 21 667 43 ("platform-invalidate-rect" "get-height" "get-width" "0" "Rect" "new" "rct" "platform-get-size" "size" "let*" "when" "HIViewGetWindow" "HIWindowFlush" "HIViewRender" "HIViewSetNeedsDisplay" "handle")}
      {Lisp-Entry "platform-show-noactivate" definition #f 678 21 678 45 ("show-window" "handle")}
      {Lisp-Entry "platform-hide-noactivate" definition #f 682 21 682 45 ("hide-window" "handle")}
      {Lisp-Entry "platform-bring-window-to-front" definition #f 686 21 686 51 ("HIViewGetWindow" "SelectWindow" "kHIViewZOrderAbove" "HIViewSetZOrder" "get-window" "is-window-HIView?" "if" "handle")}
      {Lisp-Entry "platform-send-window-to-back" definition #f 692 21 692 49 ("HIViewGetWindow" "SendBehind" "kHIViewZOrderBelow" "HIViewSetZOrder" "get-window" "is-window-HIView?" "if" "handle")}
      {Lisp-Entry "platform-select-foreground-window" definition #f 698 21 698 54 ("HIViewGetWindow" "SelectWindow" "makeFrontProcess" "handle")}
      {Lisp-Entry "actions-store" definition #f 708 12 708 25 ("make-table")}
      {Lisp-Entry "add-position-action" definition #f 711 13 711 32 ("cdr" "and" "cons" "table-set!" "actions-store" "table-ref" "action" "let" "position" "window")}
      {Lisp-Entry "add-size-action" definition #f 716 13 716 28 ("car" "and" "cons" "table-set!" "actions-store" "table-ref" "action" "let" "size" "window")}
      {Lisp-Entry "platform-lock-window-update" definition #f 721 21 721 48 ("process-window-actions" "begin" "*locked-update*" "set!" "if" "handle")}
      {Lisp-Entry "process-window-actions" definition #f 731 13 731 35 ("make-table" "set!" "show-window" "platform-set-window-size" "platform-set-position" "platform-set-position-size" "and" "if" "cdr" "size" "car" "position" "hide-window" "get-handle" "handle" "let" "when" "action" "window" "lambda" "actions-store" "iterate-table")}
      {Lisp-Entry "platform-get-focus" definition #f 752 21 752 39 ("x11-default-display" "XGetInputFocus" "state" "win" "receive" "platform-get-focus" "'platform-get-focus" "unimplemented")}
      {Lisp-Entry "current-focus" definition #f 759 12 759 25 ()}
      {Lisp-Entry "get-current-focus" definition #f 761 13 761 30 ("get-toplevel" "set!" "current-focus" "unless")}
      {Lisp-Entry "platform-set-focus" definition #f 766 21 766 39 ("HIViewGetWindow" "SetUserFocusWindow" "get-window" "current-focus" "set!" "handle")}
      {Lisp-Entry "Current-Cursor" definition #f 776 19 776 33 ()}
      {Lisp-Entry "Cursors" definition #f 781 19 781 26 (":horizontal-splitter" ":vertical-splitter" ":left-arrow" ":spy" ":zoom-out" ":zoom-in" ":zoom" ":closed-hand" ":opened-hand" "Cursor-Resource" "new" ":move" "IDC_NO" ":no" "IDC_SIZEWE" ":west-east" "IDC_SIZEALL" ":all" "IDC_HAND" ":finger" "IDC_CROSS" ":cross" "IDC_IBEAM" ":ibeam" "IDC_WAIT" ":wait" "IDC_ARROW" ":arrow" "list")}
      {Lisp-Entry "load-cursor" definition #f 803 13 803 24 ("load-cursor" "'load-cursor" "unimplemented" "cursor")}
      {Lisp-Entry "get-named-cursor" definition #f 807 13 807 29 ("cadr" "error" "not" "if" "Cursors" "assq" "info" "let" "get-named-cursor" "'get-named-cursor" "unimplemented" "name")}
      {Lisp-Entry "get-cursor" definition #f 816 20 816 30 ("Current-Cursor")}
      {Lisp-Entry "set-cursor" definition #f 820 20 820 30 ("load-cursor" "SetCursor" "get-named-cursor" "symbol?" "if" "let" "set!" "Current-Cursor" "=" "unless" "cursor")}
      {Lisp-Entry "hide-cursor" definition #f 829 20 829 31 ()}
      {Lisp-Entry "show-cursor" definition #f 833 20 833 31 ()}
      {Lisp-Entry "platform-get-desktop" definition #f 842 21 842 41 ("XDefaultScreen" "x11-default-display" "XRootWindow" "platform-get-desktop" "'platform-get-desktop" "unimplemented")}
      {Lisp-Entry "get-work-area" definition #f 849 20 849 33 ("desktop" "get-handle" "platform-get-rect")}
      {Lisp-Entry "platform-drop-files" definition #f 858 21 858 40 ("platform-drop-files" "'platform-drop-files" "unimplemented" "temp" "window")}}})
"development"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "development.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.development" module #f 37 8 37 27 ("jazz")
      {Lisp-Entry "pt" definition #f 53 20 53 22 ("unspecified" "painting-tree" "Region" "region" "with" "get-clipper" "get-bounds" "or" "rect-intersection" "acquire" "typecase" "5000" "0" "Rect" "not" "update" "get-toplevel" "get-root" "View" "is?" "root" "map" "children:" "properties:" "class-of" "category-name" "JML-Element" "new" "object->serial" "format" "serial" "'serial" "get-opaque?" "opaque?" "'opaque?" "get-background" "background" "'background" "get-height" "get-width" "get-size" "size" "'size" "get-v" "get-h" "get-position" "position" "'position" "| |" "'| |" "yes" "'yes" "if" "'draw?" "get-name" "name" "'name" "list" "properties" "let" "nodes" "draw?" "view" "bind" "align-name?:" ":console" "convert" "node" "pretty-print" "define" "rect" "obj")}
      {Lisp-Entry "debug-window" method #f 86 9 86 21 ("acquire" "view-debug" "nextmethod" "not" "if" "root" "find-drawing" "view" "let" "pos")}
      {Lisp-Entry "describe-window" method #f 94 9 94 24 ("acquire" "view-describe" "when" "root" "find-drawing" "view" "let" "pos")}
      {Lisp-Entry "view-debug" generic/specific ("<View>") 105 10 105 20 ("set-%g" "set-%l" "set-%h" "set-%t" "set-%m" "set-%" "get-guest" "Host-View" "is?" "and" "guest" "get-player" "player" "get-host" "host" "view" "get-root" "root" "let*" "pos")}
      {Lisp-Entry "view-describe" generic/specific ("<View>") 118 10 118 23 ("get-action-handler" "get-size" "get-position" "get-title" "get-name" "view" "class-of" "category-identifier" "list" "pos")}
      {Lisp-Entry "view-describe-state" generic/specific ("<View>") 131 10 131 29 ("pos")}
      {Lisp-Entry "view-outline" definition #f 136 13 136 25 (":console" "list" "print-to" "newline" "get-height" "get-width" "get-v" "get-h" "format" "output" "get-size" "size" "get-position" "position" "get-lie" "lie" "class-of" "category-identifier" "type" "let" "View" "is?" "when" "level" "lambda" "for-each-descendant" "3" "border:" "Aligned-Column" "properties" "Indented-Column" "classes" "Columns-Display" "new" "display" "let*" "view")}
      {Lisp-Entry "view-describe" generic/specific ("<Image-Tool>") 166 11 166 24 ("get-disabled-resource" "get-resource" "list" "view" "nextmethod" "append" "pos")}
      {Lisp-Entry "view-describe" generic/specific ("<Label-Item>") 178 11 178 24 ("get-icon" "list" "view" "nextmethod" "append" "pos")}
      {Lisp-Entry "view-debug" generic/specific ("<Outline-View>") 189 11 189 21 ("set-%r" "get-row" "row" "let" "when" "v->row" "r" "get-v" "v" "let*" "view" "nextmethod" "pos")}
      {Lisp-Entry "view-describe" generic/specific ("<Outline-View>") 198 11 198 24 ("get-visible-height" "get-visible-width" "get-visible-count" "list" "view" "nextmethod" "append" "pos")}
      {Lisp-Entry "view-debug" generic/specific ("<Text-View>") 211 11 211 21 ("get-controller" "set-%c" "set-%k" "and" "set-%i" "get-style-at" "set-%y" "get-col" "get-line-at" "set-%n" "get-format" "set-%f" "set-%p" "set-%e" "set-%s" "string-length" "substring" "starts-with?" "if" "filename" "Jazz" "Directory" "parse" "jazzdir" "let" "path" "git-filename" "define" "get-line" "get-paragraph" "paragraph" "get-moniker" "moniker" "get-end" "end" "get-start" "start" "let*" "view" "nextmethod" "pos")}
      {Lisp-Entry "view-describe" generic/specific ("<Text-View>") 235 11 235 24 ("get-end" "get-start" "format" "list" "view" "nextmethod" "append" "pos")}
      {Lisp-Entry "view-debug" generic/specific ("<Tree-View>") 246 11 246 21 ("set-%u" "set-%r" "set-%p" "set-%o" "set-%n" "set-%d" "set-%c" "get-cell-data" "data" "get-debugged" "part" "receive" "get-user-data" "user-data" "get-children" "car" "node" "get-line" "get-row" "row" "get-col" "get-column" "column" "cell-coordinates" "let*" "when" "view->tree" "cell" "let" "view" "nextmethod" "pos")}
      {Lisp-Entry "view-describe" generic/specific ("<Tree-View>") 266 11 266 24 ("get-image" "Tree-Node" "is?" "and" "get-columns-right" "get-columns-borders" "get-node-column" "list" "get-cell-data" "data" "get-debugged" "part" "receive" "get-user-data" "user-data" "get-children" "car" "node" "get-line" "get-row" "row" "get-col" "get-column" "column" "cell-coordinates" "let*" "not" "if" "view->tree" "cell" "let" "view" "nextmethod" "append" "pos")}}})
"favorites"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "favorites.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.favorites" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Favorites-Preferences" class #f 51 20 51 41 ("title:" "Preferences")
        {Lisp-Entry "get-class-descriptor" method #f 63 25 63 45 ("Favorites-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 72 11 72 17 ()
        {Lisp-Entry "Favorites-Preferences-Descriptor" class #f 75 7 75 39 ("can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")
          {Lisp-Entry "component-get-addable-classes" method #f 83 20 83 49 ("Favorite-Configuration" "list" "component")}
          {Lisp-Entry "component-get-addable-details" method #f 88 20 88 49 ("300" "target" "100" "shortcut" "component")}}
        {Lisp-Entry "Favorite-Configuration" class #f 97 20 97 42 ("Image-Resource" "icon:" "initialize" "Preferences")
          {Lisp-Entry "shortcut" property #f 100 12 100 20 ()}
          {Lisp-Entry "get-shortcut" accessor #f 100 45 100 53 ()}
          {Lisp-Entry "set-shortcut" accessor #f 100 45 100 53 ()}
          {Lisp-Entry "target" property #f 101 12 101 18 ()}
          {Lisp-Entry "get-target" accessor #f 101 45 101 53 ()}
          {Lisp-Entry "set-target" accessor #f 101 45 101 53 ()}
          {Lisp-Entry "get-domain" method #f 113 25 113 35 ("nextmethod" "else" "String-Domain" "new" "shortcut" "field-name" "case" "property")}
          {Lisp-Entry "get-class-descriptor" method #f 124 25 124 45 ("Favorite-Configuration-Descriptor" "new")}}
        {Lisp-Entry "design" submodule #f 133 11 133 17 ()
          {Lisp-Entry "Favorite-Configuration-Descriptor" class #f 136 7 136 40 ("domain" "name:" "target" "shortcut" "categorized:" "title:" "Preferences-Descriptor")
            {Lisp-Entry "component-presentation-property?" method #f 146 20 146 52 ("shortcut" "field-name" "memq?" "property" "component")}
            {Lisp-Entry "component-get-presentation" method #f 150 20 150 46 ("get-shortcut" "or" "component")}
            {Lisp-Entry "component-set-presentation" method #f 155 20 155 46 ("shortcut:" "set-property" "shortcut" "designer" "component")}}}}}})
"independant"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "platform" "independant.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.platform.independant" module #f 38 18 38 53 ("jazz")
      {Lisp-Entry "*events-single-threaded?*" definition #f 46 12 46 37 ()}
      {Lisp-Entry "get-events-single-threaded?" definition #f 50 20 50 47 ("*events-single-threaded?*")}
      {Lisp-Entry "set-events-single-threaded?" definition #f 54 20 54 47 ("*events-single-threaded?*" "set!" "flag")}
      {Lisp-Entry "event-thread" definition #f 63 20 63 32 ("primordial-thread")}
      {Lisp-Entry "event-thread?" definition #f 67 20 67 33 ("event-thread" "current-thread" "eq?")}
      {Lisp-Entry "delay-event" definition #f 71 20 71 31 ("event-thread" "thread-write" "thunk")}
      {Lisp-Entry "post-event" definition #f 76 20 76 30 ("post-event" "'post-event" "event-thread" "thread-post" "thunk")}
      {Lisp-Entry "execute-event" definition #f 81 20 81 33 ("execute-event" "'execute-event" "event-thread" "thread-execute" "thunk")}
      {Lisp-Entry "call-event" definition #f 86 20 86 30 ("call-event" "'call-event" "event-thread" "thread-call" "thunk")}}})
"install"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "install.scm"} 1288732034
    {Lisp-Entry "jazz.ui.install" unit #f 37 6 37 21 ()
      {Lisp-Entry "Action" define ("literal") 40 21 40 27 ("jazz.ui.literals.construct-action")}
      {Lisp-Entry "Shortcut" define ("literal") 41 21 41 29 ("jazz.ui.literals.construct-shortcut")}
      {Lisp-Entry "Format" define ("literal") 42 21 42 27 ("jazz.ui.literals.construct-format")}
      {Lisp-Entry "Text-Style-Preference" define ("literal") 43 21 43 42 ("jazz.ui.literals.construct-text-style-preference")}
      {Lisp-Entry "Text-Style" define ("literal") 44 21 44 31 ("jazz.ui.literals.construct-text-style")}
      {Lisp-Entry "Hyperlink-Style" define ("literal") 45 21 45 36 ("jazz.ui.literals.construct-hyperlink-style")}
      {Lisp-Entry "Text" define ("literal") 46 21 46 25 ("jazz.ui.literals.construct-text")}
      {Lisp-Entry "Formatted-Text" define ("literal") 47 21 47 35 ("jazz.ui.literals.construct-formatted-text")}
      {Lisp-Entry "Clipboard-Parcel" define ("literal") 48 21 48 37 ("jazz.ui.literals.construct-clipboard-parcel")}
      {Lisp-Entry "Action-Event" define ("literal") 49 21 49 33 ("jazz.ui.literals.construct-action-event")}
      {Lisp-Entry "Keyboard-Event" define ("literal") 50 21 50 35 ("jazz.ui.literals.construct-keyboard-event")}
      {Lisp-Entry "Selection-Handler" define ("literal") 51 21 51 38 ("jazz.ui.literals.construct-selection-handler")}}})
"literals"
 ({Lisp-File-Entry {File jazz.ui "src" "jazz" "ui" "literals.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.literals" module #f 37 8 37 24 ("jazz")
      {Lisp-Entry "construct-action" definition #f 49 21 49 37 ("Action" "new" "properties" "action-name" "action-context")}
      {Lisp-Entry "construct-shortcut" definition #f 58 21 58 39 ("last" "butlast" "Shortcut" "new" "rest")}
      {Lisp-Entry "construct-format" definition #f 67 21 67 37 ("Format" "new" "apply" "rest")}
      {Lisp-Entry "construct-text-style-preference" definition #f 76 21 76 52 ("Text-Style-Preference" "new" "apply" "rest")}
      {Lisp-Entry "construct-text-style" definition #f 80 21 80 41 ("Text-Style" "new" "apply" "rest")}
      {Lisp-Entry "construct-hyperlink-style" definition #f 84 21 84 46 ("Hyperlink-Style" "new" "apply" "rest")}
      {Lisp-Entry "construct-text" definition #f 93 21 93 35 ("Text" "new" "apply" "rest")}
      {Lisp-Entry "construct-formatted-text" definition #f 97 21 97 45 ("Formatted-Text" "new" "apply" "rest")}
      {Lisp-Entry "construct-clipboard-parcel" definition #f 106 21 106 47 ("Clipboard-Parcel" "new" "content" "object-id" "process-id")}
      {Lisp-Entry "construct-action-event" definition #f 115 21 115 43 ("Action-Event" "new" "apply" "properties" "kind")}
      {Lisp-Entry "construct-keyboard-event" definition #f 119 21 119 45 ("Keyboard-Event" "new" "key" "kind")}
      {Lisp-Entry "construct-selection-handler" definition #f 128 21 128 48 ("method-name:" "target-name:" "Selection-Handler" "new" "apply" "rest" "method-name" "target-name")}}})
"wallpaper"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "preference" "wallpaper.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.preference.wallpaper" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Wallpaper-Preferences" class #f 51 20 51 41 ("title:" "initialize" "Preferences")
        {Lisp-Entry "active" property #f 54 12 54 18 ()}
        {Lisp-Entry "get-active" accessor #f 54 43 54 51 ()}
        {Lisp-Entry "set-active" accessor #f 54 43 54 51 ()}
        {Lisp-Entry "get-class-descriptor" method #f 66 25 66 45 ("Wallpaper-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 75 11 75 17 ()
        {Lisp-Entry "Wallpaper-Preferences-Descriptor" class #f 78 7 78 39 ("active" "name:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")
          {Lisp-Entry "component-get-addable-classes" method #f 87 20 87 49 ("Wallpaper-Configuration" "list" "component")}
          {Lisp-Entry "component-get-addable-details" method #f 92 20 92 49 ("active?" "random?" "recursive?" "period" "favorites" "startup" "mode" "directory" "100" "name-info" "component")}}}
      {Lisp-Entry "Wallpaper-Configuration" class #f 109 20 109 43 ("300000" "period:" "favorites:" "startup:" "Image-Resource" "icon:" "initialize" "Preferences")
        {Lisp-Entry "directory" property #f 112 12 112 21 ()}
        {Lisp-Entry "get-directory" accessor #f 112 48 112 56 ()}
        {Lisp-Entry "set-directory" accessor #f 112 48 112 56 ()}
        {Lisp-Entry "mode" property #f 113 12 113 16 ()}
        {Lisp-Entry "get-mode" accessor #f 113 48 113 56 ()}
        {Lisp-Entry "set-mode" accessor #f 113 48 113 56 ()}
        {Lisp-Entry "startup" property #f 114 12 114 19 ()}
        {Lisp-Entry "get-startup" accessor #f 114 48 114 56 ()}
        {Lisp-Entry "set-startup" accessor #f 114 48 114 56 ()}
        {Lisp-Entry "favorites" property #f 115 12 115 21 ()}
        {Lisp-Entry "get-favorites" accessor #f 115 48 115 56 ()}
        {Lisp-Entry "set-favorites" accessor #f 115 48 115 56 ()}
        {Lisp-Entry "period" property #f 116 12 116 18 ()}
        {Lisp-Entry "get-period" accessor #f 116 48 116 56 ()}
        {Lisp-Entry "set-period" accessor #f 116 48 116 56 ()}
        {Lisp-Entry "recursive?" property #f 117 12 117 22 ()}
        {Lisp-Entry "get-recursive?" accessor #f 117 48 117 56 ()}
        {Lisp-Entry "set-recursive?" accessor #f 117 48 117 56 ()}
        {Lisp-Entry "random?" property #f 118 12 118 19 ()}
        {Lisp-Entry "get-random?" accessor #f 118 48 118 56 ()}
        {Lisp-Entry "set-random?" accessor #f 118 48 118 56 ()}
        {Lisp-Entry "active?" property #f 119 12 119 19 ()}
        {Lisp-Entry "get-active?" accessor #f 119 48 119 56 ()}
        {Lisp-Entry "set-active?" accessor #f 119 48 119 56 ()}
        {Lisp-Entry "get-domain" method #f 131 25 131 35 ("nextmethod" "else" "Boolean-Domain" "new" "active?" "random?" "recursive?" "field-name" "case" "property")}
        {Lisp-Entry "get-class-descriptor" method #f 142 25 142 45 ("Wallpaper-Configuration-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 151 11 151 17 ()
        {Lisp-Entry "Wallpaper-Configuration-Descriptor" class #f 154 7 154 41 ("domain" "name:" "active?" "random?" "recursive?" "period" "favorites" "startup" "mode" "directory" "categorized:" "title:" "Preferences-Descriptor")}}}})
"windows"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "clipboard" "platform" "windows.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.clipboard.platform.windows" module #f 37 18 37 52 ("CF_UNICODETEXT" "unicode-text" "'unicode-text" "register-clipboard-format" "jazz")
      {Lisp-Entry "initialize-clipboard" definition #f 43 21 43 41 ()}
      {Lisp-Entry "get-clipboard-text" definition #f 52 20 52 38 ("read-line" "input" "cr-lf" "'cr-lf" "eol-encoding:" "UCS-2" "'UCS-2" "char-encoding:" "init:" "list" "call-with-input-u8vector" "u8vector?" "not" "if" "get-clipboard-format" "GetClipboardText" "u8vect" "let" "lambda" "with-opened-clipboard" "unicode-text" "'unicode-text" "format" "format:")}
      {Lisp-Entry "set-clipboard-text" definition #f 63 20 63 38 ("empty?:" "get-clipboard-format" "SetClipboardText" "get-output-u8vector" "u8vect" "display" "cr-lf" "'cr-lf" "eol-encoding:" "UCS-2" "'UCS-2" "char-encoding:" "list" "open-output-u8vector" "output" "let" "lambda" "with-opened-clipboard" "unicode-text" "'unicode-text" "format" "format:" "text")}
      {Lisp-Entry "mouse-select-copy" definition #f 78 21 78 38 ("proc")}
      {Lisp-Entry "middle-mouse-paste" definition #f 82 21 82 39 ("proc")}
      {Lisp-Entry "get-clipboard-metafile" definition #f 91 21 91 43 ("CF_ENHMETAFILE" "GetClipboardData" "lambda" "with-opened-clipboard" "get-clipboard-metafile" "'get-clipboard-metafile" "unimplemented")}
      {Lisp-Entry "set-clipboard-metafile" definition #f 99 21 99 43 ("empty?:" "CF_ENHMETAFILE" "SetClipboardData" "lambda" "with-opened-clipboard" "set-clipboard-metafile" "'set-clipboard-metafile" "unimplemented" "metafile")}
      {Lisp-Entry "with-opened-clipboard" definition #f 113 33 113 54 ("CloseClipboard" "EmptyClipboard" "when" "set!" "NULL" "OpenClipboard" "begin" "unwind-protect" "opened?" "let" "empty?" "empty?:" "proc")}
      {Lisp-Entry "Formats" definition #f 131 12 131 19 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-clipboard-format" definition #f 135 33 135 58 ("Formats" "table-set!" "RegisterClipboardFormat" "integer?" "if" "id" "let" "format" "name")}
      {Lisp-Entry "get-clipboard-format" definition #f 142 33 142 53 ("error" "Formats" "table-ref" "or" "format")}
      {Lisp-Entry "clipboard-format-available?" definition #f 147 33 147 60 ("available-clipboard-formats" "get-clipboard-format" "member?" "format")}
      {Lisp-Entry "available-clipboard-formats" definition #f 151 33 151 60 ("get-output" "put" "/=" "when" "EnumClipboardFormats" "format" "0" "previous" "iter" "List-Factory" "new" "formats" "let" "lambda" "with-opened-clipboard")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "platform" "windows.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.platform.windows" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "choose-file" definition #f 55 20 55 31 ("WCHAR-array-free" "OPENFILENAME-free" "error" "throw-cancel" "CommDlgExtendedError" "code" "append" "map" "dirlist" "dir" "bind" "list" "1" "length" "=" "parse-choose-file-string" "tokens" "tokenise-windows" "File" "new" "WCHAR-string" "filename" "not" "begin" "GetOpenFileName" "prog1" "pathname" "lambda" "anchorize" "OPENFILENAME-lpfnHook-set!" "OPENFILENAME-lCustData-set!" "OPENFILENAME-lpstrDefExt-set!" "OFN_ENABLESIZING" "OFN_FILEMUSTEXIST" "OFN_ENABLEHOOK" "OFN_HIDEREADONLY" "OFN_ALLOWMULTISELECT" "OFN_EXPLORER" "bitwise-ior" "OPENFILENAME-Flags-set!" "or" "OPENFILENAME-lpstrTitle-set!" "parse" "OPENFILENAME-lpstrInitialDir-set!" "OPENFILENAME-nMaxFile-set!" "OPENFILENAME-lpstrFile-set!" "OPENFILENAME-lpstrFilter-set!" "get-handle" "get-toplevel" "toplevel" "OPENFILENAME-hwndOwner-set!" "OPENFILENAME-sizeof" "OPENFILENAME-lStructSize-set!" "get-dialog-proc" "fake-dialog-proc" "get-current-directory" "fake-current-directory" "NULL" "extensions-filter" "fake-extensions-filter" "0" "WCHAR-array-set!" "WCHAR-array-make" "buffer" "OPENFILENAME-make" "r" "50" "64" "*" "MAX_PATH" "+" "size" "let" "host-title:" "File-Request" "Text-File-Request" "get-modal" "use-generic-dialogs?" "if" "text?" "text?:" "anchors" "anchors:" "multiple-selection?" "multiple-selection?:" "extensions" "extensions:" "filenames" "filenames:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "map-WCHAR-array" definition #f 118 13 118 28 ("0" "naturals" "WCHAR-array-ref" "char" "let" "n" "lambda" "map" "size" "buffer")}
      {Lisp-Entry "choose-new-file" definition #f 125 20 125 35 ("WCHAR-array-free" "OPENFILENAME-free" "error" "throw-cancel" "=" "CommDlgExtendedError" "code" "tokenise-windows" "File" "new" "anchorize" "after-GetSaveFileName" "'after-GetSaveFileName" "WCHAR-string" "filename" "GetSaveFileName" "prog1" "map-WCHAR-array" "before-GetSaveFileName" "'before-GetSaveFileName" "debug" "OPENFILENAME-lpfnHook-set!" "OPENFILENAME-lCustData-set!" "or" "OPENFILENAME-lpstrDefExt-set!" "OFN_OVERWRITEPROMPT" "OFN_ENABLESIZING" "OFN_FILEMUSTEXIST" "OFN_ENABLEHOOK" "OFN_EXPLORER" "bitwise-ior" "OPENFILENAME-Flags-set!" "parse" "OPENFILENAME-lpstrInitialDir-set!" "OPENFILENAME-nMaxFile-set!" "OPENFILENAME-lpstrFile-set!" "OPENFILENAME-lpstrFilter-set!" "get-handle" "get-toplevel" "toplevel" "OPENFILENAME-hwndOwner-set!" "OPENFILENAME-sizeof" "OPENFILENAME-lStructSize-set!" "get-dialog-proc" "fake-dialog-proc" "get-current-directory" "fake-current-directory" "NULL" "extensions-filter" "fake-extensions-filter" "WCHAR-copy" "0" "WCHAR-array-set!" "not" "MAX_PATH" "WCHAR-array-make" "buffer" "OPENFILENAME-make" "r" "let" "create-directories" "when" "host-title:" "NewFile-Request" "get-modal" "use-generic-dialogs?" "if" "anchors" "anchors:" "default-extension" "default-extension:" "initial-filename" "initial-filename:" "extensions" "extensions:" "filenames" "filenames:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-directory" definition #f 181 20 181 36 ("tokenise-windows" "Directory" "new" "anchorize" "WCHAR-string" "throw-cancel" "not" "SHBrowseForFolder" "items" "BROWSEINFO-iImage-set!" "BROWSEINFO-lParam-set!" "get-browse-callback" "BROWSEINFO-lpfn-set!" "BROWSEINFO-ulFlags-set!" "or" "BROWSEINFO-lpszTitle-set!" "BROWSEINFO-pszDisplayName-set!" "BROWSEINFO-pidlRoot-set!" "NULL" "get-handle" "get-toplevel" "toplevel" "BROWSEINFO-hwndOwner-set!" "0" "WCHAR-array-set!" "MAX_PATH" "WCHAR-array-make" "buffer" "BROWSEINFO-make" "r" "set-current-directory" "when" "get-current-directory" "preserved" "let" "host-title:" "Directory-Request" "get-modal" "use-generic-dialogs?" "if" "anchors" "anchors:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "print-dialog" definition #f 219 20 219 32 ("PRINTDLG-free" "error" "throw-cancel" "=" "CommDlgExtendedError" "code" "DEVMODE-dmOrientation-ref" "PRINTDLG-nCopies-ref" "PRINTDLG-nToPage-ref" "PRINTDLG-nFromPage-ref" "PD_PAGENUMS" "PD_SELECTION" "PD_PRINTTOFILE" "mask-bit-set?" "PRINTDLG-hDC-ref" "values" "VOID*->DEVMODE" "devmode" "GlobalLock" "pointer" "PRINTDLG-hDevMode-ref" "handle" "PRINTDLG-Flags-ref" "flags" "let*" "PrintDlg" "if" "prog1" "10" "PRINTDLG-nMaxPage-set!" "1" "PRINTDLG-nMinPage-set!" "PRINTDLG-nToPage-set!" "0" "PRINTDLG-nFromPage-set!" "PD_RETURNDC" "PD_USEDEVMODECOPIESANDCOLLATE" "PD_NOSELECTION" "PD_HIDEPRINTTOFILE" "bitwise-ior" "PRINTDLG-Flags-set!" "get-application" "get-toplevel" "get-handle" "PRINTDLG-hwndOwner-set!" "PRINTDLG-sizeof" "PRINTDLG-lStructSize-set!" "PRINTDLG-make" "rec" "let" "close-all-popups" "rest")}
      {Lisp-Entry "page-setup-dialog" definition #f 242 20 242 37 ("DEVMODE-free" "PAGESETUPDLG-free" "error" "throw-cancel" "=" "CommDlgExtendedError" "code" "GlobalUnlock" "DEVMODE-dmDefaultSource-ref" "DEVMODE-dmPaperSize-ref" "DEVMODE-dmOrientation-ref" "PAGESETUPDLG-rtMinMargin-ref" "RECT->rect" "PAGESETUPDLG-ptPaperSize-ref" "POINT->dimension" "values" "VOID*->DEVMODE" "GlobalLock" "pointer" "PAGESETUPDLG-hDevMode-ref" "handle" "let*" "PageSetupDlg" "prog1" "get-bottom" "RECT-bottom-set!" "get-right" "RECT-right-set!" "get-top" "RECT-top-set!" "get-left" "PAGESETUPDLG-rtMargin-ref" "RECT-left-set!" "when" "PSD_DISABLEPRINTER" "0" "PSD_MARGINS" "if" "PSD_INTHOUSANDTHSOFINCHES" "PAGESETUPDLG-Flags-set!" "DEVMODE->HANDLE" "PAGESETUPDLG-hDevMode-set!" "get-application" "get-toplevel" "get-handle" "PAGESETUPDLG-hwndOwner-set!" "PAGESETUPDLG-sizeof" "PAGESETUPDLG-lStructSize-set!" "DM_DEFAULTSOURCE" "DM_PAPERSIZE" "DM_ORIENTATION" "bitwise-ior" "DEVMODE-dmFields-set!" "DEVMODE-dmDefaultSource-set!" "DEVMODE-dmPaperSize-set!" "DEVMODE-dmOrientation-set!" "DEVMODE-sizeof" "DEVMODE-dmSize-set!" "DEVMODE-make" "devmode" "PAGESETUPDLG-make" "rec" "let" "close-all-popups" "paper-source" "paper-source:" "paper-size" "paper-size:" "orientation" "orientation:" "margins" "margins:")}
      {Lisp-Entry "color->ref" define #f 285 9 285 19 ("get-blue" "get-green" "get-red" "RGB" "color")}
      {Lisp-Entry "ref->color" define #f 288 9 288 19 ("GetBValue" "blue:" "GetGValue" "green:" "GetRValue" "red:" "Color" "new" "ref")}
      {Lisp-Entry "custom-colors" define #f 292 8 292 21 ("COLORREF*-set!" "below" "0" "from" "n" "for" "loop" "Black" "name:" "Color" "color->ref" "black" "16" "COLORREF*-alloc" "array" "let")}
      {Lisp-Entry "choose-color" definition #f 300 20 300 32 ("error" "throw-cancel" "0" "=" "CommDlgExtendedError" "code" "CHOOSECOLOR-rgbResult-ref" "ref->color" "symbolize-color" "ChooseColor" "if" "CC_FULLOPEN" "CC_RGBINIT" "CC_ANYCOLOR" "bitwise-ior" "CHOOSECOLOR-Flags-set!" "custom-colors" "CHOOSECOLOR-lpCustColors-set!" "blue:" "green:" "128" "red:" "Color" "or" "color->ref" "CHOOSECOLOR-rgbResult-set!" "get-toplevel" "get-handle" "CHOOSECOLOR-hwndOwner-set!" "CHOOSECOLOR-sizeof" "CHOOSECOLOR-lStructSize-set!" "CHOOSECOLOR-make" "r" "let" "initial-color" "initial-color:")}
      {Lisp-Entry "choose-font" definition #f 320 20 320 31 ("error" "throw-cancel" "=" "CommDlgExtendedError" "code" "logfont:" "Font" "ChooseFont" "0" "CF_INITTOLOGFONTSTRUCT" "CF_NOSCRIPTSEL" "CF_EFFECTS" "CF_SCREENFONTS" "bitwise-ior" "Flags" "'Flags" "get-ref" "rgbColors" "'rgbColors" "lpLogFont" "'lpLogFont" "get-toplevel" "get-handle" "hwndOwner" "'hwndOwner" "size-of" "lStructSize" "'lStructSize" "set" "LOGFONT" "get-logfont" "if" "logfont" "CHOOSEFONT" "new" "r" "let" "close-all-popups" "choose-font" "'choose-font" "unimplemented" "initial-color" "initial-color:" "initial-font" "initial-font:")}
      {Lisp-Entry "parse-choose-file-string" definition #f 344 13 344 37 ("1" "+" "loop" "WCHAR-subarray" "WCHAR-string" "cons" "if" "WCHAR-array-ref" "eq?" "end-of-string?" "start-of-string?" "0" "offset" "iterate" "let" "buffer")}
      {Lisp-Entry "extensions-filter" definition #f 358 20 358 37 ("get-output" "join" "cdr" "car" "put" "ext" "lambda" "for-each" "1" "make-string" "separator" "List-Factory" "new" "dst" "let" "not" "if" "NULL" "extensions")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "platform" "windows.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.platform.windows" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "platform-print-document" definition #f 53 21 53 44 ("print-job" "nb-copies:" "to:" "and" "from:" "selection?:" "Printer-Job" "job" "let" "10000" "0" "Rect" "set-clipper" "LOGPIXELSX" "GetDeviceCaps" "resolution" "printer" "'printer" "get-page-setup-for" "page-setup" "cairo_win32_surface_create" "Surface" "new" "surface" "let*" "print-picture" "if" "print-dialog" "orientation" "nb-copies" "to" "from" "pages?" "selection?" "print-to-file?" "hdc" "receive" "view")}
      {Lisp-Entry "delete-existing" definition #f 65 13 65 28 ("recursive?:" "delete-file" "get-name" "matches?" "when" "file" "lambda" "iterate-directory" "format" "Regular-Expression" "new" "regexp" "let" "filename" "directory")}
      {Lisp-Entry "platform-print-picture" definition #f 74 21 74 43 ("message-box" "print-job" "Picture-Job" "new" "job" "LOGPIXELSX" "desktop-dc" "GetDeviceCaps" "resolution" "file" "'file" "get-page-setup-for" "page-setup" "let*" "delete-existing" "filename" "choose-directory" "directory" "let" "view")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "resizer" "platform" "windows.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.resizer.platform.windows" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Part-Cursor" constant #f 43 10 43 21 ("IDC_ARROW" "IDC_SIZEWE" "IDC_SIZENESW" "1" "IDC_SIZENS" "0" "IDC_SIZENWSE" "-1" "cons" "list")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "platform" "windows.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.platform.windows" module #f 39 18 39 49 ("message-callback" "set-process-hwnd-message" "register-window-class" "jazz")
      {Lisp-Entry "unprocessed" definition #f 62 19 62 30 ("unprocessed")}
      {Lisp-Entry "processed" definition #f 63 19 63 28 ("processed")}
      {Lisp-Entry "processed-result" definition #f 66 13 66 29 ("cadr" "0" "cdr" "null?" "processed" "'processed" "car" "eq?" "pair?" "and" "if" "return")}
      {Lisp-Entry "Windows-Table" definition #f 79 19 79 32 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "get-window" definition #f 83 27 83 37 ("Windows-Table" "table-ref" "foreign-address" "foreign?" "if" "let" "hwnd")}
      {Lisp-Entry "set-window" definition #f 88 27 88 37 ("table-clear" "foreign-address" "Windows-Table" "table-set!" "if" "window" "hwnd")}
      {Lisp-Entry "in-creation" definition #f 95 12 95 23 ()}
      {Lisp-Entry "set-in-creation" definition #f 98 13 98 28 ("in-creation" "set!" "in")}
      {Lisp-Entry "get-in-creation" definition #f 102 13 102 28 ("in-creation")}
      {Lisp-Entry "window-class" generic/specific ("<Window>") 106 10 106 22 ("CLASS_ATOM")}
      {Lisp-Entry "class-style" definition #f 110 21 110 32 ("CS_DBLCLKS" "bitwise-ior")}
      {Lisp-Entry "class-background" definition #f 114 21 114 37 ("COLOR_BTNFACE" "GetSysColorBrush")}
      {Lisp-Entry "get-class-background" definition #f 118 21 118 41 ("GCL_HBRBACKGROUND" "GetClassLong" "handle")}
      {Lisp-Entry "platform-erase-background" definition #f 122 21 122 46 ("unprocessed" "handle")}
      {Lisp-Entry "CLASS_ATOM" definition #f 126 20 126 30 ()}
      {Lisp-Entry "register-window-class" definition #f 130 13 130 34 ("RegisterClassEx" "CLASS_ATOM" "set!" "16" "WNDCLASSEX-hIconSm-set!" "WNDCLASSEX-lpszClassName-set!" "WNDCLASSEX-lpszMenuName-set!" "WNDCLASSEX-hbrBackground-set!" "NULL" "WNDCLASSEX-hCursor-set!" "32" "load-product-icon" "WNDCLASSEX-hIcon-set!" "WNDCLASSEX-hInstance-set!" "WNDCLASSEX-cbWndExtra-set!" "0" "WNDCLASSEX-cbClsExtra-set!" "call-process-hwnd-message" "WNDCLASSEX-lpfnWndProc-set!" "class-style" "WNDCLASSEX-style-set!" "WNDCLASSEX-sizeof" "WNDCLASSEX-cbSize-set!" "WNDCLASSEX-make" "wc" "class-background" "background" "current-instance" "instance" "let")}
      {Lisp-Entry "load-product-icon" definition #f 149 21 149 38 ("LR_LOADFROMFILE" "IMAGE_ICON" "NULL" "LoadImage" "file-exists?" "if" "format" "kernel-install" "string-append" "file" "jazz" "'jazz" "jazz-product" "or" "product" "let" "cy" "cx")}
      {Lisp-Entry "window-style" generic/specific ("<Window>") 160 10 160 22 ("WS_CLIPSIBLINGS" "WS_CLIPCHILDREN" "WS_CHILD" "bitwise-ior" "rest")}
      {Lisp-Entry "window-style" generic/specific ("<External-Frame>") 166 11 166 23 ("WS_CLIPSIBLINGS" "WS_CLIPCHILDREN" "WS_SYSMENU" "WS_OVERLAPPEDWINDOW" "WS_POPUP" "bitwise-ior" "rest")}
      {Lisp-Entry "window-style" generic/specific ("<Popup>") 174 11 174 23 ("WS_CLIPCHILDREN" "WS_POPUP" "bitwise-ior" "rest")}
      {Lisp-Entry "window-style" generic/specific ("<Palette>") 179 11 179 23 ("WS_CLIPCHILDREN" "WS_OVERLAPPEDWINDOW" "WS_POPUP" "bitwise-ior" "rest")}
      {Lisp-Entry "window-style" generic/specific ("<Toplevel>") 185 11 185 23 ("WS_SYSMENU" "WS_MINIMIZEBOX" "WS_OVERLAPPEDWINDOW" "WS_POPUP" "WS_CLIPCHILDREN" "WS_CLIPSIBLINGS" "bitwise-ior" "rest")}
      {Lisp-Entry "window-style" generic/specific ("<Dialog>") 194 11 194 23 ("WS_SYSMENU" "closable?:" "0" "WS_THICKFRAME" "not-found:" "sizable?:" "getf" "if" "WS_DLGFRAME" "WS_CAPTION" "WS_OVERLAPPED" "WS_BORDER" "WS_POPUP" "WS_CLIPSIBLINGS" "WS_CLIPCHILDREN" "bitwise-ior" "rest")}
      {Lisp-Entry "window-ex-style" generic/specific ("<Window>") 206 10 206 25 ("0" "rest")}
      {Lisp-Entry "window-ex-style" generic/specific ("<External-Frame>") 210 11 210 26 ("0" "rest")}
      {Lisp-Entry "window-ex-style" generic/specific ("<Popup>") 214 11 214 26 ("WS_EX_TOOLWINDOW" "rest")}
      {Lisp-Entry "window-ex-style" generic/specific ("<Palette>") 218 11 218 26 ("WS_EX_TOOLWINDOW" "rest")}
      {Lisp-Entry "window-ex-style" generic/specific ("<Toplevel>") 222 11 222 26 ("WS_EX_APPWINDOW" "rest")}
      {Lisp-Entry "window-ex-style" generic/specific ("<Dialog>") 226 11 226 26 ("WS_EX_DLGMODALFRAME" "rest")}
      {Lisp-Entry "window-parent" definition #f 230 21 230 34 ("NULL" "get-handle" "if" "get-parent" "parent" "let" "window")}
      {Lisp-Entry "window-default-parent" definition #f 237 21 237 42 ("else" "get-toplevel" "Dialog" "typecase" "window")}
      {Lisp-Entry "create-handle" generic/specific ("<Window>") 243 10 243 23 ("current-instance" "window-parent" "500" "0" "window-style" "NULL" "window-class" "CLASS_ATOM" "window" "window-ex-style" "CreateWindowEx" "rest")}
      {Lisp-Entry "create-handle" generic/specific ("<Desktop>") 258 11 258 24 ("GetDesktopWindow" "rest")}
      {Lisp-Entry "prepare-handle" definition #f 262 21 262 35 ("DragAcceptFiles" "GetLastError" "window-parent" "parent:" "window-ex-style" "ex-style:" "window-style" "style:" "window-class" "class:" "list" "error" "not" "if" "create-handle" "let" "set-in-creation" "others" "hwnd" "bind-keywords" "rest" "window")}
      {Lisp-Entry "bring-window-to-top" definition #f 274 21 274 40 ("BringWindowToTop" "hwnd")}
      {Lisp-Entry "window-state" definition #f 278 21 278 33 ("WINDOWPLACEMENT-free" "restored" "'restored" "else" "maximized" "'maximized" "SW_SHOWMAXIMIZED" "minimized" "'minimized" "SW_SHOWMINIMIZED" "WINDOWPLACEMENT-showCmd-ref" "ecase" "prog1" "GetWindowPlacement" "WINDOWPLACEMENT-sizeof" "WINDOWPLACEMENT-length-set!" "WINDOWPLACEMENT-make" "placement" "let" "handle")}
      {Lisp-Entry "set-window-placement" definition #f 289 21 289 41 ("WINDOWPLACEMENT-free" "SetWindowPlacement" "get-height" "RECT-bottom-set!" "get-width" "+" "RECT-right-set!" "get-v" "RECT-top-set!" "get-h" "RECT-left-set!" "WINDOWPLACEMENT-rcNormalPosition-ref" "rect" "SW_SHOWNORMAL" "WINDOWPLACEMENT-showCmd-set!" "WINDOWPLACEMENT-sizeof" "WINDOWPLACEMENT-length-set!" "WINDOWPLACEMENT-make" "placement" "let" "size" "position" "handle")}
      {Lisp-Entry "show-window" definition #f 302 21 302 32 ("SW_SHOWNORMAL" "ShowWindow" "handle")}
      {Lisp-Entry "show-maximized" definition #f 306 21 306 35 ("SW_MAXIMIZE" "ShowWindow" "handle")}
      {Lisp-Entry "show-restored" definition #f 310 21 310 34 ("SW_RESTORE" "ShowWindow" "handle")}
      {Lisp-Entry "hide-window" definition #f 314 21 314 32 ("SW_HIDE" "ShowWindow" "handle")}
      {Lisp-Entry "minimize-window" definition #f 318 21 318 36 ("SW_MINIMIZE" "ShowWindow" "handle")}
      {Lisp-Entry "maximize-window" definition #f 322 21 322 36 ("SW_MAXIMIZE" "ShowWindow" "handle")}
      {Lisp-Entry "restore-window" definition #f 326 21 326 35 ("SW_RESTORE" "ShowWindow" "handle")}
      {Lisp-Entry "destroy-window" definition #f 330 21 330 35 ("DestroyWindow" "handle")}
      {Lisp-Entry "dispatch-message" definition #f 334 13 334 29 ("processed-result" "get-handle" "DefWindowProc" "unprocessed" "eq?" "if" "process-window-message" "return" "let" "lparam" "wparam" "msg" "window")}
      {Lisp-Entry "setup-events" definition #f 346 21 346 33 ("event-thread" "thread-priority-boost-set!" "NULL" "0" "get-toplevel-hwnd" "SetTimer" "get-events-single-threaded?" "if" "1" "events-heartbeat" "define")}
      {Lisp-Entry "c-stack-unwinding-restart" define #f 363 8 363 33 ()}
      {Lisp-Entry "with-c-stack-unwinding-entry" definition #f 366 13 366 41 ("set!" "c-stack-unwinding-restart" "if" "error" "restart" "lambda" "continuation-checkpoint" "result" "let" "thunk")}
      {Lisp-Entry "with-c-stack-unwinding-exit" definition #f 380 13 380 40 ("continuation-graft" "c-stack-unwinding-restart" "set!" "error" "restart" "continuation-checkpoint" "exit" "lambda" "continuation-capture" "cleanup" "thunk")}
      {Lisp-Entry "process-messages-single-threaded" definition #f 397 21 397 53 ("MSG-free" "0" "NULL" "GetMessage" "when" "loop" "MSG-make" "let" "proper-tail-calls" "declare" "DispatchMessage" "lambda" "with-c-stack-unwinding-entry" "TranslateMessage" "translate-shortcut" "unless" "msg" "process-message" "define" "thunk")}
      {Lisp-Entry "process-messages-multi-threaded" definition #f 416 21 416 52 ("message-pump" "'message-pump" "new-thread" "thread-loop?" "when" "read" "loop" "current-thread" "thread" "QS_ALLINPUT" "open-event-queue" "port" "MSG-free" "PM_REMOVE" "0" "NULL" "PeekMessage" "while" "MSG-make" "let" "proper-tail-calls" "declare" "process" "DispatchMessage" "TranslateMessage" "translate-shortcut" "unless" "lambda" "execute-event" "msg" "process-message" "define")}
      {Lisp-Entry "callback-level" definition #f 454 12 454 26 ("0")}
      {Lisp-Entry "callback-thread-mutex" definition #f 457 12 457 33 ("callback-thread-mutex" "'callback-thread-mutex" "make-mutex")}
      {Lisp-Entry "callback-thread-condition" definition #f 460 12 460 37 ("callback-thread-condition" "'callback-thread-condition" "make-condition")}
      {Lisp-Entry "message-callback" definition #f 464 13 464 29 ("callback-thread-condition" "current-thread" "interleaved-problem-detected" "'interleaved-problem-detected" "terminal" "decrease!" "=" "iterate" "call-event" "unwind-protect" "mutex-unlock!" "prog1" "callback-level" "increase!" "callback-thread-mutex" "mutex-lock!" "begin" "level" "1" "exit" "reason:" "snapshot-process" "primordial-thread?" "get-events-single-threaded?" "lambda" "with-c-stack-unwinding-exit" "dispatch-message" "DefWindowProc" "if" "set-in-creation" "set-window" "set-handle" "set!" "get-in-creation" "not" "and" "when" "get-window" "window" "let" "process" "define" "lparam" "wparam" "msg" "hwnd")}
      {Lisp-Entry "Symbolic-Keys" definition #f 523 19 523 32 ("eqv?" "test:" "Divide" "'Divide" "VK_DIVIDE" "Multiply" "'Multiply" "VK_MULTIPLY" "Subtract" "'Subtract" "VK_SUBTRACT" "Add" "'Add" "VK_ADD" "Delete" "'Delete" "VK_DELETE" "Pause" "'Pause" "VK_PAUSE" "Insert" "'Insert" "VK_INSERT" "Next" "'Next" "VK_NEXT" "Prior" "'Prior" "VK_PRIOR" "Down" "'Down" "VK_DOWN" "Right" "'Right" "VK_RIGHT" "Up" "'Up" "VK_UP" "Left" "'Left" "VK_LEFT" "End" "'End" "VK_END" "Home" "'Home" "VK_HOME" "Tab" "'Tab" "VK_TAB" "Space" "'Space" "VK_SPACE" "Return" "'Return" "VK_RETURN" "Backspace" "'Backspace" "VK_BACK" "Escape" "'Escape" "VK_ESCAPE" "F12" "'F12" "VK_F12" "F11" "'F11" "VK_F11" "F10" "'F10" "VK_F10" "F9" "'F9" "VK_F9" "F8" "'F8" "VK_F8" "F7" "'F7" "VK_F7" "F6" "'F6" "VK_F6" "F5" "'F5" "VK_F5" "F4" "'F4" "VK_F4" "F3" "'F3" "VK_F3" "F2" "'F2" "VK_F2" "F1" "'F1" "VK_F1" "VK_OEM_7" "VK_OEM_6" "VK_OEM_5" "VK_OEM_4" "VK_OEM_3" "VK_OEM_2" "VK_OEM_1" "VK_OEM_PERIOD" "VK_OEM_COMMA" "VK_OEM_PLUS" "VK_OEM_MINUS" "cons" "list" "list->table")}
      {Lisp-Entry "translate-shortcut" definition #f 572 13 572 31 ("Shortcut" "new" "dispatch-shortcut" "MSG-wParam-ref" "WM_SYSKEYDOWN" "WM_KEYDOWN" "=" "MSG-message-ref" "message" "not" "if" "get-application" "appl" "integer->char" "Symbolic-Keys" "table-ref" "or" "VK_LMENU" "VK_MENU" "VK_CONTROL" "VK_SHIFT" "/=" "and" "code" "key" ":control" "control-down?" ":shift" "shift-down?" ":alt" "alt-down?" "cons" "set!" "when" "modifier" "down?" "lambda" "try" "let" "modifiers" "define" "msg")}
      {Lisp-Entry "process-window-message" definition #f 610 13 610 35 ("unprocessed-message" "timer-pulse" "WM_TIMER" "settings-change" "WM_SETTINGCHANGE" "drop-files" "WM_DROPFILES" "focus-lose" "WM_KILLFOCUS" "focus-gain" "WM_SETFOCUS" "on-close" "WM_CLOSE" "deactivate-application" "activate-application" "WM_ACTIVATEAPP" "on-activate" "active" "'active" "inactive" "'inactive" "WA_INACTIVE" "kind" "WM_ACTIVATE" "MA_NOACTIVATE" "processed" "'processed" "list" "on-mouse-activate" "mouse-activate?" "WM_MOUSEACTIVATE" "mouse-leave" "WM_MOUSELEAVE" "call-size-change" "0" "/=" "or" "height" "width" "eq?" "unless" "state" "let" "WM_SIZE" "call-position-change" "WM_MOVE" "integer->char" "call-key-press" "WM_CHAR" "key-up" "WM_KEYUP" "key-down" "WM_KEYDOWN" "system-key-up" "WM_SYSKEYUP" "unprocessed" "system-key-down" "VK_MENU" "if" "WM_SYSKEYDOWN" "call-context-menu" "WM_CONTEXTMENU" "right-mouse-up" "WM_RBUTTONUP" "right-mouse-down" "WM_RBUTTONDOWN" "middle-mouse-up" "WM_MBUTTONUP" "middle-mouse-down" "WM_MBUTTONDOWN" "double-click" "WM_LBUTTONDBLCLK" "mouse-up" "WM_LBUTTONUP" "mouse-down" "WM_LBUTTONDOWN" "mouse-wheel" "WM_MOUSEWHEEL" "mouse-move" "WM_MOUSEMOVE" "HTCLIENT" "loword" "=" "cursor-update" "WM_SETCURSOR" "paint" "get-handle" "platform-get-update-region" "region" "with" "WM_PAINT" "erase-background" "WM_ERASEBKGND" "restored" "'restored" "else" "maximized" "'maximized" "SIZE_MAXIMIZED" "minimized" "'minimized" "SIZE_MINIMIZED" "ecase" "convert-state" "get-wheel-delta-wparam" "signed-hiword" "get-y-lparam" "signed-loword" "get-x-lparam" "define" "lparam" "wparam" "msg" "window")}
      {Lisp-Entry "set-capture" definition #f 667 20 667 31 ("SetCapture" "handle")}
      {Lisp-Entry "unset-capture" definition #f 671 20 671 33 ("ReleaseCapture")}
      {Lisp-Entry "with-platform-painting" definition #f 675 21 675 43 ("processed" "PAINTSTRUCT-free" "EndPaint" "close" "unwind-protect" "cairo_win32_surface_create" "Surface" "new" "surface" "BeginPaint" "hdc" "PAINTSTRUCT-make" "ps" "get-handle" "handle" "let" "debugging-with-platform-painting" "debug-painting?" "if" "proc" "platform-data" "window")}
      {Lisp-Entry "debugging-with-platform-painting" definition #f 690 13 690 45 ("processed" "close" "unwind-protect" "cairo_win32_surface_create" "Surface" "new" "surface" "NULL" "ValidateRgn" "GetDC" "hdc" "get-handle" "handle" "let" "proc" "platform-data" "window")}
      {Lisp-Entry "get-window-surface" definition #f 701 20 701 38 ("get-handle" "GetDC" "cairo_win32_surface_create" "window")}
      {Lisp-Entry "settings-change" definition #f 705 13 705 28 ("set-fullscreen?" "Toplevel" "is?" "when" "SPI_SETWORKAREA" "ecase" "wparam" "window")}
      {Lisp-Entry "get-style" definition #f 718 13 718 22 ("GWL_STYLE" "GetWindowLong" "handle")}
      {Lisp-Entry "set-style" definition #f 722 13 722 22 ("GWL_STYLE" "SetWindowLong" "style" "handle")}
      {Lisp-Entry "get-ex-style" definition #f 726 13 726 25 ("GWL_EXSTYLE" "GetWindowLong" "handle")}
      {Lisp-Entry "set-ex-style" definition #f 730 13 730 25 ("GWL_EXSTYLE" "SetWindowLong" "style" "handle")}
      {Lisp-Entry "child-window?" definition #f 734 13 734 26 ("WS_CHILD" "get-style" "mask-bit-set?" "handle")}
      {Lisp-Entry "get-toplevel-hwnd" definition #f 743 13 743 30 ("get-handle" "when" "get-toplevel" "toplevel" "let")}
      {Lisp-Entry "get-layered?" definition #f 754 13 754 25 ("WS_EX_LAYERED" "get-ex-style" "mask-bit-set?" "handle")}
      {Lisp-Entry "set-layered?" definition #f 758 13 758 25 ("WS_EX_LAYERED" "GetWindowLong" "mask-bit-set" "GWL_EXSTYLE" "SetWindowLong" "flag" "handle")}
      {Lisp-Entry "set-alpha-blending" definition #f 762 13 762 31 ("RDW_INVALIDATE" "RDW_ERASE" "bitwise-ior" "NULL" "RedrawWindow" "LWA_ALPHA" "0" "SetLayeredWindowAttributes" "set-layered?" "n" "handle")}
      {Lisp-Entry "track-mouse-leave" definition #f 773 20 773 37 ("TME_LEAVE" "track-mouse-event" "handle")}
      {Lisp-Entry "cancel-mouse-leave-tracking" definition #f 777 20 777 47 ("TME_LEAVE" "TME_CANCEL" "bitwise-ior" "track-mouse-event" "handle")}
      {Lisp-Entry "track-mouse-event" definition #f 781 13 781 30 ("TRACKMOUSEEVENT-free" "TrackMouseEvent" "TRACKMOUSEEVENT-dwHoverTime-set!" "TRACKMOUSEEVENT-hwndTrack-set!" "TRACKMOUSEEVENT-dwFlags-set!" "TRACKMOUSEEVENT-sizeof" "TRACKMOUSEEVENT-cbSize-set!" "TRACKMOUSEEVENT-make" "rec" "let" "HOVER_DEFAULT" "time" "time:" "flags" "handle")}
      {Lisp-Entry "platform-set-parent" definition #f 796 21 796 40 ("NULL" "get-handle" "if" "SetParent" "parent" "handle")}
      {Lisp-Entry "set-window-title" definition #f 800 21 800 37 ("SetWindowText" "title" "handle")}
      {Lisp-Entry "get-window-owner-handle" definition #f 804 21 804 44 ("GW_OWNER" "GetWindow" "handle")}
      {Lisp-Entry "platform-get-first-child" definition #f 808 21 808 45 ("GW_CHILD" "GetWindow" "handle")}
      {Lisp-Entry "platform-get-first-visible-child" definition #f 812 21 812 53 ("platform-get-next-window-handle" "platform-is-window-visible?" "if" "platform-get-first-child" "child-handle" "loop" "let" "handle")}
      {Lisp-Entry "platform-get-next-window-handle" definition #f 821 21 821 52 ("GW_HWNDNEXT" "GetWindow" "handle")}
      {Lisp-Entry "platform-is-window-visible?" definition #f 825 21 825 48 ("IsWindowVisible" "handle")}
      {Lisp-Entry "get-top-window-handle" definition #f 829 13 829 34 ("GetTopWindow" "handle")}
      {Lisp-Entry "acquire-point" definition #f 833 20 833 33 ("POINT-free" "POINT->point" "prog1" "1" "MapWindowPoints" "point->POINT" "acquired" "let" "error" "not" "when" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "acquire-rect" definition #f 842 20 842 32 ("RECT-free" "RECT->rect" "prog1" "2" "RECT->POINTS" "MapWindowPoints" "rect->RECT" "acquired" "let" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "platform-translate-to-root" definition #f 849 21 849 47 ("POINT-free" "POINT-y-ref" "POINT-x-ref" "Point" "new" "prog1" "1" "NULL" "MapWindowPoints" "point->POINT" "pos" "let" "pt" "handle")}
      {Lisp-Entry "platform-get-position" definition #f 856 21 856 42 ("RECT-free" "RECT-top-ref" "RECT-left-ref" "Point" "new" "prog1" "2" "RECT->POINTS" "NULL" "MapWindowPoints" "child-window?" "and" "when" "GetWindowRect" "RECT-make" "rect" "let" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-position" definition #f 865 21 865 42 ("SWP_NOACTIVATE" "SWP_NOZORDER" "SWP_NOSIZE" "bitwise-ior" "0" "get-v" "get-h" "NULL" "SetWindowPos" "pos" "handle")}
      {Lisp-Entry "platform-get-size" definition #f 869 21 869 38 ("RECT-free" "RECT-bottom-ref" "RECT-right-ref" "Dimension" "new" "prog1" "GetClientRect" "RECT-make" "rect" "let" "handle")}
      {Lisp-Entry "platform-get-window-size" definition #f 876 21 876 45 ("RECT-free" "RECT-top-ref" "RECT-bottom-ref" "RECT-left-ref" "RECT-right-ref" "-" "Dimension" "new" "prog1" "GetWindowRect" "RECT-make" "rect" "let" "handle")}
      {Lisp-Entry "platform-set-window-size" definition #f 884 21 884 45 ("SWP_NOACTIVATE" "SWP_NOZORDER" "SWP_NOMOVE" "SWP_NOCOPYBITS" "bitwise-ior" "get-height" "get-width" "0" "NULL" "SetWindowPos" "size" "handle")}
      {Lisp-Entry "platform-get-rect" definition #f 888 21 888 38 ("RECT-free" "RECT-bottom-ref" "RECT-right-ref" "RECT-top-ref" "RECT-left-ref" "Rect" "new" "prog1" "2" "RECT->POINTS" "NULL" "MapWindowPoints" "when" "GetWindowRect" "RECT-make" "rect" "let" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-rect" definition #f 897 21 897 38 ("SWP_NOACTIVATE" "SWP_NOZORDER" "bitwise-ior" "rect-height" "rect-width" "get-top" "get-left" "NULL" "SetWindowPos" "rect" "handle")}
      {Lisp-Entry "platform-get-bounds" definition #f 901 21 901 40 ("RECT-free" "RECT-bottom-ref" "RECT-right-ref" "RECT-top-ref" "RECT-left-ref" "Rect" "new" "prog1" "2" "NULL" "MapWindowPoints" "GetWindowRect" "RECT-make" "rect" "let" "handle")}
      {Lisp-Entry "platform-mouse-position" definition #f 909 21 909 44 ("POINT-free" "POINT-y-ref" "POINT-x-ref" "Point" "new" "prog1" "GetCursorPos" "POINT-make" "point" "let")}
      {Lisp-Entry "platform-window-from-point" definition #f 916 21 916 47 ("POINT-free" "WindowFromPoint" "prog1" "get-v" "POINT-y-set!" "get-h" "POINT-x-set!" "POINT-make" "pt" "let" "point")}
      {Lisp-Entry "platform-child-window-from-point" definition #f 924 21 924 53 ("POINT-free" "CWP_SKIPTRANSPARENT" "CWP_SKIPDISABLED" "CWP_SKIPINVISIBLE" "bitwise-ior" "ChildWindowFromPointEx" "prog1" "get-v" "POINT-y-set!" "get-h" "POINT-x-set!" "POINT-make" "pt" "let" "point" "handle")}
      {Lisp-Entry "platform-move-window" definition #f 932 21 932 41 ("MoveWindow" "cy" "cx" "y" "x" "handle")}
      {Lisp-Entry "platform-window-enabled?" definition #f 936 21 936 45 ("IsWindowEnabled" "handle")}
      {Lisp-Entry "platform-enable-window" definition #f 940 21 940 43 ("EnableWindow" "handle")}
      {Lisp-Entry "platform-disable-window" definition #f 944 21 944 44 ("EnableWindow" "handle")}
      {Lisp-Entry "platform-get-client-rect" definition #f 948 21 948 45 ("RECT-free" "RECT->rect" "prog1" "GetClientRect" "RECT-make" "rect" "let" "handle")}
      {Lisp-Entry "platform-scroll-window" definition #f 955 21 955 43 ("RECT-free" "NULL" "ScrollWindowEx" "prog1" "rect->RECT" "SW_INVALIDATE" "flags" "let" "clip-rect" "rect" "dv" "dh" "handle")}
      {Lisp-Entry "platform-invalidate-rect" definition #f 964 21 964 45 ("InvalidateRect" "lambda" "with-RECT" "when" "rect" "handle")}
      {Lisp-Entry "platform-invalidate-region" definition #f 972 21 972 47 ("get-handle" "InvalidateRgn" "when" "region" "handle")}
      {Lisp-Entry "platform-invalidate-window" definition #f 978 21 978 47 ("NULL" "InvalidateRect" "when" "handle")}
      {Lisp-Entry "platform-redraw-window" definition #f 984 21 984 43 ("RECT-free" "get-handle" "RedrawWindow" "prog1" "rect->RECT" "NULL" "not" "if" "RDW_ALLCHILDREN" "RDW_INVALIDATE" "RDW_UPDATENOW" "RDW_ERASENOW" "bitwise-ior" "flags" "let" "when" "region" "rect" "handle")}
      {Lisp-Entry "platform-get-update-rect" definition #f 996 21 996 45 ("RECT-free" "RECT->rect" "prog1" "GetUpdateRect" "RECT-make" "rect" "let" "handle")}
      {Lisp-Entry "platform-get-update-region" definition #f 1003 21 1003 47 ("get-handle" "GetUpdateRgn" "Region" "new" "region" "let" "handle")}
      {Lisp-Entry "platform-update-window" definition #f 1009 21 1009 43 ("UpdateWindow" "handle")}
      {Lisp-Entry "platform-show-noactivate" definition #f 1013 21 1013 45 ("SWP_NOSIZE" "SWP_NOMOVE" "SWP_NOACTIVATE" "SWP_SHOWWINDOW" "bitwise-ior" "0" "HWND_TOP" "SetWindowPos" "handle")}
      {Lisp-Entry "platform-hide-noactivate" definition #f 1017 21 1017 45 ("SWP_NOSIZE" "SWP_NOMOVE" "SWP_NOACTIVATE" "SWP_HIDEWINDOW" "bitwise-ior" "0" "SetWindowPos" "handle")}
      {Lisp-Entry "platform-bring-window-to-front" definition #f 1021 21 1021 51 ("BringWindowToTop" "handle")}
      {Lisp-Entry "platform-send-window-to-back" definition #f 1025 21 1025 49 ("SWP_NOSIZE" "SWP_NOMOVE" "bitwise-ior" "0" "HWND_BOTTOM" "SetWindowPos" "handle")}
      {Lisp-Entry "platform-select-foreground-window" definition #f 1029 21 1029 54 ("SetForegroundWindow" "handle")}
      {Lisp-Entry "platform-get-window-handle-title" definition #f 1033 21 1033 53 ("WCHAR-array-free" "WCHAR-string" "str" "let" "GetWindowText" "WCHAR-array-make" "buffer" "1" "GetWindowTextLength" "+" "size" "let*" "handle")}
      {Lisp-Entry "platform-lock-window-update" definition #f 1042 21 1042 48 ("LockWindowUpdate" "handle")}
      {Lisp-Entry "platform-get-focus" definition #f 1051 21 1051 39 ("GetFocus")}
      {Lisp-Entry "platform-set-focus" definition #f 1055 21 1055 39 ("SetFocus" "handle")}
      {Lisp-Entry "Current-Cursor" definition #f 1068 19 1068 33 ()}
      {Lisp-Entry "Cursor-Cache" definition #f 1071 19 1071 31 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "Cursors" definition #f 1075 19 1075 26 (":horizontal-splitter" ":vertical-splitter" ":left-arrow" ":spy" ":zoom-out" ":zoom-in" ":zoom" ":closed-hand" ":opened-hand" "Cursor-Resource" ":move" "IDC_NO" ":no" "IDC_SIZEWE" ":west-east" "IDC_SIZEALL" ":all" "IDC_HAND" ":finger" "IDC_CROSS" ":cross" "IDC_IBEAM" ":ibeam" "IDC_WAIT" ":wait" "IDC_ARROW" ":arrow" "list")}
      {Lisp-Entry "load-cursor" definition #f 1097 13 1097 24 ("table-set!" "Cursor-Cache" "table-ref" "or" "LR_LOADFROMFILE" "0" "IMAGE_CURSOR" "NULL" "LoadImage" "'cursor" "get-application" "get-resource" "parse" "ident" "let" "LoadCursorInt" "name" "load" "get-name" "number?" "if" "cursor-name" "define" "cursor")}
      {Lisp-Entry "get-named-cursor" definition #f 1116 13 1116 29 ("cadr" "error" "not" "if" "Cursors" "assq" "info" "let" "name")}
      {Lisp-Entry "get-cursor" definition #f 1123 20 1123 30 ("Current-Cursor")}
      {Lisp-Entry "set-cursor" definition #f 1127 20 1127 30 ("load-cursor" "SetCursor" "get-named-cursor" "symbol?" "if" "let" "set!" "Current-Cursor" "=" "unless" "cursor")}
      {Lisp-Entry "hide-cursor" definition #f 1134 20 1134 31 ("0" "ShowCursor" ">=" "while")}
      {Lisp-Entry "show-cursor" definition #f 1139 20 1139 31 ("0" "ShowCursor" "<" "while")}
      {Lisp-Entry "platform-redraw-view-only" definition #f 1149 21 1149 46 ("DeleteObject" "InvalidateRgn" "redraw-view" "NULL" "ValidateRect" "GetUpdateRgn" "0" "CreateRectRgn" "hrgn" "let" "hwnd" "view")}
      {Lisp-Entry "platform-get-desktop" definition #f 1162 21 1162 41 ("GetDesktopWindow")}
      {Lisp-Entry "get-work-area" definition #f 1171 20 1171 33 ("RECT-free" "RECT->rect" "prog1" "SPI_GETWORKAREA" "SystemParametersInfo" "RECT-make" "area" "ABE_BOTTOM" "-1" "ABE_RIGHT" "ABE_TOP" "0" "1" "expand-rect" "ABE_LEFT" "ecase" "ABS_ALWAYSONTOP" "ABS_AUTOHIDE" "mask-bit-set?" "and" "if" "get-taskbar-edge" "edge" "get-taskbar-state" "state" "let" "rect" "adjust-work-area-with-taskbar" "define")}
      {Lisp-Entry "get-taskbar-state" definition #f 1192 20 1192 37 ("APPBARDATA-free" "ABM_GETSTATE" "SHAppBarMessage" "prog1" "size-of" "cbSize" "'cbSize" "set" "APPBARDATA" "new" "data" "let" "get-taskbar-state" "'get-taskbar-state" "unimplemented")}
      {Lisp-Entry "get-taskbar-edge" definition #f 1201 20 1201 36 ("APPBARDATA-free" "uEdge" "'uEdge" "get" "prog1" "ABM_GETTASKBARPOS" "SHAppBarMessage" "size-of" "cbSize" "'cbSize" "set" "APPBARDATA" "new" "data" "let" "get-taskbar-edge" "'get-taskbar-edge" "unimplemented")}
      {Lisp-Entry "platform-drop-files" definition #f 1216 21 1216 40 ("POINT-free" "POINT->point" "receive-files" "DragFinish" "DragQueryPoint" "POINT-make" "pt" "files" "WPARAM->HDROP" "naturals" "WCHAR-array-free" "anchorize" "prog1" "tokenise-windows" "File" "else" "Directory" "directory" "pathname-type" "case" "new" "pathname" "WCHAR-string" "filename" "WCHAR-array-set!" "WCHAR-array-make" "buffer" "MAX_PATH" "size" "let*" "n" "lambda" "map" "0" "NULL" "#xFFFFFFFF" "DragQueryFile" "count" "let" "hdrop" "received-files" "define" "wparam" "window")}}})
"x11"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "clipboard" "platform" "x11.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.clipboard.platform.x11" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "initialize-clipboard" definition #f 54 25 54 45 ("carbon-initialize-clipboard")}
      {Lisp-Entry "initialize-clipboard" definition #f 57 25 57 45 ()}
      {Lisp-Entry "get-clipboard-text" definition #f 63 24 63 42 ("read-line" "input" "lambda" "cr" "'cr" "eol-encoding:" "UTF-16" "'UTF-16" "char-encoding:" "init:" "list" "call-with-input-u8vector" "u8vector?" "not" "if" "carbon-get-clipboard-text" "u8vect" "let" "format" "format:")}
      {Lisp-Entry "get-clipboard-text" definition #f 71 23 71 41 ("current-window" "get-handle" "x11-default-display" "x11-get-clipboard-string" "XA_CLIPBOARD" "selection" "selection:" "format" "format:")}
      {Lisp-Entry "set-clipboard-text" definition #f 77 24 77 42 ("carbon-set-clipboard-text" "get-output-u8vector" "u8vect" "display" "cr" "'cr" "eol-encoding:" "UTF-16" "'UTF-16" "char-encoding:" "list" "open-output-u8vector" "output" "let" "format" "format:" "text")}
      {Lisp-Entry "set-clipboard-text" definition #f 83 23 83 41 ("current-window" "get-handle" "x11-default-display" "x11-set-clipboard-string" "XA_CLIPBOARD" "selection" "selection:" "format" "format:" "text")}
      {Lisp-Entry "mouse-select-copy" definition #f 94 25 94 42 ("proc")}
      {Lisp-Entry "mouse-select-copy" definition #f 97 25 97 42 ("XA_PRIMARY" "selection:" "set-clipboard-text" "not" "if" "text" "let" "proc")}
      {Lisp-Entry "middle-mouse-paste" definition #f 107 25 107 43 ("proc")}
      {Lisp-Entry "middle-mouse-paste" definition #f 110 25 110 43 ("not" "if" "XA_PRIMARY" "selection:" "get-clipboard-text" "text" "let" "proc")}
      {Lisp-Entry "register-clipboard-format" definition #f 123 33 123 58 ("Formats" "table-set!" "RegisterClipboardFormat" "id" "let" "format" "name")}
      {Lisp-Entry "clipboard-format-available?" definition #f 129 33 129 60 ("available-clipboard-formats" "member?" "error" "Formats" "table-ref" "or" "get-format" "define" "format")}
      {Lisp-Entry "available-clipboard-formats" definition #f 139 33 139 60 ("get-output" "put" "/=" "when" "EnumClipboardFormats" "format" "0" "previous" "iter" "List-Factory" "new" "formats" "let" "lambda" "with-opened-clipboard")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "dialog" "platform" "x11.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.dialog.platform.x11" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "choose-file" definition #f 53 20 53 31 ("host-title:" "File-Request" "Text-File-Request" "if" "get-modal" "text?" "text?:" "anchors" "anchors:" "multiple-selection?" "multiple-selection?:" "extensions" "extensions:" "filenames" "filenames:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-new-file" definition #f 74 20 74 35 ("host-title:" "NewFile-Request" "get-modal" "anchors" "anchors:" "default-extension" "default-extension:" "initial-filename" "initial-filename:" "extensions" "extensions:" "filenames" "filenames:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-directory" definition #f 96 20 96 36 ("host-title:" "Directory-Request" "get-modal" "anchors" "anchors:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-color" definition #f 110 20 110 32 ("choose-color" "'choose-color" "unimplemented" "initial-color" "initial-color:")}
      {Lisp-Entry "choose-font" definition #f 119 20 119 31 ("choose-font" "'choose-font" "unimplemented" "initial-color" "initial-color:" "initial-font" "initial-font:")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "print" "platform" "x11.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.print.platform.x11" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "platform-print-document" definition #f 49 21 49 44 ("view")}
      {Lisp-Entry "platform-print-picture" definition #f 52 21 52 43 ("view")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "resizer" "platform" "x11.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.resizer.platform.x11" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Part-Cursor" constant #f 43 10 43 21 ()}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.ui" "src" "jazz" "ui" "window" "platform" "x11.jazz"} 1288732034
    {Lisp-Entry "jazz.ui.window.platform.x11" module #f 38 18 38 45 ("jazz")
      {Lisp-Entry "unprocessed" definition #f 56 19 56 30 ("unprocessed")}
      {Lisp-Entry "processed" definition #f 57 19 57 28 ("processed")}
      {Lisp-Entry "processed-result" definition #f 60 13 60 29 ("cadr" "0" "cdr" "null?" "processed" "'processed" "car" "eq?" "pair?" "and" "if" "return")}
      {Lisp-Entry "*locked-update*" definition #f 68 12 68 27 ()}
      {Lisp-Entry "alt-key" definition #f 73 17 73 24 ("Mod2Mask")}
      {Lisp-Entry "alt-key" definition #f 76 17 76 24 ("Mod1Mask")}
      {Lisp-Entry "Symbolic-Keys" definition #f 80 19 80 32 ("Mode" "'Mode" "XK_Mode_switch" "Divide" "'Divide" "XK_KP_Divide" "Multiply" "'Multiply" "XK_KP_Decimal" "Subtract" "'Subtract" "XK_KP_Subtract" "Add" "'Add" "XK_KP_Add" "Delete" "'Delete" "XK_Delete" "Pause" "'Pause" "XK_Pause" "Insert" "'Insert" "XK_Insert" "Next" "'Next" "XK_Next" "Prior" "'Prior" "XK_Prior" "Down" "'Down" "XK_Down" "Right" "'Right" "XK_Right" "Up" "'Up" "XK_Up" "Left" "'Left" "XK_Left" "End" "'End" "XK_End" "Home" "'Home" "XK_Home" "Tab" "'Tab" "XK_Tab" "Space" "'Space" "XK_space" "XK_KP_Enter" "Return" "'Return" "XK_Return" "XK_grave" "XK_underscore" "XK_asciicircum" "XK_bar" "XK_braceright" "XK_braceleft" "XK_at" "XK_question" "XK_asterisk" "XK_parenright" "XK_parenleft" "XK_ampersand" "XK_percent" "XK_dollar" "XK_numbersign" "XK_quotedbl" "XK_exclam" "XK_apostrophe" "XK_bracketright" "XK_backslash" "XK_bracketleft" "XK_asciitilde" "XK_slash" "XK_greater" "XK_equal" "XK_less" "XK_semicolon" "XK_colon" "XK_period" "XK_comma" "XK_plus" "XK_minus" "Backspace" "'Backspace" "XK_BackSpace" "Escape" "'Escape" "XK_Escape" "F12" "'F12" "XK_F12" "F11" "'F11" "XK_F11" "F10" "'F10" "XK_F10" "F9" "'F9" "XK_F9" "F8" "'F8" "XK_F8" "F7" "'F7" "XK_F7" "F6" "'F6" "XK_F6" "F5" "'F5" "XK_F5" "F4" "'F4" "XK_F4" "F3" "'F3" "XK_F3" "F2" "'F2" "XK_F2" "F1" "'F1" "XK_F1" "XK_9" "XK_8" "XK_7" "XK_6" "XK_5" "XK_4" "XK_3" "XK_2" "XK_1" "XK_0" "XK_Z" "XK_Y" "XK_X" "XK_W" "XK_V" "XK_U" "XK_T" "XK_S" "XK_R" "XK_Q" "XK_P" "XK_O" "XK_N" "XK_M" "XK_L" "XK_K" "XK_J" "XK_I" "XK_H" "XK_G" "XK_F" "XK_E" "XK_D" "XK_C" "XK_B" "XK_A" "XK_z" "XK_y" "XK_x" "XK_w" "XK_v" "XK_u" "XK_t" "XK_s" "XK_r" "XK_q" "XK_p" "XK_o" "XK_n" "XK_m" "XK_l" "XK_k" "XK_j" "XK_i" "XK_h" "XK_g" "XK_f" "XK_e" "XK_d" "XK_c" "XK_b" "XK_a" "cons" "list")}
      {Lisp-Entry "Windows-Table" definition #f 217 19 217 32 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "Window-Title-Table" definition #f 221 19 221 37 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "XIC-Table" definition #f 225 19 225 28 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "last-click" definition #f 229 12 229 22 ("current-time" "time->seconds")}
      {Lisp-Entry "get-window" definition #f 233 27 233 37 ("Windows-Table" "table-ref" "handle")}
      {Lisp-Entry "set-window" definition #f 237 27 237 37 ("Windows-Table" "table-set!" "window" "handle")}
      {Lisp-Entry "get-xic" definition #f 241 27 241 34 ("XIC-Table" "table-ref" "handle")}
      {Lisp-Entry "set-xic" definition #f 245 27 245 34 ("XIC-Table" "table-set!" "xic" "handle")}
      {Lisp-Entry "clear-xic" definition #f 249 27 249 36 ("XIC-Table" "table-set!" "handle")}
      {Lisp-Entry "platform-get-window-handle-title" definition #f 253 21 253 53 ("Window-Title-Table" "table-ref" "handle")}
      {Lisp-Entry "set-window-title" definition #f 257 20 257 36 ("x11-default-display" "XSetWMName" "Window-Title-Table" "table-set!" "title" "handle")}
      {Lisp-Entry "window-parent" definition #f 262 21 262 34 ("XDefaultScreen" "x11-default-display" "XRootWindow" "get-handle" "if" "get-parent" "parent" "let" "window")}
      {Lisp-Entry "window-default-parent" definition #f 269 21 269 42 ("window")}
      {Lisp-Entry "prepare-handle" definition #f 273 21 273 35 ("error" "not" "if" "create-handle" "let" "others" "handle" "bind-keywords" "rest" "window")}
      {Lisp-Entry "create-handle" definition #f 281 13 281 26 ("create-xic" "set-xic" "KeyPressMask" "PointerMotionMask" "ExposureMask" "StructureNotifyMask" "ButtonPressMask" "ButtonReleaseMask" "FocusChangeMask" "XSelectInput" "WM_DELETE_WINDOW" "XSetWMProtocols" "XdndVersion" "XdndAware" "get-handle" "XSetTransientForHint" "get-toplevel" "_NET_WM_STATE_FULLSCREEN" "wm-change-state" "set-modal" "when" "else" "_NET_WM_WINDOW_TYPE_DIALOG" "Dialog" "_NET_WM_WINDOW_TYPE_TOOLTIP" "Tooltip" "_NET_WM_WINDOW_TYPE_NORMAL" "Menu-Transient" "cond" "u32vector" "PropModeReplace" "XA_ATOM" "_NET_WM_WINDOW_TYPE" "x11-change-property" "CWBackPixel" "CWOverrideRedirect" "CWBitGravity" "+" "InputOutput" "CopyFromParent" "500" "0" "XCreateWindow" "handle" "let" "platform-get-desktop" "Desktop" "if" "216" "233" "236" "rgb-pixel" "XSetWindowAttributes-background_pixel-set!" "Popup" "is?" "XSetWindowAttributes-override_redirect-set!" "StaticGravity" "XSetWindowAttributes-bit_gravity-set!" "XDefaultVisual" "visual" "XSetWindowAttributes-make" "attr" "window-parent" "parent" "XScreenOfDisplay" "screen" "x11-default-display" "XDefaultScreen" "screen-no" "let*" "rest" "window")}
      {Lisp-Entry "wm-change-state" definition #f 331 13 331 28 ("XEvent-free" "SubstructureNotifyMask" "SubstructureRedirectMask" "bitwise-ior" "XDefaultScreen" "XRootWindow" "XSendEvent" "4" "3" "2" "1" "_NET_WM_STATE_ADD" "0" "long*-set!" "XClientMessageEvent-l-ref" "l" "let" "32" "XClientMessageEvent-format-set!" "_NET_WM_STATE" "XClientMessageEvent-message_type-set!" "XClientMessageEvent-window-set!" "ClientMessage" "XClientMessageEvent-type-set!" "XEvent-xclient-ref" "ev" "XEvent-make" "msg" "let*" "atom" "handle" "display")}
      {Lisp-Entry "destroy-window" definition #f 353 21 353 35 ("x11-default-display" "XDestroyWindow" "get-handle" "platform-set-focus" "get-parent" "parent" "focus-lose" "platform-get-focus" "=" "when" "clear-xic" "expose-store" "table-set!" "get-window" "window" "let" "handle")}
      {Lisp-Entry "dispatch-message" definition #f 364 13 364 29 ("process-window-message" "msg" "window")}
      {Lisp-Entry "show-window" definition #f 368 21 368 32 ("x11-default-display" "XMapWindow" "handle")}
      {Lisp-Entry "show-maximized" definition #f 372 21 372 35 ("show-window" "rect-size" "platform-set-window-size" "get-work-area" "rect-position" "platform-set-position" "handle")}
      {Lisp-Entry "show-restored" definition #f 378 21 378 34 ("show-window" "handle")}
      {Lisp-Entry "hide-window" definition #f 382 21 382 32 ("x11-default-display" "XUnmapWindow" "handle")}
      {Lisp-Entry "bring-window-to-top" definition #f 386 21 386 40 ("x11-default-display" "XRaiseWindow" "handle")}
      {Lisp-Entry "window-state" definition #f 390 21 390 33 ("restored" "'restored" "handle")}
      {Lisp-Entry "set-window-placement" definition #f 394 21 394 41 ("platform-set-window-size" "platform-set-position" "size" "position" "handle")}
      {Lisp-Entry "minimize-window" definition #f 399 21 399 36 ("minimize-window" "'minimize-window" "unimplemented" "handle")}
      {Lisp-Entry "maximize-window" definition #f 403 21 403 36 ("maximize-window" "'maximize-window" "unimplemented" "handle")}
      {Lisp-Entry "restore-window" definition #f 407 21 407 35 ("restore-window" "'restore-window" "unimplemented" "handle")}
      {Lisp-Entry "platform-erase-background" definition #f 411 21 411 46 ("platform-erase-background" "'platform-erase-background" "unimplemented" "handle")}
      {Lisp-Entry "setup-events" definition #f 420 21 420 33 ()}
      {Lisp-Entry "expose-store" definition #f 424 12 424 24 ("make-table")}
      {Lisp-Entry "process-message" definition #f 427 13 427 28 ("dispatch-message" "when" "get-window" "window" "let" "XAnyEvent-window-ref" "handle" "XEvent-xany-ref" "any-event" "let*" "lambda" "execute-event" "msg")}
      {Lisp-Entry "process-expose" definition #f 437 13 437 27 ("paint" "when" "table-set!" "region" "win" "expose-store" "iterate-table" "lambda" "execute-event")}
      {Lisp-Entry "process-messages-single-threaded" definition #f 447 21 447 53 ("free-fdset" "XEvent-free" "current-thread" "thread-loop?" "process-expose" "when" "process-message" "XNextEvent" "0.01" "thread-sleep!" "XPending" "=" "if" "1000" "0" "1" "+" "select" "process-inval-rects" "loop" "let" "setup-fdset" "fdset" "x11-default-display" "ConnectionNumber" "display-fd" "XEvent-make" "msg" "let*" "proper-tail-calls" "declare" "thunk")}
      {Lisp-Entry "process-messages-multi-threaded" definition #f 468 21 468 52 ("message-pump" "'message-pump" "new-thread" "XEvent-free" "current-thread" "thread-loop?" "process-expose" "XPending" "0" "=" "when" "process-message" "x11-default-display" "XNextEvent" "loop" "XEvent-make" "msg" "let" "proper-tail-calls" "declare" "process" "define")}
      {Lisp-Entry "process-window-message" definition #f 489 13 489 35 ("unprocessed" "else" "process-client-message-message" "ClientMessage" "process-selection-request-message" "SelectionRequest" "process-selection-notify-message" "SelectionNotify" "process-configure-notify-message" "ConfigureNotify" "process-key-press-message" "KeyPress" "process-motion-notify-message" "MotionNotify" "process-focus-out-message" "FocusOut" "process-focus-in-message" "FocusIn" "process-button-release-message" "ButtonRelease" "process-button-press-message" "ButtonPress" "process-expose-message" "Expose" "XEvent-type-ref" "ecase" "msg" "window")}
      {Lisp-Entry "process-expose-message" definition #f 505 13 505 35 ("processed" "region-union" "table-set!" "if" "0" "get-box" "nu=?" "unless" "expose-store" "table-ref" "old-region" "Rect" "Region" "new" "region" "XExposeEvent-height-ref" "bottom" "XExposeEvent-width-ref" "+" "right" "XExposeEvent-y-ref" "top" "XExposeEvent-x-ref" "left" "XEvent-xexpose-ref" "let" "msg" "window")}
      {Lisp-Entry "process-button-press-message" definition #f 520 13 520 41 ("-120" "Button7" "Button5" "120" "mouse-wheel" "Button6" "Button4" "or" "get-v" "get-h" "call-context-menu" "Point" "new" "get-handle" "platform-get-desktop" "acquire-point" "pt" "right-mouse-down" "Button3" "middle-mouse-down" "Button2" "mouse-down" "0" "set!" "double-click" "begin" "0.4" "last-click" "-" "<" "if" "current-time" "time->seconds" "click" "Button1" "=" "cond" "x11-set-latest-timestamp" "XButtonEvent-time-ref" "stamp" "XButtonEvent-button-ref" "button" "XButtonEvent-y-ref" "v" "XButtonEvent-x-ref" "h" "XEvent-xbutton-ref" "let" "msg" "window")}
      {Lisp-Entry "process-button-release-message" definition #f 547 13 547 43 ("right-mouse-up" "Button3" "middle-mouse-up" "Button2" "mouse-up" "Button1" "=" "cond" "x11-set-latest-timestamp" "XButtonEvent-time-ref" "stamp" "XButtonEvent-button-ref" "button" "XButtonEvent-y-ref" "v" "XButtonEvent-x-ref" "h" "XEvent-xbutton-ref" "let" "msg" "window")}
      {Lisp-Entry "process-focus-in-message" definition #f 562 13 562 37 ("activate-application" "focus-gain" "NotifyNonlinear" "NotifyInferior" "NotifyAncestor" "=" "or" "when" "XFocusChangeEvent-detail-ref" "detail" "XEvent-xfocus-ref" "let" "msg" "window")}
      {Lisp-Entry "process-focus-out-message" definition #f 572 13 572 38 ("focus-lose" "deactivate-application" "NotifyNonlinear" "NotifyInferior" "NotifyAncestor" "=" "or" "when" "XFocusChangeEvent-detail-ref" "detail" "XEvent-xfocus-ref" "let" "msg" "window")}
      {Lisp-Entry "process-motion-notify-message" definition #f 582 13 582 42 ("process-expose" "mouse-move" "XMotionEvent-y-ref" "v" "XMotionEvent-x-ref" "h" "XEvent-xmotion-ref" "MotionNotify" "x11-default-display" "XCheckTypedEvent" "when" "loop" "let" "msg" "window")}
      {Lisp-Entry "process-key-press-message" definition #f 594 13 594 38 ("unprocessed" "call-key-press" "c" "lambda" "iterate" "if" "get-handle" "get-xic" "x11-utf8-lookup-string" "str" "sym" "receive" "None" "XFilterEvent" "translate-shortcut" "or" "unless" ":alt" "alt-key" ":control" "ControlMask" ":shift" "cons" "set!" "ShiftMask" "bit-set?" "when" "x11-set-latest-timestamp" "XKeyEvent-time-ref" "stamp" "mod" "XKeyEvent-state-ref" "state" "0" "integer->char" "x11-default-display" "XKeycodeToKeysym" "keysym" "XKeyEvent-keycode-ref" "keycode" "XEvent-xkey-ref" "key-msg" "let*" "msg" "window")}
      {Lisp-Entry "process-configure-notify-message" definition #f 616 13 616 45 ("call-position-change" "restored" "'restored" "call-size-change" "XConfigureEvent-y-ref" "y" "XConfigureEvent-x-ref" "x" "XConfigureEvent-height-ref" "height" "XConfigureEvent-width-ref" "width" "XEvent-xconfigure-ref" "let" "msg" "window")}
      {Lisp-Entry "process-selection-notify-message" definition #f 626 13 626 45 ("unprocessed" "msg" "window")}
      {Lisp-Entry "process-selection-request-message" definition #f 630 13 630 46 ("get-handle" "x11-default-display" "send-clipboard-selection" "XSelectionRequestEvent-time-ref" "time" "XSelectionRequestEvent-property-ref" "property" "XSelectionRequestEvent-target-ref" "target" "XSelectionRequestEvent-selection-ref" "selection" "XSelectionRequestEvent-requestor-ref" "requestor" "XEvent-xselectionrequest-ref" "let" "msg" "window")}
      {Lisp-Entry "send-clipboard-selection" definition #f 640 13 640 37 ("None" "else" "uint8*-free" "8" "XChangeProperty" "1" "string-length" "+" "nitems" "clipboard-string" "char-string->uint8*" "data" "let" "XA_STRING" "XA_ATOM" "XA_TARGETS" "clipboard-stamp" "u32vector" "PropModeReplace" "x11-change-property" "XA_TIMESTAMP" "ecase" "XEvent-free" "NoEventMask" "XSendEvent" "XSelectionEvent-time-set!" "XSelectionEvent-property-set!" "XSelectionEvent-target-set!" "XSelectionEvent-selection-set!" "XSelectionEvent-requestor-set!" "XSelectionEvent-display-set!" "XSelectionEvent-send_event-set!" "SelectionNotify" "XSelectionEvent-type-set!" "XEvent-xselection-ref" "xselection" "XEvent-make" "ev" "let*" "send-event" "define" "time" "property" "target" "selection" "requestor" "window" "display")}
      {Lisp-Entry "process-client-message-message" definition #f 673 13 673 43 ("process-xdnd-leave" "XdndLeave" "process-xdnd-drop" "XdndDrop" "process-xdnd-position" "XdndPosition" "process-xdnd-enter" "XdndEnter" "process-wm-protocols" "WM_PROTOCOLS" "equal?" "cond" "XClientMessageEvent-message_type-ref" "type" "XEvent-xclient-ref" "let" "msg" "window")}
      {Lisp-Entry "process-wm-protocols" definition #f 688 13 688 33 ("on-close" "WM_DELETE_WINDOW" "equal?" "cond" "0" "long*-ref" "protocol" "XClientMessageEvent-l-ref" "data" "let" "msg" "window")}
      {Lisp-Entry "DndSource" definition #f 695 12 695 21 ()}
      {Lisp-Entry "DndAccept?" definition #f 696 12 696 22 ()}
      {Lisp-Entry "DndPosition" definition #f 697 12 697 23 ()}
      {Lisp-Entry "Dnd-type-supported?" definition #f 700 13 700 32 ("1" "+" "ulong*-ref" "equal?" "=" "if" "0" "i" "loop" "let" "size" "typelist" "type")}
      {Lisp-Entry "process-xdnd-enter" definition #f 709 13 709 31 ("text/uri-list" "Dnd-type-supported?" "DndAccept?" "uint8*->ulong*" "let" "XA_ATOM" "100000" "XdndTypeList" "x11-default-display" "XGetWindowProperty" "prop" "bytes-after" "nitems" "format_return" "type_return" "receive" "set!" "DndSource" "XdndVersion" ">" "or" "unless" "#x00000001" "=" "typelist?" "-24" "#xff000000" "1" "bitwise-and" "arithmetic-shift" "version" "0" "long*-ref" "source" "XClientMessageEvent-l-ref" "data" "let*" "msg" "window")}
      {Lisp-Entry "process-xdnd-position" definition #f 721 13 721 34 ("XEvent-free" "NoEventMask" "x11-default-display" "XSendEvent" "None" "XdndActionCopy" "4" "3" "#x00000000" "#x00000001" "DndAccept?" "#x00000002" "bitwise-ior" "1" "get-handle" "long*-set!" "32" "XClientMessageEvent-format-set!" "XdndStatus" "XClientMessageEvent-message_type-set!" "XClientMessageEvent-window-set!" "ClientMessage" "XClientMessageEvent-type-set!" "l" "XEvent-xclient-ref" "mess" "XEvent-make" "ev" "#x0000ffff" "-16" "#xffff0000" "bitwise-and" "arithmetic-shift" "Point" "new" "DndPosition" "set!" "begin" "DndSource" "equal?" "if" "2" "position" "0" "long*-ref" "source" "XClientMessageEvent-l-ref" "data" "let*" "msg" "window")}
      {Lisp-Entry "process-xdnd-drop" definition #f 744 13 744 30 ("XEvent-free" "NoEventMask" "XSendEvent" "XdndActionCopy" "#x00000001" "1" "long*-set!" "32" "XClientMessageEvent-format-set!" "XdndFinished" "XClientMessageEvent-message_type-set!" "XClientMessageEvent-window-set!" "XClientMessageEvent-display-set!" "ClientMessage" "XClientMessageEvent-type-set!" "l" "XEvent-xclient-ref" "mess" "XEvent-make" "ev" "DndAccept?" "set!" "DndPosition" "platform-get-desktop" "acquire-point" "receive-files" "XFree" "uint8*->char-string" "tokenise-windows" "File" "else" "Directory" "directory" "cadr" "pathname-type" "case" "new" "car" "split" "splitted" "not" "and" "x" "lambda" "collect" "files" "text/uri-list" "XdndSelection" "get-handle" "x11-default-display" "x11-retrieve-selection" "prop" "let" "DndSource" "equal?" "when" "2" "stamp" "0" "long*-ref" "source" "XClientMessageEvent-l-ref" "data" "let*" "msg" "window")}
      {Lisp-Entry "process-xdnd-leave" definition #f 776 13 776 31 ("DndPosition" "DndAccept?" "set!" "DndSource" "equal?" "when" "0" "long*-ref" "source" "XClientMessageEvent-l-ref" "data" "let*" "msg" "window")}
      {Lisp-Entry "translate-shortcut" definition #f 785 13 785 31 ("Shortcut" "new" "dispatch-shortcut" "and" "if" "get-application" "app" "Symbolic-Keys" "assv-value" "key" "let" "keysym" "mods")}
      {Lisp-Entry "get-toplevel-hwnd" definition #f 798 13 798 30 ("get-handle" "when" "get-toplevel" "toplevel" "let")}
      {Lisp-Entry "set-capture" definition #f 809 20 809 31 ("handle")}
      {Lisp-Entry "unset-capture" definition #f 814 20 814 33 ()}
      {Lisp-Entry "with-platform-painting" definition #f 824 21 824 43 ("processed" "close" "unwind-protect" "get-height" "get-width" "get-handle" "cairo_xlib_surface_create" "Surface" "new" "surface" "let" "XDefaultVisual" "visual" "x11-default-display" "XDefaultScreen" "screen-no" "let*" "proc" "platform-data" "window")}
      {Lisp-Entry "get-window-surface" definition #f 834 20 834 38 ("get-height" "get-width" "get-handle" "cairo_xlib_surface_create" "XDefaultVisual" "visual" "x11-default-display" "XDefaultScreen" "screen-no" "let*" "window")}
      {Lisp-Entry "set-alpha-blending" definition #f 840 13 840 31 ("RDW_INVALIDATE" "RDW_ERASE" "bitwise-ior" "NULL" "RedrawWindow" "LWA_ALPHA" "0" "SetLayeredWindowAttributes" "set-layered?" "n" "handle")}
      {Lisp-Entry "track-mouse-leave" definition #f 853 20 853 37 ("handle")}
      {Lisp-Entry "cancel-mouse-leave-tracking" definition #f 857 20 857 47 ("handle")}
      {Lisp-Entry "platform-set-parent" definition #f 866 21 866 40 ("0" "get-handle" "x11-default-display" "XReparentWindow" "parent" "handle")}
      {Lisp-Entry "platform-get-first-child" definition #f 870 21 870 45 ("XGetChildHandle" "0" "=" "if" "x11-default-display" "XNumberOfChildren" "num-of-children" "let" "handle")}
      {Lisp-Entry "platform-get-first-visible-child" definition #f 877 21 877 53 ("1" "+" "platform-is-window-visible?" "XGetChildHandle" "child-handle" "n" "loop" "0" "=" "if" "x11-default-display" "XNumberOfChildren" "num-of-children" "let" "handle")}
      {Lisp-Entry "platform-is-window-visible?" definition #f 890 21 890 48 ("XWindowAttributes-free" "IsViewable" "XWindowAttributes-map_state-ref" "=" "prog1" "x11-default-display" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "let" "handle")}
      {Lisp-Entry "acquire-point" definition #f 897 20 897 33 ("Point" "new" "get-v" "get-h" "x11-default-display" "XTranslateCoordinates" "y" "x" "receive" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "acquire-rect" definition #f 902 20 902 32 ("corners->rect" "get-bottom" "get-right" "right-bottom" "get-top" "get-left" "Point" "new" "acquire-point" "left-top" "let" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "platform-translate-to-root" definition #f 908 21 908 47 ("Point" "new" "get-v" "get-h" "XDefaultScreen" "XRootWindow" "x11-default-display" "XTranslateCoordinates" "y" "x" "receive" "pt" "handle")}
      {Lisp-Entry "platform-get-position-in-root" definition #f 913 21 913 50 ("platform-translate-to-root" "platform-get-position" "pt" "let" "handle")}
      {Lisp-Entry "platform-get-position" definition #f 918 21 918 42 ("Point" "new" "XWindowAttributes-free" "XWindowAttributes-y-ref" "y" "XWindowAttributes-x-ref" "x" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "XQueryTree-parent" "parent" "iterate" "neq?" "if" "x11-default-display" "XQueryTree-root" "root" "let" "top-parent" "define" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-position" definition #f 938 21 938 42 ("XEvent-free" "process-message" "StructureNotifyMask" "XWindowEvent" "get-v" "get-h" "x11-default-display" "XMoveWindow" "XEvent-make" "event" "let" "pos" "handle")}
      {Lisp-Entry "platform-get-size" definition #f 946 21 946 38 ("Dimension" "new" "XWindowAttributes-free" "XWindowAttributes-height-ref" "height" "XWindowAttributes-width-ref" "width" "x11-default-display" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "let" "handle")}
      {Lisp-Entry "platform-get-window-size" definition #f 955 21 955 45 ("platform-get-size" "handle")}
      {Lisp-Entry "platform-set-window-size" definition #f 959 21 959 45 ("XEvent-free" "process-message" "StructureNotifyMask" "XWindowEvent" "get-height" "get-width" "x11-default-display" "XResizeWindow" "XEvent-make" "event" "let" "size" "handle")}
      {Lisp-Entry "platform-get-rect" definition #f 967 21 967 38 ("Rect" "new" "get-height" "b" "get-width" "+" "r" "get-v" "t" "get-h" "l" "let*" "platform-get-size" "size" "platform-get-position" "position" "let" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-rect" definition #f 977 21 977 38 ("SWP_NOACTIVATE" "SWP_NOZORDER" "bitwise-ior" "rect-height" "rect-width" "get-top" "get-left" "NULL" "SetWindowPos" "platform-set-rect" "'platform-set-rect" "unimplemented" "rect" "handle")}
      {Lisp-Entry "platform-get-bounds" definition #f 983 21 983 40 ("RECT-free" "RECT-bottom-ref" "RECT-right-ref" "RECT-top-ref" "RECT-left-ref" "Rect" "new" "prog1" "2" "NULL" "MapWindowPoints" "GetWindowRect" "RECT-make" "rect" "let" "platform-get-bounds" "'platform-get-bounds" "unimplemented" "handle")}
      {Lisp-Entry "platform-mouse-position" definition #f 993 21 993 44 ("Point" "new" "XDefaultScreen" "XRootWindow" "x11-default-display" "XMousePosition" "y" "x" "receive")}
      {Lisp-Entry "platform-window-from-point" definition #f 998 21 998 47 ("XDefaultScreen" "XRootWindow" "x11-default-display" "XMouseWindow" "get-window" "point")}
      {Lisp-Entry "platform-move-window" definition #f 1002 21 1002 41 ("MoveWindow" "platform-move-window" "'platform-move-window" "unimplemented" "cy" "cx" "y" "x" "handle")}
      {Lisp-Entry "platform-window-enabled?" definition #f 1008 21 1008 45 ("IsWindowEnabled" "platform-window-enabled?" "'platform-window-enabled?" "unimplemented" "handle")}
      {Lisp-Entry "platform-enable-window" definition #f 1014 21 1014 43 ("handle")}
      {Lisp-Entry "platform-disable-window" definition #f 1019 21 1019 44 ("handle")}
      {Lisp-Entry "platform-get-client-rect" definition #f 1024 21 1024 45 ("0" "Rect" "new" "XWindowAttributes-free" "XWindowAttributes-height-ref" "height" "XWindowAttributes-width-ref" "width" "x11-default-display" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "let" "handle")}
      {Lisp-Entry "scroll-invalidate" definition #f 1033 13 1033 30 (">" "+" "Rect" "new" "platform-invalidate-rect" "0" "<" "when" "get-bottom" "mb" "get-right" "mr" "get-top" "mt" "get-left" "ml" "let" "rect-union" "modified-rect" "offset-rect" "dst-rect" "rect-intersection" "let*" "clip-rect" "src-rect" "dv" "dh" "handle")}
      {Lisp-Entry "platform-scroll-window" definition #f 1052 21 1052 43 ("platform-update-window" "scroll-invalidate" "XRectangle-free" "XFreeGC" "+" "XCopyArea" "1" "XSetClipRectangles" "get-top" "get-bottom" "XRectangle-height-set!" "get-left" "get-right" "-" "XRectangle-width-set!" "XRectangle-x-set!" "XRectangle-make" "xrect" "0" "x11-default-display" "XCreateGC" "gc" "let" "platform-invalidate-rect" "clip-rect" "rect" "dv" "dh" "handle")}
      {Lisp-Entry "inval-rects" definition #f 1069 12 1069 23 ("make-table")}
      {Lisp-Entry "validate-inval-rect" definition #f 1072 13 1072 32 ("new" "or" "h" "-" "w" "get-height" "get-bottom" "b" "get-width" "get-right" ">" "r" "get-top" "t" "get-left" "<" "l" "get-size" "size" "let" "0" "Rect" "=" "if" "window" "rect")}
      {Lisp-Entry "process-inval-rects" definition #f 1091 13 1091 32 ("x11-default-display" "XInvalidateRect" "h" "-" "w" "get-bottom" "b" "get-right" "r" "get-top" "t" "get-left" "l" "when" "get-window" "window" "let" "table-set!" "rect" "handle" "lambda" "inval-rects" "iterate-table")}
      {Lisp-Entry "platform-invalidate-rect" definition #f 1106 21 1106 45 ("rect-union" "cond" "table-set!" "or" "get-window" "validate-inval-rect" "new-rect" "inval-rects" "table-ref" "old-rect" "let" "and" "when" "rect" "handle")}
      {Lisp-Entry "platform-invalidate-region" definition #f 1120 21 1120 47 ("get-rectangles" "platform-invalidate-rect" "rect" "lambda" "for-each" "region" "handle")}
      {Lisp-Entry "platform-invalidate-window" definition #f 1126 21 1126 47 ("get-height" "get-width" "0" "Rect" "new" "platform-invalidate-rect" "platform-get-size" "size" "let" "handle")}
      {Lisp-Entry "platform-redraw-window" definition #f 1131 21 1131 43 ("Region" "new" "get-window" "paint" "if" "region" "rect" "handle")}
      {Lisp-Entry "platform-get-update-rect" definition #f 1137 21 1137 45 ("RECT-free" "RECT->rect" "prog1" "GetUpdateRect" "RECT-make" "rect" "let" "platform-get-update-rect" "'platform-get-update-rect" "unimplemented" "handle")}
      {Lisp-Entry "platform-get-update-region" definition #f 1146 21 1146 47 ("get-handle" "GetUpdateRgn" "Region" "new" "region" "let" "platform-get-update-region" "'platform-get-update-region" "unimplemented" "handle")}
      {Lisp-Entry "platform-redraw-view-only" definition #f 1154 21 1154 46 ("platform-invalidate-rect" "get-height" "get-width" "0" "Rect" "new" "rct" "platform-get-size" "size" "let*" "redraw-view" "handle" "view")}
      {Lisp-Entry "platform-update-window" definition #f 1162 21 1162 43 ("Region" "new" "get-window" "paint" "table-set!" "when" "inval-rects" "table-ref" "rect" "let" "handle")}
      {Lisp-Entry "platform-show-noactivate" definition #f 1169 21 1169 45 ("show-window" "handle")}
      {Lisp-Entry "platform-hide-noactivate" definition #f 1173 21 1173 45 ("hide-window" "handle")}
      {Lisp-Entry "platform-bring-window-to-front" definition #f 1177 21 1177 51 ("x11-default-display" "XRaiseWindow" "handle")}
      {Lisp-Entry "platform-send-window-to-back" definition #f 1181 21 1181 49 ("x11-default-display" "XLowerWindow" "handle")}
      {Lisp-Entry "platform-select-foreground-window" definition #f 1185 21 1185 54 ("x11-default-display" "XRaiseWindow" "handle")}
      {Lisp-Entry "platform-lock-window-update" definition #f 1194 21 1194 48 ("handle")}
      {Lisp-Entry "platform-get-focus" definition #f 1203 21 1203 39 ("x11-default-display" "XGetInputFocus" "state" "win" "receive")}
      {Lisp-Entry "platform-set-focus" definition #f 1208 21 1208 39 ("CurrentTime" "RevertToNone" "XSetInputFocus" "platform-is-window-visible?" "and" "when" "x11-default-display" "XFlush" "handle")}
      {Lisp-Entry "Current-Cursor" definition #f 1221 19 1221 33 ()}
      {Lisp-Entry "load-cursor" definition #f 1225 13 1225 24 ("load-cursor" "'load-cursor" "unimplemented" "cursor")}
      {Lisp-Entry "get-named-cursor" definition #f 1229 13 1229 29 ("cadr" "and" "Cursors" "assq" "info" "let" "name")}
      {Lisp-Entry "get-cursor" definition #f 1234 20 1234 30 ("Current-Cursor")}
      {Lisp-Entry "set-cursor" definition #f 1238 20 1238 30 ("get-handle" "x11-default-display" "XDefineCursor" "Current-Cursor" "set!" "get-toplevel" "toplevel" "get-named-cursor" "let" "symbol?" "when" "cursor")}
      {Lisp-Entry "hide-cursor" definition #f 1250 20 1250 31 ()}
      {Lisp-Entry "show-cursor" definition #f 1254 20 1254 31 ()}
      {Lisp-Entry "platform-get-desktop" definition #f 1263 21 1263 41 ("XDefaultScreen" "x11-default-display" "XRootWindow")}
      {Lisp-Entry "get-work-area" definition #f 1267 20 1267 33 ("get-bottom-margin" "get-height" "get-right-margin" "get-width" "-" "0" "Rect" "new" "platform-get-desktop" "platform-get-size" "size" "let")}
      {Lisp-Entry "get-right-margin" definition #f 1277 17 1277 33 ("64")}
      {Lisp-Entry "get-bottom-margin" definition #f 1279 17 1279 34 ("64")}
      {Lisp-Entry "get-right-margin" definition #f 1282 16 1282 32 ("0")}
      {Lisp-Entry "get-bottom-margin" definition #f 1284 16 1284 33 ("0")}
      {Lisp-Entry "platform-drop-files" definition #f 1293 21 1293 40 ("platform-drop-files" "'platform-drop-files" "unimplemented" "temp" "window")}}})
