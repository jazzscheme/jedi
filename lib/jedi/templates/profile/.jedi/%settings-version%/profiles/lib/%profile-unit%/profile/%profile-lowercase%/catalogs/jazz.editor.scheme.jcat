"Scheme-Explorer"
 ({Lisp-File-Entry {File jazz.editor.scheme "src" "jazz" "editor" "scheme" "text" "Scheme-Explorer.jazz"} 1289506007
    {Lisp-Entry "jazz.editor.scheme.text.Scheme-Explorer" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Scheme-Explorer" class #f 49 7 49 22 ("Lisp-Explorer")
        {Lisp-Entry "get-syntax" method #f 52 20 52 30 ("scheme" "'scheme")}
        {Lisp-Entry "expression-comment?" method #f 56 20 56 39 ("nextmethod" "get-range" "string=?" "or" "get-end" "get-start" "get-range-string" "range" "get-string" "define" "mark")}
        {Lisp-Entry "declaration-name?" method #f 69 20 69 37 ("nextmethod" "define-type-of-symbol?" "or" "name")}
        {Lisp-Entry "define-type-of-symbol?" definition #f 74 15 74 37 ("symbol->string" "starts-with?" "symbol?" "and" "symbol")}
        {Lisp-Entry "find-named-walker" method #f 84 20 84 37 ("nextmethod" "else" "walk-c-define" ":c-define" "walk-c-initialize" ":c-initialize" "walk-c-declare" ":c-declare" "walk-unknown" ":unknown" "walk-native" ":native" "walk-type" ":type" "walk-define-class" ":define-class" "walk-macro" ":macro" "walk-define-syntax" ":define-syntax" "walk-define-macro" ":define-macro" "walk-generic/specific" ":generic/specific" "walk-define" ":define" "walk-declare" ":declare" "walk-keyword" ":keyword" "walk-data" ":data" "walk-module" ":module" "walk-unit" ":unit" "walk-block" ":block" "walk-digest" ":digest" "walk-manifest" ":manifest" "walk-package" ":package" "walk-repository" ":repository" "walk-begin" ":begin" "walk-cond-expand" ":cond-expand" "case" "walk-define-type-of" "define-type-of-symbol?" "if" "name")}
        {Lisp-Entry "walk-modifiers" method #f 115 11 115 25 ("set!" "start" "find-marked-symbol" "memq?" "forward-constituent" "text-constituent?" "and" "when" "0" "char-forward" "c0" "set-start" "forward-whites" "iterate" "end" "copy" "old" "let" "modifiers" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-keywords" method #f 130 11 130 24 ("set!" "code" "'code" "walk-expression" "forward-expr" "start" "memq?" "find-marked-symbol" "marked-keyword" "forward-constituent" "text-constituent?" "and" "when" "0" "char-forward" "c0" "set-start" "forward-whites" "iterate" "end" "copy" "old" "let" "keywords" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-begin" method #f 148 11 148 21 ("walk-declarations" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-cond-expand" method #f 152 11 152 27 ("exit-list" "walk-declarations" "feature" "'feature" "code" "'code" "end" "start" "'symbol" "get-kind" "eq?" "when" "forward-expr" "set!" "if" "enter-list" "enter?" "not" "while" "done?" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-repository" method #f 165 11 165 26 ("repository" "'repository" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-package" method #f 168 11 168 23 ("package" "'package" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-manifest" method #f 171 11 171 24 ("manifest" "'manifest" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-digest" method #f 174 11 174 22 ("digest" "'digest" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-block" method #f 177 11 177 21 ("block" "'block" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-unit" method #f 180 11 180 20 ("unit" "'unit" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-module" method #f 183 11 183 22 ("module" "'module" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-namespace" method #f 187 11 187 25 ("walk-declarations" "get-keywords" "walk-keywords" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "namespace-kind" "context")}
        {Lisp-Entry "walk-data" method #f 198 11 198 20 ("module" "'module" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-keyword" method #f 202 11 202 23 ("end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-declare" method #f 206 11 206 23 ("end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-define-type-of" method #f 210 11 210 30 ("define" "'define" "get-expression-syntax" "walk-define" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-define" method #f 214 11 214 22 ("code" "'code" "walk-expressions" "exit-list" "walk-parameters" "get-marked" "define" "'define" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-generic/specific" method #f 231 11 231 32 ("walk-expressions" "walk-parameters" "exit-list" "tag" "'tag" "code" "'code" "list" "generic/specific" "'generic/specific" "set!" "typename" "get-marked" "name" "get-end" "get-start" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "forward-whites" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-macro" method #f 253 11 253 21 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "macro" "'macro" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-define-macro" method #f 266 11 266 28 ("exit-list" "code" "'code" "walk-expressions" "get-marked" "define-macro" "'define-macro" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-define-syntax" method #f 283 11 283 29 ("exit-list" "code" "'code" "walk-expressions" "get-marked" "define-macro" "'define-macro" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-define-class" method #f 301 11 301 28 ("walk-expressions" "get-marked" "define-class" "'define-class" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "forward-whites" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-native" method #f 311 11 311 22 ("walk-expressions" "symbol-documented?" "native" "'native" "set!" "get-marked" "name" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "forward-whites" "get-modifiers" "walk-modifiers" "end" "start" "entry" "string-length" "1" "+" "substring" "not" "if" "reversed?:" "find" "pos" "let" "str" "parse-identifier" "define" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-type" method #f 329 11 329 20 ("walk-expressions" "get-marked" "type" "'type" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-declare" method #f 338 11 338 25 ("walk-expressions" "end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-initialize" method #f 343 11 343 28 ("walk-expressions" "end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-define" method #f 348 11 348 24 ("walk-expressions" "exit-list" "find-marked-symbol" "symbol-documented?" "get-marked" "c-definition" "'c-definition" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "get-modifiers" "walk-modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "symbol-documentation" method #f 364 19 364 39 ("get-definition" "and" "when" "doc" "symbol")}
        {Lisp-Entry "symbol-documented?" method #f 369 19 369 37 ("symbol-documentation" "doc" "symbol")}}}})
"Scheme-Parser"
 ({Lisp-File-Entry {File jazz.editor.scheme "src" "jazz" "editor" "scheme" "parser" "Scheme-Parser.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.scheme.parser.Scheme-Parser" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Scheme-Parser" class #f 44 7 44 20 ("Lisp-Parser")
        {Lisp-Entry "explorer-class" method #f 47 20 47 34 ("Scheme-Explorer" "file")}
        {Lisp-Entry "text-view-class" method #f 51 20 51 35 ("Scheme-Text-View")}}}})
"Scheme-Syntax"
 ({Lisp-File-Entry {File jazz.editor.scheme "src" "jazz" "editor" "scheme" "syntax" "Scheme-Syntax.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.scheme.syntax.Scheme-Syntax" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Scheme-Syntax" class #f 45 7 45 20 ("Lisp-Syntax")
        {Lisp-Entry "translate-key" method #f 53 20 53 33 ("translate-lisp-key" "scheme-text" "documents" "get-preferences" "get-translate-keys?" "not" "if" "key")}
        {Lisp-Entry "get-constituent-test" method #f 64 20 64 40 ("scheme-constituent?")}}}})
"Scheme-Text-Actions"
 ({Lisp-File-Entry {File jazz.editor.scheme "src" "jazz" "editor" "scheme" "text" "Scheme-Text-Actions.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.scheme.text.Scheme-Text-Actions" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Scheme-Text-Actions" class #f 45 7 45 26 ("Actions")}}})
"Scheme-Text-Preferences"
 ({Lisp-File-Entry {File jazz.editor.scheme "src" "jazz" "editor" "scheme" "text" "Scheme-Text-Preferences.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.scheme.text.Scheme-Text-Preferences" module #f 37 18 37 65 ("jazz")
      {Lisp-Entry "Scheme-Text-Preferences" class #f 48 7 48 30 ("completions:" "Dark-Orange" "feature-style:" "quotation-style:" "named-string-style:" "delimited-string-style:" "string-style:" "boolean-style:" "number-style:" "specifier-style:" "Dark-Purple" "tag-style:" "Ochre" "char-style:" "keyword-style:" "Dark-Green" "declaration-style:" "Dark-Blue" "declaration-keyword-style:" "Text-Gray" "expr-comment-style:" "Purple" "comment-style:" "Dark-Red" "color:" "Text-Style-Preference" "title-style:" "title:" "Lisp-Text-Preferences")
        {Lisp-Entry "get-class-descriptor" method #f 98 25 98 45 ("Scheme-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 107 11 107 17 ()
        {Lisp-Entry "Scheme-Text-Preferences-Descriptor" class #f 113 7 113 41 ("match-action" "translate-keys?" "keyword-style" "declaration-style" "expr-comment-style" "comment-style" "title-style" "completions" "categorized:" "Document-Preferences-Descriptor")}}}})
"Scheme-Text-View"
 ({Lisp-File-Entry {File jazz.editor.scheme "src" "jazz" "editor" "scheme" "text" "Scheme-Text-View.jazz"} 1289940794
    {Lisp-Entry "jazz.editor.scheme.text.Scheme-Text-View" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Scheme-Text-View" class #f 50 7 50 23 ("tooltip?:" "Lisp-Text-View")
        {Lisp-Entry "install" method #f 57 20 57 27 ("Red" "Walk-Fatal" "'Walk-Fatal" "Color" "frame:" "base:" "Reference" "'Reference" "name:" "Text-Style" "new" "add-style" "get-feature-style" "Feature" "'Feature" "get-quotation-style" "Quotation" "'Quotation" "get-named-string-style" "Named-String" "'Named-String" "get-delimited-string-style" "Delimited-String" "'Delimited-String" "get-string-style" "String" "'String" "get-boolean-style" "Boolean" "'Boolean" "get-char-style" "Char" "'Char" "get-specifier-style" "Specifier" "'Specifier" "get-tag-style" "Tag" "'Tag" "get-keyword-style" "Keyword" "'Keyword" "get-declaration-style" "Declaration" "'Declaration" "get-declaration-keyword-style" "Declaration-Keyword" "'Declaration-Keyword" "get-expr-comment-style" "Expr-Comment" "'Expr-Comment" "get-comment-style" "Comment" "'Comment" "get-title-style" "Title" "'Title" "add-style-preference" "default-style" "get-name" "default" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" method #f 80 25 80 38 ("scheme-text" "'scheme-text" "rest")}
        {Lisp-Entry "default-extension" method #f 84 20 84 37 ()}
        {Lisp-Entry "extensions" method #f 88 20 88 30 ()}
        {Lisp-Entry "new-syntax" method #f 92 20 92 30 ("Scheme-Syntax" "new")}
        {Lisp-Entry "focus-actions" method #f 101 20 101 33 ("nextmethod" "scheme-text" "'scheme-text" "find-actions" "cons")}
        {Lisp-Entry "get-context-menu" method #f 111 20 111 36 ("Scheme-Text-Menu" "new")}
        {Lisp-Entry "default-preferences" definition #f 120 14 120 33 ("completions:" "Dark-Blue" "keyword-style:" "Dark-Green" "declaration-style:" "Dark-Orange" "expr-comment-style:" "Purple" "comment-style:" "Dark-Red" "color:" "Text-Style-Preference" "title-style:" "instantiate")}
        {Lisp-Entry "preferences" method #f 132 20 132 31 ("scheme-text" "documents" "get-preferences")}
        {Lisp-Entry "declaration-style" method #f 136 20 136 37 ("Declaration" "'Declaration" "documented?")}
        {Lisp-Entry "get-readtable" method #f 145 20 145 33 ("scheme-readtable")}
        {Lisp-Entry "prepare-expressions" method #f 154 20 154 39 ("scheme" "'scheme" "list" "get-col" "col" "get-start" "get-line" "line" "get-string" "str" "get-locat-container" "container" "let" "range")}
        {Lisp-Entry "explorer-class" method #f 167 20 167 34 ("Scheme-Explorer")}}
      {Lisp-Entry "Scheme-Text-Menu" class #f 176 7 176 23 ("paste" "copy" "view" "french:" "english:" "Locales" "cut" "edit-references" "edit-definitions" "code-text" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "evaluate" "name:" "Context-Menu")}}})
"_scheme"
 ({Lisp-File-Entry {File jazz.editor.scheme "src" "jazz" "editor" "scheme" "_scheme.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.scheme" module #f 37 8 37 26 ("jazz")}})
"autoload"
 ({Lisp-File-Entry {File jazz.editor.scheme "src" "jazz" "editor" "scheme" "autoload.jazz"} 1288732033
    {Lisp-Entry "jazz.editor.scheme.autoload" module #f 37 18 37 45 ("jazz")}})
"forms"
 ({Lisp-File-Entry {File jazz.editor.scheme "src" "jazz" "editor" "scheme" "forms.jazz"} 1289931232
    {Lisp-Entry "jazz.editor.scheme.forms" module #f 37 8 37 32 ("jazz")
      {Lisp-Entry "repository" define ("expression") 49 19 49 29 (":repository" "walk:" "1" "tabulate:" "repository" "dialect:")}
      {Lisp-Entry "package" define ("expression") 60 19 60 26 (":package" "walk:" "1" "tabulate:" "package" "dialect:")}
      {Lisp-Entry "root" define ("expression") 66 19 66 23 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "library" define ("expression") 70 19 70 26 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "install" define ("expression") 74 19 74 26 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "binary?" define ("expression") 78 19 78 26 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "char-encoding" define ("expression") 82 19 82 32 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "project" define ("expression") 86 19 86 26 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "products" define ("expression") 90 19 90 27 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "profiles" define ("expression") 94 19 94 27 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "manifest" define ("expression") 104 19 104 27 (":manifest" "walk:" "1" "tabulate:" "manifest" "dialect:")}
      {Lisp-Entry "digest" define ("expression") 115 19 115 25 (":digest" "walk:" "0" "tabulate:" "digest" "dialect:")}
      {Lisp-Entry "block" define ("expression") 126 19 126 24 (":block" "walk:" "-1" "tabulate:" "declaration?:" "namespace?:" "scheme" "dialect:")}
      {Lisp-Entry "unit" define ("expression") 139 19 139 23 (":unit" "walk:" "-1" "tabulate:" "public" "protected" "modifiers:" "declaration?:" "namespace?:" "scheme" "dialect:")}
      {Lisp-Entry "module" define ("expression") 153 19 153 25 (":module" "walk:" "-1" "tabulate:" "public" "protected" "modifiers:" "declaration?:" "namespace?:" "scheme" "dialect:")}
      {Lisp-Entry "import" define ("expression") 162 19 162 25 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "export" define ("expression") 166 19 166 25 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "require" define ("expression") 170 19 170 26 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "data" define ("expression") 175 19 175 23 (":data" "walk:" "-1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "define" define ("expression") 186 19 186 25 (":define" "walk:" "1" "tabulate:" "inner?:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-macro" define ("expression") 193 19 193 31 (":define-macro" "walk:" "1" "tabulate:" "inner?:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-syntax" define ("expression") 200 19 200 32 (":define-syntax" "walk:" "1" "tabulate:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "modifiers:" "inner?:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "syntax-rules" define ("expression") 208 19 208 31 ("1" "tabulate:")}
      {Lisp-Entry "native" define ("expression") 217 19 217 25 (":native" "walk:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "modifiers:" "declaration?:")}
      {Lisp-Entry "native-syntax" define ("expression") 222 19 222 32 (":native" "walk:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "modifiers:" "declaration?:")}
      {Lisp-Entry "begin" define ("expression") 233 19 233 24 (":begin" "walk:" "0" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "call/cc" define ("expression") 238 19 238 26 ("0" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "case" define ("expression") 242 19 242 23 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "cond-expand" define ("expression") 246 19 246 30 (":cond-expand" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "do" define ("expression") 250 19 250 21 ("2" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "if" define ("expression") 254 19 254 21 ("2" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "lambda" define ("expression") 258 19 258 25 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "let" define ("expression") 262 19 262 22 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "let*" define ("expression") 266 19 266 23 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "letrec" define ("expression") 270 19 270 25 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "let-syntax" define ("expression") 274 19 274 29 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "letrec-syntax" define ("expression") 278 19 278 32 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "let-syntax" define ("expression") 282 19 282 29 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "letrec-syntax" define ("expression") 286 19 286 32 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "parameterize" define ("expression") 290 19 290 31 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "receive" define ("expression") 294 19 294 26 ("2" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "c-define" define ("expression") 304 19 304 27 (":c-define" "walk:" "5" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "c-define-type" define ("expression") 310 19 310 32 (":type" "walk:" "gambit" "dialect:")}
      {Lisp-Entry "c-lambda" define ("expression") 314 19 314 27 (":type" "walk:" "1" "tabulate:" "gambit" "dialect:")}
      {Lisp-Entry "declare" define ("expression") 319 19 319 26 (":declare" "walk:" "gambit" "dialect:")}
      {Lisp-Entry "define-check-type" define ("expression") 323 19 323 36 (":define" "walk:" "2" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-fail-check-type" define ("expression") 329 19 329 41 (":define" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-library-type" define ("expression") 335 19 335 38 (":define" "walk:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-library-type-of-exception" define ("expression") 340 19 340 51 (":define" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-prim" define ("expression") 346 19 346 30 (":define" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-runtime-macro" define ("expression") 352 19 352 39 (":define-macro" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-runtime-syntax" define ("expression") 358 19 358 40 (":define-macro" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-type" define ("expression") 364 19 364 30 (":define" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "##define-macro" define ("expression") 370 19 370 33 (":define-macro" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "##include" define ("expression") 376 19 376 28 (":keyword" "walk:" "gambit" "dialect:")}
      {Lisp-Entry "##core#lambda" define ("expression") 386 19 386 32 ("1" "tabulate:" "chicken" "dialect:")}
      {Lisp-Entry "jazz.define" define ("expression") 396 19 396 30 (":define" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-check-macro" define ("expression") 402 19 402 42 ("name-mangler:" ":define-macro" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-class" define ("expression") 409 19 409 36 ("name-mangler:" ":define-class" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-class-runtime" define ("expression") 415 19 415 44 ("name-mangler:" ":define-class" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-feature" define ("expression") 421 19 421 38 (":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-generic" define ("expression") 426 19 426 38 (":generic/specific" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-global" define ("expression") 431 19 431 37 ("name-mangler:" ":define-macro" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-literal" define ("expression") 437 19 437 38 ("name-mangler:" ":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-literal-walker" define ("expression") 443 19 443 45 ("name-mangler:" ":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-macro" define ("expression") 449 19 449 36 ("name-mangler:" ":define-macro" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-method" define ("expression") 456 19 456 37 (":generic/specific" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-option" define ("expression") 462 19 462 37 ("name-mangler:" ":define-macro" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-remote" define ("expression") 469 19 469 37 (":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-setting" define ("expression") 474 19 474 38 ("name-mangler:" ":define-macro" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-special" define ("expression") 481 19 481 38 (":define-macro" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-specific" define ("expression") 486 19 486 39 (":generic/specific" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-syntax" define ("expression") 491 19 491 37 ("name-mangler:" ":define-macro" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-variable" define ("expression") 498 19 498 39 ("name-mangler:" ":define-macro" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-virtual" define ("expression") 504 19 504 38 ("signature-mangler:" ":generic/specific" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-virtual-runtime" define ("expression") 510 19 510 46 ("signature-mangler:" ":generic/specific" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-virtual-syntax" define ("expression") 516 19 516 45 (":generic/specific" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-dialect" define ("expression") 521 19 521 38 ("name-mangler:" ":define" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-walker-special" define ("expression") 528 19 528 45 ("name-mangler:" ":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-walker-syntax" define ("expression") 534 19 534 44 ("name-mangler:" ":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.define-walker-macro" define ("expression") 540 19 540 43 ("name-mangler:" ":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "instantiate" define ("expression") 552 19 552 30 (":define-macro" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "specialize" define ("expression") 556 19 556 29 (":define-macro" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "template" define ("expression") 560 19 560 27 (":define-macro" "walk:" "1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%assert" define ("expression") 565 19 565 27 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%assertion" define ("expression") 569 19 569 30 ("2" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%core-assert" define ("expression") 573 19 573 32 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%core-assertion" define ("expression") 577 19 577 35 ("2" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%debug-assert" define ("expression") 581 19 581 33 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%debug-assertion" define ("expression") 585 19 585 36 ("2" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%force-uniqueness" define ("expression") 589 19 589 37 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%when" define ("expression") 593 19 593 25 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.iterate-table" define ("expression") 597 19 597 37 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "jazz.iterate-table-safe" define ("expression") 601 19 601 42 ("1" "tabulate:" "scheme" "dialect:")}}})
