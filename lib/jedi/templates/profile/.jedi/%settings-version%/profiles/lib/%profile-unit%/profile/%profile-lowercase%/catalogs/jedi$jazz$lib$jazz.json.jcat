"_json"
 ({Lisp-File-Entry {File :context "src" "jazz" "json" "_json.jazz"} 245733917. jazz
    {Lisp-Entry "jazz.json" module () () #f #f 37 8 37 17 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.io")}
      {Lisp-Entry "make-json-readtable" definition () () #f #f 48 13 48 32 (":invalid" "readtable-paren-keyword-set!" ":object" "readtable-brace-keyword-set!" ":array" "readtable-bracket-keyword-set!" "readtable-char-handler" "readtable-char-handler-set!" "make-standard-readtable" "readtable" "let")}
      {Lisp-Entry "json-readtable" definition (public) () #f #f 58 19 58 33 ("make-json-readtable")}
      {Lisp-Entry "read-json" definition (public) ("port") #f #f 67 20 67 29 ("read" "error" "null" "false" "true" "sym" ":array" "cdr" ":object" "car" "case" "map" "elements" "convert-array" "cons" "if" "value" "key" "lambda" "map-property" "list->table" "members" "convert-object" "invalid" "else" "convert-symbol" "symbol?" "convert-pair" "pair?" "number?" "string?" "cond" "obj" "convert" "define" "port")}
      {Lisp-Entry "print-json" definition (public) ("json" "port") #f #f 110 20 110 30 ("not-null?" "+" "newline" "value" "key" "bind" "remain" "remainder" "car" "key:" "table->list" "string<?" "sort" "in" "pair" "for" "loop" "set!" "element" "lambda" "for-each" "first?" "print-object" "table?" "print-array" "pair?" "real?" "exact->inexact" "rational?" "inexact->exact" "write" "exact?" "if" "integer?" "number?" "format" "string?" "null?" "display" "eq?" "else" "substring" "1" "string-length" ">" "and" "string=?" "string-append" "0" "string-ref" "cond" "number->string" "str" "standardize-real" "depth" "obj" "print" "get-output-string" "write-char" "eqv?" "or" "when" "eof-object?" "unless" "read-char" "c" "iterate" "open-input-string" "reader" "open-output-string" "printer" "let" "string" "escape-double-quotes" "define" "port" "json")}
      {Lisp-Entry "load-json" definition (public) ("file") #f #f 191 20 191 29 ("read-json" "json-readtable" "readtable:" "path-settings" "call-with-input-file" "file")}
      {Lisp-Entry "save-json" definition (public) ("json" "file") #f #f 196 20 196 29 ("newline" "print-json" "output" "lambda" "path-settings" "call-with-output-file" "file" "json")}
      {Lisp-Entry "string->json" definition (public) ("str") #f #f 203 20 203 32 ("read-json" "json-readtable" "readtable:" "init:" "list" "call-with-input-string" "str")}
      {Lisp-Entry "json->string" definition (public) ("json") #f #f 208 20 208 32 ("get-output-string" "print-json" "open-output-string" "output" "let" "json")}}})
