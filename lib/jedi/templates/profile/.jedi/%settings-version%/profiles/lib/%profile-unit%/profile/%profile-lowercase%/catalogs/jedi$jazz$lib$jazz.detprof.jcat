"_detprof"
 ({Lisp-File-Entry {File :context "src" "jazz" "detprof" "_detprof.jazz"} 239936558. jazz
    {Lisp-Entry "jazz.detprof" module #f 37 8 37 20 ("lambda" "register-service" "jazz.detprof" "detprof" "profiler-ignore-module" "jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.detprof.syntax")}
      {Lisp-Entry "import" anonymous #f 43 1 43 7 ("profiler" "jazz.system" "jazz.jml" "jazz.detprof.syntax")}
      {Lisp-Entry "profiling-advice" definition #f 54 20 54 36 ("time" "if" "apply" "with-profiling" "call-original" "define" "rest" "procedure?" "when" "let" "set" "original" "locator" "field" "lambda" "time?" "time?:" "profile")}
      {Lisp-Entry "profile-advice" definition #f 69 20 69 34 ("apply" "profile-code" "rest" "lambda" "procedure?" "when" "let" "set" "original" "locator" "field")}
      {Lisp-Entry "time-spent-in-children" define #f 83 8 83 30 ("0" "make-parameter")}
      {Lisp-Entry "profile-code" definition #f 87 20 87 32 ("+" "get-outer-overhead" "profile-register-call" "get-inner-overhead" "total-elapsed-time" "inner-start-time" "0" "time-spent-in-children" "parameterize" "result" "profiler-real-time" "outer-start-time" "profile-profiler" "1" "profile-depth" "-" "get-continuation-stack-for-profile" "cons" "if" "cont" "lambda" "continuation-capture" "profile-stack" "define" "procedure-locat" "locat->container/line/col" "list" "and" "original-call" "active-profile" "profile" "let" "proc" "original")}
      {Lisp-Entry "outer-overhead" define #f 120 8 120 22 ()}
      {Lisp-Entry "inner-overhead" define #f 123 8 123 22 ()}
      {Lisp-Entry "get-outer-overhead" define #f 127 9 127 27 ("setup-overhead" "outer-overhead" "not" "when")}
      {Lisp-Entry "get-inner-overhead" define #f 132 9 132 27 ("setup-overhead" "inner-overhead" "not" "when")}
      {Lisp-Entry "setup-overhead" define #f 138 9 138 23 ("inner-overhead" "outer-overhead" "set!" "0" "parameterize" "3" "2" "test-proc" "apply" "inner-start-time" "estimate-inner-overhead" "100" "-" "fxfloor/" "99" "unroll" "1" "+" "time-spent-in-children" "profiler-real-time" "outer-start-time" "let" "estimate-outer-overhead" "define")}
      {Lisp-Entry "test-proc" define #f 160 9 160 18 ("rest")}
      {Lisp-Entry "profile->jml" definition #f 169 20 169 32 ("cddr" "key:" "table->list" ">" "sort" "list" "properties:" "JML-Element" "new" "duration" "count" "name" "bind" "lambda" "map" "profile")}
      {Lisp-Entry "detprof" definition #f 181 19 181 26 ("1" "detprof" "make-profiler")}}})
"install"
 ({Lisp-File-Entry {File :context "src" "jazz" "detprof" "install.scm"} 236918187. scheme
    {Lisp-Entry "jazz.detprof.install" unit #f 37 6 37 26 ("jazz.detprof" "detprof" "register-service" "jazz:register-service")}})
"syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "detprof" "syntax.jazz"} 236918187. jazz
    {Lisp-Entry "jazz.detprof.syntax" module #f 37 18 37 37 ("jazz")
      {Lisp-Entry "unroll" macro ("macro") 40 15 40 21 ("make-list" "append" "apply" "begin" "rest" "n")}
      {Lisp-Entry "profile" macro #f 45 16 45 23 ("lambda" "profile-code" ",@body" "begin" "not" "if" "sourcify-if" "name:" "name" "not-found:" "key:" "on?:" "getf" "on?" "cddr" "body" "cadr" "source-code" "control" "let" "form-src")}}})
