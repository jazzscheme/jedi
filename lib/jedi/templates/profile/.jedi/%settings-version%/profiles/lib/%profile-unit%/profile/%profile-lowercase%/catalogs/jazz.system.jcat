"Application"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "Application.jazz"} 1290011199
    {Lisp-Entry "jazz.system.application.Application" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Application" class #f 72 7 72 18 ("History-Manager" "new" "self" "eq?" "test:" "make-table" "initialize" "Save-Environment-Listener" "Event-Consumer" "History-Provider" "Context-Provider" "Process")
        {Lisp-Entry "toplevel" slot #f 75 8 75 16 ()}
        {Lisp-Entry "profile-name" slot #f 76 8 76 20 ()}
        {Lisp-Entry "profile-unit" slot #f 77 8 77 20 ()}
        {Lisp-Entry "profile-class" slot #f 78 8 78 21 ()}
        {Lisp-Entry "profile-bindings" slot #f 79 8 79 24 ()}
        {Lisp-Entry "profile" slot #f 80 8 80 15 ()}
        {Lisp-Entry "get-profile" accessor #f 80 77 80 85 ()}
        {Lisp-Entry "focus-listeners" slot #f 81 8 81 23 ()}
        {Lisp-Entry "application-listeners" slot #f 82 8 82 29 ()}
        {Lisp-Entry "selected-owner" slot #f 83 8 83 22 ()}
        {Lisp-Entry "get-selected-owner" accessor #f 83 77 83 85 ()}
        {Lisp-Entry "selected" slot #f 84 8 84 16 ()}
        {Lisp-Entry "selected-listeners" slot #f 85 8 85 26 ()}
        {Lisp-Entry "event-consumer" slot #f 86 8 86 22 ()}
        {Lisp-Entry "history-manager" slot #f 87 8 87 23 ()}
        {Lisp-Entry "active?" slot #f 88 8 88 15 ()}
        {Lisp-Entry "get-active?" accessor #f 88 77 88 85 ()}
        {Lisp-Entry "application-actions" slot #f 89 8 89 27 ()}
        {Lisp-Entry "get-application-actions" accessor #f 89 77 89 85 ()}
        {Lisp-Entry "profile-actions" slot #f 90 8 90 23 ()}
        {Lisp-Entry "get-profile-actions" accessor #f 90 77 90 85 ()}
        {Lisp-Entry "guest-actions" slot #f 91 8 91 21 ()}
        {Lisp-Entry "get-guest-actions" accessor #f 91 77 91 85 ()}
        {Lisp-Entry "focus-actions" slot #f 92 8 92 21 ()}
        {Lisp-Entry "get-focus-actions" accessor #f 92 77 92 85 ()}
        {Lisp-Entry "bindings-designer" slot #f 93 8 93 25 ()}
        {Lisp-Entry "get-bindings-designer" accessor #f 93 77 93 85 ()}
        {Lisp-Entry "skins-designer" slot #f 94 8 94 22 ()}
        {Lisp-Entry "get-skins-designer" accessor #f 94 77 94 85 ()}
        {Lisp-Entry "workspaces-designer" slot #f 95 8 95 27 ()}
        {Lisp-Entry "get-workspaces-designer" accessor #f 95 77 95 85 ()}
        {Lisp-Entry "shortcut-table" slot #f 96 8 96 22 ()}
        {Lisp-Entry "shortcut-hook" slot #f 97 8 97 21 ()}
        {Lisp-Entry "get-shortcut-hook" accessor #f 97 80 97 88 ()}
        {Lisp-Entry "set-shortcut-hook" accessor #f 97 80 97 88 ()}
        {Lisp-Entry "external-name" method #f 100 25 100 38 ("application" "'application" "rest")}
        {Lisp-Entry "get-toplevel" method #f 109 20 109 32 ("toplevel")}
        {Lisp-Entry "prepare-bindings" method #f 118 20 118 36 ("Application-Bindings" "new" "set-bindings" "nextmethod")}
        {Lisp-Entry "prepare-environment" method #f 125 20 125 39 ("prepare-profile" "prepare-skins" "initialize-system" "get-setting" "initialize-windowing" "setup-shortcuts" "self" "set-application" "nextmethod")}
        {Lisp-Entry "install-environment" method #f 135 20 135 39 ("register-clipboard-formats" "initialize-clipboard" "initialize-toplevel" "install-workspaces" "install-bindings" "install-fonts" "install-skins" "nextmethod")}
        {Lisp-Entry "finalize-environment" method #f 146 20 146 40 ("splash-screen" ":arrow" "set-cursor" "nextmethod")}
        {Lisp-Entry "setup-profile" method #f 152 20 152 33 ("get-class-actions" "set-profile-actions" "use-profile?" "when" "Me" "err" "continue-handler:" "format" "list" "continue-text:" "profile-class" "load-profile-class" "new" "profile" "set!" "lambda" "with-safe-execution" "create-profile" "define")}
        {Lisp-Entry "finish-environment" method #f 167 20 167 38 ("remove-splash-screen" "reload-session" "err" "continue-handler:" "init" "lambda" "with-safe-execution" "profile" "when" "self" "add-save-environment-listener" "locale-change" "register-locale-change" "nextmethod")}
        {Lisp-Entry "finish-process" method #f 182 20 182 34 ("update-windowing-actions" "update-focus-actions" "select-default-workspace" "nextmethod")}
        {Lisp-Entry "conclude-environment" method #f 189 20 189 40 ("err" "continue-handler:" "finalize" "lambda" "with-safe-execution" "profile" "toplevel" "select-foreground" "run-loop?" "when" "show-toplevel" "skin-update" "initialize-actions" "nextmethod")}
        {Lisp-Entry "terminate-process" method #f 210 20 210 37 ("profile" "profile-bindings" "profile-class" "profile-unit" "profile-name" "set!" "close" "toplevel" "when" "reset-toolbars" "reset-dockeds" "reset-palettes" "nextmethod")}
        {Lisp-Entry "Java-Classpath" definition #f 231 14 231 28 ("File")}
        {Lisp-Entry "test-java" method #f 240 11 240 20 ("format" "message-box" "java.lang.Class" "forName" "class" "java.lang.ClassLoader" "getSystemClassLoader" "loader" "let*" "c-test" "Java-Classpath" "classpath:" "setup-jvm")}
        {Lisp-Entry "start-loop" method #f 253 20 253 30 ("process-events" "setup-events")}
        {Lisp-Entry "resume-loop-action" method #f 258 20 258 38 ("select-foreground" "toplevel" "when")}
        {Lisp-Entry "clipboard-prefix" method #f 268 26 268 42 ("process-version" "present" "process-name" "format")}
        {Lisp-Entry "register-clipboard-formats" method #f 274 29 274 55 ("clipboard-prefix" "register-jazz-clipboard-formats")}
        {Lisp-Entry "Clipboard-Stack" definition #f 283 14 283 29 ()}
        {Lisp-Entry "Max-Stack" definition #f 286 14 286 23 ("256")}
        {Lisp-Entry "get-clipboard-stack" method #f 290 18 290 37 ("Clipboard-Stack")}
        {Lisp-Entry "empty-clipboard-stack?" method #f 294 18 294 40 ("Clipboard-Stack" "null?")}
        {Lisp-Entry "add-clipboard" method #f 298 18 298 31 ("update-focus-actions" "trim-clipboard" "cons" "Clipboard-Stack" "set!" "when" "get-clipboard-text" "text" "let")}
        {Lisp-Entry "push-clipboard-list" method #f 306 18 306 37 ("update-focus-actions" "trim-clipboard" "append" "Clipboard-Stack" "set!" "error" "Max-Stack" ">" "if" "length" "pushed" "let" "list")}
        {Lisp-Entry "trim-clipboard" definition #f 315 15 315 29 ("1" "-" "tail" "set-cdr!" "Max-Stack" "Clipboard-Stack" "length" ">" "when")}
        {Lisp-Entry "pop-clipboard" method #f 320 11 320 24 ("update-focus-actions" "set-clipboard-text" "cdr" "set!" "Clipboard-Stack" "car" "string" "let")}
        {Lisp-Entry "cycle-clipboard" method #f 328 18 328 33 ("last-pair" "set-cdr!" "list" "set!" "Clipboard-Stack" "null?" "if" "pop-clipboard" "res" "get-clipboard-text" "string" "let")}
        {Lisp-Entry "cycle-clipboard-reversed" method #f 337 18 337 42 ("set-clipboard-text" "butlast" "cons" "set!" "Clipboard-Stack" "last" "res" "get-clipboard-text" "string" "let")}
        {Lisp-Entry "paste-cycle-stack" method #f 345 19 345 36 ("cycle-clipboard" "cycle-clipboard-reversed" "insert-string" "get-range" "delete-range" "string-length" "backward-n" "looking-back?" "when" "get-start" "set-pos" "explorer-class" "new" "expl" "get-clipboard-text" "text" "bell" "Clipboard-Stack" "null?" "Text-View" "is-not?" "or" "if" "get-focus" "focus" "let" "reversed?")}
        {Lisp-Entry "on-paste-cycle-stack" method #f 358 19 358 39 ("paste-cycle-stack" "evt")}
        {Lisp-Entry "on-paste-cycle-stack-reversed" method #f 362 19 362 48 ("paste-cycle-stack" "evt")}
        {Lisp-Entry "on-add-history" method #f 371 19 371 33 ("history-manager" "add-current" "evt")}
        {Lisp-Entry "on-backward-history" method #f 375 19 375 38 ("history-manager" "go-backward-history" "evt")}
        {Lisp-Entry "on-forward-history" method #f 379 19 379 37 ("history-manager" "go-forward-history" "evt")}
        {Lisp-Entry "add-history" method #f 383 18 383 29 ("history-manager" "add-history" "item")}
        {Lisp-Entry "current-history-item" method #f 387 20 387 40 ("current-history-item" "Document" "is?" "get-guest" "guest" "when" "current-frame" "frame" "let")}
        {Lisp-Entry "update-history-actions" method #f 395 20 395 42 ("forward-history" "not-null?" "backward-history" "application" "Action" "set-action-enabled?" "get-forward-history" "forward" "history-manager" "get-backward-history" "backward" "let")}
        {Lisp-Entry "get-recorder" method #f 407 26 407 38 ()}
        {Lisp-Entry "macro-recording?" method #f 411 19 411 35 ("get-recording?" "and" "get-recorder" "recorder" "let")}
        {Lisp-Entry "macro-playing?" method #f 416 19 416 33 ("get-playing?" "and" "get-recorder" "recorder" "let")}
        {Lisp-Entry "prepare-profile" method #f 426 29 426 44 ("log-profile" "install-profiles" "use-profile?" "when")}
        {Lisp-Entry "use-profile?" method #f 432 29 432 41 ()}
        {Lisp-Entry "use-profile-logging?" method #f 436 29 436 49 ()}
        {Lisp-Entry "install-profiles" method #f 440 29 440 45 ()}
        {Lisp-Entry "log-profile" method #f 444 11 444 22 ("compose-name" "cond" "jazz-profile" "shift-down?" "profile-arg" "use-profile-logging?" "use-logging?" "capitalize" "string-parameter" "profile-parameter" "parse" "load" "exists?" "File" "file" "load-profile-jazzini" "get-system-user-name" "jazz.profile" "'jazz.profile" "Me" "'Me" "system-profile" "unit-name" "string->symbol" "title" "standard-profile" "values" "save-content" "process-name" "message-box" "profile-warned?" "'profile-warned?" "get-setting" "and" "->string" "if" "set-setting" "settings" "choose-profile-login" "always-use?" "bindings" "unit" "name" "receive" "login-profile" "load-package" "repository-add-package" "format" "repository-library-directory" "concatenate" "package-path" "package-name" "Profiles" "'Profiles" "find-repository" "repository" "non-expanded-nodes:" "Home" "Directory" "profile-template-directory" "copy-template" "else" "'x11" "x11" "mac" "'mac" "carbon" "kernel-windowing" "case" "active-skin" "'active-skin" "jazz" "'jazz" "or" "profile-bindings" "'profile-bindings" "profile-unit" "'profile-unit" "symbol->string" "downcase" "profile-lowercase" "'profile-lowercase" "profile-name" "profile" "'profile" "cons" "list" "associations" "get-parent" "get-list" "Profile" "'Profile" "register-alias" "set!" "install-new-profile" "not" "when" "profile-class" "find-unit-source" "source" "let" "install-profile" "define")}
        {Lisp-Entry "choose-profile-login" method #f 512 29 512 49 ()}
        {Lisp-Entry "profile-template-directory" method #f 516 29 516 55 ()}
        {Lisp-Entry "preserve-environment" method #f 525 20 525 40 ("call-save-environment-listeners" "nextmethod")}
        {Lisp-Entry "close-environment" method #f 530 20 530 37 ("nextmethod" "save-page-setup" "save-workspaces" "save-bindings" "close-all-no-confirm" "confirm-all-close" "call-exit-listeners")}
        {Lisp-Entry "confirm-all-close" method #f 543 18 543 35 ("include-invisibles?:" "all-frames" "confirm-close" "unless" "lambda" "for-each" "dependent-document?" "get-controller" "controller" "Document" "get-guest" "guest" "let" "Host-View" "is?" "and" "frame" "frame-dependent-document?" "define")}
        {Lisp-Entry "close-all" method #f 557 11 557 20 ("include-invisibles?:" "all-frames" "close-host" "for-each")}
        {Lisp-Entry "close-all-no-confirm" method #f 561 11 561 31 ("include-invisibles?:" "all-frames" "confirm?:" "close-host" "host" "lambda" "for-each")}
        {Lisp-Entry "Splash-Screen" definition #f 572 14 572 27 ()}
        {Lisp-Entry "Splash-End" definition #f 575 14 575 24 ()}
        {Lisp-Entry "splash-screen" method #f 579 29 579 42 ()}
        {Lisp-Entry "show-splash-screen" method #f 583 11 583 29 ("current-time" "time->seconds" "+" "and" "Splash-End" "show-splash" "Splash-Screen" "set!" "duration" "duration:")}
        {Lisp-Entry "remove-splash-screen" method #f 588 11 588 31 ("remove-splash" "-" "sleep" ">" "Splash-End" "and" "current-time" "time->seconds" "time" "let" "Splash-Screen" "when")}
        {Lisp-Entry "show-splash" method #f 596 29 596 40 ()}
        {Lisp-Entry "remove-splash" method #f 600 29 600 42 ("splash-screen")}
        {Lisp-Entry "on-about" method #f 609 19 609 27 ("show-about" "evt")}
        {Lisp-Entry "show-about" method #f 613 26 613 36 ("title:" "if" "format" "Dark-Blue" "Color" "color:" "Text" "name:" "Font" "font:" "list" "append!" "message-box" "process-email" "email" "process-version" "present" "version" "process-licensee" "licensee" "process-copyright" "copyright" "process-owner" "owner" "process-name" "name" "let")}
        {Lisp-Entry "exit-listeners" slot #f 648 8 648 22 ()}
        {Lisp-Entry "add-exit-listener" method #f 651 18 651 35 ("cons" "exit-listeners" "set!" "listener")}
        {Lisp-Entry "remove-exit-listener" method #f 655 18 655 38 ("remove!" "exit-listeners" "set!" "listener")}
        {Lisp-Entry "call-exit-listeners" method #f 659 18 659 37 ("exit-listeners" "prepare-exit" "for-each")}
        {Lisp-Entry "deactivate" method #f 668 26 668 36 ("set!" "reset-mouse-in" "toplevel" "close-popups" "active?" "when")}
        {Lisp-Entry "activate" method #f 675 26 675 34 ("verify-reloads" "lambda" "set-delayed-mouse-action" "mouse-clicked?" "if" "set!" "active?" "unless")}
        {Lisp-Entry "verify-reloads" method #f 686 18 686 32 ("include-invisibles?:" "all-frames" "get-controller" "verify-reload" "Document" "get-guest" "guest" "let" "Frame-Host" "is?" "when" "view" "lambda" "for-each")}
        {Lisp-Entry "verify-reload" method #f 695 18 695 31 ("get-controller" "verify-reload" "get-guest" "document" "when" "find-document" "frame" "let" "moniker")}
        {Lisp-Entry "save-environment-listeners" slot #f 707 8 707 34 ()}
        {Lisp-Entry "add-save-environment-listener" method #f 710 18 710 47 ("cons" "save-environment-listeners" "set!" "listener")}
        {Lisp-Entry "remove-save-environment-listener" method #f 714 18 714 50 ("remove!" "save-environment-listeners" "set!" "listener")}
        {Lisp-Entry "call-save-environment-listeners" method #f 718 18 718 49 ("save-environment-listeners" "save-environment" "listener" "lambda" "for-each")}
        {Lisp-Entry "reload-session" method #f 729 18 729 32 ("reload-opened-windows")}
        {Lisp-Entry "reload-opened-windows" method #f 733 26 733 47 ()}
        {Lisp-Entry "reload-component" method #f 737 26 737 42 ("properties" "class")}
        {Lisp-Entry "save-environment" method #f 741 20 741 36 ("include-invisibles?:" "all-frames" "session" "session-designer" "save-guest" "get-guest" "guest" "Host-Frame" "is?" "frame" "lambda" "for-each" "save-all-guest" "get-current-directory" "current-directory:" "context" "active-context:" "set-preference" "when" "get-preferences-root" "process-preferences" "let" "save-application" "define")}
        {Lisp-Entry "display-aliases?" method #f 767 26 767 42 ()}
        {Lisp-Entry "display-protocol?" method #f 771 26 771 43 ()}
        {Lisp-Entry "application-anchors" method #f 775 26 775 45 ("get-aliases" "table-keys")}
        {Lisp-Entry "install-fonts" method #f 784 11 784 24 ("register-font" "font" "lambda" "for-each" "get-children" "when" "error?:" "fonts" "'fonts" "get-preferences" "name:" "Font" "new" "apply" "null?" "unless" "hint-style:" "antialias:" "underline?:" "italic?:" "bold?:" "color:" "point-size:" "font-name:" "list" "specified?" "if" "arguments" "get-hint-style" "hint-style" "get-antialias" "antialias" "get-underline?" "underline?" "get-italic?" "italic?" "get-bold?" "bold?" "get-color" "color" "get-point-size" "point-size" "get-font-name" "font-name" "get-name" "name" "let" "pref" "preferences->font" "define")}
        {Lisp-Entry "add-focus-listener" method #f 823 18 823 36 ("add-listener" "focus-listeners" "set!" "listener")}
        {Lisp-Entry "remove-focus-listener" method #f 827 18 827 39 ("remove-listener" "focus-listeners" "set!" "listener")}
        {Lisp-Entry "process-focus-change" method #f 831 19 831 39 ("update-focus-actions" "invoke" "listener" "lambda" "for-each" "self" ":focus-change" "Focus-Event" "new" "evt" "let" "focus-listeners" "when" "new-focus")}
        {Lisp-Entry "update-focus-actions" method #f 840 26 840 46 ("focus-update-actions" "can-select-all?" "select-all" "can-delete?" "delete" "can-paste-properties?" "paste-properties" "paste-cycle-stack-reversed" "Clipboard-Stack" "not-null?" "paste-cycle-stack" "application" "can-paste?" "paste" "can-copy?" "copy" "can-cut?" "cut" "can-redo?" "redo" "can-undo?" "undo" "view" "Action" "set-action-enabled?" "preferences-designer" "when" "View" "is?" "and" "view?" "get-focus" "focus" "let*")}
        {Lisp-Entry "add-selected-listener" method #f 863 18 863 39 ("add-listener" "selected-listeners" "set!" "listener")}
        {Lisp-Entry "remove-selected-listener" method #f 867 18 867 42 ("remove-listener" "selected-listeners" "set!" "listener")}
        {Lisp-Entry "get-selected" method #f 871 18 871 30 ("selected")}
        {Lisp-Entry "set-selected" method #f 875 18 875 30 ("process-selected-change" "selected" "or" "when" "selected-owner" "neq?" "new-owner?" "let" "force?" "force?:" "sel" "owner")}
        {Lisp-Entry "close-selected" method #f 881 18 881 32 ("selected" "process-selected-change" "set!" "selected-owner" "eq?" "when" "owner")}
        {Lisp-Entry "process-selected-change" method #f 887 11 887 34 ("invoke" "listener" "lambda" "for-each" "force?:" "self" ":selected-change" "Selected-Event" "new" "evt" "let" "exiting-process?" "not" "selected-listeners" "and" "when" "selected" "selected-owner" "set!" "force?" "new-selected" "old-selected" "owner")}
        {Lisp-Entry "add-application-listener" method #f 902 18 902 42 ("get-application-listeners" "add-listener" "set-application-listeners" "listener" "category")}
        {Lisp-Entry "remove-application-listener" method #f 906 18 906 45 ("get-application-listeners" "remove-listener" "set-application-listeners" "listener" "category")}
        {Lisp-Entry "process-application-event" method #f 910 19 910 44 ("self" "invoke" "listener" "lambda" "for-each" "Application-Event" "new" "apply" "evt" "get-application-listeners" "listeners" "let" "properties" "sender" "kind" "category")}
        {Lisp-Entry "get-application-listeners" method #f 918 11 918 36 ("application-listeners" "table-ref" "category")}
        {Lisp-Entry "set-application-listeners" method #f 922 11 922 36 ("application-listeners" "table-set!" "listeners" "category")}
        {Lisp-Entry "default-frame-class" method #f 931 26 931 45 ()}
        {Lisp-Entry "file-frame-class" method #f 935 26 935 42 ("error" "extension-frame-class" "or" "get-extension" "extension" "let" "file")}
        {Lisp-Entry "extension-frame-class" method #f 941 26 941 47 ("unknown-extension-frame-class" "known-extension-frame-class" "profile-extension-frame-class" "or" "ext")}
        {Lisp-Entry "profile-extension-frame-class" method #f 947 11 947 40 ("extension-frame-class" "profile" "when" "ext")}
        {Lisp-Entry "known-extension-frame-class" method #f 952 26 952 53 ("ext")}
        {Lisp-Entry "unknown-extension-frame-class" method #f 956 26 956 55 ()}
        {Lisp-Entry "frame-class" method #f 960 26 960 37 ("file-frame-class" "default-frame-class" "not" "if" "file" "file:")}
        {Lisp-Entry "get-default-frame-class" method #f 966 11 966 34 ("default-frame-class" "resolve-reference" "if" "get-frame-model" "model" "get-workspace-preferences" "pref" "let*")}
        {Lisp-Entry "initialize-toplevel" method #f 979 11 979 30 ("ensure-displayed" "new-toplevel" "toplevel" "set!")}
        {Lisp-Entry "new-toplevel" method #f 984 26 984 38 ("Toplevel" "new")}
        {Lisp-Entry "show-toplevel" method #f 988 26 988 39 ("toplevel" "set-visible?")}
        {Lisp-Entry "initialize-actions" method #f 992 11 992 29 ("self" "get-class-actions" "set-application-actions")}
        {Lisp-Entry "new-stage" method #f 1001 26 1001 35 ("stage" "'stage" "name:" "Stage-Border" "parent:" "stage-class" "new")}
        {Lisp-Entry "stage-class" method #f 1005 29 1005 40 ("Stage")}
        {Lisp-Entry "setup-shortcuts" method #f 1014 11 1014 26 ("shortcut-hash" "hash:" "shortcut=?" "test:" "make-table" "shortcut-table" "set!")}
        {Lisp-Entry "register-actions-shortcuts" method #f 1018 11 1018 37 ("for-each-reversed" "get-children" "get-alternate-shortcut" "get-shortcut" "get-visible?" "actions" "lambda" "for-each" "table-add" "register-shortcut" "table-remove!" "shortcut-table" "table-ref" "and" "when" "shortcut" "action-item" "unregister-shortcut" "define" "new-actions" "old-actions")}
        {Lisp-Entry "update-shortcut" method #f 1045 18 1045 33 ("table-add" "shortcut-table" "table-remove!" "when" "new-shortcut" "old-shortcut" "action-item")}
        {Lisp-Entry "dispatch-shortcut" method #f 1052 18 1052 35 ("self" "invoke" "action-allowed?" "car" "action" "not-null?" "when" "get-allowed-actions" "action-items" "let" "shortcut-hook" "not" "or" "if" "shortcut")}
        {Lisp-Entry "get-bound-actions" method #f 1064 18 1064 35 ("shortcut-table" "table-ref" "shortcut")}
        {Lisp-Entry "get-allowed-actions" method #f 1068 18 1068 37 (":control" "Shortcut" "shortcut=?" "if" "get-bound-actions" "let" "action-allowed?" "collect-if" "actions" "filter-allowed" "define" "shortcut")}
        {Lisp-Entry "action-allowed?" method #f 1081 18 1081 33 ("allow-orphaned-actions?" "get-parent" "actions-orphaned?" "not" "or" "get-actionables" "actionable-reachable?" "get-enabled?" "and" "actionable" "lambda" "some?" "some-actionable-active?" "define" "action-item")}
        {Lisp-Entry "allow-orphaned-actions?" method #f 1097 29 1097 52 ()}
        {Lisp-Entry "Bindings-File" definition #f 1106 14 1106 27 ("Profile" "File")}
        {Lisp-Entry "install-bindings" method #f 1110 11 1110 27 ("default-bindings" "err" "continue-handler:" "set-active-trait" "Trait" "is?" "when" "locate-component" "trait" "jazz" "'jazz" "get-preferences" "get-active-bindings" "or" "active" "load-bindings" "let" "lambda" "with-safe-execution" "reference:" "get-form" "form:" "Designer" "new" "bindings-designer" "set!" "set-bindings" "bindings" "set-bindings/designer" "define")}
        {Lisp-Entry "load-bindings" method #f 1128 29 1128 42 ("default-bindings" "read-form" "instantiate" "exists?" "Profile" "'Profile" "is-alias?" "and" "if" "Bindings-File" "file" "let")}
        {Lisp-Entry "default-bindings" method #f 1135 29 1135 45 ("Application-Bindings" "new")}
        {Lisp-Entry "save-bindings" method #f 1139 11 1139 24 ("save" "get-form" "get-origin" "file?" "get-modified?" "bindings-designer" "and" "when")}
        {Lisp-Entry "prepare-skins" method #f 1149 11 1149 24 ("jazz" "'jazz" "child" "set-skin" "default-skins" "skins" "let")}
        {Lisp-Entry "install-skins" method #f 1154 11 1154 24 ("default-skins" "err" "continue-handler:" "jazz" "'jazz" "get-active" "or" "child" "set-skin" "set-skins-designer" "load-skins" "skins" "let" "lambda" "with-safe-execution")}
        {Lisp-Entry "skins-file" method #f 1167 29 1167 39 ("Profile" "File")}
        {Lisp-Entry "load-skins" method #f 1171 29 1171 39 ("default-skins" "read-form" "instantiate" "exists?" "Profile" "'Profile" "is-alias?" "and" "if" "skins-file" "file" "let")}
        {Lisp-Entry "default-skins" method #f 1178 29 1178 42 ("windows" "default" "name:" "jazz" "active:" "instantiate")}
        {Lisp-Entry "set-skins-designer" method #f 1187 21 1187 39 ("reference:" "get-form" "form:" "Designer" "new" "skins-designer" "set!" "skins")}
        {Lisp-Entry "save-skins" method #f 1191 11 1191 21 ("save" "get-form" "get-origin" "file?" "get-modified?" "skins-designer" "and" "when")}
        {Lisp-Entry "Workspaces-File" definition #f 1201 14 1201 29 ("Profile" "File")}
        {Lisp-Entry "install-workspaces" method #f 1205 11 1205 29 ("default-workspaces" "err" "continue-handler:" "load-workspaces" "lambda" "with-safe-execution" "reference:" "get-form" "form:" "Designer" "new" "workspaces-designer" "set!" "workspaces" "set-workspaces-designer" "define")}
        {Lisp-Entry "load-workspaces" method #f 1217 29 1217 44 ("default-workspaces" "read-form" "instantiate" "exists?" "Profile" "'Profile" "is-alias?" "and" "if" "Workspaces-File" "file" "let")}
        {Lisp-Entry "default-workspaces" method #f 1224 29 1224 47 ("instantiate")}
        {Lisp-Entry "save-workspaces" method #f 1230 11 1230 26 ("save" "get-form" "get-origin" "file?" "get-modified?" "workspaces-designer" "and" "when")}
        {Lisp-Entry "set-application-actions" method #f 1240 18 1240 41 ("set!" "application-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "set-profile-actions" method #f 1245 18 1245 37 ("set!" "profile-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "set-guest-actions" method #f 1250 18 1250 35 ("set!" "guest-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "set-focus-actions" method #f 1255 18 1255 35 ("set!" "focus-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "find-menubar" method #f 1265 18 1265 30 ("get-guest" "in-player?" "and" "when" ":menubar" "get-toolbar" "host" "let")}
        {Lisp-Entry "find-menu" method #f 1271 18 1271 27 ("get-content" "find-component" "menuitem" "when" "find-menubar" "menubar" "let" "name")}
        {Lisp-Entry "update-menubar-buttons" method #f 1279 18 1279 40 ("update-buttons" "when" "find-menubar" "menubar" "let")}
        {Lisp-Entry "Undisplayed-Message" definition #f 1290 14 1290 33 ()}
        {Lisp-Entry "set-status-message" method #f 1294 18 1294 36 ("update-view" "primordial-thread?" "and" "when" "set-action-handler" "->string" "else" "Locales" "is?" "cond" "set-title" "lambda" "post-event" "Undisplayed-Message" "set!" "not" "if" "get-message-view" "message" "let" "update?" "action-handler" "msg")}
        {Lisp-Entry "find-status-bar" method #f 1309 18 1309 33 ("get-guest" "in-player?" "and" "when" ":status" "get-toolbar" "host" "let")}
        {Lisp-Entry "get-message-view" method #f 1315 18 1315 34 ("message" "'message" "find-component" "when" "find-status-bar" "status-bar" "let")}
        {Lisp-Entry "show-undisplayed-message" method #f 1321 18 1321 42 ("set!" "set-status-message" "Undisplayed-Message" "when")}
        {Lisp-Entry "class-actions" method #f 1332 20 1332 33 ("nextmethod" "application" "'application" "find-actions" "cons")}
        {Lisp-Entry "process-alias" method #f 1342 20 1342 33 ("nextmethod" "cadr" "find-menu" ":menu" "car" "eq?" "pair?" "and" "cond" "else" "get-bindings" ":bindings" "get-images-portfolio" ":images" "get-profile" ":profile" "focused-guest" ":focus-guest" "focused-host" ":focus-host" "get-focus" ":focus" "current-document" ":document" "current-frame" ":frame" "current-stage" ":stage" "find-status-bar" ":status-bar" "find-toolbar" ":toolbar" "find-menubar" ":menubar" "get-toplevel" ":toplevel" "self" ":application" "case" "name")}
        {Lisp-Entry "text-menu" method #f 1367 26 1367 35 ("new-text-context-menu" "text")}
        {Lisp-Entry "get-output-log" method #f 1376 26 1376 40 ()}
        {Lisp-Entry "All-Results" definition #f 1385 14 1385 25 ()}
        {Lisp-Entry "Active-Results" definition #f 1388 14 1388 28 ()}
        {Lisp-Entry "navigable-results" method #f 1392 26 1392 43 ("navigable-results" "'navigable-results" "must-implement")}
        {Lisp-Entry "get-navigable-results" method #f 1396 11 1396 32 ("navigable-results" "set!" "All-Results" "unless")}
        {Lisp-Entry "get-active-results" method #f 1402 18 1402 36 ("get-navigable-results" "car" "set!" "Active-Results" "unless")}
        {Lisp-Entry "set-active-results" method #f 1408 18 1408 36 ("Active-Results" "set!" "results")}
        {Lisp-Entry "locale-change" method #f 1417 11 1417 24 ("locale-update" "when" "select-locale" "update?" "loc")}
        {Lisp-Entry "select-locale" method #f 1423 18 1423 31 ("present-locale" "localize" "set-title" "locales" "'locales" "locate-component" "label" "when" "find-status-bar" "status" "let" "locale")}
        {Lisp-Entry "locale-update" method #f 1431 18 1431 31 ("get-toplevel" "redraw-window" "find-menubar" "layout-menu")}
        {Lisp-Entry "setup-workspaces" method #f 1442 11 1442 27 ("layout" "layout-menu" "Separator" "tooltip-text:" "tooltip?:" ":images" "portfolio:" "resource:" "tail-separator" "'tail-separator" "tail" "'tail" "location:" "22" "Dimension" "size:" "Workspace-Button" "Action" "selected?:" "group:" "layout-separator" "'layout-separator" "before:" "icon:" "title:" "Radio-Item" "get-shortcut" "shortcut:" "action-handler:" "name:" "parent:" "Action-Item" "eq?" "selected?" "workspace:" "list" "properties:" "on-select-workspace" "'on-select-workspace" "method-name:" ":application" "target-name:" "Event-Handler" "new" "event-handler" "format" "string->symbol" "action-name" "get-icon" "icon" "get-title" "title" "get-name" "name" "lambda" "for-each" "get-active" "active" "find-toolbar" "toolbar" "application" "'application" "find-actions" "actions" "when" "workspace" "'workspace" "find-menu" "menu" "else" "1" "error" "0" "get-children" "length" "case" "get-workspaces-preferences" "preferences" "let")}
        {Lisp-Entry "select-default-workspace" method #f 1469 11 1469 35 ("apply-preferences" "Default-Workspace" "new" "child" "get-active" "active" "default-workspace" "not" "if" "error?:" "get-workspaces-preferences" "pref" "let" "find-workspace" "define")}
        {Lisp-Entry "on-select-workspace" method #f 1485 19 1485 38 ("workspace:" "get-property" "select-workspace" "evt")}
        {Lisp-Entry "on-next-workspace" method #f 1489 19 1489 36 ("select-next-workspace" "evt")}
        {Lisp-Entry "on-previous-workspace" method #f 1493 19 1493 40 ("select-previous-workspace" "evt")}
        {Lisp-Entry "on-workspace" method #f 1497 27 1497 39 ("activate-workspace-button" "activate-workspace-item" "workspace:" "get-property" "workspace" "let" "activate" "get-kind" "case" "evt")}
        {Lisp-Entry "activate-workspace-item" method #f 1505 31 1505 54 ("set-selected?" "group:" "Radio-Item" "class:" "unselect-elements" "not" "if" "get-name" "find-component" "radio" "when" "'workspace" "find-menu" "menu" "let" "workspace")}
        {Lisp-Entry "activate-workspace-button" method #f 1514 31 1514 56 ("set-selected?" "'workspace" "group:" "Radio-Tool" "class:" "unselect-elements" "not" "if" "find-component" "radio" "and" "when" "workspace-button-name" "name" "find-toolbar" "toolbar" "let" "workspace")}
        {Lisp-Entry "workspace-button-name" method #f 1524 39 1524 60 ("get-name" "workspace")}
        {Lisp-Entry "workspace-installed" method #f 1528 26 1528 45 ()}
        {Lisp-Entry "on-zoom-horizontally" method #f 1532 19 1532 39 ("set!" "unzoom" "zoom" "workspace-zoomable?" "split" "'split" "get-state" "continuation-return" "when" "vert" "'vert" "get-orientation" "eq?" "if" "host" "splitter" "current-stage-border" "for-each-splitter" "return" "continuation-capture" "started?" "let" "lambda" "with-locked-update" "evt")}
        {Lisp-Entry "on-zoom-vertically" method #f 1551 19 1551 37 ("set!" "unzoom" "zoom" "split" "'split" "get-state" "continuation-return" "when" "horz" "'horz" "get-orientation" "eq?" "if" "host" "splitter" "for-each-splitter" "return" "continuation-capture" "current-stage-border" "border" "started?" "let" "lambda" "with-locked-update" "evt")}
        {Lisp-Entry "on-maximize/restore" method #f 1571 19 1571 38 ("maximize" "restore" "get-maximized?" "if" "current-stage" "stage" "let" "evt")}
        {Lisp-Entry "on-full-screen" method #f 1578 19 1578 33 ("full-screen-stage" "selected-workspace" "set-fullscreen?" "get-toplevel" "get-fullscreen?" "fullscreen?" "fullscreen-warned?" "'fullscreen-warned?" "preferences-designer" "set-property" "message-box" "get-fullscreen-warned?" "not" "when" "get-preferences" "pref" "let" "evt")}
        {Lisp-Entry "full-screen-stage" method #f 1588 18 1588 35 ("current-stage-border" "full-screen" "fullscreen?")}
        {Lisp-Entry "toggle-full-screen" method #f 1592 18 1592 36 ("full-screen" "get-toplevel" "get-fullscreen?" "not" "fullscreen?" "let" "host")}
        {Lisp-Entry "full-screen" method #f 1597 18 1597 29 ("unzoom" "zoom" "set-full?" "top" "'top" "get-name" "eq?" "and" "get-preferences" "preferences" "for-each-splitter" "set-fullscreen?" "lambda" "with-locked-update" "get-fullscreen?" "neq?" "current-stage" "stage" "get-toplevel" "toplevel" "0" "Rect" "get-insets" "set-insets" "set-preserved-insets" "when" "get-preserved-insets" "preserved" "let" "not" "if" "splitter" "fix-top-splitter-insets" "define" "fullscreen?" "host")}
        {Lisp-Entry "on-delete-stage" method #f 1626 18 1626 33 ("delete-stage" "evt")}
        {Lisp-Entry "on-delete-other-stages" method #f 1630 18 1630 40 ("delete-other-stages" "evt")}
        {Lisp-Entry "on-split-vertically" method #f 1634 18 1634 37 ("split-stage-vertically" "evt")}
        {Lisp-Entry "on-split-horizontally" method #f 1638 18 1638 39 ("split-stage-horizontally" "evt")}
        {Lisp-Entry "on-navigate-frame" method #f 1642 18 1642 35 ("navigate-frame" "evt")}
        {Lisp-Entry "find-toolbar" method #f 1651 18 1651 30 ("get-guest" "in-player?" "and" "when" ":toolbar" "get-toolbar" "host" "let")}
        {Lisp-Entry "find-command-toolbar" method #f 1657 18 1657 38 (":toolbar" ":minibuffer" ":command" "or" "get-guest" "in-player?" "and" "when" "get-toolbar" "host" "let" "name" "try" "define")}
        {Lisp-Entry "get-context-text" method #f 1673 20 1673 36 ()}
        {Lisp-Entry "get-text-class" method #f 1682 26 1682 40 ("Plain-Text-View")}
        {Lisp-Entry "get-resource" method #f 1691 18 1691 30 ("cursor" "format" "list" "new-file" "image" "case" "Build" "Directory" "Jazz" "'Jazz" "is-alias?" "if" "resources-dir" "define" "name" "type")}
        {Lisp-Entry "Images-Portfolio" definition #f 1707 14 1707 30 ()}
        {Lisp-Entry "get-images-portfolio" method #f 1711 18 1711 38 (":images" "name:" "Portfolio" "new" "set!" "Images-Portfolio" "unless")}
        {Lisp-Entry "get-cataloguer" method #f 1722 26 1722 40 ()}
        {Lisp-Entry "get-catalog-context" method #f 1726 26 1726 45 ()}
        {Lisp-Entry "get-event-consumer" method #f 1735 20 1735 38 ("event-consumer")}
        {Lisp-Entry "set-event-consumer" method #f 1739 20 1739 38 ("event-consumer" "set!" "consumer")}
        {Lisp-Entry "deliver-event" method #f 1743 20 1743 33 ("event" "proc" "target" "handler")}
        {Lisp-Entry "fresh-prompt" method #f 1752 18 1752 30 ("fresh-prompt" "when" "get-console-text" "or" "let" "text" "text:")}
        {Lisp-Entry "on-console" method #f 1758 19 1758 29 ("get-console-manager" "select-next-console" "else" "ensure-displayed" "get-end" "cell-displayed?" "fresh-prompt" "last-block" "extended?" "at-end?" "not" "or" "cond" "eq?" "and" "when" "show-console" "text" "get-focus" "focus" "let" "evt")}
        {Lisp-Entry "show-console" method #f 1771 18 1771 30 ("acquire-focus" "bell" "not" "if" "get-text" "text" "and" "when" "select-docked" "manager" "let" "focus?" "focus?:" "home" "'home" "workspace" "workspace:" "Lisp-Console-Manager" "class" "class:")}
        {Lisp-Entry "on-clear-console" method #f 1783 19 1783 35 ("get-console-text" "clear-console" "evt")}
        {Lisp-Entry "on-sql-console" method #f 1787 19 1787 33 ("get-sql-console-text" "text:" "fresh-prompt" "when" "sql" "'sql" "workspace:" "SQL-Console-Manager" "class:" "show-console" "SQL-Console-Text-View" "get-focus" "is?" "had-focus?" "let" "evt")}
        {Lisp-Entry "on-sql-connections" method #f 1794 11 1794 29 ("focus?:" "sql" "'sql" "workspace:" "SQL-Connections-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-sql-inventory" method #f 1799 11 1799 27 ("focus?:" "sql" "'sql" "workspace:" "Inventory-Browser" "select-docked" "evt")}
        {Lisp-Entry "on-sql-tree-output" method #f 1803 11 1803 29 ("focus?:" "sql" "'sql" "SQL-Tree-Output" "select-docked" "evt")}
        {Lisp-Entry "process-debuggee-loop" method #f 1812 20 1812 41 ("nextmethod" "process-events" "with-jazz-exception-debugger" "event-thread?" "get-controller-debugger" "local-proxy?" "and" "if")}
        {Lisp-Entry "exception-reported" method #f 1825 11 1825 29 ("cleanup-mouse-processing" "Exception" "catch")}
        {Lisp-Entry "present-execution-context" method #f 1832 11 1832 36 ("prefix?:" "type:" "Exception-Presenter" "new" "present" "prefix?" "type" "exception")}
        {Lisp-Entry "get-search-manager" method #f 1841 39 1841 57 ()}
        {Lisp-Entry "get-search-results" method #f 1845 39 1845 57 ("Search-Results" "singleton-docked" "get-guest")}
        {Lisp-Entry "active-search" method #f 1849 18 1849 31 ("get-guest" "get-search" "when" "get-search-manager" "manager" "let")}
        {Lisp-Entry "update-search-actions" method #f 1856 18 1856 39 ("replace-selected" "replace-all" "replace&find-forward" "replace" "find-backward" "find-forward" ">" "pop-results" "edit-current" "edit-previous" "1" ">=" "edit-next" "application" "Action" "set-action-enabled?" "in-modal?" "get-results-stack" "results-stack-count" "get-tree" "get-visible-count" "results-count" "get-search-results" "results" "length" "count" "all-frames" "frames" "let*")}
        {Lisp-Entry "on-find" method #f 1881 19 1881 26 ("active-window" "'active-window" "text" "'text" "update-search" "evt")}
        {Lisp-Entry "on-find-in-text" method #f 1885 19 1885 34 ("text" "'text" "update-search" "evt")}
        {Lisp-Entry "on-find-in-directories" method #f 1889 19 1889 41 ("directories" "'directories" "update-search" "evt")}
        {Lisp-Entry "on-find-in-projects" method #f 1893 19 1893 38 ("projects" "'projects" "update-search" "evt")}
        {Lisp-Entry "update-search" method #f 1897 11 1897 24 ("select-search" "get-searches" "list" "set-search-targets" "first" "equal?" "not-null?" "or" "unless" "get-search-targets" "targets" "let" "search" "lambda" "for-each" "set-visible?" "bring-to-front" "set-search-domain" "set-selection-name" "when" "get-search" "next-radio" "get-focused-window" "get-selection-name" "eq?" "same-tab?" "'tab" "locate" "tab-view" "get-guest" "manager" "get-player" "player" "get-search-manager" "palette" "get-selected-string" "Text-View" "not" "and" "if" "string" "Tree-Embedded-Search-Text-View" "is?" "internal?" "get-focus" "focus" "let*" "domain" "tab")}
        {Lisp-Entry "end-search-edition" method #f 1927 18 1927 36 ("end-edition" "get-targets-tree" "tree" "get-search" "search" "get-guest" "manager" "get-search-manager" "palette" "let*")}
        {Lisp-Entry "on-edit-next" method #f 1935 19 1935 31 ("get-active-results" "edit-next" "evt")}
        {Lisp-Entry "on-edit-previous" method #f 1939 19 1939 35 ("get-active-results" "edit-previous" "evt")}
        {Lisp-Entry "on-edit-current" method #f 1943 19 1943 34 ("get-active-results" "edit-current" "evt")}
        {Lisp-Entry "on-pop-results" method #f 1947 19 1947 33 ("get-search-results" "clear-results" "evt")}
        {Lisp-Entry "on-find-forward" method #f 1951 19 1951 34 ("on-find-forward" "bell" "select-next" "unless" "get-find-targets" "search-set" "first-frame" "get-guest" "get-text-view" "text" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-find-backward" method #f 1961 19 1961 35 ("on-find-backward" "bell" "select-previous" "unless" "get-find-targets" "search-set" "first-frame" "get-guest" "get-text-view" "text" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-replace" method #f 1971 19 1971 29 ("on-replace" "bell" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-replace&find-forward" method #f 1978 19 1978 42 ("on-replace&find-forward" "bell" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-replace-all" method #f 1985 19 1985 33 ("on-replace-all" "bell" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-replace-selected" method #f 1992 19 1992 38 ("on-replace-selected" "bell" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-command-extended" method #f 2004 19 2004 38 ("select-command-extended" "evt")}
        {Lisp-Entry "on-command-execute" method #f 2008 19 2008 37 ("select-command-execute" "evt")}
        {Lisp-Entry "get-command-shell" method #f 2012 26 2012 43 ("command-shell" "'command-shell" "locate-component" "when" "find-command-toolbar" "toolbar" "let")}
        {Lisp-Entry "get-command-text" method #f 2018 26 2018 42 ("get-text" "when" "get-command-shell" "shell" "let")}
        {Lisp-Entry "require-command-text" method #f 2024 18 2024 38 ("throw-cancel" "message-box" "begin" "get-command-text" "or")}
        {Lisp-Entry "require-unzoomed-command-text" method #f 2031 11 2031 40 ("require-command-text" "in-player?" "lambda" "set-client-restore" "neq?" "get-target" "target" "zoom" "'zoom" "get-state" "eq?" "Splitter-View" "is?" "when" "get-parent" "splitter" "get-host" "host" "let" "text" "unzoom" "define")}
        {Lisp-Entry "select-command-search" method #f 2050 18 2050 39 ("require-unzoomed-command-text" "select-search" "text" "direction")}
        {Lisp-Entry "select-command-search-current" method #f 2054 18 2054 47 ("require-unzoomed-command-text" "select-search" "text" "range" "direction")}
        {Lisp-Entry "select-command-extended" method #f 2058 18 2058 41 ("require-unzoomed-command-text" "select-extended")}
        {Lisp-Entry "select-command-execute" method #f 2062 18 2062 40 ("require-unzoomed-command-text" "select-execute")}
        {Lisp-Entry "get-search-targets" method #f 2071 31 2071 49 ("get-search-targets" "Search-Targets" "'Search-Targets" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "set-search-targets" method #f 2078 31 2078 49 ("set-search-targets" "Search-Targets" "'Search-Targets" "set-setting" "not" "if" "active-search" "search" "let" "targets")}
        {Lisp-Entry "get-find-targets" method #f 2085 31 2085 47 ("get-find-targets" "get-search-targets" "get-ignore-case?" "ignore-case?:" "get-whole-words?" "whole-words?:" "first" "make-search-context" "target" "lambda" "map" "->search-set" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-replace-targets" method #f 2097 31 2097 50 ("get-replace-targets" "get-search-targets" "second" "map" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-whole-words?" method #f 2104 31 2104 47 ("get-whole-words?" "Search-Whole-Words?" "'Search-Whole-Words?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-ignore-case?" method #f 2111 31 2111 47 ("get-ignore-case?" "Search-Ignore-Case?" "'Search-Ignore-Case?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-preserve-case?" method #f 2118 31 2118 49 ("get-preserve-case?" "Search-Preserve-Case?" "'Search-Preserve-Case?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-play-recording?" method #f 2125 31 2125 50 ("get-play-recording?" "Search-Play-Recording?" "'Search-Play-Recording?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-expression?" method #f 2132 31 2132 46 ("get-expression?" "Search-Expression?" "'Search-Expression?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "on-new" method #f 2144 27 2144 33 ("get-default-frame-class" "new-event" "evt")}
        {Lisp-Entry "on-open" method #f 2148 27 2148 34 ("open-files" "evt")}
        {Lisp-Entry "open-files" method #f 2152 18 2152 28 ("get-name" "key:" "string>?" "sort" "edit-file" "for-each" "multiple-selection?:" "open-extensions" "extensions:" "choose-file" "files" "let" "directory" "directory:")}
        {Lisp-Entry "receive-files" method #f 2158 26 2158 39 ("edit-file" "class:" "edit-document" "file?" "when" "pathname" "lambda" "for-each" "else" "jazz.editor.jazz.Jazz-Text-View" "shift-down?" "jazz.editor.jazz.Jazz-Plain-Text-View" "alt-down?" "cond" "class" "parse" "user-message" "set-current-directory" "dir" "let" "car" "directory?" "1" "length" "=" "and" "if" "pathnames" "pos")}
        {Lisp-Entry "edit-file" method #f 2174 26 2174 35 ("edit-document" "file")}
        {Lisp-Entry "open-extensions" method #f 2179 26 2179 41 ()}
        {Lisp-Entry "find-document" method #f 2183 18 2183 31 ("include-invisibles?:" "all-frames" "pathname=?" "get-controller" "get-moniker" "guest-moniker" "not" "or" "Document" "get-guest" "guest" "let" "Frame-Host" "is?" "and" "frame" "lambda" "find-if" "class" "class:" "moniker")}
        {Lisp-Entry "edit-document" method #f 2195 18 2195 31 ("verify-reload" "focus-host" "and" "get-guest" "center-caret" "'center-caret" "ensure-displayed?:" "set-selection-safe" "end-completion" "set-wrap?" "get-controller" "set-moniker" "set-char-encoding" "Text-View" "is?" "text?" "document" "host" "initialize:" "host-focus?:" "host-visible?:" "host-workspace:" "new-frame" ":wait" "with-cursor" "file-frame-class" "or" "values" "new?" "lambda" "result" "find-document" "frame" "let*" "file" "let" "error" "exists?" "not" "if" "when" "return-new?" "return-new?:" "visible?" "visible?:" "activate-focus?" "activate-focus?:" "force-new?" "force-new?:" "wrap?" "wrap?:" "char-encoding" "char-encoding:" "selection" "selection:" "workspace" "workspace:" "kind" "kind:" "class" "class:" "moniker")}
        {Lisp-Entry "edit-help-document" method #f 2243 18 2243 36 ("set-editable?" "get-guest" "text" "edit-document" "frame" "let*" "moniker")}
        {Lisp-Entry "edit-filename" method #f 2249 18 2249 31 ("get-controller" "verify-reload" "get-guest" "text" "get-source" "edit-document" "frame" "error" "not" "if" "find-filename" "and" "project-file" "'workbench" "get-service" "workbench" "let*" "filename")}
        {Lisp-Entry "edit-category" method #f 2259 26 2259 39 ("name")}
        {Lisp-Entry "on-close" method #f 2263 27 2263 35 ("close-host" "when" "first-frame" "frame" "let" "evt")}
        {Lisp-Entry "on-close-all" method #f 2269 27 2269 39 ("all-frames" "close-host" "confirm-close" "get-controller" "close-on-close-all?" "Document" "is-not?" "or" "get-guest" "guest" "let" "Frame-Host" "is?" "when" "view" "lambda" "for-each" "evt")}
        {Lisp-Entry "on-save-all" method #f 2279 27 2279 38 ("save-all" "evt")}
        {Lisp-Entry "on-print" method #f 2283 27 2283 35 ("print-document" "current-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-print-layout" method #f 2288 27 2288 42 ("print-layout" "current-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-print-preview" method #f 2293 27 2293 43 ("print-preview" "current-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-quit-application" method #f 2298 27 2298 46 ("exit-process" "evt")}
        {Lisp-Entry "save-all" method #f 2302 18 2302 26 ("include-invisibles?:" "all-frames" "save" "get-modified?" "dependent-document?" "xor" "get-moniker" "or" "and" "get-controller" "controller" "get-guest" "guest" "Frame-Host" "is?" "when" "host" "for-each" "main-documents?" "lambda" "save-documents" "let" "save-unanchored?" "save-unanchored?:" "Document" "class" "class:")}
        {Lisp-Entry "edit-definitions" method #f 2326 26 2326 42 ("rest" "object")}
        {Lisp-Entry "edit-references" method #f 2330 26 2330 41 ("rest" "object")}
        {Lisp-Entry "context-update" method #f 2339 20 2339 34 ("context" "user-message" "nextmethod" "finalize" "init" "load-profile-class" "new" "set!" "Profile" "get-profile-class" "or" "class-unit" "close" "profile" "modify-profile" "get-children" "activate" "get-active?" "and" "get-name" "get-catalog" "catalog" "config" "lambda" "for-each" "get-cataloguer" "cataloguer" "when" "error?:" "catalogs" "'catalogs" "get-preferences" "pref" "let" "modify-catalogs" "define")}
        {Lisp-Entry "setup-preferences" method #f 2374 20 2374 37 ("default-preferences" "set-preferences/designer" "err" "continue-handler:" "setup-preferences/designer" "lambda" "with-safe-execution")}
        {Lisp-Entry "default-preferences" method #f 2383 20 2383 39 ("Application-Preferences" "new")}
        {Lisp-Entry "toolbox-file" method #f 2387 29 2387 41 ("Profile" "File")}
        {Lisp-Entry "Default-Page-Setup" definition #f 2396 14 2396 32 ()}
        {Lisp-Entry "Default-Page-Setup-Designer" definition #f 2399 14 2399 41 ()}
        {Lisp-Entry "Default-Page-Setup-Form" definition #f 2402 14 2402 37 ()}
        {Lisp-Entry "Default-Page-Setup-File" definition #f 2406 14 2406 37 ("Profile" "File")}
        {Lisp-Entry "set-default-page-setup" method #f 2410 31 2410 53 ("Default-Page-Setup" "set!" "page-setup")}
        {Lisp-Entry "default-page-setup" method #f 2414 31 2414 49 ("setup-page-setup" "Default-Page-Setup" "not" "when")}
        {Lisp-Entry "default-page-setup-designer" method #f 2420 31 2420 58 ("setup-page-setup" "Default-Page-Setup-Designer" "not" "when")}
        {Lisp-Entry "setup-page-setup" method #f 2426 19 2426 35 ("reference:" "get-form" "form:" "Designer" "new" "Default-Page-Setup-Designer" "instantiate" "Default-Page-Setup" "set!" "Default-Page-Setup-Form" "read-form" "exists?" "Profile" "'Profile" "is-alias?" "and" "if" "form" "Default-Page-Setup-File" "file" "let*")}
        {Lisp-Entry "save-page-setup" method #f 2433 19 2433 34 ("save" "Default-Page-Setup-File" "set-origin" "not" "form" "let" "get-form" "get-origin" "file?" "Default-Page-Setup-Designer" "and" "when")}
        {Lisp-Entry "get-documentation-cataloguer" method #f 2446 26 2446 54 ()}
        {Lisp-Entry "on-zoom-out" method #f 2455 11 2455 22 ("0.25" "-" "scale-view" "get-scaling" "scaling" "bell" "not" "if" "what:" "get-property" "scaled-view" "view" "let" "evt")}
        {Lisp-Entry "on-zoom-in" method #f 2463 11 2463 21 ("0.25" "+" "scale-view" "get-scaling" "scaling" "bell" "not" "if" "what:" "get-property" "scaled-view" "view" "let" "evt")}
        {Lisp-Entry "on-unzoom" method #f 2471 11 2471 20 ("1.0" "scale-view" "bell" "not" "if" "what:" "get-property" "scaled-view" "view" "let" "evt")}
        {Lisp-Entry "scaled-view" method #f 2478 11 2478 22 ("mouse-view" "current-document" "document" "case" "what")}
        {Lisp-Entry "scale-view" method #f 2484 11 2484 21 ("set-scaled?" "set-scaling" "user-message" "scaled?" "scaling" "view")}
        {Lisp-Entry "on-capture-document" method #f 2495 11 2495 30 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "highlight-root-only?:" "highlight:" "capture-document" "pos" "view" "lambda" "click:" "pick-figure" "evt")}
        {Lisp-Entry "on-capture-mouse-document" method #f 2505 11 2505 36 ("capture-document" "bell" "not" "if" "mouse-view" "view" "let" "evt")}
        {Lisp-Entry "capture-document" definition #f 2512 15 2512 31 ("export-picture" "get-guest" "guest" "bell" "not" "if" "get-host" "host" "let" "view")}
        {Lisp-Entry "on-capture-host" method #f 2522 11 2522 26 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "highlight-root-only?:" "highlight:" "capture-host" "pos" "view" "lambda" "click:" "pick-figure" "evt")}
        {Lisp-Entry "on-capture-mouse-host" method #f 2532 11 2532 32 ("capture-host" "bell" "not" "if" "mouse-view" "view" "let" "evt")}
        {Lisp-Entry "capture-host" definition #f 2539 15 2539 27 ("export-picture" "bell" "not" "if" "get-host" "host" "let" "view")}
        {Lisp-Entry "update-windowing-actions" method #f 2551 26 2551 50 ("update-menubar-buttons" "update-window-actions" "update-history-actions" "exiting-process?" "unless")}
        {Lisp-Entry "update-window-actions" method #f 2558 18 2558 39 ("tile-vertically" "tile-horizontally" "current-frame" "previous-frame" "2" "next-frame" "print" "print-preview" "print-layout" "page-setup" "compare-saved" "revert-saved" "save-all" "save-as" "save" "guest" "close-all" "not" "1" ">=" "and" "close" "application" "Action" "set-action-enabled?" "in-modal?" "length" "count" "all-frames" "frames" "let*")}
        {Lisp-Entry "on-next-frame" method #f 2580 27 2580 40 ("current-frame" "focus-host" "send-frame-to-back" "first-frame" "first" "let" "evt")}
        {Lisp-Entry "on-previous-frame" method #f 2586 27 2586 44 ("current-frame" "focus-host" "bring-frame-to-front" "last-frame" "last" "let" "evt")}
        {Lisp-Entry "on-current-frame" method #f 2592 27 2592 43 ("focus-host" "first-frame" "first" "let" "evt")}
        {Lisp-Entry "on-tile-horizontally" method #f 2597 27 2597 47 ("increase!" "Dimension" "set-size" "Point" "new" "set-position" "frame" "for-each" "restore" "lambda" "with-locked-update" "0" "t" "quotient" "h" "get-height" "height" "get-width" "width" "length" "count" "get-views" "frames" "current-stage" "stage" "let*" "evt")}
        {Lisp-Entry "on-tile-vertically" method #f 2615 27 2615 45 ("increase!" "Dimension" "set-size" "Point" "new" "set-position" "frame" "for-each" "restore" "lambda" "with-locked-update" "0" "l" "quotient" "w" "get-height" "height" "get-width" "width" "length" "count" "get-views" "frames" "current-stage" "stage" "let*" "evt")}
        {Lisp-Entry "on-select-frame" method #f 2633 19 2633 34 ("focus-host" "bring-to-front" "host:" "get-property" "host" "let" "evt")}
        {Lisp-Entry "on-select-palette" method #f 2639 19 2639 36 ("get-player" "bring-to-front" "host:" "get-property" "host" "let" "evt")}
        {Lisp-Entry "update-modal-actions" method #f 2649 27 2649 47 ("update-windowing-actions")}}
      {Lisp-Entry "Default-Workspace" class #f 2658 7 2658 24 ("root" "location:" "fullscreen?:" "Workspace-Preferences")}}})
"Application-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "Application-Actions.jazz"} 1288732034
    {Lisp-Entry "jazz.system.application.Application-Actions" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Application-Actions" class #f 46 20 46 39 ("on-about" "about" "on-tile-vertically" "tile-vertically" "on-tile-horizontally" "tile-horizontally" "on-current-frame" "current-frame" "on-previous-frame" "previous-frame" "on-next-frame" "next-frame" "on-previous-workspace" "previous-workspace" "F6" "on-next-workspace" "next-workspace" "on-navigate-frame" "navigate-frame" "on-split-horizontally" "split-horizontally" "on-split-vertically" "split-vertically" "on-delete-other-stages" "delete-others" "on-delete-stage" "delete" "Backspace" "on-full-screen" "full-screen" "on-maximize/restore" "maximize/restore" "Space" "on-zoom-vertically" "zoom-vertically" "Return" "on-zoom-horizontally" "zoom-horizontally" "on-replace-selected" "replace-selected" "on-replace-all" "replace-all" "on-replace&find-forward" "replace&find-forward" "on-replace" "replace" "on-find-backward" "find-backward" "F3" "on-find-forward" "find-forward" "on-pop-results" "pop-results" "on-edit-current" "edit-current" "on-edit-previous" "edit-previous" "F4" "on-edit-next" "edit-next" "on-find-in-projects" "find-in-projects" "on-find-in-directories" "find-in-directories" ":shift" "on-find-in-text" "find-in-text" "on-find" "find" "on-forward-history" "forward-history" "on-backward-history" "backward-history" "on-add-history" "add-history" "on-paste-cycle-stack-reversed" "paste-cycle-stack-reversed" "on-paste-cycle-stack" "paste-cycle-stack" "on-quit-application" "exit" "on-page-setup" "page-setup" "on-print-preview" "print-preview" "on-print-layout" "print-layout" "on-print" "print" "on-save-all" "save-all" "on-close-all" "close-all" "on-close" "close" "on-open" "open" ":alt" ":control" "Shortcut" "shortcut:" "on-new" ":application" "Event-Handler" "action-handler:" "new" "name:" "Orphaned-Actions")}}})
"Application-Bindings"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "Application-Bindings.jazz"} 1289506008
    {Lisp-Entry "jazz.system.application.Application-Bindings" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "Application-Bindings" class #f 45 20 45 40 ("guest" "tree" "formatted-text" "text" "view" "application" "name:" "Bindings")}}})
"Application-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "Application-Event.jazz"} 1288732034
    {Lisp-Entry "jazz.system.application.Application-Event" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Application-Event" class #f 43 7 43 24 ("Event")}}})
"Application-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "Application-Preferences.jazz"} 1289965990
    {Lisp-Entry "jazz.system.application.Application-Preferences" module #f 37 18 37 65 ("jazz")
      {Lisp-Entry "Application-Preferences" class #f 47 20 47 43 ("interface" "tools" "documents" "fonts" "favorites" "aliases" "name:" "restored" "'restored" "initialize" "Process-Preferences")
        {Lisp-Entry "toplevel-title" property #f 50 12 50 26 ()}
        {Lisp-Entry "get-toplevel-title" accessor #f 50 62 50 70 ()}
        {Lisp-Entry "set-toplevel-title" accessor #f 50 62 50 70 ()}
        {Lisp-Entry "toplevel-state" property #f 51 12 51 26 ()}
        {Lisp-Entry "get-toplevel-state" accessor #f 51 62 51 70 ()}
        {Lisp-Entry "set-toplevel-state" accessor #f 51 62 51 70 ()}
        {Lisp-Entry "toplevel-position" property #f 52 12 52 29 ()}
        {Lisp-Entry "get-toplevel-position" accessor #f 52 62 52 70 ()}
        {Lisp-Entry "set-toplevel-position" accessor #f 52 62 52 70 ()}
        {Lisp-Entry "toplevel-size" property #f 53 12 53 25 ()}
        {Lisp-Entry "get-toplevel-size" accessor #f 53 62 53 70 ()}
        {Lisp-Entry "set-toplevel-size" accessor #f 53 62 53 70 ()}
        {Lisp-Entry "catalog-types" property #f 54 12 54 25 ()}
        {Lisp-Entry "get-catalog-types" accessor #f 54 62 54 70 ()}
        {Lisp-Entry "set-catalog-types" accessor #f 54 62 54 70 ()}
        {Lisp-Entry "documented?" property #f 55 12 55 23 ()}
        {Lisp-Entry "get-documented?" accessor #f 55 62 55 70 ()}
        {Lisp-Entry "set-documented?" accessor #f 55 62 55 70 ()}
        {Lisp-Entry "fullscreen-warned?" property #f 56 12 56 30 ()}
        {Lisp-Entry "get-fullscreen-warned?" accessor #f 56 62 56 70 ()}
        {Lisp-Entry "set-fullscreen-warned?" accessor #f 56 62 56 70 ()}
        {Lisp-Entry "active-bindings" property #f 57 12 57 27 ()}
        {Lisp-Entry "get-active-bindings" accessor #f 57 62 57 70 ()}
        {Lisp-Entry "set-active-bindings" accessor #f 57 62 57 70 ()}
        {Lisp-Entry "toolbar-classes" property #f 58 12 58 27 ()}
        {Lisp-Entry "get-toolbar-classes" accessor #f 58 62 58 70 ()}
        {Lisp-Entry "set-toolbar-classes" accessor #f 58 62 58 70 ()}
        {Lisp-Entry "get-class-descriptor" method #f 76 25 76 45 ("Application-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 85 11 85 17 ()
        {Lisp-Entry "Application-Preferences-Descriptor" class #f 91 7 91 41 ("toolbar-classes" "active-bindings" "fullscreen-warned?" "toplevel-size" "toplevel-position" "domain" "name:" "documented?" "catalog-types" "toplevel-state" "toplevel-title" "protocols" "current-directory" "active-context" "categorized:" "Process-Preferences-Descriptor")}
        {Lisp-Entry "Toolbar-Classes-Domain" class #f 116 7 116 29 ("List-Domain")
          {Lisp-Entry "finish" method #f 119 20 119 26 ("Toolbar-Class-Domain" "new" "domain" "set!" "nextmethod" "rest")}
          {Lisp-Entry "add-value" method #f 125 20 125 29 ("class:" "cdr" "car" "self" "add-row" "class" "value")}
          {Lisp-Entry "new-value" method #f 130 20 130 29 ()}}
        {Lisp-Entry "Toolbar-Class-Domain" class #f 139 7 139 27 ("Value-Domain")
          {Lisp-Entry "present" method #f 147 20 147 27 ("format" "model")}}}}})
"Command-Line"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "Command-Line.jazz"} 1288732034
    {Lisp-Entry "jazz.system.process.Command-Line" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Command-Line" class #f 40 20 40 32 ("Object")}
      {Lisp-Entry "Command-Line" class #f 46 20 46 32 ("Object")
        {Lisp-Entry "for-each-action" method #f 54 23 54 38 ("'argument" "argument-example" "bind-optionals" "rest" "argument-help" "argument" "'section" "arguments" "section" "list" "'action" "sections" "action-help" "action" "bind" "info" "lambda" "for-each" "actions" "proc")}
        {Lisp-Entry "present-version" method #f 75 16 75 31 ("present" "format" "version" "name")}
        {Lisp-Entry "present-syntax" method #f 81 16 81 30 ("format" "name")}
        {Lisp-Entry "present-help" method #f 86 16 86 28 ("get-output-string" "argument-example" "bind-optionals" "rest" "argument-help" "argument" "section" "format" "action-help" "bind" "action" "case" "info" "type" "lambda" "for-each-action" "open-output-string" "printer" "let" "actions")}
        {Lisp-Entry "present-examples" method #f 105 16 105 32 ("get-output-string" "present-argument-value" "when" "argument-example" "bind-optionals" "rest" "argument-help" "argument" "get-process" "process-name" "format" "action-help" "bind" "action" "case" "info" "type" "lambda" "for-each-action" "open-output-string" "printer" "let" "actions")}
        {Lisp-Entry "present-argument-value" method #f 122 16 122 38 ("format" "string?" "if" "value")}
        {Lisp-Entry "command-help" method #f 128 23 128 35 ("title:" "present-examples" "present-help" "present-syntax" "present-version" "format" "message-box" "actions" "version" "name")}}}})
"Exception-Presenter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "Exception-Presenter.jazz"} 1288732034
    {Lisp-Entry "jazz.system.application.Exception-Presenter" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Exception-Presenter" class #f 45 20 45 39 ("Object")}
      {Lisp-Entry "Exception-Presenter" class #f 51 20 51 39 ("Object")
        {Lisp-Entry "present" method #f 54 18 54 25 ("set-auto-continue?" "remove-false" "actions:" "present-execution-stack" "content:" "message-box" "code" "let" "continue-exception" "get-continuable?" "get-auto-continue?" "and" "get-execution-stack" "execution-stack" "get-execution-context" "execution-context" "cancel" "'cancel" "cancel-action" "continue-all" "continue-all-action" "continue" "continue-action" "restart" "restart-action" "yes" "'yes" "else" "if" "case" "list" "yes-action" "continuable?" "restartable?" "present-message" "message" "let*" "prefix?" "prefix?:" "error" "'error" "type" "type:" "exception")}
        {Lisp-Entry "present-execution-stack" method #f 86 11 86 34 ("father:" "detail" "Image-Resource" "image:" "or" "title:" "Tree-Node" "list" "children:" "collapsed" "'collapsed" "state:" "add-row" "row" "get-details" "details" "get-title" "title" "node" "lambda" "for-each" "'tree" "locate" "tree" "150" "450" "Dimension" "size:" "Context-Border" "new" "border" "let*" "when" "execution-stack")}}
      {Lisp-Entry "Context-Border" class #f 106 7 106 21 ("300" "width:" "title:" "node" "selection-mode:" ":images" "portfolio:" "tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "tool" "style:" "Outline-Border" "name:" "Color" "border-color:" "solid" "border-type:" "Border-View")}
      {Lisp-Entry "Context-Tree" class #f 124 7 124 19 ("Tree-View")}}})
"Exit-Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "Exit-Listener.jazz"} 1288732034
    {Lisp-Entry "jazz.system.process.Exit-Listener" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Exit-Listener" interface #f 44 24 44 37 ("Listener")
        {Lisp-Entry "prepare-exit" method #f 47 35 47 47 ()}}}})
"Performance-Query"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "performance" "platform" "windows" "Performance-Query.jazz"} 1288732034
    {Lisp-Entry "jazz.system.performance.platform.windows.Performance-Query" module #f 37 18 37 76 ("jazz")
      {Lisp-Entry "Performance-Query" class #f 44 7 44 24 ("Object")
        {Lisp-Entry "query" slot #f 47 8 47 13 ()}
        {Lisp-Entry "initialize" method #f 50 11 50 21 ("destroy-mandatory" "query~self" "set!" "validate-status" "0" "NULL" "PdhOpenQuery" "query" "status" "receive" "nextmethod")}
        {Lisp-Entry "destroy" method #f 58 11 58 18 ("nextmethod" "query" "PdhCloseQuery" "validate-status")}
        {Lisp-Entry "add-counter" method #f 63 18 63 29 ("validate-status" "0" "query" "PdhAddCounter" "counter" "status" "receive" "let" "bind-keywords" "BrowseCounterPath" "error" "else" "guess-process-instance" "module-base" ":string" "format" "and" "browse-counter-path" "cond" "browse?" "counter-name" "object-name" "path" "counter-path" "define" "rest")}
        {Lisp-Entry "collect-data" method #f 82 18 82 30 ("query" "PdhCollectQueryData" "validate-status")}
        {Lisp-Entry "get-counter-value" method #f 86 18 86 35 ("PDH_FMT_COUNTERVALUE-free" "PDH_FMT_COUNTERVALUE-longValue-ref" "prog1" "NULL" "PDH_FMT_LONG" "PdhGetFormattedCounterValue" "validate-status" "PDH_FMT_COUNTERVALUE-make" "value" "let" "counter")}
        {Lisp-Entry "validate-status" method #f 93 11 93 26 ("error" "0" "/=" "when" "status")}}}})
"Process"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "Process.jazz"} 1290005243
    {Lisp-Entry "jazz.system.process.Process" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Process" class #f 55 7 55 14 ("initialize" "Object")
        {Lisp-Entry "settings" slot #f 58 8 58 16 ()}
        {Lisp-Entry "get-settings" accessor #f 58 50 58 58 ()}
        {Lisp-Entry "preferences-designer" slot #f 59 8 59 28 ()}
        {Lisp-Entry "get-preferences-designer" accessor #f 59 50 59 58 ()}
        {Lisp-Entry "context" slot #f 60 8 60 15 ()}
        {Lisp-Entry "exit-continuation" slot #f 61 8 61 25 ()}
        {Lisp-Entry "process-name" method #f 69 26 69 38 ()}
        {Lisp-Entry "process-owner" method #f 73 26 73 39 ()}
        {Lisp-Entry "process-copyright" method #f 77 26 77 43 ()}
        {Lisp-Entry "process-licensee" method #f 81 26 81 42 ()}
        {Lisp-Entry "process-icon" method #f 85 26 85 38 ()}
        {Lisp-Entry "process-version" method #f 89 26 89 41 ("0" "1" "Version")}
        {Lisp-Entry "process-email" method #f 93 26 93 39 ()}
        {Lisp-Entry "process-actions" method #f 97 26 97 41 ()}
        {Lisp-Entry "process-event-source" method #f 101 26 101 46 ("process-name" "EventSource" "'EventSource" "string-parameter" "or")}
        {Lisp-Entry "boot-environment" method #f 111 26 111 42 ("run-loop" "format" "system-message" "get-load-stack" "not-null?" "get-load-thread" "current-thread" "eq?" "and" "run-loop?" "when" "start-process" "ready-debuggee" "activate-process" "conclude-phase" "finish-phase" "finalize-phase" "install-phase" "prepare-phase" "register-versions" "initialize-settings" "initialize-aliases" "update-debuggee" "signal" "Cancel-Signal" "catch")}
        {Lisp-Entry "update-debuggee" method #f 134 11 134 26 ("update-debuggee-process" "process-version" "present" "current-process-version-set!" "process-name" "current-process-title-set!" "current-process-title" "unless")}
        {Lisp-Entry "initialize-settings" method #f 141 29 141 48 ()}
        {Lisp-Entry "register-versions" method #f 145 11 145 28 ("get-windows-version" "present" "windows-version:" "register-crash-info")}
        {Lisp-Entry "prepare-phase" method #f 150 11 150 24 ("prepare-process" "prepare-workbench" "prepare-preferences-repositories" "prepare-preferences-aliases" "prepare-preferences" "prepare-environment" "prepare-aliases" "prepare-bindings")}
        {Lisp-Entry "prepare-environment" method #f 161 29 161 48 ("initialize-system" "self" "set-process")}
        {Lisp-Entry "prepare-preferences" method #f 166 11 166 30 ("setup-preferences")}
        {Lisp-Entry "prepare-process" method #f 170 26 170 41 ("setup-crash-handler")}
        {Lisp-Entry "install-phase" method #f 174 11 174 24 ("install-process" "install-environment")}
        {Lisp-Entry "install-environment" method #f 179 29 179 48 ()}
        {Lisp-Entry "install-process" method #f 183 26 183 41 ("initialize-platform")}
        {Lisp-Entry "finalize-phase" method #f 187 11 187 25 ("setup-profile" "finalize-process" "start-servers" "finalize-environment")}
        {Lisp-Entry "finalize-environment" method #f 194 29 194 49 ()}
        {Lisp-Entry "finalize-process" method #f 198 26 198 42 ()}
        {Lisp-Entry "setup-profile" method #f 202 26 202 39 ()}
        {Lisp-Entry "finish-phase" method #f 206 11 206 23 ("finish-process" "finish-environment")}
        {Lisp-Entry "finish-environment" method #f 211 29 211 47 ("register-base-objects")}
        {Lisp-Entry "finish-process" method #f 215 26 215 40 ()}
        {Lisp-Entry "conclude-phase" method #f 219 11 219 25 ("conclude-process" "conclude-environment")}
        {Lisp-Entry "conclude-environment" method #f 224 29 224 49 ()}
        {Lisp-Entry "conclude-process" method #f 228 26 228 42 ("get-console-port" "current-thread" "start-repl-thread" "select-console" "get-controller-debugger" "when")}
        {Lisp-Entry "start-process" method #f 234 29 234 42 ()}
        {Lisp-Entry "terminate-process" method #f 243 29 243 46 ()}
        {Lisp-Entry "preserve-environment" method #f 252 26 252 46 ()}
        {Lisp-Entry "close-environment" method #f 256 26 256 43 ("stop-servers" "detach-from-controller" "reloading-process?" "unless" "persist-preferences")}
        {Lisp-Entry "persist-preferences" method #f 263 11 263 30 ("save" "get-form" "get-origin" "file?" "persist-preferences?" "preferences-designer" "and" "when")}
        {Lisp-Entry "get-toplevel" method #f 273 26 273 38 ()}
        {Lisp-Entry "exit-process" method #f 282 18 282 30 ("exit" "continuation-return" "exit-continuation" "if" "unload-process" "0" "status")}
        {Lisp-Entry "reload-process" method #f 289 26 289 40 ("boot-environment" "exit-continuation" "continuation-graft" "unload-process" "*reloading-process?*" "parameterize" "lambda" "reload-process" "'reload-process" "primordial-thread" "thread-execute")}
        {Lisp-Entry "unload-process" method #f 297 11 297 25 ("set-process" "terminate-process" "close-environment" "preserve-environment" "*exiting-process?*" "parameterize")}
        {Lisp-Entry "process-alias" method #f 310 26 310 39 ("find-component" "null?" "cdr" "next" "when" "car" "process-alias" "sub" "let" "pair?" "if" "else" "self" ":process" "case" "name")}
        {Lisp-Entry "get-context" method #f 329 18 329 29 ("context")}
        {Lisp-Entry "set-context" method #f 333 18 333 29 ("context-update" "context" "set!" "ctx")}
        {Lisp-Entry "context-update" method #f 343 29 343 43 ("set-client" "get-client" "client" "editor" "Toolbox-Manager" "'Toolbox-Manager" "modify-toolbox" "singleton-docked" "get-guest" "modify-editor" "SQL-Connections-Manager" "'SQL-Connections-Manager" "in-manifest?" "when" "modify-connections" "set-active-trait" "context" "find-component" "trait" "get-preferences-designer" "designer" "get-preferences" "pref" "let*" "modify-preferences" "define")}
        {Lisp-Entry "install-context" method #f 372 18 372 33 ("set-active-trait" "find-child" "trait" "let" "context" "when" "component")}
        {Lisp-Entry "persist-preferences?" method #f 384 29 384 49 ()}
        {Lisp-Entry "preferences-file" method #f 388 29 388 45 ("Profile" "File")}
        {Lisp-Entry "setup-preferences" method #f 392 29 392 46 ("setup-preferences/designer")}
        {Lisp-Entry "setup-preferences/designer" method #f 396 11 396 37 ("set-current-directory" "exists?" "and" "when" "get-current-directory" "directory" "install-context" "context" "set!" "else" "get-active-context" "string->symbol" "cond" "command-argument" "arg" "preferences-context" "define" "get-preferences-root" "root" "let" "load-preferences" "set-preferences/designer")}
        {Lisp-Entry "set-preferences/designer" method #f 412 11 412 35 ("reference:" "get-form" "form:" "Designer" "new" "preferences-designer" "set!" "preferences")}
        {Lisp-Entry "load-preferences" method #f 416 29 416 45 ("default-preferences" "read-form" "instantiate" "exists?" "Profile" "'Profile" "is-alias?" "and" "if" "preferences-file" "file" "persist-preferences?" "persist?" "let")}
        {Lisp-Entry "default-preferences" method #f 424 29 424 48 ("Process-Preferences" "new")}
        {Lisp-Entry "apply-preferences" method #f 428 18 428 35 ("apply-preferences" "client" "preferences")}
        {Lisp-Entry "save-preferences" method #f 432 18 432 34 ("get-preferences-designer" "save-preferences" "client" "preferences")}
        {Lisp-Entry "set-preferences-property" method #f 436 18 436 42 ("get-preferences-designer" "set-property" "value" "property" "preferences")}
        {Lisp-Entry "get-preferences-rights" method #f 440 26 440 48 ()}
        {Lisp-Entry "persist-usernames?" method #f 449 26 449 44 ()}
        {Lisp-Entry "persist-passwords?" method #f 453 26 453 44 ()}
        {Lisp-Entry "mandatory-version" method #f 462 26 462 43 ("what")}
        {Lisp-Entry "signal-readyness" method #f 472 21 472 37 ("SetEvent" "when" "EVENT_MODIFY_STATE" "OpenEvent" "handle" "let" "name")}
        {Lisp-Entry "run-loop" method #f 483 26 483 34 ("start-loop" "with-current-loop" "with-repl-context" "exit-continuation" "set!" "cont" "lambda" "continuation-capture")}
        {Lisp-Entry "resume-loop" method #f 494 18 494 29 ("invoke-restart" "resume-loop-action" "when" "resume-loop" "'resume-loop" "find-restart" "restart" "let")}
        {Lisp-Entry "resume-loop-action" method #f 501 26 501 44 ()}
        {Lisp-Entry "start-loop" method #f 505 26 505 36 ("get-exception-debugger" "with-exception-debugger" "thread-read" "thunk" "lambda" "present-current-loop-restart" "resume-loop" "'resume-loop" "with-restart-catcher" "loop" "let" "proper-tail-calls" "declare")}
        {Lisp-Entry "system-title" method #f 521 26 521 38 ()}
        {Lisp-Entry "prepare-bindings" method #f 530 29 530 45 ()}
        {Lisp-Entry "prepare-aliases" method #f 539 29 539 44 ()}
        {Lisp-Entry "prepare-preferences-aliases" method #f 543 26 543 53 ("get-list" "register-alias" "get-directory" "directory" "get-alias" "alias" "lambda" "for-each" "get-children" "when" "error?:" "aliases" "'aliases" "get-preferences" "pref" "let")}
        {Lisp-Entry "resolve-alias" method #f 555 26 555 39 ("name")}
        {Lisp-Entry "prepare-preferences-repositories" method #f 564 26 564 58 ("parse" "install-repository" "dir" "lambda" "for-each" "get-repositories" "when" "error?:" "repositories" "'repositories" "get-preferences" "pref" "let")}
        {Lisp-Entry "prepare-workbench" method #f 578 26 578 43 ()}
        {Lisp-Entry "start-servers" method #f 587 29 587 42 ("start-remote-server" "command-host/service" "when")}
        {Lisp-Entry "start-remote-server" method #f 593 19 593 38 ("default-listener-service" "default-service:" "default-listener-host" "default-host:" "start-remote-listener")}
        {Lisp-Entry "default-listener-host" method #f 597 29 597 50 ()}
        {Lisp-Entry "default-listener-service" method #f 601 29 601 53 ()}
        {Lisp-Entry "stop-servers" method #f 605 29 605 41 ("stop-remote-listener")}
        {Lisp-Entry "get-name" method #f 614 18 614 26 ("process-name")}
        {Lisp-Entry "get-icon" method #f 618 18 618 26 ("process-icon")}
        {Lisp-Entry "get-register" method #f 622 18 622 30 ("get-local-register")}
        {Lisp-Entry "register-base-objects" method #f 631 29 631 50 ()}
        {Lisp-Entry "get-local-debugger" method #f 640 26 640 44 ()}
        {Lisp-Entry "get-snapshot-debugger" method #f 644 26 644 47 ()}
        {Lisp-Entry "initial-console-context" method #f 653 26 653 49 (":process")}
        {Lisp-Entry "process-debuggee-loop" method #f 657 29 657 50 ("debuggee-loop")}
        {Lisp-Entry "get-remote-profile" method #f 666 26 666 44 ("name")}
        {Lisp-Entry "get-profile-link-method" method #f 670 26 670 49 ()}}}})
"Process-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "Process-Preferences.jazz"} 1289965989
    {Lisp-Entry "jazz.system.process.Process-Preferences" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Process-Preferences" class #f 46 20 46 39 ("title:" "initialize" "Preferences")
        {Lisp-Entry "active-context" property #f 49 12 49 26 ()}
        {Lisp-Entry "get-active-context" accessor #f 49 55 49 63 ()}
        {Lisp-Entry "set-active-context" accessor #f 49 55 49 63 ()}
        {Lisp-Entry "current-directory" property #f 50 12 50 29 ()}
        {Lisp-Entry "get-current-directory" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "set-current-directory" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "protocols" property #f 51 12 51 21 ()}
        {Lisp-Entry "get-protocols" accessor #f 51 55 51 63 ()}
        {Lisp-Entry "set-protocols" accessor #f 51 55 51 63 ()}
        {Lisp-Entry "get-class-descriptor" method #f 63 25 63 45 ("Process-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 72 11 72 17 ()
        {Lisp-Entry "Process-Preferences-Descriptor" class #f 78 7 78 37 ("domain" "protocols" "current-directory" "active-context" "name:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")}
        {Lisp-Entry "Protocols-Domain" class #f 95 7 95 23 ("List-Domain")
          {Lisp-Entry "finish" method #f 98 20 98 26 ("Protocol-Domain" "new" "domain" "set!" "nextmethod" "rest")}
          {Lisp-Entry "add-value" method #f 104 20 104 29 ("class:" "cdr" "car" "self" "add-row" "class" "value")}
          {Lisp-Entry "new-value" method #f 109 20 109 29 ("cons")}}
        {Lisp-Entry "Protocol-Domain" class #f 118 7 118 22 ("Value-Domain")
          {Lisp-Entry "present" method #f 126 20 126 27 ("format" "model")}}}}})
"Save-Environment-Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "Save-Environment-Listener.jazz"} 1288732034
    {Lisp-Entry "jazz.system.process.Save-Environment-Listener" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "Save-Environment-Listener" interface #f 44 24 44 49 ("Listener")
        {Lisp-Entry "save-environment" method #f 47 35 47 51 ()}}}})
"Service"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "service" "platform" "windows" "Service.jazz"} 1288732034
    {Lisp-Entry "jazz.system.service.platform.windows.Service" module #f 38 18 38 62 ("MENUITEMINFO-free" "MF_SEPARATOR" "InsertMenuItem" "length" "cch" "'cch" "dwTypeData" "'dwTypeData" "wID" "'wID" "MFS_DEFAULT" "fState" "'fState" "MFT_STRING" "MFT_SEPARATOR" "fType" "'fType" "MIIM_ID" "MIIM_STATE" "MIIM_TYPE" "fMask" "'fMask" "MENUITEMINFO" "info" "DestroyMenu" "invoke-handler" ":action" "Event" "apply" "evt" "get-properties" "properties" "sender" "action-handler:" "getf" "action-handler" "-" "element" "y" "'y" "x" "'x" "get" "TPM_RETURNCMD" "TPM_RIGHTALIGN" "TrackPopupMenu" "SetForegroundWindow" "increase!" "id:" "default?:" "separator?:" "title:" "insert-item" "others" "default?" "separator?" "title" "bind-keywords" "for-each" "id" "CreatePopupMenu" "menu" "POINT-free" "GetCursorPos" "POINT" "point" "config" "track-menu" "NIM_DELETE" "NIM_ADD" "Shell_NotifyIcon" "uCallbackMessage" "'uCallbackMessage" "NIF_ICON" "NIF_MESSAGE" "bitwise-ior" "uFlags" "'uFlags" "10" "uID" "'uID" "hWnd" "'hWnd" "size-of" "cbSize" "'cbSize" "LR_SHARED" "16" "IMAGE_ICON" "int-resource" "LoadImage" "icon" "resource" "NOTIFYICONDATA" "record" "100" "CreateWindowEx" "create-taskicon-hwnd" "RegisterClassEx" "lpszClassName" "'lpszClassName" "lpszMenuName" "'lpszMenuName" "hbrBackground" "'hbrBackground" "hCursor" "'hCursor" "hIcon" "'hIcon" "hInstance" "'hInstance" "cbWndExtra" "'cbWndExtra" "cbClsExtra" "'cbClsExtra" "get-window-proc" "lpfnWndProc" "'lpfnWndProc" "CS_DBLCLKS" "style" "'style" "set" "WNDCLASSEX" "wc" "current-instance" "instance" "taskicon-class" "taskbar-context-menu" "WM_RBUTTONDOWN" "taskbar-double-click" "WM_LBUTTONDBLCLK" "taskbar-mouse-down" "WM_LBUTTONDOWN" ":service" "process-alias" "EXIT_FAILURE" "exception:" "file:" "dump-stack" "distribution-build?" "not" "timestamped-file" "file" "exception-reason" "log-error-event" "accountable" "frame" "exception" "debug-exception" "DefWindowProc" "taskbar-event" "JZ_TASKICON" "lparam" "wparam" "hwnd" "DispatchMessage" "TranslateMessage" "GetMessage" "MSG" "msg" "NULL" "WM_QUIT" "PostMessage" "thread" "lambda" "execute:" "self" "context:" "name:" "Thread" "unimplemented" "process-messages" "launch-service-thread" "start-loop" "1" "sleep" "while" "process-service" "setup-service" "run-service" "=" "if" "get-service-error" "get-service-handle" "coinitialize" "service-main" "0" "/=" "start-service-dispatcher" "err" "run-loop" "log-success-event" "stop-service" "pause-service" "continue-service" "start-service" "neq?" "updated-state" "process-service-control" "'stopped" "'stop-pending" "'paused" "'pause-pending" "'running" "'continue-pending" "'start-pending" "get-service-state" "ecase" "get-state" "SERVICE_STOPPED" "stopped" "SERVICE_STOP_PENDING" "stop-pending" "SERVICE_PAUSED" "paused" "SERVICE_PAUSE_PENDING" "pause-pending" "SERVICE_RUNNING" "running" "SERVICE_CONTINUE_PENDING" "continue-pending" "SERVICE_START_PENDING" "start-pending" "case" "set-service-state" "state" "set-state" "public" "delete-service" "open-service" "presentation:" "create-service" "handle" "command" "executable" "Service-Manager" "new" "manager" "parse" "application-key" "Build" "Directory" "new-file" "message-file" "application-path" "presentation" "let*" "messages" "set-value" "create-key" "service-key" "with" "format" "service-path" "Registry" "Local-Machine" "local-machine-key" "description" "name" "service-icon" "service-executable" "service-messages" "service-description" "service-name" "virtual" "protected" "service-presentation" "EventSource" "'EventSource" "string-parameter" "process-event-source" "remove-taskicon" "and" "close-environment" "add-taskicon" "process-taskbar-message" "set-window-callback" "register-taskicon-class" "eq?" "when" "finalize-process" "error" "else" "debug" "'debug" "run" "'run" "set!" "unregister-service" "register-service" "EXIT_SUCCESS" "exit-process" "process-actions" "process-version" "process-name" "Command-Line" "command-help" "ci=?" "null?" "or" "cond" "command-action" "action" "let" "nextmethod" "prepare-process" "method" "taskicon-hwnd" "initialize" "cached-state" "mode" "slot" "Process" "extends" "Service" "class" "jazz")
      {Lisp-Entry "Service" class #f 44 7 44 14 ("Process")}}})
"Service-Handle"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "service" "platform" "windows" "Service-Handle.jazz"} 1288732034
    {Lisp-Entry "jazz.system.service.platform.windows.Service-Handle" module #f 37 18 37 69 ("jazz.library" "import" "jazz")
      {Lisp-Entry "Service-Handle" class #f 40 7 40 21 ("Object")}}})
"Service-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "service" "platform" "windows" "Service-Manager.jazz"} 1288732034
    {Lisp-Entry "jazz.system.service.platform.windows.Service-Manager" module #f 37 18 37 70 ("jazz.library" "import" "jazz")
      {Lisp-Entry "Service-Manager" class #f 40 7 40 22 ("Object")}}})
"_application"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "_application.jazz"} 1288732034
    {Lisp-Entry "jazz.system.application" module #f 37 8 37 31 ("jazz")}})
"_log"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "log" "_log.jazz"} 1288732034
    {Lisp-Entry "jazz.system.log" module #f 38 8 38 23 ("jazz")
      {Lisp-Entry "log-event" definition #f 45 20 45 29 ("ReportEvent" "0" "array-set!" "1" "string" "new-array" "strings" "RegisterEventSource" "handle" "get-process" "process-event-source" "name" "let*" "log-event" "'log-event" "unimplemented" "message" "event-id" "type")}
      {Lisp-Entry "log-error-event" definition #f 55 20 55 35 ("event-id" "EVENTLOG_ERROR_TYPE" "log-event" "log-error-event" "'log-error-event" "unimplemented" "rest" "message")}
      {Lisp-Entry "log-success-event" definition #f 61 20 61 37 ("EVENTLOG_SUCCESS" "log-event" "log-success-event" "'log-success-event" "unimplemented" "1" "make-event-id" "event-id" "event-id:" "message")}}})
"_performance"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "performance" "_performance.jazz"} 1288732034
    {Lisp-Entry "jazz.system.performance" module #f 37 8 37 31 ("jazz")}})
"_process"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "_process.jazz"} 1288732034
    {Lisp-Entry "jazz.system.process" module #f 37 8 37 27 ("jazz")}})
"_service"
 ({Lisp-File-Entry {File jazz.system "src" "jazz" "system" "service" "_service.jazz"} 1288732034
    {Lisp-Entry "jazz.system.service" module #f 37 8 37 27 ("jazz")}})
"_system"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "_system.jazz"} 1288732034
    {Lisp-Entry "jazz.system" module #f 37 8 37 19 ("jazz")
      {Lisp-Entry "get-argument" definition #f 60 20 60 32 ("error" "specified?" "if" "command-argument" "and" "arg-value" "let" "unspecified" "default" "arg-parser" "arg")}
      {Lisp-Entry "get-parameter" definition #f 74 20 74 33 ("error" "specified?" "neq?" "Not-Found" "get-setting" "setting-value" "if" "command-argument" "and" "arg-value" "let" "unspecified" "default" "setting-parser" "setting" "arg-parser" "arg")}
      {Lisp-Entry "boolean-parameter" definition #f 86 20 86 37 ("identity" "parse-boolean" "get-parameter" "unspecified" "default" "setting" "arg")}
      {Lisp-Entry "integer-parameter" definition #f 90 20 90 37 ("identity" "parse-integer" "get-parameter" "unspecified" "default" "setting" "arg")}
      {Lisp-Entry "string-parameter" definition #f 94 20 94 36 ("identity" "get-parameter" "unspecified" "default" "setting" "arg")}
      {Lisp-Entry "pathname-argument" definition #f 99 20 99 37 ("length" "-" "1" "subseq" "0" "element" "eqv?" "tokenise-filename" "not" "if" "command-argument" "arg" "let" "name")}
      {Lisp-Entry "file-parameter" definition #f 109 20 109 34 ("identity" "get-parameter" "error" "get-extension" "/=" "if" "tokenise-filename" "File" "new" "file" "let" "str" "parse-file" "define" "unspecified" "default" "extension" "setting" "arg")}
      {Lisp-Entry "directory-parameter" definition #f 119 20 119 39 ("identity" "get-parameter" "tokenise-filename" "Directory" "new" "str" "parse-directory" "define" "unspecified" "default" "setting" "arg")}
      {Lisp-Entry "host-parameter" definition #f 126 20 126 34 ("string-parameter" "unspecified" "default" "setting" "arg")}
      {Lisp-Entry "service-parameter" definition #f 130 20 130 37 ("integer-parameter" "unspecified" "default" "setting" "arg")}
      {Lisp-Entry "Settings" class #f 139 7 139 15 ("initialize" "Object")
        {Lisp-Entry "file" slot #f 142 8 142 12 ()}
        {Lisp-Entry "content" slot #f 143 8 143 15 ()}
        {Lisp-Entry "modified?" slot #f 144 8 144 17 ()}
        {Lisp-Entry "initialize" method #f 147 20 147 30 ("set-file" "nextmethod" "file" "file:")}
        {Lisp-Entry "get-file" method #f 152 18 152 26 ("file")}
        {Lisp-Entry "set-file" method #f 156 18 156 26 ("load-content" "content" "not" "if" "file" "set!" "value")}
        {Lisp-Entry "get-setting" method #f 163 18 163 29 ("content" "table-ref" "default" "setting")}
        {Lisp-Entry "set-setting" method #f 167 18 167 29 ("modified?" "set!" "content" "table-set!" "value" "setting")}
        {Lisp-Entry "load-content" method #f 172 18 172 30 ("modified?" "file" "table-load" "lambda" "with-jazz-readtable" "eq?" "test:" "make-table" "content" "set!")}
        {Lisp-Entry "save-content" method #f 180 18 180 30 ("modified?" "set!" "-" "format" "value" "setting" "bind" "for-each" "key:" "string<?" "sort" "sorted" "not-null?" "when" "content" "table->list" "all" "let" "output" "get-eol-encoding" "eol-encoding:" "file" "parse" "path:" "call-with-output-file" "car" "symbol->string" "cardinality" "info" "lambda" "map" "max" "apply" "list" "find-longest" "define")}}
      {Lisp-Entry "*settings*" definition #f 204 12 204 22 ()}
      {Lisp-Entry "get-settings" definition #f 208 20 208 32 ("*settings*")}
      {Lisp-Entry "register-settings" definition #f 212 20 212 37 ("cons" "*settings*" "set!" "settings")}
      {Lisp-Entry "Not-Found" definition #f 216 12 216 21 ("not-found" "'not-found" "list")}
      {Lisp-Entry "get-setting" definition #f 220 20 220 31 ("*settings*" "continuation-return" "neq?" "when" "Not-Found" "get-setting" "value" "let" "settings" "for-each" "return" "lambda" "continuation-capture" "default" "name")}
      {Lisp-Entry "require-setting" definition #f 231 20 231 35 ("error" "get-setting" "or" "name")}
      {Lisp-Entry "require-string-setting" definition #f 236 20 236 42 ("error" "string?" "not" "if" "require-setting" "setting" "let" "name")}
      {Lisp-Entry "get-preferences" definition #f 248 20 248 35 ("find-component" "or" "else" "error" "when" "not" "cond" "get-preferences-root" "root" "let" "error?" "error?:" "name")}
      {Lisp-Entry "get-preferences-root" definition #f 261 20 261 40 ("get-reference" "when" "get-process" "get-preferences-designer" "designer" "let")}
      {Lisp-Entry "set-preference" definition #f 267 20 267 34 ("set-property" "get-process" "get-preferences-designer" "designer" "let" "value" "property" "preferences")}
      {Lisp-Entry "sort-case-sensitive?" definition #f 272 20 272 40 ("get-sort-case-sensitive?" "and" "error?:" "tree" "interface" "get-preferences" "pref" "let")}
      {Lisp-Entry "sort-predicates" definition #f 277 20 277 35 ("ci>?" "ci<?" "ci=?" "nu>?" "nu<?" "nu=?" "values" "sort-case-sensitive?" "if")}
      {Lisp-Entry "sort-predicate" definition #f 283 20 283 34 ("error" "else" "ci-compare" "compare" "ci>=?" "nu>=?" "greater/equal" "ci>?" "nu>?" "greater" "ci<=?" "nu<=?" "smaller/equal" "ci<?" "nu<?" "smaller" "ci=?" "nu=?" "if" "equal" "case" "sort-case-sensitive?" "case-sensitive?" "let" "name")}
      {Lisp-Entry "ensure-read/write" definition #f 300 33 300 50 ("throw-cancel" "read/write" "'read/write" "cancel" "'cancel" "no" "set-read/write" "'set-read/write" "yes" "process-keys?:" "question" "'question" "type:" "title:" "get-name" "format" "message-box" "case" "code" "no-action" "'no-action" "read/write?" "exists?" "not" "or" "if" "get-file" "file" "let" "throw" "'throw" "cancel-action" "cancel-action:" "moniker")}
      {Lisp-Entry "backup-file" definition #f 319 33 319 44 ("separator:" "get-extension" "get-base" "format" "get-parent" "new-unique-file" "file")}
      {Lisp-Entry "fail-safe-save" definition #f 323 33 323 47 ("else" "move-pathname" "exists?" "error?:" "delete-file" "not" "cond" "set!" "begin" "unwind-protect" "completed?" "backup-file" "back" "clone-file" "temp" "let" "fail-safe-save" "'fail-safe-save" "unimplemented" "proc" "file")}
      {Lisp-Entry "NoModifiers" definition #f 348 19 348 30 ("0")}
      {Lisp-Entry "Shift-Bit" definition #f 352 12 352 21 ("1")}
      {Lisp-Entry "Control-Bit" definition #f 356 12 356 23 ("2")}
      {Lisp-Entry "Alt-Bit" definition #f 360 12 360 19 ("4")}
      {Lisp-Entry "modifiers-keys" definition #f 364 20 364 34 ("alt-down?" "control-down?" "shift-down?" "0" "set-shift-key" "set-control-key" "set-alt-key")}
      {Lisp-Entry "set-shift-key" definition #f 368 20 368 33 ("Shift-Bit" "mask-bit-set" "bit" "modifiers")}
      {Lisp-Entry "set-control-key" definition #f 372 20 372 35 ("Control-Bit" "mask-bit-set" "bit" "modifiers")}
      {Lisp-Entry "set-alt-key" definition #f 376 20 376 31 ("Alt-Bit" "mask-bit-set" "bit" "modifiers")}
      {Lisp-Entry "shift-key?" definition #f 380 20 380 30 ("Shift-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "control-key?" definition #f 384 20 384 32 ("Control-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "alt-key?" definition #f 388 20 388 28 ("Alt-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "output-header" definition #f 397 20 397 33 ("when" "contributor" "for-each" "jazzscheme" "format" "toplevel-comment" "c" "case" "comment" "string-length" "make-string" "system-padding" "get-process" "system-title" "or" "let*" "lambda" "with-printer" "end-proper?" "end-proper?:" "contributors" "contributors:" "copyright" "copyright:" "author" "author:" "license" "license:" "system" "system:" "jazz" "'jazz" "language" "language:" "printer" "title")}
      {Lisp-Entry "output-section" definition #f 449 20 449 34 ("2" "*" "format" "4" "string-length" "+" "make-string" "extra" "toplevel" "c" "case" "comment" "let" "0" "level" "level:" "jazz" "'jazz" "language" "language:" "printer" "title")}
      {Lisp-Entry "terminal-repl" definition #f 465 21 465 34 ("repl" "bring-terminal-to-front" "show-terminal")}
      {Lisp-Entry "terminal-visible?" definition #f 473 25 473 42 ("IsWindowVisible" "and" "GetConsoleWindow" "console" "let")}
      {Lisp-Entry "show-terminal" definition #f 477 25 477 38 ("SW_SHOWNORMAL" "ShowWindow" "set-terminal-title" "not" "if" "GetConsoleWindow" "console" "let")}
      {Lisp-Entry "hide-terminal" definition #f 483 25 483 38 ("SW_HIDE" "ShowWindow" "IsWindowVisible" "and" "when" "GetConsoleWindow" "console" "let")}
      {Lisp-Entry "toggle-terminal" definition #f 488 25 488 40 ("show-terminal" "hide-terminal" "terminal-visible?" "if")}
      {Lisp-Entry "terminal-visible?" definition #f 493 24 493 41 ()}
      {Lisp-Entry "show-terminal" definition #f 496 24 496 37 ("set-terminal-title")}
      {Lisp-Entry "hide-terminal" definition #f 499 24 499 37 ()}
      {Lisp-Entry "toggle-terminal" definition #f 502 24 502 39 ()}
      {Lisp-Entry "user-message" definition #f 511 20 511 32 ("format" "apply" "Locales" "is?" "if" "set-status-message" "when" "get-application" "appl" "let" "rest" "obj")}
      {Lisp-Entry "user-message/action-handler" definition #f 517 20 517 47 ("set-status-message" "when" "get-application" "appl" "let" "action-handler" "message")}
      {Lisp-Entry "user-feedback" definition #f 523 20 523 33 ("format" "apply" "Locales" "is?" "if" "set-status-message" "when" "get-application" "appl" "let" "rest" "obj")}
      {Lisp-Entry "clear-user-message" definition #f 529 20 529 38 ("user-message")}
      {Lisp-Entry "clear-user-feedback" definition #f 533 20 533 39 ("user-feedback")}
      {Lisp-Entry "make-directory-feedback" definition #f 537 33 537 56 ("set!" "3" "-" "0" "max" "subseq" "user-message" "length" "len" "expand" "expanded" "pathname=?" "not" "or" "when" "get-parent" "dir" "file" "lambda" "directory" "let")}
      {Lisp-Entry "get-performance-frequency" definition #f 553 27 553 52 ("QueryPerformanceFrequency")}
      {Lisp-Entry "get-performance-counter" definition #f 557 27 557 50 ("QueryPerformanceCounter")}
      {Lisp-Entry "*exiting-process?*" definition #f 566 20 566 38 ("make-parameter")}
      {Lisp-Entry "*reloading-process?*" definition #f 569 20 569 40 ("make-parameter")}
      {Lisp-Entry "exiting-process?" definition #f 573 20 573 36 ("*exiting-process?*")}
      {Lisp-Entry "reloading-process?" definition #f 576 20 576 38 ("*reloading-process?*")}
      {Lisp-Entry "initialize-system" definition #f 585 20 585 37 ("get-performance-counter" "profiler-performance-counter-set!" "get-performance-frequency" "profiler-performance-frequency-set!")}}})
"_windows"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "performance" "platform" "windows" "_windows.jazz"} 1288732034
    {Lisp-Entry "jazz.system.performance.platform.windows" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "performance-snapshot" definition #f 50 20 50 40 ("user-time:" "kernel-time:" ",name" "name:" "parse-jml" "dwHighDateTime" "'dwHighDateTime" "dwLowDateTime" "'dwLowDateTime" "get" "make-long" "filetime" "lambda" "time" "GetProcessTimes" "user-time" "kernel-time" "exit-time" "FILETIME" "new" "creation-time" "GetCurrentProcess" "handle" "let" "name" "bind-keywords" "rest")}
      {Lisp-Entry "resources-snapshot" definition #f 73 20 73 38 (",undestroyed" "undestroyed:" ",handles" "handles:" ",gui-user-objects" "gui-user-objects:" ",gui-gdi-objects" "gui-gdi-objects:" ",private-bytes" "private-bytes:" ",name" "name:" "parse-jml" "gc-undestroyed-count" "0" "undestroyed" "GetProcessHandleCount" "handles" "GR_USEROBJECTS" "gui-user-objects" "GR_GDIOBJECTS" "GetGuiResources" "gui-gdi-objects" "get-private-bytes" "private-bytes" "GetCurrentProcess" "handle" "let" "name" "bind-keywords" "rest")}
      {Lisp-Entry "Private-Bytes-Query" definition #f 96 12 96 31 ()}
      {Lisp-Entry "Private-Bytes-Counter" definition #f 99 12 99 33 ()}
      {Lisp-Entry "get-private-bytes-query" definition #f 103 13 103 36 ("setup-private-bytes" "Private-Bytes-Query" "not" "when")}
      {Lisp-Entry "get-private-bytes-counter" definition #f 109 13 109 38 ("setup-private-bytes" "Private-Bytes-Counter" "not" "when")}
      {Lisp-Entry "setup-private-bytes" definition #f 115 13 115 32 ("Private-Bytes-Counter" "Private-Bytes-Query" "set!" "counter-name:" "object-name:" "add-counter" "counter" "Performance-Query" "new" "query" "let*")}
      {Lisp-Entry "get-private-bytes" definition #f 122 20 122 37 ("get-counter-value" "collect-data" "get-private-bytes-counter" "counter" "get-private-bytes-query" "query" "let")}
      {Lisp-Entry "i/o-snapshot" method #f 134 16 134 28 ("OtherTransferCount" "'OtherTransferCount" "other-bytes:" "WriteTransferCount" "'WriteTransferCount" "write-bytes:" "ReadTransferCount" "'ReadTransferCount" "get" "read-bytes:" ",name" "name:" "JML" "parse" "GetProcessIoCounters" "IO_COUNTERS" "new" "io" "GetCurrentProcess" "handle" "let" "name" "bind-keywords" "rest")}}})
"access"
 ({Lisp-File-Entry {File jazz.system "src" "jazz" "system" "access.jazz"} 1288732034
    {Lisp-Entry "jazz.system.access" module #f 37 8 37 26 ("jazz")
      {Lisp-Entry "Active-Process" definition #f 40 12 40 26 ()}
      {Lisp-Entry "Process-Active?" definition #f 43 12 43 27 ()}
      {Lisp-Entry "get-process" definition #f 47 20 47 31 ("Active-Process")}
      {Lisp-Entry "get-application" definition #f 51 20 51 35 ("Active-Process")}
      {Lisp-Entry "set-process" definition #f 55 21 55 32 ("Active-Process" "set!" "process")}
      {Lisp-Entry "set-application" definition #f 59 21 59 36 ("Active-Process" "set!" "application")}
      {Lisp-Entry "activate-process" definition #f 63 21 63 37 ("Process-Active?" "set!")}
      {Lisp-Entry "process-active?" definition #f 67 20 67 35 ("Process-Active?")}
      {Lisp-Entry "get-toplevel" definition #f 71 20 71 32 ("get-toplevel" "when" "get-application" "appl" "let")}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "autoload.jazz"} 1288732034
    {Lisp-Entry "jazz.system.application.autoload" module #f 37 18 37 50 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "autoload.jazz"} 1288732034
    {Lisp-Entry "jazz.system.process.autoload" module #f 37 18 37 46 ("jazz")}}
  {Lisp-File-Entry {File jazz.system "src" "jazz" "system" "service" "platform" "windows" "autoload.jazz"} 1288732034
    {Lisp-Entry "jazz.system.service.platform.windows.autoload" module #f 37 18 37 63 ("jazz")}})
"carbon"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "platform" "carbon.jazz"} 1288732034
    {Lisp-Entry "jazz.system.platform.carbon" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "initialize-platform" definition #f 49 20 49 39 ()}
      {Lisp-Entry "initialize-windowing" definition #f 53 20 53 40 ("get-setting")}
      {Lisp-Entry "get-computer-name" definition #f 62 20 62 37 ("adjust-string" "GetComputerName" "make-string" "name" "1" "MAX_COMPUTERNAME_LENGTH" "+" "size" "let*")}
      {Lisp-Entry "get-system-user-name" definition #f 72 20 72 40 ("adjust-string" "GetUserName" "MAX_PATH" "make-string" "username" "let")}
      {Lisp-Entry "shift-down?" definition #f 86 20 86 31 ("GetCurrentEventKeyModifiers" "shiftKeyBit" "bit-set?")}
      {Lisp-Entry "control-down?" definition #f 90 20 90 33 ("GetCurrentEventKeyModifiers" "controlKeyBit" "bit-set?")}
      {Lisp-Entry "alt-down?" definition #f 94 20 94 29 ("GetCurrentEventKeyModifiers" "optionKeyBit" "bit-set?")}
      {Lisp-Entry "modifiers-down" definition #f 98 20 98 34 ("alt-down?" "control-down?" "shift-down?" "values")}
      {Lisp-Entry "mouse-clicked?" definition #f 104 20 104 34 ("VK_LBUTTON" "key-down?" "'key-down?" "unimplemented")}
      {Lisp-Entry "use-generic-dialogs?" definition #f 115 21 115 41 ()}
      {Lisp-Entry "Version-Info" definition #f 124 19 124 31 ()}
      {Lisp-Entry "version-info" definition #f 128 13 128 25 ("GetVersionEx" "OSVERSIONINFOEX-sizeof" "OSVERSIONINFOEX-dwOSVersionInfoSize-set!" "OSVERSIONINFOEX-make" "info" "let" "set!" "Version-Info" "unless" "version-info" "'version-info" "unimplemented")}
      {Lisp-Entry "Windows-Version" definition #f 140 19 140 34 ()}
      {Lisp-Entry "get-windows-version" definition #f 144 20 144 39 ("OSVERSIONINFOEX-dwMinorVersion-ref" "OSVERSIONINFOEX-dwMajorVersion-ref" "Version" "new" "version-info" "info" "let" "set!" "Windows-Version" "unless" "get-windows-version" "'get-windows-version" "unimplemented")}
      {Lisp-Entry "validate-version" definition #f 156 20 156 36 ("format" "if" "error" "<" "and" "mandatory-version" "mandatory" "get-process" "process" "let*" "present" "register-crash-info" "when" "validate-version" "'validate-version" "unimplemented" "cleanup" "cleanup:" "register" "register:" "version" "context" "what" "title")}}})
"service-impl"
 ({Lisp-File-Entry {File jazz.system "src" "jazz" "system" "service" "platform" "windows" "service-impl.jazz"} 1288732034
    {Lisp-Entry "jazz.system.service.platform.windows.service-impl" module #f 38 18 38 67 ("jazz")}})
"stub"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "stub.jazz"} 1288732034
    {Lisp-Entry "jazz.system.process.stub" module #f 37 8 37 32 ("jazz")
      {Lisp-Entry "Process" remotable-stub "~stub" 43 16 43 23 ()
        {Lisp-Entry "get-name" method #f 46 23 46 31 ()}
        {Lisp-Entry "get-icon" method #f 47 23 47 31 ()}
        {Lisp-Entry "get-register" method #f 48 23 48 35 ()}}}})
"windows"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "log" "platform" "windows.jazz"} 1288732034
    {Lisp-Entry "jazz.system.log.platform.windows" module #f 38 18 38 50 ("jazz")
      {Lisp-Entry "make-event-id" definition #f 42 20 42 33 ("+" "FACILITY_NULL" "facility" "facility:" "SEVERITY_SUCCESS" "severity" "severity:" "code")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "platform" "windows.jazz"} 1288732034
    {Lisp-Entry "jazz.system.platform.windows" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "initialize-platform" definition #f 52 20 52 39 ("get-timezone-offset" "local-timezone-set!" "initialize-com")}
      {Lisp-Entry "initialize-windowing" definition #f 57 20 57 40 ("get-setting")}
      {Lisp-Entry "module-path" definition #f 66 20 66 31 ("GetModuleFileName" "tokenise-windows")}
      {Lisp-Entry "module-pathname" definition #f 70 20 70 35 ("module-path" "File" "new")}
      {Lisp-Entry "module-base" definition #f 74 20 74 31 ("module-pathname" "get-base")}
      {Lisp-Entry "system-error" definition #f 83 20 83 32 ("present-system-message" "error" "id")}
      {Lisp-Entry "present-winerror" definition #f 87 20 87 36 ("winerror" "present-system-message")}
      {Lisp-Entry "winerror" definition #f 91 20 91 28 ("winerror" "'winerror" "unimplemented")}
      {Lisp-Entry "present-system-message" definition #f 95 20 95 42 ("format-system-message" "format" "id")}
      {Lisp-Entry "format-system-message" definition #f 101 20 101 41 ("NULL" "0" "FORMAT_MESSAGE_FROM_SYSTEM" "FormatMessage" "/=" "when" "1" "-" "make-string" "msg" "128" "size" "let*" "unimplemented" "id")}
      {Lisp-Entry "get-computer-name" definition #f 115 20 115 37 ("adjust-string" "GetComputerName" "make-string" "name" "1" "MAX_COMPUTERNAME_LENGTH" "+" "size" "let*" "unimplemented")}
      {Lisp-Entry "get-system-user-name" definition #f 125 20 125 40 ("adjust-string" "GetUserName" "MAX_PATH" "make-string" "username" "let" "unimplemented")}
      {Lisp-Entry "key-down?" definition #f 139 20 139 29 ("0" "GetAsyncKeyState" "hibyte" "/=" "key")}
      {Lisp-Entry "shift-down?" definition #f 143 20 143 31 ("VK_SHIFT" "key-down?")}
      {Lisp-Entry "control-down?" definition #f 147 20 147 33 ("VK_RMENU" "not" "VK_CONTROL" "key-down?" "and")}
      {Lisp-Entry "alt-down?" definition #f 151 20 151 29 ("VK_LMENU" "key-down?")}
      {Lisp-Entry "modifiers-down" definition #f 155 20 155 34 ("alt-down?" "control-down?" "shift-down?" "values")}
      {Lisp-Entry "mouse-clicked?" definition #f 161 20 161 34 ("VK_LBUTTON" "key-down?")}
      {Lisp-Entry "use-generic-dialogs?" definition #f 170 21 170 41 ()}
      {Lisp-Entry "Version-Info" definition #f 179 19 179 31 ()}
      {Lisp-Entry "version-info" definition #f 183 13 183 25 ("GetVersionEx" "OSVERSIONINFOEX-sizeof" "OSVERSIONINFOEX-dwOSVersionInfoSize-set!" "OSVERSIONINFOEX-make" "info" "let" "set!" "Version-Info" "unless")}
      {Lisp-Entry "Windows-Version" definition #f 193 19 193 34 ()}
      {Lisp-Entry "get-windows-version" definition #f 197 20 197 39 ("OSVERSIONINFOEX-dwMinorVersion-ref" "OSVERSIONINFOEX-dwMajorVersion-ref" "Version" "new" "version-info" "info" "let" "set!" "Windows-Version" "unless")}
      {Lisp-Entry "validate-version" definition #f 207 20 207 36 ("format" "if" "error" "<" "and" "mandatory-version" "mandatory" "get-process" "process" "let*" "present" "register-crash-info" "when" "validate-version" "'validate-version" "unimplemented" "cleanup" "cleanup:" "register" "register:" "version" "context" "what" "title")}}})
"x11"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "platform" "x11.jazz"} 1288732034
    {Lisp-Entry "jazz.system.platform.x11" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "x11-debug-error-handler" definition #f 50 13 50 36 ("lambda" "without-local-debugger" "error" "XGetErrorText" "text" "XErrorEvent-error_code-ref" "code" "let" "signal-error" "define" "err" "displ")}
      {Lisp-Entry "x11-require-display" definition #f 61 13 61 32 ("error" "command-argument" "XOpenDisplay" "or")}
      {Lisp-Entry "initialize-platform" definition #f 66 20 66 39 ()}
      {Lisp-Entry "initialize-windowing" definition #f 70 20 70 40 ("x11-create-cursors" "x11-debug-error-handler" "x11-set-error-handler" "initialize-xim" "x11-synchronize" "synchronize-x11?" "'synchronize-x11?" "when" "x11-generate-atoms" "x11-require-display" "x11-set-default-display" "initialize-locale" "get-setting")}
      {Lisp-Entry "get-computer-name" definition #f 86 20 86 37 ("adjust-string" "GetComputerName" "make-string" "name" "1" "MAX_COMPUTERNAME_LENGTH" "+" "size" "let*")}
      {Lisp-Entry "get-system-user-name" definition #f 96 20 96 40 ("adjust-string" "GetUserName" "MAX_PATH" "make-string" "username" "let")}
      {Lisp-Entry "shift-down?" definition #f 110 20 110 31 ("XK_Shift_R" "XK_Shift_L" "XKeysymToKeycode" "char->integer" "x11-default-display" "XKeyDown?" "or")}
      {Lisp-Entry "control-down?" definition #f 115 20 115 33 ("XK_Control_R" "XK_Control_L" "XKeysymToKeycode" "char->integer" "x11-default-display" "XKeyDown?" "or")}
      {Lisp-Entry "alt-down?" definition #f 120 20 120 29 ("XK_Alt_R" "XK_Alt_L" "XK_Meta_R" "XK_Meta_L" "XKeysymToKeycode" "char->integer" "x11-default-display" "XKeyDown?" "or")}
      {Lisp-Entry "modifiers-down" definition #f 127 20 127 34 ("alt-down?" "control-down?" "shift-down?" "values")}
      {Lisp-Entry "mouse-clicked?" definition #f 133 20 133 34 ("x11-default-display" "XButtonDown?")}
      {Lisp-Entry "use-generic-dialogs?" definition #f 142 21 142 41 ()}
      {Lisp-Entry "Version-Info" definition #f 151 19 151 31 ()}
      {Lisp-Entry "version-info" definition #f 155 13 155 25 ("GetVersionEx" "OSVERSIONINFOEX-sizeof" "OSVERSIONINFOEX-dwOSVersionInfoSize-set!" "OSVERSIONINFOEX-make" "info" "let" "set!" "Version-Info" "unless" "version-info" "'version-info" "unimplemented")}
      {Lisp-Entry "Windows-Version" definition #f 167 19 167 34 ()}
      {Lisp-Entry "get-windows-version" definition #f 171 20 171 39 ("OSVERSIONINFOEX-dwMinorVersion-ref" "OSVERSIONINFOEX-dwMajorVersion-ref" "Version" "new" "version-info" "info" "let" "set!" "Windows-Version" "unless" "get-windows-version" "'get-windows-version" "unimplemented")}
      {Lisp-Entry "validate-version" definition #f 183 20 183 36 ("format" "if" "error" "<" "and" "mandatory-version" "mandatory" "get-process" "process" "let*" "present" "register-crash-info" "when" "validate-version" "'validate-version" "unimplemented" "cleanup" "cleanup:" "register" "register:" "version" "context" "what" "title")}}})
