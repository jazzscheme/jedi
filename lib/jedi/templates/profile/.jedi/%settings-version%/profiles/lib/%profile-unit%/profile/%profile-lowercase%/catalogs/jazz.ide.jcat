"Bitmap-File"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "resource" "Bitmap-File.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.resource.Bitmap-File" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Bitmap-File" class #f 44 7 44 18 ("Resource-File")
        {Lisp-Entry "resource-class" method #f 47 20 47 34 ("Image-Resource")}
        {Lisp-Entry "resource-marker" method #f 51 20 51 35 ()}}}})
"Chapters-Browser"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "code" "Chapters-Browser.jazz"} 1289844374
    {Lisp-Entry "jazz.ide.code.Chapters-Browser" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Chapters-Browser" class #f 46 7 46 23 ("329" "width:" "title:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" ":form" "Selection-Handler" "selection-handler:" "show-header?:" "chapters" "shown?:" "header" "content" "tool" "style:" "hscroll?:" "vscroll?:" "scroller" "on-update" "update" "on-toggle-occurence" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "occurence?" "tools" "name:" "fill" "layout-type:" "explicit" "initialize" "Layout-View")
        {Lisp-Entry "client" property #f 49 12 49 18 ()}
        {Lisp-Entry "client-selection" slot #f 52 8 52 24 ()}
        {Lisp-Entry "client-position" slot #f 53 8 53 23 ()}
        {Lisp-Entry "external-name" method #f 69 25 69 38 ("chapters-browser" "'chapters-browser" "rest")}
        {Lisp-Entry "host-icon" method #f 78 25 78 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 82 25 82 35 ()}
        {Lisp-Entry "client-activate" method #f 86 20 86 35 ("set-client" "Text-View" "is?" "if" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method #f 93 20 93 37 ("set-client")}
        {Lisp-Entry "tree-focus-gained" method #f 97 11 97 28 ("get-scrolled-position" "client-position" "get-selection" "client-selection" "set!" "client" "when")}
        {Lisp-Entry "get-tools-view" method #f 108 20 108 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 112 20 112 33 ("acquire-focus" "chapters" "'chapters" "locate" "tree" "let")}
        {Lisp-Entry "get-occurence?" method #f 122 11 122 25 ("occurence?" "'occurence?" "locate" "get-selected?")}
        {Lisp-Entry "guest-actions" method #f 131 20 131 33 ("nextmethod" "chapters-browser" "'chapters-browser" "find-actions" "cons")}
        {Lisp-Entry "on-toggle-occurence" method #f 141 11 141 30 ("update" "evt")}
        {Lisp-Entry "on-update" method #f 145 11 145 20 ("update" "evt")}
        {Lisp-Entry "on-selection-change" method #f 149 11 149 30 ("head" "'head" "force-vertical:" "ensure-displayed" "ensure-displayed?:" "Cell" "Range$Cell$" "new" "set-selection" "client" "paragraph-length" "len" "get-col" "col" "get-line" "line" "get-row" "get-user-data" "pos" "let*" "when" "get-single-selection" "selection" "chapters" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-double-click" method #f 163 11 163 26 ("finish-focus" "evt")}
        {Lisp-Entry "on-return-press" method #f 167 20 167 35 ("finish-focus" "key")}
        {Lisp-Entry "on-escape-press" method #f 171 20 171 35 ("cancel-focus" "key")}
        {Lisp-Entry "on-cancel" method #f 175 11 175 20 ("cancel-focus" "evt")}
        {Lisp-Entry "finish-focus" method #f 179 11 179 23 ("acquire-focus" "client" "when")}
        {Lisp-Entry "cancel-focus" method #f 184 11 184 23 ("acquire-focus" "client-position" "scroll-to" "set-selection" "client-selection" "client" "when")}
        {Lisp-Entry "get-client" method #f 197 18 197 28 ("client")}
        {Lisp-Entry "set-client" method #f 201 18 201 28 ("update" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update" method #f 207 11 207 17 ("with-update-locked" "remove-every-row" "chapters" "'chapters" "locate" "child" "key:" "string<?" "sort" "get-occurence?" "effective" "get-children" "children" "insert-children" "user-data:" "image:" "title:" "Tree-Node" "children:" "17" "row-height:" "expanded" "'expanded" "state:" "father:" "add-row" "row" "tree" "insert-item" "level:" "get-property" "<" "when" "continuation-return" "eq?" "for-each-ancestor" "return" "continuation-capture" "'data" "'level" "'image" "'title" "list" "properties:" "cardinality" "nu+" "data" "0" "else" "1" "=" "Image-Resource" "cond" "image" "first?" "set!" "element" "find-father" "father" "title" "header" "pos" "level" "bind" "info" "lambda" "for-each" "insert-element" "if" "previous" "'root" "JML-Element" "new" "root" "get-remaining-chapters" "remaining" "get-first-chapter" "first" "get-chapters" "lst" "let" "client" "build-tree" "define")}}
      {Lisp-Entry "Chapters-Tree" class #f 266 7 266 20 ("Tree-View")
        {Lisp-Entry "focus-gained" method #f 269 20 269 32 ("get-guest" "tree-focus-gained" "nextmethod")}}}})
"Chapters-Browser-Actions"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "code" "Chapters-Browser-Actions.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.code.Chapters-Browser-Actions" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Chapters-Browser-Actions" class #f 46 7 46 31 (":control" "Shortcut" "shortcut:" "on-cancel" ":focus-guest" "Event-Handler" "action-handler:" "cancel" "name:" "Actions")}}})
"Code-Tree"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "code" "Code-Tree.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.code.Code-Tree" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Code-Tree" class #f 43 7 43 16 ("initialize" "Tree-View")
        {Lisp-Entry "sort?" property #f 46 12 46 17 ()}
        {Lisp-Entry "get-sort?" accessor #f 46 42 46 50 ()}
        {Lisp-Entry "set-sort?" accessor #f 46 42 46 50 ()}
        {Lisp-Entry "insert-definition" method #f 49 18 49 35 ("self" "insert-definition" "sort?" "definition" "level" "father")}
        {Lisp-Entry "update-row" method #f 53 20 53 30 ("sort?" "self" "insert-self-definitions" "get-level" "level" "get-user-data" "definition" "let" "row")}}}})
"Cursor-File"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "resource" "Cursor-File.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.resource.Cursor-File" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Cursor-File" class #f 44 7 44 18 ("Resource-File")
        {Lisp-Entry "resource-class" method #f 47 20 47 34 ("Cursor-Resource")}
        {Lisp-Entry "resource-marker" method #f 51 20 51 35 ()}}}})
"Hierarchy-Browser"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "code" "Hierarchy-Browser.jazz"} 1290011726
    {Lisp-Entry "jazz.ide.code.Hierarchy-Browser" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Hierarchy-Browser" class #f 51 7 51 24 ("329" "width:" "title:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" ":form" "selection-handler:" "show-header?:" "definitions" "shown?:" "header" "content" "tool" "style:" "hscroll?:" "vscroll?:" "scroller" "on-update" "update" "on-toggle-occurence" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "occurence?" "tools" "name:" "fill" "layout-type:" "initialize" "Layout-View")
        {Lisp-Entry "client" property #f 54 12 54 18 ()}
        {Lisp-Entry "get-client" accessor #f 54 43 54 51 ()}
        {Lisp-Entry "set-client" accessor #f 54 43 54 51 ()}
        {Lisp-Entry "client-entry" slot #f 57 8 57 20 ()}
        {Lisp-Entry "client-selection" slot #f 58 8 58 24 ()}
        {Lisp-Entry "client-position" slot #f 59 8 59 23 ()}
        {Lisp-Entry "external-name" method #f 75 25 75 38 ("definitions-browser" "'definitions-browser" "rest")}
        {Lisp-Entry "host-icon" method #f 84 25 84 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 88 25 88 35 ()}
        {Lisp-Entry "client-activate" method #f 92 20 92 35 ("set-client/entry" "not" "entry" "current-document" "car" "length" "1" "=" "get-context" "context:" "get-file-entries" "entries" "get-cataloguer" "cataloguer" "get-application" "appl" "let*" "safe-read-form" "ci=?" "if" "get-extension" "ext" "get-controller" "get-moniker" "moniker" "let" "Code-Text-View" "is?" "when" "guest" "client-entry" "define")}
        {Lisp-Entry "client-deactivate" method #f 113 20 113 37 ("set-client/entry")}
        {Lisp-Entry "tree-focus-gained" method #f 117 11 117 28 ("get-scrolled-position" "client-position" "get-selection" "client-selection" "set!" "client" "when")}
        {Lisp-Entry "get-tools-view" method #f 128 20 128 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 132 20 132 33 ("acquire-focus" "definitions" "'definitions" "locate" "tree" "let")}
        {Lisp-Entry "get-occurence?" method #f 142 11 142 25 ("occurence?" "'occurence?" "locate" "get-selected?")}
        {Lisp-Entry "get-sorted?" method #f 146 11 146 22 ("get-occurence?" "not")}
        {Lisp-Entry "guest-actions" method #f 155 20 155 33 ("nextmethod" "hierarchy-browser" "'hierarchy-browser" "find-actions" "cons")}
        {Lisp-Entry "on-toggle-occurence" method #f 165 11 165 30 ("update" "get-sorted?" "definitions" "'definitions" "locate" "set-sort?" "evt")}
        {Lisp-Entry "on-update" method #f 170 11 170 20 ("update" "Form" "Exception" "is?" "or" "when" "safe-read-form" "client-entry" "set!" "if" "client" "get-controller" "get-moniker" "moniker" "let" "reload-jml" "define" "evt")}
        {Lisp-Entry "on-selection-change" method #f 182 11 182 30 ("selection-change" "definitions" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-double-click" method #f 189 11 189 26 ("selection-change" "definitions" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" method #f 196 20 196 35 ("finish-focus" "key")}
        {Lisp-Entry "on-escape-press" method #f 200 20 200 35 ("cancel-focus" "key")}
        {Lisp-Entry "on-cancel" method #f 204 11 204 20 ("cancel-focus" "evt")}
        {Lisp-Entry "finish-focus" method #f 208 11 208 23 ("acquire-focus" "client" "when")}
        {Lisp-Entry "cancel-focus" method #f 213 11 213 23 ("acquire-focus" "client-position" "scroll-to" "ensure-displayed?:" "set-selection" "client-selection" "client" "when")}
        {Lisp-Entry "edit-definitions" method #f 226 11 226 27 ("activate-focus?:" "edit" "JML-Node" "is?" "if" "focus-host" "center-caret" "'center-caret" "ensure-displayed?:" "set-selection-safe" "location-range" "range" "0" "list" "get-location" "append" "location" "get-guest" "text" "visible?:" "edit-document" "frame" "client-entry" "get-origin" "moniker" "get-application" "appl" "let*" "edit-jml-definition" "define" "definition")}
        {Lisp-Entry "set-client/entry" method #f 247 18 247 34 ("update" "client" "set!" "client-entry" "neq?" "when" "entry" "clt")}
        {Lisp-Entry "update" method #f 254 11 254 17 ("with-update-locked" "format" "exception-reason" "Exception" "remove-every-row" "set-title" "client-entry" "not" "'definitions" "locate" "key:" "string<?" "sort" "get-children" "some?" "child" "collect-if" "or" "JML-Element" "named?" "+" "definition" "lambda" "for-each" "sort-jml-definitions" "ordered" "definitions" "get-jml-named-children" "insert-jml-definitions" "autoload" "get-autoload" "when" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "state" "get-model" "else" "->string" "get-name" "identity" "=>" "'title" "get-property" "cond" "title" "Image-Resource" "get-class-image" "Component" "subtype?" "and" "image" "get-jml-model" "model" "let*" "insert-jml-self-definitions" "insert-jml-self" "row" "let" "sort?" "node" "level" "father" "insert-definition" "get-sorted?" "0" "insert-jml-definition" "tree" "insert-entry-definition" "get-title" "JML-Node" "is?" "if" "entry" "get-entry-title" "define")}
        {Lisp-Entry "selection-change" method #f 332 11 332 27 ("edit-definitions" "Indexed-Entry" "is-not?" "or" "Exception" "is?" "unless" "get-row" "get-user-data" "get-single-selection" "selection" "get-controller" "get-moniker" "when" "current-document" "guest" "let" "get-file-definition" "get-file" "pathname=?" "and" "moniker" "definition" "same-file?" "define" "double-click?" "tree")}}
      {Lisp-Entry "Hierarchy-Tree" class #f 352 7 352 21 ("Code-Tree")
        {Lisp-Entry "focus-gained" method #f 355 20 355 32 ("get-guest" "tree-focus-gained" "nextmethod")}}}})
"Hierarchy-Browser-Actions"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "code" "Hierarchy-Browser-Actions.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.code.Hierarchy-Browser-Actions" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Hierarchy-Browser-Actions" class #f 46 7 46 32 (":control" "Shortcut" "shortcut:" "on-cancel" ":focus-guest" "Event-Handler" "action-handler:" "cancel" "name:" "Actions")}}})
"IDE"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "application" "IDE.jazz"} 1290005243
    {Lisp-Entry "jazz.ide.application.IDE" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "IDE" class #f 67 7 67 10 ("Macro-Recorder" "Cataloguer" "new" "initialize" "Application")
        {Lisp-Entry "local-debugger" slot #f 70 8 70 22 ()}
        {Lisp-Entry "snapshot-debugger" slot #f 71 8 71 25 ()}
        {Lisp-Entry "cataloguer" slot #f 72 8 72 18 ()}
        {Lisp-Entry "catalog-context" slot #f 73 8 73 23 ()}
        {Lisp-Entry "catalog-file" slot #f 74 8 74 20 ()}
        {Lisp-Entry "search" slot #f 75 8 75 14 ()}
        {Lisp-Entry "recorder" slot #f 76 8 76 16 ()}
        {Lisp-Entry "install-process" method #f 79 20 79 35 ("jazz" "'jazz" "set-catalog-context" "start-debuggers" "nextmethod")}
        {Lisp-Entry "prepare-workbench" method #f 85 20 85 37 ("setup-workbench" "nextmethod")}
        {Lisp-Entry "workspace-installed" method #f 90 20 90 39 ("update-catalog-context" "nextmethod")}
        {Lisp-Entry "finish-process" method #f 95 20 95 34 ("preload-catalogs" "nextmethod" "Debugger-Manager" "new" "set-debugger-manager" "get-preferences" "get-toplevel-title" "profile" "if" "get-caption-base" "not" "toplevel" "set-caption-base" "cond" "toplevel-title" "let" "setup-caption-base" "define")}
        {Lisp-Entry "preload-catalogs" method #f 112 29 112 45 ("get-workbench" "load-catalogs" "lambda" "delay-event")}
        {Lisp-Entry "conclude-environment" method #f 120 20 120 40 ("console-output-port" "current-output-port" "console-input-port" "current-input-port" "ready-to-controller" "lambda" "with-system-exception-debugger" "get-local-register" "attach-to-controller" "get-controller-debugger" "not" "layout-menu" "set-visible?" "windows" "'windows" "kernel-platform" "neq?" "and" "toggle-terminal" "'toggle-terminal" "find-component" "label" "when" "debug" "'debug" "find-menu" "menu" "let" "nextmethod")}
        {Lisp-Entry "close-environment" method #f 140 20 140 37 ("nextmethod" "detach-debugger-processes" "reloading-process?" "unless")}
        {Lisp-Entry "get-backward-history" method #f 151 18 151 38 ("history-manager" "get-backward-history")}
        {Lisp-Entry "get-forward-history" method #f 155 18 155 37 ("history-manager" "get-forward-history")}
        {Lisp-Entry "get-recorder" method #f 164 20 164 32 ("recorder")}
        {Lisp-Entry "use-profile?" method #f 173 20 173 32 ()}
        {Lisp-Entry "use-profile-logging?" method #f 180 15 180 35 ()}
        {Lisp-Entry "use-profile-logging?" method #f 183 24 183 44 ()}
        {Lisp-Entry "choose-profile-appl" method #f 187 29 187 48 ()}
        {Lisp-Entry "choose-profile-login" method #f 191 20 191 40 ("choose-profile-appl" "appl:" "process-name" "invite:" "choose-login")}
        {Lisp-Entry "default-frame-class" method #f 200 20 200 39 ("Plain-Text-View")}
        {Lisp-Entry "known-extension-frame-class" method #f 204 20 204 47 ("nextmethod" "else" "View-Editor" "Jazz-Text-View" "Jazz-Extensions" "jazz.editor.commonlisp.CommonLisp-Text-View" "CommonLisp-Extensions" "jazz.editor.scheme.Scheme-Text-View" "Scheme-Extensions" "jazz.editor.diff.Diff-Text-View" "jazz.ui.Image-View" "jazz.editor.tex.Tex-Text-View" "jazz.editor.python.Python-Text-View" "jazz.editor.lua.Lua-Text-View" "jazz.editor.javascript.JavaScript-Text-View" "jazz.editor.properties.Properties-Text-View" "jazz.editor.css.CSS-Text-View" "jazz.editor.sql.SQL-Text-View" "XML-Text-View" "jazz.editor.html.HTML-Text-View" "jazz.editor.csharp.CSharp-Text-View" "jazz.editor.java.Java-Text-View" "jazz.editor.prop.Prop-Text-View" "jazz.editor.c.C-Text-View" "Plain-Formatted-Text-View" "Plain-Text-View" "ci=?" "test:" "member?" "cond" "ext")}
        {Lisp-Entry "unknown-extension-frame-class" method #f 230 20 230 49 ("Plain-Text-View")}
        {Lisp-Entry "get-cataloguer" method #f 239 20 239 34 ("cataloguer")}
        {Lisp-Entry "get-catalog-context" method #f 243 20 243 39 ("catalog-context")}
        {Lisp-Entry "update-catalog-context" method #f 247 18 247 40 ("get-catalog-context" "set-catalog-context")}
        {Lisp-Entry "set-catalog-context" method #f 251 18 251 37 ("catalog-context" "set!" "set-title" "set-icon" "'mode" "find-component" "mode" "IDE-Status" "toplevel" "find-docked" "status" "Image-Resource" "icon" "c" "jazz" "case" "title" "let" "when" "context")}
        {Lisp-Entry "get-search-manager" method #f 269 20 269 38 ("search")}
        {Lisp-Entry "get-history-manager" method #f 273 18 273 37 ("history-manager")}
        {Lisp-Entry "stage-class" method #f 282 20 282 31 ("Wallpaper-Stage")}
        {Lisp-Entry "class-actions" method #f 291 20 291 33 ("nextmethod" "ide" "'ide" "find-actions" "cons")}
        {Lisp-Entry "terminate-process" method #f 301 20 301 37 ("error?:" "debugger" "'debugger" "get-local-register" "unregister-object" "nextmethod")}
        {Lisp-Entry "save-environment" method #f 311 20 311 36 ("save-catalogs" "cataloguer" "when" "nextmethod")}
        {Lisp-Entry "reload-process" method #f 322 20 322 34 ("message-box")}
        {Lisp-Entry "load-session" method #f 332 11 332 23 ("set-current-directory" "when" "session" "application" "get-preferences" "get-current-directory" "dir" "let")}
        {Lisp-Entry "reload-opened-windows" method #f 339 11 339 32 ("session" "application" "get-preferences" "get-opened-windows" "reload-component" "exists?" "not" "or" "when" "others" "file" "bind-keywords" "properties" "class" "bind" "info" "lambda" "for-each")}
        {Lisp-Entry "reload-component" method #f 349 20 349 36 ("nextmethod" "else" "Compare-Files-Frame" "compare-files" "Compare-Directories-Frame" "compare-directories" "Catalogs-Manager" "catalogs-manager" "Browser-Frame" "browser-frame" "Image-Frame" "image-frame" "Java-Text-Palette" "java-palette" "HTML-Text-Frame" "html-text" "Prop-Text-Frame" "prop-text" "Java-Text-Frame" "java-text" "C-Text-Frame" "c-text" "Plain-Text-Frame" "new" "apply" "plain-text" "case" "properties" "class")}
        {Lisp-Entry "Workbench-File" definition #f 373 14 373 28 ("Profile" "File")}
        {Lisp-Entry "default-workbench" method #f 377 29 377 46 ("Workbench" "new")}
        {Lisp-Entry "setup-workbench" method #f 381 18 381 33 ("err" "continue-handler:" "title:" "set-workbench" "with-execution-context" "lambda" "with-safe-execution" "default-workbench" "read-form" "instantiate" "exists?" "Profile" "'Profile" "is-alias?" "and" "if" "Workbench-File" "file" "let" "load-workbench" "define")}
        {Lisp-Entry "update-project-actions" method #f 399 18 399 40 ("debug-project-with" "debug-project" "run-project" "test-project" "view-project-log" "build-project" "compile-file" "edit-project" "ide" "Action" "set-action-enabled?" "parse" "find-pathname-unit" "unit-name" "find-source" "get-workbench" "workbench" "get-controller" "get-moniker" "moniker" "Document" "is?" "and" "when" "current-document" "guest" "project-file" "get-active-project" "project" "let")}
        {Lisp-Entry "run-project" method #f 425 18 425 29 ("project-run" "wait?" "wait?:" "show-console?" "show-console?:" "command-arguments" "command-arguments:" "command-action" "command-action:" "profile" "profile:" "project")}
        {Lisp-Entry "debug-project" method #f 434 18 434 31 ("project-debug" "wait?" "wait?:" "show-console?" "show-console?:" "command-arguments" "command-arguments:" "command-action" "command-action:" "profile" "profile:" "debugger-interactive?" "debugger-interactive?:" "executable" "executable:" "project")}
        {Lisp-Entry "get-output-log" method #f 450 20 450 34 ("Output-Log" "singleton-docked" "get-guest")}
        {Lisp-Entry "get-profiling-results" method #f 459 18 459 39 ("Profile-Results" "singleton-docked" "get-guest")}
        {Lisp-Entry "register-base-objects" method #f 468 20 468 41 ("local-debugger" "Jazz-Debugger-Local-Proxy" "new" "debugger" "'debugger" "get-local-register" "register-object" "nextmethod")}
        {Lisp-Entry "get-local-debugger" method #f 478 20 478 38 ("local-debugger")}
        {Lisp-Entry "get-snapshot-debugger" method #f 482 20 482 41 ("snapshot-debugger")}
        {Lisp-Entry "start-debuggers" method #f 486 11 486 26 ("Snapshot-Debugger" "snapshot-debugger" "set-current-debugger" "register-debugger" "start-debugger" "Jazz-Debugger" "new" "set!" "local-debugger" "not" "when")}
        {Lisp-Entry "detach-debugger-processes" definition #f 498 15 498 40 ("get-debuggers" "detach-processes" "for-each")}
        {Lisp-Entry "initial-console-context" method #f 507 20 507 43 ("get-context" ":process" "not" "if" "error?:" "console" "tools" "get-preferences" "pref" "let")}
        {Lisp-Entry "process-alias" method #f 519 20 519 33 ("nextmethod" "else" "get-repositories-manager" ":repositories-manager" "get-workbench-manager" ":workbench-manager" "recorder" ":recorder" "current-view-debugger" ":view-debugger" "current-debugger" ":debugger" "case" "name")}
        {Lisp-Entry "on-open-favorite" method #f 534 11 534 27 ("else" "event:" "call-action" "Action" "get-properties" ":launch" "Event" "new" "apply" "self" "invoke" "Event-Handler" "is?" "edit-definitions" "symbol?" "edit-document" "file?" "cond" "get-target" "target" "error" "not" "if" "char:" "get-property" "let*" "get-shortcut" "eqv?" "favorite" "lambda" "find-if" "get-children" "when" "error?:" "favorites" "'favorites" "get-preferences" "pref" "let" "char" "find-favorite" "define" "evt")}
        {Lisp-Entry "edit-definitions" method #f 565 20 565 36 ("get-search-manager" "get-guest" "edit-definitions" "else" "car" "edit" "1" "length" "case" "add-history" "bell" "null?" "if" "get-cataloguer" "get-coalesced-definitions" "definitions" "let" "entries" "filter-entries" "define" "history-item" "history-item:" "workspace" "workspace:" "catalog-context" "context" "context:" "class" "class:" "object")}
        {Lisp-Entry "edit-references" method #f 579 20 579 35 ("get-search-manager" "get-guest" "edit-references" "else" "whole-words?:" "->string" "make-search-context" "list" "car" "edit-reference" "1" "length" "case" "add-history" "bell" "null?" "if" "get-cataloguer" "get-references" "definitions" "let" "history-item" "history-item:" "catalog-context" "context" "context:" "constituent-test" "constituent-test:" "object")}
        {Lisp-Entry "get-documentation" method #f 594 18 594 35 ("get-definition" "get-documentation-cataloguer" "cataloguer" "let" "when" "symbol")}
        {Lisp-Entry "edit-documentation" method #f 601 18 601 36 ("focus-host" "set-selection" "location-range" "range" "0" "list" "get-location" "append" "location" "get-guest" "text" "visible?:" "edit-document" "frame" "get-toplevel" "get-origin" "moniker" "get-form" "form" "let*" "bell" "not" "if" "get-documentation" "doc" "let" "symbol")}
        {Lisp-Entry "edit-documentation" method #f 616 18 616 36 ("get-host" "bring-to-front" "set-entry" "entry:" "get-documentation-catalog" "client:" "new-frame" "not" "if" "list" "info" "find-frame-guest" "editor" "Doc-Editor" "class" "let*" "text-location" "text" "object" "location")}
        {Lisp-Entry "on-open-text" method #f 631 19 631 31 ("get-name" "key:" "string>?" "sort" "char-encoding:" "Jazz-Plain-Text-View" "class:" "edit-document" "file" "lambda" "for-each" "text?:" "multiple-selection?:" "choose-file" "char-encoding" "files" "receive" "evt")}
        {Lisp-Entry "on-open-jazz-text" method #f 638 19 638 36 ("get-name" "key:" "string>?" "sort" "char-encoding:" "Jazz-Text-View" "class:" "edit-document" "file" "lambda" "for-each" "text?:" "multiple-selection?:" "title:" "choose-file" "char-encoding" "files" "receive" "evt")}
        {Lisp-Entry "on-terminal-repl" method #f 645 19 645 35 ("terminal-repl" "evt")}
        {Lisp-Entry "on-toggle-terminal" method #f 649 19 649 37 ("toggle-terminal" "evt")}
        {Lisp-Entry "on-clear-terminal" method #f 653 19 653 36 ("clear-terminal" "evt")}
        {Lisp-Entry "on-test" method #f 657 27 657 34 ("get-profile" "test" "evt")}
        {Lisp-Entry "on-test-shift" method #f 661 27 661 40 ("get-profile" "test-shift" "evt")}
        {Lisp-Entry "on-test-no" method #f 665 11 665 21 ("test9" "9" "test8" "8" "test7" "7" "test6" "6" "test5" "5" "test4" "4" "test3" "3" "test2" "2" "test1" "1" "test0" "0" "no:" "get-property" "case" "get-profile" "profile" "let" "evt")}
        {Lisp-Entry "on-focus-next-process" method #f 680 19 680 40 ("debugged=?" "test:" "find" "focus-process" "null?" "unless" "element" "length" "1" "+" "modulo" "next-rank" "first" "not" "if" "rank" "next-process" "define" "collect-processes" "processes" "get-debugger-manager" "get-focused-process" "focused" "let" "evt")}
        {Lisp-Entry "on-focus-previous-process" method #f 693 19 693 44 ("debugged=?" "test:" "find" "focus-process" "null?" "unless" "element" "length" "1" "-" "modulo" "previous-rank" "last" "not" "if" "rank" "previous-process" "define" "collect-processes" "processes" "get-debugger-manager" "get-focused-process" "focused" "let" "evt")}
        {Lisp-Entry "on-reload-process" method #f 706 19 706 36 ("reload-process" "bell" "not" "if" "get-debugger-manager" "get-focused-process" "debugged" "let" "evt")}
        {Lisp-Entry "on-debug-views" method #f 713 19 713 33 ("current-view-debugger" "debug-views" "evt")}
        {Lisp-Entry "on-explore-views" method #f 717 19 717 35 ("current-view-debugger" "explore-views" "evt")}
        {Lisp-Entry "on-processes" method #f 721 19 721 31 ("focus?:" "debugger" "'debugger" "workspace:" "Processes-View" "select-docked" "evt")}
        {Lisp-Entry "on-threads" method #f 725 19 725 29 ("focus?:" "debugger" "'debugger" "workspace:" "Threads-View" "select-docked" "evt")}
        {Lisp-Entry "on-frames" method #f 729 19 729 28 ("focus?:" "debugger" "'debugger" "workspace:" "Frames-View" "select-docked" "evt")}
        {Lisp-Entry "on-restarts" method #f 733 19 733 30 ("focus?:" "debugger" "'debugger" "workspace:" "Restarts-View" "select-docked" "evt")}
        {Lisp-Entry "on-exception" method #f 737 19 737 31 ("focus?:" "debugger" "'debugger" "workspace:" "Exception-View" "select-docked" "evt")}
        {Lisp-Entry "on-variables" method #f 741 19 741 31 ("focus?:" "debugger" "'debugger" "workspace:" "Variables-View" "select-docked" "evt")}
        {Lisp-Entry "on-resources-monitor" method #f 745 11 745 31 ("Resources-Monitor" "show-palette" "evt")}
        {Lisp-Entry "on-logs-viewer" method #f 749 19 749 33 ("Logs-Viewer" "show-palette" "evt")}
        {Lisp-Entry "on-class-browser" method #f 753 11 753 27 ("set-text" "when" "view" "palette" "lambda" "initialize:" "Class-Browser" "show-palette" "get-selected-string" "Text-View" "is?" "if" "text" "get-focus" "focus" "let*" "evt")}
        {Lisp-Entry "on-references-analyser" method #f 761 11 761 33 ("set-text" "when" "view" "palette" "lambda" "initialize:" "References-Analyser" "show-palette" "get-selected-string" "Text-View" "is?" "if" "text" "get-focus" "focus" "let*" "evt")}
        {Lisp-Entry "on-edit-clipboard" method #f 769 19 769 36 ("bell" "edit-definitions" "string?" "if" "get-clipboard-text" "clipboard" "let" "evt")}
        {Lisp-Entry "get-workbench-manager" method #f 776 18 776 39 ("Workbench-Manager" "singleton-docked" "get-guest")}
        {Lisp-Entry "on-select-project" method #f 780 19 780 36 ("get-workbench-manager" "select-current" "evt")}
        {Lisp-Entry "on-edit-project" method #f 784 19 784 34 ("get-workbench-manager" "edit-current" "evt")}
        {Lisp-Entry "on-compile-file" method #f 788 19 788 34 ("get-workbench-manager" "compile-current" "evt")}
        {Lisp-Entry "on-preprocess-file" method #f 792 19 792 37 ("get-workbench-manager" "preprocess-current" "evt")}
        {Lisp-Entry "on-build-project" method #f 796 19 796 35 ("get-workbench-manager" "build-current" "evt")}
        {Lisp-Entry "on-clean-project" method #f 800 19 800 35 ("get-workbench-manager" "clean-current" "evt")}
        {Lisp-Entry "on-view-project-log" method #f 804 19 804 38 ("get-workbench-manager" "view-log" "evt")}
        {Lisp-Entry "on-test-project" method #f 808 19 808 34 ("get-workbench-manager" "test-current" "evt")}
        {Lisp-Entry "on-run-project" method #f 812 19 812 33 ("get-workbench-manager" "run-current" "evt")}
        {Lisp-Entry "on-debug-project" method #f 816 19 816 35 ("get-workbench-manager" "debug-current" "evt")}
        {Lisp-Entry "on-debug-project-with" method #f 820 19 820 40 (":choose" "executable:" "get-workbench-manager" "debug-current" "evt")}
        {Lisp-Entry "on-distribute-project" method #f 824 19 824 40 ("get-workbench-manager" "distribute-current" "evt")}
        {Lisp-Entry "on-toolbox" method #f 828 11 828 21 ("focus?:" "designer" "'designer" "workspace:" "Toolbox-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-traits" method #f 832 11 832 20 ("focus?:" "designer" "'designer" "workspace:" "Traits-Editor" "select-docked" "evt")}
        {Lisp-Entry "on-descendants" method #f 836 11 836 25 ("focus?:" "designer" "'designer" "workspace:" "Descendants-Editor" "select-docked" "evt")}
        {Lisp-Entry "on-properties" method #f 845 19 845 32 ("focus?:" "Properties-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-search-results" method #f 849 19 849 36 ("focus?:" "Search-Results" "select-docked" "evt")}
        {Lisp-Entry "on-profile-results" method #f 853 19 853 37 ("focus?:" "Profile-Results" "select-docked" "evt")}
        {Lisp-Entry "on-servers" method #f 857 19 857 29 ("focus?:" "Servers-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-output-log" method #f 861 19 861 32 ("focus?:" "Output-Log" "select-docked" "evt")}
        {Lisp-Entry "on-user-log" method #f 865 19 865 30 ("refresh" "focus?:" "User-Log" "select-docked" "user-log" "let" "evt")}
        {Lisp-Entry "on-activities" method #f 870 19 870 32 ("focus?:" "Activities-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-workbench" method #f 874 19 874 31 ("focus?:" "Workbench-Manager" "select-docked" "evt")}
        {Lisp-Entry "get-repositories-manager" method #f 878 19 878 43 ("Repositories-Manager" "singleton-docked" "get-guest")}
        {Lisp-Entry "on-repositories" method #f 882 19 882 34 ("focus?:" "Repositories-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-favorites" method #f 886 19 886 31 ("focus?:" "Favorites-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-chapters" method #f 890 19 890 30 ("focus?:" "text" "'text" "workspace:" "Chapters-Browser" "select-docked" "evt")}
        {Lisp-Entry "on-hierarchy" method #f 894 19 894 31 ("focus?:" "text" "'text" "workspace:" "Hierarchy-Browser" "select-docked" "evt")}
        {Lisp-Entry "on-bindings-manager" method #f 898 19 898 38 ("new-frame" "focus-host" "if" "Bindings-Manager" "find-frame-host" "frame" "let" "evt")}
        {Lisp-Entry "on-view-bindings" method #f 905 19 905 35 ("Shortcut-Viewer" "get-modal" "evt")}
        {Lisp-Entry "on-skins-manager" method #f 909 19 909 35 ("new-frame" "focus-host" "if" "Skins-Manager" "find-frame-host" "frame" "let" "evt")}
        {Lisp-Entry "on-preferences" method #f 916 19 916 33 ("Preferences-Manager" "new-frame" "evt")}
        {Lisp-Entry "on-toggle-catalog-context" method #f 920 19 920 44 ("'jazz" "c" "'c" "set-catalog-context" "jazz" "catalog-context" "case" "evt")}
        {Lisp-Entry "on-save-profile" method #f 927 19 927 34 ("persist-preferences" "call-exit-listeners" "call-save-environment-listeners" "user-message" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-exit-without-save" method #f 937 19 937 39 ("exit" "yes" "'yes" "question" "'question" "type:" "message-box" "eq?" "when" "evt")}
        {Lisp-Entry "on-compare-directories" method #f 942 19 942 41 ("focus-host" "compare-trees" "get-guest" "configure" "lambda" ":wait" "with-cursor" "host-visible?:" "frame" "Compare-Directories" "new-frame" "not" "compare-directories" "tools" "get-preferences" "get-active-configuration" "default" "let" "get-shift?" "if" "evt")}
        {Lisp-Entry "on-compare-files" method #f 956 19 956 35 ("Compare-Files" "new-frame" "evt")}
        {Lisp-Entry "on-compare-databases" method #f 960 19 960 39 ("Compare-Databases" "new-frame" "evt")}
        {Lisp-Entry "on-update-catalogs" method #f 970 11 970 29 ("listify" "get-catalog" "name" "cataloguer" "get-catalogs" "update" "catalog" "for-each" "eq?" "lambda" ":wait" "with-cursor" "message-box" "not" "if" "catalogs" "'catalogs" "get-preferences" "get-main" "main" "let" "evt")}
        {Lisp-Entry "on-catalogs-manager" method #f 985 11 985 30 ("new-frame" "focus-host" "if" "Catalogs-Manager" "find-frame-host" "frame" "let" "evt")}}}})
"IDE-Actions"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "application" "IDE-Actions.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.application.IDE-Actions" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "IDE-Actions" class #f 46 7 46 18 ("on-user-code" ":focus" "user-code" "F12" "on-edit-clipboard" "edit-clipboard" "open-favorite-0" "open-favorite-9" "open-favorite-8" "open-favorite-7" "open-favorite-6" "open-favorite-5" "open-favorite-4" "open-favorite-3" "open-favorite-2" "open-favorite-1" "open-favorite-Z" "open-favorite-Y" "open-favorite-X" "open-favorite-W" "open-favorite-V" "open-favorite-U" "open-favorite-T" "open-favorite-S" "open-favorite-R" "open-favorite-Q" "open-favorite-P" "open-favorite-O" "open-favorite-N" "open-favorite-M" "open-favorite-L" "open-favorite-K" "open-favorite-J" "open-favorite-I" "open-favorite-H" "open-favorite-G" "open-favorite-F" "open-favorite-E" "open-favorite-D" "open-favorite-C" "open-favorite-B" "char:" "on-open-favorite" "open-favorite-A" "on-showcase" "view-showcase" "on-documentation-editor" "view-documentation-editor" "on-hierarchy" "view-hierarchy" "on-chapters" "view-chapters" "on-sql-console" "view-sql-console" "on-sql-inventory" "view-sql-inventory" "on-sql-connections" "view-sql-connections" "on-java-manager" "view-java-manager" "on-java-reference-finder" "view-java-reference-finder" "on-preferences" "view-preferences" "on-descendants" "view-descendants" "on-traits" "view-traits" "on-toolbox" "view-toolbox" "on-type-viewer" "view-type-viewer" "on-registry-viewer" "view-registry-viewer" "on-servers" "view-servers" "on-activities" "view-activities" "on-user-log" "view-user-log" "on-output-log" "view-output-log" "on-profile-results" "view-profile-results" "on-search-results" "view-search-results" "Return" "on-properties" "view-properties" "on-debugger" "view-debugger" "on-console" "view-console" "on-favorites" "view-favorites" "on-repositories" "view-repositories" "on-workbench" "view-workbench" "play-recording-5" "play-recording-4" "play-recording-3" "play-recording-2" "play-recording-1" "on-play-recording" "play-recording" "on-set-active-recording" "set-active-recording" "on-output-recording" "output-recording" "on-register-recording" "register-recording" "on-present-recording" "present-recording" "on-resume-recording" "resume-recording" "on-stop-recording" "stop-recording" "on-start-recording" ":recorder" "start-recording" "on-command-execute" "command-execute" "alternate-shortcut:" "on-command-extended" "command-extended" "on-capture-mouse-host" "capture-mouse-host" "on-capture-host" "capture-host" "on-capture-mouse-document" "capture-mouse-document" "on-capture-document" "capture-document" "unzoom-document" "zoom-out-document" "document" "zoom-in-document" "on-unzoom" "unzoom-mouse-view" "on-zoom-out" "zoom-out-mouse-view" "mouse-view" "what:" "on-zoom-in" "zoom-in-mouse-view" "on-update-catalogs" "update-catalogs" "on-catalogs-manager" "catalogs-manager" "on-skins-manager" "skins-manager" "on-view-bindings" "view-bindings" "on-bindings-manager" "bindings-manager" "on-compare-files" "compare-files" "on-compare-directories" "compare-directories" "on-variables" "variables" "on-exception" "exception" "on-restarts" "restarts" "on-frames" "frames" "on-threads" "threads" "on-processes" "processes" "on-profiler-manager" "profiler-manager" "on-resources-monitor" "resources-monitor" "on-logs-viewer" "logs-viewer" "on-references-analyser" "references-analyser" "on-class-browser" "class-browser" "on-reload-process" "reload-process" "on-focus-previous-process" "focus-previous-process" "on-focus-next-process" "focus-next-process" "test-shift-0" "test-shift-9" "test-shift-8" "test-shift-7" "test-shift-6" "test-shift-5" "test-shift-4" "test-shift-3" "test-shift-2" "test-shift-1" "0" "test-0" "9" "test-9" "8" "test-8" "7" "test-7" "6" "test-6" "5" "test-5" "4" "test-4" "3" "test-3" "2" "test-2" "1" "no:" "on-test-no" "test-1" "on-test-shift" "test-shift" "on-test" "test" "on-clear-terminal" "clear-terminal" "on-toggle-terminal" "toggle-terminal" "on-terminal-repl" "terminal-repl" "Space" "on-clear-console" "clear-console" "on-spy-events" "spy-events" "on-spy-messages" "spy-messages" "on-explore-views" "explore-views" "F8" "on-debug-views" "debug-views" "Tab" "on-next-debuggee" "next-debuggee" "on-call-run-to" "call-run-to" "on-call-step-out" "call-step-out" "on-call-step-into" "call-step-into" "on-call-step-over" "call-step-over" "on-run-to-result" "run-to-result" "on-run-to-cursor" "run-to-cursor" "on-step-outside-function" "step-outside-function" "on-step-out" "step-out" "on-step-into-function" "step-into-function" "F11" "on-step-into" "step-into" "F10" "on-step-over" "step-over" "on-continue" "continue" "on-break" "break" "enabled?:" "F9" "on-restart" ":debugger" "restart" "on-build-project" "build-project" "F7" "on-compile-file" "compile-file" "on-debug-project-with" "debug-project-with" "on-debug-project" "debug-project" "on-run-project" "run-project" ":control" "on-test-project" "test-project" "on-view-project-log" "view-project-log" "on-clean-project" "clean-project" "on-edit-project" "edit-project" "F5" "on-select-project" "select-project" "on-exit-without-save" "exit-without-save" "on-save-profile" "save-profile" "on-open-jazz-text" "open-jazz-text" "on-open-text" "open-text" ":shift" ":alt" "Shortcut" "shortcut:" "on-new-project" ":application" "Event-Handler" "action-handler:" "new-project" "name:" "Orphaned-Actions")}}})
"IDE-Bindings"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "application" "IDE-Bindings.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.application.IDE-Bindings" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "IDE-Bindings" class #f 53 7 53 19 ("current-frame" "previous-frame" "F6" "next-frame" "exit" "print-preview" "print-layout" "print" "F4" "close" "new" "windows" "save" "mac" "paste&next" "select-outer" "Space" "lock-anchor" "Return" "open-line" "paste" "copy" "cut" "redo" "undo" "emacs" "move-right" "move-left" "insert-next" "insert-previous" "edit-references" "edit-definitions" "widen-forward" "next" "prior" "document-end" "document-home" "extend-end" "end" "extend-home" "home" "kill-line" "delete-word" "delete-char" "downward-compound" "upward-compound" "extend-downward" "move-downward" "extend-upward" "move-upward" "forward-compound" "extend-forward-word" "move-forward-word" "extend-forward-char" "move-forward-char" "backward-compound" "extend-backward-word" "move-backward-word" "extend-backward-char" "move-backward-char" "select-all" "shift-tab" "alternate-shortcut:" "tab" "view-bindings" "bindings-manager" ":control" "find" ":shift" "paste-cycle-stack-reversed" ":alt" "Shortcut" "shortcut:" "paste-cycle-stack" "jazz" "hierarchy-browser" "chapters-browser" "shortcut-viewer" "preview-pane" "view-surrogate" "view-editor" "search-results-tree" "search-manager" "compare-trees" "class-browser" "manager" "repositories-manager" "workbench-manager" "workbench-tree" "servers" "entities-tree" "traits-tree" "components-tree" "components-viewer" "tree-embedded-search-text" "scheme-text" "composite-text" "compare-text" "combo-text" "console-text" "command-find" "command-execute" "command-extended" "command-search" "jazz-text" "lisp-text" "code-text" "ide" "name:" "Application-Bindings")}}})
"IDE-File-Menu"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "application" "IDE-File-Menu.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.application.IDE-File-Menu" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "IDE-File-Menu" class #f 45 7 45 20 ("profile-separator" "exit-without-save" "on-exit-without-save" "save-profile" "on-quit-application" "on-save-profile" "open-jazz-text" "on-open-jazz-text" "open-text" "ide" "Action" "action-handler:" "on-close" "before:" "title:" "on-open-text" "name:" "File-Menu")}}})
"IDE-Preferences"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "application" "IDE-Preferences.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.application.IDE-Preferences" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "IDE-Preferences" class #f 54 7 54 22 ("workbench" "designer" "catalogs" "debug" "sql" "user-extensions:" "user-label:" "jazz-files" "active-domain:" "text" "active:" "search-manager" "preferences-manager" "compare-directories" "console" "sql-text" "scheme-text" "plain-text" "jazz-text" "console-text" "name:" "title:" "Application-Preferences")}}})
"IDE-Profile"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "application" "IDE-Profile.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.application.IDE-Profile" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "IDE-Profile" class #f 45 7 45 18 ("Profile")
        {Lisp-Entry "format-sql" method #f 54 11 54 21 ("error" "else" "format" "string?" "cond" "value")}
        {Lisp-Entry "output-tables" method #f 60 11 60 24 ("sql" "'sql" "select-workspace" "get-application" "appl" "when" "output-tables" "get-sql-console-text" "text" "let" "select?" "select?:" "name" "name:" "tables")}
        {Lisp-Entry "output-table" method #f 69 11 69 23 ("list" "output-tables" "select?" "select?:" "name" "name:" "table")}
        {Lisp-Entry "log-tables" method #f 74 11 74 21 ("log-table" "for-each" "tables")}
        {Lisp-Entry "log-table" method #f 79 11 79 20 ("data:" "get-name" "name:" "log-entry" "table")}
        {Lisp-Entry "glue" method #f 89 11 89 15 ("user-message" "set-clipboard-text" "join" "2" "format" "case" "glued" "-" "0" "subseq" "get-clipboard-text" "cons" "lst" "get-clipboard-stack" "stack" "get-application" "appl" "let*" "1" "kind" "n")}
        {Lisp-Entry "get-source" method #f 106 11 106 21 ("find-file" "find-document" "or" "class-name")}
        {Lisp-Entry "find-document" method #f 112 11 112 24 ("include-invisibles?:" "all-frames" "continuation-return" "ci=?" "=" "and" "get-extension" "ext" "get-base" "base" "get-controller" "get-moniker" "moniker" "Document" "get-guest" "guest" "Frame-Host" "is?" "when" "frame" "for-each" "return" "lambda" "continuation-capture" "->string" "target" "let" "get-manifest-source" "unless" "class-name")}
        {Lisp-Entry "find-file" method #f 133 11 133 20 ("source-directories" "continuation-return" "exists?" "when" "new-file" "file" "dir" "for-each" "return" "lambda" "continuation-capture" "tie" "name" "let" "class-name")}
        {Lisp-Entry "source-directories" method #f 146 29 146 47 ()}}}})
"IDE-Status"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "application" "IDE-Status.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.application.IDE-Status" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "IDE-Status" class #f 52 7 52 17 ("90" "mode" "skin" "100" "locales" "250" "visible?:" "activities" "Image-Resource" "icon:" "title:" "workspace" "on-context-menu" "context-menu-handler:" "on-mouse-down" ":form" "Event-Handler" "mouse-down-handler:" "tail" "150" "process" "center" "location:" "20" "782" "Dimension" "size:" "message" "name:" "Status-Toolbar")
        {Lisp-Entry "on-context-menu" method #f 73 29 73 44 ("Skin-Menu" "skin" "Locales-Menu" "locales" "Activities-Menu" "activities" "popup-workspaces-menu" "workspace" "self" "popup-processes-menu" "process" "Mode-Menu" "new" "track-popup-menu" "mode" "case" "get-position" "acquire" "pos" "get-name" "name" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-mouse-down" method #f 88 29 88 42 ("Skin-Menu" "skin" "Locales-Menu" "locales" "get-activity-manager" "toggle-visible?" "activities" "popup-workspaces-menu" "workspace" "self" "popup-processes-menu" "process" "Mode-Menu" "new" "track-popup-menu" "mode" "case" "get-position" "acquire" "pos" "get-name" "name" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "host-icon" method #f 108 25 108 34 ("Image-Resource")}
        {Lisp-Entry "install" method #f 117 20 117 27 ("update-focused-process" "nextmethod" "rest")}
        {Lisp-Entry "update-focused-process" method #f 127 18 127 40 ("present" "set-title" "Image-Resource" "if" "set-icon" "get-debugger-manager" "get-focused-process" "focused" "process" "'process" "locate" "label" "let")}}
      {Lisp-Entry "popup-processes-menu" definition #f 139 13 139 33 ("Processes-Menu" "new" "track-popup-menu" "pos" "view")}
      {Lisp-Entry "Processes-Menu" class #f 143 7 143 21 ("Context-Menu")
        {Lisp-Entry "install" method #f 146 20 146 27 ("insert-processes" "nextmethod" "rest")}
        {Lisp-Entry "insert-processes" method #f 151 11 151 27 ("set-selected?" "set-enabled?" "process:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "self" "parent:" "Radio-Item" "new" "item" "icon" "present" "title" "let" "debugger" "lambda" "get-debugger-manager" "for-each-process" "else" "get-icon" "or" "Image-Resource" "not" "cond" "focused?" "live?" "process" "process-image" "define")}
        {Lisp-Entry "on-action" method #f 169 11 169 20 ("focus-process" "process:" "get-property" "process" "get-debugger-manager" "manager" "let" "evt")}}
      {Lisp-Entry "popup-workspaces-menu" definition #f 180 13 180 34 ("Workspaces-Menu" "new" "track-popup-menu" "1" "length" ">=" "get-visible-children" "workspaces" "when" "error?:" "get-workspaces-preferences" "preferences" "let" "pos" "view")}
      {Lisp-Entry "Workspaces-Menu" class #f 188 7 188 22 ("Context-Menu")
        {Lisp-Entry "install" method #f 191 20 191 27 ("nextmethod" "set-selected?" "workspace:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "Radio-Item" "item" "Image-Resource" "get-icon" "icon" "get-presentation-property" "title" "selected?" "Separator" "is?" "if" "unless" "workspace" "lambda" "for-each" "self" "parent:" "Separator-Item" "new" "eq?" "insert-workspace" "when" "'default" "find-component" "default" "get-visible-children" "workspaces" "get-workspaces-preferences" "preferences" "selected-workspace" "selected" "let*" "insert-workspaces" "define" "rest")}
        {Lisp-Entry "on-action" method #f 218 11 218 20 ("apply-preferences" "workspace:" "get-property" "workspace" "let" "evt")}}
      {Lisp-Entry "Activities-Menu" class #f 228 7 228 22 ("on-clear-done" "Image-Resource" "icon:" "clear-done" "on-close" "close" "on-open" ":form" "Event-Handler" "action-handler:" "open" "name:" "title:" "Context-Menu")
        {Lisp-Entry "on-open" method #f 239 11 239 18 ("get-activity-manager" "show" "evt")}
        {Lisp-Entry "on-close" method #f 243 11 243 19 ("get-activity-manager" "hide" "evt")}
        {Lisp-Entry "on-clear-done" method #f 247 11 247 24 ("get-activity-manager" "clear-done" "evt")}}
      {Lisp-Entry "Locales-Menu" class #f 256 7 256 19 ("Context-Menu")
        {Lisp-Entry "install" method #f 259 20 259 27 ("nextmethod" "set-checked?" "when" "locale:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Check-Item" "new" "item" "present-locale" "title" "let*" "checked?" "eq?" "insert-locale" "locale" "lambda" "for-each" "get-locales" "locales" "get-locale" "current" "let" "insert-locales" "define" "rest")}
        {Lisp-Entry "on-action" method #f 277 11 277 20 ("locale:" "get-property" "set-locale" "evt")}}
      {Lisp-Entry "Skin-Menu" class #f 286 7 286 16 ("Context-Menu")
        {Lisp-Entry "install" method #f 289 20 289 27 ("nextmethod" "set-checked?" "when" "skin:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Check-Item" "new" "item" "present" "title" "let*" "checked?" "eq?" "insert-skin" "skin" "lambda" "for-each" "get-skins" "get-children" "skins" "get-skin" "current" "let" "insert-skins" "define" "rest")}
        {Lisp-Entry "on-action" method #f 307 11 307 20 ("get-toplevel" "redraw-window" "skin:" "get-property" "set-skin" "evt")}}
      {Lisp-Entry "Mode-Menu" class #f 317 7 317 16 ("Context-Menu")
        {Lisp-Entry "install" method #f 320 20 320 27 ("c" "'c" "Image-Resource" "jazz" "'jazz" "insert-item" "nextmethod" "rest")}
        {Lisp-Entry "insert-item" method #f 326 11 326 22 ("set-checked?" "eq?" "when" "mode:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "self" "parent:" "Check-Item" "new" "item" "get-application" "get-catalog-context" "current" "let" "icon" "title" "mode")}
        {Lisp-Entry "on-action" method #f 333 11 333 20 ("mode:" "get-property" "get-application" "set-catalog-context" "evt")}}}})
"IDE-Text-View"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "application" "IDE-Text-View.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.application.IDE-Text-View" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "IDE-Text-View" class #f 50 7 50 20 ("Label-User" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "explicit" "initialize" "Code-Text-View")
        {Lisp-Entry "context" property #f 53 12 53 19 ()}
        {Lisp-Entry "new-syntax" method #f 61 20 61 30 ("Jazz-Syntax" "new")}
        {Lisp-Entry "get-context" method #f 70 20 70 31 ("syntax" "get-catalog-context" "list" "context" "not" "if")}
        {Lisp-Entry "set-context" method #f 76 18 76 29 ("context" "set!" "value")}
        {Lisp-Entry "catalog-context" method #f 85 11 85 26 ("syntax" "get-catalog-context" "context" "or")}
        {Lisp-Entry "jazz-preferences" definition #f 94 15 94 31 ("jazz-text" "documents" "get-preferences")}
        {Lisp-Entry "c-preferences" definition #f 98 15 98 28 ("java-text" "documents" "get-preferences")}
        {Lisp-Entry "sql-preferences" definition #f 102 15 102 30 ("sql-text" "documents" "get-preferences")}
        {Lisp-Entry "current-history-item" method #f 111 20 111 40 ()}
        {Lisp-Entry "explorer-class" method #f 120 20 120 34 ("nextmethod" "else" "SQL-Explorer" "sql" "C-Explorer" "c" "Jazz-Explorer" "jazz" "catalog-context" "case")}
        {Lisp-Entry "expr-at" method #f 133 20 133 27 ("sql-expr-range" "sql-name-at" "sql" "c-expr-range" "c-name-at" "c" "jazz-expr-range" "jazz-name-at" "jazz" "catalog-context" "case" "pos")}
        {Lisp-Entry "expr-range" method #f 140 20 140 30 ("sql-expr-range" "sql" "c-expr-range" "c" "jazz-expr-range" "jazz" "catalog-context" "case" "pos")}
        {Lisp-Entry "current-expr" method #f 147 20 147 32 ("current-sql-expr" "sql" "current-c-expr" "c" "current-jazz-expr" "jazz" "catalog-context" "case")}
        {Lisp-Entry "range-expr" method #f 154 20 154 30 ("sql-range-expr" "sql" "c-range-expr" "c" "jazz-range-expr" "jazz" "catalog-context" "case" "range")}
        {Lisp-Entry "current-jazz-expr" method #f 166 11 166 28 ("jazz-range-expr" "when" "current-jazz-expr-range" "range" "let")}
        {Lisp-Entry "current-jazz-symbol" method #f 172 21 172 40 ("symbol?" "when" "current-jazz-expr" "expr" "let")}
        {Lisp-Entry "current-jazz-expr-range" method #f 178 11 178 34 ("get-end" "jazz-expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "jazz-range-expr" method #f 184 11 184 26 ("get-string" "read-string-element" "lambda" "with-jazz-readtable" "range")}
        {Lisp-Entry "jazz-expr-range" method #f 190 11 190 26 ("get-range" "outer-expr" "when" "end:" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "jazz-name-at" method #f 196 11 196 23 ("get-string" "read-string-element" "lambda" "with-jazz-readtable" "when" "range")}
        {Lisp-Entry "current-c-expr" method #f 208 11 208 25 ("current-c-name")}
        {Lisp-Entry "current-c-name" method #f 212 11 212 25 ("c-current-expr-range" "c-name-at")}
        {Lisp-Entry "c-current-expr-range" method #f 216 11 216 31 ("get-end" "c-expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "c-range-expr" method #f 222 11 222 23 ("get-string" "range")}
        {Lisp-Entry "c-expr-range" method #f 226 11 226 23 ("get-range" "outer-expr" "end:" "start:" "self" "C-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "c-name-at" method #f 232 11 232 20 ("read-string-element" "0" "element" "eqv?" "if" "get-string" "name" "let" "when" "range")}
        {Lisp-Entry "current-sql-expr" method #f 245 11 245 27 ("current-sql-name")}
        {Lisp-Entry "current-sql-name" method #f 249 11 249 27 ("sql-current-expr-range" "sql-name-at")}
        {Lisp-Entry "sql-current-expr-range" method #f 253 11 253 33 ("get-end" "sql-expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "sql-range-expr" method #f 259 11 259 25 ("get-string" "range")}
        {Lisp-Entry "sql-expr-range" method #f 263 11 263 25 ("get-range" "outer-expr" "end:" "start:" "self" "SQL-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "sql-name-at" method #f 269 11 269 22 ("read-string-element" "0" "element" "eqv?" "if" "get-string" "name" "let" "when" "range")}
        {Lisp-Entry "favorite-completions" method #f 282 20 282 40 ("nextmethod" "else" "sql-preferences" "sql" "c-preferences" "c" "jazz-preferences" "get-completions" "jazz" "catalog-context" "case")}
        {Lisp-Entry "colorize-syntax" method #f 295 20 295 35 ("rest")}
        {Lisp-Entry "recolorize-text" method #f 299 20 299 35 ("end-line" "start")}
        {Lisp-Entry "match-backwards?" method #f 308 20 308 36 ("nextmethod" "else" "memq?" "jazz" "catalog-context" "case" "char")}
        {Lisp-Entry "match-forwards?" method #f 314 20 314 35 ("nextmethod" "else" "memq?" "jazz" "catalog-context" "case" "char")}
        {Lisp-Entry "context-menu" method #f 325 20 325 32 ("nextmethod" "else" "edit-references" "edit-definitions" "cond" "context-menu-click" "or" "references?" "not" "definition?" "let" "modifiers-down" "alt?" "control?" "shift?" "receive" "editable?" "view-enabled?" "and" "when" "pos")}
        {Lisp-Entry "get-context-menu" method #f 337 20 337 36 ("new-text-context-menu")}}}})
"IDE-Toolbar"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "application" "IDE-Toolbar.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.application.IDE-Toolbar" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "IDE-Toolbar" class #f 50 7 50 18 ("Toolbar")
        {Lisp-Entry "on-clipboard-menu" method #f 58 11 58 28 ("clipboards:" "Clipboards-Menu" "track-popup-menu" "not-null?" "when" "cons" "if" "clipboards" "get-application" "get-clipboard-stack" "stack" "get-clipboard-text" "text" "get-size" "get-height" "0" "Point" "new" "get-position" "nu+" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-backward-menu" method #f 68 11 68 27 ("backward" "'backward" "get-application" "get-history-manager" "track-history" "get-combo" "initiator" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-forward-menu" method #f 74 11 74 26 ("forward" "'forward" "get-application" "get-history-manager" "track-history" "get-combo" "initiator" "get-sender" "sender" "let*" "evt")}}
      {Lisp-Entry "Clipboards-Menu" class #f 85 7 85 22 ("Context-Menu")
        {Lisp-Entry "clipboards" property #f 88 12 88 22 ()}
        {Lisp-Entry "get-clipboards" accessor #f 88 33 88 41 ()}
        {Lisp-Entry "set-clipboards" accessor #f 88 33 88 41 ()}
        {Lisp-Entry "finish" method #f 91 20 91 26 ("for-each" "self" "parent:" "Separator-Item" "new" "not-null?" "when" "insert-item" "clipboards" "others" "clipboard" "bind" "nextmethod" "rest")}
        {Lisp-Entry "insert-item" method #f 100 11 100 22 ("string:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "item")}
        {Lisp-Entry "on-action" method #f 104 11 104 20 ("paste-clipboard-string" "string:" "get-property" "string" "bell" "Text-View" "is-not?" "if" "get-focus" "focus" "let" "evt")}}}})
"IDE-Toplevel"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "application" "IDE-Toplevel.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.application.IDE-Toplevel" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "IDE-Toplevel" class #f 44 7 44 19 ("Toplevel")}}})
"Icon-File"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "resource" "Icon-File.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.resource.Icon-File" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Icon-File" class #f 44 7 44 16 ("Resource-File")
        {Lisp-Entry "resource-class" method #f 47 20 47 34 ("Icon-Resource")}
        {Lisp-Entry "resource-marker" method #f 51 20 51 35 ()}}}})
"Login-Bindings"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "login" "Login-Bindings.jazz"} 1289506008
    {Lisp-Entry "jazz.ide.login.Login-Bindings" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Login-Bindings" class #f 44 7 44 21 ("formatted-text" "guest" "tree" "text" "view" "name:" "Bindings")}
      {Lisp-Entry "Login-View-Actions" class #f 63 7 63 25 ("visible?:" "View-Actions")}
      {Lisp-Entry "Login-Text-Actions" class #f 76 7 76 25 ("visible?:" "Text-Actions")}
      {Lisp-Entry "Login-Tree-Actions" class #f 107 7 107 25 ("visible?:" "Tree-Actions")}}})
"Login-Dialog"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "login" "Login-Dialog.jazz"} 1289920929
    {Lisp-Entry "jazz.ide.login.Login-Dialog" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Login-Dialog" class #f 49 7 49 19 ("existing" "new" "on-cancel" "311" "cancel" "on-ok" ":host" "default?:" "24" "80" "182" "225" "login" "18" "144" "185" "always-use" "170" "display-images?:" "toplevel-controls?:" "176" "width:" "on-double-click" "double-click-handler:" "can-select-empty?:" "row" "selection-mode:" "15" "default-row-height:" "show-header?:" "profiles" "document" "92" "251" "64" "140" "existing-border" "22" "175" "194" "bindings" "60" "bindings-label" "on-content-change" "content-change-handler:" "Default" "Text-Style" "default-style:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "new-profile" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "entry" "style:" "edge" "border-type:" "19" "171" "85" "196" "new-border" "visible?:" "40" "136" "new-label" "101" "59" "110" "8" "48" "0" "on-existing" "114" "existing-button" "on-new" "action-handler:" "tooltip-text:" "tooltip?:" "88" "25" "new-button" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "216" "400" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "appl" property #f 52 12 52 16 ()}
        {Lisp-Entry "get-appl" accessor #f 52 43 52 51 ()}
        {Lisp-Entry "set-appl" accessor #f 52 43 52 51 ()}
        {Lisp-Entry "invite" property #f 53 12 53 18 ()}
        {Lisp-Entry "get-invite" accessor #f 53 43 53 51 ()}
        {Lisp-Entry "set-invite" accessor #f 53 43 53 51 ()}
        {Lisp-Entry "host-title" method #f 91 25 91 35 ()}
        {Lisp-Entry "finish" method #f 95 20 95 26 ("invite" "format" "title" "'title" "locate" "set-title" "setup-existing-profiles" "setup-new-profile" "nextmethod" "rest")}
        {Lisp-Entry "setup-new-profile" method #f 102 11 102 28 ("setup-bindings" "user-name" "new-profile" "'new-profile" "locate" "set-string-content")}
        {Lisp-Entry "focus-default" method #f 107 20 107 33 ("focus-existing" "existing" "focus-new" "new" "get-active-trait-name" "case")}
        {Lisp-Entry "Bindings" definition #f 113 14 113 22 ("emacs" "jazz")}
        {Lisp-Entry "setup-bindings" method #f 118 11 118 25 ("jazz" "'jazz" "set-value" "Bindings" "set-choices" "box" "bindings" "locate" "combo" "let")}
        {Lisp-Entry "setup-existing-profiles" method #f 124 11 124 34 ("new-button" "'new-button" "install-new" "else" "existing-button" "'existing-button" "set-selected?" "install-existing" "some-user-profile?" "cond" "'profile" "get-setting" "profile-title" "ci=?" "get-application" "get-settings" "settings" "element" "profile" "let" "and" "always-use" "'always-use" "locate" "set-checked?" "collect-profile-info" "rank" "profiles" "receive")}
        {Lisp-Entry "validate-dialog" method #f 143 20 143 35 ("throw-cancel" "message-box" "when" "validate-profile" "message" "let")}
        {Lisp-Entry "get-modal-result" method #f 150 20 150 36 ("profile-unit" "profile-name" "get-row" "get-user-data" "profile" "not" "if" "get-single-selection" "rank" "profiles" "'profiles" "tree" "let*" "existing" "values" "profile-unit-name" "unit" "capitalize" "string->symbol" "name" "new-profile" "'new-profile" "get-string-content" "content" "new" "get-active-trait-name" "case" "always-use" "'always-use" "get-checked?" "always-use?" "box" "locate" "get-value" "bindings" "let")}
        {Lisp-Entry "profile-unit-name" definition #f 168 15 168 32 ("downcase" "format" "name")}
        {Lisp-Entry "get-tab-stops" method #f 177 20 177 33 ("existing" "new" "get-active-trait-name" "case")}
        {Lisp-Entry "on-new" method #f 190 11 190 17 ("install-new" "evt")}
        {Lisp-Entry "on-existing" method #f 194 11 194 22 ("install-existing" "collect-profile-info" "rank" "profiles" "receive" "evt")}
        {Lisp-Entry "on-content-change" method #f 199 11 199 28 ("update-login" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 203 11 203 28 ("update-login" "evt")}
        {Lisp-Entry "on-double-click" method #f 207 11 207 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "login" "'login" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 215 20 215 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "login" "'login" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 223 20 223 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "install-new" method #f 233 11 233 22 ("update-login" "focus-new" "player" "when" "new" "'new" "locate" "set-active-trait")}
        {Lisp-Entry "focus-new" method #f 240 11 240 20 ("select-all" "acquire-focus" "new-profile" "'new-profile" "locate" "text" "let")}
        {Lisp-Entry "install-existing" method #f 246 11 246 27 ("update-login" "focus-existing" "player" "ensure-displayed" "set-single-selection" "get-visible-count" "<" "when" "user-data:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "profile-title" "title" "profile" "lambda" "for-each" "remove-every-row" "0" "not-null?" "and" "or" "'profiles" "tree" "let" "existing" "'existing" "locate" "set-active-trait" "rank" "profiles")}
        {Lisp-Entry "focus-existing" method #f 263 11 263 25 ("profiles" "'profiles" "locate" "acquire-focus")}
        {Lisp-Entry "collect-profile-info" method #f 267 11 267 31 ("values" "ci=?" "test:" "find" "and" "rank" "'profile" "string-parameter" "default-profile" "profiles" "gather-profiles" "profile-appl" "appl" "memq?" "collect-if" "profile-title" "downcase" "1" "2" "package-repository" "eq?" "if" "cons" "profile" "package" "bind" "info" "lambda" "key:" "collect-profiles" "nu<?" "sort" "cdr" "map" "Jazz" "'Jazz" "find-repository" "jazz-repository" "let" "collect-existing-profiles" "define")}
        {Lisp-Entry "some-user-profile?" method #f 289 11 289 29 ("gather-profiles" "package-repository" "neq?" "profile-appl" "appl" "memq?" "and" "profile" "package" "bind" "info" "lambda" "some?" "Jazz" "'Jazz" "find-repository" "jazz-repository" "let")}
        {Lisp-Entry "update-login" method #f 303 11 303 23 ("profiles" "'profiles" "get-selection" "not-null?" "existing" "new-profile" "'new-profile" "get-string-content" "empty-string?" "not" "login" "'login" "locate" "set-enabled?" "new" "get-active-trait-name" "case")}
        {Lisp-Entry "validate-profile" method #f 316 11 316 27 ("else" "validate-new-profile" "new-profile" "'new-profile" "locate" "get-string-content" "profile-name" "let" "new" "get-active-trait-name" "case")}
        {Lisp-Entry "validate-new-profile" method #f 325 11 325 31 ("else" "format" "Profiles" "'Profiles" "list" "Directory" "new" "exists?" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "cond" "profile-unit-name" "unit-name" "let" "profile-name")}
        {Lisp-Entry "Header-Color" definition #f 348 14 348 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 352 20 352 24 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Profile-Text-View" class #f 362 7 362 24 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 365 20 365 36 ("new-text-context-menu")}}}})
"New-File-Dialog"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "New-File-Dialog.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.workbench.New-File-Dialog" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "New-File-Dialog" class #f 49 7 49 22 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler:" "default?:" "24" "80" "227" "167" "ok" "213" "editable?:" "body" "scroller" "on-moniker-update" "moniker-update-handler:" "display-protocol?:" "dir" "protocol:" "directory" "directory-border" "54" "143" "directory-label" "on-content-change" "content-change-handler:" "Default" "Text-Style" "default-style:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "name-text" "hscroll?:" "19" "224" "109" "241" "name-border" "33" "111" "182" "name-label" "display-images?:" "controls?:" "toplevel-controls?:" "176" "width:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "Event-Handler" "double-click-handler:" "on-selection-change" ":form" "Selection-Handler" "selection-handler:" "tooltip-text:" "tooltip?:" "can-select-empty?:" "row" "selection-mode:" "15" "default-row-height:" "show-header?:" ":images" "portfolio:" "kinds" "fill" "layout-type:" "content" "document" "vscroll?:" "entry" "style:" "edge" "border-type:" "137" "140" "64" "13" "kind-border" "8" "50" "0" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "261" "500" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "directory" property #f 52 12 52 21 ()}
        {Lisp-Entry "get-directory" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "set-directory" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "finish" method #f 81 20 81 26 ("directory" "'directory" "set-moniker" "name-text" "'name-text" "locate" "set-string-content" "setup-kinds" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 88 20 88 33 ("kinds" "'kinds" "locate" "acquire-focus")}
        {Lisp-Entry "Kinds" definition #f 97 14 97 19 ("text" "sql" "java" "c" "lisp" "jazz" "template:" "scheme" "kind:" "name:")}
        {Lisp-Entry "setup-kinds" method #f 116 11 116 22 ("update-ok" "ensure-displayed" "0" "set-single-selection" "get-children" "child" "for-each" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "row" "'icon" "icon" "name" "'name" "get-property" "title" "let*" "father" "node" "lambda" "insert" "letrec" "remove-every-row" "Kinds" "parse-jml" "root" "name-text" "'name-text" "text" "kinds" "'kinds" "locate" "tree" "let")}
        {Lisp-Entry "host-title" method #f 142 25 142 35 ()}
        {Lisp-Entry "validate-dialog" method #f 151 20 151 35 ("throw-cancel" "message-box" "when" "validate-name" "message" "format" "new-file" "destination" "extract-extension" "extension" "let*" "get-modal-result" "name" "directory" "template" "kind" "receive")}
        {Lisp-Entry "get-modal-result" method #f 161 20 161 36 ("name-text" "'name-text" "get-string-content" "directory" "'directory" "locate" "get-moniker" "template" "'template" "kind" "'kind" "get-property" "values" "selected-kind" "node" "let")}
        {Lisp-Entry "selected-kind" method #f 166 11 166 24 ("get-user-data" "node" "get-row" "row" "get-single-selection" "rank" "kinds" "'kinds" "locate" "tree" "let*")}
        {Lisp-Entry "get-tab-stops" method #f 179 20 179 33 ("directory" "'directory" "get-text" "name-text" "'name-text" "kinds" "'kinds" "locate" "list")}
        {Lisp-Entry "on-selection-change" method #f 191 11 191 30 ("update-ok" "evt")}
        {Lisp-Entry "on-content-change" method #f 195 11 195 28 ("update-ok" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 199 11 199 28 ("update-ok" "evt")}
        {Lisp-Entry "on-double-click" method #f 203 11 203 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 211 20 211 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 219 20 219 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update-ok" method #f 229 11 229 20 ("name-text" "'name-text" "get-string-content" "empty-string?" "not" "directory" "'directory" "get-moniker" "kind" "'kind" "selected-kind" "get-property" "and" "ok" "'ok" "locate" "set-enabled?")}
        {Lisp-Entry "validate-name" definition #f 233 15 233 28 ("else" "find-unit-source" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "find-pathname-unit" "unit-name" "let" "jazz" "memq?" "parse" "format" "exists?" "cond" "destination" "name" "kind")}
        {Lisp-Entry "Header-Color" definition #f 263 14 263 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 267 20 267 24 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Name-Text-View" class #f 277 7 277 21 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 280 20 280 36 ("new-text-context-menu")}}}})
"New-Package-Dialog"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "repositories" "New-Package-Dialog.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.repositories.New-Package-Dialog" module #f 37 18 37 66 ("jazz")
      {Lisp-Entry "New-Package-Dialog" class #f 48 7 48 25 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler:" "default?:" "24" "80" "227" "167" "ok" "213" "body" "scroller" "repository" "Entry-Border" "Medium" "Color" "border-color:" "1" "Rect" "border-insets:" "22" "262" "139" "145" "repository-border" "64" "143" "repository-label" "on-content-change" "content-change-handler:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "tooltip-text:" "tooltip?:" "Default" "Text-Style" "default-style:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "name-text" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "entry" "style:" "edge" "border-type:" "19" "258" "109" "147" "name-border" "33" "111" "82" "name-label" "8" "50" "0" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "261" "500" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "repository" property #f 51 12 51 22 ()}
        {Lisp-Entry "get-repository" accessor #f 51 47 51 55 ()}
        {Lisp-Entry "set-repository" accessor #f 51 47 51 55 ()}
        {Lisp-Entry "finish" method #f 76 20 76 26 ("setup-repositories" "setup-name" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 82 20 82 33 ("name-text" "'name-text" "locate" "acquire-focus")}
        {Lisp-Entry "setup-name" method #f 91 11 91 21 ("name-text" "'name-text" "locate" "set-string-content")}
        {Lisp-Entry "setup-repositories" method #f 95 11 95 29 ("car" "User" "'User" "find-repository" "or" "set-value" "repository-name" "->string" "list" "lambda" "map" "set-choices" "get-repositories" "repositories" "repository" "'repository" "locate" "combo" "let")}
        {Lisp-Entry "host-title" method #f 111 25 111 35 ()}
        {Lisp-Entry "validate-dialog" method #f 120 20 120 35 ("throw-cancel" "message-box" "when" "validate-name" "message" "new-directory" "destination" "repository-library-directory" "tokenise-filename" "Directory" "new" "directory" "let*" "get-modal-result" "name" "repository" "receive")}
        {Lisp-Entry "get-modal-result" method #f 130 20 130 36 ("name-text" "'name-text" "get-string-content" "repository" "'repository" "locate" "get-value" "values")}
        {Lisp-Entry "get-tab-stops" method #f 139 20 139 33 ("repository" "'repository" "get-body" "name-text" "'name-text" "locate" "list")}
        {Lisp-Entry "on-selection-change" method #f 150 11 150 30 ("update-ok" "evt")}
        {Lisp-Entry "on-content-change" method #f 154 11 154 28 ("update-ok" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 158 11 158 28 ("update-ok" "evt")}
        {Lisp-Entry "on-double-click" method #f 162 11 162 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 170 20 170 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 178 20 178 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update-ok" method #f 188 11 188 20 ("name-text" "'name-text" "get-string-content" "empty-string?" "not" "ok" "'ok" "locate" "set-enabled?")}
        {Lisp-Entry "validate-name" definition #f 192 15 192 28 ("else" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "let" "parse" "format" "exists?" "cond" "destination" "name")}
        {Lisp-Entry "Header-Color" definition #f 214 14 214 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 218 20 218 24 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Name-Text-View" class #f 228 7 228 21 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 231 20 231 36 ("new-text-context-menu")}}}})
"New-Project-Dialog"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "New-Project-Dialog.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.workbench.New-Project-Dialog" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "New-Project-Dialog" class #f 48 7 48 25 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler:" "default?:" "24" "80" "227" "167" "ok" "213" "body" "scroller" "repository" "Entry-Border" "Medium" "Color" "border-color:" "1" "Rect" "border-insets:" "22" "222" "139" "245" "repository-border" "143" "repository-label" "on-content-change" "content-change-handler:" "Default" "Text-Style" "default-style:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "name-text" "hscroll?:" "19" "218" "109" "247" "name-border" "33" "111" "182" "name-label" "display-images?:" "controls?:" "toplevel-controls?:" "176" "width:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "Event-Handler" "double-click-handler:" "on-selection-change" ":form" "Selection-Handler" "selection-handler:" "tooltip-text:" "tooltip?:" "can-select-empty?:" "row" "selection-mode:" "15" "default-row-height:" "show-header?:" ":images" "portfolio:" "kinds" "fill" "layout-type:" "content" "document" "vscroll?:" "entry" "style:" "edge" "border-type:" "137" "140" "64" "13" "kind-border" "8" "50" "0" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "261" "500" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "repository" property #f 51 12 51 22 ()}
        {Lisp-Entry "get-repository" accessor #f 51 47 51 55 ()}
        {Lisp-Entry "set-repository" accessor #f 51 47 51 55 ()}
        {Lisp-Entry "finish" method #f 81 20 81 26 ("setup-repositories" "setup-name" "setup-kinds" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 88 20 88 33 ("kinds" "'kinds" "locate" "acquire-focus")}
        {Lisp-Entry "Kinds" definition #f 97 14 97 19 ("template:" "project" "kind:" "name:")}
        {Lisp-Entry "setup-kinds" method #f 109 11 109 22 ("update-ok" "ensure-displayed" "0" "set-single-selection" "get-children" "child" "for-each" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "row" "'icon" "icon" "name" "'name" "get-property" "title" "let*" "father" "node" "lambda" "insert" "letrec" "remove-every-row" "Kinds" "parse-jml" "root" "name-text" "'name-text" "text" "kinds" "'kinds" "locate" "tree" "let")}
        {Lisp-Entry "setup-name" method #f 130 11 130 21 ("name-text" "'name-text" "locate" "set-string-content")}
        {Lisp-Entry "setup-repositories" method #f 134 11 134 29 ("car" "User" "'User" "find-repository" "or" "set-value" "repository-name" "->string" "list" "lambda" "map" "set-choices" "get-repositories" "repositories" "repository" "'repository" "locate" "combo" "let")}
        {Lisp-Entry "host-title" method #f 149 25 149 35 ()}
        {Lisp-Entry "validate-dialog" method #f 158 20 158 35 ("throw-cancel" "message-box" "when" "validate-name" "message" "new-directory" "destination" "repository-library-directory" "tokenise-filename" "Directory" "new" "directory" "let*" "get-modal-result" "name" "repository" "template" "kind" "receive")}
        {Lisp-Entry "get-modal-result" method #f 168 20 168 36 ("name-text" "'name-text" "get-string-content" "repository" "'repository" "locate" "get-value" "template" "'template" "kind" "'kind" "get-property" "values" "selected-kind" "node" "let")}
        {Lisp-Entry "selected-kind" method #f 173 11 173 24 ("get-user-data" "node" "get-row" "row" "get-single-selection" "rank" "kinds" "'kinds" "locate" "tree" "let*")}
        {Lisp-Entry "get-tab-stops" method #f 186 20 186 33 ("repository" "'repository" "get-body" "name-text" "'name-text" "kinds" "'kinds" "locate" "list")}
        {Lisp-Entry "on-selection-change" method #f 198 11 198 30 ("update-ok" "evt")}
        {Lisp-Entry "on-content-change" method #f 202 11 202 28 ("update-ok" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 206 11 206 28 ("update-ok" "evt")}
        {Lisp-Entry "on-double-click" method #f 210 11 210 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 218 20 218 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 226 20 226 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update-ok" method #f 236 11 236 20 ("name-text" "'name-text" "get-string-content" "empty-string?" "not" "kind" "'kind" "selected-kind" "get-property" "and" "ok" "'ok" "locate" "set-enabled?")}
        {Lisp-Entry "validate-name" definition #f 240 15 240 28 ("else" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "let" "parse" "format" "exists?" "cond" "destination" "name" "kind")}
        {Lisp-Entry "Header-Color" definition #f 262 14 262 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 266 20 266 24 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Name-Text-View" class #f 276 7 276 21 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 279 20 279 36 ("new-text-context-menu")}}}})
"New-Repository-Dialog"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "repositories" "New-Repository-Dialog.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.repositories.New-Repository-Dialog" module #f 37 18 37 69 ("jazz")
      {Lisp-Entry "New-Repository-Dialog" class #f 47 7 47 28 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler:" "default?:" "24" "80" "227" "167" "ok" "213" "name-text" "149" "name-border" "151" "name-label" "on-content-change" "content-change-handler:" "Default" "Text-Style" "default-style:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "dirname-text" "fill" "layout-type:" "vscroll?:" "hscroll?:" "125" "dirname-border" "127" "dirname-label" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "tooltip-text:" "tooltip?:" "focus-selects-all?:" "show-unfocused-selection?:" "editable?:" "body" "content" "scroller" "on-moniker-update" ":form" "Event-Handler" "moniker-update-handler:" "display-protocol?:" "dir" "protocol:" "directory" "entry" "style:" "edge" "border-type:" "19" "264" "100" "141" "directory-border" "54" "103" "82" "directory-label" "8" "50" "0" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "261" "500" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "directory" property #f 50 12 50 21 ()}
        {Lisp-Entry "get-directory" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "set-directory" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "finish" method #f 79 20 79 26 ("dirname-text" "'dirname-text" "set-string-content" "directory" "'directory" "locate" "set-moniker" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 85 20 85 33 ("dirname-text" "'dirname-text" "locate" "acquire-focus")}
        {Lisp-Entry "host-title" method #f 94 25 94 35 ()}
        {Lisp-Entry "validate-dialog" method #f 103 20 103 35 ("throw-cancel" "message-box" "when" "validate-name" "message" "empty-string?" "if" "effective-name" "new-directory" "destination" "let*" "get-modal-result" "name" "dirname" "directory" "receive")}
        {Lisp-Entry "get-modal-result" method #f 113 20 113 36 ("name-text" "'name-text" "dirname-text" "'dirname-text" "get-string-content" "directory" "'directory" "locate" "get-moniker" "values")}
        {Lisp-Entry "get-tab-stops" method #f 122 20 122 33 ("name-text" "'name-text" "dirname-text" "'dirname-text" "directory" "'directory" "locate" "get-text" "list")}
        {Lisp-Entry "on-content-change" method #f 134 11 134 28 ("update-ok" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 138 11 138 28 ("update-ok" "evt")}
        {Lisp-Entry "on-double-click" method #f 142 11 142 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 150 20 150 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 158 20 158 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update-ok" method #f 168 11 168 20 ("dirname-text" "'dirname-text" "get-string-content" "empty-string?" "not" "directory" "'directory" "get-moniker" "and" "ok" "'ok" "locate" "set-enabled?")}
        {Lisp-Entry "validate-name" definition #f 172 15 172 28 ("else" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "let" "string->symbol" "find-repository" "parse" "format" "exists?" "cond" "dirname" "destination" "name")}
        {Lisp-Entry "Header-Color" definition #f 206 14 206 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 210 20 210 24 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Name-Text-View" class #f 220 7 220 21 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 223 20 223 36 ("new-text-context-menu")}}}})
"Package"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "repositories" "Package.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.repositories.Package" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Package" class #f 46 7 46 14 ("initialize" "Component")
        {Lisp-Entry "title" property #f 49 12 49 17 ()}
        {Lisp-Entry "get-title" accessor #f 49 42 49 50 ()}
        {Lisp-Entry "set-title" accessor #f 49 42 49 50 ()}
        {Lisp-Entry "print" method #f 52 20 52 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-class-descriptor" method #f 64 25 64 45 ("Package-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 73 11 73 17 ()
        {Lisp-Entry "Package-Descriptor" class #f 79 7 79 25 ("nullable?:" "domain" "title:" "name:" "title" "categorized:" "Image-Resource" "image:" "Component-Descriptor")
          {Lisp-Entry "component-presentation-property?" method #f 89 20 89 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 93 20 93 46 ("class-of" "category-name" "->string" "get-title" "or" "component")}
          {Lisp-Entry "component-set-presentation" method #f 97 20 97 46 ("title:" "set-property" "presentation" "designer" "component")}
          {Lisp-Entry "component-addable-class?" method #f 101 20 101 44 ("Project-Group" "Project-File" "subtype?" "or" "class" "component")}
          {Lisp-Entry "component-get-addable-classes" method #f 106 20 106 49 ("Project-Group" "list" "component")}}}}})
"Project"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "project" "Project.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.project.Project" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Project" class #f 49 7 49 14 ("build?:" "initialize" "Project-File")
        {Lisp-Entry "title" property #f 52 12 52 17 ()}
        {Lisp-Entry "get-title" accessor #f 52 55 52 63 ()}
        {Lisp-Entry "set-title" accessor #f 52 55 52 63 ()}
        {Lisp-Entry "icon" property #f 53 12 53 16 ()}
        {Lisp-Entry "get-icon" accessor #f 53 55 53 63 ()}
        {Lisp-Entry "set-icon" accessor #f 53 55 53 63 ()}
        {Lisp-Entry "owner" property #f 54 12 54 17 ()}
        {Lisp-Entry "get-owner" accessor #f 54 55 54 63 ()}
        {Lisp-Entry "set-owner" accessor #f 54 55 54 63 ()}
        {Lisp-Entry "copyright" property #f 55 12 55 21 ()}
        {Lisp-Entry "get-copyright" accessor #f 55 55 55 63 ()}
        {Lisp-Entry "set-copyright" accessor #f 55 55 55 63 ()}
        {Lisp-Entry "version" property #f 56 12 56 19 ()}
        {Lisp-Entry "get-version" accessor #f 56 55 56 63 ()}
        {Lisp-Entry "set-version" accessor #f 56 55 56 63 ()}
        {Lisp-Entry "include-extensions" property #f 57 12 57 30 ()}
        {Lisp-Entry "get-include-extensions" accessor #f 57 55 57 63 ()}
        {Lisp-Entry "set-include-extensions" accessor #f 57 55 57 63 ()}
        {Lisp-Entry "documentation" property #f 58 12 58 25 ()}
        {Lisp-Entry "get-documentation" accessor #f 58 55 58 63 ()}
        {Lisp-Entry "set-documentation" accessor #f 58 55 58 63 ()}
        {Lisp-Entry "editable?" property #f 59 12 59 21 ()}
        {Lisp-Entry "get-editable?" accessor #f 59 55 59 63 ()}
        {Lisp-Entry "set-editable?" accessor #f 59 55 59 63 ()}
        {Lisp-Entry "active?" property #f 60 12 60 19 ()}
        {Lisp-Entry "get-active?" accessor #f 60 55 60 63 ()}
        {Lisp-Entry "set-active?" accessor #f 60 55 60 63 ()}
        {Lisp-Entry "catalog?" property #f 61 12 61 20 ()}
        {Lisp-Entry "get-catalog?" accessor #f 61 55 61 63 ()}
        {Lisp-Entry "set-catalog?" accessor #f 61 55 61 63 ()}
        {Lisp-Entry "catalog-title" property #f 62 12 62 25 ()}
        {Lisp-Entry "get-catalog-title" accessor #f 62 55 62 63 ()}
        {Lisp-Entry "set-catalog-title" accessor #f 62 55 62 63 ()}
        {Lisp-Entry "catalog-extensions" property #f 63 12 63 30 ()}
        {Lisp-Entry "get-catalog-extensions" accessor #f 63 55 63 63 ()}
        {Lisp-Entry "set-catalog-extensions" accessor #f 63 55 63 63 ()}
        {Lisp-Entry "catalog-heuristics" property #f 64 12 64 30 ()}
        {Lisp-Entry "get-catalog-heuristics" accessor #f 64 55 64 63 ()}
        {Lisp-Entry "set-catalog-heuristics" accessor #f 64 55 64 63 ()}
        {Lisp-Entry "workbench" slot #f 67 8 67 17 ()}
        {Lisp-Entry "get-workbench" accessor #f 67 47 67 55 ()}
        {Lisp-Entry "set-workbench" accessor #f 67 47 67 55 ()}
        {Lisp-Entry "parent-project" slot #f 68 8 68 22 ()}
        {Lisp-Entry "get-parent-project" accessor #f 68 47 68 55 ()}
        {Lisp-Entry "set-parent-project" accessor #f 68 47 68 55 ()}
        {Lisp-Entry "catalog" slot #f 69 8 69 15 ()}
        {Lisp-Entry "get-catalog" accessor #f 69 47 69 55 ()}
        {Lisp-Entry "set-catalog" accessor #f 69 47 69 55 ()}
        {Lisp-Entry "initer-property?" method #f 76 20 76 36 ("workbench" "'workbench" "eq?" "nextmethod" "or" "name")}
        {Lisp-Entry "default-name" method #f 81 20 81 32 ("self" "class-of" "category-name")}
        {Lisp-Entry "prepare" method #f 85 20 85 27 ("workbench" "set!" "when" "workbench:" "getf" "arg" "let" "nextmethod" "rest")}
        {Lisp-Entry "print" method #f 92 20 92 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "project-title" method #f 104 26 104 39 ("self" "class-of" "category-identifier" "->string" "title" "or")}
        {Lisp-Entry "concrete?" method #f 113 26 113 35 ()}
        {Lisp-Entry "get-effective-source" method #f 123 11 123 31 ("name" "get-manifest-source")}
        {Lisp-Entry "require-catalog" method #f 132 20 132 35 ("set!" "unless" "get-application" "get-cataloguer" "add-catalog" "create-catalog" "catalog" "let" "create/register-catalog" "define")}
        {Lisp-Entry "create-catalog" method #f 143 11 143 25 ("catalog-output" "catalog-name" "self" "Project-Catalog" "new")}
        {Lisp-Entry "catalog-name" method #f 147 29 147 41 ("name" "else" "title" "string->symbol" "catalog-title" "cond")}
        {Lisp-Entry "catalog-output" method #f 153 29 153 43 ("catalog-name" "format" "Profile" "'Profile" "list" "File" "new")}
        {Lisp-Entry "get-effective-editable?" method #f 162 26 162 49 ("parent-project" "get-effective-editable?" "editable?" "unspecified?" "if")}
        {Lisp-Entry "for-each-file" method #f 173 18 173 31 ("is?" "when" "level" "descendant" "lambda" "for-each-descendant" "Project-File" "type" "proc")}
        {Lisp-Entry "collect-files" method #f 180 18 180 31 ("get-output" "put" "is?" "when" "file" "lambda" "for-each-file" "List-Factory" "new" "fact" "let" "Project-File" "type")}
        {Lisp-Entry "fold-files" method #f 189 18 189 28 ("self" "get-children" "c" "for-each" ":skip" "eq?" "is?" "if" "ps" "let" "s" "f" "x" "lambda" "fold" "letrec" "Project-File" "type" "seed" "proc")}
        {Lisp-Entry "add-to-index" method #f 209 20 209 32 ("self" "workbench" "add-to-project" "find-workbench" "set-workbench" "component" "name")}
        {Lisp-Entry "remove-from-index" method #f 214 20 214 37 ("self" "workbench" "remove-from-project" "component" "name")}
        {Lisp-Entry "find-workbench" method #f 218 29 218 43 ("find-ascendant" "Workbench" "is?" "if" "workbench" "creator" "or" "project" "let")}
        {Lisp-Entry "project-name" method #f 230 26 230 38 ()}
        {Lisp-Entry "project-test" method #f 239 26 239 38 ("message-box" "rest")}
        {Lisp-Entry "project-run" method #f 248 26 248 37 ("message-box" "rest")}
        {Lisp-Entry "run-arguments" method #f 252 26 252 39 ()}
        {Lisp-Entry "project-debug" method #f 261 26 261 39 ("message-box" "rest")}
        {Lisp-Entry "debug-arguments" method #f 265 26 265 41 ()}
        {Lisp-Entry "project-build" method #f 274 26 274 39 ("message-box")}
        {Lisp-Entry "project-clean" method #f 283 26 283 39 ("message-box")}
        {Lisp-Entry "get-class-descriptor" method #f 292 25 292 45 ("Project-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 301 11 301 17 ()
        {Lisp-Entry "Project-Descriptor" class #f 307 7 307 25 ("editable?" "title:" "name:" "catalog-heuristics" "catalog-extensions" "catalog?" "active?" "documentation" "include-extensions" "version" "copyright" "owner" "icon" "title" "categorized:" "Image-Resource" "image:" "Project-File-Descriptor")
          {Lisp-Entry "component-presentation-property?" method #f 327 20 327 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 331 20 331 46 ("class-of" "category-name" "->string" "get-title" "or" "component")}
          {Lisp-Entry "component-set-presentation" method #f 335 20 335 46 ("title:" "set-property" "presentation" "designer" "component")}
          {Lisp-Entry "component-addable-class?" method #f 339 20 339 44 ("Project-Group" "Project-File" "subtype?" "or" "class" "component")}
          {Lisp-Entry "component-get-addable-classes" method #f 344 20 344 49 ("Project-Group" "list" "component")}
          {Lisp-Entry "component-property-domain" method #f 353 20 353 45 ("nextmethod" "else" "Boolean-Domain" "active?" "catalog?" "File-Domain" "documentation" "Value-Domain" "catalog-heuristics" "catalog-extensions" "include-extensions" "nullable?:" "String-Domain" "new" "title" "field-name" "case" "property" "component")}}}}})
"Project-Catalog"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "project" "Project-Catalog.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.project.Project-Catalog" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Project-Catalog" class #f 45 7 45 22 ("Filing-Catalog")
        {Lisp-Entry "project" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-project" accessor #f 48 23 48 31 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("project~self" "set!" "nextmethod" "apply" "rest" "project")}
        {Lisp-Entry "get-extensions" method #f 61 20 61 34 ("project" "get-catalog-extensions" "effective-catalog-extensions")}
        {Lisp-Entry "get-heuristics" method #f 65 20 65 34 ("project" "get-catalog-heuristics")}
        {Lisp-Entry "scan-directories" method #f 74 20 74 36 ("enqueue" "scan-file" "entry" "ci=?" "test:" "member?" "not" "or" "get-extension" "ext" "when" "get-effective-source" "file" ":skip" "get-catalog?" "Project" "is?" "neq?" "and" "if" "seed" "project-file" "lambda" "project" "fold-files" "get-extensions" "extensions" "let" "queue")}}}})
"Project-Designer"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "project" "Project-Designer.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.project.Project-Designer" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Project-Designer" class #f 43 7 43 23 ("Designer")
        {Lisp-Entry "print" method #f 46 20 46 25 ("reference" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}}})
"Project-Directory"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "file" "Project-Directory.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.file.Project-Directory" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Project-Directory" class #f 45 7 45 24 ("initialize" "Project-Group")
        {Lisp-Entry "directory" property #f 48 12 48 21 ()}
        {Lisp-Entry "get-directory" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "set-directory" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "get-class-descriptor" method #f 56 25 56 45 ("Project-Directory-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 65 11 65 17 ()
        {Lisp-Entry "Project-Directory-Descriptor" class #f 71 7 71 35 ("domain" "title:" "name:" "directory" "categorized:" "can-rename?:" "Project-Group-Descriptor")
          {Lisp-Entry "component-get-presentation" method #f 81 20 81 46 ("get-name" "if" "get-directory" "directory" "let" "component")}}}}})
"Project-File"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "file" "Project-File.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.file.Project-File" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Project-File" class #f 45 7 45 19 ("initialize" "Component")
        {Lisp-Entry "source" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-source" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "set-source" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "build?" property #f 49 12 49 18 ()}
        {Lisp-Entry "get-build?" accessor #f 49 43 49 51 ()}
        {Lisp-Entry "set-build?" accessor #f 49 43 49 51 ()}
        {Lisp-Entry "project" slot #f 52 8 52 15 ()}
        {Lisp-Entry "get-project" accessor #f 52 40 52 48 ()}
        {Lisp-Entry "set-project" accessor #f 52 40 52 48 ()}
        {Lisp-Entry "get-effective-source" method #f 60 26 60 46 ("source")}
        {Lisp-Entry "require-catalog" method #f 69 26 69 41 ("project" "require-catalog")}
        {Lisp-Entry "preprocess" method #f 78 26 78 36 ("rest" "output" "log" "reporter" "project")}
        {Lisp-Entry "build" method #f 82 26 82 31 ("rest" "output" "log" "reporter" "project")}
        {Lisp-Entry "get-class-descriptor" method #f 91 25 91 45 ("Project-File-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 100 11 100 17 ()
        {Lisp-Entry "Project-File-Descriptor" class #f 106 7 106 30 ("domain" "name:" "build?" "source" "categorized:" "can-move?:" "can-paste?:" "can-copy?:" "can-cut?:" "Image-Resource" "image:" "Component-Descriptor")
          {Lisp-Entry "component-presentation-property?" method #f 118 20 118 52 ("source" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 122 20 122 46 ("get-name" "if" "get-source" "source" "let" "component")}}}}})
"Project-Group"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "file" "Project-Group.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.file.Project-Group" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Project-Group" class #f 45 7 45 20 ("Group")
        {Lisp-Entry "get-class-descriptor" method #f 53 25 53 45 ("Project-Group-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 62 11 62 17 ()
        {Lisp-Entry "Project-Group-Descriptor" class #f 68 7 68 31 ("can-move?:" "can-paste?:" "can-copy?:" "can-cut?:" "Group-Descriptor")
          {Lisp-Entry "class-presentation->name" method #f 76 20 76 44 ("presentation" "class")}
          {Lisp-Entry "class-name->presentation" method #f 80 20 80 44 ("name" "class")}
          {Lisp-Entry "component-sort-components" method #f 84 20 84 45 ("get-presentation-property" "1" "0" "Project-Group" "is?" "if" "cons" "lambda" "key:" "nu<?" "sort" "components" "predicate" "component")}
          {Lisp-Entry "component-addable-class?" method #f 90 20 90 44 ("Project-Group" "Project-File" "subtype?" "or" "class" "component")}
          {Lisp-Entry "component-get-addable-classes" method #f 95 20 95 49 ("Project-Group" "list" "component")}}}}})
"Project-Selector"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "Project-Selector.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.workbench.Project-Selector" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Project-Selector" class #f 47 7 47 23 ("initialize" "5" "on-cancel" "cancel" "3" "on-ok" ":host" "default?:" "enabled?:" "24" "80" "tail" "ok" "south" "36" "buttonbar" "toplevel-controls?:" "235" "width:" "title:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" "Selection-Handler" "selection-handler:" "name" "filled-column:" "content" "fill" "vscroll?:" "hscroll?:" "document" "entry" "style:" "edge" "border-type:" "center" "content-border" "on-toggle-hierarchical" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "hierarchical" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "toolbar" "name:" "border" "layout-type:" "300" "500" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "hierarchical?" slot #f 66 8 66 21 ()}
        {Lisp-Entry "finish" method #f 69 20 69 26 ("update" "nextmethod" "rest")}
        {Lisp-Entry "host-title" method #f 74 25 74 35 ()}
        {Lisp-Entry "install-in-host" method #f 78 20 78 35 ("select-active" "host")}
        {Lisp-Entry "focus-default" method #f 82 20 82 33 ("get-tree" "acquire-focus")}
        {Lisp-Entry "get-tree" method #f 91 11 91 19 ("content" "'content" "locate")}
        {Lisp-Entry "on-toggle-hierarchical" method #f 100 11 100 33 ("update-buttons" "data" "'data" "use:" "update" "with-preserved-selection" "get-tree" "get-node-column" "set-toplevel-controls?" "not" "hierarchical?" "set!" "evt")}
        {Lisp-Entry "on-selection-change" method #f 109 11 109 30 ("update-buttons" "evt")}
        {Lisp-Entry "default-action" method #f 113 11 113 25 ("get-modal-result" "get-host" "end-modal" "ok-enabled?" "when")}
        {Lisp-Entry "update" method #f 123 11 123 17 ("update-buttons" "update-content")}
        {Lisp-Entry "update-content" method #f 128 11 128 25 ("hierarchical?" "with-update-locked" "remove-every-row" "get-tree" "key:" "string<?" "sort" "lambda" "update-flat" "collect-projects" "for-each" "not" "if" "get-parent" "parent" "project" "insert" "table-set!" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "row" "get-component-image" "image" "get-presentation-property" "title" "table-ref" "or" "father" "file" "add" "eq?" "test:" "make-table" "rows" "get-workbench" "workbench" "let" "tree" "update-hierarchical" "define")}
        {Lisp-Entry "update-buttons" method #f 166 11 166 25 ("ok" "'ok" "locate" "set-enabled?" "selected-project" "project" "let")}
        {Lisp-Entry "select-active" method #f 171 11 171 24 ("get-tree" "select-user-data-row" "get-active-project" "when")}
        {Lisp-Entry "get-modal-result" method #f 181 20 181 36 ("selected-project")}
        {Lisp-Entry "ok-enabled?" method #f 185 11 185 22 ("ok" "'ok" "locate" "get-enabled?")}
        {Lisp-Entry "on-double-click" method #f 189 11 189 26 ("default-action" "evt")}
        {Lisp-Entry "on-return-press" method #f 194 20 194 35 ("default-action" "evt")}
        {Lisp-Entry "on-escape-press" method #f 199 20 199 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "selected-project" method #f 209 11 209 27 ("concrete?" "Project" "is?" "and" "when" "get-tree" "get-single-selected-data" "file" "let")}}}})
"Refactor-Menu"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "code" "Refactor-Menu.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.code.Refactor-Menu" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Refactor-Menu" class #f 48 7 48 20 ("find-all-imports" "code-text" "find-imports" "remove-highlights" "lisp-text" "highlight-selection" "references-analyser" "ide" "Action" "action-handler:" "Image-Resource" "icon:" "class-browser" "name:" "title:" "Menu")}}})
"Repositories"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "repositories" "Repositories.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.repositories.Repositories" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Repositories" class #f 44 7 44 19 ("Component")
        {Lisp-Entry "get-class-descriptor" method #f 52 25 52 45 ("Repositories-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 61 11 61 17 ()
        {Lisp-Entry "Repositories-Descriptor" class #f 67 7 67 30 ("Image-Resource" "image:" "Component-Descriptor")}}}})
"Repositories-Manager"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "repositories" "Repositories-Manager.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.repositories.Repositories-Manager" module #f 37 18 37 68 ("jazz")
      {Lisp-Entry "Repositories-Manager" class #f 53 7 53 27 ("329" "width:" "title:" "on-context-menu" ":form" "Event-Handler" "context-menu-handler:" "multiple-selection?:" "show-header?:" ":images" "portfolio:" "repositories" "shown?:" "header" "content" "tool" "style:" "hscroll?:" "vscroll?:" "scroller" "tools" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "external-name" method #f 67 25 67 38 ("repositories-manager" "'repositories-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 76 25 76 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 80 25 80 35 ()}
        {Lisp-Entry "install-in-host" method #f 84 20 84 35 ("setup-repositories" "host")}
        {Lisp-Entry "setup-repositories" method #f 88 11 88 29 ("update")}
        {Lisp-Entry "get-tools-view" method #f 97 20 97 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 101 20 101 33 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" method #f 111 11 111 19 ("repositories" "'repositories" "locate")}
        {Lisp-Entry "update" method #f 120 11 120 17 ("get-repositories" "collapsed" "'collapsed" "add-repository" "repository" "for-each" "user-data:" "Image-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "add-row" "repositories-row" "lambda" "with-update-locked" "remove-every-row" "get-tree" "tree" "let")}
        {Lisp-Entry "add-repository" method #f 131 11 131 25 ("package-name" "key:" "repository-packages" "string<=?" "sort" "add-package" "package" "lambda" "for-each" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "repository-row" "Image-Resource" "image" "->string" "title" "repository-name" "name" "let" "repository" "state" "father" "tree")}
        {Lisp-Entry "add-package" method #f 142 11 142 22 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "father:" "add-row" "else" "get-workbench" "find-project-by-file" "Image-Resource" "not" "cond" "image" "->string" "title" "package-project-file" "file" "package-name" "name" "let" "package" "father" "tree")}
        {Lisp-Entry "Repository-Template" definition #f 157 14 157 33 ("Jazz" "Directory")}
        {Lisp-Entry "on-new-repository" method #f 161 11 161 28 ("save-repositories" "new-directory" "install/add-repository" "copy-template" "'name" "'dirname" "cons" "list" "associations" "empty-string?" "if" "effective-name" "destination" "Repository-Template" "template" "let" "get-current-directory" "directory:" "New-Repository-Dialog" "get-modal" "name" "dirname" "directory" "receive" "evt")}
        {Lisp-Entry "on-register-repository" method #f 172 11 172 33 ("save-repositories" "install/add-repository" "format" "message-box" "find-repository" "name" "exists?" "if" "new-file" "repository-file" "choose-directory" "dir" "cadr" "read" "form" "let" "input" "lambda" "parse" "call-with-input-file" "file" "load-repository-name" "define" "evt")}
        {Lisp-Entry "install/add-repository" method #f 190 11 190 33 ("row->line" "set-single-selection" "ensure-expanded" "expanded" "'expanded" "add-repository" "repository-row" "parse" "install-repository" "repository" "selected-row" "repositories-row" "get-tree" "tree" "let" "dir")}
        {Lisp-Entry "save-repositories" method #f 199 11 199 28 ("get-application" "set-preferences-property" "repository-directory" "tokenise-filename" "Directory" "new" "anchorize" "map" "directories" "repositories" "'repositories" "get-preferences" "pref" "let" "get-repositories" "system-repository?" "not" "repository" "lambda" "collect-if" "collect-user-repositories" "define")}
        {Lisp-Entry "system-repository?" definition #f 213 15 213 33 ("User" "Jazz" "Build" "repository-name" "memq?" "repository")}
        {Lisp-Entry "Package-Template" definition #f 222 14 222 30 ("Jazz" "Directory")}
        {Lisp-Entry "on-edit-repository" method #f 226 11 226 29 ("selected-objects" "edit-repository" "for-each" "evt")}
        {Lisp-Entry "edit-repository" method #f 230 11 230 26 ("new-file" "get-application" "edit-document" "repository-directory" "tokenise-filename" "Directory" "new" "dir" "let" "repository")}
        {Lisp-Entry "on-new-package" method #f 235 11 235 25 ("row->line" "set-single-selection" "ensure-expanded" "add-package" "package-row" "selected-row" "repository-row" "get-tree" "tree" "let" "repository-add-package" "parse" "load-package" "new-file" "file" "copy-template" "project-directories" "'project-directories" "format" "project-unit" "'project-unit" "'project" "'package" "cons" "list" "associations" "destination" "repository-library-directory" "tokenise-filename" "Directory" "new" "directory" "Package-Template" "template" "last" "capitalize" "project" "split-identifier" "->string" "map" "package-parts" "string->symbol" "package-name" "let*" "selected-object" "repository:" "New-Package-Dialog" "get-modal" "package" "repository" "receive" "evt")}
        {Lisp-Entry "on-scan-new-packages" method #f 258 11 258 31 ("format-plural" "length" "count" "row->line" "row" "set-selection" "ensure-expanded" "add-package" "package-row" "package" "lambda" "map" "rows" "get-tree" "tree" "user-message" "null?" "if" "repository-install-packages" "packages" "get-user-data" "repository" "selected-row" "repository-row" "let" "evt")}
        {Lisp-Entry "on-unregister-repository" method #f 277 11 277 35 ("save-repositories" "selected-rows" "for-each" "get-tree" "remove-row" "uninstall-repository" "get-user-data" "repository" "let" "row" "uninstall/remove-repository" "define" "evt")}
        {Lisp-Entry "on-edit-package" method #f 292 11 292 26 ("selected-objects" "edit-package" "for-each" "evt")}
        {Lisp-Entry "edit-package" method #f 296 11 296 23 ("package-name" "->string" "list" "new-file" "get-application" "edit-document" "package-repository" "repository-library-directory" "tokenise-filename" "Directory" "new" "dir" "let" "package")}
        {Lisp-Entry "on-install-in-workbench" method #f 301 11 301 34 ("selected-rows" "install-in-workbench" "row" "lambda" "for-each" "get-tree" "tree" "get-workbench" "workbench" "get-application" "get-workbench-manager" "workbench-manager" "let" "evt")}
        {Lisp-Entry "install-in-workbench" method #f 310 11 310 31 ("invalidate-cell" "Image-Resource" "set-image" "get-cell-data" "node" "0" "Cell" "new" "cell" "row->line" "line" "install-project" "package-project-file" "file" "get-user-data" "package" "let" "row" "tree" "workbench" "workbench-manager")}
        {Lisp-Entry "package-project-file" definition #f 321 15 321 35 ("package-pathname" "tokenise-filename" "File" "new" "string?" "and" "package-project" "project" "let" "package")}
        {Lisp-Entry "package-project-installable?" definition #f 328 15 328 43 ("get-workbench" "find-project-by-file" "not" "and" "package-project-file" "file" "let" "package")}
        {Lisp-Entry "selected-kind" definition #f 338 15 338 28 ("package" "'package" "package?" "repository" "'repository" "repository?" "repositories" "'repositories" "not" "cond" "object")}
        {Lisp-Entry "selected-kind/objects" method #f 347 11 347 32 ("not" "selected-kind" "key:" "uniform" "kind" "values" "null?" "if" "get-tree" "get-selected-data" "objects" "let")}
        {Lisp-Entry "selected-objects" method #f 357 11 357 27 ("selected-kind/objects" "objects" "kind" "receive")}
        {Lisp-Entry "selected-object" method #f 362 11 362 26 ("selected-objects" "car")}
        {Lisp-Entry "selected-rows" method #f 366 11 366 24 ("get-tree" "get-selected-rows")}
        {Lisp-Entry "selected-row" method #f 370 11 370 23 ("get-tree" "get-selected-row")}
        {Lisp-Entry "on-context-menu" method #f 379 11 379 26 ("track-popup-menu" "when" "new-menu" "menu" "let" "lambda" "with-context-click" "acquire" "acquired" "get-position" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "new-menu" method #f 390 18 390 26 ("package" "repository" "repositories" "case" "not" "if" "selected-kind/objects" "kind" "receive" "install-package" "'install-package" "install-package-separator" "'install-package-separator" "package-project-installable?" "every?" "unless" "Package-Menu" "new-package-menu" "unregister-repository" "'unregister-repository" "unregister-repository-separator" "'unregister-repository-separator" "system-repository?" "some?" "new-package" "'new-package" "new-package-separator" "'new-package-separator" "locate" "set-visible?" "1" "length" ">" "when" "Repository-Menu" "new-repository-menu" "layout-menu" "cleanup-separators" "get-tree" "client:" "Repositories-Menu" "new" "menu" "let" "objects" "new-repositories-menu" "define")}}
      {Lisp-Entry "Repositories-Menu" class #f 432 7 432 24 ("register-repository" "repositories-manager" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "new-repository" "name:" "Context-Menu")}
      {Lisp-Entry "Repository-Menu" class #f 447 7 447 22 ("unregister-repository" "unregister-repository-separator" "scan-new-packages" "new-package" "new-package-separator" "repositories-manager" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "edit-repository" "name:" "Context-Menu")}
      {Lisp-Entry "Package-Menu" class #f 466 7 466 19 ("install-in-workbench" "install-package" "install-package-separator" "repositories-manager" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "edit-package" "name:" "Context-Menu")}}})
"Repositories-Manager-Actions"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "repositories" "Repositories-Manager-Actions.jazz"} 1289842571
    {Lisp-Entry "jazz.ide.builder.repositories.Repositories-Manager-Actions" module #f 37 18 37 76 ("jazz")
      {Lisp-Entry "Repositories-Manager-Actions" class #f 45 7 45 35 ("on-install-in-workbench" "install-in-workbench" "on-edit-package" "edit-package" "on-unregister-repository" "unregister-repository" "on-scan-new-packages" "scan-new-packages" "on-new-package" "new-package" "on-edit-repository" "edit-repository" "on-register-repository" "register-repository" "on-new-repository" ":repositories-manager" "Event-Handler" "action-handler:" "new-repository" "name:" "Actions")}}})
"Repositories-Preferences"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "preference" "Repositories-Preferences.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.preference.Repositories-Preferences" module #f 37 18 37 70 ("jazz")
      {Lisp-Entry "Repositories-Preferences" class #f 44 7 44 31 ("title:" "initialize" "Preferences")
        {Lisp-Entry "repositories" property #f 47 12 47 24 ()}
        {Lisp-Entry "get-repositories" accessor #f 47 50 47 58 ()}
        {Lisp-Entry "set-repositories" accessor #f 47 50 47 58 ()}
        {Lisp-Entry "get-class-descriptor" method #f 59 25 59 45 ("Repositories-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 68 11 68 17 ()
        {Lisp-Entry "Repositories-Preferences-Descriptor" class #f 74 7 74 42 ("repositories" "name:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")}}}})
"Repository"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "repositories" "Repository.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.repositories.Repository" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Repository" class #f 46 7 46 17 ("initialize" "Component")
        {Lisp-Entry "title" property #f 49 12 49 17 ()}
        {Lisp-Entry "get-title" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "set-title" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "directory" property #f 50 12 50 21 ()}
        {Lisp-Entry "get-directory" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "set-directory" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "print" method #f 53 20 53 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-class-descriptor" method #f 65 25 65 45 ("Repository-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 74 11 74 17 ()
        {Lisp-Entry "Repository-Descriptor" class #f 80 7 80 28 ("domain" "title:" "title" "name:" "directory" "categorized:" "Image-Resource" "image:" "Component-Descriptor")
          {Lisp-Entry "component-presentation-property?" method #f 91 20 91 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 95 20 95 46 ("get-title" "component")}
          {Lisp-Entry "component-set-presentation" method #f 99 20 99 46 ("title:" "set-property" "presentation" "designer" "component")}
          {Lisp-Entry "component-addable-class?" method #f 103 20 103 44 ("Project-Group" "Project-File" "subtype?" "or" "class" "component")}
          {Lisp-Entry "component-get-addable-classes" method #f 108 20 108 49 ("Project-Group" "list" "component")}}}}})
"Resource-File"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "resource" "Resource-File.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.resource.Resource-File" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Resource-File" class #f 43 7 43 20 ("Project-File")
        {Lisp-Entry "resource-class" method #f 46 26 46 40 ()}
        {Lisp-Entry "resource-marker" method #f 50 26 50 41 ()}}}})
"Server-Configuration"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "server" "Server-Configuration.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.server.Server-Configuration" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Server-Configuration" class #f 43 7 43 27 ("initialize" "Component")
        {Lisp-Entry "unit" property #f 46 12 46 16 ()}
        {Lisp-Entry "get-unit" accessor #f 46 60 46 68 ()}
        {Lisp-Entry "set-unit" accessor #f 46 60 46 68 ()}
        {Lisp-Entry "class" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-class" accessor #f 47 60 47 68 ()}
        {Lisp-Entry "set-class" accessor #f 47 60 47 68 ()}
        {Lisp-Entry "port" property #f 48 12 48 16 ()}
        {Lisp-Entry "get-port" accessor #f 48 60 48 68 ()}
        {Lisp-Entry "set-port" accessor #f 48 60 48 68 ()}
        {Lisp-Entry "description" property #f 49 12 49 23 ()}
        {Lisp-Entry "get-description" accessor #f 49 60 49 68 ()}
        {Lisp-Entry "set-description" accessor #f 49 60 49 68 ()}
        {Lisp-Entry "debug?" property #f 50 12 50 18 ()}
        {Lisp-Entry "get-debug?" accessor #f 50 60 50 68 ()}
        {Lisp-Entry "set-debug?" accessor #f 50 60 50 68 ()}
        {Lisp-Entry "toggle-debug?" method #f 58 18 58 31 ("not" "debug?" "set!")}}}})
"Server-Configurations"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "server" "Server-Configurations.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.server.Server-Configurations" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Server-Configurations" class #f 43 20 43 41 ("Component")}}})
"Servers-Actions"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "server" "Servers-Actions.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.server.Servers-Actions" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Servers-Actions" class #f 46 20 46 35 ("on-debug-server" "debug-server" "on-restart-server" "restart-server" "on-stop-server" "stop-server" "on-start-server" "start-server" "on-edit-server" ":focus-guest" "Event-Handler" "action-handler:" "edit-server" "name:" "Actions")}}})
"Servers-Manager"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "server" "Servers-Manager.jazz"} 1290005243
    {Lisp-Entry "jazz.ide.server.Servers-Manager" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Servers-Manager" class #f 51 20 51 35 ("debugged" "100" "hits" "250" "75" "port" "150" "state" "toplevel-controls?:" "200" "width:" "title:" "name" "on-context-menu" "context-menu-handler:" "on-double-click" "double-click-handler:" "on-selection-change" ":form" "selection-handler:" "multiple-selection?:" "row" "selection-mode:" "description" "filled-column:" "servers" "shown?:" "header" "fill" "content" "tool" "style:" "hscroll?:" "vscroll?:" "center" "scroller" "on-refresh" "refresh" "on-debug-server" "debug" "on-restart-server" "restart" "on-stop-server" "stop" "on-start-server" "start" "edit-separator" "on-edit-server" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "enabled?:" "tail" "location:" "22" "Dimension" "size:" "edit" "tools" "name:" "border" "layout-type:" "eq?" "test:" "make-table" "initialize" "Layout-View")
        {Lisp-Entry "configurations" slot #f 54 8 54 22 ()}
        {Lisp-Entry "servers" slot #f 55 8 55 15 ()}
        {Lisp-Entry "external-name" method #f 83 25 83 38 ("servers-manager" "'servers-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 92 25 92 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 96 25 96 35 ()}
        {Lisp-Entry "get-tools-view" method #f 105 20 105 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 109 20 109 33 ("get-tree" "acquire-focus")}
        {Lisp-Entry "install" method #f 118 20 118 27 ("update-servers" "setup-configurations" "nextmethod" "rest")}
        {Lisp-Entry "get-tree" method #f 129 11 129 19 ("servers" "'servers" "locate")}
        {Lisp-Entry "on-edit-server" method #f 138 11 138 25 ("selected-configuration" "edit-server" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-start-server" method #f 144 11 144 26 ("update-states" "update-tools" "selected-configuration" "start-server" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-stop-server" method #f 152 11 152 25 ("update-states" "update-tools" "selected-configuration" "stop-server" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-restart-server" method #f 160 11 160 28 ("update-states" "update-tools" "selected-configuration" "restart-server" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-debug-server" method #f 168 11 168 26 ("update-states" "update-tools" "selected-configuration" "debug-server" "evt")}
        {Lisp-Entry "on-selection-change" method #f 174 11 174 30 ("update-tools" "servers" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-refresh" method #f 181 11 181 21 ("update-servers" "evt")}
        {Lisp-Entry "update-tools" method #f 185 11 185 23 ("get-debug?" "set-selected?" "debug" "'debug" "restart" "'restart" "stop" "'stop" "not" "start" "'start" "edit" "'edit" "locate" "set-enabled?" "get-name" "find-server" "and" "server" "selected-configuration" "config" "let*")}
        {Lisp-Entry "on-double-click" method #f 196 11 196 26 ("update-states" "update-tools" "selected-configuration" "start/stop-server" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-context-menu" method #f 204 11 204 26 ("track-popup-menu" "when" "selected-configuration" "let" "lambda" "with-context-click" "acquire" "acquired" "get-position" "pos" "get-sender" "sender" "layout-menu" "cleanup-separators" "debug" "'debug" "restart" "'restart" "stop" "'stop" "not" "start" "'start" "locate" "set-visible?" "get-application" "appl" "find-server" "server" "get-name" "name" "Server-Menu" "new" "menu" "let*" "config" "new-servers-menu" "define" "evt")}
        {Lisp-Entry "setup-configurations" method #f 234 11 234 31 ("err" "continue-handler:" "configurations" "set!" "lambda" "with-safe-execution" "Server-Configurations" "new" "default-servers" "read-form" "instantiate" "exists?" "'Profile" "is-alias?" "and" "when" "file" "let" "load-servers" "Profile" "File" "Servers-File" "define")}
        {Lisp-Entry "update-servers" method #f 259 11 259 25 ("get-children" "user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "dynamic" "'dynamic" "state:" "add-row" "get-debug?" "debug?" "get-hits" "0" "hits" "get-description" "description" "state-text" "->string" "title" "Image-Resource" "case" "image" "get-port" "port" "started" "'started" "stopped" "'stopped" "not" "if" "state" "find-server" "server" "get-name" "name" "let*" "config" "for-each" "configurations" "when" "lambda" "with-update-locked" "remove-every-row" "get-tree" "tree" "let")}
        {Lisp-Entry "update-states" method #f 280 11 280 24 ("invalidate-cell" "set-title" "get-cell-data" "set-image" "get-debug?" "debug?" "state-text" "else" "Image-Resource" "case" "image" "stopped" "'stopped" "started" "'started" "if" "state" "find-server" "server" "get-name" "name" "get-user-data" "config" "5" "c5" "1" "c1" "0" "Cell" "new" "c0" "let*" "rank" "row" "lambda" "for-each-visible-row" "get-tree" "tree" "let")}
        {Lisp-Entry "start-server" method #f 307 11 307 23 ("servers" "table-set!" "start-process" "port:" "module-ref" "new" "server" "get-debug?" "debug?" "get-port" "port" "get-class" "class" "get-unit" "unit" "get-name" "name" "let*" "stop-server" "config")}
        {Lisp-Entry "stop-server" method #f 319 11 319 22 ("servers" "table-set!" "stop" "when" "find-server" "server" "get-name" "name" "let*" "config")}
        {Lisp-Entry "restart-server" method #f 327 11 327 25 ("start-server" "stop-server" "config")}
        {Lisp-Entry "start/stop-server" method #f 332 11 332 28 ("stop-server" "start-server" "case" "started" "'started" "stopped" "'stopped" "not" "if" "state" "find-server" "server" "get-name" "name" "let*" "config")}
        {Lisp-Entry "debug-server" method #f 341 11 341 23 ("get-debug?" "set-debug?" "when" "find-server" "server" "get-name" "name" "let*" "toggle-debug?" "config")}
        {Lisp-Entry "edit-server" method #f 349 11 349 22 ("jazz" "'jazz" "context:" "edit-definitions" "get-class" "class" "get-application" "appl" "let" "config")}
        {Lisp-Entry "find-server" method #f 355 18 355 29 ("servers" "table-ref" "name")}
        {Lisp-Entry "selected-object" method #f 364 11 364 26 ("get-row" "get-user-data" "when" "get-single-selection" "rank" "get-tree" "tree" "let*")}
        {Lisp-Entry "selected-configuration" method #f 371 11 371 33 ("Server-Configuration" "is?" "and" "when" "selected-object" "object" "let")}}
      {Lisp-Entry "Server-Menu" class #f 382 7 382 18 ("debug-server" "debug" "restart-server" "restart" "stop-server" "stop" "start-server" "start" "edit-server" "servers" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "edit" "name:" "Context-Menu")}}})
"Skins-Manager"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "tool" "Skins-Manager.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.tool.Skins-Manager" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Skins-Manager" class #f 51 20 51 33 ("on-edit-skins" "edit" "0" "32" "on-reload-skins" "reload" "on-save-skins" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "save" "toolbar" "name:" "Canvas-Manager")
        {Lisp-Entry "form-model" method #f 64 20 64 30 ("nextmethod" "else" "Skins-Editor" "descendants" "get-name" "case" "form")}
        {Lisp-Entry "external-name" method #f 70 25 70 38 ("skins-manager" "'skins-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 79 25 79 34 ("Image-Resource")}
        {Lisp-Entry "host-workspaces" method #f 83 20 83 35 ("home")}
        {Lisp-Entry "focus-default" method #f 92 20 92 33 ("acquire-focus" "descendants" "locate" "tree" "let")}
        {Lisp-Entry "install" method #f 102 20 102 27 ("get-skins" "set-client" "nextmethod" "rest")}
        {Lisp-Entry "new-controller" method #f 112 20 112 34 ("self" "Skins-Manager-Controller" "new")}
        {Lisp-Entry "on-edit-skins" method #f 121 19 121 32 ("skins-file" "edit-document" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-save-skins" method #f 126 19 126 32 ("save" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-reload-skins" method #f 132 19 132 34 ("get-toplevel" "redraw-window" "skin-update" "get-active" "child" "set-skin" "set-skins-designer" "load-skins" "skins" "get-application" "appl" "let" "evt")}}
      {Lisp-Entry "Skins-Manager-Controller" class #f 146 7 146 31 ("Component-Editor-Controller")
        {Lisp-Entry "document-status" method #f 149 20 149 35 ("modified-status" "format")}}
      {Lisp-Entry "Skins-Editor" class #f 159 7 159 19 ("Descendants-Editor")
        {Lisp-Entry "form-model" method #f 162 20 162 30 ("nextmethod" "else" "Skins-Tree" "tree" "get-name" "case" "form")}}
      {Lisp-Entry "Skins-Tree" class #f 173 7 173 17 ("reorderable?:" "draggable?:" ":images" "portfolio:" "Descendants-Tree")
        {Lisp-Entry "update-selection" method #f 180 20 180 36 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" method #f 184 20 184 29 ("collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "if" "level" "update?" "component")}}}})
"Sound-File"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "resource" "Sound-File.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.resource.Sound-File" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Sound-File" class #f 44 7 44 17 ("Resource-File")
        {Lisp-Entry "resource-class" method #f 47 20 47 34 ("Sound-Resource")}}}})
"Source-Menu"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "code" "Source-Menu.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.code.Source-Menu" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Source-Menu" class #f 48 7 48 18 ("recolorize-syntax" "lisp-text" "tabulate" "transpose-expr" "select-outer" "goto-line" "search-current" "search-backward-mode" "text" "search-forward-mode" "edit-references" "edit-definitions" "evaluate-buffer" "code-text" "Action" "action-handler:" "Image-Resource" "icon:" "evaluate" "name:" "title:" "Menu")}}})
"Synchronize-Box"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "Synchronize-Box.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.workbench.Synchronize-Box" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Synchronize-Box" class #f 45 7 45 22 ("on-no-action" "535" "no-action" "on-copy-left" "513" "copy-left" "on-copy-right" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "9" "491" "Point" "position:" "copy-right" "name:" "Message-Box")
        {Lisp-Entry "layout-box" method #f 60 20 60 30 ("get-height" "400" "Dimension" "new" "set-size" "border" "'border" "locate" "border-view" "nextmethod" "dialog-size" "let" "default" "actions" "content" "icon" "size" "title" "selection" "text")}}}})
"Synchronize-Entry"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "Synchronize-Entry.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.workbench.Synchronize-Entry" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "Synchronize-Entry" class #f 40 7 40 24 ("Object")
        {Lisp-Entry "kind" slot #f 43 18 43 22 ()}
        {Lisp-Entry "left" slot #f 44 18 44 22 ()}
        {Lisp-Entry "right" slot #f 45 18 45 23 ()}
        {Lisp-Entry "action" slot #f 46 18 46 24 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("action~self" "right~self" "left~self" "kind~self" "set!" "nextmethod" "right-value" "right" "left-value" "left" "kind")}
        {Lisp-Entry "print" method #f 57 20 57 25 ("action" "right" "left" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}}})
"Synchronize-Tree"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "Synchronize-Tree.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.workbench.Synchronize-Tree" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Synchronize-Tree" class #f 45 7 45 23 ("right" "75" "action" "center" "justification:" "80" "left" "toplevel-controls?:" "200" "width:" "title:" "name:" "multiple-selection?:" "path" "filled-column:" "row" "selection-mode:" ":images" "portfolio:" "Tree-View")}
      {Lisp-Entry "Synchronize-Item-Column" class #f 61 7 61 30 ("Tree-Column")
        {Lisp-Entry "draw-data" method #f 64 20 64 29 ("0" "2" "16" "-" "quotient" "White" "name:" "Color" "get-application" "get-images-portfolio" "draw-opaque-image" "present-image" "image" "present?" "not" "when" "get-right" "get-left" "node" "'node" "get-kind" "=" "and" "lvl?" "let" "draw-background" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "present?" method #f 73 38 73 46 ("data")}
        {Lisp-Entry "present-image" method #f 77 38 77 51 ("data")}}
      {Lisp-Entry "Synchronize-Left-Column" class #f 86 7 86 30 ("Synchronize-Item-Column")
        {Lisp-Entry "present?" method #f 89 20 89 28 ("get-left" "data")}
        {Lisp-Entry "present-image" method #f 93 20 93 33 ("Image-Resource" "data")}}
      {Lisp-Entry "Synchronize-Action-Column" class #f 102 7 102 32 ("Tree-Column")
        {Lisp-Entry "draw-data" method #f 105 20 105 29 ("0" "1" "2" "16" "-" "quotient" "+" "White" "name:" "Color" "get-images-portfolio" "draw-opaque-image" "get-right" "get-left" "action-image" "image" "get-application" "appl" "when" "get-action" "action" "let" "draw-background" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Synchronize-Right-Column" class #f 120 7 120 31 ("Synchronize-Item-Column")
        {Lisp-Entry "present?" method #f 123 20 123 28 ("get-right" "data")}
        {Lisp-Entry "present-image" method #f 127 20 127 33 ("Image-Resource" "data")}}}})
"Workbench"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "Workbench.jazz"} 1289572099
    {Lisp-Entry "jazz.ide.builder.workbench.Workbench" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Workbench" class #f 50 7 50 16 ("equal?" "eq?" "test:" "make-table" "initialize" "catalog?:" "Project")
        {Lisp-Entry "projects-table" slot #f 57 8 57 22 ()}
        {Lisp-Entry "categories-table" slot #f 58 8 58 24 ()}
        {Lisp-Entry "resources-table" slot #f 59 8 59 23 ()}
        {Lisp-Entry "sources-table" slot #f 61 8 61 21 ()}
        {Lisp-Entry "find-project" method #f 69 18 69 30 ("continuation-return" "get-title" "string=?" "when" "ignore" "project" "projects-table" "iterate-table" "return" "lambda" "continuation-capture" "title")}
        {Lisp-Entry "require-project" method #f 79 18 79 33 ("error" "find-project" "or" "title")}
        {Lisp-Entry "find-project-by-file" method #f 84 18 84 38 ("continuation-return" "pathname=?" "and" "when" "get-form" "get-origin" "tag-file" "let" "ignore" "project" "projects-table" "iterate-table" "return" "lambda" "continuation-capture" "file")}
        {Lisp-Entry "find-source" method #f 100 18 100 29 ("get-source-entry" "source")}
        {Lisp-Entry "find-filename" method #f 104 18 104 31 ("continuation-return" "get-name" "ci=?" "when" "get-effective-source" "source" "let" "descendant" "for-each-project-file" "return" "lambda" "continuation-capture" "filename")}
        {Lisp-Entry "catalog-name" method #f 121 20 121 32 ("workbench" "'workbench")}
        {Lisp-Entry "load-catalogs" method #f 125 18 125 31 ("catalogs-loader" "'catalogs-loader" "clear-user-message" "include-self?:" "load-catalog" "for-each-project" "user-message" "lambda" "new-thread" "thread-start!")}
        {Lisp-Entry "load-catalog" method #f 135 18 135 30 ("report?:" "activate" "require-catalog" "catalog" "let" "get-catalog?" "when" "project")}
        {Lisp-Entry "get-effective-editable?" method #f 147 20 147 43 ()}
        {Lisp-Entry "add-to-project" method #f 156 21 156 35 ("add-entry" "Jazz-File" "add-resource" "resource-class" "resource-type" "type" "Resource-File" "add-source" "get-source" "source" "let" "set-project" "projects-table" "table-set!" "set-parent-project" "self" "set-workbench" "Project" "is?" "when" "Project-File" "typecase" "component" "name" "project")}
        {Lisp-Entry "remove-from-project" method #f 174 21 174 40 ("remove-entry" "Jazz-File" "remove-resource" "resource-class" "resource-type" "type" "Resource-File" "remove-source" "get-source" "source" "get-application" "get-cataloguer" "remove-catalog" "get-catalog" "catalog" "let" "projects-table" "table-clear" "Project" "is?" "when" "Project-File" "typecase" "component" "name" "project")}
        {Lisp-Entry "for-each-project" method #f 197 18 197 34 ("Project" "is?" "when" "level" "descendant" "lambda" "for-each-descendant" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "for-each-project-file" method #f 205 18 205 39 ("Project-File" "is?" "when" "level" "descendant" "lambda" "for-each-descendant" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "for-each-jazz-file" method #f 213 18 213 36 ("Jazz-File" "is?" "when" "level" "descendant" "lambda" "for-each-descendant" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "add-entry" method #f 221 18 221 27 ("categories-table" "table-set!" "entry" "category-identifier")}
        {Lisp-Entry "remove-entry" method #f 225 18 225 30 ("categories-table" "table-clear" "category-identifier")}
        {Lisp-Entry "get-entry" method #f 229 18 229 27 ("categories-table" "table-ref" "category-identifier")}
        {Lisp-Entry "get-entry-source" method #f 233 18 233 34 ("get-source" "when" "get-entry" "file" "let" "category-identifier")}
        {Lisp-Entry "add-resource" method #f 239 11 239 23 ("resources-table" "table-set!" "cons" "key" "get-base" "name" "let*" "source" "type")}
        {Lisp-Entry "remove-resource" method #f 245 11 245 26 ("resources-table" "table-clear" "cons" "key" "get-base" "name" "let*" "source" "type")}
        {Lisp-Entry "get-resource" method #f 251 18 251 30 ("resources-table" "table-ref" "cons" "key" "let" "name" "type")}
        {Lisp-Entry "get-image-resource" method #f 256 18 256 36 ("get-name" "image" "'image" "get-resource" "resource")}
        {Lisp-Entry "get-icon-resource" method #f 260 18 260 35 ("icon" "'icon" "get-resource" "name")}
        {Lisp-Entry "add-source" method #f 264 18 264 28 ("table-ref" "cons" "sources-table" "table-set!" "get-name" "name" "let" "when" "entry" "source")}
        {Lisp-Entry "remove-source" method #f 270 18 270 31 ("table-ref" "remove!" "sources-table" "table-set!" "get-name" "name" "let" "when" "entry" "source")}
        {Lisp-Entry "get-source-entry" method #f 276 18 276 34 ("get-effective-source" "pathname=?" "entry" "lambda" "find-if" "sources-table" "table-ref" "entries" "get-name" "name" "let*" "source")}
        {Lisp-Entry "find-workbench" method #f 289 20 289 34 ("self")}
        {Lisp-Entry "update" method #f 298 18 298 24 ("resources-table" "categories-table" "sources-table" "projects-table" "empty-table")}
        {Lisp-Entry "get-class-descriptor" method #f 310 25 310 45 ("Workbench-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 319 11 319 17 ()
        {Lisp-Entry "Workbench-Descriptor" class #f 325 7 325 27 ("can-copy?:" "can-cut?:" "can-move?:" "can-delete?:" "can-rename?:" "Image-Resource" "image:" "Project-Descriptor")
          {Lisp-Entry "component-get-presentation" method #f 333 20 333 46 ("component")}
          {Lisp-Entry "component-get-addable-classes" method #f 337 20 337 49 ("Project-Group" "list" "component")}}}}})
"Workbench-Designer"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "Workbench-Designer.jazz"} 1289945065
    {Lisp-Entry "jazz.ide.builder.workbench.Workbench-Designer" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "Workbench-Designer" class #f 44 7 44 25 ("initialize" "Designer")
        {Lisp-Entry "project-designers" slot #f 47 8 47 25 ()}
        {Lisp-Entry "initialize" method #f 55 20 55 30 ("nextmethod" "apply" "add-designer" "reference" "for-each-project" "install-projects-designers" "define" "rest")}
        {Lisp-Entry "cleanup-project-designers" method #f 64 11 64 36 ("get-output" "project-designers" "set!" "save" "get-modified?" "when" "cons" "put" "get-title" "reference" "find-project" "if" "designer" "project" "lambda" "for-each-designer" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "set-name" method #f 80 20 80 28 ("set-name" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "name" "component")}
        {Lisp-Entry "set-property" method #f 89 20 89 32 ("set-property" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "value" "property" "component")}
        {Lisp-Entry "add-child" method #f 98 20 98 29 ("add-child" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "parent" "child")}
        {Lisp-Entry "remove-child" method #f 107 20 107 32 ("remove-child" "" "get-project-designer" "designer" "let" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parent" "parent" "let*" "rest" "child")}
        {Lisp-Entry "move-components" method #f 116 20 116 35 ("move-components" "'move-components" "unimplemented" "rest" "destination" "components")}
        {Lisp-Entry "transfer-components" method #f 120 20 120 39 ("transfer-components" "'transfer-components" "unimplemented" "rest" "destination" "components")}
        {Lisp-Entry "cut-components" method #f 129 20 129 34 ("cut-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "copy-components" method #f 138 20 138 35 ("copy-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "paste-clipboard" method #f 147 20 147 35 ("paste-clipboard" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "let" "rest" "parent")}
        {Lisp-Entry "get-parents" method #f 155 11 155 22 ("get-parent" "map" "components")}
        {Lisp-Entry "find-modification-owner" method #f 164 11 164 34 ("get-presentation-property" "get-effective-editable?" "not" "owner" "car" "error" "1" "length" ">" "map" "remove-duplicates" "owners" "let" "pair?" "get-parent" "Project" "is?" "reference" "eq?" "or" "if" "component" "lambda" "find-owner-project" "letrec" "find-components-owner" "define" "components")}
        {Lisp-Entry "add-designer" method #f 189 11 189 23 ("add-project-designer" "reference:" "form:" "Designer" "new" "designer" "get-form" "form" "let" "project")}
        {Lisp-Entry "add-project-designer" method #f 195 11 195 31 ("cons" "project-designers" "set!" "designer" "project")}
        {Lisp-Entry "remove-designer" method #f 199 11 199 26 ("assq" "remove!" "project-designers" "set!" "project")}
        {Lisp-Entry "get-project-designer" method #f 203 21 203 41 ("project-designers" "assq-value" "project")}
        {Lisp-Entry "for-each-designer" method #f 207 11 207 28 ("project-designers" "designer" "project" "bind" "pair" "lambda" "for-each" "proc")}
        {Lisp-Entry "project-add" method #f 214 21 214 32 ("add-designer" "Project" "is?" "when" "level" "descendant" "lambda" "for-each-descendant" "project")}
        {Lisp-Entry "project-remove" method #f 221 21 221 35 ("cleanup-project-designers" "project")}
        {Lisp-Entry "save-designer" method #f 233 21 233 34 ("designer" "project" "lambda" "for-each-designer" "save" "set!" "get-modified?" "when" "some-modified?" "let")}}}})
"Workbench-Editor"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "Workbench-Editor.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.workbench.Workbench-Editor" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Workbench-Editor" class #f 44 7 44 23 ("Descendants-Editor")
        {Lisp-Entry "form-model" method #f 47 20 47 30 ("nextmethod" "else" "Workbench-Tree" "tree" "get-name" "case" "form")}}}})
"Workbench-Manager"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "Workbench-Manager.jazz"} 1290098071
    {Lisp-Entry "jazz.ide.builder.workbench.Workbench-Manager" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "Workbench-Manager" class #f 65 7 65 24 ("Dark-Blue" "Color" "highlight-color:" "291" "width:" "title:" "descendant" "highlight-edited?:" "show-header?:" "tree" "tool" "style:" "scroller" "center" "location:" "descendants" "on-highlight-document" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "highlight-document" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Exit-Listener" "Component-Editor")
        {Lisp-Entry "external-name" method #f 78 25 78 38 ("workbench-manager" "'workbench-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 87 25 87 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 91 25 91 35 ()}
        {Lisp-Entry "install-in-host" method #f 95 20 95 35 ("find-project" "activate-project" "and" "when" "get-workbench" "get-active-project" "project" "workbench" "'workbench" "get-preferences" "pref" "let*" "setup-active-project" "define" "host")}
        {Lisp-Entry "get-tools-view" method #f 111 20 111 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 115 20 115 33 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" method #f 125 11 125 19 ("tree" "descendants" "locate")}
        {Lisp-Entry "new-controller" method #f 134 20 134 34 ("self" "Workbench-Manager-Controller" "new")}
        {Lisp-Entry "install" method #f 143 20 143 27 ("get-application" "add-exit-listener" "get-workbench" "set-client" "self" "'descendants" "locate" "set-editor" "header" "descendants" "locate-component" "set-shown?" "nextmethod" "rest")}
        {Lisp-Entry "get-designer-class" method #f 151 20 151 38 ("Workbench-Designer")}
        {Lisp-Entry "prepare-exit" method #f 155 20 155 32 ("save-designer" "get-form" "get-origin" "file?" "designer" "and" "when")}
        {Lisp-Entry "on-designer" method #f 165 20 165 31 ("child-remove" ":child-remove" "parent:" "child:" "get-property" "child-add" ":child-add" "get-kind" "case" "nextmethod" "evt")}
        {Lisp-Entry "child-add" method #f 172 11 172 20 ("designer" "project-add" "Project" "is?" "when" "parent" "child")}
        {Lisp-Entry "child-remove" method #f 177 11 177 23 ("designer" "project-remove" "Project" "is?" "when" "child")}
        {Lisp-Entry "key-press" method #f 187 20 187 29 ("launch-selection" "case" "key")}
        {Lisp-Entry "on-highlight-document" method #f 192 11 192 32 ("highlight-document" "evt")}
        {Lisp-Entry "on-add-project" method #f 196 11 196 25 ("add-project" "evt")}
        {Lisp-Entry "on-add-file" method #f 200 11 200 22 ("add-file" "evt")}
        {Lisp-Entry "on-add-group" method #f 204 11 204 23 ("add-group" "evt")}
        {Lisp-Entry "on-install-project" method #f 208 11 208 29 ("install-project" "directory:" "extensions:" "choose-file" "directory" "lambda" "with-import-directory" "file" "selected-object" "parent" "get-shift?" "current-directory?" "let*" "evt")}
        {Lisp-Entry "on-import-files" method #f 217 11 217 26 ("get-shift?" "import-files" "evt")}
        {Lisp-Entry "on-import-directory" method #f 221 11 221 30 ("get-shift?" "import-directory" "evt")}
        {Lisp-Entry "on-synchronize-content" method #f 225 11 225 33 ("synchronize-content" "evt")}
        {Lisp-Entry "on-set-current-directory" method #f 229 11 229 35 ("parse" "user-message" "set-current-directory" "get-directory" "dir" "selected-object" "group" "let" "evt")}
        {Lisp-Entry "on-update-catalog" method #f 236 11 236 28 ("update-catalog" "evt")}
        {Lisp-Entry "on-edit" method #f 240 11 240 18 ("edit-selection" "evt")}
        {Lisp-Entry "on-activate" method #f 244 11 244 22 ("activate-selection" "evt")}
        {Lisp-Entry "on-run" method #f 248 11 248 17 ("run-selection" "evt")}
        {Lisp-Entry "on-debug" method #f 252 11 252 19 ("debug-selection" "evt")}
        {Lisp-Entry "on-launch" method #f 256 11 256 20 ("launch-selection" "evt")}
        {Lisp-Entry "on-distribute" method #f 260 11 260 24 ("distribute-selection" "evt")}
        {Lisp-Entry "on-properties" method #f 264 11 264 24 ("show-properties" "evt")}
        {Lisp-Entry "highlight-document" method #f 273 11 273 29 ("highlight-document-component" "get-tree" "acquire-focus" "find-source" "project-file" "get-workbench" "workbench" "not" "get-moniker" "moniker" "get-controller" "controller" "let*" "bell" "Document" "is-not?" "if" "current-document" "guest" "let")}
        {Lisp-Entry "highlight-document-component" method #f 289 11 289 39 ("row->line" "set-single-selection" "ensure-expanded" "bell" "not" "if" "component-row" "row" "get-tree" "tree" "let*" "component")}
        {Lisp-Entry "select-current" method #f 303 18 303 32 ("select-project")}
        {Lisp-Entry "select-project" method #f 307 11 307 25 ("activate-project" "when" "Project-Selector" "get-modal" "project" "let")}
        {Lisp-Entry "edit-current" method #f 318 18 318 30 ("current-project" "edit-project")}
        {Lisp-Entry "edit-selection" method #f 322 11 322 25 ("edit-project" "Project" "edit-workbench" "Workbench" "typecase" "object" "lambda" "for-each" "selected-objects" "objects" "let")}
        {Lisp-Entry "Workbench-File" definition #f 331 14 331 28 ("Profile" "File")}
        {Lisp-Entry "edit-workbench" method #f 335 11 335 25 ("edit-document" "Workbench-File" "file" "get-application" "appl" "let")}
        {Lisp-Entry "edit-project" method #f 341 11 341 23 ("get-application" "edit-document" "not" "get-form" "get-origin" "file" "let" "bell" "Project" "is-not?" "if" "project")}
        {Lisp-Entry "Project-Templates-Directory" definition #f 355 14 355 41 ("Jazz" "Directory")}
        {Lisp-Entry "File-Templates-Directory" definition #f 358 14 358 38 ("Jazz" "Directory")}
        {Lisp-Entry "add-project" method #f 362 21 362 32 ("get-workbench" "selected-object" "or" "add-project-to")}
        {Lisp-Entry "add-project-to" method #f 366 21 366 35 ("user-message" "car" "activate-project" "collect-projects" "projects" "select-component" "descendants" "'descendants" "process-refresh" "acquire-focus" "update-project-catalog" "designer" "get-project-designer" "save" "dir" "for-each" "recursive?:" "import-pathname" "src-component" "not-null?" "leaves?:" "nodes?:" "get-content" "src-content" "src-directory" "install-project" "project-component" "project-file" "lambda" "with-update-locked" "parse" "load-package" "repository-add-package" "new-file" "package-file" "repository-find-package" "unless" "copy-template" "project-directories" "'project-directories" "format" "project-unit" "'project-unit" "project-title" "'project-title" "'project" "product-directories" "'product-directories" "product-unit" "'product-unit" "product-title" "'product-title" "'product" "'package" "cons" "list" "associations" "destination" "Project-Templates-Directory" "new-directory" "capitalize" "project" "last" "product" "split-identifier" "->string" "map" "package-parts" "string->symbol" "package-name" "repository-library-directory" "tokenise-filename" "Directory" "new" "directory" "let*" "New-Project-Dialog" "get-modal" "package" "repository" "template" "kind" "receive" "Project" "Project-Group" "is?" "or" "when" "get-tree" "tree" "let" "parent")}
        {Lisp-Entry "add-file" method #f 413 21 413 29 ("get-tree" "select-component" "ascendant-project" "import-pathname" "component" "copy-template" "'unit" "'name" "cons" "list" "associations" "parse" "find-pathname-unit" "unit" "destination" "concatenate" "File-Templates-Directory" "new-file" "extract-extension" "extension" "let*" "directory:" "New-File-Dialog" "get-modal" "name" "directory" "template" "kind" "receive" "create-directories" "yes" "'yes" "question" "'question" "type:" "get-list" "format" "message-box" "=" "exists?" "get-current-directory" "Profile" "Directory" "must-exist?:" "default-import-directory" "default-directory" "Project" "Project-Group" "is?" "when" "get-workbench" "selected-object" "or" "parent" "let")}
        {Lisp-Entry "add-group" method #f 432 21 432 30 ("parent:" "get-tree" "add-component-class" "Project" "Project-Group" "is?" "when" "get-workbench" "selected-object" "or" "parent" "let")}
        {Lisp-Entry "install-project" method #f 444 11 444 26 ("get-presentation-property" "user-message" "load-catalog" "get-tree" "reorder-component" "tag-reference:" "designer" "add-child" "get-form" "form" "get-name" "error" "Project" "is-not?" "if" "parent:" "workbench:" "instantiate-file" "project" "ascendant-project" "parent-project" "get-workbench" "workbench" "let" "descendant?" "parent" "file")}
        {Lisp-Entry "MaxFiles-Warning" definition #f 463 14 463 30 ("100")}
        {Lisp-Entry "import-filter?" definition #f 467 15 467 29 ("get-application" "known-extension-frame-class" "get-name" "ci=?" "test:" "member?" "or" "if" "get-include-extensions" "effective-include-extensions" "extensions" "get-extension" "ext" "let" "file" "project")}
        {Lisp-Entry "import-directory" method #f 477 11 477 27 ("parse" "user-message" "descendants" "'descendants" "designer" "process-refresh" "import-pathname" "component" "let" "list" "validate-pathnames" "yes" "'yes" "question" "'question" "type:" "format" "message-box" "eq?" "or" "when" "MaxFiles-Warning" "max-count:" "import-filter?" "file" "filter:" "count-files" "count" "directory:" "choose-directory" "lambda" "with-import-directory" "directory" "ascendant-project" "project" "selected-object" "parent" "let*" "current-directory?")}
        {Lisp-Entry "import-files" method #f 492 11 492 23 ("import-pathnames" "directory:" "multiple-selection?:" "choose-file" "directory" "lambda" "with-import-directory" "files" "ascendant-project" "project" "selected-object" "parent" "let*" "current-directory?")}
        {Lisp-Entry "import-pathnames" method #f 501 21 501 37 ("format-plural" "format-cardinality" "capitalize" "user-message" "length" "count" "get-name" "key:" "nu<?" "sort" "descendants" "'descendants" "designer" "process-refresh" "import-pathname" "component" "let" "pathname" "lambda" "for-each" "validate-pathnames" "when" "parent" "pathnames" "project")}
        {Lisp-Entry "import-pathname" method #f 513 11 513 26 ("import-file" "get-extension" "string-ci=?" "import-filter?" "or" "File" "sort?:" "directories?:" "files?:" "import-pathname" "lambda" "iterate-directory" "when" "directory" "'directory" "set-property" "descendant?:" "not" "design-events?:" "designer" "add-child" "directory:" "Project-Directory" "new" "subgroup" "install-project" "exists?" "if" "new-file" "project-file" "let" "Directory" "typecase" "recursive?" "recursive?:" "descendant?" "parent" "pathname" "project")}
        {Lisp-Entry "import-file" method #f 545 11 545 22 ("add-entry" "set-name" "when" "source" "'source" "set-property" "descendant?:" "not" "design-events?:" "designer" "add-child" "get-workbench" "workbench" "source:" "name:" "new" "project-file" "get-base" "string->symbol" "Jazz-File" "eq?" "if" "name" "get-extension" "extension-model" "model" "let*" "descendant?" "parent" "file")}
        {Lisp-Entry "default-import-directory" definition #f 558 15 558 39 ("anchorize" "when" "dir" "let" "else" "get-directory" "Project-Directory" "Project" "typecase" "lambda" "default" "letrec" "must-exist?" "must-exist?:" "object")}
        {Lisp-Entry "with-import-directory" method #f 573 11 573 32 ("lambda" "with-preserved-current-directory" "exists?" "if" "default-import-directory" "not" "and" "default-directory" "let" "proc" "object" "current-directory?")}
        {Lisp-Entry "extension-model" definition #f 582 15 582 30 ("Project-File" "else" "Sound-File" "Icon-File" "Cursor-File" "Bitmap-File" "C-File" "Java-File" "Jazz-File" "ci=?" "test:" "member?" "cond" "ext")}
        {Lisp-Entry "ascendant-project" method #f 593 21 593 38 ("get-parent" "ascendant-project" "Project" "is?" "if" "component")}
        {Lisp-Entry "synchronize-content" method #f 604 11 604 30 ("content:" "confirmation" "'confirmation" "type:" "Synchronize-Box" "class:" "reverse" "bind" "info" "for-each" "children:" "add-row" "Image-Resource" "image:" "join" "title:" "Tree-Node" "c0" "add" "'tree" "locate" "tree" "200" "500" "Dimension" "size:" "Synchronize-Border" "border" "message-box" "null?" "get-output" "out-of-synch" "case-insensitive?:" "right-key:" "left-key:" "key:" "ci<?" "sort" "directory?" "when" ":same" ":right" "list" "put" ":left" "case" "cons" "right" "left" "key" "what" "merge-ordered" "get-content" "content" "get-children" "children" "path" "fold" "letrec" "pathname" "pathname-name" "get-name" "->string" "component" "lambda" "component-name" "List-Factory" "new" "fact" "let" "error" "exists?" "not" "if" "must-exist?:" "default-import-directory" "directory" "ascendant-project" "project" "selected-object" "object" "let*")}
        {Lisp-Entry "validate-pathnames" method #f 657 11 657 29 ("for-each" "get-entry" "jazz-file" "get-base" "string->symbol" "name" "let*" "Jazz-File" "eq?" "get-extension" "extension-model" "model" "let" "import-filter?" "when" "File" "recursive?:" "sort?:" "directories?:" "files?:" "iterate-directory" "Directory" "typecase" "pathname" "iterate" "get-workbench" "workbench" "letrec" "report" "lambda" "validate" "pathnames" "project")}
        {Lisp-Entry "validate" method #f 682 11 682 19 ("message-box" "when" "0" "subseq" "get-presentation-property" "get-name" ":hyperlink" ":bulleted" "list" "highlight-document-component" "close-modal-dialog" "action" "get-project" "project" "map" ",header" "text" "format-is/are" "format-y/ies" "format-plural" "format" "header" ">" "too-many?" "10" "max-displayed" "length" "count" "let*" "null?" "if" "get-output" "put" "jazz-file" "lambda" "List-Factory" "new" "already-defined" "get-workbench" "workbench" "let" "iterate")}
        {Lisp-Entry "activate-selection" method #f 726 18 726 36 ("selected-object" "activate-object")}
        {Lisp-Entry "activate-object" method #f 730 11 730 26 ("bell" "concrete-descendant" "let" "activate-project" "if" "include-self?:" "continuation-return" "concrete?" "Project" "is?" "and" "when" "level" "descendant" "for-each-descendant" "return" "lambda" "continuation-capture" "find-concrete-descendant" "define" "object")}
        {Lisp-Entry "activate-project" method #f 752 11 752 27 ("update-project-actions" "get-application" "appl" "highlight-component" "ensure-expanded" "visible?:" "user-data-row" "row" "set-active-project" "unhighlight-component" "when" "get-tree" "tree" "let" "get-active-project" "eq?" "unless" "project")}
        {Lisp-Entry "update-catalog" method #f 772 11 772 25 ("selected-objects" "objects" "let" "lambda" ":wait" "with-cursor" "get-children" "for-each" "Project-Group" "update-project-catalog" "Project" "typecase" "object" "update" "define")}
        {Lisp-Entry "update-project-catalog" method #f 786 11 786 33 ("update" "report?:" "activate" "lambda" "post-catalog" "require-catalog" "catalog" "let" "project")}
        {Lisp-Entry "test-current" method #f 799 18 799 30 ("project-test" "current-project" "project" "let")}
        {Lisp-Entry "run-current" method #f 809 18 809 29 ("run-project" "current-project" "project" "let")}
        {Lisp-Entry "run-selection" method #f 814 18 814 31 ()}
        {Lisp-Entry "run-project" method #f 818 11 818 22 ("get-application" "run-project" "project")}
        {Lisp-Entry "debug-current" method #f 827 18 827 31 ("current-project" "debug-project" "executable" "executable:")}
        {Lisp-Entry "debug-selection" method #f 831 18 831 33 ("debug-project" "current-project" "project" "let")}
        {Lisp-Entry "debug-project" method #f 836 11 836 24 ("debugger-interactive?:" "get-application" "debug-project" "executable" "executable:" "project")}
        {Lisp-Entry "launch-selection" method #f 845 18 845 34 ("selected-components" "edit-document" "get-extension" "ext" "get-effective-source" "file" "let*" "Project-File" "debug-project" "Project" "typecase" "component" "lambda" "for-each" "get-tree" "tree" "get-application" "appl" "let")}
        {Lisp-Entry "on-build-current" method #f 864 11 864 27 ("build-project" "bell" "not" "if" "current-project" "project" "let" "evt")}
        {Lisp-Entry "build-current" method #f 871 18 871 31 ("build-project" "current-project" "project" "let")}
        {Lisp-Entry "build-project" method #f 876 11 876 24 ("project-build" "project")}
        {Lisp-Entry "compile-current" method #f 885 18 885 33 ("compile-moniker" "get-controller" "get-moniker" "moniker" "save" "get-modified?" "Document" "is?" "and" "when" "current-document" "guest" "let")}
        {Lisp-Entry "compile-moniker" method #f 894 18 894 33 ("compile-file" "error" "not" "if" "find-source" "project-file" "get-workbench" "workbench" "let*" "moniker")}
        {Lisp-Entry "compile-file" method #f 902 11 902 23 ("show-console?:" "->string" "list" "arguments:" "launch-executable" "get-project" "project-kernel" "kernel" "bell" "not" "if" "parse" "find-pathname-unit" "name" "let" "project-file" "moniker")}
        {Lisp-Entry "preprocess-current" method #f 915 18 915 36 ("error" "not" "if" "find-source" "get-workbench" "workbench" "get-controller" "get-moniker" "let*" "save" "get-modified?" "Document" "is?" "and" "when" "current-document" "guest" "cpu-duration" "force?:" "preprocess" "Output-Log" "select-docked" "select-results" "clear-results" "Timer" "new" "timer" "get-output-log" "output" "user-message" "prepare-directories" "prepare-maps" "get-project" "project" "thread" "lambda" "proc" "let" "file" "moniker" "preprocess-file" "define")}
        {Lisp-Entry "clean-current" method #f 949 18 949 31 ("clean-project" "current-project" "project" "let")}
        {Lisp-Entry "clean-project" method #f 954 11 954 24 ("bell" "concrete?" "if" "project")}
        {Lisp-Entry "on-distribute-current" method #f 966 11 966 32 ("distribute-project" "bell" "not" "if" "selected-project" "project" "let" "evt")}
        {Lisp-Entry "distribute-current" method #f 973 18 973 36 ("distribute-project" "current-project" "project" "let")}
        {Lisp-Entry "distribute-selection" method #f 978 11 978 31 ("selected-project" "distribute-project")}
        {Lisp-Entry "distribute-project" method #f 982 11 982 29 ("focus-host" "get-guest" "compare-trees" "lambda" ":wait" "with-cursor" "host-visible?:" "ignored-extensions:" "ignored-leaves:" "ignored-nodes:" "left-content:" "right-moniker:" "left-moniker:" "Compare-Directories" "new-frame" "frame" "extensions" "files" "list" "ignored-dirs" "project-distribution-list" "content" "project-distribution-directory" "right" "project-distribution" "left" "backup" "'backup" "mode" "let*" "project")}
        {Lisp-Entry "selected-object" method #f 1002 11 1002 26 ("selected-component" "get-tree" "tree" "let")}
        {Lisp-Entry "selected-objects" method #f 1007 11 1007 27 ("selected-components" "get-tree" "tree" "let")}
        {Lisp-Entry "selected-project" method #f 1012 11 1012 27 ("Project" "is?" "when" "selected-object" "object" "let")}
        {Lisp-Entry "selected-concrete-project" method #f 1018 11 1018 36 ("concrete?" "Project" "is?" "and" "when" "selected-object" "object" "let")}
        {Lisp-Entry "current-project" method #f 1025 11 1025 26 ("error" "get-active-project" "not" "if")}
        {Lisp-Entry "new-menu" method #f 1036 18 1036 26 ("else" "concrete?" "if" "Project" "Project-Group" "Workbench" "typecase" "selected-object" "import-directory" "'import-directory" "import-files" "'import-files" "install-project" "'install-project" "add-file" "'add-file" "add-project" "'add-project" "1" "get-selection" "length" ">" "when" "locate-component" "item" "name" "hide-item" "Element-Menu" "new-element-menu" "Project-Menu" "new-project-menu" "Concrete-Project-Menu" "new-concrete-project-menu" "get-catalog?" "update-catalog" "'update-catalog" "locate" "set-visible?" "Workbench-Menu" "new-workbench-menu" "layout-menu" "cleanup-separators" "update-group/project-menu" "selected-components" "update-component-menu" "client:" "Group-Menu" "new" "menu" "object" "new-group-menu" "define" "get-tree" "tree" "let")}
        {Lisp-Entry "describe-state" method #f 1109 11 1109 25 ("resource" "get-resources-table" "category" "get-categories-table" "name" "get-projects-table" "table-keys/values" "when" "0" "subseq" "if" "project" "bind" "for-each" "5" "length" ">" "more?" "car" "class-of" "category-identifier" "pair" "lambda" "key:" "designer" "get-project-designers" "<" "sort" "pairs" "let*" "get-active-project" ":console" "format" "get-workbench" "workbench" "let" "pos")}}
      {Lisp-Entry "Workbench-Manager-Controller" class #f 1155 7 1155 35 ("Component-Editor-Controller")
        {Lisp-Entry "document-status" method #f 1158 20 1158 35 ()}}
      {Lisp-Entry "Synchronize-Border" class #f 1167 7 1167 25 ("tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "tool" "style:" "Outline-Border" "name:" "Color" "border-color:" "solid" "border-type:" "Border-View")}
      {Lisp-Entry "Group-Menu" class #f 1184 7 1184 17 ("delete-selection" "set-current-directory" "update-catalog" "synchronize-content" "import-directory" "cut" "import-files" "workbench-manager" "Action" "action-handler:" "Image-Resource" "icon:" "add-item" "before:" "title:" "add-file" "name:" "Component-Menu")}
      {Lisp-Entry "Project-Menu" class #f 1207 7 1207 19 ("delete-selection" "update-catalog" "synchronize-content" "import-directory" "cut" "import-files" "add-file" "workbench-manager" "Action" "action-handler:" "Image-Resource" "icon:" "add-item" "before:" "title:" "edit" "name:" "Component-Menu")}
      {Lisp-Entry "Concrete-Project-Menu" class #f 1230 7 1230 28 ("workbench-manager" "Action" "action-handler:" "default?:" "cut" "before:" "title:" "activate" "name:" "Project-Menu")}
      {Lisp-Entry "Workbench-Menu" class #f 1244 7 1244 21 ("visible?:" "synchronize-content" "Image-Resource" "icon:" "import-files" "install-project" "workbench-manager" "Action" "action-handler:" "add-file" "before:" "title:" "add-project" "name:" "Project-Menu")}
      {Lisp-Entry "Element-Menu" class #f 1260 7 1260 19 ("delete-selection" "launch" "workbench-manager" "Action" "action-handler:" "Image-Resource" "icon:" "default?:" "cut" "before:" "title:" "edit" "name:" "Component-Menu")}}})
"Workbench-Manager-Actions"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "Workbench-Manager-Actions.jazz"} 1289842952
    {Lisp-Entry "jazz.ide.builder.workbench.Workbench-Manager-Actions" module #f 37 18 37 70 ("jazz")
      {Lisp-Entry "Workbench-Manager-Actions" class #f 45 7 45 32 ("on-launch" "launch" "on-add-dependency" "add-dependency" "on-activate" "activate" "on-update-catalog" "update-catalog" "on-edit" "edit" "on-set-current-directory" "set-current-directory" "on-synchronize-content" "synchronize-content" "on-import-directory" "import-directory" "on-import-files" "import-files" "on-install-project" "install-project" "on-add-group" "add-group" "on-add-file" "add-file" ":control" "Shortcut" "shortcut:" "on-add-project" ":workbench-manager" "Event-Handler" "action-handler:" "add-project" "name:" "Actions")}}})
"Workbench-Preferences"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "preference" "Workbench-Preferences.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.preference.Workbench-Preferences" module #f 37 18 37 67 ("jazz")
      {Lisp-Entry "Workbench-Preferences" class #f 44 7 44 28 ("title:" "initialize" "Preferences")
        {Lisp-Entry "active-project" property #f 47 12 47 26 ()}
        {Lisp-Entry "get-active-project" accessor #f 47 51 47 59 ()}
        {Lisp-Entry "set-active-project" accessor #f 47 51 47 59 ()}
        {Lisp-Entry "get-class-descriptor" method #f 59 25 59 45 ("Workbench-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 68 11 68 17 ()
        {Lisp-Entry "Workbench-Preferences-Descriptor" class #f 74 7 74 39 ("active-project" "name:" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "Preferences-Descriptor")}}}})
"Workbench-Tree"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "Workbench-Tree.jazz"} 1289506008
    {Lisp-Entry "jazz.ide.builder.workbench.Workbench-Tree" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Workbench-Tree" class #f 49 7 49 21 ("reorderable?:" "editable?:" "draggable?:" ":images" "portfolio:" "Descendants-Tree")
        {Lisp-Entry "focus-actions" method #f 56 20 56 33 ("nextmethod" "workbench-tree" "'workbench-tree" "find-actions" "cons")}
        {Lisp-Entry "on-add-project" method #f 61 11 61 25 ("get-manager" "add-project" "evt")}
        {Lisp-Entry "on-add-file" method #f 65 11 65 22 ("get-manager" "add-file" "evt")}
        {Lisp-Entry "on-add-group" method #f 69 11 69 23 ("get-manager" "add-group" "evt")}
        {Lisp-Entry "get-manager" method #f 73 11 73 22 ("get-host" "get-guest")}
        {Lisp-Entry "context-menu" method #f 77 20 77 32 ("track-popup-menu" "when" "new-menu" "menu" "lambda" "with-context-click" "get-manager" "manager" "let" "pos")}
        {Lisp-Entry "can-copy?" method #f 89 20 89 29 ()}
        {Lisp-Entry "can-paste-properties?" method #f 93 20 93 41 ()}
        {Lisp-Entry "get-draggable?" method #f 97 20 97 34 ()}
        {Lisp-Entry "confirm-close" method #f 102 20 102 33 ("confirm-action" "components")}
        {Lisp-Entry "update-selection" method #f 106 20 106 36 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" method #f 110 20 110 29 ("collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "if" "level" "update?" "component")}
        {Lisp-Entry "double-click" method #f 116 20 116 32 ("launch-selection" "Group" "or" "unless" "nextmethod" "activate-selection" "concrete?" "Project" "is?" "and" "if" "selected-component" "component" "get-manager" "manager" "let" "pos")}
        {Lisp-Entry "return-press" method #f 127 20 127 32 ("launch-selection" "Group" "unless" "activate-selection" "Project" "is?" "if" "selected-component" "component" "get-manager" "manager" "let" "key")}
        {Lisp-Entry "receive-files" method #f 136 20 136 33 ("bell" "ascendant-project" "import-pathnames" "Project-Group" "Project" "is?" "or" "get-manager" "manager" "get-line" "get-row" "get-user-data" "get-workbench" "not" "if" "data" "view->tree" "cell" "let*" "pathnames" "pos")}
        {Lisp-Entry "addable-root-classes" method #f 147 11 147 31 ("Module" "Project" "Group" "list")}}}})
"Workbench-Tree-Actions"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "Workbench-Tree-Actions.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder.workbench.Workbench-Tree-Actions" module #f 37 18 37 67 ("jazz")
      {Lisp-Entry "Workbench-Tree-Actions" class #f 45 7 45 29 ("on-add-group" "add-group" "on-add-file" "add-file" ":control" "Shortcut" "shortcut:" "on-add-project" ":focus" "Event-Handler" "action-handler:" "add-project" "name:" "Actions")}}})
"_builder"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "_builder.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.builder" module #f 37 8 37 24 ("jazz")
      {Lisp-Entry "find-kernel" definition #f 48 20 48 31 ("kernel-platform" "executable-extension" "add-extension" "concatenate" "tokenise-filename" "File" "new" "kernel-source" "destination-directory" "dir" "let" "destination")}
      {Lisp-Entry "require-kernel" definition #f 53 20 53 34 ("error" "exists?" "if" "find-kernel" "kernel" "let" "destination")}
      {Lisp-Entry "find-actual-kernel" definition #f 60 20 60 38 ("tokenise-filename" "File" "new" "kernel-platform" "executable-extension" "add-extension" "kernel-install" "concatenate" "filename" "let")}
      {Lisp-Entry "require-actual-kernel" definition #f 65 20 65 41 ("error" "exists?" "if" "find-actual-kernel" "kernel" "let")}
      {Lisp-Entry "launch-executable" definition #f 72 20 72 37 ("show-console:" "stderr-redirection:" "stdout-redirection:" "stdin-redirection:" "get-parent" "parse" "path:" "list" "open-process" "debug" "append" "arguments-arg" "or" "runtime-arg" "let*" "wait?" "wait?:" "show-console?" "show-console?:" "arguments" "arguments:" "runtime-arguments" "runtime-arguments:" "directory" "directory:" "executable")}}})
"_ide"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "_ide.jazz"} 1288732033
    {Lisp-Entry "jazz.ide" module #f 37 8 37 16 ("jazz")}})
"_login"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "login" "_login.jazz"} 1288732033
    {Lisp-Entry "jazz.ide.login" module #f 37 8 37 22 ("jazz")
      {Lisp-Entry "choose-login" definition #f 45 20 45 32 ("Login-Dialog" "get-modal" "Login-Bindings" "new" "set-bindings" "unless" "begin" "unwind-protect" "get-bindings" "actual" "let" "invite" "invite:" "appl" "appl:")}}})
"_workbench"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "builder" "workbench" "_workbench.jazz"} 1289506008
    {Lisp-Entry "jazz.ide.builder.workbench" module #f 37 8 37 34 ("jazz")
      {Lisp-Entry "*active-repositories*" definition #f 49 12 49 33 ()}
      {Lisp-Entry "get-active-repositories" definition #f 53 13 53 36 ("*active-repositories*")}
      {Lisp-Entry "set-active-repositories" definition #f 57 13 57 36 ("*active-repositories*" "set!" "repositories")}
      {Lisp-Entry "*active-workbench*" definition #f 66 12 66 30 ()}
      {Lisp-Entry "get-workbench" definition #f 70 20 70 33 ("*active-workbench*")}
      {Lisp-Entry "set-workbench" definition #f 74 20 74 33 ("*active-workbench*" "set!" "workbench")}
      {Lisp-Entry "*active-project*" definition #f 83 12 83 28 ()}
      {Lisp-Entry "get-active-project" definition #f 87 20 87 38 ("*active-project*")}
      {Lisp-Entry "set-active-project" definition #f 91 20 91 38 ("*active-project*" "set!" "project")}
      {Lisp-Entry "collect-projects" definition #f 95 20 95 36 ("queue-list" "enqueue" "concrete?" "Project" "is?" "and" "when" "level" "file" "lambda" "for-each-descendant" "new-queue" "projects" "let" "project")}
      {Lisp-Entry "build-preferences" definition #f 110 13 110 30 ("build" "'build" "get-preferences")}}})
"autoload"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "autoload.jazz"} 1289506007
    {Lisp-Entry "jazz.ide.autoload" module #f 37 18 37 35 ("jazz")}})
"connections"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "data" "connections.jazz"} 1290004787
    {Lisp-Entry "jazz.ide.data.connections" module #f 37 8 37 33 ("jazz")}})
"favorites"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "data" "favorites.jazz"} 1290004490
    {Lisp-Entry "jazz.ide.data.favorites" module #f 37 8 37 31 ("jazz")}})
"pagesetup"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "data" "pagesetup.jazz"} 1290004804
    {Lisp-Entry "jazz.ide.data.pagesetup" module #f 37 8 37 31 ("jazz")}})
"project"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "data" "project.jazz"} 1290002713
    {Lisp-Entry "jazz.ide.data.project" module #f 37 8 37 29 ("jazz")}})
"servers"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "data" "servers.jazz"} 1290004511
    {Lisp-Entry "jazz.ide.data.servers" module #f 37 8 37 29 ("jazz")}})
"skins"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "data" "skins.jazz"} 1290004847
    {Lisp-Entry "jazz.ide.data.skins" module #f 37 8 37 27 ("jazz")}})
"toolbox"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "data" "toolbox.jazz"} 1290004860
    {Lisp-Entry "jazz.ide.data.toolbox" module #f 37 8 37 29 ("jazz")}})
"workbench"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "data" "workbench.jazz"} 1290004872
    {Lisp-Entry "jazz.ide.data.workbench" module #f 37 8 37 31 ("jazz")}})
"workspaces"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "data" "workspaces.jazz"} 1290011013
    {Lisp-Entry "jazz.ide.data.workspaces" module #f 37 8 37 32 ("jazz")}})
