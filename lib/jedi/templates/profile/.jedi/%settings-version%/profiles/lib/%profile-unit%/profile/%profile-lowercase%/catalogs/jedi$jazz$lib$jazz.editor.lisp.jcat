"Lisp-Console-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "text" "Lisp-Console-Manager.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.editor.lisp.text.Lisp-Console-Manager" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.console" "jazz.editor.lisp")}
      {Lisp-Entry "Lisp-Console-Manager" class #f 44 7 44 27 ("Console-Manager")
        {Lisp-Entry "external-name" method #f 47 25 47 38 ("lisp-console-manager" "rest")}}}})
"Lisp-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "catalog" "Lisp-Entry.jazz"} 1299090958 jazz
    {Lisp-Entry "jazz.editor.lisp.catalog.Lisp-Entry" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.platform" "jazz.library" "jazz.catalog")}
      {Lisp-Entry "Lisp-Entry" class #f 45 7 45 17 ("Indexed-Entry")
        {Lisp-Entry "kind" slot #f 48 8 48 12 ()}
        {Lisp-Entry "get-kind" accessor #f 48 25 48 33 ()}
        {Lisp-Entry "signature" slot #f 49 8 49 17 ()}
        {Lisp-Entry "get-signature" accessor #f 49 25 49 33 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("signature~self" "self" "kind~self" "set!" "nextmethod" "references" "definitions" "end-column" "end-line" "column" "line" "signature" "kind" "name")}
        {Lisp-Entry "print-catalog" method #f 58 20 58 33 ("print-definitions" "references" "end-column" "end-line" "column" "line" "signature" "kind" "name" "self" "class-of" "category-name" "2" "*" "format" "output" "level")}
        {Lisp-Entry "get-image" method #f 68 20 68 29 ("Image-Resource")}
        {Lisp-Entry "present" method #f 77 20 77 27 ("present-identifier")}
        {Lisp-Entry "present-name" method #f 81 20 81 32 ("else" "string-append" "signature" "string?" "present-noname" "not" "cond" "get-name" "name" "let")}
        {Lisp-Entry "present-identifier" method #f 91 20 91 38 ("compose-name" "present-name" ":string" "format" "signature" "pair?" "present-noname" "not" "if" "get-name" "name" "let")}
        {Lisp-Entry "compose-name" method #f 100 11 100 23 (":string" "format" "present-name" "parent-name" "let" "get-name" "Lisp-Entry" "parent" "is?" "and" "if" "name")}
        {Lisp-Entry "present-noname" method #f 107 20 107 34 ()}
        {Lisp-Entry "->locator" method #f 111 18 111 27 ("self" "string->symbol" ":string" "format" "Lisp-Entry" "is-not?" "if" "get-name" "name" "get-parent" "parent" "let" "entry" "locator-name" "define")}
        {Lisp-Entry "edit-reference" method #f 128 20 128 34 ("center-caret" "ensure-displayed?" "ensure-displayed?:" "set-selection" "car" "first" "null?" "highlight-expression" "ranges" "if" "range" "edit" "apply" "get-guest" "let" "select-previous" "select-next" "or" "bell" "fallback-find" "get-start" "declaration-range" "name" "get-selection" "get-string" "equal?" "when" "text" "find-declaration-range" "define" "rest" "search-set" "target")}
        {Lisp-Entry "edit-textual-reference" method #f 149 20 149 42 ("edit-reference" "apply" "constituent-test:" "whole-words?" "whole-words?:" "make-search-context" "list" "->search-set" "search-set" "reference-searcher" "file-definition" "get-dialect" "get-parser-class" "parser-class" "let" "rest" "constituent-test" "target")}
        {Lisp-Entry "update-indexes" method #f 161 20 161 34 ("definitions" "update-indexes" "definition" "references" "key" "lambda" "for-each" "name" "update-index" "references-index" "definitions-index")}}}})
"Lisp-Explorer"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "text" "Lisp-Explorer.jazz"} 1299006609 jazz
    {Lisp-Entry "jazz.editor.lisp.text.Lisp-Explorer" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.editor.lisp")}
      {Lisp-Entry "proclaim" anonymous #f 45 1 45 9 ("optimizations" "warn")}
      {Lisp-Entry "Lisp-Explorer" class #f 65 7 65 20 ("initialize" "fx+" "Code-Explorer")
        {Lisp-Entry "find-comment-last-row" slot #f 70 8 70 29 ()}
        {Lisp-Entry "find-comment-last-col" slot #f 71 8 71 29 ()}
        {Lisp-Entry "Composites" constant #f 74 12 74 22 ("literal" "reference" "list")}
        {Lisp-Entry "Open-Composites" constant #f 80 12 80 27 ()}
        {Lisp-Entry "Close-Composites" constant #f 86 12 86 28 ()}
        {Lisp-Entry "explore-error" method #f 92 11 92 24 ("message:" "end:" "start:" "Explore-Error" "new" "signal" "text-ending" "text-beginning" "or" "text" "get-moniker" "source" "let" "end" "start" "message")}
        {Lisp-Entry "present-char" method #f 99 11 99 23 ("string" "else" "char-symbol" "memv?" "not" "cond" "c")}
        {Lisp-Entry "current-expr" method #f 108 18 108 30 ("get-marked" "symbol" "kind" "eq?" "backward-expr" "and" "when")}
        {Lisp-Entry "forward-expr" method #f 113 20 113 32 ("forward-simple-expr" "prog1" "while" "get-start" "s" "end" "set-start" "forward-whites" "forward" "1" "eqv?" "and" "memv?" "when" "0" "char-forward" "c" "let" "forward-quotes" "define")}
        {Lisp-Entry "backward-expr" method #f 131 20 131 33 ("name-comment" "get-char" "jazz" "get-syntax" "eq?" "while" "when" "backward-simple-expr" "found" "backward-scheme-char" "2" "backward-delimited-string" "if" "c1" "c0" "start" "set-end" "backward-whites" "else" "1" "eqv?" "and" "backward" "memv?" "cond" "0" "char-backward" "c" "let" "backward-quote" "define")}
        {Lisp-Entry "forward-simple-expr" method #f 160 19 160 38 ("else" "literal" "reference" "list" "forward-composite" "forward-named-comment" "forward-constituent" "text-constituent?" "forward-escaped-symbol" "forward-backslahed-symbol" "forward-string" "string-delimiter?" "forward-sharp" "eqv?" "cond" "when" "0" "char-forward" "c" "let")}
        {Lisp-Entry "backward-simple-expr" method #f 175 19 175 39 ("else" "literal" "reference" "list" "backward-composite" "backward" "backward-constituent" "text-constituent?" "backward-escaped-symbol" "backward-string" "string-delimiter?" "cond" "when" "let" "1" "char-backward" "0" "char-forward" "eqv?" "and" "c" "space-literal?" "define")}
        {Lisp-Entry "forward-all-expr" method #f 193 18 193 34 ("start" "set!" "forward-expr" "while" "end" "copy" "initial-end" "let")}
        {Lisp-Entry "backward-all-expr" method #f 200 18 200 35 ("end" "set!" "backward-expr" "while" "start" "copy" "initial-start" "let")}
        {Lisp-Entry "forward-constituent" method #f 207 20 207 39 ("else" "symbol" "keyword" "and" "if" "kind" "text-constituent?" "not" "or" "set!" "forward" "cond" "c" "iterate" "last" "0" "char-forward" "eqv?" "keyword?" "let")}
        {Lisp-Entry "backward-constituent" method #f 226 20 226 40 ("else" "symbol" "keyword" "if" "kind" "text-constituent?" "not" "or" "set!" "backward" "2" "1" "and" "cond" "c" "iterate" "last" "0" "char-backward" "eqv?" "keyword?" "let")}
        {Lisp-Entry "backward-escaped-symbol" method #f 246 19 246 42 ("else" "symbol" "kind" "set!" "1" "eqv?" "cond" "not" "if" "0" "char-backward" "c" "iterate" "let" "backward")}
        {Lisp-Entry "backward-scheme-char" method #f 265 19 265 39 ("char" "kind" "set!" "backward")}
        {Lisp-Entry "forward-expr-comment" method #f 273 19 273 39 ("expr-comment" "kind" "set!" "forward-expr" "forward")}
        {Lisp-Entry "forward-named-comment" method #f 280 19 280 40 ("named-comment" "kind" "set!" "forward-expr" "forward" "forward-constituent" "jazz" "get-syntax" "neq?" "if")}
        {Lisp-Entry "forward-sharp" method #f 289 19 289 32 ("forward-constituent" "else" "forward-expr-comment" "forward-scheme-char" "forward-named-string" "forward-delimited-string" "eqv?" "boolean" "kind" "set!" "text-constituent?" "not" "or" "memq?" "and" "cond" "1" "c1" "0" "char-forward" "c0" "let" "forward")}
        {Lisp-Entry "forward-backslahed-symbol" method #f 309 19 309 44 ("forward-constituent" "forward")}
        {Lisp-Entry "forward-escaped-symbol" method #f 315 19 315 41 ("else" "symbol" "kind" "set!" "eqv?" "cond" "not" "if" "0" "char-forward" "c" "iterate" "let" "forward")}
        {Lisp-Entry "forward-delimited-string" method #f 334 19 334 43 ("else" "delimited-string" "kind" "set!" "eqv?" "and" "not" "or" "cond" "1" "c1" "0" "char-forward" "c0" "iterate" "let" "forward")}
        {Lisp-Entry "forward-named-string" method #f 351 19 351 39 ("named-string" "continuation-return" "begin" "nu=?" "if" "limit" "<" "while" "0" "1" "+" "Cell" "new" "set-end" "get-col" "end" "get-line" "paragraph-string" "subseq" "name" "let" "return" "lambda" "continuation-capture" "forward")}
        {Lisp-Entry "forward-scheme-char" method #f 367 19 367 38 ("else" "text-constituent?" "cond" "iterate" "char" "kind" "set!" "begin" "alphanumeric?" "not" "if" "0" "char-forward" "c" "let" "forward")}
        {Lisp-Entry "forward-string" method #f 387 19 387 33 ("else" "string" "kind" "set!" "string-delimiter?" "eqv?" "not" "cond" "0" "char-forward" "c" "call-line-hook" "iterate" "let" "forward")}
        {Lisp-Entry "backward-delimited-string" method #f 407 19 407 44 ("else" "delimited-string" "kind" "set!" "eqv?" "and" "not" "or" "cond" "1" "c1" "0" "char-backward" "c0" "iterate" "let" "backward")}
        {Lisp-Entry "backward-string" method #f 425 19 425 34 ("else" "string" "kind" "set!" "string-delimiter?" "1" "eqv?" "not" "cond" "0" "char-backward" "c" "iterate" "let" "backward")}
        {Lisp-Entry "forward-composite" method #f 444 19 444 36 ("kind" "set!" "1" "next-pos" "present-char" "format" "explore-error" "eqv?" "not" "if" "0" "char-forward" "c" "let" "forward-whites" "forward-all-expr" "forward" "end" "set-start" "delimiter" "Object" "knd")}
        {Lisp-Entry "backward-composite" method #f 457 19 457 37 ("kind" "end" "set!" "1" "previous-pos" "present-char" "format" "explore-error" "eqv?" "not" "if" "0" "char-backward" "c" "backward-whites" "backward-all-expr" "backward" "start" "copy" "initial-start" "let" "delimiter" "Object" "knd")}
        {Lisp-Entry "enter-list" method #f 471 18 471 28 ("forward" "0" "char-forward" "eqv?" "when" "forward-whites")}
        {Lisp-Entry "exit-list" method #f 478 18 478 27 ("forward" "0" "char-forward" "eqv?" "when" "forward-whites" "forward-all-expr")}
        {Lisp-Entry "enter-composite" method #f 486 18 486 33 ("else" "literal" "reference" "list" "quasiquote" "quote" "unquote" "unquote-splicing" "kind" "set!" "forward" "1" "eqv?" "and" "cond" "0" "char-forward" "c0" "forward-whites" "get-start" "set-end" "get-end" "end" "let")}
        {Lisp-Entry "exit-composite" method #f 525 18 525 32 ("forward" "Close-Composites" "0" "char-forward" "memv?" "when" "forward-whites" "forward-all-expr")}
        {Lisp-Entry "skip-forward" method #f 533 18 533 30 ("get-marked" "=" "forward-expr" "and" "string" "name")}
        {Lisp-Entry "skip-backward" method #f 537 18 537 31 ("get-marked" "=" "backward-expr" "and" "string" "name")}
        {Lisp-Entry "forward-modifiers" method #f 541 18 541 35 ("reverse!" "cons" "memq?" "find-marked-symbol" "set!" "kind" "eq?" "forward-expr" "and" "when" "iterate" "result" "symbol" "end" "copy" "old" "let" "modifiers")}
        {Lisp-Entry "forward-comments" method #f 556 11 556 27 ("next-paragraph")}
        {Lisp-Entry "backward-comments" method #f 560 11 560 28 ()}
        {Lisp-Entry "forward-whites" method #f 564 18 564 32 ("call-line-hook" "forward-comments" "case" "forward" "whitespace?" "if" "when" "0" "char-forward" "c" "iterate" "let" "void")}
        {Lisp-Entry "backward-whites" method #f 578 18 578 33 ("backward-lisp-comment" "backward" "whitespace?" "and" "when" "0" "char-backward" "c" "iterate" "let" "void")}
        {Lisp-Entry "backward-lisp-comment" method #f 588 11 588 32 ("set-col" "set!" "find-comment-last-col" "find-comment-last-row" "if" "col" "start-col" "start" "start-line" "else" "forward-scheme-char" "forward-delimited-string" "forward" "1" "c1" "forward-string" "eqv?" "cond" "char-forward" "c0" "get-col" "<" "get-line" "=" "and" "when" "iterate" "0" "Cell" "new" "set-end" "result" "end" "copy" "preserved-end" "paragraph-length" "max-col" "let" "fx+" "fx" "line" "find-lisp-comment" "define" "bool")}
        {Lisp-Entry "outer-expr" method #f 662 20 662 30 ("forward-all-expr" "end-char" "end-pos" "present-char" "format" "explore-error" "values" "backward-all-expr" "e" "start-char" "start-pos" "receive" "while" "naturals" "n" "lambda" "for-each" ">" "quote-count" "composites-match?" "prepend-expr-comment" "unless" "prepend-literal" "backward" "backward-whitespaces" "Cell" "prepend-quoting" "nxt-open-composite?" "prv-close-composite?" "outer-composite" "backward-expr" "next-pos" "set-end" "previous-pos" "nxt-string?" "prv-string?" "outer-string" "forward-constituent" "backward-constituent" "nxt-constituent?" "text-constituent?" "prv-constituent?" "equal?" "forward-expr" "get-marked" "marked" "if" "backward-until" "copy" "s" "backward-to-sharp" "outer-literal" "forward-until" "get-char" "when" "outer-constituent" "advance-literal" "else" "cond" "1" "+" "forward-whitespaces" "forward" "skip-quoting" "count" "iterate" "advance-quoting" "member?" "str" "homogeneous?" "string-delimiter?" "close-composite?" "open-composite?" "whitespace?" "not" "or" "terminal?" "memv?" "c" "quote?" "eqv?" "and" "at" "comma" "unquote-splicing?" "set!" "set-start" "reset" "define" "next-char" "nxt" "0" "previous-char" "prv" "end" "start" "=" "empty?" "let" "explore-whitespace?" "explore-whitespace?:" "atomic?" "atomic?:")}
        {Lisp-Entry "form-expr" method #f 842 18 842 27 ("set-start" "find-marked-symbol" "symbol" "kind" "eq?" "forward-expr" "enter-list" "0" "next-char" "eqv?" "when" "prog1" "set-end" "end" "e" "start" "copy" "s" "let")}
        {Lisp-Entry "form-name" method #f 856 18 856 27 ("symbol?" "expr" "set!" "memq?" "not-null?" "while" "get-modifiers" "modifiers" "cdr" "scan" "get-anonymous?" "if" "get-declaration?" "and" "car" "get-expression-syntax" "expression-syntax" "let" "pair?" "when" "form")}
        {Lisp-Entry "namespace-expr?" method #f 874 26 874 41 ("form-expr" "namespace-name?")}
        {Lisp-Entry "declaration-expr?" method #f 878 26 878 43 ("form-expr" "declaration-name?")}
        {Lisp-Entry "namespace-name?" method #f 882 26 882 41 ("expression-syntax-namespace?" "name")}
        {Lisp-Entry "declaration-name?" method #f 886 26 886 43 ("expression-syntax-declaration?" "name")}
        {Lisp-Entry "inner-name?" method #f 890 26 890 37 ("expression-syntax-inner?" "name")}
        {Lisp-Entry "declaration-modifiers/name" method #f 894 18 894 44 ("set-start" "values" "prog1" "begin" "0" "char-forward" "eqv?" "if" "forward-whites" "specific" "generic" "memq?" "cond" "expression-syntax-modifiers" "forward-modifiers" "modifiers" "find-marked-symbol" "decl" "let*" "forward-expr" "enter-list" "set-end" "end" "e" "start" "copy" "s" "let")}
        {Lisp-Entry "declaration-name" method #f 915 11 915 27 ("declaration-modifiers/name" "name" "modifiers" "receive")}
        {Lisp-Entry "for-each-comment" method #f 925 18 925 34 ("end:" "start:" "comment-string" "text-search-all" "subseq" "string=?" "cardinality" "fx" "cast" "+" "<" "and" "end" "paragraph-end" "set-end" "set!" "string-style?" "Named-Comment" "Expr-Comment" "inherits?" "unless" "start" "get-style-at" "style" "paragraph-string" "string" "/=" "not" "or" "when" "get-col" "col" "get-line" "line" "let" "Cell" "pos" "lambda" "for-each" "string-length" "title-comment-size" "text" "get-syntax" "title-comment-string" "title-comment" "previous-line" "let*" "end-line" "end-line:" "start-line" "start-line:" "procedure" "proc")}
        {Lisp-Entry "walk-declarations" method #f 949 26 949 43 ("walk-declaration" "while" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-declaration" method #f 954 26 954 42 ("else" "end" "start" "code" "walk-expression" "walk-named-declaration" "get-expression-syntax" "form" "find-marked-symbol" "let" "symbol" "kind" "eq?" "if" "forward-expr" "exit-list" "walk-expressions" "enter-list" "cond" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-named-declaration" method #f 975 29 975 51 ("find-named-walker" "proc-walk" "self" "procedure?" "if" "get-walk" "and" "walk" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "find-named-walker" method #f 983 29 983 46 ("walk-unknown" "error" "if" "name")}
        {Lisp-Entry "walk-parameters" method #f 989 21 989 36 ("code" "walk-expression" "forward-expr" "when" "iterate" "let" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-unknown" method #f 996 21 996 33 ("walk-expressions" "code" "walk-expression" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "iterate-expressions" method #f 1007 18 1007 37 ("for-each-expressions" "recursive?" "recursive?:" "code" "mode" "mode:" "proc")}
        {Lisp-Entry "iterate-expression" method #f 1011 18 1011 36 ("for-each-expression" "recursive?" "recursive?:" "code" "mode" "mode:" "proc")}
        {Lisp-Entry "for-each-expressions" method #f 1015 11 1015 31 ("for-each-expression" "forward-expr" "while" "mode" "proc")}
        {Lisp-Entry "for-each-expression" method #f 1020 11 1020 30 ("code" "else" "exit-composite" "literal" "composite-kind?" "exit-list" "list" "cond" "enter-composite" "for-each-expressions" "for-each-expression" "quotation" "0" "char-forward" "eqv?" "intern-marked-symbol" "neq?" "or" "find-marked-symbol" "memq?" "symbol" "eq?" "and" "if" "let" "kind" "when" "forward-expr" "for-each-forms" "intrinsic" "external" "jml" "form" "quasiquote" "quote" "Quotation-Forms" "define" "mode" "proc")}
        {Lisp-Entry "walk-expressions" method #f 1051 18 1051 34 ("walk-expression" "forward-expr" "exit-list" "walk-expressions" "enter-list" "cond" "iterate" "let" "first?" "code" "mode" "expression" "context")}
        {Lisp-Entry "walk-expression" method #f 1062 11 1062 26 ("walk-expression" "forward-expr" "code" "quasiquote" "quote" "memq?" "let" "else" "exit-composite" "walk-expressions" "composite-kind?" "cond" "enter-composite" "when" "specifier" "tag" "if" "1" "end" "-" "start" "get-char" "eqv?" "symbol" "kind" "eq?" "and" "specifier-marked?" "define" "first?" "mode" "expression" "context")}
        {Lisp-Entry "constant?" method #f 1089 18 1089 27 ("keyword" "tag" "specifier" "symbol" "char" "boolean" "number" "kind" "memq?")}
        {Lisp-Entry "get-constant" method #f 1093 18 1093 30 ("get-marked" "read-string-element" "lambda" "with-jazz-readtable" "else" "intern-marked-symbol" "symbol" "kind" "case")}
        {Lisp-Entry "search-expressions" method #f 1133 18 1133 36 ("mode:" "get-range" "list" "continuation-return" "match?" "start" ">=" "and" "when" "bind" "info" "for-each" "iterate-expressions" "return" "continuation-capture" "get-contexts" "get-target" "pair?" "if" "cons" "read-string-element" "target" "target-string" "lambda" "map" "all" "let" "ignore-case?" "whole-words?" "position" "search-context" "mode")}
        {Lisp-Entry "match?" method #f 1153 11 1153 17 ("get-marked" "read-string-element" "equal?" "not" "or" "get-kind" "expl-kind" "receive" "string->symbol" "empty-string?" "mode" "kind" "name" "bind-optionals" "separator" "separator:" "1" "subseq" "parse-strings" "elements" "let" "variable" "parse-pattern-variable" "0" "symbol->string" "element" "eqv?" "pattern-variable?" "cadr" "quotation" "values" "quote" "car" "eq?" "pair?" "and" "if" "parse-expression" "unimplemented" "else" "symbol" "symbol?" "string" "string?" "char" "char?" "boolean" "boolean?" "number" "number?" "cond" "expression" "expression-kind" "define" "target" "expl-mode")}
        {Lisp-Entry "open-composite?" method #f 1195 11 1195 26 ("Open-Composites" "memv?" "char")}
        {Lisp-Entry "close-composite?" method #f 1199 11 1199 27 ("Close-Composites" "memv?" "char")}
        {Lisp-Entry "composite-kind?" method #f 1203 11 1203 26 ("literal" "reference" "list" "memq?" "kind")}}}})
"Lisp-File-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "catalog" "Lisp-File-Entry.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.editor.lisp.catalog.Lisp-File-Entry" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.catalog")}
      {Lisp-Entry "Lisp-File-Entry" class #f 43 7 43 22 ("File-Entry")}}})
"Lisp-Parser"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "parser" "Lisp-Parser.jazz"} 1299006608 jazz
    {Lisp-Entry "jazz.editor.lisp.parser.Lisp-Parser" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.jml" "jazz.editor.lisp" "jazz.catalog")}
      {Lisp-Entry "Lisp-Parser" class #f 45 7 45 18 ("File-Parser")
        {Lisp-Entry "reference-searcher" method #f 48 25 48 43 ("cardinality" "0" "cons" "tag->name" "equal?" "tag-string?" "and" "or" "if" "reversed?" "start" "seq" "lambda" "make-searcher" "constituent-test" "target")}
        {Lisp-Entry "parse" method #f 58 20 58 25 ("parse-definitions" "catalog" "Lisp-File-Entry" "new" "dialect" "time" "file")}
        {Lisp-Entry "parse-definitions" method #f 62 11 62 28 ("get-output" "add-reference" "ref" "add-references" "string=?" "0" "string-ref" "eqv?" "empty-string?" "unless" "get-marked" "keyword" "tag" "specifier" "memq?" "mode" "add-definition" "set-parent" "put" "not" "get-col" "get-line" "Lisp-Entry" "entry" "pair?" "else" "append" "cond" "or" "when" "and" "signature-mangle" "name-mangle" "mangle-declaration" "cdr" "car" "string-append" "cons" "if" "expression-syntax-signature-mangler" "mangler" "signature" "mangle-signature" "expression-syntax-name-mangler" "name" "mangle-name" "documented?" "marked" "symbol" "kind" "parent" "lambda" "walk-declarations" "List-Factory" "fact" "end" "end:" "start" "start:" "explorer-class" "expl" "text-beginning" "beginning" "let*" "set-moniker" "colorize?" "colorize?:" "char-encoding" "char-encoding:" "text-view-class" "new" "text" "let" "Lisp-Period" "define" "file")}
        {Lisp-Entry "text-view-class" method #f 122 29 122 44 ()}
        {Lisp-Entry "explorer-class" method #f 126 29 126 43 ("file")}
        {Lisp-Entry "add-references" method #f 130 29 130 43 ("else" "tag->name" "tag-string?" "cond" "adder" "string" "name")}}}})
"Lisp-Syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "text" "Lisp-Syntax.jazz"} 1298999699 jazz
    {Lisp-Entry "jazz.editor.lisp.text.Lisp-Syntax" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.editor.lisp")}
      {Lisp-Entry "Lisp-Syntax" class #f 44 7 44 18 ("Code-Syntax")
        {Lisp-Entry "parser-class" method #f 52 20 52 32 ("Lisp-Parser")}
        {Lisp-Entry "translate-lisp-key" method #f 63 11 63 29 ("else" "case" "key")}
        {Lisp-Entry "translate-lisp-key" method #f 85 11 85 29 ("else" "case" "key")}
        {Lisp-Entry "Comment" definition #f 107 14 107 21 ("1" "make-string")}
        {Lisp-Entry "Title-Comment" definition #f 111 14 111 27 ("4" "make-string" "string-append")}
        {Lisp-Entry "comment-string" method #f 115 20 115 34 ("Comment")}
        {Lisp-Entry "title-comment-string" method #f 119 20 119 40 ("Title-Comment")}
        {Lisp-Entry "get-constituent-test" method #f 129 20 129 40 ("scheme-constituent?")}
        {Lisp-Entry "Auto-Complete-Characters" definition #f 138 14 138 38 ()}
        {Lisp-Entry "auto-complete-characters" method #f 142 20 142 44 ("Auto-Complete-Characters")}}}})
"Lisp-Text-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "text" "Lisp-Text-Actions.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.editor.lisp.text.Lisp-Text-Actions" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.editor.lisp")}
      {Lisp-Entry "Lisp-Text-Actions" class #f 46 7 46 24 ("Actions")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 (":shift" "on-remove-highlights" "remove-highlights" ":alt" "on-highlight-selection" "highlight-selection" "Tab" "Shortcut" "shortcut" "shortcut:" "on-tabulate" ":focus" "Event-Handler" "action-handler" "action-handler:" "tabulate" "name" "name:" "Action-Item" "install")}}}})
"Lisp-Text-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "text" "Lisp-Text-Preferences.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.editor.lisp.text.Lisp-Text-Preferences" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.editor.lisp")}
      {Lisp-Entry "Lisp-Text-Preferences" class #f 45 7 45 28 ("initialize" "Code-Text-Preferences")
        {Lisp-Entry "title-style" property #f 48 12 48 23 ()}
        {Lisp-Entry "get-title-style" accessor #f 48 63 48 71 ()}
        {Lisp-Entry "set-title-style" accessor #f 48 63 48 71 ()}
        {Lisp-Entry "comment-style" property #f 49 12 49 25 ()}
        {Lisp-Entry "get-comment-style" accessor #f 49 63 49 71 ()}
        {Lisp-Entry "set-comment-style" accessor #f 49 63 49 71 ()}
        {Lisp-Entry "expr-comment-style" property #f 50 12 50 30 ()}
        {Lisp-Entry "get-expr-comment-style" accessor #f 50 63 50 71 ()}
        {Lisp-Entry "set-expr-comment-style" accessor #f 50 63 50 71 ()}
        {Lisp-Entry "named-comment-style" property #f 51 12 51 31 ()}
        {Lisp-Entry "get-named-comment-style" accessor #f 51 62 51 70 ()}
        {Lisp-Entry "set-named-comment-style" accessor #f 51 62 51 70 ()}
        {Lisp-Entry "declaration-keyword-style" property #f 52 12 52 37 ()}
        {Lisp-Entry "get-declaration-keyword-style" accessor #f 52 63 52 71 ()}
        {Lisp-Entry "set-declaration-keyword-style" accessor #f 52 63 52 71 ()}
        {Lisp-Entry "declaration-style" property #f 53 12 53 29 ()}
        {Lisp-Entry "get-declaration-style" accessor #f 53 63 53 71 ()}
        {Lisp-Entry "set-declaration-style" accessor #f 53 63 53 71 ()}
        {Lisp-Entry "keyword-style" property #f 54 12 54 25 ()}
        {Lisp-Entry "get-keyword-style" accessor #f 54 63 54 71 ()}
        {Lisp-Entry "set-keyword-style" accessor #f 54 63 54 71 ()}
        {Lisp-Entry "tag-style" property #f 55 12 55 21 ()}
        {Lisp-Entry "get-tag-style" accessor #f 55 63 55 71 ()}
        {Lisp-Entry "set-tag-style" accessor #f 55 63 55 71 ()}
        {Lisp-Entry "specifier-style" property #f 56 12 56 27 ()}
        {Lisp-Entry "get-specifier-style" accessor #f 56 63 56 71 ()}
        {Lisp-Entry "set-specifier-style" accessor #f 56 63 56 71 ()}
        {Lisp-Entry "char-style" property #f 57 12 57 22 ()}
        {Lisp-Entry "get-char-style" accessor #f 57 63 57 71 ()}
        {Lisp-Entry "set-char-style" accessor #f 57 63 57 71 ()}
        {Lisp-Entry "number-style" property #f 58 12 58 24 ()}
        {Lisp-Entry "get-number-style" accessor #f 58 63 58 71 ()}
        {Lisp-Entry "set-number-style" accessor #f 58 63 58 71 ()}
        {Lisp-Entry "boolean-style" property #f 59 12 59 25 ()}
        {Lisp-Entry "get-boolean-style" accessor #f 59 63 59 71 ()}
        {Lisp-Entry "set-boolean-style" accessor #f 59 63 59 71 ()}
        {Lisp-Entry "string-style" property #f 60 12 60 24 ()}
        {Lisp-Entry "get-string-style" accessor #f 60 63 60 71 ()}
        {Lisp-Entry "set-string-style" accessor #f 60 63 60 71 ()}
        {Lisp-Entry "delimited-string-style" property #f 61 12 61 34 ()}
        {Lisp-Entry "get-delimited-string-style" accessor #f 61 63 61 71 ()}
        {Lisp-Entry "set-delimited-string-style" accessor #f 61 63 61 71 ()}
        {Lisp-Entry "named-string-style" property #f 62 12 62 30 ()}
        {Lisp-Entry "get-named-string-style" accessor #f 62 63 62 71 ()}
        {Lisp-Entry "set-named-string-style" accessor #f 62 63 62 71 ()}
        {Lisp-Entry "quotation-style" property #f 63 12 63 27 ()}
        {Lisp-Entry "get-quotation-style" accessor #f 63 63 63 71 ()}
        {Lisp-Entry "set-quotation-style" accessor #f 63 63 63 71 ()}
        {Lisp-Entry "feature-style" property #f 64 12 64 25 ()}
        {Lisp-Entry "get-feature-style" accessor #f 64 63 64 71 ()}
        {Lisp-Entry "set-feature-style" accessor #f 64 63 64 71 ()}
        {Lisp-Entry "reference-style" property #f 65 12 65 27 ()}
        {Lisp-Entry "get-reference-style" accessor #f 65 63 65 71 ()}
        {Lisp-Entry "set-reference-style" accessor #f 65 63 65 71 ()}
        {Lisp-Entry "warning-style" property #f 66 12 66 25 ()}
        {Lisp-Entry "get-warning-style" accessor #f 66 63 66 71 ()}
        {Lisp-Entry "set-warning-style" accessor #f 66 63 66 71 ()}
        {Lisp-Entry "fatal-style" property #f 67 12 67 23 ()}
        {Lisp-Entry "get-fatal-style" accessor #f 67 63 67 71 ()}
        {Lisp-Entry "set-fatal-style" accessor #f 67 63 67 71 ()}
        {Lisp-Entry "break-style" property #f 68 12 68 23 ()}
        {Lisp-Entry "get-break-style" accessor #f 68 63 68 71 ()}
        {Lisp-Entry "set-break-style" accessor #f 68 63 68 71 ()}
        {Lisp-Entry "completions" property #f 69 12 69 23 ()}
        {Lisp-Entry "get-completions" accessor #f 69 63 69 71 ()}
        {Lisp-Entry "set-completions" accessor #f 69 63 69 71 ()}
        {Lisp-Entry "translate-keys?" property #f 70 12 70 27 ()}
        {Lisp-Entry "get-translate-keys?" accessor #f 70 63 70 71 ()}
        {Lisp-Entry "set-translate-keys?" accessor #f 70 63 70 71 ()}
        {Lisp-Entry "form" anonymous #f 73 3 73 7 ("Text-Break" "break-style" "break-style:" "Text-Fatal" "fatal-style" "fatal-style:" "Text-Warning" "warning-style" "warning-style:" "Text-Reference" "reference-style" "reference-style:" "Text-Feature" "feature-style" "feature-style:" "Text-Quotation" "quotation-style" "quotation-style:" "Text-Named-String" "named-string-style" "named-string-style:" "Text-Delimited-String" "delimited-string-style" "delimited-string-style:" "Text-String" "string-style" "string-style:" "Text-Boolean" "boolean-style" "boolean-style:" "Text-Number" "number-style" "number-style:" "Text-Char" "char-style" "char-style:" "Text-Specifier" "specifier-style" "specifier-style:" "Text-Tag" "tag-style" "tag-style:" "Text-Keyword" "keyword-style" "keyword-style:" "Text-Declaration" "declaration-style" "declaration-style:" "Text-Declaration-Keyword" "declaration-keyword-style" "declaration-keyword-style:" "Text-Named-Comment" "named-comment-style" "named-comment-style:" "Text-Expr-Comment" "expr-comment-style" "expr-comment-style:" "Text-Comment" "comment-style" "comment-style:" "Text-Title" "Base" "Text-Style" "title-style" "title-style:" "install")}
        {Lisp-Entry "get-class-descriptor" method #f 103 25 103 45 ("Lisp-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 112 11 112 17 ()
        {Lisp-Entry "import" anonymous #f 115 1 115 7 ("jazz.designer")}
        {Lisp-Entry "Lisp-Text-Preferences-Descriptor" class #f 118 7 118 39 ("Code-Text-Preferences-Descriptor")
          {Lisp-Entry "form" anonymous #f 121 3 121 7 ("Boolean-Domain" "domain" "Completions-Domain" "feature-style" "quotation-style" "named-string-style" "delimited-string-style" "string-style" "boolean-style" "number-style" "char-style" "specifier-style" "tag-style" "declaration-keyword-style" "name" "name:" "Property-Descriptor" "translate-keys?" "keyword-style" "declaration-style" "expr-comment-style" "comment-style" "title-style" "completions" "categorized" "categorized:" ">" "<properties" "<properties~>" "install")}}}}})
"Lisp-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "text" "Lisp-Text-View.jazz"} 1299077832 jazz
    {Lisp-Entry "jazz.editor.lisp.text.Lisp-Text-View" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.platform" "jazz.library.automata" "jazz.library" "jazz.jml" "jazz.editor.lisp" "jazz.debugger" "jazz.catalog")}
      {Lisp-Entry "Auto-Complete-Characters" constant #f 52 10 52 34 ()}
      {Lisp-Entry "Lisp-Text-View" class #f 56 7 56 21 ("cond" "list" "x" "lambda" "for-each" "b" "a" "foo" "virtual" "public" "method" "comment" "Code-Text-View")
        {Lisp-Entry "install" method #f 59 20 59 27 ("get-break-style" "Break" "get-fatal-style" "Fatal" "get-warning-style" "Warning" "get-reference-style" "Reference" "get-feature-style" "Feature" "get-quotation-style" "Quotation" "get-named-string-style" "Named-String" "get-delimited-string-style" "Delimited-String" "get-string-style" "String" "get-boolean-style" "Boolean" "get-number-style" "Number" "get-char-style" "Char" "get-specifier-style" "Specifier" "get-tag-style" "Tag" "get-keyword-style" "Keyword" "get-declaration-style" "Declaration" "get-declaration-keyword-style" "Declaration-Keyword" "get-named-comment-style" "Named-Comment" "get-expr-comment-style" "Expr-Comment" "get-comment-style" "Comment" "get-title-style" "Title" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "new-syntax" method #f 85 20 85 30 ("Lisp-Syntax" "new")}
        {Lisp-Entry "host-icon" method #f 94 25 94 34 ("Image-Resource")}
        {Lisp-Entry "get-locat-container" method #f 103 18 103 37 ("parse" "if" "get-moniker" "moniker" "let")}
        {Lisp-Entry "focus-actions" method #f 115 20 115 33 ("nextmethod" "lisp-text" "find-actions" "cons")}
        {Lisp-Entry "context-menu" method #f 125 20 125 32 ("get-context-menu" "track-popup-menu" "edit-references" "edit-definitions" "move-caret:" "context-menu-click" "always" "else" "never" "outside-selection" "not" "and" "cond" "move-caret" "let" "modifiers-down" "alt?" "control?" "shift?" "receive" "pos")}
        {Lisp-Entry "tab-press" method #f 138 20 138 29 ("tabulate" "lambda" "undoer" "with-atomic-undo" "insert-char" "shift-key?" "nextmethod" "accepts-returns?" "not" "has-completion?" "or" "if" "modifiers" "key")}
        {Lisp-Entry "colorize-syntax" method #f 154 20 154 35 ("colorize-comments" "finish-current" "when" "colorize-declarations" "new-colorizer" "not" "and" "colorizer" "end" "end:" "text-beginning" "start" "start:" "self" "explorer-class" "new" "Text-Explorer" "expl" "let" "lambda" "with-safe-explore" "entries?" "entries?:" "nextmethod" "recoloring?" "recoloring?:")}
        {Lisp-Entry "Syntax-Targets" definition #f 170 14 170 28 ()}
        {Lisp-Entry "Syntax-Automata" definition #f 173 14 173 29 ()}
        {Lisp-Entry "syntax-targets" method #f 177 20 177 34 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" method #f 183 20 183 35 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "compute-syntax-targets" method #f 189 20 189 42 ("Syntax-Targets")}
        {Lisp-Entry "compute-syntax-automata" method #f 193 20 193 43 ("text-constituent?" "build-search-automata" "when" "syntax-targets" "targets" "let")}
        {Lisp-Entry "colorize-type" method #f 199 20 199 33 ("recolorize?" "colorizer" "end" "start" "type" "found")}
        {Lisp-Entry "colorize-declarations" method #f 203 20 203 41 ("get-application" "get-documentation-cataloguer" "Feature" "feature" "Literal" "literal" "Named-Comment" "named-comment" "Expr-Comment" "expr-comment" "Named-String" "named-string" "Delimited-String" "delimited-string" "String" "string" "Boolean" "boolean" "Number" "number" "Char" "char" "colorize-specifier" "specifier" "colorize-tag" "tag" "Keyword" "Base" "get-style-at" "get-name" "eq?" "keyword" "Quotation" "quasiquote" "quote" "case" "mode" "Declaration-Keyword" "declaration-style" "apply-coloring" "setter" "getter" "anonymous" "script" "memq?" "not" "and" "when" "documented?" "marked" "end" "start" "symbol" "kind" "context" "lambda" "walk-declarations" "colorizer" "expl")}
        {Lisp-Entry "colorize-tag" method #f 254 29 254 41 ("end" "start" "colorizer")}
        {Lisp-Entry "colorize-specifier" method #f 258 29 258 47 ("end" "start" "colorizer")}
        {Lisp-Entry "declaration-style" method #f 262 29 262 46 ("documented?")}
        {Lisp-Entry "colorize-comments" method #f 266 20 266 37 ("end-line" "end-line:" "start-line" "start-line:" "Title" "4" "+" "Comment" "apply-coloring" "not" "if" "new" "paragraph-length" "len" "get-line" "line" "let*" "title?" "Cell" "lambda" "for-each-comment" "end" "end:" "start" "start:" "colorizer" "expl")}
        {Lisp-Entry "recolorize-text" method #f 280 20 280 35 ("nextmethod" "colorize-comments" "recolorize-comments" "finish-current" "exit-list" "colorize-declarations" "iterate" "continuation-return" "get-end" "get-line" ">" "when" "set-line-hook" "exit" "lambda" "continuation-capture" "new-colorizer" "colorizer" "Text-Explorer" "expl" "let" "Explore-Error" "catch" "end" "end:" "start:" "self" "explorer-class" "Cell" "new" "pos" "skip-whitespace" "col" "paragraph-string" "str" "let*" "explorer" "start-line" "recolorize-declarations" "define" "end-line" "start")}
        {Lisp-Entry "Comment-Styles" definition #f 332 14 332 28 ("Comment" "Title")}
        {Lisp-Entry "String-Styles" definition #f 335 14 335 27 ("Named-String" "Delimited-String" "String")}
        {Lisp-Entry "commented?" method #f 339 20 339 30 ("get-style-at" "comment-style?" "pos")}
        {Lisp-Entry "comment-style?" method #f 343 20 343 34 ("Comment-Styles" "inherits?" "style-name" "lambda" "some?" "style")}
        {Lisp-Entry "string-style?" method #f 349 20 349 33 ("String-Styles" "inherits?" "style-name" "lambda" "some?" "style")}
        {Lisp-Entry "textual-style?" method #f 355 20 355 34 ("string-style?" "comment-style?" "or" "style")}
        {Lisp-Entry "favorite-completions" method #f 360 20 360 40 ("preferences" "get-completions")}
        {Lisp-Entry "on-tabulate" method #f 387 11 387 22 ("tabulate" "lambda" "undoer" "with-atomic-undo" "evt")}
        {Lisp-Entry "return-press" method #f 393 20 393 32 ("tabulate" "nextmethod" "lambda" "undoer" "with-atomic-undo" "key")}
        {Lisp-Entry "tabulate" method #f 400 20 400 28 ("ignore" "action" "action:" "set-modified?" "when" "+" "get-line" "tabulate-lines" "fx" "last-delta" "modified?" "receive" "set-caret" "with-safe-explore" "lambda" "with-update-locked" "get-end" "end" "get-start" "start" "let")}
        {Lisp-Entry "tabulate-lines" method #f 415 20 415 34 ("values" "set!" "0" "/=" "when" "tabulate-line" "=" "delta" "to" "from" "line" "for" "loop" "last-delta" "modified?" "let" "end" "start")}
        {Lisp-Entry "tabulate-line" method #f 426 20 426 33 ("tabulate-delta" "+" "make-string" "list" "Cell" "Range$Cell$" "new" "replace-text" "get-column" "actual" "let" "0" "/=" "when" "delta" "tabulate-column" "define" "line")}
        {Lisp-Entry "tabulate-delta" method #f 438 18 438 32 ("get-column" "*" "-1" "decrease!" "when" "specials" "bind" "element" "upper-case?" "default-col" "4" "threshold" "proposed-col" "else" "neq?" "2" "/=" "first-line" "first-last" "list" "get-tabulate" "tabulate" "get-modifiers" "get-expression-syntax" "form" "info" "first-indent" "first-dispatch?" "first-without?" "first-with?" "starts-with?" "first-call-with?" "tag?" "first-tag?" "get-kind" "eq?" "first-symbol" "first-string" "get-col" "+" "null?" "col" "rank" "length" "opening" "collect-backward-exprs" "remove-expression-comments" "start" "start:" "self" "explorer-class" "Text-Explorer" "expl" "Cell" "new" "pos" "get-end" "get-char" "eqv?" "Range$Cell$" "range" "mark" "lambda" "collect-if" "cons" "pair?" "lst" "remove-specifiers" "=" "get-start" "get-line" "first" "reverse" ">" "reversed" "let*" "count" "first-on-last-line" "1" "cardinality" "fx" "cast" "-" "subseq" "string->symbol" "ends-with?" "string" "effective-symbol" "cdr" "increase!" "set!" "memq?" "or" "if" "car" "get-range" "get-string" "find-symbol" "symbol" "not" "not-null?" "and" "while" "done?" "0" "total" "let" "modifiers" "expressions" "count-modifiers" "define" "line")}
        {Lisp-Entry "evaluate-selection" method #f 529 20 529 38 ("evaluate-range" "1" "sleep" ":wait" "with-cursor" "bell" "not" "if" "current-declaration-range" "range" "let" "lambda" "with-safe-explore")}
        {Lisp-Entry "evaluate-buffer" method #f 541 20 541 35 ("buffer-selection" "evaluate-range" "1" "sleep" "lambda" ":wait" "with-cursor")}
        {Lisp-Entry "evaluate-range" method #f 548 20 548 34 ("user-message" "not-null?" "names" "evaluate-expressions" "prepare-expressions" "col" "line" "container" "str" "syntax" "bind" "bell" "not" "if" "get-debugger-manager" "get-focused-process" "debugged" "queue-list" "explore-error" "nu<?" "enqueue" "form-name" "name" "get-range" "read-text-form" "form" "nu<=?" "cond" "e" "s" "iterate" "forward-expr" "when" "new-queue" "queue" "end:" "start:" "self" "explorer-class" "new" "expl" "get-end" "end" "get-start" "start" "let" "collect-declaration-names" "define" "range")}
        {Lisp-Entry "prepare-expressions" method #f 579 29 579 48 ("range")}
        {Lisp-Entry "current-name" method #f 588 20 588 32 ("get-string" "when" "current-expr-range" "range" "let")}
        {Lisp-Entry "current-expr" method #f 594 20 594 32 ("range-expr" "when" "current-expr-range" "range" "let")}
        {Lisp-Entry "range-expr" method #f 600 20 600 30 ("get-string" "read-string-element" "lambda" "get-readtable" "with-readtable" "range")}
        {Lisp-Entry "current-symbol" method #f 606 11 606 25 ("symbol?" "when" "current-expr" "expr" "let")}
        {Lisp-Entry "expr-at" method #f 612 20 612 27 ("butlast" "read-string-element" "ends-with?" "if" "lambda" "get-readtable" "with-readtable" "expr-range" "get-string" "string" "let" "pos")}
        {Lisp-Entry "match-backwards?" method #f 626 20 626 36 ("memq?" "char")}
        {Lisp-Entry "match-forwards?" method #f 630 20 630 35 ("memq?" "char")}
        {Lisp-Entry "headers" constant #f 639 12 639 19 ("4" "make-string" "string-append" "list")}
        {Lisp-Entry "get-headers" method #f 644 20 644 31 ("headers")}
        {Lisp-Entry "current-declaration" method #f 653 11 653 30 ("get-string" "read-string-element" "when" "current-declaration-range" "range" "let")}
        {Lisp-Entry "current-declaration-range" method #f 659 11 659 36 ("get-end" "declaration-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "declaration-range" method #f 665 18 665 35 ("else" "inner-name?" "declaration-name?" "and" "get-end" "nu=?" "get-start" "get-line" "=" "or" "namespace-name?" "cond" "form-expr" "name" "get-range" "new-range" "outer-expr" "not" "if" "range" "iterate" "end" "end:" "start" "start:" "self" "explorer-class" "new" "Text-Explorer" "expl" "let" "pos")}
        {Lisp-Entry "info-message" method #f 687 20 687 32 ("cdr" "format" "2" "length" ">=" "nextmethod" "concatenate" "outer-expr" "declaration-name" "cons" "declaration-expr?" "if" "names" "iter" "get-selection" "current-declaration-range" "or" "range" "range:" "self" "explorer-class" "new" "expl" "let" "collect-names" "define")}
        {Lisp-Entry "Highlight-Styles" definition #f 710 14 710 30 ("Break" "Fatal" "Warning" "Reference")}
        {Lisp-Entry "highlight-style?" definition #f 714 15 714 31 ("Highlight-Styles" "inherits?" "style-name" "lambda" "some?" "style")}
        {Lisp-Entry "constant?" definition #f 720 15 720 24 ("keyword?" "symbol?" "char?" "boolean?" "number?" "or" "expr")}
        {Lisp-Entry "on-highlight-selection" method #f 728 11 728 33 ("highlight-expression" "unhighlight-expression" "highlight-style?" "get-end" "get-style-at" "style" "get-constituent-test" "->string" "syntax" "parser-class" "reference-searcher" "target" "constant?" "range-expr" "constant" "bell" "not" "or" "if" "current-expr-range" "expr-range" "get-start" "declaration-range" "let" "evt")}
        {Lisp-Entry "on-remove-highlights" method #f 743 11 743 31 ("remove-highlights" "bell" "not" "if" "get-start" "declaration-range" "range" "let" "evt")}
        {Lisp-Entry "find-expression" method #f 750 18 750 33 ("continuation-return" "found" "iterate-expression-target" "return" "lambda" "continuation-capture" "target" "range")}
        {Lisp-Entry "highlight-expression" method #f 759 18 759 38 ("queue-list" "enqueue" "get-base" "cons" "set-base" "extend" "style" "inherits?" "unless" "s" "modify-style" "found" "lambda" "iterate-expression-target" "Reference" "get-style" "reference-style" "new-queue" "ranges" "let" "target" "range")}
        {Lisp-Entry "unhighlight-expression" method #f 774 18 774 40 ("remove" "set-base" "extend" "style" "Reference" "memq?" "when" "get-base" "base" "let" "s" "modify-style" "found" "lambda" "iterate-expression-target" "target" "range")}
        {Lisp-Entry "remove-highlights" method #f 786 18 786 35 ("get-end" "end" "end:" "get-start" "get-line" "start" "start:" "get-runs" "invalidate-paragraph" "default-style" "set-style" "highlight-style?" "when" "get-style" "style" "let" "run" "for-each" "Paragraph" "paragraph" "fx" "line" "lambda" "for-each-paragraph" "range")}
        {Lisp-Entry "iterate-expression-target" method #f 798 11 798 36 ("Range$Cell$" "cdr" "-" "car" "nu+" "contextual-search" "found" "0" "string-ref" "eqv?" "unless" "get-marked" "seq" "constant?" "when" "mode" "lambda" "iterate-expression" "end" "end:" "get-start" "start" "start:" "self" "explorer-class" "new" "Text-Explorer" "expl" "let" "proc" "target" "range")}}}})
"_lisp"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "_lisp.jazz"} 1299004946 jazz
    {Lisp-Entry "jazz.editor.lisp" module #f 37 8 37 24 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("syntax" "phase" "jazz.editor.lisp.syntax" "jazz.editor.lisp.autoload")}
      {Lisp-Entry "*expression-syntaxes*" definition #f 49 12 49 33 ("eq?" "test" "test:" "make-table")}
      {Lisp-Entry "get-expression-syntax" definition #f 53 20 53 41 ("*expression-syntaxes*" "table-ref" "name")}
      {Lisp-Entry "register-expression-syntax" definition #f 57 20 57 46 ("get-name" "*expression-syntaxes*" "table-set!" "form")}
      {Lisp-Entry "Expression-Syntax" class #f 61 7 61 24 ("Object")
        {Lisp-Entry "name" slot #f 64 8 64 12 ()}
        {Lisp-Entry "get-name" accessor #f 64 33 64 41 ()}
        {Lisp-Entry "dialect" slot #f 65 8 65 15 ()}
        {Lisp-Entry "get-dialect" accessor #f 65 33 65 41 ()}
        {Lisp-Entry "namespace?" slot #f 66 8 66 18 ()}
        {Lisp-Entry "get-namespace?" accessor #f 66 33 66 41 ()}
        {Lisp-Entry "declaration?" slot #f 67 8 67 20 ()}
        {Lisp-Entry "get-declaration?" accessor #f 67 33 67 41 ()}
        {Lisp-Entry "anonymous?" slot #f 68 8 68 18 ()}
        {Lisp-Entry "get-anonymous?" accessor #f 68 33 68 41 ()}
        {Lisp-Entry "inner?" slot #f 69 8 69 14 ()}
        {Lisp-Entry "get-inner?" accessor #f 69 33 69 41 ()}
        {Lisp-Entry "modifiers" slot #f 70 8 70 17 ()}
        {Lisp-Entry "get-modifiers" accessor #f 70 33 70 41 ()}
        {Lisp-Entry "keywords" slot #f 71 8 71 16 ()}
        {Lisp-Entry "get-keywords" accessor #f 71 33 71 41 ()}
        {Lisp-Entry "tabulate" slot #f 72 8 72 16 ()}
        {Lisp-Entry "get-tabulate" accessor #f 72 33 72 41 ()}
        {Lisp-Entry "walk" slot #f 73 8 73 12 ()}
        {Lisp-Entry "get-walk" accessor #f 73 33 73 41 ()}
        {Lisp-Entry "name-mangler" slot #f 74 8 74 20 ()}
        {Lisp-Entry "get-name-mangler" accessor #f 74 33 74 41 ()}
        {Lisp-Entry "signature-mangler" slot #f 75 8 75 25 ()}
        {Lisp-Entry "get-signature-mangler" accessor #f 75 33 75 41 ()}
        {Lisp-Entry "initialize" method #f 78 20 78 30 ("signature-mangler~self" "name-mangler~self" "walk~self" "tabulate~self" "keywords~self" "modifiers~self" "inner?~self" "anonymous?~self" "declaration?~self" "namespace?~self" "dialect~self" "self" "name~self" "set!" "nextmethod" "signature-mangler" "signature-mangler:" "name-mangler" "name-mangler:" "walk" "walk:" "tabulate" "tabulate:" "keywords" "keywords:" "modifiers" "modifiers:" "inner?" "inner?:" "anonymous?" "anonymous?:" "declaration?" "declaration?:" "namespace?" "namespace?:" "jazz" "dialect" "dialect:" "name")}}
      {Lisp-Entry "expression-syntax-namespace?" definition #f 110 20 110 48 ("get-namespace?" "and" "get-expression-syntax" "expression-syntax" "let" "symbol")}
      {Lisp-Entry "expression-syntax-declaration?" definition #f 115 20 115 50 ("get-declaration?" "and" "get-expression-syntax" "expression-syntax" "let" "symbol")}
      {Lisp-Entry "expression-syntax-anonymous?" definition #f 120 20 120 48 ("get-anonymous?" "and" "get-expression-syntax" "expression-syntax" "let" "symbol")}
      {Lisp-Entry "expression-syntax-inner?" definition #f 125 20 125 44 ("get-inner?" "and" "get-expression-syntax" "expression-syntax" "let" "symbol")}
      {Lisp-Entry "expression-syntax-modifiers" definition #f 130 20 130 47 ("get-modifiers" "and" "get-expression-syntax" "expression-syntax" "let" "symbol")}
      {Lisp-Entry "expression-syntax-keywords" definition #f 135 20 135 46 ("get-keywords" "and" "get-expression-syntax" "expression-syntax" "let" "symbol")}
      {Lisp-Entry "expression-syntax-tabulate" definition #f 140 20 140 46 ("get-tabulate" "and" "get-expression-syntax" "expression-syntax" "let" "symbol")}
      {Lisp-Entry "expression-syntax-walk" definition #f 145 20 145 42 ("get-walk" "and" "get-expression-syntax" "expression-syntax" "let" "symbol")}
      {Lisp-Entry "expression-syntax-name-mangler" definition #f 150 20 150 50 ("get-name-mangler" "and" "get-expression-syntax" "expression-syntax" "let" "symbol")}
      {Lisp-Entry "expression-syntax-signature-mangler" definition #f 155 20 155 55 ("get-signature-mangler" "and" "get-expression-syntax" "expression-syntax" "let" "symbol")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "autoload.jazz"} 1296083297 jazz
    {Lisp-Entry "jazz.editor.lisp.autoload" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("Lisp-Syntax" "jazz.editor.lisp.text.Lisp-Syntax" "Lisp-Text-View" "jazz.editor.lisp.text.Lisp-Text-View" "Lisp-Text-Preferences-Descriptor" "Lisp-Text-Preferences" "jazz.editor.lisp.text.Lisp-Text-Preferences" "Lisp-Text-Actions" "jazz.editor.lisp.text.Lisp-Text-Actions" "Lisp-Explorer" "jazz.editor.lisp.text.Lisp-Explorer" "Lisp-Console-Manager" "jazz.editor.lisp.text.Lisp-Console-Manager" "Lisp-Parser" "jazz.editor.lisp.parser.Lisp-Parser" "Lisp-File-Entry" "jazz.editor.lisp.catalog.Lisp-File-Entry" "Lisp-Entry" "autoload" "jazz.editor.lisp.catalog.Lisp-Entry")}}})
"install"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "install.scm"} 1299165064 scheme
    {Lisp-Entry "jazz.editor.lisp.install" unit #f 37 6 37 30 ()
      {Lisp-Entry "Lisp-File-Entry" define ("literal") 40 21 40 36 ("jazz.editor.lisp.literals:construct-lisp-file-entry")}
      {Lisp-Entry "Lisp-Entry" define ("literal") 41 21 41 31 ("jazz.editor.lisp.literals:construct-lisp-entry")}}})
"literals"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "literals.jazz"} 1298937143 jazz
    {Lisp-Entry "jazz.editor.lisp.literals" module #f 37 8 37 33 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("time" "jazz.editor.lisp")}
      {Lisp-Entry "construct-lisp-file-entry" definition #f 44 21 44 46 ("seconds->time" "Lisp-File-Entry" "new" "definitions" "dialect" "time" "file")}
      {Lisp-Entry "construct-lisp-entry" definition #f 48 21 48 41 ("Lisp-Entry" "new" "definitions" "references" "end-column" "end-line" "column" "line" "signature" "kind" "name")}}})
"syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "lisp" "syntax.jazz"} 1299004971 jazz
    {Lisp-Entry "jazz.editor.lisp.syntax" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "define-expression" macro ("macro") 40 15 40 32 (",signature-mangler" "signature-mangler:" ",name-mangler" "name-mangler:" ",walk" "walk:" ",tabulate" "tabulate:" ",keywords" "keywords:" ",modifiers" "modifiers:" ",inner?" "inner?:" ",anonymous?" "anonymous?:" ",declaration?" "declaration?:" ",namespace?" "namespace?:" ",dialect" "dialect:" ",name" "Expression-Syntax" "new" "register-expression-syntax" "signature-mangler" "name-mangler" "walk" "tabulate" "keywords" "modifiers" "inner?" "anonymous?" "declaration?" "namespace?" "jazz" "dialect" "bind-keywords" "rest" "name")}}})
