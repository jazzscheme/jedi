"base"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "base.scm"} 1290094686
    {Lisp-Entry "jazz.jazz-source" define #f 42 8 42 24 ("jazz.source")}
    {Lisp-Entry "jazz.make-version" define #f 51 9 51 26 ("version" "'version" "vector" "description" "update" "recompile" "rebuild" "gambit-stamp" "gambit-version" "number")}
    {Lisp-Entry "jazz.version-number" define #f 54 9 54 28 ("1" "vector-ref" "version")}
    {Lisp-Entry "jazz.version-gambit-version" define #f 57 9 57 36 ("2" "vector-ref" "version")}
    {Lisp-Entry "jazz.version-gambit-stamp" define #f 60 9 60 34 ("3" "vector-ref" "version")}
    {Lisp-Entry "jazz.version-rebuild" define #f 63 9 63 29 ("4" "vector-ref" "version")}
    {Lisp-Entry "jazz.version-recompile" define #f 66 9 66 31 ("5" "vector-ref" "version")}
    {Lisp-Entry "jazz.version-update" define #f 69 9 69 28 ("6" "vector-ref" "version")}
    {Lisp-Entry "jazz.version-description" define #f 72 9 72 33 ("7" "vector-ref" "version")}
    {Lisp-Entry "jazz.new-version" define #f 76 9 76 25 ("jazz.make-version" "description" "update" "recompile" "rebuild" "gambit-stamp" "gambit-version" "version" "#!key")}
    {Lisp-Entry "jazz.split-version" define #f 95 9 95 27 ("values" "revision" "3" "minor" "5" "-" "0" "substring" "string->number" "major" "string-length" "len" "number->string" "str" "let" "number")}
    {Lisp-Entry "jazz.present-version" define #f 104 9 104 29 ("number->string" "string-append" "jazz.split-version" "revision" "minor" "major" "receive" "number")}
    {Lisp-Entry "jazz.jazz-versions-file" define #f 118 8 118 31 ()}
    {Lisp-Entry "jazz.jazz-versions" define #f 121 8 121 26 ()}
    {Lisp-Entry "jazz.jazz-version-number" define #f 124 8 124 32 ()}
    {Lisp-Entry "jazz.jazz-gambit-version" define #f 127 8 127 32 ()}
    {Lisp-Entry "jazz.jazz-gambit-stamp" define #f 130 8 130 30 ()}
    {Lisp-Entry "jazz.load-jazz-versions" define #f 134 8 134 31 ("cdr" "jazz.jazz-gambit-stamp" "jazz.jazz-gambit-version" "begin" "jazz.version-gambit-stamp" "gambit-stamp" "jazz.version-gambit-version" "gambit-version" "jazz-version" "null?" "not" "jazz-versions" "iter" "setup-jazz-gambit-version/stamp" "jazz.new-version" "apply" "arguments" "map" "lst" "car" "jazz.version-number" "jazz.jazz-version-number" "read" "read-all" "list->versions" "jazz.jazz-versions" "set!" "input" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "file-exists?" "if" "file" "load-versions" "string-append" "jazz.jazz-source" "and" "jazz.jazz-versions-file" "or" "determine-jazz-versions-file" "define" "lambda" "loaded?" "let")}
    {Lisp-Entry "jazz.get-jazz-versions" define #f 174 9 174 31 ("jazz.jazz-versions" "jazz.load-jazz-versions")}
    {Lisp-Entry "jazz.kludged-get-jazz-versions" define #f 182 9 182 39 ("jazz.get-jazz-versions" "or")}
    {Lisp-Entry "jazz.get-jazz-version-number" define #f 186 9 186 37 ("jazz.jazz-version-number" "jazz.load-jazz-versions")}
    {Lisp-Entry "jazz.get-jazz-gambit-version" define #f 191 9 191 37 ("jazz.jazz-gambit-version" "jazz.load-jazz-versions")}
    {Lisp-Entry "jazz.get-jazz-gambit-stamp" define #f 196 9 196 35 ("jazz.jazz-gambit-stamp" "jazz.load-jazz-versions")}
    {Lisp-Entry "jazz.gambit-jazz?" define #f 201 9 201 26 ("string=?" "and" "gambit-vendor")}
    {Lisp-Entry "jazz.gambit-uptodate?" define #f 205 9 205 30 (">=" "if" ">" "not" "or" "jazz.get-jazz-gambit-stamp" "jazz-gambit-stamp" "jazz.get-jazz-gambit-version" "jazz-gambit-version" "let" "gambit-stamp" "gambit-version")}
    {Lisp-Entry "jazz.make-update" define #f 220 9 220 25 ("update" "'update" "vector" "description" "targets" "version")}
    {Lisp-Entry "jazz.update-version" define #f 223 9 223 28 ("1" "vector-ref" "update")}
    {Lisp-Entry "jazz.update-targets" define #f 226 9 226 28 ("2" "vector-ref" "update")}
    {Lisp-Entry "jazz.update-description" define #f 229 9 229 32 ("3" "vector-ref" "update")}
    {Lisp-Entry "jazz.new-update" define #f 233 9 233 24 ("jazz.make-update" "description" "targets" "version" "#!key")}
    {Lisp-Entry "jazz.jazz-updates-file" define #f 249 8 249 30 ()}
    {Lisp-Entry "jazz.jazz-updates" define #f 252 8 252 25 ()}
    {Lisp-Entry "jazz.load-jazz-updates" define #f 256 8 256 30 ("begin" "not" "read" "read-all" "jazz.list->updates" "jazz.jazz-updates" "set!" "input" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "file-exists?" "if" "file" "load-updates" "string-append" "jazz.jazz-source" "and" "jazz.jazz-updates-file" "or" "determine-jazz-updates-file" "define" "lambda" "loaded?" "let")}
    {Lisp-Entry "jazz.get-jazz-updates" define #f 276 9 276 30 ("jazz.jazz-updates" "jazz.load-jazz-updates")}
    {Lisp-Entry "jazz.kludged-get-jazz-updates" define #f 283 9 283 38 ("jazz.get-jazz-updates" "or")}
    {Lisp-Entry "jazz.list->updates" define #f 287 9 287 27 ("jazz.new-update" "apply" "arguments" "lambda" "map" "lst")}
    {Lisp-Entry "jazz.for-each-lower-update" define #f 293 9 293 35 ("cdr" "memq" "eq?" "symbol?" "and" "jazz.update-targets" "targets" "car" "update" "null?" "not" "if" "iter" "let" "proc" "updates" "target")}
    {Lisp-Entry "jazz.versioned-directory" define #f 305 9 305 33 ("rename-file" "dir" "converted-version-number" "working-version-number" "iter" "1" "<=" "level" "src" "feedback:" "jazz.copy-directory" ".1" "thread-sleep!" "jazz.delete-directory" "jazz.feedback" "begin" "convertion-dir" "current-dir" "current-version-number" "receive" "jazz.present-version" "string-append" "not" "set!" "values" "continuation-return" "file-exists?" "if" "version-directory" "version-dir" "jazz.update-version" "version-number" "update" "jazz.for-each-lower-update" "return" "lambda" "continuation-capture" "uptodate?" "let" "determine-version" "define" "converter" "updates" "target" "root")}
    {Lisp-Entry "jazz.jazz-settings-directory" define #f 352 8 352 36 ()}
    {Lisp-Entry "jazz.named-configurations-file" define #f 355 8 355 38 ()}
    {Lisp-Entry "jazz.setup-settings" define #f 359 9 359 28 ("string-append" "jazz.named-configurations-file" "jazz.convert-settings" "jazz.kludged-get-jazz-updates" "settings" "'settings" "jazz.versioned-directory" "jazz.jazz-settings-directory" "set!")}
    {Lisp-Entry "jazz.convert-settings" define #f 364 9 364 30 ("else" "case" "205000" "configuration" "lambda" "jazz.convert-configurations" "convert-initial" "define" "old" "dir")}
    {Lisp-Entry "jazz.convert-properties" define #f 376 9 376 32 ("plist")}
    {Lisp-Entry "jazz.convert-configurations" define #f 380 9 380 36 ("file-exists?" "if" "newline" "write" "configuration" "for-each" "output" "call-with-output-file" "configurations" "write-configurations" "read" "read-all" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "read-configurations" "define" "string-append" "configurations-file" "let" "converter" "dir")}
    {Lisp-Entry "jazz.load-global/local-configurations" define #f 399 9 399 46 ("local" "jazz.jazz-settings-directory" "string-append" "global" "let" "load" "file-exists?" "if" "file" "load-if-exists" "define" "filename")}
    {Lisp-Entry "jazz.print-configuration" define #f 415 9 415 33 ("newline" "destination:" "kernel-interpret?:" "mutable-bindings?:" "debug-source?:" "debug-location?:" "debug-environments?:" "optimize?:" "safety:" "windowing:" "platform:" "system:" "name:" "write" "display" "set!" "if" "value" "property" "print-property" "first?" "define" "output" "destination" "kernel-interpret?" "mutable-bindings?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system" "name")}
    {Lisp-Entry "jazz.parse-link" define #f 449 9 449 24 ("cons" "set!" "member" "not" "cdr" "options" "assoc" "pair" "lambda" "for-each" "result" "symbol->string" "jazz.split-string" "lst" "let" "symbol?" "if" "jazz.error" "option" "invalid" "libraries" "objects" "link-options" "define" "link")}
    {Lisp-Entry "jazz.user-build-directory" define #f 482 8 482 33 ()}
    {Lisp-Entry "jazz.get-user-build-directory" define #f 486 9 486 38 ("set!" "jazz.user-build-directory" "or" "jazz.pathname-normalize" "jazz.create-directories" "dir" "let" "user-build-directory" "define")}
    {Lisp-Entry "jazz.parse-destination" define #f 498 9 498 31 ("+" "1" "-" "substring" "string->symbol" "0" "=" "string-length" "len" "jazz.string-find" "pos" "let" "not" "if" "proc" "dest")}
    {Lisp-Entry "jazz.destination-directory" define #f 513 9 513 35 ("jazz.get-user-build-directory" "build" "string-append" "bin" "user" "'user" "or" "case" "dirname" "alias" "lambda" "else" "jazz.format" "cond" "jazz.parse-destination" "dir" "destination" "name")}
    {Lisp-Entry "jazz.sort" define #f 529 9 529 18 ("let*" "cddr" "or" "split" "cdr" "cons" "if" "e2" "car" "e1" "let" "else" "null?" "cond" "l2" "l1" "merge" "merge-sort" "define" "smaller" "l")}
    {Lisp-Entry "jazz.string-replace" define #f 559 9 559 28 ("string-set!" "string-ref" "eqv?" "begin" "0" ">=" "if" "1" "string-length" "-" "n" "iter" "string-copy" "cpy" "let" "proper-tail-calls" "declare" "new" "old" "str")}
    {Lisp-Entry "jazz.pathname-type" define #f 576 8 576 26 ("file-type")}
    {Lisp-Entry "jazz.pathname-exists?" define #f 579 8 579 29 ("file-exists?")}
    {Lisp-Entry "jazz.pathname-standardize" define #f 583 9 583 34 ("jazz.string-replace" "path")}
    {Lisp-Entry "jazz.pathname-normalize" define #f 587 9 587 32 ("string-append" "and" "jazz.pathname-standardize" "standardized" "1" "-" "0" "substring" "path-normalize" "normalized" "jazz.string-ends-with?" "dir?" "string-length" "len" "let" "jazz.error" "jazz.pathname-exists?" "not" "if" "error?" "#!optional" "path")}
    {Lisp-Entry "jazz.dirname-normalize" define #f 601 9 601 31 ("string-append" "jazz.string-ends-with?" "if" "dir")}
    {Lisp-Entry "jazz.path=?" define #f 609 13 609 24 ("string-ci=?" "path2" "path1")}
    {Lisp-Entry "jazz.path=?" define #f 612 12 612 23 ("string=?" "path2" "path1")}
    {Lisp-Entry "jazz.create-directory" define #f 616 9 616 30 ("create-directory" "begin" "file-exists?" "not" "if" "feedback" "#!key" "dir")}
    {Lisp-Entry "jazz.create-directories" define #f 624 9 624 32 ("feedback:" "jazz.create-directory" "file-exists?" "jazz.join-strings" "subdir" "begin" "null?" "not" "cdr" "car" "equal?" "if" "scan" "iter" "jazz.split-string" "reverse" "path" "let" "feedback" "#!key" "dir")}
    {Lisp-Entry "jazz.directory-content" define #f 635 9 635 31 ("dot-and-dot-dot" "'dot-and-dot-dot" "ignore-hidden:" "path:" "list" "string?" "if" "directory-files" "directory")}
    {Lisp-Entry "jazz.directory-files" define #f 641 9 641 29 ("jazz.directory-content" "regular" "'regular" "string-append" "jazz.pathname-type" "eq?" "name" "lambda" "jazz.collect-if" "directory")}
    {Lisp-Entry "jazz.directory-directories" define #f 647 9 647 35 ("jazz.directory-content" "'directory" "string-append" "jazz.pathname-type" "eq?" "name" "lambda" "jazz.collect-if" "directory")}
    {Lisp-Entry "jazz.delete-directory" define #f 653 9 653 30 ("delete-directory" "begin" "jazz.empty-directory" "if" "feedback" "delete-directory?" "delete-file?" "0" "level" "#!optional" "directory")}
    {Lisp-Entry "jazz.empty-directory" define #f 663 9 663 29 ("jazz.directory-directories" "delete-directory" "1" "+" "jazz.directory-files" "set!" "delete-file" "begin" "or" "if" "string-append" "name" "lambda" "for-each" "empty?" "let" "jazz.empty-directory" "dir" "default-delete-directory?" "file" "default-delete-file?" "define" "feedback" "delete-directory?" "delete-file?" "0" "level" "#!optional" "directory")}
    {Lisp-Entry "jazz.copy-directory" define #f 692 9 692 28 ("0" "1" "+" "directory" "copy-file" "regular" "jazz.pathname-type" "case" "eq?" "or" "sub-dst" "string-append" "sub-src" "name" "lambda" "for-each" "jazz.create-directories" "jazz.directory-content" "src-content" "let" "if" "level" "copy" "define" "feedback" "copy?" "#!key" "dst" "src")}
    {Lisp-Entry "jazz.platform-eol-encoding" define #f 712 9 712 35 ("lf" "'lf" "else" "cr-lf" "'cr-lf" "windows" "case" "platform")}
    {Lisp-Entry "jazz.option?" define #f 723 9 723 21 ("string-ref" "char=?" "0" "string-length" ">" "and" "arg")}
    {Lisp-Entry "jazz.convert-option" define #f 728 9 728 28 ("1" "0" "substring" "equal?" "2" ">=" "and" "if" "start" "string-length" "len" "let" "arg")}
    {Lisp-Entry "jazz.option=?" define #f 736 9 736 22 ("jazz.convert-option" "equal?" "jazz.option?" "and" "option" "arg")}
    {Lisp-Entry "jazz.get-option" define #f 741 9 741 24 ("cdr" "if" "assoc" "pair" "let" "options" "name")}
    {Lisp-Entry "jazz.split-command-line" define #f 748 9 748 32 ("reverse" "else" "begin" "cons" "member" "cond" "cdr" "rest" "jazz.convert-option" "opt" "car" "jazz.option?" "pair?" "and" "if" "rev-options" "args" "loop" "let" "cont" "missing-argument-for-option" "options-with-args" "options-with-no-args" "arguments")}
    {Lisp-Entry "jazz.call-process" define #f 775 9 775 26 ("jazz.error" "0" "=" "not" "if" "process-status" "code" "stderr-redirection:" "stdout-redirection:" "stdin-redirection:" "directory:" "arguments:" "path:" "list" "open-process" "port" "let" "directory" "#!key" "arguments" "path")}
    {Lisp-Entry "jazz.feedback" define #f 794 9 794 22 ("force-output" "newline" "jazz.format" "apply" "display" "rest" "fmt-string")}
    {Lisp-Entry "jazz.crash-reporter" define #f 805 8 805 27 ()}
    {Lisp-Entry "jazz.set-crash-reporter" define #f 809 9 809 32 ("jazz.crash-reporter" "set!" "proc")}})
"block"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "block.scm"} 1288732032
    {Lisp-Entry "jazz.testing?" define #f 37 8 37 21 ("make-parameter")}
    {Lisp-Entry "jazz.testing" define #f 40 8 40 20 ("make-parameter")}
    {Lisp-Entry "jazz.generate-symbol-for" define #f 44 8 44 32 ("make-parameter")}
    {Lisp-Entry "jazz.generate-symbol-context" define #f 47 8 47 36 ("make-parameter")}
    {Lisp-Entry "jazz.generate-symbol-counter" define #f 50 8 50 36 ("make-parameter")}
    {Lisp-Entry "jazz.source-code" define #f 54 9 54 25 ("##source-code" "##source?" "if" "expr")}
    {Lisp-Entry "block" define-macro ("syntax") 60 20 60 25 (",@body" "begin" "0" "jazz.generate-symbol-counter" "jazz.generate-symbol-context" "cddr" "body" "cadr" "jazz.source-code" "name" "let" "form-src" "lambda")}})
"boot"
 ({Lisp-File-Entry {File Jazz "kernel" "boot.scm"} 1288818285
    {Lisp-Entry "jazz.Kernel" define #f 37 8 37 19 ("list")}
    {Lisp-Entry "jazz.load-kernel" define #f 58 8 58 24 ("set!" "jazz.Kernel" "jazz.source" "string-append" "load" "path" "for-each" "begin" "not" "if" "lambda" "loaded?" "let")}})
"build"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "build.scm"} 1289506007
    {Lisp-Entry "kernel.build" block #f 37 7 37 19 ("jazz.build-library-impl" "jazz.build-library" "jazz.build-image-impl" "jazz.build-image" "jazz.manifest-needs-rebuild?-impl" "jazz.manifest-needs-rebuild?" "set!" "jazz.kernel-declares")
      {Lisp-Entry "jazz.for-each-jazz-version" define #f 48 9 48 35 ("jazz.kludged-get-jazz-versions" "for-each" "proc")}
      {Lisp-Entry "jazz.for-each-higher-jazz-version" define #f 52 9 52 42 ("%%cdr" "begin" "jazz.version-number" "%%fx>" "%%car" "jazz-version" "%%null?" "%%not" "if" "jazz.kludged-get-jazz-versions" "jazz-versions" "iter" "let" "proc" "version")}
      {Lisp-Entry "jazz.kernel/product-needs-rebuild?" define #f 62 9 62 43 ("set!" "all" "kernel" "jazz.version-rebuild" "%%memq" "jazz-version" "lambda" "jazz.for-each-higher-jazz-version" "rebuild?" "let" "jazz.gambit-uptodate?" "or" "%%not" "if" "jazz.load-version-file" "gambit-stamp" "gambit-version" "version" "receive" "version-file")}
      {Lisp-Entry "jazz.kernel/product-architecture-needs-rebuild?" define #f 75 9 75 56 ("set!" "jazz.version-recompile" "all" "kernel" "jazz.version-rebuild" "%%memq" "jazz-version" "lambda" "jazz.for-each-higher-jazz-version" "rebuild-architecture?" "let" "jazz.gambit-uptodate?" "or" "%%not" "if" "jazz.load-version-file" "gambit-stamp" "gambit-version" "version" "receive" "version-file")}
      {Lisp-Entry "jazz.load-version-file" define #f 89 9 89 31 ("values" "gambit-stamp" "gambit-version" "read" "version" "let" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "file-exists?" "if" "version-file")}
      {Lisp-Entry "jazz.manifest-needs-rebuild?-impl" define #f 100 9 100 42 ("set!" "%%memq" "and" "all" "'all" "%%eq?" "or" "if" "jazz.version-recompile" "recompile" "jazz.version-rebuild" "rebuild" "jazz-version" "lambda" "jazz.for-each-higher-jazz-version" "rebuild?" "%%manifest-version" "version" "%%manifest-name" "name" "let" "manifest")}
      {Lisp-Entry "jazz.build-image-impl" define #f 119 9 119 30 ("feedback:" "install-dir" "'install-dir" "jazz.print-expression-variable" "generate-kernel-interpret" "jazz.print-configuration" "generate-configuration" "jazz.executable-extension" "jazz.add-extension" "EXE" "'EXE" "jazz.obliterate-PE-timestamp" "jazz.build-single-objects?" "jazz.join-strings" "path-strip-trailing-directory-separator" "exe" "'exe" "##gambc-cc" "jazz.create-directories" "c-files" "jazz.pathname-name" "kernel-name" "jazz.pathname-dir" "link-options" "unix" "link-libraries" "gambit-link-libraries" "jazz.get-product" "%%product-package" "jazz.package-pathname" "rcname" "split" "jazz.quote-gcc-pathname" "%%list" "resource-files" "directory:" "jazz.call-process" "jazz.file-needs-update?" "rcfile" "res" "rc" "with-resources" "windows" "case" "else" "cond" "lf" "'lf" "jazz.source" "'jazz.source" "jazz.source-built" "'jazz.source-built" "jazz.gambit-dir" "'jazz.gambit-dir" "jazz.pathname-normalize" "jazz.built" "'jazz.built" "executable" "'executable" "jazz.image" "'jazz.image" "jazz.product" "'jazz.product" "jazz.print-variable" "link-image" "image-file" "base:" "link-incremental" "warnings?:" "link-flat" "files" "<" "link-file" "generate-resources" "main-filename" "product-filename" "compile-product-file" "generate-main" "main?" "generate-product" "product?" "compile-product" "build-product" "jazz.print-architecture" "file" "load" "begin" "compile-source-file" "compile-kernel-file" "generate-architecture" "architecture?" "compile-kernel" "build-kernel" "jazz.file-modification-time" "kernel-time" "system-stamp" "system-version" "jazz.get-jazz-version-number" "write" "lambda" "jazz.platform-eol-encoding" "eol-encoding:" "path:" "list" "call-with-output-file" "touched?" "set!" "delete-file" "file-exists?" "touch" "was-touched?" "jazz.kernel/product-architecture-needs-rebuild?" "rebuild-architecture?" "jazz.kernel/product-needs-rebuild?" "proc" "version-file" "with-version-file" "jazz.update-manifest-compile-time" "output:" "options:" "compile-file-to-c" "jazz.pathname-standardize" "standardized-path" "debug-source" "debug-location" "debug-environments" "options" "jazz.file-exists?" "or" "jazz.load-updated-manifest" "jazz.manifest-uptodate?" "hash-changed?" "jazz.Manifest-Extension" "mnf" "jazz.Digest-Extension" "digest" "dst" "src" "dir" "name" "rebuild?" "compile-file" "apply" "rest" "fmt-string" "feedback-message" "newline" "display" "output" "line" "print" "product-file" "kernel-file" "dest-file" "build-file" "%%string-append" "path" "source-file" "define" "product-dir" "string-append" "kernel-dir" "jazz.Build-Repository" "%%repository-directory" "build-dir" "jazz.relativise-directory" "source-dir" "path-normalize" "gambit-dir" "library" "'library" "%%eq?" "library-image?" "gambit-library" "%%symbol->string" "%%not" "if" "product-name" "let" "jazz.feedback" "feedback" "maximum-heap" "minimum-heap" "console?" "kernel?" "image" "resources" "jazz.kernel-install" "destination-directory" "jazz.kernel-destination" "destination" "jazz.kernel-source" "source" "kernel-interpret?" "include-compiler?" "jazz.kernel-mutable-bindings?" "mutable-bindings?" "jazz.kernel-debug-source?" "debug-source?" "jazz.kernel-debug-location?" "debug-location?" "jazz.kernel-debug-environments?" "debug-environments?" "jazz.kernel-optimize?" "optimize?" "jazz.kernel-safety" "safety" "jazz.kernel-windowing" "windowing" "jazz.kernel-platform" "platform" "jazz.kernel-system" "system" "#!key" "product")}
      {Lisp-Entry "jazz.obliterate-PE-timestamp" define #f 641 9 641 37 ("cadr" "car" "patch" "lambda" "map" "truncate:" ",pathname" "path:" "open-output-file" "dll-port" "else" "2" "dll" "DLL" "case" "#xD8" "4" "#x88" "patches" "write-u8" "begin" "<" "if" "0" "i" "loop" "output-port-byte-position" "byte-value" "size" "offset" "fill-bytes-offset" "close-port" "1" "#x04" "#x100" "#x10000" "*" "+" "result" "b2" "read-u8" "b1" "#x22D" "input-port-byte-position" "open-input-file" "port" "let" "get-checksum-offset" "define" "type" "pathname")}
      {Lisp-Entry "jazz.pkg-config" define #f 683 9 683 24 ("jazz.error" "get-output-string" "jazz.pipe-no-return" "begin" "0" "process-status" "%%fx=" "if" "arguments:" "path:" "%%list" "open-process" "process-port" "open-output-string" "string-port" "let" "libname" "what")}
      {Lisp-Entry "jazz.pkg-config-cflags" define #f 692 9 692 31 ("jazz.pkg-config" "libname")}
      {Lisp-Entry "jazz.pkg-config-libs" define #f 695 9 695 29 ("jazz.pkg-config" "libname")}
      {Lisp-Entry "jazz.pkg-config-version" define #f 698 9 698 32 ("jazz.pkg-config" "libname")}
      {Lisp-Entry "jazz.pipe-no-return" define #f 701 9 701 28 ("write-char" "begin" "%%eq?" "eof-object?" "or" "%%not" "if" "read-char" "c" "iterate" "let" "output" "input")}
      {Lisp-Entry "jazz.build-library-impl" define #f 715 9 715 32 ("delete-file" "DLL" "'DLL" "jazz.obliterate-PE-timestamp" "jazz.build-single-objects?" "path-normalize" "path-strip-trailing-directory-separator" ",library-o1" ",linkfile" ",header-o" "windows" "jazz.call-process" "%%length" "%%number->string" "warnings?:" "subunit-name" "link-flat" "cc-options:" "options:" "compile-file" "output:" "compile-file-to-c" "jazz.create-build-package" "build-library" "jazz.get-subunit-names" "header-o" "header-c" "jazz.Library-Manifest-Extension" "linkfile" "o1-exists?" "library-o1" "1" "jazz.Library-Extension" "jazz.with-numbered-pathname" "jazz.pathname-dir" "library-dir" "jazz.Build-Repository" "jazz.relocate-product-library-name-base" "library-base" "jazz.product-descriptor-update" "jazz.ill-formed-field-error" "jazz.cond-expand-each" "update" "%%product-package" "package" "jazz.get-product" "product" "%%manifest-compile-time-hash" "write" "newline" "%%symbol->string" "string-append" "display" "port" "jazz.platform-eol-encoding" "eol-encoding:" "path:" "call-with-output-file" "library" "header-" "make-library-header" "%%null?" "subunits-uptodate?" "%%digest-hash" "jazz.manifest-needs-rebuild?" "%%not" "jazz.manifest-uptodate?" "digest" "jazz.resource-pathname" "src-pathname" "manifest" "lib-uptodate?" "bin-uptodate?" "obj-uptodate?" "lib" "bin" "obj" "src" "jazz.with-unit-resources" "%%table-ref" "image-unit-compile-time-hash" "unit-name" "unit-uptodate?" "load" "%%cadr" "%%table-set!" "unit" "for-each" "units" "lib-name" "jazz.register-image-units" "set!" "begin" "jazz.file-exists?" "load-image-units-manifest" "eq?" "test:" "%%make-table" "digest-table" "sub-units" "header" "library-manifest-uptodate?" "append" "'else" "or" "raw-options" "'link-options" "link-options-pair" "libdir" "jazz.pkg-config" "%%apply" "jazz.split-string" "pkg-config" "%%car" "case" "else" "cond" "jazz.error" "%%string-append" "%%list" "jazz.quote-gcc-pathname" "jazz.quote-jazz-gcc-pathname" "quoted-dir" "jazz-relative-dir" "let*" "%%string?" "%%substring" "0" "substring" "%%string=?" "%%fx>=" "and" "s-length" "%%string-length" "p-length" "s" "p" "prefix" "dir" "expand-libdir" "opt" "expand-link-option" "%%cdr" "%%pair?" "%%assq" "platform-options-pair" "let" "platform-options" "link-options" "%%cons" "x" "lambda" "list->table" "table->list" "car" "map" "list" "remove-duplicates" "apply" "if" "rest" "fmt-string" "feedback-message" "define" "jazz.feedback" "feedback" "jazz.kernel-install" "destination-directory" "jazz.kernel-platform" "platform" "options" "#!key" "descriptor" "product-name")}
      {Lisp-Entry "jazz.print-architecture" define #f 878 9 878 32 ("jazz.get-jazz-version-number" "jazz.kernel-version" "'jazz.kernel-version" "jazz.kernel-destination" "'jazz.kernel-destination" "jazz.kernel-mutable-bindings?" "'jazz.kernel-mutable-bindings?" "jazz.kernel-debug-source?" "'jazz.kernel-debug-source?" "jazz.kernel-debug-location?" "'jazz.kernel-debug-location?" "jazz.kernel-debug-environments?" "'jazz.kernel-debug-environments?" "jazz.kernel-optimize?" "'jazz.kernel-optimize?" "jazz.kernel-safety" "'jazz.kernel-safety" "jazz.kernel-windowing" "'jazz.kernel-windowing" "jazz.kernel-platform" "'jazz.kernel-platform" "newline" "jazz.kernel-system" "'jazz.kernel-system" "jazz.print-variable" "output" "destination" "mutable-bindings?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system")}
      {Lisp-Entry "jazz.print-variable" define #f 902 9 902 28 ("write" "list?" "%%symbol?" "or" "if" "newline" "display" "output" "value" "variable")}
      {Lisp-Entry "jazz.print-expression-variable" define #f 915 9 915 39 ("write" "newline" "display" "output" "expression" "variable")}}}
  {Lisp-File-Entry {File Jazz "kernel" "build.scm"} 1289506007
    {Lisp-Entry "jazz.setup-versions" define #f 42 9 42 28 ("jazz.source" "string-append" "jazz.jazz-versions-file" "set!" "jazz.format" "stamp" "jazz.get-jazz-gambit-stamp" "jazz-gambit-stamp" "jazz.get-jazz-gambit-version" "jazz-gambit-version" "system-stamp" "system-version" "jazz.gambit-uptodate?" "jazz.gambit-jazz?" "or" "if" "##unbound?" "not" "and" "system-vendor" "'system-vendor" "##global-var-ref" "vendor-f" "let" "vendor" "1" "exit" "newline" "display" "message" "wrong-version" "validate-gambit-version" "define")}
    {Lisp-Entry "jazz.unspecified-option-value" define #f 73 8 73 37 ("unspecified-option" "'unspecified-option" "list")}
    {Lisp-Entry "jazz.unspecified-option" define #f 77 9 77 32 ("jazz.unspecified-option-value")}
    {Lisp-Entry "jazz.specified-option?" define #f 81 9 81 31 ("jazz.unspecified-option-value" "eq?" "not" "option")}
    {Lisp-Entry "jazz.or-option" define #f 85 9 85 23 ("cdr" "jazz.specified-option?" "car" "option" "default" "null?" "if" "scan" "iter" "let" "rest")}
    {Lisp-Entry "jazz.define-option" define-macro #f 100 15 100 33 ("car" "set!" "null?" "if" "rest" ",name" ",default" ",global" "define" "begin" "gensym" "global" "let" "default" "name")}
    {Lisp-Entry "jazz.default-name" define-macro ("option") 110 20 110 37 ()}
    {Lisp-Entry "jazz.default-system" define-macro ("option") 113 20 113 39 ("gambit" "'gambit")}
    {Lisp-Entry "jazz.default-platform" define-macro ("option") 116 20 116 41 ("jazz.unspecified-option")}
    {Lisp-Entry "jazz.default-windowing" define-macro ("option") 119 20 119 42 ("jazz.unspecified-option")}
    {Lisp-Entry "jazz.default-safety" define-macro ("option") 122 20 122 39 ("release" "'release")}
    {Lisp-Entry "jazz.default-optimize" define-macro ("option") 125 20 125 41 ()}
    {Lisp-Entry "jazz.default-debug-environments" define-macro ("option") 128 20 128 51 ()}
    {Lisp-Entry "jazz.default-debug-location" define-macro ("option") 131 20 131 47 ()}
    {Lisp-Entry "jazz.default-debug-source" define-macro ("option") 134 20 134 45 ()}
    {Lisp-Entry "jazz.default-mutable-bindings" define-macro ("option") 137 20 137 49 ()}
    {Lisp-Entry "jazz.default-kernel-interpret" define-macro ("option") 140 20 140 49 ()}
    {Lisp-Entry "jazz.default-destination" define-macro ("option") 143 20 143 44 ()}
    {Lisp-Entry "jazz.make-configuration" define #f 153 9 153 32 ("configuration" "'configuration" "vector" "destination" "kernel-interpret?" "mutable-bindings?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system" "name")}
    {Lisp-Entry "jazz.configuration-name" define #f 156 9 156 32 ("1" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-system" define #f 159 9 159 34 ("2" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-platform" define #f 162 9 162 36 ("3" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-windowing" define #f 165 9 165 37 ("4" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-safety" define #f 168 9 168 34 ("5" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-optimize?" define #f 171 9 171 37 ("6" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-debug-environments?" define #f 174 9 174 47 ("7" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-debug-location?" define #f 177 9 177 43 ("8" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-debug-source?" define #f 180 9 180 41 ("9" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-mutable-bindings?" define #f 183 9 183 45 ("10" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-kernel-interpret?" define #f 186 9 186 45 ("11" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-destination" define #f 189 9 189 39 ("12" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.new-configuration" define #f 193 9 193 31 ("jazz.make-configuration" "jazz.require-destination" "jazz.validate-destination" "jazz.require-kernel-interpret?" "jazz.validate-kernel-interpret?" "jazz.require-mutable-bindings?" "jazz.validate-mutable-bindings?" "jazz.require-debug-source?" "jazz.validate-debug-source?" "jazz.require-debug-location?" "jazz.validate-debug-location?" "jazz.require-debug-environments?" "jazz.validate-debug-environments?" "jazz.require-optimize?" "jazz.validate-optimize?" "jazz.require-safety" "jazz.validate-safety" "jazz.require-windowing" "jazz.validate-windowing" "jazz.require-platform" "jazz.validate-platform" "jazz.require-system" "jazz.validate-system" "jazz.require-name" "jazz.validate-name" "let*" "destination" "kernel-interpret?" "mutable-bindings?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system" "jazz.unspecified-option" "name" "#!key")}
    {Lisp-Entry "jazz.anonymous-configuration-file" define #f 239 8 239 41 ()}
    {Lisp-Entry "jazz.configurations" define #f 242 8 242 27 ()}
    {Lisp-Entry "jazz.list-configurations" define #f 246 9 246 33 ("jazz.configurations" "jazz.sort-configurations" "jazz.describe-configuration" "for-each")}
    {Lisp-Entry "jazz.require-configuration" define #f 250 9 250 35 ("jazz.error" "not" "if" "jazz.find-configuration" "or" "name")}
    {Lisp-Entry "jazz.require-default-configuration" define #f 256 9 256 43 ("jazz.require-configuration")}
    {Lisp-Entry "jazz.find-configuration" define #f 260 9 260 32 ("jazz.load-configuration-file" "file-exists?" "string-append" "configuration-file" "jazz.destination-directory" "configuration-dir" "and" "car" "not" "if" "jazz.find-configuration-pair" "pair" "configuration" "let" "name")}
    {Lisp-Entry "jazz.find-configuration-pair" define #f 275 9 275 37 ("cdr" "jazz.configuration-name" "eq?" "car" "configuration" "null?" "if" "jazz.configurations" "configurations" "iter" "let" "name")}
    {Lisp-Entry "jazz.sort-configurations" define #f 285 9 285 33 ("symbol->string" "string-ci<?" "else" "not" "cond" "n2" "jazz.configuration-name" "n1" "let" "c2" "c1" "lambda" "jazz.sort" "configurations")}
    {Lisp-Entry "jazz.register-configuration" define #f 298 9 298 36 ("jazz.save-configurations" "list" "append" "jazz.configurations" "set!" "set-car!" "if" "jazz.find-configuration-pair" "pair" "jazz.configuration-name" "name" "let" "configuration")}
    {Lisp-Entry "jazz.delete-configuration" define #f 307 9 307 34 ("jazz.save-configurations" "jazz.configuration-name" "eq?" "c2" "c1" "lambda" "jazz.delete" "jazz.configurations" "set!" "name")}
    {Lisp-Entry "jazz.load-configurations" define #f 316 9 316 33 ("jazz.load-configuration-file" "jazz.register-configuration" "jazz.anonymous-configuration-file" "read-all" "jazz.configurations" "set!" "jazz.new-configuration" "apply" "eof-object?" "read" "let" "read-configuration" "define" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "jazz.named-configurations-file" "file-exists?" "if")}
    {Lisp-Entry "jazz.load-configuration-file" define #f 331 9 331 37 ("read" "jazz.new-configuration" "apply" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "file")}
    {Lisp-Entry "jazz.save-configurations" define #f 337 9 337 33 ("for-each" "jazz.named-configurations-file" "jazz.feedback" "feedback:" "jazz.create-directories" "begin" "jazz.sort-configurations" "delete-file" "file-exists?" "lambda" "jazz.guess-platform" "jazz.platform-eol-encoding" "eol-encoding:" "jazz.anonymous-configuration-file" "path:" "list" "call-with-output-file" "jazz.configurations" "receive" "jazz.configuration-destination" "jazz.configuration-kernel-interpret?" "jazz.configuration-mutable-bindings?" "jazz.configuration-debug-source?" "jazz.configuration-debug-location?" "jazz.configuration-debug-environments?" "jazz.configuration-optimize?" "jazz.configuration-safety" "jazz.configuration-windowing" "jazz.configuration-platform" "jazz.configuration-system" "jazz.print-configuration" "output" "print-configuration" "cons" "cdr" "jazz.configuration-name" "not" "car" "configuration" "values" "null?" "if" "named" "anonymous" "split" "let" "configurations" "split-configurations" "define")}
    {Lisp-Entry "jazz.describe-configuration" define #f 381 9 381 36 ("or" "jazz.feedback" "jazz.configuration-destination" "destination" "jazz.configuration-kernel-interpret?" "kernel-interpret?" "jazz.configuration-mutable-bindings?" "mutable-bindings?" "jazz.configuration-debug-source?" "debug-source?" "jazz.configuration-debug-location?" "debug-location?" "jazz.configuration-debug-environments?" "debug-environments?" "jazz.configuration-optimize?" "optimize?" "jazz.configuration-safety" "safety" "jazz.configuration-windowing" "windowing" "jazz.configuration-platform" "platform" "jazz.configuration-system" "system" "jazz.configuration-name" "name" "let" "configuration")}
    {Lisp-Entry "jazz.configure" define #f 413 9 413 23 ("jazz.describe-configuration" "jazz.register-configuration" "destination:" "kernel-interpret?:" "mutable-bindings?:" "debug-source?:" "debug-location?:" "debug-environments?:" "optimize?:" "safety:" "windowing:" "platform:" "system:" "name:" "jazz.new-configuration" "configuration" "let" "destination" "kernel-interpret?" "mutable-bindings?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system" "jazz.unspecified-option" "name" "#!key")}
    {Lisp-Entry "jazz.require-name" define #f 450 9 450 26 ("jazz.default-name" "jazz.or-option" "name")}
    {Lisp-Entry "jazz.validate-name" define #f 454 9 454 27 ("jazz.error" "symbol->string" "jazz.valid-filename?" "symbol?" "and" "not" "or" "if" "name")}
    {Lisp-Entry "jazz.valid-systems" define #f 465 8 465 26 ("gambit")}
    {Lisp-Entry "jazz.require-system" define #f 469 9 469 28 ("jazz.default-system" "jazz.or-option" "system")}
    {Lisp-Entry "jazz.validate-system" define #f 473 9 473 29 ("jazz.error" "jazz.valid-systems" "memq" "if" "system")}
    {Lisp-Entry "jazz.valid-platforms" define #f 484 8 484 28 ("unix" "windows" "mac")}
    {Lisp-Entry "jazz.guess-platform" define #f 490 9 490 28 ("windows" "'windows" "else" "unix" "'unix" "linux-gnu" "'linux-gnu" "mac" "'mac" "apple" "'apple" "eq?" "cond" "caddr" "os" "system-type" "cadr" "system" "let")}
    {Lisp-Entry "jazz.require-platform" define #f 498 9 498 30 ("jazz.guess-platform" "jazz.default-platform" "jazz.or-option" "platform")}
    {Lisp-Entry "jazz.validate-platform" define #f 502 9 502 31 ("jazz.error" "jazz.valid-platforms" "memq" "if" "platform")}
    {Lisp-Entry "jazz.valid-windowings" define #f 513 8 513 29 ("x11" "carbon")}
    {Lisp-Entry "jazz.require-windowing" define #f 519 9 519 31 ("jazz.default-windowing" "jazz.or-option" "unix" "windows" "x11" "'x11" "mac" "case" "guess-windowing" "define" "windowing" "platform")}
    {Lisp-Entry "jazz.validate-windowing" define #f 529 9 529 32 ("jazz.error" "jazz.valid-windowings" "memq" "if" "windowing")}
    {Lisp-Entry "jazz.valid-safeties" define #f 540 8 540 27 ("release" "debug" "core")}
    {Lisp-Entry "jazz.require-safety" define #f 546 9 546 28 ("jazz.default-safety" "jazz.or-option" "safety")}
    {Lisp-Entry "jazz.validate-safety" define #f 550 9 550 29 ("jazz.error" "jazz.valid-safeties" "memq" "if" "safety")}
    {Lisp-Entry "jazz.valid-optimize" define #f 561 8 561 27 ()}
    {Lisp-Entry "jazz.require-optimize?" define #f 566 9 566 31 ("jazz.default-optimize" "jazz.or-option" "optimize")}
    {Lisp-Entry "jazz.validate-optimize?" define #f 570 9 570 32 ("jazz.error" "jazz.valid-optimize" "memq" "if" "optimize")}
    {Lisp-Entry "jazz.valid-debug-environments" define #f 581 8 581 37 ()}
    {Lisp-Entry "jazz.require-debug-environments?" define #f 586 9 586 41 ("jazz.default-debug-environments" "jazz.or-option" "debug-environments")}
    {Lisp-Entry "jazz.validate-debug-environments?" define #f 590 9 590 42 ("jazz.error" "jazz.valid-debug-environments" "memq" "if" "debug-environments")}
    {Lisp-Entry "jazz.valid-debug-location" define #f 601 8 601 33 ()}
    {Lisp-Entry "jazz.require-debug-location?" define #f 606 9 606 37 ("jazz.default-debug-location" "jazz.or-option" "debug-location")}
    {Lisp-Entry "jazz.validate-debug-location?" define #f 610 9 610 38 ("jazz.error" "jazz.valid-debug-location" "memq" "if" "debug-location")}
    {Lisp-Entry "jazz.valid-debug-source" define #f 621 8 621 31 ()}
    {Lisp-Entry "jazz.require-debug-source?" define #f 626 9 626 35 ("jazz.default-debug-source" "jazz.or-option" "debug-source")}
    {Lisp-Entry "jazz.validate-debug-source?" define #f 630 9 630 36 ("jazz.error" "jazz.valid-debug-source" "memq" "if" "debug-source")}
    {Lisp-Entry "jazz.valid-mutable-bindings" define #f 641 8 641 35 ()}
    {Lisp-Entry "jazz.require-mutable-bindings?" define #f 646 9 646 39 ("jazz.default-mutable-bindings" "jazz.or-option" "mutable-bindings")}
    {Lisp-Entry "jazz.validate-mutable-bindings?" define #f 650 9 650 40 ("jazz.error" "jazz.valid-mutable-bindings" "memq" "if" "mutable-bindings")}
    {Lisp-Entry "jazz.valid-kernel-interpret" define #f 661 8 661 35 ()}
    {Lisp-Entry "jazz.require-kernel-interpret?" define #f 666 9 666 39 ("jazz.default-kernel-interpret" "jazz.or-option" "kernel-interpret")}
    {Lisp-Entry "jazz.validate-kernel-interpret?" define #f 670 9 670 40 ("jazz.error" "jazz.valid-kernel-interpret" "memq" "if" "kernel-interpret")}
    {Lisp-Entry "jazz.require-destination" define #f 681 9 681 33 ("jazz.default-destination" "jazz.or-option" "destination")}
    {Lisp-Entry "jazz.validate-destination" define #f 685 9 685 34 ("jazz.error" "jazz.valid-filename?" "'bin" "eq?" "user" "build" "bin" "memq" "title" "alias" "lambda" "jazz.parse-destination" "string?" "and" "not" "or" "if" "destination")}
    {Lisp-Entry "jazz.configuration-directory" define #f 697 9 697 37 ("jazz.configuration-destination" "jazz.configuration-name" "jazz.destination-directory" "configuration")}
    {Lisp-Entry "jazz.configuration-file" define #f 704 9 704 32 ("string-append" "jazz.configuration-directory" "dir" "let" "configuration")}
    {Lisp-Entry "jazz.default-target" define #f 714 8 714 27 ("all" "'all")}
    {Lisp-Entry "jazz.make-symbols" define #f 718 9 718 26 ("console-port" "newline" "tail" "list" ">=" "fixnum?" "-jobs" "-j" "jobs:" "j:" "set!" "jazz.parse-link" "value" "-link" "link:" "option" "for-each" "jazz.make-product" "jazz.make-install" "install" "jazz.make-kernel" "kernel" "jazz.make-cleanlibrary" "cleanlibrary" "jazz.make-cleanobject" "cleanobject" "jazz.make-cleankernel" "cleankernel" "jazz.make-clean" "clean" "case" "make-target" "name" "jobs" "link" "symbol" "make-symbol" "cadr" "cons" "cddr" "cdr" "pair?" "symbol->string" "string-ref" "eqv?" "and" "keyword?" "symbol?" "or" "car" "obj" "reverse" "null?" "options" "syms" "scan" "iter" "parse-symbols" "jazz.error" "else" "'executable" "executable" "exe" "'library" "library" "lib" "memv" "cond" "jazz.require-configuration" "jazz.require-default-configuration" "jazz.default-target" "string=?" "at" "0" "substring" "string->symbol" "standardize-image" "string-length" "1" "+" "=" "image" "configuration" "target" "lambda" "parse-target/configuration" "not" "if" "jazz.string-find" "colon" "let" "proc" "str" "parse-target/configuration/image" "define" "local?" "symbols")}
    {Lisp-Entry "jazz.make" define #f 814 9 814 18 ("list" "jazz.make-symbols" "symbol")}
    {Lisp-Entry "jazz.clean-toplevel-file?" define #f 823 9 823 34 ("jazz.pathname-name" "member" "not" "ignored-toplevel-files" "define" "level" "file")}
    {Lisp-Entry "jazz.clean-toplevel-directory?" define #f 830 9 830 39 ("jazz.pathname-name" "member" "not" "ignored-toplevel-directories" "define" "level" "dir")}
    {Lisp-Entry "jazz.make-clean" define #f 837 9 837 24 ("jazz.empty-directory" "jazz.clean-toplevel-directory?" "level" "lambda" "jazz.clean-toplevel-file?" "0" "jazz.delete-directory" "file-exists?" "if" "jazz.configuration-directory" "dir" "let" "jazz.feedback" "1" "jazz.delete-feedback" "delete-feedback" "define" "configuration")}
    {Lisp-Entry "jazz.make-cleankernel" define #f 858 9 858 30 ("jazz.empty-directory" "jazz.pathname-name" "string=?" "not" "jazz.clean-toplevel-directory?" "and" "level" "lambda" "jazz.clean-toplevel-file?" "0" "jazz.delete-directory" "file-exists?" "if" "jazz.configuration-directory" "dir" "let" "jazz.feedback" "1" "jazz.delete-feedback" "delete-feedback" "define" "configuration")}
    {Lisp-Entry "jazz.make-cleanobject" define #f 880 9 880 30 ("jazz.pathname-name" "string=?" "lambda" "0" "jazz.delete-directory" "file-exists?" "if" "jazz.configuration-directory" "jazz.feedback" "jazz.cleanup-package" "jazz.empty-directory" "dir" "empty-objects" "jazz.numeric-extension?" "jazz.extension?" "or" "jazz.pathname-extension" "ext" "let" "level" "file" "object-file?" "2" "jazz.delete-feedback" "delete-feedback" "define" "configuration")}
    {Lisp-Entry "jazz.make-cleanlibrary" define #f 918 9 918 31 ("jazz.pathname-name" "string=?" "lambda" "0" "jazz.delete-directory" "file-exists?" "if" "jazz.configuration-directory" "jazz.feedback" "jazz.cleanup-package" "jazz.empty-directory" "dir" "empty-libraries" "jazz.numeric-extension?" "jazz.extension?" "or" "jazz.pathname-extension" "ext" "let" "level" "file" "library-file?" "2" "jazz.delete-feedback" "delete-feedback" "define" "configuration")}
    {Lisp-Entry "jazz.cleanup-package" define #f 957 9 957 29 ("else" "delete-file" "string-append" "path" "string=?" "if" "car" "name" "1" "0" "length" "case" "jazz.directory-content" "content" "let" "feedback" "level" "dir")}
    {Lisp-Entry "jazz.delete-feedback" define #f 971 9 971 29 ("jazz.feedback" "<=" "if" "level" "path" "lambda" "depth")}
    {Lisp-Entry "jazz.make-install" define #f 982 9 982 26 ("jazz.error" "configuration")}
    {Lisp-Entry "jazz.make-kernel" define #f 991 9 991 25 ("kernel" "'kernel" ",argument" "jazz.call-process" "symbol->string" "jazz.format" "string-append" "argument" "configuration-name" "target" "build-recursive" "jazz.load-configuration-file" "file-exists?" "if" "jazz.configuration-file" "configuration-file" "jazz.require-default-configuration" "or" "jazz.feedback" "console?:" "kernel?:" "image:" "destination-directory:" "destination:" "source:" "kernel-interpret?:" "include-compiler?:" "mutable-bindings?:" "debug-source?:" "debug-location?:" "debug-environments?:" "optimize?:" "safety:" "windowing:" "platform:" "system:" "jazz.build-image" "jazz.configuration-directory" "destination-directory" "jazz.configuration-destination" "destination" "jazz.source" "source" "jazz.configuration-kernel-interpret?" "kernel-interpret?" "jazz.configuration-mutable-bindings?" "mutable-bindings?" "jazz.configuration-debug-source?" "debug-source?" "jazz.configuration-debug-location?" "debug-location?" "jazz.configuration-debug-environments?" "debug-environments?" "jazz.configuration-optimize?" "optimize?" "jazz.configuration-safety" "safety" "jazz.configuration-windowing" "windowing" "jazz.configuration-platform" "platform" "jazz.configuration-system" "system" "jazz.configuration-name" "name" "let" "build" "build-kernel" "define" "local?" "image" "configuration")}
    {Lisp-Entry "jazz.make-product" define #f 1053 9 1053 26 ("number->string" "if" "symbol->string" "jazz.configuration-directory" "string-append" "jazz.call-process" "jazz.make-kernel" "jobs" "link" "configuration" "product")}
    {Lisp-Entry "jazz.print" define #f 1068 9 1068 19 ("newline" "display" "output" "line")}
    {Lisp-Entry "jazz.debug" define #f 1073 9 1073 19 ("console-port" "jazz.print" "rest")}
    {Lisp-Entry "jazz.format" define #f 1082 9 1082 20 ("get-output-string" "open-output-string" "else" "write-char" "eqv?" "cond" "begin" "eof-object?" "not" "if" "c" "iter" "newline" "%" "write" "s" "cdr" "set!" "car" "display" "a" "case" "read-char" "read" "directive" "format-directive" "done?" "open-input-string" "control" "let" "output" "format-to" "define" "arguments" "fmt-string")}
    {Lisp-Entry "jazz.collect-if" define #f 1121 9 1121 24 ("cdr" "cons" "car" "value" "null?" "not" "if" "scan" "iter" "let" "lst" "predicate")}
    {Lisp-Entry "jazz.filter" define #f 1131 9 1131 20 ("cons" "eq?" "new-tail" "cdr" "tail" "car" "head" "null?" "if" "recur" "let" "lis" "pred")}
    {Lisp-Entry "jazz.delete" define #f 1143 9 1143 20 ("not" "y" "lambda" "jazz.filter" "test" "lis" "x")}
    {Lisp-Entry "jazz.string-find" define #f 1152 9 1152 25 ("1" "+" "else" "string-ref" "char=?" ">=" "cond" "0" "n" "iter" "string-length" "len" "let" "c" "str")}
    {Lisp-Entry "jazz.string-ends-with?" define #f 1163 9 1163 31 ("-" "substring" "string=?" ">=" "and" "tl" "string-length" "sl" "let" "target" "str")}
    {Lisp-Entry "jazz.split-string" define #f 1170 9 1170 26 ("+" "substring" "cons" "set!" "string-ref" "eqv?" "begin" "0" ">" "if" "1" "-" "pos" "iter" "string-length" "end" "lst" "let" "separator" "str")}
    {Lisp-Entry "jazz.join-strings" define #f 1184 9 1184 26 ("get-output-string" "cdr" "string" "lambda" "for-each" "car" "display" "open-output-string" "output" "let" "separator" "strings")}
    {Lisp-Entry "jazz.valid-filename?" define #f 1199 9 1199 29 ("memv" "char-numeric?" "char-alphabetic?" "or" "string-ref" "c" "0" "<" "if" "1" "string-length" "-" "n" "iter" "let" "str")}
    {Lisp-Entry "jazz.error" define #f 1216 9 1216 19 ("error" "jazz.format" "apply" "error-string" "let" "rest" "fmt-string")}
    {Lisp-Entry "jazz.prompt" define #f 1226 8 1226 19 ()}
    {Lisp-Entry "jazz.display-exception?" define #f 1229 8 1229 31 ()}
    {Lisp-Entry "jazz.display-backtrace?" define #f 1232 8 1232 31 ()}
    {Lisp-Entry "jazz.build-system-repl" define #f 1236 9 1236 31 ("set!" "continuation-return" "with-exception-handler" "stop" "processed?" "read-line" "jazz.prompt" "display" "newline" "newline?" "loop" "jazz.process-jamini" "jazz.load-configurations" "jazz.setup-settings" "force-output" "jazz.get-jazz-version-number" "jazz.present-version" "jazz.format" "console-port" "1000" "0" "display-continuation-backtrace" "cont" "continuation-capture" "jazz.display-backtrace?" "display-exception" "jazz.display-exception?" "console" "exc" "debug-exception" "exit" "jazz.print" "jazz.make-symbols" "jazz.setup-kernel-build" "jazz.configure" "apply" "jazz.require-configuration" "jazz.delete-configuration" "car" "null?" "name" "jazz.list-configurations" "jazz.error" "else" "quit" "help-command" "?" "help" "make-command" "make" "configure-command" "configure" "delete-command" "delete" "list-command" "list" "case" "read-all" "arguments" "begin" "read" "let" "input" "lambda" "call-with-input-string" "quit-command" "eof-object?" "if" "output" "command" "process-command" "define")}
    {Lisp-Entry "jazz.build-system-boot" define #f 1321 9 1321 31 ("##repl-debug-main" "jazz.print" "console-port" "console" "or" "map" "jazz.make-symbols" "jazz.setup-kernel-build" "destination:" "kernel-interpret?:" "mutable-bindings?:" "debug-source?:" "debug-location?:" "debug-environments?:" "optimize?:" "safety:" "windowing:" "platform:" "system:" "name:" "jazz.configure" "destination" "kernel-interpret" "mutable-bindings" "debug-source" "debug-location" "debug-environments" "optimize" "safety" "windowing" "platform" "system" "remaining" "lambda" "jazz.split-command-line" "jazz.require-configuration" "jazz.delete-configuration" "jazz.list-configurations" "equal?" "jazz.process-jamini" "jazz.load-configurations" "jazz.setup-settings" "arguments" "car" "action" "jazz.build-system-repl" "null?" "command-line" "cdr" "command-arguments" "unknown-option" "else" "string-ci=?" "cond" "boolean-option" "string->symbol" "symbol-option" "jazz.unspecified-option" "not" "if" "jazz.get-option" "let" "options" "name" "string-option" "read" "init:" "list" "call-with-input-string" "arg" "read-argument" "jazz.format" "opt" "missing-argument-for-option" "1" "exit" "force-output" "newline" "display" "message" "fatal" "define")}
    {Lisp-Entry "jazz.kernel-system" define #f 1422 8 1422 26 ("gambit" "'gambit")}
    {Lisp-Entry "jazz.kernel-platform" define #f 1425 8 1425 28 ()}
    {Lisp-Entry "jazz.kernel-windowing" define #f 1428 8 1428 29 ()}
    {Lisp-Entry "jazz.kernel-safety" define #f 1431 8 1431 26 ("debug" "'debug")}
    {Lisp-Entry "jazz.kernel-optimize?" define #f 1434 8 1434 29 ()}
    {Lisp-Entry "jazz.kernel-debug-environments?" define #f 1437 8 1437 39 ()}
    {Lisp-Entry "jazz.kernel-debug-location?" define #f 1440 8 1440 35 ()}
    {Lisp-Entry "jazz.kernel-debug-source?" define #f 1443 8 1443 33 ()}
    {Lisp-Entry "jazz.kernel-mutable-bindings?" define #f 1446 8 1446 37 ()}
    {Lisp-Entry "jazz.kernel-destination" define #f 1449 8 1449 31 ()}
    {Lisp-Entry "jazz.load-kernel-base" define #f 1453 9 1453 30 ("jazz.source" "string-append" "load")}
    {Lisp-Entry "jazz.load-kernel-build" define #f 1457 9 1457 31 ("jazz.source" "string-append" "load")}
    {Lisp-Entry "jazz.setup-kernel-build" define #f 1473 8 1473 31 ("set!" "jazz.process-buildini" "jazz.load-kernel-build" "begin" "not" "if" "lambda" "kernel-build-setup?" "let")}
    {Lisp-Entry "jazz.process-jamini" define #f 1483 9 1483 28 ("jazz.load-global/local-configurations")}})
"common"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "common.scm"} 1290094685
    {Lisp-Entry "kernel.common" block #f 37 7 37 20 ("jazz.kernel-declares")
      {Lisp-Entry "jazz.load" define #f 50 13 50 22 ("void" "lambda" "%%load" "%%car" "%%null?" "if" "quiet?" "let" "rest" "pathname")}
      {Lisp-Entry "jazz.load" define #f 56 13 56 22 ("load" "rest" "pathname")}
      {Lisp-Entry "jazz.debugger" define-macro ("variable") 65 22 65 35 ()}
      {Lisp-Entry "jazz.compile-options" define-macro ("variable") 68 22 68 42 ("debug-source" "jazz.kernel-debug-source?" "debug-location" "jazz.kernel-debug-location?" "debug-environments" "jazz.kernel-debug-environments?" "if")}
      {Lisp-Entry "jazz.link" define-macro ("variable") 73 22 73 31 ()}
      {Lisp-Entry "jazz.link-options" define-macro ("variable") 76 22 76 39 ()}
      {Lisp-Entry "jazz.jobs" define-macro ("variable") 79 22 79 31 ()}
      {Lisp-Entry "jazz.warnings" define-macro ("variable") 82 22 82 35 ()}
      {Lisp-Entry "jazz.link-objects?" define #f 85 9 85 27 ("jazz.link-options" "objects" "'objects" "%%memq")}
      {Lisp-Entry "jazz.link-libraries?" define #f 88 9 88 29 ("jazz.link-options" "libraries" "'libraries" "%%memq")}
      {Lisp-Entry "jazz.jazzini" define #f 91 8 91 20 ()}
      {Lisp-Entry "jazz.buildini" define #f 94 8 94 21 ()}
      {Lisp-Entry "jazz.load-configuration-files" define #f 98 9 98 38 ("jazz.install-path" "local" "jazz.jazz-settings-directory" "%%string-append" "global" "let" "jazz.load" "file-exists?" "if" "file" "load-if-exists" "define" "install?" "filename")}
      {Lisp-Entry "jazz.process-jazzini" define #f 111 9 111 29 ("jazz.jazzini" "jazz.load-configuration-files" "install?")}
      {Lisp-Entry "jazz.process-buildini" define #f 114 9 114 30 ("jazz.buildini" "jazz.load-configuration-files" "install?")}
      {Lisp-Entry "jazz.manifest-needs-rebuild?" define-macro ("variable") 123 22 123 50 ("rest" "lambda")}
      {Lisp-Entry "jazz.build-image" define-macro ("variable") 127 22 127 38 ()}
      {Lisp-Entry "jazz.build-library" define-macro ("variable") 128 22 128 40 ()}
      {Lisp-Entry "jazz.custom-compile/build" define #f 136 9 136 34 ("lambda" "for-each" "begin" "jazz.error" ",force?" "force?:" ",@compile-args" "jazz.compile-unit" "apply" "assq" "compile-args" "let" "if" "core.unit.builder" "'core.unit.builder" "jazz.load-unit" "force?" "pre-build" "unit" "#!key" "unit-specs")}
      {Lisp-Entry "jazz.build-feedback" define #f 156 8 156 27 ("jazz.feedback")}
      {Lisp-Entry "jazz.listify" define #f 165 9 165 21 ("%%list" "%%pair?" "%%null?" "or" "if" "obj")}
      {Lisp-Entry "jazz.collect-if" define #f 171 9 171 24 ("%%cdr" "%%cons" "%%car" "value" "%%null?" "%%not" "if" "scan" "iter" "let" "proper-tail-calls" "declare" "lst" "predicate")}
      {Lisp-Entry "jazz.remove" define #f 182 9 182 20 ("%%cons" "%%cdr" "%%eq?" "%%car" "value" "%%null?" "%%not" "if" "scan" "iter" "let" "proper-tail-calls" "declare" "lst" "item")}
      {Lisp-Entry "jazz.string-find" define #f 198 9 198 25 ("1" "%%fx+" "else" "%%string-ref" "%%char=?" "%%fx>=" "cond" "n" "iter" "%%string-length" "len" "let" "proper-tail-calls" "declare" "0" "start" "#!optional" "c" "str")}
      {Lisp-Entry "jazz.string-find-reversed" define #f 210 9 210 34 ("else" "%%string-ref" "%%char=?" "0" "%%fx<" "cond" "1" "%%string-length" "%%fx-" "n" "iter" "let" "proper-tail-calls" "declare" "c" "str")}
      {Lisp-Entry "jazz.string-starts-with?" define #f 221 9 221 33 ("0" "%%substring" "%%string=?" "%%fx>=" "and" "tl" "%%string-length" "sl" "let" "target" "str")}
      {Lisp-Entry "jazz.string-starts-with-ci?" define #f 228 9 228 36 ("0" "%%substring" "%%string-ci=?" "%%fx>=" "and" "tl" "%%string-length" "sl" "let" "target" "str")}
      {Lisp-Entry "jazz.string-ends-with?" define #f 235 9 235 31 ("%%fx-" "%%substring" "%%string=?" "%%fx>=" "and" "tl" "%%string-length" "sl" "let" "target" "str")}
      {Lisp-Entry "jazz.string-numeric?" define #f 242 9 242 29 ("%%memv" "%%string-ref" "c" "0" "%%fx>=" "if" "1" "%%string-length" "%%fx-" "n" "iter" "let" "str")}
      {Lisp-Entry "jazz.split-string" define #f 252 9 252 26 ("%%fx+" "%%substring" "%%cons" "set!" "%%string-ref" "%%eqv?" "begin" "0" "%%fx>" "if" "1" "%%fx-" "pos" "iter" "%%string-length" "end" "lst" "let" "proper-tail-calls" "declare" "separator" "str")}
      {Lisp-Entry "jazz.join-strings" define #f 267 9 267 26 ("get-output-string" "%%cdr" "string" "lambda" "for-each" "%%car" "display" "open-output-string" "output" "let" "separator" "strings")}
      {Lisp-Entry "jazz.split-composite" define #f 282 9 282 29 ("%%string-length" "1" "%%fx+" "0" "%%substring" "%%string->symbol" "values" "%%not" "if" "jazz.string-find-reversed" "n" "%%symbol->string" "str" "let" "identifier")}
      {Lisp-Entry "jazz.iterate-table" define #f 296 9 296 27 ("%%table-for-each" "proc" "table")}
      {Lisp-Entry "jazz.iterate-table-safe" define #f 300 9 300 32 ("%%table->list" "%%cdr" "%%car" "pair" "lambda" "for-each" "proc" "table")}
      {Lisp-Entry "jazz.executable-directory" define-macro ("variable") 311 22 311 47 ()}
      {Lisp-Entry "jazz.pathname-name" define #f 315 9 315 27 ("%%fx+" "else" "0" "%%substring" "jazz.pathname-name" "1" "%%fx-" "%%fx=" "%%not" "cond" "%%string-length" "len" "jazz.string-find-reversed" "pos" "let" "pathname")}
      {Lisp-Entry "jazz.pathname-base" define #f 326 9 326 27 ("0" "%%substring" "if" "jazz.string-find-reversed" "pos" "jazz.pathname-name" "name" "let" "pathname")}
      {Lisp-Entry "jazz.pathname-extension" define #f 334 9 334 32 ("%%string-length" "1" "%%fx+" "%%substring" "if" "jazz.string-find-reversed" "pos" "jazz.pathname-name" "name" "let" "pathname")}
      {Lisp-Entry "jazz.extension?" define #f 342 9 342 24 ("%%string=?" "%%not" "and" "or" "target" "extension")}
      {Lisp-Entry "jazz.numeric-extension?" define #f 349 9 349 32 ("%%string-length" "%%substring" "jazz.string-numeric?" "jazz.string-starts-with?" "and" "prefix" "extension")}
      {Lisp-Entry "jazz.executable-extension" define #f 355 9 355 34 ("else" "windows" "case" "platform")}
      {Lisp-Entry "jazz.pathname-dir" define #f 363 9 363 26 ("1" "%%fx+" "0" "%%substring" "%%not" "if" "jazz.string-find-reversed" "pos" "let" "pathname")}
      {Lisp-Entry "jazz.file-modification-time" define #f 370 9 370 36 ("file-last-modification-time" "time->seconds" "pathname")}
      {Lisp-Entry "jazz.add-extension" define #f 374 9 374 27 ("%%string-append" "%%not" "if" "extension" "filename")}
      {Lisp-Entry "jazz.copy-file" define #f 380 9 380 23 ("copy-file" "delete-file" "file-exists?" "begin" "jazz.file-needs-update?" "if" "feedback" "#!key" "dst" "src")}
      {Lisp-Entry "jazz.copy-files" define #f 390 9 390 24 ("directory-files" "feedback:" "jazz.copy-file" "regular" "file-info" "file-info-type" "case" "dst-pathname" "string-append" "src-pathname" "let" "file" "lambda" "for-each" "create-directory" "begin" "file-exists?" "not" "if" "feedback" "#!key" "dst" "src")}
      {Lisp-Entry "jazz.file-needs-update?" define #f 405 9 405 32 ("jazz.file-modification-time" ">" "file-exists?" "%%not" "or" "dst" "src")}
      {Lisp-Entry "jazz.relativise-directory" define #f 411 9 411 34 ("or" "%%string-append" "set!" "%%string-ref" "%%eqv?" "begin" "1" "%%fx-" "n" "iter" "relative-dir" "suffix" "0" "%%substring" "%%string=?" "%%fx>=" "and" "if" "rootlen" "baselen" "%%string-length" "targlen" "jazz.pathname-normalize" "let" "targdir" "rootdir" "basedir")}
      {Lisp-Entry "jazz.absolutize-directory" define #f 434 9 434 34 ("%%string-append" "jazz.pathname-normalize" "jazz.string-starts-with?" "or" "if" "reldir" "basedir")}
      {Lisp-Entry "jazz.quote-gcc-pathname" define #f 441 9 441 32 ("else" "string-append" "windows" "case" "platform" "pathname")}
      {Lisp-Entry "jazz.quote-jazz-gcc-pathname" define #f 450 9 450 37 ("jazz.kernel-platform" "jazz.kernel-source" "string-append" "path-expand" "jazz.quote-gcc-pathname" "suffix")}
      {Lisp-Entry "jazz.file-exists?" define #f 456 12 456 29 ("file-exists?")}
      {Lisp-Entry "jazz.updated-digest-source?" define #f 467 9 467 36 ("sha-1" "'sha-1" "digest-file" "%%digest-hash-set!" "%%digest-time-set!" "begin" "%%digest-time" "=" "if" "jazz.file-modification-time" "time" "let" "src-filepath" "digest")}
      {Lisp-Entry "jazz.Manifest-Extension" define #f 482 8 482 31 ()}
      {Lisp-Entry "jazz.Digest-Extension" define #f 485 8 485 29 ()}
      {Lisp-Entry "jazz.load-source-digests" define #f 489 9 489 33 ("%%make-digest" "%%cddr" "source-time" "%%cadr" "source-hash" "%%cdr" "%%car" "pathname" "form" "map" "read" "digest-forms" "let" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "jazz.file-exists?" "if" "digest-filepath")}
      {Lisp-Entry "jazz.load-manifest" define #f 503 9 503 27 ("%%make-manifest" "%%cdr" "jazz.load-source-digests" "source-digests" "compile-time-hash" "references" "'references" "references-form" "digest" "'digest" "digest-form" "%%cddr" "version" "'version" "%%assq" "version-form" "%%cadr" "name" "read" "form" "let" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "jazz.file-exists?" "if" "manifest-filepath" "digest-filepath")}
      {Lisp-Entry "jazz.save-manifest" define #f 521 9 521 27 ("%%cdr" "module-references" "for-each" "%%car" "%%pair?" "begin" "if" "%%manifest-compile-time-hash" "write" "newline" "display" "output" "lambda" "jazz.kernel-platform" "jazz.platform-eol-encoding" "eol-encoding:" "path:" "list" "call-with-output-file" "jazz.pathname-dir" "jazz.create-directories" "%%manifest-references" "references" "%%manifest-version" "version" "%%manifest-name" "name" "let" "manifest" "filepath")}
      {Lisp-Entry "filter" define #f 556 9 556 15 ("%%cdr" "filter" "%%cons" "%%car" "head" "let" "%%null?" "if" "lst" "proc")}
      {Lisp-Entry "jazz.save-digest" define #f 565 9 565 25 ("%%null?" "%%manifest-source-digests" "filter" "existing-files-digests" "let" "%%digest-time" "%%digest-hash" "%%digest-pathname" "jazz.pathname-normalize" "write" "digest" "for-each" "newline" "display" "output" "lambda" "jazz.kernel-platform" "jazz.platform-eol-encoding" "eol-encoding:" "path:" "list" "call-with-output-file" "jazz.pathname-dir" "jazz.create-directories" "digests" "save-digest" "delete-file" "file-exists?" "if" "delete-digest-file" "define" "manifest" "filepath")}
      {Lisp-Entry "jazz.find-source-digest" define #f 597 9 597 32 ("or" "%%cons" "%%manifest-source-digests-set!" "0" "%%make-digest" "new-digest" "%%cdr" "%%digest-pathname" "jazz.path=?" "%%car" "digest" "%%pair?" "if" "%%manifest-source-digests" "digests" "iter" "jazz.pathname-normalize" "pathname" "let" "find-digest" "define" "manifest" "src-pathname")}
      {Lisp-Entry "jazz.manifest-uptodate?" define #f 616 9 616 32 ("%%manifest-compile-time-hash" "%%digest-hash" "%%string=?" "and" "jazz.pathname-normalize" "jazz.find-source-digest" "digest" "let" "manifest" "src-pathname")}
      {Lisp-Entry "jazz.load/create-manifest" define #f 622 9 622 34 ("jazz.kernel-version" "%%make-manifest" "jazz.load-manifest" "or" "manifest-filepath" "digest-filepath" "name")}
      {Lisp-Entry "jazz.load-updated-manifest" define #f 627 9 627 35 ("jazz.save-digest" "jazz.updated-digest-source?" "if" "jazz.find-source-digest" "and" "digest" "jazz.load/create-manifest" "manifest" "let" "src-filepath" "manifest-filepath" "digest-filepath" "name")}
      {Lisp-Entry "jazz.update-manifest-compile-time" define #f 636 9 636 42 ("jazz.save-manifest" "%%digest-hash" "%%manifest-compile-time-hash-set!" "%%manifest-references-set!" "if" "jazz.updated-digest-source?" "jazz.find-source-digest" "digest" "jazz.kernel-version" "%%manifest-version-set!" "jazz.load/create-manifest" "manifest" "let" "updated-references" "src-filepath" "manifest-filepath" "digest-filepath" "name")}
      {Lisp-Entry "jazz.Library-Extension" define #f 652 8 652 30 ()}
      {Lisp-Entry "jazz.Library-Manifest-Extension" define #f 653 8 653 39 ()}}})
"crash"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "crash.scm"} 1288732032
    {Lisp-Entry "kernel.crash" block #f 39 7 39 19 ("#<<END-OF-DECLARES\n      #include <stdio.h>\n      #include <unistd.h>\n      #include <sys/types.h>\n      #include <signal.h>\n\n      static void error_signal_handler(int sig_num)\n      {\n        jazz_call_crash_reporter(sig_num);\n        fflush(stdout);\n        crash_call_exit();\n      }\n\n      static void setup_low_level_unix_crash_handler()\n      {\n        // core dumping signals\n        signal(SIGQUIT, error_signal_handler);\n        signal(SIGILL,  error_signal_handler);\n        signal(SIGABRT, error_signal_handler);\n        signal(SIGFPE,  error_signal_handler);\n        signal(SIGBUS,  error_signal_handler);\n        signal(SIGSEGV, error_signal_handler);\n        signal(SIGSYS,  error_signal_handler);\n      }\nEND-OF-DECLARES\n" "#<<END-OF-DECLARES\n      static LONG WINAPI unhandled_exception_filter(LPEXCEPTION_POINTERS info)\n      {\n        jazz_call_crash_reporter(info);\n        return EXCEPTION_CONTINUE_SEARCH;\n      }\n\n      static void setup_low_level_windows_crash_handler()\n      {\n        SetUnhandledExceptionFilter(unhandled_exception_filter);\n      }\nEND-OF-DECLARES\n" "jazz.log-backtrace" "jazz.set-crash-reporter")
      {Lisp-Entry "jazz.log-backtrace" define #f 42 9 42 27 ("500" "current-error-port" "display-continuation-backtrace" "k" "lambda" "continuation-capture" "ignore")}
      {Lisp-Entry "jazz.call_crash_reporter" c-definition #f 53 15 53 39 ("ignore" "jazz.crash-reporter" "void" "pointer")}
      {Lisp-Entry "jazz.crash-process" define #f 73 12 73 30 ("void" "c-lambda")}
      {Lisp-Entry "jazz.call_crash_reporter" c-definition #f 77 14 77 38 ("ignore" "jazz.crash-reporter" "void" "int")}
      {Lisp-Entry "crash_call_exit" c-definition #f 80 14 80 29 ("1" "exit" "void")}
      {Lisp-Entry "jazz.crash-process" define #f 112 11 112 29 ("void" "c-lambda")}}})
"declares"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "declares.scm"} 1288732032
    {Lisp-Entry "kernel.declares" block #f 37 7 37 22 ()
      {Lisp-Entry "jazz.kernel-declares" define-macro ("macro") 42 24 42 44 ("safe" "jazz.debug-user?" "optimize-dead-local-variables" "proper-tail-calls" "jazz.kernel-optimize?" "inline" "not" "extended-bindings" "standard-bindings" "block" "jazz.kernel-mutable-bindings?" "jazz.debug-core?" "or" "if" "declare")}
      {Lisp-Entry "jazz.declares" define #f 68 13 68 26 ("safe" "inline-primitives" "jazz.debug-user?" "optimize-dead-local-variables" "proper-tail-calls" "jazz.kernel-optimize?" "inline" "extended-bindings" "standard-bindings" "block" "jazz.kernel-mutable-bindings?" "not" "release" "'release" "jazz.kernel-safety" "unit" "'unit" "eq?" "and" "if" "declare" "kind")}}})
"digest"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "digest.scm"} 1288732032
    {Lisp-Entry "fx+" define-macro #f 18 15 18 18 (",@args" "##fx+" "args")}
    {Lisp-Entry "fx-" define-macro #f 19 15 19 18 (",@args" "##fx-" "args")}
    {Lisp-Entry "fx*" define-macro #f 20 15 20 18 (",@args" "##fx*" "args")}
    {Lisp-Entry "fxquotient" define-macro #f 21 15 21 25 (",@args" "##fxquotient" "args")}
    {Lisp-Entry "fxmin" define-macro #f 22 15 22 20 (",@args" "##fxmin" "args")}
    {Lisp-Entry "fx=" define-macro #f 23 15 23 18 (",@args" "##fx=" "args")}
    {Lisp-Entry "fx<" define-macro #f 24 15 24 18 (",@args" "##fx<" "args")}
    {Lisp-Entry "fx>" define-macro #f 25 15 25 18 (",@args" "##fx>" "args")}
    {Lisp-Entry "fx<=" define-macro #f 26 15 26 19 (",@args" "##fx<=" "args")}
    {Lisp-Entry "fx>=" define-macro #f 27 15 27 19 (",@args" "##fx>=" "args")}
    {Lisp-Entry "fxnot" define-macro #f 28 15 28 20 (",@args" "##fxnot" "args")}
    {Lisp-Entry "fxand" define-macro #f 29 15 29 20 (",@args" "##fxand" "args")}
    {Lisp-Entry "fxior" define-macro #f 30 15 30 20 (",@args" "##fxior" "args")}
    {Lisp-Entry "fxxor" define-macro #f 31 15 31 20 (",@args" "##fxxor" "args")}
    {Lisp-Entry "fxarithmetic-shift-right" define-macro #f 32 15 32 39 (",@args" "##fxarithmetic-shift-right" "args")}
    {Lisp-Entry "fxarithmetic-shift-left" define-macro #f 33 15 33 38 (",@args" "##fxarithmetic-shift-left" "args")}
    {Lisp-Entry "make-vector" define-macro #f 34 15 34 26 (",@args" "##make-vector" "args")}
    {Lisp-Entry "make-u8vector" define-macro #f 35 15 35 28 (",@args" "##make-u8vector" "args")}
    {Lisp-Entry "u8vector" define-macro #f 36 15 36 23 (",@args" "##u8vector" "args")}
    {Lisp-Entry "u8vector-length" define-macro #f 37 15 37 30 (",@args" "##u8vector-length" "args")}
    {Lisp-Entry "u8vector-ref" define-macro #f 38 15 38 27 (",@args" "##u8vector-ref" "args")}
    {Lisp-Entry "u8vector-set!" define-macro #f 39 15 39 28 (",@args" "##u8vector-set!" "args")}
    {Lisp-Entry "read-subu8vector" define-macro #f 40 15 40 31 (",@args" "##read-subu8vector" "args")}
    {Lisp-Entry "string-append" define-macro #f 41 15 41 28 (",@args" "##string-append" "args")}
    {Lisp-Entry "make-string" define-macro #f 42 15 42 26 (",@args" "##make-string" "args")}
    {Lisp-Entry "open-input-file" define-macro #f 43 15 43 30 (",@args" "##open-input-file" "args")}
    {Lisp-Entry "close-input-port" define-macro #f 44 15 44 31 (",@args" "##close-input-port" "args")}
    {Lisp-Entry "number->string" define-macro #f 45 15 45 29 (",@args" "##number->string" "args")}
    {Lisp-Entry "digest" define #f 49 13 49 19 ("state" "update" "end" "digest-f65996cb-c1aa-4ee9-86cd-1af55b5ddb74" "id:")}
    {Lisp-Entry "hash-block->hex-string" define #f 57 9 57 31 ("8" "12" "fxarithmetic-shift-right" "string-set!" "j2" "2" "fx+" "j1" "fxxor" "vector-ref" "0" "fx<" "if" "j" "1" "fx-" "i" "loop" "let" "make-string" "str" "4" "fx*" "n" "16" "fxquotient" "len" "let*" "15" "fxand" "string-ref" "x" "hex" "define" "width" "big-endian?" "hb")}
    {Lisp-Entry "hash-block->u8vector" define #f 89 9 89 29 ("#xff" "fxand" "8" "fxarithmetic-shift-right" "u8vector-set!" "j2" "fx+" "j1" "fxxor" "vector-ref" "x" "fx<" "if" "j" "1" "fx-" "i" "loop" "let" "0" "make-u8vector" "u8vect" "2" "fx*" "n" "16" "fxquotient" "len" "let*" "width" "big-endian?" "hb")}
    {Lisp-Entry "LO" define-macro #f 103 15 103 17 ("L" "'L" "symbol->string" "string-append" "string->symbol" "var")}
    {Lisp-Entry "HI" define-macro #f 107 15 107 17 ("H" "'H" "symbol->string" "string-append" "string->symbol" "var")}
    {Lisp-Entry "wlet" define-macro #f 111 15 111 19 (",body" ",hi" "H" "'H" ",lo" "L" "'L" "symbol->string" "string-append" "string->symbol" "let" "body" "hi" "lo" "var")}
    {Lisp-Entry "cast-u16" define-macro #f 120 15 120 23 (",x" "#xffff" "fxand" "x")}
    {Lisp-Entry "shift-left-u16" define-macro #f 123 15 123 29 (",shift" "1" "16" "2" "expt" "fx-" ",n" "fxand" "fxarithmetic-shift-left" "shift" "n")}
    {Lisp-Entry "wshr" define-macro #f 128 15 128 19 ("0" ",body" "fx-" "HI" "shift-left-u16" ",r" ",w" "LO" "fxarithmetic-shift-right" "fxior" ",dst" "wlet" "16" "fx<" "if" "body" "r" "w" "dst")}
    {Lisp-Entry "wrot" define-macro #f 141 15 141 19 ("32" ",body" "fx-" "HI" "fxarithmetic-shift-right" ",r" ",w" "LO" "shift-left-u16" "fxior" ",dst" "wlet" "16" "fx<" "if" "body" "r" "w" "dst")}
    {Lisp-Entry "wadd" define-macro #f 160 15 160 19 (",body" "16" "fxarithmetic-shift-right" "cast-u16" ",dst" "HI" ",b" ",a" "LO" "fx+" "R" "wlet" "body" "b" "a" "dst")}
    {Lisp-Entry "wxor" define-macro #f 171 15 171 19 (",body" "HI" ",b" ",a" "LO" "fxxor" ",dst" "wlet" "body" "b" "a" "dst")}
    {Lisp-Entry "wior" define-macro #f 177 15 177 19 (",body" "HI" ",b" ",a" "LO" "fxior" ",dst" "wlet" "body" "b" "a" "dst")}
    {Lisp-Entry "wand" define-macro #f 183 15 183 19 (",body" "HI" ",b" ",a" "LO" "fxand" ",dst" "wlet" "body" "b" "a" "dst")}
    {Lisp-Entry "wnot" define-macro #f 189 15 189 19 (",body" "HI" ",a" "LO" "fxnot" ",dst" "wlet" "body" "a" "dst")}
    {Lisp-Entry "wref" define-macro #f 195 15 195 19 (",i" ",body" "1" "0" "2" "fx*" "fx+" ",v" "vector-ref" ",dst" "wlet" "number?" "if" "body" "i" "v" "dst")}
    {Lisp-Entry "wset" define-macro #f 206 15 206 19 (",i" "HI" "1" ",x" "LO" "0" "2" "fx*" "fx+" ",v" "vector-set!" "begin" "number?" "if" "x" "i" "v")}
    {Lisp-Entry "block-digest" define #f 217 13 217 25 ("width" "big-endian?" "bit-pos" "block-pos" "block" "hash" "hash-update" "block-digest-f65996cb-c1aa-4ee9-86cd-1af55b5ddb74" "id:")}
    {Lisp-Entry "convert-hash-block" define #f 227 9 227 27 ("error" "else" "hash-block->u8vector" "u8vector" "block-digest-width" "block-digest-big-endian?" "hash-block->hex-string" "hex" "case" "block-digest-hash" "hash" "digest-state" "bd" "let*" "result-type" "digest")}
    {Lisp-Entry "process-last-block" define #f 244 9 244 27 ("u8vector-ref" "t" "fx>=" "3" "loop3" "block-digest-big-endian?" "fx+" "begin" "fx>" "7" "2" "i" "loop2" "fxarithmetic-shift-right" "#x01" "#x7f" "fxarithmetic-shift-left" "fxior" "1" "#xff" "u8vector-set!" "digest-update-subu8vector" "fxmin" "m" "fx<" "if" "n" "loop1" "448" "fx-" "511" "fxand" "fxquotient" "zero-padding-bytes" "let" "#x80" "digest-update-u8" "0" "8" "make-u8vector" "buf" "block-digest-bit-pos" "bit-pos" "block-digest-block-pos" "block-pos" "digest-state" "bd" "let*" "digest")}
    {Lisp-Entry "end-block-digest" define #f 300 9 300 25 ("convert-hash-block" "process-last-block" "result-type" "digest")}
    {Lisp-Entry "digest-update-block-digest" define #f 304 9 304 35 ("else" "cond" "block-digest-bit-pos" "2" "16" "block-digest-bit-pos-set!" "aligned16" "block-digest-block-pos" "block-digest-block-pos-set!" "block-digest-hash-update" "512" "vector-ref" "fx+" "new-bit-pos" "8" "u8vector-ref" "fxarithmetic-shift-left" "vector-set!" "1" "fxxor" "block-digest-big-endian?" "begin" "15" "fxand" "0" "fx=" "4" "fxarithmetic-shift-right" "j" "let" "fx<" "if" "bit-pos" "i" "aligned8" "define" "block-digest-block" "block" "digest-state" "bd" "let*" "end" "start" "u8vect" "digest")}
    {Lisp-Entry "hash-block-init-sha-1" define #f 402 9 402 30 ("#xc3d2" "#xe1f0" "#x1032" "#x5476" "#x98ba" "#xdcfe" "#xefcd" "#xab89" "#x6745" "#x2301" "vector")}
    {Lisp-Entry "digest-update-sha-1" define #f 409 9 409 28 ("NEWE" "NEWD" "NEWC" "NEWB" "NEWA" "80" "T5-H" "T5-L" "fx+" "30" "Y" "E" "5" "A" "Y-H" "Y-L" "#xca62" "#xc1d6" "else" "T7-H" "T7-L" "#x8f1b" "#xbcdc" "60" "T4-H" "T4-L" "#x6ed9" "#xeba1" "40" "T6-H" "T6-L" "stage3" "wadd" "#x5a82" "#x7999" "wlet" "wior" "D" "wnot" "C" "B" "wand" "20" "cond" "X-H" "X-L" "wset" "begin" "X" "wrot" "T7" "T6" "T5" "14" "T4" "T3" "wxor" "8" "T2" "fx-" "T1-H" "T1-L" "stage2" "T1" "16" "fx<" "if" "stage1" "define" "OLDE-H" "E-H" "OLDE-L" "E-L" "OLDD-H" "D-H" "OLDD-L" "D-L" "OLDC-H" "C-H" "OLDC-L" "C-L" "OLDB-H" "B-H" "OLDB-L" "B-L" "OLDA-H" "A-H" "OLDA-L" "A-L" "j" "loop" "let" "4" "OLDE" "3" "OLDD" "2" "OLDC" "1" "OLDB" "0" "OLDA" "wref" "block-digest-block" "block" "block-digest-hash" "hash" "digest-state" "bd" "let*" "digest")}
    {Lisp-Entry "open-digest-sha-1" define #f 498 9 498 26 ("0" "160" "make-vector" "hash-block-init-sha-1" "digest-update-sha-1" "make-block-digest" "digest-update-block-digest" "end-block-digest" "make-digest")}
    {Lisp-Entry "open-digest" define #f 513 9 513 20 ("error" "else" "open-digest-sha-1" "SHA-1" "sha-1" "case" "algorithm")}
    {Lisp-Entry "digest-default-result-type" define-macro #f 520 15 520 41 ("hex" "'hex" "''hex")}
    {Lisp-Entry "close-digest" define #f 522 9 522 21 ("digest-end" "digest-default-result-type" "result-type" "#!optional" "digest")}
    {Lisp-Entry "digest-update-subu8vector" define #f 528 9 528 34 ("digest-update" "end" "start" "u8vect" "digest")}
    {Lisp-Entry "zero-u8vector" define #f 531 8 531 21 ("0" "4" "make-u8vector")}
    {Lisp-Entry "get-zero-u8vector" define #f 533 9 533 26 ("zero-u8vector")}
    {Lisp-Entry "digest-update-u8" define #f 535 9 535 25 ("#xff" "fxand" "1" "make-u8vector" "get-zero-u8vector" "0" "eqv?" "if" "digest-update-subu8vector" "n" "digest")}
    {Lisp-Entry "digest-string" define #f 544 9 544 22 ("string-length" "0" "digest-substring" "digest-default-result-type" "result-type" "#!optional" "algorithm" "str")}
    {Lisp-Entry "digest-substring" define #f 556 9 556 25 ("digest-subu8vector" "1" "fx+" "string-ref" "char->integer" "u8vector-set!" "begin" "fx<" "if" "0" "i" "loop" "let" "make-u8vector" "u8vect" "fx-" "len" "let*" "digest-default-result-type" "result-type" "#!optional" "algorithm" "end" "start" "str")}
    {Lisp-Entry "digest-u8vector" define #f 572 9 572 24 ("u8vector-length" "0" "digest-subu8vector" "digest-default-result-type" "result-type" "#!optional" "algorithm" "u8vect")}
    {Lisp-Entry "digest-subu8vector" define #f 584 9 584 27 ("close-digest" "digest-update-subu8vector" "open-digest" "digest" "let" "digest-default-result-type" "result-type" "#!optional" "algorithm" "end" "start" "u8vect")}
    {Lisp-Entry "digest-file" define #f 595 9 595 20 ("digest-update-subu8vector" "close-digest" "close-input-port" "begin" "fx=" "if" "0" "read-subu8vector" "n" "loop" "make-u8vector" "buf" "1024" "bufsize" "open-input-file" "in" "let*" "open-digest" "digest" "let" "digest-default-result-type" "result-type" "#!optional" "algorithm" "filename")}})
"expansion"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "expansion.scm"} 1288732032
    {Lisp-Entry "kernel.expansion" block #f 37 7 37 23 ()
      {Lisp-Entry "jazz.generate-symbol" define #f 40 9 40 29 ("##make-uninterned-symbol" "1" "+" "##number->string" "or" "##string-append" "name" "error" "not" "if" "jazz.generate-symbol-counter" "counter" "jazz.generate-symbol-for" "for" "let" "prefix" "#!optional")}
      {Lisp-Entry "jazz.generate-global-symbol" define #f 50 9 50 36 ("##string->symbol" "1" "+" "begin" "##find-interned-symbol" "##number->string" "or" "##string-append" "name" "##symbol->string" "jazz.string-replace" "module" "error" "not" "if" "jazz.generate-symbol-counter" "counter" "jazz.generate-symbol-context" "context" "jazz.generate-symbol-for" "for" "let" "prefix" "#!optional")}
      {Lisp-Entry "jazz.simplify-begin" define #f 65 9 65 28 ("##cadr" "##cddr" "##null?" "##cdr" "begin" "'begin" "##car" "##eq?" "##pair?" "and" "if" "form")}
      {Lisp-Entry "jazz.with-uniqueness" define #f 74 9 74 29 (",expr" ",value" "jazz.generate-symbol" "value" "let" "jazz.source-code" "##symbol?" "if" "proc" "expr")}
      {Lisp-Entry "%%force-uniqueness" define-macro ("macro") 82 20 82 38 (",code" "##cdr" "%%force-uniqueness" "lambda" ",variable" "jazz.with-uniqueness" "##car" "variable" "let" "##null?" "if" "code" "variables")}
      {Lisp-Entry "jazz.define-check-macro" define-macro ("macro") 96 20 96 43 ("##cdr" "##list" "##car" ",type" "',type" ",',type" ",pos" "jazz.primitive-type-error" ",code" ",arg" ",test" "',test" ",',test" "jazz.debug-core?" "if" "code" "call" "pos" "arg" ",name" "jazz.define-macro" "type" "test" "name")}
      {Lisp-Entry "%%check-closure" define-macro ("check-macro") 105 25 105 40 ("##closure?")}
      {Lisp-Entry "%%check-continuation" define-macro ("check-macro") 109 25 109 45 ("##continuation?")}
      {Lisp-Entry "%%check-fixnum" define-macro ("check-macro") 113 25 113 39 ("##fixnum?")}
      {Lisp-Entry "%%check-foreign" define-macro ("check-macro") 117 25 117 40 ("##foreign?")}
      {Lisp-Entry "%%check-list" define-macro ("check-macro") 121 25 121 37 ("list?")}
      {Lisp-Entry "%%check-locat" define-macro ("check-macro") 125 25 125 38 ("##locat?")}
      {Lisp-Entry "%%check-port" define-macro ("check-macro") 129 25 129 37 ("##port?")}
      {Lisp-Entry "%%check-procedure" define-macro ("check-macro") 133 25 133 42 ("##procedure?")}
      {Lisp-Entry "%%check-readenv" define-macro ("check-macro") 137 25 137 40 ("jazz.readenv?")}
      {Lisp-Entry "%%check-readtable" define-macro ("check-macro") 141 25 141 42 ("##readtable?")}
      {Lisp-Entry "%%check-source" define-macro ("check-macro") 145 25 145 39 ("##source?")}
      {Lisp-Entry "%%check-string" define-macro ("check-macro") 149 25 149 39 ("##string?")}
      {Lisp-Entry "%%check-symbol" define-macro ("check-macro") 153 25 153 39 ("##symbol?")}
      {Lisp-Entry "%%check-table" define-macro ("check-macro") 157 25 157 38 ("table?")}}})
"features"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "features.scm"} 1288732032
    {Lisp-Entry "kernel.features" block #f 37 7 37 22 ("jazz.install-features")
      {Lisp-Entry "jazz.install-features" define-macro #f 45 15 45 36 (",features" "',features" "list" "append" "##cond-expand-features" "set!" "if" "feature" "lambda" "for-each" "jazz.kernel-safety" ",jazz.kernel-safety" "jazz.kernel-windowing" ",jazz.kernel-windowing" "jazz.kernel-platform" ",jazz.kernel-platform" "jazz.kernel-system" ",jazz.kernel-system" "JAZZSCHEME" "JazzScheme" "jazzscheme" "JAZZ" "Jazz" "jazz" "features" "let")}
      {Lisp-Entry "jazz.debug-core?" define #f 65 8 65 24 ("core" "'core" "jazz.kernel-safety" "eq?")}
      {Lisp-Entry "jazz.debug-user?" define #f 68 8 68 24 ("release" "'release" "jazz.kernel-safety" "eq?" "not")}}})
"header"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "header.scm"} 1288732032
    {Lisp-Entry "jazz.define-macro" define-macro #f 45 23 45 40 ("jazz.register-macro" ",src" "##make-macro-descr" "##interaction-cte" "##top-cte-add-macro!" ",pattern" "##define-macro" "begin" ",@rest" "lambda" "src" "else" "null?" "+" "cdr" "-" "#!rest" "#!key" "#!optional" "memq" "if" "car" "parm" "pair?" "cond" "1" "n" "lst" "loop" "let" "parms" "form-size" "define" "rest" "pattern")}
    {Lisp-Entry "jazz.define-syntax" define-macro #f 81 23 81 41 ("jazz.register-macro" "-1" "##make-macro-descr" "',name" "##interaction-cte" "##top-cte-add-macro!" ",expander" ",name" "##define-syntax" "begin" "expander" "name")}
    {Lisp-Entry "jazz.subtype-vector" define #f 102 8 102 27 ("macro-subtype-vector")}
    {Lisp-Entry "jazz.subtype-pair" define #f 103 8 103 25 ("macro-subtype-pair")}
    {Lisp-Entry "jazz.subtype-ratnum" define #f 104 8 104 27 ("macro-subtype-ratnum")}
    {Lisp-Entry "jazz.subtype-cpxnum" define #f 105 8 105 27 ("macro-subtype-cpxnum")}
    {Lisp-Entry "jazz.subtype-symbol" define #f 106 8 106 27 ("macro-subtype-symbol")}
    {Lisp-Entry "jazz.subtype-keyword" define #f 107 8 107 28 ("macro-subtype-keyword")}
    {Lisp-Entry "jazz.subtype-continuation" define #f 108 8 108 33 ("macro-subtype-continuation")}
    {Lisp-Entry "jazz.subtype-procedure" define #f 109 8 109 30 ("macro-subtype-procedure")}
    {Lisp-Entry "jazz.subtype-string" define #f 110 8 110 27 ("macro-subtype-string")}
    {Lisp-Entry "jazz.subtype-flonum" define #f 111 8 111 27 ("macro-subtype-flonum")}
    {Lisp-Entry "jazz.subtype-bignum" define #f 112 8 112 27 ("macro-subtype-bignum")}
    {Lisp-Entry "jazz.subtype-foreign" define #f 113 8 113 28 ("macro-subtype-foreign")}
    {Lisp-Entry "jazz.subtype-s8vector" define #f 114 8 114 29 ("macro-subtype-s8vector")}
    {Lisp-Entry "jazz.subtype-u8vector" define #f 115 8 115 29 ("macro-subtype-u8vector")}
    {Lisp-Entry "jazz.subtype-s16vector" define #f 116 8 116 30 ("macro-subtype-s16vector")}
    {Lisp-Entry "jazz.subtype-u16vector" define #f 117 8 117 30 ("macro-subtype-u16vector")}
    {Lisp-Entry "jazz.subtype-s32vector" define #f 118 8 118 30 ("macro-subtype-s32vector")}
    {Lisp-Entry "jazz.subtype-u32vector" define #f 119 8 119 30 ("macro-subtype-u32vector")}
    {Lisp-Entry "jazz.subtype-s64vector" define #f 120 8 120 30 ("macro-subtype-s64vector")}
    {Lisp-Entry "jazz.subtype-u64vector" define #f 121 8 121 30 ("macro-subtype-u64vector")}
    {Lisp-Entry "jazz.subtype-f32vector" define #f 122 8 122 30 ("macro-subtype-f32vector")}
    {Lisp-Entry "jazz.subtype-f64vector" define #f 123 8 123 30 ("macro-subtype-f64vector")}
    {Lisp-Entry "jazz.subtype-boxvalues" define #f 124 8 124 30 ("macro-subtype-boxvalues")}
    {Lisp-Entry "macro-code-run-fixed" define-macro #f 132 17 132 37 (",rte" "1" "##vector-ref" ",c" "$$code" "let" "rte" "c")}
    {Lisp-Entry "jazz.code-cte" define #f 137 9 137 22 ("macro-code-cte" "c")}
    {Lisp-Entry "jazz.code-run" define #f 140 9 140 22 ("macro-code-run-fixed" "rte" "c")}
    {Lisp-Entry "jazz.rte-up" define #f 149 9 149 20 ("macro-rte-up" "r")}
    {Lisp-Entry "jazz.repl-context-bind" define #f 158 9 158 31 ("repl-context" "macro-dynamic-bind" "thunk" "val")}
    {Lisp-Entry "jazz.continuation-denv" define #f 167 9 167 31 ("macro-continuation-denv" "cont")}
    {Lisp-Entry "jazz.current-repl-context" define #f 176 9 176 34 ("macro-current-repl-context")}
    {Lisp-Entry "jazz.repl-context-level" define #f 179 9 179 32 ("macro-repl-context-level" "context")}
    {Lisp-Entry "jazz.repl-context-depth" define #f 182 9 182 32 ("macro-repl-context-depth" "context")}
    {Lisp-Entry "jazz.repl-context-cont" define #f 185 9 185 31 ("macro-repl-context-cont" "context")}
    {Lisp-Entry "jazz.repl-context-initial-cont" define #f 188 9 188 39 ("macro-repl-context-initial-cont" "context")}
    {Lisp-Entry "jazz.repl-context-prev-level" define #f 191 9 191 37 ("macro-repl-context-prev-level" "context")}
    {Lisp-Entry "jazz.repl-context-prev-depth" define #f 194 9 194 37 ("macro-repl-context-prev-depth" "context")}
    {Lisp-Entry "jazz.make-repl-context" define #f 197 9 197 31 ("macro-make-repl-context" "prev-depth" "prev-level" "reason" "initial-cont" "cont" "depth" "level")}
    {Lisp-Entry "jazz.readtable-named-char-table" define #f 206 9 206 40 ("macro-readtable-named-char-table" "rt")}
    {Lisp-Entry "jazz.readtable-named-char-table-set!" define #f 209 9 209 45 ("macro-readtable-named-char-table-set!" "nc" "rt")}
    {Lisp-Entry "jazz.readtable-start-syntax" define #f 212 9 212 36 ("macro-readtable-start-syntax" "rt")}
    {Lisp-Entry "jazz.readenv?" define #f 221 9 221 22 ("macro-readenv?" "obj")}
    {Lisp-Entry "jazz.readenv-port" define #f 224 9 224 26 ("macro-readenv-port" "re")}
    {Lisp-Entry "jazz.readenv-wrap" define #f 227 9 227 26 ("macro-readenv-wrap" "x" "re")}
    {Lisp-Entry "jazz.writeenv-port" define #f 236 9 236 27 ("macro-writeenv-port" "we")}
    {Lisp-Entry "jazz.writeenv-style" define #f 239 9 239 28 ("macro-writeenv-style" "we")}
    {Lisp-Entry "jazz.btq-owner" define #f 248 9 248 23 ("macro-btq-owner" "mutex")}
    {Lisp-Entry "jazz.absent-object?" define #f 257 9 257 28 ("macro-absent-obj" "##eq?" "obj")}
    {Lisp-Entry "jazz.unbound-object?" define #f 261 9 261 29 ("#!unbound" "##eq?" "obj")}})
"install"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "install.scm"} 1288732032
    {Lisp-Entry "kernel.install" block #f 37 7 37 21 ("jazz.pathname-normalize" "jazz.pathname-dir" "if" "path" "let" "lambda" "jazz.executable-directory" "wchar_t-string" "char-string" "c-lambda" "platform-executable-path" "set!" "jazz.kernel-declares")
      {Lisp-Entry "platform-executable-path" define #f 52 8 52 32 ()}}})
"macro"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "macro.scm"} 1288732032
    {Lisp-Entry "jazz.Macros" define #f 37 8 37 19 ("eq?" "test:" "make-table")}
    {Lisp-Entry "jazz.register-macro" define #f 41 9 41 28 ("jazz.Macros" "table-set!" "macro" "name")}
    {Lisp-Entry "jazz.get-macro" define #f 45 9 45 23 ("jazz.Macros" "table-ref" "name")}
    {Lisp-Entry "jazz.need-macro" define #f 49 9 49 24 ("jazz.error" "jazz.get-macro" "or" "name")}
    {Lisp-Entry "jazz.expand-macro" define #f 54 9 54 26 ("cdr" "car" "jazz.need-macro" "apply" "form")}})
"primitives"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "primitives.scm"} 1288732032
    {Lisp-Entry "kernel.primitives" block #f 37 7 37 24 ("jazz.kernel-declares")
      {Lisp-Entry "%%boolean?" define-macro ("macro") 50 23 50 33 (",obj" "boolean?" "obj")}
      {Lisp-Entry "%%not" define-macro ("macro") 53 23 53 28 ("##not" ",expr" "not" "jazz.debug-core?" "if" "expr")}
      {Lisp-Entry "%%box?" define-macro ("macro") 68 23 68 29 ("##box?" ",obj" "box?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%box" define-macro ("macro") 73 23 73 28 ("##box" ",obj" "box" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%unbox" define-macro ("macro") 78 23 78 30 ("##unbox" ",box" "unbox" "jazz.debug-core?" "if" "box")}
      {Lisp-Entry "%%char?" define-macro ("macro") 93 24 93 31 ("##char?" ",obj" "char?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%char=?" define-macro ("macro") 98 24 98 32 ("##char=?" ",c2" ",c1" "char=?" "jazz.debug-core?" "if" "c2" "c1")}
      {Lisp-Entry "%%char<=?" define-macro ("macro") 103 24 103 33 ("##char<=?" ",c2" ",c1" "char<=?" "jazz.debug-core?" "if" "c2" "c1")}
      {Lisp-Entry "%%closure?" define-macro ("syntax") 118 24 118 34 (",obj" "##closure?" "##source-code" "##cadr" "obj" "let" "src" "lambda")}
      {Lisp-Entry "%%closure-code" define-macro ("macro") 123 24 123 38 ("##closure-code" "%%closure-code" "1" ",closure" "%%check-closure" "%%force-uniqueness" "closure")}
      {Lisp-Entry "%%complex?" define-macro ("macro") 138 24 138 34 ("##complex?" ",obj" "complex?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%continuation?" define-macro ("syntax") 153 23 153 38 ("##continuation?" ",obj" "continuation?" "jazz.debug-core?" "if" "##source-code" "##cadr" "obj" "let" "src" "lambda")}
      {Lisp-Entry "%%continuation-capture" define-macro ("syntax") 160 23 160 45 ("##continuation-capture" ",proc" "continuation-capture" "jazz.debug-core?" "if" "##source-code" "##cadr" "proc" "let" "src" "lambda")}
      {Lisp-Entry "%%continuation-graft" define-macro ("syntax") 167 23 167 43 ("##continuation-graft" ",proc" ",cont" "continuation-graft" "jazz.debug-core?" "if" "##cddr" "##car" "proc" "##source-code" "##cadr" "cont" "let" "src" "lambda")}
      {Lisp-Entry "%%continuation-return" define-macro ("syntax") 175 23 175 44 ("##continuation-return" ",@values" ",cont" "continuation-return" "jazz.debug-core?" "if" "##cddr" "values" "##source-code" "##cadr" "cont" "let" "src" "lambda")}
      {Lisp-Entry "%%continuation-checkpoint" define-macro ("syntax") 183 23 183 48 ("##continuation-checkpoint" ",after" ",thunk" ",before" "continuation-checkpoint" "jazz.debug-core?" "if" "##cadddr" "after" "##caddr" "thunk" "##source-code" "##cadr" "before" "let" "src" "lambda")}
      {Lisp-Entry "%%continuation-graft-no-winding" define-macro ("macro") 192 23 192 54 ("##continuation-graft-no-winding" ",values" "%%continuation-graft-no-winding" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "values" "cont")}
      {Lisp-Entry "%%continuation-return-no-winding" define-macro ("macro") 197 23 197 55 ("##continuation-return-no-winding" ",values" "%%continuation-return-no-winding" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "values" "cont")}
      {Lisp-Entry "%%continuation-parent" define-macro ("macro") 202 23 202 44 ("##continuation-parent" "%%continuation-parent" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
      {Lisp-Entry "%%continuation-creator" define-macro ("macro") 207 23 207 45 ("##continuation-creator" "%%continuation-creator" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
      {Lisp-Entry "%%continuation-locat" define-macro ("macro") 212 23 212 43 ("##continuation-locat" "%%continuation-locat" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
      {Lisp-Entry "%%continuation-locals" define-macro ("macro") 217 23 217 44 ("##continuation-locals" "%%continuation-locals" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
      {Lisp-Entry "%%continuation-next" define-macro ("macro") 222 23 222 42 ("##continuation-next" "%%continuation-next" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
      {Lisp-Entry "%%continuation-first-frame" define-macro ("macro") 227 23 227 49 ("##continuation-first-frame" ",all-frames?" "%%continuation-first-frame" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "all-frames?" "cont")}
      {Lisp-Entry "%%continuation-next-frame" define-macro ("macro") 232 23 232 48 ("##continuation-next-frame" ",all-frames?" "%%continuation-next-frame" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "all-frames?" "cont")}
      {Lisp-Entry "%%interp-continuation?" define-macro ("macro") 237 23 237 45 ("##interp-continuation?" "%%interp-continuation?" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
      {Lisp-Entry "%%procedure?" define-macro ("macro") 252 23 252 35 ("##procedure?" ",obj" "procedure?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%apply" define-macro ("macro") 257 23 257 30 ("##apply" ",lst" ",proc" "apply" "jazz.debug-core?" "if" "lst" "proc")}
      {Lisp-Entry "%%eq?" define-macro ("macro") 272 23 272 28 ("##eq?" ",y" ",x" "eq?" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%neq?" define-macro ("macro") 277 23 277 29 (",y" ",x" "%%eq?" "%%not" "y" "x")}
      {Lisp-Entry "%%eqv?" define-macro ("macro") 280 23 280 29 ("##eqv?" ",y" ",x" "eqv?" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%equal?" define-macro ("macro") 285 23 285 31 ("##equal?" ",y" ",x" "equal?" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%eq?" define-macro ("macro") 291 23 291 28 (",y" ",x" "eq?" "y" "x")}
      {Lisp-Entry "%%load" define-macro ("macro") 302 23 302 29 (",quiet?" ",raise-os-exception?" ",clone-cte?" ",script-callback" ",path" "##load" "%%force-uniqueness" "quiet?" "raise-os-exception?" "clone-cte?" "script-callback" "path")}
      {Lisp-Entry "%%fixnum?" define-macro ("macro") 316 23 316 32 ("##fixnum?" ",obj" "fixnum?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%fixnum->flonum" define-macro ("macro") 321 23 321 39 ("##fixnum->flonum" ",x" "fixnum->flonum" "jazz.debug-core?" "if" "x")}
      {Lisp-Entry "%%fx=" define-macro ("macro") 326 23 326 28 ("##fixnum.=" ",y" ",x" "=" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx<" define-macro ("macro") 331 23 331 28 ("##fixnum.<" ",y" ",x" "<" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx<=" define-macro ("macro") 336 23 336 29 ("##fixnum.<=" ",y" ",x" "<=" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx>" define-macro ("macro") 341 23 341 28 ("##fixnum.>" ",y" ",x" ">" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx>=" define-macro ("macro") 346 23 346 29 ("##fixnum.>=" ",y" ",x" ">=" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx+" define-macro ("macro") 351 23 351 28 ("##fixnum.+" ",y" ",x" "+" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx-" define-macro ("macro") 356 23 356 28 ("##fixnum.-" ",y" ",x" "-" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fx*" define-macro ("macro") 361 23 361 28 ("##fixnum.*" ",y" ",x" "*" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fxquotient" define-macro ("macro") 366 23 366 35 ("##fxquotient" ",y" ",x" "quotient" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%flonum?" define-macro ("macro") 379 23 379 32 ("##flonum?" ",obj" "flonum?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%fl=" define-macro ("macro") 384 23 384 28 ("##flonum.=" ",y" ",x" "=" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl<" define-macro ("macro") 389 23 389 28 ("##flonum.<" ",y" ",x" "<" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl<=" define-macro ("macro") 394 23 394 29 ("##flonum.<=" ",y" ",x" "<=" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl>" define-macro ("macro") 399 23 399 28 ("##flonum.>" ",y" ",x" ">" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl>=" define-macro ("macro") 404 23 404 29 ("##flonum.>=" ",y" ",x" ">=" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl+" define-macro ("macro") 409 23 409 28 ("##flonum.+" ",y" ",x" "+" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl-" define-macro ("macro") 414 23 414 28 ("##flonum.-" ",y" ",x" "-" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl*" define-macro ("macro") 419 23 419 28 ("##flonum.*" ",y" ",x" "*" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl/" define-macro ("macro") 424 23 424 28 ("##flonum./" ",y" ",x" "/" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%fl>" define-macro ("macro") 430 23 430 28 (",y" ",x" ">" "y" "x")}
      {Lisp-Entry "%%fl+" define-macro ("macro") 433 23 433 28 (",y" ",x" "+" "y" "x")}
      {Lisp-Entry "%%foreign?" define-macro ("macro") 444 23 444 33 (",obj" "##foreign?" "obj")}
      {Lisp-Entry "%%still-obj-refcount-dec!" define-macro ("macro") 447 23 447 48 ("##still-obj-refcount-dec!" "%%still-obj-refcount-dec!" "1" ",foreign" "%%check-foreign" "%%force-uniqueness" "foreign")}
      {Lisp-Entry "%%still-obj-refcount-inc!" define-macro ("macro") 452 23 452 48 ("##still-obj-refcount-inc!" "%%still-obj-refcount-inc!" "1" ",foreign" "%%check-foreign" "%%force-uniqueness" "foreign")}
      {Lisp-Entry "%%interrupt-handler" define-macro ("macro") 467 24 467 43 (",code" "##interrupt-handler" "code")}
      {Lisp-Entry "%%interrupt-vector-set!" define-macro ("macro") 470 24 470 47 (",handler" ",code" "##interrupt-vector-set!" "handler" "code")}
      {Lisp-Entry "%%keyword?" define-macro ("macro") 483 24 483 34 ("##keyword?" ",obj" "keyword?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%string->keyword" define-macro ("macro") 488 24 488 41 ("##string->keyword" ",str" "string->keyword" "jazz.debug-core?" "if" "str")}
      {Lisp-Entry "%%keyword->string" define-macro ("macro") 493 23 493 40 ("##keyword->string" ",keyword" "keyword->string" "jazz.debug-core?" "if" "keyword")}
      {Lisp-Entry "%%null?" define-macro ("macro") 508 24 508 31 ("##null?" ",obj" "null?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%pair?" define-macro ("macro") 513 24 513 31 ("##pair?" ",obj" "pair?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%car" define-macro ("macro") 518 24 518 29 ("##car" ",pair" "car" "jazz.debug-core?" "if" "pair")}
      {Lisp-Entry "%%cdr" define-macro ("macro") 523 24 523 29 ("##cdr" ",pair" "cdr" "jazz.debug-core?" "if" "pair")}
      {Lisp-Entry "%%set-car!" define-macro ("macro") 528 24 528 34 ("##set-car!" ",val" ",pair" "set-car!" "jazz.debug-core?" "if" "val" "pair")}
      {Lisp-Entry "%%set-cdr!" define-macro ("macro") 533 24 533 34 ("##set-cdr!" ",val" ",pair" "set-cdr!" "jazz.debug-core?" "if" "val" "pair")}
      {Lisp-Entry "%%caar" define-macro ("macro") 538 24 538 30 ("##caar" ",pair" "caar" "jazz.debug-core?" "if" "pair")}
      {Lisp-Entry "%%cadr" define-macro ("macro") 543 24 543 30 ("##cadr" ",pair" "cadr" "jazz.debug-core?" "if" "pair")}
      {Lisp-Entry "%%cdar" define-macro ("macro") 548 24 548 30 ("##cdar" ",pair" "cdar" "jazz.debug-core?" "if" "pair")}
      {Lisp-Entry "%%cddr" define-macro ("macro") 553 24 553 30 ("##cddr" ",pair" "cddr" "jazz.debug-core?" "if" "pair")}
      {Lisp-Entry "%%length" define-macro ("macro") 558 24 558 32 ("##length" ",lst" "length" "jazz.debug-core?" "if" "lst")}
      {Lisp-Entry "%%memq" define-macro ("macro") 563 24 563 30 ("##memq" ",lst" ",obj" "memq" "jazz.debug-core?" "if" "lst" "obj")}
      {Lisp-Entry "%%memv" define-macro ("macro") 568 24 568 30 (",lst" ",obj" "memv" "lst" "obj")}
      {Lisp-Entry "%%member" define-macro ("macro") 571 24 571 32 ("##member" ",lst" ",obj" "member" "jazz.debug-core?" "if" "lst" "obj")}
      {Lisp-Entry "%%assq" define-macro ("macro") 576 24 576 30 ("##assq" ",alist" ",obj" "assq" "jazz.debug-core?" "if" "alist" "obj")}
      {Lisp-Entry "%%assv" define-macro ("macro") 581 24 581 30 ("##assv" ",alist" ",obj" "assv" "jazz.debug-core?" "if" "alist" "obj")}
      {Lisp-Entry "%%assoc" define-macro ("macro") 586 24 586 31 ("##assoc" ",alist" ",obj" "assoc" "jazz.debug-core?" "if" "alist" "obj")}
      {Lisp-Entry "%%cons" define-macro ("macro") 591 24 591 30 ("##cons" ",y" ",x" "cons" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%list" define-macro ("macro") 596 24 596 30 ("##list" ",@rest" "list" "jazz.debug-core?" "if" "rest")}
      {Lisp-Entry "%%append" define-macro ("macro") 601 24 601 32 ("##append" ",y" ",x" "append" "jazz.debug-core?" "if" "y" "x")}
      {Lisp-Entry "%%remove" define-macro ("macro") 606 24 606 32 ("##remove" ",elem" "%%remove" "2" ",lst" "%%check-list" "%%force-uniqueness" "lst" "elem")}
      {Lisp-Entry "%%reverse" define-macro ("macro") 611 24 611 33 ("##reverse" ",lst" "reverse" "jazz.debug-core?" "if" "lst")}
      {Lisp-Entry "%%list->vector" define-macro ("macro") 616 24 616 38 ("##list->vector" ",lst" "list->vector" "jazz.debug-core?" "if" "lst")}
      {Lisp-Entry "%%memq" define-macro ("macro") 622 23 622 29 (",lst" ",obj" "memq" "lst" "obj")}
      {Lisp-Entry "%%gc" define-macro ("macro") 633 24 633 28 ("##gc")}
      {Lisp-Entry "%%number?" define-macro ("macro") 644 24 644 33 ("##number?" ",obj" "number?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%integer?" define-macro ("macro") 649 24 649 34 ("##integer?" ",obj" "integer?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%real?" define-macro ("macro") 654 24 654 31 ("##real?" ",obj" "real?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%number->string" define-macro ("macro") 659 24 659 40 ("##number->string" ",n" "number->string" "jazz.debug-core?" "if" "n")}
      {Lisp-Entry "%%string->number" define-macro ("macro") 664 24 664 40 ("##string->number" ",str" "string->number" "jazz.debug-core?" "if" "str")}
      {Lisp-Entry "%%port?" define-macro ("macro") 679 24 679 31 ("##port?" ",obj" "port?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%eof-object?" define-macro ("macro") 684 24 684 37 ("##eof-object?" ",obj" "eof-object?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%input-port-names-set!" define-macro ("macro") 689 24 689 47 ("4" "##vector-set!" ",names" "%%input-port-names-set!" "1" ",port" "%%check-port" "%%force-uniqueness" "names" "port")}
      {Lisp-Entry "%%input-port-line-set!" define-macro ("macro") 695 24 695 46 ("##input-port-line-set!" ",line" "%%input-port-line-set!" "1" ",port" "%%check-port" "%%force-uniqueness" "line" "port")}
      {Lisp-Entry "%%input-port-column-set!" define-macro ("macro") 700 24 700 48 ("##input-port-column-set!" ",col" "%%input-port-column-set!" "1" ",port" "%%check-port" "%%force-uniqueness" "col" "port")}
      {Lisp-Entry "%%read-all-as-a-begin-expr-from-port" define-macro ("macro") 705 24 705 60 ("##read-all-as-a-begin-expr-from-port" "2" "%%check-readtable" ",close-port?" ",start-syntax" ",unwrap" ",wrap" ",readtable" "%%read-all-as-a-begin-expr-from-port" "1" ",port" "%%check-port" "%%force-uniqueness" "close-port?" "start-syntax" "unwrap" "wrap" "readtable" "port")}
      {Lisp-Entry "%%write-string" define-macro ("macro") 711 24 711 38 ("##write-string" "2" "%%check-port" ",port" "%%write-string" "1" ",str" "%%check-string" "%%force-uniqueness" "port" "str")}
      {Lisp-Entry "%%procedure-name" define-macro ("macro") 727 24 727 40 ("##procedure-name" "%%procedure-name" "1" ",procedure" "%%check-procedure" "%%force-uniqueness" "procedure")}
      {Lisp-Entry "%%procedure-locat" define-macro ("macro") 732 24 732 41 ("##procedure-locat" "%%procedure-locat" "1" ",procedure" "%%check-procedure" "%%force-uniqueness" "procedure")}
      {Lisp-Entry "%%rational?" define-macro ("macro") 747 24 747 35 ("##rational?" ",obj" "rational?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%readenv?" define-macro ("macro") 762 24 762 34 (",obj" "macro-readenv?" "obj")}
      {Lisp-Entry "%%readenv-current-filepos" define-macro ("macro") 765 24 765 49 ("##readenv-current-filepos" "%%readenv-current-filepos" "1" ",readenv" "%%check-readenv" "%%force-uniqueness" "readenv")}
      {Lisp-Entry "%%build-list" define-macro ("macro") 770 24 770 36 ("##build-list" ",close" ",start-pos" ",allow-improper?" "%%build-list" "1" ",readenv" "%%check-readenv" "%%force-uniqueness" "close" "start-pos" "allow-improper?" "readenv")}
      {Lisp-Entry "%%read-datum-or-label-or-none-or-dot" define-macro ("macro") 775 24 775 60 ("##read-datum-or-label-or-none-or-dot" "%%read-datum-or-label-or-none-or-dot" "1" ",readenv" "%%check-readenv" "%%force-uniqueness" "readenv")}
      {Lisp-Entry "%%readtable?" define-macro ("macro") 790 24 790 36 ("##readtable?" ",obj" "readtable?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%current-readtable" define-macro ("macro") 795 24 795 43 ("##current-readtable")}
      {Lisp-Entry "%%readtable-copy" define-macro ("macro") 798 24 798 40 ("##readtable-copy" "%%readtable-copy" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "readtable")}
      {Lisp-Entry "%%readtable-char-class-set!" define-macro ("macro") 803 24 803 51 ("##readtable-char-class-set!" ",handler" ",delimiter?" ",c" "%%readtable-char-class-set!" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "handler" "delimiter?" "c" "readtable")}
      {Lisp-Entry "%%readtable-char-sharp-handler-set!" define-macro ("macro") 808 24 808 59 ("##readtable-char-sharp-handler-set!" ",handler" ",c" "%%readtable-char-sharp-handler-set!" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "handler" "c" "readtable")}
      {Lisp-Entry "%%repl" define-macro ("macro") 823 24 823 30 (",write-reason" "##repl" "write-reason" "#!optional")}
      {Lisp-Entry "%%thread-repl-context-get!" define-macro ("macro") 826 24 826 50 ("##thread-repl-context-get!")}
      {Lisp-Entry "%%thread-repl-channel-get!" define-macro ("macro") 829 24 829 50 (",thread" "##thread-repl-channel-get!" "thread")}
      {Lisp-Entry "%%repl-channel-result-history-add" define-macro ("macro") 832 24 832 57 (",result" ",channel" "##repl-channel-result-history-add" "result" "channel")}
      {Lisp-Entry "%%string?" define-macro ("macro") 845 24 845 33 ("##string?" ",obj" "string?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%string=?" define-macro ("macro") 850 24 850 34 ("##string=?" ",str2" ",str1" "string=?" "jazz.debug-core?" "if" "str2" "str1")}
      {Lisp-Entry "%%string-ci=?" define-macro ("macro") 855 24 855 37 ("##string-ci=?" ",str2" ",str1" "string-ci=?" "jazz.debug-core?" "if" "str2" "str1")}
      {Lisp-Entry "%%string<?" define-macro ("macro") 860 24 860 34 ("##string<?" ",str2" ",str1" "string<?" "jazz.debug-core?" "if" "str2" "str1")}
      {Lisp-Entry "%%string-length" define-macro ("macro") 865 24 865 39 ("##string-length" ",str" "string-length" "jazz.debug-core?" "if" "str")}
      {Lisp-Entry "%%string-ref" define-macro ("macro") 870 23 870 35 ("##string-ref" ",pos" ",str" "string-ref" "jazz.debug-core?" "if" "pos" "str")}
      {Lisp-Entry "%%string-set!" define-macro ("macro") 875 23 875 36 ("##string-set!" ",val" ",pos" ",str" "string-set!" "jazz.debug-core?" "if" "val" "pos" "str")}
      {Lisp-Entry "%%substring" define-macro ("macro") 880 23 880 34 ("##substring" ",end" ",start" ",str" "substring" "jazz.debug-core?" "if" "end" "start" "str")}
      {Lisp-Entry "%%string-append" define-macro ("macro") 885 23 885 38 ("##string-append" ",@rest" "string-append" "jazz.debug-core?" "if" "rest")}
      {Lisp-Entry "%%string-shrink!" define-macro ("macro") 890 23 890 39 ("##string-shrink!" ",len" "%%string-shrink!" "1" ",str" "%%check-string" "%%force-uniqueness" "len" "str")}
      {Lisp-Entry "%%structure?" define-macro ("macro") 905 24 905 36 (",obj" "##structure?" "obj")}
      {Lisp-Entry "%%structure-type" define-macro ("macro") 908 24 908 40 (",structure" "##structure-type" "structure")}
      {Lisp-Entry "%%symbol?" define-macro ("macro") 921 24 921 33 ("##symbol?" ",obj" "symbol?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%string->symbol" define-macro ("macro") 926 24 926 40 ("##string->symbol" ",str" "string->symbol" "jazz.debug-core?" "if" "str")}
      {Lisp-Entry "%%symbol->string" define-macro ("macro") 931 23 931 39 ("##symbol->string" ",symbol" "symbol->string" "jazz.debug-core?" "if" "symbol")}
      {Lisp-Entry "%%unbound?" define-macro ("macro") 936 23 936 33 (",obj" "##unbound?" "obj")}
      {Lisp-Entry "%%global-var?" define-macro ("macro") 939 23 939 36 ("##global-var?" "%%global-var?" "1" ",symbol" "%%check-symbol" "%%force-uniqueness" "symbol")}
      {Lisp-Entry "%%global-var-ref" define-macro ("macro") 944 23 944 39 ("##global-var-ref" "%%global-var-ref" "1" ",symbol" "%%check-symbol" "%%force-uniqueness" "symbol")}
      {Lisp-Entry "%%global-var-set!" define-macro ("macro") 949 23 949 40 ("##global-var-set!" ",value" "%%global-var-ref" "1" ",symbol" "%%check-symbol" "%%force-uniqueness" "value" "symbol")}
      {Lisp-Entry "%%source?" define-macro ("macro") 964 24 964 33 (",expr" "##source?" "expr")}
      {Lisp-Entry "%%source-code" define-macro ("macro") 967 24 967 37 ("##source-code" "%%source-code" "1" ",src" "%%check-source" "%%force-uniqueness" "src")}
      {Lisp-Entry "%%source-locat" define-macro ("macro") 972 24 972 38 ("##source-locat" "%%source-locat" "1" ",src" "%%check-source" "%%force-uniqueness" "src")}
      {Lisp-Entry "%%desourcify" define-macro ("macro") 977 24 977 36 (",expr" "##desourcify" "expr")}
      {Lisp-Entry "%%make-source" define-macro ("macro") 980 24 980 37 (",locat" ",code" "##make-source" "locat" "code")}
      {Lisp-Entry "%%sourcify" define-macro ("macro") 983 24 983 34 ("##sourcify" ",expr" "%%sourcify" "2" ",src" "%%check-source" "%%force-uniqueness" "src" "expr")}
      {Lisp-Entry "%%locat?" define-macro ("macro") 988 24 988 32 (",expr" "##locat?" "expr")}
      {Lisp-Entry "%%locat-container" define-macro ("macro") 991 24 991 41 ("##locat-container" "%%locat-container" "1" ",locat" "%%check-locat" "%%force-uniqueness" "locat")}
      {Lisp-Entry "%%locat-position" define-macro ("macro") 996 24 996 40 ("##locat-position" "%%locat-position" "1" ",locat" "%%check-locat" "%%force-uniqueness" "locat")}
      {Lisp-Entry "%%container->path" define-macro ("macro") 1001 24 1001 41 (",container" "##container->path" "container")}
      {Lisp-Entry "%%position->filepos" define-macro ("macro") 1004 24 1004 43 (",position" "##position->filepos" "position")}
      {Lisp-Entry "%%filepos-line" define-macro ("macro") 1007 24 1007 38 ("##filepos-line" "%%filepos-line" "1" ",filepos" "%%check-fixnum" "%%force-uniqueness" "filepos")}
      {Lisp-Entry "%%filepos-col" define-macro ("macro") 1012 24 1012 37 ("##filepos-col" "%%filepos-col" "1" ",filepos" "%%check-fixnum" "%%force-uniqueness" "filepos")}
      {Lisp-Entry "%%table?" define-macro ("macro") 1025 24 1025 32 (",obj" "table?" "obj")}
      {Lisp-Entry "%%make-table" define-macro ("macro") 1028 24 1028 36 ("hash:" ",test" "test:" "make-table" ",hash" "if" "hash" "eq?" "test" "#!key")}
      {Lisp-Entry "%%table-ref" define-macro ("macro") 1033 24 1033 35 ("##table-ref" ",default" ",key" ",table" "table-ref" "jazz.debug-core?" "if" "default" "key" "table")}
      {Lisp-Entry "%%table-set!" define-macro ("macro") 1038 24 1038 36 ("##table-set!" ",value" ",key" ",table" "table-set!" "jazz.debug-core?" "if" "value" "key" "table")}
      {Lisp-Entry "%%table-clear" define-macro ("macro") 1043 24 1043 37 (",key" ",table" "table-set!" "key" "table")}
      {Lisp-Entry "%%table-keys" define-macro ("macro") 1046 24 1046 36 (",table" "table->list" "car" "map" "table")}
      {Lisp-Entry "%%table-length" define-macro ("macro") 1049 24 1049 38 (",table" "table-length" "table")}
      {Lisp-Entry "%%table-for-each" define-macro ("macro") 1052 24 1052 40 (",table" ",proc" "table-for-each" "table" "proc")}
      {Lisp-Entry "%%table-merge!" define-macro ("macro") 1055 24 1055 38 ("##table-merge!" ",additions-takes-precedence?" ",additions" ",table" "table-merge!" "jazz.debug-core?" "if" "additions-takes-precedence?" "#!optional" "additions" "table")}
      {Lisp-Entry "%%list->table" define-macro ("macro") 1060 24 1060 37 (",@rest" ",alist" "list->table" "rest" "alist")}
      {Lisp-Entry "%%table->list" define-macro ("macro") 1063 24 1063 37 (",table" "table->list" "table")}
      {Lisp-Entry "%%table-entries" define-macro ("macro") 1066 24 1066 39 (",table" "table->list" "cdr" "map" "table")}
      {Lisp-Entry "%%copy-table" define-macro ("macro") 1069 24 1069 36 (",table" "table-copy" "table")}
      {Lisp-Entry "%%thread?" define-macro ("macro") 1082 24 1082 33 (",obj" "thread?" "obj")}
      {Lisp-Entry "%%current-thread" define-macro ("macro") 1085 24 1085 40 ("##current-thread")}
      {Lisp-Entry "jazz.Unspecified-Value" define #f 1098 12 1098 34 ("void")}
      {Lisp-Entry "jazz.Unspecified-Value" define #f 1102 12 1102 34 ("jazz.unspecified" "'jazz.unspecified" "%%list")}
      {Lisp-Entry "%%unspecified" define-macro ("macro") 1106 20 1106 33 ("jazz.Unspecified-Value" "'jazz.Unspecified-Value")}
      {Lisp-Entry "%%unspecified?" define-macro ("macro") 1110 20 1110 34 ("jazz.Unspecified-Value" ",value" "%%eq?" "value")}
      {Lisp-Entry "%%specified?" define-macro ("macro") 1114 20 1114 32 ("jazz.Unspecified-Value" ",value" "%%neq?" "value")}
      {Lisp-Entry "%%values?" define-macro ("macro") 1125 24 1125 33 (",obj" "##values?" "obj")}
      {Lisp-Entry "%%vector?" define-macro ("macro") 1137 24 1137 33 ("##vector?" ",obj" "vector?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%vector" define-macro ("macro") 1142 23 1142 31 ("##vector" ",@rest" "vector" "jazz.debug-core?" "if" "rest")}
      {Lisp-Entry "%%make-vector" define-macro ("macro") 1147 23 1147 36 ("##make-vector" ",@rest" ",size" "make-vector" "jazz.debug-core?" "if" "rest" "size")}
      {Lisp-Entry "%%vector-length" define-macro ("macro") 1152 23 1152 38 ("##vector-length" ",vector" "vector-length" "jazz.debug-core?" "if" "vector")}
      {Lisp-Entry "%%vector-ref" define-macro ("macro") 1157 23 1157 35 ("##vector-ref" ",n" ",vector" "vector-ref" "jazz.debug-core?" "if" "n" "vector")}
      {Lisp-Entry "%%vector-set!" define-macro ("macro") 1162 23 1162 36 ("##vector-set!" ",value" ",n" ",vector" "vector-set!" "jazz.debug-core?" "if" "value" "n" "vector")}
      {Lisp-Entry "%%vector-copy" define-macro ("macro") 1167 23 1167 36 ("##vector-copy" ",@rest" ",vector" "vector-copy" "jazz.debug-core?" "if" "rest" "vector")}
      {Lisp-Entry "%%vector->list" define-macro ("macro") 1172 23 1172 37 ("##vector->list" ",vector" "vector->list" "jazz.debug-core?" "if" "vector")}
      {Lisp-Entry "%%s8vector?" define-macro ("macro") 1177 23 1177 34 ("##s8vector?" ",obj" "s8vector?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%u8vector?" define-macro ("macro") 1182 23 1182 34 ("##u8vector?" ",obj" "u8vector?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%s16vector?" define-macro ("macro") 1187 23 1187 35 ("##s16vector?" ",obj" "s16vector?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%u16vector?" define-macro ("macro") 1192 23 1192 35 ("##u16vector?" ",obj" "u16vector?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%s32vector?" define-macro ("macro") 1197 23 1197 35 ("##s32vector?" ",obj" "s32vector?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%u32vector?" define-macro ("macro") 1202 23 1202 35 ("##u32vector?" ",obj" "u32vector?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%s64vector?" define-macro ("macro") 1207 23 1207 35 ("##s64vector?" ",obj" "s64vector?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%u64vector?" define-macro ("macro") 1212 23 1212 35 ("##u64vector?" ",obj" "u64vector?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%f32vector?" define-macro ("macro") 1217 23 1217 35 ("##f32vector?" ",obj" "f32vector?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%f64vector?" define-macro ("macro") 1222 23 1222 35 ("##f64vector?" ",obj" "f64vector?" "jazz.debug-core?" "if" "obj")}
      {Lisp-Entry "%%vector?" define-macro ("macro") 1228 23 1228 32 (",obj" "vector?" "obj")}
      {Lisp-Entry "%%vector" define-macro ("macro") 1231 23 1231 31 (",@rest" "vector" "rest")}
      {Lisp-Entry "%%make-vector" define-macro ("macro") 1234 23 1234 36 (",@rest" ",size" "make-vector" "rest" "size")}
      {Lisp-Entry "%%vector-length" define-macro ("macro") 1237 23 1237 38 (",vector" "vector-length" "vector")}
      {Lisp-Entry "%%vector-ref" define-macro ("macro") 1240 23 1240 35 (",n" ",vector" "vector-ref" "n" "vector")}
      {Lisp-Entry "%%vector-set!" define-macro ("macro") 1243 23 1243 36 (",value" ",n" ",vector" "vector-set!" "value" "n" "vector")}
      {Lisp-Entry "%%vector-copy" define-macro ("macro") 1246 23 1246 36 (",@rest" ",vector" "vector-copy" "rest" "vector")}}})
"runtime"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "runtime.scm"} 1288732032
    {Lisp-Entry "kernel.runtime" block #f 37 7 37 21 ("jazz.kernel-declares")
      {Lisp-Entry "jazz.expand-unit-source" define #f 48 9 48 32 (",@body" "unit" "'unit" "jazz.declares" "begin" "%%neq?" "jazz.requested-unit-name" "and" "jazz.error" "%%symbol?" "%%not" "body" "access" "name" "lambda" "%%cdr" "'public" "%%cddr" "%%cadr" "public" "protected" "%%memq" "if" "%%car" "jazz.source-code" "first" "let" "proc" "parse" "define" "rest")}
      {Lisp-Entry "jazz.expand-require" define #f 71 9 71 28 ("%%desourcify" "src" "jazz.filter-features" ",unit-name" "',unit-name" "jazz.load-unit" "phase" "feature-requirement" "unit-name" "jazz.listify" "jazz.parse-require" "require" "lambda" "map" "begin" "jazz.simplify-begin" "rest")}
      {Lisp-Entry "jazz.parse-require" define #f 84 9 84 27 ("'phase" "%%cdar" "set!" "begin" "cond" "'cond" "%%caar" "%%eq?" "%%pair?" "and" "if" "runtime" "'runtime" "phase" "feature-requirement" "%%cdr" "scan" "%%car" "name" "let" "proc" "require")}
      {Lisp-Entry "jazz.filter-features" define #f 106 9 106 29 ("else" "%%cddr" "%%cons" "jazz.feature-satisfied?" "%%list" "feature-requirement" "let" "lambda" "map" "append" "%%apply" "cond" "'cond" "%%car" "%%eq?" "%%cadr" "%%cdr" "%%null?" "%%not" "%%pair?" "and" "if" "invoice" "extract-feature-requirement" "define" "invoices")}
      {Lisp-Entry "jazz.feature-satisfied?" define #f 127 9 127 32 ("error" "##cond-expand-features" "%%memq" "%%symbol?" "if" "feature-requirement")}}})
"settings"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "settings.scm"} 1288732032
    {Lisp-Entry "kernel.settings" block #f 37 7 37 22 ("jazz.kernel-declares")
      {Lisp-Entry "jazz.build-repository" define-macro ("setting") 48 21 48 42 ()}
      {Lisp-Entry "jazz.jazz-repository" define-macro ("setting") 51 21 51 41 ()}
      {Lisp-Entry "jazz.user-repository" define-macro ("setting") 54 21 54 41 ()}
      {Lisp-Entry "jazz.repositories" define-macro ("setting") 57 21 57 38 ()}
      {Lisp-Entry "jazz.load-verbose?" define-macro ("setting") 66 21 66 39 ()}
      {Lisp-Entry "jazz.outline-verbose?" define-macro ("setting") 69 21 69 42 ()}
      {Lisp-Entry "jazz.done-verbose?" define-macro ("setting") 72 21 72 39 ()}
      {Lisp-Entry "jazz.warn-interpreted?" define-macro ("setting") 81 21 81 43 ()}
      {Lisp-Entry "jazz.warnings?" define-macro ("setting") 91 21 91 35 ()}
      {Lisp-Entry "jazz.delay-reporting?" define-macro ("setting") 95 21 95 42 ()}
      {Lisp-Entry "jazz.use-print?" define-macro ("setting") 105 21 105 36 ()}
      {Lisp-Entry "jazz.debug-build?" define-macro ("setting") 114 21 114 38 ()}
      {Lisp-Entry "jazz.build-single-objects?" define-macro ("setting") 117 21 117 47 ()}
      {Lisp-Entry "jazz.build-link" define-macro ("setting") 120 21 120 36 ("objects" "'objects")}
      {Lisp-Entry "jazz.build-jobs" define-macro ("setting") 123 21 123 36 ("1")}
      {Lisp-Entry "jazz.save-emit?" define-macro ("setting") 126 21 126 36 ()}
      {Lisp-Entry "jazz.inline-definitions?" define-macro ("setting") 137 24 137 48 ()}
      {Lisp-Entry "jazz.inline-definitions?" define-macro ("setting") 140 24 140 48 ()}
      {Lisp-Entry "jazz.debug-specializers" define-macro ("setting") 144 21 144 44 ()}
      {Lisp-Entry "jazz.force-interpreted?" define-macro ("setting") 148 21 148 44 ()}
      {Lisp-Entry "jazz.use-debugger?" define-macro ("setting") 152 21 152 39 ()}
      {Lisp-Entry "jazz.profile-walker?" define-macro ("setting") 161 21 161 41 ()}
      {Lisp-Entry "jazz.keep-instances-statistics" define-macro ("setting") 170 21 170 51 ()}}})
"setup"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "setup.scm"} 1288970148
    {Lisp-Entry "kernel.setup" block #f 37 7 37 19 ("jazz.container->id-hook" "##container->id-hook" "jazz.container->path-hook" "##container->path-hook" "jazz.path->container-hook" "##path->container-hook" "set!" "jazz.kernel-declares")
      {Lisp-Entry "jazz.compile-unit-internal" define-macro ("variable") 48 22 48 48 ()}
      {Lisp-Entry "jazz.custom-compile-unit-internal" define-macro ("variable") 49 22 49 55 ()}
      {Lisp-Entry "jazz.build-unit-internal" define-macro ("variable") 50 22 50 46 ()}
      {Lisp-Entry "jazz.get-subunit-names-internal" define-macro ("variable") 51 22 51 53 ()}
      {Lisp-Entry "jazz.compile-unit" define #f 54 9 54 26 ("jazz.compile-unit-internal" "%%apply" "core.unit.builder" "'core.unit.builder" "core.module" "'core.module" "jazz.load-unit" "rest")}
      {Lisp-Entry "jazz.custom-compile-unit" define #f 59 9 59 33 ("jazz.custom-compile-unit-internal" "%%apply" "core.unit.builder" "'core.unit.builder" "core.module" "'core.module" "jazz.load-unit" "rest")}
      {Lisp-Entry "jazz.build-unit" define #f 64 9 64 24 ("jazz.build-unit-internal" "%%apply" "core.unit.builder" "'core.unit.builder" "core.module" "'core.module" "jazz.load-unit" "rest")}
      {Lisp-Entry "jazz.get-subunit-names" define #f 69 9 69 31 ("jazz.get-subunit-names-internal" "%%apply" "core.unit.builder" "'core.unit.builder" "core.module" "'core.module" "jazz.load-unit" "rest")}
      {Lisp-Entry "jazz.path->container-hook" define #f 80 9 80 34 ("jazz.find-pathname-unit" "path")}
      {Lisp-Entry "jazz.container->path-hook" define #f 85 9 85 34 ("else" "jazz.resource-pathname" "if" "jazz.find-unit-src" "src" "let" "%%symbol?" "%%string-length" "%%substring" "%%string-append" "jazz.string-starts-with?" "jazz.kernel-source" "jazz.kernel-source-built" "%%string?" "and" "cond" "container")}
      {Lisp-Entry "jazz.container->id-hook" define #f 105 9 105 32 ("%%symbol->string" "%%symbol?" "if" "container")}
      {Lisp-Entry "jazz.image-load-counter" define-macro ("variable") 121 22 121 45 ("0")}
      {Lisp-Entry "jazz.object-load-counter" define-macro ("variable") 122 22 122 46 ("0")}
      {Lisp-Entry "jazz.interpreted-load-counter" define-macro ("variable") 123 22 123 51 ("0")}
      {Lisp-Entry "jazz.increment-image-load-counter" define #f 126 9 126 42 ("1" "%%fx+" "jazz.image-load-counter" "set!")}
      {Lisp-Entry "jazz.increment-object-load-counter" define #f 128 9 128 43 ("1" "%%fx+" "jazz.object-load-counter" "set!")}
      {Lisp-Entry "jazz.increment-interpreted-load-counter" define #f 130 9 130 48 ("1" "%%fx+" "jazz.interpreted-load-counter" "set!")}
      {Lisp-Entry "jazz.library-main" define #f 139 9 139 26 ("jazz.setup-repositories" "jazz.prepare-repositories" "jazz.process-jazzini" "jazz.setup-settings")}
      {Lisp-Entry "jazz.currently-loading-library-procs" define-macro ("variable") 151 22 151 58 ()}
      {Lisp-Entry "jazz.load-libraries" define #f 154 9 154 28 ("jazz.feedback" "jazz.currently-loading-library-procs" "set!" "begin" "0" "%%vector-ref" "%%vector?" "and" "##load-object-file" "lib" "path-normalize" "pathname" "let*" "jazz.iterate-table" "exists?" "filename" "1" "jazz.Library-Extension" "jazz.product-library-name-base" "string-append" "jazz.with-numbered-pathname" "jazz.product-descriptor-name" "product-descriptor" "for-each" "%%package-products" "products" "let" "package" "lambda" "jazz.iterate-packages" "%%table-set!" "jazz.error" "%%table-ref" "if" "library-filename" "product-name" "add-library" "eq?" "test:" "%%make-table" "libraries" "define")}
      {Lisp-Entry "jazz.register-image-units" define #f 188 9 188 34 ("jazz.set-image-unit" "%%cadr" "compile-time-hash" "jazz.currently-loading-library-procs" "%%vector-ref" "load-proc" "name" "let" "i" "unit" "lambda" "1" "%%fx+" "%%cdr" "%%car" "begin" "%%null?" "%%not" "if" "n" "args" "proc" "index-for-each" "define" "units" "lib-name")}
      {Lisp-Entry "jazz.executable-main" define #f 216 9 216 29 ("exit" "else" "jazz.build-product" "jazz.subprocess-build-products" "jazz.make-product" "jazz.update-product" "force?:" "jazz.custom-compile-unit" "jazz.product" "jazz.run-product" "jazz.test-product" "jazz.load-unit" "read" "call-with-input-string" "eval" "cond" "jazz.save-emit?" "expansion" "'expansion" "keep-c" "'keep-c" "%%cons" "jazz.compile-options" "jazz.debug-build?" "0" "%%eqv?" "jazz.jobs" "jazz.parse-link" "jazz.link-options" "jazz.build-link" "or" "jazz.link" "jazz.process-buildini" "setup-build" "jazz.load-libraries" "setup-runtime" "jazz.setup-repositories" "jazz.prepare-repositories" "jazz.repositories" "jazz.user-repository" "jazz.jazz-repository" "jazz.build-repository" "setup-repositories" "jazz.process-jazzini" "jazz.setup-settings" "jazz.debugger" "##allow-inner-global-define?" "jazz.gambit-dir" "jazz.absolutize-directory" "##set-gambcdir!" "jazz.kernel-install" "setup-kernel" "jobs" "link" "debugger" "compile" "build" "make" "update" "run" "test" "load" "ev" "repositories" "user-repository" "jazz-repository" "build-repository" "emit?" "expansion?" "keep-c?" "subbuild?" "force?" "jazz.get-option" "debug?" "let" "remaining" "options" "command-line" "%%cdr" "jazz.split-command-line" "%%string->symbol" "symbol-argument" "%%string->number" "%%string?" "if" "arg" "number-argument" "jazz.repl-main" "%%write-string" "output-port" "lambda" "jazz.warnings" "set!" "opt" "missing-argument-for-option" "define")}
      {Lisp-Entry "jazz.repl-main" define #f 338 9 338 23 ("force-output" "newline" "jazz.kernel-version" "jazz.present-version" "display" "jazz.warnings" "if" "output-port" "first" "lambda" "%%repl" "current-error-port" "repl-output-port" "current-output-port" "repl-input-port" "current-input-port")}}})
"syntax"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "syntax.scm"} 1288732032
    {Lisp-Entry "kernel.syntax" block #f 37 7 37 20 ("jazz.kernel-declares")
      {Lisp-Entry "jazz.define-setting" define-macro ("macro") 48 20 48 39 ("set!" ",name" ",expr" ",global" "define" "begin" "symbol->string" "jazz.generate-symbol" "global" "%%car" "%%null?" "if" "expr" "let" "rest" "name")}
      {Lisp-Entry "jazz.define-variable" define-macro ("macro") 64 20 64 40 (",expr" "set!" ",name" "define" "begin" "%%car" "%%null?" "if" "expr" "let" "rest" "name")}
      {Lisp-Entry "%%make-repository" define-macro ("macro") 81 20 81 37 (",binary?" ",library-directory" ",library-root" ",directory" ",name" "repository" "'repository" "%%vector" "binary?" "library-directory" "library-root" "directory" "name")}
      {Lisp-Entry "%%repository-name" define-macro ("macro") 85 20 85 37 ("1" ",repository" "%%vector-ref" "repository")}
      {Lisp-Entry "%%repository-directory" define-macro ("macro") 88 20 88 42 ("2" ",repository" "%%vector-ref" "repository")}
      {Lisp-Entry "%%repository-library-root" define-macro ("macro") 91 20 91 45 ("3" ",repository" "%%vector-ref" "repository")}
      {Lisp-Entry "%%repository-library-directory" define-macro ("macro") 94 20 94 50 ("4" ",repository" "%%vector-ref" "repository")}
      {Lisp-Entry "%%repository-binary?" define-macro ("macro") 97 20 97 40 ("5" ",repository" "%%vector-ref" "repository")}
      {Lisp-Entry "%%repository-packages-table" define-macro ("macro") 100 20 100 47 ("6" ",repository" "%%vector-ref" "repository")}
      {Lisp-Entry "%%repository-packages-table-set!" define-macro ("macro") 103 20 103 52 (",packages-table" "6" ",repository" "%%vector-set!" "packages-table" "repository")}
      {Lisp-Entry "%%make-package" define-macro ("macro") 116 20 116 34 ("eq?" "test:" "%%make-table" ",project" ",profiles" ",products" ",char-encoding" ",install" ",units-path" ",units-root" ",library-path" ",library-root" ",parent" ",name" ",repository" "package" "'package" "%%vector" "project" "profiles" "products" "char-encoding" "install" "units-path" "units-root" "library-path" "library-root" "parent" "name" "repository")}
      {Lisp-Entry "%%package-repository" define-macro ("macro") 120 20 120 40 ("1" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-name" define-macro ("macro") 123 20 123 34 ("2" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-parent" define-macro ("macro") 126 20 126 36 ("3" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-library-root" define-macro ("macro") 129 20 129 42 ("4" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-library-path" define-macro ("macro") 132 20 132 42 ("5" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-units-root" define-macro ("macro") 135 20 135 40 ("6" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-units-path" define-macro ("macro") 138 20 138 40 ("7" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-install" define-macro ("macro") 141 20 141 37 ("8" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-char-encoding" define-macro ("macro") 144 20 144 43 ("9" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-products" define-macro ("macro") 147 20 147 38 ("10" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-profiles" define-macro ("macro") 150 20 150 38 ("11" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%package-project" define-macro ("macro") 153 20 153 37 ("12" ",package" "%%vector-ref" "package")}
      {Lisp-Entry "%%make-product" define-macro ("macro") 165 20 165 34 (",descriptor" ",package" ",build-library" ",build" ",update" ",test" ",run" ",icon" ",title" ",name" "product" "'product" "%%vector" "descriptor" "package" "build-library" "build" "update" "test" "run" "icon" "title" "name")}
      {Lisp-Entry "%%product-name" define-macro ("macro") 168 20 168 34 ("1" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-title" define-macro ("macro") 171 20 171 35 ("2" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-icon" define-macro ("macro") 174 20 174 34 ("3" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-run" define-macro ("macro") 177 20 177 33 ("4" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-test" define-macro ("macro") 180 20 180 34 ("5" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-update" define-macro ("macro") 183 20 183 36 ("6" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-build" define-macro ("macro") 186 20 186 35 ("7" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-build-library" define-macro ("macro") 189 20 189 43 ("8" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-package" define-macro ("macro") 192 20 192 37 ("9" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%product-descriptor" define-macro ("macro") 195 20 195 40 ("10" ",product" "%%vector-ref" "product")}
      {Lisp-Entry "%%make-resource" define-macro ("macro") 209 20 209 35 (",extension" ",path" ",package" "resource" "'resource" "%%vector" "extension" "path" "package")}
      {Lisp-Entry "%%resource-package" define-macro ("macro") 213 20 213 38 ("1" ",resource" "%%vector-ref" "resource")}
      {Lisp-Entry "%%resource-path" define-macro ("macro") 216 20 216 35 ("2" ",resource" "%%vector-ref" "resource")}
      {Lisp-Entry "%%resource-extension" define-macro ("macro") 219 20 219 40 ("3" ",resource" "%%vector-ref" "resource")}
      {Lisp-Entry "%%make-image-unit" define-macro ("macro") 228 20 228 37 (",compile-time-hash" ",load-proc" "image-unit" "'image-unit" "%%vector" "compile-time-hash" "load-proc")}
      {Lisp-Entry "%%image-unit-load-proc" define-macro ("macro") 231 20 231 42 ("1" ",image-unit" "%%vector-ref" "image-unit")}
      {Lisp-Entry "%%image-unit-compile-time-hash" define-macro ("macro") 234 20 234 50 ("2" ",image-unit" "%%vector-ref" "image-unit")}
      {Lisp-Entry "%%make-digest" define-macro ("macro") 243 20 243 33 (",time" ",hash" ",pathname" "digest" "'digest" "%%vector" "time" "hash" "pathname")}
      {Lisp-Entry "%%digest-pathname" define-macro ("macro") 247 20 247 37 ("1" ",digest" "%%vector-ref" "digest")}
      {Lisp-Entry "%%digest-pathname-set!" define-macro ("macro") 250 20 250 42 (",pathname" "1" ",digest" "%%vector-set!" "pathname" "digest")}
      {Lisp-Entry "%%digest-hash" define-macro ("macro") 253 20 253 33 ("2" ",digest" "%%vector-ref" "digest")}
      {Lisp-Entry "%%digest-hash-set!" define-macro ("macro") 256 20 256 38 (",hash" "2" ",digest" "%%vector-set!" "hash" "digest")}
      {Lisp-Entry "%%digest-time" define-macro ("macro") 259 20 259 33 ("3" ",digest" "%%vector-ref" "digest")}
      {Lisp-Entry "%%digest-time-set!" define-macro ("macro") 262 20 262 38 (",time" "3" ",digest" "%%vector-set!" "time" "digest")}
      {Lisp-Entry "%%make-manifest" define-macro ("macro") 271 20 271 35 (",references" ",source-digests" ",compile-time-hash" ",version" ",name" "manifest" "'manifest" "%%vector" "references" "source-digests" "compile-time-hash" "version" "name")}
      {Lisp-Entry "%%manifest-name" define-macro ("macro") 275 20 275 35 ("1" ",manifest" "%%vector-ref" "manifest")}
      {Lisp-Entry "%%manifest-version" define-macro ("macro") 278 20 278 38 ("2" ",manifest" "%%vector-ref" "manifest")}
      {Lisp-Entry "%%manifest-version-set!" define-macro ("macro") 281 20 281 43 (",version" "2" ",manifest" "%%vector-set!" "version" "manifest")}
      {Lisp-Entry "%%manifest-compile-time-hash" define-macro ("macro") 284 20 284 48 ("3" ",manifest" "%%vector-ref" "manifest")}
      {Lisp-Entry "%%manifest-compile-time-hash-set!" define-macro ("macro") 287 20 287 53 (",compile-time-hash" "3" ",manifest" "%%vector-set!" "compile-time-hash" "manifest")}
      {Lisp-Entry "%%manifest-source-digests" define-macro ("macro") 290 20 290 45 ("4" ",manifest" "%%vector-ref" "manifest")}
      {Lisp-Entry "%%manifest-source-digests-set!" define-macro ("macro") 293 20 293 50 (",source-digests" "4" ",manifest" "%%vector-set!" "source-digests" "manifest")}
      {Lisp-Entry "%%manifest-references" define-macro ("macro") 296 20 296 41 ("5" ",manifest" "%%vector-ref" "manifest")}
      {Lisp-Entry "%%manifest-references-set!" define-macro ("macro") 299 20 299 46 (",references" "5" ",manifest" "%%vector-set!" "references" "manifest")}
      {Lisp-Entry "unit" define-macro ("syntax") 308 20 308 24 ("jazz.source-code" "%%cdr" "jazz.expand-unit-source" "form-src" "lambda")}
      {Lisp-Entry "require" define-macro ("syntax") 313 20 313 27 ("jazz.source-code" "%%cdr" "jazz.expand-require" "form-src" "lambda")}}})
"unit"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "unit.scm"} 1289932215
    {Lisp-Entry "kernel.unit" block #f 38 7 38 18 ("jazz.scheme-readtable" "lambda" "jazz.register-reader-extension" "jazz.kernel-source" "jazz.jazz-source" "set!" "jazz.kernel-declares")
      {Lisp-Entry "jazz.display" define-macro ("variable") 49 22 49 34 ("display")}
      {Lisp-Entry "jazz.write" define-macro ("variable") 50 22 50 32 ("write")}
      {Lisp-Entry "jazz.format" define #f 58 9 58 20 ("get-output-string" "open-output-string" "port" "write-char" "%%eqv?" "cond" "begin" "%%eof-object?" "%%not" "c" "iter" "jazz.kernel-error" "else" "newline" "%" "display" "element" "lambda" "for-each" "first?" "l" "t" "jazz.write" "s" "set!" "jazz.display" "a" "case" "read-char" "read" "directive" "format-directive" "done?" "open-input-string" "control" "let" "arguments" "fmt-string" "output" "format-to" "%%cddr" "%%cadr" "%%cdr" ":string" "':string" "%%car" "%%string?" "if" "proc" "parse-format" "define" "rest")}
      {Lisp-Entry "jazz.pristine-thread-continuation" define #f 122 8 122 41 ("cont" "continuation-capture" "lambda" "make-thread" "thread-start!" "thread-join!")}
      {Lisp-Entry "jazz.kernel-error" define #f 137 9 137 26 ("error" "%%apply" "rest")}
      {Lisp-Entry "jazz.raise-system-error" define #f 141 9 141 32 ("error" "jazz.format" "apply" "error-string" "let" "rest" "fmt-string")}
      {Lisp-Entry "jazz.error" define-macro ("variable") 146 22 146 32 ("jazz.raise-system-error")}
      {Lisp-Entry "jazz.primitive-type-error" define #f 150 9 150 34 ("%%cons" "jazz.format" "error" "args" "proc" "type" "num")}
      {Lisp-Entry "jazz.some?" define #f 159 9 159 19 ("%%cdr" "%%car" "or" "%%null?" "if" "scan" "iter" "let" "proper-tail-calls" "declare" "lst" "predicate")}
      {Lisp-Entry "jazz.every?" define #f 168 9 168 20 ("%%cdr" "%%car" "and" "%%null?" "or" "scan" "iter" "let" "proper-tail-calls" "declare" "lst" "predicate")}
      {Lisp-Entry "jazz.global-bound?" define #f 185 13 185 31 ("global-bound?" "symbol")}
      {Lisp-Entry "jazz.global-ref" define #f 188 13 188 28 ("global-ref" "symbol")}
      {Lisp-Entry "jazz.global-bound?" define #f 192 13 192 31 ("%%global-var-ref" "%%unbound?" "%%not" "%%global-var?" "and" "symbol")}
      {Lisp-Entry "jazz.global-ref" define #f 196 13 196 28 ("%%global-var-ref" "symbol")}
      {Lisp-Entry "jazz.global-set!" define #f 199 13 199 29 ("%%global-var-set!" "value" "symbol")}
      {Lisp-Entry "jazz.file-delete" define #f 212 12 212 28 ("delete-file")}
      {Lisp-Entry "jazz.file-copy" define #f 215 12 215 26 ("copy-file")}
      {Lisp-Entry "jazz.directory-exists?" define #f 218 12 218 34 ("file-exists?")}
      {Lisp-Entry "jazz.directory-create" define #f 221 12 221 33 ("create-directory")}
      {Lisp-Entry "jazz.marker?" define #f 232 9 232 21 ("#!rest" "#!key" "#!optional" "%%eq?" "or" "obj")}
      {Lisp-Entry "jazz.kernel-built" define #f 243 8 243 25 ("jazz.built")}
      {Lisp-Entry "jazz.kernel-install" define #f 247 8 247 27 ("jazz.built" "jazz.pathname-normalize" "jazz.executable-directory" "executable" "'executable" "jazz.image" "%%eq?" "and" "or")}
      {Lisp-Entry "jazz.install-path" define #f 252 9 252 26 ("%%string-append" "jazz.kernel-install" "%%not" "if" "filename")}
      {Lisp-Entry "jazz.kernel-source-built" define #f 258 8 258 32 ("jazz.source-built")}
      {Lisp-Entry "jazz.kernel-source" define #f 262 8 262 26 ("jazz.kernel-install" "jazz.absolutize-directory" "jazz.source" "if")}
      {Lisp-Entry "jazz.jazz-product" define #f 271 9 271 26 ("jazz.product")}
      {Lisp-Entry "jazz.jazz-profile" define #f 275 9 275 26 ("jazz.profile")}
      {Lisp-Entry "jazz.profile" define #f 279 8 279 20 ("make-parameter")}
      {Lisp-Entry "jazz.run-loop?" define #f 284 8 284 22 ("make-parameter")}
      {Lisp-Entry "jazz.Repository-Filename" define #f 293 8 293 32 ()}
      {Lisp-Entry "jazz.repository?" define #f 297 9 297 25 ("repository" "'repository" "%%vector-ref" "%%eq?" "0" "%%vector-length" "%%fx>" "%%vector?" "and" "obj")}
      {Lisp-Entry "jazz.Repositories" define-macro ("variable") 303 22 303 39 ()}
      {Lisp-Entry "jazz.Build-Repository" define-macro ("variable") 306 22 306 43 ()}
      {Lisp-Entry "jazz.get-repositories" define #f 310 9 310 30 ("jazz.Repositories")}
      {Lisp-Entry "jazz.get-build-repository" define #f 313 9 313 34 ("jazz.Build-Repository")}
      {Lisp-Entry "jazz.prepare-repositories" define #f 317 9 317 34 ("%%append" "jazz.Repositories" "jazz.Build-Repository" "set!" "jazz.repositories" "jazz.user-repository" "User" "'User" "jazz.kernel-source" "jazz.jazz-repository" "Jazz" "'Jazz" "create?:" "binary?:" "jazz.kernel-install" "jazz.build-repository" "or" "Build" "'Build" "jazz.make-repository" "let" "jazz.split-string" "jazz.load-repository" "map" "%%list" "if" "repository" "listify" "repositories" "user" "jazz" "build" "all-repositories" "define")}
      {Lisp-Entry "jazz.make-repository" define #f 339 9 339 29 ("else" "jazz.create-directories" "jazz.load-repository" "jazz.file-exists?" "cond" "jazz.Repository-Filename" "%%string-append" "jazz.dirname-normalize" "let" "%%equal?" "%%not" "or" "jazz.error" "repository-inexistant" "write" "begin" "if" "newline" "display" "output" "lambda" "jazz.kernel-platform" "jazz.platform-eol-encoding" "eol-encoding:" "path:" "list" "call-with-output-file" "repository-file" "create-repository" "define" "create?" "binary?" "#!key" "library-root" "directory" "name")}
      {Lisp-Entry "jazz.load-repository" define #f 375 9 375 29 ("else" "jazz.directory-exists?" "cond" "jazz.dirname-normalize" "jazz.error" "repository-inexistant" "%%make-repository" "%%not" "library-directory" "library-root" "if" "library" "'library" "library-pair" "binary?" "'binary?" "%%assq" "binary-pair" "jazz.pathname-normalize" "%%cddr" "alist" "%%cadr" "name" "read" "form" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "jazz.Repository-Filename" "%%string-append" "repository-file" "let" "load-repository" "define" "error?" "#!key" "directory")}
      {Lisp-Entry "jazz.install-repository" define #f 403 9 403 32 ("jazz.setup-repository" "jazz.setup-repositories-called?" "if" "%%list" "%%append" "jazz.Repositories" "set!" "jazz.load-repository" "repository" "let" "directory")}
      {Lisp-Entry "jazz.install-repository-if-exists" define #f 411 9 411 42 ("jazz.install-repository" "jazz.directory-exists?" "if" "directory")}
      {Lisp-Entry "jazz.uninstall-repository" define #f 416 9 416 34 ("%%remove" "jazz.Repositories" "set!" "repository")}
      {Lisp-Entry "jazz.find-repository" define #f 420 9 420 29 ("%%cdr" "%%repository-name" "%%eq?" "%%car" "repository" "%%null?" "if" "jazz.Repositories" "repositories" "iter" "let" "name")}
      {Lisp-Entry "jazz.find-package" define #f 430 9 430 26 ("jazz.repository-find-package" "package" "%%cdr" "%%repository-binary?" "%%car" "repository" "%%null?" "if" "jazz.Repositories" "repositories" "iter" "let" "package-name")}
      {Lisp-Entry "jazz.repository-pathname" define #f 443 9 443 33 ("%%repository-library-directory" "%%string-append" "path" "repository")}
      {Lisp-Entry "jazz.repository-packages-table" define #f 448 9 448 39 ("jazz.repository-install-packages" "%%repository-packages-table-set!" "eq?" "test:" "%%make-table" "table" "let" "%%repository-packages-table" "or" "repository")}
      {Lisp-Entry "jazz.setup-repositories-called?" define-macro ("variable") 456 22 456 53 ()}
      {Lisp-Entry "jazz.setup-repositories" define #f 460 9 460 32 ("jazz.setup-repositories-called?" "set!" "jazz.Repositories" "jazz.setup-repository" "for-each")}
      {Lisp-Entry "jazz.setup-repository" define #f 465 9 465 30 ("jazz.setup-package" "package" "name" "lambda" "jazz.iterate-table-safe" "jazz.repository-packages-table" "table" "let" "repository")}
      {Lisp-Entry "jazz.repository-packages" define #f 472 9 472 33 ("%%cons" "set!" "package" "name" "lambda" "jazz.iterate-table" "packages" "jazz.repository-packages-table" "table" "let" "repository")}
      {Lisp-Entry "jazz.repository-find-package" define #f 481 9 481 37 ("jazz.repository-packages-table" "%%table-ref" "package-name" "repository")}
      {Lisp-Entry "jazz.repository-install-packages" define #f 485 9 485 41 ("%%package-name" "%%table-set!" "lambda" "for-each" "%%repository-library-directory" "%%package-repository" "jazz.repository-pathname" "%%package-library-path" "library-path" "%%cons" "jazz.load-package" "package" "%%cdr" "%%table-ref" "%%string->symbol" "package-name" "jazz.file-exists?" "jazz.Package-Filename" "package-pathname" "%%string-append" "directory" "%%car" "dirname" "%%null?" "jazz.directory-directories" "dirnames" "iter" "jazz.directory-exists?" "if" "packages" "library-directory" "parent" "discover-packages" "%%repository-packages-table" "table" "let" "repository-discover-packages" "define" "repository")}
      {Lisp-Entry "jazz.repository-add-package" define #f 520 9 520 36 ("%%package-name" "%%table-set!" "jazz.repository-packages-table" "table" "let" "package" "repository")}
      {Lisp-Entry "jazz.repository-remove-package" define #f 525 9 525 39 ("%%package-name" "%%table-clear" "jazz.repository-packages-table" "table" "let" "package" "repository")}
      {Lisp-Entry "jazz.load-package" define #f 530 9 530 26 ("jazz.error" "jazz.cache-package-roots" "%%cdr" "jazz.make-package" "package" "'project" "project" "'profiles" "profiles" "'products" "products" "'char-encoding" "char-encoding" "'install" "install" "'root" "root" "'library" "%%assq" "library" "%%eq?" "if" "%%cddr" "alist" "%%cadr" "name" "read" "form" "let" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "package-pathname" "package-name" "parent" "repository")}
      {Lisp-Entry "jazz.create-build-package" define #f 558 9 558 34 ("jazz.file-copy" "jazz.file-delete" "jazz.create-directories" "begin" "jazz.repository-find-package" "or" "jazz.file-modification-time" ">=" "jazz.file-exists?" "and" "%%repository-packages-table" "%%table-set!" "jazz.load-package" "let" "load-package" "define" "jazz.Build-Repository" "dst" "%%package-repository" "jazz.repository-pathname" "src" "jazz.Package-Filename" "path" "%%symbol->string" "%%package-library-path" "%%string-append" "dir" "jazz.create-build-package" "if" "bin-parent" "%%package-parent" "parent" "%%package-name" "name" "let*" "package")}
      {Lisp-Entry "jazz.setup-package" define #f 584 9 584 27 ("jazz.load-unit" "if" "%%package-install" "install" "let" "package")}
      {Lisp-Entry "jazz.inspect-install" define #f 590 9 590 29 ("jazz.Repositories" "%%package-units-path" "%%package-units-root" "%%package-name" ":package" "package" "jazz.repository-packages" "inspect-package" "map" "%%repository-library-directory" "%%repository-name" ":repository" "repository" "inspect-repository" "path-expand" ",path" ":path" "path" "inspect-path" "define")}
      {Lisp-Entry "jazz.Package-Filename" define #f 616 8 616 29 ()}
      {Lisp-Entry "jazz.package?" define #f 620 9 620 22 ("package" "'package" "%%vector-ref" "%%eq?" "0" "%%vector-length" "%%fx>" "%%vector?" "and" "obj")}
      {Lisp-Entry "jazz.make-package" define #f 626 9 626 26 ("%%make-package" "units-path" "%%symbol->string" "%%string-append" "%%not" "if" "library-path" "let" "project" "profiles" "products" "char-encoding" "install" "units-root" "library-root" "parent" "name" "repository")}
      {Lisp-Entry "jazz.package-root" define #f 636 9 636 26 ("%%package-name" "%%symbol->string" "%%package-library-path" "if" "%%package-repository" "%%repository-library-root" "library-root" "%%string-append" "%%package-parent" "parent" "let" "package")}
      {Lisp-Entry "jazz.package-pathname" define #f 646 9 646 30 ("%%package-name" "%%symbol->string" "%%string-append" "%%package-repository" "jazz.repository-pathname" "path" "package")}
      {Lisp-Entry "jazz.package-root-pathname" define #f 651 9 651 35 ("%%package-repository" "jazz.relocate-package-pathname" "path" "package")}
      {Lisp-Entry "jazz.relocate-package-pathname" define #f 655 9 655 39 ("or" "%%package-units-path" "%%package-library-path" "if" "%%string-append" "jazz.repository-pathname" "%%package-parent" "parent" "let" "path" "package" "repository")}
      {Lisp-Entry "jazz.iterate-packages" define #f 664 9 664 30 ("package" "jazz.repository-packages" "packages" "iter" "%%cdr" "%%repository-binary?" "%%neq?" "%%car" "repository" "%%null?" "%%not" "if" "jazz.Repositories" "repositories" "iter-repo" "let" "proc" "binary?")}
      {Lisp-Entry "jazz.find-resource" define #f 678 9 678 27 ("%%make-resource" "%%fx>=" "previous-pos" "name-length" "name" "%%string-ref" "%%eqv?" "%%fx<" "2" "name-pos" "jazz.string-find-reversed" "pos" "len" "1" "%%fx+" "%%fx-" "set!" "jazz.pathname-extension" "extension" "path" "let*" "0" "%%substring" "%%string=?" "%%fx<=" "and" "package-length" "%%string-length" "pathname-length" "jazz.package-root-pathname" "package-pathname" "package" "%%cdr" "%%car" "jazz.repository-packages" "packages" "iter" "%%null?" "if" "jazz.Repositories" "repositories" "iter-repo" "let" "pathname")}
      {Lisp-Entry "jazz.descendant-unit?" define #f 711 9 711 30 ("%%string-ref" "%%eqv?" "0" "%%substring" "%%string=?" "%%fx>" "and" "descendant-length" "%%string-length" "unit-length" "descendant" "%%symbol->string" "unit" "let" "descendant-name" "unit-name")}
      {Lisp-Entry "jazz.find-pathname-unit" define #f 721 9 721 32 ("%%resource-path" "jazz.path->name" "if" "jazz.find-resource" "resource" "let" "pathname")}
      {Lisp-Entry "jazz.gather-profiles" define #f 733 9 733 29 ("%%cons" "package-profile" "lambda" "map" "%%append" "%%package-profiles" "package-profiles" "package" "jazz.repository-packages" "packages" "iter" "%%cdr" "%%repository-binary?" "%%car" "repository" "%%null?" "if" "profiles" "jazz.Repositories" "repositories" "iter-repo" "let")}
      {Lisp-Entry "jazz.make-profile" define #f 751 9 751 26 (",unit-name" "unit" ",name" "unit-name" "name")}
      {Lisp-Entry "jazz.profile-name" define #f 755 9 755 26 ("%%car" "profile")}
      {Lisp-Entry "jazz.profile-title" define #f 758 9 758 27 ("jazz.profile-name" "%%symbol->string" "profile")}
      {Lisp-Entry "jazz.profile-appl" define #f 761 9 761 26 ("jazz.error" "%%not" "if" "%%cdr" "appl" "'appl" "%%assq" "pair" "let" "profile")}
      {Lisp-Entry "jazz.profile-unit" define #f 767 9 767 26 ("%%cadr" "jazz.error" "%%not" "if" "%%cdr" "unit" "'unit" "%%assq" "pair" "let" "profile")}
      {Lisp-Entry "lower-case-unit-name?" define #f 779 9 779 30 ("%%char<=?" "and" "%%symbol->string" "first-char" "else" "0" "%%fx=" "jazz.error" "%%fx+" "%%fx<" "if" "%%char=?" "cond" "%%string-ref" "ch" "1" "%%string-length" "%%fx-" "offset" "loop" "let" "str" "first-char-of-last-name" "define" "unit-name")}
      {Lisp-Entry "jazz.find-unit-src" define #f 797 9 797 27 ("jazz.error" "jazz.cache-package" "begin" "jazz.iterate-packages" "jazz.*source-packages-cache*" "jazz.cached-packages" "continuation-return" "src" "for-each" "jazz.name->path" "return" "lambda" "continuation-capture" "error?" "jazz.pathname-name" "lower-case-unit-name?" "jazz.directory-exists?" "and" "%%cdr" "%%car" "%%null?" "or" "iter" "let" "%%make-resource" "%%string-append" "jazz.package-root-pathname" "jazz.file-exists?" "if" "extension" "try-extension" "try" "path" "package" "find-src" "define" "rest" "extensions" "unit-name")}
      {Lisp-Entry "jazz.with-unit-resources" define #f 842 9 842 33 ("%%image-unit-load-proc" "jazz.image-unit-uptodate-src?" "jazz.image-unit-uptodate?" "lib-uptodate?" "bin-uptodate?" "obj-uptodate?" "jazz.get-image-unit" "image-unit" "jazz.find-unit-src" "jazz.cache-package" "begin" "jazz.iterate-packages" "jazz.*binary-packages-cache*" "jazz.cached-packages" "continuation-return" "receive" "for-each" "jazz.name->path" "return" "lambda" "continuation-capture" "values" "jazz.manifest-needs-rebuild?" "jazz.manifest-uptodate?" "%%not" "uptodate?" "jazz.resource-pathname" "jazz.manifest-pathname" "%%resource-package" "jazz.digest-pathname" "jazz.load-updated-manifest" "or" "obj/bin" "manifest" "bin" "obj" "find-uptodate" "jazz.pathname-name" "lower-case-unit-name?" "jazz.directory-exists?" "and" "%%make-resource" "%%string-append" "jazz.package-root-pathname" "jazz.file-exists?" "if" "try" "extension" "path" "package" "find" "src" "find-unit-binaries" "%%memv" "else" "%%eq?" "%%symbol?" "%%boolean?" "cond" "jazz.force-interpreted?" "interpreted?" "let" "force-interpreted?" "define" "proc" "extensions" "unit-name")}
      {Lisp-Entry "jazz.unit-status" define #f 934 9 934 25 ("sha-1" "'sha-1" "jazz.resource-pathname" "digest-file" "begin" "if" "newline" "display" "jazz.unit-loaded?" "loaded?" "let" "manifest" "lib-uptodate?" "bin-uptodate?" "obj-uptodate?" "load-proc" "bin" "obj" "src" "lambda" "jazz.with-unit-resources" "unit-name")}
      {Lisp-Entry "jazz.unit-uptodate-binary?" define #f 951 9 951 35 ("or" "manifest" "lib-uptodate?" "bin-uptodate?" "obj-uptodate?" "lib" "bin" "obj" "src" "lambda" "jazz.with-unit-resources" "unit-name")}
      {Lisp-Entry "jazz.image-unit-uptodate?" define #f 957 9 957 34 ("%%digest-hash" "%%image-unit-compile-time-hash" "%%string=?" "and" "jazz.resource-pathname" "jazz.find-source-digest" "digest" "let" "manifest" "src" "image-unit")}
      {Lisp-Entry "jazz.image-unit-uptodate-src?" define #f 962 9 962 38 ("%%image-unit-compile-time-hash" "%%string=?" "sha-1" "'sha-1" "jazz.resource-pathname" "digest-file" "source-hash" "let" "src" "image-unit")}
      {Lisp-Entry "jazz.validate-repository-unicity" define #f 967 9 967 41 ("%%repository-name" "or" "jazz.error" "%%not" "%%cdr" "%%car" "package" "%%null?" "if" "found?" "jazz.repository-packages" "packages" "iter" "let" "repository-unique?" "define" "proc" "unit-name" "repository")}
      {Lisp-Entry "jazz.*binary-packages-cache*" define #f 999 8 999 36 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.*source-packages-cache*" define #f 1002 8 1002 36 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.cache-package" define #f 1006 9 1006 27 ("%%cons" "%%table-set!" "%%memq" "%%not" "if" "%%table-ref" "packages" "let" "singleton-prefix" "prefix" "lambda" "jazz.with-cached-prefix" "package" "unit-name" "cache")}
      {Lisp-Entry "jazz.cached-packages" define #f 1014 9 1014 29 ("if" "%%table-ref" "or" "singleton-prefix" "prefix" "lambda" "jazz.with-cached-prefix" "unit-name" "cache")}
      {Lisp-Entry "jazz.with-cached-prefix" define #f 1024 9 1024 32 ("0" "%%substring" "%%string->symbol" "1" "%%fx+" "second-period" "if" "jazz.string-find" "first-period" "%%symbol->string" "name" "let" "proc" "unit-name")}
      {Lisp-Entry "jazz.cache-package-roots" define #f 1036 9 1036 33 ("jazz.directory-directories" "jazz.directory-content" "jazz.cache-package" "%%string->symbol" "unit-name" "directory" "set!" "regular" "jazz.pathname-type" "case" "%%string-append" "second-path" "second-part" "has-files?" "string-append" "first-dir" "first-part" "lambda" "for-each" "jazz.directory-exists?" "jazz.package-root-pathname" "toplevel-dir" "jazz.*source-packages-cache*" "jazz.*binary-packages-cache*" "%%package-repository" "%%repository-binary?" "if" "cache" "let" "package")}
      {Lisp-Entry "jazz.load-debuggee" define #f 1064 9 1064 27 ("jazz.debuggee.setup" "'jazz.debuggee.setup" "jazz.load-unit" "jazz.load-debuggee-units")}
      {Lisp-Entry "jazz.load-debuggee-units" define #f 1069 9 1069 33 ("jazz.debugger.jazz.stub-autoload" "'jazz.debugger.jazz.stub-autoload" "jazz.debugger.jazz.stub" "'jazz.debugger.jazz.stub" "jazz.debuggee.stub" "'jazz.debuggee.stub" "jazz.debuggee.Debuggee-Thread" "'jazz.debuggee.Debuggee-Thread" "jazz.debuggee.Debuggee-Stop" "'jazz.debuggee.Debuggee-Stop" "jazz.debuggee.Debuggee-Process" "'jazz.debuggee.Debuggee-Process" "jazz.debuggee.Debuggee-Frame" "'jazz.debuggee.Debuggee-Frame" "jazz.debuggee" "'jazz.debuggee" "jazz" "'jazz" "core.module" "'core.module" "jazz.load-unit")}
      {Lisp-Entry "jazz.find-product-descriptor" define #f 1087 9 1087 37 ("else" "set!" "%%repository-binary?" "jazz.find-product-descriptor" "cond" "jazz.product-descriptor-alias" "alias" "%%package-products" "%%assq" "pair" "package" "%%cdr" "jazz.repository-packages" "packages" "iter" "%%car" "repository" "values" "%%null?" "if" "jazz.Repositories" "repositories" "iter-repo" "binary-descriptor" "binary-package" "let" "name")}
      {Lisp-Entry "jazz.product-descriptor-name" define #f 1112 9 1112 37 ("%%car" "descriptor")}
      {Lisp-Entry "jazz.product-descriptor-alias" define #f 1115 9 1115 38 ("%%cadr" "if" "%%cdr" "alias" "'alias" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "jazz.product-descriptor-unit" define #f 1121 9 1121 37 ("%%cadr" "if" "%%cdr" "unit" "'unit" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "jazz.product-descriptor-title" define #f 1127 9 1127 38 ("%%cadr" "if" "%%cdr" "title" "'title" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "jazz.product-descriptor-icon" define #f 1133 9 1133 37 ("%%cadr" "if" "%%cdr" "icon" "'icon" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "jazz.product-descriptor-run" define #f 1139 9 1139 36 ("if" "%%cdr" "run" "'run" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "jazz.product-descriptor-test" define #f 1145 9 1145 37 ("if" "%%cdr" "test" "'test" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "jazz.product-descriptor-update" define #f 1151 9 1151 39 ("if" "%%cdr" "update" "'update" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "jazz.product-descriptor-build" define #f 1157 9 1157 38 ("if" "%%cdr" "build" "'build" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "jazz.product-descriptor-library" define #f 1163 9 1163 40 ("if" "%%cdr" "library" "'library" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "jazz.product-descriptor-dependencies" define #f 1170 9 1170 45 ("if" "%%cdr" "dependencies" "'dependencies" "%%assq" "pair" "let" "descriptor")}
      {Lisp-Entry "jazz.Products-Table" define #f 1177 8 1177 27 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.Products-Run-Table" define #f 1180 8 1180 31 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.process-name" define-macro ("variable") 1184 22 1184 39 ()}
      {Lisp-Entry "jazz.process-title" define-macro ("variable") 1187 22 1187 40 ()}
      {Lisp-Entry "jazz.process-icon" define-macro ("variable") 1190 22 1190 39 ()}
      {Lisp-Entry "jazz.process-version" define-macro ("variable") 1193 22 1193 42 ()}
      {Lisp-Entry "jazz.current-process-name" define #f 1197 9 1197 34 ("jazz.process-name")}
      {Lisp-Entry "jazz.current-process-name-set!" define #f 1200 9 1200 39 ("jazz.process-name" "set!" "name")}
      {Lisp-Entry "jazz.current-process-title" define #f 1203 9 1203 35 ("jazz.process-title")}
      {Lisp-Entry "jazz.current-process-title-set!" define #f 1206 9 1206 40 ("jazz.process-title" "set!" "title")}
      {Lisp-Entry "jazz.current-process-icon" define #f 1209 9 1209 34 ("jazz.process-icon")}
      {Lisp-Entry "jazz.current-process-icon-set!" define #f 1212 9 1212 39 ("jazz.process-icon" "set!" "icon")}
      {Lisp-Entry "jazz.current-process-version" define #f 1215 9 1215 37 ("jazz.process-version")}
      {Lisp-Entry "jazz.current-process-version-set!" define #f 1218 9 1218 42 ("jazz.process-version" "set!" "version")}
      {Lisp-Entry "jazz.current-process-present" define #f 1222 9 1222 37 ("%%symbol->string" "if" "jazz.current-process-name" "name" "let" "jazz.current-process-title" "or")}
      {Lisp-Entry "jazz.register-product" define #f 1230 9 1230 30 ("%%make-product" "jazz.Products-Table" "%%table-set!" "jazz.find-product-descriptor" "descriptor" "package" "receive" "library" "build" "update" "test" "run" "icon" "title" "#!key" "name")}
      {Lisp-Entry "jazz.get-product-descriptor" define #f 1235 9 1235 36 ("jazz.error" "values" "and" "if" "jazz.find-product-descriptor" "descriptor" "package" "receive" "name")}
      {Lisp-Entry "jazz.get-product" define #f 1242 9 1242 25 ("jazz.build-library-descriptor" "jazz.build-product-descriptor" "jazz.update-product-descriptor" "%%make-product" "jazz.product-descriptor-icon" "icon" "jazz.product-descriptor-title" "title" "jazz.load-unit" "begin" "if" "jazz.product-descriptor-unit" "unit" "jazz.product-descriptor-name" "let" "jazz.get-product-descriptor" "descriptor" "package" "receive" "jazz.error" "jazz.Products-Table" "%%table-ref" "or" "get-registered-product" "define" "name")}
      {Lisp-Entry "jazz.setup-product" define #f 1266 9 1266 27 ("jazz.debuggee.update" "'jazz.debuggee.update" "jazz.load-unit" "jazz.product-descriptor-icon" "%%product-icon" "jazz.process-icon" "jazz.product-descriptor-title" "%%product-title" "or" "jazz.process-title" "%%product-descriptor" "descriptor" "product" "let" "jazz.load-debuggee" "jazz.process-name" "set!" "begin" "jazz.get-product" "jazz.debugger" "%%not" "if" "name")}
      {Lisp-Entry "jazz.register-product-run" define #f 1281 9 1281 34 ("jazz.Products-Run-Table" "%%table-set!" "proc" "name")}
      {Lisp-Entry "jazz.run-product" define #f 1285 9 1285 25 ("%%product-descriptor" "%%product-run" "jazz.setup-product" "product" "jazz.Products-Run-Table" "%%table-ref" "or" "jazz.error" "get-registered-run" "proc" "jazz.load-unit" "for-each" "begin" "if" "jazz.product-descriptor-run" "run" "jazz.product-descriptor-name" "let" "descriptor" "run-product-descriptor" "define" "name")}
      {Lisp-Entry "jazz.test-product" define #f 1308 9 1308 26 ("%%product-descriptor" "%%product-test" "jazz.setup-product" "product" "jazz.error" "jazz.load-unit" "for-each" "if" "jazz.product-descriptor-test" "test" "jazz.product-descriptor-name" "let" "descriptor" "test-product-descriptor" "define" "name")}
      {Lisp-Entry "jazz.ill-formed-field-error" define #f 1324 9 1324 36 ("jazz.error" "lambda" "product-name" "field-name")}
      {Lisp-Entry "jazz.cond-expand-each" define #f 1329 9 1329 30 ("map" "append" "%%apply" "'cond" "%%list" "%%symbol?" "update" "expand-update" "null?" "else" "'else" "%%eq?" "%%cdr" "jazz.feature-satisfied?" "clause" "let" "%%car" "%%pair?" "and" "cond" "exp" "apply-cond-expand" "define" "updates" "error-proc")}
      {Lisp-Entry "jazz.update-product" define #f 1357 9 1357 28 ("jazz.update-product-descriptor" "if" "%%product-descriptor" "descriptor" "%%product-update" "update" "jazz.setup-product" "product" "let" "name")}
      {Lisp-Entry "jazz.update-product-descriptor" define #f 1366 9 1366 39 ("jazz.build-unit" "for-each" "jazz.product-descriptor-update" "jazz.ill-formed-field-error" "jazz.cond-expand-each" "update" "jazz.product-descriptor-name" "name" "let*" "descriptor")}
      {Lisp-Entry "jazz.build-product" define #f 1373 9 1373 27 ("jazz.build-library-descriptor" "jazz.link-libraries?" "jazz.build-product-descriptor" "if" "core.unit.builder" "'core.unit.builder" "core.module" "'core.module" "jazz.load-unit" "jazz.feedback" "%%product-descriptor" "descriptor" "%%product-build-library" "build-library" "%%product-build" "build" "jazz.setup-product" "product" "let" "name")}
      {Lisp-Entry "jazz.build-product-descriptor" define #f 1392 9 1392 38 ("force?:" "jazz.compile-unit" "%%apply" "jazz.build-image" "%%symbol?" "obj" "lambda" "for-each" "if" "jazz.product-descriptor-build" "build" "let" "jazz.update-product-descriptor" "build-product" "define" "force?" "unit" "#!key" "descriptor")}
      {Lisp-Entry "jazz.build-library-descriptor" define #f 1408 9 1408 38 ("options:" "jazz.product-descriptor-name" "jazz.build-library" "if" "jazz.product-descriptor-library" "library" "let" "descriptor")}
      {Lisp-Entry "jazz.end-make-marker" define #f 1415 8 1415 28 ()}
      {Lisp-Entry "jazz.make-product" define #f 1419 9 1419 26 ("dynamic-wind" "current-user-interrupt-handler" "parameterize" "write" "jazz.debug-build?" "make-thread" "thread-start!" "thread" "map" "thread-join!" "remote-make" "jazz.build-product" "jazz.product-descriptor-dependencies" "jazz.ill-formed-field-error" "jazz.cond-expand-each" "jazz.get-product-descriptor" "descriptor" "package" "receive" "%%table-set!" "make" "%%table-ref" "subname" "lambda" "for-each" "local-make" "%%substring" "%%string=?" "11" "%%fx>=" "0" "%%fx>" "%%string-length" "count" "jazz.end-make-marker" "%%equal?" "eof-object?" "%%not" "read-line" "iter" "send-command" "begin" "and" "jazz" "core" "key-product?" "product-modified?" "build-process-ended" "condition-variable-signal!" "jazz.remove" "build-process-died" "force-output" "newline" "display" "line" "atomic-output" "build" "else" "%%cons" "stderr-redirection:" "stdout-redirection:" "stdin-redirection:" "jazz.repositories" "jazz.user-repository" "jazz.jazz-repository" "jazz.build-repository" "jazz.save-emit?" "expansion" "'expansion" "jazz.compile-options" "keep-c" "'keep-c" "%%memq" "if" "jazz.link" "%%symbol->string" "arguments:" "jazz.install-path" "path:" "list" "open-process" "%%fx<" "mutex-unlock!" "%%cdr" "set!" "%%car" "process" "%%pair?" "cond" "jazz.build-jobs" "jazz.jobs" "or" "jobs" "%%length" "active-count" "mutex-lock!" "grab-build-process" "define" "stop-build?" "'output-mutex" "output-mutex" "'process-condition" "make-condition-variable" "process-condition" "'process-mutex" "process-mutex" "outdated-processes" "free-processes" "active-processes" "'subproduct-table-mutex" "make-mutex" "subproduct-table-mutex" "make-table" "subproduct-table" "let" "name")}
      {Lisp-Entry "jazz.subprocess-build-products" define #f 1557 9 1557 39 ("jazz.build-product" "begin" "if" "read" "product" "iter" "let" "force-output" "newline" "jazz.end-make-marker" "display" "lambda" "current-user-interrupt-handler" "parameterize")}
      {Lisp-Entry "jazz.default-char-encoding" define #f 1579 8 1579 34 ("UTF" "'UTF")}
      {Lisp-Entry "jazz.resource-char-encoding" define #f 1583 9 1583 36 ("jazz.default-char-encoding" "%%resource-package" "%%package-char-encoding" "or" "resource")}
      {Lisp-Entry "jazz.resource-pathname" define #f 1588 9 1588 31 ("jazz.resource-package-pathname" "%%resource-package" "jazz.package-root-pathname" "resource")}
      {Lisp-Entry "jazz.resource-package-pathname" define #f 1593 9 1593 39 ("%%string-append" "%%resource-path" "%%not" "if" "%%resource-extension" "ext" "let" "resource")}
      {Lisp-Entry "jazz.name->path" define #f 1600 9 1600 24 ("%%symbol->string" "jazz.string-replace" "resource-name")}
      {Lisp-Entry "jazz.path->name" define #f 1604 9 1604 24 ("jazz.string-replace" "%%string->symbol" "resource-name")}
      {Lisp-Entry "jazz.binary-with-extension" define #f 1608 9 1608 35 ("string-append" "jazz.pathname-base" "name-base" "jazz.resource-pathname" "pathname" "jazz.resource-build-dir" "bindir" "let*" "extension" "src")}
      {Lisp-Entry "jazz.probe-numbered-pathname" define #f 1615 9 1615 37 ("1" "%%fx+" "jazz.probe-numbered-pathname" "file-exists?" "%%not" "if" "%%number->string" "string-append" "candidate" "let" "n" "pathname")}
      {Lisp-Entry "jazz.for-each-numbered-pathname" define #f 1622 9 1622 40 ("1" "%%fx+" "begin" "file-exists?" "if" "%%number->string" "string-append" "candidate" "n" "iter" "let" "proc" "n0" "pathname")}
      {Lisp-Entry "jazz.with-numbered-pathname" define #f 1631 9 1631 36 ("%%fx+" "1" "%%fx-" "file-exists?" "%%not" "if" "%%number->string" "string-append" "candidate" "exists?" "n" "iter" "let" "proc" "n0" "fresh?" "pathname")}
      {Lisp-Entry "jazz.product-library-name-base" define #f 1643 9 1643 39 ("%%package-repository" "jazz.relocate-product-library-name-base" "product-name" "package")}
      {Lisp-Entry "jazz.relocate-product-library-name-base" define #f 1647 9 1647 48 ("string-append" "%%package-name" "%%symbol->string" "%%package-library-path" "if" "%%string-append" "jazz.repository-pathname" "%%package-parent" "parent" "let" "build-dir" "define" "product-name" "package" "repository")}
      {Lisp-Entry "jazz.manifest-pathname" define #f 1664 9 1664 31 ("jazz.Manifest-Extension" "%%resource-path" "%%string-append" "jazz.package-root-pathname" "resource" "package")}
      {Lisp-Entry "jazz.digest-pathname" define #f 1671 9 1671 29 ("jazz.Digest-Extension" "%%resource-path" "%%string-append" "jazz.package-root-pathname" "resource" "package")}
      {Lisp-Entry "jazz.load-indent" define #f 1683 8 1683 24 ("0" "make-parameter")}
      {Lisp-Entry "jazz.load-resource" define #f 1687 9 1687 27 ("jazz.resource-char-encoding" "char-encoding:" "jazz.resource-pathname" "path:" "%%list" "jazz.load" "lambda" "jazz.resource-package-pathname" "jazz.load-verbose?" "jazz.with-verbose" "%%car" "%%null?" "if" "quiet?" "let" "rest" "resource")}
      {Lisp-Entry "jazz.with-verbose" define #f 1697 9 1697 26 ("jazz.done-verbose?" "2" "%%fx+" "parameterize" "result" "begin" "if" "verbose-done" "force-output" "newline" "jazz.load-indent" "make-string" "display" "verbose-load" "define" "console-port" "port" "let" "proc" "path" "action" "flag")}
      {Lisp-Entry "jazz.walk-for" define #f 1729 8 1729 21 ("make-parameter")}
      {Lisp-Entry "jazz.load-unit-src/bin" define #f 1733 9 1733 31 ("jazz.with-extension-reader" "0" "jazz.generate-symbol-counter" "jazz.generate-symbol-context" "jazz.generate-symbol-for" "interpret" "'interpret" "jazz.walk-for" "%%memq" "%%pair?" "else" "jazz.Load-Stack" "pp" "jazz.feedback" "stack" "jazz.error" "error" "case" "jazz.warn-interpreted?" "warn" "jazz.increment-interpreted-load-counter" "jazz.load-resource" "%%string=?" "and" "%%resource-extension" "ext" "%%not" "or" "quiet?" "let" "jazz.increment-object-load-counter" "symbol->string" "jazz.load-verbose?" "jazz.with-verbose" "jazz.increment-image-load-counter" "cond" "if" "jazz.requested-unit-resource" "jazz.requested-unit-name" "parameterize" "manifest" "lib-uptodate?" "bin-uptodate?" "obj-uptodate?" "load-proc" "bin" "obj" "src" "lambda" "jazz.with-unit-resources" "unit-name")}
      {Lisp-Entry "jazz.resource-build-dir" define #f 1778 9 1778 32 ("jazz.Build-Repository" "jazz.relocate-resource" "resource")}
      {Lisp-Entry "jazz.relocate-resource" define #f 1782 9 1782 31 ("jazz.relocate-package-pathname" "%%resource-path" "jazz.pathname-dir" "dir" "%%resource-package" "package" "let" "resource" "repository")}
      {Lisp-Entry "jazz.Unloaded-State" define #f 1793 8 1793 27 ()}
      {Lisp-Entry "jazz.Loading-State" define #f 1796 8 1796 26 ("loading")}
      {Lisp-Entry "jazz.Loaded-State" define #f 1799 8 1799 25 ("loaded")}
      {Lisp-Entry "jazz.Environment" define #f 1808 8 1808 24 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-environment" define #f 1812 9 1812 29 ("jazz.Environment")}
      {Lisp-Entry "jazz.get-environment-unit" define #f 1816 9 1816 34 ("jazz.Unloaded-State" "jazz.Environment" "%%table-ref" "name")}
      {Lisp-Entry "jazz.set-environment-unit" define #f 1820 9 1820 34 ("jazz.Environment" "%%table-set!" "unit" "name")}
      {Lisp-Entry "jazz.Image-Units" define #f 1829 8 1829 24 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-image-unit" define #f 1832 9 1832 28 ("jazz.Image-Units" "%%table-ref" "name")}
      {Lisp-Entry "jazz.set-image-unit" define #f 1835 9 1835 28 ("%%make-image-unit" "jazz.Image-Units" "%%table-set!" "compile-time-hash" "load-proc" "name")}
      {Lisp-Entry "jazz.Load-Mutex" define #f 1844 8 1844 23 ("load" "'load" "make-mutex")}
      {Lisp-Entry "jazz.Load-Thread" define-macro ("variable") 1847 22 1847 38 ()}
      {Lisp-Entry "jazz.Load-Stack" define-macro ("variable") 1850 22 1850 37 ()}
      {Lisp-Entry "jazz.requested-unit-name" define #f 1854 8 1854 32 ("make-parameter")}
      {Lisp-Entry "jazz.requested-unit-resource" define #f 1857 8 1857 36 ("make-parameter")}
      {Lisp-Entry "jazz.compiled-source" define #f 1861 8 1861 28 ("make-parameter")}
      {Lisp-Entry "jazz.get-load-mutex" define #f 1865 9 1865 28 ("jazz.Load-Mutex")}
      {Lisp-Entry "jazz.get-load-thread" define #f 1868 9 1868 29 ("jazz.Load-Thread")}
      {Lisp-Entry "jazz.get-load-stack" define #f 1871 9 1871 28 ("jazz.Load-Stack")}
      {Lisp-Entry "jazz.push-load-stack" define #f 1875 9 1875 29 ("%%cons" "jazz.Load-Stack" "set!" "unit-name" "mode")}
      {Lisp-Entry "jazz.pop-load-stack" define #f 1879 9 1879 28 ("%%cdr" "jazz.Load-Stack" "set!")}
      {Lisp-Entry "jazz.call-with-load-lock" define #f 1883 9 1883 33 ("mutex-unlock!" "set!" "jazz.Load-Mutex" "mutex-lock!" "lambda" "dynamic-wind" "current-thread" "jazz.Load-Thread" "%%eq?" "if" "thunk")}
      {Lisp-Entry "jazz.unit-loaded?" define #f 1896 9 1896 26 ("jazz.Loaded-State" "jazz.get-environment-unit" "%%eq?" "unit-name")}
      {Lisp-Entry "jazz.circular-dependency-error" define #f 1900 9 1900 39 ("symbol->string" "map" "jazz.join-strings" "jazz.error" "%%list" "%%eq?" "name" "lambda" "append" "circular-unit-list" "%%cdr" "%%cons" "%%car" "elem" "%%null?" "if" "out" "in" "loop" "let" "list" "predicate" "take-until" "define" "unit-name-list" "unit-name")}
      {Lisp-Entry "jazz.load-unit" define #f 1921 9 1921 23 ("jazz.pop-load-stack" "jazz.load-unit-src/bin" ":load" "':load" "jazz.push-load-stack" "jazz.set-environment-unit" "dynamic-wind" "jazz.Unloaded-State" "jazz.get-load-stack" "cdr" "map" "jazz.circular-dependency-error" "jazz.Loading-State" "cond" "lambda" "jazz.call-with-load-lock" "jazz.Loaded-State" "%%eq?" "%%not" "if" "jazz.get-environment-unit" "unit-state" "let" "unit-name")}
      {Lisp-Entry "jazz.unload-unit" define #f 1943 9 1943 25 ("jazz.unload-unit" "mutex-unlock!" "jazz.Unloaded-State" "jazz.set-environment-unit" "begin" "jazz.Load-Mutex" "mutex-lock!" "if" "unit-name")}
      {Lisp-Entry "jazz.reload-unit" define #f 1952 9 1952 25 ("jazz.load-unit" "jazz.unload-unit" "unit-name")}
      {Lisp-Entry "jazz.Services" define #f 1962 8 1962 21 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.register-service" define #f 1966 9 1966 30 ("jazz.Services" "%%table-set!" "thunk" "name")}
      {Lisp-Entry "jazz.get-service" define #f 1970 9 1970 25 ("set!" "jazz.load-unit" "begin" "%%symbol?" "if" "jazz.Services" "%%table-ref" "symbol/proc" "let" "name")}
      {Lisp-Entry "jazz.require-service" define #f 1981 9 1981 29 ("error" "jazz.get-service" "or" "name")}
      {Lisp-Entry "jazz.Literal-Constructors" define #f 1991 8 1991 33 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.register-literal-constructor" define #f 1995 9 1995 42 ("%%cons" "jazz.Literal-Constructors" "%%table-set!" "constructor" "constructor-name" "name")}
      {Lisp-Entry "jazz.require-literal-constructor" define #f 1999 9 1999 41 ("jazz.error" "jazz.Literal-Constructors" "%%table-ref" "or" "name")}
      {Lisp-Entry "jazz.define-literal" define-macro ("macro") 2004 20 2004 39 ("jazz.global-ref" "%%apply" ",constructor-module" "',constructor-module" "jazz.load-unit" "arguments" "lambda" ",constructor-name" "',constructor-name" ",name" "',name" "jazz.register-literal-constructor" "jazz.split-composite" "ignore" "constructor-module" "receive" "constructor-name" "name")}
      {Lisp-Entry "jazz.construct-literal" define #f 2012 9 2012 31 ("jazz.require-literal-constructor" "%%cdr" "constructor" "let" "arguments" "name")}
      {Lisp-Entry "jazz.Literal-Walkers" define #f 2017 8 2017 28 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.register-literal-walker" define #f 2021 9 2021 37 ("%%cons" "jazz.Literal-Walkers" "%%table-set!" "walker" "walker-name" "name")}
      {Lisp-Entry "jazz.define-literal-walker" define-macro ("macro") 2025 20 2025 46 ("jazz.global-ref" ",walker-module" "',walker-module" "jazz.load-unit" "proc" "arguments" "lambda" ",walker-name" "',walker-name" ",name" "',name" "jazz.register-literal-walker" "jazz.split-composite" "ignore" "walker-module" "receive" "walker-name" "name")}
      {Lisp-Entry "jazz.walk-literal" define #f 2033 9 2033 26 ("%%cdr" "walker" "if" "jazz.Literal-Walkers" "%%table-ref" "info" "let" "proc" "arguments" "name")}
      {Lisp-Entry "jazz.Extension-Readers" define #f 2045 8 2045 30 ("equal?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-extension-reader" define #f 2049 9 2049 34 ("jazz.Extension-Readers" "%%table-ref" "extension")}
      {Lisp-Entry "jazz.with-extension-reader" define #f 2053 9 2053 35 ("current-readtable" "parameterize" "if" "jazz.get-extension-reader" "readtable-getter" "let" "thunk" "extension")}
      {Lisp-Entry "jazz.register-reader-extension" define #f 2061 9 2061 39 ("jazz.Extension-Readers" "%%table-set!" "readtable-getter" "extension")}
      {Lisp-Entry "jazz.scheme-readtable" define #f 2070 8 2070 29 ("%%current-readtable")}}})
