"Archive-Schema-Browser"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "archive" "Archive-Schema-Browser.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.archive.Archive-Schema-Browser" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Archive-Schema-Browser" class #f 48 20 48 42 ("Label" "Font" "font:" "Default" "Text-Style" "default-style:" "top-padding:" "2" "left-padding:" "body" "schema-combo" "edge" "border-type:" "19" "168" "29" "schema-border" "55" "31" "schema-label" "extensions:" "parameters:" "file" "protocol:" "24" "302" "62" "file-browser" "16" "80" "6" "0" "Point" "position:" "title:" "file-label" "name:" "78" "370" "Dimension" "size:" "View")
        {Lisp-Entry "get-source" method #f 66 18 66 28 ("schema-combo" "'schema-combo" "get-value" "file-browser" "'file-browser" "locate" "get-moniker" "Archive-Schema-Source" "new")}
        {Lisp-Entry "set-source" method #f 72 18 72 28 ("schema-combo" "'schema-combo" "set-content" "file-browser" "'file-browser" "locate" "set-moniker" "get-schema" "content" "get-file" "if" "moniker" "let" "source")}
        {Lisp-Entry "moniker-changed" method #f 84 11 84 26 ("or" "schema-combo" "'schema-combo" "set-content" "update-valid-combo" "present-schema" "car" "kind" "schema" "bind" "title" "schemas:" "getf" "typed-schemas" "Schema-Archive" "read-header" "properties" "version" "receive" "valid-archive-pathname?" "when" "get-moniker" "file" "file-browser" "'file-browser" "locate" "browser" "let*")}
        {Lisp-Entry "valid-archive-pathname?" definition #f 97 15 97 38 ("exists?" "get-extension" "=" "and" "file")}
        {Lisp-Entry "update-schema-combo" method #f 108 11 108 30 ("select-all" "acquire-focus" "get-text" "text" "message-box" "update-valid-combo" "schemas:" "getf" "typed-schemas" "let" "Schema-Archive" "read-header" "properties" "version" "receive" "valid-archive-pathname?" "if" "get-moniker" "file" "file-browser" "'file-browser" "locate" "browser" "let*")}
        {Lisp-Entry "update-valid-combo" method #f 123 11 123 29 ("schema-combo" "'schema-combo" "locate" "set-choices" "list" "present-schema" "title" "kind" "schema" "bind" "typed-schema" "lambda" "map" "choices" "let" "typed-schemas")}
        {Lisp-Entry "present-schema" definition #f 133 15 133 29 ("present" "format" "Provider" "get-provider" "provider" "let" "kind" "schema")}
        {Lisp-Entry "validate-content" method #f 143 20 143 36 ("schema-combo" "'schema-combo" "locate" "validate-content")}}
      {Lisp-Entry "Archive-Browser" class #f 152 7 152 22 ("Moniker-Widget")
        {Lisp-Entry "moniker-update" method #f 156 11 156 25 ("moniker-changed")}}
      {Lisp-Entry "Schema-Combo" class #f 165 7 165 19 ("condensed?:" "Combo-Box")
        {Lisp-Entry "update-choices" method #f 173 11 173 25 ("update-schema-combo")}}}})
"Archive-Schema-Source"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "archive" "Archive-Schema-Source.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.archive.Archive-Schema-Source" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Archive-Schema-Source" class #f 43 20 43 41 ("Schema-Source" "Object")
        {Lisp-Entry "file" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-file" accessor #f 46 22 46 30 ()}
        {Lisp-Entry "schema" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-schema" accessor #f 47 22 47 30 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("schema~self" "file~self" "set!" "nextmethod" "schema" "file")}
        {Lisp-Entry "present" method #f 61 20 61 27 ("schema" "file" "get-name" "format")}
        {Lisp-Entry "present-detailed" method #f 67 20 67 36 ("schema" "file" "get-name" "format" ":bulleted" "list")}
        {Lisp-Entry "get-data-schema" method #f 79 20 79 35 ("get-schema" "load-archive" "archive" "=" "assert" "provider" "name" "bind" "schemas:" "getf" "let" "file" "Schema-Archive" "read-header" "properties" "version" "receive" "assoc" "or" "error" "empty-string?" "if" "schemas" "schema" "valid-schema" "define" "reporter" "reporter:")}}}})
"Data-Column"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Column.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Column" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Data-Column" class #f 43 7 43 18 ("Data-Object")
        {Lisp-Entry "datatype" slot #f 46 8 46 16 ()}
        {Lisp-Entry "get-datatype" accessor #f 46 24 46 32 ()}
        {Lisp-Entry "width" slot #f 47 8 47 13 ()}
        {Lisp-Entry "get-width" accessor #f 47 24 47 32 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("properties~self" "width~self" "datatype~self" "parent~self" "name~self" "set!" "nextmethod" "others" "bind-keywords" "properties" "properties:" "width" "width:" "datatype" "datatype:" "parent" "parent:" "name" "name:")}
        {Lisp-Entry "print-schema" method #f 65 21 65 33 ("properties" "datatype" "name" "self" "class-of" "category-name" "format" "printer")}
        {Lisp-Entry "get-kind" method #f 78 20 78 28 ("column" "'column")}
        {Lisp-Entry "property-names" method #f 87 20 87 34 ("description" "timestamp?" "identity-increment" "identity-seed" "identity-replication?" "identity?" "allow-zero-length?" "validation-text" "validation-rule" "display-format" "auto-increment?" "default-value" "ordinal-position" "nullable?" "datatype")}
        {Lisp-Entry "get-property" method #f 91 20 91 32 ("nextmethod" "apply" "else" "width" "width:" "datatype" "datatype:" "case" "rest" "keyword")}
        {Lisp-Entry "set-property" method #f 98 20 98 32 ("nextmethod" "else" "width" "width:" "datatype" "set!" "datatype:" "case" "value" "keyword")}
        {Lisp-Entry "auto-generate?" method #f 105 18 105 32 ("identity?" "'identity?" "get-property" "timestamp?" "'timestamp?" "has-property?" "and" "or")}
        {Lisp-Entry "get-prefered-width" method #f 115 18 115 36 ("10" "datatype" "get-size" "or" "50")}}}})
"Data-Constraint"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Constraint.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Constraint" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Data-Constraint" class #f 43 7 43 22 ("Data-Object")
        {Lisp-Entry "print-schema" method #f 51 21 51 33 ("properties" "name" "self" "class-of" "category-name" "format" "printer")}
        {Lisp-Entry "get-kind" method #f 63 20 63 28 ("constraint" "'constraint")}
        {Lisp-Entry "property-names" method #f 72 20 72 34 ("exclude-replication?" "checked?" "text")}}}})
"Data-Container"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Container.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Container" module #f 38 18 38 49 ("jazz")
      {Lisp-Entry "Data-Container" class #f 46 7 46 21 ("Object")
        {Lisp-Entry "table" slot #f 49 8 49 13 ()}
        {Lisp-Entry "get-table" accessor #f 49 21 49 29 ()}
        {Lisp-Entry "state" slot #f 50 8 50 13 ()}
        {Lisp-Entry "get-state" accessor #f 50 24 50 32 ()}
        {Lisp-Entry "set-state" accessor #f 50 24 50 32 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("table~self" "state~self" "set!" "nextmethod" "state" "table")}
        {Lisp-Entry "get-values" method #f 64 26 64 36 ()}
        {Lisp-Entry "get" method #f 65 26 65 29 ("identifier")}
        {Lisp-Entry "save" method #f 68 18 68 22 ("execute" "if" "statement" "let" "else" "delete-statement" "delete" "insert-statement" "insert" "update-statement" "update" "state" "case" "save-statement" "define" "user" "user:" "connection")}
        {Lisp-Entry "insert-statement" method #f 82 19 82 35 ("tie" "format" "if" "format-column" "join" "let" "get" "format-value" "name" "map" "values" "table" "get-columns" "get-name" "auto-generate?" "not" "and" "column" "lambda" "collect" "columns" "let*" "user")}
        {Lisp-Entry "update-statement" method #f 92 19 92 35 ("tie" "format" "if" "string-append" "value" "join" "columns+values" "format-column" "map" "values" "get-columns" "equal?" "auto-generate?" "not" "and" "name" "let" "column" "lambda" "collect" "columns" "get" "format-value" "primary-value" "table" "get-primary-key" "get-name" "primary-key" "let*" "user")}
        {Lisp-Entry "delete-statement" method #f 109 19 109 35 ("tie" "format-column" "get" "format-value" "primary-value" "get-primary-key" "primary-key" "table" "get-name" "name" "let" "user")}
        {Lisp-Entry "format-column" definition #f 117 15 117 28 ("string-append" "name")}
        {Lisp-Entry "format-value" definition #f 121 15 121 27 ("error" "else" "number->string" "number?" "present-date-day" "date?" "true?" "if" "truth?" "sql-sanitize-string" "string-append" "string?" "not" "cond" "value")}}}})
"Data-Entity"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Entity.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Entity" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Data-Entity" class #f 43 20 43 31 ("initialize" "Data-Object")
        {Lisp-Entry "owner" slot #f 46 8 46 13 ()}
        {Lisp-Entry "get-owner" accessor #f 46 35 46 43 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("owner~self" "set!" "nextmethod" "apply" "others" "owner" "bind-keywords" "rest")}
        {Lisp-Entry "get-children" method #f 60 26 60 38 ()}
        {Lisp-Entry "get-categorized-children" method #f 64 26 64 50 ("get-children")}
        {Lisp-Entry "create" method #f 68 26 68 32 ("name" "kind")}
        {Lisp-Entry "add" method #f 72 26 72 29 ("object" "kind")}}}})
"Data-Index"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Index.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Index" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Data-Index" class #f 43 7 43 17 ("Data-Object")
        {Lisp-Entry "print-schema" method #f 51 21 51 33 ("properties" "name" "self" "class-of" "category-name" "format" "printer")}
        {Lisp-Entry "get-kind" method #f 63 20 63 28 ("index" "'index")}
        {Lisp-Entry "property-names" method #f 72 20 72 34 ("fields/orders" "pad-index?" "fill-factor" "recompute-statistics?" "ignore-duplicates?" "clustered?" "unique?")}
        {Lisp-Entry "get-class-descriptor" method #f 82 25 82 45 ("Data-Index-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 92 11 92 17 ()
        {Lisp-Entry "Data-Index-Descriptor" class #f 98 7 98 28 ("Component-Descriptor")
          {Lisp-Entry "component-present-property" method #f 106 20 106 46 ("nextmethod" "else" "second" "first" "field/order" "lambda" "map" "format" "fields/orders" "case" "value" "property" "component")}}}}})
"Data-Object"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Object.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Object" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Data-Object" class #f 44 20 44 31 ("initialize" "Object")
        {Lisp-Entry "name" slot #f 47 8 47 12 ()}
        {Lisp-Entry "get-name" accessor #f 47 43 47 51 ()}
        {Lisp-Entry "set-name" accessor #f 47 43 47 51 ()}
        {Lisp-Entry "parent" slot #f 48 8 48 14 ()}
        {Lisp-Entry "get-parent" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "set-parent" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "properties" slot #f 49 8 49 18 ()}
        {Lisp-Entry "get-properties" accessor #f 49 41 49 49 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("properties~self" "parent~self" "name~self" "set!" "nextmethod" "properties" "properties:" "parent" "parent:" "name" "name:")}
        {Lisp-Entry "print" method #f 59 20 59 25 ("name" "or" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-kind" method #f 70 26 70 34 ()}
        {Lisp-Entry "Error" definition #f 79 14 79 19 ("cons")}
        {Lisp-Entry "Inexistant" definition #f 82 14 82 24 ("cons")}
        {Lisp-Entry "property-names" method #f 86 26 86 40 ()}
        {Lisp-Entry "present-property" method #f 90 26 90 42 ("else" "present" "Datatype" "typecase" "null?" "if" "value" "property")}
        {Lisp-Entry "has-property?" method #f 98 18 98 31 ("get-property" "neq?" "Box" "not-found" "let" "property")}
        {Lisp-Entry "get-property" method #f 103 26 103 38 ("error" "neq?" "if" "Inexistant" "not-found:" "properties" "getf" "value" "let" "Error" "not-found" "keyword")}
        {Lisp-Entry "set-property" method #f 112 26 112 38 ("list" "append!" "set!" "cdr" "set-car!" "if" "properties" "getprop" "pair" "let" "value" "keyword")}}}})
"Data-Primary-Key"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Primary-Key.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Primary-Key" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Data-Primary-Key" class #f 43 7 43 23 ("Data-Object")
        {Lisp-Entry "print-schema" method #f 51 21 51 33 ("properties" "name" "self" "class-of" "category-name" "format" "printer")}
        {Lisp-Entry "get-kind" method #f 63 20 63 28 ("primary-key" "'primary-key")}
        {Lisp-Entry "property-names" method #f 72 20 72 34 ("fill-factor" "clustered?" "fields/orders")}
        {Lisp-Entry "get-class-descriptor" method #f 82 25 82 45 ("Data-Primary-Key-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 92 11 92 17 ()
        {Lisp-Entry "Data-Primary-Key-Descriptor" class #f 98 7 98 34 ("Component-Descriptor")
          {Lisp-Entry "component-present-property" method #f 106 20 106 46 ("nextmethod" "else" "second" "first" "field/order" "lambda" "map" "format" "fields/orders" "case" "value" "property" "component")}}}}})
"Data-Procedure"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Procedure.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Procedure" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Data-Procedure" class #f 43 7 43 21 ("Data-Entity")
        {Lisp-Entry "print-schema" method #f 51 21 51 33 ("properties" "name" "self" "class-of" "category-name" "format" "printer")}
        {Lisp-Entry "get-kind" method #f 63 20 63 28 ("procedure" "'procedure")}
        {Lisp-Entry "property-names" method #f 72 20 72 34 ("text")}}}})
"Data-Relation"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Relation.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Relation" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Data-Relation" class #f 43 7 43 20 ("initialize" "Data-Entity")
        {Lisp-Entry "primary-table" slot #f 46 8 46 21 ()}
        {Lisp-Entry "get-primary-table" accessor #f 46 46 46 54 ()}
        {Lisp-Entry "primary-columns" slot #f 47 8 47 23 ()}
        {Lisp-Entry "get-primary-columns" accessor #f 47 46 47 54 ()}
        {Lisp-Entry "foreign-table" slot #f 48 8 48 21 ()}
        {Lisp-Entry "get-foreign-table" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "foreign-columns" slot #f 49 8 49 23 ()}
        {Lisp-Entry "get-foreign-columns" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("properties~self" "foreign-columns~self" "foreign-table~self" "primary-columns~self" "primary-table~self" "parent~self" "name~self" "set!" "nextmethod" "others" "foreign-columns" "foreign-table" "primary-columns" "primary-table" "properties" "parent" "name" "bind-keywords" "rest")}
        {Lisp-Entry "print-schema" method #f 70 21 70 33 ("properties" "foreign-columns" "foreign-table" "primary-columns" "primary-table" "name" "self" "class-of" "category-name" "format" "printer")}
        {Lisp-Entry "get-kind" method #f 86 20 86 28 ("relation" "'relation")}
        {Lisp-Entry "property-names" method #f 95 20 95 34 ("exclude-replication?" "checked?" "right?" "left?" "delete-cascade?" "update-cascade?" "unique?" "foreign-columns" "foreign-table" "primary-columns" "primary-table")}
        {Lisp-Entry "get-property" method #f 99 20 99 32 ("nextmethod" "apply" "else" "foreign-columns" "foreign-columns:" "foreign-table" "foreign-table:" "primary-columns" "primary-columns:" "primary-table" "primary-table:" "case" "rest" "keyword")}
        {Lisp-Entry "set-property" method #f 108 20 108 32 ("nextmethod" "else" "foreign-columns" "foreign-columns:" "foreign-table" "foreign-table:" "primary-columns" "primary-columns:" "primary-table" "set!" "primary-table:" "case" "value" "keyword")}
        {Lisp-Entry "get-class-descriptor" method #f 123 25 123 45 ("Data-Relation-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 133 11 133 17 ()
        {Lisp-Entry "Data-Relation-Descriptor" class #f 139 7 139 31 ("Component-Descriptor")
          {Lisp-Entry "component-present-property" method #f 147 20 147 46 ("nextmethod" "else" "format" "foreign-columns" "primary-columns" "case" "value" "property" "component")}}}}})
"Data-Row"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Row.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Row" module #f 38 18 38 43 ("jazz")
      {Lisp-Entry "Data-Row" class #f 44 7 44 15 ("Data-Container")
        {Lisp-Entry "values" slot #f 47 8 47 14 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("get-columns" "column" "lambda" "map" "or" "values~self" "set!" "nextmethod" "values" "state" "table")}
        {Lisp-Entry "print" method #f 55 20 55 25 ("values" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-values" method #f 66 20 66 30 ("values")}
        {Lisp-Entry "get" method #f 75 20 75 23 ("get" "map" "else" "error" "continuation-return" "get-name" "ci=?" "when" "value" "column" "for-each" "table" "get-columns" "columns" "let" "return" "lambda" "continuation-capture" "string?" "values" "element" "integer?" "cond" "name/rank")}
        {Lisp-Entry "set" method #f 92 18 92 21 ("cdr" "set-car!" "get-name" "ci=?" "car" "column" "error" "null?" "or" "if" "values" "scan" "table" "get-columns" "columns" "iterate" "let" "value" "name")}}}})
"Data-Schema"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Schema.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Schema" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Data-Schema" class #f 45 7 45 18 ("equal?" "test:" "make-table" "initialize" "Entity" "Data-Entity")
        {Lisp-Entry "tables" slot #f 48 8 48 14 ()}
        {Lisp-Entry "views" slot #f 49 8 49 13 ()}
        {Lisp-Entry "relations" slot #f 50 8 50 17 ()}
        {Lisp-Entry "procedures" slot #f 51 8 51 18 ()}
        {Lisp-Entry "initialize" method #f 54 20 54 30 ("add-procedures" "add-relations" "add-views" "add-tables" "properties~self" "parent~self" "name~self" "set!" "nextmethod" "procedures" "procedures:" "relations" "relations:" "views" "views:" "tables" "tables:" "properties" "properties:" "parent" "parent:" "name" "name:")}
        {Lisp-Entry "print" method #f 65 20 65 25 ("procedures" "relations" "views" "tables" "table-length" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "print-schema" method #f 80 18 80 30 ("properties" "self" "class-of" "category-name" "sort-predicates" "greater" "equal" "receive" "procedures" "procedure" "print-procedures" "relations" "relation" "print-relations" "views" "view" "print-views" "get-name" "key:" "tables" "gather" "sort" "print-schema" "set!" "if" "table" "lambda" "for-each" "first?" "let" "format" "smaller" "print-tables" "define" "printer")}
        {Lisp-Entry "get-kind" method #f 141 20 141 28 ("schema" "'schema")}
        {Lisp-Entry "create" method #f 150 20 150 26 ("Data-Procedure" "procedure" "Data-Relation" "relation" "Data-View" "view" "name:" "Data-Table" "new" "table" "case" "name" "kind")}
        {Lisp-Entry "add" method #f 158 20 158 23 ("add-procedure" "procedure" "add-relation" "relation" "add-view" "view" "add-table" "table" "case" "object" "kind")}
        {Lisp-Entry "get-children" method #f 171 20 171 32 ("get-output" "procedures" "relations" "views" "tables" "for-each" "put" "object" "lambda" "add" "List-Factory" "new" "fact" "let*")}
        {Lisp-Entry "get-categorized-children" method #f 183 20 183 44 ("get-output" "get-categorized-procedures" "get-categorized-relations" "get-categorized-views" "get-categorized-tables" "put-sequence" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "get-tables" method #f 197 18 197 28 ("tables" "gather")}
        {Lisp-Entry "get-categorized-tables" method #f 201 18 201 40 ("get-name" "key:" "sort" "append!" "get-tables" "let" "sort-predicates" "greater" "smaller" "equal" "receive" "collect-linked-tables" "linked?:" "get-property" "not" "table" "lambda" "collect-if" "tables" "collect-normal-tables" "define")}
        {Lisp-Entry "get-table" method #f 218 18 218 27 ("tables" "table-ref" "name")}
        {Lisp-Entry "add-table" method #f 222 18 222 27 ("get-name" "tables" "table-set!" "self" "set-parent" "table")}
        {Lisp-Entry "add-tables" method #f 227 18 227 28 ("add-table" "for-each" "tables")}
        {Lisp-Entry "get-views" method #f 236 18 236 27 ("views" "gather")}
        {Lisp-Entry "get-categorized-views" method #f 240 18 240 39 ("get-name" "key:" "get-views" "sort" "sort-predicates" "greater" "smaller" "equal" "receive")}
        {Lisp-Entry "get-view" method #f 245 18 245 26 ("views" "table-ref" "name")}
        {Lisp-Entry "add-view" method #f 249 18 249 26 ("get-name" "views" "table-set!" "self" "set-parent" "view")}
        {Lisp-Entry "add-views" method #f 254 18 254 27 ("add-view" "for-each" "views")}
        {Lisp-Entry "get-relations" method #f 263 18 263 31 ("relations" "gather")}
        {Lisp-Entry "get-categorized-relations" method #f 267 18 267 43 ("get-name" "key:" "get-relations" "sort" "sort-predicates" "greater" "smaller" "equal" "receive")}
        {Lisp-Entry "get-relation" method #f 272 18 272 30 ("relations" "table-ref" "name")}
        {Lisp-Entry "add-relation" method #f 276 18 276 30 ("get-name" "relations" "table-set!" "self" "set-parent" "relation")}
        {Lisp-Entry "add-relations" method #f 281 18 281 31 ("add-relation" "for-each" "relations")}
        {Lisp-Entry "get-procedures" method #f 290 18 290 32 ("procedures" "gather")}
        {Lisp-Entry "get-categorized-procedures" method #f 294 18 294 44 ("get-name" "key:" "get-procedures" "sort" "sort-predicates" "greater" "smaller" "equal" "receive")}
        {Lisp-Entry "get-procedure" method #f 299 18 299 31 ("procedures" "table-ref" "name")}
        {Lisp-Entry "add-procedure" method #f 303 18 303 31 ("get-name" "procedures" "table-set!" "self" "set-parent" "procedure")}
        {Lisp-Entry "add-procedures" method #f 308 18 308 32 ("add-procedure" "for-each" "procedures")}
        {Lisp-Entry "present" method #f 317 18 317 25 ("name:" "get-property")}
        {Lisp-Entry "import-inventory" method #f 326 23 326 39 ("import-inventory" "read-only?:" "get-inventory" "inventory" "let" "new-connection" "connection" "with" "properties:" "self" "new" "schema" "data-source:" "get-provider" "external-name" "provider:" "present" "name:" "list" "properties" "let*" "reporter" "data-source" "source-name")}
        {Lisp-Entry "import-inventory" method #f 335 11 335 27 ("add-procedure" "Data-Procedure" "data-procedure" "get-procedures" "procedures" "procedure" "procedure-properties" "import-procedures" "add-relation" "Data-Relation" "data-relation" "get-relations" "relations" "get-exclude-replication?" "exclude-replication?:" "get-checked?" "checked?:" "get-right?" "right?:" "get-left?" "left?:" "get-delete-cascade?" "delete-cascade?:" "get-update-cascade?" "update-cascade?:" "get-unique?" "unique?:" "get-foreign-field-names" "foreign-columns:" "get-foreign-table" "foreign-table:" "get-primary-field-names" "primary-columns:" "get-primary-table" "primary-table:" "relation" "relation-properties" "import-relations" "add-view" "Data-View" "data-view" "get-views" "views" "get-text" "text:" "view" "view-properties" "import-views" "add-table" "create-constraints" "set-constraints" "create-triggers" "set-triggers" "create-indexes" "set-indexes" "create-columns" "set-columns" "create-primary-key" "set-primary-key" "getf" "unless" "user-feedback" "properties:" "name:" "owner:" "Data-Table" "new" "data-table" "properties" "get-title" "name" "get-owner" "owner" "let*" "lambda" "for-each" "get-tables" "tables" "with" "columns-ordinal-position-consecutive?" "columns-consecutive?" "get-source-table-name" "source-table-name:" "get-connect" "and" "connect:" "get-validation-text" "validation-text:" "get-validation-rule" "validation-rule:" "get-description" "description:" "linked?:" "list" "get-linked?" "linked?" "let" "table" "table-properties" "import-tables" "define" "reporter" "inventory" "source-name")}
        {Lisp-Entry "create-primary-key" method #f 422 11 422 29 ("properties:" "name:" "Data-Primary-Key" "new" "properties" "get-title" "name" "let" "when" "get-primary-key" "with" "get-fields/orders" "fields/orders:" "get-fill-factor" "fill-factor:" "get-clustered?" "clustered?:" "list" "primary-key" "primary-key-properties" "define" "table" "data-table")}
        {Lisp-Entry "create-columns" method #f 436 11 436 25 ("properties:" "name:" "Data-Column" "new" "increase!" "not" "and" "properties" "get-title" "name" "lambda" "map" "get-columns" "columns" "with" "0" "let" "get-identity-increment" "identity-increment:" "get-identity-seed" "identity-seed:" "get-identity-replication?" "identity-replication?:" "get-identity?" "identity?:" "get-auto-increment?" "auto-increment?:" "get-display-format" "display-format:" "get-ordinal-position" "or" "ordinal-position:" "get-description" "description:" "get-allow-zero-length?" "allow-zero-length?:" "get-validation-text" "validation-text:" "get-validation-rule" "validation-rule:" "get-default-value" "default-value:" "get-nullable?" "nullable?:" "get-datatype" "datatype:" "list" "ordinal-position" "column" "column-properties" "define" "columns-consecutive?" "table" "data-table")}
        {Lisp-Entry "create-indexes" method #f 464 11 464 25 ("properties:" "name:" "Data-Index" "new" "properties" "get-title" "name" "let" "lambda" "map" "get-indexes" "indexes" "with" "get-fields/orders" "fields/orders:" "get-pad-index?" "pad-index?:" "get-fill-factor" "fill-factor:" "get-recompute-statistics?" "recompute-statistics?:" "get-ignore-duplicates?" "ignore-duplicates?:" "get-clustered?" "clustered?:" "get-unique?" "unique?:" "list" "index" "index-properties" "define" "table" "data-table")}
        {Lisp-Entry "create-triggers" method #f 483 11 483 26 ("properties:" "name:" "Data-Trigger" "new" "properties" "get-title" "name" "let" "lambda" "map" "get-triggers" "triggers" "with" "get-text" "text:" "list" "trigger" "trigger-properties" "define" "table" "data-table")}
        {Lisp-Entry "create-constraints" method #f 496 11 496 29 ("properties:" "name:" "Data-Constraint" "new" "properties" "get-title" "name" "let" "lambda" "map" "get-constraints" "constraints" "with" "get-exclude-replication?" "exclude-replication?:" "get-checked?" "checked?:" "get-text" "text:" "list" "constraint" "constraint-properties" "define" "table" "data-table")}
        {Lisp-Entry "get-factory" method #f 516 20 516 31 ("Data-Schema-Factory" "new")}
        {Lisp-Entry "get-factories" method #f 520 20 520 33 ()}
        {Lisp-Entry "get-presentation" method #f 524 20 524 36 ("name:" "get-property")}
        {Lisp-Entry "set-presentation" method #f 528 20 528 36 ("name:" "set-property" "presentation" "controller")}
        {Lisp-Entry "can-cut-entity?" method #f 532 20 532 35 ()}
        {Lisp-Entry "can-copy-entity?" method #f 538 20 538 36 ()}
        {Lisp-Entry "can-paste-entity?" method #f 544 20 544 37 ()}
        {Lisp-Entry "determine-paster" method #f 548 20 548 36 ("rest")}
        {Lisp-Entry "can-rename-entity?" method #f 552 20 552 38 ()}
        {Lisp-Entry "can-delete-entity?" method #f 556 20 556 38 ()}
        {Lisp-Entry "can-move-entity?" method #f 560 20 560 36 ()}
        {Lisp-Entry "can-view-properties?" method #f 564 20 564 40 ()}
        {Lisp-Entry "get-categorized-properties" method #f 568 20 568 46 ()}}}})
"Data-Schema-Factory"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "factory" "Data-Schema-Factory.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.factory.Data-Schema-Factory" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Data-Schema-Factory" class #f 44 20 44 39 ("Entity-Factory")
        {Lisp-Entry "get-class" method #f 47 20 47 29 ("Data-Schema")}
        {Lisp-Entry "get-name-prohibited?" method #f 51 20 51 40 ()}
        {Lisp-Entry "get-name-mandatory?" method #f 55 20 55 39 ()}
        {Lisp-Entry "get-name-unicity?" method #f 59 20 59 37 ()}
        {Lisp-Entry "presentation->name" method #f 63 20 63 38 ("presentation")}
        {Lisp-Entry "get-factory-presentation" method #f 67 20 67 44 ()}
        {Lisp-Entry "get-factory-image" method #f 71 20 71 37 ("Image-Resource")}}}})
"Data-Source"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Source.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Source" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Data-Source" class #f 47 7 47 18 ("initialize" "Schema-Source" "Component")
        {Lisp-Entry "username" property #f 50 12 50 20 ()}
        {Lisp-Entry "get-username" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "set-username" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "password" property #f 51 12 51 20 ()}
        {Lisp-Entry "get-password" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "set-password" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "launch" method #f 60 11 60 17 ("self" "SQL-Connections-Manager" "set-active-data-source")}
        {Lisp-Entry "validate" method #f 69 26 69 34 ()}
        {Lisp-Entry "get-provider" method #f 78 26 78 38 ("external-name" "Provider" "get-provider")}
        {Lisp-Entry "new-connection" method #f 88 26 88 40 ()}
        {Lisp-Entry "get-connection-string" method #f 92 26 92 47 ()}
        {Lisp-Entry "get-connection-properties" method #f 96 26 96 51 ()}
        {Lisp-Entry "new-inventory" method #f 105 26 105 39 ("rest" "connection")}
        {Lisp-Entry "get-data-schema" method #f 115 11 115 26 ("self" "present" "Data-Schema" "import-inventory" "reporter" "reporter:")}
        {Lisp-Entry "get-class-descriptor" method #f 124 25 124 45 ("Data-Source-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 133 11 133 17 ()
        {Lisp-Entry "Data-Source-Descriptor" class #f 139 7 139 29 ("nullable?:" "domain" "name:" "password" "username" "class-info" "categorized:" "name-unicity?:" "name-mandatory?:" "Image-Resource" "image:" "title:" "Component-Descriptor")
          {Lisp-Entry "class-presentation->name" method #f 152 20 152 44 ("presentation" "class")}
          {Lisp-Entry "class-name->presentation" method #f 156 20 156 44 ("name" "class")}
          {Lisp-Entry "class-persist-property?" method #f 160 20 160 43 ("nextmethod" "else" "persist-passwords?" "password:" "persist-usernames?" "username:" "case" "get-process" "process" "let" "property" "class")}}}}})
"Data-Sources"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Sources.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Sources" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Data-Sources" class #f 45 20 45 32 ("initialize" "Group")
        {Lisp-Entry "default-source" property #f 48 12 48 26 ()}
        {Lisp-Entry "get-default-source" accessor #f 48 51 48 59 ()}
        {Lisp-Entry "set-default-source" accessor #f 48 51 48 59 ()}
        {Lisp-Entry "get-class-descriptor" method #f 56 25 56 45 ("Data-Sources-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 65 11 65 17 ()
        {Lisp-Entry "Data-Sources-Descriptor" class #f 71 7 71 30 ("Image-Resource" "image:" "title:" "Component-Descriptor")
          {Lisp-Entry "component-get-presentation" method #f 79 20 79 46 ("component")}
          {Lisp-Entry "component-get-addable-classes" method #f 83 20 83 49 ("Data-Group" "list" "component")}}}}})
"Data-Table"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Table.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Table" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Data-Table" class #f 43 7 43 17 ("initialize" "Data-Entity")
        {Lisp-Entry "request" slot #f 46 8 46 15 ()}
        {Lisp-Entry "get-request" accessor #f 46 41 46 49 ()}
        {Lisp-Entry "primary-key" slot #f 47 8 47 19 ()}
        {Lisp-Entry "columns" slot #f 48 8 48 15 ()}
        {Lisp-Entry "indexes" slot #f 49 8 49 15 ()}
        {Lisp-Entry "triggers" slot #f 50 8 50 16 ()}
        {Lisp-Entry "constraints" slot #f 51 8 51 19 ()}
        {Lisp-Entry "rows" slot #f 52 8 52 12 ()}
        {Lisp-Entry "get-rows" accessor #f 52 45 52 53 ()}
        {Lisp-Entry "set-rows" accessor #f 52 45 52 53 ()}
        {Lisp-Entry "missing?" slot #f 53 8 53 16 ()}
        {Lisp-Entry "get-missing?" accessor #f 53 45 53 53 ()}
        {Lisp-Entry "set-missing?" accessor #f 53 45 53 53 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("rows~self" "set-constraints" "set-triggers" "set-indexes" "or" "set-columns" "set-primary-key" "request~self" "properties~self" "parent~self" "name~self" "owner~self" "set!" "nextmethod" "Data-Column" "new" "lambda" "map" "create-columns" "define" "rows" "rows:" "constraints" "constraints:" "triggers" "triggers:" "indexes" "indexes:" "column-names" "column-names:" "columns" "columns:" "primary-key" "primary-key:" "request" "request:" "properties" "properties:" "parent" "parent:" "name" "name:" "owner" "owner:")}
        {Lisp-Entry "print" method #f 76 20 76 25 ("format-plural" "name" "if" "format" "rows" "length" "let" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "print-schema" method #f 91 21 91 33 ("properties" "name" "self" "class-of" "category-name" "constraints" "constraint" "print-constraints" "triggers" "trigger" "print-triggers" "indexes" "index" "print-indexes" "get-name" "key:" "columns" "<" "sort" "set!" "column" "lambda" "for-each" "first?" "let" "print-columns" "print-schema" "primary-key" "null?" "if" "format" "print-primary-key" "define" "printer")}
        {Lisp-Entry "get-kind" method #f 160 20 160 28 ("table" "'table")}
        {Lisp-Entry "create" method #f 169 20 169 26 ("Data-Constraint" "constraint" "Data-Trigger" "trigger" "Data-Index" "index" "Data-Column" "column" "name:" "Data-Primary-Key" "new" "primary-key" "case" "name" "kind")}
        {Lisp-Entry "add" method #f 178 20 178 23 ("add-constraint" "constraint" "add-trigger" "trigger" "add-index" "index" "add-column" "column" "add-primary-key" "primary-key" "case" "object" "kind")}
        {Lisp-Entry "get-children" method #f 192 20 192 32 ("constraints" "triggers" "indexes" "columns" "list" "primary-key" "if" "append")}
        {Lisp-Entry "get-categorized-children" method #f 196 20 196 44 ("get-output" "constraints" "triggers" "indexes" "get-name" "key:" "columns" "<" "sort" "put-sequence" "put" "primary-key" "when" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "property-names" method #f 207 20 207 34 ("description" "validation-text" "validation-rule" "source-table-name" "connect" "linked?:" "get-property" "if")}
        {Lisp-Entry "get-primary-key" method #f 218 18 218 33 ("primary-key")}
        {Lisp-Entry "set-primary-key" method #f 222 18 222 33 ("self" "set-parent" "when" "primary-key" "set!" "value")}
        {Lisp-Entry "add-primary-key" method #f 228 18 228 33 ("set-primary-key" "primary-key")}
        {Lisp-Entry "get-columns" method #f 238 18 238 29 ("columns")}
        {Lisp-Entry "set-columns" method #f 242 18 242 29 ("self" "set-parent" "column" "lambda" "for-each" "columns" "set!" "value")}
        {Lisp-Entry "get-columns-sql" method #f 249 18 249 33 ("columns" "append" "not" "if" "get-name" "name" "let" "column" "lambda" "map" "join" "prefix" "prefix:")}
        {Lisp-Entry "add-column" method #f 259 18 259 28 ("self" "set-parent" "cons" "columns" "set!" "column")}
        {Lisp-Entry "find-column" method #f 265 18 265 29 ("values" "continuation-return" "get-name" "string=?" "when" "do" "columns" "in" "column" "0" "from" "rank" "for" "loop" "return" "lambda" "continuation-capture" "name")}
        {Lisp-Entry "get-indexes" method #f 280 18 280 29 ("indexes")}
        {Lisp-Entry "set-indexes" method #f 284 18 284 29 ("self" "set-parent" "index" "lambda" "for-each" "indexes" "set!" "value")}
        {Lisp-Entry "add-index" method #f 291 18 291 27 ("self" "set-parent" "cons" "indexes" "set!" "index")}
        {Lisp-Entry "get-triggers" method #f 302 18 302 30 ("triggers")}
        {Lisp-Entry "set-triggers" method #f 306 18 306 30 ("self" "set-parent" "trigger" "lambda" "for-each" "triggers" "set!" "value")}
        {Lisp-Entry "add-trigger" method #f 313 18 313 29 ("self" "set-parent" "cons" "triggers" "set!" "trigger")}
        {Lisp-Entry "get-constraints" method #f 324 18 324 33 ("constraints")}
        {Lisp-Entry "set-constraints" method #f 328 18 328 33 ("self" "set-parent" "constraint" "lambda" "for-each" "constraints" "set!" "value")}
        {Lisp-Entry "add-constraint" method #f 335 18 335 32 ("self" "set-parent" "cons" "constraints" "set!" "constraint")}
        {Lisp-Entry "get-count" method #f 346 18 346 27 ("rows" "length")}
        {Lisp-Entry "remove-row" method #f 350 18 350 28 ("remove!" "rows" "set!" "row")}
        {Lisp-Entry "remove-rows" method #f 354 18 354 29 ("rows" "set!")}
        {Lisp-Entry "add-row" method #f 358 18 358 25 ("cons" "rows" "set!" "row")}
        {Lisp-Entry "append-row" method #f 363 18 363 28 ("list" "append" "rows" "set!" "row")}
        {Lisp-Entry "new-row" method #f 368 18 368 25 ("self" "Data-Row" "new" "add-row" "values" "values:" "state" "state:")}
        {Lisp-Entry "get-row" method #f 372 18 372 25 ("rows" "element" "rank")}
        {Lisp-Entry "load-request" method #f 381 18 381 30 ("missing?" "append!" "rows" "set!" "self" "load-rows" "rows-missing?" "new-rows" "columns" "receive" "new-request" "request" "let" "max-load" "max-load:" "connection" "command")}
        {Lisp-Entry "find-row" method #f 394 18 394 26 ("rows" "continuation-return" "=" "when" "get" "actual" "let" "row" "for-each" "return" "lambda" "continuation-capture" "value" "name")}
        {Lisp-Entry "find-rows" method #f 405 18 405 27 ("rows" "get" "=" "row" "lambda" "collect-if" "value" "name")}
        {Lisp-Entry "find-row-by" method #f 411 18 411 29 ("rows" "find-if" "predicate")}
        {Lisp-Entry "find-rows-by" method #f 415 18 415 30 ("rows" "collect-if" "predicate")}
        {Lisp-Entry "filter!" method #f 424 18 424 25 ("car" "set!" "cddr" "set-cdr!" "not" "if" "cadr" "row" "cdr" "while" "scan" "let" "rows" "when" "predicate")}
        {Lisp-Entry "sort-by" method #f 441 18 441 25 ("get" "row" "lambda" "key:" "sort" "rows" "set!" ">" "<" "if" "fn" "let" "ascending?" "ascending?:" "name")}}}})
"Data-Trigger"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-Trigger.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-Trigger" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Data-Trigger" class #f 43 7 43 19 ("Data-Object")
        {Lisp-Entry "print-schema" method #f 51 21 51 33 ("properties" "name" "self" "class-of" "category-name" "format" "printer")}
        {Lisp-Entry "get-kind" method #f 63 20 63 28 ("trigger" "'trigger")}
        {Lisp-Entry "property-names" method #f 72 20 72 34 ("text")}}}})
"Data-View"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Data-View.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Data-View" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Data-View" class #f 43 7 43 16 ("Data-Entity")
        {Lisp-Entry "print-schema" method #f 51 21 51 33 ("properties" "name" "self" "class-of" "category-name" "format" "printer")}
        {Lisp-Entry "get-kind" method #f 63 20 63 28 ("view" "'view")}
        {Lisp-Entry "property-names" method #f 72 20 72 34 ("text")}}}})
"Datatype"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Datatype.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Datatype" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Datatype" class #f 43 7 43 15 ("Object")
        {Lisp-Entry "name" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-name" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "size" slot #f 47 8 47 12 ()}
        {Lisp-Entry "get-size" accessor #f 47 25 47 33 ()}
        {Lisp-Entry "precision" slot #f 48 8 48 17 ()}
        {Lisp-Entry "get-precision" accessor #f 48 25 48 33 ()}
        {Lisp-Entry "scale" slot #f 49 8 49 13 ()}
        {Lisp-Entry "get-scale" accessor #f 49 25 49 33 ()}
        {Lisp-Entry "new-datatype" method #f 52 23 52 35 ("get-scalable?" "get-precisionable?" "find-systype" "get-sizeable?" "if" "self" "new" "scale" "precision" "size" "name")}
        {Lisp-Entry "initialize" method #f 59 20 59 30 ("scale~self" "precision~self" "size~self" "name~self" "set!" "nextmethod" "scale" "precision" "size" "name")}
        {Lisp-Entry "compare-object" method #f 67 20 67 34 (":not-equal" "else" ":equal" "get-scale" "scale" "get-precision" "precision" "get-size" "size" "get-name" "name" "=" "and" ":incompatible" "Datatype" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 79 20 79 25 ("scale" "precision" "size" "name" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "has-size?" method #f 93 18 93 27 ("size" "boolean")}
        {Lisp-Entry "has-precision?" method #f 97 18 97 32 ("precision" "boolean")}
        {Lisp-Entry "has-scale?" method #f 101 18 101 28 ("scale" "boolean")}
        {Lisp-Entry "get-native-with-value" method #f 105 26 105 47 ("read-only" "'read-only" "eq?" "double-apostrophe" "number?" "else" "format" "string?" "cond" "-" "1" "0" "subseq" "=" "2" ">=" "and" "if" "length" "len" "let" "or" "name" "self" "class-of" "find-systype" "get-default-value" "default-value" "let*" "indirect?" "indirect?:" "value")}
        {Lisp-Entry "double-apostrophe" definition #f 124 15 124 32 ("substitute-alist" "value")}
        {Lisp-Entry "get-native" method #f 128 26 128 36 ("else" "scale" "precision" "null?" "name" "format" "size" "cond")}
        {Lisp-Entry "get-systypes" method #f 145 31 145 43 ()}
        {Lisp-Entry "find-systype" method #f 149 23 149 35 ("get-systypes" "get-name" "=" "systype" "lambda" "find-if" "name")}
        {Lisp-Entry "get-defaultable?" method #f 155 18 155 34 ("get-defaultable?" "and" "name" "self" "class-of" "find-systype" "systype" "let")}
        {Lisp-Entry "get-default-value" method #f 160 18 160 35 ("get-default-value" "and" "name" "self" "class-of" "find-systype" "systype" "let")}
        {Lisp-Entry "present" method #f 170 26 170 33 ("else" "scale" "precision" "null?" "name" "format" "size" "cond")}}}})
"Logical-Datatype"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "data" "Logical-Datatype.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.data.Logical-Datatype" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Logical-Datatype" class #f 43 7 43 23 ("Object")
        {Lisp-Entry "name" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-name" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "size" slot #f 47 8 47 12 ()}
        {Lisp-Entry "get-size" accessor #f 47 25 47 33 ()}
        {Lisp-Entry "precision" slot #f 48 8 48 17 ()}
        {Lisp-Entry "scale" slot #f 49 8 49 13 ()}
        {Lisp-Entry "construct-literal" method #f 53 16 53 33 ("self" "new" "null?" "integer?" "or" "assert" "scale" "precision" "size" "name" "context")}
        {Lisp-Entry "initialize" method #f 60 20 60 30 ("scale~self" "precision~self" "size~self" "name~self" "set!" "nextmethod" "scale" "precision" "size" "name")}
        {Lisp-Entry "compare-object" method #f 68 20 68 34 (":not-equal" "else" ":equal" "get-scale" "scale" "get-precision" "precision" "get-size" "size" "get-name" "name" "=" "and" ":incompatible" "Logical-Datatype" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 80 20 80 25 ("scale" "precision" "size" "name" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "has-size?" method #f 94 18 94 27 ("size" "not-null?")}
        {Lisp-Entry "has-precision?" method #f 98 18 98 32 ("precision" "not-null?")}
        {Lisp-Entry "has-scale?" method #f 102 18 102 28 ("scale" "not-null?")}
        {Lisp-Entry "present" method #f 111 26 111 33 ("scale" "name" "format" "precision" "size" "null?" "if")}}}})
"Schema-Archive"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "archive" "Schema-Archive.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.archive.Schema-Archive" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Schema-Archive" class #f 43 20 43 34 ("Entity" "Object")}
      {Lisp-Entry "Schema-Archive" class #f 49 20 49 34 ("Entity" "Object")
        {Lisp-Entry "version" slot #f 52 8 52 15 ()}
        {Lisp-Entry "properties" slot #f 53 8 53 18 ()}
        {Lisp-Entry "schemas" slot #f 54 8 54 15 ()}
        {Lisp-Entry "initialize" method #f 57 11 57 21 ("schemas~self" "properties~self" "version~self" "set!" "nextmethod" "schemas" "properties" "version")}
        {Lisp-Entry "print" method #f 64 11 64 16 ("format-plural" "format" "schemas" "length" "count" "let" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-version" method #f 76 18 76 29 ("version")}
        {Lisp-Entry "get-properties" method #f 80 18 80 32 ("properties")}
        {Lisp-Entry "get-property" method #f 84 18 84 30 ("not-found:" "properties" "getf" "not-found" "property")}
        {Lisp-Entry "set-property" method #f 88 18 88 30 ("cons" "set!" "setf" "properties" "getf" "if" "value" "property")}
        {Lisp-Entry "get-schemas" method #f 94 18 94 29 ("schemas")}
        {Lisp-Entry "get-schema" method #f 98 18 98 28 ("error" "find-schema" "or" "error?" "error?:" "name")}
        {Lisp-Entry "find-schema" method #f 103 18 103 29 ("schemas" "name:" "get-property" "=" "schema" "lambda" "find-if" "name")}
        {Lisp-Entry "schema-properties" method #f 109 23 109 40 ("provider:" "name:" "get-property" "list" "schema")}
        {Lisp-Entry "add-schema" method #f 113 18 113 28 ("schema-properties" "get-property" ":schemas" "set-property" "list" "append!" "schemas" "set!" "schema")}
        {Lisp-Entry "remove-schema" method #f 118 18 118 31 ("name:" "get-property" "assoc" ":schemas" "set-property" "remove!" "schemas" "set!" "schema")}
        {Lisp-Entry "rename-schema" method #f 123 18 123 31 ("set-car!" "set-property" ":schemas" "name:" "get-property" "assoc" "pair" "let" "name" "schema")}
        {Lisp-Entry "read-header" method #f 134 23 134 34 ("read-properties" "read-version" "values" "reader" "lambda" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "moniker")}
        {Lisp-Entry "read-version" method #f 141 16 141 28 ("error" "Version" "is?" "version:" "=" "and" "if" "version" "read" "name" "let" "reader")}
        {Lisp-Entry "read-properties" method #f 149 16 149 31 ("error" "pair?" "properties:" "=" "and" "if" "properties" "read" "name" "let" "reader")}
        {Lisp-Entry "new-archive" method #f 162 23 162 34 ("MetaModeler" "archive-version" "self" "new")}
        {Lisp-Entry "load-archive" method #f 172 23 172 35 ("schemas:" "properties:" "version:" "getf" "self" "new" "eof-object?" "read-until" "content" "let" "reader" "lambda" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "file")}
        {Lisp-Entry "save-archive" method #f 187 18 187 30 ("schemas" "output-schemas" "properties" "output-properties" "version" "output-version" "output-header" "printer" "lambda" "get-eol-encoding" "eol-encoding:" "parse" "path:" "list" "call-with-output-file" "file")}
        {Lisp-Entry "output-version" method #f 196 11 196 25 ("format" "printer" "version")}
        {Lisp-Entry "output-properties" method #f 200 11 200 28 ("null?" "if" "format" "printer" "properties")}
        {Lisp-Entry "output-schemas" method #f 207 11 207 25 ("output-schema" "schema" "lambda" "for-each" "format" "printer" "schemas")}
        {Lisp-Entry "output-schema" method #f 216 11 216 24 ("print-schema" "name:" "get-property" "output-section" "printer" "schema")}
        {Lisp-Entry "get-factory" method #f 226 11 226 22 ()}
        {Lisp-Entry "get-factories" method #f 230 11 230 24 ()}
        {Lisp-Entry "get-presentation" method #f 234 11 234 27 ()}
        {Lisp-Entry "set-presentation" method #f 238 11 238 27 ("presentation" "controller")}
        {Lisp-Entry "can-cut-entity?" method #f 242 11 242 26 ()}
        {Lisp-Entry "can-copy-entity?" method #f 246 11 246 27 ()}
        {Lisp-Entry "can-paste-entity?" method #f 250 11 250 28 ()}
        {Lisp-Entry "determine-paster" method #f 254 11 254 27 ("rest")}
        {Lisp-Entry "can-rename-entity?" method #f 258 11 258 29 ()}
        {Lisp-Entry "can-delete-entity?" method #f 262 11 262 29 ()}
        {Lisp-Entry "can-move-entity?" method #f 266 11 266 27 ()}
        {Lisp-Entry "can-view-properties?" method #f 270 11 270 31 ()}
        {Lisp-Entry "get-categorized-properties" method #f 274 11 274 37 ()}}}})
"Schema-Source"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "source" "Schema-Source.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.source.Schema-Source" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Schema-Source" interface #f 43 24 43 37 ()
        {Lisp-Entry "present" method #f 46 35 46 42 ()}
        {Lisp-Entry "present-detailed" method #f 47 35 47 51 ()}
        {Lisp-Entry "get-data-schema" method #f 48 35 48 50 ("rest")}}}})
"Table-Inspector"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "inspector" "Table-Inspector.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.inspector.Table-Inspector" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Table-Inspector" class #f 46 7 46 22 ("column-spacing:" "1" "row-spacing:" "cell" "selection-mode:" "filled-column:" "Dark" "Color" "background:" "tree" "header" "fill" "content" "hscroll?:" "vscroll?:" "center" "location:" "scroller" "name:" "border" "layout-type:" "400" "696" "Dimension" "size:" "initialize" "Layout-View")
        {Lisp-Entry "table" slot #f 49 8 49 13 ()}
        {Lisp-Entry "host-title" method #f 66 25 66 35 ()}
        {Lisp-Entry "host-position" method #f 70 25 70 38 ("17" "35" "Point")}
        {Lisp-Entry "host-size" method #f 74 25 74 34 ("614" "696" "Dimension")}
        {Lisp-Entry "get-tree" method #f 83 18 83 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "inspect-table" method #f 92 18 92 31 ("set-filled-column" "display-table" "24" "get-prefered-width" "+" "column" "lambda" "map" "widths" "length" "affected" "get-rows" "rows" "get-columns" "columns" "get-tree" "tree" "let*" "table~self" "set!" "filled-column" "filled-column:" "table")}
        {Lisp-Entry "display-table" method #f 103 11 103 24 ("Tree-Label" "map" "Tree-Node" "new" "cons" "children:" "add-row" "cdr" "rest" "first" "get-values" "values" "row" "set-display-images?" "when" "Tree-Label-Column" "width:" "get-name" "title:" "toplevel-controls?:" "Tree-Node-Column" "class:" "add-column" "eq?" "node?" "let*" "width" "column" "lambda" "for-each" "car" "first-column" "let" "remove-columns" "->string" "not" "if" "value" "present-value" "define" "widths" "affected" "rows" "columns" "tree")}}}})
"Table-Inspector-Tree"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "inspector" "Table-Inspector-Tree.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.inspector.Table-Inspector-Tree" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Table-Inspector-Tree" class #f 43 20 43 40 ("Tree-View")}}})
"_schema"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "_schema.jazz"} 1288732034
    {Lisp-Entry "jazz.schema" module #f 37 8 37 19 ("jazz")
      {Lisp-Entry "sql-sanitize-string" definition #f 49 20 49 39 ("1" "substring" "string-append" "2" "+" "string-ref" "eq?" "<" "if" "string-length" "size" "result" "0" "i" "iterate" "let" "str")}
      {Lisp-Entry "iterate-hierarchical-data" definition #f 64 33 64 58 ("increase!" "0" "set!" "/=" "when" "scan-id" "scan-row" "<" "while" "scan-count" "cdr" "scan" "1" "id-size" "id-data" "id" "car" "id-row" "let*" "not" "unless" "key" "size" "data" "proc")}
      {Lisp-Entry "collect-hierarchical-data" definition #f 87 33 87 58 ("get-output" "put" "when" "object" "row" "lambda" "iterate-hierarchical-data" "List-Factory" "new" "fact" "let" "key" "size" "data" "proc")}
      {Lisp-Entry "sorted-hierarchical-data" definition #f 101 33 101 57 ("key:" "list" "collect-hierarchical-data" "sort" "third" "second" "first" "lambda" "collect" "sort-key" "sort-test" "key" "size" "data" "proc")}}})
"autoload"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "autoload.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.autoload" module #f 37 18 37 38 ("jazz")}})
"install"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "install.scm"} 1288732034
    {Lisp-Entry "jazz.schema.install" unit #f 37 6 37 25 ()
      {Lisp-Entry "Datatype" define ("literal") 45 21 45 29 ("jazz.schema.literals.construct-datatype")}
      {Lisp-Entry "Data-Schema" define ("literal") 53 21 53 32 ("jazz.schema.literals.construct-data-schema")}
      {Lisp-Entry "Data-Table" define ("literal") 54 21 54 31 ("jazz.schema.literals.construct-data-table")}
      {Lisp-Entry "Data-Column" define ("literal") 55 21 55 32 ("jazz.schema.literals.construct-data-column")}
      {Lisp-Entry "Data-Primary-Key" define ("literal") 56 21 56 37 ("jazz.schema.literals.construct-data-primary-key")}
      {Lisp-Entry "Data-Index" define ("literal") 57 21 57 31 ("jazz.schema.literals.construct-data-index")}
      {Lisp-Entry "Data-Constraint" define ("literal") 58 21 58 36 ("jazz.schema.literals.construct-data-constraint")}
      {Lisp-Entry "Data-Procedure" define ("literal") 59 21 59 35 ("jazz.schema.literals.construct-data-procedure")}
      {Lisp-Entry "Data-Relation" define ("literal") 60 21 60 34 ("jazz.schema.literals.construct-data-relation")}
      {Lisp-Entry "Data-Trigger" define ("literal") 61 21 61 33 ("jazz.schema.literals.construct-data-trigger")}
      {Lisp-Entry "Data-View" define ("literal") 62 21 62 30 ("jazz.schema.literals.construct-data-view")}}})
"literals"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "literals.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.literals" module #f 37 8 37 28 ("jazz")
      {Lisp-Entry "construct-datatype" definition #f 48 21 48 39 ("Datatype" "new" "not" "integer?" "or" "assert" "scale" "precision" "size" "name")}
      {Lisp-Entry "construct-data-schema" definition #f 60 21 60 42 ("procedures:" "relations:" "views:" "tables:" "properties:" "Data-Schema" "new" "procedures" "relations" "views" "tables" "properties")}
      {Lisp-Entry "construct-data-table" definition #f 64 21 64 41 ("constraints:" "triggers:" "indexes:" "columns:" "primary-key:" "properties:" "name:" "Data-Table" "new" "constraints" "triggers" "indexes" "columns" "primary-key" "properties" "name")}
      {Lisp-Entry "construct-data-column" definition #f 68 21 68 42 ("properties:" "name:" "Data-Column" "new" "properties" "name")}
      {Lisp-Entry "construct-data-primary-key" definition #f 72 21 72 47 ("properties:" "name:" "Data-Primary-Key" "new" "properties" "name")}
      {Lisp-Entry "construct-data-index" definition #f 76 21 76 41 ("properties:" "name:" "Data-Index" "new" "properties" "name")}
      {Lisp-Entry "construct-data-constraint" definition #f 80 21 80 46 ("properties:" "name:" "Data-Constraint" "new" "properties" "name")}
      {Lisp-Entry "construct-data-procedure" definition #f 84 21 84 45 ("properties:" "name:" "Data-Procedure" "new" "properties" "name")}
      {Lisp-Entry "construct-data-relation" definition #f 88 21 88 44 ("properties:" "name:" "Data-Relation" "new" "properties" "name")}
      {Lisp-Entry "construct-data-trigger" definition #f 92 21 92 43 ("properties:" "name:" "Data-Trigger" "new" "properties" "name")}
      {Lisp-Entry "construct-data-view" definition #f 96 21 96 40 ("properties:" "name:" "Data-View" "new" "properties" "name")}}})
"syntax"
 ({Lisp-File-Entry {File jazz.schema "src" "jazz" "schema" "syntax.jazz"} 1288732034
    {Lisp-Entry "jazz.schema.syntax" module #f 37 18 37 36 ("jazz")
      {Lisp-Entry "datacontainer" macro ("macro") 40 15 40 28 (",access" "set!" "format" "string->symbol" "access" "nextmethod" ",@fields" ",table" "initialize" "definition" ",field" "slot" ",rank" ":location" "attribute" "increase!" "field" "lambda" "map" "Data-Container" "extends" ",name" "class" "1" "rank" "generate-symbol" "table" "let" "fields" "name" "bind" "form")}}})
