"Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "tester" "Tester.jazz"} 1296083298 jazz
    {Lisp-Entry "jazz.validation.tester.Tester" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.library")}
      {Lisp-Entry "Tester" class #f 44 7 44 13 ("initialize" "Component")
        {Lisp-Entry "suite" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-suite" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "set-suite" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "title" property #f 48 12 48 17 ()}
        {Lisp-Entry "get-title" accessor #f 48 42 48 50 ()}
        {Lisp-Entry "set-title" accessor #f 48 42 48 50 ()}
        {Lisp-Entry "*section*" define #f 56 10 56 19 ("make-parameter")}
        {Lisp-Entry "test" method #f 60 26 60 30 ()}
        {Lisp-Entry "invoke" method #f 64 21 64 27 ("*section*" "parameterize" "proc" "section")}
        {Lisp-Entry "rpt" method #f 69 11 69 14 ("*section*" "title" "suite" "assertion-failed" "assertion-failed~" "message")}}}})
"Tester-Error"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "tester" "Tester-Error.jazz"} 1296083298 jazz
    {Lisp-Entry "jazz.validation.tester.Tester-Error" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Tester-Error" class #f 40 7 40 19 ("Error")
        {Lisp-Entry "form" slot #f 43 8 43 12 ()}
        {Lisp-Entry "get-form" accessor #f 43 23 43 31 ()}
        {Lisp-Entry "string?" slot #f 44 8 44 15 ()}
        {Lisp-Entry "initialize" method #f 47 20 47 30 ("string?~self" "self" "form~self" "set!" "nextmethod" "string?" "form")}
        {Lisp-Entry "get-message" method #f 58 20 58 31 ("->string" "form" "string?" "if")}
        {Lisp-Entry "present-message" method #f 64 20 64 35 ("get-message" "format" "list" "rest")}}}})
"Validate"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "validate" "Validate.jazz"} 1296083298 jazz
    {Lisp-Entry "jazz.validation.validate.Validate" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.system.process")}
      {Lisp-Entry "Validate" class #f 44 7 44 15 ("Process")
        {Lisp-Entry "start-process" method #f 47 20 47 33 ("exit-process" "Validation-Suite" "new" "validate" "validate~")}}}})
"Validation-Suite"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "validate" "Validation-Suite.jazz"} 1296083298 jazz
    {Lisp-Entry "jazz.validation.validate.Validation-Suite" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Validation-Suite" class #f 40 7 40 23 ("Object")
        {Lisp-Entry "feedback" slot #f 43 8 43 16 ()}
        {Lisp-Entry "failed-assertions" slot #f 44 8 44 25 ()}
        {Lisp-Entry "initialize" method #f 47 20 47 30 ("or" "self" "feedback~self" "set!" "nextmethod" ":terminal" "format" "apply" "rest" "format-string" "default-feedback" "define" "feedback" "feedback:")}
        {Lisp-Entry "validate" method #f 56 18 56 26 ("message" "section" "title" "bind" "info" "lambda" ":terminal" "format" "when" "null?" "get-output" "get-output~" "failed" "report-results" "test~" "class-of" "category-name" "self" "suite:" "tester" "let" "class" "feedback" "list" "pair?" "if" "invoke-tester" "for-each" "List-Factory" "new" "failed-assertions" "set!" "validate-suite" "define" "report-success?" "report-success?:" "test" "test:")}
        {Lisp-Entry "assertion-failed" method #f 82 18 82 34 ("list" "failed-assertions" "put" "put~" "form" "section" "title")}}}})
"_validation"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "_validation.jazz"} 1296083298 jazz
    {Lisp-Entry "jazz.validation" module #f 37 8 37 23 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.validation.autoload" "syntax" "phase" "jazz.validation.syntax")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "autoload.jazz"} 1296083298 jazz
    {Lisp-Entry "jazz.validation.autoload" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("Validation-Suite" "jazz.validation.validate.Validation-Suite" "Validate" "jazz.validation.validate.Validate" "Tester-Error" "jazz.validation.tester.Tester-Error" "Tester" "autoload" "jazz.validation.tester.Tester")}}})
"syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "syntax.jazz"} 1296083298 jazz
    {Lisp-Entry "jazz.validation.syntax" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "validate" macro #f 40 16 40 24 (",message" ",proc" ",expr" "unless" ":text" "desourcify" "->string" "message" "third" "expr" "source-code" "second" "proc" "let" "form-src")}
      {Lisp-Entry "error-occurred?" macro #f 48 16 48 31 (",@body" "Error" "System-Exception" "is?" "or" "wrap-exception" "wrapped" "exc" "lambda" "with-exception-filter" "sourcify-if" "source-code" "cdr" "body" "let" "form-src")}}})
