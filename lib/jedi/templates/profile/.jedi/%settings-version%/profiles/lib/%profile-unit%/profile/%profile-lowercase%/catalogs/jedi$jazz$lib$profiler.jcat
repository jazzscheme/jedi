"_profiler"
 ({Lisp-File-Entry {File :context "src" "profiler" "_profiler.jazz"} 236918191. jazz
    {Lisp-Entry "profiler" module #f 37 8 37 16 ("jazz")
      {Lisp-Entry "require" anonymous #f 40 1 40 8 ("profiler.implementation")}
      {Lisp-Entry "default-profiler-depth" native ("native") 43 8 43 30 ()}
      {Lisp-Entry "default-profile" native ("native") 44 8 44 23 ()}
      {Lisp-Entry "make-profiler" native ("native") 45 8 45 21 ()}
      {Lisp-Entry "profiler-type" native ("native") 46 8 46 21 ()}
      {Lisp-Entry "profiler-on?" native ("native") 47 8 47 20 ()}
      {Lisp-Entry "profiler-default-depth" native ("native") 48 8 48 30 ()}
      {Lisp-Entry "profiler-ignore-procedure" native ("native") 49 8 49 33 ()}
      {Lisp-Entry "profiler-ignore-module" native ("native") 50 8 50 30 ()}
      {Lisp-Entry "active-profile" native ("native") 51 8 51 22 ()}
      {Lisp-Entry "profile-label" native ("native") 52 8 52 21 ()}
      {Lisp-Entry "profile-profiler" native ("native") 53 8 53 24 ()}
      {Lisp-Entry "profile-depth" native ("native") 54 8 54 21 ()}
      {Lisp-Entry "profile-calls-count" native ("native") 55 8 55 27 ()}
      {Lisp-Entry "profile-calls-count-set!" native ("native") 56 8 56 32 ()}
      {Lisp-Entry "profile-calls-duration" native ("native") 57 8 57 30 ()}
      {Lisp-Entry "profile-calls-duration-set!" native ("native") 58 8 58 35 ()}
      {Lisp-Entry "profile-calls" native ("native") 59 8 59 21 ()}
      {Lisp-Entry "profile-calls-set!" native ("native") 60 8 60 26 ()}
      {Lisp-Entry "make-profile-call" native ("native") 61 8 61 25 ()}
      {Lisp-Entry "profile-call-count" native ("native") 62 8 62 26 ()}
      {Lisp-Entry "profile-call-count-set!" native ("native") 63 8 63 31 ()}
      {Lisp-Entry "profile-call-duration" native ("native") 64 8 64 29 ()}
      {Lisp-Entry "profile-call-duration-set!" native ("native") 65 8 65 34 ()}
      {Lisp-Entry "profile-process-start-info" native ("native") 66 8 66 34 ()}
      {Lisp-Entry "profile-process-start-info-set!" native ("native") 67 8 67 39 ()}
      {Lisp-Entry "profile-process-stop-info" native ("native") 68 8 68 33 ()}
      {Lisp-Entry "profile-process-stop-info-set!" native ("native") 69 8 69 38 ()}
      {Lisp-Entry "process-statistics" native ("native") 70 8 70 26 ()}
      {Lisp-Entry "profile-process-info" native ("native") 71 8 71 28 ()}
      {Lisp-Entry "profile-register-call" native ("native") 72 8 72 29 ()}
      {Lisp-Entry "new-profile" native ("native") 73 8 73 19 ()}
      {Lisp-Entry "reset-profile" native ("native") 74 8 74 21 ()}
      {Lisp-Entry "frame-profile" native ("native") 75 8 75 21 ()}
      {Lisp-Entry "get-profiles" native ("native") 76 8 76 20 ()}
      {Lisp-Entry "get-profile-names" native ("native") 77 8 77 25 ()}
      {Lisp-Entry "get-selected-profile" native ("native") 78 8 78 28 ()}
      {Lisp-Entry "set-selected-profile" native ("native") 79 8 79 28 ()}
      {Lisp-Entry "find-profile" native ("native") 80 8 80 20 ()}
      {Lisp-Entry "find-selected-profile" native ("native") 81 8 81 29 ()}
      {Lisp-Entry "register-profile" native ("native") 82 8 82 24 ()}
      {Lisp-Entry "unregister-profile" native ("native") 83 8 83 26 ()}
      {Lisp-Entry "with-profiling" native ("native") 84 8 84 22 ()}
      {Lisp-Entry "start-profiler" native ("native") 85 8 85 22 ()}
      {Lisp-Entry "stop-profiler" native ("native") 86 8 86 21 ()}
      {Lisp-Entry "profile-running?" native ("native") 87 8 87 24 ()}
      {Lisp-Entry "profiler-real-time" native ("native") 88 8 88 26 ()}
      {Lisp-Entry "profiler-real-time-set!" native ("native") 89 8 89 31 ()}
      {Lisp-Entry "get-continuation-stack-for-profile" native ("native") 90 8 90 42 ()}
      {Lisp-Entry "get-current-profile" native ("native") 91 8 91 27 ()}}})
"implementation"
 ({Lisp-File-Entry {File :context "src" "profiler" "implementation.scm"} 236918191. scheme
    {Lisp-Entry "profiler.implementation" unit #f 37 16 37 39 ()
      {Lisp-Entry "default-profiler" define-macro ("setting") 48 21 48 37 ("statprof")}
      {Lisp-Entry "default-profiler-ignored-procedures" define-macro ("setting") 51 21 51 56 ("##primordial-exception-handler-hook" "##thread-start-action!" "##call-with-values" "##dynamic-env-bind" "%%list")}
      {Lisp-Entry "default-profiler-ignored-modules" define-macro ("setting") 58 21 58 53 ()}
      {Lisp-Entry "make-profiler" define #f 67 9 67 22 ("default-profiler-ignored-modules" "default-profiler-ignored-procedures" "profiler" "%%vector" "default-depth" "stop-func" "start-func" "name")}
      {Lisp-Entry "profiler-type" define #f 71 9 71 22 ("1" "%%vector-ref" "profiler")}
      {Lisp-Entry "profiler-start-func" define #f 74 9 74 28 ("2" "%%vector-ref" "profiler")}
      {Lisp-Entry "profiler-stop-func" define #f 77 9 77 27 ("3" "%%vector-ref" "profiler")}
      {Lisp-Entry "profiler-default-depth" define #f 80 9 80 31 ("4" "%%vector-ref" "profiler")}
      {Lisp-Entry "profiler-default-depth-set!" define #f 83 9 83 36 ("4" "%%vector-set!" "default-depth" "profiler")}
      {Lisp-Entry "profiler-ignored-procedures" define #f 86 9 86 36 ("5" "%%vector-ref" "profiler")}
      {Lisp-Entry "profiler-ignored-procedures-set!" define #f 89 9 89 41 ("5" "%%vector-set!" "ignored-procedures" "profiler")}
      {Lisp-Entry "profiler-ignored-modules" define #f 92 9 92 33 ("6" "%%vector-ref" "profiler")}
      {Lisp-Entry "profiler-ignored-modules-set!" define #f 95 9 95 38 ("6" "%%vector-set!" "ignored-modules" "profiler")}
      {Lisp-Entry "profiler-ignore-procedure?" define #f 99 9 99 35 ("profiler-ignored-procedures" "%%memq" "procedure" "profiler")}
      {Lisp-Entry "profiler-ignore-module?" define #f 102 9 102 32 ("profiler-ignored-modules" "%%memq" "module" "profiler")}
      {Lisp-Entry "profiler-ignore-procedure" define #f 105 9 105 34 ("profiler-ignored-procedures" "%%cons" "profiler-ignored-procedures-set!" "profiler-ignore-procedure?" "%%not" "if" "procedure" "profiler")}
      {Lisp-Entry "profiler-ignore-module" define #f 109 9 109 31 ("profiler-ignored-modules" "%%cons" "profiler-ignored-modules-set!" "profiler-ignore-module?" "%%not" "if" "module" "profiler")}
      {Lisp-Entry "make-profile" define #f 119 9 119 21 ("profile" "%%vector" "equal?" "test:" "%%make-table" "calls" "stop-info" "start-info" "duration" "0" "count" "let" "depth" "profiler" "label")}
      {Lisp-Entry "profile-label" define #f 128 9 128 22 ("1" "%%vector-ref" "profile")}
      {Lisp-Entry "profile-profiler" define #f 131 9 131 25 ("2" "%%vector-ref" "profile")}
      {Lisp-Entry "profile-profiler-set!" define #f 134 9 134 30 ("2" "%%vector-set!" "profiler" "profile")}
      {Lisp-Entry "profile-depth" define #f 137 9 137 22 ("3" "%%vector-ref" "profile")}
      {Lisp-Entry "profile-depth-set!" define #f 140 9 140 27 ("3" "%%vector-set!" "depth" "profile")}
      {Lisp-Entry "profile-calls-count" define #f 143 9 143 28 ("4" "%%vector-ref" "profile")}
      {Lisp-Entry "profile-calls-count-set!" define #f 146 9 146 33 ("4" "%%vector-set!" "total" "profile")}
      {Lisp-Entry "profile-calls-duration" define #f 149 9 149 31 ("5" "%%vector-ref" "profile")}
      {Lisp-Entry "profile-calls-duration-set!" define #f 152 9 152 36 ("5" "%%vector-set!" "total" "profile")}
      {Lisp-Entry "profile-process-start-info" define #f 155 9 155 35 ("6" "%%vector-ref" "profile")}
      {Lisp-Entry "profile-process-start-info-set!" define #f 158 9 158 40 ("6" "%%vector-set!" "time" "profile")}
      {Lisp-Entry "profile-process-stop-info" define #f 161 9 161 34 ("7" "%%vector-ref" "profile")}
      {Lisp-Entry "profile-process-stop-info-set!" define #f 164 9 164 39 ("7" "%%vector-set!" "time" "profile")}
      {Lisp-Entry "profile-calls" define #f 167 9 167 22 ("8" "%%vector-ref" "profile")}
      {Lisp-Entry "profile-calls-set!" define #f 170 9 170 27 ("8" "%%vector-set!" "calls" "profile")}
      {Lisp-Entry "new-profile" define #f 174 9 174 20 ("profiler-default-depth" "make-profile" "default-profiler" "require-service" "jazz:require-service" "or" "let" "depth" "profiler" "label" "#!key")}
      {Lisp-Entry "*profiles*" define #f 184 8 184 18 ("equal?" "test:" "make-table")}
      {Lisp-Entry "*selected-profile*" define #f 187 8 187 26 ()}
      {Lisp-Entry "get-profiles" define #f 191 9 191 21 ("*profiles*")}
      {Lisp-Entry "get-profile-names" define #f 194 9 194 26 ("%%cons" "set!" "profile" "name" "lambda" "*profiles*" "iterate-table" "jazz:iterate-table" "names" "let")}
      {Lisp-Entry "get-selected-profile" define #f 202 9 202 29 ("*selected-profile*")}
      {Lisp-Entry "set-selected-profile" define #f 205 9 205 29 ("*selected-profile*" "set!" "name")}
      {Lisp-Entry "find-profile" define #f 209 9 209 21 ("%%table-set!" "new-profile" "profile" "let" "%%not" "if" "*profiles*" "%%table-ref" "or" "name")}
      {Lisp-Entry "find-selected-profile" define #f 218 9 218 30 ("get-selected-profile" "find-profile")}
      {Lisp-Entry "register-profile" define #f 222 9 222 25 ("profile-label" "*profiles*" "%%table-set!" "profile")}
      {Lisp-Entry "unregister-profile" define #f 225 9 225 27 ("*profiles*" "%%table-clear" "name")}
      {Lisp-Entry "profiler-on?" define #f 234 8 234 20 ("make-parameter")}
      {Lisp-Entry "active-profile" define #f 237 8 237 22 ("make-parameter")}
      {Lisp-Entry "*current-profile*" define #f 240 8 240 25 ()}
      {Lisp-Entry "get-current-profile" define #f 242 9 242 28 ("new-profile" "set!" "*current-profile*" "not" "if")}
      {Lisp-Entry "reset-profile" define #f 247 9 247 22 ("equal?" "test:" "%%make-table" "profile-calls-set!" "profile-calls-duration-set!" "0" "profile-calls-count-set!" "profile-depth-set!" "profile-profiler-set!" "if" "depth" "profiler" "profile")}
      {Lisp-Entry "profile-register-call" define #f 257 9 257 30 ("cadr" "car" "list" "%%table-set!" "if" "%%table-ref" "call" "unknown" "<unknown>" "or" "key" "profile-calls" "calls" "let*" "profile-calls-duration" "profile-calls-duration-set!" "1" "profile-calls-count" "+" "profile-calls-count-set!" "duration" "stack" "profile")}
      {Lisp-Entry "profiler-real-time" define #f 269 9 269 27 ("1000" "real-time" "*")}
      {Lisp-Entry "profiler-real-time-set!" define #f 273 9 273 32 ("profiler-real-time" "set!" "x")}
      {Lisp-Entry "process-statistics" define #f 282 9 282 27 ("##process-statistics")}
      {Lisp-Entry "with-profiling" define #f 286 9 286 23 ("stop-profiler" "result" "let" "active-profile" "parameterize" "start-profiler" "thunk" "profile")}
      {Lisp-Entry "start-profiler" define #f 294 9 294 23 ("if" "profile-profiler" "profiler-start-func" "start" "let" "process-statistics" "profile-process-start-info-set!" "profile")}
      {Lisp-Entry "stop-profiler" define #f 301 9 301 22 ("if" "profile-profiler" "profiler-stop-func" "stop" "let" "process-statistics" "profile-process-stop-info-set!" "profile")}
      {Lisp-Entry "profile-process-info" define #f 308 9 308 29 ("list" "9" "7" "##flonum.->exact-int" "bytes-allocated" "5" "gc-real-time" "1" "sys-time" "0" "##f64vector-ref" "##-" "user-time" "process-statistics" "profile-process-stop-info" "or" "at-end" "if" "profile-process-start-info" "at-start" "let" "1000" "##*" "##round" "##inexact->exact" "x" "secs->msecs" "define" "profile")}
      {Lisp-Entry "get-continuation-stack-for-profile" define #f 337 9 337 43 ("0" "1" "%%fx+" "%%cons" "location" "%%not" "%%fx<" "d" "identify" "%%list" "%%filepos-col" "col" "%%filepos-line" "line" "%%locat-position" "%%position->filepos" "filepos" "container" "locat" "identify-location" "%%eq?" "creator" "continuation-next-distinct" "%%continuation-next" "%%locat-container" "profiler-ignore-module?" "%%continuation-locat" "current-location" "profiler-ignore-procedure?" "or" "current-cont" "loop" "continuation-next-interesting" "%%closure-code" "%%closure?" "and" "if" "%%continuation-creator" "proc" "let" "continuation-creator" "define" "profiler" "depth" "cont")}}})
