"Array-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Array-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Array-Tester" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Array-Tester" class #f 45 7 45 19 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-array" "invoke")}
        {Lisp-Entry "array" definition #f 62 14 62 19 ("10" "int" "new-array")}
        {Lisp-Entry "test-array" method #f 66 11 66 21 ()}}}})
"Binding-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Binding-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Binding-Tester" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Binding-Tester" class #f 45 7 45 21 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-function" "test-bind" "test-with" "test-letrec" "test-let" "invoke")}
        {Lisp-Entry "test-let" method #f 65 11 65 19 ("self" "code-walk" "error?" "begin" "cons" "lst" "reverse" "equal?" "5" "set!" "8" "3" "y" "4" "+" "2" "x" "let" "=" "rpt" "validate")}
        {Lisp-Entry "test-letrec" method #f 103 11 103 22 ("3" "+" "x" "error?" "begin" "120" "5" "-" "*" "1" "0" "if" "n" "lambda" "fact" "letrec" "=" "rpt" "validate")}
        {Lisp-Entry "test-with" method #f 125 11 125 20 ()}
        {Lisp-Entry "test-bind" method #f 134 11 134 20 ("error?" "begin" "6" "+" "3" "2" "1" "list" "z" "y" "x" "bind" "=" "rpt" "validate")}
        {Lisp-Entry "test-function" method #f 148 11 148 24 ("reverse" "cons" "for-each" "list" "25" "16" "9" "*" "map" "set!" "let" "4" "1" "equal?" "5" "3" "+" "y" "x" "2" "lambda" "=" "rpt" "validate")}}}})
"Boolean-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Boolean-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Boolean-Tester" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Boolean-Tester" class #f 45 7 45 21 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-boolean" "invoke")}
        {Lisp-Entry "test-boolean" method #f 61 11 61 23 ("not" "nu<?" "ci=?" "nu/=?" "nu=?" "rpt" "validate")}}}})
"Catalog-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Catalog-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Catalog-Tester" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Catalog-Tester" class #f 45 7 45 21 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-catalog" "invoke")}
        {Lisp-Entry "test-catalog" method #f 61 11 61 23 ()}}}})
"Char-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Char-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Char-Tester" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Char-Tester" class #f 45 7 45 18 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-char" "invoke")}
        {Lisp-Entry "test-char" method #f 61 11 61 20 ()}}}})
"Collector-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Collector-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Collector-Tester" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Collector-Tester" class #f 45 7 45 23 ("test-collector" "invoke" "test" "method" "Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}}}})
"Component-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Component-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Component-Tester" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Component-Tester" class #f 45 7 45 23 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ()}}}})
"Control-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Control-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Control-Tester" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Control-Tester" class #f 45 7 45 21 ("test-control" "test-return" "test-unwind-protect" "test-catch" "invoke" "test" "method" "Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}}
      {Lisp-Entry "Foo" class #f 102 7 102 10 ("Signal")}}})
"Debugger-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Debugger-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Debugger-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Debugger-Tester" class #f 45 7 45 22 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-assert" "test-error?" "invoke")}
        {Lisp-Entry "test-error?" method #f 62 11 62 22 ()}
        {Lisp-Entry "test-assert" method #f 71 11 71 22 ()}}}})
"Designer-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Designer-Tester.jazz"} 1291384841 jazz
    {Lisp-Entry "jazz.validate.suite.Designer-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Designer-Tester" class #f 45 7 45 22 ("test-path" "test-reference" "invoke" "test" "method" "Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}}}})
"Enumeration-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Enumeration-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Enumeration-Tester" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Enumeration-Tester" class #f 45 7 45 25 ("test-enumeration" "invoke" "test" "method" "Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}}}})
"Error-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Error-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Error-Tester" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Error-Tester" class #f 45 7 45 19 ("test-error" "invoke" "test" "method" "Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}}}})
"Explorer-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Explorer-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Explorer-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Explorer-Tester" class #f 45 7 45 22 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-sequence-explorer" "invoke")}
        {Lisp-Entry "test-sequence-explorer" method #f 61 11 61 33 ("backward" "direction:" "String" "type:" "2" "start:" "c" "b" "a" "Sequence-Explorer" "new" "gather" "equal?" "rpt" "validate")}}}})
"Form-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Form-Tester.jazz"} 1291384841 jazz
    {Lisp-Entry "jazz.validate.suite.Form-Tester" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Form-Tester" class #f 46 7 46 18 ("Tester")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test-form" method #f 53 11 53 20 ("test-fields" "invoke")}
        {Lisp-Entry "test-fields" method #f 62 11 62 22 ("1" "get-children" "get-children~" "length" "2" "a" "category-field" "list" "get-properties" "get-properties~" "get-name" "get-name~" "get-model" "get-model~" "=" "rpt" "validate" "get-class-form" "get-class-form~" "form" "let" "X" "new")}}
      {Lisp-Entry "F" class #f 77 7 77 8 ("explicit" "initialize" "Component")
        {Lisp-Entry "f1" property #f 80 12 80 14 ()}
        {Lisp-Entry "form" anonymous #f 83 3 83 7 ("2" "f1:" "install" "<install>")}
        {Lisp-Entry "get-f1" method #f 87 11 87 17 ("f1")}
        {Lisp-Entry "set-f1" method #f 88 11 88 17 ("f1" "set!" "value")}}
      {Lisp-Entry "X" class #f 91 7 91 8 ("explicit" "initialize" "Component")
        {Lisp-Entry "x1" property #f 94 12 94 14 ()}
        {Lisp-Entry "x2" property #f 95 12 95 14 ()}
        {Lisp-Entry "form" anonymous #f 98 3 98 7 ("5" "fc" "4" "fb" "f1:" "fa" "name:" "F" "<F>" "3" "x2:" "2" "x1:" "install" "<install>")}
        {Lisp-Entry "get-x1" method #f 105 11 105 17 ("x1")}
        {Lisp-Entry "set-x1" method #f 106 11 106 17 ("x1" "set!" "value")}
        {Lisp-Entry "get-x2" method #f 109 11 109 17 ("x2")}
        {Lisp-Entry "set-x2" method #f 110 11 110 17 ("x2" "set!" "value")}}
      {Lisp-Entry "Y" class #f 113 7 113 8 ("X")
        {Lisp-Entry "form" anonymous #f 116 3 116 7 ("5" "x2:" "install" "<install>")}}}})
"Format-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Format-Tester.jazz"} 1295977563 jazz
    {Lisp-Entry "jazz.validate.suite.Format-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.locale" "jazz.jml")}
      {Lisp-Entry "Format-Tester" class #f 46 7 46 20 ("Tester")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 53 20 53 24 ("test-format" "invoke")}
        {Lisp-Entry "test-format" method #f 62 11 62 22 ("error-occurred?" ":right" "5" "12345" "hello" "yyy" "string" "3" ":b" ":a" "2.3" "#b1010" "#xA" "-1" ":reader" ":human" "2" "format" "equal?" "rpt" "validate")}}}})
"Function-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Function-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Function-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Function-Tester" class #f 45 7 45 22 ("test-recursivity" "test-function" "test-rest-binding" "test-outer-binding" "test-indefinite-extent" "test-dynamic-closure" "invoke" "test" "method" "Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}}}})
"Iterator-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Iterator-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Iterator-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Iterator-Tester" class #f 45 7 45 22 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ()}}}})
"Language-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Language-Tester.jazz"} 1296054874 jazz
    {Lisp-Entry "jazz.validate.suite.Language-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Language-Tester" class #f 45 7 45 22 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-conditionals" "test-binding" "test-language" "invoke")}
        {Lisp-Entry "test-language" method #f 63 11 63 24 ("foo" "error" "catch" "Error" "new" "throw" "8" "display" "procedure?" "error-occurred?" "16" "lambda" "walk-failed?" "4" "1" "+" "5" "eq?" "rpt" "validate" "2" "proc" "double-proc" "*" "x" "square" "define")}
        {Lisp-Entry "test-binding" method #f 109 11 109 23 ("10" "test" "set!" "begin" "values" "y" "-3" "list?" "receive" "rest" "first" "list" "bind" "error-occurred?" "6" "neq?" "letrec" "4" "5" "x" "25" "let*" "bool" "opposite" "3" "-" "*" "0" "=" "if" "n" "lambda" "fact" "b" "val" "arg" "func" "2" "define-macro" "unresolved-symbol" "procedure?" "equal?" "not" "eq?" "a" "let" "walk-failed?" "rpt" "validate" "bar" "1" "foo" "define")}
        {Lisp-Entry "test-conditionals" method #f 207 11 207 28 ("String" "List" "typecase" "display" "0" "ecase" "test" "bar" "foo" "equal?" "error-occurred?" "else" "cond" "not" "unless" "lambda" "when" "3" "2" "1" "eq?" "if" "walk-failed?" "rpt" "validate")}}}})
"List-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "List-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.List-Tester" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "List-Tester" class #f 45 7 45 18 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-list" "invoke")}
        {Lisp-Entry "test-list" method #f 61 11 61 20 ("set-element!" "0" "element" "car" "error?" "begin" "second" "key:" "4" "8" "5" "<" "sort" "ci=?" "test:" "associate" "cdr" "=" "assoc" "eq?" "x" "let" "f" "e" "d" "append" "null?" "reverse" "3" "2" "1" "list" "equal?" "not" "c" "b" "a" "pair?" "rpt" "validate")}}}})
"Number-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Number-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Number-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Number-Tester" class #f 45 7 45 20 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-bit" "test-number" "invoke")}
        {Lisp-Entry "test-number" method #f 62 11 62 22 ("error?" "begin" "min" "8" "7" "max" "6" "<" "/=" "not" "24" "12" "0.25" "/" "60" "*" "4" "6.8" "3.2" "10" "-3.5" "3.5" "-2" "2" "-" "3" "1" "5" "+" "0" "=" "rpt" "validate")}
        {Lisp-Entry "test-bit" method #f 121 11 121 19 ("7" "bitwise-ior" "2" "14" "6" "0" "4" "1" "5" "bitwise-and" "=" "rpt" "validate")}}}})
"Object-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Object-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Object-Tester" module #f 37 18 37 51 ("7" "12" "set!" "yiyi" "self" "bar~self" "list" "11" "let" "yuyu" "X2" "tata" "*" "x" "tutu" "toto" "method" "5" "initialize" "bar" "slot" "15" "goo" "10" "foo" "virtual" "public" "definition" "Object" "extends" "X" "class" "jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Object-Tester" class #f 45 7 45 20 ("test-meta" "test-inner" "test-interface" "test-inheritance" "test-reference" "test-super" "test-self" "test-slot" "test-definition" "invoke" "test" "method" "Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}}}})
"Pathname-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Pathname-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Pathname-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Pathname-Tester" class #f 45 7 45 22 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-pathname" "invoke")}
        {Lisp-Entry "test-pathname" method #f 61 11 61 24 ()}}}})
"Reader-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Reader-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Reader-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Reader-Tester" class #f 45 7 45 20 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-reader" "invoke")}
        {Lisp-Entry "test-reader" method #f 61 11 61 22 ("189" "#xbd" "#xBD" "16" "#x10" "=" "3" "2" "1" "equal?" "rpt" "validate")}}}})
"Scheme-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Scheme-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Scheme-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate")}
      {Lisp-Entry "Scheme-Tester" class #f 44 7 44 20 ("title:" "install" "<install>" "form" "Tester")}}})
"Sequence-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Sequence-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Sequence-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Sequence-Tester" class #f 45 7 45 22 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-sequence" "invoke")}
        {Lisp-Entry "aaa" definition #f 61 14 61 17 ()}
        {Lisp-Entry "test-sequence" method #f 65 11 65 24 ("list" "aaa" "eq?" "replace-subseq!" "0" "insert!" "replace!" "fill!" "sequence?:" "substitute" "join" "split" "identity" "accumulate" "map" "search" "prefix?" "mismatch" "String" "e" "d" "c" "b" "a" "subseq" "upper-case?" "collect-if" "every?" "not" "9" "some?" "15" "start:" "reversed?:" "numeric?" "cadr" "odd?" "find-if" "find" "car" "key:" "denise" "mark" "william" "find-in" "8" "7" "6" "even?" "count-if" "4" "5" "2" "1" "3" "count" "equal?" "rpt" "validate")}}}})
"String-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "String-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.String-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "String-Tester" class #f 45 7 45 20 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-wi=" "test-string" "invoke")}
        {Lisp-Entry "string" definition #f 63 14 63 20 ()}
        {Lisp-Entry "test-string" method #f 67 11 67 22 ("4" "set-element!" "1" "string" "element" "nu=?" "rpt" "validate")}
        {Lisp-Entry "ansistring" definition #f 80 14 80 24 ("Ansi-String" "coerce")}
        {Lisp-Entry "test-ansi-string" method #f 85 11 85 27 ("4" "set-element!" "1" "ansistring" "element" "nu=?" "rpt" "validate")}
        {Lisp-Entry "test-wi=" method #f 96 11 96 19 ("not" "wi=" "rpt" "validate")}}}})
"Structure-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Structure-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Structure-Tester" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Structure-Tester" class #f 45 7 45 23 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-structure" "invoke")}
        {Lisp-Entry "test-structure" method #f 61 11 61 25 ()}}}})
"Symbol-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Symbol-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Symbol-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Symbol-Tester" class #f 45 7 45 20 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-symbol" "invoke")}
        {Lisp-Entry "test-symbol" method #f 61 11 61 22 ()}}}})
"Syntax-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Syntax-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Syntax-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Syntax-Tester" class #f 45 7 45 20 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-decrease!" "test-increase!" "test-set!" "test-either" "test-essay" "test-or" "test-and" "test-typecase" "test-ecase" "test-case" "test-cond" "test-prog1" "test-begin" "test-for" "test-until" "test-while" "test-unless" "test-when" "test-if" "test-quote" "invoke")}
        {Lisp-Entry "test-quote" method #f 80 11 80 21 ("self" "quote" "code-walk" "error?" "begin" "list" "c" "b" "a" "equal?" "rpt" "validate")}
        {Lisp-Entry "test-if" method #f 94 11 94 18 ("self" "if" "code-walk" "error?" "rpt" "validate" "begin")}
        {Lisp-Entry "test-when" method #f 106 11 106 20 ("self" "when" "code-walk" "error?" "rpt" "validate" "begin")}
        {Lisp-Entry "test-unless" method #f 117 11 117 22 ("3" "5" "2" "unless" "equal?" "50" "foo" "=" "rpt" "validate")}
        {Lisp-Entry "test-while" method #f 128 11 128 21 ()}
        {Lisp-Entry "test-until" method #f 137 11 137 21 ()}
        {Lisp-Entry "test-for" method #f 146 11 146 19 ()}
        {Lisp-Entry "test-begin" method #f 155 11 155 21 ()}
        {Lisp-Entry "test-prog1" method #f 164 11 164 21 ()}
        {Lisp-Entry "test-cond" method #f 173 11 173 20 ("9" "else" "8" "7" "5" "=" "3" "y" "2" "x" "not" "rpt" "validate" "cond" "v" "let")}
        {Lisp-Entry "test-case" method #f 190 11 190 20 ("9" "else" "8" "7" "5" "3" "=" "not" "rpt" "validate" "2" "case" "v" "let")}
        {Lisp-Entry "test-ecase" method #f 206 11 206 21 ("9" "else" "8" "7" "=" "3" "y" "x" "not" "rpt" "validate" "2" "ecase" "v" "let")}
        {Lisp-Entry "test-typecase" method #f 224 11 224 24 ("9" "else" "8" "Number" "7" "Symbol" "3" "=" "not" "rpt" "validate" "2" "typecase" "v" "let")}
        {Lisp-Entry "test-and" method #f 240 11 240 19 ("5" "3" "2" "and" "equal?" "rpt" "validate")}
        {Lisp-Entry "test-or" method #f 253 11 253 18 ("5" "3" "2" "+" "or" "equal?" "rpt" "validate")}
        {Lisp-Entry "test-essay" method #f 266 11 266 21 ("5" "3" "2" "and" "equal?" "rpt" "validate")}
        {Lisp-Entry "test-either" method #f 276 11 276 22 ("5" "3" "2" "+" "or" "equal?" "rpt" "validate")}
        {Lisp-Entry "test-set!" method #f 287 11 287 20 ()}
        {Lisp-Entry "foo" method #f 296 11 296 14 ("5" "increase!" "10" "below" "from" "n" "for" "loop" "0" "total" "let")}
        {Lisp-Entry "test-increase!" method #f 303 11 303 25 ("50" "foo" "=" "rpt" "validate")}
        {Lisp-Entry "goo" method #f 312 11 312 14 ("5" "decrease!" "10" "to" "1" "from" "i" "for" "loop" "100" "total" "let" "n")}
        {Lisp-Entry "test-decrease!" method #f 319 11 319 25 ("50" "5" "goo" "=" "rpt" "validate")}}
      {Lisp-Entry "X" class #f 328 7 328 8 ("4" "initialize" "Object")
        {Lisp-Entry "counter" slot #f 331 8 331 15 ()}}}})
"Table-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Table-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Table-Tester" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Table-Tester" class #f 45 7 45 19 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-growth" "test-table" "invoke")}
        {Lisp-Entry "table" definition #f 62 14 62 19 ("eq?" "test:" "make-table")}
        {Lisp-Entry "test-table" method #f 65 11 65 21 ("3" "5" "=" "goo" "table-ref" "not" "rpt" "validate" "2" "foo" "table" "table-set!")}
        {Lisp-Entry "small-table" definition #f 81 14 81 25 ("eq?" "test:" "make-table")}
        {Lisp-Entry "test-growth" method #f 84 11 84 22 ("5" "hoo" "3" "goo" "2" "foo" "small-table" "table-set!")}}}})
"Test-Architecture"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "support" "Test-Architecture.jazz"} 1292697265 jazz
    {Lisp-Entry "jazz.validate.support.Test-Architecture" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validate" "jazz.library")}
      {Lisp-Entry "Test-Architecture" class #f 44 7 44 24 ("initialize" "Component")
        {Lisp-Entry "author" property #f 47 12 47 18 ()}
        {Lisp-Entry "get-author" accessor #f 47 43 47 51 ()}
        {Lisp-Entry "set-author" accessor #f 47 43 47 51 ()}
        {Lisp-Entry "get-class-descriptor" method #f 55 25 55 45 ("Test-Architecture-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 64 11 64 17 ()
        {Lisp-Entry "import" anonymous #f 67 1 67 7 ("jazz.designer")}
        {Lisp-Entry "Test-Architecture-Descriptor" class #f 70 7 70 35 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f 73 3 73 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "author" "name-info" "class-info" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image:" "title:" "install" "<install>")}
          {Lisp-Entry "component-get-addable-default-trait" method #f 79 20 79 55 ("Test-Model" "component")}
          {Lisp-Entry "component-get-categorized-addable-classes" method #f 83 20 83 61 ("Test-Table" "reference" "list" "component")}}}}})
"Test-Model"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "support" "Test-Model.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.support.Test-Model" module #f 37 18 37 50 ("Test-Model" "register-trait-tag" "jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.jml")}
      {Lisp-Entry "Test-Model" class #f 44 7 44 17 ("Trait")
        {Lisp-Entry "get-class-descriptor" method #f 52 25 52 45 ("Test-Model-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 64 11 64 17 ()
        {Lisp-Entry "import" anonymous #f 67 1 67 7 ("jazz.designer")}
        {Lisp-Entry "Test-Model-Descriptor" class #f 70 7 70 28 ("Trait-Descriptor")
          {Lisp-Entry "form" anonymous #f 73 3 73 7 (">" "<properties" "<properties~>" "Image-Resource" "image:" "title:" "install" "<install>")}}}}})
"Test-Table"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "support" "Test-Table.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.support.Test-Table" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Test-Table" class #f 44 7 44 17 ("5" "initialize" "Component")
        {Lisp-Entry "description" property #f 47 12 47 23 ()}
        {Lisp-Entry "get-description" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "set-description" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "no" property #f 48 12 48 14 ()}
        {Lisp-Entry "get-no" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "set-no" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "get-class-descriptor" method #f 56 25 56 45 ("Test-Table-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 65 11 65 17 ()
        {Lisp-Entry "import" anonymous #f 68 1 68 7 ("jazz.designer")}
        {Lisp-Entry "Test-Table-Descriptor" class #f 71 7 71 28 ("Component-Descriptor")
          {Lisp-Entry "form" anonymous #f 74 3 74 7 ("Integer-Domain" "<Integer-Domain>" "nullable?:" "domain" "String-Domain" "<String-Domain>" "name:" "Property-Descriptor" "<Property-Descriptor>" "no" "description" "name-info" "class-info" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image:" "title:" "install" "<install>")}}}}})
"Thread-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Thread-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Thread-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Thread-Tester" class #f 45 7 45 20 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-thread" "invoke")}
        {Lisp-Entry "test-thread" method #f 61 11 61 22 ()}}}})
"Trait-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Trait-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Trait-Tester" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Trait-Tester" class #f 45 7 45 19 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ()}}}})
"Values-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Values-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Values-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Values-Tester" class #f 45 7 45 20 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-values" "invoke")}
        {Lisp-Entry "test-values" method #f 61 11 61 22 ()}}}})
"Variable-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Variable-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Variable-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Variable-Tester" class #f 45 7 45 22 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-free?" "invoke")}
        {Lisp-Entry "test-free?" method #f 61 11 61 21 ()}}}})
"Vector-Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "suite" "Vector-Tester.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate.suite.Vector-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate" "jazz.jml")}
      {Lisp-Entry "Vector-Tester" class #f 45 7 45 20 ("Tester")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("title:" "install" "<install>")}
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-vector" "invoke")}
        {Lisp-Entry "test-vector" method #f 61 11 61 22 ()}}}})
"X"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "X.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.test.X" module #f 0 8 0 19 ("jazz")
      {Lisp-Entry "X" class #f 3 7 3 8 ("Object")
        {Lisp-Entry "foo" method #f 6 19 6 22 ("X.foo" "terminal")}}}})
"Y"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "Y.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.test.Y" module #f 0 8 0 19 ("jazz")
      {Lisp-Entry "import" anonymous #f 3 1 3 7 ("jazz.test.autoload")}
      {Lisp-Entry "Y" class #f 6 7 6 8 ("Object")
        {Lisp-Entry "foo" method #f 9 11 9 14 ("Y.foo" "terminal")}}}})
"_core"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "_core.scm"} 1288870741 scheme
    {Lisp-Entry "jazz.dialect.core" module #f 37 18 37 35 ("scheme")
      {Lisp-Entry "require" anonymous #f 40 1 40 8 ("jazz.dialect.core.vector" "jazz.dialect.core.time" "jazz.dialect.core.thread" "jazz.dialect.core.table" "jazz.dialect.core.system" "jazz.dialect.core.structure" "jazz.dialect.core.step" "jazz.dialect.core.stack" "jazz.dialect.core.repository" "jazz.dialect.core.reader" "jazz.dialect.core.port" "jazz.dialect.core.pathname" "jazz.dialect.core.number" "jazz.dialect.core.network" "jazz.dialect.core.memory" "jazz.dialect.core.list" "jazz.dialect.core.foreign" "jazz.dialect.core.exception" "jazz.dialect.core.development" "jazz.dialect.core.debug" "jazz.dialect.core.continuation" "jazz.dialect.core.base64")}}})
"_dialect"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "_dialect.scm"} 1288870741 scheme
    {Lisp-Entry "jazz.dialect" module #f 37 18 37 30 ("scheme")
      {Lisp-Entry "require" anonymous #f 40 1 40 8 ("jazz.dialect.runtime" "jazz.dialect.runtime-classes" "jazz.dialect.dialect" "jazz.dialect.classes" "syntax" "phase" "jazz.dialect.core" "core.module")}
      {Lisp-Entry "export" anonymous #f 48 1 48 7 ("scheme" "syntax" "phase" "jazz.dialect.syntax")}}})
"_jazz"
 ({Lisp-File-Entry {File :context "src" "jazz" "_jazz.scm"} 1288870741 scheme
    {Lisp-Entry "jazz" module #f 37 8 37 12 ("scheme")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.dialect.walker" "jazz.dialect.language" "jazz.dialect.kernel" "jazz.dialect.syntax" "syntax" "phase" "jazz.dialect" "scheme")}}})
"_kernel"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "kernel" "_kernel.scm"} 1301161838 scheme
    {Lisp-Entry "jazz.dialect.kernel" module #f 38 18 38 37 ("scheme")
      {Lisp-Entry "get-autoload" native ("native") 46 8 46 25 ()}
      {Lisp-Entry "autoload" native ("native") 47 8 47 21 ()}
      {Lisp-Entry "autoreload" native ("native") 48 8 48 23 ()}
      {Lisp-Entry "boolean" native ("native") 56 8 56 20 ()}
      {Lisp-Entry "box?" native ("native") 64 8 64 12 ()}
      {Lisp-Entry "box" native ("native") 65 8 65 11 ()}
      {Lisp-Entry "unbox" native ("native") 66 8 66 13 ()}
      {Lisp-Entry "set-box!" native ("native") 67 8 67 16 ()}
      {Lisp-Entry "compile-unit" native ("native") 75 8 75 25 ()}
      {Lisp-Entry "build-unit" native ("native") 76 8 76 23 ()}
      {Lisp-Entry "build-image" native ("native") 77 8 77 24 ()}
      {Lisp-Entry "for-each-subunit" native ("native") 78 8 78 29 ()}
      {Lisp-Entry "load-manifest" native ("native") 79 8 79 26 ()}
      {Lisp-Entry "get-category-identifier" native ("native") 87 8 87 36 ()}
      {Lisp-Entry "get-category-descendants" native ("native") 88 8 88 37 ()}
      {Lisp-Entry "get-class-ascendant" native ("native") 89 8 89 32 ()}
      {Lisp-Entry "symbolic-char" native ("native") 97 8 97 26 ()}
      {Lisp-Entry "char-symbol" native ("native") 98 8 98 24 ()}
      {Lisp-Entry "closure?" native ("native") 106 8 106 21 ()}
      {Lisp-Entry "closure-code" native ("native") 107 8 107 25 ()}
      {Lisp-Entry "continuation?" native ("native") 115 8 115 26 ()}
      {Lisp-Entry "continuation-capture" native ("native") 116 8 116 33 ()}
      {Lisp-Entry "continuation-graft" native ("native") 117 8 117 31 ()}
      {Lisp-Entry "continuation-return" native ("native") 118 8 118 32 ()}
      {Lisp-Entry "continuation-checkpoint" native ("native") 119 8 119 36 ()}
      {Lisp-Entry "continuation-parent" native ("native") 120 8 120 32 ()}
      {Lisp-Entry "continuation-creator" native ("native") 121 8 121 33 ()}
      {Lisp-Entry "continuation-locat" native ("native") 122 8 122 31 ()}
      {Lisp-Entry "continuation-next" native ("native") 123 8 123 30 ()}
      {Lisp-Entry "run-loop?" native ("native") 131 8 131 22 ()}
      {Lisp-Entry "terminal" native ("native") 132 8 132 21 ()}
      {Lisp-Entry "terminal-string" native ("native") 133 8 133 28 ()}
      {Lisp-Entry "terminal-port" native ("native") 134 8 134 26 ()}
      {Lisp-Entry "unimplemented" native ("native") 135 8 135 26 ()}
      {Lisp-Entry "dump-stack" native ("native") 136 8 136 23 ()}
      {Lisp-Entry "log-object" native ("native") 137 8 137 23 ()}
      {Lisp-Entry "log-string" native ("native") 138 8 138 23 ()}
      {Lisp-Entry "log-newline" native ("native") 139 8 139 24 ()}
      {Lisp-Entry "close-log" native ("native") 140 8 140 22 ()}
      {Lisp-Entry "inspect-object" native ("native") 141 8 141 27 ()}
      {Lisp-Entry "generate-proper-tail-calls" native ("native") 142 8 142 34 ()}
      {Lisp-Entry "step" native ("native") 143 8 143 12 ()}
      {Lisp-Entry "step-level-set!" native ("native") 144 8 144 23 ()}
      {Lisp-Entry "install-step-handler" native ("native") 145 8 145 28 ()}
      {Lisp-Entry "?" native ("native") 157 8 157 9 ()}
      {Lisp-Entry "get-?" native ("native") 157 19 157 24 ()}
      {Lisp-Entry "set-?" native ("native") 157 34 157 39 ()}
      {Lisp-Entry "%" native ("native") 158 8 158 9 ()}
      {Lisp-Entry "get-%" native ("native") 158 19 158 24 ()}
      {Lisp-Entry "set-%" native ("native") 158 34 158 39 ()}
      {Lisp-Entry "?a" native ("native") 161 8 161 10 ()}
      {Lisp-Entry "get-?a" native ("native") 161 20 161 26 ()}
      {Lisp-Entry "set-?a" native ("native") 161 36 161 42 ()}
      {Lisp-Entry "?b" native ("native") 162 8 162 10 ()}
      {Lisp-Entry "get-?b" native ("native") 162 20 162 26 ()}
      {Lisp-Entry "set-?b" native ("native") 162 36 162 42 ()}
      {Lisp-Entry "?c" native ("native") 163 8 163 10 ()}
      {Lisp-Entry "get-?c" native ("native") 163 20 163 26 ()}
      {Lisp-Entry "set-?c" native ("native") 163 36 163 42 ()}
      {Lisp-Entry "?d" native ("native") 164 8 164 10 ()}
      {Lisp-Entry "get-?d" native ("native") 164 20 164 26 ()}
      {Lisp-Entry "set-?d" native ("native") 164 36 164 42 ()}
      {Lisp-Entry "?e" native ("native") 165 8 165 10 ()}
      {Lisp-Entry "get-?e" native ("native") 165 20 165 26 ()}
      {Lisp-Entry "set-?e" native ("native") 165 36 165 42 ()}
      {Lisp-Entry "?f" native ("native") 166 8 166 10 ()}
      {Lisp-Entry "get-?f" native ("native") 166 20 166 26 ()}
      {Lisp-Entry "set-?f" native ("native") 166 36 166 42 ()}
      {Lisp-Entry "?g" native ("native") 167 8 167 10 ()}
      {Lisp-Entry "get-?g" native ("native") 167 20 167 26 ()}
      {Lisp-Entry "set-?g" native ("native") 167 36 167 42 ()}
      {Lisp-Entry "?h" native ("native") 168 8 168 10 ()}
      {Lisp-Entry "get-?h" native ("native") 168 20 168 26 ()}
      {Lisp-Entry "set-?h" native ("native") 168 36 168 42 ()}
      {Lisp-Entry "?i" native ("native") 169 8 169 10 ()}
      {Lisp-Entry "get-?i" native ("native") 169 20 169 26 ()}
      {Lisp-Entry "set-?i" native ("native") 169 36 169 42 ()}
      {Lisp-Entry "?j" native ("native") 170 8 170 10 ()}
      {Lisp-Entry "get-?j" native ("native") 170 20 170 26 ()}
      {Lisp-Entry "set-?j" native ("native") 170 36 170 42 ()}
      {Lisp-Entry "?k" native ("native") 171 8 171 10 ()}
      {Lisp-Entry "get-?k" native ("native") 171 20 171 26 ()}
      {Lisp-Entry "set-?k" native ("native") 171 36 171 42 ()}
      {Lisp-Entry "?l" native ("native") 172 8 172 10 ()}
      {Lisp-Entry "get-?l" native ("native") 172 20 172 26 ()}
      {Lisp-Entry "set-?l" native ("native") 172 36 172 42 ()}
      {Lisp-Entry "?m" native ("native") 173 8 173 10 ()}
      {Lisp-Entry "get-?m" native ("native") 173 20 173 26 ()}
      {Lisp-Entry "set-?m" native ("native") 173 36 173 42 ()}
      {Lisp-Entry "?n" native ("native") 174 8 174 10 ()}
      {Lisp-Entry "get-?n" native ("native") 174 20 174 26 ()}
      {Lisp-Entry "set-?n" native ("native") 174 36 174 42 ()}
      {Lisp-Entry "?o" native ("native") 175 8 175 10 ()}
      {Lisp-Entry "get-?o" native ("native") 175 20 175 26 ()}
      {Lisp-Entry "set-?o" native ("native") 175 36 175 42 ()}
      {Lisp-Entry "?p" native ("native") 176 8 176 10 ()}
      {Lisp-Entry "get-?p" native ("native") 176 20 176 26 ()}
      {Lisp-Entry "set-?p" native ("native") 176 36 176 42 ()}
      {Lisp-Entry "?q" native ("native") 177 8 177 10 ()}
      {Lisp-Entry "get-?q" native ("native") 177 20 177 26 ()}
      {Lisp-Entry "set-?q" native ("native") 177 36 177 42 ()}
      {Lisp-Entry "?r" native ("native") 178 8 178 10 ()}
      {Lisp-Entry "get-?r" native ("native") 178 20 178 26 ()}
      {Lisp-Entry "set-?r" native ("native") 178 36 178 42 ()}
      {Lisp-Entry "?s" native ("native") 179 8 179 10 ()}
      {Lisp-Entry "get-?s" native ("native") 179 20 179 26 ()}
      {Lisp-Entry "set-?s" native ("native") 179 36 179 42 ()}
      {Lisp-Entry "?t" native ("native") 180 8 180 10 ()}
      {Lisp-Entry "get-?t" native ("native") 180 20 180 26 ()}
      {Lisp-Entry "set-?t" native ("native") 180 36 180 42 ()}
      {Lisp-Entry "?u" native ("native") 181 8 181 10 ()}
      {Lisp-Entry "get-?u" native ("native") 181 20 181 26 ()}
      {Lisp-Entry "set-?u" native ("native") 181 36 181 42 ()}
      {Lisp-Entry "?v" native ("native") 182 8 182 10 ()}
      {Lisp-Entry "get-?v" native ("native") 182 20 182 26 ()}
      {Lisp-Entry "set-?v" native ("native") 182 36 182 42 ()}
      {Lisp-Entry "?w" native ("native") 183 8 183 10 ()}
      {Lisp-Entry "get-?w" native ("native") 183 20 183 26 ()}
      {Lisp-Entry "set-?w" native ("native") 183 36 183 42 ()}
      {Lisp-Entry "?x" native ("native") 184 8 184 10 ()}
      {Lisp-Entry "get-?x" native ("native") 184 20 184 26 ()}
      {Lisp-Entry "set-?x" native ("native") 184 36 184 42 ()}
      {Lisp-Entry "?y" native ("native") 185 8 185 10 ()}
      {Lisp-Entry "get-?y" native ("native") 185 20 185 26 ()}
      {Lisp-Entry "set-?y" native ("native") 185 36 185 42 ()}
      {Lisp-Entry "?z" native ("native") 186 8 186 10 ()}
      {Lisp-Entry "get-?z" native ("native") 186 20 186 26 ()}
      {Lisp-Entry "set-?z" native ("native") 186 36 186 42 ()}
      {Lisp-Entry "%a" native ("native") 189 8 189 10 ()}
      {Lisp-Entry "get-%a" native ("native") 189 20 189 26 ()}
      {Lisp-Entry "set-%a" native ("native") 189 36 189 42 ()}
      {Lisp-Entry "%b" native ("native") 190 8 190 10 ()}
      {Lisp-Entry "get-%b" native ("native") 190 20 190 26 ()}
      {Lisp-Entry "set-%b" native ("native") 190 36 190 42 ()}
      {Lisp-Entry "%c" native ("native") 191 8 191 10 ()}
      {Lisp-Entry "get-%c" native ("native") 191 20 191 26 ()}
      {Lisp-Entry "set-%c" native ("native") 191 36 191 42 ()}
      {Lisp-Entry "%d" native ("native") 192 8 192 10 ()}
      {Lisp-Entry "get-%d" native ("native") 192 20 192 26 ()}
      {Lisp-Entry "set-%d" native ("native") 192 36 192 42 ()}
      {Lisp-Entry "%e" native ("native") 193 8 193 10 ()}
      {Lisp-Entry "get-%e" native ("native") 193 20 193 26 ()}
      {Lisp-Entry "set-%e" native ("native") 193 36 193 42 ()}
      {Lisp-Entry "%f" native ("native") 194 8 194 10 ()}
      {Lisp-Entry "get-%f" native ("native") 194 20 194 26 ()}
      {Lisp-Entry "set-%f" native ("native") 194 36 194 42 ()}
      {Lisp-Entry "%g" native ("native") 195 8 195 10 ()}
      {Lisp-Entry "get-%g" native ("native") 195 20 195 26 ()}
      {Lisp-Entry "set-%g" native ("native") 195 36 195 42 ()}
      {Lisp-Entry "%h" native ("native") 196 8 196 10 ()}
      {Lisp-Entry "get-%h" native ("native") 196 20 196 26 ()}
      {Lisp-Entry "set-%h" native ("native") 196 36 196 42 ()}
      {Lisp-Entry "%i" native ("native") 197 8 197 10 ()}
      {Lisp-Entry "get-%i" native ("native") 197 20 197 26 ()}
      {Lisp-Entry "set-%i" native ("native") 197 36 197 42 ()}
      {Lisp-Entry "%j" native ("native") 198 8 198 10 ()}
      {Lisp-Entry "get-%j" native ("native") 198 20 198 26 ()}
      {Lisp-Entry "set-%j" native ("native") 198 36 198 42 ()}
      {Lisp-Entry "%k" native ("native") 199 8 199 10 ()}
      {Lisp-Entry "get-%k" native ("native") 199 20 199 26 ()}
      {Lisp-Entry "set-%k" native ("native") 199 36 199 42 ()}
      {Lisp-Entry "%l" native ("native") 200 8 200 10 ()}
      {Lisp-Entry "get-%l" native ("native") 200 20 200 26 ()}
      {Lisp-Entry "set-%l" native ("native") 200 36 200 42 ()}
      {Lisp-Entry "%m" native ("native") 201 8 201 10 ()}
      {Lisp-Entry "get-%m" native ("native") 201 20 201 26 ()}
      {Lisp-Entry "set-%m" native ("native") 201 36 201 42 ()}
      {Lisp-Entry "%n" native ("native") 202 8 202 10 ()}
      {Lisp-Entry "get-%n" native ("native") 202 20 202 26 ()}
      {Lisp-Entry "set-%n" native ("native") 202 36 202 42 ()}
      {Lisp-Entry "%o" native ("native") 203 8 203 10 ()}
      {Lisp-Entry "get-%o" native ("native") 203 20 203 26 ()}
      {Lisp-Entry "set-%o" native ("native") 203 36 203 42 ()}
      {Lisp-Entry "%p" native ("native") 204 8 204 10 ()}
      {Lisp-Entry "get-%p" native ("native") 204 20 204 26 ()}
      {Lisp-Entry "set-%p" native ("native") 204 36 204 42 ()}
      {Lisp-Entry "%q" native ("native") 205 8 205 10 ()}
      {Lisp-Entry "get-%q" native ("native") 205 20 205 26 ()}
      {Lisp-Entry "set-%q" native ("native") 205 36 205 42 ()}
      {Lisp-Entry "%r" native ("native") 206 8 206 10 ()}
      {Lisp-Entry "get-%r" native ("native") 206 20 206 26 ()}
      {Lisp-Entry "set-%r" native ("native") 206 36 206 42 ()}
      {Lisp-Entry "%s" native ("native") 207 8 207 10 ()}
      {Lisp-Entry "get-%s" native ("native") 207 20 207 26 ()}
      {Lisp-Entry "set-%s" native ("native") 207 36 207 42 ()}
      {Lisp-Entry "%t" native ("native") 208 8 208 10 ()}
      {Lisp-Entry "get-%t" native ("native") 208 20 208 26 ()}
      {Lisp-Entry "set-%t" native ("native") 208 36 208 42 ()}
      {Lisp-Entry "%u" native ("native") 209 8 209 10 ()}
      {Lisp-Entry "get-%u" native ("native") 209 20 209 26 ()}
      {Lisp-Entry "set-%u" native ("native") 209 36 209 42 ()}
      {Lisp-Entry "%v" native ("native") 210 8 210 10 ()}
      {Lisp-Entry "get-%v" native ("native") 210 20 210 26 ()}
      {Lisp-Entry "set-%v" native ("native") 210 36 210 42 ()}
      {Lisp-Entry "%w" native ("native") 211 8 211 10 ()}
      {Lisp-Entry "get-%w" native ("native") 211 20 211 26 ()}
      {Lisp-Entry "set-%w" native ("native") 211 36 211 42 ()}
      {Lisp-Entry "%x" native ("native") 212 8 212 10 ()}
      {Lisp-Entry "get-%x" native ("native") 212 20 212 26 ()}
      {Lisp-Entry "set-%x" native ("native") 212 36 212 42 ()}
      {Lisp-Entry "%y" native ("native") 213 8 213 10 ()}
      {Lisp-Entry "get-%y" native ("native") 213 20 213 26 ()}
      {Lisp-Entry "set-%y" native ("native") 213 36 213 42 ()}
      {Lisp-Entry "%z" native ("native") 214 8 214 10 ()}
      {Lisp-Entry "get-%z" native ("native") 214 20 214 26 ()}
      {Lisp-Entry "set-%z" native ("native") 214 36 214 42 ()}
      {Lisp-Entry "open-digest" native ("native") 222 8 222 19 ()}
      {Lisp-Entry "close-digest" native ("native") 223 8 223 20 ()}
      {Lisp-Entry "digest-update-subu8vector" native ("native") 224 8 224 33 ()}
      {Lisp-Entry "digest-string" native ("native") 225 8 225 21 ()}
      {Lisp-Entry "digest-substring" native ("native") 226 8 226 24 ()}
      {Lisp-Entry "digest-u8vector" native ("native") 227 8 227 23 ()}
      {Lisp-Entry "digest-subu8vector" native ("native") 228 8 228 26 ()}
      {Lisp-Entry "digest-file" native ("native") 229 8 229 19 ()}
      {Lisp-Entry "enumerator?" native ("native") 237 8 237 24 ()}
      {Lisp-Entry "enumerator->symbol" native ("native") 238 8 238 31 ()}
      {Lisp-Entry "symbol->enumerator" native ("native") 239 8 239 31 ()}
      {Lisp-Entry "exception-reason" native ("native") 247 8 247 29 ()}
      {Lisp-Entry "exception-detail" native ("native") 248 8 248 29 ()}
      {Lisp-Entry "exception-location" native ("native") 249 8 249 31 ()}
      {Lisp-Entry "display-exception" native ("native") 250 8 250 30 ()}
      {Lisp-Entry "display-continuation-backtrace" native ("native") 251 8 251 43 ()}
      {Lisp-Entry "get-exception-hook" native ("native") 252 8 252 31 ()}
      {Lisp-Entry "set-exception-hook" native ("native") 253 8 253 31 ()}
      {Lisp-Entry "invoke-exception-hook" native ("native") 254 8 254 34 ()}
      {Lisp-Entry "system-exception-hook" native ("native") 255 8 255 34 ()}
      {Lisp-Entry "current-exception-handler" native ("native") 256 8 256 38 ()}
      {Lisp-Entry "with-exception-handler" native ("native") 257 8 257 35 ()}
      {Lisp-Entry "with-exception-catcher" native ("native") 258 8 258 35 ()}
      {Lisp-Entry "with-exception-filter" native ("native") 259 8 259 34 ()}
      {Lisp-Entry "with-exception-propagater" native ("native") 260 8 260 38 ()}
      {Lisp-Entry "dump-exception" native ("native") 261 8 261 27 ()}
      {Lisp-Entry "raise" native ("native") 262 8 262 18 ()}
      {Lisp-Entry "field?" native ("native") 270 8 270 19 ("object:bool" "<object:bool>")}
      {Lisp-Entry "field-name" native ("native") 271 8 271 23 ()}
      {Lisp-Entry "category-field" native ("native") 272 8 272 27 ()}
      {Lisp-Entry "add-field" native ("native") 273 8 273 22 ()}
      {Lisp-Entry "fixnum?" native ("native") 281 8 281 15 ("object:bool" "<object:bool>")}
      {Lisp-Entry "flonum?" native ("native") 282 8 282 15 ("object:bool" "<object:bool>")}
      {Lisp-Entry "fixnum->flonum" native ("native") 283 8 283 27 ("fx:fl" "<fx:fl>")}
      {Lisp-Entry "flonum->fixnum" native ("native") 284 8 284 27 ("fl:fx" "<fl:fx>")}
      {Lisp-Entry "fx+" native ("native") 285 8 285 11 ("fx^fx:fx" "<fx^fx:fx>")}
      {Lisp-Entry "fx-" native ("native") 286 8 286 11 ("fx^fx:fx" "<fx^fx:fx>")}
      {Lisp-Entry "fx*" native ("native") 287 8 287 11 ("fx^fx:fx" "<fx^fx:fx>")}
      {Lisp-Entry "+infinity" native ("native") 288 8 288 22 ()}
      {Lisp-Entry "-infinity" native ("native") 289 8 289 22 ()}
      {Lisp-Entry "fxmodulo" native ("native") 290 8 290 16 ()}
      {Lisp-Entry "fxquotient" native ("native") 291 8 291 18 ()}
      {Lisp-Entry "##fl+" native ("native") 301 21 301 26 ("fl^fl:fl" "<fl^fl:fl>")}
      {Lisp-Entry "##fl-" native ("native") 302 21 302 26 ("fl^fl:fl" "<fl^fl:fl>")}
      {Lisp-Entry "##fl*" native ("native") 303 21 303 26 ("fl^fl:fl" "<fl^fl:fl>")}
      {Lisp-Entry "##fl/" native ("native") 304 21 304 26 ("fl^fl:fl" "<fl^fl:fl>")}
      {Lisp-Entry "foreign?" native ("native") 312 8 312 21 ()}
      {Lisp-Entry "foreign-address" native ("native") 313 8 313 28 ()}
      {Lisp-Entry "foreign-release!" native ("native") 314 8 314 29 ()}
      {Lisp-Entry "foreign-released?" native ("native") 315 8 315 30 ()}
      {Lisp-Entry "foreign-tags" native ("native") 316 8 316 25 ()}
      {Lisp-Entry "still-obj-refcount-dec!" native ("native") 318 8 318 36 ()}
      {Lisp-Entry "still-obj-refcount-inc!" native ("native") 319 8 319 36 ()}
      {Lisp-Entry "base64-string->u8vector" native ("native") 327 8 327 31 ()}
      {Lisp-Entry "base64-substring->u8vector" native ("native") 328 8 328 34 ()}
      {Lisp-Entry "compile-file" native ("native") 329 8 329 20 ()}
      {Lisp-Entry "compile-file-to-c" native ("native") 330 8 330 25 ()}
      {Lisp-Entry "datum-parsing-exception?" native ("native") 331 8 331 32 ()}
      {Lisp-Entry "inactive-thread-exception?" native ("native") 332 8 332 34 ()}
      {Lisp-Entry "fxwrap*" native ("native") 333 8 333 15 ()}
      {Lisp-Entry "fxwrap+" native ("native") 334 8 334 15 ()}
      {Lisp-Entry "fxwrap-" native ("native") 335 8 335 15 ()}
      {Lisp-Entry "subu8vector->base64-string" native ("native") 336 8 336 34 ()}
      {Lisp-Entry "u8vector->base64-string" native ("native") 337 8 337 31 ()}
      {Lisp-Entry "object->string" native ("native") 338 8 338 22 ()}
      {Lisp-Entry "os-exception-arguments" native ("native") 339 8 339 30 ()}
      {Lisp-Entry "os-exception-code" native ("native") 340 8 340 25 ()}
      {Lisp-Entry "os-exception-message" native ("native") 341 8 341 28 ()}
      {Lisp-Entry "os-exception-procedure" native ("native") 342 8 342 30 ()}
      {Lisp-Entry "os-exception?" native ("native") 343 8 343 21 ()}
      {Lisp-Entry "s8vector" native ("native") 352 8 352 16 ()}
      {Lisp-Entry "make-s8vector" native ("native") 353 8 353 21 ()}
      {Lisp-Entry "s8vector-length" native ("native") 354 8 354 23 ()}
      {Lisp-Entry "s8vector-ref" native ("native") 355 8 355 20 ()}
      {Lisp-Entry "s8vector-set!" native ("native") 356 8 356 21 ()}
      {Lisp-Entry "s8vector?" native ("native") 357 8 357 17 ()}
      {Lisp-Entry "s8vector->list" native ("native") 358 8 358 22 ()}
      {Lisp-Entry "list->s8vector" native ("native") 359 8 359 22 ()}
      {Lisp-Entry "u8vector" native ("native") 362 8 362 16 ()}
      {Lisp-Entry "make-u8vector" native ("native") 363 8 363 21 ()}
      {Lisp-Entry "u8vector-length" native ("native") 364 8 364 23 ()}
      {Lisp-Entry "u8vector-ref" native ("native") 365 8 365 20 ()}
      {Lisp-Entry "u8vector-set!" native ("native") 366 8 366 21 ()}
      {Lisp-Entry "u8vector?" native ("native") 367 8 367 17 ()}
      {Lisp-Entry "u8vector->list" native ("native") 368 8 368 22 ()}
      {Lisp-Entry "list->u8vector" native ("native") 369 8 369 22 ()}
      {Lisp-Entry "u8vector->object" native ("native") 370 8 370 24 ()}
      {Lisp-Entry "object->u8vector" native ("native") 371 8 371 24 ()}
      {Lisp-Entry "s16vector" native ("native") 374 8 374 17 ()}
      {Lisp-Entry "make-s16vector" native ("native") 375 8 375 22 ()}
      {Lisp-Entry "s16vector-length" native ("native") 376 8 376 24 ()}
      {Lisp-Entry "s16vector-ref" native ("native") 377 8 377 21 ()}
      {Lisp-Entry "s16vector-set!" native ("native") 378 8 378 22 ()}
      {Lisp-Entry "s16vector?" native ("native") 379 8 379 18 ()}
      {Lisp-Entry "s16vector->list" native ("native") 380 8 380 23 ()}
      {Lisp-Entry "list->s16vector" native ("native") 381 8 381 23 ()}
      {Lisp-Entry "u16vector" native ("native") 384 8 384 17 ()}
      {Lisp-Entry "make-u16vector" native ("native") 385 8 385 22 ()}
      {Lisp-Entry "u16vector-length" native ("native") 386 8 386 24 ()}
      {Lisp-Entry "u16vector-ref" native ("native") 387 8 387 21 ()}
      {Lisp-Entry "u16vector-set!" native ("native") 388 8 388 22 ()}
      {Lisp-Entry "u16vector?" native ("native") 389 8 389 18 ()}
      {Lisp-Entry "u16vector->list" native ("native") 390 8 390 23 ()}
      {Lisp-Entry "list->u16vector" native ("native") 391 8 391 23 ()}
      {Lisp-Entry "s32vector" native ("native") 394 8 394 17 ()}
      {Lisp-Entry "make-s32vector" native ("native") 395 8 395 22 ()}
      {Lisp-Entry "s32vector-length" native ("native") 396 8 396 24 ()}
      {Lisp-Entry "s32vector-ref" native ("native") 397 8 397 21 ()}
      {Lisp-Entry "s32vector-set!" native ("native") 398 8 398 22 ()}
      {Lisp-Entry "s32vector?" native ("native") 399 8 399 18 ()}
      {Lisp-Entry "s32vector->list" native ("native") 400 8 400 23 ()}
      {Lisp-Entry "list->s32vector" native ("native") 401 8 401 23 ()}
      {Lisp-Entry "u32vector" native ("native") 404 8 404 17 ()}
      {Lisp-Entry "make-u32vector" native ("native") 405 8 405 22 ()}
      {Lisp-Entry "u32vector-length" native ("native") 406 8 406 24 ()}
      {Lisp-Entry "u32vector-ref" native ("native") 407 8 407 21 ()}
      {Lisp-Entry "u32vector-set!" native ("native") 408 8 408 22 ()}
      {Lisp-Entry "u32vector?" native ("native") 409 8 409 18 ()}
      {Lisp-Entry "u32vector->list" native ("native") 410 8 410 23 ()}
      {Lisp-Entry "list->u32vector" native ("native") 411 8 411 23 ()}
      {Lisp-Entry "s64vector" native ("native") 414 8 414 17 ()}
      {Lisp-Entry "make-s64vector" native ("native") 415 8 415 22 ()}
      {Lisp-Entry "s64vector-length" native ("native") 416 8 416 24 ()}
      {Lisp-Entry "s64vector-ref" native ("native") 417 8 417 21 ()}
      {Lisp-Entry "s64vector-set!" native ("native") 418 8 418 22 ()}
      {Lisp-Entry "s64vector?" native ("native") 419 8 419 18 ()}
      {Lisp-Entry "s64vector->list" native ("native") 420 8 420 23 ()}
      {Lisp-Entry "list->s64vector" native ("native") 421 8 421 23 ()}
      {Lisp-Entry "u64vector" native ("native") 424 8 424 17 ()}
      {Lisp-Entry "make-u64vector" native ("native") 425 8 425 22 ()}
      {Lisp-Entry "u64vector-length" native ("native") 426 8 426 24 ()}
      {Lisp-Entry "u64vector-ref" native ("native") 427 8 427 21 ()}
      {Lisp-Entry "u64vector-set!" native ("native") 428 8 428 22 ()}
      {Lisp-Entry "u64vector?" native ("native") 429 8 429 18 ()}
      {Lisp-Entry "u64vector->list" native ("native") 430 8 430 23 ()}
      {Lisp-Entry "list->u64vector" native ("native") 431 8 431 23 ()}
      {Lisp-Entry "f32vector" native ("native") 434 8 434 17 ()}
      {Lisp-Entry "make-f32vector" native ("native") 435 8 435 22 ()}
      {Lisp-Entry "f32vector-length" native ("native") 436 8 436 24 ()}
      {Lisp-Entry "f32vector-ref" native ("native") 437 8 437 21 ()}
      {Lisp-Entry "f32vector-set!" native ("native") 438 8 438 22 ()}
      {Lisp-Entry "f32vector?" native ("native") 439 8 439 18 ()}
      {Lisp-Entry "f32vector->list" native ("native") 440 8 440 23 ()}
      {Lisp-Entry "list->f32vector" native ("native") 441 8 441 23 ()}
      {Lisp-Entry "f64vector" native ("native") 444 8 444 17 ()}
      {Lisp-Entry "make-f64vector" native ("native") 445 8 445 22 ()}
      {Lisp-Entry "f64vector-length" native ("native") 446 8 446 24 ()}
      {Lisp-Entry "f64vector-ref" native ("native") 447 8 447 21 ()}
      {Lisp-Entry "f64vector-set!" native ("native") 448 8 448 22 ()}
      {Lisp-Entry "f64vector?" native ("native") 449 8 449 18 ()}
      {Lisp-Entry "f64vector->list" native ("native") 450 8 450 23 ()}
      {Lisp-Entry "list->f64vector" native ("native") 451 8 451 23 ()}
      {Lisp-Entry "command-line" native ("native") 459 8 459 20 ()}
      {Lisp-Entry "user-name" native ("native") 460 8 460 17 ()}
      {Lisp-Entry "host-name" native ("native") 461 8 461 17 ()}
      {Lisp-Entry "composite-identifier?" native ("native") 469 8 469 34 ()}
      {Lisp-Entry "composite-reference?" native ("native") 470 8 470 33 ()}
      {Lisp-Entry "compose-identifier" native ("native") 471 8 471 31 ()}
      {Lisp-Entry "compose-reference" native ("native") 472 8 472 30 ()}
      {Lisp-Entry "split-symbol" native ("native") 473 8 473 25 ()}
      {Lisp-Entry "split-identifier" native ("native") 474 8 474 29 ()}
      {Lisp-Entry "split-reference" native ("native") 475 8 475 28 ()}
      {Lisp-Entry "break-reference" native ("native") 476 8 476 28 ()}
      {Lisp-Entry "identifier-name" native ("native") 477 8 477 28 ("symbol" "<symbol>")}
      {Lisp-Entry "reference-unit" native ("native") 478 8 478 27 ("symbol" "<symbol>")}
      {Lisp-Entry "reference-name" native ("native") 479 8 479 27 ("symbol" "<symbol>")}
      {Lisp-Entry "bitwise-not" native ("native") 495 8 495 19 ("int:int" "<int:int>")}
      {Lisp-Entry "bitwise-and" native ("native") 496 8 496 19 ("int*:int" "<int*:int>")}
      {Lisp-Entry "bitwise-ior" native ("native") 497 8 497 19 ("int*:int" "<int*:int>")}
      {Lisp-Entry "bitwise-xor" native ("native") 498 8 498 19 ("int*:int" "<int*:int>")}
      {Lisp-Entry "arithmetic-shift" native ("native") 499 8 499 24 ("int:int" "<int:int>")}
      {Lisp-Entry "bit-set?" native ("native") 500 8 500 16 ("int^int:bool" "<int^int:bool>")}
      {Lisp-Entry "extract-bit-field" native ("native") 501 8 501 25 ("int^int^int:int" "<int^int^int:int>")}
      {Lisp-Entry "build-feedback" native ("native") 509 8 509 27 ()}
      {Lisp-Entry "boot-directory" native ("native") 510 8 510 27 ()}
      {Lisp-Entry "kernel-system" native ("native") 511 8 511 26 ()}
      {Lisp-Entry "kernel-platform" native ("native") 512 8 512 28 ()}
      {Lisp-Entry "kernel-windowing" native ("native") 513 8 513 29 ()}
      {Lisp-Entry "kernel-safety" native ("native") 514 8 514 26 ()}
      {Lisp-Entry "kernel-optimize?" native ("native") 515 8 515 29 ()}
      {Lisp-Entry "kernel-debug-environments?" native ("native") 516 8 516 39 ()}
      {Lisp-Entry "kernel-debug-location?" native ("native") 517 8 517 35 ()}
      {Lisp-Entry "kernel-debug-source?" native ("native") 518 8 518 33 ()}
      {Lisp-Entry "kernel-mutable-bindings?" native ("native") 519 8 519 37 ()}
      {Lisp-Entry "kernel-destination" native ("native") 520 8 520 31 ()}
      {Lisp-Entry "kernel-built" native ("native") 521 8 521 25 ()}
      {Lisp-Entry "kernel-install" native ("native") 522 8 522 27 ()}
      {Lisp-Entry "kernel-source" native ("native") 523 8 523 26 ()}
      {Lisp-Entry "kernel-version" native ("native") 524 8 524 27 ()}
      {Lisp-Entry "get-jazz-version-number" native ("native") 525 8 525 36 ()}
      {Lisp-Entry "jazz-settings-directory" native ("native") 526 8 526 36 ()}
      {Lisp-Entry "jazz-settings-version" native ("native") 527 8 527 34 ()}
      {Lisp-Entry "list->updates" native ("native") 528 8 528 26 ()}
      {Lisp-Entry "update-version" native ("native") 529 8 529 27 ()}
      {Lisp-Entry "update-targets" native ("native") 530 8 530 27 ()}
      {Lisp-Entry "update-description" native ("native") 531 8 531 31 ()}
      {Lisp-Entry "versioned-directory" native ("native") 532 8 532 32 ()}
      {Lisp-Entry "platform-eol-encoding" native ("native") 533 8 533 34 ()}
      {Lisp-Entry "load-debuggee-units" native ("native") 534 8 534 32 ()}
      {Lisp-Entry "jazz-product" native ("native") 535 8 535 25 ()}
      {Lisp-Entry "jazz-profile" native ("native") 536 8 536 25 ()}
      {Lisp-Entry "warn-interpreted?" native ("native") 537 8 537 30 ()}
      {Lisp-Entry "force-interpreted?" native ("native") 538 8 538 31 ()}
      {Lisp-Entry "delay-reporting?" native ("native") 539 8 539 29 ()}
      {Lisp-Entry "use-debugger?" native ("native") 540 8 540 26 ()}
      {Lisp-Entry "get-repositories" native ("native") 541 8 541 29 ()}
      {Lisp-Entry "get-build-repository" native ("native") 542 8 542 33 ()}
      {Lisp-Entry "make-repository" native ("native") 543 8 543 28 ()}
      {Lisp-Entry "install-repository" native ("native") 544 8 544 31 ()}
      {Lisp-Entry "uninstall-repository" native ("native") 545 8 545 33 ()}
      {Lisp-Entry "find-repository" native ("native") 546 8 546 28 ()}
      {Lisp-Entry "find-package" native ("native") 547 8 547 25 ()}
      {Lisp-Entry "repository?" native ("native") 548 8 548 24 ()}
      {Lisp-Entry "repository-name" native ("native") 549 8 549 28 ()}
      {Lisp-Entry "repository-title" native ("native") 550 8 550 29 ()}
      {Lisp-Entry "repository-directory" native ("native") 551 8 551 33 ()}
      {Lisp-Entry "repository-library-root" native ("native") 552 8 552 36 ()}
      {Lisp-Entry "repository-library-directory" native ("native") 553 8 553 41 ()}
      {Lisp-Entry "repository-binary?" native ("native") 554 8 554 31 ()}
      {Lisp-Entry "repository-packages" native ("native") 555 8 555 32 ()}
      {Lisp-Entry "repository-find-package" native ("native") 556 8 556 36 ()}
      {Lisp-Entry "repository-install-packages" native ("native") 557 8 557 40 ()}
      {Lisp-Entry "repository-add-package" native ("native") 558 8 558 35 ()}
      {Lisp-Entry "repository-remove-package" native ("native") 559 8 559 38 ()}
      {Lisp-Entry "package?" native ("native") 560 8 560 21 ()}
      {Lisp-Entry "package-repository" native ("native") 561 8 561 31 ()}
      {Lisp-Entry "package-name" native ("native") 562 8 562 25 ()}
      {Lisp-Entry "package-root" native ("native") 563 8 563 25 ()}
      {Lisp-Entry "package-pathname" native ("native") 564 8 564 29 ()}
      {Lisp-Entry "package-root-pathname" native ("native") 565 8 565 34 ()}
      {Lisp-Entry "package-directory" native ("native") 566 8 566 30 ()}
      {Lisp-Entry "package-products" native ("native") 567 8 567 29 ()}
      {Lisp-Entry "package-profiles" native ("native") 568 8 568 29 ()}
      {Lisp-Entry "package-profiles-set!" native ("native") 569 8 569 34 ()}
      {Lisp-Entry "package-project" native ("native") 570 8 570 28 ()}
      {Lisp-Entry "split-version" native ("native") 571 8 571 26 ()}
      {Lisp-Entry "present-version" native ("native") 572 8 572 28 ()}
      {Lisp-Entry "load-package" native ("native") 573 8 573 25 ()}
      {Lisp-Entry "register-product" native ("native") 574 8 574 29 ()}
      {Lisp-Entry "register-product-run" native ("native") 575 8 575 33 ()}
      {Lisp-Entry "get-product-descriptor" native ("native") 576 8 576 35 ()}
      {Lisp-Entry "find-product-descriptor" native ("native") 577 8 577 36 ()}
      {Lisp-Entry "product-descriptor-name" native ("native") 578 8 578 36 ()}
      {Lisp-Entry "product-descriptor-unit" native ("native") 579 8 579 36 ()}
      {Lisp-Entry "product-descriptor-title" native ("native") 580 8 580 37 ()}
      {Lisp-Entry "product-descriptor-icon" native ("native") 581 8 581 36 ()}
      {Lisp-Entry "product-descriptor-run" native ("native") 582 8 582 35 ()}
      {Lisp-Entry "product-descriptor-update" native ("native") 583 8 583 38 ()}
      {Lisp-Entry "product-descriptor-build" native ("native") 584 8 584 37 ()}
      {Lisp-Entry "product-descriptor-dependencies" native ("native") 585 8 585 44 ()}
      {Lisp-Entry "run-product-descriptor" native ("native") 586 8 586 35 ()}
      {Lisp-Entry "update-product-descriptor" native ("native") 587 8 587 38 ()}
      {Lisp-Entry "build-product-descriptor" native ("native") 588 8 588 37 ()}
      {Lisp-Entry "current-process-name" native ("native") 589 8 589 33 ()}
      {Lisp-Entry "current-process-name-set!" native ("native") 590 8 590 38 ()}
      {Lisp-Entry "current-process-title" native ("native") 591 8 591 34 ()}
      {Lisp-Entry "current-process-title-set!" native ("native") 592 8 592 39 ()}
      {Lisp-Entry "current-process-icon" native ("native") 593 8 593 33 ()}
      {Lisp-Entry "current-process-icon-set!" native ("native") 594 8 594 38 ()}
      {Lisp-Entry "current-process-version" native ("native") 595 8 595 36 ()}
      {Lisp-Entry "current-process-version-set!" native ("native") 596 8 596 41 ()}
      {Lisp-Entry "current-process-present" native ("native") 597 8 597 36 ()}
      {Lisp-Entry "destination-directory" native ("native") 598 8 598 34 ()}
      {Lisp-Entry "executable-extension" native ("native") 599 8 599 33 ()}
      {Lisp-Entry "quote-pathname" native ("native") 600 8 600 27 ()}
      {Lisp-Entry "run-product" native ("native") 601 8 601 24 ()}
      {Lisp-Entry "update-product" native ("native") 602 8 602 27 ()}
      {Lisp-Entry "build-product" native ("native") 603 8 603 26 ()}
      {Lisp-Entry "descendant-unit?" native ("native") 604 8 604 29 ()}
      {Lisp-Entry "find-pathname-unit" native ("native") 605 8 605 31 ()}
      {Lisp-Entry "find-unit-src" native ("native") 606 8 606 26 ()}
      {Lisp-Entry "gather-profiles" native ("native") 607 8 607 28 ()}
      {Lisp-Entry "make-profile" native ("native") 608 8 608 25 ()}
      {Lisp-Entry "profile-name" native ("native") 609 8 609 25 ()}
      {Lisp-Entry "profile-title" native ("native") 610 8 610 26 ()}
      {Lisp-Entry "profile-unit" native ("native") 611 8 611 25 ()}
      {Lisp-Entry "get-environment" native ("native") 612 8 612 28 ()}
      {Lisp-Entry "get-environment-unit" native ("native") 613 8 613 33 ()}
      {Lisp-Entry "unit-loaded?" native ("native") 614 8 614 25 ()}
      {Lisp-Entry "unit-status" native ("native") 615 8 615 24 ()}
      {Lisp-Entry "unit-uptodate-binary?" native ("native") 616 8 616 34 ()}
      {Lisp-Entry "load-unit" native ("native") 617 8 617 22 ()}
      {Lisp-Entry "load-script" native ("native") 618 8 618 24 ()}
      {Lisp-Entry "unload-unit" native ("native") 619 8 619 24 ()}
      {Lisp-Entry "reload-unit" native ("native") 620 8 620 24 ()}
      {Lisp-Entry "get-load-mutex" native ("native") 621 8 621 27 ()}
      {Lisp-Entry "get-load-thread" native ("native") 622 8 622 28 ()}
      {Lisp-Entry "get-load-stack" native ("native") 623 8 623 27 ()}
      {Lisp-Entry "get-modules" native ("native") 624 8 624 24 ()}
      {Lisp-Entry "get-module" native ("native") 625 8 625 23 ()}
      {Lisp-Entry "require-module" native ("native") 626 8 626 27 ()}
      {Lisp-Entry "module-get" native ("native") 627 8 627 23 ()}
      {Lisp-Entry "module-ref" native ("native") 628 8 628 23 ()}
      {Lisp-Entry "module-set!" native ("native") 629 8 629 24 ()}
      {Lisp-Entry "walk-literal" native ("native") 630 8 630 25 ()}
      {Lisp-Entry "walk-for" native ("native") 631 8 631 21 ()}
      {Lisp-Entry "register-service" native ("native") 632 8 632 29 ()}
      {Lisp-Entry "get-service" native ("native") 633 8 633 24 ()}
      {Lisp-Entry "require-service" native ("native") 634 8 634 28 ()}
      {Lisp-Entry "global-bound?" native ("native") 635 8 635 26 ()}
      {Lisp-Entry "global-ref" native ("native") 636 8 636 23 ()}
      {Lisp-Entry "global-set!" native ("native") 637 8 637 24 ()}
      {Lisp-Entry "testing?" native ("native") 638 8 638 21 ()}
      {Lisp-Entry "testing" native ("native") 639 8 639 20 ()}
      {Lisp-Entry "generate-symbol-for" native ("native") 640 8 640 32 ()}
      {Lisp-Entry "generate-symbol-context" native ("native") 641 8 641 36 ()}
      {Lisp-Entry "generate-symbol-counter" native ("native") 642 8 642 36 ()}
      {Lisp-Entry "image-load-counter" native ("native") 643 8 643 31 ()}
      {Lisp-Entry "object-load-counter" native ("native") 644 8 644 32 ()}
      {Lisp-Entry "interpreted-load-counter" native ("native") 645 8 645 37 ()}
      {Lisp-Entry "set-crash-reporter" native ("native") 646 8 646 31 ()}
      {Lisp-Entry "crash-process" native ("native") 647 8 647 26 ()}
      {Lisp-Entry "main" native ("native") 648 8 648 12 ()}
      {Lisp-Entry "keyword?" native ("native") 656 8 656 21 ()}
      {Lisp-Entry "string->keyword" native ("native") 657 8 657 28 ()}
      {Lisp-Entry "keyword->string" native ("native") 658 8 658 28 ()}
      {Lisp-Entry "not-null?" native ("native") 666 8 666 22 ()}
      {Lisp-Entry "listify" native ("native") 667 8 667 20 ()}
      {Lisp-Entry "list-copy" native ("native") 668 8 668 22 ()}
      {Lisp-Entry "last-pair" native ("native") 669 8 669 22 ()}
      {Lisp-Entry "proper-list" native ("native") 670 8 670 24 ()}
      {Lisp-Entry "gc" native ("native") 678 8 678 15 ()}
      {Lisp-Entry "gc-report-set!" native ("native") 679 8 679 27 ()}
      {Lisp-Entry "gc-count" native ("native") 680 8 680 21 ()}
      {Lisp-Entry "process-memory" native ("native") 681 8 681 27 ()}
      {Lisp-Entry "symbols-memory" native ("native") 682 8 682 27 ()}
      {Lisp-Entry "classes-statistics" native ("native") 683 8 683 31 ()}
      {Lisp-Entry "class-instances-count" native ("native") 684 8 684 34 ()}
      {Lisp-Entry "class-instances-size" native ("native") 685 8 685 33 ()}
      {Lisp-Entry "instances-statistics" native ("native") 686 8 686 33 ()}
      {Lisp-Entry "vector-size" native ("native") 687 8 687 24 ()}
      {Lisp-Entry "f64vector-size" native ("native") 688 8 688 27 ()}
      {Lisp-Entry "list-size" native ("native") 689 8 689 22 ()}
      {Lisp-Entry "table-size" native ("native") 690 8 690 23 ()}
      {Lisp-Entry "open-tcp-client" native ("native") 698 8 698 28 ()}
      {Lisp-Entry "open-tcp-server" native ("native") 699 8 699 28 ()}
      {Lisp-Entry "tcp-server-socket-info" native ("native") 700 8 700 35 ()}
      {Lisp-Entry "call-with-tcp-client" native ("native") 701 8 701 33 ()}
      {Lisp-Entry "new" native ("native") 709 8 709 16 ()}
      {Lisp-Entry "nascent-new" native ("native") 710 8 710 24 ()}
      {Lisp-Entry "class-of" native ("native") 711 8 711 21 ()}
      {Lisp-Entry "object?" native ("native") 712 8 712 20 ()}
      {Lisp-Entry "type?" native ("native") 713 8 713 18 ()}
      {Lisp-Entry "category?" native ("native") 714 8 714 22 ()}
      {Lisp-Entry "interface?" native ("native") 715 8 715 23 ()}
      {Lisp-Entry "method?" native ("native") 716 8 716 20 ()}
      {Lisp-Entry "is?" native ("native") 717 8 717 16 ()}
      {Lisp-Entry "subtype?" native ("native") 718 8 718 21 ()}
      {Lisp-Entry "subcategory?" native ("native") 719 8 719 25 ()}
      {Lisp-Entry "subclass?" native ("native") 720 8 720 22 ()}
      {Lisp-Entry "iterate-class-overrides" native ("native") 721 8 721 36 ()}
      {Lisp-Entry "update-method" native ("native") 722 8 722 26 ()}
      {Lisp-Entry "make-parameter" native ("native") 730 8 730 22 ()}
      {Lisp-Entry "pathname-type" native ("native") 738 8 738 26 ()}
      {Lisp-Entry "pathname-expand" native ("native") 739 8 739 28 ()}
      {Lisp-Entry "pathname-normalize" native ("native") 740 8 740 31 ()}
      {Lisp-Entry "file-exists?" native ("native") 741 8 741 25 ()}
      {Lisp-Entry "file-delete" native ("native") 742 8 742 24 ()}
      {Lisp-Entry "file-copy" native ("native") 743 8 743 22 ()}
      {Lisp-Entry "file-modification-time" native ("native") 744 8 744 35 ()}
      {Lisp-Entry "file-rename" native ("native") 745 8 745 24 ()}
      {Lisp-Entry "add-extension" native ("native") 746 8 746 26 ()}
      {Lisp-Entry "current-directory" native ("native") 747 8 747 30 ()}
      {Lisp-Entry "current-directory-set!" native ("native") 748 8 748 35 ()}
      {Lisp-Entry "with-current-directory" native ("native") 749 8 749 35 ()}
      {Lisp-Entry "directory-create" native ("native") 750 8 750 29 ()}
      {Lisp-Entry "directory-content" native ("native") 751 8 751 30 ()}
      {Lisp-Entry "directory-delete" native ("native") 752 8 752 29 ()}
      {Lisp-Entry "open-string-pipe" native ("native") 760 8 760 24 ()}
      {Lisp-Entry "open-u8vector-pipe" native ("native") 761 8 761 26 ()}
      {Lisp-Entry "port?" native ("native") 769 8 769 13 ()}
      {Lisp-Entry "close-port" native ("native") 770 8 770 23 ()}
      {Lisp-Entry "input-port-timeout-set!" native ("native") 771 8 771 36 ()}
      {Lisp-Entry "output-port-timeout-set!" native ("native") 772 8 772 37 ()}
      {Lisp-Entry "open-event-queue" native ("native") 773 8 773 24 ()}
      {Lisp-Entry "eof-object" native ("native") 774 8 774 23 ()}
      {Lisp-Entry "open-input-string" native ("native") 775 8 775 25 ()}
      {Lisp-Entry "open-output-string" native ("native") 776 8 776 26 ()}
      {Lisp-Entry "get-output-string" native ("native") 777 8 777 25 ()}
      {Lisp-Entry "call-with-input-string" native ("native") 778 8 778 30 ()}
      {Lisp-Entry "with-input-from-string" native ("native") 779 8 779 30 ()}
      {Lisp-Entry "call-with-output-string" native ("native") 780 8 780 31 ()}
      {Lisp-Entry "with-output-to-string" native ("native") 781 8 781 29 ()}
      {Lisp-Entry "read-substring" native ("native") 782 8 782 22 ()}
      {Lisp-Entry "open-vector" native ("native") 783 8 783 19 ()}
      {Lisp-Entry "call-with-input-u8vector" native ("native") 784 8 784 32 ()}
      {Lisp-Entry "open-output-u8vector" native ("native") 785 8 785 28 ()}
      {Lisp-Entry "get-output-u8vector" native ("native") 786 8 786 27 ()}
      {Lisp-Entry "read-u8" native ("native") 787 8 787 20 ()}
      {Lisp-Entry "write-u8" native ("native") 788 8 788 21 ()}
      {Lisp-Entry "read-subu8vector" native ("native") 789 8 789 29 ()}
      {Lisp-Entry "write-subu8vector" native ("native") 790 8 790 30 ()}
      {Lisp-Entry "read-line" native ("native") 791 8 791 22 ()}
      {Lisp-Entry "read-proper-line" native ("native") 792 8 792 29 ()}
      {Lisp-Entry "read-all" native ("native") 793 8 793 21 ()}
      {Lisp-Entry "print" native ("native") 794 8 794 18 ()}
      {Lisp-Entry "pretty-print" native ("native") 795 8 795 25 ()}
      {Lisp-Entry "read-source-all" native ("native") 796 8 796 28 ()}
      {Lisp-Entry "read-source-first" native ("native") 797 8 797 30 ()}
      {Lisp-Entry "read-literal-hook" native ("native") 798 8 798 30 ()}
      {Lisp-Entry "force-output" native ("native") 799 8 799 20 ()}
      {Lisp-Entry "current-error-port" native ("native") 800 8 800 26 ()}
      {Lisp-Entry "with-output-to-port" native ("native") 801 8 801 27 ()}
      {Lisp-Entry "procedure-name" native ("native") 809 8 809 27 ()}
      {Lisp-Entry "procedure-name-set!" native ("native") 810 8 810 32 ()}
      {Lisp-Entry "procedure-locat" native ("native") 811 8 811 28 ()}
      {Lisp-Entry "new-property" native ("native") 819 8 819 25 ()}
      {Lisp-Entry "property-getter" native ("native") 820 8 820 28 ()}
      {Lisp-Entry "property-setter" native ("native") 821 8 821 28 ()}
      {Lisp-Entry "new-queue" native ("native") 829 8 829 22 ()}
      {Lisp-Entry "enqueue" native ("native") 830 8 830 20 ()}
      {Lisp-Entry "enqueue-list" native ("native") 831 8 831 25 ()}
      {Lisp-Entry "dequeue" native ("native") 832 8 832 20 ()}
      {Lisp-Entry "queue-list" native ("native") 833 8 833 23 ()}
      {Lisp-Entry "reset-queue" native ("native") 834 8 834 24 ()}
      {Lisp-Entry "random-integer" native ("native") 842 8 842 27 ()}
      {Lisp-Entry "random-real" native ("native") 843 8 843 24 ()}
      {Lisp-Entry "random-source-randomize!" native ("native") 844 8 844 37 ()}
      {Lisp-Entry "random-source-pseudo-randomize!" native ("native") 845 8 845 44 ()}
      {Lisp-Entry "default-random-source" native ("native") 846 8 846 34 ()}
      {Lisp-Entry "readtable?" native ("native") 854 8 854 23 ()}
      {Lisp-Entry "current-readtable" native ("native") 855 8 855 25 ()}
      {Lisp-Entry "make-standard-readtable" native ("native") 856 8 856 36 ()}
      {Lisp-Entry "readtable-copy" native ("native") 857 8 857 27 ()}
      {Lisp-Entry "readtable-char-delimiter?" native ("native") 858 8 858 38 ()}
      {Lisp-Entry "readtable-char-delimiter?-set!" native ("native") 859 8 859 43 ()}
      {Lisp-Entry "readtable-char-handler" native ("native") 860 8 860 35 ()}
      {Lisp-Entry "readtable-char-handler-set!" native ("native") 861 8 861 40 ()}
      {Lisp-Entry "readtable-char-sharp-handler" native ("native") 862 8 862 41 ()}
      {Lisp-Entry "readtable-char-sharp-handler-set!" native ("native") 863 8 863 46 ()}
      {Lisp-Entry "readtable-char-class-set!" native ("native") 864 8 864 38 ()}
      {Lisp-Entry "readtable-paren-keyword-set!" native ("native") 865 8 865 41 ()}
      {Lisp-Entry "readtable-bracket-keyword-set!" native ("native") 866 8 866 43 ()}
      {Lisp-Entry "readtable-brace-keyword-set!" native ("native") 867 8 867 41 ()}
      {Lisp-Entry "readtable-named-char-table" native ("native") 868 8 868 39 ()}
      {Lisp-Entry "readtable-named-char-table-set!" native ("native") 869 8 869 44 ()}
      {Lisp-Entry "with-readtable" native ("native") 870 8 870 27 ()}
      {Lisp-Entry "scheme-readtable" native ("native") 871 8 871 29 ()}
      {Lisp-Entry "jazz-readtable" native ("native") 872 8 872 27 ()}
      {Lisp-Entry "with-jazz-readtable" native ("native") 873 8 873 32 ()}
      {Lisp-Entry "resolve-runtime-reference" native ("native") 881 8 881 38 ()}
      {Lisp-Entry "serialize-runtime-reference" native ("native") 882 8 882 40 ()}
      {Lisp-Entry "deserialize-runtime-reference" native ("native") 883 8 883 42 ()}
      {Lisp-Entry "current-repl-context" native ("native") 891 8 891 33 ()}
      {Lisp-Entry "repl-context-level" native ("native") 892 8 892 31 ()}
      {Lisp-Entry "repl-context-depth" native ("native") 893 8 893 31 ()}
      {Lisp-Entry "repl-context-cont" native ("native") 894 8 894 30 ()}
      {Lisp-Entry "repl-context-initial-cont" native ("native") 895 8 895 38 ()}
      {Lisp-Entry "repl-context-prev-level" native ("native") 896 8 896 36 ()}
      {Lisp-Entry "repl-context-prev-depth" native ("native") 897 8 897 36 ()}
      {Lisp-Entry "with-repl-context" native ("native") 898 8 898 30 ()}
      {Lisp-Entry "inspect-repl-context" native ("native") 899 8 899 33 ()}
      {Lisp-Entry "repl" native ("native") 900 8 900 17 ()}
      {Lisp-Entry "eval-within-no-winding" native ("native") 901 8 901 35 ()}
      {Lisp-Entry "repl-result-history-add" native ("native") 902 8 902 36 ()}
      {Lisp-Entry "repl-result-history-ref" native ("native") 903 8 903 31 ()}
      {Lisp-Entry "resource-pathname" native ("native") 911 8 911 30 ()}
      {Lisp-Entry "get-object-slot" native ("native") 919 8 919 28 ()}
      {Lisp-Entry "set-object-slot" native ("native") 920 8 920 28 ()}
      {Lisp-Entry "find-slot-offset" native ("native") 921 8 921 29 ()}
      {Lisp-Entry "dispatch" native ("native") 922 8 922 21 ()}
      {Lisp-Entry "find-dispatch" native ("native") 923 8 923 26 ()}
      {Lisp-Entry "call-into-abstract" native ("native") 924 8 924 31 ()}
      {Lisp-Entry "get-core-classes" native ("native") 925 8 925 29 ()}
      {Lisp-Entry "object->serial" native ("native") 933 8 933 27 ()}
      {Lisp-Entry "serial->object" native ("native") 934 8 934 27 ()}
      {Lisp-Entry "object->serial-number" native ("native") 937 8 937 29 ()}
      {Lisp-Entry "serial-number->object" native ("native") 938 8 938 29 ()}
      {Lisp-Entry "shell-command" native ("native") 946 8 946 21 ()}
      {Lisp-Entry "slot?" native ("native") 954 8 954 18 ("object:bool" "<object:bool>")}
      {Lisp-Entry "slot-value" native ("native") 955 8 955 23 ()}
      {Lisp-Entry "set-slot-value" native ("native") 956 8 956 27 ()}
      {Lisp-Entry "socket-info-address" native ("native") 964 8 964 32 ()}
      {Lisp-Entry "socket-info-port-number" native ("native") 965 8 965 36 ()}
      {Lisp-Entry "hidden-frame?" native ("native") 973 8 973 26 ()}
      {Lisp-Entry "hidden-frame?-set!" native ("native") 974 8 974 31 ()}
      {Lisp-Entry "get-continuation-stack" native ("native") 975 8 975 35 ()}
      {Lisp-Entry "get-continuation-dynamic-environment" native ("native") 976 8 976 49 ()}
      {Lisp-Entry "get-continuation-lexical-environment" native ("native") 977 8 977 49 ()}
      {Lisp-Entry "get-continuation-location" native ("native") 978 8 978 38 ()}
      {Lisp-Entry "interpreted-continuation?" native ("native") 979 8 979 38 ()}
      {Lisp-Entry "string-find-reversed" native ("native") 987 8 987 33 ()}
      {Lisp-Entry "string-starts-with?" native ("native") 988 8 988 32 ()}
      {Lisp-Entry "string-ends-with?" native ("native") 989 8 989 30 ()}
      {Lisp-Entry "split-string" native ("native") 990 8 990 25 ()}
      {Lisp-Entry "join-strings" native ("native") 991 8 991 25 ()}
      {Lisp-Entry "kind?" native ("native") 999 8 999 18 ()}
      {Lisp-Entry "kind-id" native ("native") 1000 8 1000 20 ()}
      {Lisp-Entry "kind-name" native ("native") 1001 8 1001 22 ()}
      {Lisp-Entry "kind-flags" native ("native") 1002 8 1002 23 ()}
      {Lisp-Entry "kind-super" native ("native") 1003 8 1003 23 ()}
      {Lisp-Entry "kind-length" native ("native") 1004 8 1004 24 ()}
      {Lisp-Entry "kind-fields" native ("native") 1005 8 1005 24 ()}
      {Lisp-Entry "structure?" native ("native") 1006 8 1006 23 ()}
      {Lisp-Entry "structure-kind" native ("native") 1007 8 1007 27 ()}
      {Lisp-Entry "structure-ref" native ("native") 1008 8 1008 26 ()}
      {Lisp-Entry "structure-set!" native ("native") 1009 8 1009 27 ()}
      {Lisp-Entry "make-foo" native ("native") 1010 8 1010 16 ()}
      {Lisp-Entry "make-bar" native ("native") 1011 8 1011 16 ()}
      {Lisp-Entry "generate-symbol" native ("native") 1019 8 1019 28 ()}
      {Lisp-Entry "with-uniqueness" native ("native") 1020 8 1020 28 ()}
      {Lisp-Entry "source?" native ("native") 1028 8 1028 20 ()}
      {Lisp-Entry "source-code" native ("native") 1029 8 1029 24 ()}
      {Lisp-Entry "source-locat" native ("native") 1030 8 1030 25 ()}
      {Lisp-Entry "desourcify" native ("native") 1031 8 1031 23 ()}
      {Lisp-Entry "desourcify-all" native ("native") 1032 8 1032 27 ()}
      {Lisp-Entry "sourcify" native ("native") 1033 8 1033 21 ()}
      {Lisp-Entry "sourcify-if" native ("native") 1034 8 1034 24 ()}
      {Lisp-Entry "present-source" native ("native") 1035 8 1035 27 ()}
      {Lisp-Entry "locat-container" native ("native") 1036 8 1036 28 ()}
      {Lisp-Entry "locat-position" native ("native") 1037 8 1037 27 ()}
      {Lisp-Entry "locat->line/col" native ("native") 1038 8 1038 28 ()}
      {Lisp-Entry "locat->file/line/col" native ("native") 1039 8 1039 33 ()}
      {Lisp-Entry "container->path" native ("native") 1040 8 1040 28 ()}
      {Lisp-Entry "position->filepos" native ("native") 1041 8 1041 30 ()}
      {Lisp-Entry "filepos-line" native ("native") 1042 8 1042 25 ()}
      {Lisp-Entry "filepos-col" native ("native") 1043 8 1043 24 ()}
      {Lisp-Entry "switch?" native ("native") 1051 8 1051 20 ()}
      {Lisp-Entry "switch-name" native ("native") 1052 8 1052 24 ()}
      {Lisp-Entry "command-argument" native ("native") 1053 8 1053 29 ()}
      {Lisp-Entry "command-argument?" native ("native") 1054 8 1054 30 ()}
      {Lisp-Entry "open-process" native ("native") 1055 8 1055 25 ()}
      {Lisp-Entry "process-status" native ("native") 1056 8 1056 27 ()}
      {Lisp-Entry "exit" native ("native") 1057 8 1057 17 ()}
      {Lisp-Entry "add-exit-job!" native ("native") 1058 8 1058 26 ()}
      {Lisp-Entry "table?" native ("native") 1066 8 1066 14 ()}
      {Lisp-Entry "make-table" native ("native") 1067 8 1067 18 ()}
      {Lisp-Entry "table-for-each" native ("native") 1068 8 1068 22 ()}
      {Lisp-Entry "table-ref" native ("native") 1069 8 1069 17 ()}
      {Lisp-Entry "table-set!" native ("native") 1070 8 1070 18 ()}
      {Lisp-Entry "table->list" native ("native") 1071 8 1071 19 ()}
      {Lisp-Entry "list->table" native ("native") 1072 8 1072 19 ()}
      {Lisp-Entry "table-clear" native ("native") 1073 8 1073 24 ()}
      {Lisp-Entry "table-length" native ("native") 1074 8 1074 25 ()}
      {Lisp-Entry "iterate-table" native ("native") 1075 8 1075 26 ()}
      {Lisp-Entry "iterate-table-safe" native ("native") 1076 8 1076 31 ()}
      {Lisp-Entry "map-table" native ("native") 1077 8 1077 22 ()}
      {Lisp-Entry "table-entries" native ("native") 1078 8 1078 26 ()}
      {Lisp-Entry "eq?-hash" native ("native") 1079 8 1079 21 ()}
      {Lisp-Entry "eqv?-hash" native ("native") 1080 8 1080 22 ()}
      {Lisp-Entry "equal?-hash" native ("native") 1081 8 1081 24 ()}
      {Lisp-Entry "string=?-hash" native ("native") 1082 8 1082 26 ()}
      {Lisp-Entry "string-ci=?-hash" native ("native") 1083 8 1083 29 ()}
      {Lisp-Entry "make-will" native ("native") 1084 8 1084 17 ()}
      {Lisp-Entry "set-terminal-title" native ("native") 1092 8 1092 31 ()}
      {Lisp-Entry "bring-terminal-to-front" native ("native") 1093 8 1093 36 ()}
      {Lisp-Entry "clear-terminal" native ("native") 1094 8 1094 27 ()}
      {Lisp-Entry "current-thread" native ("native") 1102 8 1102 27 ()}
      {Lisp-Entry "thread?" native ("native") 1103 8 1103 20 ()}
      {Lisp-Entry "make-thread" native ("native") 1104 8 1104 24 ()}
      {Lisp-Entry "make-root-thread" native ("native") 1105 8 1105 29 ()}
      {Lisp-Entry "thread-name" native ("native") 1106 8 1106 24 ()}
      {Lisp-Entry "thread-specific" native ("native") 1107 8 1107 28 ()}
      {Lisp-Entry "thread-specific-set!" native ("native") 1108 8 1108 33 ()}
      {Lisp-Entry "thread-base-priority" native ("native") 1109 8 1109 33 ()}
      {Lisp-Entry "thread-base-priority-set!" native ("native") 1110 8 1110 38 ()}
      {Lisp-Entry "thread-priority-boost" native ("native") 1111 8 1111 34 ()}
      {Lisp-Entry "thread-priority-boost-set!" native ("native") 1112 8 1112 39 ()}
      {Lisp-Entry "thread-start!" native ("native") 1113 8 1113 26 ()}
      {Lisp-Entry "thread-yield!" native ("native") 1114 8 1114 26 ()}
      {Lisp-Entry "thread-sleep!" native ("native") 1115 8 1115 26 ()}
      {Lisp-Entry "thread-terminate!" native ("native") 1116 8 1116 30 ()}
      {Lisp-Entry "thread-join!" native ("native") 1117 8 1117 25 ()}
      {Lisp-Entry "thread-send" native ("native") 1118 8 1118 24 ()}
      {Lisp-Entry "thread-receive" native ("native") 1119 8 1119 27 ()}
      {Lisp-Entry "thread-interrupt!" native ("native") 1120 8 1120 30 ()}
      {Lisp-Entry "thread-thread-group" native ("native") 1121 8 1121 32 ()}
      {Lisp-Entry "thread-group->thread-group-list" native ("native") 1122 8 1122 44 ()}
      {Lisp-Entry "thread-group->thread-group-vector" native ("native") 1123 8 1123 46 ()}
      {Lisp-Entry "thread-group->thread-list" native ("native") 1124 8 1124 38 ()}
      {Lisp-Entry "thread-group->thread-vector" native ("native") 1125 8 1125 40 ()}
      {Lisp-Entry "thread-state" native ("native") 1126 8 1126 25 ()}
      {Lisp-Entry "thread-state-abnormally-terminated-reason" native ("native") 1127 8 1127 54 ()}
      {Lisp-Entry "thread-state-abnormally-terminated?" native ("native") 1128 8 1128 48 ()}
      {Lisp-Entry "thread-state-active-timeout" native ("native") 1129 8 1129 40 ()}
      {Lisp-Entry "thread-state-active-waiting-for" native ("native") 1130 8 1130 44 ()}
      {Lisp-Entry "thread-state-active?" native ("native") 1131 8 1131 33 ()}
      {Lisp-Entry "thread-state-initialized?" native ("native") 1132 8 1132 38 ()}
      {Lisp-Entry "thread-state-normally-terminated-result" native ("native") 1133 8 1133 52 ()}
      {Lisp-Entry "thread-state-normally-terminated?" native ("native") 1134 8 1134 46 ()}
      {Lisp-Entry "thread-state-uninitialized?" native ("native") 1135 8 1135 40 ()}
      {Lisp-Entry "pristine-thread-continuation" native ("native") 1136 8 1136 41 ()}
      {Lisp-Entry "mutex?" native ("native") 1137 8 1137 19 ()}
      {Lisp-Entry "make-mutex" native ("native") 1138 8 1138 23 ()}
      {Lisp-Entry "mutex-name" native ("native") 1139 8 1139 23 ()}
      {Lisp-Entry "mutex-specific" native ("native") 1140 8 1140 27 ()}
      {Lisp-Entry "mutex-specific-set!" native ("native") 1141 8 1141 32 ()}
      {Lisp-Entry "mutex-state" native ("native") 1142 8 1142 24 ()}
      {Lisp-Entry "mutex-lock!" native ("native") 1143 8 1143 24 ()}
      {Lisp-Entry "mutex-unlock!" native ("native") 1144 8 1144 26 ()}
      {Lisp-Entry "mutex-wait" native ("native") 1145 8 1145 23 ()}
      {Lisp-Entry "mutex-owner" native ("native") 1146 8 1146 24 ()}
      {Lisp-Entry "condition?" native ("native") 1147 8 1147 23 ()}
      {Lisp-Entry "make-condition" native ("native") 1148 8 1148 27 ()}
      {Lisp-Entry "condition-name" native ("native") 1149 8 1149 27 ()}
      {Lisp-Entry "condition-specific" native ("native") 1150 8 1150 31 ()}
      {Lisp-Entry "condition-specific-set!" native ("native") 1151 8 1151 36 ()}
      {Lisp-Entry "condition-signal!" native ("native") 1152 8 1152 30 ()}
      {Lisp-Entry "condition-broadcast!" native ("native") 1153 8 1153 33 ()}
      {Lisp-Entry "current-systime" native ("native") 1161 8 1161 28 ()}
      {Lisp-Entry "systime?" native ("native") 1162 8 1162 21 ()}
      {Lisp-Entry "systime->seconds" native ("native") 1163 8 1163 29 ()}
      {Lisp-Entry "seconds->systime" native ("native") 1164 8 1164 29 ()}
      {Lisp-Entry "process-times" native ("native") 1165 8 1165 26 ()}
      {Lisp-Entry "cpu-time" native ("native") 1166 8 1166 21 ()}
      {Lisp-Entry "real-time" native ("native") 1167 8 1167 22 ()}
      {Lisp-Entry "unspecified" native ("native") 1175 8 1175 24 ()}
      {Lisp-Entry "unspecified?" native ("native") 1176 8 1176 25 ()}
      {Lisp-Entry "specified?" native ("native") 1177 8 1177 23 ()}
      {Lisp-Entry "vector-copy" native ("native") 1185 8 1185 24 ()}
      {Lisp-Entry "values?" native ("native") 1193 8 1193 20 ()}
      {Lisp-Entry "analysis-mode?" native ("native") 1201 8 1201 27 ()}
      {Lisp-Entry "analysis-data" native ("native") 1202 8 1202 26 ()}
      {Lisp-Entry "new-walk-context" native ("native") 1203 8 1203 29 ()}
      {Lisp-Entry "specifier?" native ("native") 1204 8 1204 23 ()}
      {Lisp-Entry "binding-specifier" native ("native") 1205 8 1205 30 ()}
      {Lisp-Entry "parse-specifier" native ("native") 1206 8 1206 28 ()}
      {Lisp-Entry "requested-unit-name" native ("native") 1207 8 1207 32 ()}
      {Lisp-Entry "requested-unit-resource" native ("native") 1208 8 1208 36 ()}
      {Lisp-Entry "get-private-lookup" native ("native") 1209 8 1209 31 ()}
      {Lisp-Entry "get-public-lookup" native ("native") 1210 8 1210 30 ()}
      {Lisp-Entry "get-protected-lookup" native ("native") 1211 8 1211 33 ()}
      {Lisp-Entry "get-catalog" native ("native") 1212 8 1212 24 ()}
      {Lisp-Entry "get-catalog-entry" native ("native") 1213 8 1213 30 ()}
      {Lisp-Entry "release-catalog-entries" native ("native") 1214 8 1214 36 ()}
      {Lisp-Entry "outline-feedback" native ("native") 1215 8 1215 29 ()}
      {Lisp-Entry "outline-unit" native ("native") 1216 8 1216 25 ()}
      {Lisp-Entry "walk-unit" native ("native") 1217 8 1217 22 ()}
      {Lisp-Entry "expand-unit" native ("native") 1218 8 1218 24 ()}
      {Lisp-Entry "expand-to-port" native ("native") 1219 8 1219 27 ()}
      {Lisp-Entry "expand-to-file" native ("native") 1220 8 1220 27 ()}
      {Lisp-Entry "find-declaration" native ("native") 1221 8 1221 29 ()}}})
"_language"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "language" "_language.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.dialect.language" module #f 37 18 37 39 ("jazz.dialect")
      {Lisp-Entry "proclaim" anonymous #f 40 1 40 9 ("optimizations" "warn")}
      {Lisp-Entry "export" anonymous #f 43 1 43 7 ("jazz.dialect.language.platform" "jazz.dialect.language.parse" "jazz.dialect.language.object" "jazz.dialect.language.homogeneous" "jazz.dialect.language.geometry" "jazz.dialect.language.functional" "jazz.dialect.language.format" "jazz.dialect.language.exception" "jazz.dialect.language.debug")}}})
"_performance"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "performance" "_performance.scm"} 1288870741 scheme
    {Lisp-Entry "test.performance" unit #f 0 6 0 22 ()
      {Lisp-Entry "require" anonymous #f 3 1 3 8 ("test.performance.b" "test.performance.a" "test.performance.common" "syntax" "phase" "test.performance.syntax" "core.generic" "core.class")}}})
"_syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "_syntax.scm"} 1288870741 scheme
    {Lisp-Entry "jazz.dialect.syntax" module #f 37 18 37 37 ("scheme")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.dialect.syntax.templates" "jazz.dialect.syntax.template" "jazz.dialect.syntax.macros" "jazz.dialect.syntax.with" "jazz.dialect.syntax.typecase" "jazz.dialect.syntax.loop" "jazz.dialect.syntax.increase" "jazz.dialect.syntax.enumeration" "jazz.dialect.syntax.ecase" "jazz.dialect.syntax.bind-keywords" "jazz.dialect.syntax.bind-optionals" "jazz.dialect.syntax.bind" "jazz.dialect.syntax.attributes")}}})
"_test"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "_test.jazz"} 1299704435 jazz
    {Lisp-Entry "jazz.test" module #f 37 8 37 17 ("cdr" "car" "when" "proc" "lst" "iter-list" "init1" "Subseq" "length" "fl" "<fl>" "x" "f" "set-element!" "10" "axis-grow" "0" "Axis" "new" "axis" "let" "for-each" "allocate" "category<Axis>" "<category<Axis>>" "foo" "test.pt" "U" "I" "interface" "Exception" "XX" "delegator" "current-thread" "sleep" "lambda" "delegated" "thread-loop" "new-thread" "thread-start!" "thread-execute" "test-execute" "X" "3" "Point" "b" "a" "1" "append" "get-row" "method" "Object" "extends" "A" "class" "bar" "define" "jazz.ui.window" "jazz.ui.view" "jazz.system.application" "jazz.graphic" "jazz.designer" "jazz.debuggee" "jazz.runtime" "jazz.io" "jazz.test.advise" "5" "var-1" "definition" "jazz.test.b" "jazz.library" "jazz.jml" "2" "walk-failed?" "debug" "jazz.ui" "jazz.system" "jazz.platform.cairo" "jazz.platform" "import" "jazz")
      {Lisp-Entry "XX" class #f 40 7 40 9 ("Object")
        {Lisp-Entry "foo" method #f 43 31 43 34 ()}
        {Lisp-Entry "bar" method #f 46 31 46 34 ()}}
      {Lisp-Entry "YY" class #f 50 7 50 9 ("XX")
        {Lisp-Entry "foo" method #f 53 25 53 28 ()}
        {Lisp-Entry "bar" method #f 56 25 56 28 ("foo")}}
      {Lisp-Entry "foo" definition #f 288 20 288 23 ("4" "3" "2" "+" "step" "-" "*" "1" "0" "=" "if" "n" "fact" "define" "x")}
      {Lisp-Entry "Blah" class #f 516 7 516 11 ("Object")
        {Lisp-Entry "warnings" slot #f 517 8 517 16 ()}
        {Lisp-Entry "get-warnings" accessor #f 517 26 517 34 ()}
        {Lisp-Entry "errors" slot #f 518 8 518 14 ()}
        {Lisp-Entry "get-errors" accessor #f 518 26 518 34 ()}
        {Lisp-Entry "literals" slot #f 519 8 519 16 ()}
        {Lisp-Entry "get-literals" accessor #f 519 26 519 34 ()}
        {Lisp-Entry "variables" slot #f 520 8 520 17 ()}
        {Lisp-Entry "get-variables" accessor #f 520 26 520 34 ()}
        {Lisp-Entry "references" slot #f 521 8 521 18 ()}
        {Lisp-Entry "get-references" accessor #f 521 26 521 34 ()}
        {Lisp-Entry "inclusions" slot #f 522 8 522 18 ()}
        {Lisp-Entry "get-inclusions" accessor #f 522 26 522 34 ()}
        {Lisp-Entry "autoloads" slot #f 523 8 523 17 ()}
        {Lisp-Entry "get-autoloads" accessor #f 523 26 523 34 ()}}
      {Lisp-Entry "Y" class #f 754 7 754 8 ("X")
        {Lisp-Entry "f" method #f 757 16 757 17 ("2")}}
      {Lisp-Entry "Y~Class207" class #f 763 9 763 19 ("X" ":class")
        {Lisp-Entry "f" method #f 766 13 766 14 ("2")}}
      {Lisp-Entry "Y" class #f 770 9 770 10 ("X" "Class207" "Y" "Y~Class207")}
      {Lisp-Entry "f" definition #f 867 13 867 14 ("=" "not" "if" "Cell+" "<Cell+>" "c")}
      {Lisp-Entry "import" anonymous #f 908 1 908 7 ("test.a" "jazz.system" "jazz.ui.window" "jazz.ui.view" "jazz.ui.dialog" "jazz.ui" "jazz.platform" "jazz.library" "jazz.jml" "jazz.io" "jazz.git")}
      {Lisp-Entry "f" definition #f 927 13 927 14 ("+" "0" "n" "iter" "let")}
      {Lisp-Entry "TC" class #f 934 7 934 9 ("3" "fx" "<fx>" "1" "initialize" "Integer+" "<Integer+>" "Object")
        {Lisp-Entry "row" slot #f 937 8 937 11 ()}
        {Lisp-Entry "col" slot #f 938 8 938 11 ()}
        {Lisp-Entry "f" method #f 941 11 941 12 ("col" "0" "subseq!" "row" "when")}
        {Lisp-Entry "g" method #f 946 11 946 12 ("col" "0" "subseq!")}}
      {Lisp-Entry "f" definition #f 951 13 951 14 ("g" "g~" "TC" "new" "f" "f~" "class-of" "list")}}})
"_validate"
 ({Lisp-File-Entry {File :context "src" "jazz" "validate" "_validate.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.validate" module #f 37 8 37 21 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.validate.autoload")}}})
"_walker"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "walker" "_walker.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.dialect.walker" module #f 37 18 37 37 ("jazz.dialect")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.dialect.walker.jazz")}}})
"a"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "performance" "a.scm"} 1288870741 scheme
    {Lisp-Entry "test.performance.a" unit #f 0 6 0 24 ()
      {Lisp-Entry "f-separate" define #f 8 9 8 19 ("1" "%%fx-" "g-separate" "0" "%%fx=" "if" "n" "s")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "test" "a.jazz"} 1299704435 jazz
    {Lisp-Entry "jazz.test.a" module #f 0 8 0 19 ("jazz")
      {Lisp-Entry "import" anonymous #f 3 1 3 7 ("jazz.test" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Test" class #f 9 7 9 11 ("A")
        {Lisp-Entry "form" anonymous #f 12 3 12 7 ("f" "e" "b" "d" "visible?:" "c" "C" "<C>" "a" "name:" "B" "<B>" "install" "<install>")}}}})
"advise"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "advise.jazz"} 1299704435 jazz
    {Lisp-Entry "jazz.test.advise" module #f 37 8 37 24 ("X" "<X>" "jazz")
      {Lisp-Entry "interaction-environment" native ("native") 45 8 45 31 ()}
      {Lisp-Entry "bootstrap-output-value" native ("native") 46 8 46 35 ()}
      {Lisp-Entry "abc" define #f 54 8 54 11 ("1")}
      {Lisp-Entry "zoo" define #f 56 9 56 12 ("abc" "*" "2" "ha" "define" "x")}
      {Lisp-Entry "foo" definition #f 62 19 62 22 ("2")}
      {Lisp-Entry "goo" definition #f 65 12 65 15 ("3")}
      {Lisp-Entry "bar" definition #f 68 20 68 23 ("3" "zoo" "2" "+")}
      {Lisp-Entry "aaa" define #f 72 29 72 32 ("1")}
      {Lisp-Entry "I" interface #f 80 11 80 12 ()
        {Lisp-Entry "yyy" method #f 82 19 82 22 ()}}
      {Lisp-Entry "X" class #f 91 7 91 8 ("I" "Object")
        {Lisp-Entry "a" slot #f 93 8 93 9 ()}
        {Lisp-Entry "get-a" accessor #f 93 20 93 28 ()}
        {Lisp-Entry "set-a" accessor #f 93 20 93 28 ()}
        {Lisp-Entry "initialize" method #f 95 20 95 30 ("2" "a" "set!" "nextmethod")}
        {Lisp-Entry "ya" define #f 99 11 99 13 ("1")}
        {Lisp-Entry "yi" definition #f 102 22 102 24 ("ya")}
        {Lisp-Entry "yo" method #f 105 18 105 20 ("yi" "a" "+")}
        {Lisp-Entry "yum" method #f 108 26 108 29 ("yo")}
        {Lisp-Entry "yyy" method #f 111 20 111 23 ("4")}}
      {Lisp-Entry "Y" class #f 115 7 115 8 ("X")
        {Lisp-Entry "yum" method #f 117 20 117 23 ("3" "nextmethod" "list")}}
      {Lisp-Entry "gen" generic/specific ("<X>") 126 10 126 13 ("rest")}
      {Lisp-Entry "gen" generic/specific ("<X>") 128 11 128 14 ("1" "rest")}}})
"attributes"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "attributes.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.syntax.attributes" module #f 37 18 37 48 ("scheme")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.dialect.kernel")}
      {Lisp-Entry "getf" native ("native") 43 16 43 25 ()}
      {Lisp-Entry "system-format" native ("native") 44 16 44 34 ()}
      {Lisp-Entry "attributes" macro ("macro") 83 15 83 25 (",setter" "public" "setter" "set" ",getter" "system-format" "getter" "get" "queue-list" ",test" "enqueue" "test" "for-each" "new-queue" "clauses" "y" "x" "attribute=?" "get-attribute-no-default~" "not-null?" "get-ascendants" "scan" "iterate" "specified?" "if" "get-attribute-no-default" ",initialize" "unspecified" "not-found:" "getf" "initialize" "rest" "specifier" "parse-specifier" "get-attribute-default" "set!" ",value" "set-attribute" "nextmethod" "else" ",name" "name" "case" ",attribute" "get-attribute" "append" "get-attributes" "override" "method" ",slot-name" "slot" "lambda" "map" "begin" "value" "generate-symbol" "cdr" "attributes" "inherited" "let" "car" "symbol->string" "string-append" "string->symbol" "attribute" "slot-name" "define" "form")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "autoload.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.test.autoload" module #f 0 18 0 36 ("jazz")
      {Lisp-Entry "export" anonymous #f 3 1 3 7 ("Y" "jazz.test.Y" "X" "autoload" "jazz.test.X")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "validate" "autoload.jazz"} 1295977563 jazz
    {Lisp-Entry "jazz.validate.autoload" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("Test-Table" "jazz.validate.support.Test-Table" "Test-Model" "jazz.validate.support.Test-Model" "Test-Architecture" "jazz.validate.support.Test-Architecture" "Vector-Tester" "jazz.validate.suite.Vector-Tester" "Variable-Tester" "jazz.validate.suite.Variable-Tester" "Values-Tester" "jazz.validate.suite.Values-Tester" "Trait-Tester" "jazz.validate.suite.Trait-Tester" "Thread-Tester" "jazz.validate.suite.Thread-Tester" "Table-Tester" "jazz.validate.suite.Table-Tester" "Syntax-Tester" "jazz.validate.suite.Syntax-Tester" "Symbol-Tester" "jazz.validate.suite.Symbol-Tester" "Structure-Tester" "jazz.validate.suite.Structure-Tester" "String-Tester" "jazz.validate.suite.String-Tester" "Sequence-Tester" "jazz.validate.suite.Sequence-Tester" "Scheme-Tester" "jazz.validate.suite.Scheme-Tester" "Reader-Tester" "jazz.validate.suite.Reader-Tester" "Pathname-Tester" "jazz.validate.suite.Pathname-Tester" "Object-Tester" "jazz.validate.suite.Object-Tester" "Number-Tester" "jazz.validate.suite.Number-Tester" "List-Tester" "jazz.validate.suite.List-Tester" "Language-Tester" "jazz.validate.suite.Language-Tester" "Iterator-Tester" "jazz.validate.suite.Iterator-Tester" "Function-Tester" "jazz.validate.suite.Function-Tester" "Format-Tester" "jazz.validate.suite.Format-Tester" "Form-Tester" "jazz.validate.suite.Form-Tester" "Explorer-Tester" "jazz.validate.suite.Explorer-Tester" "Error-Tester" "jazz.validate.suite.Error-Tester" "Enumeration-Tester" "jazz.validate.suite.Enumeration-Tester" "Designer-Tester" "jazz.validate.suite.Designer-Tester" "Debugger-Tester" "jazz.validate.suite.Debugger-Tester" "Control-Tester" "jazz.validate.suite.Control-Tester" "Component-Tester" "jazz.validate.suite.Component-Tester" "Collector-Tester" "jazz.validate.suite.Collector-Tester" "Char-Tester" "jazz.validate.suite.Char-Tester" "Catalog-Tester" "jazz.validate.suite.Catalog-Tester" "Boolean-Tester" "jazz.validate.suite.Boolean-Tester" "Binding-Tester" "jazz.validate.suite.Binding-Tester" "Array-Tester" "autoload" "jazz.validate.suite.Array-Tester")}}})
"b"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "performance" "b.scm"} 1288870741 scheme
    {Lisp-Entry "test.performance.b" unit #f 0 6 0 24 ()
      {Lisp-Entry "g-separate" define #f 8 9 8 19 ("1" "%%fx-" "f-separate" "0" "%%fx=" "if" "n" "s")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "test" "b.jazz"} 1299704435 jazz
    {Lisp-Entry "jazz.test.b" module #f 0 8 0 19 ("jazz")}})
"base64"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "base64.scm"} 1288870741 scheme
    {Lisp-Entry "jazz.dialect.core.base64" unit #f 0 16 0 40 ()
      {Lisp-Entry "macro-make-fifo" define-macro #f 28 17 28 32 ("macro-fifo-tail-set!" "##cons" "fifo" "let")}
      {Lisp-Entry "macro-fifo-next" define-macro #f 33 17 33 32 (",fifo" "##cdr" "fifo")}
      {Lisp-Entry "macro-fifo-next-set!" define-macro #f 34 17 34 37 (",x" ",fifo" "##set-cdr!" "x" "fifo")}
      {Lisp-Entry "macro-fifo-tail" define-macro #f 35 17 35 32 (",fifo" "##car" "fifo")}
      {Lisp-Entry "macro-fifo-tail-set!" define-macro #f 36 17 36 37 (",x" ",fifo" "##set-car!" "x" "fifo")}
      {Lisp-Entry "macro-fifo-elem" define-macro #f 37 17 37 32 (",fifo" "##car" "fifo")}
      {Lisp-Entry "macro-fifo-elem-set!" define-macro #f 38 17 38 37 (",x" ",fifo" "##set-car!" "x" "fifo")}
      {Lisp-Entry "macro-fifo->list" define-macro #f 40 17 40 33 (",fifo" "macro-fifo-next" "fifo")}
      {Lisp-Entry "macro-fifo-remove-all!" define-macro #f 43 17 43 39 ("macro-fifo-next-set!" "macro-fifo-tail-set!" "macro-fifo-next" "head" "interrupts-enabled" "not" "##declare" ",fifo" "let" "fifo")}
      {Lisp-Entry "macro-fifo-remove-head!" define-macro #f 53 17 53 40 ("macro-fifo-next-set!" "macro-fifo-tail-set!" "##null?" "next" "##pair?" "if" "macro-fifo-next" "head" "interrupts-enabled" "not" "##declare" ",fifo" "let" "fifo")}
      {Lisp-Entry "macro-fifo-insert-at-tail!" define-macro #f 67 17 67 43 ("##void" "macro-fifo-tail-set!" "macro-fifo-next-set!" "macro-fifo-tail" "tail" "interrupts-enabled" "not" "##declare" "##cons" "x" ",elem" ",fifo" "let" "elem" "fifo")}
      {Lisp-Entry "macro-fifo-insert-at-head!" define-macro #f 78 17 78 43 ("##void" "macro-fifo-next-set!" "macro-fifo-tail-set!" "##null?" "if" "macro-fifo-next" "head" "##check-heap-limit" "interrupts-enabled" "not" "##declare" "##cons" "x" ",elem" ",fifo" "let" "elem" "fifo")}
      {Lisp-Entry "macro-fifo-advance-to-tail!" define-macro #f 98 17 98 44 ("macro-fifo-elem" "macro-fifo-next-set!" "macro-fifo-tail" "new-head" ",fifo" "let" "fifo")}
      {Lisp-Entry "macro-fifo-advance!" define-macro #f 106 17 106 36 ("macro-fifo-elem" "macro-fifo-next-set!" "new-head" "macro-fifo-next" "head" "let*" ",fifo" "let" "fifo")}
      {Lisp-Entry "fifo->u8vector" define-macro #f 115 17 115 31 (",end" ",start" ",fifo" "##fifo->u8vector" "end" "start" "fifo")}
      {Lisp-Entry "u8vector-shrink!" define-macro #f 118 17 118 33 (",len" ",u8vect" "##u8vector-shrink!" "len" "u8vect")}
      {Lisp-Entry "fifo->string" define-macro #f 121 17 121 29 (",end" ",start" ",fifo" "##fifo->string" "end" "start" "fifo")}
      {Lisp-Entry "string-shrink!" define-macro #f 124 17 124 31 (",len" ",str" "##string-shrink!" "len" "str")}
      {Lisp-Entry "base64-string->u8vector" define #f 129 8 129 31 ("string-length" "0" "base64-substring->u8vector" "str" "lambda")}
      {Lisp-Entry "base64-substring->u8vector" define #f 133 8 133 34 ("begin" "c3" "loop3" "c2" "loop2" "c1" "loop1" "string-ref" "c0" "let*" ">=" "loop0" "6" "x3" "add3" "-2" "4" "#xff" "x2" "add2" "-4" "2" "arithmetic-shift" "add" "x1" "x0" "add1" "done" "else" "63" "62" "char=?" "52" "26" "char->integer" "char<=?" "char>=?" "cond" "c" "decode" "fifo->u8vector" "u8vector-shrink!" "u8vect" "<=" "<" "and" "get-output-u8vector" "macro-fifo-tail" "macro-fifo-elem" "macro-fifo-insert-at-tail!" "make-u8vector" "chunk" "=" "if" "u8vector-set!" "-" "bitwise-and" "i" "fifo" "1" "+" "vector-set!" "vector-ref" "ptr" "let" "x" "wr-u8" "macro-make-fifo" "0" "vector" "state" "64" "chunk-len" "error" "err" "define" "end" "start" "str" "lambda")}
      {Lisp-Entry "u8vector->base64-string" define #f 255 8 255 31 ("u8vector-length" "subu8vector->base64-string" "0" "width" "#!optional" "u8vect" "lambda")}
      {Lisp-Entry "subu8vector->base64-string" define #f 259 8 259 34 ("rest" "x3" "-6" "x2" "-4" "4" "#x3f" "x1" "-2" "arithmetic-shift" "x0" "2" "b2" "b1" "u8vector-ref" "b0" "3" ">" "loop" "63" "62" "52" "61" "26" "51" "char->integer" "integer->char" "25" "else" "-1" "cond" "new-n" "n" "x" "out" "add" "fifo->string" "string-shrink!" "str" "<=" "<" "and" "get-output-string" "macro-fifo-tail" "macro-fifo-elem" "macro-fifo-insert-at-tail!" "make-string" "chunk" "=" "if" "string-set!" "-" "bitwise-and" "i" "fifo" "1" "+" "vector-set!" "vector-ref" "ptr" "let" "c" "wr-char" "macro-make-fifo" "vector" "state" "64" "chunk-len" "define" "0" "width" "#!optional" "end" "start" "u8vect" "lambda")}}})
"bind"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "bind.scm"} 1288870741 scheme
    {Lisp-Entry "jazz.dialect.syntax.bind" module #f 38 18 38 42 ("scheme")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.dialect.kernel")}
      {Lisp-Entry "bind" macro #f 56 16 56 20 ("begin" "tree-value" "lambda" "with-uniqueness" "sourcify-if" "cddr" "source-code" "cadr" "desourcify" ",cdr-symbol" "cdr-symbol" ",@body" ",cdr-binding" "null?" ",car-symbol" "generate-symbol" "car-symbol" "pair?" "expand-bind-cdr" ",tree" ",specifier" ",car-binding" "if" "binding-specifier" "specifier" "symbol?" "cond" "cdr" "cdr-binding" "car" "car-binding" "let" "body" "tree" "bindings" "expand-bind-car" "define" "form-src")}}})
"bind-keywords"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "bind-keywords.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.syntax.bind-keywords" module #f 38 18 38 51 ("scheme")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.dialect.kernel")}
      {Lisp-Entry "last-tail" native ("native") 44 16 44 30 ()}
      {Lisp-Entry "bind-keywords" macro #f 57 16 57 29 ("error" "not-null?" ",@body" "unbox-list" "symbol?" "proper-list" ",default" "symbol->string" "string->keyword" "find-keyword" ",specifier" ",variable" "caddr" "if" "default" "binding-specifier" "specifier" "variable" "binding" "lambda" "map" "let*" ",rest" "box-list" ",box" "sourcify-if" "last-tail" "oth" "new-queue" "bnd" "generate-symbol" "box" "cdr" "body" "cddr" "car" "rest" "cadr" "source-code" "bindings" "let" "form-src")}}})
"bind-optionals"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "bind-optionals.scm"} 1288870741 scheme
    {Lisp-Entry "jazz.dialect.syntax.bind-optionals" module #f 38 18 38 52 ("scheme")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.dialect.kernel")}
      {Lisp-Entry "bind-optionals" macro #f 61 16 61 30 (",@body" "error" "not-null?" "proper-list" ",value" ",specifier" ",variable" "set!" ",prog" ",default" "null?" "value" "caddr" "if" "default" "binding-specifier" "specifier" "variable" "binding" "lambda" "map" "let*" ",rest" ",scan" "sourcify-if" "prog" "generate-symbol" "scan" "cdr" "body" "cddr" "car" "rest" "cadr" "source-code" "bindings" "let" "form-src")}}})
"c"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "c.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.test.c" module #f 0 8 0 19 ("jazz")}})
"catalog"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "catalog.jazz"} 1299782587 jazz
    {Lisp-Entry "jazz.test.catalog" module #f 0 8 0 25 ("jazz")
      {Lisp-Entry "nativ" native ("native") 2 8 2 18 ()}
      {Lisp-Entry "foo" define #f 4 9 4 12 ("quoted" "tildeself" "tildeslot" "tildeslot~tildeself" "tilde" "tilde~" "ref2" "ref1" "refunit" "refunit:ref1:ref2" "prim" "jazz:prim" "keyw:" ":enum" "a.b.gigi" "symb" "Targ" "<Targ>")}}})
"cffi"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "cffi.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.test.cffi" module #f 37 8 37 22 ("#<<end-of-c-declare\nstatic int func2(mult* m, int n)\n{\n    return (*m)(n);\n}\nend-of-c-declare\n" "#<<end-of-c-declare\ntypedef int (mult)(int);\n\nstatic int multiply(int n)\n{\n    return n * n;\n}\n\nstatic mult* func1()\n{\n    return &multiply;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstruct S1_\n{\n    int x;\n    int y;\n};\n\ntypedef struct S1_ S1;\n\nstatic int struct1a(S1 s1)\n{\n    return s1.x + s1.y;\n}\n\n//static int struct1b(S1& s1)\n//{\n//    return s1.x + s1.y;\n//}\n\nstatic int struct1c(S1* s1)\n{\n    return s1->x + s1->y;\n}\n\nstatic void tst()\n{\n    S1 s;\n    \n    struct1a(s);\n    struct1c(&s);\n}\nend-of-c-declare\n" "int1" "c-type" "#<<end-of-c-declare\nstatic int scalar3(___SCMOBJ obj)\n{\n    return (int) obj;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic int scalar2(int n)\n{\n    return n + n;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic void scalar1(int n)\n{\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nN = 2;\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic int N;\nend-of-c-declare\n" "jazz")
      {Lisp-Entry "init1" definition #f 71 12 71 17 ("int" "c-function")}
      {Lisp-Entry "void" c-type #f 80 8 80 12 ("void" "native")}
      {Lisp-Entry "bool" c-type #f 81 8 81 12 ("bool" "native")}
      {Lisp-Entry "char" c-type #f 82 8 82 12 ("char" "native")}
      {Lisp-Entry "wchar_t" c-type #f 83 8 83 15 ("wchar_t" "native")}
      {Lisp-Entry "int" c-type #f 84 8 84 11 ("int" "native")}
      {Lisp-Entry "double" c-type #f 85 8 85 14 ("double" "native")}
      {Lisp-Entry "scheme-object" c-type #f 86 8 86 21 ("scheme-object" "native")}
      {Lisp-Entry "object" c-type #f 87 8 87 14 ("scheme-object")}
      {Lisp-Entry "scalar1" definition #f 98 12 98 19 ("void" "int" "c-function")}
      {Lisp-Entry "scalar2" definition #f 111 12 111 19 ("int" "c-function")}
      {Lisp-Entry "scalar3" definition #f 124 12 124 19 ("int" "object" "c-function")}
      {Lisp-Entry "ca" definition #f 186 12 186 14 ("2")}
      {Lisp-Entry "cb" definition #f 187 12 187 14 ("3")}
      {Lisp-Entry "e" c-enumeration #f 195 15 195 16 ("4" "ec" "2" "eb" "1" "ea")}
      {Lisp-Entry "S1" c-type #f 243 8 243 10 ("struct")}
      {Lisp-Entry "make-S1" definition #f 246 12 246 19 ("S1" "c-function")}
      {Lisp-Entry "struct1a" definition #f 251 12 251 20 ("int" "S1" "c-function")}
      {Lisp-Entry "struct1c" definition #f 257 12 257 20 ("int" "S1" "pointer" "c-function")}
      {Lisp-Entry "cast-S2->S2*" definition #f 268 12 268 24 ("error" "S2*" "object" "c-function" "S2" "foreign-tags" "car" "eq?" "if" "s2" "lambda")}
      {Lisp-Entry "mult*" c-type #f 305 8 305 13 ("int" "function" "pointer")}
      {Lisp-Entry "func1" definition #f 324 12 324 17 ("mult*" "c-function")}}})
"classes"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "classes.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.classes" unit #f 37 16 37 36 ()
      {Lisp-Entry "Definition-Declaration" define-class ("class") 45 19 45 46 ("%%set-definition-declaration-value" "%%get-definition-declaration-value" "value" "%%set-definition-declaration-signature" "%%get-definition-declaration-signature" "signature" "%%get-definition-declaration-expansion" "expansion" "allocate-definition-declaration" "jazz:allocate-definition-declaration" "Object-Class" "jazz:Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "Declaration" "jazz:Declaration")}
      {Lisp-Entry "Specialize" define-class ("class") 56 19 56 34 ("allocate-specialize" "jazz:allocate-specialize" "Object-Class" "jazz:Object-Class" "source" "type" "Expression" "jazz:Expression")}
      {Lisp-Entry "Generic-Declaration" define-class ("class") 65 19 65 43 ("%%set-generic-declaration-body" "%%get-generic-declaration-body" "body" "%%set-generic-declaration-signature" "%%get-generic-declaration-signature" "signature" "%%get-generic-declaration-dispatch-types" "dispatch-types" "allocate-generic-declaration" "jazz:allocate-generic-declaration" "Object-Class" "jazz:Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "Declaration" "jazz:Declaration")}
      {Lisp-Entry "Specific-Declaration" define-class ("class") 76 19 76 44 ("%%get-specific-declaration-root?" "root?" "%%set-specific-declaration-body" "%%get-specific-declaration-body" "body" "%%get-specific-declaration-signature" "signature" "%%get-specific-declaration-generic" "generic" "allocate-specific-declaration" "jazz:allocate-specific-declaration" "Object-Class" "jazz:Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "Declaration" "jazz:Declaration")}
      {Lisp-Entry "Category-Declaration" define-class ("class") 88 19 88 44 ("%%get-category-declaration-metaclass" "metaclass" "%%get-category-declaration-implementor" "implementor" "Object-Class" "jazz:Object-Class" "body" "children" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "Namespace-Declaration" "jazz:Namespace-Declaration")}
      {Lisp-Entry "Class-Declaration" define-class ("class") 98 19 98 41 ("%%get-class-declaration-interfaces" "interfaces" "%%get-class-declaration-ascendant-base" "ascendant-base" "%%get-class-declaration-ascendant-relation" "ascendant-relation" "%%get-class-declaration-ascendant" "ascendant" "allocate-class-declaration" "jazz:allocate-class-declaration" "Object-Class" "jazz:Object-Class" "metaclass" "implementor" "body" "children" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "Category-Declaration" "jazz:Category-Declaration")}
      {Lisp-Entry "Interface-Declaration" define-class ("class") 110 19 110 45 ("%%get-interface-declaration-ascendants" "ascendants" "allocate-interface-declaration" "jazz:allocate-interface-declaration" "Object-Class" "jazz:Object-Class" "metaclass" "implementor" "body" "children" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "Category-Declaration" "jazz:Category-Declaration")}
      {Lisp-Entry "Field-Declaration" define-class ("class") 119 19 119 41 ("Object-Class" "jazz:Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "Declaration" "jazz:Declaration")}
      {Lisp-Entry "Slot-Declaration" define-class ("class") 128 19 128 40 ("%%get-slot-declaration-setter-name" "setter-name" "%%get-slot-declaration-getter-name" "getter-name" "%%set-slot-declaration-initialize" "%%get-slot-declaration-initialize" "initialize" "allocate-slot-declaration" "jazz:allocate-slot-declaration" "Object-Class" "jazz:Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "Field-Declaration" "jazz:Field-Declaration")}
      {Lisp-Entry "Property-Declaration" define-class ("class") 139 19 139 44 ("%%set-property-declaration-setter" "%%get-property-declaration-setter" "setter" "%%set-property-declaration-getter" "%%get-property-declaration-getter" "getter" "allocate-property-declaration" "jazz:allocate-property-declaration" "Object-Class" "jazz:Object-Class" "setter-name" "getter-name" "initialize" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "Slot-Declaration" "jazz:Slot-Declaration")}
      {Lisp-Entry "Method-Declaration" define-class ("class") 149 19 149 42 ("%%set-method-declaration-body" "%%get-method-declaration-body" "body" "%%set-method-declaration-signature" "%%get-method-declaration-signature" "signature" "%%get-method-declaration-synchronized" "synchronized" "%%get-method-declaration-remote" "remote" "%%get-method-declaration-expansion" "expansion" "%%get-method-declaration-abstraction" "abstraction" "%%get-method-declaration-propagation" "propagation" "%%get-method-declaration-root" "root" "allocate-method-declaration" "jazz:allocate-method-declaration" "Object-Class" "jazz:Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "Field-Declaration" "jazz:Field-Declaration")}
      {Lisp-Entry "With-Self" define-class ("class") 165 19 165 33 ("%%get-with-self-body" "body" "allocate-with-self" "jazz:allocate-with-self" "Object-Class" "jazz:Object-Class" "source" "type" "Expression" "jazz:Expression")}
      {Lisp-Entry "With-Dynamic-Self" define-class ("class") 174 19 174 41 ("%%get-with-dynamic-self-body" "body" "%%get-with-dynamic-self-code" "code" "allocate-with-dynamic-self" "jazz:allocate-with-dynamic-self" "Object-Class" "jazz:Object-Class" "source" "type" "Expression" "jazz:Expression")}
      {Lisp-Entry "Cast" define-class ("class") 184 19 184 28 ("%%get-cast-expression" "expression" "allocate-cast" "jazz:allocate-cast" "Object-Class" "jazz:Object-Class" "source" "type" "Expression" "jazz:Expression")}
      {Lisp-Entry "Construct" define-class ("class") 193 19 193 33 ("%%get-construct-values" "values" "%%get-construct-class" "class" "allocate-construct" "jazz:allocate-construct" "Object-Class" "jazz:Object-Class" "source" "type" "Expression" "jazz:Expression")}
      {Lisp-Entry "Dispatch" define-class ("class") 203 19 203 32 ("%%get-dispatch-arguments" "arguments" "%%get-dispatch-name" "name" "allocate-dispatch" "jazz:allocate-dispatch" "Object-Class" "jazz:Object-Class" "source" "type" "Expression" "jazz:Expression")}
      {Lisp-Entry "Jazz-Dialect" define-class ("class") 213 19 213 36 ("allocate-jazz-dialect" "jazz:allocate-jazz-dialect" "Object-Class" "jazz:Object-Class" "bindings" "Dialect" "jazz:Dialect")}
      {Lisp-Entry "Jazz-Walker" define-class ("class") 222 19 222 35 ("allocate-jazz-walker" "jazz:allocate-jazz-walker" "Object-Class" "jazz:Object-Class" "autoloads" "references" "variables" "literals" "errors" "warnings" "Scheme-Walker" "jazz:Scheme-Walker")}}})
"common"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "performance" "common.scm"} 1299704435 scheme
    {Lisp-Entry "test.performance.common" unit #f 0 6 0 29 ("W" "Z" "X" "encapsulate-class" "jazz:encapsulate-class")
      {Lisp-Entry "require" anonymous #f 3 1 3 8 ("syntax" "phase" "test.performance.syntax")}
      {Lisp-Entry "ff" define #f 11 9 11 11 ("1" "%%fx-" "ff" "%%pair?" "begin" "0" "%%fx>" "if" "n")}
      {Lisp-Entry "gg" define #f 24 9 24 11 ("1" "%%fx-" "gg" "%%pair?" "begin" "0" "%%fx>" "if" "n")}
      {Lisp-Entry "f-module-block/standard/not-safe" define #f 42 9 42 41 ("1" "%%fx-" "g-module-block/standard/not-safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/standard/not-safe" define #f 48 9 48 41 ("1" "%%fx-" "f-module-block/standard/not-safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-block/runtime/safe" define #f 66 9 66 36 ("1" "%%fx-" "g-module-block/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/runtime/safe" define #f 72 9 72 36 ("1" "%%fx-" "f-module-block/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-separate/runtime/safe" define #f 90 9 90 39 ("1" "%%fx-" "g-module-separate/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-separate/runtime/safe" define #f 96 9 96 39 ("1" "%%fx-" "f-module-separate/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-block/runtime/notsafe" define #f 114 9 114 39 ("1" "%%fx-" "g-module-block/runtime/notsafe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/runtime/notsafe" define #f 120 9 120 39 ("1" "%%fx-" "f-module-block/runtime/notsafe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module" define #f 137 9 137 17 ("1" "%%fx-" "g-module" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module" define #f 143 9 143 17 ("1" "%%fx-" "f-module" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "X" define-class ("class") 160 19 160 20 ("allocate-x" "Object-Class" "jazz:Object-Class" "Object" "jazz:Object")}
      {Lisp-Entry "X" define-class ("class runtime") 163 27 163 28 ()}
      {Lisp-Entry "new-x" define #f 168 9 168 14 ("X" "allocate-x")}
      {Lisp-Entry "f-generic" generic/specific ("X") 172 22 172 31 ("n")}
      {Lisp-Entry "f-generic" generic/specific ("X") 174 23 174 32 ("1" "%%fx-" "x" "g-generic" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "g-generic" generic/specific ("X") 180 22 180 31 ("n")}
      {Lisp-Entry "g-generic" generic/specific ("X") 182 23 182 32 ("1" "%%fx-" "x" "f-generic" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "Z" define-class ("class runtime") 193 27 193 28 ()}
      {Lisp-Entry "f-vtable" generic/specific ("Z~virtual-runtime") 196 30 196 38 ("n")}
      {Lisp-Entry "g-vtable" generic/specific ("Z~virtual-runtime") 197 30 197 38 ("n")}
      {Lisp-Entry "new-z" define #f 200 9 200 14 ("Z" "allocate-z")}
      {Lisp-Entry "f-vtable" generic/specific ("Z") 204 21 204 29 ("1" "%%fx-" "z" "g-vtable" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "g-vtable" generic/specific ("Z") 210 21 210 29 ("1" "%%fx-" "z" "f-vtable" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "W" define-class ("class runtime") 219 27 219 28 ()}
      {Lisp-Entry "f-vtable" generic/specific ("W") 222 21 222 29 ("n")}
      {Lisp-Entry "h" generic/specific ("W~virtual-runtime") 226 30 226 31 ()}
      {Lisp-Entry "h" generic/specific ("W") 229 21 229 22 ()}}})
"continuation"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "continuation.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.continuation" unit #f 37 16 37 46 ()
      {Lisp-Entry "continuation?" define #f 45 13 45 31 ("%%continuation?" "obj")}
      {Lisp-Entry "continuation-capture" define #f 49 13 49 38 ("%%continuation-capture" "proc")}
      {Lisp-Entry "continuation-graft" define #f 53 13 53 36 ("%%continuation-graft" "proc" "cont")}
      {Lisp-Entry "continuation-return" define #f 57 12 57 36 ("continuation-return")}
      {Lisp-Entry "continuation-checkpoint" define #f 61 13 61 41 ("%%continuation-checkpoint" "after" "thunk" "before")}
      {Lisp-Entry "continuation-parent" define #f 65 13 65 37 ("%%continuation-parent" "cont")}
      {Lisp-Entry "continuation-creator" define #f 69 13 69 38 ("%%continuation-creator" "cont")}
      {Lisp-Entry "continuation-locat" define #f 73 13 73 36 ("%%continuation-locat" "cont")}
      {Lisp-Entry "continuation-next" define #f 77 13 77 35 ("%%continuation-next" "cont")}}})
"core"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "walker" "core.jazz"} 1299704435 jazz
    {Lisp-Entry "jazz.dialect.walker.core" module #f 37 18 37 42 ("jazz.dialect")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.dialect.language.object" "jazz.dialect.language.functional" "jazz.dialect.language.format" "jazz.dialect.language.exception" "jazz.dialect.kernel")}
      {Lisp-Entry "Walk-Binding" class #f 52 7 52 19 ("Type")}
      {Lisp-Entry "walk-binding-lookup" native ("native-syntax") 55 15 55 39 ()}
      {Lisp-Entry "walk-binding-referenced" native ("native-syntax") 56 15 56 43 ()}
      {Lisp-Entry "emit-binding-reference" native ("native-syntax") 57 15 57 42 ()}
      {Lisp-Entry "walk-binding-validate-call" native ("native-syntax") 58 15 58 46 ()}
      {Lisp-Entry "emit-binding-call" native ("native-syntax") 59 15 59 37 ()}
      {Lisp-Entry "emit-inlined-binding-call" native ("native-syntax") 60 15 60 45 ()}
      {Lisp-Entry "walk-binding-validate-assignment" native ("native-syntax") 61 15 61 52 ()}
      {Lisp-Entry "walk-binding-assignable?" native ("native-syntax") 62 15 62 44 ()}
      {Lisp-Entry "emit-binding-assignment" native ("native-syntax") 63 15 63 43 ()}
      {Lisp-Entry "walk-binding-walkable?" native ("native-syntax") 64 15 64 42 ()}
      {Lisp-Entry "walk-binding-walk-form" native ("native-syntax") 65 15 65 42 ()}
      {Lisp-Entry "walk-binding-expandable?" native ("native-syntax") 66 15 66 44 ()}
      {Lisp-Entry "walk-binding-expand-form" native ("native-syntax") 67 15 67 44 ()}
      {Lisp-Entry "Lexical-Binding" class #f 75 7 75 22 ("Walk-Binding")
        {Lisp-Entry "name" slot #f 78 8 78 12 ()}
        {Lisp-Entry "get-name" accessor #f 78 20 78 28 ()}
        {Lisp-Entry "type" slot #f 79 8 79 12 ()}
        {Lisp-Entry "get-type" accessor #f 79 20 79 28 ()}
        {Lisp-Entry "hits" slot #f 80 8 80 12 ()}
        {Lisp-Entry "get-hits" accessor #f 80 23 80 31 ()}
        {Lisp-Entry "set-hits" accessor #f 80 23 80 31 ()}
        {Lisp-Entry "print" method #f 83 20 83 25 ("get-name" "format" "lambda" "self" "print-unreadable" "detail" "output")}}
      {Lisp-Entry "resolve-binding" native ("native-syntax") 89 15 89 35 ()}
      {Lisp-Entry "Declaration" class #f 97 7 97 18 ("Lexical-Binding")
        {Lisp-Entry "access" slot #f 100 8 100 14 ()}
        {Lisp-Entry "get-access" accessor #f 100 29 100 37 ()}
        {Lisp-Entry "compatibility" slot #f 101 8 101 21 ()}
        {Lisp-Entry "get-compatibility" accessor #f 101 29 101 37 ()}
        {Lisp-Entry "attributes" slot #f 102 8 102 18 ()}
        {Lisp-Entry "get-attributes" accessor #f 102 29 102 37 ()}
        {Lisp-Entry "toplevel" slot #f 103 8 103 16 ()}
        {Lisp-Entry "get-toplevel" accessor #f 103 29 103 37 ()}
        {Lisp-Entry "parent" slot #f 104 8 104 14 ()}
        {Lisp-Entry "get-parent" accessor #f 104 29 104 37 ()}
        {Lisp-Entry "locator" slot #f 105 8 105 15 ()}
        {Lisp-Entry "get-locator" accessor #f 105 29 105 37 ()}
        {Lisp-Entry "source" slot #f 106 8 106 14 ()}
        {Lisp-Entry "get-source" accessor #f 106 29 106 37 ()}}
      {Lisp-Entry "lookup-declaration" native ("native-syntax") 109 15 109 38 ()}
      {Lisp-Entry "update-declaration" native ("native-syntax") 110 15 110 38 ()}
      {Lisp-Entry "get-declaration-inclusions" native ("native-syntax") 111 15 111 46 ()}
      {Lisp-Entry "emit-declaration" native ("native-syntax") 112 15 112 36 ()}
      {Lisp-Entry "expand-referenced-declaration" native ("native-syntax") 113 15 113 49 ()}
      {Lisp-Entry "fold-statement" native ("native-syntax") 114 15 114 34 ()}
      {Lisp-Entry "fold-declaration" native ("native-syntax") 115 15 115 36 ()}
      {Lisp-Entry "fold-expression" native ("native-syntax") 116 15 116 35 ()}
      {Lisp-Entry "private-access" native ("native-syntax") 117 15 117 34 ()}
      {Lisp-Entry "public-access" native ("native-syntax") 118 15 118 33 ()}
      {Lisp-Entry "protected-access" native ("native-syntax") 119 15 119 36 ()}
      {Lisp-Entry "Declaration-Reference" class #f 127 7 127 28 ("Object")
        {Lisp-Entry "name" slot #f 130 8 130 12 ()}
        {Lisp-Entry "get-name" accessor #f 130 27 130 35 ()}
        {Lisp-Entry "declaration" slot #f 131 8 131 19 ()}
        {Lisp-Entry "get-declaration" accessor #f 131 27 131 35 ()}}
      {Lisp-Entry "resolve-reference" native ("native-syntax") 134 15 134 37 ()}
      {Lisp-Entry "Module-Reference" class #f 142 7 142 23 ("Declaration-Reference")}
      {Lisp-Entry "Export-Reference" class #f 150 7 150 23 ("Declaration-Reference")
        {Lisp-Entry "module-reference" slot #f 153 8 153 24 ()}
        {Lisp-Entry "get-module-reference" accessor #f 153 32 153 40 ()}}
      {Lisp-Entry "Autoload-Reference" class #f 161 7 161 25 ("Export-Reference")}
      {Lisp-Entry "Unit-Declaration" class #f 169 7 169 23 ("Declaration")
        {Lisp-Entry "requires" slot #f 172 8 172 16 ()}
        {Lisp-Entry "get-requires" accessor #f 172 24 172 32 ()}}
      {Lisp-Entry "Namespace-Declaration" class #f 180 7 180 28 ("Declaration")
        {Lisp-Entry "lookups" slot #f 183 8 183 15 ()}
        {Lisp-Entry "get-lookups" accessor #f 183 24 183 32 ()}
        {Lisp-Entry "children" slot #f 184 8 184 16 ()}
        {Lisp-Entry "get-children" accessor #f 184 24 184 32 ()}
        {Lisp-Entry "body" slot #f 185 8 185 12 ()}
        {Lisp-Entry "get-body" accessor #f 185 24 185 32 ()}}
      {Lisp-Entry "%%get-access-lookup" native ("native-syntax") 188 15 188 34 ()}
      {Lisp-Entry "Module-Declaration" class #f 196 7 196 25 ("Namespace-Declaration")
        {Lisp-Entry "walker" slot #f 199 8 199 14 ()}
        {Lisp-Entry "get-walker" accessor #f 199 31 199 39 ()}
        {Lisp-Entry "dialect-name" slot #f 200 8 200 20 ()}
        {Lisp-Entry "get-dialect-name" accessor #f 200 31 200 39 ()}
        {Lisp-Entry "dialect-invoice" slot #f 201 8 201 23 ()}
        {Lisp-Entry "get-dialect-invoice" accessor #f 201 31 201 39 ()}
        {Lisp-Entry "requires" slot #f 202 8 202 16 ()}
        {Lisp-Entry "get-requires" accessor #f 202 31 202 39 ()}
        {Lisp-Entry "exports" slot #f 203 8 203 15 ()}
        {Lisp-Entry "get-exports" accessor #f 203 31 203 39 ()}
        {Lisp-Entry "imports" slot #f 204 8 204 15 ()}
        {Lisp-Entry "get-imports" accessor #f 204 31 204 39 ()}
        {Lisp-Entry "proclaims" slot #f 205 8 205 17 ()}
        {Lisp-Entry "get-proclaims" accessor #f 205 31 205 39 ()}
        {Lisp-Entry "inclusions" slot #f 206 8 206 18 ()}
        {Lisp-Entry "get-inclusions" accessor #f 206 31 206 39 ()}
        {Lisp-Entry "local-macros" slot #f 207 8 207 20 ()}
        {Lisp-Entry "get-local-macros" accessor #f 207 31 207 39 ()}}
      {Lisp-Entry "Module-Invoice" class #f 215 7 215 21 ("Object")
        {Lisp-Entry "name" slot #f 218 8 218 12 ()}
        {Lisp-Entry "get-name" accessor #f 218 23 218 31 ()}
        {Lisp-Entry "module" slot #f 219 8 219 14 ()}
        {Lisp-Entry "get-module" accessor #f 219 23 219 31 ()}
        {Lisp-Entry "phase" slot #f 220 8 220 13 ()}
        {Lisp-Entry "get-phase" accessor #f 220 23 220 31 ()}
        {Lisp-Entry "version" slot #f 221 8 221 15 ()}
        {Lisp-Entry "get-version" accessor #f 221 23 221 31 ()}
        {Lisp-Entry "only" slot #f 222 8 222 12 ()}
        {Lisp-Entry "get-only" accessor #f 222 23 222 31 ()}
        {Lisp-Entry "except" slot #f 223 8 223 14 ()}
        {Lisp-Entry "get-except" accessor #f 223 23 223 31 ()}
        {Lisp-Entry "prefix" slot #f 224 8 224 14 ()}
        {Lisp-Entry "get-prefix" accessor #f 224 23 224 31 ()}
        {Lisp-Entry "rename" slot #f 225 8 225 14 ()}
        {Lisp-Entry "get-rename" accessor #f 225 23 225 31 ()}
        {Lisp-Entry "print" method #f 228 20 228 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "output")}}
      {Lisp-Entry "Export-Invoice" class #f 240 7 240 21 ("Module-Invoice")
        {Lisp-Entry "autoload" slot #f 243 8 243 16 ()}
        {Lisp-Entry "get-autoload" accessor #f 243 24 243 32 ()}}
      {Lisp-Entry "Import-Invoice" class #f 251 7 251 21 ("Module-Invoice")
        {Lisp-Entry "hit?" slot #f 254 8 254 12 ()}
        {Lisp-Entry "get-hit?" accessor #f 254 20 254 28 ()}}
      {Lisp-Entry "Export-Declaration" class #f 262 7 262 25 ("Declaration")
        {Lisp-Entry "symbol" slot #f 265 8 265 14 ()}
        {Lisp-Entry "get-symbol" accessor #f 265 22 265 30 ()}}
      {Lisp-Entry "Export-Syntax-Declaration" class #f 273 7 273 32 ("Declaration")
        {Lisp-Entry "symbol" slot #f 276 8 276 14 ()}
        {Lisp-Entry "get-symbol" accessor #f 276 22 276 30 ()}}
      {Lisp-Entry "Autoload-Declaration" class #f 284 7 284 27 ("Declaration")
        {Lisp-Entry "module" slot #f 287 8 287 14 ()}
        {Lisp-Entry "get-module" accessor #f 287 31 287 39 ()}
        {Lisp-Entry "exported-module" slot #f 288 8 288 23 ()}
        {Lisp-Entry "get-exported-module" accessor #f 288 31 288 39 ()}
        {Lisp-Entry "declaration" slot #f 289 8 289 19 ()}
        {Lisp-Entry "get-declaration" accessor #f 289 31 289 39 ()}}
      {Lisp-Entry "*print-literal*" definition #f 297 19 297 34 ("make-parameter")}
      {Lisp-Entry "Literal" class #f 301 7 301 14 ("Object")
        {Lisp-Entry "name" slot #f 304 8 304 12 ()}
        {Lisp-Entry "get-name" accessor #f 304 25 304 33 ()}
        {Lisp-Entry "arguments" slot #f 305 8 305 17 ()}
        {Lisp-Entry "get-arguments" accessor #f 305 25 305 33 ()}
        {Lisp-Entry "print" method #f 308 20 308 25 ("lambda" "self" "print-unreadable" "arguments" "not-null?" "name" "format" "*print-literal*" "if" "readably" "output")}
        {Lisp-Entry "walk-references" method #f 317 20 317 35 ("arguments" "name" "source-code" "walk-literal" "proc")}}
      {Lisp-Entry "new-literal" native ("native") 321 8 321 24 ()}
      {Lisp-Entry "Macro-Declaration" class #f 329 7 329 24 ("Declaration")
        {Lisp-Entry "signature" slot #f 332 8 332 17 ()}
        {Lisp-Entry "get-signature" accessor #f 332 25 332 33 ()}
        {Lisp-Entry "body" slot #f 333 8 333 12 ()}
        {Lisp-Entry "get-body" accessor #f 333 25 333 33 ()}}
      {Lisp-Entry "Syntax-Declaration" class #f 341 7 341 25 ("Declaration")
        {Lisp-Entry "signature" slot #f 344 8 344 17 ()}
        {Lisp-Entry "get-signature" accessor #f 344 25 344 33 ()}
        {Lisp-Entry "body" slot #f 345 8 345 12 ()}
        {Lisp-Entry "get-body" accessor #f 345 25 345 33 ()}}
      {Lisp-Entry "Define-Syntax-Declaration" class #f 353 7 353 32 ("Syntax-Declaration")}
      {Lisp-Entry "Define-Local-Syntax-Declaration" class #f 361 7 361 38 ("Syntax-Declaration")}
      {Lisp-Entry "Opt-Type" class #f 369 7 369 15 ("Type")
        {Lisp-Entry "type" slot #f 372 8 372 12 ()}
        {Lisp-Entry "get-type" accessor #f 372 20 372 28 ()}}
      {Lisp-Entry "Key-Type" class #f 380 7 380 15 ("Type")
        {Lisp-Entry "key" slot #f 383 8 383 11 ()}
        {Lisp-Entry "get-key" accessor #f 383 20 383 28 ()}
        {Lisp-Entry "type" slot #f 384 8 384 12 ()}
        {Lisp-Entry "get-type" accessor #f 384 20 384 28 ()}}
      {Lisp-Entry "Rest-Type" class #f 392 7 392 16 ("Type")
        {Lisp-Entry "type" slot #f 395 8 395 12 ()}
        {Lisp-Entry "get-type" accessor #f 395 20 395 28 ()}}
      {Lisp-Entry "Function-Type" class #f 403 7 403 20 ("Type")
        {Lisp-Entry "mandatory" slot #f 406 8 406 17 ()}
        {Lisp-Entry "get-mandatory" accessor #f 406 26 406 34 ()}
        {Lisp-Entry "positional" slot #f 407 8 407 18 ()}
        {Lisp-Entry "get-positional" accessor #f 407 26 407 34 ()}
        {Lisp-Entry "optional" slot #f 408 8 408 16 ()}
        {Lisp-Entry "get-optional" accessor #f 408 26 408 34 ()}
        {Lisp-Entry "named" slot #f 409 8 409 13 ()}
        {Lisp-Entry "get-named" accessor #f 409 26 409 34 ()}
        {Lisp-Entry "rest" slot #f 410 8 410 12 ()}
        {Lisp-Entry "get-rest" accessor #f 410 26 410 34 ()}
        {Lisp-Entry "result" slot #f 411 8 411 14 ()}
        {Lisp-Entry "get-result" accessor #f 411 26 411 34 ()}}
      {Lisp-Entry "Category-Type" class #f 419 7 419 20 ("Type")
        {Lisp-Entry "declaration" slot #f 422 8 422 19 ()}
        {Lisp-Entry "get-declaration" accessor #f 422 27 422 35 ()}}
      {Lisp-Entry "Values-Type" class #f 430 7 430 18 ("Type")
        {Lisp-Entry "types" slot #f 433 8 433 13 ()}
        {Lisp-Entry "get-types" accessor #f 433 21 433 29 ()}}
      {Lisp-Entry "Restriction-Type" class #f 441 7 441 23 ("Type")
        {Lisp-Entry "base" slot #f 444 8 444 12 ()}
        {Lisp-Entry "get-base" accessor #f 444 20 444 28 ()}
        {Lisp-Entry "type" slot #f 445 8 445 12 ()}
        {Lisp-Entry "get-type" accessor #f 445 20 445 28 ()}}
      {Lisp-Entry "Complement-Type" class #f 453 7 453 22 ("Type")
        {Lisp-Entry "type" slot #f 456 8 456 12 ()}
        {Lisp-Entry "get-type" accessor #f 456 20 456 28 ()}}
      {Lisp-Entry "Union-Type" class #f 464 7 464 17 ("Type")
        {Lisp-Entry "types" slot #f 467 8 467 13 ()}
        {Lisp-Entry "get-types" accessor #f 467 21 467 29 ()}}
      {Lisp-Entry "Template-Type" class #f 475 7 475 20 ("Type")
        {Lisp-Entry "class" slot #f 478 8 478 13 ()}
        {Lisp-Entry "get-class" accessor #f 478 21 478 29 ()}
        {Lisp-Entry "types" slot #f 479 8 479 13 ()}
        {Lisp-Entry "get-types" accessor #f 479 21 479 29 ()}}
      {Lisp-Entry "Nillable-Type" class #f 487 7 487 20 ("Type")
        {Lisp-Entry "type" slot #f 490 8 490 12 ()}
        {Lisp-Entry "get-type" accessor #f 490 20 490 28 ()}}
      {Lisp-Entry "C-Type-Declaration" class #f 498 7 498 25 ("Declaration")
        {Lisp-Entry "kind" slot #f 501 8 501 12 ()}
        {Lisp-Entry "get-kind" accessor #f 501 29 501 37 ()}
        {Lisp-Entry "expansion" slot #f 502 8 502 17 ()}
        {Lisp-Entry "get-expansion" accessor #f 502 29 502 37 ()}
        {Lisp-Entry "base-type" slot #f 503 8 503 17 ()}
        {Lisp-Entry "get-base-type" accessor #f 503 29 503 37 ()}
        {Lisp-Entry "pointer-types" slot #f 504 8 504 21 ()}
        {Lisp-Entry "get-pointer-types" accessor #f 504 29 504 37 ()}
        {Lisp-Entry "inclusions" slot #f 505 8 505 18 ()}
        {Lisp-Entry "get-inclusions" accessor #f 505 29 505 37 ()}
        {Lisp-Entry "c-to-scheme" slot #f 506 8 506 19 ()}
        {Lisp-Entry "get-c-to-scheme" accessor #f 506 29 506 37 ()}
        {Lisp-Entry "scheme-to-c" slot #f 507 8 507 19 ()}
        {Lisp-Entry "get-scheme-to-c" accessor #f 507 29 507 37 ()}
        {Lisp-Entry "declare" slot #f 508 8 508 15 ()}
        {Lisp-Entry "get-declare" accessor #f 508 29 508 37 ()}}
      {Lisp-Entry "C-Definition-Declaration" class #f 516 7 516 31 ("Declaration")
        {Lisp-Entry "signature" slot #f 519 8 519 17 ()}
        {Lisp-Entry "get-signature" accessor #f 519 31 519 39 ()}
        {Lisp-Entry "parameter-types" slot #f 520 8 520 23 ()}
        {Lisp-Entry "get-parameter-types" accessor #f 520 31 520 39 ()}
        {Lisp-Entry "result-type" slot #f 521 8 521 19 ()}
        {Lisp-Entry "get-result-type" accessor #f 521 31 521 39 ()}
        {Lisp-Entry "c-name" slot #f 522 8 522 14 ()}
        {Lisp-Entry "get-c-name" accessor #f 522 31 522 39 ()}
        {Lisp-Entry "scope" slot #f 523 8 523 13 ()}
        {Lisp-Entry "get-scope" accessor #f 523 31 523 39 ()}
        {Lisp-Entry "body" slot #f 524 8 524 12 ()}
        {Lisp-Entry "get-body" accessor #f 524 31 524 39 ()}}
      {Lisp-Entry "Dialect" class #f 532 7 532 14 ("Object")
        {Lisp-Entry "bindings" slot #f 535 8 535 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 535 24 535 32 ()}}
      {Lisp-Entry "Walker" class #f 543 7 543 13 ("Object")
        {Lisp-Entry "warnings" slot #f 546 8 546 16 ()}
        {Lisp-Entry "get-warnings" accessor #f 546 26 546 34 ()}
        {Lisp-Entry "errors" slot #f 547 8 547 14 ()}
        {Lisp-Entry "get-errors" accessor #f 547 26 547 34 ()}
        {Lisp-Entry "literals" slot #f 548 8 548 16 ()}
        {Lisp-Entry "get-literals" accessor #f 548 26 548 34 ()}
        {Lisp-Entry "variables" slot #f 549 8 549 17 ()}
        {Lisp-Entry "get-variables" accessor #f 549 26 549 34 ()}
        {Lisp-Entry "references" slot #f 550 8 550 18 ()}
        {Lisp-Entry "get-references" accessor #f 550 26 550 34 ()}
        {Lisp-Entry "autoloads" slot #f 551 8 551 17 ()}
        {Lisp-Entry "get-autoloads" accessor #f 551 26 551 34 ()}}
      {Lisp-Entry "walker-environment" native ("native-syntax") 554 15 554 38 ()}
      {Lisp-Entry "walk-declaration" native ("native-syntax") 555 15 555 36 ()}
      {Lisp-Entry "validate-access" native ("native-syntax") 556 15 556 35 ()}
      {Lisp-Entry "walk-free-reference" native ("native-syntax") 557 15 557 39 ()}
      {Lisp-Entry "walk-symbol-assignment" native ("native-syntax") 558 15 558 42 ()}
      {Lisp-Entry "walk-free-assignment" native ("native-syntax") 559 15 559 40 ()}
      {Lisp-Entry "walk-symbol" native ("native-syntax") 560 15 560 31 ()}
      {Lisp-Entry "walk-form" native ("native-syntax") 561 15 561 29 ()}
      {Lisp-Entry "validate-proclaim" native ("native-syntax") 562 15 562 37 ()}
      {Lisp-Entry "validate-arguments" native ("native-syntax") 563 15 563 38 ()}
      {Lisp-Entry "Walk-Context" class #f 571 7 571 19 ("Object")
        {Lisp-Entry "policy" slot #f 574 8 574 14 ()}
        {Lisp-Entry "get-policy" accessor #f 574 24 574 32 ()}
        {Lisp-Entry "locator" slot #f 575 8 575 15 ()}
        {Lisp-Entry "get-locator" accessor #f 575 24 575 32 ()}
        {Lisp-Entry "pathname" slot #f 576 8 576 16 ()}
        {Lisp-Entry "get-pathname" accessor #f 576 24 576 32 ()}}
      {Lisp-Entry "Walk-Location" class #f 584 15 584 28 ("Object")
        {Lisp-Entry "unit-locator" slot #f 587 8 587 20 ()}
        {Lisp-Entry "get-unit-locator" accessor #f 587 35 587 43 ()}
        {Lisp-Entry "declaration-locator" slot #f 588 8 588 27 ()}
        {Lisp-Entry "get-declaration-locator" accessor #f 588 35 588 43 ()}
        {Lisp-Entry "locat" slot #f 589 8 589 13 ()}
        {Lisp-Entry "get-locat" accessor #f 589 35 589 43 ()}
        {Lisp-Entry "path" slot #f 590 8 590 12 ()}
        {Lisp-Entry "get-path" accessor #f 590 35 590 43 ()}
        {Lisp-Entry "initialize" method #f 593 20 593 30 ("path~self" "locat~self" "declaration-locator~self" "self" "unit-locator~self" "set!" "nextmethod" "path" "locat" "declaration-locator" "unit-locator")}
        {Lisp-Entry "print" method #f 601 20 601 25 ("path" "locat" "declaration-locator" "unit-locator" "self" "class-of" "category-name" "format" "readably" "output")}}
      {Lisp-Entry "Walk-Problem" class #f 615 15 615 27 ("Error")
        {Lisp-Entry "location" slot #f 618 8 618 16 ()}
        {Lisp-Entry "get-location" accessor #f 618 24 618 32 ()}}
      {Lisp-Entry "Walk-Problems" class #f 626 15 626 28 ("Error")
        {Lisp-Entry "warnings" slot #f 629 8 629 16 ()}
        {Lisp-Entry "get-warnings" accessor #f 629 24 629 32 ()}
        {Lisp-Entry "errors" slot #f 630 8 630 14 ()}
        {Lisp-Entry "get-errors" accessor #f 630 24 630 32 ()}}
      {Lisp-Entry "Walk-Warning" class #f 638 15 638 27 ("Walk-Problem")}
      {Lisp-Entry "Walk-Error" class #f 646 15 646 25 ("Walk-Problem")}
      {Lisp-Entry "Unresolved-Error" class #f 654 15 654 31 ("Walk-Error")
        {Lisp-Entry "symbol" slot #f 657 8 657 14 ()}
        {Lisp-Entry "get-symbol" accessor #f 657 22 657 30 ()}}
      {Lisp-Entry "Walk-Frame" class #f 665 7 665 17 ("Walk-Binding")
        {Lisp-Entry "bindings" slot #f 668 8 668 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 668 24 668 32 ()}}
      {Lisp-Entry "Signature" class #f 676 7 676 16 ("Object")
        {Lisp-Entry "mandatory" slot #f 679 8 679 17 ()}
        {Lisp-Entry "get-mandatory" accessor #f 679 26 679 34 ()}
        {Lisp-Entry "positional" slot #f 680 8 680 18 ()}
        {Lisp-Entry "get-positional" accessor #f 680 26 680 34 ()}
        {Lisp-Entry "optional" slot #f 681 8 681 16 ()}
        {Lisp-Entry "get-optional" accessor #f 681 26 681 34 ()}
        {Lisp-Entry "named" slot #f 682 8 682 13 ()}
        {Lisp-Entry "get-named" accessor #f 682 26 682 34 ()}
        {Lisp-Entry "rest" slot #f 683 8 683 12 ()}
        {Lisp-Entry "get-rest" accessor #f 683 26 683 34 ()}}
      {Lisp-Entry "Symbol-Binding" class #f 691 7 691 21 ("Lexical-Binding")
        {Lisp-Entry "gensym" slot #f 694 8 694 14 ()}
        {Lisp-Entry "get-gensym" accessor #f 694 22 694 30 ()}}
      {Lisp-Entry "Variable" class #f 702 7 702 15 ("Symbol-Binding")
        {Lisp-Entry "reference-count" slot #f 705 8 705 23 ()}
        {Lisp-Entry "get-reference-count" accessor #f 705 31 705 39 ()}}
      {Lisp-Entry "NextMethod-Variable" class #f 713 7 713 26 ("Variable")}
      {Lisp-Entry "Parameter" class #f 721 7 721 16 ("Variable")}
      {Lisp-Entry "Dynamic-Parameter" class #f 729 7 729 24 ("Parameter")
        {Lisp-Entry "class" slot #f 732 8 732 13 ()}
        {Lisp-Entry "get-class" accessor #f 732 21 732 29 ()}}
      {Lisp-Entry "Optional-Parameter" class #f 740 7 740 25 ("Parameter")
        {Lisp-Entry "default" slot #f 743 8 743 15 ()}
        {Lisp-Entry "get-default" accessor #f 743 23 743 31 ()}}
      {Lisp-Entry "Named-Parameter" class #f 751 7 751 22 ("Parameter")
        {Lisp-Entry "default" slot #f 754 8 754 15 ()}
        {Lisp-Entry "get-default" accessor #f 754 23 754 31 ()}}
      {Lisp-Entry "Rest-Parameter" class #f 762 7 762 21 ("Parameter")}
      {Lisp-Entry "Dynamic-Self-Binding" class #f 770 7 770 27 ("Lexical-Binding")
        {Lisp-Entry "code" slot #f 773 8 773 12 ()}
        {Lisp-Entry "get-code" accessor #f 773 20 773 28 ()}}
      {Lisp-Entry "Local-Variable-Binding" class #f 781 7 781 29 ("Lexical-Binding")
        {Lisp-Entry "variable" slot #f 784 8 784 16 ()}
        {Lisp-Entry "get-variable" accessor #f 784 24 784 32 ()}}
      {Lisp-Entry "Macro-Symbol" class #f 792 7 792 19 ("Symbol-Binding")
        {Lisp-Entry "getter" slot #f 795 8 795 14 ()}
        {Lisp-Entry "get-getter" accessor #f 795 22 795 30 ()}
        {Lisp-Entry "setter" slot #f 796 8 796 14 ()}
        {Lisp-Entry "get-setter" accessor #f 796 22 796 30 ()}}
      {Lisp-Entry "Form-Binding" class #f 804 7 804 19 ("Lexical-Binding")}
      {Lisp-Entry "Special-Form" class #f 812 7 812 19 ("Form-Binding")
        {Lisp-Entry "walk" slot #f 815 8 815 12 ()}
        {Lisp-Entry "get-walk" accessor #f 815 20 815 28 ()}}
      {Lisp-Entry "Macro-Form" class #f 823 7 823 17 ("Form-Binding")
        {Lisp-Entry "expander" slot #f 826 8 826 16 ()}
        {Lisp-Entry "get-expander" accessor #f 826 24 826 32 ()}}
      {Lisp-Entry "Syntax-Form" class #f 834 7 834 18 ("Form-Binding")
        {Lisp-Entry "expander" slot #f 837 8 837 16 ()}
        {Lisp-Entry "get-expander" accessor #f 837 24 837 32 ()}}
      {Lisp-Entry "Define-Syntax-Form" class #f 845 7 845 25 ("Syntax-Form")
        {Lisp-Entry "environment" slot #f 848 8 848 19 ()}
        {Lisp-Entry "get-environment" accessor #f 848 27 848 35 ()}}
      {Lisp-Entry "Define-Local-Syntax-Form" class #f 856 7 856 31 ("Syntax-Form")
        {Lisp-Entry "environment" slot #f 859 8 859 19 ()}
        {Lisp-Entry "get-environment" accessor #f 859 27 859 35 ()}}
      {Lisp-Entry "Syntactic-Closure" class #f 867 7 867 24 ("Object")
        {Lisp-Entry "environment" slot #f 870 8 870 19 ()}
        {Lisp-Entry "get-environment" accessor #f 870 27 870 35 ()}
        {Lisp-Entry "variables" slot #f 871 8 871 17 ()}
        {Lisp-Entry "get-variables" accessor #f 871 27 871 35 ()}
        {Lisp-Entry "form" slot #f 872 8 872 12 ()}
        {Lisp-Entry "get-form" accessor #f 872 27 872 35 ()}}
      {Lisp-Entry "Annotated-Variable" class #f 880 7 880 25 ("Object")
        {Lisp-Entry "variable" slot #f 883 8 883 16 ()}
        {Lisp-Entry "get-variable" accessor #f 883 29 883 37 ()}
        {Lisp-Entry "declared-type" slot #f 884 8 884 21 ()}
        {Lisp-Entry "get-declared-type" accessor #f 884 29 884 37 ()}
        {Lisp-Entry "type" slot #f 885 8 885 12 ()}
        {Lisp-Entry "get-type" accessor #f 885 29 885 37 ()}}
      {Lisp-Entry "Restricted-Binding" class #f 893 7 893 25 ("Object")
        {Lisp-Entry "binding" slot #f 896 8 896 15 ()}
        {Lisp-Entry "get-binding" accessor #f 896 23 896 31 ()}
        {Lisp-Entry "type" slot #f 897 8 897 12 ()}
        {Lisp-Entry "get-type" accessor #f 897 23 897 31 ()}}
      {Lisp-Entry "Annotated-Frame" class #f 905 7 905 22 ("Object")
        {Lisp-Entry "variables" slot #f 908 8 908 17 ()}
        {Lisp-Entry "get-variables" accessor #f 908 25 908 33 ()}
        {Lisp-Entry "reset" slot #f 909 8 909 13 ()}
        {Lisp-Entry "get-reset" accessor #f 909 25 909 33 ()}}
      {Lisp-Entry "Code" class #f 917 7 917 11 ("Object")
        {Lisp-Entry "form" slot #f 920 8 920 12 ()}
        {Lisp-Entry "get-form" accessor #f 920 22 920 30 ()}
        {Lisp-Entry "type" slot #f 921 8 921 12 ()}
        {Lisp-Entry "get-type" accessor #f 921 22 921 30 ()}
        {Lisp-Entry "source" slot #f 922 8 922 14 ()}
        {Lisp-Entry "get-source" accessor #f 922 22 922 30 ()}}
      {Lisp-Entry "Access" class #f 930 7 930 13 ("Object")
        {Lisp-Entry "name" slot #f 933 8 933 12 ()}
        {Lisp-Entry "get-name" accessor #f 933 23 933 31 ()}
        {Lisp-Entry "context" slot #f 934 8 934 15 ()}
        {Lisp-Entry "get-context" accessor #f 934 23 934 31 ()}}
      {Lisp-Entry "Expression" class #f 942 7 942 17 ("Object")
        {Lisp-Entry "type" slot #f 945 8 945 12 ()}
        {Lisp-Entry "get-type" accessor #f 945 22 945 30 ()}
        {Lisp-Entry "source" slot #f 946 8 946 14 ()}
        {Lisp-Entry "get-source" accessor #f 946 22 946 30 ()}}
      {Lisp-Entry "emit-expression" native ("native-syntax") 949 15 949 35 ()}
      {Lisp-Entry "emit-call" native ("native-syntax") 950 15 950 29 ()}
      {Lisp-Entry "fold-expression" native ("native-syntax") 951 15 951 35 ()}
      {Lisp-Entry "Proclaim" class #f 959 7 959 15 ("Expression")
        {Lisp-Entry "clauses" slot #f 962 8 962 15 ()}
        {Lisp-Entry "get-clauses" accessor #f 962 23 962 31 ()}}
      {Lisp-Entry "Constant" class #f 970 7 970 15 ("Expression")
        {Lisp-Entry "expansion" slot #f 973 8 973 17 ()}
        {Lisp-Entry "get-expansion" accessor #f 973 25 973 33 ()}}
      {Lisp-Entry "Delay" class #f 981 7 981 12 ("Expression")
        {Lisp-Entry "expression" slot #f 984 8 984 18 ()}
        {Lisp-Entry "get-expression" accessor #f 984 26 984 34 ()}}
      {Lisp-Entry "Quasiquote" class #f 992 7 992 17 ("Expression")
        {Lisp-Entry "form" slot #f 995 8 995 12 ()}
        {Lisp-Entry "get-form" accessor #f 995 20 995 28 ()}}
      {Lisp-Entry "Binding-Reference" class #f 1003 7 1003 24 ("Expression")
        {Lisp-Entry "binding" slot #f 1006 8 1006 15 ()}
        {Lisp-Entry "get-binding" accessor #f 1006 23 1006 31 ()}
        {Lisp-Entry "print" method #f 1009 20 1009 25 ("binding" "format" "lambda" "self" "print-unreadable" "readably" "output")}}
      {Lisp-Entry "Assignment" class #f 1021 7 1021 17 ("Expression")
        {Lisp-Entry "binding" slot #f 1024 8 1024 15 ()}
        {Lisp-Entry "get-binding" accessor #f 1024 23 1024 31 ()}
        {Lisp-Entry "value" slot #f 1025 8 1025 13 ()}
        {Lisp-Entry "get-value" accessor #f 1025 23 1025 31 ()}}
      {Lisp-Entry "Lambda" class #f 1033 7 1033 13 ("Expression")
        {Lisp-Entry "signature" slot #f 1036 8 1036 17 ()}
        {Lisp-Entry "get-signature" accessor #f 1036 25 1036 33 ()}
        {Lisp-Entry "body" slot #f 1037 8 1037 12 ()}
        {Lisp-Entry "get-body" accessor #f 1037 25 1037 33 ()}}
      {Lisp-Entry "Let" class #f 1045 7 1045 10 ("Expression")
        {Lisp-Entry "bindings" slot #f 1048 8 1048 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 1048 24 1048 32 ()}
        {Lisp-Entry "body" slot #f 1049 8 1049 12 ()}
        {Lisp-Entry "get-body" accessor #f 1049 24 1049 32 ()}}
      {Lisp-Entry "Named-Let" class #f 1057 7 1057 16 ("Let")
        {Lisp-Entry "variable" slot #f 1060 8 1060 16 ()}
        {Lisp-Entry "get-variable" accessor #f 1060 24 1060 32 ()}}
      {Lisp-Entry "Letstar" class #f 1068 7 1068 14 ("Expression")
        {Lisp-Entry "bindings" slot #f 1071 8 1071 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 1071 24 1071 32 ()}
        {Lisp-Entry "body" slot #f 1072 8 1072 12 ()}
        {Lisp-Entry "get-body" accessor #f 1072 24 1072 32 ()}}
      {Lisp-Entry "Letrec" class #f 1080 7 1080 13 ("Expression")
        {Lisp-Entry "bindings" slot #f 1083 8 1083 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 1083 24 1083 32 ()}
        {Lisp-Entry "body" slot #f 1084 8 1084 12 ()}
        {Lisp-Entry "get-body" accessor #f 1084 24 1084 32 ()}}
      {Lisp-Entry "Receive" class #f 1092 7 1092 14 ("Expression")
        {Lisp-Entry "variables" slot #f 1095 8 1095 17 ()}
        {Lisp-Entry "get-variables" accessor #f 1095 26 1095 34 ()}
        {Lisp-Entry "expression" slot #f 1096 8 1096 18 ()}
        {Lisp-Entry "get-expression" accessor #f 1096 26 1096 34 ()}
        {Lisp-Entry "body" slot #f 1097 8 1097 12 ()}
        {Lisp-Entry "get-body" accessor #f 1097 26 1097 34 ()}}
      {Lisp-Entry "Body" class #f 1105 7 1105 11 ("Expression")
        {Lisp-Entry "internal-defines" slot #f 1108 8 1108 24 ()}
        {Lisp-Entry "get-internal-defines" accessor #f 1108 32 1108 40 ()}
        {Lisp-Entry "expressions" slot #f 1109 8 1109 19 ()}
        {Lisp-Entry "get-expressions" accessor #f 1109 32 1109 40 ()}}
      {Lisp-Entry "Internal-Define" class #f 1117 7 1117 22 ("Expression")
        {Lisp-Entry "variable" slot #f 1120 8 1120 16 ()}
        {Lisp-Entry "get-variable" accessor #f 1120 24 1120 32 ()}
        {Lisp-Entry "value" slot #f 1121 8 1121 13 ()}
        {Lisp-Entry "get-value" accessor #f 1121 24 1121 32 ()}}
      {Lisp-Entry "Begin" class #f 1129 7 1129 12 ("Expression")
        {Lisp-Entry "expressions" slot #f 1132 8 1132 19 ()}
        {Lisp-Entry "get-expressions" accessor #f 1132 27 1132 35 ()}}
      {Lisp-Entry "Do" class #f 1140 7 1140 9 ("Expression")
        {Lisp-Entry "bindings" slot #f 1143 8 1143 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 1143 24 1143 32 ()}
        {Lisp-Entry "test" slot #f 1144 8 1144 12 ()}
        {Lisp-Entry "get-test" accessor #f 1144 24 1144 32 ()}
        {Lisp-Entry "result" slot #f 1145 8 1145 14 ()}
        {Lisp-Entry "get-result" accessor #f 1145 24 1145 32 ()}
        {Lisp-Entry "body" slot #f 1146 8 1146 12 ()}
        {Lisp-Entry "get-body" accessor #f 1146 24 1146 32 ()}}
      {Lisp-Entry "Call" class #f 1154 7 1154 11 ("Expression")
        {Lisp-Entry "operator" slot #f 1157 8 1157 16 ()}
        {Lisp-Entry "get-operator" accessor #f 1157 25 1157 33 ()}
        {Lisp-Entry "arguments" slot #f 1158 8 1158 17 ()}
        {Lisp-Entry "get-arguments" accessor #f 1158 25 1158 33 ()}}
      {Lisp-Entry "If" class #f 1166 7 1166 9 ("Expression")
        {Lisp-Entry "test" slot #f 1169 8 1169 12 ()}
        {Lisp-Entry "get-test" accessor #f 1169 20 1169 28 ()}
        {Lisp-Entry "yes" slot #f 1170 8 1170 11 ()}
        {Lisp-Entry "get-yes" accessor #f 1170 20 1170 28 ()}
        {Lisp-Entry "no" slot #f 1171 8 1171 10 ()}
        {Lisp-Entry "get-no" accessor #f 1171 20 1171 28 ()}}
      {Lisp-Entry "Cond" class #f 1179 7 1179 11 ("Expression")
        {Lisp-Entry "clauses" slot #f 1182 8 1182 15 ()}
        {Lisp-Entry "get-clauses" accessor #f 1182 23 1182 31 ()}}
      {Lisp-Entry "Case" class #f 1190 7 1190 11 ("Expression")
        {Lisp-Entry "target" slot #f 1193 8 1193 14 ()}
        {Lisp-Entry "get-target" accessor #f 1193 23 1193 31 ()}
        {Lisp-Entry "clauses" slot #f 1194 8 1194 15 ()}
        {Lisp-Entry "get-clauses" accessor #f 1194 23 1194 31 ()}}
      {Lisp-Entry "And" class #f 1202 7 1202 10 ("Expression")
        {Lisp-Entry "expressions" slot #f 1205 8 1205 19 ()}
        {Lisp-Entry "get-expressions" accessor #f 1205 27 1205 35 ()}}
      {Lisp-Entry "Or" class #f 1213 7 1213 9 ("Expression")
        {Lisp-Entry "expressions" slot #f 1216 8 1216 19 ()}
        {Lisp-Entry "get-expressions" accessor #f 1216 27 1216 35 ()}}
      {Lisp-Entry "Declare" class #f 1224 7 1224 14 ("Expression")
        {Lisp-Entry "declarations" slot #f 1227 8 1227 20 ()}
        {Lisp-Entry "get-declarations" accessor #f 1227 28 1227 36 ()}}
      {Lisp-Entry "C-Include" class #f 1235 7 1235 16 ("Expression")
        {Lisp-Entry "name" slot #f 1238 8 1238 12 ()}
        {Lisp-Entry "get-name" accessor #f 1238 20 1238 28 ()}}
      {Lisp-Entry "C-Declare" class #f 1246 7 1246 16 ("Expression")
        {Lisp-Entry "code" slot #f 1249 8 1249 12 ()}
        {Lisp-Entry "get-code" accessor #f 1249 20 1249 28 ()}}
      {Lisp-Entry "C-Named-Declare-Declaration" class #f 1257 7 1257 34 ("Declaration")
        {Lisp-Entry "code" slot #f 1260 8 1260 12 ()}
        {Lisp-Entry "get-code" accessor #f 1260 20 1260 28 ()}}
      {Lisp-Entry "C-Initialize" class #f 1268 7 1268 19 ("Expression")
        {Lisp-Entry "code" slot #f 1271 8 1271 12 ()}
        {Lisp-Entry "get-code" accessor #f 1271 20 1271 28 ()}}
      {Lisp-Entry "C-Function" class #f 1279 7 1279 17 ("Expression")
        {Lisp-Entry "expansion" slot #f 1282 8 1282 17 ()}
        {Lisp-Entry "get-expansion" accessor #f 1282 25 1282 33 ()}}
      {Lisp-Entry "Parameterize" class #f 1290 7 1290 19 ("Expression")
        {Lisp-Entry "bindings" slot #f 1293 8 1293 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 1293 24 1293 32 ()}
        {Lisp-Entry "body" slot #f 1294 8 1294 12 ()}
        {Lisp-Entry "get-body" accessor #f 1294 24 1294 32 ()}}
      {Lisp-Entry "Time-Special" class #f 1302 7 1302 19 ("Expression")
        {Lisp-Entry "expressions" slot #f 1305 8 1305 19 ()}
        {Lisp-Entry "get-expressions" accessor #f 1305 27 1305 35 ()}}
      {Lisp-Entry "Analysis-Data" class #f 1313 7 1313 20 ("Object")
        {Lisp-Entry "autoload-reference" slot #f 1316 8 1316 26 ()}
        {Lisp-Entry "get-autoload-reference" accessor #f 1316 38 1316 46 ()}
        {Lisp-Entry "declaration-references" slot #f 1317 8 1317 30 ()}
        {Lisp-Entry "get-declaration-references" accessor #f 1317 38 1317 46 ()}}
      {Lisp-Entry "Core-Dialect" class #f 1325 7 1325 19 ("Dialect")}
      {Lisp-Entry "Core-Walker" class #f 1333 7 1333 18 ("Walker")}}})
"debug"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "debug.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.debug" unit #f 37 16 37 39 ()
      {Lisp-Entry "inspect" define #f 41 9 41 16 ("serial->object" "jazz:serial->object" "integer?" "if" "inspect-object" "jazz:inspect-object" "obj")}
      {Lisp-Entry "run-loop" define #f 46 9 46 17 ("Process" "jazz.system.process.Process" "jazz.system.process.Process:Process:run-loop" "run-loop" "jazz.system.access" "jazz.system.access:get-process" "global-ref" "jazz:global-ref" "get-process" "let")}
      {Lisp-Entry "resume" define #f 53 9 53 15 ("Process" "jazz.system.process.Process" "jazz.system.process.Process:Process:resume-loop" "resume-loop" "jazz.system.access" "jazz.system.access:get-process" "global-ref" "jazz:global-ref" "get-process" "let")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "dialect" "language" "debug.jazz"} 1299704435 jazz
    {Lisp-Entry "jazz.dialect.language.debug" module #f 37 18 37 45 ("get-console-port" ":console" "register-printer" "jazz.dialect")
      {Lisp-Entry "proclaim" anonymous #f 40 1 40 9 ("optimizations" "warn")}
      {Lisp-Entry "import" anonymous #f 43 1 43 7 ("jazz.dialect.language.functional" "jazz.dialect.language.format" "jazz.dialect.kernel")}
      {Lisp-Entry "*console-port-getter*" definition #f 53 12 53 33 ()}
      {Lisp-Entry "set-console-port-getter" definition #f 57 20 57 43 ("*console-port-getter*" "set!" "getter")}
      {Lisp-Entry "get-console-port" definition #f 61 20 61 36 ("terminal-port" "*console-port-getter*" "not" "if")}
      {Lisp-Entry "console-input-port" definition #f 67 20 67 38 ("get-console-port")}
      {Lisp-Entry "console-output-port" definition #f 70 20 70 39 ("get-console-port")}
      {Lisp-Entry "force-console" definition #f 74 20 74 33 ("get-console-port" "force-output")}
      {Lisp-Entry "console" definition #f 86 20 86 27 ("format" "console-string" "rest")}
      {Lisp-Entry "console-string" definition #f 90 20 90 34 ("unspecified" "force-output" "format" "terminal-string" "not" "if" "console-output-port" "output" "let" "color" "color:" "string")}
      {Lisp-Entry "debug" definition #f 103 20 103 25 ("console" "apply" "lambda" "debug" "primordial-thread" "thread-execute" "rest")}
      {Lisp-Entry "debug-string" definition #f 109 20 109 32 ("console-string" "apply" "lambda" "debug-string" "primordial-thread" "thread-execute" "rest")}
      {Lisp-Entry "get-procedure-name" definition #f 120 20 120 38 ("procedure-name" "or" "if" "get-output-string" "write" "open-output-string" "output" "let" "present-anonymous" "define" "procedure")}
      {Lisp-Entry "get-continuation-name" definition #f 133 20 133 41 ("continuation-creator" "get-procedure-name" "cont")}
      {Lisp-Entry "continuation-stack" definition #f 137 20 137 38 ("get-continuation-dynamic-environment" "append" "else" "get-continuation-lexical-environment" "cons" "not" "cond" "get-continuation-name" "lambda" "get-continuation-stack" "stack" "let" "map" "variables" "package-variables" "list" "mutable?" "value" "bind" "variable" "package-variable" "reference-name" "symbol?" "and" "if" "name" "package-name" "define" "depth" "depth:" "identifiers?" "identifiers?:" "lexical-environment?" "lexical-environment?:" "dynamic-environment?" "dynamic-environment?:" "cont")}
      {Lisp-Entry "execution-stack" definition #f 163 20 163 35 ("continuation-stack" "cont" "lambda" "continuation-capture" "depth" "depth:" "identifiers?" "identifiers?:" "lexical-environment?" "lexical-environment?:" "dynamic-environment?" "dynamic-environment?:")}
      {Lisp-Entry "break" definition #f 174 20 174 25 ("break-internal" "jazz.debuggee" "module-ref" "apply" "rest")}
      {Lisp-Entry "inspect" definition #f 178 20 178 27 ("inspect-internal" "jazz.debuggee" "module-ref" "apply" "rest")}
      {Lisp-Entry "advise" definition #f 182 20 182 26 ("advise-internal" "jazz.debuggee" "module-ref" "apply" "rest")}
      {Lisp-Entry "unadvise" definition #f 185 20 185 28 ("unadvise-internal" "jazz.debuggee" "module-ref" "apply" "rest")}
      {Lisp-Entry "debug-advice" definition #f 189 20 189 32 ("debug-advice-internal" "jazz.debuggee" "module-ref" "apply" "rest")}
      {Lisp-Entry "count-advice" definition #f 193 20 193 32 ("count-advice-internal" "jazz.debuggee" "module-ref" "apply" "rest")}
      {Lisp-Entry "trace" definition #f 197 20 197 25 ("trace-internal" "jazz.debuggee" "module-ref" "apply" "rest")}
      {Lisp-Entry "untrace" definition #f 200 20 200 27 ("untrace-internal" "jazz.debuggee" "module-ref" "apply" "rest")}
      {Lisp-Entry "start-repl" definition #f 204 20 204 30 ("start-repl-internal" "jazz.debuggee" "module-ref" "apply" "rest")}}})
"declares"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "performance" "declares.scm"} 1288870741 scheme
    {Lisp-Entry "f-run-time-bindings/safe" define #f 3 9 3 33 ("car" "x")}
    {Lisp-Entry "f-not-run-time-bindings/safe" define #f 10 9 10 37 ("car" "x")}
    {Lisp-Entry "f-run-time-bindings/not-safe" define #f 17 9 17 37 ("car" "x")}
    {Lisp-Entry "f-not-run-time-bindings/not-safe" define #f 24 9 24 41 ("car" "x")}
    {Lisp-Entry "f-standard-bindings/not-run-time-bindings/not-safe" define #f 32 9 32 59 ("##pair?" "car" "x")}
    {Lisp-Entry "f-standard-bindings/run-time-bindings/not-safe" define #f 41 9 41 55 ("##pair?" "car" "x")}
    {Lisp-Entry "f-standard-bindings/extended-bindings/not-safe" define #f 50 9 50 55 ("##pair?" "car" "x")}
    {Lisp-Entry "f-block" define #f 57 9 57 16 ("g-block")}
    {Lisp-Entry "g-block" define #f 60 9 60 16 ("f-block")}
    {Lisp-Entry "f-separate" define #f 66 9 66 19 ("g-separate")}
    {Lisp-Entry "g-separate" define #f 69 9 69 19 ("f-separate")}})
"development"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "development.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.development" unit #f 37 16 37 45 ()
      {Lisp-Entry "define-global" define-macro ("macro") 45 20 45 38 ("set!" ",value" ",setter" ",getter" ",name" "define" "begin" "generate-symbol" "jazz:generate-symbol" "value" "setter" "%%symbol->string" "%%string-append" "%%string->symbol" "getter" "let" "name")}
      {Lisp-Entry "?" define-macro ("global") 63 20 63 21 ()}
      {Lisp-Entry "%" define-macro ("global") 64 20 64 21 ()}
      {Lisp-Entry "?a" define-macro ("global") 67 20 67 22 ()}
      {Lisp-Entry "?b" define-macro ("global") 68 20 68 22 ()}
      {Lisp-Entry "?c" define-macro ("global") 69 20 69 22 ()}
      {Lisp-Entry "?d" define-macro ("global") 70 20 70 22 ()}
      {Lisp-Entry "?e" define-macro ("global") 71 20 71 22 ()}
      {Lisp-Entry "?f" define-macro ("global") 72 20 72 22 ()}
      {Lisp-Entry "?g" define-macro ("global") 73 20 73 22 ()}
      {Lisp-Entry "?h" define-macro ("global") 74 20 74 22 ()}
      {Lisp-Entry "?i" define-macro ("global") 75 20 75 22 ()}
      {Lisp-Entry "?j" define-macro ("global") 76 20 76 22 ()}
      {Lisp-Entry "?k" define-macro ("global") 77 20 77 22 ()}
      {Lisp-Entry "?l" define-macro ("global") 78 20 78 22 ()}
      {Lisp-Entry "?m" define-macro ("global") 79 20 79 22 ()}
      {Lisp-Entry "?n" define-macro ("global") 80 20 80 22 ()}
      {Lisp-Entry "?o" define-macro ("global") 81 20 81 22 ()}
      {Lisp-Entry "?p" define-macro ("global") 82 20 82 22 ()}
      {Lisp-Entry "?q" define-macro ("global") 83 20 83 22 ()}
      {Lisp-Entry "?r" define-macro ("global") 84 20 84 22 ()}
      {Lisp-Entry "?s" define-macro ("global") 85 20 85 22 ()}
      {Lisp-Entry "?t" define-macro ("global") 86 20 86 22 ()}
      {Lisp-Entry "?u" define-macro ("global") 87 20 87 22 ()}
      {Lisp-Entry "?v" define-macro ("global") 88 20 88 22 ()}
      {Lisp-Entry "?w" define-macro ("global") 89 20 89 22 ()}
      {Lisp-Entry "?x" define-macro ("global") 90 20 90 22 ()}
      {Lisp-Entry "?y" define-macro ("global") 91 20 91 22 ()}
      {Lisp-Entry "?z" define-macro ("global") 92 20 92 22 ()}
      {Lisp-Entry "%a" define-macro ("global") 95 20 95 22 ()}
      {Lisp-Entry "%b" define-macro ("global") 96 20 96 22 ()}
      {Lisp-Entry "%c" define-macro ("global") 97 20 97 22 ()}
      {Lisp-Entry "%d" define-macro ("global") 98 20 98 22 ()}
      {Lisp-Entry "%e" define-macro ("global") 99 20 99 22 ()}
      {Lisp-Entry "%f" define-macro ("global") 100 20 100 22 ()}
      {Lisp-Entry "%g" define-macro ("global") 101 20 101 22 ()}
      {Lisp-Entry "%h" define-macro ("global") 102 20 102 22 ()}
      {Lisp-Entry "%i" define-macro ("global") 103 20 103 22 ()}
      {Lisp-Entry "%j" define-macro ("global") 104 20 104 22 ()}
      {Lisp-Entry "%k" define-macro ("global") 105 20 105 22 ()}
      {Lisp-Entry "%l" define-macro ("global") 106 20 106 22 ()}
      {Lisp-Entry "%m" define-macro ("global") 107 20 107 22 ()}
      {Lisp-Entry "%n" define-macro ("global") 108 20 108 22 ()}
      {Lisp-Entry "%o" define-macro ("global") 109 20 109 22 ()}
      {Lisp-Entry "%p" define-macro ("global") 110 20 110 22 ()}
      {Lisp-Entry "%q" define-macro ("global") 111 20 111 22 ()}
      {Lisp-Entry "%r" define-macro ("global") 112 20 112 22 ()}
      {Lisp-Entry "%s" define-macro ("global") 113 20 113 22 ()}
      {Lisp-Entry "%t" define-macro ("global") 114 20 114 22 ()}
      {Lisp-Entry "%u" define-macro ("global") 115 20 115 22 ()}
      {Lisp-Entry "%v" define-macro ("global") 116 20 116 22 ()}
      {Lisp-Entry "%w" define-macro ("global") 117 20 117 22 ()}
      {Lisp-Entry "%x" define-macro ("global") 118 20 118 22 ()}
      {Lisp-Entry "%y" define-macro ("global") 119 20 119 22 ()}
      {Lisp-Entry "%z" define-macro ("global") 120 20 120 22 ()}}}
  {Lisp-File-Entry {File :context "src" "jazz" "development.jazz"} 1292697265 jazz
    {Lisp-Entry "jazz.development" module #f 37 8 37 24 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.locale" "jazz.library" "jazz.jml" "jazz.io" "jazz.debuggee")}
      {Lisp-Entry "iter-list" definition #f 55 13 55 22 ("cdr" "iter-list" "car" "when" "proc" "lst")}
      {Lisp-Entry "iter-node" definition #f 61 13 61 22 ("get-children" "get-children~" "for-each" "iter" "define" "proc" "node")}
      {Lisp-Entry "iter" definition #f 69 13 69 17 ("iter-node" "JML-Node" "is?" "iter-list" "null/pair?" "cond" "proc" "obj")}
      {Lisp-Entry "foldl-list" definition #f 74 13 74 23 ("car" "cdr" "foldl-list" "not" "if" "s" "f" "x")}
      {Lisp-Entry "foldr-list" definition #f 80 13 80 23 ("cdr" "foldr-list" "car" "not" "if" "s" "f" "x")}
      {Lisp-Entry "foldl-node" definition #f 86 13 86 23 ("foldl-node" "c" "lambda" "get-children" "get-children~" "foldl" "s" "f" "x")}
      {Lisp-Entry "foldr-node" definition #f 93 13 93 23 ("s" "f" "x")}
      {Lisp-Entry "foldl-component" definition #f 97 13 97 28 ("foldl-component" "c" "lambda" "get-children" "get-children~" "foldl" "s" "f" "x")}
      {Lisp-Entry "foldr-component" definition #f 104 13 104 28 ("s" "f" "x")}
      {Lisp-Entry "foldl" definition #f 108 13 108 18 ("foldl-component" "Component" "foldl-node" "JML-Node" "is?" "foldl-list" "null/pair?" "cond" "s" "f" "x")}
      {Lisp-Entry "foldr" definition #f 114 13 114 18 ("foldr-component" "Component" "foldr-node" "JML-Node" "is?" "foldr-list" "null/pair?" "cond" "s" "f" "x")}
      {Lisp-Entry "iter-map" definition #f 120 13 120 21 ("get-output" "get-output~" "put" "put~" "x" "lambda" "iter" "List-Factory" "new" "fact" "let" "obj" "proc")}
      {Lisp-Entry "iter-linearize" definition #f 128 13 128 27 ("identity" "iter-map" "obj")}
      {Lisp-Entry "fold-map" definition #f 132 13 132 21 ("cons" "lst" "x" "lambda" "foldr" "obj" "proc")}
      {Lisp-Entry "foldl-map" definition #f 139 13 139 22 ("cons" "lst" "x" "lambda" "foldl" "obj" "proc")}
      {Lisp-Entry "fold-linearize" definition #f 146 13 146 27 ("identity" "fold-map" "obj")}
      {Lisp-Entry "fold" definition #f 150 20 150 24 ("fold-component" "Component" "fold-node" "JML-Node" "is?" "foldl-list" "null/pair?" "cond" "s" "f" "x")}
      {Lisp-Entry "fold-node" definition #f 156 13 156 22 ("get-children" "get-children~" "fold-node" "c" "lambda" "for-each" "ps" "let" "s" "f" "x")}
      {Lisp-Entry "fold-component" definition #f 164 13 164 27 ("get-children" "get-children~" "fold-component" "c" "lambda" "for-each" "ps" "let" "s" "f" "x")}
      {Lisp-Entry "component->jml" definition #f 172 20 172 34 ("component-self->jml" "p" "c" "lambda" "fold" "properties" "properties:" "x")}
      {Lisp-Entry "component-self->jml" definition #f 179 13 179 32 ("object->serial" "format" "serial" "read-property" "list" "property-field?" "when" "property" "lambda" "collect" "append" "apply" "get-name" "get-name~" "name" "class-of" "category-name" "JML-Element" "new" "size" "position" "or" "let" "properties" "properties:" "p" "c")}
      {Lisp-Entry "component-ascendants->jml" definition #f 191 13 191 38 ("find-toplevel" "if" "get-parent" "get-parent~" "parent" "let" "component-self->jml" "component->jml" "define" "properties" "properties:" "c")}
      {Lisp-Entry "pprint-component" definition #f 208 20 208 36 (":console" "component->jml" "pretty-print" "pretty-print~" "properties" "properties:" "x")}
      {Lisp-Entry "pprint-component-ascendants" definition #f 214 20 214 47 ("align-name?:" ":console" "component-ascendants->jml" "pretty-print" "pretty-print~" "properties" "properties:" "x")}
      {Lisp-Entry "ppd" definition #f 226 20 226 23 ("unspecified" "pprint-component" "properties" "properties:" "c")}
      {Lisp-Entry "ppa" definition #f 231 20 231 23 ("unspecified" "pprint-component-ascendants" "properties" "properties:" "c")}
      {Lisp-Entry "hex" definition #f 241 20 241 23 ("format" "n")}}})
"dialect"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "dialect.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.dialect" unit #f 37 16 37 36 ("Dispatch" "jazz:Dispatch" "Construct" "jazz:Construct" "Cast" "jazz:Cast" "With-Dynamic-Self" "jazz:With-Dynamic-Self" "With-Self" "jazz:With-Self" "jazz:new" "new2" "jazz:new2" "2" "new1" "jazz:new1" "1" "codes-forms" "jazz:codes-forms" "new0" "jazz:new0" "0" "%%length" "new-code" "jazz:new-code" "values-codes" "Autoload-Declaration" "jazz:Autoload-Declaration" "or" "%%get-reference-binding" "binding" "Binding-Reference" "jazz:Binding-Reference" "class-expression" "let" "new" "jazz.dialect.kernel:new" "%%eq?" "if" "declaration" "arguments-codes" "operator" "emit-primitive-new-call" "jazz:emit-primitive-new-call" "else" "%%car" "emit-specialized-class-of" "jazz:emit-specialized-class-of" "%%cdr" "%%null?" "%%pair?" "%%assert" "class-of" "jazz.dialect.kernel" "jazz.dialect.kernel:class-of" "case" "environment" "arguments" "locator" "emit-specialized-locator" "jazz:emit-specialized-locator" "Jazz-Walker" "jazz:Jazz-Walker" "Jazz-Dialect" "jazz:Jazz-Dialect" "Method-Declaration" "jazz:Method-Declaration" "Property-Declaration" "jazz:Property-Declaration" "Slot-Declaration" "jazz:Slot-Declaration" "Field-Declaration" "jazz:Field-Declaration" "Interface-Declaration" "jazz:Interface-Declaration" "%%get-class-declaration-ascendant" "%%not" "%%class-is?" "and" "type" "lambda" "object-declaration?" "jazz:object-declaration?" "set!" "Class-Declaration" "jazz:Class-Declaration" "Category-Declaration" "jazz:Category-Declaration" "Specific-Declaration" "jazz:Specific-Declaration" "Generic-Declaration" "jazz:Generic-Declaration" "Specialize" "jazz:Specialize" "encapsulate-class" "jazz:encapsulate-class" "Definition-Declaration" "jazz:Definition-Declaration")
      {Lisp-Entry "Definition-Declaration" define-class ("class runtime") 45 27 45 54 ()}
      {Lisp-Entry "new-definition-declaration" define #f 48 9 48 40 ("setup-declaration" "jazz:setup-declaration" "Definition-Declaration" "jazz:Definition-Declaration" "allocate-definition-declaration" "jazz:allocate-definition-declaration" "new-declaration" "let" "signature" "expansion" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "walk-binding-validate-call" generic/specific ("jazz:Definition-Declaration") 54 21 54 52 ("validate-arguments" "jazz:validate-arguments" "if" "declaration" "%%get-definition-declaration-signature" "signature" "let" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "emit-inlined-binding-call" generic/specific ("jazz:Definition-Declaration") 60 21 60 51 ("%%get-lexical-binding-name" "error" "jazz:error" "call-return-type" "jazz:call-return-type" "%%get-expression-source" "%%get-code-form" "sourcify-list" "jazz:sourcify-list" "%%get-signature-positional" "%%get-lexical-binding-type" "emit-type-cast" "jazz:emit-type-cast" "emit-binding-symbol" "jazz:emit-binding-symbol" "argument" "parameter" "map" "new-code" "jazz:new-code" "emit-expression" "jazz:emit-expression" "body-code" "%%cons" "augmented-environment" "frame" "lambda" "annotate-inlined-signature" "jazz:annotate-inlined-signature" "with-annotated-frame" "jazz:with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "only-positional?" "jazz:only-positional?" "%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "untyped-inline-definition?" "jazz:untyped-inline-definition?" "inline-definitions?" "jazz:inline-definitions?" "or" "inline" "%%get-definition-declaration-expansion" "%%eq?" "and" "Lambda" "jazz:Lambda" "%%class-is?" "if" "declaration" "%%get-definition-declaration-value" "value" "let" "environment" "source-declaration" "call" "arguments")}
      {Lisp-Entry "untyped-inline-definition?" define #f 92 9 92 40 ("%%get-lambda-signature" "%%get-signature-positional" "%%get-lexical-binding-type" "%%not" "parameter" "lambda" "every?" "jazz:every?" "value")}
      {Lisp-Entry "emit-declaration" generic/specific ("jazz:Definition-Declaration") 98 21 98 42 ("%%get-declaration-source" "new-definition" "jazz:new-definition" "add-field" "jazz:add-field" ",name" "register-definition" "jazz:register-definition" "Module-Declaration" "jazz:Module-Declaration" "%%is?" "if" "%%get-declaration-parent" "parent" "%%get-lexical-binding-name" "name" "%%get-lexical-binding-type" "emit-expression" "jazz:emit-expression" "emit-type-cast" "jazz:emit-type-cast" ",locator" "define" "begin" "sourcify-if" "jazz:sourcify-if" "%%get-definition-declaration-value" "value" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "emit-binding-reference" generic/specific ("jazz:Definition-Declaration") 113 21 113 48 ("Any" "jazz:Any" "%%get-lexical-binding-type" "or" "declaration" "%%get-declaration-locator" "new-code" "jazz:new-code" "environment" "source-declaration")}
      {Lisp-Entry "walk-binding-validate-assignment" generic/specific ("jazz:Definition-Declaration") 121 21 121 58 ("%%get-lexical-binding-name" "walk-error" "jazz:walk-error" "%%get-declaration-toplevel" "%%neq?" "%%when" "declaration" "nextmethod" "symbol-src" "source-declaration" "resume" "walker")}
      {Lisp-Entry "walk-binding-assignable?" generic/specific ("jazz:Definition-Declaration") 127 21 127 50 ()}
      {Lisp-Entry "emit-binding-assignment" generic/specific ("jazz:Definition-Declaration") 131 21 131 49 ("Any" "jazz:Any" "%%get-lexical-binding-type" "emit-expression" "jazz:emit-expression" "emit-type-cast" "jazz:emit-type-cast" ",locator" "set!" "new-code" "jazz:new-code" "declaration" "%%get-declaration-locator" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "fold-declaration" generic/specific ("jazz:Definition-Declaration") 139 21 139 42 ("%%get-definition-declaration-value" "fold-statement" "jazz:fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "Specialize" define-class ("class runtime") 153 27 153 42 ()}
      {Lisp-Entry "new-specialize" define #f 156 9 156 28 ("Specialize" "jazz:Specialize" "allocate-specialize" "jazz:allocate-specialize")}
      {Lisp-Entry "emit-expression" generic/specific ("jazz:Specialize") 160 21 160 41 ("Any" "jazz:Any" "begin" "new-code" "jazz:new-code" "environment" "declaration")}
      {Lisp-Entry "fold-expression" generic/specific ("jazz:Specialize") 167 21 167 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "Generic-Declaration" define-class ("class runtime") 179 27 179 51 ()}
      {Lisp-Entry "new-generic-declaration" define #f 182 9 182 37 ("setup-declaration" "jazz:setup-declaration" "Generic-Declaration" "jazz:Generic-Declaration" "allocate-generic-declaration" "jazz:allocate-generic-declaration" "new-declaration" "let" "signature" "dispatch-types" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "walk-binding-validate-call" generic/specific ("jazz:Generic-Declaration") 188 21 188 52 ("%%get-generic-declaration-signature" "declaration" "validate-arguments" "jazz:validate-arguments" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "emit-declaration" generic/specific ("jazz:Generic-Declaration") 192 21 192 42 ("%%get-declaration-source" "emit-expression" "jazz:emit-expression" "sourcified-form" "jazz:sourcified-form" "emit-signature" "jazz:emit-signature" "define-generic" "jazz:define-generic" "sourcify-if" "jazz:sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "annotate-signature" "jazz:annotate-signature" "with-annotated-frame" "jazz:with-annotated-frame" "%%get-generic-declaration-body" "body" "%%get-generic-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "generic-locator" "let" "environment")}
      {Lisp-Entry "emit-binding-reference" generic/specific ("jazz:Generic-Declaration") 205 21 205 48 ("Any" "jazz:Any" "declaration" "%%get-declaration-locator" "new-code" "jazz:new-code" "environment" "source-declaration")}
      {Lisp-Entry "fold-declaration" generic/specific ("jazz:Generic-Declaration") 212 21 212 42 ("%%get-generic-declaration-body" "fold-statement" "jazz:fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "Specific-Declaration" define-class ("class runtime") 226 27 226 52 ()}
      {Lisp-Entry "new-specific-declaration" define #f 229 9 229 38 ("setup-declaration" "jazz:setup-declaration" "Specific-Declaration" "jazz:Specific-Declaration" "allocate-specific-declaration" "jazz:allocate-specific-declaration" "new-declaration" "let" "root?" "signature" "generic" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "get-nextmethod-signature" generic/specific ("jazz:Specific-Declaration") 235 21 235 50 ("declaration" "%%get-specific-declaration-signature")}
      {Lisp-Entry "emit-declaration" generic/specific ("jazz:Specific-Declaration") 239 21 239 42 ("%%get-declaration-source" "emit-expression" "jazz:emit-expression" "sourcified-form" "jazz:sourcified-form" ",modifier" "emit-signature" "jazz:emit-signature" "define-specific" "jazz:define-specific" "sourcify-if" "jazz:sourcify-if" "child" "root" "%%get-specific-declaration-root?" "if" "modifier" "%%cons" "augmented-environment" "let" "frame" "lambda" "annotate-signature" "jazz:annotate-signature" "with-annotated-frame" "jazz:with-annotated-frame" "%%get-specific-declaration-body" "body" "%%get-specific-declaration-signature" "signature" "jazz:generic-object-locator" "generic-object-locator" "%%get-declaration-locator" "generic-locator" "declaration" "%%get-specific-declaration-generic" "generic-declaration" "let*" "environment")}
      {Lisp-Entry "fold-declaration" generic/specific ("jazz:Specific-Declaration") 255 21 255 42 ("%%get-specific-declaration-body" "fold-statement" "jazz:fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "Category-Declaration" define-class ("class runtime") 269 27 269 52 ()}
      {Lisp-Entry "emit-binding-reference" generic/specific ("jazz:Category-Declaration") 272 21 272 48 ("Category-Declaration" "jazz:Category-Declaration" "declaration" "%%get-declaration-locator" "new-code" "jazz:new-code" "environment" "source-declaration")}
      {Lisp-Entry "Class-Declaration" define-class ("class runtime") 287 27 287 49 ()}
      {Lisp-Entry "new-class-declaration" define #f 290 9 290 35 ("setup-declaration" "jazz:setup-declaration" "new-queue" "jazz:new-queue" "protected-access" "jazz:protected-access" "make-access-lookups" "jazz:make-access-lookups" "Class-Declaration" "jazz:Class-Declaration" "allocate-class-declaration" "jazz:allocate-class-declaration" "new-declaration" "let" "interfaces" "ascendant-base" "ascendant-relation" "ascendant" "metaclass" "implementor" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "setup-class-lookups" define #f 296 9 296 33 ("protected-access" "jazz:protected-access" "%%get-namespace-declaration-lookups" "%%vector-set!" "not-private" "public" "interface" "lambda" "for-each" "public-access" "jazz:public-access" "%%table-merge!" "%%get-declaration-toplevel" "%%eq?" "same-module?" "private-access" "jazz:private-access" "%%get-access-lookup" "private" "%%get-class-declaration-interfaces" "map" "interfaces" "%%get-class-declaration-ascendant" "ascendant" "Interface-Declaration" "jazz:Interface-Declaration" "interface-declaration" "resolve-interface" "Class-Declaration" "jazz:Class-Declaration" "%%is?" "%%assert" "resolve-binding" "jazz:resolve-binding" "let" "if" "decl" "resolve-class" "define" "class-declaration")}
      {Lisp-Entry "emit-binding-reference" generic/specific ("jazz:Class-Declaration") 343 21 343 48 ("Class-Declaration" "jazz:Class-Declaration" "%%get-category-declaration-metaclass" "or" "declaration" "%%get-declaration-locator" "new-code" "jazz:new-code" "environment" "source-declaration")}
      {Lisp-Entry "of-subtype?" generic/specific ("jazz:Class-Declaration") 351 21 351 37 ("%%get-class-declaration-ascendant" "%%eq?" "resolve-binding" "jazz:resolve-binding" "target-declaration" "%%not" "target" "iter" "let" "Class-Declaration" "jazz:Class-Declaration" "%%class-is?" "and" "declaration" "object-declaration?" "jazz:object-declaration?" "if" "subtype")}
      {Lisp-Entry "specifiable?" generic/specific ("jazz:Class-Declaration") 364 21 364 38 ()}
      {Lisp-Entry "emit-declaration" generic/specific ("jazz:Class-Declaration") 368 21 368 42 ("%%get-declaration-source" "emit-namespace-statements" "jazz:emit-namespace-statements" "register-module-entry" "jazz:register-module-entry" "%%get-declaration-toplevel" "toplevel-declaration" ",@interface-accesses" "%%list" ",metaclass-access" "new-class" "jazz:new-class" "global-ref" "jazz:global-ref" "global-bound?" "jazz:global-bound?" "lambda" "map" "interface-accesses" ",ascendant-access" "%%get-object-class" "Object-Class" "jazz:Object-Class" "metaclass-access" "emit-ascendant-access" "jazz:emit-ascendant-access" "%%get-category-declaration-metaclass" "metaclass-declaration" "remove-own-slots" "jazz:remove-own-slots" ",name" "set-core-class-redefined" "jazz:set-core-class-redefined" "%%get-class-level" ",level-locator" ",core-class-locator" ",locator" "define" "emit-binding-reference" "jazz:emit-binding-reference" "sourcified-form" "jazz:sourcified-form" "ascendant-access" "%%get-category-identifier" "core-class-locator" "validate-core-class" "jazz:validate-core-class" "%%symbol?" "%%not" "get-core-class" "jazz:get-core-class" "core-class" "core-class?" "jazz:core-class?" "if" "begin" "sourcify-if" "jazz:sourcify-if" "level" "compose-helper" "jazz:compose-helper" "level-locator" "%%get-namespace-declaration-body" "body" "%%get-class-declaration-interfaces" "interface-declarations" "%%get-class-declaration-ascendant" "ascendant-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let" "environment")}
      {Lisp-Entry "emit-ascendant-access" define #f 403 9 403 35 ("%%cdr" "%%get-object-class" "%%null?" "if" "rel" "rec" "else" "emit-binding-reference" "jazz:emit-binding-reference" "sourcified-form" "jazz:sourcified-form" "%%not" "cond" "%%get-class-declaration-ascendant-base" "ascendant-base" "%%get-class-declaration-ascendant-relation" "ascendant-relation" "%%get-class-declaration-ascendant" "ascendant" "let" "environment" "declaration")}
      {Lisp-Entry "find-class-declaration" define #f 421 9 421 36 ("%%get-declaration-parent" "else" "Class-Declaration" "jazz:Class-Declaration" "%%class-is?" "error" "jazz:error" "%%not" "cond" "decl" "iter" "let" "declaration")}
      {Lisp-Entry "validate-core-class" define #f 442 9 442 33 ("%%equal?" "%%get-namespace-declaration-body" "decl" "declaration-slot-names" "%%get-class-instance-slots" "%%get-field-name" "%%symbol?" "name/slot" "lambda" "map" "core-class-slot-names" "queue-list" "jazz:queue-list" "%%get-begin-expressions" "for-each" "Begin" "jazz:Begin" "enqueue" "jazz:enqueue" "Slot-Declaration" "jazz:Slot-Declaration" "%%is?" "cond" "obj" "process" "new-queue" "jazz:new-queue" "queue" "lst" "collect-slots" "validate-slots" "%%null?" "%%get-class-declaration-interfaces" "declaration-interfaces" "let" "validate-interfaces" "%%get-lexical-binding-name" "error" "jazz:error" "%%eq?" "%%when" "%%get-declaration-locator" "declaration-ascendant-name" "%%get-class-declaration-ascendant" "declaration-ascendant" "%%get-category-identifier" "reference-name" "jazz:reference-name" "%%not" "if" "core-class-ascendant-name" "%%get-class-ascendant" "core-class-ascendant" "let*" "validate-ascendant" "validate-category" "define" "declaration" "core-class")}
      {Lisp-Entry "Interface-Declaration" define-class ("class runtime") 486 27 486 53 ()}
      {Lisp-Entry "new-interface-declaration" define #f 489 9 489 39 ("setup-declaration" "jazz:setup-declaration" "new-queue" "jazz:new-queue" "protected-access" "jazz:protected-access" "make-access-lookups" "jazz:make-access-lookups" "Interface-Declaration" "jazz:Interface-Declaration" "allocate-interface-declaration" "jazz:allocate-interface-declaration" "new-declaration" "let" "ascendants" "metaclass" "implementor" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "setup-interface-lookups" define #f 495 9 495 37 ("protected-access" "jazz:protected-access" "%%get-namespace-declaration-lookups" "%%vector-set!" "public-access" "jazz:public-access" "%%table-merge!" "interface" "lambda" "for-each" "private-access" "jazz:private-access" "%%get-access-lookup" "private" "%%get-interface-declaration-ascendants" "map" "ascendants" "Interface-Declaration" "jazz:Interface-Declaration" "%%is?" "%%assert" "resolve-binding" "jazz:resolve-binding" "let" "if" "decl" "resolve-interface" "define" "interface-declaration")}
      {Lisp-Entry "of-subtype?" generic/specific ("jazz:Interface-Declaration") 528 21 528 37 ("subtype")}
      {Lisp-Entry "specifiable?" generic/specific ("jazz:Interface-Declaration") 533 21 533 38 ()}
      {Lisp-Entry "emit-declaration" generic/specific ("jazz:Interface-Declaration") 537 21 537 42 ("%%get-declaration-source" "emit-namespace-statements" "jazz:emit-namespace-statements" ",name" "register-module-entry" "jazz:register-module-entry" "%%get-declaration-toplevel" "toplevel-declaration" "let" "%%get-interface-rank" ",rank-locator" ",@ascendant-accesses" "%%list" ",metaclass-access" "new-interface" "jazz:new-interface" ",locator" "define" "begin" "sourcify-if" "jazz:sourcify-if" "%%get-namespace-declaration-body" "body" "lambda" "map" "ascendant-accesses" "emit-binding-reference" "jazz:emit-binding-reference" "sourcified-form" "jazz:sourcified-form" "Interface" "jazz:Interface" "%%not" "if" "metaclass-access" "%%get-category-declaration-metaclass" "metaclass-declaration" "%%get-interface-declaration-ascendants" "ascendant-declarations" "rank" "compose-helper" "jazz:compose-helper" "rank-locator" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "Field-Declaration" define-class ("class runtime") 566 27 566 49 ()}
      {Lisp-Entry "Slot-Declaration" define-class ("class runtime") 577 27 577 48 ()}
      {Lisp-Entry "new-slot-declaration" define #f 580 9 580 34 ("setup-declaration" "jazz:setup-declaration" "Slot-Declaration" "jazz:Slot-Declaration" "allocate-slot-declaration" "jazz:allocate-slot-declaration" "new-declaration" "let" "setter-name" "getter-name" "initialize" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "walk-binding-validate-call" generic/specific ("jazz:Slot-Declaration") 586 21 586 52 ("form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "emit-declaration" generic/specific ("jazz:Slot-Declaration") 590 21 590 42 ("%%get-declaration-source" "declaration-result" "jazz:declaration-result" "%%get-slot-offset" ",offset-locator" ",allocate?" ",name" ",class-locator" "add-slot" "jazz:add-slot" ",slot-locator" "emit-expression" "jazz:emit-expression" "sourcified-form" "jazz:sourcified-form" "self" ",initialize-locator" "define" "if" "begin" "sourcify-if" "jazz:sourcify-if" "offset" "offset-locator" "slot" "slot-locator" "compose-helper" "jazz:compose-helper" "initialize-locator" "%%not" "and" "initialize?" "%%get-slot-declaration-initialize" "initialize" "core-class?" "jazz:core-class?" "core?" "Void" "jazz:Void" "%%get-lexical-binding-type" "%%neq?" "allocate?" "class-locator" "%%get-declaration-parent" "class-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "emit-binding-reference" generic/specific ("jazz:Slot-Declaration") 616 21 616 48 ("error" "jazz:error" "find-annotated-type" "jazz:find-annotated-type" ",offset-locator" "sourcified-form" "jazz:sourcified-form" "%%object-ref" "new-code" "jazz:new-code" "offset" "declaration" "%%get-declaration-locator" "compose-helper" "jazz:compose-helper" "offset-locator" "if" "*self*" "jazz:*self*" "self" "let" "environment" "source-declaration")}
      {Lisp-Entry "walk-binding-assignable?" generic/specific ("jazz:Slot-Declaration") 627 21 627 50 ()}
      {Lisp-Entry "emit-binding-assignment" generic/specific ("jazz:Slot-Declaration") 631 21 631 49 ("error" "jazz:error" "Any" "jazz:Any" "emit-expression" "jazz:emit-expression" ",offset-locator" "sourcified-form" "jazz:sourcified-form" "%%object-set!" "new-code" "jazz:new-code" "offset" "declaration" "%%get-declaration-locator" "compose-helper" "jazz:compose-helper" "offset-locator" "if" "*self*" "jazz:*self*" "self" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "fold-declaration" generic/specific ("jazz:Slot-Declaration") 642 21 642 42 ("%%get-slot-declaration-initialize" "fold-statement" "jazz:fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "Property-Declaration" define-class ("class runtime") 656 27 656 52 ()}
      {Lisp-Entry "new-property-declaration" define #f 659 9 659 38 ("setup-declaration" "jazz:setup-declaration" "Property-Declaration" "jazz:Property-Declaration" "allocate-property-declaration" "jazz:allocate-property-declaration" "new-declaration" "let" "setter-name" "getter-name" "initialize" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "emit-declaration" generic/specific ("jazz:Property-Declaration") 665 21 665 42 ("%%get-declaration-source" "declaration-result" "jazz:declaration-result" "%%get-slot-offset" ",offset-locator" ",allocate?" ",name" ",class-locator" "add-property" "jazz:add-property" ",slot-locator" "emit-expression" "jazz:emit-expression" "sourcified-form" "jazz:sourcified-form" ",initialize-locator" "begin" "sourcify-if" "jazz:sourcify-if" "cddr" "cdadr" "self" "car" "cons" "pair?" "if" "expr" "fix-self" "define" "%%get-property-declaration-setter" "setter" "%%get-property-declaration-getter" "getter" "offset" "offset-locator" "slot" "slot-locator" "compose-helper" "jazz:compose-helper" "initialize-locator" "%%not" "and" "initialize?" "%%get-slot-declaration-initialize" "initialize" "core-class?" "jazz:core-class?" "core?" "Void" "jazz:Void" "%%get-lexical-binding-type" "%%neq?" "allocate?" "class-locator" "%%get-declaration-parent" "class-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "Method-Declaration" define-class ("class runtime") 708 27 708 50 ()}
      {Lisp-Entry "new-method-declaration" define #f 711 9 711 36 ("setup-declaration" "jazz:setup-declaration" "Method-Declaration" "jazz:Method-Declaration" "allocate-method-declaration" "jazz:allocate-method-declaration" "new-declaration" "let" "signature" "synchronized" "remote" "expansion" "abstraction" "propagation" "root" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "method-dispatch-info" define #f 717 9 717 34 ("error" "else" "interface" "Interface-Declaration" "jazz:Interface-Declaration" "class" "Class-Declaration" "jazz:Class-Declaration" "%%class-is?" "cond" "%%get-declaration-parent" "category-declaration" "or" "method-declaration" "root-method-declaration" "values" "final" "%%eq?" "%%not" "and" "if" "%%get-method-declaration-propagation" "propagation" "%%get-method-declaration-root" "root" "let" "declaration")}
      {Lisp-Entry "native-category?" define #f 733 9 733 30 ("primitive" "%%get-category-declaration-implementor" "%%neq?" "category-declaration")}
      {Lisp-Entry "emit-method-dispatch" define #f 737 9 737 34 ("%%get-lexical-binding-type" "call-return-type" "jazz:call-return-type" ",interface-rank-locator" "%%interface-dispatch" "interface-rank-locator" "interface" ",method-rank-locator" ",class-level-locator" "%%get-object-class" "%%class-dispatch" "native-category?" "jazz:native-category?" "if" "rank" "method-rank-locator" "level" "compose-helper" "jazz:compose-helper" "class-level-locator" "class" ",implementation-locator" ",object-cast" "class-of" "jazz:class-of" "%%final-dispatch" "%%get-declaration-locator" "implementation-locator" "final" "case" "new-code" "jazz:new-code" "emit-type-cast" "jazz:emit-type-cast" "object-cast" "%%get-declaration-parent" "category-declaration" "method-dispatch-info" "jazz:method-dispatch-info" "method-declaration" "dispatch-type" "receive" "%%get-lexical-binding-name" "name" "let" "environment" "source-declaration" "declaration" "object")}
      {Lisp-Entry "emit-binding-reference" generic/specific ("jazz:Method-Declaration") 763 21 763 48 ("%%get-declaration-locator" "%%get-lexical-binding-name" "error" "jazz:error" "%%get-code-type" "sourcified-form" "jazz:sourcified-form" "apply" "rest" "lambda" "new-code" "jazz:new-code" "declaration" "emit-method-dispatch" "jazz:emit-method-dispatch" "dispatch-code" "if" "*self*" "jazz:*self*" "self" "let" "environment" "source-declaration")}
      {Lisp-Entry "walk-binding-validate-call" generic/specific ("jazz:Method-Declaration") 775 21 775 52 ("validate-arguments" "jazz:validate-arguments" "if" "declaration" "%%get-method-declaration-signature" "signature" "let" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "emit-inlined-binding-call" generic/specific ("jazz:Method-Declaration") 781 21 781 51 ("else" "%%get-lexical-binding-name" "error" "jazz:error" "call-return-type" "jazz:call-return-type" "%%get-expression-source" "%%get-code-form" "desourcify-all" "jazz:desourcify-all" "sourcify-if" "jazz:sourcify-if" "%%get-signature-positional" "%%get-lexical-binding-type" "emit-type-cast" "jazz:emit-type-cast" "emit-binding-symbol" "jazz:emit-binding-symbol" "argument" "parameter" "map" "new-code" "jazz:new-code" "emit-expression" "jazz:emit-expression" "body-code" "%%cons" "augmented-environment" "frame" "lambda" "annotate-signature" "jazz:annotate-signature" "with-annotated-frame" "jazz:with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "only-positional?" "jazz:only-positional?" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "let" "final" "case" "method-dispatch-info" "jazz:method-dispatch-info" "method-declaration" "dispatch-type" "receive" "inline" "declaration" "%%get-method-declaration-expansion" "%%eq?" "if" "environment" "source-declaration" "call" "arguments")}
      {Lisp-Entry "emit-binding-call" generic/specific ("jazz:Method-Declaration") 811 21 811 43 ("%%get-declaration-locator" "%%get-lexical-binding-name" "error" "jazz:error" "%%get-code-type" ",@arguments" "sourcified-form" "jazz:sourcified-form" "new-code" "jazz:new-code" "emit-method-dispatch" "jazz:emit-method-dispatch" "dispatch-code" "codes-forms" "jazz:codes-forms" "declaration" "%%get-lexical-binding-type" "type" "if" "*self*" "jazz:*self*" "self" "let" "environment" "source-declaration" "arguments" "binding-src")}
      {Lisp-Entry "get-nextmethod-signature" generic/specific ("jazz:Method-Declaration") 826 21 826 50 ("%%get-method-declaration-signature" "next-method-declaration" "cdr" "car" "null?" "%%get-class-declaration-interfaces" "scan" "iter" "%%get-class-declaration-ascendant" "ascendant" "or" "%%get-declaration-parent" "declaration" "%%get-lexical-binding-name" "get-next-method-declaration" "private-access" "jazz:private-access" "lookup-declaration" "jazz:lookup-declaration" "%%get-autoload-declaration-declaration" "let" "Autoload-Declaration" "jazz:Autoload-Declaration" "%%is?" "if" "method-name" "category-declaration" "lookup" "define")}
      {Lisp-Entry "emit-declaration" generic/specific ("jazz:Method-Declaration") 849 21 849 42 ("%%get-declaration-source" ",method-rank-locator" "call-into-abstract" "jazz:call-into-abstract" "rest" "abstract" "%%eq?" "declaration-result" "jazz:declaration-result" ",name" ",class-locator" ",method-call" ",method-node-locator" "%%get-method-node-next-implementation" "nextmethod" "emit-signature-casts" "jazz:emit-signature-casts" "emit-signature" "jazz:emit-signature" "self" ",method-locator" "define" "begin" "generate-symbol" "jazz:generate-symbol" "sourcify-if" "jazz:sourcify-if" "emit-type-cast" "jazz:emit-type-cast" "emit-expression" "jazz:emit-expression" "body-code" "emit-body" "%%cons" "augmented-environment" "frame" "lambda" "annotate-signature" "jazz:annotate-signature" "with-annotated-frame" "jazz:with-annotated-frame" "Interface-Declaration" "jazz:Interface-Declaration" "add-virtual-method" "jazz:add-virtual-method" "chained" "virtual" "add-final-method" "jazz:add-final-method" "final" "add-method-node" "jazz:add-method-node" "override" "case" "Class-Declaration" "jazz:Class-Declaration" "%%class-is?" "cond" "method-call" "node" "method-node-locator" "rank" "compose-helper" "jazz:compose-helper" "method-rank-locator" "method-locator" "%%get-declaration-locator" "class-locator" "and" "root-category-declaration" "%%get-method-declaration-root" "root-method-declaration" "%%get-declaration-parent" "category-declaration" "let*" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "%%get-method-declaration-abstraction" "abstraction" "%%get-method-declaration-propagation" "propagation" "Any" "jazz:Any" "%%get-function-type-result" "Function-Type" "jazz:Function-Type" "%%is?" "if" "%%get-lexical-binding-type" "type" "body-type" "declaration" "%%get-lexical-binding-name" "name" "let" "environment")}
      {Lisp-Entry "fold-declaration" generic/specific ("jazz:Method-Declaration") 912 21 912 42 ("fold-statement" "jazz:fold-statement" "%%not" "if" "%%get-method-declaration-body" "body" "let" "declaration" "s" "k" "f")}
      {Lisp-Entry "Jazz-Dialect" define-class ("class runtime") 928 27 928 44 ()}
      {Lisp-Entry "new-jazz-dialect" define #f 931 9 931 30 ("Jazz-Dialect" "jazz:Jazz-Dialect" "allocate-jazz-dialect" "jazz:allocate-jazz-dialect")}
      {Lisp-Entry "dialect-name" generic/specific ("jazz:Jazz-Dialect") 935 21 935 38 ("jazz")}
      {Lisp-Entry "dialect-walker" generic/specific ("jazz:Jazz-Dialect") 939 21 939 40 ("new-jazz-walker" "jazz:new-jazz-walker")}
      {Lisp-Entry "Jazz-Walker" define-class ("class runtime") 951 27 951 43 ()}
      {Lisp-Entry "new-jazz-walker" define #f 954 9 954 29 ("eq?" "test:" "%%make-table" "new-queue" "jazz:new-queue" "Jazz-Walker" "jazz:Jazz-Walker" "allocate-jazz-walker" "jazz:allocate-jazz-walker")}
      {Lisp-Entry "runtime-export" generic/specific ("jazz:Jazz-Walker") 958 21 958 40 ("%%get-declaration-locator" "Category-Declaration" "jazz:Category-Declaration" "Generic-Declaration" "jazz:Generic-Declaration" "Definition-Declaration" "jazz:Definition-Declaration" "%%is?" "if" "walker" "nextmethod" "or" "declaration")}
      {Lisp-Entry "walker-bindings" generic/specific ("jazz:Jazz-Walker") 972 21 972 41 ("walker" "nextmethod" "jazz" "get-dialect" "jazz:get-dialect" "%%get-dialect-bindings" "append")}
      {Lisp-Entry "walk-declaration" generic/specific ("jazz:Jazz-Walker") 982 21 982 42 ("nextmethod" "else" "walk-c-definition-declaration" "jazz:walk-c-definition-declaration" "c-definition" "walk-c-type-declaration" "jazz:walk-c-type-declaration" "c-type" "walk-c-named-declare-declaration" "jazz:walk-c-named-declare-declaration" "c-named-declare" "c-include" "walk-with-local-variables-declaration" "jazz:walk-with-local-variables-declaration" "with-local-variables" "walk-with-dynamic-self-declaration" "jazz:walk-with-dynamic-self-declaration" "with-dynamic-self" "walk-method-declaration" "jazz:walk-method-declaration" "method" "walk-%slot-declaration" "jazz:walk-%slot-declaration" "%property" "%slot" "walk-interface-declaration" "jazz:walk-interface-declaration" "interface" "walk-%class-declaration" "jazz:walk-%class-declaration" "%class" "specific" "walk-generic-declaration" "jazz:walk-generic-declaration" "generic" "walk-%specialize-declaration" "jazz:walk-%specialize-declaration" "%specialize" "walker" "walk-definition-declaration" "jazz:walk-definition-declaration" "definition" "case" "%%car" "first" "let" "source-code" "jazz:source-code" "%%pair?" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "expand-declaration-path" define #f 1004 9 1004 37 ("get-declaration-path" "jazz:get-declaration-path" "quote" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-declaration-locator" define #f 1008 9 1008 40 ("get-declaration-path" "jazz:get-declaration-path" "compose-reference" "jazz:compose-reference" "apply" "quote" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "parse-keywords" define #f 1017 9 1017 28 ("%%list" "unspecified" "jazz:unspecified" "%%table-ref" "keyword" "lambda" "map" "%%append" "values" "%%apply" "%%cddr" "%%cadr" "%%desourcify" "%%table-set!" "begin" "set!" "%%memq" "if" "%%car" "source-code" "jazz:source-code" "symbol" "%%null?" "%%not" "and" "%%while" "done?" "eq?" "test:" "%%make-table" "table" "let" "rest" "keywords")}
      {Lisp-Entry "emit-specialized-class-of" define #f 1048 9 1048 39 ("%%get-category-declaration-metaclass" "Class-Declaration" "jazz:Class-Declaration" "%%class-is?" "if" "%%get-code-type" "type" "let" "sourcified-form" "jazz:sourcified-form" "class-of" "jazz:class-of" "new-code" "jazz:new-code" "environment" "object")}
      {Lisp-Entry "walk-symbol" generic/specific ("jazz:Jazz-Walker") 1091 21 1091 37 ("nextmethod" "else" "walk-error" "jazz:walk-error" ",method-symbol-src" "~" "apply" "rest" "object" "walk" "jazz:walk" "dispatch->symbol" "jazz:dispatch->symbol" "sourcify-if" "jazz:sourcify-if" "method-symbol-src" "not" "new-method-reference" "jazz:new-method-reference" "Method-Declaration" "jazz:Method-Declaration" "method-declaration" "Category-Declaration" "jazz:Category-Declaration" "walker" "lookup-reference" "jazz:lookup-reference" "resolve-binding" "jazz:resolve-binding" "category-declaration" "new-binding-reference" "jazz:new-binding-reference" "Slot-Declaration" "jazz:Slot-Declaration" "%%class-is?" "%%assert" "private-access" "jazz:private-access" "find-class-declaration" "jazz:find-class-declaration" "lookup-declaration" "jazz:lookup-declaration" "slot-declaration" "self" "%%eq?" "and" "cond" "if" "self/class-name" "name" "tilde?" "lambda" "split-tilde" "jazz:split-tilde" "unwrap-syntactic-closure" "symbol" "let" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "split-tilde" define #f 1116 9 1116 25 ("1" "%%fx+" "%%fx<" "%%substring" "%%string->symbol" "0" "%%fx>" "%%string-length" "len" "%%not" "if" "string-find-reversed" "jazz:string-find-reversed" "n" "%%symbol->string" "str" "let" "proc" "symbol")}
      {Lisp-Entry "lookup-analyse" generic/specific ("jazz:Jazz-Walker") 1127 21 1127 40 ("%%get-analysis-data-declaration-references" "%%cons" "%%set-analysis-data-declaration-references" "%%get-declaration-locator" "get-analysis-data" "jazz:get-analysis-data" "data" "let" "Slot-Declaration" "jazz:Slot-Declaration" "self" "source-code" "jazz:source-code" "or" "final" "%%get-method-declaration-propagation" "%%eq?" "Method-Declaration" "jazz:Method-Declaration" "%%is?" "and" "if" "referenced-declaration" "symbol-src" "declaration")}
      {Lisp-Entry "walk-symbol-assignment" generic/specific ("jazz:Jazz-Walker") 1142 21 1142 48 ("nextmethod" "%%desourcify" "walk-error" "jazz:walk-error" "walker" "walk" "jazz:walk" "new-assignment" "jazz:new-assignment" "Slot-Declaration" "jazz:Slot-Declaration" "%%class-is?" "%%assert" "private-access" "jazz:private-access" "find-class-declaration" "jazz:find-class-declaration" "lookup-declaration" "jazz:lookup-declaration" "slot-declaration" "let" "self" "%%eq?" "and" "if" "self/class-name" "name" "tilde?" "lambda" "source-code" "jazz:source-code" "split-tilde" "jazz:split-tilde" "value" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "walk-form" generic/specific ("jazz:Jazz-Walker") 1159 21 1159 35 ("nextmethod" "walker" "walk-dispatch" "jazz:walk-dispatch" "dispatch?" "jazz:dispatch?" "if" "%%car" "source-code" "jazz:source-code" "procedure-expr" "let" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "With-Self" define-class ("class runtime") 1171 27 1171 41 ()}
      {Lisp-Entry "new-with-self" define #f 1174 9 1174 27 ("With-Self" "jazz:With-Self" "allocate-with-self" "jazz:allocate-with-self" "body")}
      {Lisp-Entry "emit-expression" generic/specific ("jazz:With-Self") 1178 21 1178 41 ("Any" "jazz:Any" "emit-expression" "jazz:emit-expression" "sourcified-form" "jazz:sourcified-form" "self" "*self*" "jazz:*self*" "parameterize" "begin" "simplify-begin" "jazz:simplify-begin" "new-code" "jazz:new-code" "expression" "%%get-with-self-body" "body" "let" "environment" "declaration")}
      {Lisp-Entry "fold-expression" generic/specific ("jazz:With-Self") 1189 21 1189 41 ("%%get-with-self-body" "fold-expression" "jazz:fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "With-Dynamic-Self" define-class ("class runtime") 1203 27 1203 49 ()}
      {Lisp-Entry "new-with-dynamic-self" define #f 1206 9 1206 35 ("With-Dynamic-Self" "jazz:With-Dynamic-Self" "allocate-with-dynamic-self" "jazz:allocate-with-dynamic-self" "body" "code")}
      {Lisp-Entry "emit-expression" generic/specific ("jazz:With-Dynamic-Self") 1210 21 1210 41 ("Any" "jazz:Any" "emit-statements-code" "jazz:emit-statements-code" "sourcified-form" "jazz:sourcified-form" "*self*" "jazz:*self*" "parameterize" "begin" "simplify-begin" "jazz:simplify-begin" "new-code" "jazz:new-code" "%%get-with-dynamic-self-body" "body" "expression" "%%get-with-dynamic-self-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "fold-expression" generic/specific ("jazz:With-Dynamic-Self") 1222 21 1222 41 ("%%get-with-dynamic-self-body" "fold-expressions" "jazz:fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "Cast" define-class ("class runtime") 1235 27 1235 36 ()}
      {Lisp-Entry "new-cast" define #f 1238 9 1238 22 ("Cast" "jazz:Cast" "allocate-cast" "jazz:allocate-cast" "expression" "type")}
      {Lisp-Entry "emit-expression" generic/specific ("jazz:Cast") 1242 21 1242 41 ("emit-expression" "jazz:emit-expression" "emit-type-cast" "jazz:emit-type-cast" "new-code" "jazz:new-code" "%%get-cast-expression" "expression" "%%get-expression-type" "type" "let" "environment" "declaration")}
      {Lisp-Entry "fold-expression" generic/specific ("jazz:Cast") 1255 21 1255 41 ("%%get-cast-expression" "fold-expression" "jazz:fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "Construct" define-class ("class runtime") 1268 27 1268 41 ()}
      {Lisp-Entry "new-construct" define #f 1271 9 1271 27 ("Construct" "jazz:Construct" "allocate-construct" "jazz:allocate-construct" "values" "class")}
      {Lisp-Entry "emit-expression" generic/specific ("jazz:Construct") 1275 21 1275 41 ("Any" "jazz:Any" "emit-expressions" "jazz:emit-expressions" "codes-forms" "jazz:codes-forms" "emit-expression" "jazz:emit-expression" "sourcified-form" "jazz:sourcified-form" "%%object" "new-code" "jazz:new-code" "%%get-construct-values" "values" "expression" "%%get-construct-class" "class" "let" "environment" "declaration")}
      {Lisp-Entry "fold-expression" generic/specific ("jazz:Construct") 1285 21 1285 41 ("%%get-construct-values" "fold-expressions" "jazz:fold-expressions" "%%get-construct-class" "fold-expression" "jazz:fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "cache-dispatch" define #f 1299 9 1299 28 ("interface-dispatch" "jazz:interface-dispatch" "interface" "class-dispatch" "jazz:class-dispatch" "final-dispatch" "jazz:final-dispatch" "final" "%%get-method-dispatch-type" "case" "proc" "Method" "jazz:Method" "%%class-is?" "%%get-category-field" "field" "error" "jazz:error" "%%assertion" "locate-method-owner" "jazz:locate-method-owner" "category" "class-of" "jazz:class-of" "class" "let" "object" "lambda" "setter" "name")}
      {Lisp-Entry "final-dispatch" define #f 1318 9 1318 28 ("%%get-method-implementation" "class-of" "jazz:class-of" "%%final-dispatch" "dispatch-error" "jazz:dispatch-error" "%%category-is?" "%%debug-assertion" "object" "lambda" "type" "field")}
      {Lisp-Entry "class-dispatch" define #f 1324 9 1324 28 ("class-of" "jazz:class-of" "%%class-dispatch" "dispatch-error" "jazz:dispatch-error" "%%category-is?" "%%debug-assertion" "object" "lambda" "%%get-method-implementation-rank" "implementation-rank" "%%get-method-category-rank" "class-level" "let" "type" "field")}
      {Lisp-Entry "interface-dispatch" define #f 1332 9 1332 32 ("class-of" "jazz:class-of" "%%interface-dispatch" "dispatch-error" "jazz:dispatch-error" "%%category-is?" "%%debug-assertion" "object" "lambda" "%%get-method-implementation-rank" "implementation-rank" "%%get-method-category-rank" "interface-rank" "let" "type" "field")}
      {Lisp-Entry "dispatch" define #f 1340 9 1340 22 ("error" "jazz:error" "find-dispatch" "jazz:find-dispatch" "or" "name" "class")}
      {Lisp-Entry "find-dispatch" define #f 1345 9 1345 27 ("%%interface-dispatch" "interface" "%%get-method-implementation-rank" "%%get-method-category-rank" "%%class-dispatch" "%%get-method-implementation" "%%final-dispatch" "final" "%%get-method-dispatch-type" "case" "error" "jazz:error" "Method" "jazz:Method" "%%class-is?" "not" "%%get-category-field" "field" "%%not" "if" "locate-method-owner" "jazz:locate-method-owner" "category" "let" "name" "class")}
      {Lisp-Entry "Dispatch" define-class ("class runtime") 1361 27 1361 40 ()}
      {Lisp-Entry "new-dispatch" define #f 1364 9 1364 26 ("Dispatch" "jazz:Dispatch" "allocate-dispatch" "jazz:allocate-dispatch" "arguments" "name" "source")}
      {Lisp-Entry "emit-expression" generic/specific ("jazz:Dispatch") 1368 21 1368 41 ("expression" "emit-dispatch" "jazz:emit-dispatch" "environment" "declaration")}
      {Lisp-Entry "emit-dispatch" define #f 1372 9 1372 27 ("Any" "jazz:Any" ",object" "object" "with-uniqueness" "jazz:with-uniqueness" ",d" "set!" ",name" "cache-dispatch" "jazz:cache-dispatch" "%%set-cdr!" "d" "%%symbol->string" "%%string-append" "register-variable" "jazz:register-variable" "dv" "%%get-expression-source" "codes-forms" "jazz:codes-forms" "sourcified-form" "jazz:sourcified-form" "new-code" "jazz:new-code" "emit-method-dispatch" "jazz:emit-method-dispatch" "dispatch-code" "code" "lambda" "with-code-value" "jazz:with-code-value" "emit-inlined-final-dispatch" "jazz:emit-inlined-final-dispatch" "or" "emit-expressions" "jazz:emit-expressions" "rest-codes" "emit-expression" "jazz:emit-expression" "%%cdr" "rest-arguments" "%%car" "object-argument" "method" "dispatch" "find" "to" "unable" "In" "Warning:" "debug" "jazz:debug" "optimizations" "get-module-warn?" "jazz:get-module-warn?" "warnings?" "jazz:warnings?" "begin" "%%not" "lookup-method/warn" "%%get-declaration-locator" "%%table-set!" "%%get-module-declaration-walker-references" "references-table" "module-declaration" "let*" "%%get-declaration-toplevel" "%%neq?" "%%when" "method-declaration" "namespace-declaration" "add-to-module-references" "Method-Declaration" "jazz:Method-Declaration" "and" "public-access" "jazz:public-access" "lookup-declaration" "jazz:lookup-declaration" "Category-Declaration" "jazz:Category-Declaration" "lookup-method" "resolve-binding" "jazz:resolve-binding" "Autoload-Declaration" "jazz:Autoload-Declaration" "%%class-is?" "if" "%%get-code-type" "patch-type-until-unification" "jazz:patch-type-until-unification" "object-type" "object-code" "resolve-type" "define" "%%get-dispatch-arguments" "arguments" "%%get-dispatch-name" "name" "let" "environment" "declaration" "expression")}
      {Lisp-Entry "with-code-value" define #f 1436 9 1436 29 ("%%get-code-source" ",form" ",value" "%%get-code-type" "new-code" "jazz:new-code" "generate-symbol" "jazz:generate-symbol" "value" "%%symbol?" "if" "%%get-code-form" "form" "let" "proc" "code")}
      {Lisp-Entry "emit-inlined-final-dispatch" define #f 1449 9 1449 41 ("else" "%%get-lexical-binding-name" "error" "jazz:error" "call-return-type" "jazz:call-return-type" "%%get-expression-source" "%%get-code-form" "desourcify-all" "jazz:desourcify-all" "sourcify-if" "jazz:sourcify-if" "%%get-signature-positional" "%%get-lexical-binding-type" "emit-type-cast" "jazz:emit-type-cast" "emit-binding-symbol" "jazz:emit-binding-symbol" "argument" "parameter" "map" "sourcified-form" "jazz:sourcified-form" "self" "new-code" "jazz:new-code" "emit-expression" "jazz:emit-expression" "body-code" "%%cons" "augmented-environment" "frame" "lambda" "annotate-signature" "jazz:annotate-signature" "with-annotated-frame" "jazz:with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "only-positional?" "jazz:only-positional?" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "let" "final" "case" "method-dispatch-info" "jazz:method-dispatch-info" "method-declaration" "dispatch-type" "receive" "inline" "%%get-method-declaration-expansion" "%%eq?" "if" "environment" "source-declaration" "arguments" "object" "declaration" "expression")}
      {Lisp-Entry "fold-expression" generic/specific ("jazz:Dispatch") 1480 21 1480 41 ("%%get-dispatch-arguments" "fold-expressions" "jazz:fold-expressions" "%%get-dispatch-name" "expression" "s" "k" "f")}
      {Lisp-Entry "walk-dispatch" define #f 1489 9 1489 27 ("walk-list" "jazz:walk-list" "new-dispatch" "jazz:new-dispatch" "%%desourcify" "walk-error" "jazz:walk-error" "%%null?" "%%not" "%%assertion" "%%cdr" "arguments" "source-code" "jazz:source-code" "%%car" "unwrap-syntactic-closure" "dispatch->symbol" "jazz:dispatch->symbol" "name" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "definition-modifiers" define #f 1502 8 1502 33 ("onsite" "inline" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private")}
      {Lisp-Entry "parse-definition" define #f 1508 9 1508 30 (",@effective-body" ",@specifier-list" ",parameters" "value" "specifier-list" "unspecified" "%%list" "%%null?" "effective-body" "body" "%%desourcify" "parameters" "let*" "values" "specifier" "lambda" "%%cdr" "parse-specifier" "jazz:parse-specifier" "name" "let" "%%car" "source-code" "jazz:source-code" "%%symbol?" "if" "definition-modifiers" "jazz:definition-modifiers" "parse-modifiers" "jazz:parse-modifiers" "expansion" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-definition-declaration" define #f 1527 9 1527 41 ("walk" "jazz:walk" "%%set-definition-declaration-value" "%%cons" "new-environment" "inline" "%%eq?" "%%when" "add-declaration-child" "jazz:add-declaration-child" "effective-declaration" "%%set-declaration-source" "new-definition-declaration" "jazz:new-definition-declaration" "find-child-declaration" "jazz:find-child-declaration" "or" "new-declaration" "build-function-type" "jazz:build-function-type" "if" "effective-type" "walk-parameters" "jazz:walk-parameters" "and" "signature" "specifier->type" "jazz:specifier->type" "type" "let" "walk-error" "jazz:walk-error" "Namespace-Declaration" "jazz:Namespace-Declaration" "%%class-is?" "%%assertion" "source-code" "jazz:source-code" "%%cdr" "parse-definition" "jazz:parse-definition" "parameters" "value" "expansion" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-definition" define #f 1544 9 1544 29 ("%%set-declaration-source" "walk" "jazz:walk" "%%set-definition-declaration-value" "%%cons" "%%set-definition-declaration-signature" "walk-parameters" "jazz:walk-parameters" "augmented-environment" "signature" "if" "new-environment" "inline" "%%neq?" "%%when" "require-declaration" "jazz:require-declaration" "new-declaration" "let" "walk-error" "jazz:walk-error" "Namespace-Declaration" "jazz:Namespace-Declaration" "%%class-is?" "%%assertion" "source-code" "jazz:source-code" "%%cdr" "parse-definition" "jazz:parse-definition" "parameters" "value" "expansion" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "build-function-type" define #f 1564 9 1564 33 ("and" "%%get-signature-rest" "rest" "let" "%%get-signature-named" "%%get-signature-optional" "%%get-signature-positional" "map" "new-function-type" "jazz:new-function-type" "Any" "jazz:Any" "%%get-lexical-binding-type" "or" "parameter" "parameter-type" "define" "result-type" "signature")}
      {Lisp-Entry "specialize-modifiers" define #f 1583 8 1583 33 ("onsite" "inline")}
      {Lisp-Entry "parse-specialize" define #f 1587 9 1587 30 ("%%cddr" "%%cadr" "values" "as" "%%car" "%%eq?" "if" "specialize-modifiers" "jazz:specialize-modifiers" "parse-modifiers" "jazz:parse-modifiers" "expansion" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-specialize" define #f 1594 9 1594 31 (",operator" "%specialize" ",@rest" ",@parameters" ",name" ",expansion" "undocumented" "public" "definition" "begin" "compose-specializer-name" "jazz:compose-specializer-name" "or" "name" "parameters" "operator" "%%cdr" "%%car" "signature" "let" "parse-specialize" "jazz:parse-specialize" "as" "expansion" "receive" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "compose-specializer-name" define #f 1606 9 1606 38 ("specifier->name" "jazz:specifier->name" "%%list" "specifier?" "jazz:specifier?" "if" "parameter" "lambda" "map" "append" "string-append" "%%apply" "%%symbol->string" "%%string-append" "%%string->symbol" "parameters" "operator")}
      {Lisp-Entry "walk-%specialize-declaration" define #f 1621 9 1621 42 ("new-specialize" "jazz:new-specialize" "add-specializer" "jazz:add-specializer" "specializer-declaration" "lookup-reference" "jazz:lookup-reference" "specialized-declaration" "%%cddr" "%%car" "specializer" "%%cadr" "source-code" "jazz:source-code" "specialized" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-%specialize" define #f 1631 9 1631 30 ("new-specialize" "jazz:new-specialize" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "generic-modifiers" define #f 1640 8 1640 30 ("uptodate" "undocumented" "deprecated" "public" "package" "protected" "private")}
      {Lisp-Entry "parse-generic" define #f 1645 9 1645 27 ("values" "body" "specifier" "lambda" "parse-specifier" "jazz:parse-specifier" "%%cdr" "parameters" "name" "%%car" "source-code" "jazz:source-code" "signature" "let" "generic-modifiers" "jazz:generic-modifiers" "parse-modifiers" "jazz:parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-generic-declaration" define #f 1655 9 1655 38 ("add-declaration-child" "jazz:add-declaration-child" "effective-declaration" "%%set-declaration-source" "new-generic-declaration" "jazz:new-generic-declaration" "new-declaration" "walk-parameters" "jazz:walk-parameters" "signature" "dynamic-parameter-types" "jazz:dynamic-parameter-types" "lookup-reference" "jazz:lookup-reference" "dynamic-parameter-type" "lambda" "map" "dispatch-type-declarations" "Any" "jazz:Any" "walk-specifier" "jazz:walk-specifier" "if" "type" "let" "walk-error" "jazz:walk-error" "Module-Declaration" "jazz:Module-Declaration" "%%class-is?" "%%assertion" "source-code" "jazz:source-code" "%%cdr" "parse-generic" "jazz:parse-generic" "body" "parameters" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-generic" define #f 1669 9 1669 26 ("%%set-declaration-source" "walk-body" "jazz:walk-body" "%%set-generic-declaration-body" "%%set-generic-declaration-signature" "require-declaration" "jazz:require-declaration" "new-declaration" "let" "walk-parameters" "jazz:walk-parameters" "augmented-environment" "signature" "walk-error" "jazz:walk-error" "Module-Declaration" "jazz:Module-Declaration" "%%class-is?" "%%assertion" "source-code" "jazz:source-code" "%%cdr" "parse-generic" "jazz:parse-generic" "body" "parameters" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "specific-modifiers" define #f 1686 8 1686 31 ()}
      {Lisp-Entry "parse-specific" define #f 1690 9 1690 28 ("values" "parameters" "name" "unspecified" "%%list" "%%null?" "if" "effective-body" "%%cdr" "body" "%%car" "desourcify" "jazz:desourcify" "signature" "let*" "specific-modifiers" "jazz:specific-modifiers" "parse-modifiers" "jazz:parse-modifiers" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-specific" define #f 1700 9 1700 27 ("%%set-declaration-source" "walk-body" "jazz:walk-body" "%%set-specific-declaration-body" "nextmethod" "new-nextmethod-variable" "jazz:new-nextmethod-variable" "body-environment" "uptodate" "public" "new-specific-declaration" "jazz:new-specific-declaration" "new-declaration" "let*" "walk-parameters" "jazz:walk-parameters" "augmented-environment" "signature" "Generic-Declaration" "jazz:Generic-Declaration" "private-access" "jazz:private-access" "lookup-declaration" "jazz:lookup-declaration" "Module-Declaration" "jazz:Module-Declaration" "%%class-is?" "%%assertion" "source-code" "jazz:source-code" "parse-specific" "jazz:parse-specific" "body" "receive" "else" "or" "%%cons" "%%get-declaration-locator" "%%get-lexical-binding-name" "walk-error" "jazz:walk-error" "%%eq?" "%%cdr" "of-subtype?" "jazz:of-subtype?" "if" "specific-class" "%%get-dynamic-parameter-class" "%%get-reference-binding" "resolve-binding" "jazz:resolve-binding" "generic-class" "cond" "specific-dynamic?" "Dynamic-Parameter" "jazz:Dynamic-Parameter" "%%is?" "generic-dynamic?" "specific-parameter" "%%car" "%%pair?" "and" "generic-parameter" "root?" "specific-parameters" "%%get-generic-declaration-signature" "%%get-signature-positional" "generic-parameters" "iter" "let" "parameters" "name" "specific-signature" "generic-declaration" "root-dynamic-parameters?" "define" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "class-modifiers" define #f 1745 8 1745 28 ("native" "primitive" "uptodate" "undocumented" "deprecated" "concrete" "abstract" "public" "package" "protected" "private")}
      {Lisp-Entry "class-keywords" define #f 1751 8 1751 27 ("attributes" "implements" "extends" "metaclass")}
      {Lisp-Entry "parse-class" define #f 1755 9 1755 25 ("values" "class-keywords" "jazz:class-keywords" "parse-keywords" "jazz:parse-keywords" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "%%symbol?" "%%assert" "%%cdr" "Any" "jazz:Any" "type" "%%car" "source-code" "jazz:source-code" "name" "let" "class-modifiers" "jazz:class-modifiers" "parse-modifiers" "jazz:parse-modifiers" "implementor" "compatibility" "abstraction" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-class" define #f 1765 9 1765 26 (",@class-body" ",interface-names" "implements" ",name" ",implementor" ",compatibility" ",abstraction" ",access" ",@metaclass-body" ",ascendant-name" ":class" "extends" ",metaclass-name" "%%symbol->string" "%%string-append" "%%string->symbol" "%class" "%%unspecified?" "core-class?" "jazz:core-class?" "or" "walk-error" "jazz:walk-error" "%%specified?" "%%not-null?" "class-body" "metaclass-body" "parse-class" "jazz:parse-class" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "queue-list" "jazz:queue-list" "values" "else" "%%cddr" "%%cons" "sourcify-if" "jazz:sourcify-if" "enqueue" "jazz:enqueue" "meta" "%%cadr" "%%cdr" "for-each" "begin" "cond" "preprocess" "expand-macros" "jazz:expand-macros" "form" "%%car" "%%eq?" "source-code" "jazz:source-code" "%%pair?" "and" "if" "expr" "expand-form-hack" "class" "new-queue" "jazz:new-queue" "metaclass" "let" "body" "preprocess-meta" "define" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-%class-declaration" define #f 1815 9 1815 37 ("walk-declarations" "jazz:walk-declarations" "%%cons" "new-environment" "setup-class-lookups" "jazz:setup-class-lookups" "add-declaration-child" "jazz:add-declaration-child" "effective-declaration" "%%set-declaration-source" "new-class-declaration" "jazz:new-class-declaration" "find-child-declaration" "jazz:find-child-declaration" "or" "new-declaration" "listify" "jazz:listify" "lookup-reference" "jazz:lookup-reference" "interface-name" "lambda" "map" "unspecified?" "jazz:unspecified?" "if" "interfaces" "lookup-metaclass" "jazz:lookup-metaclass" "metaclass" "let" "lookup-ascendant" "jazz:lookup-ascendant" "ascendant-base" "ascendant-relation" "ascendant" "walk-error" "jazz:walk-error" "Module-Declaration" "jazz:Module-Declaration" "%%class-is?" "%%assertion" "source-code" "jazz:source-code" "%%cdr" "parse-class" "jazz:parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-%class" define #f 1832 9 1832 25 ("%%set-declaration-source" "walk-namespace" "jazz:walk-namespace" "%%set-namespace-declaration-body" "begin" "Object" "%%neq?" "%%not" "and" "if" "%%get-class-declaration-ascendant" "ascendant-declaration" "%%cons" "new-environment" "require-declaration" "jazz:require-declaration" "new-declaration" "let*" "walk-error" "jazz:walk-error" "Module-Declaration" "jazz:Module-Declaration" "%%class-is?" "%%assertion" "source-code" "jazz:source-code" "%%cdr" "parse-class" "jazz:parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "lookup-metaclass" define #f 1846 9 1846 30 ("lookup-reference" "jazz:lookup-reference" "Object-Class" "%%eq?" "unspecified?" "jazz:unspecified?" "or" "if" "metaclass-name" "ascendant" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "lookup-ascendant" define #f 1852 9 1852 30 ("else" "%%cons" "effective-class-declaration-metaclass" "jazz:effective-class-declaration-metaclass" "or" "%%cadr" "base" "relation" "decl" "receive" "if" "rec" "Object-Class" "lookup-reference" "jazz:lookup-reference" "object-class" "let" ":class" "%%car" "%%eq?" "%%pair?" "and" "values" "unspecified?" "jazz:unspecified?" "cond" "ascendant-name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "effective-class-declaration-metaclass" define #f 1876 9 1876 51 ("effective-class-declaration-metaclass" "jazz:effective-class-declaration-metaclass" "%%get-class-declaration-ascendant" "ascendant" "%%get-category-declaration-metaclass" "or" "resolve-binding" "jazz:resolve-binding" "let" "%%not" "if" "class-declaration")}
      {Lisp-Entry "interface-modifiers" define #f 1892 8 1892 32 ("native" "primitive" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private")}
      {Lisp-Entry "interface-keywords" define #f 1897 8 1897 31 ("attributes" "extends" "metaclass")}
      {Lisp-Entry "parse-interface" define #f 1901 9 1901 29 ("values" "interface-keywords" "jazz:interface-keywords" "parse-keywords" "jazz:parse-keywords" "body" "attributes" "ascendant-names" "metaclass-name" "%%symbol?" "%%assert" "%%cdr" "Any" "jazz:Any" "type" "%%car" "name" "let" "interface-modifiers" "jazz:interface-modifiers" "parse-modifiers" "jazz:parse-modifiers" "implementor" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-interface-declaration" define #f 1911 9 1911 40 ("walk-declarations" "jazz:walk-declarations" "%%cons" "new-environment" "setup-interface-lookups" "jazz:setup-interface-lookups" "add-declaration-child" "jazz:add-declaration-child" "effective-declaration" "%%set-declaration-source" "new-interface-declaration" "jazz:new-interface-declaration" "find-child-declaration" "jazz:find-child-declaration" "new-declaration" "listify" "jazz:listify" "ascendant-name" "lambda" "map" "ascendants" "lookup-reference" "jazz:lookup-reference" "Interface" "%%eq?" "unspecified?" "jazz:unspecified?" "or" "if" "metaclass" "walk-error" "jazz:walk-error" "Module-Declaration" "jazz:Module-Declaration" "%%class-is?" "%%assertion" "%%cdr" "parse-interface" "jazz:parse-interface" "body" "attributes" "ascendant-names" "metaclass-name" "implementor" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-interface" define #f 1927 9 1927 28 ("%%set-declaration-source" "walk-namespace" "jazz:walk-namespace" "%%set-namespace-declaration-body" "%%cons" "new-environment" "require-declaration" "jazz:require-declaration" "new-declaration" "let*" "walk-error" "jazz:walk-error" "Module-Declaration" "jazz:Module-Declaration" "%%class-is?" "%%assertion" "%%cdr" "parse-interface" "jazz:parse-interface" "body" "attributes" "ascendant-names" "metaclass-name" "implementor" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "slot-modifiers" define #f 1943 8 1943 27 ("uptodate" "undocumented" "deprecated" "public" "package" "protected" "private")}
      {Lisp-Entry "slot-keywords" define #f 1947 8 1947 26 ("setter" "getter" "accessors" "initialize")}
      {Lisp-Entry "slot-accessors-modifiers" define #f 1951 8 1951 37 ("explicit" "generate" "none" "onsite" "inline" "concrete" "abstract" "override" "chained" "virtual" "final" "public" "package" "protected" "private")}
      {Lisp-Entry "slot-accessor-modifiers" define #f 1959 8 1959 36 ("explicit" "generate" "none" "onsite" "inline" "concrete" "abstract" "override" "chained" "virtual" "final" "public" "package" "protected" "private")}
      {Lisp-Entry "parse-slot" define #f 1967 9 1967 24 ("values" "walk-error" "jazz:walk-error" "%%not-null?" "if" "slot-keywords" "jazz:slot-keywords" "parse-keywords" "jazz:parse-keywords" "setter" "getter" "accessors" "initialize" "specifier" "lambda" "parse-specifier" "jazz:parse-specifier" "%%car" "name" "let" "source-code" "jazz:source-code" "%%cdr" "slot-modifiers" "jazz:slot-modifiers" "parse-modifiers" "jazz:parse-modifiers" "rest" "compatibility" "access" "receive" "form-src" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-slot" define #f 1978 9 1978 25 ("%slot" "expand-slot-form" "jazz:expand-slot-form" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-slot-form" define #f 1982 9 1982 30 ("set!" "void" "<void>" "value" ",setter-expansion" ",setter-abstraction" ",setter-propagation" "protected" ",name-self" ",@specifier-list" ",getter-expansion" ",getter-abstraction" ",getter-propagation" "public" "method" ",setter-name" ",getter-name" ",initialize" "with-self" "%%unspecified?" ",compatibility" ",access" ",specifier" ",name" ",symbol" "sourcify-if" "jazz:sourcify-if" "begin" "specifier-list" "generate-setter?" "generate" "%%eq?" "generate-getter?" "name-self" "setter-name" "setter-generation" "setter-expansion" "setter-abstraction" "setter-propagation" "setter-access" "getter-name" "getter-generation" "getter-expansion" "getter-abstraction" "getter-propagation" "getter-access" "%%list" "%%symbol?" "unspecified?" "jazz:unspecified?" "desourcify" "jazz:desourcify" "info" "lambda" "standardize" "parse-slot" "jazz:parse-slot" "setter" "getter" "accessors" "initialize" "compatibility" "specifier" "else" "%%car" "%%cdr" "%%symbol->string" "%%string-append" "%%string->symbol" "none" "%%neq?" "and" "%%null?" "cond" "name" "let" "slot-accessor-modifiers" "jazz:slot-accessor-modifiers" "prefix" "default-generation" "default-expansion" "default-abstraction" "default-propagation" "default-access" "slot-name" "parse-accessor" "or" "values" "walk-error" "jazz:walk-error" "%%not-null?" "if" "slot-accessors-modifiers" "jazz:slot-accessors-modifiers" "parse-modifiers" "jazz:parse-modifiers" "rest" "generation" "expansion" "abstraction" "propagation" "access" "receive" "slot-access" "form" "parse-accessors" "define" "symbol" "form-src" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-%slot-declaration" define #f 2040 9 2040 36 ("add-declaration-child" "jazz:add-declaration-child" "effective-declaration" "%%set-declaration-source" "find-child-declaration" "jazz:find-child-declaration" "or" "new-declaration" "new-slot-declaration" "jazz:new-slot-declaration" "new-property-declaration" "jazz:new-property-declaration" "%property" "%%car" "%%eq?" "new" "Any" "jazz:Any" "walk-specifier" "jazz:walk-specifier" "if" "type" "walk-error" "jazz:walk-error" "Class-Declaration" "jazz:Class-Declaration" "%%class-is?" "%%assertion" "%%cdr" "setter-name" "getter-name" "initialize" "compatibility" "access" "specifier" "name" "bind" "jazz:bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-%slot" define #f 2053 9 2053 24 ("%%set-declaration-source" "set!" ",setter-name" ",value" "generate-symbol" "jazz:generate-symbol" "value" "%%set-property-declaration-setter" "else" ",name" ",getter-name" "with-self" "self" "lambda" "cond" "%%set-property-declaration-getter" "Void" "jazz:Void" "%%get-lexical-binding-type" "%%neq?" "allocate?" "Property-Declaration" "jazz:Property-Declaration" "%%when" "walk" "jazz:walk" "%%specified?" "and" "%%set-slot-declaration-initialize" "%%cadr" "require-declaration" "jazz:require-declaration" "new-declaration" "walk-error" "jazz:walk-error" "Class-Declaration" "jazz:Class-Declaration" "%%class-is?" "%%assertion" "%%cdr" "setter-name" "getter-name" "initialize" "compatibility" "access" "specifier" "name" "bind" "jazz:bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-property" define #f 2093 9 2093 29 ("%property" "expand-slot-form" "jazz:expand-slot-form" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "method-modifiers" define #f 2102 8 2102 29 ("notsynchronized" "synchronized" "notremote" "remote" "onsite" "inline" "concrete" "abstract" "override" "chained" "virtual" "final" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private")}
      {Lisp-Entry "parse-method" define #f 2113 9 2113 26 ("values" "unspecified" "%%list" "%%null?" "if" "effective-body" "body" "specifier" "lambda" "parse-specifier" "jazz:parse-specifier" "%%desourcify" "%%cdr" "wrap-parameters" "jazz:wrap-parameters" "parameters" "name" "let" "desourcify-all" "jazz:desourcify-all" "method" "%%cons" "%%get-declaration-toplevel" "%%get-lexical-binding-name" "walk-error" "jazz:walk-error" "%%car" "source-code" "jazz:source-code" "%%pair?" "and" "%%assertion" "method-modifiers" "jazz:method-modifiers" "parse-modifiers" "jazz:parse-modifiers" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-method-declaration" define #f 2124 9 2124 37 (",@body" "with-self" "walk" "jazz:walk" "%%set-method-declaration-body" "%%set-method-declaration-signature" "%%when" "add-declaration-child" "jazz:add-declaration-child" "effective-declaration" "%%set-declaration-source" "new-method-declaration" "jazz:new-method-declaration" "find-child-declaration" "jazz:find-child-declaration" "new-declaration" "unspecified" "jazz:unspecified" "values" "walk-parameters" "jazz:walk-parameters" "augmented-environment" "signature" "concrete" "inline" "inline?" "Procedure" "jazz:Procedure" "walk-specifier" "jazz:walk-specifier" "new-function-type" "jazz:new-function-type" "type" "let" "walk-error" "jazz:walk-error" "Category-Declaration" "jazz:Category-Declaration" "%%class-is?" "%%assertion" "source-code" "jazz:source-code" "%%cdr" "parse-method" "jazz:parse-method" "body" "parameters" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "specifier" "receive" "%%get-declaration-parent" "%%eq?" "if" "%%get-method-declaration-root" "or" "and" "root-declaration" "private-access" "jazz:private-access" "lookup-declaration" "jazz:lookup-declaration" "next-declaration" "let*" "name" "find-root-declaration" "define" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-method" define #f 2156 9 2156 25 ("%%set-declaration-source" "%%set-method-declaration-body" "%%set-method-declaration-signature" "inline" "%%when" "concrete" ",@body" "with-self" "%%get-lexical-binding-type" "nextmethod" "new-nextmethod-variable" "jazz:new-nextmethod-variable" "%%cons" "walk" "jazz:walk" "body-expression" "walk-parameters" "jazz:walk-parameters" "augmented-environment" "signature" "%%set-analysis-data-declaration-references" "%%get-declaration-locator" "get-analysis-data" "jazz:get-analysis-data" "data" "let" "analysis-mode?" "jazz:analysis-mode?" "if" "else" "Interface-Declaration" "jazz:Interface-Declaration" "%%not" "case" "override" "%%neq?" "chained" "virtual" "%%memq" "final" "%%eq?" "cond" "root-category-declaration" "%%get-method-declaration-propagation" "and" "root-method-propagation" "%%get-method-declaration-root" "root-method-declaration" "%%get-declaration-parent" "category-declaration" "private-access" "jazz:private-access" "lookup-declaration" "jazz:lookup-declaration" "new-declaration" "let*" "walk-error" "jazz:walk-error" "Category-Declaration" "jazz:Category-Declaration" "%%class-is?" "%%assertion" "source-code" "jazz:source-code" "%%cdr" "parse-method" "jazz:parse-method" "body" "parameters" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "wrap-parameters" define #f 2197 9 2197 29 ("queue-list" "jazz:queue-list" "%%cdr" "with-self" ",@specifier-list" "%%cadr" "%%list" "specifier-list" "rest" "specifier" "lambda" "%%cddr" "parse-specifier" "jazz:parse-specifier" "%%keyword?" "enqueue" "jazz:enqueue" "specifier?" "jazz:specifier?" "%%pair?" "if" "%%car" "parameter" "else" "enqueue-list" "jazz:enqueue-list" "%%symbol?" "%%null?" "cond" "scan" "iter" "new-queue" "jazz:new-queue" "queue" "let" "parameters")}
      {Lisp-Entry "walk-cast" define #f 2227 9 2227 23 ("walk" "jazz:walk" "walk-specifier" "jazz:walk-specifier" "new-cast" "jazz:new-cast" "%%cddr" "%%car" "expression" "%%cadr" "specifier" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-construct" define #f 2240 9 2240 28 ("walk-list" "jazz:walk-list" "walk" "jazz:walk" "new-construct" "jazz:new-construct" "%%cddr" "values" "%%cadr" "class" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-with-self" define #f 2253 9 2253 28 ("walk-body" "jazz:walk-body" "%%cdr" "body" "new-with-self" "jazz:new-with-self" "new-self-binding" "jazz:new-self-binding" "%%cons" "new-environment" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "parse-with-dynamic-self" define #f 2266 9 2266 37 ("values" "%%cdr" "body" "%%car" "code" "let" "form")}
      {Lisp-Entry "walk-with-dynamic-self-declaration" define #f 2272 9 2272 48 ("walk-declarations" "jazz:walk-declarations" "%%desourcify" "%%cdr" "parse-with-dynamic-self" "jazz:parse-with-dynamic-self" "body" "code" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-with-dynamic-self" define #f 2277 9 2277 36 ("walk-list" "jazz:walk-list" "new-with-dynamic-self" "jazz:new-with-dynamic-self" "new-dynamic-self-binding" "jazz:new-dynamic-self-binding" "%%cons" "new-environment" "let" "%%desourcify" "%%cdr" "parse-with-dynamic-self" "jazz:parse-with-dynamic-self" "body" "code" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "parse-with-local-variables" define #f 2290 9 2290 40 ("values" "%%cdr" "body" "%%car" "variables" "let" "form")}
      {Lisp-Entry "walk-with-local-variables-declaration" define #f 2296 9 2296 51 ("walk-declarations" "jazz:walk-declarations" "%%desourcify" "%%cdr" "parse-with-local-variables" "jazz:parse-with-local-variables" "body" "variables" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-with-local-variables" define #f 2301 9 2301 39 ("walk-list" "jazz:walk-list" "new-begin" "jazz:new-begin" "new-local-variable-binding" "jazz:new-local-variable-binding" "variable" "lambda" "map" "new-walk-frame" "jazz:new-walk-frame" "%%cons" "new-environment" "let" "%%desourcify" "%%cdr" "parse-with-local-variables" "jazz:parse-with-local-variables" "body" "variables" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "validate-proclaim" generic/specific ("jazz:Jazz-Walker") 2312 21 2312 43 ("walker" "walk-error" "jazz:walk-error" "Category-Declaration" "jazz:Category-Declaration" "Module-Declaration" "jazz:Module-Declaration" "%%class-is?" "%%not" "and" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "remotable-stub-modifiers" define #f 2323 8 2323 37 ("public" "package" "protected" "private")}
      {Lisp-Entry "remotable-stub-keywords" define #f 2326 8 2326 36 ("extends")}
      {Lisp-Entry "parse-remotable-stub" define #f 2330 9 2330 34 ("values" "remotable-stub-keywords" "jazz:remotable-stub-keywords" "parse-keywords" "jazz:parse-keywords" "body" "ascendant-name" "%%cdr" "%%car" "name" "let" "remotable-stub-modifiers" "jazz:remotable-stub-modifiers" "parse-modifiers" "jazz:parse-modifiers" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "method-stub-modifiers" define #f 2338 8 2338 34 ("value" "reference" "call" "exec" "post" "public" "package" "protected" "private")}
      {Lisp-Entry "parse-method-stub" define #f 2344 9 2344 31 ("Any" "jazz:Any" "values" "body" "%%cdr" "parameters" "name" "%%car" "signature" "let*" "method-stub-modifiers" "jazz:method-stub-modifiers" "parse-modifiers" "jazz:parse-modifiers" "passage" "invocation" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-remotable-stub" define #f 2353 9 2353 35 ("Remote-Proxy" ",@values-method" "stub-reference" "implements" "Local-Proxy" "metaclass" "Remotable-Stub" ",stub-interface" ",stub-access" "interface" ",remote-class" ",local-class" "Stub-Interface" "specified?" "jazz:specified?" "extends" ",interface-class" "package" "class" "begin" "nextmethod" ",@values-list" "list" "append" "proxy-values" "values-method" "values-list" ",call" ",value-keyword" "proxy-value" "self" ",invoker" "if" ",dispatch" ",@local-result" ",rest" ",@positional" "object" "~" "apply" "%%not-null?" "override" "%%when" ",@parameters" ",name" "abstract" "virtual" ",access" "value-keyword" "unspecified" "local-result" "dispatch" "call-remote" "call" "exec-remote" "exec" "post-remote" "post" "invoker" "parse-method-stub" "jazz:parse-method-stub" "invocation" "access" "method" "%%eq?" "method-form" "lambda" "for-each" "remotes" "locals" "proxies" "remote-class" "local-class" "stub-interface" "interface-class" "string->keyword" "jazz:string->keyword" "0" "%%substring" "%%string=?" "4" "%%fx>" "and" "%%assert" "%%string-length" "len" "str" "let*" "value" "reference" "case" "passage" "parse-value-keyword" "%%cdr" "enqueue" "jazz:enqueue" "%%car" "else" "enqueue-list" "jazz:enqueue-list" "%%symbol?" "queue-list" "jazz:queue-list" "values" "%%null?" "cond" "scan" "iter" "parameter" "encode" "positional" "new-queue" "jazz:new-queue" "parameters" "let" "params" "parse-parameters" "%%symbol->string" "%%string-append" "%%string->symbol" "suffix" "add" "define" "parse-remotable-stub" "jazz:parse-remotable-stub" "body" "ascendant-name" "stub-access" "type" "name" "receive" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-com-external" define #f 2496 9 2496 33 ("emit-com-external" "jazz:emit-com-external" ",name" "public" "emit-com-function" "jazz:emit-com-function" ",lowlevel-name" "definition" "begin" "%%cons" "C-Type-Declaration" "jazz:C-Type-Declaration" "%%class-is?" "resolved" "every?" "jazz:every?" "HRESULT" "jazz.platform.windows.com" "jazz.platform.windows.com:HRESULT" "%%get-declaration-locator" "%%eq?" "hresult?" "%%symbol->string" "%%string-append" "%%string->symbol" "lowlevel-name" "car" "resolved-directions" "resolved-params" "resolved-result" "let" "walk-error" "jazz:walk-error" "resolve-c-type-reference" "jazz:resolve-c-type-reference" "%%symbol?" "if" "type" "lambda" "resolve-declaration" "%%cdr" "cadr" "map" "param-types" "%%car" "name" "let*" "offset" "com-interface" "signature" "result-type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "emit-com-function" define #f 2513 9 2513 31 ("1" "%%fx+" "cons" "2" "order" "%%number->string" "%%cdr" "%%car" "%%pair?" "iter" "let" "%%apply" "%%get-lexical-binding-name" "->string" "jazz:->string" "string-append" ",result-type" "map" "IUnknown*" "%%cons" "c-function" "%%symbol->string" "%%string-append" "%%string->symbol" "%%get-c-type-declaration-kind" "%%eq?" "if" "declaration" "type" "fix-locator" "define" "resolved-params" "param-types" "resolved-result" "result-type" "offset")}
      {Lisp-Entry "emit-com-external" define #f 2544 9 2544 31 ("%%fx=" ",@out-list" "values" "else" "unspecified" "0" "%%length" "case" "begin" "validate-hresult" ",com-interface" "validate-hresult2" ",lowlevel-name" "result" "coptr" "lambda" "out-list" "%%fx+" "%%cdr" "cons" "%%car" "generated" "%%pair?" "1" "iter" "generator" "generate-cotype-transform" ",free" "get-cotype-free" "free" "generate-free" ",ref" "get-cotype-ref" "ref" "generate-ref" ",value" ",encode/enref" ",binding" "get-cotype-default-value" "value" "get-cotype-encode/enref" "encode/enref" "binding" "let" "generate-encode/enref" "in" "generate-out" "generate-low" "%%number->string" "%%string-append" "%%string->symbol" "out" "%%eq?" "if" "order" "resolved-direction" "resolved-param" "generate-in" "define" "com-interface" "resolved-directions" "resolved-params" "lowlevel-name" "hresult?")}
      {Lisp-Entry "get-cotype-default-value" define #f 2621 9 2621 33 ("else" "LONG*" "jazz.platform.windows.WinTypes:LONG*" "0" "INT*" "jazz.platform.windows.WinTypes" "jazz.platform.windows.WinTypes:INT*" "IUnknown**" "jazz.platform.windows.com:IUnknown**" "IUnknown*" "jazz.platform.windows.com:IUnknown*" "VARIANT*" "jazz.platform.windows.com:VARIANT*" "VARIANT" "jazz.platform.windows.com:VARIANT" "VARIANT_BOOL*" "jazz.platform.windows.com:VARIANT_BOOL*" "VARIANT_BOOL" "jazz.platform.windows.com:VARIANT_BOOL" "GUID*" "jazz.platform.windows.com:GUID*" "GUID" "jazz.platform.windows.com:GUID" "BSTR*" "jazz.platform.windows.com:BSTR*" "error" "BSTR" "jazz.platform.windows.com" "jazz.platform.windows.com:BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-encode/enref" define #f 2638 9 2638 32 ("else" "LONG-enref" "LONG*" "jazz.platform.windows.WinTypes:LONG*" "INT-enref" "INT*" "jazz.platform.windows.WinTypes" "jazz.platform.windows.WinTypes:INT*" "IUnknown*-enref" "IUnknown**" "jazz.platform.windows.com:IUnknown**" "IUnknown*" "jazz.platform.windows.com:IUnknown*" "VARIANT*" "jazz.platform.windows.com:VARIANT*" "VARIANT-encode" "VARIANT" "jazz.platform.windows.com:VARIANT" "VARIANT_BOOL-enref" "VARIANT_BOOL*" "jazz.platform.windows.com:VARIANT_BOOL*" "VARIANT_BOOL-encode" "VARIANT_BOOL" "jazz.platform.windows.com:VARIANT_BOOL" "GUID*" "jazz.platform.windows.com:GUID*" "GUID-encode" "GUID" "jazz.platform.windows.com:GUID" "BSTR*-enref" "BSTR*" "jazz.platform.windows.com:BSTR*" "BSTR-encode" "BSTR" "jazz.platform.windows.com" "jazz.platform.windows.com:BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-ref" define #f 2655 9 2655 23 ("else" "LONG*-ref" "LONG*" "jazz.platform.windows.WinTypes:LONG*" "INT*-ref" "INT*" "jazz.platform.windows.WinTypes" "jazz.platform.windows.WinTypes:INT*" "IUnknown**-ref" "IUnknown**" "jazz.platform.windows.com:IUnknown**" "IUnknown*" "jazz.platform.windows.com:IUnknown*" "VARIANT*" "jazz.platform.windows.com:VARIANT*" "VARIANT-ref" "VARIANT" "jazz.platform.windows.com:VARIANT" "VARIANT_BOOL*-ref" "VARIANT_BOOL*" "jazz.platform.windows.com:VARIANT_BOOL*" "VARIANT_BOOL-decode" "VARIANT_BOOL" "jazz.platform.windows.com:VARIANT_BOOL" "GUID*" "jazz.platform.windows.com:GUID*" "GUID-ref" "GUID" "jazz.platform.windows.com:GUID" "BSTR*-ref" "BSTR*" "jazz.platform.windows.com:BSTR*" "BSTR-ref" "BSTR" "jazz.platform.windows.com" "jazz.platform.windows.com:BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-free" define #f 2672 9 2672 24 ("else" "LONG*-free" "LONG*" "jazz.platform.windows.WinTypes:LONG*" "INT*-free" "INT*" "jazz.platform.windows.WinTypes" "jazz.platform.windows.WinTypes:INT*" "IUnknown**-free" "IUnknown**" "jazz.platform.windows.com:IUnknown**" "IUnknown*" "jazz.platform.windows.com:IUnknown*" "VARIANT*" "jazz.platform.windows.com:VARIANT*" "VARIANT-decode" "VARIANT" "jazz.platform.windows.com:VARIANT" "VARIANT_BOOL*-free" "VARIANT_BOOL*" "jazz.platform.windows.com:VARIANT_BOOL*" "VARIANT_BOOL" "jazz.platform.windows.com:VARIANT_BOOL" "GUID*" "jazz.platform.windows.com:GUID*" "GUID-free" "GUID" "jazz.platform.windows.com:GUID" "BSTR*-free" "BSTR*" "jazz.platform.windows.com:BSTR*" "BSTR-free" "BSTR" "jazz.platform.windows.com" "jazz.platform.windows.com:BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "expand-assert" define #f 2694 9 2694 27 ("expand-assert-test" "jazz:expand-assert-test" "sourcify-if" "jazz:sourcify-if" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-assertion" define #f 2701 9 2701 30 ("expand-assertion-test" "jazz:expand-assertion-test" "sourcify-if" "jazz:sourcify-if" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-debug-assert" define #f 2708 9 2708 33 ("debug-user?" "jazz:debug-user?" "expand-assert-test" "jazz:expand-assert-test" "sourcify-if" "jazz:sourcify-if" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-debug-assertion" define #f 2714 9 2714 36 ("debug-user?" "jazz:debug-user?" "expand-assertion-test" "jazz:expand-assertion-test" "sourcify-if" "jazz:sourcify-if" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-assert-test" define #f 2720 9 2720 32 ("error" "%%list" "expand-assertion-body" "jazz:expand-assertion-body" "get-output-string" "%%desourcify" "write" "display" "open-output-string" "port" "message" "%%cddr" "body" "source-code" "jazz:source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "expand-assertion-test" define #f 2731 9 2731 35 ("expand-assertion-body" "jazz:expand-assertion-body" "%%cdr" "body" "%%cddr" "%%car" "action" "source-code" "jazz:source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "expand-assertion-body" define #f 2738 9 2738 35 (",@body" "begin" "simplify-begin" "jazz:simplify-begin" ",action" ",assertion" "not" "unspecified" "%%not-null?" "if" "let" "body" "action" "assertion" "test?")}
      {Lisp-Entry "walk-declare" define #f 2754 9 2754 26 ("new-declare" "jazz:new-declare" "%%cdr" "declarations" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-c-include" define #f 2765 9 2765 28 ("new-c-include" "jazz:new-c-include" "%%cdr" "name" "bind" "jazz:bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-c-declare" define #f 2776 9 2776 28 ("new-c-declare" "jazz:new-c-declare" "%%cdr" "code" "bind" "jazz:bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "c-named-declare-modifiers" define #f 2787 8 2787 38 ("uptodate" "undocumented" "deprecated" "public" "package" "protected" "private")}
      {Lisp-Entry "parse-c-named-declare" define #f 2792 9 2792 35 ("values" "Any" "jazz:Any" "type" "let" "code" "name" "bind" "jazz:bind" "c-named-declare-modifiers" "jazz:c-named-declare-modifiers" "parse-modifiers" "jazz:parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-c-named-declare-declaration" define #f 2799 9 2799 46 ("add-declaration-child" "jazz:add-declaration-child" "effective-declaration" "new-c-named-declare-declaration" "jazz:new-c-named-declare-declaration" "find-child-declaration" "jazz:find-child-declaration" "or" "new-declaration" "let" "%%desourcify" "%%cdr" "parse-c-named-declare" "jazz:parse-c-named-declare" "code" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "resolve-c-named-declare-reference" define #f 2807 9 2807 47 ("%%get-declaration-locator" "walk-error" "jazz:walk-error" "C-Named-Declare-Declaration" "jazz:C-Named-Declare-Declaration" "%%class-is?" "if" "lookup-reference" "jazz:lookup-reference" "c-named-declare-declaration" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-c-named-declare" define #f 2814 9 2814 34 ("require-declaration" "jazz:require-declaration" "new-declaration" "%%cdr" "parse-c-named-declare" "jazz:parse-c-named-declare" "code" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-c-initialize" define #f 2826 9 2826 31 ("new-c-initialize" "jazz:new-c-initialize" "%%cdr" "code" "bind" "jazz:bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "c-type-modifiers" define #f 2837 8 2837 29 ("uptodate" "undocumented" "deprecated" "public" "package" "protected" "private")}
      {Lisp-Entry "parse-c-type" define #f 2842 9 2842 26 ("declare" "scheme-to-c" "c-to-scheme" "values" "%%null?" "if" "Any" "jazz:Any" "type" "let" "conversions" "c-type" "name" "bind" "jazz:bind" "c-type-modifiers" "jazz:c-type-modifiers" "parse-modifiers" "jazz:parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-c-type-declaration" define #f 2852 9 2852 37 ("add-declaration-child" "jazz:add-declaration-child" "effective-declaration" "%%get-c-type-declaration-pointer-types" "%%set-c-type-declaration-pointer-types" "%%when" "new-c-type-declaration" "jazz:new-c-type-declaration" "find-child-declaration" "jazz:find-child-declaration" "or" "new-declaration" "walk-error" "jazz:walk-error" "resolve-c-named-declare-reference" "jazz:resolve-c-named-declare-reference" "%%cons" "%%string?" "let" "resolve-c-type" "jazz:resolve-c-type" "inclusions" "base-type-declaration" "expansion" "kind" "Module-Declaration" "jazz:Module-Declaration" "%%class-is?" "if" "%%desourcify" "%%cdr" "parse-c-type" "jazz:parse-c-type" "declare" "scheme-to-c" "c-to-scheme" "c-type" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-c-type" define #f 2870 9 2870 25 ("require-declaration" "jazz:require-declaration" "%%cdr" "parse-c-type" "jazz:parse-c-type" "declare" "scheme-to-c" "c-to-scheme" "c-type" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "resolve-c-type" define #f 2876 9 2876 28 ("queue-list" "jazz:queue-list" "base-type-declaration" "expansion" "kind" "receive" "walk-error" "jazz:walk-error" "else" "union" "struct" "map" "result-type" "parameter-types" "function" "and" "resolve-expansion" "base-type" "pointer" ",@tag-rest" ",c-string" "%%cdr" "tag-rest" "c-string" "bind" "jazz:bind" "%%cadr" "native" "%%car" "case" "%%pair?" "%%string?" "%%get-declaration-locator" "alias" "values" "enqueue" "jazz:enqueue" "resolve-c-type-reference" "jazz:resolve-c-type-reference" "c-type-declaration" "%%symbol?" "cond" "resolve" "define" "new-queue" "jazz:new-queue" "queue" "let" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "resolve-c-type-reference" define #f 2916 9 2916 38 ("%%get-declaration-locator" "walk-error" "jazz:walk-error" "C-Type-Declaration" "jazz:C-Type-Declaration" "%%class-is?" "if" "lookup-reference" "jazz:lookup-reference" "c-type-declaration" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-c-type-reference" define #f 2923 9 2923 37 ("%%get-module-declaration-inclusions" "%%append" "%%set-module-declaration-inclusions" "%%get-declaration-toplevel" "module-declaration" "let" "resolve-c-type" "jazz:resolve-c-type" "inclusions" "base-type-declaration" "expansion" "kind" "receive" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-c-function" define #f 2935 9 2935 29 (",c-name-or-code" "map" "c-lambda" "new-c-function" "jazz:new-c-function" "expand-c-type-reference" "jazz:expand-c-type-reference" "type" "lambda" "resolve-access" "%%cdr" "c-name-or-code" "result-type" "types" "bind" "jazz:bind" "walk-error" "jazz:walk-error" "%%length" "4" "%%fx=" "list?" "and" "%%assertion" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "c-definition-modifiers" define #f 2949 8 2949 35 ("uptodate" "undocumented" "deprecated" "public" "package" "protected" "private")}
      {Lisp-Entry "parse-c-definition" define #f 2954 9 2954 32 ("values" "%%cdr" "parameters" "Any" "jazz:Any" "type" "%%car" "name" "let" "body" "scope" "c-name" "result-type" "parameter-types" "signature" "bind" "jazz:bind" "c-definition-modifiers" "jazz:c-definition-modifiers" "parse-modifiers" "jazz:parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-c-definition-declaration" define #f 2963 9 2963 43 ("add-declaration-child" "jazz:add-declaration-child" "effective-declaration" "%%set-declaration-source" "map" "new-c-definition-declaration" "jazz:new-c-definition-declaration" "find-child-declaration" "jazz:find-child-declaration" "or" "new-declaration" "walk-parameters" "jazz:walk-parameters" "signature" "expand-c-type-reference" "jazz:expand-c-type-reference" "lambda" "resolve-access" "%%cdr" "parse-c-definition" "jazz:parse-c-definition" "body" "scope" "c-name" "result-type" "parameter-types" "parameters" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-c-definition" define #f 2975 9 2975 31 ("%%set-declaration-source" "walk-body" "jazz:walk-body" "%%set-c-definition-declaration-body" "%%set-c-definition-declaration-signature" "walk-parameters" "jazz:walk-parameters" "augmented-environment" "signature" "require-declaration" "jazz:require-declaration" "new-declaration" "let*" "%%cdr" "parse-c-definition" "jazz:parse-c-definition" "body" "scope" "c-name" "result-type" "parameter-types" "parameters" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "build-pointer-symbol" define #f 2992 9 2992 34 ("%%symbol->string" "%%string-append" "%%string->symbol" "type")}
      {Lisp-Entry "pointer?" define #f 2996 9 2996 22 ("1" "%%fx-" "%%string-ref" "%%eq?" "%%string-length" "lgt" "%%symbol->string" "str" "let*" "type")}
      {Lisp-Entry "build-method-symbol" define #f 3002 9 3002 33 ("symbol->string" "map" "%%symbol->string" "string-append" "apply" "%%string->symbol" "rest" "struct")}
      {Lisp-Entry "parse-structure-name" define #f 3006 9 3006 34 ("%%cddr" "%%cadr" "%%car" "%%symbol->string" "values" "%%symbol?" "if" "name")}
      {Lisp-Entry "kind+type" define #f 3012 9 3012 23 ("values" "%%car" "alias" "%%eq?" "if" "%%get-c-type-declaration-inclusions" "inclusions" "%%get-c-type-declaration-expansion" "expansion" "%%get-c-type-declaration-kind" "kind" "resolve-c-type-reference" "jazz:resolve-c-type-reference" "loop" "let" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-accessor" define #f 3022 9 3022 29 ("values" ",setter-string" "void" "-set!" "setter" ",getter-string" ",type" ",struct*" "c-function" "-ref" "build-method-symbol" "jazz:build-method-symbol" "public" "definition" "getter" "%%memq" "wchar_t-string" "char-string" "type*" "build-pointer-symbol" "jazz:build-pointer-symbol" "struct*" "let*" "else" "%%number->string" "size-string" "cond" "setter-string" "union" "function" "pointer" "native" "case" "%%string-append" "wchar_t" "char" "%%eq?" "or" "if" "getter-string" "%%symbol->string" "id-string" "kind+type" "jazz:kind+type" "expansion" "kind" "receive" "walk-error" "jazz:walk-error" "%%symbol?" "%%integer?" "%%when" "%%null?" "%%not" "and" "%%cddr" "clause-rest" "size" "%%cadr" "id" "%%car" "type" "let" "struct" "clause" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-structure/union" define #f 3078 9 3078 36 ("map" "append" "%%apply" "unsigned-int" "void" "native" "free" "c-function" "make" "build-method-symbol" "jazz:build-method-symbol" "public" "definition" ",@tag*-rest" "pointer" ",struct*" ",@tag-rest" ",c-struct-string" "type" ",struct" "c-type" "begin" "%%list" "jazz:expand-accessor" "setter" "getter" "clause" "expand-accessor" "define" "%%cdr" "%%car" "%%cons" "%%null?" "if" "tag*-rest" "%%string-append" "sizeof" "build-pointer-symbol" "jazz:build-pointer-symbol" "struct*" "let" "parse-structure-name" "jazz:parse-structure-name" "tag-rest" "c-struct-string" "struct" "receive" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-c-structure" define #f 3100 9 3100 32 ("expand-structure/union" "jazz:expand-structure/union" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-c-structure-array" define #f 3104 9 3104 38 ("array-element" "%%string-append" ",struct*" "int" "c-function" "array-make" "build-method-symbol" "jazz:build-method-symbol" "public" "definition" "begin" "%%symbol->string" "%%car" "%%null?" "%%not" "if" "c-struct-string" "build-pointer-symbol" "jazz:build-pointer-symbol" "struct*" "struct" "let*" "rest" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-c-union" define #f 3115 9 3115 28 ("expand-structure/union" "jazz:expand-structure/union" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-c-external" define #f 3124 9 3124 31 (",c-name" ",type" ",params" "c-function" ",s-name" "public" "definition" "%%symbol->string" "%%null?" "if" "c-name" "%%cdr" "params" "%%car" "s-name" "let*" "rest" "signature" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "expand-c-external-so" define #f 3133 9 3133 34 ("WCHAR-string" "values" ",ext-s-name" "result" "WCHAR-copy" "1" ",string-param" "string-length" "+" "WCHAR-array-make" "pt" "let" ",@new-params" ",s-name" "public" "definition" ",c-name" "%%cons" ",type" "c-external" "begin" "%%null?" "if" "c-name" "list-ref" "string-param" "generate-symbol" "jazz:generate-symbol" "param" "lambda" "map" "new-params" "%%cdr" "params" "%%symbol->string" "%%string-append" "%%string->symbol" "ext-s-name" "%%car" "s-name" "let*" "rest" "signature" "arg" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-parameterize" define #f 3156 9 3156 31 ("walk-body" "jazz:walk-body" "queue-list" "jazz:queue-list" "new-parameterize" "jazz:new-parameterize" "walk" "jazz:walk" "%%cons" "enqueue" "jazz:enqueue" "%%cdr" "value" "%%car" "variable" "continuation-capture" "binding-form" "lambda" "for-each" "new-queue" "jazz:new-queue" "expanded-bindings" "unspecified" "%%list" "%%null?" "if" "effective-body" "%%cddr" "body" "%%cadr" "source-code" "jazz:source-code" "bindings" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-with-slots" define #f 3183 9 3183 29 (",@body" ",setter-name" "value" ",getter-name" "%%list" "%%get-slot-declaration-setter-name" "setter-name" "%%get-slot-declaration-getter-name" "getter-name" "lookup-reference" "jazz:lookup-reference" "slot-declaration" "let*" "slot-name" "lambda" "map" "let-symbol" ",object" ",object-symbol" "walk" "jazz:walk" "generate-symbol" "jazz:generate-symbol" "object-symbol" "%%cdr" "body" "object" "slot-names" "bind" "jazz:bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "walk-time" define #f 3203 9 3203 23 ("walk-list" "jazz:walk-list" "new-time-special" "jazz:new-time-special" "%%cdr" "forms" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz" define ("dialect") 3217 21 3217 25 ("new-jazz-dialect" "jazz:new-jazz-dialect")}
      {Lisp-Entry "jazz.dialect" define ("dialect") 3220 21 3220 33 ("new-jazz-dialect" "jazz:new-jazz-dialect")}
      {Lisp-Entry "definition" define ("special") 3224 28 3224 38 ("walk-definition" "jazz:walk-definition" "jazz")}
      {Lisp-Entry "generic" define ("special") 3225 28 3225 35 ("walk-generic" "jazz:walk-generic" "jazz")}
      {Lisp-Entry "specific" define ("special") 3226 28 3226 36 ("walk-specific" "jazz:walk-specific" "jazz")}
      {Lisp-Entry "class" define ("syntax") 3227 28 3227 33 ("expand-class" "jazz:expand-class" "jazz")}
      {Lisp-Entry "%class" define ("special") 3228 28 3228 34 ("walk-%class" "jazz:walk-%class" "jazz")}
      {Lisp-Entry "interface" define ("special") 3229 28 3229 37 ("walk-interface" "jazz:walk-interface" "jazz")}
      {Lisp-Entry "slot" define ("syntax") 3230 28 3230 32 ("expand-slot" "jazz:expand-slot" "jazz")}
      {Lisp-Entry "property" define ("syntax") 3231 28 3231 36 ("expand-property" "jazz:expand-property" "jazz")}
      {Lisp-Entry "%slot" define ("special") 3232 28 3232 33 ("walk-%slot" "jazz:walk-%slot" "jazz")}
      {Lisp-Entry "%property" define ("special") 3233 28 3233 37 ("walk-%slot" "jazz:walk-%slot" "jazz")}
      {Lisp-Entry "method" define ("special") 3234 28 3234 34 ("walk-method" "jazz:walk-method" "jazz")}
      {Lisp-Entry "declare" define ("special") 3235 28 3235 35 ("walk-declare" "jazz:walk-declare" "jazz")}
      {Lisp-Entry "c-include" define ("special") 3236 28 3236 37 ("walk-c-include" "jazz:walk-c-include" "jazz")}
      {Lisp-Entry "c-declare" define ("special") 3237 28 3237 37 ("walk-c-declare" "jazz:walk-c-declare" "jazz")}
      {Lisp-Entry "c-named-declare" define ("special") 3238 28 3238 43 ("walk-c-named-declare" "jazz:walk-c-named-declare" "jazz")}
      {Lisp-Entry "c-initialize" define ("special") 3239 28 3239 40 ("walk-c-initialize" "jazz:walk-c-initialize" "jazz")}
      {Lisp-Entry "c-function" define ("special") 3240 28 3240 38 ("walk-c-function" "jazz:walk-c-function" "jazz")}
      {Lisp-Entry "c-type" define ("special") 3241 28 3241 34 ("walk-c-type" "jazz:walk-c-type" "jazz")}
      {Lisp-Entry "c-definition" define ("special") 3242 28 3242 40 ("walk-c-definition" "jazz:walk-c-definition" "jazz")}
      {Lisp-Entry "specialize" define ("macro") 3243 28 3243 38 ("expand-specialize" "jazz:expand-specialize" "jazz")}
      {Lisp-Entry "%specialize" define ("special") 3244 28 3244 39 ("walk-%specialize" "jazz:walk-%specialize" "jazz")}
      {Lisp-Entry "parameterize" define ("special") 3245 28 3245 40 ("walk-parameterize" "jazz:walk-parameterize" "jazz")}
      {Lisp-Entry "with-slots" define ("special") 3246 28 3246 38 ("walk-with-slots" "jazz:walk-with-slots" "jazz")}
      {Lisp-Entry "with-self" define ("special") 3247 28 3247 37 ("walk-with-self" "jazz:walk-with-self" "jazz")}
      {Lisp-Entry "with-dynamic-self" define ("special") 3248 28 3248 45 ("walk-with-dynamic-self" "jazz:walk-with-dynamic-self" "jazz")}
      {Lisp-Entry "with-local-variables" define ("special") 3249 28 3249 48 ("walk-with-local-variables" "jazz:walk-with-local-variables" "jazz")}
      {Lisp-Entry "cast" define ("special") 3250 28 3250 32 ("walk-cast" "jazz:walk-cast" "jazz")}
      {Lisp-Entry "construct" define ("special") 3251 28 3251 37 ("walk-construct" "jazz:walk-construct" "jazz")}
      {Lisp-Entry "time" define ("special") 3252 28 3252 32 ("walk-time" "jazz:walk-time" "jazz")}
      {Lisp-Entry "remotable-stub" define ("macro") 3253 28 3253 42 ("expand-remotable-stub" "jazz:expand-remotable-stub" "jazz")}
      {Lisp-Entry "assert" define ("syntax") 3254 28 3254 34 ("expand-assert" "jazz:expand-assert" "jazz")}
      {Lisp-Entry "assertion" define ("syntax") 3255 28 3255 37 ("expand-assertion" "jazz:expand-assertion" "jazz")}
      {Lisp-Entry "c-structure" define ("macro") 3256 28 3256 39 ("expand-c-structure" "jazz:expand-c-structure" "jazz")}
      {Lisp-Entry "c-union" define ("macro") 3257 28 3257 35 ("expand-c-union" "jazz:expand-c-union" "jazz")}
      {Lisp-Entry "c-external" define ("macro") 3258 28 3258 38 ("expand-c-external" "jazz:expand-c-external" "jazz")}
      {Lisp-Entry "c-external-so" define ("macro") 3259 28 3259 41 ("expand-c-external-so" "jazz:expand-c-external-so" "jazz")}
      {Lisp-Entry "com-external" define ("macro") 3260 28 3260 40 ("expand-com-external" "jazz:expand-com-external" "jazz")}
      {Lisp-Entry "declaration-path" define ("macro") 3261 28 3261 44 ("expand-declaration-path" "jazz:expand-declaration-path" "jazz")}
      {Lisp-Entry "declaration-locator" define ("macro") 3262 28 3262 47 ("expand-declaration-locator" "jazz:expand-declaration-locator" "jazz")}
      {Lisp-Entry "debug-assert" define ("syntax") 3263 28 3263 40 ("expand-debug-assert" "jazz:expand-debug-assert" "jazz")}
      {Lisp-Entry "debug-assertion" define ("syntax") 3264 28 3264 43 ("expand-debug-assertion" "jazz:expand-debug-assertion" "jazz")}}})
"ecase"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "ecase.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.syntax.ecase" module #f 37 18 37 43 ("scheme")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.dialect.kernel")}
      {Lisp-Entry "error" native ("native") 43 16 43 26 ()}
      {Lisp-Entry "ecase" macro #f 53 16 53 21 ("desourcify" "eqv?" "=" "list" "integer?" "value" "or" "pair?" "cons" "else" "eq?" "body" "car" "selector" "clause" "map" "cond" "symbol" "lambda" "with-uniqueness" "sourcify-if" "cddr" "clauses" "cadr" "target" "let" "error" "source-code" "cdr" "null?" "if" "form-src")}}})
"enumeration"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "enumeration.scm"} 1288870741 scheme
    {Lisp-Entry "jazz.dialect.syntax.enumeration" module #f 37 18 37 49 ("scheme")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.dialect.kernel")}
      {Lisp-Entry "enumeration" macro #f 43 16 43 27 (",name" "new" "symbol->string" "string-append" "string->symbol" "define" "name" "name-src" "lambda" "map" "Enumeration-Member" "extends" ",enumeration-name" "class" "begin" "cddr" "names" "source-code" "cadr" "enumeration-name" "let" "form-src")}}})
"exception"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "exception.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.exception" unit #f 39 16 39 43 ()
      {Lisp-Entry "get-exception-hook" define #f 47 9 47 32 ("##primordial-exception-handler-hook")}
      {Lisp-Entry "set-exception-hook" define #f 50 9 50 32 ("##primordial-exception-handler-hook" "set!" "hook")}
      {Lisp-Entry "invoke-exception-hook" define #f 54 9 54 35 ("##thread-end-with-uncaught-exception!" "exc" "hook")}
      {Lisp-Entry "system-exception-hook" define #f 63 9 63 35 ("##repl-exception-handler-hook" "other" "exc")}
      {Lisp-Entry "set-terminal-title" define #f 72 9 72 32 ("repl-output-port" "display")}
      {Lisp-Entry "bring-terminal-to-front" define #f 75 9 75 37 ("repl-output-port" "display")}
      {Lisp-Entry "clear-terminal" define #f 78 9 78 28 ("repl-output-port" "display")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "dialect" "language" "exception.jazz"} 1292705246 jazz
    {Lisp-Entry "jazz.dialect.language.exception" module #f 37 18 37 49 ("jazz.dialect")
      {Lisp-Entry "proclaim" anonymous #f 40 1 40 9 ("optimizations" "warn")}
      {Lisp-Entry "import" anonymous #f 43 1 43 7 ("jazz.dialect.language.object" "jazz.dialect.language.geometry" "jazz.dialect.language.functional" "jazz.dialect.language.format" "jazz.dialect.kernel")}
      {Lisp-Entry "*exception-debugger*" definition #f 55 12 55 32 ()}
      {Lisp-Entry "get-exception-debugger" definition #f 59 20 59 42 ("*exception-debugger*")}
      {Lisp-Entry "set-exception-debugger" definition #f 62 20 62 42 ("*exception-debugger*" "set!" "exception-debugger")}
      {Lisp-Entry "current-exception-debugger" definition #f 66 19 66 45 ("make-parameter")}
      {Lisp-Entry "exception-debugger-hook" definition #f 70 21 70 44 ("system-exception-hook" "if" "*exception-debugger*" "current-exception-debugger" "or" "exception-debugger" "let" "other" "exc")}
      {Lisp-Entry "with-exception-debugger" definition #f 77 20 77 43 ("current-exception-debugger" "parameterize" "thunk" "exception-debugger")}
      {Lisp-Entry "system-exception-debugger" definition #f 82 20 82 45 ("system-exception-hook" "invoke-exception-hook" "exc")}
      {Lisp-Entry "with-system-exception-debugger" definition #f 86 20 86 50 ("system-exception-debugger" "with-exception-debugger" "thunk")}
      {Lisp-Entry "Exception" class #f 91 7 91 16 ("Object")
        {Lisp-Entry "get-message" method #f 94 26 94 37 ()}
        {Lisp-Entry "present-message" method #f 98 26 98 41 ("get-message" "list" "rest")}
        {Lisp-Entry "print" method #f 102 20 102 25 ("get-message" "format" "lambda" "self" "print-unreadable" "readably" "output")}}
      {Lisp-Entry "exception?" definition #f 108 20 108 30 ("Exception" "is?" "object?" "and" "obj")}
      {Lisp-Entry "Exception-Detail" class #f 113 15 113 31 ("Object")
        {Lisp-Entry "icon" slot #f 116 8 116 12 ()}
        {Lisp-Entry "get-icon" accessor #f 116 24 116 32 ()}
        {Lisp-Entry "title" slot #f 117 8 117 13 ()}
        {Lisp-Entry "get-title" accessor #f 117 24 117 32 ()}
        {Lisp-Entry "location" slot #f 118 8 118 16 ()}
        {Lisp-Entry "get-location" accessor #f 118 24 118 32 ()}
        {Lisp-Entry "children" slot #f 119 8 119 16 ()}
        {Lisp-Entry "get-children" accessor #f 119 24 119 32 ()}
        {Lisp-Entry "initialize" method #f 122 20 122 30 ("children~self" "location~self" "title~self" "self" "icon~self" "set!" "nextmethod" "children" "location" "title" "icon")}
        {Lisp-Entry "print" method #f 130 20 130 25 ("children" "location" "title" "icon" "self" "class-of" "category-name" "format" "readably" "output")}}
      {Lisp-Entry "System-Exception" class #f 139 7 139 23 ("Exception")
        {Lisp-Entry "exception" slot #f 142 8 142 17 ()}
        {Lisp-Entry "get-exception" accessor #f 142 25 142 33 ()}
        {Lisp-Entry "initialize" method #f 145 20 145 30 ("self" "exception~self" "set!" "nextmethod" "exception")}}
      {Lisp-Entry "wrap-exception" definition #f 150 20 150 34 ("System-Exception" "new" "exception?" "if" "obj")}
      {Lisp-Entry "Break" class #f 156 7 156 12 ("Exception")
        {Lisp-Entry "continue" slot #f 159 8 159 16 ()}
        {Lisp-Entry "initialize" method #f 162 20 162 30 ("self" "continue~self" "set!" "nextmethod" "continue")}}
      {Lisp-Entry "Continue" class #f 167 7 167 15 ("Exception")}
      {Lisp-Entry "Error" class #f 170 7 170 12 ("generate" "override" "Exception")
        {Lisp-Entry "message" slot #f 173 8 173 15 ()}
        {Lisp-Entry "set-message" accessor #f 173 23 173 31 ()}
        {Lisp-Entry "initialize" method #f 176 20 176 30 ("set-message" "nextmethod" "message" "message:")}}
      {Lisp-Entry "error?" definition #f 181 20 181 26 ("Error" "is?" "object?" "and" "obj")}
      {Lisp-Entry "Read-Error" class #f 186 15 186 25 ("Error")
        {Lisp-Entry "source" slot #f 189 8 189 14 ()}
        {Lisp-Entry "get-source" accessor #f 189 22 189 30 ()}
        {Lisp-Entry "start" slot #f 190 8 190 13 ()}
        {Lisp-Entry "get-start" accessor #f 190 22 190 30 ()}
        {Lisp-Entry "end" slot #f 191 8 191 11 ()}
        {Lisp-Entry "get-end" accessor #f 191 22 191 30 ()}
        {Lisp-Entry "initialize" method #f 194 20 194 30 ("end~self" "start~self" "self" "source~self" "set!" "nextmethod" "apply" "others" "end" "start" "source" "bind-keywords" "rest")}
        {Lisp-Entry "get-range" method #f 202 18 202 27 ("end" "start" "Range" "new")}}
      {Lisp-Entry "Parse-Error" class #f 206 15 206 26 ("Error")
        {Lisp-Entry "source" slot #f 209 8 209 14 ()}
        {Lisp-Entry "get-source" accessor #f 209 22 209 30 ()}
        {Lisp-Entry "start" slot #f 210 8 210 13 ()}
        {Lisp-Entry "get-start" accessor #f 210 22 210 30 ()}
        {Lisp-Entry "end" slot #f 211 8 211 11 ()}
        {Lisp-Entry "get-end" accessor #f 211 22 211 30 ()}
        {Lisp-Entry "initialize" method #f 214 20 214 30 ("end~self" "start~self" "self" "source~self" "set!" "nextmethod" "apply" "others" "end" "start" "source" "bind-keywords" "rest")}}
      {Lisp-Entry "Conversion-Error" class #f 222 15 222 31 ("Parse-Error")
        {Lisp-Entry "object" slot #f 225 8 225 14 ()}
        {Lisp-Entry "get-object" accessor #f 225 22 225 30 ()}
        {Lisp-Entry "type" slot #f 226 8 226 12 ()}
        {Lisp-Entry "get-type" accessor #f 226 22 226 30 ()}
        {Lisp-Entry "initialize" method #f 229 20 229 30 ("type~self" "self" "object~self" "set!" "nextmethod" "apply" "others" "type" "object" "bind-keywords" "rest")}
        {Lisp-Entry "get-message" method #f 236 20 236 31 ("format-gender" "object" "format" "category-identifier" "string?" "if" "type" "let")}}
      {Lisp-Entry "Signal" class #f 244 7 244 13 ("Exception")}
      {Lisp-Entry "Cancel-Signal" class #f 247 15 247 28 ("Signal")}
      {Lisp-Entry "call-with-catch" definition #f 250 20 250 35 ("is?" "object?" "and" "procedure?" "if" "obj" "lambda" "with-exception-filter" "thunk" "catcher" "predicate/type")}
      {Lisp-Entry "throw" definition #f 268 20 268 25 ("raise" "exception")}
      {Lisp-Entry "throw-cancel" definition #f 272 27 272 39 ("Cancel-Signal" "new" "throw")}
      {Lisp-Entry "signal" definition #f 276 19 276 25 ("throw")}
      {Lisp-Entry "error" definition #f 279 20 279 25 ("format" "apply" "message:" "Error" "new" "signal" "rest")}
      {Lisp-Entry "disabled-functionality" definition #f 283 20 283 42 ("error")}
      {Lisp-Entry "must-implement" definition #f 287 20 287 34 ("or" "error" "what" "definition-name")}
      {Lisp-Entry "warn" definition #f 293 20 293 24 ("apply" ":console" "format" "rest" "string")}
      {Lisp-Entry "warn-unimplemented" definition #f 298 20 298 38 (":console" "format" "name")}
      {Lisp-Entry "Restart" class #f 307 7 307 14 ("Object")
        {Lisp-Entry "name" slot #f 310 8 310 12 ()}
        {Lisp-Entry "get-name" accessor #f 310 23 310 31 ()}
        {Lisp-Entry "message" slot #f 311 8 311 15 ()}
        {Lisp-Entry "get-message" accessor #f 311 23 311 31 ()}
        {Lisp-Entry "handler" slot #f 312 8 312 15 ()}
        {Lisp-Entry "get-handler" accessor #f 312 23 312 31 ()}
        {Lisp-Entry "initialize" method #f 315 20 315 30 ("handler~self" "message~self" "self" "name~self" "set!" "nextmethod" "handler" "message" "name")}
        {Lisp-Entry "print" method #f 322 20 322 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "output")}}
      {Lisp-Entry "current-restarts" definition #f 329 19 329 35 ("make-parameter")}
      {Lisp-Entry "with-restart-handler" definition #f 333 20 333 40 ("Restart" "new" "cons" "current-restarts" "parameterize" "thunk" "handler" "message" "name")}
      {Lisp-Entry "with-restart-catcher" definition #f 338 20 338 40 ("else" "car" "null?" "not" "cond" "continuation-return" "rest" "with-restart-handler" "catcher-cont" "lambda" "continuation-capture" "thunk" "catcher" "message" "name")}
      {Lisp-Entry "find-restart" definition #f 350 20 350 32 ("current-restarts" "get-name" "get-name~" "eq?" "restart" "lambda" "find-if" "name")}
      {Lisp-Entry "find-restarts" definition #f 356 20 356 33 ("current-restarts" "get-name" "get-name~" "eq?" "restart" "lambda" "collect-if" "name")}
      {Lisp-Entry "invoke-restart" definition #f 362 20 362 34 ("apply" "get-handler" "get-handler~" "handler" "let" "rest" "restart")}
      {Lisp-Entry "new-system-thread" definition #f 372 20 372 37 ("with-system-exception-debugger" "lambda" "new-thread" "apply" "rest" "thunk")}}})
"foreign"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "foreign.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.foreign" unit #f 37 16 37 41 ()
      {Lisp-Entry "foreign?" define #f 42 12 42 25 ("foreign?")}
      {Lisp-Entry "foreign-address" define #f 43 12 43 32 ("foreign-address")}
      {Lisp-Entry "foreign-release!" define #f 44 12 44 33 ("foreign-release!")}
      {Lisp-Entry "foreign-released?" define #f 45 12 45 34 ("foreign-released?")}
      {Lisp-Entry "foreign-tags" define #f 46 12 46 29 ("foreign-tags")}
      {Lisp-Entry "still-obj-refcount-dec!" define #f 51 13 51 41 ("%%still-obj-refcount-dec!" "foreign")}
      {Lisp-Entry "still-obj-refcount-inc!" define #f 54 13 54 41 ("%%still-obj-refcount-inc!" "foreign")}}})
"format"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "language" "format.jazz"} 1299704435 jazz
    {Lisp-Entry "jazz.dialect.language.format" module #f 37 18 37 46 ("jazz.dialect")
      {Lisp-Entry "proclaim" anonymous #f 40 1 40 9 ("optimizations" "warn")}
      {Lisp-Entry "import" anonymous #f 43 1 43 7 ("jazz.dialect.language.functional" "jazz.dialect.kernel")}
      {Lisp-Entry "error" native ("native") 47 16 47 26 ()}
      {Lisp-Entry "format" definition #f 68 20 68 26 ("with-printer" "list" "<list>" "string" "<string>" ":string" "string?" "parse-format" "cdr" "prog1" ":reader" "detail:" "unspecified" "empty-value:" "properties:" "3" "precision:" "after:" "before:" "last-separator:" "separator:" "padding:" "justify:" "width:" "list?:" "get-list?" "not-found:" "getf" "keyword" "keyword-parameter" ":v" "param" "default" ":right" ":left" "n" ">=" "cardinality" "size" "justify" "buffer" "get-padding" "padding" "get-justify" "justification" "get-width" "width" "proc" "localize" "unimplemented" "force-output" "-" "fresh-line" "newline" "do" "repeat" "loop" "1" "optional-parameter" "count" "cddr" "neq?" "unspecified?" "memq" "cadr" "value" "car" "key" "not-null?" "scan" "get-empty-value" "empty-value" "get-properties" "properties" "print-list" "get-detail" "get-after" "after" "get-before" "before" "get-last-separator" "last-separator" "get-separator" "separator" "let*" "print-real" "get-precision" "precision" "print-hexadecimal" "print-binary" "print-unsigned" "print-expr" "detail" "textual" "write" "display" "lambda" "with-justification" "argument" "peek-argument" "next-argument" "or" "open-input-string" "subreader" "explicit?" "get-output-string" "begin" "open-output-string" "output" "read-control-string" "process-conditional" "eqv?" "cond" "null?" "eq?" "read-delimited" "arguments-empty?" "toplevel?" "and" "localize-directive" "z" "force-directive" "!" "freshline-directive" "$" "newline-directive" "%" "tab-directive" "&" "column-directive" "_" "properties-directive" "k" "list-directive" "l" "real-directive" "r" "hexadecimal-directive" "x" "binary-directive" "b" "unsigned-directive" "u" "char-directive" "print-directive" "p" "text-directive" "t" "write-directive" "s" "display-directive" "a" "read-parameters" "parameters" "read" "directive" "else" "conditional-directive" "error" "peek-char" "write-char" "when" "require-char" "case" "set!" "eof-object?" "if" "read-char" "c" "not" "while" "done?" "let" "output?" "input" "process" "arguments-scan" "control-reader" "out" "arguments" "control-string" "destination" "process-format" "define" "rest")}
      {Lisp-Entry "format-cardinality" definition #f 420 20 420 38 ("->string" "0" "=" "if" "fx" "<fx>" "n")}
      {Lisp-Entry "format-plural" definition #f 426 20 426 33 ("1" "=" "if" "plural" "fx" "<fx>" "n")}
      {Lisp-Entry "format-gender" definition #f 432 20 432 33 ("first" "vowel?" "if" "word")}
      {Lisp-Entry "format-is/are" definition #f 438 20 438 33 ("1" "=" "if" "fx" "<fx>" "n")}
      {Lisp-Entry "format-was/were" definition #f 444 20 444 35 ("1" "=" "if" "fx" "<fx>" "n")}
      {Lisp-Entry "format-y/ies" definition #f 450 20 450 32 ("1" "=" "if" "fx" "<fx>" "n")}
      {Lisp-Entry "format-following" definition #f 456 20 456 36 ("format" "1" "=" "if" "fx" "<fx>" "n" "name")}
      {Lisp-Entry "print-expr" definition #f 467 13 467 23 ("print" "print~" "current-output-port" "output" "detail" "expr")}
      {Lisp-Entry "print-unsigned" definition #f 471 13 471 27 ("print-unsigned" "unimplemented" "current-output-port" "output" "n")}
      {Lisp-Entry "print-binary" definition #f 475 13 475 25 ("2" "number->string" "display" "current-output-port" "output" "n")}
      {Lisp-Entry "print-hexadecimal" definition #f 479 13 479 30 ("16" "number->string" "display" "current-output-port" "output" "n")}
      {Lisp-Entry "print-real" definition #f 483 13 483 23 ("display" "lsf" "string-length" "lsi" "set!" "string-set!" "+" "sf" "number->string" ">" "=" "and" "0" "<" "if" "string-append" "si" "modulo" "f" "quotient" "i" "10" "expt" "abs" "*" "round" "inexact->exact" "floor" "n" "let" "current-output-port" "output" "d" "r")}
      {Lisp-Entry "print-list" definition #f 500 13 500 23 ("null?" "pair?" "if" "cdr" "next" "print" "print~" "car" "expr" "scan" "iter" "let" "display" "not-null?" "when" "current-output-port" "output" "detail" "after" "before" "last-separator" "separator" "list")}}})
"functional"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "language" "functional.jazz"} 1300813586 jazz
    {Lisp-Entry "jazz.dialect.language.functional" module #f 37 18 37 50 ("terminal-port" ":terminal" "register-printer" "axis-find-in" "axis-find" "Axis" "<Axis>" "axis-for-each" "instantiate-ends-with?" "instantiate-starts-with?" "string-find-in" "instantiate-find-in" "string-find" "instantiate-find" "instantiate-butlast" "string" "<string>" "string-for-each" "instantiate-for-each" "jazz.dialect")
      {Lisp-Entry "proclaim" anonymous #f 40 1 40 9 ("optimizations" "warn")}
      {Lisp-Entry "import" anonymous #f 43 1 43 7 ("irregex" "jazz.dialect.language.object" "jazz.dialect.kernel")}
      {Lisp-Entry "error" native ("native") 48 16 48 26 ()}
      {Lisp-Entry "system-format" native ("native") 49 16 49 34 ()}
      {Lisp-Entry "Module" class #f 57 7 57 13 ("Object")
        {Lisp-Entry "name" slot #f 60 8 60 12 ()}
        {Lisp-Entry "get-name" accessor #f 60 23 60 31 ()}
        {Lisp-Entry "access" slot #f 61 8 61 14 ()}
        {Lisp-Entry "get-access" accessor #f 61 23 61 31 ()}
        {Lisp-Entry "exports" slot #f 62 8 62 15 ()}
        {Lisp-Entry "get-exports" accessor #f 62 23 62 31 ()}
        {Lisp-Entry "entries" slot #f 63 8 63 15 ()}
        {Lisp-Entry "get-entries" accessor #f 63 23 63 31 ()}}
      {Lisp-Entry "Field" class #f 71 7 71 12 ("Object")
        {Lisp-Entry "name" slot #f 74 8 74 12 ()}
        {Lisp-Entry "get-name" accessor #f 74 20 74 28 ()}
        {Lisp-Entry "print" method #f 77 20 77 25 ("get-name" "system-format" "lambda" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "field-locator" method #f 83 38 83 51 ()}
        {Lisp-Entry "field-ref" method #f 84 38 84 47 ()}
        {Lisp-Entry "field-set!" method #f 85 38 85 48 ("value")}}
      {Lisp-Entry "Native" class #f 93 7 93 13 ("Field")
        {Lisp-Entry "symbol" slot #f 96 8 96 14 ()}
        {Lisp-Entry "get-symbol" accessor #f 96 22 96 30 ()}
        {Lisp-Entry "field-locator" method #f 99 20 99 33 ("symbol")}
        {Lisp-Entry "field-ref" method #f 103 20 103 29 ("global-ref" "symbol" "global-bound?" "and")}
        {Lisp-Entry "field-set!" method #f 108 20 108 30 ("global-set!" "symbol" "global-bound?" "when" "value")}}
      {Lisp-Entry "Runtime-Reference" class #f 118 7 118 24 ("Object")
        {Lisp-Entry "resolver" slot #f 121 8 121 16 ()}
        {Lisp-Entry "get-resolver" accessor #f 121 29 121 37 ()}
        {Lisp-Entry "serialization" slot #f 122 8 122 21 ()}
        {Lisp-Entry "get-serialization" accessor #f 122 29 122 37 ()}}
      {Lisp-Entry "Define" class #f 130 7 130 13 ("Field")
        {Lisp-Entry "locator" slot #f 133 8 133 15 ()}
        {Lisp-Entry "get-locator" accessor #f 133 23 133 31 ()}
        {Lisp-Entry "field-locator" method #f 136 20 136 33 ("locator")}
        {Lisp-Entry "field-ref" method #f 140 20 140 29 ("locator" "global-ref")}
        {Lisp-Entry "field-set!" method #f 144 20 144 30 ("locator" "global-set!" "value")}}
      {Lisp-Entry "Definition" class #f 153 7 153 17 ("Field")
        {Lisp-Entry "locator" slot #f 156 8 156 15 ()}
        {Lisp-Entry "get-locator" accessor #f 156 23 156 31 ()}
        {Lisp-Entry "field-locator" method #f 159 20 159 33 ("locator")}
        {Lisp-Entry "field-ref" method #f 163 20 163 29 ("locator" "global-ref")}
        {Lisp-Entry "field-set!" method #f 167 20 167 30 ("locator" "global-set!" "value")}}
      {Lisp-Entry "Type" class #f 176 7 176 11 ("Object")}
      {Lisp-Entry "Category" class #f 184 7 184 15 ("Type")
        {Lisp-Entry "name" slot #f 187 8 187 12 ()}
        {Lisp-Entry "get-name" accessor #f 187 28 187 36 ()}
        {Lisp-Entry "fields" slot #f 188 8 188 14 ()}
        {Lisp-Entry "get-fields" accessor #f 188 28 188 36 ()}
        {Lisp-Entry "virtual-size" slot #f 189 8 189 20 ()}
        {Lisp-Entry "get-virtual-size" accessor #f 189 28 189 36 ()}
        {Lisp-Entry "ancestors" slot #f 190 8 190 17 ()}
        {Lisp-Entry "get-ancestors" accessor #f 190 28 190 36 ()}
        {Lisp-Entry "descendants" slot #f 191 8 191 19 ()}
        {Lisp-Entry "get-descendants" accessor #f 191 28 191 36 ()}
        {Lisp-Entry "print" method #f 194 20 194 25 ("get-name" "system-format" "lambda" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "mop-category-field" method #f 200 26 200 44 ("self" "category-field" "field-name")}
        {Lisp-Entry "mop-field-value" method #f 204 26 204 41 ("property")}}
      {Lisp-Entry "typed?" definition #f 208 20 208 26 ("class-of" "get-ancestors" "get-ancestors~" "get-name" "get-name~" "eq?" "category" "lambda" "some?" "category-identifier" "obj")}
      {Lisp-Entry "Class" class #f 219 7 219 12 ("Category")
        {Lisp-Entry "ascendant" slot #f 222 8 222 17 ()}
        {Lisp-Entry "get-ascendant" accessor #f 222 34 222 42 ()}
        {Lisp-Entry "interfaces" slot #f 223 8 223 18 ()}
        {Lisp-Entry "get-interfaces" accessor #f 223 34 223 42 ()}
        {Lisp-Entry "slots" slot #f 224 8 224 13 ()}
        {Lisp-Entry "get-slots" accessor #f 224 34 224 42 ()}
        {Lisp-Entry "instance-slots" slot #f 225 8 225 22 ()}
        {Lisp-Entry "get-instance-slots" accessor #f 225 34 225 42 ()}
        {Lisp-Entry "instance-size" slot #f 226 8 226 21 ()}
        {Lisp-Entry "get-instance-size" accessor #f 226 34 226 42 ()}
        {Lisp-Entry "level" slot #f 227 8 227 13 ()}
        {Lisp-Entry "get-level" accessor #f 227 34 227 42 ()}
        {Lisp-Entry "dispatch-table" slot #f 228 8 228 22 ()}
        {Lisp-Entry "get-dispatch-table" accessor #f 228 34 228 42 ()}
        {Lisp-Entry "core-method-alist" slot #f 229 8 229 25 ()}
        {Lisp-Entry "get-core-method-alist" accessor #f 229 34 229 42 ()}
        {Lisp-Entry "core-virtual-alist" slot #f 230 8 230 26 ()}
        {Lisp-Entry "get-core-virtual-alist" accessor #f 230 34 230 42 ()}
        {Lisp-Entry "core-virtual-names" slot #f 231 8 231 26 ()}
        {Lisp-Entry "get-core-virtual-names" accessor #f 231 34 231 42 ()}
        {Lisp-Entry "core-vtable" slot #f 232 8 232 19 ()}
        {Lisp-Entry "get-core-vtable" accessor #f 232 34 232 42 ()}
        {Lisp-Entry "class-table" slot #f 233 8 233 19 ()}
        {Lisp-Entry "get-class-table" accessor #f 233 34 233 42 ()}
        {Lisp-Entry "interface-table" slot #f 234 8 234 23 ()}
        {Lisp-Entry "get-interface-table" accessor #f 234 34 234 42 ()}
        {Lisp-Entry "coerce-object" method #f 237 26 237 39 ("self" "category-name" "error" "obj")}
        {Lisp-Entry "external-name" method #f 241 26 241 39 ("self" "category-name" "error" "when" "error?" "error?:")}
        {Lisp-Entry "mop-instance-slots" method #f 246 26 246 44 ("get-instance-slots" "object")}}
      {Lisp-Entry "Object-Class" class #f 250 7 250 19 ("Class")}
      {Lisp-Entry "class?" definition #f 253 27 253 33 ("Class" "is?" "obj")}
      {Lisp-Entry "instance-of?" definition #f 257 27 257 39 ("class-of" "eq?" "class" "obj")}
      {Lisp-Entry "coerce" definition #f 261 27 261 33 ("coerce-object" "coerce-object~" "Class" "<Class>" "class" "Object" "<Object>" "object")}
      {Lisp-Entry "allocate" definition #f 265 20 265 28 ("call-into-abstract" "int" "<int>" "size" "Class" "<Class>" "class")}
      {Lisp-Entry "Interface" class #f 274 7 274 16 ("Category")
        {Lisp-Entry "ascendants" slot #f 277 8 277 18 ()}
        {Lisp-Entry "get-ascendants" accessor #f 277 26 277 34 ()}
        {Lisp-Entry "rank" slot #f 278 8 278 12 ()}
        {Lisp-Entry "get-rank" accessor #f 278 26 278 34 ()}}
      {Lisp-Entry "Method" class #f 286 7 286 13 ("Field")
        {Lisp-Entry "dispatch-type" slot #f 289 8 289 21 ()}
        {Lisp-Entry "get-dispatch-type" accessor #f 289 35 289 43 ()}
        {Lisp-Entry "implementation" slot #f 290 8 290 22 ()}
        {Lisp-Entry "get-implementation" accessor #f 290 35 290 43 ()}
        {Lisp-Entry "implementation-tree" slot #f 291 8 291 27 ()}
        {Lisp-Entry "get-implementation-tree" accessor #f 291 35 291 43 ()}
        {Lisp-Entry "category-rank" slot #f 292 8 292 21 ()}
        {Lisp-Entry "get-category-rank" accessor #f 292 35 292 43 ()}
        {Lisp-Entry "implementation-rank" slot #f 293 8 293 27 ()}
        {Lisp-Entry "get-implementation-rank" accessor #f 293 35 293 43 ()}}
      {Lisp-Entry "object-method" definition #f 297 20 297 33 ("apply" "rest" "lambda" "class-of" "category-field" "get-implementation" "get-implementation~" "impl" "let" "name" "object")}
      {Lisp-Entry "Method-Node" class #f 308 7 308 18 ("Object")
        {Lisp-Entry "category" slot #f 311 8 311 16 ()}
        {Lisp-Entry "get-category" accessor #f 311 35 311 43 ()}
        {Lisp-Entry "implementation" slot #f 312 8 312 22 ()}
        {Lisp-Entry "get-implementation" accessor #f 312 35 312 43 ()}
        {Lisp-Entry "next-node" slot #f 313 8 313 17 ()}
        {Lisp-Entry "get-next-node" accessor #f 313 35 313 43 ()}
        {Lisp-Entry "next-implementation" slot #f 314 8 314 27 ()}
        {Lisp-Entry "get-next-implementation" accessor #f 314 35 314 43 ()}
        {Lisp-Entry "children" slot #f 315 8 315 16 ()}
        {Lisp-Entry "get-children" accessor #f 315 35 315 43 ()}}
      {Lisp-Entry "Queue" class #f 323 7 323 12 ("Object")
        {Lisp-Entry "head" slot #f 326 8 326 12 ()}
        {Lisp-Entry "get-head" accessor #f 326 23 326 31 ()}
        {Lisp-Entry "tail" slot #f 327 8 327 12 ()}
        {Lisp-Entry "get-tail" accessor #f 327 23 327 31 ()}
        {Lisp-Entry "shared?" slot #f 328 8 328 15 ()}
        {Lisp-Entry "get-shared?" accessor #f 328 23 328 31 ()}}
      {Lisp-Entry "Generic" class #f 336 7 336 14 ("Object")
        {Lisp-Entry "locator" slot #f 339 8 339 15 ()}
        {Lisp-Entry "get-locator" accessor #f 339 36 339 44 ()}
        {Lisp-Entry "name" slot #f 340 8 340 12 ()}
        {Lisp-Entry "get-name" accessor #f 340 36 340 44 ()}
        {Lisp-Entry "root-specific" slot #f 341 8 341 21 ()}
        {Lisp-Entry "get-root-specific" accessor #f 341 36 341 44 ()}
        {Lisp-Entry "pending-specifics" slot #f 342 8 342 25 ()}
        {Lisp-Entry "get-pending-specifics" accessor #f 342 36 342 44 ()}}
      {Lisp-Entry "Specific" class #f 345 7 345 15 ("Object")
        {Lisp-Entry "dynamic-signature" slot #f 348 8 348 25 ()}
        {Lisp-Entry "get-dynamic-signature" accessor #f 348 36 348 44 ()}
        {Lisp-Entry "implementation" slot #f 349 8 349 22 ()}
        {Lisp-Entry "get-implementation" accessor #f 349 36 349 44 ()}
        {Lisp-Entry "ancestor-specifics" slot #f 350 8 350 26 ()}
        {Lisp-Entry "get-ancestor-specifics" accessor #f 350 36 350 44 ()}
        {Lisp-Entry "descendant-specifics" slot #f 351 8 351 28 ()}
        {Lisp-Entry "get-descendant-specifics" accessor #f 351 36 351 44 ()}}
      {Lisp-Entry "Boolean-Class" class #f 359 7 359 20 ("Class")}
      {Lisp-Entry "Boolean" class #f 362 17 362 24 ("Object" "Boolean-Class")
        {Lisp-Entry "initialize" method #f 365 20 365 30 ("native-class" "rest")}}
      {Lisp-Entry "/=" definition #f 369 27 369 29 ("=" "not" "y" "x")}
      {Lisp-Entry "neq?" definition #f 373 27 373 31 ("eq?" "not" "y" "x")}
      {Lisp-Entry "xor" definition #f 377 27 377 30 ("not" "and" "or" "y" "x")}
      {Lisp-Entry "nu=?" definition #f 382 20 382 24 ("cdr" "else" "car" "neq?" "null?" "cond" "scan" "iter" "first" "let" ":equal" "compare" "eq?" "and" "rest" "m" "n")}
      {Lisp-Entry "nu/=?" definition #f 394 20 394 25 ("nu=?" "apply" "not" ":equal" "compare" "neq?" "null?" "if" "rest" "m" "n")}
      {Lisp-Entry "nu<?" definition #f 400 20 400 24 ("cdr" "car" "value" "null?" "if" "max" "scan" "iter" "let" "error" "else" ":equal" ":greater" ":less" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu<=?" definition #f 415 20 415 25 ("cdr" "car" "value" "null?" "if" "max" "scan" "iter" "let" "error" "else" ":greater" ":equal" ":less" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu>?" definition #f 430 20 430 24 ("cdr" "car" "value" "null?" "if" "min" "scan" "iter" "let" "error" "else" ":equal" ":less" ":greater" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu>=?" definition #f 445 20 445 25 ("cdr" "car" "value" "null?" "if" "min" "scan" "iter" "let" "error" "else" ":less" ":equal" ":greater" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "ci=?" definition #f 460 20 460 24 ("finally" "return" ":equal" "ci-compare" "neq?" "when" "cdr" "in" "object" "for" "loop" "car" "first" "let" "null?" "if" "rest")}
      {Lisp-Entry "ci/=?" definition #f 470 20 470 25 ("ci=?" "apply" "not" "rest")}
      {Lisp-Entry "ci<?" definition #f 474 20 474 24 ("error" "else" ":equal" ":greater" "cdr" ":less" "ci-compare" "case" "car" "value" "null?" "if" "max" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci<=?" definition #f 485 20 485 25 ("error" "else" ":greater" "cdr" ":equal" ":less" "ci-compare" "case" "car" "value" "null?" "if" "max" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci>?" definition #f 496 20 496 24 ("error" "else" ":equal" ":less" "cdr" ":greater" "ci-compare" "case" "car" "value" "null?" "if" "min" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci>=?" definition #f 507 20 507 25 ("error" "else" ":less" "cdr" ":equal" ":greater" "ci-compare" "case" "car" "value" "null?" "if" "min" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "di=?" definition #f 518 20 518 24 (":equal" "di-compare" "eq?" "y" "x")}
      {Lisp-Entry "di<?" definition #f 521 20 521 24 (":less" "di-compare" "eq?" "y" "x")}
      {Lisp-Entry "di<=?" definition #f 524 20 524 25 (":equal" ":less" "di-compare" "memq?" "y" "x")}
      {Lisp-Entry "di>?" definition #f 527 20 527 24 (":greater" "di-compare" "eq?" "y" "x")}
      {Lisp-Entry "di>=?" definition #f 530 20 530 25 (":equal" ":greater" "di-compare" "memq?" "y" "x")}
      {Lisp-Entry "boolean->integer" definition #f 534 27 534 43 ("0" "1" "if" "bool")}
      {Lisp-Entry "integer->boolean" definition #f 538 27 538 43 ("0" "/=" "int" "<int>" "n")}
      {Lisp-Entry "false" definition #f 547 19 547 24 ("false" "list")}
      {Lisp-Entry "false?" definition #f 551 27 551 33 ("false" "eq?" "obj")}
      {Lisp-Entry "true" definition #f 555 19 555 23 ("true" "list")}
      {Lisp-Entry "true?" definition #f 559 27 559 32 ("true" "eq?" "obj")}
      {Lisp-Entry "truth?" definition #f 563 20 563 26 ("true?" "false?" "or" "obj")}
      {Lisp-Entry "boolean->truth" definition #f 568 20 568 34 ("false" "true" "if" "bool")}
      {Lisp-Entry "truth->boolean" definition #f 572 20 572 34 ("true?" "data")}
      {Lisp-Entry "Whitespace-Chars" definition #f 581 19 581 35 ()}
      {Lisp-Entry "Uppercase-Chars" definition #f 584 19 584 34 ()}
      {Lisp-Entry "Lowercase-Chars" definition #f 587 19 587 34 ()}
      {Lisp-Entry "Alphabetic-Chars" definition #f 590 19 590 35 ("Lowercase-Chars" "Uppercase-Chars" "append")}
      {Lisp-Entry "Numeric-Chars" definition #f 593 19 593 32 ()}
      {Lisp-Entry "Uppercase-Lowerbound" definition #f 597 12 597 32 ("char->integer" "fx" "<fx>")}
      {Lisp-Entry "Uppercase-Upperbound" definition #f 600 12 600 32 ("char->integer" "fx" "<fx>")}
      {Lisp-Entry "Lowercase-Lowerbound" definition #f 603 12 603 32 ("char->integer" "fx" "<fx>")}
      {Lisp-Entry "Lowercase-Upperbound" definition #f 606 12 606 32 ("char->integer" "fx" "<fx>")}
      {Lisp-Entry "Numeric-Lowerbound" definition #f 609 12 609 30 ("char->integer" "fx" "<fx>")}
      {Lisp-Entry "Numeric-Upperbound" definition #f 612 12 612 30 ("char->integer" "fx" "<fx>")}
      {Lisp-Entry "Diacritic-Equivalences" definition #f 618 12 618 34 ()}
      {Lisp-Entry "make-diacritic-table" definition #f 627 13 627 33 ("table-set!" "char" "car" "equivalent" "lambda" "for-each" "eqv?" "test:" "make-table" "table" "let" "equivalences")}
      {Lisp-Entry "Diacritic-Table" definition #f 637 12 637 27 ("Diacritic-Equivalences" "make-diacritic-table")}
      {Lisp-Entry "diacritic-equivalent" definition #f 641 20 641 40 ("Diacritic-Table" "table-ref" "or" "c")}
      {Lisp-Entry "Char-Class" class #f 646 7 646 17 ("Class")}
      {Lisp-Entry "Char" class #f 649 17 649 21 ("Object" "Char-Class")
        {Lisp-Entry "initialize" method #f 652 20 652 30 ("native-class" "rest")}
        {Lisp-Entry "coerce-string" method #f 656 20 656 33 ("get-output-string" "self" "write-char" "open-output-string" "port" "let")}
        {Lisp-Entry "compare-object" method #f 662 20 662 34 (":incompatible" ":less" "else" ":greater" ">" ":equal" "=" "cond" "v2" "self" "char->integer" "v1" "let" "Char" "is?" "if" "c")}
        {Lisp-Entry "ci-compare-object" method #f 672 20 672 37 ("self" "downcase" "compare" "c")}
        {Lisp-Entry "di-compare-object" method #f 677 20 677 37 ("self" "diacritic-equivalent" "ci-compare" "c")}
        {Lisp-Entry "object-similar?" method #f 682 20 682 35 ("self" "char-similar?" "char?" "and" "object-similar?" "unimplemented" "object")}
        {Lisp-Entry "object-alphabetic?" method #f 689 20 689 38 ("object-lower-case?" "object-upper-case?" "or")}
        {Lisp-Entry "object-numeric?" method #f 694 20 694 35 ("Numeric-Upperbound" "<=" "Numeric-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-alphanumeric?" method #f 700 20 700 40 ("object-numeric?" "object-alphabetic?" "or")}
        {Lisp-Entry "object-whitespace?" method #f 705 20 705 38 ("self" "eqv?" "or")}
        {Lisp-Entry "object-upper-case?" method #f 713 20 713 38 ("Uppercase-Upperbound" "<=" "Uppercase-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-lower-case?" method #f 719 20 719 38 ("Lowercase-Upperbound" "<=" "Lowercase-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-upcase" method #f 725 20 725 33 ("32" "char->integer" "-" "integer->char" "self" "lower-case?" "if")}
        {Lisp-Entry "object-downcase" method #f 731 20 731 35 ("32" "char->integer" "+" "integer->char" "self" "upper-case?" "if")}
        {Lisp-Entry "object-capitalize" method #f 737 20 737 37 ("object-upcase")}}
      {Lisp-Entry "whitechar?" definition #f 741 12 741 22 ("char-whitespace?")}
      {Lisp-Entry "char-presentation" definition #f 745 20 745 37 ("string" "char-symbol" "or" "char")}
      {Lisp-Entry "alphabetic?" definition #f 750 27 750 38 ("object-alphabetic?" "object-alphabetic?~" "Object" "<Object>" "object")}
      {Lisp-Entry "numeric?" definition #f 754 27 754 35 ("object-numeric?" "object-numeric?~" "Object" "<Object>" "object")}
      {Lisp-Entry "alphanumeric?" definition #f 758 27 758 40 ("object-alphanumeric?" "object-alphanumeric?~" "Object" "<Object>" "object")}
      {Lisp-Entry "whitespace?" definition #f 762 27 762 38 ("object-whitespace?" "object-whitespace?~" "Object" "<Object>" "object")}
      {Lisp-Entry "upper-case?" definition #f 766 27 766 38 ("object-upper-case?" "object-upper-case?~" "Object" "<Object>" "object")}
      {Lisp-Entry "lower-case?" definition #f 770 27 770 38 ("object-lower-case?" "object-lower-case?~" "Object" "<Object>" "object")}
      {Lisp-Entry "upcase" definition #f 774 27 774 33 ("object-upcase" "object-upcase~" "Object" "<Object>" "object")}
      {Lisp-Entry "downcase" definition #f 778 27 778 35 ("object-downcase" "object-downcase~" "Object" "<Object>" "object")}
      {Lisp-Entry "capitalize" definition #f 782 27 782 37 ("object-capitalize" "object-capitalize~" "Object" "<Object>" "object")}
      {Lisp-Entry "vowel?" definition #f 786 20 786 26 ("downcase" "memv?" "c")}
      {Lisp-Entry "character-types" definition #f 790 12 790 27 ("delete" "symbol" "literal" "quasiquote" "backslash" "reference" "exprcomment" "comment" "unquote" "terminator" "list" "quote" "sharp" "string" "constituent" "whitespace" "backspace" "invalid" "#")}
      {Lisp-Entry "character-type" definition #f 809 20 809 34 ("character-types" "vector-ref" "constituent" "127" ">" "if" "char->integer" "num" "let" "symbol" "<symbol>" "char" "<char>" "ascii-c")}
      {Lisp-Entry "invalid-character?" definition #f 816 20 816 38 ("invalid" "character-type" "eq?" "bool" "<bool>" "char" "<char>" "c")}
      {Lisp-Entry "word-constituent?" definition #f 820 20 820 37 ("memq?" "alphanumeric?" "or" "bool" "<bool>" "char" "<char>" "c")}
      {Lisp-Entry "scheme-constituent?" definition #f 825 20 825 39 ("eqv?" "constituent" "character-type" "eq?" "alphanumeric?" "or" "bool" "<bool>" "char" "<char>" "c")}
      {Lisp-Entry "jazz-constituent?" definition #f 832 20 832 37 ("eqv?" "constituent" "character-type" "eq?" "alphanumeric?" "or" "bool" "<bool>" "char" "<char>" "c")}
      {Lisp-Entry "c-constituent?" definition #f 838 20 838 34 ("eqv?" "alphanumeric?" "or" "bool" "<bool>" "char" "<char>" "c")}
      {Lisp-Entry "sql-constituent?" definition #f 843 20 843 36 ("eqv?" "alphanumeric?" "or" "bool" "<bool>" "char" "<char>" "c")}
      {Lisp-Entry "Port-Class" class #f 856 7 856 17 ("Class")}
      {Lisp-Entry "Port" class #f 859 17 859 21 ("Object" "Port-Class")
        {Lisp-Entry "initialize" method #f 862 20 862 30 ("native-class" "rest")}
        {Lisp-Entry "destroy" method #f 866 20 866 27 ("nextmethod" "self" "close-port")}}
      {Lisp-Entry "Symbol-Class" class #f 876 7 876 19 ("Class")}
      {Lisp-Entry "Symbol" class #f 879 17 879 23 ("Object" "Symbol-Class")
        {Lisp-Entry "initialize" method #f 882 20 882 30 ("native-class" "rest")}
        {Lisp-Entry "coerce-string" method #f 886 20 886 33 ("self" "symbol->string")}
        {Lisp-Entry "compare-object" method #f 890 20 890 34 (":incompatible" "self" "symbol->string" "compare" "symbol?" "if" "obj")}
        {Lisp-Entry "ci-compare-object" method #f 896 20 896 37 (":incompatible" "self" "symbol->string" "ci-compare" "symbol?" "if" "obj")}}
      {Lisp-Entry "=" specialize #f 902 20 902 21 ("eq?" "bool" "<bool>" "s2" "symbol" "<symbol>" "s1")}
      {Lisp-Entry "generated-symbol?" definition #f 906 20 906 37 ("symbol->string" "starts-with?" "symbol")}
      {Lisp-Entry "symbol->keyword" definition #f 910 27 910 42 ("symbol->string" "string->keyword" "symbol")}
      {Lisp-Entry "keyword->symbol" definition #f 914 27 914 42 ("keyword->string" "string->symbol" "keyword")}
      {Lisp-Entry "find-symbol" definition #f 918 20 918 31 ("string->symbol" "str")}
      {Lisp-Entry "symbol-bound?" definition #f 923 20 923 33 ("rest" "name")}
      {Lisp-Entry "symbol-unbound?" definition #f 926 20 926 35 ("rest" "name")}
      {Lisp-Entry "Keyword-Class" class #f 936 7 936 20 ("Class")}
      {Lisp-Entry "Keyword" class #f 939 17 939 24 ("Object" "Keyword-Class")
        {Lisp-Entry "initialize" method #f 942 20 942 30 ("native-class" "rest")}}
      {Lisp-Entry "find-keyword" definition #f 946 20 946 32 ("else" "cadr" "cddr" "set-cdr!" "eq?" "error" "car" "keyword?" "cdr" "pair?" "not" "or" "null?" "cond" "before" "unbox-list" "ls" "lp" "let" "default" "box" "keyword")}
      {Lisp-Entry "box-list" definition #f 965 21 965 29 ("cons" "lst")}
      {Lisp-Entry "unbox-list" definition #f 969 21 969 31 ("cdr" "box")}
      {Lisp-Entry "Continuation-Class" class #f 978 7 978 25 ("Class")}
      {Lisp-Entry "Continuation" class #f 981 17 981 29 ("Object" "Continuation-Class")}
      {Lisp-Entry "Procedure-Class" class #f 989 7 989 22 ("Class")}
      {Lisp-Entry "Procedure" class #f 992 17 992 26 ("Object" "Procedure-Class")}
      {Lisp-Entry "Foreign-Class" class #f 1000 7 1000 20 ("Class")}
      {Lisp-Entry "Foreign" class #f 1003 17 1003 24 ("Object" "Foreign-Class")}
      {Lisp-Entry "Numeric-Class" class #f 1011 7 1011 20 ("Class")}
      {Lisp-Entry "Numeric" class #f 1014 17 1014 24 ("Object" "Numeric-Class")
        {Lisp-Entry "numeric-norm" method #f 1017 35 1017 47 ()}
        {Lisp-Entry "numeric-add" method #f 1018 35 1018 46 ("obj")}
        {Lisp-Entry "numeric-negate" method #f 1019 35 1019 49 ()}
        {Lisp-Entry "numeric-multiply" method #f 1020 35 1020 51 ("n")}
        {Lisp-Entry "numeric-inverse" method #f 1021 35 1021 50 ()}}
      {Lisp-Entry "Number-Class" class #f 1029 7 1029 19 ("Numeric-Class")}
      {Lisp-Entry "Number" class #f 1032 17 1032 23 ("Numeric" "Number-Class")
        {Lisp-Entry "initialize" method #f 1035 20 1035 30 ("native-class" "rest")}
        {Lisp-Entry "compare-object" method #f 1039 20 1039 34 (":incompatible" ":greater" "else" ":less" "<" ":equal" "self" "=" "cond" "number?" "if" "obj")}
        {Lisp-Entry "ci-compare-object" method #f 1047 20 1047 37 ("compare-object" "obj")}
        {Lisp-Entry "numeric-norm" method #f 1051 20 1051 32 ("self" "abs")}
        {Lisp-Entry "numeric-add" method #f 1055 20 1055 31 ("error" "self" "+" "number?" "if" "obj")}
        {Lisp-Entry "numeric-negate" method #f 1061 20 1061 34 ("self" "-")}
        {Lisp-Entry "numeric-multiply" method #f 1065 20 1065 36 ("error" "self" "*" "number?" "if" "obj")}
        {Lisp-Entry "numeric-inverse" method #f 1071 20 1071 35 ("self" "/")}}
      {Lisp-Entry "Complex-Class" class #f 1080 7 1080 20 ("Number-Class")}
      {Lisp-Entry "Complex" class #f 1083 17 1083 24 ("Number" "Complex-Class")
        {Lisp-Entry "numeric-norm" method #f 1086 20 1086 32 ("imag-part" "2" "self" "real-part" "expt" "+" "sqrt")}}
      {Lisp-Entry "Real-Class" class #f 1095 7 1095 17 ("Complex-Class")}
      {Lisp-Entry "Real" class #f 1098 17 1098 21 ("Complex" "Real-Class")}
      {Lisp-Entry "Rational-Class" class #f 1106 7 1106 21 ("Real-Class")}
      {Lisp-Entry "Rational" class #f 1109 17 1109 25 ("Real" "Rational-Class")}
      {Lisp-Entry "Integer-Class" class #f 1117 7 1117 20 ("Rational-Class")}
      {Lisp-Entry "Integer" class #f 1120 17 1120 24 ("Rational" "Integer-Class")}
      {Lisp-Entry "Fixnum-Class" class #f 1128 7 1128 19 ("Integer-Class")}
      {Lisp-Entry "Fixnum" class #f 1131 17 1131 23 ("Integer" "Fixnum-Class")}
      {Lisp-Entry "Flonum-Class" class #f 1139 7 1139 19 ("Real-Class")}
      {Lisp-Entry "Flonum" class #f 1142 17 1142 23 ("Real" "Flonum-Class")}
      {Lisp-Entry "fl+" definition #f 1147 27 1147 30 ("##fl+" "y" "fl" "<fl>" "x")}
      {Lisp-Entry "fl-" definition #f 1150 27 1150 30 ("##fl-" "y" "fl" "<fl>" "x")}
      {Lisp-Entry "fl*" definition #f 1153 27 1153 30 ("##fl*" "y" "fl" "<fl>" "x")}
      {Lisp-Entry "fl/" definition #f 1156 27 1156 30 ("##fl/" "y" "fl" "<fl>" "x")}
      {Lisp-Entry "flmodulo" definition #f 1160 20 1160 28 ("/" "floor" "*" "-" "y" "x")}
      {Lisp-Entry "relate" definition #f 1169 20 1169 26 ("0" "else" "1" ">" "-1" "<" "cond" "y" "x")}
      {Lisp-Entry "sign" definition #f 1175 20 1175 24 ("0" "relate" "n")}
      {Lisp-Entry "nu+" definition #f 1179 20 1179 23 ("numeric-add" "numeric-add~" "cdr" "scan" "car" "Numeric" "<Numeric>" "result" "iter" "let" "0" "null?" "if" "rest")}
      {Lisp-Entry "nu-" definition #f 1188 20 1188 23 ("nu+" "apply" "r" "let" "numeric-negate" "numeric-negate~" "null?" "if" "rest" "Numeric" "<Numeric>" "n")}
      {Lisp-Entry "nu*" definition #f 1195 20 1195 23 ("numeric-multiply" "numeric-multiply~" "cdr" "scan" "car" "Numeric" "<Numeric>" "result" "iter" "let" "1" "null?" "if" "rest")}
      {Lisp-Entry "nu/" definition #f 1204 20 1204 23 ("nu*" "apply" "r" "let" "numeric-inverse" "numeric-inverse~" "null?" "if" "rest" "Numeric" "<Numeric>" "n")}
      {Lisp-Entry "minimum" definition #f 1211 20 1211 27 ("cdr" "set!" ":less" "apply-key" "eq?" "when" "object" "lambda" "for-each" "car" "min" "let" "compare" "compare:" "key" "key:" "pair" "<pair>" "lst")}
      {Lisp-Entry "maximum" definition #f 1220 20 1220 27 ("cdr" "set!" ":greater" "apply-key" "eq?" "when" "object" "lambda" "for-each" "car" "max" "let" "compare" "compare:" "key" "key:" "pair" "<pair>" "lst")}
      {Lisp-Entry "between?" definition #f 1229 20 1229 28 ("<=" ">=" "not" "or" "and" "upper" "lower" "n")}
      {Lisp-Entry "between" definition #f 1234 20 1234 27 ("else" ">" "<" "cond" "upper" "n" "lower")}
      {Lisp-Entry "in-interval?" definition #f 1240 20 1240 32 ("<" ">=" "and" "upper" "lower" "n")}
      {Lisp-Entry "norm" definition #f 1244 27 1244 31 ("numeric-norm" "numeric-norm~" "Numeric" "<Numeric>" "x")}
      {Lisp-Entry "distance" definition #f 1248 20 1248 28 ("nu-" "norm" "end" "Numeric" "<Numeric>" "start")}
      {Lisp-Entry "near?" definition #f 1252 20 1252 25 ("nu-" "norm" "<=" "bool" "<bool>" "distance" "y" "x")}
      {Lisp-Entry "contiguous-range" definition #f 1256 20 1256 36 ("cons" "cdr" "continuation-return" "set!" "1" "+" "=" "if" "n" "for-each" "second" "car" "first" "let*" "return" "lambda" "continuation-capture" "not-null?" "when" "lst")}
      {Lisp-Entry "naturals" definition #f 1270 20 1270 28 ("collect" "below" "from" "n" "for" "loop" "list" "<list>" "upper" "int" "<int>" "lower")}
      {Lisp-Entry "lobyte" definition #f 1275 20 1275 26 ("#xFF" "bitwise-and" "int" "<int>" "word")}
      {Lisp-Entry "hibyte" definition #f 1279 20 1279 26 ("-8" "arithmetic-shift" "lobyte" "int" "<int>" "word")}
      {Lisp-Entry "make-word" definition #f 1283 20 1283 29 ("8" "arithmetic-shift" "bitwise-ior" "hi" "int" "<int>" "lo")}
      {Lisp-Entry "lochar" definition #f 1287 20 1287 26 ("#xFF" "#x80" "+" "bitwise-and" "-" "int" "<int>" "word")}
      {Lisp-Entry "hichar" definition #f 1291 20 1291 26 ("-8" "arithmetic-shift" "lochar" "int" "<int>" "word")}
      {Lisp-Entry "make-int" definition #f 1295 20 1295 28 ("16" "arithmetic-shift" "bitwise-ior" "hi" "int" "<int>" "lo")}
      {Lisp-Entry "loword" definition #f 1299 20 1299 26 ("#xFFFF" "bitwise-and" "int" "<int>" "dword")}
      {Lisp-Entry "hiword" definition #f 1303 20 1303 26 ("-16" "arithmetic-shift" "loword" "int" "<int>" "dword")}
      {Lisp-Entry "signed-loword" definition #f 1307 20 1307 33 ("#xFFFF" "#x8000" "+" "bitwise-and" "-" "int" "<int>" "dword")}
      {Lisp-Entry "signed-hiword" definition #f 1311 20 1311 33 ("-16" "arithmetic-shift" "signed-loword" "int" "<int>" "dword")}
      {Lisp-Entry "sign-word" definition #f 1315 20 1315 29 ("#x10000" "-" "15" "bit-set?" "if" "int" "<int>" "word")}
      {Lisp-Entry "separate" definition #f 1321 20 1321 28 ("values" "*" "-" "r" "quotient" "q" "let*" "int2" "int" "<int>" "int1")}
      {Lisp-Entry "randomize" definition #f 1327 20 1327 29 ("default-random-source" "random-source-randomize!")}
      {Lisp-Entry "random" definition #f 1330 20 1330 26 ("random-integer" "n")}
      {Lisp-Entry "bit-set" definition #f 1334 20 1334 27 ("bitwise-not" "bitwise-and" "bitwise-ior" "if" "1" "arithmetic-shift" "msk" "let" "bool" "<bool>" "bit" "pos" "int" "<int>" "num")}
      {Lisp-Entry "mask-bit-set" definition #f 1341 20 1341 32 ("bitwise-not" "bitwise-and" "bitwise-ior" "if" "bool" "<bool>" "bit" "msk" "int" "<int>" "num")}
      {Lisp-Entry "mask-bit-set?" definition #f 1347 20 1347 33 ("0" "bitwise-and" "/=" "bool" "<bool>" "msk" "int" "<int>" "num")}
      {Lisp-Entry "bit-mask" definition #f 1351 20 1351 28 ("1" "arithmetic-shift" "-" "lo" "int" "<int>" "hi")}
      {Lisp-Entry "random-seed" definition #f 1355 20 1355 31 ("10000" "random" "randomize")}
      {Lisp-Entry "sqr" definition #f 1361 27 1361 30 ("2" "expt" "num")}
      {Lisp-Entry "percentage" definition #f 1365 27 1365 37 ("100." "/" "*" "total" "real" "<real>" "part")}
      {Lisp-Entry "percent" definition #f 1369 27 1369 34 ("100." "*" "/" "n" "real" "<real>" "percent")}
      {Lisp-Entry "fxfloor" definition #f 1373 27 1373 34 ("floor" "flonum->fixnum" "fx" "<fx>" "fl" "<fl>" "r")}
      {Lisp-Entry "fxceiling" definition #f 1376 27 1376 36 ("ceiling" "flonum->fixnum" "fx" "<fx>" "fl" "<fl>" "r")}
      {Lisp-Entry "fxtruncate" definition #f 1379 27 1379 37 ("truncate" "flonum->fixnum" "fx" "<fx>" "fl" "<fl>" "r")}
      {Lisp-Entry "fxround" definition #f 1382 27 1382 34 ("round" "flonum->fixnum" "fx" "<fx>" "fl" "<fl>" "r")}
      {Lisp-Entry "fxfloor/" definition #f 1388 27 1388 35 ("fl/" "fxfloor" "d" "fx" "<fx>" "n")}
      {Lisp-Entry "fxceiling/" definition #f 1391 27 1391 37 ("fl/" "fxceiling" "d" "fx" "<fx>" "n")}
      {Lisp-Entry "fxtruncate/" definition #f 1394 27 1394 38 ("fl/" "fxtruncate" "d" "fx" "<fx>" "n")}
      {Lisp-Entry "fxround/" definition #f 1397 27 1397 35 ("fl/" "fxround" "d" "fx" "<fx>" "n")}
      {Lisp-Entry "Iterator" class #f 1406 15 1406 23 ("Empty" "initialize" "Object")
        {Lisp-Entry "Empty" definition #f 1409 14 1409 19 ("empty")}
        {Lisp-Entry "peeked" slot #f 1413 8 1413 14 ()}
        {Lisp-Entry "iterate-object" method #f 1416 20 1416 34 ("self")}
        {Lisp-Entry "get-next" method #f 1420 26 1420 34 ("next" "peek" "prog1")}
        {Lisp-Entry "peek" method #f 1425 26 1425 30 ("next" "set!" "Empty" "peeked" "eq?" "when")}
        {Lisp-Entry "unget" method #f 1431 26 1431 31 ("error" "set!" "Empty" "peeked" "eq?" "if" "object")}
        {Lisp-Entry "next" method #f 1437 26 1437 30 ("get-next!" "else" "set!" "prog1" "Empty" "neq?" "peeked" "eof-object?" "cond")}
        {Lisp-Entry "done?" method #f 1447 26 1447 31 ("peek" "eof-object?" "bool" "<bool>")}
        {Lisp-Entry "get-next!" method #f 1451 26 1451 35 ()}
        {Lisp-Entry "put" method #f 1455 26 1455 29 ("error" "object")}
        {Lisp-Entry "get-position" method #f 1459 26 1459 38 ("self" "error")}
        {Lisp-Entry "set-position" method #f 1463 26 1463 38 ("self" "error" "pos")}
        {Lisp-Entry "get-state" method #f 1467 26 1467 35 ()}
        {Lisp-Entry "reset-state" method #f 1471 26 1471 37 ("old")}}
      {Lisp-Entry "iterate-sequence" definition #f 1475 27 1475 43 ("iterate-object" "iterate-object~" "Iterator" "<Iterator>" "Object" "<Object>" "obj")}
      {Lisp-Entry "Explorer" class #f 1484 15 1484 23 ("forward" "initialize" "Iterator")
        {Lisp-Entry "direction" slot #f 1487 8 1487 17 ()}
        {Lisp-Entry "set-direction" accessor #f 1487 45 1487 53 ()}
        {Lisp-Entry "peek-forward" method #f 1490 29 1490 41 ("error")}
        {Lisp-Entry "peek-backward" method #f 1494 29 1494 42 ("error")}
        {Lisp-Entry "peek" method #f 1498 20 1498 24 ("peek-backward" "backward" "peek-forward" "forward" "direction" "case" "eof-object" "done?" "if")}
        {Lisp-Entry "goto-beginning" method #f 1506 26 1506 40 ("error")}
        {Lisp-Entry "goto-end" method #f 1510 26 1510 34 ("error")}
        {Lisp-Entry "forward" method #f 1514 26 1514 33 ("error")}
        {Lisp-Entry "backward" method #f 1518 26 1518 34 ("error")}
        {Lisp-Entry "next" method #f 1522 20 1522 24 ("backward" "forward" "direction" "case" "done?" "not" "when")}
        {Lisp-Entry "done-forward?" method #f 1529 29 1529 42 ("error")}
        {Lisp-Entry "done-backward?" method #f 1533 29 1533 43 ("error")}
        {Lisp-Entry "done?" method #f 1537 20 1537 25 ("done-backward?" "backward" "done-forward?" "forward" "direction" "case")}
        {Lisp-Entry "put-forward" method #f 1543 29 1543 40 ("error" "object")}
        {Lisp-Entry "put-backward" method #f 1547 29 1547 41 ("error" "object")}
        {Lisp-Entry "put" method #f 1551 20 1551 23 ("put-backward" "backward" "put-forward" "forward" "direction" "case" "object")}}
      {Lisp-Entry "explore" definition #f 1557 20 1557 27 ("Sequence-Explorer" "new" "apply" "Explorer" "<Explorer>" "rest" "Object" "<Object>" "object")}
      {Lisp-Entry "Sequence-Class" class #f 1567 7 1567 21 ("Class")
        {Lisp-Entry "allocate-sequence" method #f 1570 35 1570 52 ("int" "<int>" "len")}
        {Lisp-Entry "coerce-object" method #f 1573 20 1573 33 ("element" "set-element!" "below" "0" "from" "n" "for" "loop" "allocate-sequence" "new-sequence" "cardinality" "len" "let" "seq")}}
      {Lisp-Entry "Sequence" class #f 1582 17 1582 25 ("Object" "Sequence-Class")
        {Lisp-Entry "compare-object" method #f 1585 20 1585 34 (":incompatible" "compare" "self" "compare-sequence" "Sequence" "is?" "if" "seq")}
        {Lisp-Entry "di-compare-object" method #f 1591 20 1591 37 ("di-compare" "self" "compare-sequence" "seq")}
        {Lisp-Entry "copy-object" method #f 1595 20 1595 31 ("1" "+" "element" "set-element!" "begin" "=" "0" "fx" "<fx>" "i" "iter" "let" "class-of" "allocate-sequence" "allocate-sequence~" "new-seq" "self" "cardinality" "len" "identity" "x" "lambda" "if" "subcopy" "let*" "bool" "<bool>" "deep?")}
        {Lisp-Entry "iterate-object" method #f 1607 20 1607 34 ("self" "Sequence-Explorer" "new")}
        {Lisp-Entry "object-alphabetic?" method #f 1611 20 1611 38 ("self" "alphabetic?" "every?")}
        {Lisp-Entry "object-numeric?" method #f 1615 20 1615 35 ("self" "numeric?" "every?")}
        {Lisp-Entry "object-alphanumeric?" method #f 1619 20 1619 40 ("self" "alphanumeric?" "every?")}
        {Lisp-Entry "object-whitespace?" method #f 1623 20 1623 38 ("self" "whitespace?" "every?")}
        {Lisp-Entry "object-upper-case?" method #f 1627 20 1627 38 ("self" "upper-case?" "every?")}
        {Lisp-Entry "object-lower-case?" method #f 1631 20 1631 38 ("self" "lower-case?" "every?")}
        {Lisp-Entry "object-upcase" method #f 1635 20 1635 33 ("class-of" "upcase" "self" "accumulate")}
        {Lisp-Entry "object-downcase" method #f 1639 20 1639 35 ("class-of" "downcase" "self" "accumulate")}
        {Lisp-Entry "object-capitalize" method #f 1643 20 1643 37 ("class-of" "upcase" "set!" "not" "alphanumeric?" "if" "object" "lambda" "self" "accumulate" "break?" "let")}
        {Lisp-Entry "sequence-element" method #f 1657 38 1657 54 ("any" "<any>" "fx" "<fx>" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 1660 38 1660 59 ("void" "<void>" "any" "<any>" "obj" "fx" "<fx>" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 1663 38 1663 58 ("fx" "<fx>")}
        {Lisp-Entry "sequence-tail" method #f 1666 38 1666 51 ("start")}
        {Lisp-Entry "sequence-last" method #f 1669 38 1669 51 ()}
        {Lisp-Entry "sequence-butlast" method #f 1672 38 1672 54 ()}
        {Lisp-Entry "sequence-subseq!" method #f 1675 29 1675 45 ("cardinality" "-" "Subseq" "new" "self" "-1" "0" "=" "and" "if" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "sequence-replace-subseq!" method #f 1681 29 1681 53 ("cardinality" "0" "self" "subseq" "concatenate!" "replacement" "end" "fx" "<fx>" "start")}}
      {Lisp-Entry "sequence?" definition #f 1687 27 1687 36 ("Sequence" "is?" "obj")}
      {Lisp-Entry "element" definition #f 1691 27 1691 34 ("sequence-element" "sequence-element~" "any" "<any>" "int" "<int>" "n" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "set-element!" definition #f 1695 27 1695 39 ("sequence-set-element!" "sequence-set-element!~" "void" "<void>" "any" "<any>" "obj" "int" "<int>" "n" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "cardinality" definition #f 1699 27 1699 38 ("sequence-cardinality" "sequence-cardinality~" "int" "<int>" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "empty?" definition #f 1703 27 1703 33 ("cardinality" "0" "=" "seq")}
      {Lisp-Entry "tail" definition #f 1707 27 1707 31 ("sequence-tail" "sequence-tail~" "start" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "last" definition #f 1711 27 1711 31 ("sequence-last" "sequence-last~" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "butlast" definition #f 1715 27 1715 34 ("sequence-butlast" "sequence-butlast~" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "compare-sequence" definition #f 1719 20 1719 36 ("1" "+" "eq?" "element" "cmp" ":less" "else" ":greater" ">" ":equal" "=" "cond" ">=" "or" "if" "0" "fx" "<fx>" "i" "iter" "l2" "cardinality" "l1" "let" "compare" "s2" "s1")}
      {Lisp-Entry "skip-whitespace" definition #f 1733 20 1733 35 ("else" "1" "+" "element" "eq?" "cardinality" "=" "cond" "0" "or" "fx" "<fx>" "i" "iter" "let" "start" "start:" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "subseq" definition #f 1740 20 1740 26 ("1" "+" "set!" "element" "set-element!" "<" "while" "j" "0" "i" "allocate-sequence" "allocate-sequence~" "sub" "class-of" "Sequence-Class" "<Sequence-Class>" "cls" "cardinality" "or" "-" "len" "let*" "type" "end" "start" "seq")}
      {Lisp-Entry "replace-subseq!" definition #f 1753 27 1753 42 ("sequence-replace-subseq!" "sequence-replace-subseq!~" "replacement" "end" "start" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "subseq!" definition #f 1757 20 1757 27 ("sequence-subseq!" "sequence-subseq!~" "cardinality" "end" "start" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "sort" definition #f 1761 20 1761 24 ("class-of" "List" "sort" "coerce" "null/pair?" "let*" "cddr" "or" "split" "cdr" "cons" "apply-key" "if" "e2" "car" "e1" "let" "else" "null?" "cond" "l2" "l1" "merge" "merge-sort" "smaller" "l" "sort-list" "define" "key" "key:" "seq" "test")}
      {Lisp-Entry "first" definition #f 1792 27 1792 32 ("0" "element" "seq")}
      {Lisp-Entry "second" definition #f 1793 27 1793 33 ("1" "element" "seq")}
      {Lisp-Entry "third" definition #f 1794 27 1794 32 ("2" "element" "seq")}
      {Lisp-Entry "fourth" definition #f 1795 27 1795 33 ("3" "element" "seq")}
      {Lisp-Entry "fifth" definition #f 1796 27 1796 32 ("4" "element" "seq")}
      {Lisp-Entry "sixth" definition #f 1797 27 1797 32 ("5" "element" "seq")}
      {Lisp-Entry "seventh" definition #f 1798 27 1798 34 ("6" "element" "seq")}
      {Lisp-Entry "eighth" definition #f 1799 27 1799 33 ("7" "element" "seq")}
      {Lisp-Entry "ninth" definition #f 1800 27 1800 32 ("8" "element" "seq")}
      {Lisp-Entry "tenth" definition #f 1801 27 1801 32 ("9" "element" "seq")}
      {Lisp-Entry "set-first!" definition #f 1803 27 1803 37 ("0" "set-element!" "value" "seq")}
      {Lisp-Entry "set-second!" definition #f 1804 27 1804 38 ("1" "set-element!" "value" "seq")}
      {Lisp-Entry "set-third!" definition #f 1805 27 1805 37 ("2" "set-element!" "value" "seq")}
      {Lisp-Entry "set-fourth!" definition #f 1806 27 1806 38 ("3" "set-element!" "value" "seq")}
      {Lisp-Entry "set-fifth!" definition #f 1807 27 1807 37 ("4" "set-element!" "value" "seq")}
      {Lisp-Entry "set-sixth!" definition #f 1808 27 1808 37 ("5" "set-element!" "value" "seq")}
      {Lisp-Entry "set-seventh!" definition #f 1809 27 1809 39 ("6" "set-element!" "value" "seq")}
      {Lisp-Entry "set-eighth!" definition #f 1810 27 1810 38 ("7" "set-element!" "value" "seq")}
      {Lisp-Entry "set-ninth!" definition #f 1811 27 1811 37 ("8" "set-element!" "value" "seq")}
      {Lisp-Entry "set-tenth!" definition #f 1812 27 1812 37 ("9" "set-element!" "value" "seq")}
      {Lisp-Entry "element-reversed" definition #f 1815 20 1815 36 ("1" "cardinality" "-" "element" "n" "seq")}
      {Lisp-Entry "iterate" definition #f 1819 20 1819 27 ("in-sequence" "obj" "for" "loop" "procedure" "<procedure>" "proc" "seq")}
      {Lisp-Entry "iterate-sequences" definition #f 1824 20 1824 37 ("unspecified" "get-next" "get-next~" "apply" "not" "when" "done?~" "done?" "loop" "iterate-sequence" "map" "iterators" "let" "cdr" "car" "or" "pair?" "and" "lst" "any?" "define" "seqs" "procedure" "<procedure>" "proc")}
      {Lisp-Entry "accumulate" definition #f 1839 20 1839 30 ("coerce" "not" "if" "collect" "in-sequence" "obj" "for" "loop" "lst" "let" "type" "procedure" "<procedure>" "proc" "seq")}
      {Lisp-Entry "apply-key" definition #f 1848 28 1848 37 ("not" "if" "object" "Object" "<Object>" "key")}
      {Lisp-Entry "apply-test" definition #f 1854 28 1854 38 ("eqv?" "not" "if" "y" "x" "Object" "<Object>" "test")}
      {Lisp-Entry "gather" definition #f 1860 20 1860 26 ("collect" "in-sequence" "obj" "for" "loop" "coerce" "List" "type" "type:" "Object" "<Object>" "iterable")}
      {Lisp-Entry "collect" definition #f 1866 20 1866 27 ("class-of" "or" "collect" "when" "apply-key" "=" "val" "in-sequence" "obj" "for" "loop" "coerce" "type" "type:" "key" "key:" "Object" "<Object>" "seq" "procedure" "<procedure>" "proc")}
      {Lisp-Entry "collect-if" definition #f 1874 20 1874 30 ("class-of" "collect" "apply-key" "when" "in-sequence" "obj" "for" "loop" "coerce" "key" "key:" "Object" "<Object>" "seq" "procedure" "<procedure>" "predicate")}
      {Lisp-Entry "collect-type" definition #f 1881 20 1881 32 ("class-of" "collect" "apply-key" "is?" "when" "in-sequence" "obj" "for" "loop" "coerce" "key" "key:" "Object" "<Object>" "seq" "type")}
      {Lisp-Entry "collect-sections" definition #f 1888 20 1888 36 ("reset" "reset~" "get-output" "get-output~" "put" "put~" "begin" "apply-test" "if" "value" "lambda" "for-each" "section" "List-Factory" "new" "sections" "let" "test" "test:" "separator" "separator:" "lst")}
      {Lisp-Entry "count" definition #f 1902 20 1902 25 ("increase!" "apply-key" "apply-test" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "test" "test:" "key" "key:" "seq" "Object" "<Object>" "target")}
      {Lisp-Entry "count-if" definition #f 1910 20 1910 28 ("increase!" "apply-key" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "key" "key:" "seq" "procedure" "<procedure>" "predicate")}
      {Lisp-Entry "count-type" definition #f 1918 20 1918 30 ("increase!" "apply-key" "is?" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "key" "key:" "Object" "<Object>" "seq" "type")}
      {Lisp-Entry "find" definition #f 1926 20 1926 24 ("error" "else" "1" "-" "get-position" "get-position~" "item" "case" "continuation-return" "apply-key" "apply-test" "object" "iterate" "exit" "lambda" "continuation-capture" "set-position" "set-position~" "when" "iterate-sequence" "backward" "direction:" "explore" "Iterator" "<Iterator>" "iterator" "let" "0" "or" "list-find" "not" "null/pair?" "and" "if" "position" "return" "return:" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "target" "seq")}
      {Lisp-Entry "list-find" definition #f 1944 13 1944 22 ("1" "+" "cdr" "else" "item" "case" "car" "null?" "cond" "fx" "<fx>" "rank" "tail" "rest" "iter" "eqv?" "x" "lambda" "not" "if" "let" "return" "start" "test" "key" "target" "list")}
      {Lisp-Entry "find-object" definition #f 1957 20 1957 31 ("finally" "return" "when" "apply-key" "=" "val" "in-sequence" "obj" "for" "loop" "key" "key:" "Object" "<Object>" "seq" "procedure" "<procedure>" "proc")}
      {Lisp-Entry "find-in" definition #f 1965 20 1965 27 ("continuation-return" "apply-key" "apply-test" "object" "iterate" "exit" "continuation-capture" "set-position" "set-position~" "when" "iterate-sequence" "backward" "direction:" "explore" "Iterator" "<Iterator>" "iterator" "null/pair?" "and" "1" "+" "cdr" "else" "car" "null?" "cond" "fx" "<fx>" "rank" "tail" "rest" "iter" "0" "or" "eqv?" "x" "lambda" "not" "if" "list" "let" "find-in-list" "define" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "target" "seq")}
      {Lisp-Entry "find-balanced" definition #f 1992 20 1992 33 ("error" "else" "1" "-" "get-position" "get-position~" "position" "continuation-return" "case" "<" "decrease!" "increase!" "apply-key" "apply-test" "cond" "object" "iterate" "exit" "lambda" "continuation-capture" "set-position" "set-position~" "when" "0" "count" "iterate-sequence" "backward" "direction:" "explore" "if" "Iterator" "<Iterator>" "iterator" "let" "item" "return" "return:" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "seq" "close" "open")}
      {Lisp-Entry "find-if" definition #f 2013 20 2013 27 ("error" "else" "1" "-" "get-position" "get-position~" "position" "case" "continuation-return" "apply-key" "object" "iterate" "set-position" "set-position~" "when" "iterate-sequence" "backward" "direction:" "explore" "Iterator" "<Iterator>" "iterator" "let" "exit" "lambda" "continuation-capture" "0" "or" "find-if-list" "not" "null/pair?" "and" "if" "item" "return" "return:" "reversed?" "reversed?:" "start" "start:" "key" "key:" "Object" "<Object>" "seq" "procedure" "<procedure>" "predicate")}
      {Lisp-Entry "get-rank" definition #f 2031 20 2031 28 ("1" "-" "get-position" "get-position~" "continuation-return" "apply-key" "apply-test" "object" "iterate" "set-position" "set-position~" "when" "iterate-sequence" "backward" "direction:" "explore" "Iterator" "<Iterator>" "iterator" "let" "exit" "lambda" "continuation-capture" "string-find" "string?" "0" "or" "list-find" "not" "null/pair?" "and" "if" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "seq" "Object" "<Object>" "target")}
      {Lisp-Entry "skip" definition #f 2048 20 2048 24 ("1" "get-position" "get-position~" "-" "continuation-return" "apply-key" "not" "when" "object" "iterate" "set-position" "set-position~" "iterate-sequence" "iterator" "let" "return" "lambda" "continuation-capture" "0" "start" "start:" "key" "key:" "Object" "<Object>" "seq" "procedure" "<procedure>" "predicate")}
      {Lisp-Entry "append-map" definition #f 2060 20 2060 30 ("map" "append" "apply" "lists" "list1" "procedure" "<procedure>" "proc")}
      {Lisp-Entry "zip" definition #f 2064 20 2064 23 ("list" "map" "apply" "lists" "list1")}
      {Lisp-Entry "iota" definition #f 2068 20 2068 24 ("+" "-" "iota" "cons" "zero?" "if" "1" "step" "0" "start" "count")}
      {Lisp-Entry "fold-left" definition #f 2074 20 2074 29 ("cdr" "car" "fold-left" "null?" "if" "lst" "knil" "kcons")}
      {Lisp-Entry "fold-right" definition #f 2080 20 2080 30 ("cdr" "fold-right" "car" "null?" "if" "lst" "knil" "kcons")}
      {Lisp-Entry "unfold-right" definition #f 2086 20 2086 32 ("cons" "if" "lis" "loop" "let" "tail" "seed" "next" "seed->elem" "procedure" "<procedure>" "stop?")}
      {Lisp-Entry "some?" definition #f 2094 20 2094 25 ("continuation-return" "apply-key" "when" "object" "iterate-sequence" "iterate" "return" "lambda" "continuation-capture" "car" "seq" "let" "seqs" "key" "key:" "procedure" "<procedure>" "predicate")}
      {Lisp-Entry "every?" definition #f 2106 20 2106 26 ("continuation-return" "apply-key" "object" "map" "or" "objs" "iterate-sequences" "apply" "return" "lambda" "continuation-capture" "seqs" "key" "key:" "procedure" "<procedure>" "predicate")}
      {Lisp-Entry "concatenate" definition #f 2119 20 2119 31 ("class-of" "coerce" "not" "get-output" "get-output~" "output" "put-sequence" "put-sequence~" "sequence" "lambda" "for-each" "null/pair?" "list?" "car" "first" "let*" "List-Factory" "new" "fact" "let" "null?" "if" "rest")}
      {Lisp-Entry "concatenate!" definition #f 2134 20 2134 32 ("concatenate" "apply" "rest")}
      {Lisp-Entry "subset?" definition #f 2138 20 2138 27 ("memv?" "element" "lambda" "every?" "null?" "or" "set2" "set1")}
      {Lisp-Entry "union" definition #f 2145 20 2145 25 ("class-of" "coerce" "cdr" "put" "put~" "get-output" "get-output~" "apply-key" "member?" "not" "when" "object" "iterate-sequence" "iterate" "set" "lambda" "for-each" "put-sequence" "put-sequence~" "List-Factory" "new" "dst" "car" "first" "let" "null?" "if" "lists" "test" "test:" "key" "key:")}
      {Lisp-Entry "intersection" definition #f 2160 20 2160 32 ("class-of" "get-output" "get-output~" "coerce" "put" "put~" "member?" "set" "every?" "when" "object" "lambda" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "cdr" "car" "first" "let" "null?" "if" "lists" "test" "test:")}
      {Lisp-Entry "difference" definition #f 2175 20 2175 30 ("class-of" "get-output" "get-output~" "coerce" "put" "put~" "member?" "not" "when" "object" "lambda" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "null?" "if" "eqv?" "test" "test:" "y" "Object" "<Object>" "x")}
      {Lisp-Entry "set-xor" definition #f 2186 20 2186 27 ("difference" "union" "eqv?" "test" "test:" "y" "Object" "<Object>" "x")}
      {Lisp-Entry "remove" definition #f 2191 20 2191 26 ("class-of" "get-output" "get-output~" "coerce" "put" "put~" "apply-test" "not" "when" "object" "lambda" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "eqv?" "test" "test:" "seq" "Object" "<Object>" "target")}
      {Lisp-Entry "string-remove" specialize #f 2200 15 2200 28 ()}
      {Lisp-Entry "remove" specialize #f 2200 30 2200 36 ("get-output-string" "write-char" "eqv?" "not" "when" "element" "c" "cardinality" "below" "0" "from" "n" "for" "loop" "open-output-string" "output" "let" "string" "<string>" "str" "char" "<char>" "target")}
      {Lisp-Entry "extract-trailer" definition #f 2209 20 2209 35 ("cons" "obj" "class-of" "coerce" "element" "not" "0" "<" "or" "if" "trailer" "1" "cardinality" "-" "n" "iterate" "let" "procedure" "<procedure>" "predicate" "Object" "<Object>" "seq")}
      {Lisp-Entry "remove-trailing" definition #f 2219 20 2219 35 ("reverse" "cons" "set!" "apply-test" "and" "unless" "element" "lambda" "for-each" "trailing?" "result" "let" "eqv?" "test" "test:" "list" "Object" "<Object>" "target")}
      {Lisp-Entry "remove-enclosing" definition #f 2230 20 2230 36 ("subseq" "decrease!" "1" "-" ">" "increase!" "element" "apply-test" "<" "and" "while" "tail" "head" "cardinality" "end" "0" "start" "let*" "eqv?" "test" "test:" "seq" "Object" "<Object>" "target")}
      {Lisp-Entry "remove-duplicates" definition #f 2242 20 2242 37 ("class-of" "coerce" "put" "put~" "get-output" "get-output~" "apply-key" "member?" "not" "when" "object" "lambda" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "eqv?" "test" "test:" "key" "key:" "Object" "<Object>" "seq")}
      {Lisp-Entry "remove-false" definition #f 2251 20 2251 32 ("identity" "collect-if" "Object" "<Object>" "seq")}
      {Lisp-Entry "remove-empty" definition #f 2255 20 2255 32 ("empty?" "not" "obj" "lambda" "collect-if" "Object" "<Object>" "seq")}
      {Lisp-Entry "trim-spaces" definition #f 2261 20 2261 31 ("remove-enclosing" "seq")}
      {Lisp-Entry "trim-whitespace" definition #f 2265 20 2265 35 ("whitespace?" "ignore" "c" "lambda" "test:" "remove-enclosing" "seq")}
      {Lisp-Entry "mismatch" definition #f 2271 20 2271 28 ("if" "increase!" "continuation-return" "get-next" "get-next~" "or" "when" "done?" "done?~" "not" "while" "0" "pos" "targ" "iterate-sequence" "srce" "let" "return" "lambda" "continuation-capture" "equal?" "test" "test:" "seq" "Object" "<Object>" "target")}
      {Lisp-Entry "prefix" definition #f 2286 20 2286 26 ("0" "subseq" "cdr" "set!" "<" "not" "or" "and" "when" "mismatch" "n" "object" "lambda" "for-each" "min" "car" "ref" "let" "null?" "if" "equal?" "test" "test:" "Object" "<Object>" "sequences")}
      {Lisp-Entry "prefix?" definition #f 2301 20 2301 27 ("continuation-return" "get-next" "get-next~" "nu/=?" "when" "done?" "done?~" "not" "and" "while" "iter" "iterate-sequence" "targ" "let" "return" "lambda" "continuation-capture" "seq" "Object" "<Object>" "target")}
      {Lisp-Entry "copy-into!" definition #f 2312 20 2312 30 ("cardinality" "0" "naturals" "set-element!" "rank" "element" "lambda" "for-each" "seq2" "seq1")}
      {Lisp-Entry "Search-Context" class #f 2319 15 2319 29 ("any" "<any>" "procedure+" "<procedure+>" "bool" "<bool>" "Sequence" "<Sequence>" "Object")
        {Lisp-Entry "target" slot #f 2322 8 2322 14 ()}
        {Lisp-Entry "get-target" accessor #f 2322 48 2322 56 ()}
        {Lisp-Entry "set-target" accessor #f 2322 48 2322 56 ()}
        {Lisp-Entry "whole-words?" slot #f 2323 8 2323 20 ()}
        {Lisp-Entry "get-whole-words?" accessor #f 2323 48 2323 56 ()}
        {Lisp-Entry "set-whole-words?" accessor #f 2323 48 2323 56 ()}
        {Lisp-Entry "ignore-case?" slot #f 2324 8 2324 20 ()}
        {Lisp-Entry "get-ignore-case?" accessor #f 2324 48 2324 56 ()}
        {Lisp-Entry "set-ignore-case?" accessor #f 2324 48 2324 56 ()}
        {Lisp-Entry "regexp?" slot #f 2325 8 2325 15 ()}
        {Lisp-Entry "get-regexp?" accessor #f 2325 48 2325 56 ()}
        {Lisp-Entry "set-regexp?" accessor #f 2325 48 2325 56 ()}
        {Lisp-Entry "match-test" slot #f 2326 8 2326 18 ()}
        {Lisp-Entry "get-match-test" accessor #f 2326 48 2326 56 ()}
        {Lisp-Entry "set-match-test" accessor #f 2326 48 2326 56 ()}
        {Lisp-Entry "constituent-test" slot #f 2327 8 2327 24 ()}
        {Lisp-Entry "get-constituent-test" accessor #f 2327 48 2327 56 ()}
        {Lisp-Entry "set-constituent-test" accessor #f 2327 48 2327 56 ()}
        {Lisp-Entry "regexp" slot #f 2328 8 2328 14 ()}
        {Lisp-Entry "get-regexp" accessor #f 2328 48 2328 56 ()}
        {Lisp-Entry "set-regexp" accessor #f 2328 48 2328 56 ()}
        {Lisp-Entry "user-data" slot #f 2329 8 2329 17 ()}
        {Lisp-Entry "get-user-data" accessor #f 2329 48 2329 56 ()}
        {Lisp-Entry "set-user-data" accessor #f 2329 48 2329 56 ()}
        {Lisp-Entry "print" method #f 2332 20 2332 25 ("target" "system-format" "lambda" "self" "print-unreadable" "detail" "output")}}
      {Lisp-Entry "Search-Set" class #f 2338 15 2338 25 ("list" "<list>" "any" "<any>" "Object")
        {Lisp-Entry "regexp" slot #f 2341 8 2341 14 ()}
        {Lisp-Entry "get-regexp" accessor #f 2341 48 2341 56 ()}
        {Lisp-Entry "set-regexp" accessor #f 2341 48 2341 56 ()}
        {Lisp-Entry "contexts" slot #f 2342 8 2342 16 ()}
        {Lisp-Entry "get-contexts" accessor #f 2342 48 2342 56 ()}
        {Lisp-Entry "set-contexts" accessor #f 2342 48 2342 56 ()}}
      {Lisp-Entry "->search-context" definition #f 2345 20 2345 36 ("error" "else" "make-search-context" "string?" "get-contexts" "get-contexts~" "car" "Search-Set" "Search-Context" "is?" "cond" "obj")}
      {Lisp-Entry "make-search-context" definition #f 2351 20 2351 39 ("construct-search-context" "user-data" "user-data:" "constituent-test" "constituent-test:" "match-test" "match-test:" "regexp?" "regexp?:" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "target")}
      {Lisp-Entry "construct-search-context" definition #f 2360 20 2360 44 ("Search-Context" "construct" "user-data" "constituent-test" "match-test" "regexp?" "ignore-case?" "whole-words?" "target")}
      {Lisp-Entry "->search-set" definition #f 2364 20 2364 32 ("error" "else" "search-context->sre" "or" "cons" "sre->irregex" "map" "contexts" "let" "list?" "->search-context" "->search-set" "string?" "list" "search-context-regexp" "make-search-set" "Search-Context" "Search-Set" "is?" "cond" "obj")}
      {Lisp-Entry "make-search-set" definition #f 2374 20 2374 35 ("Search-Set" "construct" "contexts" "regexp")}
      {Lisp-Entry "search-context->sre" definition #f 2378 13 2378 32 ("get-target" "get-target~" "posix-string" "get-regexp?" "get-regexp?~" "seq" "w/nocase" "get-ignore-case?" "get-ignore-case?~" "if" "list" "Search-Context" "<Search-Context>" "context")}
      {Lisp-Entry "search-context-regexp" definition #f 2384 20 2384 41 ("set-regexp" "set-regexp~" "search-context->sre" "sre->irregex" "rx" "let" "get-regexp" "get-regexp~" "or" "Search-Context" "<Search-Context>" "context")}
      {Lisp-Entry "regular-search-impl" definition #f 2391 13 2391 32 ("else" "+" "cons" "res" "after" "1" "-" "element" "and" "before" ">" "<" "cond" "irregex-match-end-index" "to" "irregex-match-start-index" "from" "not" "irregex-search" "match" "best" "i" "lp" "let" "0" "if" "cardinality" "card" "get-regexp" "get-regexp~" "regexp" "word-constituent?" "get-constituent-test" "get-constituent-test~" "get-match-test" "get-match-test~" "or" "get-whole-words?" "get-whole-words?~" "whole-words?" "get-contexts" "get-contexts~" "car" "first-context" "->search-set" "search-set" "let*" "bool" "<bool>" "reversed?" "end" "fx+" "<fx+>" "start" "constituent-test" "procedure+" "<procedure+>" "match-test" "any" "<any>" "target" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "regular-search" definition #f 2423 20 2423 34 ("regular-search-impl" "constituent-test" "constituent-test:" "match-test" "match-test:" "reversed?" "reversed?:" "end" "end:" "start" "start:" "any" "<any>" "target" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "regular-search-all" definition #f 2432 20 2432 38 ("queue-list" "cdr" "car" "enqueue" "begin" "regular-search-impl" "found" "0" "if" "or" "fx" "<fx>" "pos" "iter" "->search-set" "search-set" "new-queue" "queue" "cardinality" "len" "let" "constituent-test" "constituent-test:" "match-test" "match-test:" "reversed?" "reversed?:" "end" "end:" "start" "start:" "any" "<any>" "target" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "search" definition #f 2450 20 2450 26 ("car" "regular-search-impl" "found" "construct-search-context" "string?" "if" "->search-set" "search-set" "let" "int+" "<int+>" "constituent-test" "constituent-test:" "match-test" "match-test:" "regexp?" "regexp?:" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "reversed?" "reversed?:" "end" "end:" "start" "start:" "Object" "<Object>" "target" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "search-all" definition #f 2468 20 2468 30 ("regular-search-all" "car" "map" "construct-search-context" "string?" "if" "->search-set" "search-set" "let" "list" "<list>" "constituent-test" "constituent-test:" "match-test" "match-test:" "regexp?" "regexp?:" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "reversed?" "reversed?:" "end" "end:" "start" "start:" "Object" "<Object>" "target" "Sequence" "<Sequence>" "seq")}
      {Lisp-Entry "split" definition #f 2488 20 2488 25 ("when" "search" "iterate" "incr" "else" "get-output" "get-output~" "1" "+" "subseq" "put" "put~" "set!" "if" "position" "return:" "start:" "find-if" "pos" "not" "while" "done?" "List-Factory" "new" "result" "0" "previous" "let" "procedure?" "cardinality" "zero?" "cond" "list" "<list>" "separator" "Object" "<Object>" "seq")}
      {Lisp-Entry "split-justified" definition #f 2517 20 2517 35 ("get-output" "get-output~" "increase!" "+" "set!" "subseq" "put" "put~" "begin" "<=" "if" "-" "effective-width" "not" "while" "done?" "List-Factory" "new" "result" "cardinality" "size" "pos" "let" "0" "column" "column:" "separators" "width" "Object" "<Object>" "seq")}
      {Lisp-Entry "join" definition #f 2534 20 2534 24 ("get-output" "get-output~" "concatenate" "apply" "seq" "lambda" "for-each" "put" "put~" "List-Factory" "new" "dst" "join-strings" "string?" "if" "first" "let" "else" "car" "cdr" "null?" "cond" "separator" "Object" "<Object>" "sequences")}
      {Lisp-Entry "join-symbols" definition #f 2553 20 2553 32 ("symbol->string" "map" "join" "string->symbol" "separator" "symbols")}
      {Lisp-Entry "inject" definition #f 2557 20 2557 26 ("get-output" "get-output~" "put" "put~" "put-sequence" "put-sequence~" "set!" "if" "element" "lambda" "for-each" "first?" "List-Factory" "new" "fact" "let" "inserted" "sequence")}
      {Lisp-Entry "substitute" definition #f 2569 20 2569 30 ("class-of" "get-output" "get-output~" "coerce" "put-sequence" "put-sequence~" "put" "put~" "apply-key" "apply-test" "if" "get-next" "get-next~" "object" "done?" "done?~" "not" "while" "List-Factory" "new" "dst" "iterate-sequence" "src" "let" "sequence?" "sequence?:" "test" "test:" "key" "key:" "seq" "new-value" "Object" "<Object>" "old-value")}
      {Lisp-Entry "substitute-alist" definition #f 2582 20 2582 36 ("class-of" "get-output" "get-output~" "coerce" "put" "put~" "set!" "put-sequence" "put-sequence~" "apply-key" "apply-test" "when" "old" "bind" "unless" "replacement" "lambda" "for-each" "found?" "get-next" "get-next~" "object" "done?" "done?~" "not" "while" "List-Factory" "new" "dst" "iterate-sequence" "src" "let" "test" "test:" "key" "key:" "seq" "Object" "<Object>" "replacements")}
      {Lisp-Entry "fill!" definition #f 2600 20 2600 25 ("next" "next~" "put" "put~" "done?" "done?~" "not" "while" "set-position" "set-position~" "when" "iterate-sequence" "src" "let" "start" "start:" "object" "seq")}
      {Lisp-Entry "replace!" definition #f 2610 20 2610 28 ("next" "next~" "get-next" "get-next~" "put" "put~" "done?" "done?~" "not" "and" "while" "set-position" "set-position~" "when" "rep" "iterate-sequence" "src" "let" "start" "start:" "replacement" "seq")}
      {Lisp-Entry "ordered-position" definition #f 2621 20 2621 36 ("find" "<=" "test" "test:" "key" "key:" "seq" "object")}
      {Lisp-Entry "insert-ordered!" definition #f 2625 20 2625 35 ("cardinality" "or" "insert!" "apply-key" "ordered-position" "n" "let" "<=" "test" "test:" "key" "key:" "seq" "object")}
      {Lisp-Entry "merge-ordered" definition #f 2630 20 2630 33 ("get-next" "get-next~" "expr" "error" "else" ":right" ":greater" ":left" ":less" "next" "next~" ":same" ":equal" "case" "ky" "apply-key" "kx" "ey" "peek" "peek~" "ex" "let*" "done?" "done?~" "not" "and" "while" "compare" "ci-compare" "if" "or" "compare-proc" "iy" "iterate-sequence" "ix" "let" "case-insensitive?" "case-insensitive?:" "test" "test:" "right-key" "right-key:" "left-key" "left-key:" "key" "key:" "y" "x" "proc")}
      {Lisp-Entry "merge" definition #f 2656 20 2656 25 ("get-output" "get-output~" "cdr" "set-car!" "put" "put~" ":equal" "neq?" "not" "or" "if" "object" "list" "pair" "lambda" "for-each-pair" "List-Factory" "new" "res" "apply-key" "min-key" ":compare" "remove-false" "car" "map" "minimum" "min" "let*" "identity" "some?" "while" "copy" "scan" "let" "compare" "compare:" "key" "key:" "lists" "proc")}
      {Lisp-Entry "next-element" definition #f 2674 20 2674 32 ("-" "min" "modulo" "1" "+" "next" "0" "not" "if" "element" "cardinality" "card" "find" "rank" "let" "cycle?" "cycle?:" "elem" "seq")}
      {Lisp-Entry "previous-element" definition #f 2686 20 2686 36 ("0" "max" "modulo" "previous" "1" "-" "not" "if" "element" "cardinality" "card" "find" "rank" "let" "cycle?" "cycle?:" "elem" "seq")}
      {Lisp-Entry "random-element" definition #f 2698 20 2698 34 ("cardinality" "random" "element" "seq")}
      {Lisp-Entry "partition" definition #f 2702 20 2702 29 ("elements" "bind" "partition" "map" "reverse!" "cdr" "set-cdr!" "list" "cons" "set!" "not" "if" "associate" "pair" "category" "let*" "element" "lambda" "for-each" "result" "let" "test" "test:" "identity" "key" "key:" "sequence")}
      {Lisp-Entry "partition-binary" definition #f 2717 20 2717 36 ("values" "cons" "set!" "if" "elem" "lambda" "for-each" "no" "yes" "let" "predicate" "lst")}
      {Lisp-Entry "starts-with?" definition #f 2728 20 2728 32 ("0" "subseq" ">=" "and" "string=?" "string-ci=?" "if" "or" "tl" "cardinality" "sl" "let" "bool" "<bool>" "ignore-case?" "ignore-case?:" "test" "test:" "target" "seq")}
      {Lisp-Entry "ends-with?" definition #f 2738 20 2738 30 ("-" "subseq" ">=" "and" "string=?" "string-ci=?" "if" "or" "tl" "cardinality" "sl" "let" "bool" "<bool>" "ignore-case?" "ignore-case?:" "test" "test:" "target" "seq")}
      {Lisp-Entry "for-each-reversed" definition #f 2748 20 2748 37 ("car" "cdr" "pair?" "when" "iterate" "let" "lst" "proc")}
      {Lisp-Entry "find-if-list" definition #f 2755 13 2755 25 ("1" "+" "cdr" "error" "else" "item" "position" "eq?" "car" "null?" "cond" "fx" "<fx>" "rank" "tail" "rest" "iter" "x" "lambda" "not" "if" "let" "returned" "start" "key" "list" "predicate")}
      {Lisp-Entry "insert-sequence!" definition #f 2767 27 2767 43 ("replace-subseq!" "seq" "pos" "sequence")}
      {Lisp-Entry "Sequence-Explorer" class #f 2776 15 2776 32 ("fx" "<fx>" "Sequence" "<Sequence>" "Explorer")
        {Lisp-Entry "sequence" slot #f 2779 8 2779 16 ()}
        {Lisp-Entry "sequence-cardinality" slot #f 2780 8 2780 28 ()}
        {Lisp-Entry "current" slot #f 2781 8 2781 15 ()}
        {Lisp-Entry "initialize" method #f 2784 20 2784 30 ("current" "goto-end" "backward" "goto-beginning" "case" "not" "if" "set-direction" "cardinality" "sequence-cardinality" "sequence" "set!" "nextmethod" "start" "start:" "forward" "direction" "direction:" "seq")}
        {Lisp-Entry "peek-forward" method #f 2796 20 2796 32 ("current" "sequence" "element")}
        {Lisp-Entry "peek-backward" method #f 2800 20 2800 33 ("1" "current" "-" "sequence" "element")}
        {Lisp-Entry "goto-beginning" method #f 2804 20 2804 34 ("0" "current" "set!")}
        {Lisp-Entry "goto-end" method #f 2808 20 2808 28 ("sequence-cardinality" "current" "set!")}
        {Lisp-Entry "forward" method #f 2812 20 2812 27 ("1" "current" "increase!")}
        {Lisp-Entry "backward" method #f 2816 20 2816 28 ("1" "current" "decrease!")}
        {Lisp-Entry "done-forward?" method #f 2820 20 2820 33 ("sequence-cardinality" "current" ">=")}
        {Lisp-Entry "done-backward?" method #f 2824 20 2824 34 ("0" "current" "=")}
        {Lisp-Entry "put-forward" method #f 2828 20 2828 31 ("current" "sequence" "set-element!" "Object" "<Object>" "object")}
        {Lisp-Entry "put-backward" method #f 2832 20 2832 32 ("1" "current" "-" "sequence" "set-element!" "Object" "<Object>" "object")}
        {Lisp-Entry "get-position" method #f 2836 20 2836 32 ("current")}
        {Lisp-Entry "set-position" method #f 2840 20 2840 32 ("sequence-cardinality" "0" "between" "current" "set!" "fx" "<fx>" "pos")}
        {Lisp-Entry "get-state" method #f 2844 20 2844 29 ("current")}
        {Lisp-Entry "reset-state" method #f 2848 20 2848 31 ("current" "set!" "fx" "<fx>" "state")}}
      {Lisp-Entry "List-Class" class #f 2857 7 2857 17 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 2860 20 2860 37 ("make-list" "len")}}
      {Lisp-Entry "List" class #f 2864 17 2864 21 ("Sequence" "List-Class")
        {Lisp-Entry "initialize" method #f 2867 20 2867 30 ("native-class" "rest")}
        {Lisp-Entry "copy-object" method #f 2871 20 2871 31 ("self" "subcopy" "if" "x" "lambda" "map" "deep?")}
        {Lisp-Entry "iterate-object" method #f 2879 20 2879 34 ("self" "List-Iterator" "new")}
        {Lisp-Entry "sequence-element" method #f 2883 20 2883 36 ("self" "list-ref" "any" "<any>" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 2887 20 2887 41 ("self" "list-set!" "void" "<void>" "any" "<any>" "obj" "fx" "<fx>" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 2891 20 2891 40 ("self" "length" "fx" "<fx>")}
        {Lisp-Entry "sequence-tail" method #f 2895 20 2895 33 ("1" "-" "cdr" "tail" "0" "=" "self" "null?" "or" "if" "n")}
        {Lisp-Entry "sequence-last" method #f 2901 20 2901 33 ("last" "car" "self" "cdr" "null?" "if")}
        {Lisp-Entry "sequence-butlast" method #f 2907 20 2907 36 ("butlast" "car" "cons" "cdr" "self" "null?" "or" "if")}
        {Lisp-Entry "sequence-subseq!" method #f 2913 20 2913 36 ("subseq" "self" "-1" "0" "=" "or" "if" "end" "start")}
        {Lisp-Entry "replace-subseq!" method #f 2919 11 2919 26 ("+" "after" "1" "-" "before" "let*" "self" "tail" "last-tail" "set-cdr!" "begin" "0" "=" "if" "seq" "end" "start")}}
      {Lisp-Entry "Null-Class" class #f 2931 7 2931 17 ("List-Class")}
      {Lisp-Entry "Null" class #f 2934 17 2934 21 ("List" "Null-Class")
        {Lisp-Entry "compare-object" method #f 2937 20 2937 34 (":not-equal" ":equal" "null?" "if" "obj")}}
      {Lisp-Entry "Pair-Class" class #f 2943 7 2943 17 ("List-Class")}
      {Lisp-Entry "Pair" class #f 2946 17 2946 21 ("List" "Pair-Class")
        {Lisp-Entry "compare-object" method #f 2949 20 2949 34 (":not-equal" "else" "null?" "and" "cond" "right" "cdr" "left" "let" ":equal" ":greater" ":less" "self" "car" "compare" "case" "pair?" "if" "obj")}
        {Lisp-Entry "walk-references" method #f 2969 20 2969 35 ("cdr" "self" "car" "walk-references" "walk-references~" "proc")}
        {Lisp-Entry "setup-context" method #f 2974 20 2974 33 ("cdr" "self" "car" "setup-context" "setup-context~" "context")}}
      {Lisp-Entry "element" specialize #f 2979 20 2979 27 ("list-ref" "any" "<any>" "int" "<int>" "n" "<list>" "list")}
      {Lisp-Entry "cardinality" specialize #f 2983 20 2983 31 ("length" "int" "<int>" "<list>" "list")}
      {Lisp-Entry "insert!" definition #f 2987 20 2987 27 ("class-of" "list" "coerce" "cardinality" "or" "insert-sequence!" "obj" "pos" "seq")}
      {Lisp-Entry "atom?" definition #f 2991 20 2991 25 ("number?" "keyword?" "symbol?" "string?" "char?" "boolean?" "null?" "or" "value")}
      {Lisp-Entry "null/pair?" definition #f 3001 27 3001 37 ("pair?" "null?" "or" "obj")}
      {Lisp-Entry "one-element?" definition #f 3005 27 3005 39 ("cdr" "null?" "pair?" "and" "obj")}
      {Lisp-Entry "last-tail" definition #f 3009 20 3009 29 ("cdr" "pair?" "cur" "iter" "let" "null?" "if" "lst")}
      {Lisp-Entry "make-list" definition #f 3018 20 3018 29 ("1" "-" "cons" "set!" "0" ">" "while" "list" "car" "null?" "if" "fill" "let" "rest" "n")}
      {Lisp-Entry "list-set!" definition #f 3027 27 3027 36 ("list-tail" "set-car!" "value" "n" "list")}
      {Lisp-Entry "set-cadr!" definition #f 3031 27 3031 36 ("cdr" "set-car!" "value" "pair")}
      {Lisp-Entry "append!" definition #f 3035 20 3035 27 ("queue-list" "enqueue-list" "lst" "lambda" "for-each" "new-queue" "queue" "let" "rest")}
      {Lisp-Entry "position" definition #f 3043 20 3043 28 ("0" "1" "+" "cdr" "else" "car" "eqv?" "null?" "cond" "pos" "position" "define" "lst" "element")}
      {Lisp-Entry "copy-tree" definition #f 3055 20 3055 29 ("cdr" "car" "copy-tree" "cons" "pair?" "if" "tree")}
      {Lisp-Entry "position-of" definition #f 3062 20 3062 31 ("1" "+" "cdr" "car" "eq?" "null?" "if" "0" "fx" "<fx>" "i" "rst" "iter" "let" "lst" "obj")}
      {Lisp-Entry "proper-list?" definition #f 3071 20 3071 32 ("cdr" "proper-list?" "else" "pair?" "not" "null?" "cond" "lst")}
      {Lisp-Entry "proper-length" definition #f 3077 20 3077 33 ("0" "1" "+" "cdr" "pair?" "if" "n" "length" "define" "l")}
      {Lisp-Entry "last-cdr" definition #f 3086 20 3086 28 ("cdr" "last-cdr" "pair?" "if" "lst")}
      {Lisp-Entry "but-last-cdr" definition #f 3092 20 3092 32 ("cdr" "but-last-cdr" "car" "cons" "pair?" "if" "lst")}
      {Lisp-Entry "move-to-head!" definition #f 3098 20 3098 33 ("else" "cons" "set-cdr!" "cond" "cdr" "scan" "previous" "iter" "let" "car" "eq?" "null?" "or" "if" "lst" "target")}
      {Lisp-Entry "move-to-tail!" definition #f 3109 20 3109 33 ("begin" "if" "scan" "previous" "iter" "let" "else" "cdr" "cons" "last-tail" "set-cdr!" "car" "eq?" "null?" "cond" "lst" "target")}
      {Lisp-Entry "augment" definition #f 3128 20 3128 27 ("get-output" "get-output~" "set!" "put" "put~" "car" "put-sequence" "put-sequence~" "cdr" "null?" "if" "not-null?" "while" "scan" "List-Factory" "new" "fact" "let" "rest")}
      {Lisp-Entry "memq?" definition #f 3139 27 3139 32 ("memq" "boolean" "list" "Object" "<Object>" "target")}
      {Lisp-Entry "memv?" definition #f 3143 27 3143 32 ("memv" "boolean" "list" "Object" "<Object>" "target")}
      {Lisp-Entry "member?" definition #f 3147 20 3147 27 ("cdr" "else" "car" "apply-key" "apply-test" "null?" "cond" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "Object" "<Object>" "target")}
      {Lisp-Entry "assq-value" definition #f 3157 20 3157 30 ("cdr" "if" "assq" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "assv-value" definition #f 3164 20 3164 30 ("cdr" "if" "assv" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "assoc-value" definition #f 3171 20 3171 31 ("cdr" "if" "assoc" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "associate" definition #f 3178 20 3178 29 ("cdr" "apply-key" "apply-test" "car" "pair" "null?" "if" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "Object" "<Object>" "target")}
      {Lisp-Entry "rassociate" definition #f 3188 20 3188 30 ("cdr" "apply-key" "apply-test" "car" "pair" "null?" "if" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "Object" "<Object>" "target")}
      {Lisp-Entry "find-pair" definition #f 3198 20 3198 29 ("cdr" "else" "car" "eq?" "null?" "cond" "scan" "iter" "let" "list" "Object" "<Object>" "target")}
      {Lisp-Entry "reverse!" definition #f 3208 20 3208 28 ("set-cdr!" "cdr" "set!" "not-null?" "while" "ptr" "res" "let" "Object" "<Object>" "list")}
      {Lisp-Entry "remove!" definition #f 3219 20 3219 27 ("set-cdr!" "begin" "scan" "previous" "let" "null?" "if" "cdr" "set!" "car" "apply-key" "not-null?" "and" "while" "eqv?" "test" "test:" "key" "key:" "list" "Object" "<Object>" "target")}
      {Lisp-Entry "getprop" definition #f 3236 20 3236 27 ("cddr" "else" "car" "apply-key" "eqv?" "null?" "cond" "scan" "iter" "let" "key" "key:" "target" "Object" "<Object>" "plist")}
      {Lisp-Entry "getf" definition #f 3246 20 3246 24 ("cadr" "not" "if" "getprop" "pair" "let" "not-found" "not-found:" "key" "key:" "target" "Object" "<Object>" "plist")}
      {Lisp-Entry "setf" definition #f 3253 20 3253 24 ("getprop" "set-second!" "value" "target" "Object" "<Object>" "plist")}
      {Lisp-Entry "addf" definition #f 3257 20 3257 24 ("set-second!" "list" "append!" "not" "if" "getprop" "pair" "let" "value" "target" "Object" "<Object>" "plist")}
      {Lisp-Entry "for-each-pair" definition #f 3265 20 3265 33 ("cdr" "not-null?" "when" "iterate" "let" "lst" "proc")}
      {Lisp-Entry "for-each-property" definition #f 3272 20 3272 37 ("cddr" "cadr" "car" "not-null?" "when" "iterate" "let" "lst" "proc")}
      {Lisp-Entry "map-property" definition #f 3279 20 3279 32 ("queue-list" "enqueue" "value" "property" "lambda" "for-each-property" "new-queue" "queue" "let" "lst" "proc")}
      {Lisp-Entry "flatten" definition #f 3287 20 3287 27 ("append" "apply" "llist")}
      {Lisp-Entry "uniform" definition #f 3291 20 3291 27 ("cdr" "continuation-return" "apply-test" "unless" "value" "object" "for-each" "car" "apply-key" "first" "let" "return" "lambda" "continuation-capture" "null?" "if" "test" "test:" "key" "key:" "lst")}
      {Lisp-Entry "sort-property-list" definition #f 3305 20 3305 38 ("append" "apply" "car" "key:" "<" "sort" "sorted" "get-output" "get-output~" "for-each-property" "begin" "alist" "list" "put" "put~" "value" "property" "lambda" "proc" "List-Factory" "new" "factory" "let*" "Object" "<Object>" "prop-list")}
      {Lisp-Entry "plist->alist" definition #f 3316 20 3316 32 ("cadr" "car" "cons" "cddr" "reverse" "null?" "if" "res" "lp" "let" "ls")}
      {Lisp-Entry "alist->plist" definition #f 3323 20 3323 32 ("caar" "cdar" "cons" "cdr" "reverse" "null?" "if" "res" "lp" "let" "ls")}
      {Lisp-Entry "List-Iterator" class #f 3335 15 3335 28 ("Iterator")
        {Lisp-Entry "current" slot #f 3338 8 3338 15 ()}
        {Lisp-Entry "position" slot #f 3339 8 3339 16 ()}
        {Lisp-Entry "initialize" method #f 3342 20 3342 30 ("0" "position" "current" "set!" "nextmethod" "<list>" "list")}
        {Lisp-Entry "get-next!" method #f 3348 20 3348 29 ("1" "+" "position" "cdr" "set!" "car" "prog1" "eof-object" "current" "null?" "if")}
        {Lisp-Entry "done?" method #f 3356 20 3356 25 ("Empty" "peeked" "eq?" "current" "null?" "and")}
        {Lisp-Entry "put" method #f 3360 20 3360 23 ("current" "set-car!" "object")}
        {Lisp-Entry "get-position" method #f 3364 20 3364 32 ("position")}
        {Lisp-Entry "set-position" method #f 3368 20 3368 32 ("tail" "current" "set!" ">" "error" "0" "<" "cond" "position" "-" "delta" "let" "pos")}
        {Lisp-Entry "get-state" method #f 3376 20 3376 29 ("position" "current" "cons")}
        {Lisp-Entry "reset-state" method #f 3380 20 3380 31 ("cdr" "position" "car" "current" "set!" "state")}
        {Lisp-Entry "get-list" method #f 3385 18 3385 26 ("current")}}
      {Lisp-Entry "List-Factory" class #f 3394 7 3394 19 ("0" "fx" "<fx>" "initialize" "Object")
        {Lisp-Entry "list" slot #f 3397 8 3397 12 ()}
        {Lisp-Entry "get-list" accessor #f 3397 46 3397 54 ()}
        {Lisp-Entry "last-list" slot #f 3398 8 3398 17 ()}
        {Lisp-Entry "last-anchor" slot #f 3399 8 3399 19 ()}
        {Lisp-Entry "current" slot #f 3400 8 3400 15 ()}
        {Lisp-Entry "size" slot #f 3401 8 3401 12 ()}
        {Lisp-Entry "get-size" accessor #f 3401 46 3401 54 ()}
        {Lisp-Entry "put" method #f 3404 11 3404 14 ("increase!" "size" "prog1" "cdr" "set-cdr!" "copy-last-list" "last-list" "when" "else" "list" "cons" "set!" "current" "null?" "cond" "Object" "<Object>" "object")}
        {Lisp-Entry "put-unique" method #f 3417 11 3417 21 ("put" "list" "member?" "unless" "eqv?" "test" "test:" "object")}
        {Lisp-Entry "put-sequence" method #f 3422 11 3422 23 ("cardinality" "increase!" "size" "prog1" "set-cdr!" "last-anchor" "copy-last-list" "else" "list" "last-list" "set!" "current" "null?" "cond" "put" "iterate" "pair?" "not" "if" "when" "Object" "<Object>" "seq")}
        {Lisp-Entry "is-empty?" method #f 3440 18 3440 27 ("current" "null?")}
        {Lisp-Entry "get-last-element" method #f 3444 18 3444 34 ("current" "car")}
        {Lisp-Entry "get-output" method #f 3448 11 3448 21 ("list")}
        {Lisp-Entry "reset" method #f 3452 18 3452 23 ("0" "size" "current" "last-anchor" "last-list" "list" "set!")}
        {Lisp-Entry "copy-last-list" method #f 3460 19 3460 33 ("set-cdr!" "else" "last-tail" "current" "last-list" "copy" "list" "set!" "last-anchor" "not" "cond")}}
      {Lisp-Entry "Table" class #f 3476 17 3476 22 ("Object")
        {Lisp-Entry "initialize" method #f 3479 20 3479 30 ("native-class" "rest")}
        {Lisp-Entry "print" method #f 3483 20 3483 25 ("table-length" "system-format" "lambda" "self" "print-unreadable" "readably" "output")}}
      {Lisp-Entry "table-add" definition #f 3490 20 3490 29 ("table-ref" "cons" "table-set!" "value" "key" "Table" "<Table>" "table")}
      {Lisp-Entry "table-remove!" definition #f 3494 20 3494 33 ("table-ref" "remove!" "table-set!" "value" "name" "Table" "<Table>" "table")}
      {Lisp-Entry "empty-table" definition #f 3498 20 3498 31 ("table-clear" "v" "k" "lambda" "iterate-table" "table")}
      {Lisp-Entry "table-keys" definition #f 3504 20 3504 30 ("cons" "set!" "value" "key" "lambda" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-values" definition #f 3512 20 3512 32 ("cons" "set!" "value" "key" "lambda" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-keys/values" definition #f 3520 20 3520 37 ("cons" "set!" "value" "key" "lambda" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-find" definition #f 3528 20 3528 30 ("continuation-return" "when" "v" "k" "iterate-table" "return" "lambda" "continuation-capture" "eqv?" "test" "test:" "value" "table")}
      {Lisp-Entry "table-load" definition #f 3538 20 3538 30 ("table-set!" "error" "table-ref" "if" "eof-object?" "not" "and" "when" "object" "read" "name" "iterate" "let" "error-on-duplicates?" "input" "table")}
      {Lisp-Entry "Slot" class #f 3555 7 3555 11 ("Field")
        {Lisp-Entry "offset" slot #f 3558 8 3558 14 ()}
        {Lisp-Entry "get-offset" accessor #f 3558 26 3558 34 ()}
        {Lisp-Entry "initialize" slot #f 3559 8 3559 18 ()}
        {Lisp-Entry "get-initialize" accessor #f 3559 26 3559 34 ()}}
      {Lisp-Entry "Property" class #f 3567 7 3567 15 ("Slot")
        {Lisp-Entry "getter" slot #f 3570 8 3570 14 ()}
        {Lisp-Entry "get-getter" accessor #f 3570 22 3570 30 ()}
        {Lisp-Entry "setter" slot #f 3571 8 3571 14 ()}
        {Lisp-Entry "get-setter" accessor #f 3571 22 3571 30 ()}}
      {Lisp-Entry "property?" definition #f 3574 27 3574 36 ("Property" "is?" "obj")}
      {Lisp-Entry "symbolize-property" definition #f 3578 20 3578 38 ("else" "keyword->symbol" "keyword?" "get-name" "get-name~" "field?" "cond" "Object" "<Object>" "property")}
      {Lisp-Entry "symbolize-properties" definition #f 3584 20 3584 40 ("get-output" "get-output~" "symbolize-property" "put" "put~" "value" "property" "lambda" "for-each-property" "List-Factory" "new" "fact" "let" "Object" "<Object>" "properties")}
      {Lisp-Entry "keywordize-property" definition #f 3594 20 3594 39 ("else" "keyword?" "field-name" "symbol->keyword" "field?" "cond" "Object" "<Object>" "property")}
      {Lisp-Entry "keywordize-properties" definition #f 3600 20 3600 41 ("get-output" "get-output~" "keywordize-property" "put" "put~" "value" "property" "lambda" "for-each-property" "List-Factory" "new" "fact" "let" "Object" "<Object>" "properties")}
      {Lisp-Entry "read-property" definition #f 3610 20 3610 33 ("error" "if" "class-of" "property-field" "property-getter" "getter" "let" "expr" "Object" "<Object>" "object")}
      {Lisp-Entry "write-property" definition #f 3617 20 3617 34 ("error" "if" "class-of" "property-field" "property-setter" "setter" "let" "value" "expr" "Object" "<Object>" "object")}
      {Lisp-Entry "property-field" definition #f 3624 20 3624 34 ("error" "category-field" "field" "let" "property?" "if" "else" "enumerator->symbol" "enumerator?" "keyword->symbol" "keyword?" "cond" "property->symbol" "define" "Object" "<Object>" "expr" "Class" "<Class>" "class")}
      {Lisp-Entry "property-field?" definition #f 3638 20 3638 35 ("category-field" "boolean" "<symbol>" "symbol" "Class" "<Class>" "class")}
      {Lisp-Entry "String-Class" class #f 3647 7 3647 19 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 3650 20 3650 37 ("make-string" "len")}
        {Lisp-Entry "coerce-object" method #f 3654 20 3654 33 ("coerce-string" "coerce-string~" "nextmethod" "sequence?" "if" "Object" "<Object>" "obj")}}
      {Lisp-Entry "String" class #f 3660 17 3660 23 ("Sequence" "String-Class")
        {Lisp-Entry "initialize" method #f 3663 20 3663 30 ("native-class" "rest")}
        {Lisp-Entry "compare-object" method #f 3667 20 3667 34 (":incompatible" ":greater" "else" ":less" "string<?" ":equal" "self" "string=?" "cond" "string?" "if" "obj")}
        {Lisp-Entry "ci-compare-object" method #f 3679 20 3679 37 (":incompatible" ":greater" "else" ":less" "string-ci<?" ":equal" "self" "string-ci=?" "cond" "string?" "if" "obj")}
        {Lisp-Entry "sequence-element" method #f 3691 20 3691 36 ("self" "string-ref" "any" "<any>" "fx" "<fx>" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 3695 20 3695 41 ("self" "string-set!" "void" "<void>" "any" "<any>" "obj" "fx" "<fx>" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 3699 20 3699 40 ("self" "string-length" "fx" "<fx>")}
        {Lisp-Entry "sequence-tail" method #f 3703 20 3703 33 ("substring" ">=" "if" "self" "cardinality" "lgt" "let" "n")}
        {Lisp-Entry "sequence-last" method #f 3710 20 3710 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 3714 20 3714 36 ("1" "cardinality" "-" "0" "self" "substring")}}
      {Lisp-Entry "=" specialize #f 3718 20 3718 21 ("string=?" "bool" "<bool>" "s2" "string" "<string>" "s1")}
      {Lisp-Entry "element" specialize #f 3722 20 3722 27 ("string-ref" "char" "<char>" "int" "<int>" "n" "<string>" "string")}
      {Lisp-Entry "set-element!" specialize #f 3726 20 3726 32 ("string-set!" "void" "<void>" "char" "<char>" "c" "int" "<int>" "n" "<string>" "string")}
      {Lisp-Entry "cardinality" specialize #f 3730 20 3730 31 ("string-length" "int" "<int>" "<string>" "string")}
      {Lisp-Entry "subseq" specialize #f 3734 20 3734 26 ("substring" "end" "int" "<int>" "start" "<string>" "string")}
      {Lisp-Entry "replace-subseq!" specialize #f 3738 13 3738 28 ("cardinality" "0" "subseq" "string-append" "replacement" "end" "int" "<int>" "start" "<string>" "string")}
      {Lisp-Entry "empty-string?" definition #f 3753 20 3753 33 ("string-length" "zero?" "string?" "and" "object")}
      {Lisp-Entry "->string" definition #f 3758 20 3758 28 ("get-output-string" "print" "open-output-string" "output" "let" ":human" "detail" "expr")}
      {Lisp-Entry "remove-trailing-char" definition #f 3764 20 3764 40 ("subseq" "1" "-" "element" "eqv?" "0" ">" "and" "if" "cardinality" "len" "let" "c" "string")}
      {Lisp-Entry "value-string?" definition #f 3772 20 3772 33 ("empty-string?" "not" "string?" "and" "Object" "<Object>" "object")}
      {Lisp-Entry "wi=" definition #f 3777 20 3777 23 ("else" "eqv?" "eq?" "continuation-return" "cond" "when" ">=" "increase!" "element" "whitechar?" "and" "set!" "not" "or" "while" "d2?" "=" "d1?" "w2?" "w1?" "bool" "<bool>" "s?" "l2" "cardinality" "l1" "n2" "0" "fx" "<fx>" "n1" "let*" "return" "lambda" "continuation-capture" "s2" "Object" "<Object>" "s1")}
      {Lisp-Entry "unique-domain-name" definition #f 3817 20 3817 38 ("increase!" "->string" "set!" "iterate" "let" "suffix" "1" "n" "subseq" "starts-with?" "when" "string" "lambda" "collect" "suffixes" "cardinality" "common-length" "concatenate" "common-prefix" "let*" "member?" "not" "if" "separator" "separator:" "domain" "name")}
      {Lisp-Entry "remove-numeric-suffix" definition #f 3837 20 3837 41 ("1" "+" "0" "subseq" "if" "position" "return:" "reversed?:" "numeric?" "not" "c" "lambda" "find-if" "pos" "let" "string")}
      {Lisp-Entry "compare-n" definition #f 3844 20 3844 29 ("1" "+" "string-ref" "not" "or" ">=" "if" "0" "n" "iter" "ylen" "string-length" "xlen" "let" "eqv?" "test" "test:" "max" "y" "x")}
      {Lisp-Entry "string-checksum" definition #f 3855 20 3855 35 ("1" "+" "string-ref" "char->integer" "increase!" "<" "when" "n" "iter" "string-length" "len" "0" "sum" "let" "str")}
      {Lisp-Entry "split-lines" definition #f 3865 20 3865 31 ("read-lines" "call-with-input-string" "string")}
      {Lisp-Entry "join-lines" definition #f 3870 20 3870 30 ("join" "lines")}
      {Lisp-Entry "seconds->milliseconds" definition #f 3879 20 3879 41 ("1000" "*" "round" "inexact->exact" "x")}
      {Lisp-Entry "seconds->microseconds" definition #f 3883 20 3883 41 ("1000000" "*" "round" "inexact->exact" "x")}
      {Lisp-Entry "primordial-thread-object" definition #f 3892 12 3892 36 ("current-thread")}
      {Lisp-Entry "primordial-thread" definition #f 3896 20 3896 37 ("primordial-thread-object")}
      {Lisp-Entry "primordial-thread?" definition #f 3900 20 3900 38 ("primordial-thread" "current-thread" "eq?")}
      {Lisp-Entry "new-thread" definition #f 3904 20 3904 30 ("make-root-thread" "apply" "rest" "thunk")}
      {Lisp-Entry "top-threads" definition #f 3910 20 3910 31 ("primordial-thread" "thread-thread-group" "thread-group->thread-list")}
      {Lisp-Entry "present-thread-name" definition #f 3914 20 3914 39 ("->string" "else" "unspecified?" "not" "or" "cond" "name")}
      {Lisp-Entry "present-thread-state" definition #f 3919 20 3919 40 ("get-output-string" "else" "when" "write" "thread-state-active-timeout" "thread-state-active-waiting-for" "wf" "thread-state-active?" "thread-state-abnormally-terminated?" "thread-state-normally-terminated?" "thread-state-initialized?" "system-format" "thread-state-uninitialized?" "cond" "10.0" "*" "round" "/" "current-systime" "systime->seconds" "-" "expiry" "display" "to" "write-timeout" "define" "open-output-string" "port" "let" "state")}
      {Lisp-Entry "present-object" definition #f 3957 20 3957 34 ("object->string" "if" "object->serial" "number->string" "class-of" "category-name" "symbol->string" "string-append" "class-string" "let" "exc" "lambda" "with-exception-catcher" "max-width" "object")}
      {Lisp-Entry "thread-loop?" definition #f 3974 21 3974 33 ("thread-specific" "thread")}
      {Lisp-Entry "thread-start-loop" definition #f 3977 21 3977 38 ("thread-specific-set!" "thread")}
      {Lisp-Entry "thread-stop-loop" definition #f 3980 21 3980 37 ("thread-specific-set!" "thread")}
      {Lisp-Entry "thread-loop" definition #f 3984 21 3984 32 ("current-thread" "thread-loop?" "when" "thread-read" "thunk" "loop" "let")}
      {Lisp-Entry "start-loop-thread" definition #f 3992 20 3992 37 ("thread-start!" "thread-start-loop" "thread-loop" "new-thread" "apply" "thread" "let" "rest")}
      {Lisp-Entry "thread-ports" definition #f 3999 12 3999 24 ("weak-keys:" "eq?" "test:" "make-table")}
      {Lisp-Entry "thread-ports-mutex" definition #f 4002 12 4002 30 ("thread-ports" "make-mutex")}
      {Lisp-Entry "thread-has-port?" definition #f 4006 21 4006 37 ("thread-ports" "table-ref" "boolean" "thread")}
      {Lisp-Entry "get-thread-port" definition #f 4010 13 4010 28 ("mutex-unlock!" "table-set!" "open-vector" "port" "let" "thread-ports" "table-ref" "or" "prog1" "thread-ports-mutex" "mutex-lock!" "thread")}
      {Lisp-Entry "thread-write" definition #f 4019 21 4019 33 ("force-output" "write" "get-thread-port" "thread-port" "let" "value" "thread")}
      {Lisp-Entry "thread-read" definition #f 4025 21 4025 32 ("read" "+infinity" "input-port-timeout-set!" "current-thread" "get-thread-port" "thread-port" "let")}
      {Lisp-Entry "thread-read-non-blocking" definition #f 4031 21 4031 45 ("read" "0" "input-port-timeout-set!" "current-thread" "get-thread-port" "thread-port" "let")}
      {Lisp-Entry "thread-post" definition #f 4037 20 4037 31 ("thread-write" "current-thread" "eq?" "if" "thunk" "name" "thread")}
      {Lisp-Entry "thread-execute" definition #f 4043 20 4043 34 ("mutex-unlock!" "unwind-protect" "lambda" "thread-write" "mutex-lock!" "make-mutex" "mutex" "let" "current-thread" "eq?" "if" "thunk" "name" "thread")}
      {Lisp-Entry "thread-call-noresult" definition #f 4056 12 4056 32 ("thread-call-noresult" "list")}
      {Lisp-Entry "thread-call-result?" definition #f 4060 21 4060 40 ("thread-call-noresult" "neq?" "result")}
      {Lisp-Entry "thread-call" definition #f 4064 20 4064 31 ("mutex-specific" "mutex-unlock!" "unwind-protect" "lambda" "thread-write" "thread-call-noresult" "mutex-specific-set!" "mutex-lock!" "make-mutex" "mutex" "eq?" "if" "current-thread" "delegator" "let" "thunk" "name" "thread")}
      {Lisp-Entry "thread-exit" definition #f 4080 20 4080 31 ("pristine-thread-continuation" "continuation-return")}
      {Lisp-Entry "sleep" definition #f 4084 20 4084 25 ("thread-sleep!" "delay")}
      {Lisp-Entry "is-not?" definition #f 4093 27 4093 34 ("is?" "not" "type" "object")}
      {Lisp-Entry "category-identifier" definition #f 4097 19 4097 38 ("get-category-identifier")}
      {Lisp-Entry "category-descendants" definition #f 4100 19 4100 39 ("get-category-descendants")}
      {Lisp-Entry "class-ascendant" definition #f 4103 19 4103 34 ("get-class-ascendant")}
      {Lisp-Entry "category-name" definition #f 4107 27 4107 40 ("category-identifier" "reference-name" "category")}
      {Lisp-Entry "category-unit" definition #f 4111 27 4111 40 ("category-identifier" "reference-unit" "category")}
      {Lisp-Entry "either" definition #f 4121 20 4121 26 ("unspecified" "continuation-return" "specified?" "when" "value" "for-each" "return" "lambda" "continuation-capture" "rest")}
      {Lisp-Entry "Vector-Class" class #f 4136 7 4136 19 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 4139 20 4139 37 ("make-vector" "len")}}
      {Lisp-Entry "Vector" class #f 4143 17 4143 23 ("Sequence" "Vector-Class")
        {Lisp-Entry "initialize" method #f 4146 20 4146 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 4151 11 4151 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 4157 20 4157 36 ("self" "vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 4161 20 4161 41 ("self" "vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 4165 20 4165 40 ("self" "vector-length")}
        {Lisp-Entry "sequence-tail" method #f 4169 20 4169 33 ("self" "vector->list" "tail" "list->vector" "n")}
        {Lisp-Entry "sequence-last" method #f 4173 20 4173 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 4177 20 4177 36 ("self" "vector->list" "butlast" "list->vector")}}
      {Lisp-Entry "element" specialize #f 4181 20 4181 27 ("vector-ref" "object" "<object>" "int" "<int>" "n" "<vector>" "vector")}
      {Lisp-Entry "set-element!" specialize #f 4185 20 4185 32 ("vector-set!" "void" "<void>" "object" "<object>" "obj" "int" "<int>" "n" "<vector>" "vector")}
      {Lisp-Entry "cardinality" specialize #f 4189 20 4189 31 ("vector-length" "int" "<int>" "<vector>" "vector")}
      {Lisp-Entry "AXIS_MIN_SIZE" definition #f 4198 12 4198 25 ("8")}
      {Lisp-Entry "AXIS_GOLDEN_RATIO" definition #f 4199 12 4199 29 ("1.6")}
      {Lisp-Entry "Axis-Class" class #f 4202 7 4202 17 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 4205 20 4205 37 ("Axis" "new" "len")}}
      {Lisp-Entry "Axis" class #f 4209 7 4209 11 ("vector" "<vector>" "fx" "<fx>" "Sequence" "Axis-Class")
        {Lisp-Entry "size" slot #f 4212 8 4212 12 ()}
        {Lisp-Entry "get-size" accessor #f 4212 35 4212 43 ()}
        {Lisp-Entry "set-size" accessor #f 4212 35 4212 43 ()}
        {Lisp-Entry "content" slot #f 4213 8 4213 15 ()}
        {Lisp-Entry "get-content" accessor #f 4213 35 4213 43 ()}
        {Lisp-Entry "set-content" accessor #f 4213 35 4213 43 ()}
        {Lisp-Entry "initialize" method #f 4216 20 4216 30 ("make-vector" "content" "size" "set!" "fx" "<fx>" "s")}
        {Lisp-Entry "print" method #f 4221 20 4221 25 ("content" "size" "system-format" "lambda" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "sequence-element" method #f 4227 20 4227 36 ("self" "element" "any" "<any>" "fx" "<fx>" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 4231 20 4231 41 ("self" "set-element!" "void" "<void>" "any" "<any>" "obj" "fx" "<fx>" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 4235 20 4235 40 ("self" "cardinality" "fx" "<fx>")}
        {Lisp-Entry "sequence-tail" method #f 4239 20 4239 33 ("self" "tail" "Axis" "<Axis>" "fx" "<fx>" "n")}
        {Lisp-Entry "sequence-last" method #f 4243 20 4243 33 ("self" "last" "any" "<any>")}}
      {Lisp-Entry "axis" definition #f 4247 20 4247 24 ("Axis" "coerce" "rest")}
      {Lisp-Entry "element" specialize #f 4251 20 4251 27 ("get-content" "get-content~" "vector-ref" "any" "<any>" "fx" "<fx>" "n" "Axis" "<Axis>" "axis")}
      {Lisp-Entry "set-element!" specialize #f 4255 20 4255 32 ("get-content" "get-content~" "vector-set!" "void" "<void>" "any" "<any>" "obj" "fx" "<fx>" "n" "Axis" "<Axis>" "axis")}
      {Lisp-Entry "cardinality" specialize #f 4259 20 4259 31 ("get-size" "get-size~" "fx" "<fx>" "Axis" "<Axis>" "axis")}
      {Lisp-Entry "tail" specialize #f 4263 13 4263 17 ("1" "+" "element" "set-element!" ">=" "if" "0" "i" "iter" "get-size" "get-size~" "-" "offset" "new" "new-axis" "let" "fx" "<fx>" "n" "Axis" "<Axis>" "axis")}
      {Lisp-Entry "last" specialize #f 4273 13 4273 17 ("1" "get-size" "get-size~" "-" "element" "any" "<any>" "Axis" "<Axis>" "axis")}
      {Lisp-Entry "insert!" specialize #f 4277 13 4277 20 ("list" "replace-subseq!" "any" "<any>" "obj" "fx" "<fx>" "pos" "Axis" "<Axis>" "axis")}
      {Lisp-Entry "replace-subseq!" specialize #f 4281 13 4281 28 ("axis-grow" "1" "element" "set-element!" "0" ">" "when" "dst" "src" "n" "iter" "let" "<" "cond" "+" "new-size" "get-size" "get-size~" "old-size" "delta" "cardinality" "after" "-" "before" "let*" "list" "<list>" "replacement" "end" "fx" "<fx>" "start" "Axis" "<Axis>" "axis")}
      {Lisp-Entry "axis-remove!" definition #f 4311 20 4311 32 ("replace-subseq!" "1" "+" "end" "fx" "<fx>" "start" "let*" "when" "find" "n" "let" "void" "<void>" "any" "<any>" "element" "Axis" "<Axis>" "axis")}
      {Lisp-Entry "axis-grow" definition #f 4319 20 4319 29 ("1" "+" "element" "set-element!" "begin" "<" "when" "i" "iter" "AXIS_GOLDEN_RATIO" "*" "fxround" "old-content" "old-real-size" "let" "else" "AXIS_MIN_SIZE" "make-vector" "set-content" "set-content~" "0" "get-size" "get-size~" "=" "set-size" "set-size~" "get-content" "get-content~" "cardinality" "<=" "cond" "fx" "<fx>" "n" "Axis" "<Axis>" "axis")}
      {Lisp-Entry "axis-add" definition #f 4337 20 4337 28 ("set-element!" "1" "+" "axis-grow" "cardinality" "size" "let" "obj" "Axis" "<Axis>" "axis")}
      {Lisp-Entry "new-axis" definition #f 4343 27 4343 35 ("make-vector" "Axis" "construct" "size")}
      {Lisp-Entry "new" specialize #f 4346 20 4346 23 ("new-axis" "Axis" "<Axis>" "fx" "<fx>" "size" "category<Axis>" "<category<Axis>>" "class")}
      {Lisp-Entry "allocate" specialize #f 4350 13 4350 21 ("new-axis" "Axis" "<Axis>" "fx" "<fx>" "size" "category<Axis>" "<category<Axis>>" "class")}
      {Lisp-Entry "coerce" specialize #f 4354 13 4354 19 ("element" "set-element!" "below" "0" "from" "n" "for" "loop" "allocate" "new-sequence" "cardinality" "fx" "<fx>" "len" "let" "Axis" "<Axis>" "category<Axis>" "<category<Axis>>" "class" "seq")}
      {Lisp-Entry "axis-ref" specialize #f 4362 22 4362 30 ()}
      {Lisp-Entry "element" specialize #f 4362 32 4362 39 ("get-content" "get-content~" "vector-ref" "object" "<object>" "fx" "<fx>" "n" "Axis" "<Axis>" "axis")}
      {Lisp-Entry "axis-set!" specialize #f 4366 22 4366 31 ()}
      {Lisp-Entry "set-element!" specialize #f 4366 33 4366 45 ("get-content" "get-content~" "vector-set!" "void" "<void>" "object" "<object>" "obj" "fx" "<fx>" "n" "Axis" "<Axis>" "axis")}
      {Lisp-Entry "axis-cardinality" specialize #f 4370 22 4370 38 ()}
      {Lisp-Entry "cardinality" specialize #f 4370 40 4370 51 ("get-size" "get-size~" "int" "<int>" "Axis" "<Axis>" "axis")}
      {Lisp-Entry "dispatch?" definition #f 4384 20 4384 29 ("symbol->string" "dispatch-string?" "symbol?" "and" "expr")}
      {Lisp-Entry "dispatch-string?" definition #f 4389 20 4389 36 ("string=?" "not" "ends-with?" "and" "str")}
      {Lisp-Entry "dispatch->name" definition #f 4394 20 4394 34 ("symbol->string" "string->symbol" "string?" "if" "1" "cardinality" "-" "0" "subseq" "str" "extract" "define" "dispatch")}
      {Lisp-Entry "Enumeration" class #f 4408 7 4408 18 ("initialize" "Class")
        {Lisp-Entry "members" slot #f 4411 8 4411 15 ()}
        {Lisp-Entry "get-members" accessor #f 4411 41 4411 49 ()}
        {Lisp-Entry "set-members" accessor #f 4411 41 4411 49 ()}
        {Lisp-Entry "add-member" method #f 4414 11 4414 21 ("list" "append!" "members" "set!" "member")}
        {Lisp-Entry "print" method #f 4418 20 4418 25 ("members" "system-format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "name->member" method #f 4424 11 4424 23 ("self" "error" "eq?" "test:" "get-name" "get-name~" "key:" "members" "find-in" "or" "name")}
        {Lisp-Entry "value->member" method #f 4429 11 4429 24 ("self" "error" "eqv?" "test:" "get-value" "get-value~" "key:" "members" "find-in" "or" "value")}
        {Lisp-Entry "name->value" method #f 4434 18 4434 29 ("name->member" "get-value" "get-value~" "name")}
        {Lisp-Entry "value->name" method #f 4438 18 4438 29 ("value->member" "get-name" "get-name~" "value")}
        {Lisp-Entry "bits->names" method #f 4442 18 4442 29 ("get-output" "get-output~" "members" "get-name" "get-name~" "put" "put~" "get-value" "get-value~" "mask-bit-set?" "when" "member" "lambda" "for-each" "List-Factory" "new" "fact" "let" "bits")}}
      {Lisp-Entry "Enumeration-Member" class #f 4451 7 4451 25 ("Object" "Enumeration")
        {Lisp-Entry "name" slot #f 4454 8 4454 12 ()}
        {Lisp-Entry "get-name" accessor #f 4454 20 4454 28 ()}
        {Lisp-Entry "initialize" method #f 4457 20 4457 30 ("class-of" "add-member" "add-member~" "self" "name~self" "set!" "nextmethod" "name")}
        {Lisp-Entry "print" method #f 4463 20 4463 25 ("name" "system-format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-value" method #f 4469 29 4469 38 ()}}
      {Lisp-Entry "enumeration?" definition #f 4473 20 4473 32 ("Enumeration" "is?" "obj")}
      {Lisp-Entry "reference-string?" definition #f 4482 20 4482 37 ("string-ends-with?" "string-starts-with?" "not" "string-find-reversed" "and" "str")}
      {Lisp-Entry "reference->name" definition #f 4488 20 4488 35 ("string-length" "1" "+" "substring" "not" "if" "string-find-reversed" "pos" "let" "str")}
      {Lisp-Entry "parse-file" definition #f 4500 20 4500 30 ("parse" "parse~" "string?" "if" "file")}
      {Lisp-Entry "make-u8-content" definition #f 4506 33 4506 48 ("cons" "content" "size")}
      {Lisp-Entry "u8-content-size" definition #f 4509 33 4509 48 ("car" "content")}
      {Lisp-Entry "iterate-u8-content" definition #f 4512 33 4512 51 ("cdr" "size" "u8vector" "bind" "chunk" "lambda" "for-each" "proc" "content")}
      {Lisp-Entry "read-u8-content" definition #f 4519 33 4519 48 ("cons" "put" "put~" "increase!" "get-output" "get-output~" "make-u8-content" "=" "if" "read-subu8vector" "read" "make-u8vector" "u8vector" "loop" "List-Factory" "new" "fact" "0" "size" "let" "1024" "chunk-size" "define" "port")}
      {Lisp-Entry "write-u8-content" definition #f 4535 33 4535 49 ("0" "write-subu8vector" "size" "u8vector" "lambda" "iterate-u8-content" "port" "content")}
      {Lisp-Entry "start-pump" definition #f 4541 33 4541 43 ("substring" ">" "if" "1" "0" "read-substring" "n" "iterate" "make-string" "buffer" "1000" "size" "let" "proper-tail-calls" "declare" "proc" "port")}
      {Lisp-Entry "read-until" definition #f 4559 20 4559 30 ("enqueue" "queue-list" "if" "read" "expr" "iterate" "new-queue" "queue" "let" "input" "test")}
      {Lisp-Entry "read-string-element" definition #f 4569 20 4569 39 ("read" "call-with-input-string" "string")}
      {Lisp-Entry "read-string-content" definition #f 4574 20 4574 39 ("eof-object?" "read-until" "input" "lambda" "call-with-input-string" "string")}
      {Lisp-Entry "read-delimited-string" definition #f 4580 20 4580 41 ("get-output" "get-output~" "peek-char" "eof-object?" "if" "skip-whites" "put" "put~" "read-delimited" "lst" "iterate" "List-Factory" "new" "fact" "let" "input" "lambda" "call-with-input-string" "char" "string")}
      {Lisp-Entry "require-char" definition #f 4593 20 4593 32 ("error" "eof-object?" "if" "read-char" "c" "let" "input")}
      {Lisp-Entry "skip-line" definition #f 4600 20 4600 29 ("eqv?" "eof-object?" "not" "and" "if" "read-char" "c" "iterate" "let" "input")}
      {Lisp-Entry "skip-whites" definition #f 4611 20 4611 31 ("read-char" "whitespace?" "when" "skip-line" "eqv?" "if" "eof-object?" "unless" "peek-char" "c" "iterate" "let" "input")}
      {Lisp-Entry "read-delimited" definition #f 4622 20 4622 34 ("enqueue" "else" "read" "enqueue-list" "read-char" "eqv?" "error" "queue-list" "if" "eof-object?" "cond" "peek-char" "c" "skip-whites" "iterate" "new-queue" "queue" "let" "allow-eof?" "delimiter" "kind" "input")}
      {Lisp-Entry "string-delimiter?" definition #f 4642 27 4642 44 ("eqv?" "c")}
      {Lisp-Entry "read-lines" definition #f 4646 20 4646 30 ("queue-list" "when" "enqueue" "begin" "if" "read-proper-line" "proper?" "line" "receive" "last-proper?" "iterate" "new-queue" "queue" "let" "proper-tail-calls" "declare" "input")}
      {Lisp-Entry "read-content-string" definition #f 4660 20 4660 39 ("eof-object?" "if" "read-line" "line" "let" "input")}
      {Lisp-Entry "pipe" definition #f 4669 20 4669 24 ("write-char" "begin" "eof-object?" "not" "if" "read-char" "c" "iterate" "let" "output" "input")}
      {Lisp-Entry "textual" definition #f 4683 20 4683 27 (":text" "print" "print~" "write" "current-output-port" "output" "expr")}
      {Lisp-Entry "describe" definition #f 4689 20 4689 28 (":describe" "print" "print~" "current-output-port" "output" "expr")}
      {Lisp-Entry "fresh-line" definition #f 4693 20 4693 30 ("newline" "at-fresh-line?" "unless" "current-output-port" "output")}
      {Lisp-Entry "at-fresh-line?" definition #f 4698 20 4698 34 ("current-output-port" "output")}
      {Lisp-Entry "*printers*" definition #f 4708 12 4708 22 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-printer" definition #f 4712 21 4712 37 ("*printers*" "table-set!" "proc" "name")}
      {Lisp-Entry "with-printer" definition #f 4716 20 4716 32 ("*printers*" "table-ref" "printer-proc" "get-output-string" "open-output-string" "output" "let" ":string" "eq?" "if" "proc" "printer")}
      {Lisp-Entry "pp" definition #f 4736 19 4736 21 ("pretty-print")}
      {Lisp-Entry "present-reference" definition #f 4740 20 4740 37 ("string-find-reversed" "->string" "referee-name" "not" "break-reference" "referee" "receive" "0" "1" "element" "system-format" "reverse!" "reversed" "car" "cdr" "null?" "if" "symbol->string" "split" "names" "let" "identifier" "present-identifier" "define" "reference")}
      {Lisp-Entry "write-line" definition #f 4757 20 4757 30 ("newline" "display" "car" "null?" "if" "port" "let" "rest" "line")}
      {Lisp-Entry "write-lines" definition #f 4763 20 4763 31 ("newline" "null?" "unless" "display" "do" "remain" "remainder" "in" "line" "for" "loop" "lines" "output")}
      {Lisp-Entry "identity" definition #f 4775 27 4775 35 ("x")}
      {Lisp-Entry "const" definition #f 4779 27 4779 32 ("args" "lambda" "x")}
      {Lisp-Entry "compose" definition #f 4783 27 4783 34 ("x" "lambda" "g" "f")}
      {Lisp-Entry "compose*" definition #f 4788 20 4788 28 ("x" "lambda" "cdr" "compose*" "apply" "g" "car" "f" "let" "identity" "null?" "if" "fns")}
      {Lisp-Entry "Subseq-Class" class #f 4802 7 4802 19 ("Sequence-Class")}
      {Lisp-Entry "Subseq" class #f 4805 7 4805 13 ("fx" "<fx>" "Sequence" "Subseq-Class")
        {Lisp-Entry "sequence" slot #f 4808 8 4808 16 ()}
        {Lisp-Entry "get-sequence" accessor #f 4808 32 4808 40 ()}
        {Lisp-Entry "start" slot #f 4809 8 4809 13 ()}
        {Lisp-Entry "get-start" accessor #f 4809 32 4809 40 ()}
        {Lisp-Entry "set-start" accessor #f 4809 32 4809 40 ()}
        {Lisp-Entry "size" slot #f 4810 8 4810 12 ()}
        {Lisp-Entry "get-size" accessor #f 4810 32 4810 40 ()}
        {Lisp-Entry "set-size" accessor #f 4810 32 4810 40 ()}
        {Lisp-Entry "initialize" method #f 4813 20 4813 30 ("size~self" "start~self" "self" "sequence~self" "set!" "nextmethod" "size" "fx" "<fx>" "start" "sequence")}
        {Lisp-Entry "print" method #f 4820 20 4820 25 ("system-format" "lambda" "self" "print-unreadable" "string-ref" "write-char" "do" "size" "+" "below" "start" "from" "n" "for" "loop" "sequence" "string?" "if" "detail" "output")}
        {Lisp-Entry "coerce-string" method #f 4830 20 4830 33 ("error" "size" "+" "start" "substring" "sequence" "string?" "if")}
        {Lisp-Entry "sequence-element" method #f 4836 20 4836 36 ("start" "+" "sequence" "element" "any" "<any>" "fx" "<fx>" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 4840 20 4840 41 ("start" "+" "sequence" "set-element!" "void" "<void>" "any" "<any>" "obj" "fx" "<fx>" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 4844 20 4844 40 ("size" "int" "<int>")}
        {Lisp-Entry "sequence-subseq!" method #f 4848 20 4848 36 ("cardinality" "-" "start" "+" "sequence" "new" "self" "-1" "0" "=" "or" "if" "Subseq" "<Subseq>" "e" "fx" "<fx>" "s")}}
      {Lisp-Entry "offset-subseq!" definition #f 4854 20 4854 34 ("get-start" "get-start~" "+" "set-start" "set-start~" "void" "<void>" "fx" "<fx>" "offset" "Subseq" "<Subseq>" "subseq")}
      {Lisp-Entry "grow-subseq!" definition #f 4858 20 4858 32 ("get-size" "get-size~" "+" "set-size" "set-size~" "void" "<void>" "fx" "<fx>" "n" "Subseq" "<Subseq>" "subseq")}
      {Lisp-Entry "subseq-ref" specialize #f 4862 22 4862 32 ()}
      {Lisp-Entry "element" specialize #f 4862 34 4862 41 ("get-start" "get-start~" "+" "get-sequence" "get-sequence~" "element" "object" "<object>" "fx" "<fx>" "n" "Subseq" "<Subseq>" "subseq")}
      {Lisp-Entry "subseq-set!" specialize #f 4866 22 4866 33 ()}
      {Lisp-Entry "set-element!" specialize #f 4866 35 4866 47 ("get-start" "get-start~" "+" "get-sequence" "get-sequence~" "set-element!" "void" "<void>" "object" "<object>" "obj" "fx" "<fx>" "n" "Subseq" "<Subseq>" "subseq")}
      {Lisp-Entry "subseq-cardinality" specialize #f 4870 22 4870 40 ()}
      {Lisp-Entry "cardinality" specialize #f 4870 42 4870 53 ("get-size" "get-size~" "int" "<int>" "Subseq" "<Subseq>" "subseq")}
      {Lisp-Entry "Subseq$string$-Class" class #f 4879 7 4879 27 ("Sequence-Class")}
      {Lisp-Entry "Subseq$string$" class #f 4882 7 4882 21 ("fx" "<fx>" "string" "<string>" "Sequence" "Subseq$string$-Class")
        {Lisp-Entry "sequence" slot #f 4885 8 4885 16 ()}
        {Lisp-Entry "get-sequence" accessor #f 4885 36 4885 44 ()}
        {Lisp-Entry "start" slot #f 4886 8 4886 13 ()}
        {Lisp-Entry "get-start" accessor #f 4886 36 4886 44 ()}
        {Lisp-Entry "set-start" accessor #f 4886 36 4886 44 ()}
        {Lisp-Entry "size" slot #f 4887 8 4887 12 ()}
        {Lisp-Entry "get-size" accessor #f 4887 36 4887 44 ()}
        {Lisp-Entry "set-size" accessor #f 4887 36 4887 44 ()}
        {Lisp-Entry "initialize" method #f 4890 20 4890 30 ("size~self" "start~self" "self" "sequence~self" "set!" "nextmethod" "size" "fx" "<fx>" "start" "string" "<string>" "sequence")}
        {Lisp-Entry "print" method #f 4897 20 4897 25 ("system-format" "lambda" "self" "print-unreadable" "print" "print~" ":human" "eq?" "if" "size" "+" "start" "sequence" "substring" "str" "let" "detail" "output")}
        {Lisp-Entry "sequence-element" method #f 4906 20 4906 36 ("start" "+" "sequence" "element" "any" "<any>" "fx" "<fx>" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 4910 20 4910 41 ("start" "+" "sequence" "set-element!" "void" "<void>" "any" "<any>" "obj" "fx" "<fx>" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 4914 20 4914 40 ("size" "int" "<int>")}
        {Lisp-Entry "sequence-subseq!" method #f 4918 20 4918 36 ("cardinality" "-" "start" "+" "sequence" "new" "self" "-1" "0" "=" "and" "if" "Subseq$string$" "<Subseq$string$>" "e" "fx" "<fx>" "s")}}
      {Lisp-Entry "new" specialize #f 4924 20 4924 23 ("construct" "Subseq$string$" "<Subseq$string$>" "size" "fx" "<fx>" "start" "string" "<string>" "sequence" "category<Subseq$string$>" "<category<Subseq$string$>>" "class")}
      {Lisp-Entry "element" specialize #f 4928 20 4928 27 ("get-start" "get-start~" "+" "get-sequence" "get-sequence~" "element" "char" "<char>" "fx" "<fx>" "n" "Subseq$string$" "<Subseq$string$>" "subseq")}
      {Lisp-Entry "set-element!" specialize #f 4932 20 4932 32 ("get-start" "get-start~" "+" "get-sequence" "get-sequence~" "set-element!" "void" "<void>" "char" "<char>" "obj" "fx" "<fx>" "n" "Subseq$string$" "<Subseq$string$>" "subseq")}
      {Lisp-Entry "cardinality" specialize #f 4936 20 4936 31 ("get-size" "get-size~" "fx" "<fx>" "Subseq$string$" "<Subseq$string$>" "subseq")}
      {Lisp-Entry "subseq!" specialize #f 4940 13 4940 20 ("-" "new" "Subseq$string$" "<Subseq$string$>" "e" "fx" "<fx>" "s" "string" "<string>" "seq")}
      {Lisp-Entry "subseq!" specialize #f 4944 13 4944 20 ("-" "get-start" "get-start~" "+" "get-sequence" "get-sequence~" "new" "e" "fx" "<fx>" "s" "Subseq$string$" "<Subseq$string$>" "subseq")}
      {Lisp-Entry "offset-subseq!" specialize #f 4948 13 4948 27 ("get-start" "get-start~" "+" "set-start" "set-start~" "void" "<void>" "fx" "<fx>" "offset" "Subseq$string$" "<Subseq$string$>" "subseq")}
      {Lisp-Entry "grow-subseq!" specialize #f 4952 13 4952 25 ("get-size" "get-size~" "+" "set-size" "set-size~" "void" "<void>" "fx" "<fx>" "n" "Subseq$string$" "<Subseq$string$>" "subseq")}}})
"geometry"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "language" "geometry.jazz"} 1299704435 jazz
    {Lisp-Entry "jazz.dialect.language.geometry" module #f 37 18 37 48 ("jazz.dialect")
      {Lisp-Entry "proclaim" anonymous #f 40 1 40 9 ("optimizations" "warn")}
      {Lisp-Entry "import" anonymous #f 43 1 43 7 ("jazz.dialect.language.object" "jazz.dialect.language.functional" "jazz.dialect.language.format" "jazz.dialect.kernel")}
      {Lisp-Entry "error" native ("native") 49 16 49 26 ()}
      {Lisp-Entry "Cell" class #f 57 7 57 11 ("fx" "<fx>" "Numeric")
        {Lisp-Entry "line" slot #f 60 8 60 12 ()}
        {Lisp-Entry "get-line" accessor #f 60 28 60 36 ()}
        {Lisp-Entry "set-line" accessor #f 60 28 60 36 ()}
        {Lisp-Entry "col" slot #f 61 8 61 11 ()}
        {Lisp-Entry "get-col" accessor #f 61 28 61 36 ()}
        {Lisp-Entry "set-col" accessor #f 61 28 61 36 ()}
        {Lisp-Entry "initialize" method #f 64 20 64 30 ("col" "line" "set!" "c" "fx" "<fx>" "l")}
        {Lisp-Entry "copy-object" method #f 69 20 69 31 ("col" "line" "Cell" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 73 20 73 34 ("get-col" "get-col~" "col" ":equal" "eq?" "not" "get-line" "get-line~" "line" "compare" "compared" "let" ":incompatible" "Cell" "is-not?" "if" "target")}
        {Lisp-Entry "print" method #f 82 20 82 25 ("col" "line" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "numeric-norm" method #f 89 20 89 32 ("self" "error")}
        {Lisp-Entry "numeric-add" method #f 93 20 93 31 ("self" "error" "else" "integer?" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "+" "new" "Cell" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" method #f 99 20 99 34 ("col" "line" "-" "Cell" "new")}
        {Lisp-Entry "numeric-multiply" method #f 103 20 103 36 ("self" "error" "col" "line" "*" "Cell" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" method #f 109 20 109 35 ("self" "error")}
        {Lisp-Entry "increase-line" method #f 113 18 113 31 ("+" "line" "set!" "1" "fx" "<fx>" "delta")}
        {Lisp-Entry "increase-col" method #f 117 18 117 30 ("+" "col" "set!" "1" "fx" "<fx>" "delta")}
        {Lisp-Entry "get-enabled?" method #f 122 18 122 30 ()}}
      {Lisp-Entry "new-cell" definition #f 126 27 126 35 ("Cell" "construct" "col" "line")}
      {Lisp-Entry "new" specialize #f 129 20 129 23 ("new-cell" "Cell" "<Cell>" "col" "fx" "<fx>" "line" "category<Cell>" "<category<Cell>>" "class")}
      {Lisp-Entry "copy-cell" specialize #f 133 22 133 31 ()}
      {Lisp-Entry "copy" specialize #f 133 33 133 37 ("get-col" "get-col~" "get-line" "get-line~" "new" "Cell" "<Cell>" "c")}
      {Lisp-Entry "cell=?" specialize #f 137 22 137 28 ()}
      {Lisp-Entry "=" specialize #f 137 30 137 31 ("get-col" "get-col~" "get-line" "get-line~" "=" "and" "bool" "<bool>" "c2" "Cell" "<Cell>" "c1")}
      {Lisp-Entry "cell<?" specialize #f 142 15 142 21 ()}
      {Lisp-Entry "<" specialize #f 142 23 142 24 ("get-col" "get-col~" "=" "and" "<" "or" "l2" "get-line" "get-line~" "l1" "let" "bool" "<bool>" "c2" "Cell" "<Cell>" "c1")}
      {Lisp-Entry "cell<=?" specialize #f 150 15 150 22 ()}
      {Lisp-Entry "<=" specialize #f 150 24 150 26 ("get-col" "get-col~" "<=" "=" "and" "<" "or" "l2" "get-line" "get-line~" "l1" "let" "bool" "<bool>" "c2" "Cell" "<Cell>" "c1")}
      {Lisp-Entry "cell>?" specialize #f 158 15 158 21 ()}
      {Lisp-Entry ">" specialize #f 158 23 158 24 ("get-col" "get-col~" "=" "and" ">" "or" "l2" "get-line" "get-line~" "l1" "let" "bool" "<bool>" "c2" "Cell" "<Cell>" "c1")}
      {Lisp-Entry "cell>=?" specialize #f 166 15 166 22 ()}
      {Lisp-Entry ">=" specialize #f 166 24 166 26 ("get-col" "get-col~" ">=" "=" "and" ">" "or" "l2" "get-line" "get-line~" "l1" "let" "bool" "<bool>" "c2" "Cell" "<Cell>" "c1")}
      {Lisp-Entry "cell+" specialize #f 174 22 174 27 ()}
      {Lisp-Entry "+" specialize #f 174 29 174 30 ("get-col" "get-col~" "get-line" "get-line~" "+" "new" "c2" "Cell" "<Cell>" "c1")}
      {Lisp-Entry "+" specialize #f 180 20 180 21 ("get-col" "get-col~" "+" "get-line" "get-line~" "new" "int" "<int>" "n" "Cell" "<Cell>" "c")}
      {Lisp-Entry "cell-" specialize #f 186 22 186 27 ()}
      {Lisp-Entry "-" specialize #f 186 29 186 30 ("get-col" "get-col~" "get-line" "get-line~" "-" "new" "c2" "Cell" "<Cell>" "c1")}
      {Lisp-Entry "-" specialize #f 192 20 192 21 ("get-col" "get-col~" "-" "get-line" "get-line~" "new" "int" "<int>" "n" "Cell" "<Cell>" "c")}
      {Lisp-Entry "cell-hash" definition #f 198 20 198 29 ("get-col" "get-col~" "get-line" "get-line~" "eqv?-hash" "fxwrap+" "Cell" "<Cell>" "c")}
      {Lisp-Entry "Range" class #f 208 7 208 12 ("Object")
        {Lisp-Entry "start" slot #f 211 8 211 13 ()}
        {Lisp-Entry "end" slot #f 212 8 212 11 ()}
        {Lisp-Entry "initialize" method #f 215 20 215 30 ("end" "start" "set!" "nextmethod" "e" "s")}
        {Lisp-Entry "copy-object" method #f 221 20 221 31 ("end" "start" "Range" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 225 20 225 34 (":not-equal" "else" ":equal" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "=" "and" ":incompatible" "Range" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 234 20 234 25 ("end" "start" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "get-start" method #f 241 25 241 34 ("start")}
        {Lisp-Entry "get-end" method #f 245 25 245 32 ("end")}
        {Lisp-Entry "extent" method #f 249 26 249 32 ("start" "end" "-")}
        {Lisp-Entry "extended?" method #f 253 26 253 35 ("end" "start" "=" "not")}
        {Lisp-Entry "empty?" method #f 257 26 257 32 ("end" "start" "=")}
        {Lisp-Entry "inside?" method #f 261 18 261 25 ("end" "<" "start" ">=" "and" "n")}
        {Lisp-Entry "before?" method #f 266 18 266 25 ("start" "<" "n")}
        {Lisp-Entry "after?" method #f 270 18 270 24 ("end" ">" "n")}
        {Lisp-Entry "intersect?" method #f 274 18 274 28 ("start" "get-end" "get-end~" ">=" "end" "get-start" "get-start~" "<" "and" "range")}
        {Lisp-Entry "intersect" method #f 279 18 279 27 ("get-end" "get-end~" "end" "min" "get-start" "get-start~" "start" "max" "self" "class-of" "new" "intersect?" "when" "range")}}
      {Lisp-Entry "new-range" definition #f 284 27 284 36 ("Range" "construct" "end" "start")}
      {Lisp-Entry "new" specialize #f 287 20 287 23 ("new-range" "Range" "<Range>" "end" "start" "category<Range>" "<category<Range>>" "class")}
      {Lisp-Entry "range=?" specialize #f 291 22 291 29 ()}
      {Lisp-Entry "=" specialize #f 291 31 291 32 ("get-end" "get-end~" "get-start" "get-start~" "=" "and" "bool" "<bool>" "r2" "Range" "<Range>" "r1")}
      {Lisp-Entry "Range$Cell$" class #f 301 7 301 18 ("Cell" "<Cell>" "Object")
        {Lisp-Entry "start" slot #f 304 8 304 13 ()}
        {Lisp-Entry "get-start" accessor #f 304 28 304 36 ()}
        {Lisp-Entry "end" slot #f 305 8 305 11 ()}
        {Lisp-Entry "get-end" accessor #f 305 28 305 36 ()}
        {Lisp-Entry "initialize" method #f 308 20 308 30 ("end" "start" "set!" "nextmethod" "e" "Cell" "<Cell>" "s")}
        {Lisp-Entry "copy-object" method #f 314 20 314 31 ("end" "start" "Range$Cell$" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 318 20 318 34 (":not-equal" "else" ":equal" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "=" "and" ":incompatible" "Range$Cell$" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 327 20 327 25 ("end" "start" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "extent" method #f 334 26 334 32 ("start" "end" "-" "Cell" "<Cell>")}
        {Lisp-Entry "extended?" method #f 338 26 338 35 ("end" "start" "=" "not")}
        {Lisp-Entry "empty?" method #f 342 26 342 32 ("end" "start" "=")}
        {Lisp-Entry "inside?" method #f 346 18 346 25 ("end" "<" "start" ">=" "and" "bool" "<bool>" "Cell" "<Cell>" "n")}
        {Lisp-Entry "before?" method #f 351 18 351 25 ("start" "<" "bool" "<bool>" "Cell" "<Cell>" "n")}
        {Lisp-Entry "after?" method #f 355 18 355 24 ("end" ">" "bool" "<bool>" "Cell" "<Cell>" "n")}
        {Lisp-Entry "intersect?" method #f 359 18 359 28 ("start" "get-end" "get-end~" ">=" "end" "get-start" "get-start~" "<" "and" "bool" "<bool>" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "intersect" method #f 364 18 364 27 ("get-end" "get-end~" "end" "min" "get-start" "get-start~" "start" "max" "self" "class-of" "new" "intersect?" "when" "Range$Cell$" "<Range$Cell$>" "range")}}
      {Lisp-Entry "new" specialize #f 369 20 369 23 ("construct" "Range$Cell$" "<Range$Cell$>" "end" "Cell" "<Cell>" "start" "category<Range$Cell$>" "<category<Range$Cell$>>" "class")}
      {Lisp-Entry "=" specialize #f 373 20 373 21 ("get-end" "get-end~" "get-start" "get-start~" "=" "and" "bool" "<bool>" "r2" "Range$Cell$" "<Range$Cell$>" "r1")}
      {Lisp-Entry "Point" class #f 383 7 383 12 ("fx" "<fx>" "Numeric")
        {Lisp-Entry "h" slot #f 386 8 386 9 ()}
        {Lisp-Entry "get-h" accessor #f 386 22 386 30 ()}
        {Lisp-Entry "v" slot #f 387 8 387 9 ()}
        {Lisp-Entry "get-v" accessor #f 387 22 387 30 ()}
        {Lisp-Entry "initialize" method #f 390 20 390 30 ("v~self" "self" "h~self" "set!" "nextmethod" "v" "fx" "<fx>" "h")}
        {Lisp-Entry "copy-object" method #f 396 20 396 31 ("v" "h" "Point" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 400 20 400 34 (":not-equal" "else" ":equal" "get-v" "get-v~" "v" "get-h" "get-h~" "h" "=" "and" "<Point>" "target-point" "let" ":incompatible" "Point" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 410 20 410 25 ("v" "h" "format" "readably" "output")}
        {Lisp-Entry "numeric-norm" method #f 416 20 416 32 ("v" "2" "h" "expt" "+" "sqrt")}
        {Lisp-Entry "numeric-add" method #f 420 20 420 31 ("self" "error" "else" "integer?" "get-height" "get-height~" "get-width" "get-width~" "Dimension" "get-v" "get-v~" "v" "get-h" "get-h~" "h" "+" "new" "Point" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" method #f 427 20 427 34 ("v" "h" "-" "Point" "new")}
        {Lisp-Entry "numeric-multiply" method #f 431 20 431 36 ("self" "error" "v" "h" "*" "Point" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" method #f 437 20 437 35 ("self" "error")}}
      {Lisp-Entry "new-point" definition #f 441 27 441 36 ("Point" "construct" "v" "h")}
      {Lisp-Entry "new" specialize #f 444 20 444 23 ("new-point" "Point" "<Point>" "v" "fx" "<fx>" "h" "category<Point>" "<category<Point>>" "class")}
      {Lisp-Entry "point=?" specialize #f 448 22 448 29 ()}
      {Lisp-Entry "=" specialize #f 448 31 448 32 ("get-v" "get-v~" "get-h" "get-h~" "=" "and" "bool" "<bool>" "p2" "Point" "<Point>" "p1")}
      {Lisp-Entry "point+" specialize #f 453 22 453 28 ()}
      {Lisp-Entry "+" specialize #f 453 30 453 31 ("get-v" "get-v~" "get-h" "get-h~" "+" "new" "p2" "Point" "<Point>" "p1")}
      {Lisp-Entry "+" specialize #f 459 20 459 21 ("get-v" "get-v~" "get-h" "get-h~" "+" "new" "int" "<int>" "n" "Point" "<Point>" "p")}
      {Lisp-Entry "point-" specialize #f 465 22 465 28 ()}
      {Lisp-Entry "-" specialize #f 465 30 465 31 ("get-v" "get-v~" "get-h" "get-h~" "-" "new" "p2" "Point" "<Point>" "p1")}
      {Lisp-Entry "-" specialize #f 471 20 471 21 ("get-v" "get-v~" "get-h" "get-h~" "-" "new" "int" "<int>" "n" "Point" "<Point>" "p")}
      {Lisp-Entry "-" specialize #f 477 20 477 21 ("get-v" "get-v~" "get-h" "get-h~" "-" "new" "Point" "<Point>" "p")}
      {Lisp-Entry "point*" specialize #f 483 22 483 28 ()}
      {Lisp-Entry "*" specialize #f 483 30 483 31 ("get-v" "get-v~" "get-h" "get-h~" "*" "new" "int" "<int>" "n" "Point" "<Point>" "p")}
      {Lisp-Entry "Dimension" class #f 494 7 494 16 ("fx" "<fx>" "Numeric")
        {Lisp-Entry "width" slot #f 497 8 497 13 ()}
        {Lisp-Entry "get-width" accessor #f 497 27 497 35 ()}
        {Lisp-Entry "height" slot #f 498 8 498 14 ()}
        {Lisp-Entry "get-height" accessor #f 498 27 498 35 ()}
        {Lisp-Entry "initialize" method #f 501 20 501 30 ("height" "width" "set!" "nextmethod" "h" "fx" "<fx>" "w")}
        {Lisp-Entry "copy-object" method #f 507 20 507 31 ("height" "width" "Dimension" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 511 20 511 34 ("get-height" "get-height~" "height" ":equal" "neq?" "get-width" "get-width~" "width" "compare" "compared" "let" ":incompatible" "Dimension" "is-not?" "if" "target")}
        {Lisp-Entry "print" method #f 520 20 520 25 ("height" "width" "format" "readably" "output")}
        {Lisp-Entry "numeric-norm" method #f 526 20 526 32 ("self" "error")}
        {Lisp-Entry "numeric-add" method #f 530 20 530 31 ("self" "error" "else" "integer?" "get-v" "get-v~" "get-h" "get-h~" "Point" "get-height" "get-height~" "height" "get-width" "get-width~" "width" "+" "new" "Dimension" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" method #f 537 20 537 34 ("height" "width" "-" "Dimension" "new")}
        {Lisp-Entry "numeric-multiply" method #f 541 20 541 36 ("self" "error" "height" "width" "*" "Dimension" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" method #f 547 20 547 35 ("self" "error")}}
      {Lisp-Entry "new-dimension" definition #f 551 27 551 40 ("Dimension" "construct" "height" "width")}
      {Lisp-Entry "new" specialize #f 554 20 554 23 ("new-dimension" "Dimension" "<Dimension>" "height" "fx" "<fx>" "width" "category<Dimension>" "<category<Dimension>>" "class")}
      {Lisp-Entry "dimension=?" specialize #f 558 22 558 33 ()}
      {Lisp-Entry "=" specialize #f 558 35 558 36 ("get-height" "get-height~" "get-width" "get-width~" "=" "and" "bool" "<bool>" "d2" "Dimension" "<Dimension>" "d1")}
      {Lisp-Entry "dimension+" specialize #f 563 22 563 32 ()}
      {Lisp-Entry "+" specialize #f 563 34 563 35 ("get-height" "get-height~" "get-width" "get-width~" "+" "new" "d2" "Dimension" "<Dimension>" "d1")}
      {Lisp-Entry "dimension-" specialize #f 569 22 569 32 ()}
      {Lisp-Entry "-" specialize #f 569 34 569 35 ("get-height" "get-height~" "get-width" "get-width~" "-" "new" "d2" "Dimension" "<Dimension>" "d1")}
      {Lisp-Entry "dimension*" specialize #f 575 22 575 32 ()}
      {Lisp-Entry "*" specialize #f 575 34 575 35 ("get-height" "get-height~" "get-width" "get-width~" "*" "new" "int" "<int>" "n" "Dimension" "<Dimension>" "d")}
      {Lisp-Entry "dimension-min" definition #f 581 20 581 33 ("get-height" "get-height~" "get-width" "get-width~" "min" "new" "height" "width" "Dimension" "<Dimension>" "d")}
      {Lisp-Entry "dimension-max" definition #f 587 20 587 33 ("get-height" "get-height~" "get-width" "get-width~" "max" "new" "height" "width" "Dimension" "<Dimension>" "d")}
      {Lisp-Entry "Rect-Class" class #f 598 7 598 17 ("Class")
        {Lisp-Entry "coerce-object" method #f 601 20 601 33 ("nextmethod" "else" "0" "get-v" "get-v~" "get-h" "get-h~" "Rect" "new" "Point" "typecase" "object")}}
      {Lisp-Entry "Rect" class #f 607 7 607 11 ("fx" "<fx>" "Object" "Rect-Class")
        {Lisp-Entry "left" slot #f 610 8 610 12 ()}
        {Lisp-Entry "get-left" accessor #f 610 30 610 38 ()}
        {Lisp-Entry "set-left" accessor #f 610 30 610 38 ()}
        {Lisp-Entry "top" slot #f 611 8 611 11 ()}
        {Lisp-Entry "get-top" accessor #f 611 30 611 38 ()}
        {Lisp-Entry "set-top" accessor #f 611 30 611 38 ()}
        {Lisp-Entry "right" slot #f 612 8 612 13 ()}
        {Lisp-Entry "get-right" accessor #f 612 30 612 38 ()}
        {Lisp-Entry "set-right" accessor #f 612 30 612 38 ()}
        {Lisp-Entry "bottom" slot #f 613 8 613 14 ()}
        {Lisp-Entry "get-bottom" accessor #f 613 30 613 38 ()}
        {Lisp-Entry "set-bottom" accessor #f 613 30 613 38 ()}
        {Lisp-Entry "initialize" method #f 616 20 616 30 ("bottom" "right" "top" "left" "set!" "nextmethod" "b" "r" "t" "fx" "<fx>" "l")}
        {Lisp-Entry "copy-object" method #f 624 20 624 31 ("bottom" "right" "top" "left" "Rect" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 628 20 628 34 (":not-equal" "else" ":equal" "get-bottom" "get-bottom~" "bottom" "get-right" "get-right~" "right" "get-top" "get-top~" "top" "get-left" "get-left~" "left" "=" "and" ":incompatible" "Rect" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 637 20 637 25 ("bottom" "right" "top" "left" "self" "class-of" "category-name" "format" "readably" "output")}}
      {Lisp-Entry "rect?" definition #f 646 27 646 32 ("Rect" "is?" "obj")}
      {Lisp-Entry "new-rect" definition #f 650 27 650 35 ("Rect" "construct" "bottom" "right" "top" "fx" "<fx>" "left")}
      {Lisp-Entry "new" specialize #f 653 20 653 23 ("new-rect" "Rect" "<Rect>" "bottom" "right" "top" "fx" "<fx>" "left" "category<Rect>" "<category<Rect>>" "class")}
      {Lisp-Entry "rect=?" specialize #f 657 22 657 28 ()}
      {Lisp-Entry "=" specialize #f 657 30 657 31 ("get-bottom" "get-bottom~" "get-right" "get-right~" "get-top" "get-top~" "get-left" "get-left~" "=" "and" "bool" "<bool>" "r2" "Rect" "<Rect>" "r1")}
      {Lisp-Entry "empty-rect?" definition #f 664 27 664 38 ("get-bottom" "get-bottom~" "get-right" "get-right~" "get-top" "get-top~" "0" "get-left" "get-left~" "=" "and" "rect")}
      {Lisp-Entry "Rect$fl$-Class" class #f 676 7 676 21 ("Class")
        {Lisp-Entry "coerce-object" method #f 679 20 679 33 ("nextmethod" "else" "0" "get-v" "get-v~" "get-h" "get-h~" "Rect$fl$" "new" "Point" "typecase" "object")}}
      {Lisp-Entry "Rect$fl$" class #f 685 7 685 15 ("fl" "<fl>" "Object" "Rect$fl$-Class")
        {Lisp-Entry "left" slot #f 688 8 688 12 ()}
        {Lisp-Entry "get-left" accessor #f 688 30 688 38 ()}
        {Lisp-Entry "set-left" accessor #f 688 30 688 38 ()}
        {Lisp-Entry "top" slot #f 689 8 689 11 ()}
        {Lisp-Entry "get-top" accessor #f 689 30 689 38 ()}
        {Lisp-Entry "set-top" accessor #f 689 30 689 38 ()}
        {Lisp-Entry "right" slot #f 690 8 690 13 ()}
        {Lisp-Entry "get-right" accessor #f 690 30 690 38 ()}
        {Lisp-Entry "set-right" accessor #f 690 30 690 38 ()}
        {Lisp-Entry "bottom" slot #f 691 8 691 14 ()}
        {Lisp-Entry "get-bottom" accessor #f 691 30 691 38 ()}
        {Lisp-Entry "set-bottom" accessor #f 691 30 691 38 ()}
        {Lisp-Entry "initialize" method #f 694 20 694 30 ("bottom" "right" "top" "left" "set!" "nextmethod" "b" "r" "t" "fl" "<fl>" "l")}
        {Lisp-Entry "copy-object" method #f 702 20 702 31 ("bottom" "right" "top" "left" "Rect$fl$" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 706 20 706 34 (":not-equal" "else" ":equal" "get-bottom" "get-bottom~" "bottom" "get-right" "get-right~" "right" "get-top" "get-top~" "top" "get-left" "get-left~" "left" "=" "and" ":incompatible" "Rect$fl$" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 715 20 715 25 ("bottom" "right" "top" "left" "self" "class-of" "category-name" "format" "readably" "output")}}
      {Lisp-Entry "rect$fl$?" definition #f 724 27 724 36 ("Rect$fl$" "is?" "obj")}
      {Lisp-Entry "new-rect$fl$" definition #f 728 27 728 39 ("Rect$fl$" "construct" "bottom" "right" "top" "fl" "<fl>" "left")}
      {Lisp-Entry "new" specialize #f 731 20 731 23 ("new-rect$fl$" "Rect$fl$" "<Rect$fl$>" "bottom" "right" "top" "fl" "<fl>" "left" "category<Rect$fl$>" "<category<Rect$fl$>>" "class")}
      {Lisp-Entry "rect$fl$=?" specialize #f 735 22 735 32 ()}
      {Lisp-Entry "=" specialize #f 735 34 735 35 ("get-bottom" "get-bottom~" "get-right" "get-right~" "get-top" "get-top~" "get-left" "get-left~" "=" "and" "bool" "<bool>" "r2" "Rect$fl$" "<Rect$fl$>" "r1")}}})
"homogeneous"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "language" "homogeneous.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.dialect.language.homogeneous" module #f 37 18 37 51 ("jazz.dialect")
      {Lisp-Entry "proclaim" anonymous #f 40 1 40 9 ("optimizations" "warn")}
      {Lisp-Entry "import" anonymous #f 43 1 43 7 ("jazz.dialect.language.object" "jazz.dialect.language.functional" "jazz.dialect.kernel")}
      {Lisp-Entry "S8Vector-Class" class #f 53 7 53 21 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 56 20 56 37 ("make-s8vector" "len")}}
      {Lisp-Entry "S8Vector" class #f 60 17 60 25 ("Sequence" "S8Vector-Class")
        {Lisp-Entry "initialize" method #f 63 20 63 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 68 11 68 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 74 20 74 36 ("self" "s8vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 78 20 78 41 ("self" "s8vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 82 20 82 40 ("self" "s8vector-length")}
        {Lisp-Entry "sequence-tail" method #f 86 20 86 33 ("self" "s8vector->list" "tail" "list->s8vector" "n")}
        {Lisp-Entry "sequence-last" method #f 90 20 90 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 94 20 94 36 ("self" "s8vector->list" "butlast" "list->s8vector")}}
      {Lisp-Entry "element" specialize #f 98 20 98 27 ("s8vector-ref" "object" "<object>" "int" "<int>" "n" "s8vector" "<s8vector>" "vector")}
      {Lisp-Entry "set-element!" specialize #f 102 20 102 32 ("s8vector-set!" "void" "<void>" "object" "<object>" "obj" "int" "<int>" "n" "s8vector" "<s8vector>" "vector")}
      {Lisp-Entry "cardinality" specialize #f 106 20 106 31 ("s8vector-length" "int" "<int>" "s8vector" "<s8vector>" "vector")}
      {Lisp-Entry "U8Vector-Class" class #f 115 7 115 21 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 118 20 118 37 ("make-u8vector" "len")}}
      {Lisp-Entry "U8Vector" class #f 122 17 122 25 ("Sequence" "U8Vector-Class")
        {Lisp-Entry "initialize" method #f 125 20 125 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 130 11 130 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 136 20 136 36 ("self" "u8vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 140 20 140 41 ("self" "u8vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 144 20 144 40 ("self" "u8vector-length")}
        {Lisp-Entry "sequence-tail" method #f 148 20 148 33 ("self" "u8vector->list" "tail" "list->u8vector" "n")}
        {Lisp-Entry "sequence-last" method #f 152 20 152 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 156 20 156 36 ("self" "u8vector->list" "butlast" "list->u8vector")}}
      {Lisp-Entry "element" specialize #f 160 20 160 27 ("u8vector-ref" "object" "<object>" "int" "<int>" "n" "u8vector" "<u8vector>" "vector")}
      {Lisp-Entry "set-element!" specialize #f 164 20 164 32 ("u8vector-set!" "void" "<void>" "object" "<object>" "obj" "int" "<int>" "n" "u8vector" "<u8vector>" "vector")}
      {Lisp-Entry "cardinality" specialize #f 168 20 168 31 ("u8vector-length" "int" "<int>" "u8vector" "<u8vector>" "vector")}
      {Lisp-Entry "S16Vector-Class" class #f 177 7 177 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 180 20 180 37 ("make-s16vector" "len")}}
      {Lisp-Entry "S16Vector" class #f 184 17 184 26 ("Sequence" "S16Vector-Class")
        {Lisp-Entry "initialize" method #f 187 20 187 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 192 11 192 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 198 20 198 36 ("self" "s16vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 202 20 202 41 ("self" "s16vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 206 20 206 40 ("self" "s16vector-length")}
        {Lisp-Entry "sequence-tail" method #f 210 20 210 33 ("self" "s16vector->list" "tail" "list->s16vector" "n")}
        {Lisp-Entry "sequence-last" method #f 214 20 214 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 218 20 218 36 ("self" "s16vector->list" "butlast" "list->s16vector")}}
      {Lisp-Entry "element" specialize #f 222 20 222 27 ("s16vector-ref" "object" "<object>" "int" "<int>" "n" "s16vector" "<s16vector>" "vector")}
      {Lisp-Entry "set-element!" specialize #f 226 20 226 32 ("s16vector-set!" "void" "<void>" "object" "<object>" "obj" "int" "<int>" "n" "s16vector" "<s16vector>" "vector")}
      {Lisp-Entry "cardinality" specialize #f 230 20 230 31 ("s16vector-length" "int" "<int>" "s16vector" "<s16vector>" "vector")}
      {Lisp-Entry "U16Vector-Class" class #f 239 7 239 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 242 20 242 37 ("make-u16vector" "len")}}
      {Lisp-Entry "U16Vector" class #f 246 17 246 26 ("Sequence" "U16Vector-Class")
        {Lisp-Entry "initialize" method #f 249 20 249 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 254 11 254 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 260 20 260 36 ("self" "u16vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 264 20 264 41 ("self" "u16vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 268 20 268 40 ("self" "u16vector-length")}
        {Lisp-Entry "sequence-tail" method #f 272 20 272 33 ("self" "u16vector->list" "tail" "list->u16vector" "n")}
        {Lisp-Entry "sequence-last" method #f 276 20 276 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 280 20 280 36 ("self" "u16vector->list" "butlast" "list->u16vector")}}
      {Lisp-Entry "element" specialize #f 284 20 284 27 ("u16vector-ref" "object" "<object>" "int" "<int>" "n" "u16vector" "<u16vector>" "vector")}
      {Lisp-Entry "set-element!" specialize #f 288 20 288 32 ("u16vector-set!" "void" "<void>" "object" "<object>" "obj" "int" "<int>" "n" "u16vector" "<u16vector>" "vector")}
      {Lisp-Entry "cardinality" specialize #f 292 20 292 31 ("u16vector-length" "int" "<int>" "u16vector" "<u16vector>" "vector")}
      {Lisp-Entry "S32Vector-Class" class #f 301 7 301 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 304 20 304 37 ("make-s32vector" "len")}}
      {Lisp-Entry "S32Vector" class #f 308 17 308 26 ("Sequence" "S32Vector-Class")
        {Lisp-Entry "initialize" method #f 311 20 311 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 316 11 316 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 322 20 322 36 ("self" "s32vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 326 20 326 41 ("self" "s32vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 330 20 330 40 ("self" "s32vector-length")}
        {Lisp-Entry "sequence-tail" method #f 334 20 334 33 ("self" "s32vector->list" "tail" "list->s32vector" "n")}
        {Lisp-Entry "sequence-last" method #f 338 20 338 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 342 20 342 36 ("self" "s32vector->list" "butlast" "list->s32vector")}}
      {Lisp-Entry "element" specialize #f 346 20 346 27 ("s32vector-ref" "object" "<object>" "int" "<int>" "n" "s32vector" "<s32vector>" "vector")}
      {Lisp-Entry "set-element!" specialize #f 350 20 350 32 ("s32vector-set!" "void" "<void>" "object" "<object>" "obj" "int" "<int>" "n" "s32vector" "<s32vector>" "vector")}
      {Lisp-Entry "cardinality" specialize #f 354 20 354 31 ("s32vector-length" "int" "<int>" "s32vector" "<s32vector>" "vector")}
      {Lisp-Entry "U32Vector-Class" class #f 363 7 363 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 366 20 366 37 ("make-u32vector" "len")}}
      {Lisp-Entry "U32Vector" class #f 370 17 370 26 ("Sequence" "U32Vector-Class")
        {Lisp-Entry "initialize" method #f 373 20 373 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 378 11 378 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 384 20 384 36 ("self" "u32vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 388 20 388 41 ("self" "u32vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 392 20 392 40 ("self" "u32vector-length")}
        {Lisp-Entry "sequence-tail" method #f 396 20 396 33 ("self" "u32vector->list" "tail" "list->u32vector" "n")}
        {Lisp-Entry "sequence-last" method #f 400 20 400 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 404 20 404 36 ("self" "u32vector->list" "butlast" "list->u32vector")}}
      {Lisp-Entry "element" specialize #f 408 20 408 27 ("u32vector-ref" "object" "<object>" "int" "<int>" "n" "u32vector" "<u32vector>" "vector")}
      {Lisp-Entry "set-element!" specialize #f 412 20 412 32 ("u32vector-set!" "void" "<void>" "object" "<object>" "obj" "int" "<int>" "n" "u32vector" "<u32vector>" "vector")}
      {Lisp-Entry "cardinality" specialize #f 416 20 416 31 ("u32vector-length" "int" "<int>" "u32vector" "<u32vector>" "vector")}
      {Lisp-Entry "S64Vector-Class" class #f 425 7 425 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 428 20 428 37 ("make-s64vector" "len")}}
      {Lisp-Entry "S64Vector" class #f 432 17 432 26 ("Sequence" "S64Vector-Class")
        {Lisp-Entry "initialize" method #f 435 20 435 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 440 11 440 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 446 20 446 36 ("self" "s64vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 450 20 450 41 ("self" "s64vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 454 20 454 40 ("self" "s64vector-length")}
        {Lisp-Entry "sequence-tail" method #f 458 20 458 33 ("self" "s64vector->list" "tail" "list->s64vector" "n")}
        {Lisp-Entry "sequence-last" method #f 462 20 462 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 466 20 466 36 ("self" "s64vector->list" "butlast" "list->s64vector")}}
      {Lisp-Entry "element" specialize #f 470 20 470 27 ("s64vector-ref" "object" "<object>" "int" "<int>" "n" "s64vector" "<s64vector>" "vector")}
      {Lisp-Entry "set-element!" specialize #f 474 20 474 32 ("s64vector-set!" "void" "<void>" "object" "<object>" "obj" "int" "<int>" "n" "s64vector" "<s64vector>" "vector")}
      {Lisp-Entry "cardinality" specialize #f 478 20 478 31 ("s64vector-length" "int" "<int>" "s64vector" "<s64vector>" "vector")}
      {Lisp-Entry "U64Vector-Class" class #f 487 7 487 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 490 20 490 37 ("make-u64vector" "len")}}
      {Lisp-Entry "U64Vector" class #f 494 17 494 26 ("Sequence" "U64Vector-Class")
        {Lisp-Entry "initialize" method #f 497 20 497 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 502 11 502 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 508 20 508 36 ("self" "u64vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 512 20 512 41 ("self" "u64vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 516 20 516 40 ("self" "u64vector-length")}
        {Lisp-Entry "sequence-tail" method #f 520 20 520 33 ("self" "u64vector->list" "tail" "list->u64vector" "n")}
        {Lisp-Entry "sequence-last" method #f 524 20 524 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 528 20 528 36 ("self" "u64vector->list" "butlast" "list->u64vector")}}
      {Lisp-Entry "element" specialize #f 532 20 532 27 ("u64vector-ref" "object" "<object>" "int" "<int>" "n" "u64vector" "<u64vector>" "vector")}
      {Lisp-Entry "set-element!" specialize #f 536 20 536 32 ("u64vector-set!" "void" "<void>" "object" "<object>" "obj" "int" "<int>" "n" "u64vector" "<u64vector>" "vector")}
      {Lisp-Entry "cardinality" specialize #f 540 20 540 31 ("u64vector-length" "int" "<int>" "u64vector" "<u64vector>" "vector")}
      {Lisp-Entry "F32Vector-Class" class #f 549 7 549 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 552 20 552 37 ("make-f32vector" "len")}}
      {Lisp-Entry "F32Vector" class #f 556 17 556 26 ("Sequence" "F32Vector-Class")
        {Lisp-Entry "initialize" method #f 559 20 559 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 564 11 564 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 570 20 570 36 ("self" "f32vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 574 20 574 41 ("self" "f32vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 578 20 578 40 ("self" "f32vector-length")}
        {Lisp-Entry "sequence-tail" method #f 582 20 582 33 ("self" "f32vector->list" "tail" "list->f32vector" "n")}
        {Lisp-Entry "sequence-last" method #f 586 20 586 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 590 20 590 36 ("self" "f32vector->list" "butlast" "list->f32vector")}}
      {Lisp-Entry "element" specialize #f 594 20 594 27 ("f32vector-ref" "object" "<object>" "int" "<int>" "n" "f32vector" "<f32vector>" "vector")}
      {Lisp-Entry "set-element!" specialize #f 598 20 598 32 ("f32vector-set!" "void" "<void>" "object" "<object>" "obj" "int" "<int>" "n" "f32vector" "<f32vector>" "vector")}
      {Lisp-Entry "cardinality" specialize #f 602 20 602 31 ("f32vector-length" "int" "<int>" "f32vector" "<f32vector>" "vector")}
      {Lisp-Entry "F64Vector-Class" class #f 611 7 611 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 614 20 614 37 ("make-f64vector" "len")}}
      {Lisp-Entry "F64Vector" class #f 618 17 618 26 ("Sequence" "F64Vector-Class")
        {Lisp-Entry "initialize" method #f 621 20 621 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 626 11 626 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 632 20 632 36 ("self" "f64vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 636 20 636 41 ("self" "f64vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 640 20 640 40 ("self" "f64vector-length")}
        {Lisp-Entry "sequence-tail" method #f 644 20 644 33 ("self" "f64vector->list" "tail" "list->f64vector" "n")}
        {Lisp-Entry "sequence-last" method #f 648 20 648 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 652 20 652 36 ("self" "f64vector->list" "butlast" "list->f64vector")}}
      {Lisp-Entry "element" specialize #f 656 20 656 27 ("f64vector-ref" "object" "<object>" "int" "<int>" "n" "f64vector" "<f64vector>" "vector")}
      {Lisp-Entry "set-element!" specialize #f 660 20 660 32 ("f64vector-set!" "void" "<void>" "object" "<object>" "obj" "int" "<int>" "n" "f64vector" "<f64vector>" "vector")}
      {Lisp-Entry "cardinality" specialize #f 664 20 664 31 ("f64vector-length" "int" "<int>" "f64vector" "<f64vector>" "vector")}}})
"increase"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "increase.scm"} 1288870741 scheme
    {Lisp-Entry "jazz.dialect.syntax.increase" module #f 37 18 37 46 ("scheme")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.dialect.kernel")}
      {Lisp-Entry "increase!" macro #f 46 16 46 25 (",increment" "+" ",location" "set!" "car" "1" "null?" "if" "increment" "cddr" "rest" "source-code" "cadr" "location" "let" "form-src")}
      {Lisp-Entry "decrease!" macro #f 56 16 56 25 (",increment" "-" ",location" "set!" "car" "1" "null?" "if" "increment" "cddr" "rest" "source-code" "cadr" "location" "let" "form-src")}}})
"install"
 ({Lisp-File-Entry {File :context "src" "jazz" "install.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.install" unit #f 37 6 37 18 ("jazz-readtable" "jazz:jazz-readtable" "global-ref" "jazz:global-ref" "jazz.dialect" "core.module" "load-unit" "jazz:load-unit" "lambda" "register-reader-extension" "jazz:register-reader-extension")
      {Lisp-Entry "Point" define ("literal") 45 21 45 26 ("construct-point" "jazz.literals" "jazz.literals:construct-point")}
      {Lisp-Entry "Dimension" define ("literal") 46 21 46 30 ("construct-dimension" "jazz.literals" "jazz.literals:construct-dimension")}
      {Lisp-Entry "Cell" define ("literal") 47 21 47 25 ("construct-cell" "jazz.literals" "jazz.literals:construct-cell")}
      {Lisp-Entry "Rect" define ("literal") 48 21 48 25 ("construct-rect" "jazz.literals" "jazz.literals:construct-rect")}
      {Lisp-Entry "Range" define ("literal") 49 21 49 26 ("construct-range" "jazz.literals" "jazz.literals:construct-range")}
      {Lisp-Entry "Exception-Detail" define ("literal") 50 21 50 37 ("construct-exception-detail" "jazz.literals" "jazz.literals:construct-exception-detail")}
      {Lisp-Entry "Walk-Location" define ("literal") 51 21 51 34 ("construct-walk-location" "jazz.literals" "jazz.literals:construct-walk-location")}}})
"jazz"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "walker" "jazz.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.dialect.walker.jazz" module #f 37 18 37 42 ("jazz.dialect")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.dialect.walker.scheme")}
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.dialect.walker.scheme")}
      {Lisp-Entry "Definition-Declaration" class #f 49 7 49 29 ("Declaration")
        {Lisp-Entry "expansion" slot #f 52 8 52 17 ()}
        {Lisp-Entry "get-expansion" accessor #f 52 25 52 33 ()}
        {Lisp-Entry "signature" slot #f 53 8 53 17 ()}
        {Lisp-Entry "get-signature" accessor #f 53 25 53 33 ()}
        {Lisp-Entry "value" slot #f 54 8 54 13 ()}
        {Lisp-Entry "get-value" accessor #f 54 25 54 33 ()}}
      {Lisp-Entry "Specialize" class #f 62 7 62 17 ("Expression")}
      {Lisp-Entry "Generic-Declaration" class #f 70 7 70 26 ("Declaration")
        {Lisp-Entry "dispatch-types" slot #f 73 8 73 22 ()}
        {Lisp-Entry "get-dispatch-types" accessor #f 73 30 73 38 ()}
        {Lisp-Entry "signature" slot #f 74 8 74 17 ()}
        {Lisp-Entry "get-signature" accessor #f 74 30 74 38 ()}
        {Lisp-Entry "body" slot #f 75 8 75 12 ()}
        {Lisp-Entry "get-body" accessor #f 75 30 75 38 ()}}
      {Lisp-Entry "Specific-Declaration" class #f 83 7 83 27 ("Declaration")
        {Lisp-Entry "generic" slot #f 86 8 86 15 ()}
        {Lisp-Entry "get-generic" accessor #f 86 25 86 33 ()}
        {Lisp-Entry "signature" slot #f 87 8 87 17 ()}
        {Lisp-Entry "get-signature" accessor #f 87 25 87 33 ()}
        {Lisp-Entry "body" slot #f 88 8 88 12 ()}
        {Lisp-Entry "get-body" accessor #f 88 25 88 33 ()}
        {Lisp-Entry "root?" slot #f 89 8 89 13 ()}
        {Lisp-Entry "get-root?" accessor #f 89 25 89 33 ()}}
      {Lisp-Entry "Category-Declaration" class #f 97 7 97 27 ("Namespace-Declaration")
        {Lisp-Entry "implementor" slot #f 100 8 100 19 ()}
        {Lisp-Entry "get-implementor" accessor #f 100 27 100 35 ()}
        {Lisp-Entry "metaclass" slot #f 101 8 101 17 ()}
        {Lisp-Entry "get-metaclass" accessor #f 101 27 101 35 ()}}
      {Lisp-Entry "Class-Declaration" class #f 109 7 109 24 ("Category-Declaration")
        {Lisp-Entry "ascendant" slot #f 112 8 112 17 ()}
        {Lisp-Entry "get-ascendant" accessor #f 112 34 112 42 ()}
        {Lisp-Entry "ascendant-relation" slot #f 113 8 113 26 ()}
        {Lisp-Entry "get-ascendant-relation" accessor #f 113 34 113 42 ()}
        {Lisp-Entry "ascendant-base" slot #f 114 8 114 22 ()}
        {Lisp-Entry "get-ascendant-base" accessor #f 114 34 114 42 ()}
        {Lisp-Entry "interfaces" slot #f 115 8 115 18 ()}
        {Lisp-Entry "get-interfaces" accessor #f 115 34 115 42 ()}}
      {Lisp-Entry "Interface-Declaration" class #f 123 7 123 28 ("Category-Declaration")
        {Lisp-Entry "ascendants" slot #f 126 8 126 18 ()}
        {Lisp-Entry "get-ascendants" accessor #f 126 26 126 34 ()}}
      {Lisp-Entry "Field-Declaration" class #f 134 7 134 24 ("Declaration")}
      {Lisp-Entry "Slot-Declaration" class #f 142 7 142 23 ("Field-Declaration")
        {Lisp-Entry "initialize" slot #f 145 8 145 18 ()}
        {Lisp-Entry "get-initialize" accessor #f 145 27 145 35 ()}
        {Lisp-Entry "getter-name" slot #f 146 8 146 19 ()}
        {Lisp-Entry "get-getter-name" accessor #f 146 27 146 35 ()}
        {Lisp-Entry "setter-name" slot #f 147 8 147 19 ()}
        {Lisp-Entry "get-setter-name" accessor #f 147 27 147 35 ()}}
      {Lisp-Entry "Property-Declaration" class #f 155 7 155 27 ("Slot-Declaration")
        {Lisp-Entry "getter" slot #f 158 8 158 14 ()}
        {Lisp-Entry "get-getter" accessor #f 158 22 158 30 ()}
        {Lisp-Entry "setter" slot #f 159 8 159 14 ()}
        {Lisp-Entry "get-setter" accessor #f 159 22 159 30 ()}}
      {Lisp-Entry "Method-Declaration" class #f 167 7 167 25 ("Field-Declaration")
        {Lisp-Entry "root" slot #f 170 8 170 12 ()}
        {Lisp-Entry "get-root" accessor #f 170 28 170 36 ()}
        {Lisp-Entry "propagation" slot #f 171 8 171 19 ()}
        {Lisp-Entry "get-propagation" accessor #f 171 28 171 36 ()}
        {Lisp-Entry "abstraction" slot #f 172 8 172 19 ()}
        {Lisp-Entry "get-abstraction" accessor #f 172 28 172 36 ()}
        {Lisp-Entry "expansion" slot #f 173 8 173 17 ()}
        {Lisp-Entry "get-expansion" accessor #f 173 28 173 36 ()}
        {Lisp-Entry "remote" slot #f 174 8 174 14 ()}
        {Lisp-Entry "get-remote" accessor #f 174 28 174 36 ()}
        {Lisp-Entry "synchronized" slot #f 175 8 175 20 ()}
        {Lisp-Entry "get-synchronized" accessor #f 175 28 175 36 ()}
        {Lisp-Entry "signature" slot #f 176 8 176 17 ()}
        {Lisp-Entry "get-signature" accessor #f 176 28 176 36 ()}
        {Lisp-Entry "body" slot #f 177 8 177 12 ()}
        {Lisp-Entry "get-body" accessor #f 177 28 177 36 ()}}
      {Lisp-Entry "With-Self" class #f 185 7 185 16 ("Expression")
        {Lisp-Entry "body" slot #f 188 8 188 12 ()}
        {Lisp-Entry "get-body" accessor #f 188 20 188 28 ()}}
      {Lisp-Entry "With-Dynamic-Self" class #f 196 7 196 24 ("Expression")
        {Lisp-Entry "code" slot #f 199 8 199 12 ()}
        {Lisp-Entry "get-code" accessor #f 199 20 199 28 ()}
        {Lisp-Entry "body" slot #f 200 8 200 12 ()}
        {Lisp-Entry "get-body" accessor #f 200 20 200 28 ()}}
      {Lisp-Entry "Cast" class #f 208 7 208 11 ("Expression")
        {Lisp-Entry "expression" slot #f 211 8 211 18 ()}
        {Lisp-Entry "get-expression" accessor #f 211 26 211 34 ()}}
      {Lisp-Entry "Construct" class #f 219 7 219 16 ("Expression")
        {Lisp-Entry "class" slot #f 222 8 222 13 ()}
        {Lisp-Entry "get-class" accessor #f 222 22 222 30 ()}
        {Lisp-Entry "values" slot #f 223 8 223 14 ()}
        {Lisp-Entry "get-values" accessor #f 223 22 223 30 ()}}
      {Lisp-Entry "Dispatch" class #f 231 7 231 15 ("Expression")
        {Lisp-Entry "name" slot #f 234 8 234 12 ()}
        {Lisp-Entry "get-name" accessor #f 234 25 234 33 ()}
        {Lisp-Entry "arguments" slot #f 235 8 235 17 ()}
        {Lisp-Entry "get-arguments" accessor #f 235 25 235 33 ()}}
      {Lisp-Entry "Jazz-Dialect" class #f 243 7 243 19 ("Dialect")}
      {Lisp-Entry "Jazz-Walker" class #f 251 7 251 18 ("Scheme-Walker")}}})
"list"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "list.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.list" unit #f 37 16 37 38 ()
      {Lisp-Entry "proper-list" define #f 40 9 40 25 ("queue-list" "jazz:queue-list" "%%cdr" "set!" "%%car" "enqueue" "jazz:enqueue" "%%pair?" "%%while" "new-queue" "jazz:new-queue" "proper" "let" "lst")}}})
"literals"
 ({Lisp-File-Entry {File :context "src" "jazz" "literals.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.literals" module #f 37 8 37 21 ("jazz")
      {Lisp-Entry "construct-point" definition #f 45 21 45 36 ("Point" "new" "v" "h")}
      {Lisp-Entry "construct-dimension" definition #f 49 21 49 40 ("Dimension" "new" "height" "width")}
      {Lisp-Entry "construct-cell" definition #f 53 21 53 35 ("Cell" "new" "col" "line")}
      {Lisp-Entry "construct-rect" definition #f 57 21 57 35 ("Rect" "new" "bottom" "right" "top" "left")}
      {Lisp-Entry "construct-range" definition #f 61 21 61 36 ("Range" "new" "end" "start")}
      {Lisp-Entry "construct-exception-detail" definition #f 70 21 70 47 ("Exception-Detail" "new" "children" "location" "title" "icon")}
      {Lisp-Entry "construct-walk-location" definition #f 79 21 79 44 ("Walk-Location" "new" "path" "locat" "declaration-locator" "unit-locator")}}})
"loop"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "loop.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.syntax.loop" module #f 37 18 37 42 ("scheme")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.dialect.syntax.macros" "jazz.dialect.syntax.bind" "syntax" "phase" "jazz.dialect.syntax.increase" "jazz.dialect.kernel")}
      {Lisp-Entry "->string" native ("native") 46 16 46 29 ()}
      {Lisp-Entry "error" native ("native") 47 16 47 26 ()}
      {Lisp-Entry "loop" macro #f 134 16 134 20 ("expand-loop" "sourcify-if" "source-code" "cdr" "clauses" "let" "form-src")}
      {Lisp-Entry "noobject" define #f 141 8 141 16 ("noobject" "list")}
      {Lisp-Entry "expand-loop" define #f 145 9 145 20 ("set-cdr!" "list+" "<list+>" "<list>" "cns" "ptr" ",@unless-actions" "unless-actions" ",@when-actions" ",test" "when-actions" "body" "res" "what" ">" "rpt" "count" "specifier?" "=" "then" "then-key" "first" "symbol?" "end" "decrease!" ">=" "downto" "below" "cddr" "<=" "cadr" "scan" "by" "update" "to" "from" "in-properties" "get-next~" "done?~" "iterate-sequence" "is?" "Iterator" "<Iterator>" "itr" "val" "iterator" "in-sequence" "1" "+" "element" "<" "length" "fx" "<fx>" "<vector>" "len" "vec" "vector" "in-vector" "error" "remainder" "keyword" "or" "Object" "<Object>" "in" "parse-for" "receive" "equal" "lst" "set-finally" "expr" "add-epilogue" "after" "add-after" "enqueue-list" "action-list" "add-actions" "action" "before" "add-before" "test" "add-test" "exit-safe" "values" "add-initial-test" "bool" "<bool>" "Object+" "<Object+>" "ext" "ret" "get-return/exit" "add-with" "list" "binding" "null?" "value" "type" "variable" "add-binding" "cons" "Unbound" "increase!" "->string" "string-append" "string->symbol" "symbol" "prefix" "unique" ",@finally" "begin" ",return" ",exit" "eq?" ",@epilogue" ",@afters" ",@actions" ",@befores" ",@tests" "and" "append" "let*" "queue-list" "cdr" "else" "process-finally" "process-return" "process-collect" "collect" "process-sum" "sum" "process-do" "do" "process-unless" "unless" "process-when" "when" "process-every" "every" "process-some" "some" "process-repeat" "repeat" "process-for" "for" "process-with" "with" "case" "rest" "key" "bind" "add-action" "source-code" "pair?" "not" "if" "car" "clause" "not-null?" "while" "new-queue" "expand-loop" "process-clauses" "set!" "expand" "define" "0" "unique-rank" "finally" "epilogue" "afters" "actions" "befores" "withs" "tests" "exit" "noobject" "return" "bindings" "let" "clauses")}}})
"macros"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "macros.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.syntax.macros" module #f 37 18 37 44 ("scheme")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("syntax" "phase" "scheme.syntax-rules" "jazz.dialect.kernel")}
      {Lisp-Entry "->string" native ("native") 44 16 44 29 ()}
      {Lisp-Entry "error" native ("native") 45 16 45 26 ()}
      {Lisp-Entry "submodule" macro ("macro") 48 15 48 24 (",@body" "begin" "body" "name")}
      {Lisp-Entry "constant" macro #f 53 16 53 24 (",value" ",name" "public" "definition" "sourcify-if" "caddr" "value" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "expand-body" define-macro #f 61 23 61 34 ("begin" "..." "expr" "unspecified" "_" "syntax-rules")}
      {Lisp-Entry "when" define-macro #f 83 22 83 26 ("expand-body" "if" "..." "expr" "test" "when" "syntax-rules")}
      {Lisp-Entry "unless" define-macro #f 102 22 102 28 ("not" "when" "..." "expr" "test" "unless" "syntax-rules")}
      {Lisp-Entry "prog1" define-macro #f 120 22 120 27 ("expand-body" "value" "let" "..." "expr" "returned" "prog1" "syntax-rules")}
      {Lisp-Entry "while" define-macro #f 142 22 142 27 ("begin" "if" "iterate" "let" "..." "expr" "test" "while" "syntax-rules")}
      {Lisp-Entry "unwind-protect" define-macro #f 163 22 163 36 ("lambda" "dynamic-wind" "..." "protection" "body" "unwind-protect" "syntax-rules")}
      {Lisp-Entry "catch" macro #f 174 16 174 21 ("desourcify" "else" "car" "pair?" ",@body" "exc" "lambda" ",predicate/type" "call-with-catch" "symbol?" "cond" "sourcify-if" "cddr" "body" "source-code" "cadr" "predicate/type" "let" "error" "unwrap-syntactic-closure" "cdr" "null?" "if" "form-src")}
      {Lisp-Entry "~" macro #f 193 16 193 17 (",name" ",obj" "class-of" "dispatch" "apply" "rest" "obj" "lambda" "with-uniqueness" "sourcify-if" "cddr" "car" "object" "cadr" "source-code" "name" "let" "form-src")}
      {Lisp-Entry "expand-push!" define #f 206 9 206 21 ("cons" "set!" "list" "value" "location")}
      {Lisp-Entry "expand-pop!" define #f 212 9 212 20 ("cdr" "set!" "list" "location")}
      {Lisp-Entry "expand-assert" define #f 216 9 216 22 ("proc" "car" "error" "unless" "list" ":text" "->string" "string-append" "message" "expr" "let*" "null?" "if" "rest" "first")}
      {Lisp-Entry "expand-assert-type" define #f 227 9 227 27 ("category-identifier" "error" "is-not?" "when" "list" "let*" "cons" "generate-symbol" "value" "let" "type" "expr")}
      {Lisp-Entry "expand-error?" define #f 235 9 235 22 ("begin" "cons" "Error" "catch" "list" "generate-symbol" "err" "let" "body")}
      {Lisp-Entry "c-constant" macro #f 248 16 248 26 (",value" ",name" "public" "definition" "sourcify-if" "caddr" "value" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "c-enumeration" macro #f 256 16 256 29 (",@definitions" "begin" "public" "definition" "declaration" "lambda" "map" "definitions" "sourcify-if" "cddr" "declarations" "source-code" "cadr" "name" "let" "form-src")}}})
"memory"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "memory.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.memory" unit #f 37 16 37 40 ()
      {Lisp-Entry "gc" define #f 40 9 40 16 ("%%gc")}
      {Lisp-Entry "gc-report-set!" define #f 44 9 44 28 ("gc-report-set!" "flag")}
      {Lisp-Entry "gc-count" define #f 48 9 48 22 ("6" "##process-statistics" "f64vector-ref" "inexact->exact")}
      {Lisp-Entry "process-memory" define #f 57 9 57 28 ("inexact->exact" "values" "19" "nonmovable" "18" "movable" "17" "live" "16" "alloc" "15" "f64vector-ref" "heap" "##process-statistics" "vec" "let")}
      {Lisp-Entry "symbols-memory" define #f 71 9 71 28 ("values" "##symbol-table" "%%vector->list" "%%reverse" "%%cons" "2" "%%vector-ref" "%%symbol?" "if" "loop" "map" "%%symbol->string" "%%string-length" "s" "%%length" "%%fx+" "set!" "lst" "lambda" "for-each" "chars" "0" "count" "let")}
      {Lisp-Entry "classes-statistics" define #f 93 9 93 32 ("values" "Object" "jazz:Object" "method" "slot" "for-each" "process-method" "Method" "jazz:Method" "process-slot" "Slot" "jazz:Slot" "is?" "jazz:is?" "cond" "field" "name" "lambda" "iterate-table" "jazz:iterate-table" "%%get-class-interface-table" "%%get-class-class-table" "vector-vector-size" "jazz:vector-vector-size" "%%get-class-core-vtable" "%%get-class-instance-slots" "%%get-class-interfaces" "%%get-category-descendants" "list-size" "jazz:list-size" "%%get-category-ancestors" "%%get-category-fields" "table-size" "jazz:table-size" "vector-size" "jazz:vector-size" "fx+" "1" "%%fx+" "set!" "class" "process-class" "define" "sz-methods" "nb-methods" "sz-slots" "nb-slots" "sz-interfaces" "nb-interfaces" "sz-classes" "0" "nb-classes" "let")}
      {Lisp-Entry "class-instances-count" define #f 137 9 137 35 ("%%get-category-descendants" "for-each" "%%get-category-identifier" "instances-statistics" "jazz:instances-statistics" "%%table-ref" "%%fx+" "set!" "iter" "0" "count" "let" "class")}
      {Lisp-Entry "class-instances-size" define #f 145 9 145 34 ("%%get-category-descendants" "for-each" "%%get-class-instance-size" "%%get-category-identifier" "instances-statistics" "jazz:instances-statistics" "%%table-ref" "%%fx*" "%%fx+" "set!" "iter" "0" "size" "let" "class")}
      {Lisp-Entry "word-bytes" define #f 159 8 159 23 ("4")}
      {Lisp-Entry "f64-bytes" define #f 160 8 160 22 ("8")}
      {Lisp-Entry "pair-bytes" define #f 161 8 161 23 ("12")}
      {Lisp-Entry "table-bytes" define #f 162 8 162 24 ("32")}
      {Lisp-Entry "vector-size" define #f 165 9 165 25 ("%%vector-length" "%%fx*" "word-bytes" "jazz:word-bytes" "%%fx+" "v")}
      {Lisp-Entry "safe-vector-size" define #f 168 9 168 30 ("0" "vector-size" "jazz:vector-size" "%%vector?" "if" "v")}
      {Lisp-Entry "f64vector-size" define #f 173 9 173 28 ("f64vector-length" "f64-bytes" "jazz:f64-bytes" "%%fx*" "word-bytes" "jazz:word-bytes" "%%fx+" "v")}
      {Lisp-Entry "vector-vector-size" define #f 176 9 176 32 ("1" "%%vector-ref" "%%vector-length" "%%fx<" "size" "n" "iter" "let" "vector-size" "jazz:vector-size" "%%fx+" "0" "%%not" "if" "v")}
      {Lisp-Entry "list-size" define #f 186 9 186 23 ("%%length" "pair-bytes" "jazz:pair-bytes" "%%fx*" "l")}
      {Lisp-Entry "table-size" define #f 189 9 189 24 ("0" "%%fx+" "##gc-hash-table?" "if" "%%vector-length" "1" "fx+" "word-bytes" "jazz:word-bytes" "%%fx*" "4" "floats" "5" "gcht2" "3" "%%vector-ref" "gcht1" "let" "t")}}})
"network"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "network.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.network" unit #f 37 16 37 41 ()
      {Lisp-Entry "open-tcp-client" define #f 42 12 42 32 ("open-tcp-client")}
      {Lisp-Entry "open-tcp-server" define #f 43 12 43 32 ("open-tcp-server")}
      {Lisp-Entry "tcp-server-socket-info" define #f 44 12 44 39 ("tcp-server-socket-info")}
      {Lisp-Entry "call-with-tcp-client" define #f 46 13 46 38 ("close-port" "if" "open-tcp-client" "set!" "lambda" "dynamic-wind" "port" "let" "proc" "settings")}
      {Lisp-Entry "socket-info-address" define #f 57 12 57 36 ("socket-info-address")}
      {Lisp-Entry "socket-info-port-number" define #f 58 12 58 40 ("socket-info-port-number")}}})
"number"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "number.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.number" unit #f 37 16 37 40 ()
      {Lisp-Entry "fixnum->flonum" define #f 47 9 47 28 ("Fixnum" "jazz:Fixnum" "type-error" "jazz:type-error" "##fixnum->flonum" "%%fixnum?" "if" "n")}
      {Lisp-Entry "flonum->fixnum" define #f 52 9 52 28 ("Flonum" "jazz:Flonum" "type-error" "jazz:type-error" "##flonum->fixnum" "%%flonum?" "if" "n")}
      {Lisp-Entry "+infinity" define #f 63 8 63 22 ("+inf.0")}
      {Lisp-Entry "-infinity" define #f 66 8 66 22 ("-inf.0")}
      {Lisp-Entry "random-integer" define #f 77 12 77 31 ("random-integer")}
      {Lisp-Entry "random-real" define #f 78 12 78 28 ("random-real")}
      {Lisp-Entry "random-source-randomize!" define #f 79 12 79 41 ("random-source-randomize!")}
      {Lisp-Entry "random-source-pseudo-randomize!" define #f 80 12 80 48 ("random-source-pseudo-randomize!")}
      {Lisp-Entry "default-random-source" define #f 81 12 81 38 ("default-random-source")}}})
"object"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "language" "object.jazz"} 1299704435 jazz
    {Lisp-Entry "jazz.dialect.language.object" module #f 37 18 37 46 ("jazz.dialect")
      {Lisp-Entry "proclaim" anonymous #f 40 1 40 9 ("optimizations" "warn")}
      {Lisp-Entry "import" anonymous #f 43 1 43 7 ("jazz.dialect.kernel")}
      {Lisp-Entry "error" native ("native") 46 16 46 26 ()}
      {Lisp-Entry "Object" class #f 54 17 54 23 ("Object-Class")
        {Lisp-Entry "initialize" method #f 57 19 57 29 ()}
        {Lisp-Entry "destroy" method #f 61 19 61 26 ("self" "*destroy-mandatory-objects*" "table-set!")}
        {Lisp-Entry "call-print" method #f 65 26 65 36 ("print" "detail" "output")}
        {Lisp-Entry "print" method #f 69 26 69 31 ("print-detail" "lambda" "print-unreadable" "self" "object?" "if" "detail" "output")}
        {Lisp-Entry "print-detail" method #f 77 21 77 33 ("write" "self" "display" ":human" "eq?" "if" "detail" "output")}
        {Lisp-Entry "class-actions" method #f 83 26 83 39 ()}
        {Lisp-Entry "focus-actions" method #f 87 26 87 39 ()}
        {Lisp-Entry "guest-actions" method #f 91 26 91 39 ()}
        {Lisp-Entry "hash-object" method #f 95 26 95 37 ("self" "error")}
        {Lisp-Entry "copy-object" method #f 99 29 99 40 ("self" "error" "deep?")}
        {Lisp-Entry "compare-object" method #f 103 29 103 43 (":incompatible" "object")}
        {Lisp-Entry "ci-compare-object" method #f 107 29 107 46 (":incompatible" "object")}
        {Lisp-Entry "di-compare-object" method #f 111 29 111 46 (":incompatible" "object")}
        {Lisp-Entry "describe-object" method #f 115 29 115 44 ("print" "output")}
        {Lisp-Entry "initialized?" method #f 119 26 119 38 ()}
        {Lisp-Entry "close" method #f 124 26 124 31 ("destroy")}
        {Lisp-Entry "destroy-mandatory" method #f 128 29 128 46 ("leaked-object" "when" "table-ref" "let" "obj" "lambda" "make-will" "self" "*destroy-mandatory-objects*" "table-set!" "info")}
        {Lisp-Entry "destroying?" method #f 137 26 137 37 ()}
        {Lisp-Entry "destroyed?" method #f 142 26 142 36 ()}
        {Lisp-Entry "walk-references" method #f 147 26 147 41 ("proc")}
        {Lisp-Entry "setup-context" method #f 151 26 151 39 ("context")}
        {Lisp-Entry "get-sort-value" method #f 155 26 155 40 ()}
        {Lisp-Entry "coerce-string" method #f 159 29 159 42 ("self" "error")}
        {Lisp-Entry "iterate-object" method #f 163 29 163 43 ("self" "error")}
        {Lisp-Entry "object-similar?" method #f 172 29 172 44 ("self" "eq?" "object")}
        {Lisp-Entry "object-alphabetic?" method #f 176 29 176 47 ("self" "error")}
        {Lisp-Entry "object-numeric?" method #f 180 29 180 44 ("self" "error")}
        {Lisp-Entry "object-alphanumeric?" method #f 184 29 184 49 ("self" "error")}
        {Lisp-Entry "object-whitespace?" method #f 188 29 188 47 ("self" "error")}
        {Lisp-Entry "object-upper-case?" method #f 192 29 192 47 ("self" "error")}
        {Lisp-Entry "object-lower-case?" method #f 196 29 196 47 ("self" "error")}
        {Lisp-Entry "object-upcase" method #f 200 29 200 42 ("self" "error")}
        {Lisp-Entry "object-downcase" method #f 204 29 204 44 ("self" "error")}
        {Lisp-Entry "object-capitalize" method #f 208 29 208 46 ("self" "error")}}
      {Lisp-Entry "compare" definition #f 212 27 212 34 ("compare-object" "compare-object~" ":equal" "eqv?" "if" "b" "Object" "<Object>" "a")}
      {Lisp-Entry "ci-compare" definition #f 218 27 218 37 ("ci-compare-object" "ci-compare-object~" ":equal" "eqv?" "if" "b" "Object" "<Object>" "a")}
      {Lisp-Entry "di-compare" definition #f 224 27 224 37 ("di-compare-object" "di-compare-object~" ":equal" "eqv?" "if" "b" "Object" "<Object>" "a")}
      {Lisp-Entry "copy" definition #f 230 20 230 24 ("subcopy" "Object" "<Object>" "obj")}
      {Lisp-Entry "subcopy" definition #f 234 20 234 27 ("copy-object" "copy-object~" "bool" "<bool>" "deep?" "Object" "<Object>" "obj")}
      {Lisp-Entry "print-unreadable" definition #f 238 20 238 36 ("string=?" "unless" "display" "object->serial" "serial" "get-output-string" "open-output-string" "string" "class-of" "get-name" "get-name~" "reference-name" "class-name" "let" "proc" "output" "Object" "<Object>" "object")}
      {Lisp-Entry "native-class" definition #f 254 21 254 33 ("error" "name")}
      {Lisp-Entry "hash" definition #f 258 20 258 24 ("hash-object" "hash-object~" "Object" "<Object>" "obj")}
      {Lisp-Entry "*destroy-mandatory-objects*" definition #f 267 19 267 46 ("eq?" "test:" "weak-keys:" "make-table")}
      {Lisp-Entry "*leaked-objects-mutex*" definition #f 270 12 270 34 ("make-mutex")}
      {Lisp-Entry "*leaked-objects*" definition #f 273 12 273 28 ()}
      {Lisp-Entry "get-leaked-objects" definition #f 276 20 276 38 ("*leaked-objects*")}
      {Lisp-Entry "leaked-object" definition #f 279 13 279 26 ("mutex-unlock!" "cons" "*leaked-objects*" "set!" "*leaked-objects-mutex*" "mutex-lock!" "info" "obj")}}})
"parse"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "language" "parse.jazz"} 1291384841 jazz
    {Lisp-Entry "jazz.dialect.language.parse" module #f 37 18 37 45 ("jazz.dialect")
      {Lisp-Entry "proclaim" anonymous #f 40 1 40 9 ("optimizations" "warn")}
      {Lisp-Entry "import" anonymous #f 43 1 43 7 ("jazz.dialect.language.functional" "jazz.dialect.language.format" "jazz.dialect.language.exception" "jazz.dialect.kernel")}
      {Lisp-Entry "parse-integer" definition #f 49 20 49 33 ("type:" "object:" "Conversion-Error" "new" "signal" "read-string-element" "numeric?" "empty-string?" "not" "and" "if" "string")}
      {Lisp-Entry "parse-hexadecimal" definition #f 55 20 55 37 ("format" "read-string-element" "string")}
      {Lisp-Entry "parse-boolean" definition #f 59 20 59 33 ("type:" "object:" "Conversion-Error" "new" "signal" "else" "ci=?" "or" "not" "cond" "string")}
      {Lisp-Entry "parse-strings" definition #f 66 20 66 33 ("split" "trim-spaces" "lambda" "map" "string=?" "empty-string?" "or" "if" "separator" "separator:" "string")}
      {Lisp-Entry "parse-delimited-string" definition #f 74 20 74 42 ("parse-strings" "lambda" "map" "separator" "separator:" "string")}}})
"pathname"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "pathname.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.pathname" unit #f 37 16 37 42 ()
      {Lisp-Entry "pathname-expand" define #f 42 12 42 32 ("path-expand")}
      {Lisp-Entry "file-rename" define #f 43 12 43 28 ("rename-file")}
      {Lisp-Entry "directory-delete" define #f 44 12 44 33 ("delete-directory")}
      {Lisp-Entry "current-directory" define #f 46 13 46 35 ("pathname-exists?" "jazz:pathname-exists?" "if" "pathname-normalize" "jazz:pathname-normalize" "current-directory" "dir" "let")}
      {Lisp-Entry "current-directory-set!" define #f 53 13 53 40 ("current-directory" "dir")}
      {Lisp-Entry "with-current-directory" define #f 56 13 56 40 ("current-directory" "parameterize" "thunk" "dir")}}})
"platform"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "language" "platform.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.dialect.language.platform" module #f 37 18 37 48 ("jazz.dialect")
      {Lisp-Entry "proclaim" anonymous #f 40 1 40 9 ("optimizations" "warn")}
      {Lisp-Entry "import" anonymous #f 43 1 43 7 ("jazz.dialect.language.functional" "jazz.dialect.language.format" "jazz.dialect.kernel")}
      {Lisp-Entry "bell" definition #f 53 20 53 24 ("bell-internal" "jazz.platform" "module-ref" "apply" "rest")}}})
"port"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "port.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.port" unit #f 37 16 37 38 ("jazz.dialect.language.debug.get-console-port" "set!")
      {Lisp-Entry "system-format" define #f 45 8 45 26 ("format" "jazz:format")}
      {Lisp-Entry "close-port" define #f 56 12 56 27 ("close-port")}
      {Lisp-Entry "input-port-timeout-set!" define #f 57 12 57 40 ("input-port-timeout-set!")}
      {Lisp-Entry "output-port-timeout-set!" define #f 58 12 58 41 ("output-port-timeout-set!")}
      {Lisp-Entry "jazz.dialect.language.debug.get-console-port" define #f 68 8 68 52 ()}
      {Lisp-Entry "get-console-port" define #f 74 9 74 30 ("jazz.dialect.language.debug.get-console-port" "if")}}})
"reader"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "reader.scm"} 1301161838 scheme
    {Lisp-Entry "jazz.dialect.core.reader" unit #f 37 16 37 40 ()
      {Lisp-Entry "make-jazz-readtable" define #f 47 13 47 37 ("jazzify-readtable!" "jazz:jazzify-readtable!" "%%make-standard-readtable" "readtable-max-unescaped-char-set" "readtable" "let")}
      {Lisp-Entry "jazzify-readtable!" define #f 53 13 53 36 ("read-delimited-string" "jazz:read-delimited-string" "%%readtable-char-sharp-handler-set!" "read-comment" "jazz:read-comment" "read-literal" "jazz:read-literal" "%%readtable-char-class-set!" "named-chars" "jazz:named-chars" "readtable-named-char-table" "jazz:readtable-named-char-table" "%%append" "readtable-named-char-table-set!" "jazz:readtable-named-char-table-set!" "readtable")}
      {Lisp-Entry "named-chars" define #f 60 12 60 28 ()}
      {Lisp-Entry "in-expression-comment?" define #f 108 12 108 39 ("make-parameter")}
      {Lisp-Entry "read-literal-hook" define #f 112 12 112 34 ("make-parameter")}
      {Lisp-Entry "read-literal" define #f 116 13 116 30 ("construct-literal" "jazz:construct-literal" "and" "read-literal-hook" "jazz:read-literal-hook" "hook" "arguments" "name" "else" "%%cdr" "%%car" "new-literal" "jazz:new-literal" "walk-for" "jazz:walk-for" "%%unspecified" "%%null?" "in-expression-comment?" "jazz:in-expression-comment?" "read-literals?" "jazz:read-literals?" "%%not" "or" "cond" "readenv-wrap" "jazz:readenv-wrap" "%%build-list" "lst" "error" "jazz:error" "peek-char" "%%eqv?" "if" "read-char" "%%readenv-current-filepos" "start-pos" "readenv-port" "jazz:readenv-port" "port" "let" "c" "re")}
      {Lisp-Entry "read-comment" define #f 142 13 142 30 ("%%read-datum-or-label-or-none-or-dot" "read" "read-char" "in-expression-comment?" "jazz:in-expression-comment?" "parameterize" "readenv-port" "jazz:readenv-port" "port" "let" "c" "re")}
      {Lisp-Entry "read-delimited-string" define #f 151 13 151 39 ("get-output-string" "readenv-wrap" "jazz:readenv-wrap" "peek-char" "and" "else" "write-char" "case" "escaped" "%%eqv?" "%%eof-object?" "cond" "c" "iter" "open-output-string" "output" "read-char" "readenv-port" "jazz:readenv-port" "port" "let" "start-pos" "next" "re")}
      {Lisp-Entry "jazz-readtable" define #f 180 12 180 31 ("make-jazz-readtable" "jazz:make-jazz-readtable")}
      {Lisp-Entry "with-jazz-readtable" define #f 184 13 184 37 ("jazz-readtable" "jazz:jazz-readtable" "current-readtable" "parameterize" "thunk")}
      {Lisp-Entry "char-symbol" define #f 189 13 189 29 ("%%car" "and" "rassq" "jazz:rassq" "res" "jazz-readtable" "jazz:jazz-readtable" "readtable-named-char-table" "jazz:readtable-named-char-table" "table" "let" "char")}
      {Lisp-Entry "readtable?" define #f 203 9 203 24 ("%%readtable?" "obj")}
      {Lisp-Entry "make-standard-readtable" define #f 206 9 206 37 ("%%make-standard-readtable")}
      {Lisp-Entry "readtable-copy" define #f 209 9 209 28 ("%%readtable-copy" "readtable")}
      {Lisp-Entry "readtable-char-delimiter?" define #f 212 9 212 39 ("%%readtable-char-delimiter?" "c" "readtable")}
      {Lisp-Entry "readtable-char-delimiter?-set!" define #f 215 9 215 44 ("%%readtable-char-delimiter?-set!" "delimiter?" "c" "readtable")}
      {Lisp-Entry "readtable-char-handler" define #f 218 9 218 36 ("%%readtable-char-handler" "c" "readtable")}
      {Lisp-Entry "readtable-char-handler-set!" define #f 221 9 221 41 ("%%readtable-char-handler-set!" "handler" "c" "readtable")}
      {Lisp-Entry "readtable-char-sharp-handler" define #f 224 9 224 42 ("%%readtable-char-sharp-handler" "c" "readtable")}
      {Lisp-Entry "readtable-char-sharp-handler-set!" define #f 227 9 227 47 ("%%readtable-char-sharp-handler-set!" "handler" "c" "readtable")}
      {Lisp-Entry "readtable-char-class-set!" define #f 230 9 230 39 ("%%readtable-char-class-set!" "handler" "delimiter?" "c" "readtable")}
      {Lisp-Entry "eof-object" define #f 241 13 241 28 ("#!eof")}
      {Lisp-Entry "read-u8" define #f 244 12 244 24 ("read-u8")}
      {Lisp-Entry "write-u8" define #f 245 12 245 25 ("write-u8")}
      {Lisp-Entry "read-subu8vector" define #f 246 12 246 33 ("read-subu8vector")}
      {Lisp-Entry "write-subu8vector" define #f 247 12 247 34 ("write-subu8vector")}
      {Lisp-Entry "read-line" define #f 249 12 249 26 ("read-line")}
      {Lisp-Entry "read-proper-line" define #f 252 13 252 34 ("%%string-shrink!" "1" "%%fx-" "%%string-ref" "%%eqv?" "0" "%%fx>" "and" "%%string-length" "len" "values" "eof-object?" "if" "read-line" "line" "let" "port")}
      {Lisp-Entry "read-all" define #f 261 12 261 25 ("read-all")}
      {Lisp-Entry "with-readtable" define #f 264 13 264 32 ("current-readtable" "parameterize" "thunk" "readtable")}
      {Lisp-Entry "skip-whitespace" define #f 271 9 271 29 ("read-char" "peek-char" "char-whitespace?" "%%while" "port")}
      {Lisp-Entry "read-delimited" define #f 276 9 276 28 ("queue-list" "jazz:queue-list" "read-char" "read" "enqueue" "jazz:enqueue" "peek-char" "%%eqv?" "%%not" "%%while" "skip-whitespace" "jazz:skip-whitespace" "new-queue" "jazz:new-queue" "queue" "let" "delimiter" "port")}
      {Lisp-Entry "read-until" define #f 286 9 286 24 ("queue-list" "jazz:queue-list" "enqueue" "jazz:enqueue" "set!" "if" "read" "%%not" "%%while" "done?" "new-queue" "jazz:new-queue" "queue" "expr" "let" "port" "test")}
      {Lisp-Entry "read-content" define #f 298 9 298 26 ("eof-object?" "read-until" "jazz:read-until" "port")}}})
"repository"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "repository.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.repository" unit #f 37 16 37 44 ()
      {Lisp-Entry "repository-name" define #f 45 9 45 29 ("%%repository-name" "repository")}
      {Lisp-Entry "repository-title" define #f 48 9 48 30 ("%%repository-name" "%%symbol->string" "repository")}
      {Lisp-Entry "repository-directory" define #f 51 9 51 34 ("%%repository-directory" "repository")}
      {Lisp-Entry "repository-library-root" define #f 54 9 54 37 ("%%repository-library-root" "repository")}
      {Lisp-Entry "repository-library-directory" define #f 57 9 57 42 ("%%repository-library-directory" "repository")}
      {Lisp-Entry "repository-binary?" define #f 60 9 60 32 ("%%repository-binary?" "repository")}
      {Lisp-Entry "package-repository" define #f 69 9 69 32 ("%%package-repository" "package")}
      {Lisp-Entry "package-name" define #f 72 9 72 26 ("%%package-name" "package")}
      {Lisp-Entry "package-directory" define #f 75 9 75 31 ("package-root-pathname" "jazz:package-root-pathname" "package")}
      {Lisp-Entry "package-products" define #f 78 9 78 30 ("%%package-products" "package")}
      {Lisp-Entry "package-profiles" define #f 81 9 81 30 ("%%package-profiles" "package")}
      {Lisp-Entry "package-profiles-set!" define #f 84 9 84 35 ("%%package-profiles-set!" "profiles" "package")}
      {Lisp-Entry "package-project" define #f 87 9 87 29 ("%%package-project" "package")}}})
"run"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "run.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.test.run" module #f 37 8 37 21 ("run" "jazz.test" "load-unit" "descriptor" "lambda" "test" "register-product-run" "jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.test")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "validate" "run.jazz"} 1295977563 jazz
    {Lisp-Entry "jazz.validate.run" module #f 37 8 37 25 ("Classes" "test:" "Validation-Suite" "new" "validate" "validate~" "jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.validation" "jazz.validate")}
      {Lisp-Entry "Classes" definition #f 44 12 44 19 ("Vector-Tester" "Variable-Tester" "Values-Tester" "Trait-Tester" "Thread-Tester" "Table-Tester" "Syntax-Tester" "Symbol-Tester" "Structure-Tester" "String-Tester" "Sequence-Tester" "Scheme-Tester" "Reader-Tester" "Pathname-Tester" "Object-Tester" "Number-Tester" "List-Tester" "Language-Tester" "Iterator-Tester" "Function-Tester" "Format-Tester" "Form-Tester" "Explorer-Tester" "Error-Tester" "Enumeration-Tester" "Designer-Tester" "Debugger-Tester" "Control-Tester" "Component-Tester" "Collector-Tester" "Char-Tester" "Catalog-Tester" "Boolean-Tester" "Binding-Tester" "Array-Tester" "list")}}})
"runtime"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "runtime.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.runtime" unit #f 37 16 37 36 ("Definition" "jazz:Definition" "encapsulate-class" "jazz:encapsulate-class")
      {Lisp-Entry "Definition" define-class ("class runtime") 45 27 45 42 ()}
      {Lisp-Entry "new-definition" define #f 48 9 48 28 ("Definition" "jazz:Definition" "allocate-definition" "jazz:allocate-definition" "locator" "name")}
      {Lisp-Entry "register-definition" define #f 55 9 55 33 ("new-definition" "jazz:new-definition" "register-module-entry" "jazz:register-module-entry" "locator" "name" "module-name")}}})
"runtime-classes"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "runtime-classes.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.runtime-classes" unit #f 37 16 37 44 ()
      {Lisp-Entry "Definition" define-class ("class") 45 19 45 34 ("%%get-definition-locator" "locator" "allocate-definition" "jazz:allocate-definition" "Object-Class" "jazz:Object-Class" "name" "Field" "jazz:Field")}}})
"scheme"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "walker" "scheme.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.dialect.walker.scheme" module #f 37 18 37 44 ("jazz.dialect")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.dialect.walker.core")}
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.dialect.walker.core")}
      {Lisp-Entry "Define-Declaration" class #f 49 7 49 25 ("Declaration")
        {Lisp-Entry "signature" slot #f 52 8 52 17 ()}
        {Lisp-Entry "get-signature" accessor #f 52 25 52 33 ()}
        {Lisp-Entry "value" slot #f 53 8 53 13 ()}
        {Lisp-Entry "get-value" accessor #f 53 25 53 33 ()}}
      {Lisp-Entry "Define-Special-Form-Declaration" class #f 61 7 61 38 ("Declaration")
        {Lisp-Entry "signature" slot #f 64 8 64 17 ()}
        {Lisp-Entry "get-signature" accessor #f 64 25 64 33 ()}
        {Lisp-Entry "body" slot #f 65 8 65 12 ()}
        {Lisp-Entry "get-body" accessor #f 65 25 65 33 ()}}
      {Lisp-Entry "Define-Macro-Declaration" class #f 73 7 73 31 ("Declaration")
        {Lisp-Entry "signature" slot #f 76 8 76 17 ()}
        {Lisp-Entry "get-signature" accessor #f 76 25 76 33 ()}
        {Lisp-Entry "body" slot #f 77 8 77 12 ()}
        {Lisp-Entry "get-body" accessor #f 77 25 77 33 ()}}
      {Lisp-Entry "Scheme-Dialect" class #f 85 7 85 21 ("Dialect")}
      {Lisp-Entry "Scheme-Walker" class #f 93 7 93 20 ("Walker")}}})
"stack"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "stack.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.stack" unit #f 37 16 37 39 ()
      {Lisp-Entry "procedure-name" define #f 47 13 47 32 ("%%procedure-name" "procedure")}
      {Lisp-Entry "procedure-name-set!" define #f 50 13 50 37 ("procedure-name" "jazz:procedure-name" "set!" "proc")}
      {Lisp-Entry "procedure-locat" define #f 53 13 53 33 ("%%procedure-locat" "procedure")}
      {Lisp-Entry "closure?" define #f 57 13 57 26 ("%%closure?" "obj")}
      {Lisp-Entry "closure-code" define #f 60 13 60 30 ("%%closure-code" "closure")}
      {Lisp-Entry "hidden-frames" define #f 64 12 64 30 ("##thread-start-action!" "##dynamic-env-bind" "%%list")}
      {Lisp-Entry "hidden-frame?" define #f 69 13 69 31 ("hidden-frames" "jazz:hidden-frames" "%%memq" "frame")}
      {Lisp-Entry "hidden-frame?-set!" define #f 72 13 72 36 ("hidden-frame?" "jazz:hidden-frame?" "set!" "predicate")}
      {Lisp-Entry "get-continuation-stack" define #f 76 13 76 40 ("queue-list" "jazz:queue-list" "%%continuation-next-frame" "1" "%%fx+" "enqueue" "jazz:enqueue" "begin" "and" "%%fx<" "%%not" "or" "if" "0" "d" "iter" "new-queue" "jazz:new-queue" "queue" "let" "depth" "cont")}
      {Lisp-Entry "collect-var-val" define #f 89 13 89 33 ("else" "##unbox" "##var-c-name" "##var-c-boxed?" "##var-i-name" "collect-var-val-aux" "jazz:collect-var-val-aux" "##var-i?" "cond" "queue" "cte" "val-or-box" "var")}
      {Lisp-Entry "collect-var-val-aux" define #f 110 13 110 37 ("else" "##cte-parent-cte" "##inverse-eval-in-env" "##cte-top?" "##procedure?" "unbound" "<unbound>" "unbound-object?" "jazz:unbound-object?" "absent" "<absent>" "absent-object?" "jazz:absent-object?" "cond" "##object->string" "%%list" "enqueue" "jazz:enqueue" "##cadr" "##cdr" "##null?" "##not" "quote" "##car" "eq?" "pair?" "and" "if" "remove-quote" "define" "queue" "cte" "mutable?" "val" "var")}
      {Lisp-Entry "get-continuation-dynamic-environment" define #f 135 13 135 54 ("queue-list" "jazz:queue-list" "##interaction-cte" "code-cte" "jazz:code-cte" "##interp-continuation-code" "$code" "%%interp-continuation?" "continuation-denv" "jazz:continuation-denv" "##dynamic-env->list" "and" "new-queue" "jazz:new-queue" "%%list" "collect-var-val-aux" "jazz:collect-var-val-aux" "##inverse-eval-in-env" "x" "##hidden-parameter?" "%%not" "%%cdr" "val" "param" "%%car" "param-val" "let*" "%%pair?" "if" "iter" "let" "queue" "cte" "lst" "collect-parameters" "define" "cont")}
      {Lisp-Entry "get-continuation-lexical-environment" define #f 161 13 161 54 ("queue-list" "jazz:queue-list" "##interaction-cte" "%%continuation-locals" "begin" "code-cte" "jazz:code-cte" "##interp-continuation-rte" "##interp-continuation-code" "$code" "%%interp-continuation?" "new-queue" "jazz:new-queue" "and" "collect-locals" "val" "var-val" "let*" "iter" "lst" "collect-vars" "else" "rte-up" "jazz:rte-up" "##cte-parent-cte" "collect-var-val" "jazz:collect-var-val" "##hidden-local-var?" "%%not" "%%car" "var" "%%pair?" "if" "%%vector->list" "%%cdr" "vals" "##cte-frame-vars" "vars" "loop2" "##cte-frame?" "##cte-top?" "cond" "r" "c" "loop1" "let" "queue" "rte" "cte" "collect-rte" "define" "cont")}
      {Lisp-Entry "get-continuation-location" define #f 208 13 208 43 ("%%continuation-locat" "locat->file/line/col" "jazz:locat->file/line/col" "cont")}
      {Lisp-Entry "interpreted-continuation?" define #f 212 13 212 43 ("%%interp-continuation?" "cont")}
      {Lisp-Entry "with-repl-context" define #f 216 13 216 35 ("repl-context-bind" "jazz:repl-context-bind" "0" "1" "repl-context-level" "jazz:repl-context-level" "%%fx+" "make-repl-context" "jazz:make-repl-context" "context" "%%thread-repl-context-get!" "prev-context" "let" "thunk" "cont")}
      {Lisp-Entry "repl" define #f 232 13 232 22 ("%%repl" "begin")}
      {Lisp-Entry "eval-within-no-winding" define #f 244 13 244 35 ("##cdr" "##car" "##map" "##cte-top-cte" "##cte-frame" "##continuation-locals" "locals" "else" "##interaction-cte" "##compile-top" "##with-no-result-expected-toplevel-continuation?" "##compile-inner" "##interp-continuation-rte" "code-cte" "jazz:code-cte" "cte" "##interp-continuation-code" "$code" "let*" "##interp-continuation?" "cond" "##make-source" "##sourcify" "src2" ",lst" ",rte" "##cons" "##list->vector" "lst" "macro-make-rte-from-list" "##define-macro" "code-run" "jazz:code-run" "let" "repl-context-bind" "jazz:repl-context-bind" "lambda" "%%continuation-graft-no-winding" "rte" "c" "run" "define" "receiver" "repl-context" "cont" "src" "runner")}
      {Lisp-Entry "eval-within-no-winding" define #f 278 13 278 40 ("%%car" "%%continuation-return-no-winding" "call-with-values" "results" "current-repl-context" "jazz:current-repl-context" "eval-within-no-winding" "return" "lambda" "continuation-capture" "cont" "expr" "runner")}
      {Lisp-Entry "repl-result-history-add" define #f 294 13 294 41 ("%%repl-channel-result-history-add" "%%current-thread" "%%thread-repl-channel-get!" "channel" "let" "result")}
      {Lisp-Entry "inspect-repl-context" define #f 304 13 304 38 ("repl-context-prev-depth" "jazz:repl-context-prev-depth" "repl-context-prev-level" "jazz:repl-context-prev-level" "repl-context-initial-cont" "jazz:repl-context-initial-cont" "repl-context-cont" "jazz:repl-context-cont" "repl-context-depth" "jazz:repl-context-depth" "repl-context-level" "jazz:repl-context-level" ":repl-context" "context")}}})
"step"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "step.scm"} 1288870741 scheme
    {Lisp-Entry "jazz.dialect.core.step" unit #f 37 16 37 38 ()
      {Lisp-Entry "install-step-handler" define #f 43 9 43 29 ("void" "vector" "0" "vector-set!" "##current-stepper" "cs" "let" "##cons" "##apply" "lambda" "process-step" "##step-off" "other" "execute-body" "rte" "$code" "leapable?" "handler" "define" "proc")}
      {Lisp-Entry "process-step" define #f 57 9 57 21 ("continue" "result" "let" "leap" "##step-on" "step" "case" "cmd" "lambda" "##code-locat" "execute" "$code" "proc")}}})
"structure"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "structure.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.structure" unit #f 37 16 37 43 ()
      {Lisp-Entry "kind?" define #f 40 9 40 19 ("##type?" "obj")}
      {Lisp-Entry "kind-id" define #f 43 9 43 21 ("##type-id" "type")}
      {Lisp-Entry "kind-name" define #f 46 9 46 23 ("##type-name" "type")}
      {Lisp-Entry "kind-flags" define #f 49 9 49 24 ("##type-flags" "type")}
      {Lisp-Entry "kind-super" define #f 52 9 52 24 ("##type-super" "type")}
      {Lisp-Entry "kind-length" define #f 55 9 55 25 ("##type-field-count" "type")}
      {Lisp-Entry "kind-fields" define #f 58 9 58 25 ("reverse!" "jazz:reverse!" "%%list" "%%cons" "%%fx+" "val" "options" "%%cdr" "rest" "%%car" "name" "let*" "%%pair?" "if" "alist" "##type-fields" "%%vector->list" "lst" "1" "i" "loop" "let" "type")}
      {Lisp-Entry "structure?" define #f 76 9 76 24 ("##structure?" "obj")}
      {Lisp-Entry "structure-kind" define #f 79 9 79 28 ("##structure-type" "obj")}
      {Lisp-Entry "structure-ref" define #f 82 9 82 27 ("##structure-ref" "type" "i" "obj")}
      {Lisp-Entry "structure-set!" define #f 85 9 85 28 ("##structure-set!" "type" "i" "val" "obj")}}})
"syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "performance" "syntax.scm"} 1299704435 scheme
    {Lisp-Entry "test.performance.syntax" unit #f 0 6 0 29 ("W" "Z")
      {Lisp-Entry "Z" define-class ("class") 3 19 3 20 ("allocate-z" "Object-Class" "jazz:Object-Class" "Object" "jazz:Object")}
      {Lisp-Entry "f-vtable" generic/specific ("Z~virtual") 7 22 7 30 ("n")}
      {Lisp-Entry "g-vtable" generic/specific ("Z~virtual") 8 22 8 30 ("n")}
      {Lisp-Entry "W" define-class ("class") 11 19 11 20 ("allocate-w" "Object-Class" "jazz:Object-Class" "Z")}
      {Lisp-Entry "h" generic/specific ("W~virtual") 15 22 15 23 ()}}})
"system"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "system.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.system" unit #f 37 16 37 40 ()
      {Lisp-Entry "open-process" define #f 42 12 42 29 ("open-process")}
      {Lisp-Entry "process-status" define #f 43 12 43 31 ("process-status")}
      {Lisp-Entry "exit" define #f 44 12 44 21 ("exit")}
      {Lisp-Entry "add-exit-job!" define #f 45 12 45 30 ("##add-exit-job!")}
      {Lisp-Entry "switch?" define #f 50 9 50 21 ("%%string-ref" "%%eqv?" "0" "%%string-length" "%%fx>" "and" "arg")}
      {Lisp-Entry "switch-name" define #f 55 9 55 25 ("1" "0" "%%substring" "%%equal?" "2" "%%fx>=" "and" "if" "start" "%%string-length" "len" "let" "arg")}
      {Lisp-Entry "kernel-runtime-options-with-no-args" define #f 63 8 63 48 ()}
      {Lisp-Entry "command-argument" define #f 67 9 67 30 ("%%cddr" "else" "%%cadr" "%%equal?" "error" "jazz:error" "switch?" "jazz:switch?" "%%not" "or" "kernel-runtime-options-with-no-args" "jazz:kernel-runtime-options-with-no-args" "switch-name" "jazz:switch-name" "%%member" "cond" "%%car" "arg" "%%null?" "arguments" "iter" "command-line" "%%cdr" "all" "let" "executable" "image" "jazz:image" "eq?" "if" "name")}
      {Lisp-Entry "command-argument?" define #f 86 9 86 31 ("switch-name" "jazz:switch-name" "%%equal?" "switch?" "jazz:switch?" "and" "%%car" "arg" "%%null?" "arguments" "iter" "command-line" "%%cdr" "all" "let" "executable" "image" "jazz:image" "eq?" "if" "name")}}})
"table"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "table.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.table" unit #f 37 16 37 39 ()
      {Lisp-Entry "table-clear" define #f 40 9 40 25 ("%%table-clear" "%%table?" "%%debug-assert" "key" "table")}
      {Lisp-Entry "table-keys" define #f 45 9 45 24 ("%%table-keys" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "table-length" define #f 50 9 50 26 ("%%table-length" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "map-table" define #f 55 9 55 23 ("queue-list" "jazz:queue-list" "enqueue" "jazz:enqueue" "value" "key" "lambda" "iterate-table" "jazz:iterate-table" "new-queue" "jazz:new-queue" "queue" "let" "%%table?" "%%debug-assert" "proc" "table")}
      {Lisp-Entry "list->table" define #f 64 9 64 25 ("test:" "%%list->table" "equal?" "test" "#!key" "alist")}
      {Lisp-Entry "table->list" define #f 68 9 68 25 ("%%table->list" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "table-entries" define #f 73 9 73 27 ("%%table-entries" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "eq?-hash" define #f 80 12 80 25 ("eq?-hash")}
      {Lisp-Entry "eqv?-hash" define #f 81 12 81 26 ("eqv?-hash")}
      {Lisp-Entry "equal?-hash" define #f 82 12 82 28 ("equal?-hash")}
      {Lisp-Entry "string=?-hash" define #f 83 12 83 30 ("string=?-hash")}
      {Lisp-Entry "string-ci=?-hash" define #f 84 12 84 33 ("string-ci=?-hash")}}})
"template"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "template.scm"} 1288870741 scheme
    {Lisp-Entry "jazz.dialect.syntax.template" module #f 37 18 37 46 ("scheme")}})
"templates"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "templates.scm"} 1288870741 scheme
    {Lisp-Entry "jazz.dialect.syntax.templates" module #f 37 18 37 47 ("scheme")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ()}
      {Lisp-Entry "instantiate-for-each" macro ("macro") 44 15 44 35 ("+" "element" "<=" "when" "0" "n" "iterate" "1" "cardinality" "-" "end" "let" ",T" "seq" "proc" "for-each" ",name" "as" "specialize" "T" "name")}
      {Lisp-Entry "instantiate-butlast" macro ("macro") 53 15 53 34 ("1" "cardinality" "-" "0" "subseq" ",T" "seq" "butlast" "specialize" "T")}
      {Lisp-Entry "instantiate-find" macro ("macro") 60 15 60 31 ("element" "obj" "n" "iterate" "1" "0" "fx" "<fx>" "-" "+" "next" ">=" "<=" "not" "if" "inside" "eqv?" "or" "cardinality" "len" "let" "int+" "<int+>" "reversed?" "reversed?:" "end" "end:" "start" "start:" "test" "test:" "key" "key:" "target" ",T" "seq" "find" ",name" "as" "specialize" "T" "name")}
      {Lisp-Entry "instantiate-find-in" macro ("macro") 79 15 79 34 ("element" "obj" "n" "iterate" "1" "0" "fx" "<fx>" "-" "+" "next" ">=" "<=" "not" "if" "inside" "eqv?" "or" "cardinality" "len" "let" "reversed?" "reversed?:" "end" "end:" "start" "start:" "test" "test:" "key" "key:" "target" ",T" "seq" "find-in" ",name" "as" "specialize" "T" "name")}
      {Lisp-Entry "instantiate-starts-with?" macro ("macro") 96 15 96 39 ("0" "subseq" "=" ">=" "and" "tlen" "cardinality" "slen" "let" "bool" "<bool>" "target" ",T" "seq" "starts-with?" "specialize" "T")}
      {Lisp-Entry "instantiate-ends-with?" macro ("macro") 104 15 104 37 ("-" "subseq" "=" ">=" "and" "tlen" "cardinality" "slen" "let" "bool" "<bool>" "target" ",T" "seq" "ends-with?" "specialize" "T")}}})
"thread"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "thread.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.thread" unit #f 37 16 37 40 ()
      {Lisp-Entry "current-thread" define #f 47 12 47 31 ("current-thread")}
      {Lisp-Entry "thread?" define #f 48 12 48 24 ("thread?")}
      {Lisp-Entry "make-thread" define #f 49 12 49 28 ("make-thread")}
      {Lisp-Entry "make-root-thread" define #f 50 12 50 33 ("make-root-thread")}
      {Lisp-Entry "thread-name" define #f 51 12 51 28 ("thread-name")}
      {Lisp-Entry "thread-specific" define #f 52 12 52 32 ("thread-specific")}
      {Lisp-Entry "thread-specific-set!" define #f 53 12 53 37 ("thread-specific-set!")}
      {Lisp-Entry "thread-base-priority" define #f 54 12 54 37 ("thread-base-priority")}
      {Lisp-Entry "thread-base-priority-set!" define #f 55 12 55 42 ("thread-base-priority-set!")}
      {Lisp-Entry "thread-priority-boost" define #f 56 12 56 38 ("thread-priority-boost")}
      {Lisp-Entry "thread-priority-boost-set!" define #f 57 12 57 43 ("thread-priority-boost-set!")}
      {Lisp-Entry "thread-start!" define #f 58 12 58 30 ("thread-start!")}
      {Lisp-Entry "thread-yield!" define #f 59 12 59 30 ("thread-yield!")}
      {Lisp-Entry "thread-sleep!" define #f 60 12 60 30 ("thread-sleep!")}
      {Lisp-Entry "thread-terminate!" define #f 61 12 61 34 ("thread-terminate!")}
      {Lisp-Entry "thread-join!" define #f 62 12 62 29 ("thread-join!")}
      {Lisp-Entry "thread-send" define #f 63 12 63 28 ("thread-send")}
      {Lisp-Entry "thread-receive" define #f 64 12 64 31 ("thread-receive")}
      {Lisp-Entry "thread-interrupt!" define #f 65 12 65 34 ("thread-interrupt!")}
      {Lisp-Entry "thread-thread-group" define #f 66 12 66 36 ("thread-thread-group")}
      {Lisp-Entry "thread-group->thread-group-list" define #f 67 12 67 48 ("thread-group->thread-group-list")}
      {Lisp-Entry "thread-group->thread-group-vector" define #f 68 12 68 50 ("thread-group->thread-group-vector")}
      {Lisp-Entry "thread-group->thread-list" define #f 69 12 69 42 ("thread-group->thread-list")}
      {Lisp-Entry "thread-group->thread-vector" define #f 70 12 70 44 ("thread-group->thread-vector")}
      {Lisp-Entry "thread-state" define #f 71 12 71 29 ("thread-state")}
      {Lisp-Entry "thread-state-abnormally-terminated-reason" define #f 72 12 72 58 ("thread-state-abnormally-terminated-reason")}
      {Lisp-Entry "thread-state-abnormally-terminated?" define #f 73 12 73 52 ("thread-state-abnormally-terminated?")}
      {Lisp-Entry "thread-state-active-timeout" define #f 74 12 74 44 ("thread-state-active-timeout")}
      {Lisp-Entry "thread-state-active-waiting-for" define #f 75 12 75 48 ("thread-state-active-waiting-for")}
      {Lisp-Entry "thread-state-active?" define #f 76 12 76 37 ("thread-state-active?")}
      {Lisp-Entry "thread-state-initialized?" define #f 77 12 77 42 ("thread-state-initialized?")}
      {Lisp-Entry "thread-state-normally-terminated-result" define #f 78 12 78 56 ("thread-state-normally-terminated-result")}
      {Lisp-Entry "thread-state-normally-terminated?" define #f 79 12 79 50 ("thread-state-normally-terminated?")}
      {Lisp-Entry "thread-state-uninitialized?" define #f 80 12 80 44 ("thread-state-uninitialized?")}
      {Lisp-Entry "mutex?" define #f 92 12 92 23 ("mutex?")}
      {Lisp-Entry "make-mutex" define #f 93 12 93 27 ("make-mutex")}
      {Lisp-Entry "mutex-name" define #f 94 12 94 27 ("mutex-name")}
      {Lisp-Entry "mutex-specific" define #f 95 12 95 31 ("mutex-specific")}
      {Lisp-Entry "mutex-specific-set!" define #f 96 12 96 36 ("mutex-specific-set!")}
      {Lisp-Entry "mutex-state" define #f 97 12 97 28 ("mutex-state")}
      {Lisp-Entry "mutex-lock!" define #f 98 12 98 28 ("mutex-lock!")}
      {Lisp-Entry "mutex-unlock!" define #f 99 12 99 30 ("mutex-unlock!")}
      {Lisp-Entry "mutex-owner" define #f 101 13 101 29 ("btq-owner" "jazz:btq-owner" "mutex")}
      {Lisp-Entry "mutex-wait" define #f 104 13 104 28 ("mutex-unlock!" "mutex-lock!" "mutex")}
      {Lisp-Entry "condition?" define #f 118 12 118 27 ("condition-variable?")}
      {Lisp-Entry "make-condition" define #f 119 12 119 31 ("make-condition-variable")}
      {Lisp-Entry "condition-name" define #f 120 12 120 31 ("condition-variable-name")}
      {Lisp-Entry "condition-specific" define #f 121 12 121 35 ("condition-variable-specific")}
      {Lisp-Entry "condition-specific-set!" define #f 122 12 122 40 ("condition-variable-specific-set!")}
      {Lisp-Entry "condition-signal!" define #f 123 12 123 34 ("condition-variable-signal!")}
      {Lisp-Entry "condition-broadcast!" define #f 124 12 124 37 ("condition-variable-broadcast!")}}})
"time"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "time.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.time" unit #f 37 16 37 38 ()
      {Lisp-Entry "current-systime" define #f 40 8 40 28 ("current-time")}
      {Lisp-Entry "systime?" define #f 41 8 41 21 ("time?")}
      {Lisp-Entry "systime->seconds" define #f 42 8 42 29 ("time->seconds")}
      {Lisp-Entry "seconds->systime" define #f 43 8 43 29 ("seconds->time")}
      {Lisp-Entry "process-times" define #f 44 8 44 26 ("process-times")}
      {Lisp-Entry "cpu-time" define #f 45 8 45 21 ("cpu-time")}
      {Lisp-Entry "real-time" define #f 46 8 46 22 ("real-time")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "test" "performance" "time.scm"} 1288870741 scheme
    {Lisp-Entry "test.performance.time" unit #f 0 6 0 27 ("new-z" "f-vtable" "f-generic" "f-separate" "iterations" "new-x" "f-module" "time")
      {Lisp-Entry "iterations" define #f 3 8 3 18 ("100000000")}}})
"typecase"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "typecase.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.syntax.typecase" module #f 38 18 38 46 ("scheme")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.dialect.kernel")}
      {Lisp-Entry "error" native ("native") 44 16 44 26 ()}
      {Lisp-Entry "typecase" macro #f 54 16 54 24 ("desourcify" ",value" ",variable" "is?" "value" "or" "pair?" ",@body" "else" "eq?" "body" "car" "selector" "clause" "map" "cond" "variable" "lambda" "with-uniqueness" "sourcify-if" "cddr" "clauses" "cadr" "target" "let" "error" "source-code" "cdr" "null?" "if" "form-src")}}})
"variables"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "performance" "variables.scm"} 1288870741 scheme
    {Lisp-Entry "SEPARATE" define #f 4 8 4 16 ("2")}
    {Lisp-Entry "inc-separate" define #f 7 9 7 21 ("-" "1" "+" "SEPARATE" "set!" "begin" "0" ">" "if" "n" "iter" "let" "cnt")}
    {Lisp-Entry "BLOCK" define #f 19 8 19 13 ("3")}
    {Lisp-Entry "inc-block" define #f 22 9 22 18 ("-" "1" "+" "BLOCK" "set!" "begin" "0" ">" "if" "n" "iter" "let" "cnt")}})
"vb"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "performance" "vb.scm"} 1288870741 scheme
    {Lisp-Entry "VAR" define #f 5 8 5 11 ("2")}
    {Lisp-Entry "inc" define #f 8 9 8 12 ("##fixnum.-" "1" "##fixnum.+" "VAR" "set!" "begin" "0" "##fixnum.>" "if" "n" "iter" "let" "cnt")}})
"vector"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "core" "vector.scm"} 1299704435 scheme
    {Lisp-Entry "jazz.dialect.core.vector" unit #f 37 16 37 40 ()
      {Lisp-Entry "vector-copy" define #f 45 8 45 24 ("vector-copy")}}})
"vs"
 ({Lisp-File-Entry {File :context "src" "jazz" "test" "performance" "vs.scm"} 1288870741 scheme
    {Lisp-Entry "VAR" define #f 4 8 4 11 ("2")}
    {Lisp-Entry "inc" define #f 7 9 7 12 ("##fixnum.-" "1" "##fixnum.+" "VAR" "set!" "begin" "0" "##fixnum.>" "if" "n" "iter" "let" "cnt")}})
"walk"
 ({Lisp-File-Entry {File :context "src" "jazz" "script" "walk.jazz"} 1288870741 jazz
    {Lisp-Entry "jazz.script.walk" module #f 37 8 37 24 ("walk-run" "descriptor" "lambda" "walk" "register-product-run" "jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.runtime" "jazz.io")}
      {Lisp-Entry "walk-run" definition #f 49 20 49 28 ("walk-problems" "else" "walk-unresolved" "command-argument?" "cond")}
      {Lisp-Entry "walk-problems" define #f 61 9 61 22 ("format-plural" "format-cardinality" ":console" "walking" "terminal" "feedback:" "iterate-units" "walk-unit" "increase!" "display-exception" "format" "exc" "Walk-Problems" "catch" "unit-name" "walk-with-catch" "define" "0" "count" "let" "port" "lambda" "get-eol-encoding" "eol-encoding:" "path:" "list" "call-with-output-file")}
      {Lisp-Entry "walk-unresolved" define #f 87 9 87 24 ("table-values" "apply" "remove-duplicates" "table-keys" "pp" "port" "get-eol-encoding" "eol-encoding:" "path:" "list" "call-with-output-file" "walking" "terminal" "feedback:" "iterate-units" "walk-unit" "get-symbol" "get-symbol~" "table-add" "Unresolved-Error" "is?" "when" "problem" "lambda" "for-each" "get-errors" "get-errors~" "get-warnings" "get-warnings~" "append" "problems" "exc" "Walk-Problems" "catch" "unit-name" "walk" "define" "eq?" "test:" "make-table" "unresolved" "let")}}})
"with"
 ({Lisp-File-Entry {File :context "src" "jazz" "dialect" "syntax" "with.scm"} 1288870741 scheme
    {Lisp-Entry "jazz.dialect.syntax.with" module #f 37 18 37 42 ("scheme")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.dialect.kernel")}
      {Lisp-Entry "with" macro #f 45 16 45 20 ("close~" ",@body" "dynamic-wind" "caddr" ",variable" "set!" "if" "variable" ",specifier" "car" "Object" "<Object>" "binding-specifier" "or" "specifier" "binding" "lambda" "map" "sourcify-if" "cddr" "body" "cadr" "source-code" "bindings" "let" "form-src")}}})
