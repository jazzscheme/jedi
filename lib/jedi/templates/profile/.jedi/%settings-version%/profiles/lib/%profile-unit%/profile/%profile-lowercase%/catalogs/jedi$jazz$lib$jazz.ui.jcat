"Action"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "action" "Action.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.action.Action" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Action" class () ((extends . "Object")) #f #f 40 7 40 13 ("Object")
        {Lisp-Entry "action-context" slot () ((getter . "generate")) #f #f 43 8 43 22 ()}
        {Lisp-Entry "get-action-context" accessor () () #f #f 43 30 43 38 ()}
        {Lisp-Entry "action-name" slot () ((getter . "generate")) #f #f 44 8 44 19 ()}
        {Lisp-Entry "get-action-name" accessor () () #f #f 44 30 44 38 ()}
        {Lisp-Entry "properties" slot () ((getter . "generate")) #f #f 45 8 45 18 ()}
        {Lisp-Entry "get-properties" accessor () () #f #f 45 30 45 38 ()}
        {Lisp-Entry "initialize" method (override) ("action-context" "action-name" "properties") #f #f 48 20 48 30 ("properties~self" "action-name~self" "self" "action-context~self" "set!" "nextmethod" "properties" "action-name" "action-context")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 55 20 55 25 ("properties" "not-null?" "action-name" "action-context" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Action-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Action-Event.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.event.Action-Event" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Action-Event" class () ((extends . "Event")) #f #f 43 7 43 19 ("Event")}}})
"Action-Icon"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Action-Icon.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Action-Icon" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Action-Icon" class (undocumented) ((extends . "Push-Tool")) #f #f 44 20 44 31 ("Push-Tool")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 (":images" "portfolio:" "tooltip?:" "22" "Dimension" "size:" "install" "<install>")}}}})
"Action-Item"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "action" "Action-Item.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.ui.action.Action-Item" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Action-Item" class () ((extends . "Component")) #f #f 45 7 45 18 ("explicit" "Component")
        {Lisp-Entry "action-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 26 ()}
        {Lisp-Entry "get-action-handler" accessor () () #f #f 48 55 48 63 ()}
        {Lisp-Entry "set-action-handler" accessor () () #f #f 48 55 48 63 ()}
        {Lisp-Entry "shortcut" property () ((initialize . "#f") (accessors . "explicit")) #f #f 49 12 49 20 ()}
        {Lisp-Entry "alternate-shortcut" property () ((initialize . "#f") (accessors . "explicit")) #f #f 50 12 50 30 ()}
        {Lisp-Entry "enabled?" property () ((initialize . "#t") (accessors . "explicit")) #f #f 51 12 51 20 ()}
        {Lisp-Entry "actionables" slot () ((initialize . "'()") (getter . "generate")) #f #f 54 8 54 19 ()}
        {Lisp-Entry "get-actionables" accessor () () #f #f 54 42 54 50 ()}
        {Lisp-Entry "get-shortcut" method (public) () #f #f 62 18 62 30 ("shortcut")}
        {Lisp-Entry "set-shortcut" method (public) ("value") #f #f 66 18 66 30 ("process-shortcut-update" "shortcut" "set!" "value")}
        {Lisp-Entry "get-alternate-shortcut" method (public) () #f #f 71 18 71 40 ("alternate-shortcut")}
        {Lisp-Entry "set-alternate-shortcut" method (public) ("value") #f #f 75 18 75 40 ("process-shortcut-update" "alternate-shortcut" "set!" "value")}
        {Lisp-Entry "get-enabled?" method (public) () #f #f 80 18 80 30 ("enabled?")}
        {Lisp-Entry "set-enabled?" method (public) ("value") #f #f 84 18 84 30 ("process-enabled-update" "set!" "boolean" "enabled?" "neq?" "when" "value")}
        {Lisp-Entry "register-actionable" method (public) ("actionable") #f #f 95 18 95 37 ("enabled-update" "enabled-update~" "self" "shortcut-update" "shortcut-update~" "cons" "actionables" "set!" "actionable")}
        {Lisp-Entry "unregister-actionable" method (public) ("actionable") #f #f 101 18 101 39 ("remove!" "actionables" "set!" "actionable")}
        {Lisp-Entry "process-shortcut-update" method () () #f #f 105 11 105 34 ("actionables" "self" "shortcut-update" "shortcut-update~" "actionable" "lambda" "for-each")}
        {Lisp-Entry "process-enabled-update" method () () #f #f 111 11 111 33 ("actionables" "self" "enabled-update" "enabled-update~" "actionable" "lambda" "for-each")}
        {Lisp-Entry "invoke" method (public) ("sender" "properties" "(action: action #f)" "(event: event #f)") #f #f 124 18 124 24 ("invoke" "invoke~" ":action" "Action-Event" "new" "apply" "action-handler" "get-properties" "get-properties~" "or" "let*" "enabled?" "when" "event" "event:" "action" "action:" "properties" "sender")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 136 25 136 45 ("Action-Item-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 145 11 145 17 ()
        {Lisp-Entry "import" import () () #f #f 148 1 148 7 ("jazz.designer")}
        {Lisp-Entry "Action-Item-Descriptor" class () ((extends . "Component-Descriptor")) #f #f 151 7 151 29 ("Component-Descriptor")
          {Lisp-Entry "form" form () () #f #f 154 3 154 7 ("enabled?" "alternate-shortcut" "handler" "category:" "action-handler" "name:" "Property-Descriptor" "<Property-Descriptor>" "shortcut" "categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "Image-Resource" "image:" "install" "<install>")}}}}})
"Actionable"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "action" "Actionable.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.action.Actionable" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Actionable" interface () () #f #f 40 11 40 21 ()
        {Lisp-Entry "shortcut-update" method (public virtual abstract) ("action-item") #f #f 43 35 43 50 ("action-item")}
        {Lisp-Entry "enabled-update" method (public virtual abstract) ("action-item") #f #f 44 35 44 49 ("action-item")}}}})
"Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "action" "Actions.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.action.Actions" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Actions" class () ((extends . "Component")) #f #f 45 7 45 14 ("Component")
        {Lisp-Entry "actions-orphaned?" method (public virtual) () #f #f 53 26 53 43 ()}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 62 25 62 45 ("Actions-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 71 11 71 17 ()
        {Lisp-Entry "import" import () () #f #f 74 1 74 7 ("jazz.designer")}
        {Lisp-Entry "Actions-Descriptor" class () ((extends . "Component-Descriptor")) #f #f 77 7 77 25 ("Component-Descriptor")
          {Lisp-Entry "form" form () () #f #f 80 3 80 7 ("categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 85 20 85 61 ("Action-Item" "reference" "component")}
          {Lisp-Entry "component-get-addable-details" method (override) ("component") #f #f 89 20 89 49 ("shortcut" "200" "name-info" "component")}}}}})
"Activities-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "activity" "Activities-Manager.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.activity.Activities-Manager" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Activities-Manager" class (undocumented) ((extends . "Layout-View")) #f #f 45 20 45 38 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("100" "337" "Tree-Label-Column" "<Tree-Label-Column>" "375" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" "row" "selection-mode:" "multiple-selection?:" "on-return-press" "return-press-handler:" "on-context-menu" "context-menu-handler:" "on-double-click" ":form" "double-click-handler:" "results" "Tree-View" "<Tree-View>" "header" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "tool" "style:" "hscroll?:" "vscroll?:" "center" "scroller" "Scroller-View" "<Scroller-View>" "on-launch" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "launch" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "400" "650" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 62 25 62 38 ("activities-manager" "rest")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 71 25 71 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 75 25 75 35 ()}
        {Lisp-Entry "get-tools-view" method (override) () #f #f 84 20 84 34 ("tools" "locate")}}}})
"Activity"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "activity" "Activity.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.activity.Activity" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Activity" class (undocumented) ((extends . "Object")) #f #f 40 20 40 28 ("Object")}
      {Lisp-Entry "Activity" class (undocumented) ((extends . "Thread")) #f #f 46 20 46 28 ("Thread")
        {Lisp-Entry "reporter" slot () ((initialize . "#f")) #f #f 49 8 49 16 ()}
        {Lisp-Entry "unregister?" slot () ((initialize . "#f")) #f #f 50 8 50 19 ()}
        {Lisp-Entry "initialize" method () ("." "rest") #f #f 58 11 58 21 ("destroy-mandatory" "self" "unregister?~self" "set!" "nextmethod" "apply" "others" "unregister?" "bind-keywords" "rest")}
        {Lisp-Entry "destroy" method () () #f #f 70 11 70 18 ("nextmethod" "unregister-reporter")}
        {Lisp-Entry "unregister-reporter" method () () #f #f 75 11 75 30 ("set!" "get-manager" "unregister-activity" "unregister-activity~" "reporter" "unregister?" "and" "when")}
        {Lisp-Entry "get-manager" method (public) ("(visible?: visible? #f)") #f #f 86 18 86 29 ("get-activity-manager" "visible?" "visible?:")}
        {Lisp-Entry "get-reporter" method (public) () #f #f 95 18 95 30 ("get-manager" "register-activity" "register-activity~" "set!" "reporter" "unless")}
        {Lisp-Entry "cancel-requested?" method (public) () #f #f 101 18 101 35 ("get-reporter" "cancel-requested?" "cancel-requested?~")}
        {Lisp-Entry "set-range" method (public) ("range") #f #f 105 18 105 27 ("get-reporter" "set-range" "set-range~" "range")}
        {Lisp-Entry "user-message" method (public) ("fmt" "." "rest") #f #f 109 18 109 30 ("get-reporter" "get-user-message" "get-user-message~" "apply" "rest" "fmt")}
        {Lisp-Entry "update-view" method (public) () #f #f 113 18 113 29 ("get-reporter" "get-root" "get-root~" "update-view" "update-view~")}
        {Lisp-Entry "set-pos" method (public) ("pos") #f #f 117 18 117 25 ("get-reporter" "set-pos" "set-pos~" "pos")}
        {Lisp-Entry "delta-pos" method (public) ("increment") #f #f 121 18 121 27 ("get-reporter" "delta-pos" "delta-pos~" "increment")}
        {Lisp-Entry "set-step" method (public) ("increment") #f #f 125 18 125 26 ("get-reporter" "set-step" "set-step~" "increment")}
        {Lisp-Entry "step-it" method (public) () #f #f 129 18 129 25 ("get-reporter" "step-it" "step-it~")}
        {Lisp-Entry "set-done" method (public) () #f #f 133 18 133 26 ("get-reporter" "set-done" "set-done~")}}}})
"Activity-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "activity" "Activity-Manager.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.activity.Activity-Manager" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.activity" "jazz.ui" "jazz.system" "jazz.jml")}
      {Lisp-Entry "Activity-Manager" class (undocumented) ((extends . "Palette")) #f #f 46 20 46 36 ("Palette")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("border" "Activities-Border" "<Activities-Border>" "fill" "layout-type:" "root" "name:" "!" "<!>" "57" "247" "Dimension" "size:" "917" "787" "Point" "position:" "title:" "install" "<install>")}
        {Lisp-Entry "window-style" method () ("rest") #f #f 56 11 56 23 ("WS_CLIPCHILDREN" "WS_POPUP" "bitwise-ior" "rest")}
        {Lisp-Entry "show" method (override) () #f #f 60 20 60 24 ("show-noactivate" "get-application" "get-active?" "get-active?~" "when" "set-visible-flag")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 66 20 66 35 ()}
        {Lisp-Entry "on-close" method (override) ("evt") #f #f 75 20 75 28 ("hide" "evt")}
        {Lisp-Entry "destroy" method (override) () #f #f 79 20 79 27 ("nextmethod" "destroy-manager")}
        {Lisp-Entry "close-manager" method (public) () #f #f 89 18 89 31 ("close" "get-reporters" "not-null?" "unless")}
        {Lisp-Entry "toggle-visible?" method (public) () #f #f 99 18 99 33 ("set-visible?" "delay:" "up" "direction:" "Wipe-Effect" "new" "root" "set-effect" "set-effect~" "length" "1" "null?" "if" "0.005" "/" "delay" "get-reporters" "reporters" "let*" "when" "get-visible?" "not" "visible?" "let")}
        {Lisp-Entry "register-activity" method (public) () #f #f 114 18 114 35 ("update-rectangle" "update-title" "14" "get-width" "get-width~" "-" "Dimension" "set-size" "set-size~" "get-size~" "get-height" "get-height~" "height" "rank:" "parent:" "Activity-Reporter" "new" "reporter" "locate" "border" "1" "max-reporter-rank" "+" "0" "null?" "if" "rank" "get-reporters" "reporters" "get-size" "size" "let*")}
        {Lisp-Entry "unregister-activity" method (public) ("reporter") #f #f 127 18 127 37 ("update-rectangle" "update-title" "close" "close~" "reporter")}
        {Lisp-Entry "update-title" method (protected) () #f #f 138 21 138 33 ("activities" "child" "child~" "set-title~" "when" "get-application" "find-status-bar" "find-status-bar~" "status" "let" "set-title" "1" "format-cardinality" "capitalize" "format" "0" "=" "if" "text" "get-reporters" "get-done" "get-done~" "not" "reporter" "lambda" "count-if" "n" "let*")}
        {Lisp-Entry "update-rectangle" method (protected) () #f #f 152 21 152 37 ("get-v" "get-v~" "-" "get-h" "get-h~" "Point" "new" "2" "8" "*" "10" "height" "car" "get-size" "get-size~" "get-height" "get-height~" "v" "max-reporter-rank" "1" "+" "n" "let*" "57" "247" "Dimension" "set-size" "set-position" "hide" "begin" "null?" "if" "manager-position" "base" "reporters" "get-width" "width" "reporter-rank" "key:" "get-reporters" "<" "sort" "increase!" "set-rank" "set-rank~" "reporter" "lambda" "for-each" "0" "rank" "let" "compact-reporters" "define")}
        {Lisp-Entry "clear-done" method (public) () #f #f 176 18 176 28 ("update-rectangle" "get-reporters" "close" "close~" "get-done" "get-done~" "when" "reporter" "lambda" "for-each")}
        {Lisp-Entry "get-reporters" method (protected) () #f #f 189 21 189 34 ("border" "locate" "get-children" "get-children~")}
        {Lisp-Entry "max-reporter-rank" definition () ("reporters") #f #f 193 15 193 32 ("reporter-rank" "map" "max" "apply" "reporters")}
        {Lisp-Entry "reporter-rank" definition () ("reporter") #f #f 197 15 197 28 ("get-rank" "get-rank~" "reporter")}}
      {Lisp-Entry "Activities-Border" class () ((extends . "View")) #f #f 206 7 206 24 ("View")
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 209 20 209 24 ("bottom" "sunken" "right" "top" "left" "edges:" "outer:" "raised" "inner:" "draw-edge" "draw-edge~" "get-bounds" "bounds" "let" "context" "surface")}}}})
"Activity-Reporter"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "activity" "Activity-Reporter.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.activity.Activity-Reporter" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Activity-Reporter" class (undocumented) ((extends . "View")) #f #f 45 20 45 37 ("explicit" "View")
        {Lisp-Entry "rank" property () ((initialize . "#f") (accessors . "explicit")) #f #f 48 12 48 16 ()}
        {Lisp-Entry "cancelled?" slot () ((initialize . "#f")) #f #f 51 8 51 18 ()}
        {Lisp-Entry "done?" slot () ((initialize . "#f")) #f #f 52 8 52 13 ()}
        {Lisp-Entry "form" form () () #f #f 55 3 55 7 ("on-cancel" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "15" "157" "cancel" "Push-Tool" "<Push-Tool>" "20" "progress" "Progress-Bar" "<Progress-Bar>" "16" "150" "0" "Point" "position:" "message" "name:" "Label-View" "<Label-View>" "37" "180" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 62 20 62 27 ("0" "set-pos" "set-pos~" "locate" "progress" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-rank" method (public) () #f #f 73 18 73 26 ("rank")}
        {Lisp-Entry "set-rank" method (public) ("r") #f #f 77 18 77 26 ("8" "get-height" "get-height~" "*" "+" "10" "Point" "new" "set-position" "get-size" "size" "let" "set!" "/=" "rank" "not" "or" "when" "r")}
        {Lisp-Entry "cancel-requested?" method (public) () #f #f 84 18 84 35 ("cancelled?")}
        {Lisp-Entry "get-done" method (public) () #f #f 88 18 88 26 ("done?")}
        {Lisp-Entry "resize" method (override) ("dh" "dv") #f #f 97 20 97 26 ("cancel" "move-figure" "move-figure~" "progress" "0" "message" "locate" "size-figure" "size-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-cancel" method () ("evt") #f #f 104 11 104 20 ("set-message" "cancelled?" "set!" "update-rectangle" "update-rectangle~" "close" "get-frame" "frame" "let" "done?" "if" "evt")}
        {Lisp-Entry "set-message" method (public) ("msg") #f #f 118 18 118 29 ("message" "locate" "set-title" "set-title~" "msg")}
        {Lisp-Entry "user-message" method (public) ("fmt" "." "rest") #f #f 122 18 122 30 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "set-done" method (public) () #f #f 126 18 126 26 ("get-frame" "update-title" "update-title~" "Image-Resource" "cancel" "locate" "set-resource" "set-resource~" "done?" "set!")}
        {Lisp-Entry "set-infinite?" method (public) ("flag") #f #f 132 18 132 31 ("progress" "locate" "set-infinite?" "set-infinite?~" "flag")}
        {Lisp-Entry "set-range" method (public) ("range") #f #f 136 18 136 27 ("progress" "locate" "set-range" "set-range~" "range")}
        {Lisp-Entry "set-pos" method (public) ("pos") #f #f 140 18 140 25 ("progress" "locate" "set-pos" "set-pos~" "pos")}
        {Lisp-Entry "delta-pos" method (public) ("increment") #f #f 144 18 144 27 ("progress" "locate" "delta-pos" "delta-pos~" "increment")}
        {Lisp-Entry "set-step" method (public) ("increment") #f #f 148 18 148 26 ("progress" "locate" "set-step" "set-step~" "increment")}
        {Lisp-Entry "step-it" method (public) () #f #f 152 18 152 25 ("progress" "locate" "step-it" "step-it~")}}}})
"Anchor-Style"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Anchor-Style.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Anchor-Style" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Anchor-Style" class () ((extends . "Text-Style")) #f #f 43 7 43 19 ("Text-Style")}
      {Lisp-Entry "Anchor-Style" class () ((extends . "Text-Style")) #f #f 49 7 49 19 ("attributes" "Text-Style")
        {Lisp-Entry "label" definition () ((initialize . "#f")) #f #f 53 5 53 10 ()}
        {Lisp-Entry "get-label" accessor () () #f #f 53 5 53 10 ()}
        {Lisp-Entry "set-label" accessor () () #f #f 53 5 53 10 ()}}}})
"Bindings"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "action" "Bindings.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.action.Bindings" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Bindings" class () ((extends . "Component")) #f #f 43 7 43 15 ("Component")}}})
"Bindings-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Bindings-Manager.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.preference.Bindings-Manager" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Bindings-Manager" class (undocumented) ((extends . "Layout-View") (implements . "Filterable")) #f #f 48 20 48 36 ("Filterable" "Layout-View")
        {Lisp-Entry "categorized?" slot () ((initialize . "#f")) #f #f 51 8 51 20 ()}
        {Lisp-Entry "shortcuts?" slot () ((initialize . "#f")) #f #f 52 8 52 18 ()}
        {Lisp-Entry "form" form () () #f #f 55 3 55 7 ("shortcuts" "BindingsByShortcuts-Tree" "<BindingsByShortcuts-Tree>" "visible?:" "shortcuts-border" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "actions" "BindingsByActions-Tree" "<BindingsByActions-Tree>" "Tree-Header" "<Tree-Header>" "content!" "<content!>" "document" "center" "actions-border" "120" "default?:" "on-bind-shortcut" "100" "tail" "bind-shortcut" "Push-Button" "<Push-Button>" "on-edit-action" "edit-action" "on-restore-shortcut" "restore-shortcut" "on-unbind-shortcut" "unbind-shortcut" "Push-Tool" "<Push-Tool>" "on-filter-text-change" "content-change-handler:" "filter-text" "Filter-Text-View" "<Filter-Text-View>" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "fill" "border-type:" "21" "170" "Label" "Font" "font:" "20" "31" "title:" "-2" "head" "justification:" "filter-label" "Label-View" "<Label-View>" "traits" "Traits-Combo" "<Traits-Combo>" "Entry-Border" "Medium" "Color" "border-color:" "1" "2" "border-insets:" "140" "Border-View" "<Border-View>" "16" "on-categorize" "4" "Separator" "<Separator>" "on-shortcuts" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "Toggle-Tool" "<Toggle-Tool>" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "639" "420" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "conclude" method (override) ("initargs") #f #f 102 20 102 28 ("update-buttons" "update-traits" "view-bindings" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 114 25 114 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 118 25 118 35 ()}
        {Lisp-Entry "host-position" method (meta override) () #f #f 122 25 122 38 ("14" "28" "Point")}
        {Lisp-Entry "host-size" method (meta override) () #f #f 126 25 126 34 ("635" "595" "Dimension")}
        {Lisp-Entry "host-workspaces" method (override) () #f #f 130 20 130 35 ("home")}
        {Lisp-Entry "focus-default" method (override) () #f #f 134 20 134 33 ("filter-text" "locate" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "filter" method (override) ("filter-search") #f #f 143 20 143 26 ("actions" "locate" "filter-rows" "filter-rows~" "filter-search")}
        {Lisp-Entry "get-tree" method () () #f #f 152 11 152 19 ("actions" "shortcuts" "locate" "shortcuts?" "if")}
        {Lisp-Entry "get-filter-text" method () () #f #f 158 11 158 26 ("filter-text" "locate")}
        {Lisp-Entry "on-shortcuts" method () ("evt") #f #f 167 11 167 23 ("filter-target" "filter-target~" "view-bindings" "layout-view" "categorized?" "get-node-column" "get-node-column~" "set-toplevel-controls?" "set-toplevel-controls?~" "shortcuts-border" "actions-border" "locate" "set-visible?" "set-visible?~" "get-tree" "get-name" "get-name~" "get-filter-text" "set-target-name" "set-target-name~" "not" "shortcuts?" "set!" "evt")}
        {Lisp-Entry "on-categorize" method () ("evt") #f #f 178 11 178 24 ("get-filter-text" "filter-target" "filter-target~" "view-bindings" "get-tree" "get-node-column" "get-node-column~" "set-toplevel-controls?" "set-toplevel-controls?~" "not" "categorized?" "set!" "evt")}
        {Lisp-Entry "on-show-all" method () ("evt") #f #f 185 11 185 22 ("evt")}
        {Lisp-Entry "on-double-click" method () ("evt") #f #f 189 11 189 26 ("bind-shortcut" "edit-action" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 195 20 195 35 ("bind-shortcut" "edit-action" "evt")}
        {Lisp-Entry "on-unbind-shortcut" method () ("evt") #f #f 201 11 201 29 ("unbind-shortcut" "evt")}
        {Lisp-Entry "on-restore-shortcut" method () ("evt") #f #f 205 11 205 30 ("restore-shortcut" "evt")}
        {Lisp-Entry "on-bind-shortcut" method () ("evt") #f #f 209 11 209 27 ("bind-shortcut" "evt")}
        {Lisp-Entry "on-edit-action" method () ("evt") #f #f 213 11 213 25 ("edit-action" "evt")}
        {Lisp-Entry "on-selection-change" method () ("evt") #f #f 217 11 217 30 ("update-buttons" "evt")}
        {Lisp-Entry "trait-change" method () ("trait") #f #f 221 11 221 23 ("update-buttons" "get-filter-text" "filter-target" "filter-target~" "view-bindings" "get-name" "get-name~" "active-bindings" "get-preferences" "set-preferences-property" "set-preferences-property~" "set-active-trait" "set-active-trait~" "lambda" ":wait" "with-cursor" "get-active-trait" "get-active-trait~" "neq?" "when" "get-bindings" "bindings" "get-application" "appl" "let" "trait")}
        {Lisp-Entry "on-filter-text-change" method () ("evt") #f #f 234 11 234 32 ("get-filter-text" "filter-target" "filter-target~" "evt")}
        {Lisp-Entry "unbind-shortcut" method () () #f #f 243 11 243 26 ("update-action-item" "update-shortcut" "update-shortcut~" "shortcut" "set-property" "set-property~" "get-shortcut" "get-shortcut~" "old" "get-bindings-designer" "get-bindings-designer~" "designer" "selected-action-item/rank" "rank" "action-item" "receive" "get-tree" "tree" "get-application" "appl" "let")}
        {Lisp-Entry "restore-shortcut" method () () #f #f 254 11 254 27 ("update-action-item" "update-shortcut" "update-shortcut~" "shortcut" "remove-property" "remove-property~" "get-shortcut" "get-shortcut~" "old" "get-bindings-designer" "get-bindings-designer~" "designer" "selected-action-item/rank" "rank" "action-item" "receive" "get-tree" "tree" "get-application" "appl" "let")}
        {Lisp-Entry "bind-shortcut" method () () #f #f 265 11 265 24 ("update-action-item" "update-shortcut" "update-shortcut~" "Shortcut-Chooser" "get-modal" "shortcut" "set-property" "set-property~" "get-shortcut" "get-shortcut~" "old" "get-bindings-designer" "get-bindings-designer~" "designer" "selected-action-item/rank" "rank" "action-item" "receive" "get-tree" "tree" "get-application" "appl" "let")}
        {Lisp-Entry "update-action-item" definition () ("tree" "designer" "action-item" "rank") #f #f 276 15 276 33 ("invalidate-cell" "invalidate-cell~" "shortcut" "owner-image" "owner-image~" "image:" "Tree-Image" "get-shortcut" "get-shortcut~" "present-shortcut" "present-shortcut~" "title:" "Tree-Label" "set-cell-data" "set-cell-data~" "2" "owner-cell" "1" "Cell" "new" "shortcut-cell" "let" "rank" "action-item" "designer" "tree")}
        {Lisp-Entry "edit-action" method () () #f #f 290 11 290 22 ("get-method-name" "get-method-name~" "get-application" "edit-definitions" "edit-definitions~" "bell" "not" "if" "selected-action-item" "get-action-handler" "get-action-handler~" "action-handler" "let")}
        {Lisp-Entry "selected-action-item/rank" method () () #f #f 302 11 302 36 ("values" "get-row" "get-row~" "get-user-data" "get-user-data~" "data" "let" "when" "get-single-selection" "get-single-selection~" "rank" "get-tree" "tree" "let*")}
        {Lisp-Entry "selected-action-item" method () () #f #f 310 11 310 31 ("rank" "action-item" "receive" "not" "if" "selected-action-item/rank" "info" "let")}
        {Lisp-Entry "view-bindings" method () () #f #f 323 11 323 24 ("view-bindings" "view-bindings~" "get-tree" "tree" "flat" "categorized" "categorized?" "kind" "actions" "shortcuts" "shortcuts?" "if" "what" "get-bindings" "bindings" "get-bindings-designer" "get-bindings-designer~" "designer" "get-application" "appl" "let")}
        {Lisp-Entry "update-traits" method () () #f #f 333 11 333 24 ("get-branch" "get-branch~" "get-trait" "get-trait~" "set-value" "set-value~" "child-traits" "child-traits~" "get-name" "get-name~" "->string" "list" "trait" "lambda" "map" "set-choices" "set-choices~" "traits" "locate" "combo" "get-bindings" "bindings" "let")}
        {Lisp-Entry "update-buttons" method () () #f #f 342 11 342 25 ("bind-shortcut" "edit-action" "restore-shortcut" "unbind-shortcut" "locate" "set-enabled?" "set-enabled?~" "selected-action-item" "action-item" "let")}}
      {Lisp-Entry "Traits-Combo" class () ((extends . "Combo-Box")) #f #f 358 7 358 19 ("Combo-Box")
        {Lisp-Entry "content-change" method (override) ("origin") #f #f 361 20 361 34 ("get-value" "get-host" "get-guest" "get-guest~" "trait-change" "trait-change~" "origin")}}}})
"Bindings-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "action" "Bindings-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.action.Bindings-Preferences" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.jml" "jazz.ui")}
      {Lisp-Entry "Bindings-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 44 20 44 40 ("Preferences")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 56 25 56 45 ("Bindings-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 65 11 65 17 ()
        {Lisp-Entry "import" import () () #f #f 68 1 68 7 ("jazz.designer")}
        {Lisp-Entry "Bindings-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 71 7 71 38 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 74 3 74 7 (">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Bindings-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Bindings-Tree.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.preference.Bindings-Tree" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.ui")}
      {Lisp-Entry "Bindings-Tree" class (undocumented) ((extends . "Tree-View")) #f #f 45 20 45 33 ("Tree-View")
        {Lisp-Entry "category-icon" definition () () #f #f 53 14 53 27 ("Image-Resource")}
        {Lisp-Entry "action-icon" definition () () #f #f 56 14 56 25 ("Image-Resource")}
        {Lisp-Entry "shortcut-icon" definition () () #f #f 59 14 59 27 ("Image-Resource")}
        {Lisp-Entry "view-bindings" method (protected) ("designer" "bindings" "what" "kind") #f #f 63 21 63 34 ("shortcuts" "categorized" "flat" "with-update-locked" "remove-every-row" "get-key" "get-key~" "equal?" "get-modifiers" "get-modifiers~" "queue-list" "memq?" "set-third!" "not-null?" "eq?" "if" "neq?" "and" "act" "collect" "conflicts" "table-ref" "flag-conflicts!" "table-add" "enqueue" "add-binding" "shortcut-hash" "hash:" "shortcut=?" "test:" "make-table" "table" "new-queue" "queue" "view-shortcuts-categorized" "gather-bindings" "partition-bindings" "car" "key:" "nu<?" "sort" "present-key" "shortcut-icon" "present-modifiers" "else" "Image-Resource" "warning" "case" "conflict" "binding" "modifiers" "bind" "partition" "view-shortcuts-flat" "father:" "category-icon" "->string" "row" "view-actions-categorized" "get-children" "get-children~" "Actions" "is?" "when" "actions" "view-actions-flat" "user-data:" "present-shortcut" "Tree-Label" "action-icon" "get-parent" "get-parent~" "get-name" "get-name~" "format" "title:" "Tree-Node" "list" "children:" "add-row" "shortcut-owner-image" "image:" "Tree-Image" "new" "owner" "get-alternate-shortcut" "get-alternate-shortcut~" "alternate-shortcut" "get-shortcut" "get-shortcut~" "shortcut" "let" "action" "lambda" "for-each" "view-actions-list" "define" "kind" "what" "bindings" "designer")}
        {Lisp-Entry "present-shortcut" method (protected) ("shortcut") #f #f 188 21 188 37 ("present" "present~" "not" "if" "shortcut")}
        {Lisp-Entry "shortcut-owner-image" method (protected) ("designer" "component") #f #f 194 21 194 41 ("default-owner-image" "else" "root-owner-image" "get-reference" "get-reference~" "eq?" "trait-owner-image" "Trait" "is?" "or" "cond" "alternate-shortcut" "alternate-owner" "shortcut" "find-owner" "find-owner~" "shortcut-owner" "let" "component" "designer")}
        {Lisp-Entry "default-owner-image" method () () #f #f 202 11 202 30 ()}
        {Lisp-Entry "root-owner-image" method () () #f #f 206 11 206 27 ("Image-Resource")}
        {Lisp-Entry "trait-owner-image" method () () #f #f 210 11 210 28 ("Image-Resource")}}
      {Lisp-Entry "BindingsByActions-Tree" class () ((extends . "Bindings-Tree")) #f #f 219 7 219 29 ("Bindings-Tree")
        {Lisp-Entry "form" form () () #f #f 222 3 222 7 ("center" "justification:" "25" "owner" "Tree-Image-Column" "<Tree-Image-Column>" "alternate-shortcut" "115" "shortcut" "Tree-Label-Column" "<Tree-Label-Column>" "toplevel-controls?:" "235" "width:" "title:" "name:" "Tree-Node-Column" "<Tree-Node-Column>" "action" "filled-column:" ":images" "portfolio:" "install" "<install>")}}
      {Lisp-Entry "BindingsByShortcuts-Tree" class () ((extends . "Bindings-Tree")) #f #f 235 7 235 31 ("Bindings-Tree")
        {Lisp-Entry "form" form () () #f #f 238 3 238 7 ("25" "owner" "center" "justification:" "80" "conflict" "Tree-Image-Column" "<Tree-Image-Column>" "235" "60" "key" "Tree-Label-Column" "<Tree-Label-Column>" "toplevel-controls?:" "110" "width:" "title:" "modifier" "name:" "Tree-Node-Column" "<Tree-Node-Column>" "action" "filled-column:" ":images" "portfolio:" "install" "<install>")}}}})
"Border-Layout"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "layout" "Border-Layout.jazz"} 243566239. jazz
    {Lisp-Entry "jazz.ui.layout.Border-Layout" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.layout" "jazz.ui")}
      {Lisp-Entry "Border-Layout" class () ((extends . "Layout")) #f #f 44 7 44 20 ("0" "Rect" "Layout")
        {Lisp-Entry "insets" property () ((initialize . "{Rect 0 0 0 0}") (accessors . "generate")) #f "<Rect>" 47 12 47 18 ("Rect" "<Rect>")}
        {Lisp-Entry "get-insets" accessor () () #f #f 47 63 47 71 ()}
        {Lisp-Entry "set-insets" accessor () () #f #f 47 63 47 71 ()}
        {Lisp-Entry "padding" property () ((initialize . "0") (accessors . "generate")) #f "<fx>" 48 12 48 19 ("fx" "<fx>")}
        {Lisp-Entry "get-padding" accessor () () #f #f 48 63 48 71 ()}
        {Lisp-Entry "set-padding" accessor () () #f #f 48 63 48 71 ()}
        {Lisp-Entry "fit" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 15 ()}
        {Lisp-Entry "get-fit" accessor () () #f #f 49 63 49 71 ()}
        {Lisp-Entry "set-fit" accessor () () #f #f 49 63 49 71 ()}
        {Lisp-Entry "justification" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 25 ()}
        {Lisp-Entry "get-justification" accessor () () #f #f 50 63 50 71 ()}
        {Lisp-Entry "set-justification" accessor () () #f #f 50 63 50 71 ()}
        {Lisp-Entry "layout" method (override) ("figures" "width" "height") #f #f 58 20 58 26 ("around" "center" "centered" "layout-fill" "else" "layout-fill-vertical" "vertical" "layout-fill-horizontal" "horizontal" "justification" "op" "get-bottom" "get-bottom~" "get-right" "get-right~" "size" "position" "get-top" "get-top~" "insets" "get-left" "get-left~" "+" "fit" "case" "east" "get-width" "get-width~" "west" "decrease!" "-" "south" "padding" "set!" "increase!" "Dimension" "set-size" "set-size~" "Point" "new" "set-position" "set-position~" "get-size" "get-size~" "get-height" "get-height~" "let" "north" "get-location" "get-location~" "eq?" "when" "for-each" "bottom-padding" "right-padding" "top-padding" "left-padding" "bottom" "right" "top" "0" "left" "reverse" "reversed" "get-visible?" "get-visible?~" "Figure" "is?" "and" "figure" "lambda" "collect-if" "visibles" "let*" "height" "width" "figures")}}}})
"Border-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Border-Look.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Border-Look" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Border-Look" class () ((extends . "Look")) #f #f 43 7 43 18 ("Look")
        {Lisp-Entry "edge-flat?" property () ((initialize . "#t") (accessors . "generate")) #f #f 46 12 46 22 ()}
        {Lisp-Entry "get-edge-flat?" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "set-edge-flat?" accessor () () #f #f 46 47 46 55 ()}}}})
"Border-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Border-View.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.ui.view.Border-View" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.skin" "jazz.ui" "jazz.library" "jazz.jml" "jazz.designer" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Border-View" class () ((extends . "Layout-View")) #f #f 49 7 49 18 ("all" "1" "Rect" "Black" "Color" "explicit" "solid" "Layout-View")
        {Lisp-Entry "border-type" property () ((initialize . "'solid") (accessors . "explicit")) #f #f 53 12 53 23 ()}
        {Lisp-Entry "border-color" property () ((initialize . "{Color Black}") (accessors . "explicit")) #f #f 54 12 54 24 ()}
        {Lisp-Entry "border-insets" property () ((initialize . "{Rect 1 1 1 1}") (accessors . "explicit")) #f #f 55 12 55 25 ()}
        {Lisp-Entry "border-sides" property () ((initialize . "'all") (accessors . "explicit")) #f #f 56 12 56 24 ()}
        {Lisp-Entry "form" form () () #f #f 59 3 59 7 ("fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 63 20 63 35 ()}
        {Lisp-Entry "get-border-type" method (public) () #f #f 72 18 72 33 ("border-type")}
        {Lisp-Entry "set-border-type" method (public) ("type") #f #f 76 18 76 33 ("invalidate-borders" "recalculate-border-insets" "border-type" "set!" "type")}
        {Lisp-Entry "get-border-color" method (public) () #f #f 82 18 82 34 ("border-color")}
        {Lisp-Entry "set-border-color" method (public) ("color") #f #f 86 18 86 34 ("invalidate-borders" "border-color" "set!" "color")}
        {Lisp-Entry "get-border-insets" method (public) () #f #f 91 18 91 35 ("border-insets")}
        {Lisp-Entry "set-border-insets" method (public) ("insets") #f #f 95 18 95 35 ("layout-view" "border-insets" "set!" "insets")}
        {Lisp-Entry "recalculate-border-insets" method (protected virtual) () #f #f 100 29 100 54 ("3" "shadow" "2" "else" "entry" "style" "palette" "raised" "edge" "1" "solid" "0" "Rect" "set-border-insets" "none" "border-type" "case")}
        {Lisp-Entry "get-border-sides" method (public) () #f #f 108 18 108 34 ("border-sides")}
        {Lisp-Entry "set-border-sides" method (public) ("sides") #f #f 112 18 112 34 ("invalidate-borders" "border-sides" "set!" "sides")}
        {Lisp-Entry "style-update" method (override) () #f #f 122 20 122 32 ("recalculate-border-insets")}
        {Lisp-Entry "add-child" method (override) ("child") #f #f 131 20 131 29 ("layout-view" "View" "is?" "when" "nextmethod" "child")}
        {Lisp-Entry "fill-position" method (override) () #f #f 142 20 142 33 ("get-top" "get-top~" "border-insets" "get-left" "get-left~" "Point" "new" "nextmethod" "+")}
        {Lisp-Entry "fill-size" method (override) () #f #f 147 20 147 29 ("get-bottom" "get-bottom~" "get-top" "get-top~" "get-right" "get-right~" "border-insets" "get-left" "get-left~" "+" "Dimension" "new" "nextmethod" "-")}
        {Lisp-Entry "inner?" method (override) ("view") #f #f 159 20 159 26 ("children" "memq?" "view")}
        {Lisp-Entry "inner-widget" method (override) () #f #f 163 20 163 32 ("self" "inner-widget" "inner-widget~" "fill" "layout-type" "eq?" "and" "if" "first-view" "view" "let")}
        {Lisp-Entry "invalidate-borders" method () () #f #f 176 11 176 29 ("border-insets" "insets:" "invalidate-border")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 185 20 185 24 ("+" "line" "line~" "set-line-width" "set-line-width~" "Black" "set-color" "set-color~" "get-bottom" "get-bottom~" "get-right" "get-right~" "-" "0" "expand-rect" "shadow" "raised" "rectangle" "edges:" "2" "1" "border-insets" "get-left" "get-left~" "inner:" "sunken" "outer:" "draw-edge" "draw-edge~" "Outline-Border" "-1" "inflate-rect" "inner" "outline" "Entry-Border" "get-edge-flat?" "get-edge-flat?~" "entry" "style" "eq?" "and" "cond" "get-look" "look" "edge" "frame-partial-rect" "frame-partial-rect~" "else" "all" "border-color" "when" "solid" "none" "border-type" "case" "Dark" "Color" "frame-rect" "frame-rect~" "view-enabled?" "not" "if" "get-bounds" "bounds" "let" "border-sides" "listify" "standardize-sides" "define" "context" "surface")}
        {Lisp-Entry "draw-children" method (override) ("surface" "nodes" "context") #f #f 222 20 222 33 ("top" "edges:" "raised" "inner:" "sunken" "outer:" "draw-edge" "draw-edge~" "get-bounds" "bounds" "let" "palette" "border-type" "case" "nextmethod" "context" "nodes" "surface")}
        {Lisp-Entry "get-look" method (override) () #f #f 235 20 235 28 ("border/outline" "outline" "border/entry" "find-look" "entry" "style" "case")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 246 25 246 45 ("Border-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 255 11 255 17 ()
        {Lisp-Entry "import" import () () #f #f 258 1 258 7 ("jazz.designer")}
        {Lisp-Entry "Border-Type-Domain" class () ((extends . "Enumeration-Domain")) #f #f 261 7 261 25 ("Enumeration-Domain")
          {Lisp-Entry "Choices" definition () () #f #f 264 14 264 21 ("shadow" "palette" "raised" "edge" "solid" "none")}
          {Lisp-Entry "finish" method (override) ("rest") #f #f 273 20 273 26 ("Choices" "set-choices" "nextmethod" "rest")}}
        {Lisp-Entry "Border-View-Descriptor" class () ((extends . "Layout-View-Descriptor")) #f #f 278 7 278 29 ("Layout-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 281 3 281 7 ("none" "bottom" "right" "top" "left" "all" "choices:" "Enumeration-Domain" "<Enumeration-Domain>" "border-sides" "border-insets" "Color-Domain" "<Color-Domain>" "border-color" "domain" "Border-Type-Domain" "<Border-Type-Domain>" "title:" "border-type" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 293 20 293 31 ("Image-Resource" "class")}}}}})
"Capture-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Capture-Event.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.event.Capture-Event" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Capture-Event" class () ((extends . "Event")) #f #f 43 7 43 20 ("Event")
        {Lisp-Entry "window" slot () ((getter . "generate")) #f #f 46 8 46 14 ()}
        {Lisp-Entry "get-window" accessor () () #f #f 46 22 46 30 ()}
        {Lisp-Entry "initialize" method (override) ("kind" "sender" "wnd") #f #f 49 20 49 30 ("window" "set!" "nextmethod" "wnd" "sender" "kind")}}}})
"Check-Box"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Check-Box.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.view.Check-Box" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Check-Box" class () ((extends . "View")) #f #f 49 7 49 16 ("Black" "Color" "explicit" "View")
        {Lisp-Entry "box-size" definition () () #f #f 52 14 52 22 ("13")}
        {Lisp-Entry "checked?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 56 12 56 20 ()}
        {Lisp-Entry "selectable?" property () ((initialize . "#f") (accessors . "generate")) #f #f 57 12 57 23 ()}
        {Lisp-Entry "get-selectable?" accessor () () #f #f 57 59 57 67 ()}
        {Lisp-Entry "set-selectable?" accessor () () #f #f 57 59 57 67 ()}
        {Lisp-Entry "editable?" property () ((initialize . "#t") (accessors . "generate")) #f #f 58 12 58 21 ()}
        {Lisp-Entry "get-editable?" accessor () () #f #f 58 59 58 67 ()}
        {Lisp-Entry "set-editable?" accessor () () #f #f 58 59 58 67 ()}
        {Lisp-Entry "color" property () ((initialize . "{Color Black}") (accessors . "explicit")) #f #f 59 12 59 17 ()}
        {Lisp-Entry "flat?" property () ((initialize . "#f") (accessors . "generate")) #f #f 60 12 60 17 ()}
        {Lisp-Entry "get-flat?" accessor () () #f #f 60 59 60 67 ()}
        {Lisp-Entry "set-flat?" accessor () () #f #f 60 59 60 67 ()}
        {Lisp-Entry "tracking?" slot () ((initialize . "#f")) #f #f 63 8 63 17 ()}
        {Lisp-Entry "inside?" slot () ((initialize . "#f")) #f #f 64 8 64 15 ()}
        {Lisp-Entry "default-size" method (override) () #f #f 67 20 67 32 ("16" "100" "Dimension")}
        {Lisp-Entry "get-sort-value" method (override) () #f #f 71 20 71 34 ("title" "localize")}
        {Lisp-Entry "get-checked?" method (public) () #f #f 80 18 80 30 ("checked?")}
        {Lisp-Entry "set-checked?" method (public) ("flag") #f #f 84 18 84 30 ("invalidate-view" "call-content-change" "checked?" "set!" "flag")}
        {Lisp-Entry "get-color" method (public) () #f #f 90 18 90 27 ("color")}
        {Lisp-Entry "set-color" method (public) ("value") #f #f 94 18 94 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "change-state" method (protected virtual) ("reverse?") #f #f 104 29 104 41 ("checked?" "not" "set-checked?" "reverse?")}
        {Lisp-Entry "process-change-state" method () () #f #f 108 11 108 31 ("process-action~" "self" "process-action" "outline-view" "not" "if" "set-modified?" "shift-down?" "change-state")}
        {Lisp-Entry "text-extent" method () () #f #f 121 11 121 22 ("effective-font" "text-extent" "text-extent~" "localize" "title" "let")}
        {Lisp-Entry "box-rect" method () () #f #f 126 11 126 19 ("Rect" "new" "get-height~" "get-height" "v" "2" "0" "get-width~" "5" "title" "if" "box-size" "+" "get-width" "-" "quotient" "h" "text-extent" "extent" "let*")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 138 20 138 24 ("draw-text" "draw-text~" "color" "determine-color" "determine-color~" "set-text-color" "set-text-color~" "effective-font" "set-font" "set-font~" "Focused-Selection" "get-width~" "cell" "row" "get-selection-mode" "get-selection-mode~" "memq?" "Tree-View" "outline-view" "is?" "rect" "text-v" "18" "text-h" "selected?:" "getf" "selected?" "let" "when" "3" "draw-check" "White" "Medium" "Color" "-2" "inflate-rect" "fill-rect" "fill-rect~" "rectangle" "edges:" "outer:" "sunken" "inner:" "draw-edge" "draw-edge~" "flat?" "unless" "inside?" "tracking?" "and" "or" "grayed?" "view-enabled?" "enabled?" "+" "Rect" "new" "box-rect" "get-height~" "get-height" "box-v" "0" "2" "box-size" "get-width" "-" "quotient" "box-h" "not" "center?" "text-extent" "if" "extent" "localize" "title" "let*" "context" "surface")}
        {Lisp-Entry "draw-check" method (protected virtual) ("surface" "h" "v" "grayed?") #f #f 168 29 168 39 ("draw-check" "draw-check~" "Black" "Dark" "Color" "if" "set-color" "set-color~" "checked?" "when" "grayed?" "v" "h" "surface")}
        {Lisp-Entry "key-press" method (override) ("key") #f #f 179 20 179 29 ("process-change-state" "case" "key")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 190 20 190 30 ("invalidate-view" "acquire-capture" "inside?" "tracking?" "set!" "editable?" "view-enabled?" "when" "focus?:" "outline-select" "box-rect" "in-rect?" "not" "outline-view" "and" "if" "pos")}
        {Lisp-Entry "drag-move" method (override) ("pos") #f #f 200 20 200 29 ("invalidate-view" "set!" "inside?" "neq?" "over-view?" "over?" "let" "tracking?" "when" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 208 20 208 27 ("process-change-state" "acquire-focus" "selectable?" "inside?" "set!" "release-capture" "tracking?" "when" "rest" "pos")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 223 25 223 45 ("Check-Box-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 232 11 232 17 ()
        {Lisp-Entry "import" import () () #f #f 235 1 235 7 ("jazz.designer")}
        {Lisp-Entry "Check-Box-Descriptor" class () ((extends . "View-Descriptor")) #f #f 238 7 238 27 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 241 3 241 7 ("flat?" "Color-Domain" "<Color-Domain>" "color" "editable?" "selectable?" "domain" "Boolean-Domain" "<Boolean-Domain>" "title:" "checked?" "name:" "Property-Descriptor" "<Property-Descriptor>" "title" "default:" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 253 20 253 31 ("Image-Resource" "class")}}}}})
"Check-Item"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Check-Item.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.menu.Check-Item" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Check-Item" class () ((extends . "Label-Item")) #f #f 46 7 46 17 ("explicit" "Label-Item")
        {Lisp-Entry "checked?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 49 12 49 20 ()}
        {Lisp-Entry "get-checked?" method (public) () #f #f 57 18 57 30 ("checked?")}
        {Lisp-Entry "set-checked?" method (public) ("flag") #f #f 61 18 61 30 ("invalidate-view" "checked?" "set!" "flag")}
        {Lisp-Entry "preferred-prefix-width" method (override) () #f #f 71 20 71 42 ("0" "12" "checked?" "if")}
        {Lisp-Entry "draw-prefix" method (override) ("surface" "context") #f #f 80 20 80 31 ("Image-Resource" "get-images-portfolio" "get-images-portfolio~" "draw-image" "draw-image~" "2" "top" "5" "left" "get-application" "appl" "let" "checked?" "when" "context" "surface")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 93 25 93 45 ("Check-Item-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 102 11 102 17 ()
        {Lisp-Entry "import" import () () #f #f 105 1 105 7 ("jazz.designer")}
        {Lisp-Entry "Check-Item-Descriptor" class () ((extends . "Label-Item-Descriptor")) #f #f 108 7 108 28 ("Label-Item-Descriptor")
          {Lisp-Entry "form" form () () #f #f 111 3 111 7 ("title:" "checked?" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Chooser"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Chooser.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Chooser" module (protected) () #f #f 37 18 37 38 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Chooser" class (undocumented) ((extends . "View")) #f #f 46 20 46 27 ("View")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("on-cancel" "310" "cancel" "on-ok" ":host" "Event-Handler" "action-handler:" "24" "80" "172" "220" "title:" "ok" "Push-Button" "<Push-Button>" "116" "404" "44" "-2" "content" "Group-Box" "<Group-Box>" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title" "name:" "Label-View" "<Label-View>" "206" "400" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "resize" method (override) ("dh" "dv") #f #f 63 20 63 26 ("cancel" "ok" "move-figure" "move-figure~" "content" "locate" "size-figure" "size-figure~" "nextmethod" "dv" "dh")}}}})
"Code-Explorer"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Code-Explorer.jazz"} 225261334. jazz
    {Lisp-Entry "jazz.ui.text.Code-Explorer" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "proclaim" proclaim () () #f #f 43 1 43 9 ("optimizations" "warn")}
      {Lisp-Entry "Code-Explorer" class (undocumented) ((extends . "Text-Explorer")) #f #f 46 20 46 33 ("Text-Explorer")
        {Lisp-Entry "backward-expr" method (public virtual) () #f #f 49 26 49 39 ("string" "kind" "set!" "backward-constituent" "when")}
        {Lisp-Entry "forward-expr" method (public virtual) () #f #f 55 26 55 38 ("string" "kind" "set!" "forward-constituent" "when")}
        {Lisp-Entry "collect-backward-exprs" method (public) () #f "<list>" 61 18 61 40 ("get-mark" "cons" "set!" "backward-expr" "while" "let" "list" "<list>")}
        {Lisp-Entry "collect-forward-exprs" method (public) ("n" "<fx>") #f "<list>" 68 18 68 39 ("get-output" "get-output~" "decrease!" "get-mark" "put" "put~" "forward-expr" "0" ">=" "and" "while" "List-Factory" "new" "fact" "let" "list" "<list>" "fx" "<fx>" "n")}
        {Lisp-Entry "expression-comment?" method (virtual) ("mark") #f #f 76 19 76 38 ("mark")}
        {Lisp-Entry "remove-expression-comments" method (public) ("list") #f #f 80 18 80 44 ("cons" "cddr" "cdr" "car" "mark" "pair?" "scan" "iterate" "let" "expression-comment?" "some?" "if" "list")}}}})
"Code-Syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "syntax" "Code-Syntax.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.syntax.Code-Syntax" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library.automata")}
      {Lisp-Entry "Code-Syntax" class (undocumented) ((extends . "Text-Syntax")) #f #f 44 20 44 31 ("Text-Syntax")
        {Lisp-Entry "explorer-class" method (override) () #f #f 52 20 52 34 ("Code-Explorer")}
        {Lisp-Entry "get-readtable" method (protected virtual) () #f #f 61 29 61 42 ("current-readtable")}
        {Lisp-Entry "read-text-form" method (protected) ("range" "(string: string #f)" "(readtable: readtable (get-readtable))") #f #f 65 21 65 35 ("read" "init:" "list" "call-with-input-string" "model" "get-string" "get-string~" "or" "let" "get-readtable" "readtable" "readtable:" "string" "string:" "range")}
        {Lisp-Entry "recolorize-syntax" method (public) () #f #f 76 18 76 35 ("recoloring?:" "colorize-syntax" "uncolorize-all")}
        {Lisp-Entry "uncolorize-all" method () () #f #f 81 11 81 25 ("model" "get-length" "get-length~" "0" "naturals" "uncolorize-row" "for-each")}
        {Lisp-Entry "syntax-targets" method (protected virtual) () #f #f 85 29 85 43 ()}
        {Lisp-Entry "syntax-automata" method (protected virtual) () #f #f 89 29 89 44 ()}
        {Lisp-Entry "compute-syntax-targets" method (protected virtual) () #f #f 93 29 93 51 ()}
        {Lisp-Entry "compute-syntax-automata" method (protected virtual) () #f #f 97 29 97 52 ("c-constituent?" "build-search-automata" "when" "syntax-targets" "targets" "let")}
        {Lisp-Entry "colorize-syntax" method (override) ("(recoloring?: recoloring? #f)" "(entries?: entries? #t)") #f #f 103 20 103 35 ("colorize-entries" "text-beginning" "text-beginning~" "finish-current" "finish-current~" "colorize-type" "set!" "string-length" "+" "end" "Cell" "start" "col" "line" "type" "target" "bind" "car" "info" "not-null?" "while" "new-colorizer" "new-colorizer~" "not" "and" "colorizer" "0" "get-limit" "get-limit~" "model" "get-paragraphs" "get-paragraphs~" "TextTape" "new" "automata-search" "found" "when" "syntax-automata" "automata" "let" "pos" "colorize-syntax-from" "define" "entries?" "entries?:" "recoloring?" "recoloring?:")}
        {Lisp-Entry "apply-coloring" method (protected) ("colorizer" "start" "end" "style-name") #f #f 123 21 123 35 ("model" "apply-style" "apply-style~" "not" "if" "style-name" "end" "start" "colorizer")}
        {Lisp-Entry "colorize-type" method (protected virtual) ("found" "type" "start" "end" "colorizer" "recolorize?") #f #f 129 29 129 42 ("error" "recolorize?" "colorizer" "end" "start" "type" "found")}
        {Lisp-Entry "colorize-balanced-comment" method (protected virtual) ("found" "start" "end" "colorizer" "style") #f #f 133 29 133 54 ("set!" "cdr" "continuation-return" "apply-coloring" "2" "+" "Cell" "new" "balanced-comment-backward" "eq?" "if" "col" "line" "type" "target" "bind" "car" "info" "let" "not-null?" "while" "return" "lambda" "continuation-capture" "style" "colorizer" "end" "start" "found")}
        {Lisp-Entry "colorize-balanced-comment-backward" method (protected) ("found" "start" "end" "colorizer" "style" "recolorize?" "(open: open \"/*\")" "(close: close \"*/\")") #f #f 147 21 147 55 ("apply-coloring" "eq?" "type" "target" "pos" "bind" "reversed?:" "position:" "user-data:" "make-search-context" "list" "text-regular-search" "let" "when" "cdr" "close" "close:" "open" "open:" "recolorize?" "style" "colorizer" "end" "start" "found")}
        {Lisp-Entry "colorize-line-comment" method (protected) ("found" "start" "end" "colorizer" "line-style" "title-style" "title-char") #f #f 159 21 159 42 ("car" "second" "=" "not-null?" "while" "cdr" "set!" "line" "3" "nu+" "paragraph-length" "paragraph-length~" "get-line" "get-line~" "Cell" "new" "apply-coloring" "not" "if" "2" "next-pos" "next-pos~" "model" "get-char" "get-char~" "eqv?" "and" "title?" "let" "title-char" "title-style" "line-style" "colorizer" "end" "start" "found")}
        {Lisp-Entry "colorize-keyword" method (protected) ("found" "start" "end" "colorizer" "style") #f #f 172 21 172 37 ("cdr" "apply-coloring" "style" "colorizer" "end" "start" "found")}
        {Lisp-Entry "find-specifier-end" method () ("start") #f #f 177 11 177 29 ("Cell" "new" "when" "position" "return:" "start:" "find-balanced" "eqv?" "or" "element" "nxt" "let" "cardinality" "1" "+" ">=" "unless" "model" "paragraph-string" "paragraph-string~" "str" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "let*" "start")}
        {Lisp-Entry "recolorize-text" method (override) ("start" "end-line") #f #f 189 20 189 35 ("finish-current" "finish-current~" "colorize-type" "string-length" "end" "col" "line" "car" "info" "not-null?" "while" "new-colorizer" "new-colorizer~" "colorizer" "get-col" "get-col~" "model" "get-paragraphs" "get-paragraphs~" "TextTape" "automata-search" "found" "syntax-automata" "automata" "uncolorize-row" "for-each" "1" "+" "naturals" "range" "set!" "eq?" "type" "target" "bind" "reversed?:" "position:" "close" "open" "user-data:" "make-search-context" "list" "text-regular-search" "opening" "when" "syntax-targets" "targets" "0" "get-line" "get-line~" "Cell" "new" "pos" "let" "end-line" "start")}
        {Lisp-Entry "colorize-entries" method (public virtual) () #f #f 214 26 214 42 ("colorize-entry" "for-each" "when" "get-parsed-entries" "entries" "let")}
        {Lisp-Entry "get-parsed-entries" method (protected virtual) () #f #f 220 29 220 47 ("get-definitions" "get-definitions~" "get-document-controller" "get-document-controller~" "get-moniker-time" "get-moniker-time~" "get-time" "get-time~" "time->seconds" "=" "car" "file-entry" "not-null?" "c" "context:" "get-file-entries" "get-file-entries~" "entries" "get-application" "get-cataloguer" "get-cataloguer~" "cataloguer" "get-modified?" "get-modified?~" "not" "file?" "and" "when" "model" "get-moniker" "get-moniker~" "moniker" "let")}
        {Lisp-Entry "colorize-entry" method () ("entry") #f #f 234 11 234 25 ("get-definitions" "get-definitions~" "for-each" "get-implements" "get-implements~" "get-extends" "get-extends~" "colorize-entry" "class-of" "Class-Entry" "equal?" "Definition" "stylize" "stylize~" "model" "get-limit" "get-limit~" "<=" "when" "string-length" "+" "end" "Cell" "new" "start" "get-column" "get-column~" "column" "get-line" "get-line~" "line" "get-name" "get-name~" "name" "let*" "entry")}
        {Lisp-Entry "recolorize-entries" method (public) () #f #f 250 18 250 36 ("colorize-entry" "for-each" "entries?:" "colorize-syntax" "uncolorize-all" "when" "get-parsed-entries" "entries" "let")}}}})
"Code-Text-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Code-Text-Actions.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.preference.Code-Text-Actions" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Code-Text-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 37 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("on-find-all-imports" "find-all-imports" "on-find-imports" "find-imports" "on-tabify" "tabify" "on-transpose-expr" "transpose-expr" "on-transpose-word" "transpose-word" "F5" "on-recolorize-syntax" "recolorize-syntax" "Up" "on-exit-composite" "exit-composite" "Down" "on-enter-composite" "enter-composite" "on-forward-outline" "forward-outline" "on-backward-outline" "backward-outline" "Right" "on-forward-composite" "forward-composite" "Left" ":alt" "on-backward-composite" "backward-composite" "on-edit-references" "edit-references" "F12" "on-edit-definitions" "edit-definitions" ":shift" "on-evaluate-buffer" "evaluate-buffer" "Return" ":control" "Shortcut" "shortcut:" "on-evaluate" ":focus" "Event-Handler" "action-handler:" "evaluate" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Code-Text-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Code-Text-Event.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Code-Text-Event" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Code-Text-Event" class (undocumented) ((extends . "Text-Event")) #f #f 43 20 43 35 ("Text-Event")}}})
"Code-Text-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Code-Text-Preferences.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.preference.Code-Text-Preferences" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Code-Text-Preferences" class (undocumented) ((extends . "Text-Preferences")) #f #f 44 20 44 41 ("both" "0.5" "0" "flash" "Text-Preferences")
        {Lisp-Entry "match-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 23 ()}
        {Lisp-Entry "get-match-style" accessor () () #f #f 47 56 47 64 ()}
        {Lisp-Entry "set-match-style" accessor () () #f #f 47 56 47 64 ()}
        {Lisp-Entry "match-action" property () ((initialize . "'flash") (accessors . "generate")) #f #f 48 12 48 24 ()}
        {Lisp-Entry "get-match-action" accessor () () #f #f 48 56 48 64 ()}
        {Lisp-Entry "set-match-action" accessor () () #f #f 48 56 48 64 ()}
        {Lisp-Entry "flash-delay" property () ((initialize . "0") (accessors . "generate")) #f #f 49 12 49 23 ()}
        {Lisp-Entry "get-flash-delay" accessor () () #f #f 49 56 49 64 ()}
        {Lisp-Entry "set-flash-delay" accessor () () #f #f 49 56 49 64 ()}
        {Lisp-Entry "flash-duration" property () ((initialize . "0.5") (accessors . "generate")) #f #f 50 12 50 26 ()}
        {Lisp-Entry "get-flash-duration" accessor () () #f #f 50 56 50 64 ()}
        {Lisp-Entry "set-flash-duration" accessor () () #f #f 50 56 50 64 ()}
        {Lisp-Entry "highlight-mode" property () ((initialize . "'both") (accessors . "generate")) #f #f 51 12 51 26 ()}
        {Lisp-Entry "get-highlight-mode" accessor () () #f #f 51 56 51 64 ()}
        {Lisp-Entry "set-highlight-mode" accessor () () #f #f 51 56 51 64 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("Text-Match" "Base" "match-style:" "Code-Base" "Text-Style" "base-style:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 66 25 66 45 ("Code-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 75 11 75 17 ()
        {Lisp-Entry "import" import () () #f #f 78 1 78 7 ("jazz.designer")}
        {Lisp-Entry "Code-Text-Preferences-Descriptor" class () ((extends . "Text-Preferences-Descriptor")) #f #f 81 7 81 39 ("Text-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 84 3 84 7 ("highlight-mode" "flash-duration" "flash-delay" "match-action" "match-style" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Code-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Code-Text-View.jazz"} 247283256. jazz
    {Lisp-Entry "jazz.ui.text.Code-Text-View" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui" "jazz.system" "jazz.project" "jazz.library" "jazz.jml" "jazz.io" "jazz.catalog")}
      {Lisp-Entry "Code-Text-View" class (undocumented) ((extends . "Text-View")) #f #f 51 20 51 34 ("Text-View")
        {Lisp-Entry "matching-highlights" slot () ((initialize . "'()")) #f #f 54 8 54 27 ()}
        {Lisp-Entry "new-model" method (override) () #f #f 57 20 57 29 ("12" "left-padding:" "Code-Base" "Text-Style" "base-style:" "Text-Model" "new")}
        {Lisp-Entry "new-syntax" method (override) () #f #f 61 20 61 30 ("model" "Code-Syntax" "new")}
        {Lisp-Entry "preferences" method (override) () #f #f 65 20 65 31 ("Code-Text-Preferences" "new")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 69 20 69 27 ("get-match-style" "get-match-style~" "Match" "add-style" "when" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "host-workspaces" method (override) () #f #f 81 20 81 35 ("multi" "empty" "emacs" "reference" "test" "debugger" "text")}
        {Lisp-Entry "tab-press" method (override) ("key" "modifiers") #f #f 90 20 90 29 ("tabulate" "insert-char" "get-end" "get-start" "get-line" "get-line~" "=" "empty-selection?" "nextmethod" "accepts-returns?" "not" "has-completion?" "or" "if" "modifiers" "key")}
        {Lisp-Entry "char-press" method (override) ("key") #f #f 99 20 99 30 ("show-arguments" "eqv?" "when" "nextmethod" "key")}
        {Lisp-Entry "context-menu" method (override) ("pos") #f #f 105 20 105 32 ("get-context-menu" "track-popup-menu" "edit-references" "edit-definitions" "move-caret:" "context-menu-click" "always" "else" "never" "outside-selection" "not" "and" "cond" "move-caret" "let" "modifiers-down" "alt?" "control?" "shift?" "receive" "pos")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 123 20 123 33 ("nextmethod" "code-text" "find-actions" "cons")}
        {Lisp-Entry "on-find-imports" method () ("evt") #f #f 133 11 133 26 ("message-box" "get-syntax" "find-imports" "find-imports~" "lambda" ":wait" "with-cursor" "symbol?" "if" "current-expr" "expr" "let" "evt")}
        {Lisp-Entry "on-find-all-imports" method () ("evt") #f #f 142 11 142 30 ("evt")}
        {Lisp-Entry "backward-compound" method (override) ("(extend?: extend? #f)") #f #f 151 20 151 37 ("backward-expr" "extend?" "extend?:")}
        {Lisp-Entry "forward-compound" method (override) ("(extend?: extend? #f)") #f #f 155 20 155 36 ("forward-expr" "extend?" "extend?:")}
        {Lisp-Entry "upward-compound" method (override) () #f #f 159 20 159 35 ("exit-composite")}
        {Lisp-Entry "downward-compound" method (override) () #f #f 163 20 163 37 ("enter-composite")}
        {Lisp-Entry "on-backward-composite" method (package) ("evt") #f #f 167 19 167 40 ("backward-expr" "evt")}
        {Lisp-Entry "on-forward-composite" method (package) ("evt") #f #f 171 19 171 39 ("forward-expr" "evt")}
        {Lisp-Entry "on-backward-outline" method (package) ("evt") #f #f 175 19 175 38 ("get-range" "get-range~" "set-selection" "backward-expr" "backward-expr~" "when" "get-start" "end:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "let" "evt")}
        {Lisp-Entry "on-forward-outline" method (package) ("evt") #f #f 181 19 181 37 ("get-range" "get-range~" "set-selection" "forward-expr" "forward-expr~" "when" "get-end" "end:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "let" "evt")}
        {Lisp-Entry "on-enter-composite" method (package) ("evt") #f #f 187 19 187 37 ("enter-composite" "evt")}
        {Lisp-Entry "on-exit-composite" method (package) ("evt") #f #f 191 19 191 36 ("exit-composite" "evt")}
        {Lisp-Entry "backward-expr" method (protected virtual) ("(extend?: extend? locked-anchor?)") #f #f 195 29 195 42 ("set-caret" "get-start~" "change-selection" "if" "backward-expr" "backward-expr~" "when" "get-start" "start:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "let" "locked-anchor?" "extend?" "extend?:")}
        {Lisp-Entry "forward-expr" method (protected virtual) ("(extend?: extend? locked-anchor?)") #f #f 203 29 203 41 ("set-caret" "get-end~" "change-selection" "if" "forward-expr" "forward-expr~" "when" "get-end" "end:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "let" "locked-anchor?" "extend?" "extend?:")}
        {Lisp-Entry "enter-composite" method (protected virtual) () #f #f 211 29 211 44 ("get-end~" "set-caret" "enter-composite" "enter-composite~" "when" "get-end" "end:" "get-start" "start:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "let")}
        {Lisp-Entry "exit-composite" method (protected virtual) () #f #f 217 29 217 43 ("get-end~" "set-caret" "exit-list" "exit-list~" "when" "end:" "get-end" "start:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "let")}
        {Lisp-Entry "move-caret" method (override) ("pos" "direction" "shift?") #f #f 223 20 223 30 ("end-completion" "nextmethod" "shift?" "direction" "pos")}
        {Lisp-Entry "on-transpose-expr" method () ("evt") #f #f 228 11 228 28 ("transpose-expr" "evt")}
        {Lisp-Entry "transpose-expr" method (public) () #f #f 232 18 232 32 ("backward-expr" "backward-expr~" "forward-expr" "forward-expr~" "transpose-movements")}
        {Lisp-Entry "get-context" method (protected virtual) () #f #f 241 29 241 40 ()}
        {Lisp-Entry "edition-workspace" method (protected virtual) () #f #f 245 29 245 46 ()}
        {Lisp-Entry "on-edit-definitions" method () ("evt") #f #f 249 11 249 30 ("history-item:" "get-context" "context:" "edit-definitions" "edit-definitions~" "bell" "not" "standardize-form" "target" "edit-composite-reference" "composite-reference?" "has-effective-selection?" "if" "current-history-item" "item" "else" "edition-workspace" "workspace:" "file?" "tokenise-filename" "File" "new" "edit-document" "edit-document~" "string?" "syntax" "supports-expr?" "supports-expr?~" "and" "cond" "when" "get-application" "appl" "current-expr" "form" "let" "evt")}
        {Lisp-Entry "on-edit-references" method () ("evt") #f #f 267 11 267 29 ("current-history-item" "history-item:" "get-context" "context:" "edit-references" "edit-references~" "bell" "not" "if" "empty-effective-selection?" "standardize-form" "target" "when" "get-application" "appl" "current-expr" "form" "let" "evt")}
        {Lisp-Entry "standardize-form" method () ("form" "extract?") #f #f 277 11 277 27 ("reference->name" "reference-string?" "dispatch->name" "dispatch-string?" "tag->name" "tag-string?" "not" "or" "if" "else" "keyword->string" "string-append" "keyword?" "symbol->string" "symbol?" "string?" "cond" "target" "let" "extract?" "form")}
        {Lisp-Entry "edit-symbol-class" method (protected virtual) ("symbol") #f #f 290 29 290 46 ("symbol")}
        {Lisp-Entry "edit-definitions" method (protected) ("pos") #f #f 294 21 294 37 ("history-item:" "definitions:" "Definitions-Menu" "track-popup-menu" "car" "edit" "edit~" "add-history" "add-history~" "1" "0" "length" "case" "get-context" "context:" "get-coalesced-definitions" "get-coalesced-definitions~" "definitions" "bell" "not" "if" "standardize-form" "target" "current-history-item" "item" "get-cataloguer" "get-cataloguer~" "cataloguer" "appl" "let*" "else" "edition-workspace" "workspace:" "file?" "tokenise-filename" "File" "new" "get-application" "edit-document" "edit-document~" "string?" "syntax" "supports-expr?" "supports-expr?~" "and" "cond" "when" "view->text" "expr-at" "form" "let" "pos")}
        {Lisp-Entry "edit-references" method (protected) ("pos") #f #f 316 21 316 36 ("history-item:" "definitions:" "target:" "References-Menu" "new" "track-popup-menu" "else" "car" "edit-textual-reference" "edit-textual-reference~" "add-history" "add-history~" "1" "0" "length" "case" "get-context" "context:" "get-references" "get-references~" "references" "bell" "not" "if" "standardize-form" "target" "current-history-item" "item" "get-cataloguer" "get-cataloguer~" "cataloguer" "get-application" "appl" "let*" "when" "view->text" "expr-at" "form" "let" "pos")}
        {Lisp-Entry "edit-composite-reference" definition () ("appl" "item" "form") #f #f 333 15 333 39 ("edit" "edit~" "add-history" "add-history~" "bell" "not" "if" "locator->entry" "entry" "let" "form" "item" "appl")}
        {Lisp-Entry "current-history-item" method (override) () #f #f 346 20 346 40 ("History-File-Item" "History-Document-Item" "new" "when" "get-frame" "frame" "not" "if" "get-moniker" "moniker" "get-selection" "selection" "let")}
        {Lisp-Entry "save-content" method (override) ("moniker") #f #f 361 20 361 32 ("update-catalog" "nextmethod" "moniker")}
        {Lisp-Entry "update-catalog" method () () #f #f 371 11 371 25 ("update-file" "update-file~" "lambda" "post-catalog" "find-catalog" "catalog" "when" "get-moniker" "moniker" "let")}
        {Lisp-Entry "find-catalog" method () () #f #f 381 11 381 23 ("get-catalog" "get-catalog~" "car" "entry" "not-null?" "get-application" "get-cataloguer" "get-cataloguer~" "get-file-entries" "get-file-entries~" "entries" "when" "get-moniker" "moniker" "let")}
        {Lisp-Entry "on-evaluate" method () ("evt") #f #f 396 11 396 22 ("evaluate-selection" "evt")}
        {Lisp-Entry "on-evaluate-buffer" method () ("evt") #f #f 400 11 400 29 ("evaluate-buffer" "evt")}
        {Lisp-Entry "evaluate-selection" method (protected virtual) () #f #f 404 29 404 47 ()}
        {Lisp-Entry "evaluate-buffer" method (protected virtual) () #f #f 408 29 408 44 ()}
        {Lisp-Entry "evaluate-range" method (protected virtual) ("range") #f #f 412 29 412 43 ("range")}
        {Lisp-Entry "tabulate" method (public virtual) () #f #f 421 26 421 34 ("subseq" "insert-string" "position" "return:" "whitespace?" "not" "lambda" "find-if" "rank" "-" "paragraph-string" "str" "=" ">" "and" "get-col" "get-col~" "col" "get-line" "get-line~" "get-start" "pos" "let*" "selected-lines" "tabulate-line" "shift-down?" "for-each" "has-selection?" "if" "memq?" "c" "list" "1" "Range$Cell$" "replace-text" "0" "Cell" "new" "get-char" "space/tab?" "when" "line" "untabulate-line" "define")}
        {Lisp-Entry "tabulate-line" method (protected virtual) ("line") #f #f 444 29 444 42 ("string" "list" "0" "Cell" "Range$Cell$" "new" "replace-text" "line")}
        {Lisp-Entry "tabulate-lines" method (public virtual) ("start" "end") #f #f 449 26 449 40 ("end" "start")}
        {Lisp-Entry "auto-complete?" method (override) () #f #f 458 20 458 34 ()}
        {Lisp-Entry "completion-name" method (override) ("pos") #f #f 462 20 462 35 ("get-symbol-string" "get-symbol-string~" "not" "or" "0" "char-backward" "char-backward~" "string" "keyword" "tag" "specifier" "symbol" "get-kind" "get-kind~" "memq?" "backward-expr" "backward-expr~" "and" "end:" "start:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "string-delimiter?" "c" "when" "previous-cell" "prev" "let" "get-end" "has-selection?" "if" "get-char" "syntax" "text-constituent?" "text-constituent?~" "unless" "pos")}
        {Lisp-Entry "symbol-completions" method (override) ("name") #f #f 476 20 476 38 ("table-keys" "table-set!" "compare-n" "symbol->string" "anchor-name" "when" "get-anchor" "get-anchor~" "anchor" "alias" "lambda" "get-root-alias" "for-each-alias" "get-context" "context:" "add-completions" "add-completions~" "string-length" "len" "equal?" "test:" "make-table" "table" "not" "get-application" "get-cataloguer" "get-cataloguer~" "cataloguer" "let" "numeric?" "if" "name")}
        {Lisp-Entry "on-recolorize-syntax" method (package) ("evt") #f #f 500 19 500 39 ("syntax" "recolorize-syntax" "recolorize-syntax~" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "show-arguments" method (protected virtual) () #f #f 511 29 511 43 ()}
        {Lisp-Entry "left-arrow-move" method (override) ("extend?" "word?") #f #f 520 20 520 35 ("nextmethod" "convert-completion" "word?" "extend?")}
        {Lisp-Entry "right-arrow-move" method (override) ("extend?" "word?") #f #f 525 20 525 36 ("nextmethod" "convert-completion" "word?" "extend?")}
        {Lisp-Entry "up-arrow-move" method (override) ("extend?" "scroll?") #f #f 530 20 530 33 ("nextmethod" "convert-completion" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method (override) ("extend?" "scroll?") #f #f 535 20 535 35 ("nextmethod" "convert-completion" "scroll?" "extend?")}
        {Lisp-Entry "on-tabify" method () ("evt") #f #f 545 11 545 20 ("tabify" "evt")}
        {Lisp-Entry "tabify" method () () #f #f 549 11 549 17 ("1" "get-end" "+" "get-start" "get-line" "get-line~" "naturals" "for-each" "make-string" "append!" "list" "Cell" "Range$Cell$" "new" "replace-text" "modulo" "spaces" "tab-size" "fxfloor/" "tabs" "char->column" "column" "0" ">" "and" "when" "position" "return:" "whitespace?" "not" "c" "lambda" "find-if" "char" "paragraph-string" "str" "let*" "line" "tabify-line" "define")}
        {Lisp-Entry "match-backwards?" method (protected virtual) ("char") #f #f 570 29 570 45 ("char")}
        {Lisp-Entry "match-forwards?" method (protected virtual) ("char") #f #f 574 29 574 44 ("char")}
        {Lisp-Entry "flash-matching-character" method () ("pref") #f #f 578 11 578 35 ("car" "infinity" "neq?" "find-matching-highlight" "remove-all-text-actions" "flash" "get-match-action" "get-match-action~" "and" "when" "preferences" "type" "3" "collect-forward-exprs" "collect-forward-exprs~" "get-string" "mark" "map" "user-message" "end:" "1" "nu+" "start:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "run-text-action" "execute-event" "sleep" "new-thread" "thread-start!" "cell-displayed?" "add-text-action" "remove-matching-highlights" "remove" "add-matching-highlight" "lambda" "add" "get-range" "get-range~" "get-start" "get-start~" "start" "let" "highlight" "flash-character" "get-flash-duration" "get-flash-duration~" "flash-duration" "get-flash-delay" "get-flash-delay~" "0" "keyboard" "event-type" "eq?" "if" "flash-delay" "define" "pref")}
        {Lisp-Entry "highlight-matching-character" method () ("pref") #f #f 619 11 619 39 ("remove-matching-highlights" "cdr" "both" "get-highlight-mode" "get-highlight-mode~" "eq?" "car" "add-matching-highlight" "when" "find-matching-highlight" "highlight" "let" "highlight-character" "define" "pref")}
        {Lisp-Entry "find-matching-highlight" method () ("(forward? #t)") #f #f 631 11 631 34 ("and" "or" "get-caret" "empty-selection?" "get-application" "macro-playing?" "macro-playing?~" "show-unfocused?:" "self" "Text-Highlight" "Match" "locate-style" "style" "new-range" "range" "get-end" "get-end~" "end" "forward-expr" "forward-expr~" "match-forwards?" "at-end?" "find-forward" "next-cell" "new-highlight" "cons" "get-start" "get-start~" "start" "backward-expr" "backward-expr~" "start:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "bell" "err" "Explore-Error" "catch" "get-char" "match-backwards?" "when" "previous-cell" "previous" "let" "at-beginning?" "unless" "pos" "find-backward" "define" "forward?")}
        {Lisp-Entry "add-matching-highlight" method () ("highlight") #f #f 669 11 669 33 ("cons" "matching-highlights" "set!" "invalidate-highlight" "add-highlight" "highlight")}
        {Lisp-Entry "remove-matching-highlights" method () () #f #f 675 11 675 37 ("set!" "matching-highlights" "invalidate-highlight" "remove-highlight" "highlight" "lambda" "for-each")}
        {Lisp-Entry "selection-change" method (override) () #f #f 683 20 683 36 ("highlight-matching-character" "highlight" "flash-matching-character" "flash" "get-match-action" "get-match-action~" "case" "when" "preferences" "pref" "let")}
        {Lisp-Entry "on-browse-java" method () ("evt") #f #f 696 11 696 25 ("browse-java" "evt")}
        {Lisp-Entry "browse-java" method () () #f #f 700 11 700 22 ("list" "browse-classes" "browse-classes~" "get-guest" "get-guest~" "manager" "Java-Manager" "new-frame" "host" "error" "not" "org.apache.bcel.Repository" "lookupClass" "lookupClass~" "javaClass" "->string" "classname" "let*" "bell" "Symbol" "is-not?" "if" "current-expr" "expr" "let")}
        {Lisp-Entry "on-set-read/write" method () ("evt") #f #f 719 11 719 28 ("update-status" "set-read/write" "set-read/write~" "get-document-controller" "get-moniker" "get-moniker~" "moniker" "let" "evt")}}
      {Lisp-Entry "Definitions-Menu" class () ((extends . "Context-Menu")) #f #f 730 7 730 23 ("Context-Menu")
        {Lisp-Entry "definitions" property () ((accessors . "generate")) #f #f 733 12 733 23 ()}
        {Lisp-Entry "get-definitions" accessor () () #f #f 733 35 733 43 ()}
        {Lisp-Entry "set-definitions" accessor () () #f #f 733 35 733 43 ()}
        {Lisp-Entry "history-item" property () ((accessors . "generate")) #f #f 734 12 734 24 ()}
        {Lisp-Entry "get-history-item" accessor () () #f #f 734 35 734 43 ()}
        {Lisp-Entry "set-history-item" accessor () () #f #f 734 35 734 43 ()}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 737 20 737 26 ("key:" "make-condensed-menu" "get-string" "parent" "user-data" "create-item" "menu" "let*" "definition<?" "sort" "definition:" "list" "properties:" "on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "present" "present~" "title" "let" "definition" "lambda" "for-each" "20" "definitions" "length" "<" "if" "nextmethod" "rest")}
        {Lisp-Entry "definition<?" definition () ("x" "y") #f #f 751 15 751 27 ("present" "present~" "string<?" "y" "x")}
        {Lisp-Entry "on-action" method () ("evt") #f #f 755 11 755 20 ("definition:" "get-property" "get-property~" "edit" "edit~" "history-item" "get-application" "add-history" "add-history~" "evt")}}
      {Lisp-Entry "References-Menu" class () ((extends . "Context-Menu")) #f #f 765 7 765 22 ("Context-Menu")
        {Lisp-Entry "target" property () ((accessors . "generate")) #f #f 768 12 768 18 ()}
        {Lisp-Entry "get-target" accessor () () #f #f 768 35 768 43 ()}
        {Lisp-Entry "set-target" accessor () () #f #f 768 35 768 43 ()}
        {Lisp-Entry "definitions" property () ((accessors . "generate")) #f #f 769 12 769 23 ()}
        {Lisp-Entry "get-definitions" accessor () () #f #f 769 35 769 43 ()}
        {Lisp-Entry "set-definitions" accessor () () #f #f 769 35 769 43 ()}
        {Lisp-Entry "history-item" property () ((accessors . "generate")) #f #f 770 12 770 24 ()}
        {Lisp-Entry "get-history-item" accessor () () #f #f 770 35 770 43 ()}
        {Lisp-Entry "set-history-item" accessor () () #f #f 770 35 770 43 ()}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 773 20 773 26 ("key:" "make-condensed-menu" "get-string" "parent" "user-data" "create-item" "menu" "let*" "definition<?" "sort" "definition:" "list" "properties:" "on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "present" "present~" "->string" "title" "let" "definition" "lambda" "for-each" "20" "definitions" "length" "<" "if" "nextmethod" "rest")}
        {Lisp-Entry "definition<?" definition () ("x" "y") #f #f 787 15 787 27 ("present" "present~" "string<?" "y" "x")}
        {Lisp-Entry "on-action" method () ("evt") #f #f 791 11 791 20 ("target" "definition:" "get-property" "get-property~" "edit-textual-reference" "edit-textual-reference~" "history-item" "get-application" "add-history" "add-history~" "evt")}}}})
"Color-Button"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Color-Button.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Color-Button" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Color-Button" class (undocumented) ((extends . "Push-Icon")) #f #f 45 20 45 32 ("explicit" "Push-Icon")
        {Lisp-Entry "color" property () ((initialize . "#f") (accessors . "explicit")) #f #f 48 12 48 17 ()}
        {Lisp-Entry "get-color" method (public) () #f #f 56 18 56 27 ("color")}
        {Lisp-Entry "set-color" method (public) ("value") #f #f 60 18 60 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "action-properties" method (override) () #f #f 70 20 70 37 ("color" "color:" "list")}
        {Lisp-Entry "draw-tool" method (override) ("surface" "context") #f #f 79 20 79 29 ("Dark" "Color" "view-enabled?" "fill-rect" "fill-rect~" "18" "14" "Rect" "new" "offset-rect" "rect" "1" "2" "pushed" "state" "eq?" "if" "offset" "let*" "color" "when" "nextmethod" "context" "surface")}}}})
"Color-Combo"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Color-Combo.jazz"} 244610079. jazz
    {Lisp-Entry "jazz.ui.view.Color-Combo" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library.exemplar" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Color-Combo" class (undocumented) ((extends . "Combo-Box")) #f #f 47 20 47 31 ("Combo-Box")
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("color" "Color-View" "<Color-View>" "Black" "border-color:" "solid" "border-type:" "color-border" "Border-View" "<Border-View>" "2" "1" "Rect" "layout-insets:" "fill" "layout-type:" "15" "14" "Dimension" "size:" "color-contour" "name:" "Layout-View" "<Layout-View>" "White" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "form-model" method (override) ("form") #f #f 57 20 57 30 ("nextmethod" "else" "Color-Text-View" "body" "get-name" "get-name~" "case" "form")}
        {Lisp-Entry "get-color" method (public) () #f #f 68 18 68 27 ("color" "locate" "get-background" "get-background~")}
        {Lisp-Entry "set-color" method (public) ("color") #f #f 72 18 72 27 ("select-all" "select-all~" "present" "present~" "not" "if" "set-string-content" "set-string-content~" "body" "locate" "text" "let" "set-color-value" "color")}
        {Lisp-Entry "set-color-value" method () ("color") #f #f 79 11 79 26 ("locate" "set-background" "set-background~" "color")}
        {Lisp-Entry "content-change" method (override) ("origin") #f #f 88 20 88 34 ("set-modified?" "Color" "parse-exemplar" "empty-string?" "if" "set-color-value" "get-content" "content" "let" "origin")}
        {Lisp-Entry "button-action" method (override) () #f #f 94 20 94 33 ("initiator:" "on-color-picked" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "colors:" "Color-Picker" "popup" "get-height" "12" "get-width" "-" "Point" "new" "pos" "let")}
        {Lisp-Entry "on-color-picked" method () ("evt") #f #f 99 11 99 26 ("popup" "call-content-change" "set-color" "close-popups" "color:" "get-property" "get-property~" "color" "let" "evt")}
        {Lisp-Entry "layout" method (override) () #f #f 111 20 111 26 ("pick" "get-height~" "15" "get-width" "get-width~" "-" "Dimension" "set-size" "set-size~" "get-right" "get-right~" "new" "scroller" "0" "Point" "set-position" "set-position~" "color-contour" "locate" "countour" "get-height" "width" "get-size" "size" "let")}}
      {Lisp-Entry "Color-View" class () ((extends . "View")) #f #f 127 7 127 17 ("View")
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 130 20 130 24 ("get-height" "get-height~" "0" "get-width" "get-width~" "line" "line~" "1" "set-line-width" "set-line-width~" "Black" "Color" "set-color" "set-color~" "get-size" "size" "let" "background" "not" "when" "nextmethod" "context" "surface")}}}})
"Color-Picker"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Color-Picker.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Color-Picker" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Color-Picker" class (undocumented) ((extends . "Layout-View")) #f #f 47 20 47 32 ("explicit" "Layout-View")
        {Lisp-Entry "colors" property () ((initialize . "#f") (accessors . "explicit")) #f #f 50 12 50 18 ()}
        {Lisp-Entry "geometry" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 20 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("title:" "more" "More-Tool" "<More-Tool>" "0" "fill" "south" "20" "100" "Dimension" "size:" "Layout-View" "<Layout-View>" "center" "location:" "colors" "name:" "View" "<View>" "4" "Rect" "layout-insets:" "border" "layout-type:" "Medium" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "get-colors" method (public) () #f #f 66 18 66 28 ("colors")}
        {Lisp-Entry "set-colors" method (public) ("value") #f #f 70 18 70 28 ("layout-view" "invalidate-tools" "colors" "set!" "value")}
        {Lisp-Entry "get-geometry" method (public) () #f #f 76 18 76 30 ("geometry")}
        {Lisp-Entry "set-geometry" method (public) ("value") #f #f 80 18 80 30 ("layout-view" "geometry" "set!" "value")}
        {Lisp-Entry "set-action-handler" method (override) ("handler") #f #f 90 20 90 38 ("more" "colors" "locate" "get-children" "get-children~" "set-action-handler" "set-action-handler~" "tool" "lambda" "for-each" "action-handler" "set!" "handler")}
        {Lisp-Entry "Default-Colors" definition () () #f #f 103 14 103 28 ("Dark-Gray" "Gray" "Light-Gray" "Dark-Purple" "Purple" "Light-Purple" "Dark-Blue" "Blue" "Light-Blue" "Dark-Green" "Green" "Light-Green" "Dark-Yellow" "Yellow" "Light-Yellow" "Dark-Orange" "Orange" "Light-Orange" "Dark-Red" "Red" "Light-Red" "Black" "White" "Color")}
        {Lisp-Entry "effective-colors" method () () #f #f 138 11 138 27 ("Default-Colors" "colors" "or")}
        {Lisp-Entry "invalidate-tools" method () () #f #f 147 11 147 27 ("effective-colors" "action-handler" "action-handler:" "color:" "18" "Dimension" "size:" "parent:" "Color-Tool" "new" "color" "lambda" "get-children" "get-children~" "close" "close~" "for-each" "colors" "locate" "view" "let")}
        {Lisp-Entry "layout" method (override) () #f #f 160 20 160 26 ("nextmethod" "30" "Dimension" "set-size" "0" "naturals" "18" "2" "Point" "new" "set-position" "set-position~" "element" "tool" "*" "+" "n" "v" "h" "lambda" "for-each" "get-col" "get-col~" "columns" "get-line" "get-line~" "lines" "8" "3" "Cell" "or" "geometry" "not-null?" "when" "get-children" "get-children~" "children" "colors" "locate" "view" "let*")}}
      {Lisp-Entry "Color-Tool" class () ((extends . "Push-Tool")) #f #f 183 7 183 17 ("Push-Tool")
        {Lisp-Entry "client" property () () #f #f 186 12 186 18 ()}
        {Lisp-Entry "color" property () ((initialize . "#f") (accessors . "generate")) #f #f 187 12 187 17 ()}
        {Lisp-Entry "get-color" accessor () () #f #f 187 43 187 51 ()}
        {Lisp-Entry "set-color" accessor () () #f #f 187 43 187 51 ()}
        {Lisp-Entry "get-tooltip?" method (override) () #f #f 190 20 190 32 ()}
        {Lisp-Entry "get-tooltip-text" method (override) () #f #f 194 20 194 36 ("present" "present~" "color" "not" "if")}
        {Lisp-Entry "action-properties" method (override) () #f #f 200 20 200 37 ("color" "color:" "list")}
        {Lisp-Entry "mouse-enter" method (override) () #f #f 204 20 204 31 ("invalidate-view" "highlighted" "set-state")}
        {Lisp-Entry "mouse-leave" method (override) () #f #f 209 20 209 31 ("invalidate-view" "inactive" "set-state")}
        {Lisp-Entry "mouse-up" method (override) ("pos") #f #f 214 20 214 28 ("self" "process-action" "pos")}
        {Lisp-Entry "up" method (override) () #f #f 218 20 218 22 ()}
        {Lisp-Entry "draw-highlighted" method (override) ("surface") #f #f 222 20 222 36 ("nextmethod" "draw-pushed" "mouse-down?" "if" "surface")}
        {Lisp-Entry "draw-tool" method (override) ("surface" "context") #f #f 228 20 228 29 ("get-bottom" "get-bottom~" "get-left" "get-left~" "get-top" "get-top~" "get-right" "get-right~" "line" "line~" "1" "set-line-width" "set-line-width~" "set-color" "set-color~" "fill-rect" "fill-rect~" "color" "if" "Dark" "Color" "frame-rect" "frame-rect~" "-1" "inside" "-3" "inflate-rect" "outside" "get-bounds" "rect" "let*" "nextmethod" "context" "surface")}}
      {Lisp-Entry "More-Tool" class () ((extends . "Label-Tool")) #f #f 246 7 246 16 ("Label-Tool")
        {Lisp-Entry "mouse-enter" method (override) () #f #f 249 20 249 31 ("invalidate-view" "highlighted" "set-state")}
        {Lisp-Entry "mouse-leave" method (override) () #f #f 254 20 254 31 ("invalidate-view" "inactive" "set-state")}
        {Lisp-Entry "mouse-up" method (override) ("pos") #f #f 259 20 259 28 ("choose-color" "color:" "list" "self" "process-action" "close-popups" "pos")}
        {Lisp-Entry "up" method (override) () #f #f 264 20 264 22 ()}
        {Lisp-Entry "draw-highlighted" method (override) ("surface") #f #f 268 20 268 36 ("nextmethod" "draw-pushed" "mouse-down?" "if" "surface")}}}})
"Color-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Color-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.preference.Color-Preferences" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Color-Preferences" class (undocumented) ((extends . "Exemplar-Preferences")) #f #f 47 20 47 37 ("Exemplar-Preferences")
        {Lisp-Entry "red" property () ((accessors . "generate")) #f #f 50 12 50 15 ()}
        {Lisp-Entry "get-red" accessor () () #f #f 50 28 50 36 ()}
        {Lisp-Entry "set-red" accessor () () #f #f 50 28 50 36 ()}
        {Lisp-Entry "green" property () ((accessors . "generate")) #f #f 51 12 51 17 ()}
        {Lisp-Entry "get-green" accessor () () #f #f 51 28 51 36 ()}
        {Lisp-Entry "set-green" accessor () () #f #f 51 28 51 36 ()}
        {Lisp-Entry "blue" property () ((accessors . "generate")) #f #f 52 12 52 16 ()}
        {Lisp-Entry "get-blue" accessor () () #f #f 52 28 52 36 ()}
        {Lisp-Entry "set-blue" accessor () () #f #f 52 28 52 36 ()}
        {Lisp-Entry "alpha" property () ((accessors . "generate")) #f #f 53 12 53 17 ()}
        {Lisp-Entry "get-alpha" accessor () () #f #f 53 28 53 36 ()}
        {Lisp-Entry "set-alpha" accessor () () #f #f 53 28 53 36 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "->exemplar" method (override) () #f #f 65 20 65 30 ("Color" "new" "apply" "alpha:" "alpha" "blue:" "blue" "green:" "green" "red:" "red" "base:" "list" "base" "specified?" "if" "arguments" "let")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 80 25 80 45 ("Color-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 89 11 89 17 ()
        {Lisp-Entry "import" import () () #f #f 92 1 92 7 ("jazz.designer")}
        {Lisp-Entry "Color-Preferences-Descriptor" class () ((extends . "Exemplar-Preferences-Descriptor")) #f #f 95 7 95 35 ("Exemplar-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 98 3 98 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "alpha" "blue" "green" "red" "base" "categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Color-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "Color-Request.jazz"} 240293873. jazz
    {Lisp-Entry "jazz.ui.dialog.Color-Request" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Color-Request" class () ((extends . "Layout-View")) #f #f 51 7 51 20 ("explicit" "Layout-View")
        {Lisp-Entry "color" property () ((accessors . "explicit")) #f "<void>" 54 12 54 17 ("void" "<void>")}
        {Lisp-Entry "feedback" property () ((initialize . "#f") (accessors . "generate")) #f #f 55 12 55 20 ()}
        {Lisp-Entry "get-feedback" accessor () () #f #f 55 52 55 60 ()}
        {Lisp-Entry "set-feedback" accessor () () #f #f 55 52 55 60 ()}
        {Lisp-Entry "symbolize?" property () ((initialize . "#t") (accessors . "generate")) #f #f 56 12 56 22 ()}
        {Lisp-Entry "get-symbolize?" accessor () () #f #f 56 52 56 60 ()}
        {Lisp-Entry "set-symbolize?" accessor () () #f #f 56 52 56 60 ()}
        {Lisp-Entry "form" form () () #f #f 59 3 59 7 ("on-cancel" "264" "cancel" "default?:" "on-ok" ":host" "action-handler:" "24" "80" "129" "180" "title:" "ok" "Push-Button" "<Push-Button>" "8" "503" "115" "separator" "Horizontal-Line" "<Horizontal-Line>" "85" "13" "430" "color" "Color-View" "<Color-View>" "220" "value" "Value-View" "<Value-View>" "30" "200" "70" "saturation" "Saturation-View" "<Saturation-View>" "50" "410" "Dimension" "size:" "10" "Point" "position:" "hue" "name:" "Hue-View" "<Hue-View>" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("initargs") #f #f 70 20 70 26 ("1" "0" "hsv->color" "set-color" "hue" "locate" "get-value" "get-value~" "not" "when" "nextmethod" "initargs")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 81 25 81 35 ()}
        {Lisp-Entry "host-size" method (meta override) () #f #f 85 25 85 34 ("164" "527" "Dimension")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 95 20 95 35 ("get-modal-result" "get-host" "end-modal" "end-modal~" "evt")}
        {Lisp-Entry "on-escape-press" method (override) ("evt") #f #f 100 20 100 35 ("get-host" "cancel-modal" "cancel-modal~" "evt")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 104 20 104 36 ("1" "epsilon:" "symbolize-color" "symbolize?" "if" "get-color" "color" "let")}
        {Lisp-Entry "get-color" method (public) () #f #f 116 18 116 27 ("get-value" "get-saturation" "get-hue" "hsv->color")}
        {Lisp-Entry "set-color" method (public) ("value") #f #f 122 18 122 27 ("update" "saturation" "hue" "locate" "set-value" "set-value~" "color->hsv" "v" "s" "h" "receive" "when" "value")}
        {Lisp-Entry "get-hue" method (protected) () #f #f 131 21 131 28 ("hue" "locate" "get-value" "get-value~")}
        {Lisp-Entry "get-saturation" method (protected) () #f #f 134 21 134 35 ("saturation" "locate" "get-value" "get-value~")}
        {Lisp-Entry "get-value" method (protected) () #f #f 137 21 137 30 ("value" "locate" "get-value" "get-value~")}
        {Lisp-Entry "update" method (protected) () #f #f 141 21 141 27 ("feedback" "when" "set-background" "set-background~" "get-color" "color" "let" "value" "saturation" "hue" "locate" "invalidate-view" "invalidate-view~")}}
      {Lisp-Entry "Slider-View" class () ((extends . "View")) #f #f 156 7 156 18 ("View")
        {Lisp-Entry "reticule" slot () ((initialize . "#f")) #f #f 159 8 159 16 ()}
        {Lisp-Entry "value" slot () ((initialize . "#f")) #f #f 160 8 160 13 ()}
        {Lisp-Entry "get-reticule" method (public) () #f #f 168 18 168 30 ("reticule")}
        {Lisp-Entry "set-reticule" method (public) ("r") #f #f 172 18 172 30 ("reticule->value" "value" "reticule-max" "0" "between" "reticule" "set!" "r")}
        {Lisp-Entry "get-value" method (public) () #f #f 177 18 177 27 ("value")}
        {Lisp-Entry "set-value" method (public) ("v") #f #f 181 18 181 27 ("value->reticule" "set-reticule" "v")}
        {Lisp-Entry "value->reticule" method (protected) ("value") #f #f 185 21 185 36 ("value-max" "reticule-span" "*" "fxround/" "value")}
        {Lisp-Entry "reticule->value" method (protected) ("reticule") #f #f 189 21 189 36 ("reticule-span" "value-max" "*" "fl" "<fl>" "cast" "/" "reticule")}
        {Lisp-Entry "reticule-span" method (protected) () #f #f 193 21 193 34 ("6" "get-width" "-")}
        {Lisp-Entry "reticule-max" method (protected) () #f #f 197 21 197 33 ("1" "reticule-span" "-")}
        {Lisp-Entry "value-max" method (protected virtual) () #f #f 201 29 201 38 ()}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 210 20 210 30 ("parent" "update" "update~" "pos->reticule" "set-reticule" "acquire-capture" "pos")}
        {Lisp-Entry "drag-move" method (override) ("pos") #f #f 216 20 216 29 ("parent" "update" "update~" "pos->reticule" "set-reticule" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 221 20 221 27 ("release-capture" "rest" "pos")}
        {Lisp-Entry "pos->reticule" definition () ("pos") #f #f 225 15 225 28 ("3" "get-h" "get-h~" "-" "pos")}
        {Lisp-Entry "draw-reticule" method () ("surface") #f #f 234 11 234 24 ("up" "down" "0" "draw-arrow-tip" "draw-arrow-tip~" "-" "3" "+" "line" "line~" "1" "set-line-width" "set-line-width~" "Black" "Color" "set-color" "set-color~" "get-height" "height" "let" "reticule" "when" "surface")}}
      {Lisp-Entry "Hue-View" class () ((extends . "Slider-View")) #f #f 249 7 249 15 ("Slider-View")
        {Lisp-Entry "value-max" method (override) () #f #f 257 20 257 29 ("360")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 266 20 266 24 ("draw-reticule" "-" "4" "3" "+" "Rect" "new" "fill-rect" "fill-rect~" "hsv->color" "color" "reticule->value" "h" "do" "reticule-max" "to" "0" "from" "r" "for" "loop" "get-value" "get-value~" "v" "parent" "get-saturation" "get-saturation~" "s" "get-height" "height" "let" "context" "surface")}}
      {Lisp-Entry "Saturation-View" class () ((extends . "Slider-View")) #f #f 282 7 282 22 ("Slider-View")
        {Lisp-Entry "value-max" method (override) () #f #f 290 20 290 29 ("1")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 299 20 299 24 ("draw-reticule" "-" "4" "3" "+" "Rect" "new" "fill-rect" "fill-rect~" "hsv->color" "color" "reticule->value" "s" "do" "reticule-max" "to" "0" "from" "r" "for" "loop" "get-value" "get-value~" "v" "parent" "get-hue" "get-hue~" "h" "get-height" "height" "let" "context" "surface")}}
      {Lisp-Entry "Value-View" class () ((extends . "Slider-View")) #f #f 315 7 315 17 ("Slider-View")
        {Lisp-Entry "value-max" method (override) () #f #f 323 20 323 29 ("1")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 332 20 332 24 ("draw-reticule" "-" "4" "3" "+" "Rect" "new" "fill-rect" "fill-rect~" "hsv->color" "color" "reticule->value" "v" "do" "reticule-max" "to" "0" "from" "r" "for" "loop" "get-saturation" "get-saturation~" "s" "parent" "get-hue" "get-hue~" "h" "get-height" "height" "let" "context" "surface")}}
      {Lisp-Entry "Color-View" class () ((extends . "View")) #f #f 348 7 348 17 ("View")}}})
"Color-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Color-Text-View.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Color-Text-View" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Color-Text-View" class (undocumented) ((extends . "Combo-Text-View")) #f #f 43 20 43 35 ("Combo-Text-View")
        {Lisp-Entry "symbol-completions" method () ("name") #f #f 52 11 52 29 ("complete" "complete~" "Symbol-Completer" "new" "completer" "Color.Constants" "domain" "let*" "name")}}}})
"Colors-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Colors-Preferences.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.preference.Colors-Preferences" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Colors-Preferences" class (undocumented) ((extends . "Exemplars-Preferences")) #f #f 45 20 45 38 ("Exemplars-Preferences")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 57 25 57 45 ("Colors-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 66 11 66 17 ()
        {Lisp-Entry "import" import () () #f #f 69 1 69 7 ("jazz.designer")}
        {Lisp-Entry "Colors-Preferences-Descriptor" class () ((extends . "Exemplars-Preferences-Descriptor")) #f #f 72 7 72 36 ("Exemplars-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 75 3 75 7 ("categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Column-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Column-Menu.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Column-Menu" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Column-Menu" class (undocumented) ((extends . "Context-Menu")) #f #f 44 20 44 31 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("fill-to-column" "text" "Action" "action-handler:" "title:" "mark-column" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Combo-Box"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Combo-Box.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Combo-Box" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.locale" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Combo-Box" class () ((extends . "Combo-Text")) #f #f 47 7 47 16 ("explicit" "Combo-Text")
        {Lisp-Entry "nullable?" property () ((initialize . "#f") (accessors . "generate")) #f #f 63 12 63 21 ()}
        {Lisp-Entry "get-nullable?" accessor () () #f #f 63 53 63 61 ()}
        {Lisp-Entry "set-nullable?" accessor () () #f #f 63 53 63 61 ()}
        {Lisp-Entry "condensed?" property () ((initialize . "#f") (accessors . "generate")) #f #f 64 12 64 22 ()}
        {Lisp-Entry "get-condensed?" accessor () () #f #f 64 53 64 61 ()}
        {Lisp-Entry "set-condensed?" accessor () () #f #f 64 53 64 61 ()}
        {Lisp-Entry "choices" property () ((initialize . "'()") (accessors . "explicit")) #f #f 65 12 65 19 ()}
        {Lisp-Entry "choices-updater" property () ((initialize . "#f") (accessors . "explicit")) #f #f 66 12 66 27 ()}
        {Lisp-Entry "entry-test" property () ((initialize . "#f") (accessors . "generate")) #f #f 67 12 67 22 ()}
        {Lisp-Entry "get-entry-test" accessor () () #f #f 67 53 67 61 ()}
        {Lisp-Entry "set-entry-test" accessor () () #f #f 67 53 67 61 ()}
        {Lisp-Entry "selected" slot () ((initialize . "#f")) #f #f 70 8 70 16 ()}
        {Lisp-Entry "button-action" method (override) () #f #f 78 20 78 33 ("inactive" "highlighted" "mouse-view" "picker-view?" "if" "set-state" "bell" "else" "alternate-position:" "track-popup-menu" "4" "get-width" "-" "width:" "layout-menu" "layout-menu~" "combo-popup-positions" "alternate-pos" "pos" "receive" "cond" "get-pick" "pick" "new-choices-menu" "menu" "let" "update-choices" "get-body" "acquire-focus" "acquire-focus~" "selectable?" "when")}
        {Lisp-Entry "combo-popup-positions" method (protected) ("view") #f #f 93 21 93 42 ("get-height~" "5" "-" "1" "get-height" "+" "-1" "Point" "new" "values" "view")}
        {Lisp-Entry "on-action" method (protected virtual) ("evt") #f #f 98 29 98 38 ("combo-choice" "popup" "call-content-change" "set-modified?" "set-modified?~" "select-all" "select-all~" "set-choice" "get-body" "text" "get-sender" "get-sender~" "get-user-data" "get-user-data~" "choice" "let" "evt")}
        {Lisp-Entry "combo-choice" method (protected virtual) () #f #f 108 29 108 41 ()}
        {Lisp-Entry "get-choices-updater" method (public) () #f #f 117 18 117 37 ("choices-updater")}
        {Lisp-Entry "set-choices-updater" method (public) ("value") #f #f 121 18 121 37 ("get-pick" "set-enabled?" "set-enabled?~" "pick" "kind" "eq?" "and" "when" "choices-updater" "set!" "value")}
        {Lisp-Entry "update-choices" method (protected virtual) () #f #f 132 29 132 43 ("self" "choices" "null?" "choices-updater" "and" "if")}
        {Lisp-Entry "new-choices-menu" method (protected virtual) () #f #f 138 29 138 45 ("condensed?" "Context-Menu" "when" "key:" "make-condensed-menu" "make-condensed-menu~" "new-choices-menu-condensed" "choices" "present-choice" "Separator-Item" "not" "lambda" "for-each" "menu" "new-choices-menu-plain" "action-handler:" "user-data:" "checked?:" "title:" "parent:" "Check-Item" "parent" "create-check-item" "selected" "eq?" "standardize-content" "string=?" "editable?" "if" "title" "choice" "checked?" "define" "on-action" "method-name:" "self" "target:" "Event-Handler" "new" "action-handler" "or" "handler" "get-entry" "current" "let")}
        {Lisp-Entry "get-choices" method (public) () #f #f 174 18 174 29 ("choices")}
        {Lisp-Entry "set-choices" method (public) ("value") #f #f 178 18 178 29 ("set-choice" "not-null?" "choices-updater" "or" "get-pick" "set-enabled?" "set-enabled?~" "pick" "kind" "eq?" "when" "choices" "set!" "get-choice" "old" "let" "value")}
        {Lisp-Entry "get-choice" method () () #f #f 187 11 187 21 ("car" "not-null?" "memq?" "selected" "and" "get-entry" "matches" "queue-list" "choices" "value->presented" "not" "if" "enqueue" "localize" "localized" "string" "tryout" "presented" "value" "bind" "when" "choice" "lambda" "for-each" "new-queue" "queue" "nu=?" "entry-test" "or" "test" "let" "entry" "collect-matches" "define")}
        {Lisp-Entry "present-choices" method (public) () #f #f 217 18 217 33 ("choices" "present-choice" "map" "format")}
        {Lisp-Entry "present-choice" method (protected) ("choice") #f #f 222 21 222 35 ("first" "localize" "value->presented" "not" "if" "presented" "value" "bind" "when" "choice")}
        {Lisp-Entry "present-value" method (public) ("value") #f #f 235 18 235 31 ("present-choice" "value->presented" "not" "if" "value->choice" "choice" "let" "value")}
        {Lisp-Entry "value->choice" method () ("value") #f #f 242 11 242 24 ("choices" "assoc" "value")}
        {Lisp-Entry "choice->value" method () ("choice") #f #f 246 11 246 24 ("car" "choice")}
        {Lisp-Entry "value->presented" method (public virtual) ("value") #f #f 250 26 250 42 ("localize" "->string" "not" "if" "value")}
        {Lisp-Entry "invalid->value" method (public virtual) ("presented") #f #f 256 26 256 40 ("format" "message:" "Parse-Error" "new" "signal" "presented")}
        {Lisp-Entry "get-entry" method (public virtual) () #f #f 265 26 265 35 ("get-content")}
        {Lisp-Entry "set-entry" method (public virtual) ("content") #f #f 269 26 269 35 ("set-content" "content")}
        {Lisp-Entry "valid-value?" method (public) () #f #f 273 18 273 30 ("get-choice" "boolean")}
        {Lisp-Entry "get-value" method (public) () #f #f 277 18 277 27 ("car" "get-content" "invalid->value" "not" "if" "get-choice" "choice" "let")}
        {Lisp-Entry "set-value" method (public) ("value" "(generate-event?: generate-event? #f)") #f #f 284 18 284 27 ("value->choice" "set-choice" "generate-event?" "generate-event?:" "value")}
        {Lisp-Entry "set-choice" method (public) ("choice" "(generate-event?: generate-event? #f)") #f #f 288 18 288 28 ("call-content-change" "when" "choice->value" "present-value" "set-entry" "selected" "set!" "generate-event?" "generate-event?:" "choice")}
        {Lisp-Entry "standardize-content" method (protected virtual) ("content") #f #f 295 29 295 48 ("content")}
        {Lisp-Entry "validate-content" method (override) () #f #f 304 20 304 36 ("get-value" "set-entry" "throw-cancel" "focus-body" "yes" "no:" "yes:" "type:" "exception-reason" "message-box" "case" "err" "Parse-Error" "catch" "format" "no" "message" "question" "if" "type" "present-choice" "unique-entry" "car" "and" "unique" "choices" "length" "1" "=" "unique?" "let*")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 325 25 325 45 ("Combo-Box-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 334 11 334 17 ()
        {Lisp-Entry "import" import () () #f #f 337 1 337 7 ("jazz.designer")}
        {Lisp-Entry "Combo-Box-Descriptor" class () ((extends . "Combo-View-Descriptor")) #f #f 340 7 340 27 ("Combo-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 343 3 343 7 ("entry-test" "choices-updater" "nullable?" "choices" "title:" "condensed?" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Combo-Button"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Combo-Button.jazz"} 242773042. jazz
    {Lisp-Entry "jazz.ui.view.Combo-Button" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Combo-Button" class (undocumented) ((extends . "Push-Tool")) #f #f 45 20 45 32 ("Push-Tool")
        {Lisp-Entry "get-combo" method (public) () #f #f 53 18 53 27 ("parent")}
        {Lisp-Entry "get-enabled?" method (override) () #f #f 63 20 63 32 ("parent" "get-enabled?" "get-enabled?~" "enabled?" "and")}
        {Lisp-Entry "get-state" method (override) () #f #f 67 20 67 29 ("self" "parent" "child-state" "child-state~")}
        {Lisp-Entry "mouse-enter" method (override) () #f #f 71 20 71 31 ("self" "parent" "enter-child" "enter-child~" "surrogate" "unless")}
        {Lisp-Entry "mouse-leave" method (override) () #f #f 76 20 76 31 ("self" "parent" "leave-child" "leave-child~" "surrogate" "unless")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 81 20 81 30 ("self" "parent" "child-down" "child-down~" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 85 20 85 27 ("self" "parent" "child-up" "child-up~" "rest" "pos")}
        {Lisp-Entry "down" method (override) () #f #f 94 20 94 24 ("self" "process-action" "pick" "parent" "get-kind" "get-kind~" "eq?" "view-enabled?" "when")}
        {Lisp-Entry "up" method (override) () #f #f 100 20 100 22 ("self" "process-action" "choose" "parent" "get-kind" "get-kind~" "eq?" "when")}
        {Lisp-Entry "close-popups" method (override) ("(event: event #f)" "(all?: all? #f)" "(exclude: exclude #f)") #f #f 110 20 110 32 ("invalidate-view" "nextmethod" "double-click" "mouse-down" "memq?" "unless" "exclude" "exclude:" "all?" "all?:" "event" "event:")}
        {Lisp-Entry "light-color" method (override) () #f #f 121 20 121 31 ("Light-Background" "Color")}
        {Lisp-Entry "dark-color" method (override) () #f #f 125 20 125 30 ("Dark" "Color")}
        {Lisp-Entry "draw-inactive" method (override) ("surface") #f #f 129 20 129 33 ("Medium" "Light" "Color" "view-enabled?" "if" "frame-rect" "frame-rect~" "get-bounds" "bounds" "let" "parent" "highlight-pick?" "highlight-pick?~" "when" "surface")}
        {Lisp-Entry "draw-tool" method (override) ("surface" "context") #f #f 135 20 135 29 ("draw-ellipsis" "choose" "draw-arrow" "pick" "parent" "get-kind" "get-kind~" "case" "context" "surface")}
        {Lisp-Entry "draw-arrow" method () ("surface") #f #f 141 11 141 21 ("down" "3" "draw-arrow-tip" "draw-arrow-tip~" "1" "get-height" "get-height~" "v" "2" "get-width" "get-width~" "quotient" "-" "+" "h" "get-offset" "offset" "get-size" "size" "let*" "Dark" "Black" "Color" "view-enabled?" "if" "set-color" "set-color~" "surface")}
        {Lisp-Entry "draw-ellipsis" method () ("surface") #f #f 150 11 150 24 ("view-enabled?" "get-v" "get-v~" "get-h" "get-h~" "draw-text" "draw-text~" "Black" "Color" "set-text-color" "set-text-color~" "center" "size" "get-text-extent" "get-text-extent~" "lambda" "justify-lazy" "pos" "title" "let" "surface")}
        {Lisp-Entry "get-offset" method () () #f #f 159 11 159 21 ("0" "1" "choose" "pushed" "get-state" "memq?" "if")}}}})
"Combo-Text"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Combo-Text.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Combo-Text" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Combo-Text" class () ((extends . "Combo-View")) #f #f 46 7 46 17 ("explicit" "Combo-View")
        {Lisp-Entry "selectable?" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 23 ()}
        {Lisp-Entry "get-selectable?" accessor () () #f #f 49 55 49 63 ()}
        {Lisp-Entry "set-selectable?" accessor () () #f #f 49 55 49 63 ()}
        {Lisp-Entry "editable?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 50 12 50 21 ()}
        {Lisp-Entry "complete?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 21 ()}
        {Lisp-Entry "content" property () ((initialize . "#f") (accessors . "explicit")) #f "<void>" 52 12 52 19 ("void" "<void>")}
        {Lisp-Entry "form" form () () #f #f 55 3 55 7 ("focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "editable?:" "selectable?:" "body" "Combo-Text-View" "<Combo-Text-View>" "content" "!" "<!>" "scroller" "name:" "Scroller-View" "<Scroller-View>" "install" "<install>")}
        {Lisp-Entry "default-size" method (override) () #f #f 62 20 62 32 ("17" "100" "Dimension")}
        {Lisp-Entry "get-editable?" method () () #f #f 71 11 71 24 ("editable?")}
        {Lisp-Entry "set-editable?" method () ("flag") #f #f 75 11 75 24 ("set-visible?" "set-visible?~" "Medium" "White" "Color" "if" "set-background" "set-background~" "set-selectable?" "set-selectable?~" "set-editable?" "set-editable?~" "get-pick" "pick" "get-body" "text" "let" "editable?" "set!" "flag")}
        {Lisp-Entry "get-text" method (public) () #f #f 90 18 90 26 ("get-body")}
        {Lisp-Entry "get-complete?" method (public) () #f #f 94 18 94 31 ("complete?")}
        {Lisp-Entry "set-complete?" method (public) ("value") #f #f 98 18 98 31 ("set-editable?" "set-editable?~" "set-selectable?" "set-selectable?~" "get-body" "text" "let" "when" "complete?" "set!" "value")}
        {Lisp-Entry "highlight-pick?" method (override) () #f #f 111 20 111 35 ()}
        {Lisp-Entry "set-enabled?" method (override) ("flag") #f #f 120 20 120 32 ("invalidate-view" "get-pick" "Medium" "White" "Color" "if" "set-background" "set-background~" "get-body" "set-enabled?" "set-enabled?~" "enabled?" "set!" "flag")}
        {Lisp-Entry "edit" method (public) () #f #f 133 18 133 22 ("focus-body")}
        {Lisp-Entry "focus-body" method () () #f #f 137 11 137 21 ("select-all" "select-all~" "acquire-focus" "acquire-focus~" "get-body" "text" "let")}
        {Lisp-Entry "get-content" method (public) () #f #f 148 18 148 29 ("get-body" "get-string-content" "get-string-content~")}
        {Lisp-Entry "set-content" method (public) ("content") #f #f 152 18 152 29 ("localize" "if" "get-body" "set-string-content" "set-string-content~" "content")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 156 20 156 33 ("get-body" "get-document-controller" "get-document-controller~" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-modified?" method (override) ("flag") #f #f 160 20 160 33 ("get-body" "get-document-controller" "get-document-controller~" "set-modified?" "set-modified?~" "flag")}
        {Lisp-Entry "layout" method (override) () #f #f 169 20 169 26 ("get-height~" "get-width" "get-width~" "-" "Dimension" "new" "set-size" "set-size~" "Point" "set-position" "set-position~" "0" "get-model" "get-model~" "get-default-row-height" "get-default-row-height~" "get-top-padding" "get-top-padding~" "+" "get-height" "min" "width" "get-pick" "pick" "locate" "scroller" "get-body" "text" "get-size" "size" "let")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 186 25 186 45 ("Combo-Text-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 195 11 195 17 ()
        {Lisp-Entry "import" import () () #f #f 198 1 198 7 ("jazz.designer")}
        {Lisp-Entry "Combo-Text-Descriptor" class () ((extends . "Combo-View-Descriptor")) #f #f 201 7 201 28 ("Combo-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 204 3 204 7 ("content" "complete?" "editable?" "title:" "selectable?" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Combo-Text-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Combo-Text-Actions.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Combo-Text-Actions" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Combo-Text-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 38 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Return" ":control" "Shortcut" "shortcut:" "on-push-button" ":focus" "Event-Handler" "action-handler:" "push-button" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Combo-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Combo-Text-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Combo-Text-View" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Combo-Text-View" class (undocumented) ((extends . "Text-View")) #f #f 43 20 43 35 ("Text-View")
        {Lisp-Entry "new-model" method (override) () #f #f 46 20 46 29 ("top-padding:" "2" "left-padding:" "Text-Base" "Text-Style" "base-style:" "Text-Model" "new")}
        {Lisp-Entry "get-combo" method () () #f #f 55 11 55 20 ("parent" "get-parent" "get-parent~")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 64 20 64 33 ("nextmethod" "combo-text" "find-actions" "cons")}
        {Lisp-Entry "on-push-button" method () ("evt") #f #f 69 11 69 25 ("push-button" "push-button~" "get-combo" "combo" "let" "evt")}
        {Lisp-Entry "return-press" method (override) ("key") #f #f 79 20 79 32 ("return" "get-combo" "call-content-change" "call-content-change~" "key")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 88 20 88 35 ("selectable?")}
        {Lisp-Entry "mouse-enter" method (override) () #f #f 92 20 92 31 ("get-pick" "get-pick~" "enter-child" "enter-child~" "get-combo" "combo" "let" "surrogate" "unless" "nextmethod" "selectable?" "if")}
        {Lisp-Entry "mouse-leave" method (override) () #f #f 100 20 100 31 ("get-pick" "get-pick~" "leave-child" "leave-child~" "get-combo" "combo" "let" "surrogate" "unless" "nextmethod" "selectable?" "if")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 108 20 108 30 ("get-pick" "get-pick~" "child-down" "child-down~" "get-combo" "combo" "let" "nextmethod" "selectable?" "if" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 115 20 115 27 ("get-pick" "get-pick~" "child-up" "child-up~" "get-combo" "combo" "let" "nextmethod" "selectable?" "if" "rest" "pos")}
        {Lisp-Entry "close-popups" method (override) ("(event: event #f)" "(all?: all? #f)" "(exclude: exclude #f)") #f #f 127 20 127 32 ("invalidate-view" "nextmethod" "double-click" "mouse-down" "memq?" "not" "choose" "get-combo" "get-state" "get-state~" "neq?" "or" "when" "exclude" "exclude:" "all?" "all?:" "event" "event:")}
        {Lisp-Entry "auto-complete?" method (override) () #f #f 138 20 138 34 ("get-combo" "get-complete?" "get-complete?~")}
        {Lisp-Entry "completion-name" method (override) ("pos") #f #f 142 20 142 35 ("0" "Cell" "Range$Cell$" "new" "get-string" "get-line" "get-line~" "line" "when" "previous-cell" "prev" "let" "get-end" "has-selection?" "if" "get-char" "syntax" "text-constituent?" "text-constituent?~" "unless" "pos")}
        {Lisp-Entry "complete-name?" method (override) ("size") #f #f 150 20 150 34 ("1" ">=" "size")}
        {Lisp-Entry "symbol-completions" method (override) ("name") #f #f 154 20 154 38 ("di=?" "test:" "complete" "complete~" "Symbol-Completer" "new" "completer" "present-choice" "present-choice~" "choice" "lambda" "map" "domain" "get-choices" "get-choices~" "choices" "get-combo" "combo" "let*" "name")}
        {Lisp-Entry "completions-prefix" method (override) ("completions") #f #f 162 20 162 38 ("di=?" "test:" "prefix" "completions")}}}})
"Combo-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Combo-View.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.ui.view.Combo-View" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Combo-View" class (undocumented) ((extends . "View")) #f #f 45 20 45 30 ("inactive" "explicit" "pick" "View")
        {Lisp-Entry "kind" property () ((initialize . "'pick") (accessors . "explicit")) #f #f 48 12 48 16 ()}
        {Lisp-Entry "state" slot () ((initialize . "'inactive")) #f #f 51 8 51 13 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("on-pick" ":form" "Event-Handler" "action-handler:" "pick" "name:" "Combo-Button" "<Combo-Button>" "install" "<install>")}
        {Lisp-Entry "get-body" method (public) () #f #f 64 18 64 26 ("body" "locate")}
        {Lisp-Entry "get-pick" method (public) () #f #f 68 18 68 26 ("pick" "locate")}
        {Lisp-Entry "get-kind" method (public) () #f #f 72 18 72 26 ("kind")}
        {Lisp-Entry "set-kind" method (public) ("value") #f #f 76 18 76 26 ("invalidate-view" "get-pick" "set-enabled?" "set-enabled?~" "eq?" "when" "set!" "error" "choose" "pick" "kind" "memq?" "not" "if" "value")}
        {Lisp-Entry "get-state" method (public) () #f #f 85 18 85 27 ("state")}
        {Lisp-Entry "set-state" method (public) ("value") #f #f 89 18 89 27 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "picker-view?" method () ("view") #f #f 99 11 99 23 ("or" "eq?" "get-selectable?" "get-selectable?~" "if" "get-pick" "pick" "get-body" "text" "let" "view")}
        {Lisp-Entry "on-pick" method (package) ("evt") #f #f 113 19 113 26 ("button-action" "evt")}
        {Lisp-Entry "button-action" method (protected virtual) () #f #f 117 29 117 42 ()}
        {Lisp-Entry "push-button" method (public) () #f #f 121 18 121 29 ("inactive" "button-action" "pushed" "set-state" "begin" "unwind-protect")}
        {Lisp-Entry "child-state" method (public) ("child") #f #f 134 18 134 29 ("else" "pushed" "pick" "highlighted" "body" "out-choose" "choose-failed" "choose" "state" "case" "get-name" "get-name~" "name" "let" "child")}
        {Lisp-Entry "highlight-pick?" method (public virtual) () #f #f 141 26 141 41 ()}
        {Lisp-Entry "inner?" method (override) ("view") #f #f 150 20 150 26 ("children" "memq?" "view")}
        {Lisp-Entry "popup-destroy" method (override) ("popup") #f #f 159 20 159 33 ("invalidate-view" "inactive" "out-choose" "highlighted" "set-state" "choose" "state" "case" "popup")}
        {Lisp-Entry "layout" method (override) () #f #f 171 20 171 26 ("9" "22" "Dimension" "set-size" "set-size~" "0" "Point" "set-position" "set-position~" "get-pick" "pick" "get-body" "body" "let")}
        {Lisp-Entry "enter-child" method (public) ("child") #f #f 185 18 185 29 ("invalidate-view" "choose" "out-choose" "pushed" "out-pushed" "highlighted" "set-state" "inactive" "state" "case" "get-enabled?" "get-enabled?~" "when" "child")}
        {Lisp-Entry "leave-child" method (public) ("child") #f #f 194 18 194 29 ("invalidate-view" "out-choose" "choose" "out-pushed" "pushed" "inactive" "set-state" "highlighted" "state" "case" "child")}
        {Lisp-Entry "child-down" method (public) ("child") #f #f 202 18 202 28 ("invalidate-view" "close-popups" "choose" "highlighted" "state" "pick" "down" "down~" "pushed" "set-state" "body" "get-name" "get-name~" "case" "view-enabled?" "when" "child")}
        {Lisp-Entry "child-up" method (public) ("child") #f #f 219 18 219 26 ("invalidate-view" "out-pushed" "highlighted" "choose-failed" "pushed" "state" "case" "inactive" "set-state" "choose" "kind" "eq?" "if" "up" "up~" "unwind-protect" "view-enabled?" "when" "child")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 236 25 236 45 ("Combo-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 245 11 245 17 ()
        {Lisp-Entry "import" import () () #f #f 248 1 248 7 ("jazz.designer")}
        {Lisp-Entry "Combo-View-Descriptor" class () ((extends . "View-Descriptor")) #f #f 251 7 251 28 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 254 3 254 7 ("title:" "kind" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Combo-Widget"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "widget" "Combo-Widget.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.widget.Combo-Widget" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Combo-Widget" class (undocumented) ((extends . "Border-View")) #f #f 45 20 45 32 ("Border-View")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("box" "name:" "Combo-Box" "<Combo-Box>" "Entry-Border" "Border-View" "<Border-View>" "Medium" "Color" "border-color:" "1" "2" "Rect" "border-insets:" "install" "<install>")}
        {Lisp-Entry "default-size" method (override) () #f #f 54 20 54 32 ("22" "150" "Dimension")}}}})
"Command-Shell"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "command" "Command-Shell.jazz"} 243479599. jazz
    {Lisp-Entry "jazz.ui.command.Command-Shell" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Command-Shell" class () ((extends . "Layout-View")) #f #f 45 7 45 20 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("-2" "justification:" "White" "Color" "background:" "15" "100" "Dimension" "size:" "east" "status" "Label-View" "<Label-View>" "text" "Command-Text-View" "<Command-Text-View>" "fill" "content" "!" "<!>" "vscroll?:" "hscroll?:" "center" "location:" "scroller" "name:" "Scroller-View" "<Scroller-View>" "border" "layout-type:" "install" "<install>")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 56 20 56 27 ("get-document-controller" "get-document-controller~" "set-tool?" "set-tool?~" "scroller" "set-client" "set-client~" "locate" "text" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-text" method (public) () #f #f 68 18 68 26 ("text" "scroller" "locate" "get-content" "get-content~" "child" "child~")}
        {Lisp-Entry "get-string-content" method (public) () #f #f 72 18 72 36 ("get-text" "get-string-content" "get-string-content~")}}}})
"Command-Text-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "command" "Command-Text-Preferences.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.command.Command-Text-Preferences" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Command-Text-Preferences" class () ((extends . "Code-Text-Preferences")) #f #f 46 7 46 31 ("Code-Text-Preferences")
        {Lisp-Entry "separator-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 27 ()}
        {Lisp-Entry "get-separator-style" accessor () () #f #f 49 52 49 60 ()}
        {Lisp-Entry "set-separator-style" accessor () () #f #f 49 52 49 60 ()}
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("Command-Separator" "Base" "Text-Style" "separator-style:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 63 25 63 45 ("Command-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 72 11 72 17 ()
        {Lisp-Entry "import" import () () #f #f 75 1 75 7 ("jazz.designer")}
        {Lisp-Entry "Command-Text-Preferences-Descriptor" class () ((extends . "Document-Preferences-Descriptor")) #f #f 78 7 78 42 ("Document-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 81 3 81 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "separator-style" "categorized:" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Command-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "command" "Command-Text-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.command.Command-Text-View" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.search" "jazz.ui" "jazz.system" "jazz.project" "jazz.jml" "jazz.io" "jazz.ide" "jazz.graphic")}
      {Lisp-Entry "Command-Text-View" class () ((extends . "IDE-Text-View")) #f #f 51 7 51 24 ("IDE-Text-View")
        {Lisp-Entry "mode" slot () ((initialize . "#f") (accessors . "generate")) #f #f 54 8 54 12 ()}
        {Lisp-Entry "get-mode" accessor () () #f #f 54 49 54 57 ()}
        {Lisp-Entry "set-mode" accessor () () #f #f 54 49 54 57 ()}
        {Lisp-Entry "client" slot () ((initialize . "#f") (getter . "generate")) #f #f 55 8 55 14 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 55 46 55 54 ()}
        {Lisp-Entry "client-selection" slot () ((initialize . "#f") (getter . "generate")) #f #f 56 8 56 24 ()}
        {Lisp-Entry "get-client-selection" accessor () () #f #f 56 46 56 54 ()}
        {Lisp-Entry "client-position" slot () ((initialize . "#f") (getter . "generate")) #f #f 57 8 57 23 ()}
        {Lisp-Entry "get-client-position" accessor () () #f #f 57 46 57 54 ()}
        {Lisp-Entry "client-restore" slot () ((initialize . "#f") (accessors . "generate")) #f #f 58 8 58 22 ()}
        {Lisp-Entry "get-client-restore" accessor () () #f #f 58 49 58 57 ()}
        {Lisp-Entry "set-client-restore" accessor () () #f #f 58 49 58 57 ()}
        {Lisp-Entry "previous-mode" slot () ((initialize . "#f") (accessors . "generate")) #f #f 59 8 59 21 ()}
        {Lisp-Entry "get-previous-mode" accessor () () #f #f 59 49 59 57 ()}
        {Lisp-Entry "set-previous-mode" accessor () () #f #f 59 49 59 57 ()}
        {Lisp-Entry "form" form () () #f #f 62 3 62 7 ("tooltip-text:" "tooltip?:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "show-unfocused-selection?:" "focus-selects-all?:" "install" "<install>")}
        {Lisp-Entry "preferences" method (override) () #f #f 73 20 73 31 ("command-text" "documents" "get-preferences")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 77 20 77 27 ("get-separator-style" "get-separator-style~" "Separator" "add-style" "preferences" "pref" "let" "model" "set-propagate-styles?" "set-propagate-styles?~" "nextmethod" "rest")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 84 20 84 26 ("default-mode" "mode" "set!" "nextmethod" "rest")}
        {Lisp-Entry "component-alias" method (override) ("name") #f #f 89 20 89 35 ("nextmethod" "else" "mode" ":mode" "case" "name")}
        {Lisp-Entry "status-label" method () () #f #f 95 11 95 23 ("status" "creator" "child" "child~")}
        {Lisp-Entry "set-status" method () ("title") #f #f 99 11 99 21 ("status-label" "set-title" "set-title~" "title")}
        {Lisp-Entry "clear-status" method () () #f #f 103 11 103 23 ("set-status")}
        {Lisp-Entry "setup-client" method () () #f #f 112 11 112 23 ("client-selection" "get-focus" "client" "set!")}
        {Lisp-Entry "setup-search-client" method () ("explicit-client") #f #f 117 11 117 30 ("get-scrolled-position" "get-scrolled-position~" "client-position" "get-selection" "get-selection~" "client-selection" "or" "client" "set!" "in-cell-edit?" "not" "Text-View" "is?" "and" "when" "get-focus" "focus" "let" "determine-client" "define" "explicit-client")}
        {Lisp-Entry "cleanup-client" method () () #f #f 128 11 128 25 ("client-selection" "client" "set!")}
        {Lisp-Entry "restore-client" method () () #f #f 133 11 133 25 ("set!" "client-restore" "when")}
        {Lisp-Entry "preserve-mode" method () () #f #f 139 11 139 24 ("mode" "previous-mode" "set!")}
        {Lisp-Entry "focus-lose" method (override) () #f #f 148 20 148 30 ("model" "empty-text" "empty-text~" "clear-status" "clear-user-message" "set-mode-default" "cleanup-client" "mode" "cleanup" "cleanup~" "nextmethod")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 158 20 158 33 ("nextmethod" "mode" "mode-actions" "mode-actions~" "cons")}
        {Lisp-Entry "key-press" method (override) ("key") #f #f 168 20 168 29 ("mode" "key-press" "key-press~" "nextmethod" "key")}
        {Lisp-Entry "backspace-press" method (override) ("key" "(word?: word? #f)") #f #f 173 20 173 35 ("mode" "backspace-press" "backspace-press~" "nextmethod" "word?" "word?:" "key")}
        {Lisp-Entry "tab-press" method (override) ("key" "modifiers") #f #f 178 20 178 29 ("shift-key?" "navigate-field" "modifiers" "key")}
        {Lisp-Entry "next-page" method (override) ("evt") #f #f 182 20 182 29 ("mode" "next-page" "next-page~" "evt")}
        {Lisp-Entry "prior-page" method (override) ("evt") #f #f 186 20 186 30 ("mode" "prior-page" "prior-page~" "evt")}
        {Lisp-Entry "get-constituent-test" method (override) () #f #f 190 20 190 40 ("nextmethod" "mode" "get-constituent-test" "get-constituent-test~" "or")}
        {Lisp-Entry "auto-complete?" method (override) () #f #f 195 20 195 34 ("mode" "auto-complete?" "auto-complete?~")}
        {Lisp-Entry "auto-complete-char?" method (override) ("key" "last") #f #f 199 20 199 39 ("nextmethod" "default" "eq?" "if" "mode" "auto-complete-char?" "auto-complete-char?~" "value" "let" "last" "key")}
        {Lisp-Entry "favorite-completions?" method (override) () #f #f 206 20 206 41 ("nextmethod" "default" "eq?" "if" "mode" "favorite-completions?" "favorite-completions?~" "value" "let")}
        {Lisp-Entry "complete-name?" method (override) ("size") #f #f 213 20 213 34 ("nextmethod" "default" "eq?" "if" "mode" "complete-name?" "complete-name?~" "value" "let" "size")}
        {Lisp-Entry "completion-name" method (override) ("pos") #f #f 220 20 220 35 ("nextmethod" "mode" "completion-name" "completion-name~" "or" "pos")}
        {Lisp-Entry "symbol-completions" method (override) ("name") #f #f 225 20 225 38 ("nextmethod" "mode" "symbol-completions" "symbol-completions~" "or" "name")}
        {Lisp-Entry "navigate-field" method () ("backward?") #f #f 235 11 235 25 ("element" "goto-field" "length" "1" "+" "-" "if" "modulo" "next" "caret-rank" "rank" "collect-fields" "fields" "let" "backward?")}
        {Lisp-Entry "first-field" method () () #f #f 242 11 242 22 ("collect-fields" "first")}
        {Lisp-Entry "second-field" method () () #f #f 246 11 246 23 ("second" "2" "length" ">=" "when" "collect-fields" "fields" "let")}
        {Lisp-Entry "first-content" method () () #f #f 252 11 252 24 ("first-field" "field-content")}
        {Lisp-Entry "second-content" method () () #f #f 256 11 256 25 ("field-content" "when" "second-field" "field" "let")}
        {Lisp-Entry "field-content" method () ("field") #f #f 262 11 262 24 ("get-end" "get-end~" "get-start" "get-start~" "first-paragraph" "get-string" "get-string~" "substring" "field")}
        {Lisp-Entry "goto-field" method () ("field") #f #f 268 11 268 21 ("get-end" "get-end~" "get-start" "get-start~" "0" "Cell" "Range$Cell$" "new" "set-selection" "field")}
        {Lisp-Entry "goto-first-field" method () () #f #f 274 11 274 27 ("first-field" "goto-field")}
        {Lisp-Entry "goto-second-field" method () () #f #f 278 11 278 28 ("insert-separator" "text-ending" "set-caret" "goto-field" "if" "second-field" "field" "let")}
        {Lisp-Entry "collect-fields" method () () #f #f 286 11 286 25 ("queue-list" "/=" "when" "separator-end" "enqueue" "text-end" "0" "iter" "Range" "new" "end" "start" "new-field" "Separator" "inherits?" "inherits?~" "separator-style?" "style" "text-style?" "get-style" "get-style~" "not" "or" "get-run" "get-run~" "run" "1" "+" "next" ">=" "if" "iterate" "get-length" "get-length~" "card" "predicate" "pos" "forward-style" "define" "new-queue" "fields" "first-paragraph" "paragraph" "let")}
        {Lisp-Entry "field-rank" method () ("fields" "pos") #f #f 318 11 318 21 ("1" "+" "cdr" "get-end" "get-end~" "get-start" "get-start~" "between?" "if" "car" "field" "0" "rank" "iter" "let" "pos" "fields")}
        {Lisp-Entry "caret-rank" method () ("fields") #f #f 326 11 326 21 ("field-rank" "get-caret" "get-col" "get-col~" "pos" "let" "fields")}
        {Lisp-Entry "insert-separator" method () () #f #f 331 11 331 27 ("Separator" "insert-styled")}
        {Lisp-Entry "select-search" method (public) ("direction" "range" "initial" "(search-result: search-result #f)" "(client: client #f)" "(highlight?: highlight? #f)" "(again?: again? #f)") #f #f 340 18 340 31 ("initial?:" "search-client" "search-client~" "select-all" "get-search" "get-search~" "get-find" "get-find~" "search-context" "search-context~" "get-target" "get-target~" "model" "set-text" "set-text~" "set-search-result" "set-search-result~" "get-client" "make-text-search-result" "or" "let" "mode" "prepare-search" "prepare-search~" "self" "push-focus" "setup-search-client" "Search-Mode" "Highlight-Mode" "if" "set-mode-search" "again?" "again?:" "highlight?" "highlight?:" "client" "client:" "search-result" "search-result:" "initial" "range" "direction")}
        {Lisp-Entry "set-mode-search" method () ("class" "direction") #f #f 352 11 352 26 ("user-message" "self" "new" "mode" "set!" "direction" "class")}
        {Lisp-Entry "select-extended" method (public) () #f #f 357 18 357 33 ("self" "push-focus" "setup-client" "set-mode-extended")}
        {Lisp-Entry "set-mode-extended" method () () #f #f 363 11 363 28 ("user-message" "self" "Extended-Mode" "new" "mode" "set!")}
        {Lisp-Entry "select-execute" method (public) () #f #f 368 18 368 32 ("self" "push-focus" "setup-client" "set-mode-execute")}
        {Lisp-Entry "set-mode-execute" method () () #f #f 374 11 374 27 ("user-message" "self" "Execute-Mode" "new" "mode" "set!")}
        {Lisp-Entry "select-mode" method (public) ("md") #f #f 379 18 379 29 ("self" "push-focus" "setup-client" "mode" "set!" "md")}
        {Lisp-Entry "set-mode-default" method () () #f #f 385 11 385 27 ("default-mode" "mode" "set!")}
        {Lisp-Entry "default-mode" method (protected virtual) () #f #f 389 29 389 41 ("self" "Execute-Mode" "new")}}
      {Lisp-Entry "Command-Mode" class () ((extends . "Object")) #f #f 398 7 398 19 ("Object")
        {Lisp-Entry "text" slot () () #f #f 401 8 401 12 ()}
        {Lisp-Entry "initialize" method (override) ("text") #f #f 404 20 404 30 ("self" "text~self" "set!" "nextmethod" "text")}
        {Lisp-Entry "get-client" method () () #f #f 409 11 409 21 ("text" "get-client" "get-client~")}
        {Lisp-Entry "get-client-selection" method () () #f #f 413 11 413 31 ("text" "get-client-selection" "get-client-selection~")}
        {Lisp-Entry "get-client-position" method () () #f #f 417 11 417 30 ("text" "get-client-position" "get-client-position~")}
        {Lisp-Entry "mode-actions" method (virtual) () #f #f 421 19 421 31 ()}
        {Lisp-Entry "key-press" method (virtual) ("key") #f #f 425 19 425 28 ("key")}
        {Lisp-Entry "backspace-press" method (virtual) ("key" "(word?: word? #f)") #f #f 429 19 429 34 ("word?" "word?:" "key")}
        {Lisp-Entry "next-page" method (virtual) () #f #f 433 19 433 28 ()}
        {Lisp-Entry "prior-page" method (virtual) () #f #f 437 19 437 29 ()}
        {Lisp-Entry "get-constituent-test" method (virtual) () #f #f 441 19 441 39 ()}
        {Lisp-Entry "auto-complete?" method (virtual) () #f #f 445 19 445 33 ()}
        {Lisp-Entry "auto-complete-char?" method (virtual) ("key" "last") #f #f 449 19 449 38 ("default" "last" "key")}
        {Lisp-Entry "favorite-completions?" method (virtual) () #f #f 453 19 453 40 ("default")}
        {Lisp-Entry "complete-name?" method (virtual) ("size") #f #f 457 19 457 33 ("default" "size")}
        {Lisp-Entry "completion-name" method (virtual) ("pos") #f #f 461 19 461 34 ("pos")}
        {Lisp-Entry "symbol-completions" method (virtual) ("name") #f #f 465 19 465 37 ("name")}
        {Lisp-Entry "finish" method (virtual) () #f #f 469 19 469 25 ("cleanup")}
        {Lisp-Entry "cancel" method (virtual) () #f #f 473 19 473 25 ("cleanup")}
        {Lisp-Entry "cleanup" method (virtual) ("(lose-focus? #f)") #f #f 477 19 477 26 ("clear-user-message" "pop-focus" "unless" "when" "get-client" "client" "let" "text" "restore-client" "restore-client~" "lose-focus?")}}
      {Lisp-Entry "Search-Mode" class () ((extends . "Command-Mode")) #f #f 491 7 491 18 ("equal?" "test:" "make-table" "Command-Mode")
        {Lisp-Entry "direction" slot () ((initialize . "#f")) #f #f 494 8 494 17 ()}
        {Lisp-Entry "search-result" slot () ((initialize . "#f")) #f #f 495 8 495 21 ()}
        {Lisp-Entry "last-range" slot () ((initialize . "#f")) #f #f 496 8 496 18 ()}
        {Lisp-Entry "last-found?" slot () ((initialize . "#t")) #f #f 497 8 497 19 ()}
        {Lisp-Entry "prefixes" slot () ((initialize . "(make-table test: equal?)")) #f #f 498 8 498 16 ()}
        {Lisp-Entry "found-style" slot () ((initialize . "#f")) #f #f 499 8 499 19 ()}
        {Lisp-Entry "highlight-style" slot () ((initialize . "#f")) #f #f 500 8 500 23 ()}
        {Lisp-Entry "replace-style" slot () ((initialize . "#f")) #f #f 501 8 501 21 ()}
        {Lisp-Entry "boundary-style" slot () ((initialize . "#f")) #f #f 502 8 502 22 ()}
        {Lisp-Entry "initialize" method (override) ("text" "direction") #f #f 505 20 505 30 ("self" "direction~self" "set!" "nextmethod" "direction" "text")}
        {Lisp-Entry "prepare-search" method () ("range") #f #f 510 11 510 25 ("Boundary" "boundary-style" "frame:" "Light-Red" "Replace" "replace-style" "Highlight" "highlight-style" "Color" "highlight:" "get-styles-domain" "get-styles-domain~" "domain:" "Base" "base:" "Text-Style" "new" "Found" "add-style" "add-style~" "found-style" "or" "if" "last-range" "set!" "get-model" "get-model~" "Text-View" "is?" "and" "model" "get-client-selection" "client-selection" "get-client" "client" "let" "range")}
        {Lisp-Entry "mode-actions" method (override) () #f #f 521 20 521 32 ("search-mode" "find-actions")}
        {Lisp-Entry "key-press" method (override) ("key") #f #f 525 20 525 29 ("direction" "search-client" "key")}
        {Lisp-Entry "backspace-press" method (override) ("key" "(word?: word? #f)") #f #f 529 20 529 35 ("prefix?:" "direction" "search-client" "word?" "word?:" "key")}
        {Lisp-Entry "next-page" method (override) () #f #f 533 20 533 29 ("again?:" "forward" "search-client")}
        {Lisp-Entry "prior-page" method (override) () #f #f 537 20 537 30 ("again?:" "backward" "search-client")}
        {Lisp-Entry "set-search-result" method () ("result") #f #f 541 11 541 28 ("search-result" "set!" "result")}
        {Lisp-Entry "set-boundaries" method () ("range") #f #f 545 11 545 25 ("rehighlight-search" "get-end" "get-end~" "set-ending" "set-ending~" "get-start" "get-start~" "and" "search-result" "set-beginning" "set-beginning~" "range")}
        {Lisp-Entry "get-search" method () () #f #f 551 11 551 21 ("search-result" "get-search" "get-search~")}
        {Lisp-Entry "get-context" method () () #f #f 555 11 555 22 ("get-search" "get-find" "get-find~" "get-contexts" "get-contexts~" "car")}
        {Lisp-Entry "set-context" method () ("context") #f #f 560 11 560 22 ("get-search" "set-find" "set-find~" "context")}
        {Lisp-Entry "get-whole-words?" method () () #f #f 564 11 564 27 ("get-context" "get-whole-words?" "get-whole-words?~")}
        {Lisp-Entry "select-whole-words?" method () ("whole-words?") #f #f 568 11 568 30 ("get-context" "set-whole-words?" "set-whole-words?~" "whole-words?")}
        {Lisp-Entry "get-ignore-case?" method () () #f #f 572 11 572 27 ("get-context" "get-ignore-case?" "get-ignore-case?~")}
        {Lisp-Entry "select-ignore-case?" method () ("ignore-case?") #f #f 576 11 576 30 ("get-context" "set-ignore-case?" "set-ignore-case?~" "ignore-case?")}
        {Lisp-Entry "get-regexp?" method () () #f #f 580 11 580 22 ("get-context" "get-regexp?" "get-regexp?~")}
        {Lisp-Entry "select-regexp?" method () ("regexp?") #f #f 584 11 584 25 ("get-context" "set-regexp?" "set-regexp?~" "regexp?")}
        {Lisp-Entry "on-whole-words" method () ("evt") #f #f 588 11 588 25 ("rehighlight-search" "if" "user-message" "get-whole-words?" "not" "select-whole-words?" "evt")}
        {Lisp-Entry "on-ignore-case" method () ("evt") #f #f 594 11 594 25 ("rehighlight-search" "if" "user-message" "get-ignore-case?" "not" "select-ignore-case?" "evt")}
        {Lisp-Entry "on-regexp" method () ("evt") #f #f 600 11 600 20 ("rehighlight-search" "if" "user-message" "get-regexp?" "not" "select-regexp?" "evt")}
        {Lisp-Entry "on-forward" method () ("evt") #f #f 606 11 606 21 ("again?:" "forward" "search-client" "select-empty-search" "not" "again?" "let" "evt")}
        {Lisp-Entry "on-backward" method () ("evt") #f #f 611 11 611 22 ("again?:" "backward" "search-client" "select-empty-search" "not" "again?" "let" "evt")}
        {Lisp-Entry "select-empty-search" method () () #f #f 616 11 616 30 ("text-ending" "text-ending~" "set-caret" "set-caret~" "set-string-content" "set-string-content~" "set-context" "set-previous-mode" "set-previous-mode~" "get-context~" "previous-context" "Search-Mode" "is?" "text" "get-previous-mode" "get-previous-mode~" "previous" "get-target" "get-target~" "empty-string?" "when" "get-context" "context" "let")}
        {Lisp-Entry "on-current" method () ("evt") #f #f 629 11 629 21 ("cancel" "evt")}
        {Lisp-Entry "on-widen" method () ("evt") #f #f 633 11 633 19 ("direction" "search-client" "text" "insert-string" "insert-string~" "bell" "empty-string?" "if" "Range$Cell$" "new" "range-first-string" "range-first-string~" "add" "next-word" "next-word~" "extend" "get-end" "get-end~" "end" "get-selection" "get-selection~" "selection" "get-client" "client" "let" "evt")}
        {Lisp-Entry "on-outer-boundaries" method () ("evt") #f #f 645 11 645 30 ("user-message" "set-boundaries" "bell" "not" "if" "outer-range" "outer-range~" "outer" "get-selection" "get-selection~" "search-result" "get-boundaries" "get-boundaries~" "or" "range" "get-client" "client" "let" "evt")}
        {Lisp-Entry "on-declaration-boundaries" method () ("evt") #f #f 656 11 656 36 ("user-message" "set-boundaries" "declaration-name" "name" "receive" "bell" "not" "if" "outer-declaration-range" "outer-declaration-range~" "outer" "get-selection" "get-selection~" "search-result" "get-boundaries" "get-boundaries~" "or" "range" "get-client" "client" "let" "evt")}
        {Lisp-Entry "on-buffer-boundaries" method () ("evt") #f #f 668 11 668 31 ("user-message" "set-boundaries" "evt")}
        {Lisp-Entry "on-center-caret" method () ("evt") #f #f 673 11 673 26 ("get-client" "center-caret" "center-caret~" "evt")}
        {Lisp-Entry "on-prior" method () ("evt") #f #f 677 11 677 19 ("get-client" "prior-page" "prior-page~" "evt")}
        {Lisp-Entry "on-next" method () ("evt") #f #f 681 11 681 18 ("get-client" "next-page" "next-page~" "evt")}
        {Lisp-Entry "on-home" method () ("evt") #f #f 685 11 685 18 ("finish" "get-client" "on-home" "on-home~" "evt")}
        {Lisp-Entry "on-end" method () ("evt") #f #f 690 11 690 17 ("finish" "get-client" "on-end" "on-end~" "evt")}
        {Lisp-Entry "on-highlight" method () ("evt") #f #f 695 11 695 23 ("highlight-current" "evt")}
        {Lisp-Entry "on-persist-highlights" method () ("evt") #f #f 699 11 699 32 ("persist-highlights" "evt")}
        {Lisp-Entry "highlight-current" method (protected virtual) () #f #f 703 29 703 46 ("cancel" "persist-highlights")}
        {Lisp-Entry "persist-highlights" method (protected virtual) () #f #f 708 29 708 47 ("get-highlights" "get-highlights~" "get-range" "get-range~" "push-style" "push-style~" "highlight-style" "found-style" "get-style" "get-style~" "inherits?" "inherits?~" "or" "when" "highlight" "lambda" "for-each" "Reference" "locate-style" "locate-style~" "reference-style" "get-model" "get-model~" "model" "get-client" "client" "let")}
        {Lisp-Entry "on-goto-find" method () ("evt") #f #f 719 11 719 23 ("text" "goto-first-field" "goto-first-field~" "evt")}
        {Lisp-Entry "on-goto-replace" method () ("evt") #f #f 723 11 723 26 ("text" "goto-second-field" "goto-second-field~" "evt")}
        {Lisp-Entry "reset-search" method () ("range") #f #f 727 11 727 23 ("equal?" "test:" "make-table" "prefixes" "last-found?" "last-range" "set!" "range")}
        {Lisp-Entry "on-find-forward" method () ("evt") #f #f 733 11 733 26 ("bell" "follow-forward" "follow-forward~" "unless" "rehighlight-search" "get-selection" "get-selection~" "reset-search" "begin" "follow?:" "client:" "search-result" "find-forward" "find-forward~" "if" "get-client" "client" "let" "evt")}
        {Lisp-Entry "on-find-backward" method () ("evt") #f #f 743 11 743 27 ("bell" "follow-backward" "follow-backward~" "unless" "rehighlight-search" "get-selection" "get-selection~" "reset-search" "begin" "follow?:" "client:" "search-result" "find-backward" "find-backward~" "if" "get-client" "client" "let" "evt")}
        {Lisp-Entry "on-replace" method () ("evt") #f #f 753 11 753 21 ("bell" "get-client" "client:" "search-result" "replace-selection" "replace-selection~" "unless" "lambda" "with-rehighlight-search" "select-replace" "unimplemented-replace" "evt")}
        {Lisp-Entry "on-replace&find-forward" method () ("evt") #f #f 762 11 762 34 ("bell" "get-client" "client:" "search-result" "replace-selection&find-forward" "replace-selection&find-forward~" "unless" "lambda" "with-rehighlight-search" "select-replace" "unimplemented-replace" "evt")}
        {Lisp-Entry "on-replace-all" method () ("evt") #f #f 771 11 771 25 ("get-client" "client:" "search-result" "replace-all" "replace-all~" "lambda" "with-rehighlight-search" "select-replace" "unimplemented-replace" "evt")}
        {Lisp-Entry "unimplemented-replace" method () () #f #f 779 11 779 32 ("throw-cancel" "message-box")}
        {Lisp-Entry "select-replace" method () () #f #f 784 11 784 25 ("list" "Replace" "new" "get-search" "set-replace" "set-replace~" "when" "text" "second-content" "second-content~" "replace" "let")}
        {Lisp-Entry "on-finish" method () ("evt") #f #f 790 11 790 20 ("finish" "second-content" "second-content~" "replace-all" "1" "caret-rank" "caret-rank~" "=" "when" "text" "collect-fields" "collect-fields~" "fields" "let" "evt")}
        {Lisp-Entry "on-cancel" method () ("evt") #f #f 797 11 797 20 ("cancel" "evt")}
        {Lisp-Entry "search-client" method () ("direction" "(initial?: initial? #f)" "(prefix?: prefix? #t)" "(again?: again? #f)") #f #f 801 11 801 24 ("remove-highlights" "1" "+" "format" "set-status" "set-status~" "length" "total" "cdr" "car" "cell=?" "y" "x" "test:" "cons" "find" "rank" "clear-status" "clear-status~" "bell" "last-found?" "get-target" "get-target~" "not" "get-ending" "get-ending~" "search-result" "get-beginning" "get-beginning~" "second-content" "second-content~" "text" "first-content" "first-content~" "content" "get-model" "get-model~" "Text-View" "is?" "get-client" "text-regular-search-all" "text-regular-search-all~" "replace-style" "whole-words?:" "make-search-context" "empty-string?" "repl" "highlight-replace" "set-selection" "set-selection~" "found-style" "highlight-style" "nu=?" "unless" "end" "start" "for-each" "all" "highlight-find" "previous-cell" "previous-cell~" "next-cell" "next-cell~" "boundary-style" "Text-Highlight" "add-highlight" "add-highlight~" "add-boundary-highlight" "client" "highlight-boundary" "set!" "Range$Cell$" "new" "to" "from" "bind" "table-clear" ">=" "when" "prefix" "lambda" "iterate-table-safe" "card" "table-set!" "reset-prefixes" "add-prefix" "reversed?:" "end:" "start:" "text-regular-search" "text-regular-search~" "found" "eq?" "reversed?" "cardinality" "nu+" "backward" "get-start" "get-start~" "get-end" "get-end~" "if" "forward" "case" "pos" "last-range" "prefixes" "table-ref" "and" "or" "range" "ending" "beginning" "model" "search-target" "set-regexp" "set-regexp~" "set-target" "set-target~" "get-context" "context" "let" "target" "setup-context" "define" "again?" "again?:" "prefix?" "prefix?:" "initial?" "initial?:" "direction")}
        {Lisp-Entry "replace-all" method () ("repl") #f #f 900 11 900 22 ("end:" "start:" "text-regular-search-all" "text-regular-search-all~" "list" "replace" "replace~" "Range$Cell$" "new" "range" "end" "start" "bind" "found" "for-each-reversed" "lambda" "get-undoer" "get-undoer~" "with-atomic-undo" "with-atomic-undo~" "get-model" "get-model~" "model" "get-ending" "get-ending~" "ending" "search-result" "get-beginning" "get-beginning~" "beginning" "get-client" "client" "get-context" "context" "let" "repl")}
        {Lisp-Entry "rehighlight-search" method () () #f #f 915 11 915 29 ("direction" "search-client")}
        {Lisp-Entry "with-rehighlight-search" method () ("proc") #f #f 919 11 919 34 ("rehighlight-search" "get-client" "get-selection" "get-selection~" "reset-search" "remove-highlights" "proc")}
        {Lisp-Entry "remove-highlights" method () () #f #f 926 11 926 28 ("remove-all-highlights" "remove-all-highlights~" "Text-View" "is?" "when" "get-client" "client" "let")}
        {Lisp-Entry "finish" method (override) () #f #f 932 20 932 26 ("cleanup")}
        {Lisp-Entry "cancel" method (override) () #f #f 936 20 936 26 ("cleanup" "get-client-position" "scroll-to" "scroll-to~" "ensure-displayed?:" "set-selection" "set-selection~" "when" "get-client-selection" "client-selection" "get-client" "client" "let")}
        {Lisp-Entry "cleanup" method (override) ("(lose-focus? #f)") #f #f 945 20 945 27 ("clear-user-message" "pop-focus" "unless" "remove-highlights" "when" "get-client" "client" "let" "preserve-mode" "preserve-mode~" "text" "restore-client" "restore-client~" "lose-focus?")}}
      {Lisp-Entry "Highlight-Mode" class () ((extends . "Search-Mode")) #f #f 961 7 961 21 ("Search-Mode")
        {Lisp-Entry "mode-actions" method (override) () #f #f 964 20 964 32 ("highlight-mode" "find-actions")}
        {Lisp-Entry "highlight-current" method (override) () #f #f 968 20 968 37 ("cancel")}
        {Lisp-Entry "finish" method (override) () #f #f 972 20 972 26 ("cleanup" "persist-highlights")}}
      {Lisp-Entry "Extended-Mode" class () ((extends . "Command-Mode")) #f #f 982 7 982 20 ("Command-Mode")
        {Lisp-Entry "mode-actions" method (override) () #f #f 985 20 985 32 ("extended-mode" "find-actions")}
        {Lisp-Entry "on-find-file" method () ("evt") #f #f 989 11 989 23 ("user-message" "refresh-focus-actions" "text-ending" "text-ending~" "set-caret" "set-caret~" "current-directory" "standardize-filename" "set-text" "set-text~" "Find-File-Mode" "new" "set-mode" "set-mode~" "text" "get-model" "get-model~" "model" "let" "evt")}
        {Lisp-Entry "on-find-filename" method () ("evt") #f #f 998 11 998 27 ("user-message" "refresh-focus-actions" "set-text" "set-text~" "Find-Filename-Mode" "new" "set-mode" "set-mode~" "text" "get-model" "get-model~" "model" "let" "evt")}
        {Lisp-Entry "on-find-buffer" method () ("evt") #f #f 1006 11 1006 25 ("user-message" "refresh-focus-actions" "Find-Buffer-Mode" "new" "text" "set-mode" "set-mode~" "evt")}
        {Lisp-Entry "on-save-buffer" method () ("evt") #f #f 1012 11 1012 25 ("on-save" "on-save~" "bell" "not" "if" "current-document" "guest" "let" "finish" "evt")}
        {Lisp-Entry "on-save-buffer-as" method () ("evt") #f #f 1020 11 1020 28 ("on-save-as" "on-save-as~" "bell" "not" "if" "current-document" "guest" "let" "finish" "evt")}
        {Lisp-Entry "on-save-all" method () ("evt") #f #f 1028 11 1028 22 ("on-save-all" "on-save-all~" "get-application" "appl" "let" "finish" "evt")}
        {Lisp-Entry "on-revert-buffer" method () ("evt") #f #f 1034 11 1034 27 ("on-revert-saved" "on-revert-saved~" "bell" "not" "if" "current-document" "guest" "let" "finish" "evt")}
        {Lisp-Entry "on-kill-buffer" method () ("evt") #f #f 1042 11 1042 25 ("on-close" "on-close~" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-delete-stage" method () ("evt") #f #f 1047 11 1047 26 ("finish" "delete-stage" "evt")}
        {Lisp-Entry "on-delete-other-stages" method () ("evt") #f #f 1052 11 1052 33 ("finish" "delete-other-stages" "evt")}
        {Lisp-Entry "on-split-stage-vertically" method () ("evt") #f #f 1057 11 1057 36 ("finish" "split-stage-vertically" "evt")}
        {Lisp-Entry "on-split-stage-horizontally" method () ("evt") #f #f 1062 11 1062 38 ("finish" "split-stage-horizontally" "evt")}
        {Lisp-Entry "on-quit" method () ("evt") #f #f 1067 11 1067 18 ("on-quit-application" "on-quit-application~" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-start-recording" method () ("evt") #f #f 1072 11 1072 29 ("on-start-recording" "on-start-recording~" "get-application" "get-recorder" "get-recorder~" "recorder" "let" "finish" "evt")}
        {Lisp-Entry "on-stop-recording" method () ("evt") #f #f 1078 11 1078 28 ("on-stop-recording" "on-stop-recording~" "get-application" "get-recorder" "get-recorder~" "recorder" "let" "finish" "evt")}
        {Lisp-Entry "on-play-recording" method () ("evt") #f #f 1084 11 1084 28 ("on-play-recording" "on-play-recording~" "get-application" "get-recorder" "get-recorder~" "recorder" "let" "finish" "evt")}
        {Lisp-Entry "on-downcase-selection" method () ("evt") #f #f 1090 11 1090 32 ("on-downcase-selection" "on-downcase-selection~" "bell" "Text-View" "is-not?" "if" "current-document" "text" "let" "finish" "evt")}
        {Lisp-Entry "on-upcase-selection" method () ("evt") #f #f 1098 11 1098 30 ("on-upcase-selection" "on-upcase-selection~" "bell" "Text-View" "is-not?" "if" "current-document" "text" "let" "finish" "evt")}
        {Lisp-Entry "on-select-all" method () ("evt") #f #f 1106 11 1106 24 ("on-select-all" "on-select-all~" "bell" "not" "if" "current-document" "view" "let" "finish" "evt")}
        {Lisp-Entry "on-finish" method () ("evt") #f #f 1114 11 1114 20 ("finish" "evt")}
        {Lisp-Entry "on-cancel" method () ("evt") #f #f 1118 11 1118 20 ("cancel" "evt")}}
      {Lisp-Entry "Find-Mode" class () ((extends . "Command-Mode")) #f #f 1127 7 1127 16 ("Command-Mode")
        {Lisp-Entry "mode-actions" method (override) () #f #f 1130 20 1130 32 ("find-mode" "find-actions")}
        {Lisp-Entry "get-constituent-test" method (override) () #f #f 1134 20 1134 40 ("alphanumeric?")}
        {Lisp-Entry "auto-complete?" method (override) () #f #f 1138 20 1138 34 ()}
        {Lisp-Entry "auto-complete-char?" method (override) ("key" "last") #f #f 1142 20 1142 39 ("memv?" "last" "key")}
        {Lisp-Entry "favorite-completions?" method (override) () #f #f 1146 20 1146 41 ()}
        {Lisp-Entry "complete-name?" method (override) ("size") #f #f 1150 20 1150 34 ("1" ">=" "size")}
        {Lisp-Entry "completion-name" method (override) ("pos") #f #f 1154 20 1154 35 ("0" "Cell" "Range$Cell$" "new" "text" "get-string" "get-string~" "pos")}
        {Lisp-Entry "on-finish" method () ("evt") #f #f 1158 11 1158 20 ("finish" "evt")}
        {Lisp-Entry "on-cancel" method () ("evt") #f #f 1162 11 1162 20 ("cancel" "evt")}
        {Lisp-Entry "cancel" method (override) () #f #f 1166 20 1166 26 ("cleanup")}
        {Lisp-Entry "cleanup" method (override) ("(lose-focus? #f)") #f #f 1170 20 1170 27 ("clear-user-message" "pop-focus" "unless" "when" "get-client" "client" "let" "restore-client" "restore-client~" "text" "set-string-content" "set-string-content~" "lose-focus?")}}
      {Lisp-Entry "Find-File-Mode" class () ((extends . "Find-Mode")) #f #f 1185 7 1185 21 ("Find-Mode")
        {Lisp-Entry "symbol-completions" method (override) ("name") #f #f 1188 20 1188 38 ("dot-and-dot-dot" "ignore-hidden:" "current-directory" "path:" "list" "directory-content" "string-append" "standardize-filename" "path" "char-ci=?" "test:" "compare-n" "lambda" "collect" "directory" "pathname-type" "eq?" "file-exists?" "and" "or" "when" "dir" "receive" "string-length" "1" "+" "0" "substring" "values" "not" "if" "reversed?:" "find" "pos" "let" "filename" "split-filename" "define" "name")}
        {Lisp-Entry "finish" method (override) () #f #f 1210 20 1210 26 ("bell" "cleanup" "get-application" "edit-document" "edit-document~" "get-parent" "get-parent~" "set-current-directory" "pathname-normalize" "tokenise-filename" "File" "new" "anchorize" "anchorize~" "file" "regular" "pathname-type" "eq?" "file-exists?" "and" "if" "text" "first-content" "first-content~" "filename" "let")}}
      {Lisp-Entry "Find-Filename-Mode" class () ((extends . "Find-Mode")) #f #f 1226 7 1226 25 ("Find-Mode")
        {Lisp-Entry "filenames" slot () () #f #f 1229 8 1229 17 ()}
        {Lisp-Entry "initialize" method (override) ("text") #f #f 1232 20 1232 30 ("filenames" "set!" "nextmethod" "table-set!" "get-name" "get-name~" "downcase" "name" "when" "get-source" "get-source~" "source" "file" "lambda" "for-each-project-file" "for-each-project-file~" "equal?" "test:" "make-table" "table" "get-workbench" "workbench" "let" "collect-filenames" "define" "text")}
        {Lisp-Entry "symbol-completions" method (override) ("name") #f #f 1248 20 1248 38 ("queue-list" "enqueue" "char-ci=?" "test:" "string-length" "compare-n" "when" "file" "filename" "lambda" "filenames" "iterate-table" "new-queue" "queue" "let" "name")}
        {Lisp-Entry "finish" method (override) () #f #f 1257 20 1257 26 ("bell" "get-application" "edit-document" "edit-document~" "if" "text" "first-content" "first-content~" "continuation-return" "1" "start:" "find" "not" "0" "string-ref" "eqv?" "and" "empty-string?" "or" "substring" "remaining" "char-ci=?" "test:" "compare-n" "when" "file" "filename" "filenames" "iterate-table" "string-length" "len" "let" "return" "lambda" "continuation-capture" "name" "find-file" "define")}}
      {Lisp-Entry "Find-Buffer-Mode" class () ((extends . "Find-Mode")) #f #f 1284 7 1284 23 ("Find-Mode")
        {Lisp-Entry "symbol-completions" method (override) ("name") #f #f 1287 20 1287 38 ("all-views" "char-ci=?" "test:" "string-length" "compare-n" "when" "present-title" "presentation" "let" "view" "lambda" "collect" "name")}
        {Lisp-Entry "finish" method (override) () #f #f 1295 20 1295 26 ("cleanup" "bell" "current-frame" "focus-host" "focus-host~" "first" "send-to-back" "send-to-back~" "begin" "2" "length" ">=" "all-frames" "views" "empty-string?" "if" "text" "first-content" "first-content~" "let" "all-views" "present-title" "string-ci=?" "view" "lambda" "find-if" "name" "find-view" "define")}
        {Lisp-Entry "present-title" definition () ("window/view") #f #f 1317 15 1317 28 ("empty-string?" "null?" "or" "get-document-controller" "get-document-controller~" "name-status" "name-status~" "Document" "get-guest" "get-guest~" "guest" "Host-View" "is?" "if" "View" "get-title" "get-title~" "Window" "typecase" "title" "let" "window/view")}
        {Lisp-Entry "all-views" definition () () #f #f 1333 15 1333 24 ("collect-palettes" "collect-frames" "append")}}
      {Lisp-Entry "Execute-Mode" class () ((extends . "Command-Mode")) #f #f 1343 7 1343 19 ("Command-Mode")
        {Lisp-Entry "mode-actions" method (override) () #f #f 1346 20 1346 32 ("execute-mode" "find-actions")}
        {Lisp-Entry "auto-complete?" method (override) () #f #f 1350 20 1350 34 ()}
        {Lisp-Entry "on-finish" method () ("evt") #f #f 1354 11 1354 20 ("finish" "evt")}
        {Lisp-Entry "on-cancel" method () ("evt") #f #f 1358 11 1358 20 ("cancel" "evt")}}
      {Lisp-Entry "standardize-filename" definition () ("filename") #f #f 1367 13 1367 33 ("cardinality" "substring" "string-append" "starts-with?" "if" "pathname-normalize" "home" "let" "filename")}}})
"Command-Toolbar"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Command-Toolbar.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Command-Toolbar" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Command-Toolbar" class () ((extends . "Toolbar")) #f #f 44 7 44 22 ("Toolbar")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("command-shell" "name:" "Command-Shell" "<Command-Shell>" "entry" "style:" "edge" "border-type:" "Border-View" "<Border-View>" "2" "Rect" "layout-insets:" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 53 25 53 35 ()}}}})
"Commandbar-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Commandbar-Preferences.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.preference.Commandbar-Preferences" module (protected) () #f #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Commandbar-Preferences" class () ((extends . "Splitter-Preferences")) #f #f 44 7 44 29 ("Splitter-Preferences")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 (":command" "model:" "second" "location:" "Toolbar-Preferences" "<Toolbar-Preferences>" "vert" "orientation:" "-27" "division:" "edge" "separator:" "install" "<install>")}}}})
"Completions-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Completions-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.preference.Completions-Domain" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Completions-Domain" class (undocumented) ((extends . "List-Domain")) #f #f 43 20 43 38 ("List-Domain")
        {Lisp-Entry "finish" method (override) ("rest") #f #f 46 20 46 26 ("Completion-Domain" "new" "domain" "set!" "nextmethod" "rest")}}
      {Lisp-Entry "Completion-Domain" class () ((extends . "String-Domain")) #f #f 56 7 56 24 ("String-Domain")
        {Lisp-Entry "present" method (override) ("value") #f #f 59 20 59 27 ("cdr" "car" "format" "value")}}}})
"Connector"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Connector.jazz"} 240293873. jazz
    {Lisp-Entry "jazz.ui.view.Connector" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Connector" class (undocumented) ((extends . "Line-View")) #f #f 46 20 46 29 ("explicit" "Line-View")
        {Lisp-Entry "client" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 18 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 49 43 49 51 ()}
        {Lisp-Entry "set-client" accessor () () #f #f 49 43 49 51 ()}
        {Lisp-Entry "start" property () ((initialize . "#f") (accessors . "explicit")) #f #f 50 12 50 17 ()}
        {Lisp-Entry "end" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 15 ()}
        {Lisp-Entry "start-view" slot () ((initialize . "#f")) #f #f 54 8 54 18 ()}
        {Lisp-Entry "end-view" slot () ((initialize . "#f")) #f #f 55 8 55 16 ()}
        {Lisp-Entry "get-start" method (public) () #f #f 63 18 63 27 ("start")}
        {Lisp-Entry "set-start" method (public) ("value") #f #f 67 18 67 27 ("ending-removed" "start-view" "when" "start" "set!" "value")}
        {Lisp-Entry "get-end" method (public) () #f #f 74 18 74 25 ("end")}
        {Lisp-Entry "set-end" method (public) ("value") #f #f 78 18 78 25 ("ending-removed" "end-view" "when" "end" "set!" "value")}
        {Lisp-Entry "default-client" method (protected virtual) () #f #f 90 29 90 43 ("parent")}
        {Lisp-Entry "get-start-view" method (public) () #f #f 99 18 99 32 ("setup-ending" "set!" "start" "and" "start-view" "or")}
        {Lisp-Entry "get-end-view" method (public) () #f #f 103 18 103 30 ("setup-ending" "set!" "end" "and" "end-view" "or")}
        {Lisp-Entry "setup-ending" method () ("name") #f #f 107 11 107 23 ("ending-added" "find-ending" "view" "when" "default-client" "find-component" "if" "client" "let" "name")}
        {Lisp-Entry "find-ending" method (protected virtual) ("client" "name") #f #f 116 29 116 40 ("find-component" "find-component~" "name" "client")}
        {Lisp-Entry "ending-added" method (protected virtual) ("view") #f #f 120 29 120 41 ("view")}
        {Lisp-Entry "ending-removed" method (protected virtual) ("view") #f #f 124 29 124 43 ("view")}
        {Lisp-Entry "update" method (public) () #f #f 133 18 133 24 ("set-to" "set-from" "get-position" "p" "Rect" "new" "set-rect" "bottom" "max" "right" "get-h" "get-h~" "left" "get-v" "get-v~" "min" "-" "top" "Tolerance" "2" "line-width" "fl" "<fl>" "cast" "/" "+" "fxceiling" "lw" "get-center" "get-center~" "let*" "and" "when" "get-end-view" "e" "get-start-view" "s" "let")}
        {Lisp-Entry "Unselected-Color" definition () () #f #f 156 14 156 30 ("Black" "Color")}
        {Lisp-Entry "unselected-color" method (protected virtual) () #f #f 160 29 160 45 ("Unselected-Color")}
        {Lisp-Entry "line-color" method (override) () #f #f 164 20 164 30 ("unselected-color" "get-editor" "get-editor~" "selected-color" "selected-color~" "if" "surrogate" "selection-rank" "selection-rank~" "rank" "let")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 176 25 176 45 ("Connector-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 185 11 185 17 ()
        {Lisp-Entry "import" import () () #f #f 188 1 188 7 ("jazz.designer")}
        {Lisp-Entry "Connector-Descriptor" class () ((extends . "Line-View-Descriptor")) #f #f 191 7 191 27 ("Line-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 194 3 194 7 ("nullable?:" "domain" "String-Domain" "<String-Domain>" "title:" "client" "name:" "Property-Descriptor" "<Property-Descriptor>" "end" "start" "categorized:" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "component-surrogate-class" method (override) ("component") #f #f 204 20 204 45 ("Connector-Surrogate" "component")}}}}})
"Connector-Surrogate"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Connector-Surrogate.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Connector-Surrogate" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Connector-Surrogate" class (undocumented) ((extends . "Line-Surrogate")) #f #f 43 20 43 39 ("Line-Surrogate")
        {Lisp-Entry "move-client?" method (override) () #f #f 46 20 46 32 ()}
        {Lisp-Entry "size-client?" method (override) () #f #f 50 20 50 32 ()}
        {Lisp-Entry "select" method (override) ("rank" "focus?") #f #f 54 20 54 26 ("redraw-border" "focus?" "rank")}
        {Lisp-Entry "redraw-border" method (override) () #f #f 58 20 58 33 ("client" "invalidate-view" "invalidate-view~")}
        {Lisp-Entry "draw" method (override) ("surface") #f #f 62 20 62 24 ("draw-showed-property" "surface")}
        {Lisp-Entry "draw-selected" method (override) ("surface" "rank") #f #f 66 20 66 33 ("rank" "surface")}}}})
"Container"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Container.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Container" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Container" interface () () #f #f 45 11 45 20 ()
        {Lisp-Entry "get-content" method (public virtual abstract) () #f #f 48 35 48 46 ()}
        {Lisp-Entry "content-inner?" method (public virtual abstract) ("view") #f #f 49 35 49 49 ("view")}}
      {Lisp-Entry "Base-Container" class () ((extends . "Layout-View") (implements . "Container")) #f #f 52 7 52 21 ("Container" "Layout-View")
        {Lisp-Entry "form" form () () #f #f 55 3 55 7 ("content" "name:" "Content-View" "<Content-View>" "install" "<install>")}
        {Lisp-Entry "get-content" method (override) () #f #f 65 20 65 31 ("content" "child")}
        {Lisp-Entry "find-content" method () () #f #f 69 11 69 23 ("content" "find-component")}
        {Lisp-Entry "inner?" method (override) ("view") #f #f 78 20 78 26 ("find-content" "eq?" "view")}
        {Lisp-Entry "content-inner?" method (override) ("view") #f #f 82 20 82 34 ("view")}
        {Lisp-Entry "inner-widget" method (override) () #f #f 86 20 86 32 ("self" "inner-widget" "inner-widget~" "if" "find-content" "view" "let")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 98 25 98 45 ("Base-Container-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 107 11 107 17 ()
        {Lisp-Entry "import" import () () #f #f 110 1 110 7 ("jazz.designer")}
        {Lisp-Entry "Base-Container-Descriptor" class () ((extends . "Layout-View-Descriptor")) #f #f 113 7 113 32 ("Layout-View-Descriptor")
          {Lisp-Entry "class-image" method (override) ("class") #f #f 116 20 116 31 ("Image-Resource" "class")}}}}})
"Content-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Content-View.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.ui.view.Content-View" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Content-View" class (undocumented) ((extends . "Layout-View")) #f #f 45 20 45 32 ("Layout-View")
        {Lisp-Entry "size-change" method (override) ("size") #f #f 53 20 53 31 ("content-size-change" "content-size-change~" "when" "get-client" "client" "let" "nextmethod" "size")}
        {Lisp-Entry "add-child" method (override) ("child") #f #f 61 20 61 29 ("layout-view" "nextmethod" "child")}
        {Lisp-Entry "remove-child" method (override) ("child") #f #f 67 20 67 32 ("layout-view" "destroying?" "unless" "nextmethod" "child")}
        {Lisp-Entry "get-container" method (public) () #f #f 78 18 78 31 ("parent")}
        {Lisp-Entry "get-client" method (public) () #f #f 82 18 82 28 ("car" "children" "not-null?" "if")}
        {Lisp-Entry "inner?" method (override) ("view") #f #f 93 20 93 26 ("parent" "content-inner?" "content-inner?~" "nextmethod" "or" "view")}
        {Lisp-Entry "inner-widget" method (override) () #f #f 98 20 98 32 ("self" "inner-widget" "inner-widget~" "if" "get-client" "client" "let")}
        {Lisp-Entry "get-scroll-client" method (override) () #f #f 110 20 110 37 ("get-scroll-client" "get-scroll-client~" "when" "get-client" "client" "let")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 121 25 121 45 ("Content-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 130 11 130 17 ()
        {Lisp-Entry "import" import () () #f #f 133 1 133 7 ("jazz.designer")}
        {Lisp-Entry "Content-View-Descriptor" class () ((extends . "Layout-View-Descriptor")) #f #f 136 7 136 30 ("Layout-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 139 3 139 7 (">" "<properties" "<properties~>" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 144 20 144 31 ("Image-Resource" "class")}}}}})
"Context-Action"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "context" "Context-Action.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.context.Context-Action" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Context-Action" class (undocumented) ((extends . "Component")) #f #f 43 20 43 34 ("Component")
        {Lisp-Entry "image" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 17 ()}
        {Lisp-Entry "get-image" accessor () () #f #f 46 44 46 52 ()}
        {Lisp-Entry "set-image" accessor () () #f #f 46 44 46 52 ()}
        {Lisp-Entry "title" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 17 ()}
        {Lisp-Entry "get-title" accessor () () #f #f 47 44 47 52 ()}
        {Lisp-Entry "set-title" accessor () () #f #f 47 44 47 52 ()}
        {Lisp-Entry "handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 19 ()}
        {Lisp-Entry "get-handler" accessor () () #f #f 48 44 48 52 ()}
        {Lisp-Entry "set-handler" accessor () () #f #f 48 44 48 52 ()}
        {Lisp-Entry "construct-literal" method (meta) ("context" "image" "title" "handler") #f #f 52 16 52 33 ("self" "new" "handler" "title" "image" "context")}
        {Lisp-Entry "initialize" method (override) ("image" "title" "handler") #f #f 56 20 56 30 ("handler~self" "title~self" "self" "image~self" "set!" "nextmethod" "handler" "title" "image")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 63 20 63 25 ("handler" "title" "image" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Context-Combo"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "context" "Context-Combo.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.context.Context-Combo" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Context-Combo" class (undocumented) ((extends . "Combo-Box")) #f #f 46 20 46 33 ("Combo-Box")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("Text-Base" "Text-Style" "base-style:" "top-padding:" "2" "left-padding:" "body" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 54 20 54 26 ("update" "nextmethod" "rest")}
        {Lisp-Entry "update" method () () #f #f 64 11 64 17 ("set-value" "when" "->string" "list" "get-name" "get-name~" "name" "let" "trait" "lambda" "map" "set-choices" "get-process" "get-context" "get-context~" "active" "get-children" "get-children~" "Trait" "collect-type" "all" "get-preferences" "pref" "let*")}
        {Lisp-Entry "selection-change" method () () #f #f 81 11 81 27 ("get-value" "get-process" "set-context" "set-context~")}
        {Lisp-Entry "combo-choice" method (override) () #f #f 90 20 90 32 ("selection-change")}}}})
"Context-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "context" "Context-Manager.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.context.Context-Manager" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Context-Manager" class (undocumented) ((extends . "Layout-View")) #f #f 48 20 48 35 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 51 3 51 7 ("251" "blue:" "174" "green:" "123" "red:" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 55 25 55 38 ("context-manager" "rest")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 64 25 64 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 68 25 68 35 ()}
        {Lisp-Entry "client-activate" method (override) () #f #f 72 20 72 35 ("current-document" "install-context")}
        {Lisp-Entry "client-deactivate" method (override) () #f #f 76 20 76 37 ("install-context")}
        {Lisp-Entry "workspace-minimisable?" method (override) () #f #f 80 20 80 42 ()}
        {Lisp-Entry "layout" method (override) () #f #f 89 20 89 26 ("children" "+" "increase!" "20" "-" "Dimension" "set-size" "set-size~" "Point" "new" "set-position" "set-position~" "get-height~" "view-height" "get-height" "height" "get-width" "width" "view" "lambda" "for-each" "10" "top" "let")}
        {Lisp-Entry "install-context" method () ("guest") #f #f 106 11 106 26 ("layout-view" "get-application" "install-text" "close-children" "guest")}
        {Lisp-Entry "install-text" method () ("provider") #f #f 113 11 113 23 ("get-context-text" "get-context-text~" "12" "24" "get-height" "get-height~" "+" "get-width" "get-width~" "Dimension" "set-size" "set-size~" "set-text" "set-text~" "title:" "Image-Resource" "icon:" "self" "parent:" "Context-View" "new" "view" "let" "text-view" "title" "bind" "info" "lambda" "for-each" "when" "provider")}}}})
"Context-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Context-Menu.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.menu.Context-Menu" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Context-Menu" class () ((extends . "Menu")) #f #f 43 7 43 19 ("Menu")
        {Lisp-Entry "client" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 18 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 46 43 46 51 ()}
        {Lisp-Entry "set-client" accessor () () #f #f 46 43 46 51 ()}
        {Lisp-Entry "component-alias" method (override) ("name") #f #f 49 20 49 35 ("nextmethod" "else" "client" ":client" "case" "name")}
        {Lisp-Entry "make-condensed-menu" method (public) ("user-items" "create-leaf" "(key: key identity)" "(max-leaves: max-leaves 30)") #f #f 60 18 60 37 ("Separator-Item" "set!" "section" "first?" "collect-sections" "sections" "0" "prefix" "cdr" "string=?" "group" "equal?" "test:" "+" "subseq" "string-length" "title" "leaf" "partition" "groups" "2" "level" "layout-menu" "layout-menu~" "Context-Menu" "submenu" "user-data:" "string-append" "title:" "parent:" "Label-Item" "new" "menu-item" "let*" "first" "sub-items" "else" ":leaves" "eq?" "null?" "cond" "rest" "string" "value" "bind" "item" "for-each" "super-count" "menu" "iter" "second" "list" "user-item" "lambda" "map" "string<?" "sort" "create-tree" "values-tree" "self" "top-menu" "condense-section" "*" "<=" "car" "third" "leaves" "1" "=" "if" "length" "sub-count" "let" "count" "items" "collapse?" "define" "30" "max-leaves" "max-leaves:" "identity" "key" "key:" "create-leaf" "user-items")}}}})
"Context-Provider"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "context" "Context-Provider.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.context.Context-Provider" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Context-Provider" interface (undocumented) () #f #f 40 24 40 40 ()
        {Lisp-Entry "get-context-text" method (public virtual abstract) () #f #f 43 35 43 51 ()}}}})
"Context-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "context" "Context-View.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.context.Context-View" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Context-View" class (undocumented) ((extends . "Base-Container")) #f #f 47 20 47 32 ("explicit" "Base-Container")
        {Lisp-Entry "icon" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 16 ()}
        {Lisp-Entry "get-icon" accessor () () #f #f 50 42 50 50 ()}
        {Lisp-Entry "set-icon" accessor () () #f #f 50 42 50 50 ()}
        {Lisp-Entry "title" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 17 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("fill" "layout-type:" "content" "name:" "!" "<!>" "White" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "get-title" method (override) () #f #f 64 20 64 29 ("title")}
        {Lisp-Entry "set-title" method (override) ("value") #f #f 68 20 68 29 ("title" "set!" "value")}
        {Lisp-Entry "get-text" method (public) () #f #f 77 18 77 26 ("text" "get-content" "find-component" "find-component~")}
        {Lisp-Entry "set-text" method (public) ("text") #f #f 81 18 81 26 ("get-content" "set-parent" "set-parent~" "close" "close~" "when" "get-text" "let" "close-text" "define" "text")}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 96 20 96 31 ("2" "Rect" "insets:" "invalidate-border" "invalidate-caption" "nextmethod" "size")}
        {Lisp-Entry "layout" method (override) () #f #f 107 20 107 26 ("-" "Dimension" "new" "set-size" "set-size~" "24" "0" "Point" "set-position" "set-position~" "get-content" "content" "get-height" "height" "get-width" "width" "let")}
        {Lisp-Entry "caption-rect" method () () #f #f 120 11 120 23 ("24" "get-width" "0" "Rect" "new")}
        {Lisp-Entry "invalidate-caption" method () () #f #f 129 11 129 29 ("caption-rect" "invalidate-rect")}
        {Lisp-Entry "Active-Colors" definition () () #f #f 138 14 138 27 ("223" "blue:" "94" "green:" "6" "red:" "Color" "list")}
        {Lisp-Entry "Frame-Dark-Color" definition () () #f #f 142 14 142 30 ("blue:" "green:" "128" "red:" "Color")}
        {Lisp-Entry "Frame-Medium-Color" definition () () #f #f 145 14 145 32 ("blue:" "green:" "142" "red:" "Color")}
        {Lisp-Entry "Frame-Light-Color" definition () () #f #f 148 14 148 31 ("blue:" "green:" "160" "red:" "Color")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 152 20 152 24 ("7" "6" "22" "if" "draw-text" "draw-text~" "White" "Color" "set-text-color" "set-text-color~" "Label" "Font" "set-font" "set-font~" "title" "5" "4" "get-application" "get-images-portfolio" "get-images-portfolio~" "draw-image" "draw-image~" "icon" "when" "second" "1" "Active-Colors" "first" "0" "list" "gradient-fill" "gradient-fill~" "caption-rect" "caption" "get-bounds" "bounds" "let" "context" "surface")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 169 20 169 30 ("caption-rect" "in-rect?" "cond" "pos")}}}})
"Cursor-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Cursor-Event.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.event.Cursor-Event" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Cursor-Event" class () ((extends . "Event")) #f #f 43 7 43 19 ("Event")
        {Lisp-Entry "position" slot () ((getter . "generate")) #f #f 46 8 46 16 ()}
        {Lisp-Entry "get-position" accessor () () #f #f 46 24 46 32 ()}
        {Lisp-Entry "initialize" method (override) ("kind" "sender" "pos") #f #f 49 20 49 30 ("position" "set!" "nextmethod" "pos" "sender" "kind")}}}})
"Date-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "Date-Request.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.Date-Request" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Date-Request" class (undocumented) ((extends . "String-Request")) #f #f 43 20 43 32 ("String-Request")}
      {Lisp-Entry "Date-Request" class (undocumented) ((extends . "String-Request")) #f #f 49 20 49 32 ("String-Request")
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("title:" "prefix" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "form-model" method () ("form") #f #f 57 11 57 21 ("nextmethod" "else" "Date-Text-View" "text" "get-name" "get-name~" "case" "form")}}}})
"Date-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Date-Text-View.jazz"} 227936498. jazz
    {Lisp-Entry "jazz.ui.text.Date-Text-View" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Date-Text-View" class (undocumented) ((extends . "Text-View")) #f #f 43 20 43 34 ("Text-View")}}})
"Default-Skin"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Default-Skin.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Default-Skin" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Default-Skin" class () ((extends . "Skin")) #f #f 44 7 44 19 ("Skin")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("scrollbar/document" "scrollbar/tool" "scrollbar" "header/document" "header/tool" "flat?:" "header" "border-flat?:" "group" "border/outline" "edge-flat?:" "border/entry" "name:" "!" "<!>" "title:" "install" "<install>")}}}})
"Definition-Search-Result"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Definition-Search-Result.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.search.Definition-Search-Result" module (protected) () #f #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Definition-Search-Result" class () ((extends . "Search-Result")) #f #f 43 7 43 31 ("Search-Result")
        {Lisp-Entry "entry" slot () ((getter . "generate")) #f #f 46 8 46 13 ()}
        {Lisp-Entry "get-entry" accessor () () #f #f 46 21 46 29 ()}
        {Lisp-Entry "initialize" method (override) ("resultset" "entry") #f #f 49 20 49 30 ("self" "entry~self" "set!" "nextmethod" "entry" "resultset")}
        {Lisp-Entry "get-icon" method (override) () #f #f 59 20 59 28 ("entry" "get-image" "get-image~")}
        {Lisp-Entry "present-name" method (override) () #f #f 63 20 63 32 ("entry" "present" "present~")}
        {Lisp-Entry "present-location" method (override) () #f #f 67 20 67 36 ("present-location" "present-location~" "not" "if" "entry" "get-moniker" "get-moniker~" "moniker" "let")}
        {Lisp-Entry "present-type" method (override) () #f #f 74 20 74 32 ()}
        {Lisp-Entry "location-sort-value" method (override) () #f #f 83 20 83 39 ("entry" "get-start" "get-start~" "present-location" "cons")}
        {Lisp-Entry "edit" method (override) ("select" "(visible?: visible? #t)" "(activate-focus?: activate-focus? #t)") #f #f 92 20 92 24 ("return-new?:" "entry" "edit" "edit~" "activate-focus?" "activate-focus?:" "visible?" "visible?:" "select")}}}})
"Desktop"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "Desktop.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.window.Desktop" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Desktop" class () ((extends . "Window")) #f #f 43 7 43 14 ("Window")}}})
"Dialog"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "Dialog.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.Dialog" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui")}
      {Lisp-Entry "Dialog" class () ((extends . "Overlapped")) #f #f 44 7 44 13 ("Overlapped")
        {Lisp-Entry "sizable?" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 20 ()}
        {Lisp-Entry "get-sizable?" accessor () () #f #f 47 46 47 54 ()}
        {Lisp-Entry "set-sizable?" accessor () () #f #f 47 46 47 54 ()}
        {Lisp-Entry "closable?" property () ((initialize . "#t") (accessors . "generate")) #f #f 48 12 48 21 ()}
        {Lisp-Entry "get-closable?" accessor () () #f #f 48 46 48 54 ()}
        {Lisp-Entry "set-closable?" accessor () () #f #f 48 46 48 54 ()}
        {Lisp-Entry "new-root" method (override) () #f #f 51 20 51 28 ("offscreen?:" "Dialog-Host" "new")}
        {Lisp-Entry "close-window" method (override) () #f #f 60 20 60 32 ("processed" "root" "cancel-modal" "cancel-modal~" "lambda" "delay-event")}
        {Lisp-Entry "destroy" method (override) () #f #f 68 20 68 27 ("nextmethod" "root" "destroy-modal" "destroy-modal~")}}}})
"Dialog-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "Dialog-Actions.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.Dialog-Actions" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Dialog-Actions" class (undocumented) ((extends . "Actions")) #f #f 43 20 43 34 ("Actions")}}})
"Dialog-Host"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "hosting" "Dialog-Host.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.hosting.Dialog-Host" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui.dialog" "jazz.ui" "jazz.system" "jazz.jml" "jazz.graphic" "jazz.debuggee")}
      {Lisp-Entry "Dialog-Host" class (undocumented) ((extends . "Host-View")) #f #f 50 20 50 31 ("Host-View")
        {Lisp-Entry "modal-done?" slot () ((initialize . "#f")) #f #f 53 8 53 19 ()}
        {Lisp-Entry "modal-closed?" slot () ((initialize . "#f")) #f #f 54 8 54 21 ()}
        {Lisp-Entry "modal-result" slot () ((initialize . "#f")) #f #f 55 8 55 20 ()}
        {Lisp-Entry "modal-signal" slot () ((initialize . "#f")) #f #f 56 8 56 20 ()}
        {Lisp-Entry "modal-action" slot () ((initialize . "#f")) #f #f 57 8 57 20 ()}
        {Lisp-Entry "form" form () () #f #f 60 3 60 7 ("Medium" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "processing-modal?" method (public) () #f #f 69 18 69 35 ("modal-done?" "not")}
        {Lisp-Entry "destroy-modal" method () () #f #f 78 11 78 24 ("modal-done?" "modal-result" "modal-closed?" "set!")}
        {Lisp-Entry "class-actions" method (override) () #f #f 89 20 89 33 ("nextmethod" "dialog" "find-actions" "cons")}
        {Lisp-Entry "on-ok" method (public) ("evt") #f #f 99 18 99 23 ("get-modal-result" "end-modal" "validate-dialog" "evt")}
        {Lisp-Entry "on-cancel" method (public) ("evt") #f #f 104 18 104 27 ("cancel-modal" "evt")}
        {Lisp-Entry "validate-dialog" method (override) () #f #f 113 20 113 35 ("validate-dialog" "validate-dialog~" "guest" "when")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 118 20 118 36 ("guest" "get-modal-result" "get-modal-result~")}
        {Lisp-Entry "process-modal" method (public) () #f #f 122 18 122 31 ("modal-action" "close" "close~" "enable-window" "enable-window~" "modal-result" "else" "signal" "modal-signal" "throw-cancel" "modal-closed?" "cond" "process-events" "with-current-loop" "Cancel-Signal" "Modal-Done" "catch" "lambda" "execute-event" "show" "show~" "update-modal-actions" "update-modal-actions~" "self" "set-current-modal" "modal-done?" "set!" "begin" "unwind-protect" "disable-window" "disable-window~" "when" "get-player" "player" "current-modal" "preserved" "current-window" "overlapped" "get-toplevel" "toplevel" "get-application" "application" "let*" "prog1" "release-captured-view" "close-popups")}
        {Lisp-Entry "end-modal" method (public) ("result") #f #f 165 18 165 27 ("modal-done" "modal-result" "modal-closed?" "set!" "result")}
        {Lisp-Entry "signal-modal" method (public) ("signal") #f #f 171 18 171 30 ("modal-done" "modal-signal" "set!" "signal")}
        {Lisp-Entry "cancel-modal" method (public) () #f #f 176 18 176 30 ("Cancel-Signal" "new" "signal-modal")}
        {Lisp-Entry "close-modal" method (public) ("action") #f #f 180 18 180 29 ("modal-done" "modal-action" "modal-result" "modal-closed?" "set!" "action")}}
      {Lisp-Entry "Modal-Done" class () ((extends . "Signal")) #f #f 187 7 187 17 ("Signal")}
      {Lisp-Entry "modal-done" definition () () #f #f 190 13 190 23 ("Modal-Done" "new" "throw")}}})
"Directories-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "Directories-Request.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.Directories-Request" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.dialog" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Directories-Request" class () ((extends . "View")) #f #f 47 7 47 26 ("View")
        {Lisp-Entry "directories" property () ((initialize . "'()") (accessors . "generate")) #f #f 50 12 50 23 ()}
        {Lisp-Entry "get-directories" accessor () () #f #f 50 49 50 57 ()}
        {Lisp-Entry "set-directories" accessor () () #f #f 50 49 50 57 ()}
        {Lisp-Entry "edited-directory" slot () ((initialize . "#f")) #f #f 53 8 53 24 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("on-cancel" "694" "cancel" "default?:" "on-ok" ":host" "315" "610" "ok" "8" "770" "300" "6" "Horizontal-Line" "<Horizontal-Line>" "on-remove-directory" "123" "remove-directory" "on-add-directory" "95" "692" "add-directory" "on-move-down" "61" "move-down" "on-move-up" "24" "80" "691" "move-up" "Push-Button" "<Push-Button>" "400" "width:" "display-images?:" "toplevel-controls?:" "Tree-Node-Column" "<Tree-Node-Column>" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-selection-change" "selection-handler:" "on-action" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "2" "top-padding:" "directory" "filled-column:" "directories-tree" "Tree-View" "<Tree-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "254" "671" "33" "directories-border" "name:" "Border-View" "<Border-View>" "Label" "Font" "font:" "16" "210" "9" "10" "Point" "position:" "title:" "Label-View" "<Label-View>" "350" "782" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 73 20 73 26 ("update-buttons" "setup-selection" "setup-directories" "get-tree" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-tree" method () () #f #f 86 11 86 19 ("directories-tree" "locate")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 95 25 95 35 ()}
        {Lisp-Entry "host-position" method (meta override) () #f #f 99 25 99 38 ("300" "450" "Point")}
        {Lisp-Entry "host-size" method (meta override) () #f #f 103 25 103 34 ("350" "782" "Dimension")}
        {Lisp-Entry "focus-default" method (override) () #f #f 107 20 107 33 ("get-tree" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "on-action" method () ("evt") #f #f 116 11 116 20 ("update-buttons" "evt")}
        {Lisp-Entry "on-selection-change" method () ("evt") #f #f 120 11 120 30 ("update-buttons" "evt")}
        {Lisp-Entry "on-add-directory" method () ("evt") #f #f 124 11 124 27 ("update" "list" "append" "directories" "set!" "choose-directory" "directory" "get-tree" "tree" "let" "evt")}
        {Lisp-Entry "on-remove-directory" method () ("evt") #f #f 131 11 131 30 ("update-buttons" "set-single-selection" "set-single-selection~" "get-visible-count" "get-visible-count~" "<" "when" "update" "remove" "set!" "directories" "element" "directory" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-move-up" method () ("evt") #f #f 142 11 142 21 ("set-single-selection" "set-single-selection~" "acquire-focus" "acquire-focus~" "setup-directories" "1" "-" "insert!" "remove!" "set!" "directories" "element" "directory" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-move-down" method () ("evt") #f #f 153 11 153 23 ("set-single-selection" "set-single-selection~" "acquire-focus" "acquire-focus~" "setup-directories" "1" "+" "insert!" "remove!" "set!" "directories" "element" "directory" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-reset" method () ("evt") #f #f 165 11 165 19 ("on-reset" "unimplemented" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 170 20 170 35 ("get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" method (override) ("evt") #f #f 176 20 176 35 ("cancel-modal" "cancel-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update" method () () #f #f 186 11 186 17 ("get-tree" "setup-directories")}
        {Lisp-Entry "setup-directories" method () ("tree") #f #f 190 11 190 28 ("directories" "user-data:" "present" "present~" "title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "directory" "for-each" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "tree")}
        {Lisp-Entry "setup-selection" method () ("tree") #f #f 199 11 199 26 ("0" "list" "set-selection" "set-selection~" "directories" "not-null?" "when" "tree")}
        {Lisp-Entry "update-buttons" method () () #f #f 209 11 209 25 ("defaults" "reset" "1" "-" "<" "0" ">" "directories" "element" "directory" "let" "remove-directory" "add-directory" "move-down" "move-up" "locate" "set-enabled?" "set-enabled?~" "begin" "not" "if" "get-visible-count" "get-visible-count~" "count" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "edit-directory" method () ("selection") #f #f 233 11 233 25 ("enter-directory" "selection")}
        {Lisp-Entry "enter-directory" method () () #f #f 237 11 237 26 ()}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 246 20 246 36 ("get-output" "get-output~" "put" "put~" "get-user-data" "get-user-data~" "directory" "rank" "row" "lambda" "for-each-visible-row" "for-each-visible-row~" "List-Factory" "new" "directories" "get-tree" "tree" "let" "enter-directory")}}}})
"Directories-Search"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Directories-Search.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.Directories-Search" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}
      {Lisp-Entry "Directories-Search" class () ((extends . "Search")) #f #f 44 7 44 25 ("Search")
        {Lisp-Entry "get-icon" method (override) () #f #f 52 20 52 28 ("Image-Resource")}}}})
"Directories-Search-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Directories-Search-Preferences.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.search.Directories-Search-Preferences" module (protected) () #f #f 37 18 37 63 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Directories-Search-Preferences" class (undocumented) ((extends . "Search-View-Preferences")) #f #f 44 20 44 50 ("Search-View-Preferences")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("title:" "install" "<install>")}}}})
"Directories-Search-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Directories-Search-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.search.Directories-Search-View" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.search" "jazz.ui" "jazz.library" "jazz.jml" "jazz.io" "jazz.graphic" "jazz.ide")}
      {Lisp-Entry "Directories-Search-View" class (undocumented) ((extends . "Search-View")) #f #f 50 20 50 43 ("Search-View")
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("extensions" "46" "48" "static-ext" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "focus-selects-all?:" "show-unfocused-selection?:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "directories" "IDE-Text-View" "<IDE-Text-View>" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "Entry-Border" "Color" "border-color:" "solid" "border-type:" "19" "248" "83" "Border-View" "<Border-View>" "16" "62" "Dimension" "size:" "18" "13" "Point" "position:" "static-dir" "Label-View" "<Label-View>" ">" "<content" "<content~>" "title:" "domain" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "search-targets" method (override) ("find" "replace") #f #f 74 20 74 34 ("search-threaded" "Directories-Search" "new" "search" "let" "lambda" "new-thread" "thread-start!" "replace" "find")}
        {Lisp-Entry "search-threaded" method (synchronized) ("search") #f #f 83 24 83 39 ("close-manager" "close-manager~" "unregister-activity" "unregister-activity~" "get-activity-manager" "manager" "when" "user-feedback" "user-feedback~" "select-results" "select-results~" "get-results" "results" "let" "post-event" "search-in-directories" "Search-Resultset" "resultset" "default-search-extensions" "not-null?" "if" "effective-extensions" "append!" "apply" "->string" "extensions" "locate" "get-string-content" "get-string-content~" "read-delimited-string" "Directory" "list" "lambda" "map" "directories" "get-search-reporter" "User-Reporter" "new" "reporter" "let*" "search")}
        {Lisp-Entry "on-action" method () ("evt") #f #f 109 11 109 20 ("on-search" "evt")}
        {Lisp-Entry "get-tab-stops" method (override) () #f #f 113 20 113 33 ("targets" "extensions" "directories" "locate" "list")}
        {Lisp-Entry "setup-search-reporter" method (override) ("reporter" "count") #f #f 125 20 125 41 ("set-step" "set-step~" "1" "set-pos" "set-pos~" "500" "0" "Range" "set-range" "set-range~" "set-infinite?" "set-infinite?~" "count" "reporter")}}}})
"Directory-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "Directory-Request.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.Directory-Request" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.io")}
      {Lisp-Entry "Directory-Request" class (undocumented) ((extends . "Pathname-Request")) #f #f 45 20 45 37 ("Pathname-Request")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("title:" "ok" "buttonbar" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 54 25 54 35 ()}
        {Lisp-Entry "update-content" method (override) () #f #f 63 20 63 34 ("for-each" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "add-pathname" "pathname" "add" "define" "get-tree" "tree" "leaves?:" "nodes?:" "directory" "get-content" "get-content~" "directories" "let")}
        {Lisp-Entry "update-buttons" method (override) () #f #f 75 20 75 34 ("directory?" "ok" "locate" "set-enabled?" "set-enabled?~" "selected-pathname" "pathname" "let" "nextmethod")}
        {Lisp-Entry "default-action" method (override) () #f #f 86 20 86 34 ("down" "directory?" "cond" "selected-pathname" "pathname" "let")}}}})
"DnD"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dnd" "DnD.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dnd.DnD" module (protected) () #f #f 37 18 37 33 ("jazz")
      {Lisp-Entry "DnD" class () ((extends . "Object")) #f #f 40 7 40 10 ("Object")
        {Lisp-Entry "source" slot () ((initialize . "#f") (accessors . "generate")) #f #f 43 8 43 14 ()}
        {Lisp-Entry "get-source" accessor () () #f #f 43 39 43 47 ()}
        {Lisp-Entry "set-source" accessor () () #f #f 43 39 43 47 ()}
        {Lisp-Entry "target" slot () ((initialize . "#f") (accessors . "generate")) #f #f 44 8 44 14 ()}
        {Lisp-Entry "get-target" accessor () () #f #f 44 39 44 47 ()}
        {Lisp-Entry "set-target" accessor () () #f #f 44 39 44 47 ()}
        {Lisp-Entry "view" slot () ((initialize . "#f") (accessors . "generate")) #f #f 45 8 45 12 ()}
        {Lisp-Entry "get-view" accessor () () #f #f 45 39 45 47 ()}
        {Lisp-Entry "set-view" accessor () () #f #f 45 39 45 47 ()}
        {Lisp-Entry "initialize" method (override) ("(source: source #f)") #f #f 48 20 48 30 ("self" "source~self" "set!" "nextmethod" "source" "source:")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 53 20 53 25 ("view" "target" "source" "format" "lambda" "self" "print-unreadable" "readably" "output")}}}})
"Docked-Host"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "hosting" "Docked-Host.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.ui.hosting.Docked-Host" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui.skin" "jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Docked-Host" class (undocumented) ((extends . "Host-View")) #f #f 52 20 52 31 ("Host-View")
        {Lisp-Entry "fullscreen?" property () ((initialize . "#f") (accessors . "generate")) #f #f 55 12 55 23 ()}
        {Lisp-Entry "get-fullscreen?" accessor () () #f #f 55 48 55 56 ()}
        {Lisp-Entry "set-fullscreen?" accessor () () #f #f 55 48 55 56 ()}
        {Lisp-Entry "caption?" property () ((initialize . "#t") (accessors . "generate")) #f #f 56 12 56 20 ()}
        {Lisp-Entry "get-caption?" accessor () () #f #f 56 48 56 56 ()}
        {Lisp-Entry "set-caption?" accessor () () #f #f 56 48 56 56 ()}
        {Lisp-Entry "zoomable?" property () ((initialize . "#t") (accessors . "generate")) #f #f 57 12 57 21 ()}
        {Lisp-Entry "get-zoomable?" accessor () () #f #f 57 48 57 56 ()}
        {Lisp-Entry "set-zoomable?" accessor () () #f #f 57 48 57 56 ()}
        {Lisp-Entry "preferences" property () ((initialize . "#f") (accessors . "generate")) #f #f 58 12 58 23 ()}
        {Lisp-Entry "get-preferences" accessor () () #f #f 58 48 58 56 ()}
        {Lisp-Entry "set-preferences" accessor () () #f #f 58 48 58 56 ()}
        {Lisp-Entry "form" form () () #f #f 61 3 61 7 ("flow" "layout-type:" "22" "0" "Dimension" "size:" "tools" "name:" "Layout-View" "<Layout-View>" "install" "<install>")}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 71 20 71 31 ("invalidate-border" "invalidate-top" "nextmethod" "size")}
        {Lisp-Entry "on-close" method () ("evt") #f #f 81 11 81 19 ("selection" "first-child" "first-child~" "Pad-View" "close" "close~" "set-parent~" "get-location" "get-location~" "set-location" "set-location~" "layout-view" "layout-view~" "zoom" "set-mode" "set-mode~" "begin" "Workspace-Splitter" "if" "when" "first-view" "first-view~" "other" "let" "Splitter-View" "is?" "cond" "get-toplevel" "set-parent" "set-visible?" "lambda" "with-locked-update" "get-parent~" "grand" "get-parent" "parent" "let*" "evt")}
        {Lisp-Entry "on-close" method () ("evt") #f #f 106 11 106 19 ("hide-splitted" "evt")}
        {Lisp-Entry "hide-splitted" method (public) () #f #f 110 18 110 31 ("selection" "first-child" "first-child~" "Pad-View" "close" "close~" "set-parent~" "get-location" "get-location~" "set-location" "set-location~" "layout-view" "layout-view~" "zoom" "set-mode" "set-mode~" "begin" "Workspace-Splitter" "if" "when" "first-view" "first-view~" "other" "let" "Splitter-View" "is?" "cond" "get-toplevel" "set-parent" "set-visible?" "lambda" "with-locked-update" "get-parent~" "grand" "get-parent" "parent" "let*")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 140 20 140 35 ()}
        {Lisp-Entry "activate-focus" method (override) () #f #f 144 20 144 34 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "deactivate-focus" method (override) () #f #f 149 20 149 36 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "install-tools" method (override) () #f #f 159 20 159 33 ("invalidate-view" "22" "tools-width" "Dimension" "new" "set-size" "set-size~" "set-visible?" "set-visible?~" "layout-view" "layout-view~" "set-parent" "set-parent~" "tail" "set-location" "set-location~" "tool" "lambda" "for-each" "locate" "dest" "get-children" "get-children~" "tools" "let" "when" "get-tools-view" "get-tools-view~" "view" "get-guest" "guest" "let*")}
        {Lisp-Entry "add-tool" method (public) ("tool") #f #f 177 18 177 26 ("invalidate-view" "22" "get-children" "get-children~" "tools-width" "Dimension" "new" "set-size" "set-size~" "layout-view" "layout-view~" "set-parent" "set-parent~" "locate" "tools" "let" "tool")}
        {Lisp-Entry "remove-tool" method (public) ("tool") #f #f 186 18 186 29 ("invalidate-view" "22" "get-children" "get-children~" "tools-width" "Dimension" "new" "set-size" "set-size~" "layout-view" "layout-view~" "set-parent" "set-parent~" "locate" "tools" "let" "tool")}
        {Lisp-Entry "refresh-tools" method (package) () #f #f 195 19 195 32 ("invalidate-view" "layout-view" "22" "get-children" "get-children~" "tools-width" "Dimension" "new" "set-size" "set-size~" "locate" "tools" "let")}
        {Lisp-Entry "tools-width" definition () ("tools") #f #f 202 15 202 26 ("get-size" "get-size~" "get-width" "get-width~" "increase!" "get-visible?" "get-visible?~" "when" "tool" "lambda" "for-each" "0" "total" "let" "tools")}
        {Lisp-Entry "layout" method (override) () #f #f 216 20 216 26 ("else" "26" "25" "1" "caption?" "Dimension" "set-size" "set-size~" "set-visible?" "set-visible?~" "fullscreen?" "cond" "get-height" "height" "let" "guest" "when" "2" "0" "get-width" "get-width~" "3" "-" "max" "Point" "new" "set-position" "set-position~" "get-size" "get-size~" "size" "locate" "tools" "let*" "width" "layout-tools" "define")}
        {Lisp-Entry "caption-rect" method () () #f #f 247 11 247 23 ("24" "2" "get-width" "-" "1" "Rect" "new")}
        {Lisp-Entry "top-rect" method () () #f #f 251 11 251 19 ("25" "2" "get-width" "-" "1" "Rect" "new")}
        {Lisp-Entry "invalidate-top" method () () #f #f 260 11 260 25 ("top-rect" "invalidate-rect")}
        {Lisp-Entry "invalidate-caption" method (override) () #f #f 264 20 264 38 ("caption-rect" "invalidate-rect")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 273 20 273 24 ("get-width" "line" "line~" "increase!" "7" "21" "draw-text" "draw-text~" "get-unfocused-text-color" "get-unfocused-text-color~" "get-focused-text-color" "get-focused-text-color~" "set-text-color" "set-text-color~" "Label" "Font" "set-font" "set-font~" "5" "3" "get-application" "get-images-portfolio" "get-images-portfolio~" "draw-image" "draw-image~" "stroke" "stroke~" "cairo-line-to" "cairo-line-to~" "cairo-move-to" "cairo-move-to~" "set-line-width" "set-line-width~" "204" "blue:" "225" "green:" "230" "red:" "Dark" "Color" "set-color" "set-color~" "get-active-background" "get-active-background~" "and" "when" "bottom" "right" "height" "37" "get-text-width" "get-text-width~" "+" "width" "not" "title?" "top" ".5" "-" "left" "let*" "selected?" "first?" "get-guest" "get-guest~" "class-of" "host-icon" "host-icon~" "get-icon" "get-icon~" "or" "icon" "get-title" "get-title~" "title" "docked" "lambda" "for-each" "determine-compact?" "compact?" "first" "1" "h" "get-frame-color" "get-frame-color~" "frame-rect" "frame-rect~" "get-inactive-background" "get-inactive-background~" "fill-background" "fill-background~" "cycle-debug-color!" "fill-rect" "fill-rect~" "debug-paint?" "if" "24" "get-right" "get-right~" "get-top" "get-top~" "get-left" "get-left~" "Rect" "new" "rect" "get-look" "look" "collect-all" "all" "get-focused-host" "self" "eq?" "focused?" "get-bounds" "bounds" "let" "context" "surface")}
        {Lisp-Entry "determine-compact?" method () () #f #f 321 11 321 29 ("-" ">" "tools" "locate" "get-width" "get-width~" "tools-width" "increase!" "37" "Label" "Font" "text-width" "text-width~" "+" "width" "get-title" "get-title~" "title" "docked" "lambda" "for-each" "0" "h" "collect-all" "all" "let" "full-width" "define")}
        {Lisp-Entry "get-look" method (override) () #f #f 341 20 341 28 ("docked" "find-look")}
        {Lisp-Entry "get-opaque?" method (override) () #f #f 350 20 350 31 ()}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 359 20 359 30 ("focus-host" "focus-host~" "focused-host?" "unless" "set-selection" "set-selection~" "Pad-View" "is?" "get-parent" "parent" "let" "in-rect?" "when" "rect" "docked" "lambda" "for-all" "pos")}
        {Lisp-Entry "toggle-docked" method () ("pos") #f #f 370 11 370 24 ("select-next" "select-next~" "lambda" "with-locked-update" "get-h" "get-h~" "<" "text-width" "text-width~" "28" "+" "h" "Label" "Font" "font" "get-title" "localize" "title" "let*" "Pad-View" "is?" "when" "get-parent" "parent" "let" "pos")}
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 382 20 382 32 ("bell" "bind" "found" "shift-down?" "get-application" "toggle-full-screen" "toggle-full-screen~" "alt-down?" "self" "Pad-View" "let*" "zoomable?" "when" "get-parent" "get-parent~" "parent" "let" "cons" "get-orientation" "get-orientation~" "Splitter-View" "is?" "and" "child" "view" "find-orientation" "vert" "horz" "case" "orientation" "opposite-orientation" "unzoom" "unzoom~" "zoom" "zoom~" "split" "get-state" "get-state~" "eq?" "if" "lambda" "with-locked-update" "target" "splitter" "toggle-zoom" "define" "pos")}
        {Lisp-Entry "container-focusable?" method (override) () #f #f 422 20 422 40 ("self" "get-selection" "get-selection~" "eq?" "Pad-View" "parent" "is-not?" "or")}
        {Lisp-Entry "ensure-container-focusable" method (override) () #f #f 427 20 427 46 ("self" "set-selection" "set-selection~" "Pad-View" "parent" "is?" "when")}
        {Lisp-Entry "for-all" method () ("proc") #f #f 437 11 437 18 ("increase!" "Rect" "new" "23" "height" "24" "37" "Label" "Font" "text-width" "text-width~" "width" "top" "1" "+" "if" "left" "not" "self" "or" "title?" "eq?" "first?" "get-title" "get-title~" "title" "docked" "lambda" "for-each" "determine-compact?" "compact?" "first" "0" "h" "collect-all" "all" "let" "proc")}
        {Lisp-Entry "collect-all" method () () #f #f 455 11 455 22 ("self" "list" "get-children" "get-children~" "Pad-View" "is?" "if" "get-parent" "pad" "let")}
        {Lisp-Entry "collect-brothers" method () () #f #f 462 11 462 27 ("get-children" "get-children~" "self" "neq?" "host" "lambda" "collect-if" "Pad-View" "is?" "when" "get-parent" "pad" "let")}
        {Lisp-Entry "select-menu" method () () #f #f 475 11 475 22 ("25" "2" "Point" "track-popup-menu" "layout-menu" "layout-menu~" "host:" "list" "properties:" "on-select" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "parent:" "Label-Item" "class-of" "host-icon" "host-icon~" "icon" "get-title" "get-title~" "title" "get-guest" "get-guest~" "guest" "let*" "docked" "lambda" "for-each" "Context-Menu" "new" "menu" "when" "collect-brothers" "brothers" "let")}
        {Lisp-Entry "on-select" method () ("evt") #f #f 489 11 489 20 ("focus-host" "focus-host~" "set-selection" "set-selection~" "lambda" "with-locked-update" "host:" "get-property" "get-property~" "host" "get-parent" "pad" "let" "evt")}}}})
"Docked-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Docked-Look.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Docked-Look" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Docked-Look" class () ((extends . "Look")) #f #f 44 7 44 18 ("Unfocused-Text-Color" "Focused-Text-Color" "Frame-Color" "Inactive-Background" "Active-Background" "Look")
        {Lisp-Entry "Active-Background" definition () () #f #f 47 14 47 31 ("243" "186" "153" "252" "blue:" "234" "green:" "225" "red:" "Color" "vertical" "Gradient")}
        {Lisp-Entry "Inactive-Background" definition () () #f #f 50 14 50 33 ("Medium" "Color")}
        {Lisp-Entry "Frame-Color" definition () () #f #f 53 14 53 25 ("blue:" "green:" "128" "red:" "Color")}
        {Lisp-Entry "Focused-Text-Color" definition () () #f #f 56 14 56 32 ("Black" "Color")}
        {Lisp-Entry "Unfocused-Text-Color" definition () () #f #f 59 14 59 34 ("0" "blue:" "75" "green:" "100" "red:" "Color")}
        {Lisp-Entry "active-background" property () ((initialize . "Active-Background") (accessors . "generate")) #f #f 63 12 63 29 ()}
        {Lisp-Entry "get-active-background" accessor () () #f #f 63 75 63 83 ()}
        {Lisp-Entry "set-active-background" accessor () () #f #f 63 75 63 83 ()}
        {Lisp-Entry "inactive-background" property () ((initialize . "Inactive-Background") (accessors . "generate")) #f #f 64 12 64 31 ()}
        {Lisp-Entry "get-inactive-background" accessor () () #f #f 64 75 64 83 ()}
        {Lisp-Entry "set-inactive-background" accessor () () #f #f 64 75 64 83 ()}
        {Lisp-Entry "frame-color" property () ((initialize . "Frame-Color") (accessors . "generate")) #f #f 65 12 65 23 ()}
        {Lisp-Entry "get-frame-color" accessor () () #f #f 65 75 65 83 ()}
        {Lisp-Entry "set-frame-color" accessor () () #f #f 65 75 65 83 ()}
        {Lisp-Entry "focused-text-color" property () ((initialize . "Focused-Text-Color") (accessors . "generate")) #f #f 66 12 66 30 ()}
        {Lisp-Entry "get-focused-text-color" accessor () () #f #f 66 75 66 83 ()}
        {Lisp-Entry "set-focused-text-color" accessor () () #f #f 66 75 66 83 ()}
        {Lisp-Entry "unfocused-text-color" property () ((initialize . "Unfocused-Text-Color") (accessors . "generate")) #f #f 67 12 67 32 ()}
        {Lisp-Entry "get-unfocused-text-color" accessor () () #f #f 67 75 67 83 ()}
        {Lisp-Entry "set-unfocused-text-color" accessor () () #f #f 67 75 67 83 ()}}}})
"Docked-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Docked-Preferences.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.ui.preference.Docked-Preferences" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Docked-Preferences" class (undocumented) ((extends . "Figure-Preferences")) #f #f 46 20 46 38 ("Figure-Preferences")
        {Lisp-Entry "model" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 17 ()}
        {Lisp-Entry "get-model" accessor () () #f #f 49 46 49 54 ()}
        {Lisp-Entry "set-model" accessor () () #f #f 49 46 49 54 ()}
        {Lisp-Entry "caption?" property () ((initialize . "#t") (accessors . "generate")) #f #f 50 12 50 20 ()}
        {Lisp-Entry "get-caption?" accessor () () #f #f 50 46 50 54 ()}
        {Lisp-Entry "set-caption?" accessor () () #f #f 50 46 50 54 ()}
        {Lisp-Entry "zoomable?" property () ((initialize . "#t") (accessors . "generate")) #f #f 51 12 51 21 ()}
        {Lisp-Entry "get-zoomable?" accessor () () #f #f 51 46 51 54 ()}
        {Lisp-Entry "set-zoomable?" accessor () () #f #f 51 46 51 54 ()}
        {Lisp-Entry "apply-preferences" method (override) ("(parent #f)") #f #f 59 20 59 37 ("set-visible?" "set-visible?~" "get-guest" "get-guest~" "client-activate" "client-activate~" "setup-host" "set-parent" "set-parent~" "create-host" "host" "model" "resolve-reference" "resolve-reference~" "class" "let*" "assert" "parent")}
        {Lisp-Entry "create-host" method (protected virtual) ("class") #f #f 69 29 69 40 ("name" "singleton-docked" "class")}
        {Lisp-Entry "setup-host" method (protected virtual) ("host") #f #f 73 29 73 39 ("self" "set-preferences" "set-preferences~" "location" "set-location" "set-location~" "zoomable?" "set-zoomable?" "set-zoomable?~" "caption?" "set-caption?" "set-caption?~" "set-icon" "set-icon~" "icon" "set-title" "set-title~" "title" "when" "host")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 89 25 89 45 ("Docked-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 98 11 98 17 ()
        {Lisp-Entry "import" import () () #f #f 101 1 101 7 ("jazz.designer")}
        {Lisp-Entry "Docked-Preferences-Descriptor" class () ((extends . "Figure-Preferences-Descriptor")) #f #f 104 7 104 36 ("Figure-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 107 3 107 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "zoomable?" "caption?" "model" "location" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image:" "install" "<install>")}
          {Lisp-Entry "component-get-component-image" method (override) ("component") #f #f 120 20 120 49 ("Image-Resource" "get-icon" "get-icon~" "or" "component")}
          {Lisp-Entry "component-presentation-property?" method (override) ("component" "property") #f #f 124 20 124 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method (override) ("component") #f #f 128 20 128 46 ("get-title" "get-title~" "or" "component")}
          {Lisp-Entry "component-set-presentation" method (override) ("component" "designer" "title") #f #f 132 20 132 46 ("title:" "set-property" "set-property~" "title" "designer" "component")}}}}})
"Document"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "document" "Document.jazz"} 243479599. jazz
    {Lisp-Entry "jazz.ui.document.Document" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Document" interface () () #f #f 40 11 40 19 ()
        {Lisp-Entry "get-document-controller" method (public virtual abstract) () #f #f 43 35 43 58 ()}
        {Lisp-Entry "new-document-controller" method (public virtual abstract) () #f #f 44 35 44 58 ()}
        {Lisp-Entry "load-content" method (public virtual abstract) ("moniker") #f #f 45 35 45 47 ("moniker")}
        {Lisp-Entry "save-content" method (public virtual abstract) ("moniker") #f #f 46 35 46 47 ("moniker")}
        {Lisp-Entry "verify-reload" method (public virtual abstract) () #f #f 47 35 47 48 ()}
        {Lisp-Entry "reload-moniker" method (public virtual abstract) ("moniker") #f #f 48 35 48 49 ("moniker")}
        {Lisp-Entry "default-extension" method (public virtual abstract) () #f #f 49 35 49 52 ()}
        {Lisp-Entry "extensions" method (public virtual abstract) () #f #f 50 35 50 45 ()}
        {Lisp-Entry "focus-document" method (public virtual abstract) () #f #f 51 35 51 49 ()}
        {Lisp-Entry "install-scroller?" method (public virtual abstract) () #f #f 52 35 52 52 ()}
        {Lisp-Entry "tool-update" method (public virtual abstract) ("tool?") #f #f 53 35 53 46 ("tool?")}
        {Lisp-Entry "console-update" method (public virtual abstract) ("console?") #f #f 54 35 54 49 ("console?")}
        {Lisp-Entry "current-history-item" method (public virtual abstract) () #f #f 55 35 55 55 ()}
        {Lisp-Entry "compare-moniker" method (public virtual abstract) ("moniker") #f #f 56 35 56 50 ("moniker")}
        {Lisp-Entry "frame-guest?" method (public virtual abstract) () #f #f 57 35 57 47 ()}}}})
"Document-Controller"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "document" "Document-Controller.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.document.Document-Controller" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("time" "jazz.ui.view" "jazz.ui.dialog" "jazz.ui" "jazz.system" "jazz.locale")}
      {Lisp-Entry "Document-Controller" class () ((extends . "Object")) #f #f 48 7 48 26 ("Object")
        {Lisp-Entry "document" slot () ((initialize . "#f")) #f #f 51 8 51 16 ()}
        {Lisp-Entry "newname" slot () ((initialize . "#f") (accessors . "generate")) #f #f 52 8 52 15 ()}
        {Lisp-Entry "get-newname" accessor () () #f #f 52 47 52 55 ()}
        {Lisp-Entry "set-newname" accessor () () #f #f 52 47 52 55 ()}
        {Lisp-Entry "moniker" slot () ((initialize . "#f")) #f #f 53 8 53 15 ()}
        {Lisp-Entry "tool?" slot () ((initialize . "#f")) #f #f 54 8 54 13 ()}
        {Lisp-Entry "console?" slot () ((initialize . "#f")) #f #f 55 8 55 16 ()}
        {Lisp-Entry "modified?" slot () ((initialize . "#f")) #f #f 56 8 56 17 ()}
        {Lisp-Entry "read-only?" slot () ((initialize . "#f") (getter . "generate")) #f #f 57 8 57 18 ()}
        {Lisp-Entry "get-read-only?" accessor () () #f #f 57 44 57 52 ()}
        {Lisp-Entry "moniker-time" slot () ((initialize . "#f") (getter . "generate")) #f #f 58 8 58 20 ()}
        {Lisp-Entry "get-moniker-time" accessor () () #f #f 58 44 58 52 ()}
        {Lisp-Entry "moniker-digest" slot () ((initialize . "#f")) #f #f 59 8 59 22 ()}
        {Lisp-Entry "initialize" method (override) ("document" "(tool?: tool? #f)" "(console?: console? #f)") #f #f 62 20 62 30 ("console?~self" "tool?~self" "self" "document~self" "set!" "nextmethod" "console?" "console?:" "tool?" "tool?:" "document")}
        {Lisp-Entry "install-in-host" method (public) ("host") #f #f 74 18 74 33 ("document" "focus-document" "focus-document~" "get-visible?" "get-visible?~" "when" "update-status" "position-host" "install-container" "host")}
        {Lisp-Entry "install-container" method (protected virtual) () #f #f 82 29 82 46 ("install-scroller" "document" "install-scroller?" "install-scroller?~" "when")}
        {Lisp-Entry "install-scroller" method (protected) () #f #f 87 21 87 37 ("set-content" "set-content~" "set-client" "set-client~" "get-content" "get-content~" "set-parent" "set-parent~" "hscroll?:" "vscroll?:" "parent:" "Scroller-View" "new" "scroller" "document" "get-host" "get-host~" "host" "let*")}
        {Lisp-Entry "position-host" method () ("host") #f #f 95 11 95 24 ("set-size" "set-size~" "100" "get-height" "get-height~" "-" "Dimension" "new" "size" "documents" "get-preferences" "get-default-width" "get-default-width~" "width" "get-parent" "get-parent~" "get-size" "get-size~" "parent-size" "let*" "Internal-Frame-Host" "is?" "when" "host")}
        {Lisp-Entry "confirm-close" method (public virtual) () #f #f 108 26 108 39 ("throw-cancel" "cancel" "no" "save-all" "yes" "case" "confirmation" "type:" "name-status" "format" "message-box" "code" "let" "get-modified?" "when")}
        {Lisp-Entry "close-on-close-all?" method (public) () #f #f 118 18 118 37 ("get-tool?" "not")}
        {Lisp-Entry "effective-newname" method () () #f #f 127 11 127 28 ("localize" "newname" "or")}
        {Lisp-Entry "get-moniker" method (public) () #f #f 131 18 131 29 ("moniker")}
        {Lisp-Entry "set-moniker" method (public) ("mnk") #f #f 135 18 135 29 ("document" "load-content" "load-content~" "set!" "moniker" "/=" "when" "mnk")}
        {Lisp-Entry "change-moniker" method (public) ("mnk") #f #f 141 18 141 32 ("moniker" "set!" "mnk")}
        {Lisp-Entry "save" method (public virtual) () #f #f 145 26 145 30 ("save-content" "write-allowed?" "when" "save-as" "moniker" "not" "if")}
        {Lisp-Entry "save-as" method (public virtual) () #f #f 152 26 152 33 ("save-to" "set-read/write" "set-read/write~" "read-only?" "read-only?~" "exists?" "exists?~" "and" "when" "extensions:" "default-extension:" "get-name" "get-name~" "effective-newname" "not" "if" "initial-filename:" "choose-new-file" "moniker" "extensions~" "extensions" "document" "default-extension" "default-extension~" "extension" "let*")}
        {Lisp-Entry "save-to" method (public) ("mnk") #f #f 161 18 161 25 ("update-status" "moniker" "set!" "save-content" "mnk")}
        {Lisp-Entry "save-all" method (public) () #f #f 167 18 167 26 ("save")}
        {Lisp-Entry "save-content" method () ("moniker") #f #f 171 11 171 23 ("document" "save-content" "save-content~" "moniker")}
        {Lisp-Entry "revert-saved" method (public) () #f #f 175 18 175 30 ("throw-cancel" "cancel" "no" "document" "reload-moniker" "reload-moniker~" "yes" "case" "confirmation" "type:" "message-box" "code" "let" "bell" "moniker" "not" "if")}
        {Lisp-Entry "compare-saved" method (public) () #f #f 186 18 186 31 ("document" "compare-moniker" "compare-moniker~" "bell" "moniker" "not" "if")}
        {Lisp-Entry "get-modified?" method (public virtual) () #f #f 197 26 197 39 ("modified?" "console?" "if")}
        {Lisp-Entry "set-modified?" method (public virtual) ("state") #f #f 203 26 203 39 ("update-status" "set!" "modified?" "neq?" "when" "state")}
        {Lisp-Entry "dependent-document?" method (public virtual) () #f #f 214 26 214 45 ()}
        {Lisp-Entry "set-caption" method (public) ("title") #f #f 223 18 223 29 ("invalidate-caption" "invalidate-caption~" "get-toplevel" "set-caption" "set-caption~" "front-view?" "front-view?~" "get-maximized?" "get-maximized?~" "Internal-Frame-Host" "is?" "and" "if" "get-visible?" "get-visible?~" "when" "set-title" "set-title~" "document" "get-host" "get-host~" "host" "let" "title")}
        {Lisp-Entry "update-status" method (public virtual) () #f #f 238 26 238 39 ("update-caption" "update-state")}
        {Lisp-Entry "update-caption" method (public virtual) () #f #f 243 26 243 40 ("document-status" "set-caption" "get-guest" "get-guest~" "eq?" "Host-View" "is?" "and" "when" "document" "get-host" "get-host~" "host" "let")}
        {Lisp-Entry "document-status" method (public virtual) () #f #f 249 26 249 41 ("read/write-status" "directory-status" "modified-status" "name-status" "format")}
        {Lisp-Entry "name-status" method (public virtual) () #f #f 257 26 257 37 ("get-name" "get-name~" "get-base" "get-base~" "tool?" "effective-newname" "moniker" "not" "if")}
        {Lisp-Entry "modified-status" method () () #f #f 265 11 265 26 ("get-modified?" "if")}
        {Lisp-Entry "directory-status" method () () #f #f 271 11 271 27 ("present-location" "present-location~" "format" "get-parent" "get-parent~" "parent" "let" "tool?" "moniker" "not" "or" "if")}
        {Lisp-Entry "read/write-status" method () () #f #f 280 11 280 28 ("read-only?" "tool?" "moniker" "not" "or" "if")}
        {Lisp-Entry "update-state" method (public) () #f #f 293 18 293 30 ("read-only?~" "read-only?" "set!" "exists?" "exists?~" "moniker" "not" "or" "if")}
        {Lisp-Entry "update-moniker-time" method (public virtual) ("moniker") #f #f 299 26 299 45 ("SHA-1" "parse" "parse~" "digest-file" "moniker-digest" "get-modification-time" "get-modification-time~" "moniker-time" "set!" "moniker")}
        {Lisp-Entry "verify-reload" method (public) ("(propose-reload?: propose-reload? #t)" "(cancel-edition?: cancel-edition? #f)") #f #f 304 18 304 31 ("propose-reload" "needs-reload?" "when" "cancel-edition?" "cancel-edition?:" "propose-reload?" "propose-reload?:")}
        {Lisp-Entry "needs-reload?" method (public) () #f #f 309 18 309 31 ("moniker-digest" "SHA-1" "parse" "parse~" "digest-file" "equal?" "not" "get-modification-time" "get-modification-time~" "time->seconds" "/=" "exists?" "exists?~" "moniker-time" "moniker" "and")}
        {Lisp-Entry "propose-reload" method (public) ("(propose-reload?: propose-reload? #t)" "(cancel-edition?: cancel-edition? #f)") #f #f 316 18 316 32 ("propose-reload-action" "question" "type:" "title:" "get-moniker" "format" "message-box" "yes" "not" "if" "code" "let" "cancel-edition?" "cancel-edition?:" "propose-reload?" "propose-reload?:")}
        {Lisp-Entry "propose-reload-action" method (protected) ("code" "(cancel-edition?: cancel-edition? #f)") #f #f 325 21 325 42 ("update-status" "update-moniker-time" "no" "throw-cancel" "when" "moniker" "document" "reload-moniker" "reload-moniker~" "yes" "case" "cancel-edition?" "cancel-edition?:" "code")}
        {Lisp-Entry "write-allowed?" method (public) () #f #f 341 18 341 32 ("get-read-only?" "not")}
        {Lisp-Entry "in-write-allowed?" method () ("moniker") #f #f 345 11 345 28 ("no-action" "read-only" "update-status" "read/write" "case" "ensure-read/write" "code" "let" "moniker")}
        {Lisp-Entry "out-write-allowed?" method () ("moniker") #f #f 353 11 353 29 ("throw-cancel" "cancel" "no" "update-status" "set-read/write" "set-read/write~" "yes" "case" "confirmation" "type:" "title:" "get-name" "get-name~" "format" "message-box" "code" "let" "moniker")}
        {Lisp-Entry "get-tool?" method (public) () #f #f 373 18 373 27 ("tool?")}
        {Lisp-Entry "set-tool?" method (public) ("flag") #f #f 377 18 377 27 ("document" "tool-update" "tool-update~" "set!" "tool?" "neq?" "when" "flag")}
        {Lisp-Entry "get-console?" method (public) () #f #f 383 18 383 30 ("console?")}
        {Lisp-Entry "set-console?" method (public) ("flag") #f #f 387 18 387 30 ("document" "console-update" "console-update~" "set!" "console?" "neq?" "when" "flag")}
        {Lisp-Entry "select-next" method (public virtual) ("search-context" "." "rest") #f #f 398 26 398 37 ("rest" "search-context")}
        {Lisp-Entry "select-previous" method (public virtual) ("search-context" "." "rest") #f #f 402 26 402 41 ("rest" "search-context")}
        {Lisp-Entry "select-expr" method (public virtual) ("search-context") #f #f 406 26 406 37 ("search-context")}
        {Lisp-Entry "select-expr-backward" method (public virtual) ("search-context") #f #f 410 26 410 46 ("search-context")}}}})
"Document-Moniker"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "document" "Document-Moniker.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.document.Document-Moniker" module (protected) () #f #f 37 18 37 51 ("Document-Moniker-Class" "<Document-Moniker-Class>" "jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.system" "jazz.io.protocol" "jazz.io")}
      {Lisp-Entry "Document-Moniker-Class" class () ((extends . "(:class Moniker)")) #f #f 45 7 45 29 ("Moniker" ":class")
        {Lisp-Entry "get-protocol" method (override) () #f #f 48 20 48 32 ("doc")}}
      {Lisp-Entry "Document-Moniker" class () ((metaclass . "Document-Moniker-Class") (extends . "Moniker")) #f #f 52 7 52 23 ("Moniker" "Document-Moniker-Class")
        {Lisp-Entry "pathname" slot () () #f #f 55 8 55 16 ()}
        {Lisp-Entry "construct-literal" method (meta) ("context" "pathname") #f #f 59 16 59 33 ("self" "new" "pathname" "context")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 63 20 63 25 ("pathname" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "present" method (override) () #f #f 74 20 74 27 ("pathname" "get-list" "get-list~" "format")}
        {Lisp-Entry "initialize" method (override) ("path") #f #f 83 20 83 30 ("pathname" "set!" "nextmethod" "path")}
        {Lisp-Entry "get-name" method (override) () #f #f 93 20 93 28 ("pathname" "get-name" "get-name~")}
        {Lisp-Entry "get-document" method (public) () #f #f 97 18 97 30 ("get-guest" "get-guest~" "error" "null?" "if" "pathname" "find-document" "find-document~" "frame" "get-application" "appl" "let*")}
        {Lisp-Entry "load-lines" method (override) ("." "rest") #f #f 105 20 105 30 ("get-document" "get-model" "get-model~" "get-content" "get-content~" "rest")}
        {Lisp-Entry "load-form" method (override) () #f #f 109 20 109 29 ("get-document" "get-designer" "get-designer~" "get-form" "get-form~")}}
      {Lisp-Entry "moniker-new" generic/specific () ("parameters") ("<Document-Moniker-Class>") #f 113 11 113 22 ("File" "class" "new" "parameters")}}})
"Document-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "document" "Document-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.document.Document-Preferences" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Document-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 45 20 45 40 ("Preferences")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 57 25 57 45 ("Document-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 66 11 66 17 ()
        {Lisp-Entry "import" import () () #f #f 69 1 69 7 ("jazz.designer")}
        {Lisp-Entry "Document-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 72 7 72 38 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 75 3 75 7 (">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Documents-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "document" "Documents-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.document.Documents-Preferences" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Documents-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 46 20 46 41 ("White" "Color" "800" "Preferences")
        {Lisp-Entry "default-width" property () ((initialize . "800") (accessors . "generate")) #f #f 49 12 49 25 ()}
        {Lisp-Entry "get-default-width" accessor () () #f #f 49 72 49 80 ()}
        {Lisp-Entry "set-default-width" accessor () () #f #f 49 72 49 80 ()}
        {Lisp-Entry "default-background" property () ((initialize . "{Color White}") (accessors . "generate")) #f #f 50 12 50 30 ()}
        {Lisp-Entry "get-default-background" accessor () () #f #f 50 66 50 74 ()}
        {Lisp-Entry "set-default-background" accessor () () #f #f 50 66 50 74 ()}
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 62 25 62 45 ("Documents-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 71 11 71 17 ()
        {Lisp-Entry "import" import () () #f #f 74 1 74 7 ("jazz.designer")}
        {Lisp-Entry "Documents-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 77 7 77 39 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 80 3 80 7 ("domain" "Color-Domain" "<Color-Domain>" "name:" "Property-Descriptor" "<Property-Descriptor>" "default-background" "default-width" "categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Drag-Source"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dnd" "Drag-Source.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.dnd.Drag-Source" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Drag-Source" class () ((extends . "Object")) #f #f 40 7 40 18 ("Object")
        {Lisp-Entry "view" slot () ((initialize . "#f") (getter . "generate")) #f #f 43 8 43 12 ()}
        {Lisp-Entry "get-view" accessor () () #f #f 43 38 43 46 ()}
        {Lisp-Entry "position" slot () ((initialize . "#f") (getter . "generate")) #f #f 44 8 44 16 ()}
        {Lisp-Entry "get-position" accessor () () #f #f 44 38 44 46 ()}
        {Lisp-Entry "image" slot () ((initialize . "#f") (getter . "generate")) #f #f 45 8 45 13 ()}
        {Lisp-Entry "get-image" accessor () () #f #f 45 38 45 46 ()}
        {Lisp-Entry "initialize" method (override) ("(view: view #f)" "(position: position #f)" "(image: image #f)") #f #f 48 20 48 30 ("image~self" "position~self" "self" "view~self" "set!" "nextmethod" "image" "image:" "position" "position:" "view" "view:")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 55 20 55 25 ("image" "position" "view" "format" "lambda" "self" "print-unreadable" "readably" "output")}}}})
"Draw-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Draw-Event.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.event.Draw-Event" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Draw-Event" class () ((extends . "Event")) #f #f 43 7 43 17 ("Event")
        {Lisp-Entry "surface" slot () () #f #f 46 8 46 15 ()}
        {Lisp-Entry "update" slot () () #f #f 47 8 47 14 ()}
        {Lisp-Entry "lh" slot () () #f #f 48 8 48 10 ()}
        {Lisp-Entry "lv" slot () () #f #f 49 8 49 10 ()}
        {Lisp-Entry "info" slot () () #f #f 50 8 50 12 ()}
        {Lisp-Entry "initialize" method (override) ("kind" "sender" "surface" "update" "info") #f #f 53 20 53 30 ("info~self" "lv" "lv~self" "lh" "lh~self" "update~self" "self" "surface~self" "set!" "nextmethod" "info" "update" "surface" "sender" "kind")}
        {Lisp-Entry "get-dc" method (public) () #f #f 62 18 62 24 ("surface")}}}})
"Drawing"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Drawing.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.ui.view.Drawing" module (protected) () #f #f 38 18 38 38 ("jazz")
      {Lisp-Entry "import" import () () #f #f 41 1 41 7 ("jazz.ui.view" "jazz.ui" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Drawing" class () ((extends . "Figure")) #f #f 47 7 47 14 ("Figure")
        {Lisp-Entry "get-player" method (public virtual) () #f #f 55 26 55 36 ("get-player" "get-player~" "parent" "and")}
        {Lisp-Entry "set-player" method (public virtual) ("plr") #f #f 59 26 59 36 ("children" "set-player" "set-player~" "Drawing" "is?" "when" "child" "lambda" "for-each" "plr")}
        {Lisp-Entry "get-lie" method (public) () #f "<Point>" 71 18 71 25 ("0" "view->device" "Point" "<Point>")}
        {Lisp-Entry "set-lie" method (public) ("lie" "<Point>") #f "<void>" 75 18 75 25 ("position" "device->view" "nu+" "set-position" "void" "<void>" "Point" "<Point>" "lie")}
        {Lisp-Entry "get-root" method (public virtual) () #f "<View+>" 84 26 84 34 ("get-root" "get-root~" "when" "get-player" "player" "let" "View+" "<View+>")}
        {Lisp-Entry "get-rootmost" method (public) () #f "<View>" 90 18 90 30 ("self" "get-root" "or" "not" "if" "get-parent" "get-parent~" "parent" "let" "view" "rootmost" "define" "View" "<View>")}
        {Lisp-Entry "acquire" method (public) ("origin" "<Drawing>" "shape") #f #f 105 18 105 25 ("error" "get-root~" "get-root" "acquire" "acquire~" "get-player~" "origin-player" "get-player" "player" "device->logical" "device->logical~" "logical->device" "logical->device~" "lambda" "with-view-transform" "with-view-transform~" "device-shape" "get-ancestry~" "get-ancestry" "transformation-surface" "surface" "get-rootmost~" "origin-root" "get-rootmost" "root" "self" "cdr" "car" "eq?" "not-null?" "and" "if" "s2" "s1" "ancestor" "iter" "let" "l2" "l1" "common-ancestor" "define" "shape" "Drawing" "<Drawing>" "origin")}
        {Lisp-Entry "view->device" method (public) ("shape") #f #f 137 18 137 30 ("logical->device" "logical->device~" "surface" "lambda" "with-transformation-surface" "shape")}
        {Lisp-Entry "device->view" method (public) ("shape") #f #f 143 18 143 30 ("device->logical" "device->logical~" "surface" "lambda" "with-transformation-surface" "shape")}
        {Lisp-Entry "get-size" method (override) () #f #f 154 20 154 28 ("size")}
        {Lisp-Entry "set-size" method (override) ("sz" "<Dimension>") #f #f 158 20 158 28 ("call-layout" "get-finished?" "invalidate-layout" "set!" "size" "/=" "when" "Dimension" "<Dimension>" "sz")}
        {Lisp-Entry "set-size-noevent" method (public virtual) ("sz" "<Dimension>") #f #f 166 26 166 42 ("size" "set!" "Dimension" "<Dimension>" "sz")}
        {Lisp-Entry "get-width" method (public) () #f "<fx>" 170 18 170 27 ("size" "get-width" "get-width~" "fx" "<fx>")}
        {Lisp-Entry "set-width" method (public) ("width" "<fx>") #f "<void>" 174 18 174 27 ("get-height" "Dimension" "new" "set-size" "void" "<void>" "fx" "<fx>" "width")}
        {Lisp-Entry "get-height" method (public) () #f "<fx>" 178 18 178 28 ("size" "get-height" "get-height~" "fx" "<fx>")}
        {Lisp-Entry "set-height" method (public) ("height" "<fx>") #f #f 182 18 182 28 ("get-width" "Dimension" "new" "set-size" "fx" "<fx>" "height")}
        {Lisp-Entry "set-height-noevent" method (public) ("height" "<fx>") #f #f 186 18 186 36 ("get-width" "Dimension" "new" "set-size-noevent" "fx" "<fx>" "height")}
        {Lisp-Entry "get-left" method (public) () #f "<fx>" 190 18 190 26 ("position" "get-h" "get-h~" "fx" "<fx>")}
        {Lisp-Entry "get-top" method (public) () #f "<fx>" 194 18 194 25 ("position" "get-v" "get-v~" "fx" "<fx>")}
        {Lisp-Entry "get-right" method (public) () #f "<fx>" 198 18 198 27 ("size" "get-width" "get-width~" "position" "get-h" "get-h~" "+" "fx" "<fx>")}
        {Lisp-Entry "get-bottom" method (public) () #f "<fx>" 202 18 202 28 ("size" "get-height" "get-height~" "position" "get-v" "get-v~" "+" "fx" "<fx>")}
        {Lisp-Entry "get-bounds" method (public) () #f "<Rect>" 206 18 206 28 ("get-size" "size-rect" "Rect" "<Rect>")}
        {Lisp-Entry "get-rect" method (public) () #f "<Rect>" 210 18 210 26 ("get-size" "get-position" "position/size->rect" "Rect" "<Rect>")}
        {Lisp-Entry "set-rect" method (public) ("rect" "<Rect>") #f "<void>" 214 18 214 26 ("rect-size" "set-size" "rect-position" "set-position" "void" "<void>" "Rect" "<Rect>" "rect")}
        {Lisp-Entry "grow-rect" method (public) ("dh" "dv" "dwidth" "dheight") #f #f 219 18 219 27 ("set-position" "set-size" "Dimension" "get-size" "size" "Point" "new" "get-position" "+" "pos" "let" "dheight" "dwidth" "dv" "dh")}
        {Lisp-Entry "get-transformation" method (public virtual) () #f #f 231 26 231 44 ()}
        {Lisp-Entry "view-visible?" method (public) () #f #f 240 18 240 31 ("get-root" "get-root~" "self" "eq?" "view-visible?" "view-visible?~" "parent" "if" "get-visible?" "and" "get-player" "player" "let")}
        {Lisp-Entry "get-opaque?" method (public virtual) () #f #f 252 26 252 37 ()}
        {Lisp-Entry "get-transparent?" method (public virtual) () #f #f 256 26 256 42 ()}
        {Lisp-Entry "invalidate-layout" method (protected) () #f #f 265 21 265 38 ("set-layout-valid?")}
        {Lisp-Entry "call-layout" method (protected) () #f #f 269 21 269 32 ("set-layout-valid?" "layout" "get-visible?" "not" "inhibit-layouts?" "and" "get-layout-valid?" "or" "unless")}
        {Lisp-Entry "layout-drawing" method (public) () #f #f 275 18 275 32 ("call-layout" "invalidate-layout" "get-finished?" "when")}
        {Lisp-Entry "layout" method (public virtual) () #f #f 283 26 283 32 ()}
        {Lisp-Entry "adjust?" method (public virtual) () #f #f 287 26 287 33 ()}
        {Lisp-Entry "adjust-fit" method (public virtual) () #f #f 291 26 291 36 ()}
        {Lisp-Entry "adjust" method (public virtual) () #f #f 295 26 295 32 ()}
        {Lisp-Entry "for-each-view" method (public) ("proc" "<procedure>" "(include-invisibles?: include-invisibles? #f)") #f #f 304 18 304 31 ("get-visible?" "get-visible?~" "or" "View" "is?" "and" "when" "children" "in" "child" "for" "loop" "include-invisibles?" "include-invisibles?:" "procedure" "<procedure>" "proc")}
        {Lisp-Entry "for-each-view-reversed" method (public) ("proc" "<procedure>" "(include-invisibles?: include-invisibles? #f)") #f #f 311 18 311 40 ("children" "get-visible?" "get-visible?~" "or" "View" "is?" "and" "when" "child" "lambda" "for-each-reversed" "include-invisibles?" "include-invisibles?:" "procedure" "<procedure>" "proc")}
        {Lisp-Entry "*transformation-surface*" definition () () #f #f 324 14 324 38 ()}
        {Lisp-Entry "transformation-surface" method () () #f #f 328 11 328 33 ("get-root" "get-offscreen" "get-offscreen~" "4096" "Dimension" "Memory-Surface" "new" "set!" "*transformation-surface*" "unless")}
        {Lisp-Entry "with-transformation-surface" method (public) ("proc") #f #f 336 18 336 45 ("lambda" "get-rootmost" "with-view-transform" "transformation-surface" "surface" "let" "proc")}
        {Lisp-Entry "with-pristine-surface" method (public) ("proc") #f #f 343 18 343 39 ("lambda" "with-pristine-transform" "with-pristine-transform~" "transformation-surface" "surface" "let" "proc")}
        {Lisp-Entry "find-drawing" method (public) ("pos" "<Point>" "(ignore: ignore #f)") #f #f 350 18 350 30 ("find-in-drawing" "surface" "lambda" "with-pristine-surface" "ignore" "ignore:" "Point" "<Point>" "pos")}
        {Lisp-Entry "find-in-drawing" method (public) ("surface" "<Surface>" "device-pos" "<Point>" "ignore") #f #f 356 18 356 33 ("get-transparent?" "find-subdrawing" "or" "size" "in-drawing?" "when" "device->logical" "device->logical~" "pos" "let" "lambda" "with-self-transform" "self" "memq?" "and" "unless" "ignore" "Point" "<Point>" "device-pos" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "find-subdrawing" method (protected virtual) ("surface" "<Surface>" "device-pos" "<Point>" "pos" "<Point>" "ignore") #f #f 367 29 367 44 ("continuation-return" "when" "find-in-drawing" "find-in-drawing~" "found" "let" "View" "<View>" "view" "for-each-view-reversed" "return" "lambda" "continuation-capture" "ignore" "pos" "Point" "<Point>" "device-pos" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "in-drawing?" method (protected virtual) ("pos" "<Point>" "size" "<Dimension>") #f #f 378 29 378 40 ("in-size?" "Dimension" "<Dimension>" "size" "Point" "<Point>" "pos")}
        {Lisp-Entry "invalidate-drawing" method (public) () #f #f 387 18 387 36 ("parent" "invalidate-rect" "invalidate-rect~" "get-rect" "rect" "let")}
        {Lisp-Entry "paint-root" method (public) ("surface" "<Surface>" "update-region" "<Region>") #f "<void>" 397 18 397 28 ("paint" "painting-tree" "nodes" "draw-self?" "view" "bind" "void" "<void>" "Region" "<Region>" "update-region" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "paint-drawing" method (public) ("surface" "<Surface>" "context" "<list>") #f "<void>" 402 18 402 31 ("paint" "painting-tree" "nodes" "draw-self?" "view" "bind" "get-clipper" "get-clipper~" "logical->device" "logical->device~" "rect:" "Region" "new" "region" "with" "void" "<void>" "list" "<list>" "context" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "render-drawing" method (public) ("surface" "<Surface>" "context" "<list>") #f "<void>" 408 18 408 32 ("render" "painting-tree" "nodes" "draw-self?" "view" "bind" "get-clipper" "get-clipper~" "logical->device" "logical->device~" "rect:" "Region" "new" "region" "with" "void" "<void>" "list" "<list>" "context" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "painting-tree" method (public) ("surface" "region" "<Region>") #f #f 414 18 414 31 ("self" "full-painting-tree" "windows" "kernel-platform" "neq?" "close" "close~" "or" "diff" "combine!" "combine!~" "cons" "set!" "node" "child-coverage" "bind" "empty?" "empty?~" "not" "when" "region-intersection" "intersection" "child-region" "with-self-transform" "with-self-transform~" "child" "lambda" "for-each-view-reversed" "for-each-view-reversed~" "get-bounds" "get-bounds~" "logical->device" "logical->device~" "rect:" "new" "get-opaque?" "get-opaque?~" "if" "coverage" "copy-region" "update" "with" "nodes" "let" "view" "make-tree" "define" "Region" "<Region>" "region" "surface")}
        {Lisp-Entry "full-painting-tree" method (public) () #f #f 441 18 441 36 ("self" "cons" "set!" "child" "lambda" "for-each-view-reversed" "for-each-view-reversed~" "nodes" "let" "view" "make-tree" "define")}
        {Lisp-Entry "paint" method (public) ("surface" "<Surface>" "draw-self?" "<bool>" "nodes" "<list>" "context" "<list>") #f "<void>" 452 18 452 23 ("blit-surface" "blit-surface~" "get-clipper" "get-clipper~" "set-clipper" "set-clipper~" "get-offscreen" "offscreen" "let" "paint-content" "get-offscreen?" "not" "if" "void" "<void>" "context" "list" "<list>" "nodes" "bool" "<bool>" "draw-self?" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "paint-content" method (public) ("surface" "<Surface>" "draw-self?" "<bool>" "nodes" "<list>" "context" "<list>") #f "<void>" 461 18 461 31 ("render" "lambda" "with-self-transform" "void" "<void>" "context" "list" "<list>" "nodes" "bool" "<bool>" "draw-self?" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "render" method (public virtual) ("surface" "<Surface>" "draw-self?" "<bool>" "nodes" "<list>" "context" "<list>") #f "<void>" 467 26 467 32 ("draw-children" "draw-content" "draw-background" "cycle-debug-color!" "get-bounds" "fill-rect" "fill-rect~" "View" "self" "is?" "debug-paint?" "if" "when" "void" "<void>" "context" "list" "<list>" "nodes" "bool" "<bool>" "draw-self?" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "draw-background" method (public virtual) ("surface" "<Surface>" "context") #f "<void>" 477 26 477 41 ("void" "<void>" "context" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "draw-content" method (public virtual) ("surface" "<Surface>" "context" "<list>") #f "<void>" 481 26 481 38 ("draw" "void" "<void>" "list" "<list>" "context" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "draw" method (public virtual) ("surface" "<Surface>" "context" "<list>") #f "<void>" 485 26 485 30 ("void" "<void>" "list" "<list>" "context" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "draw-children" method (public virtual) ("surface" "<Surface>" "nodes" "<list>" "context" "<list>") #f "<void>" 489 26 489 39 ("paint" "paint~" "draw-self?" "drawing" "bind" "node" "lambda" "for-each" "void" "<void>" "context" "list" "<list>" "nodes" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "get-offscreen" method (protected virtual) ("surface" "<Surface+>") #f #f 501 29 501 42 ("Surface+" "<Surface+>" "surface")}
        {Lisp-Entry "with-view-transform" method (protected) ("surface" "<Surface>" "root" "<View>" "thunk" "<procedure>") #f #f 510 21 510 40 ("with-self-transform" "lambda" "parent" "with-view-transform" "with-view-transform~" "with-pristine-transform" "with-pristine-transform~" "self" "eq?" "if" "procedure" "<procedure>" "thunk" "View" "<View>" "root" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "with-self-transform" method (protected virtual) ("surface" "<Surface>" "thunk" "<procedure>") #f #f 520 29 520 48 ("get-transformation" "get-height" "get-height~" "size" "get-width" "get-width~" "get-v" "get-v~" "position" "get-h" "get-h~" "with-clipping-transform" "with-clipping-transform~" "procedure" "<procedure>" "thunk" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "get-view-clipper" method (public) () #f #f 525 18 525 34 ("get-clipper" "get-clipper~" "surface" "lambda" "with-transformation-surface")}
        {Lisp-Entry "get-offscreen?" method (public virtual) () #f #f 531 26 531 40 ()}
        {Lisp-Entry "set-offscreen?" method (public virtual) ("flag" "<bool>") #f #f 535 26 535 40 ("bool" "<bool>" "flag")}
        {Lisp-Entry "get-layer" method (public virtual) () #f #f 544 26 544 35 ()}
        {Lisp-Entry "set-layer" method (public virtual) ("value") #f #f 548 26 548 35 ("value")}
        {Lisp-Entry "get-effect" method (public virtual) () #f #f 557 26 557 36 ()}
        {Lisp-Entry "set-effect" method (public virtual) ("value") #f #f 561 26 561 36 ("value")}}}})
"Drop-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dnd" "Drop-Event.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dnd.Drop-Event" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Drop-Event" class () ((extends . "Mouse-Event")) #f #f 43 7 43 17 ("Mouse-Event")
        {Lisp-Entry "drag-drop" slot () ((getter . "generate")) #f #f 46 8 46 17 ()}
        {Lisp-Entry "get-drag-drop" accessor () () #f #f 46 25 46 33 ()}
        {Lisp-Entry "initialize" method (override) ("kind" "sender" "pos" "drag-drop") #f #f 49 20 49 30 ("self" "drag-drop~self" "set!" "nextmethod" "drag-drop" "pos" "sender" "kind")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 54 20 54 25 ("lambda" "self" "print-unreadable" "readably" "output")}}}})
"Drop-Target"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dnd" "Drop-Target.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.dnd.Drop-Target" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Drop-Target" class () ((extends . "Object")) #f #f 40 7 40 18 ("Object")
        {Lisp-Entry "view" slot () ((getter . "generate")) #f #f 43 8 43 12 ()}
        {Lisp-Entry "get-view" accessor () () #f #f 43 25 43 33 ()}
        {Lisp-Entry "position" slot () ((getter . "generate")) #f #f 44 8 44 16 ()}
        {Lisp-Entry "get-position" accessor () () #f #f 44 25 44 33 ()}
        {Lisp-Entry "criteria" slot () ((getter . "generate")) #f #f 45 8 45 16 ()}
        {Lisp-Entry "get-criteria" accessor () () #f #f 45 25 45 33 ()}
        {Lisp-Entry "handler" slot () ((getter . "generate")) #f #f 46 8 46 15 ()}
        {Lisp-Entry "get-handler" accessor () () #f #f 46 25 46 33 ()}
        {Lisp-Entry "user-data" slot () ((getter . "generate")) #f #f 47 8 47 17 ()}
        {Lisp-Entry "get-user-data" accessor () () #f #f 47 25 47 33 ()}
        {Lisp-Entry "initialize" method (override) ("(view: view #f)" "(position: position #f)" "(criteria: criteria #f)" "(handler: handler #f)" "(user-data: user-data #f)") #f #f 50 20 50 30 ("user-data~self" "handler~self" "criteria~self" "position~self" "self" "view~self" "set!" "nextmethod" "user-data" "user-data:" "handler" "handler:" "criteria" "criteria:" "position" "position:" "view" "view:")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 59 20 59 25 ("view" "format" "lambda" "self" "print-unreadable" "readably" "output")}}}})
"Edit-Base-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Edit-Base-Menu.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.menu.Edit-Base-Menu" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Edit-Base-Menu" class () ((extends . "Menu")) #f #f 46 7 46 21 ("Menu")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("select-all" "delete" "end-paste" "paste" "copy" "cut" "Separator-Item" "<Separator-Item>" "redo" "view" "Action" "action-handler:" "Image-Resource" "icon:" "undo" "name:" "Label-Item" "<Label-Item>" "french:" "english:" "Locales" "title:" "install" "<install>")}}}})
"Edit-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Edit-Menu.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.menu.Edit-Menu" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Edit-Menu" class () ((extends . "Edit-Base-Menu")) #f #f 45 7 45 16 ("Edit-Base-Menu")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("forward-history" "backward-history" "Image-Resource" "icon:" "add-history" "Menu" "<Menu>" "history" "history-separator" "Separator-Item" "<Separator-Item>" "visible?:" "view" "paste-properties" "application" "Action" "action-handler:" "end-paste" "before:" "title:" "paste-cycle-stack" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Edition-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Edition-Event.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.event.Edition-Event" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Edition-Event" class () ((extends . "Event")) #f #f 43 7 43 20 ("Event")}}})
"Effect"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "effect" "Effect.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.effect.Effect" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Effect" class (undocumented) ((extends . "Object")) #f #f 40 20 40 26 ("Object")
        {Lisp-Entry "animate" method (public virtual) ("src" "dst" "pos" "size") #f #f 43 26 43 33 ("size" "pos" "dst" "src")}}}})
"Entities-Controller"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "entity" "Entities-Controller.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.entity.Entities-Controller" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Entities-Controller" class (undocumented) ((extends . "Object")) #f #f 52 20 52 39 ("Object")
        {Lisp-Entry "add-child" method (public virtual abstract) ("child" "parent") #f #f 60 35 60 44 ("parent" "child")}
        {Lisp-Entry "remove-child" method (public virtual abstract) ("child") #f #f 61 35 61 47 ("child")}
        {Lisp-Entry "set-name" method (public virtual abstract) ("entity" "name") #f #f 62 35 62 43 ("name" "entity")}
        {Lisp-Entry "set-property" method (public virtual abstract) ("entity" "property" "value") #f #f 63 35 63 47 ("value" "property" "entity")}
        {Lisp-Entry "cut-entities" method (public virtual abstract) ("entities") #f #f 64 35 64 47 ("entities")}
        {Lisp-Entry "copy-entities" method (public virtual abstract) ("entities") #f #f 65 35 65 48 ("entities")}
        {Lisp-Entry "paste-parcels" method (public virtual abstract) ("parcels" "parent") #f #f 66 35 66 48 ("parent" "parcels")}
        {Lisp-Entry "delete-entities" method (public virtual) ("entities") #f #f 74 26 74 41 ("delete-entity" "entity" "lambda" "for-each" "entities")}
        {Lisp-Entry "delete-entity" method (public virtual) ("entity") #f #f 80 26 80 39 ("remove-child" "entity")}}}})
"Entities-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "entity" "Entities-Tree.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.entity.Entities-Tree" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.clipboard" "jazz.ui" "jazz.system" "jazz.locale" "jazz.designer")}
      {Lisp-Entry "Entities-Tree" class (undocumented) ((extends . "Tree-View")) #f #f 60 20 60 33 ("Tree-View")
        {Lisp-Entry "client" slot () ((initialize . "#f") (accessors . "generate")) #f #f 63 8 63 14 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 63 43 63 51 ()}
        {Lisp-Entry "set-client" accessor () () #f #f 63 43 63 51 ()}
        {Lisp-Entry "controller" slot () ((initialize . "#f") (accessors . "generate")) #f #f 64 8 64 18 ()}
        {Lisp-Entry "get-controller" accessor () () #f #f 64 43 64 51 ()}
        {Lisp-Entry "set-controller" accessor () () #f #f 64 43 64 51 ()}
        {Lisp-Entry "focus-actions" method (override) () #f #f 72 20 72 33 ("nextmethod" "entities-tree" "find-actions" "cons")}
        {Lisp-Entry "on-delete-selection" method () ("evt") #f #f 82 11 82 30 ("delete-selection" "evt")}
        {Lisp-Entry "on-rename-selection" method () ("evt") #f #f 86 11 86 30 ("rename-selection" "evt")}
        {Lisp-Entry "context-menu" method (override) ("pos") #f #f 90 20 90 32 ("track-popup-menu" "when" "get-context-menu" "menu" "let" "lambda" "with-context-click" "pos")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 98 20 98 36 ("self" "client:" "Entity-Menu" "new")}
        {Lisp-Entry "on-properties" method (override) ("evt") #f #f 102 20 102 33 ("show-properties" "evt")}
        {Lisp-Entry "focus-update-actions" method (override) () #f #f 111 20 111 40 ("can-rename?" "rename" "entities-tree" "Action" "set-action-enabled?")}
        {Lisp-Entry "get-factories" method (public virtual) () #f #f 120 26 120 39 ("get-factories" "get-factories~" "root-factories" "null?" "if" "selected-entity" "entity" "let")}
        {Lisp-Entry "root-factories" method (public virtual) () #f #f 127 26 127 40 ()}
        {Lisp-Entry "add-entity" method (public virtual) ("factory" "(parent: parent #f)" "(presentation: presentation #f)" "(properties: properties '())" "(select?: select? #t)") #f #f 131 26 131 36 ("select-entity" "append" "install-new-entity" "lambda" "with-update-locked" "set-name" "set-name~" "when" "get-controller" "controller" "presentation->name" "presentation->name~" "name" "new" "child" "let" "add-entity-request" "values" "if" "added-properties" "receive" "extra-properties" "client" "relocation-parent" "or" "selected-entity" "selected" "get-class" "get-class~" "class" "let*" "select?" "select?:" "properties" "properties:" "presentation" "presentation:" "parent" "parent:" "factory")}
        {Lisp-Entry "add-entity-request" method (protected virtual) ("factory" "parent") #f #f 150 29 150 47 ("entity-properties-request" "entity-children" "entity-presentation-request" "values" "parent" "factory")}
        {Lisp-Entry "entity-presentation-request" method (protected virtual) ("factory" "brothers" "(initial-value: initial-value #f)") #f #f 155 29 155 56 ("validator:" "unicity-domain:" "not" "accepts-empty?:" "french:" "format" "english:" "Locales" "new" "title:" "request-string" "presentation" "get-factory-presentation" "get-factory-presentation~" "localize" "pres" "entity-name-validator" "name-validator" "get-presentation" "get-presentation~" "map" "and" "unicity-domain" "get-name-unicity?" "get-name-unicity?~" "name-unicity?" "get-name-mandatory?" "get-name-mandatory?~" "name-mandatory?" "let*" "get-name-prohibited?" "get-name-prohibited?~" "if" "initial-value" "initial-value:" "brothers" "factory")}
        {Lisp-Entry "entity-properties-request" method (protected virtual) ("factory") #f #f 167 29 167 54 ("factory")}
        {Lisp-Entry "entity-name-validator" method (protected virtual) () #f #f 171 29 171 50 ()}
        {Lisp-Entry "install-new-entity" method (protected virtual) ("controller" "child" "parent" "presentation" "properties") #f #f 175 29 175 47 ("add-properties" "set-presentation" "set-presentation~" "add-child" "add-child~" "properties" "presentation" "parent" "child" "controller")}
        {Lisp-Entry "add-properties" method (protected virtual) ("entity" "properties") #f #f 181 29 181 43 ("controller" "set-property" "set-property~" "value" "property" "lambda" "for-each-property" "properties" "entity")}
        {Lisp-Entry "rename-selection" method (override) () #f #f 192 20 192 36 ("rename-entity" "when" "selected-entity" "entity" "let")}
        {Lisp-Entry "rename-entity" method (public) ("entity") #f #f 198 18 198 31 ("end-rename" "0" "Cell" "new" "cell" "row->line" "line" "get-presentation" "get-presentation~" "initial-value:" "entity-brothers" "get-factory" "get-factory~" "entity-presentation-request" "presentation" "let*" "ensure-expanded" "when" "entity-row" "row" "let" "entity")}
        {Lisp-Entry "end-rename" method () ("entity" "cell" "presentation") #f #f 208 11 208 21 ("select-entity" "acquire-focus" "sort-entitys?" "sort-entitys?~" "when" "get-parent" "get-parent~" "parent" "controller" "set-name" "set-name~" "get-cell-data" "set-title" "set-title~" "with-update-locked" "find-entity-position" "not" "if" "lambda" "move-row" "sort-entities?" "sort-entities?~" "sort?" "client" "or" "destination" "get-user-data" "get-user-data~" "source" "let*" "get-sons" "get-sons~" "cardinality" "1" "=" "eq?" "and" "unless" "position" "position:" "father" "get-father" "get-father~" "move-entity-row" "find-row" "row" "let" "reorder-entity" "define" "presentation" "cell" "entity")}
        {Lisp-Entry "move-entities" method () ("source" "target") #f #f 240 11 240 24 ("select-entities" "send-entity-before" "send-before" "send-before~" "for-each" "and" "target-data" "element" "cardinality" "<" "1" "+" "after" "before" "case" "position" "son-rank" "son-rank~" "rank" "get-sons" "get-sons~" "sons" "get-father" "get-father~" "father" "move-entities" "move-entities~" "bell" "not" "class-of" "relocation-parent" "entity" "key:" "uniform" "parent" "let" "row" "eq?" "if" "lambda" "with-update-locked" "get-user-data" "get-user-data~" "destination" "get-part" "get-part~" "part" "get-row" "get-row~" "dst" "get-view" "get-view~" "get-selected-data" "get-selected-data~" "entities" "get-controller" "controller" "let*" "target" "source")}
        {Lisp-Entry "find-entity-position" method (protected virtual) ("entity" "row" "father") #f #f 265 29 265 49 ("get-presentation" "get-presentation~" "find-ordered-position" "father" "row" "entity")}
        {Lisp-Entry "find-entity-insertion" method (protected virtual) ("parent-row" "entity" "target") #f #f 269 29 269 50 ("find-row" "son-rank" "son-rank~" "when" "target" "entity" "parent-row")}
        {Lisp-Entry "send-entity-before" method (protected virtual) ("entity" "before") #f #f 274 29 274 47 ("before" "entity")}
        {Lisp-Entry "get-draggable?" method (override) () #f #f 283 20 283 34 ("can-relocate-entity?" "can-relocate-entity?~" "and" "selected-entity" "entity" "let")}
        {Lisp-Entry "get-row-reorder-target" method () ("drag-drop" "row" "quarter") #f #f 296 11 296 33 ("part:" "row:" "self" "view:" "Tree-Drop-Target" "new" "when" "else" "after" "=" "4" "3" "cond" "part" "can-send-before?" "can-send-before?~" "cdr" "/=" "addable-class?" "addable-class?~" "has-parent?" "has-parent?~" "every?" "neq?" "null?" "or" "not" "move?" "visible-count" "<" "before" "+" "2" "1" "memq?" "if" "and" "before-rank" "get-sons" "get-sons~" "last" "before-last" "eq?" "before?" "dst-parent" "row->line" "dst-line" "get-father" "get-father~" "dst-father" "dst" "get-parent" "get-parent~" "parent-relocation" "entity" "key:" "uniform" "src-parent" "class-of" "remove-duplicates" "src-types" "get-row" "get-user-data" "get-user-data~" "n" "lambda" "map" "src" "contiguous-range" "src-range" "get-source" "get-source~" "get-view" "get-view~" "get-selection" "get-selection~" "src-selection" "let*" "quarter" "row" "drag-drop")}
        {Lisp-Entry "get-row-target" method () ("drag-drop" "row") #f #f 321 11 321 25 ("get-view" "get-view~" "view" "get-source" "get-source~" "source" "let*" "row" "drag-drop")}
        {Lisp-Entry "receive-drop" method () ("sender" "pos" "drag-drop") #f #f 328 11 328 23 ("move-entities" "self" "eq?" "when" "get-target" "get-target~" "target" "get-view" "get-view~" "view" "get-source" "get-source~" "source" "let*" "drag-drop" "pos" "sender")}
        {Lisp-Entry "receive-model" method () ("window" "target") #f #f 337 11 337 24 ("rename-entity" "centered?:" "0" "Point" "position:" "get-controller" "add-view" "add-view~" "lambda" "with-update-locked" "visible?:" "new" "child" "get-row" "get-row~" "get-user-data" "get-user-data~" "parent" "get-model" "get-model~" "self" "class-of" "dispatch" "model" "let*" "target" "window")}
        {Lisp-Entry "parent-relocation" method (protected virtual) ("parent") #f #f 352 29 352 46 ("parent")}
        {Lisp-Entry "relocation-parent" method (protected virtual) ("destination" "class") #f #f 356 29 356 46 ("class" "destination")}
        {Lisp-Entry "can-undo?" method (override) () #f #f 365 20 365 29 ()}
        {Lisp-Entry "can-redo?" method (override) () #f #f 369 20 369 29 ()}
        {Lisp-Entry "can-cut?" method (override) () #f #f 373 20 373 28 ("can-cut-entity?" "can-cut-entity?~" "every?" "and" "selected-entities" "entities" "let")}
        {Lisp-Entry "can-copy?" method (override) () #f #f 379 20 379 29 ("can-copy-entity?" "can-copy-entity?~" "every?" "and" "selected-entities" "entities" "let")}
        {Lisp-Entry "can-paste?" method (override) () #f #f 385 20 385 30 ("remove-duplicates" "length" "1" "=" "memq?" "not" "and" "determine-paster" "determine-paster~" "map" "parents" "selected-entities" "entities" "let*")}
        {Lisp-Entry "can-delete?" method (override) () #f #f 392 20 392 31 ("can-delete-entity?" "can-delete-entity?~" "every?" "and" "selected-entities" "entities" "let")}
        {Lisp-Entry "can-rename?" method (override) () #f #f 398 20 398 31 ("can-rename-entity?" "can-rename-entity?~" "car" "entity" "1" "length" "=" "and" "selected-entities" "entities" "let")}
        {Lisp-Entry "can-select-all?" method (override) () #f #f 405 20 405 35 ()}
        {Lisp-Entry "cut-selection" method (override) () #f #f 409 20 409 33 ("controller" "cut-entities" "cut-entities~" "get-selection" "with-deleted-selection" "lambda" "with-update-locked" "bell" "null?" "if" "selected-entities" "entities" "let")}
        {Lisp-Entry "copy-selection" method (override) () #f #f 420 20 420 34 (".150" "duration:" "get-application" "update-focus-actions" "update-focus-actions~" "controller" "copy-entities" "copy-entities~" "lambda" ":wait" "with-cursor" "bell" "null?" "if" "selected-entities" "entities" "let")}
        {Lisp-Entry "paste-clipboard" method (override) () #f #f 431 20 431 35 ("get-model" "get-model~" "get-content" "get-content~" "car" "master" "parcel" "key:" "partition" "relocation-parent" "controller" "paste-parcels" "paste-parcels~" "model" "bind" "info" "for-each" ":wait" "with-cursor" "lambda" "with-update-locked" "get-jazz-parcels" "parcels" "client" "selected-entity" "or" "parent" "let")}
        {Lisp-Entry "delete-selection" method (override) () #f #f 444 20 444 36 ("controller" "delete-entities" "delete-entities~" "lambda" "with-deleted-selection" "confirm-close" "get-selected-data" "entities" "not-null?" "when" "get-selection" "selection" "let")}
        {Lisp-Entry "confirm-close" method (override) ("(entities '())") #f #f 454 20 454 33 ("confirm-action" "entities")}
        {Lisp-Entry "confirm-action" method () ("text") #f #f 458 11 458 25 ("throw-cancel" "cancel" "no" "yes" "case" "confirmation" "type:" "localize" "message-box" "code" "let" "text")}
        {Lisp-Entry "selection-change" method (override) ("old-selection" "force?" "user-origin") #f #f 471 20 471 36 ("update-focus-actions" "update-focus-actions~" "get-application" "appl" "let" "user-origin" "force?" "old-selection")}
        {Lisp-Entry "selected-entity" method (public) () #f #f 476 18 476 33 ("get-row" "get-user-data" "get-user-data~" "client" "null?" "if" "get-single-selection" "selection" "let")}
        {Lisp-Entry "selected-entities" method (public) () #f #f 483 18 483 35 ("get-row" "get-user-data" "get-user-data~" "row" "lambda" "map" "client" "list" "null?" "if" "get-ordered-selection" "selection" "let")}
        {Lisp-Entry "entity-row" method (public) ("entity") #f #f 492 18 492 28 ("continuation-return" "get-user-data" "get-user-data~" "eq?" "when" "rank" "row" "for-each-row" "return" "lambda" "continuation-capture" "entity")}
        {Lisp-Entry "entity-visible-row" method () ("entity") #f #f 502 11 502 29 ("user-data-index" "entity")}
        {Lisp-Entry "select-entity" method (public) ("entity") #f #f 506 18 506 31 ("set-single-selection" "when" "entity-visible-row" "row" "let" "entity")}
        {Lisp-Entry "select-entities" method (public) ("entities") #f #f 513 18 513 33 ("set-selection" "entity-visible-row" "map" "remove-false" "rows" "let" "entities")}
        {Lisp-Entry "find-row" method (protected virtual) ("entity") #f #f 519 29 519 37 ("entity-row" "entity")}
        {Lisp-Entry "preserving-update" method (public) () #f #f 528 18 528 35 ("selected-entities" ":selected-entities" "get-expand-state" "expand-state:" "update")}
        {Lisp-Entry "update" method (public virtual) ("." "rest") #f #f 532 26 532 32 ("rest")}
        {Lisp-Entry "entity-parent" method (protected virtual abstract) ("entity") #f #f 541 38 541 51 ("entity")}
        {Lisp-Entry "entity-children" method (protected virtual abstract) ("entity") #f #f 545 38 545 53 ("entity")}
        {Lisp-Entry "entity-brothers" method () ("entity") #f #f 549 11 549 26 ("entity-children" "remove" "when" "entity-parent" "parent" "let" "entity")}
        {Lisp-Entry "update-menu" method (public) ("menu") #f #f 560 18 560 29 ("before-properties" "end-edit-group" "or" "empty-properties?" "get-visible?" "get-visible?~" "empty-entity?" "empty-edit?" "properties" "rename-selection" "delete-selection" "not" "set!" "end-add-group" "set-before" "set-before~" "set-parent" "set-parent~" "get-title" "get-title~" "localize" "format" "set-title" "set-title~" "get-icon" "get-icon~" "set-icon" "set-icon~" "unique" "set-visible?" "set-visible?~" "when" "get-children" "get-children~" "children" "self" "add-entities" "add-entities~" "1" "=" "if" "add-item" "locate" "locate~" "add-menu" "let" "empty-add?" "get-categorized-properties" "get-categorized-properties~" "can-view-properties?" "can-view-properties?~" "and" "can-properties?" "rename" "entities-tree" "can-rename?" "delete" "can-delete?" "paste" "can-paste?" "copy" "can-copy?" "cut" "view" "Action" "get-action-enabled?" "can-cut?" "length" "count" "car" "entity" "selected-entities" "entities" "get-application" "appl" "let*" "menu")}
        {Lisp-Entry "show-properties" method (public) () #f #f 613 18 613 33 ("focus?:" "workspace:" "Properties-Manager" "select-docked")}}}})
"Entities-Tree-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "entity" "Entities-Tree-Actions.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.entity.Entities-Tree-Actions" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Entities-Tree-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 41 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("F2" "Shortcut" "shortcut:" "on-rename" ":focus" "Event-Handler" "action-handler:" "rename" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Entity-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "entity" "Entity-Menu.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.entity.Entity-Menu" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Entity-Menu" class (undocumented) ((extends . "Context-Menu")) #f #f 58 20 58 31 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 61 3 61 7 ("properties" "before-properties" "rename" "components-tree" "rename-selection" "delete" "delete-selection" "end-edit-group" "paste" "copy" "view" "Action" "action-handler:" "cut" "end-add-group" "Separator-Item" "<Separator-Item>" "add-menu" "Add-Menu" "<Add-Menu>" "Image-Resource" "icon:" "title:" "add-item" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 76 20 76 26 ("self" "client" "update-menu" "update-menu~" "nextmethod" "rest")}}
      {Lisp-Entry "Add-Menu" class () ((extends . "Context-Menu")) #f #f 86 7 86 15 ("Context-Menu")
        {Lisp-Entry "add-entities" method (protected) ("client") #f #f 89 21 89 33 (":factory" "client:" "list" "properties:" "on-add" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "icon:" "Label-Item" "get-factory-presentation" "get-factory-presentation~" "localize" "format" "title" "get-factory-image" "get-factory-image~" "icon" "self" "parent:" "Separator-Item" "new" "null?" "if" "factory" "for-each" "get-factories" "get-factories~" "factories" "let" "lambda" "with-update-locked" "client")}
        {Lisp-Entry "on-add" method () ("evt") #f #f 103 11 103 17 ("add-entity" "add-entity~" "factory:" "factory" "client:" "get-property" "get-property~" "client" "let" "evt")}}}})
"Entity-Parcel"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "entity" "Entity-Parcel.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.entity.Entity-Parcel" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.clipboard")}
      {Lisp-Entry "Entity-Parcel" class (undocumented) ((extends . "Clipboard-Parcel")) #f #f 43 20 43 33 ("Clipboard-Parcel")}}})
"Entry-Combo-Box"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Entry-Combo-Box.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Entry-Combo-Box" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Entry-Combo-Box" class (undocumented) ((extends . "Combo-Box")) #f #f 43 20 43 35 ("Combo-Box")
        {Lisp-Entry "form-model" method (override) ("form") #f #f 46 20 46 30 ("nextmethod" "else" "Entry-Combo-Text-View" "body" "get-name" "get-name~" "case" "form")}}}})
"Entry-Combo-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Entry-Combo-Text-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Entry-Combo-Text-View" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Entry-Combo-Text-View" class (undocumented) ((extends . "Combo-Text-View")) #f #f 44 20 44 41 ("Combo-Text-View")
        {Lisp-Entry "editor" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 18 ()}
        {Lisp-Entry "get-editor" accessor () () #f #f 47 43 47 51 ()}
        {Lisp-Entry "set-editor" accessor () () #f #f 47 43 47 51 ()}
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("show-unfocused-selection?:" "focus-selects-all?:" "accepts-returns?:" "install" "<install>")}
        {Lisp-Entry "new-model" method (override) () #f #f 54 20 54 29 ("top-padding:" "2" "left-padding:" "Text-Base" "Text-Style" "base-style:" "Text-Model" "new")}
        {Lisp-Entry "focus-gained" method (override) () #f #f 58 20 58 32 ("editor-focus-gained" "editor-focus-gained~" "get-manager" "get-manager~" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}
        {Lisp-Entry "focus-lose" method (override) () #f #f 66 20 66 30 ("editor-focus-lose" "editor-focus-lose~" "get-manager" "get-manager~" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 74 20 74 36 ("new-text-context-menu")}}}})
"Entry-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Entry-Text-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Entry-Text-View" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Entry-Text-View" class (undocumented) ((extends . "Plain-Text-View")) #f #f 44 20 44 35 ("Plain-Text-View")
        {Lisp-Entry "editor" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 18 ()}
        {Lisp-Entry "get-editor" accessor () () #f #f 47 43 47 51 ()}
        {Lisp-Entry "set-editor" accessor () () #f #f 47 43 47 51 ()}
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("force-tab-navigate?:" "show-unfocused-selection?:" "focus-selects-all?:" "accepts-returns?:" "install" "<install>")}
        {Lisp-Entry "new-model" method (override) () #f #f 54 20 54 29 ("top-padding:" "2" "left-padding:" "Text-Base" "Text-Style" "base-style:" "Text-Model" "new")}
        {Lisp-Entry "focus-gained" method (override) () #f #f 63 20 63 32 ("editor-focus-gained" "editor-focus-gained~" "get-manager" "get-manager~" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}
        {Lisp-Entry "focus-lose" method (override) () #f #f 71 20 71 30 ("editor-focus-lose" "editor-focus-lose~" "get-manager" "get-manager~" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}
        {Lisp-Entry "up-arrow-move" method (override) ("extend?" "scroll?") #f #f 79 20 79 33 ("editor-up-arrow" "editor-up-arrow~" "get-manager" "get-manager~" "manager" "let" "selectable?" "editor" "and" "when" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method (override) ("extend?" "scroll?") #f #f 86 20 86 35 ("editor-down-arrow" "editor-down-arrow~" "get-manager" "get-manager~" "manager" "let" "selectable?" "editor" "and" "when" "scroll?" "extend?")}
        {Lisp-Entry "tab-press" method (override) ("key" "modifiers") #f #f 93 20 93 29 ("editor-tab" "editor-tab~" "get-manager" "get-manager~" "manager" "let" "selectable?" "editor" "and" "when" "end-completion" "has-ambiguous-completion?" "if" "modifiers" "key")}
        {Lisp-Entry "return-press" method (override) ("key") #f #f 102 20 102 32 ("editor-return" "editor-return~" "get-manager" "get-manager~" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod" "key")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 110 20 110 36 ("new-text-context-menu")}}}})
"Entry-Widget"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "widget" "Entry-Widget.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.widget.Entry-Widget" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Entry-Widget" class (undocumented) ((extends . "Border-View")) #f #f 44 20 44 32 ("Border-View")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("text" "Entry-Text-View" "<Entry-Text-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "scroller" "name:" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "install" "<install>")}
        {Lisp-Entry "default-size" method (override) () #f #f 54 20 54 32 ("19" "200" "Dimension")}}}})
"Execute-Mode-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "command" "Execute-Mode-Actions.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.command.Execute-Mode-Actions" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Execute-Mode-Actions" class () ((extends . "Actions")) #f #f 45 7 45 27 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Escape" "alternate-shortcut:" ":control" "on-cancel" "cancel" "Return" "Shortcut" "shortcut:" "on-finish" ":mode" ":focus" "Event-Handler" "action-handler:" "finish" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Exemplar-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Exemplar-Preferences.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.preference.Exemplar-Preferences" module (protected) () #f #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Exemplar-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 46 20 46 40 ("Preferences")
        {Lisp-Entry "base" property () ((accessors . "generate")) #f #f 49 12 49 16 ()}
        {Lisp-Entry "get-base" accessor () () #f #f 49 27 49 35 ()}
        {Lisp-Entry "set-base" accessor () () #f #f 49 27 49 35 ()}
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "->exemplar" method (protected virtual) () #f #f 61 29 61 39 ()}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 70 25 70 45 ("Exemplar-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 79 11 79 17 ()
        {Lisp-Entry "import" import () () #f #f 82 1 82 7 ("jazz.designer")}
        {Lisp-Entry "Exemplar-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 85 7 85 38 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 88 3 88 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "base" "categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Exemplars-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Exemplars-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Exemplars-Preferences" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library.exemplar" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Exemplars-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 46 20 46 41 ("Preferences")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "register-children" method (public) ("domain") #f #f 58 18 58 35 ("children" "->exemplar" "->exemplar~" "get-name" "get-name~" "register-exemplar" "Exemplar-Preferences" "is?" "when" "pref" "lambda" "for-each" "domain")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 70 25 70 45 ("Exemplars-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 79 11 79 17 ()
        {Lisp-Entry "import" import () () #f #f 82 1 82 7 ("jazz.designer")}
        {Lisp-Entry "Exemplars-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 85 7 85 39 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 88 3 88 7 ("categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Explorer-Mark"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Explorer-Mark.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Explorer-Mark" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Explorer-Mark" class (undocumented) ((extends . "Object")) #f #f 40 20 40 33 ("Object")
        {Lisp-Entry "kind" slot () ((getter . "generate")) #f #f 43 8 43 12 ()}
        {Lisp-Entry "get-kind" accessor () () #f #f 43 21 43 29 ()}
        {Lisp-Entry "range" slot () ((getter . "generate")) #f #f 44 8 44 13 ()}
        {Lisp-Entry "get-range" accessor () () #f #f 44 21 44 29 ()}
        {Lisp-Entry "initialize" method (override) ("kind" "range") #f #f 47 20 47 30 ("range~self" "self" "kind~self" "set!" "nextmethod" "range" "kind")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 53 20 53 25 ("range" "kind" "format" "lambda" "self" "print-unreadable" "readably" "output")}}}})
"Extended-Mode-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "command" "Extended-Mode-Actions.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.command.Extended-Mode-Actions" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Extended-Mode-Actions" class () ((extends . "Actions")) #f #f 45 7 45 28 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Escape" "on-cancel" "cancel" "Return" "on-finish" "finish" "on-select-all" "select-all" "on-upcase-selection" "upcase-selection" "on-downcase-selection" "downcase-selection" "on-play-recording" "play-recording" "on-stop-recording" "stop-recording" "on-start-recording" "start-recording" "on-quit" "quit" "on-split-stage-horizontally" "split-stage-horizontally" "on-split-stage-vertically" "split-stage-vertically" "on-delete-other-stages" "delete-other-stages" "on-delete-stage" "delete-stage" "on-kill-buffer" "kill-buffer" "on-revert-buffer" "revert-buffer" "on-save-all" "save-all" "on-save-buffer-as" "save-buffer-as" "on-save-buffer" "save-buffer" ":shift" "on-find-filename" "find-filename" "on-find-file" "find-file" ":control" "alternate-shortcut:" "Shortcut" "shortcut:" "on-find-buffer" ":mode" ":focus" "Event-Handler" "action-handler:" "find-buffer" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"External-Frame"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "External-Frame.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.window.External-Frame" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui")}
      {Lisp-Entry "External-Frame" class () ((extends . "Overlapped")) #f #f 44 7 44 21 ("Overlapped")
        {Lisp-Entry "default-parent" method (override) () #f #f 52 20 52 34 ("get-desktop")}
        {Lisp-Entry "new-root" method (override) () #f #f 61 20 61 28 ("offscreen?:" "External-Frame-Host" "new")}
        {Lisp-Entry "get-host" method () () #f #f 70 11 70 19 ("get-host" "get-host~" "root" "when")}
        {Lisp-Entry "close-window" method (override) () #f #f 80 20 80 32 ("close" "confirm-close" "confirm-close~" "when" "get-host" "host" "let")}}}})
"External-Frame-Host"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "hosting" "External-Frame-Host.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.hosting.External-Frame-Host" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "External-Frame-Host" class (undocumented) ((extends . "Frame-Host")) #f #f 43 20 43 39 ("Frame-Host")
        {Lisp-Entry "close-host" method (override) ("(confirm?: confirm? #t)") #f #f 51 20 51 30 ("player" "close" "close~" "confirm?" "confirm?:")}
        {Lisp-Entry "set-title" method (override) ("value") #f #f 60 20 60 29 ("set-title" "set-title~" "player" "when" "nextmethod" "value")}}}})
"Figure"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "layout" "Figure.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.layout.Figure" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Figure" class () ((extends . "Component")) #f #f 45 7 45 13 ("default-size" "default-position" "explicit" "Component")
        {Lisp-Entry "location" property () ((initialize . "#f") (accessors . "explicit")) #f #f 48 12 48 20 ()}
        {Lisp-Entry "position" property () ((initialize . "(default-position)") (accessors . "explicit")) #f "<Point>" 49 12 49 20 ("Point" "<Point>")}
        {Lisp-Entry "size" property () ((initialize . "(default-size)") (accessors . "explicit")) #f "<Dimension>" 50 12 50 16 ("Dimension" "<Dimension>")}
        {Lisp-Entry "get-location" method (public virtual) () #f #f 58 26 58 38 ("location")}
        {Lisp-Entry "set-location" method (public virtual) ("loc") #f #f 62 26 62 38 ("location" "set!" "loc")}
        {Lisp-Entry "find-located" method (public) ("location") #f #f 66 18 66 30 ("children" "get-location" "get-location~" "eq?" "child" "lambda" "find-if" "location")}
        {Lisp-Entry "default-position" method (protected virtual) () #f "<Point>" 77 29 77 45 ("0" "Point" "<Point>")}
        {Lisp-Entry "get-position" method (public virtual) () #f "<Point>" 81 26 81 38 ("position" "Point" "<Point>")}
        {Lisp-Entry "get-effective-position" method (public virtual) () #f "<Point>" 85 26 85 48 ("get-position" "Point" "<Point>")}
        {Lisp-Entry "set-position" method (public virtual) ("pos" "<Point>") #f "<void>" 89 26 89 38 ("position" "set!" "void" "<void>" "Point" "<Point>" "pos")}
        {Lisp-Entry "move-figure" method (public) ("dh" "<fx>" "dv" "<fx>") #f "<void>" 93 18 93 29 ("get-v" "get-v~" "get-h" "get-h~" "+" "new" "set-position" "get-position" "Point" "<Point>" "pos" "let" "void" "<void>" "dv" "fx" "<fx>" "dh")}
        {Lisp-Entry "get-center" method (public) () #f "<Point>" 98 18 98 28 ("get-height" "get-height~" "get-v" "get-v~" "2" "size" "get-width" "get-width~" "quotient" "position" "get-h" "get-h~" "+" "new" "Point" "<Point>")}
        {Lisp-Entry "get-bottom-right" method (public) () #f "<Point>" 104 18 104 34 ("get-height" "get-height~" "get-v" "get-v~" "size" "get-width" "get-width~" "position" "get-h" "get-h~" "+" "new" "Point" "<Point>")}
        {Lisp-Entry "default-size" method (protected virtual) () #f "<Dimension>" 115 29 115 41 ("100" "Dimension" "<Dimension>")}
        {Lisp-Entry "get-size" method (public virtual) () #f "<Dimension>" 119 26 119 34 ("size" "Dimension" "<Dimension>")}
        {Lisp-Entry "get-effective-size" method (public virtual) () #f "<Dimension>" 123 26 123 44 ("get-size" "Dimension" "<Dimension>")}
        {Lisp-Entry "set-size" method (public virtual) ("sz" "<Dimension>") #f "<void>" 127 26 127 34 ("size" "set!" "void" "<void>" "Dimension" "<Dimension>" "sz")}
        {Lisp-Entry "size-figure" method (public) ("dw" "<fx>" "dh" "<fx>") #f "<void>" 131 18 131 29 ("get-height" "get-height~" "get-width" "get-width~" "+" "Dimension" "new" "set-size" "get-size" "size" "let" "void" "<void>" "dh" "fx" "<fx>" "dw")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 141 25 141 45 ("Figure-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 150 11 150 17 ()
        {Lisp-Entry "import" import () () #f #f 153 1 153 7 ("jazz.designer")}
        {Lisp-Entry "Figure-Descriptor" class () ((extends . "Component-Descriptor")) #f #f 156 7 156 24 ("Component-Descriptor")
          {Lisp-Entry "form" form () () #f #f 159 3 159 7 ("Dimension-Domain" "<Dimension-Domain>" "size" "domain" "Point-Domain" "<Point-Domain>" "position" "title:" "location" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Figure-Mover"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "action" "Figure-Mover.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.action.Figure-Mover" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Figure-Mover" class (undocumented) ((extends . "Component")) #f #f 43 20 43 32 ("explicit" "Component")
        {Lisp-Entry "client" property () ((initialize . "#f") (accessors . "explicit")) #f #f 46 12 46 18 ()}
        {Lisp-Entry "dragging?" slot () ((initialize . "#f")) #f #f 49 8 49 17 ()}
        {Lisp-Entry "base-position" slot () ((initialize . "#f")) #f #f 50 8 50 21 ()}
        {Lisp-Entry "get-client" method (public) () #f #f 58 18 58 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("clt") #f #f 62 18 62 28 ("child" "client" "set!" "clt")}
        {Lisp-Entry "on-mouse-down" method () ("evt") #f #f 71 11 71 24 ("get-sender" "get-sender~" "acquire-capture" "acquire-capture~" "get-position" "get-position~" "base-position" "dragging?" "set!" "evt")}
        {Lisp-Entry "on-drag-move" method () ("evt") #f #f 77 11 77 23 ("get-v" "get-v~" "get-h" "get-h~" "client" "move-figure" "move-figure~" "base-position" "get-position" "get-position~" "-" "delta" "let" "dragging?" "when" "evt")}
        {Lisp-Entry "on-drag-up" method () ("evt") #f #f 83 11 83 21 ("set!" "get-sender" "get-sender~" "release-capture" "release-capture~" "dragging?" "when" "evt")}}}})
"Figure-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Figure-Preferences.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.preference.Figure-Preferences" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Figure-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 44 20 44 38 ("Preferences")
        {Lisp-Entry "location" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 20 ()}
        {Lisp-Entry "get-location" accessor () () #f #f 47 45 47 53 ()}
        {Lisp-Entry "set-location" accessor () () #f #f 47 45 47 53 ()}
        {Lisp-Entry "position" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 20 ()}
        {Lisp-Entry "get-position" accessor () () #f #f 48 45 48 53 ()}
        {Lisp-Entry "set-position" accessor () () #f #f 48 45 48 53 ()}
        {Lisp-Entry "size" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 16 ()}
        {Lisp-Entry "get-size" accessor () () #f #f 49 45 49 53 ()}
        {Lisp-Entry "set-size" accessor () () #f #f 49 45 49 53 ()}
        {Lisp-Entry "find-located" method (public) ("location") #f #f 57 18 57 30 ("children" "get-location" "get-location~" "eq?" "child" "lambda" "find-if" "location")}
        {Lisp-Entry "apply-root" method (public virtual) ("player") #f #f 68 26 68 36 ("self" "error" "player")}
        {Lisp-Entry "apply-preferences" method (override) ("(client #f)") #f #f 72 20 72 37 ("set-size" "set-size~" "size" "set-position" "set-position~" "position" "when" "find-client" "or" "let" "client")}
        {Lisp-Entry "save-preferences" method (override) ("designer" "(client #f)") #f #f 86 20 86 36 ("get-effective-size" "get-effective-size~" "size" "get-effective-position" "get-effective-position~" "position" "set-property" "when" "find-client" "or" "let" "client" "designer")}
        {Lisp-Entry "find-client" method (protected virtual) () #f #f 98 29 98 40 ()}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 107 25 107 45 ("Figure-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 116 11 116 17 ()
        {Lisp-Entry "import" import () () #f #f 119 1 119 7 ("jazz.designer")}
        {Lisp-Entry "Figure-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 122 7 122 36 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 125 3 125 7 ("size" "position" "location" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "component-presentation-property?" method (override) ("component" "property") #f #f 133 20 133 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method (override) ("component") #f #f 137 20 137 46 ("get-name" "get-name~" "->string" "get-title" "get-title~" "or" "component")}
          {Lisp-Entry "component-set-presentation" method (override) ("component" "designer" "title") #f #f 141 20 141 46 ("title:" "set-property" "set-property~" "title" "designer" "component")}}}}})
"File-Base-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "File-Base-Menu.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.menu.File-Base-Menu" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml")}
      {Lisp-Entry "File-Base-Menu" class () ((extends . "Menu")) #f #f 46 7 46 21 ("Menu")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("exit" "on-quit-application" "end-revert-group" "revert-saved" "on-revert-saved" "end-save-group" "save-all" "on-save-all" "save-as" "on-save-as" "save" "guest" "on-save" "end-open-group" "Separator-Item" "<Separator-Item>" "close-all" "on-close-all" "close" "on-close" "open" "on-open" "new" "application" "Action" "action-handler:" "Image-Resource" "icon:" "on-new" "name:" "Label-Item" "<Label-Item>" "french:" "english:" "Locales" "title:" "install" "<install>")}}}})
"File-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "File-Menu.jazz"} 241595127. jazz
    {Lisp-Entry "jazz.ui.menu.File-Menu" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml")}
      {Lisp-Entry "File-Menu" class () ((extends . "File-Base-Menu")) #f #f 46 7 46 16 ("File-Base-Menu")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("end-print-group" "Separator-Item" "<Separator-Item>" "print-preview" "on-print-preview" "print" "on-print" "print-layout" "application" "Image-Resource" "icon:" "on-quit-application" "french:" "english:" "Locales" "on-print-layout" "guest" "Action" "action-handler:" "end-revert-group" "before:" "title:" "compare-saved" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"File-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "File-Request.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.File-Request" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.io")}
      {Lisp-Entry "File-Request" class (undocumented) ((extends . "Pathname-Request")) #f #f 45 20 45 32 ("Pathname-Request")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("title:" "ok" "buttonbar" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 54 25 54 35 ()}
        {Lisp-Entry "multiple-selection?" property () ((initialize . "#f")) #f #f 58 12 58 31 ()}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 61 20 61 26 ("multiple-selection?" "get-tree" "set-multiple-selection?" "set-multiple-selection?~" "nextmethod" "rest")}
        {Lisp-Entry "update-content" method (override) () #f #f 71 20 71 34 ("for-each" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "add-pathname" "pathname" "add" "define" "get-tree" "tree" "files" "leaves?:" "nodes?:" "directory" "get-content" "get-content~" "directories" "let")}
        {Lisp-Entry "update-buttons" method (override) () #f #f 85 20 85 34 ("file?" "every?" "not-null?" "and" "ok" "locate" "set-enabled?" "set-enabled?~" "selected-pathnames" "pathnames" "let" "nextmethod")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 96 20 96 36 ("selected-pathname" "selected-pathnames" "anchorize" "map" "multiple-selection?" "if" "directory" "set-current-directory")}
        {Lisp-Entry "default-action" method (override) () #f #f 108 20 108 34 ("get-modal-result" "get-host" "end-modal" "end-modal~" "ok-enabled?" "down" "car" "directory?" "1" "length" "=" "and" "cond" "selected-pathnames" "pathnames" "let")}
        {Lisp-Entry "selected-pathnames" method () () #f #f 121 11 121 29 ("get-tree" "get-selected-data" "get-selected-data~")}}}})
"File-Search-Result"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "File-Search-Result.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.File-Search-Result" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.library")}
      {Lisp-Entry "File-Search-Result" class () ((extends . "Search-Result")) #f #f 45 7 45 25 ("Search-Result")
        {Lisp-Entry "file" slot () ((getter . "generate")) #f #f 48 8 48 12 ()}
        {Lisp-Entry "get-file" accessor () () #f #f 48 21 48 29 ()}
        {Lisp-Entry "range" slot () ((getter . "generate")) #f #f 49 8 49 13 ()}
        {Lisp-Entry "get-range" accessor () () #f #f 49 21 49 29 ()}
        {Lisp-Entry "initialize" method (override) ("resultset" "file" "(position: position #f)" "(range: range #f)") #f #f 52 20 52 30 ("Range$Cell$" "new" "and" "or" "range~self" "self" "file~self" "set!" "nextmethod" "range" "range:" "position" "position:" "file" "resultset")}
        {Lisp-Entry "get-icon" method (override) () #f #f 63 20 63 28 ("Image-Resource")}
        {Lisp-Entry "present-name" method (override) () #f #f 67 20 67 32 ("file" "present-name" "present-name~")}
        {Lisp-Entry "present-location" method (override) () #f #f 71 20 71 36 ("file" "present-location" "present-location~")}
        {Lisp-Entry "present-type" method (override) () #f #f 75 20 75 32 ()}
        {Lisp-Entry "location-sort-value" method (override) () #f #f 84 20 84 39 ("0" "Cell" "get-start" "get-start~" "range" "if" "present-location" "cons")}
        {Lisp-Entry "edit" method (override) ("select" "(visible?: visible? #t)" "(activate-focus?: activate-focus? #t)") #f #f 93 20 93 24 ("values" "focus-host" "focus-host~" "and" "search" "get-find" "get-find~" "select-expr" "select-expr~" "set-selection" "set-selection~" "range" "if" "Text-View" "is?" "when" "get-guest" "get-guest~" "guest" "return-new?:" "file" "edit-document" "edit-document~" "new?" "frame" "receive" "get-application" "appl" "let" "activate-focus?" "activate-focus?:" "visible?" "visible?:" "select")}}}})
"Filter-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Filter-Text-View.jazz"} 246681282. jazz
    {Lisp-Entry "jazz.ui.text.Filter-Text-View" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.jml")}
      {Lisp-Entry "Filter-Text-View" class () ((extends . "Plain-Text-View")) #f #f 50 7 50 23 ("Plain-Text-View")
        {Lisp-Entry "target-name" property () ((initialize . "#f") (accessors . "generate")) #f #f 53 12 53 23 ()}
        {Lisp-Entry "get-target-name" accessor () () #f #f 53 48 53 56 ()}
        {Lisp-Entry "set-target-name" accessor () () #f #f 53 48 53 56 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("show-unfocused-selection?:" "focus-selects-all?:" "accepts-returns?:" "install" "<install>")}
        {Lisp-Entry "new-model" method (override) () #f #f 60 20 60 29 ("top-padding:" "2" "left-padding:" "Text-Base" "Text-Style" "base-style:" "Text-Model" "new")}
        {Lisp-Entry "find-target" method () () #f #f 69 11 69 22 ("locate" "locate~" "target-name" "not" "if" "get-creator" "creator" "let")}
        {Lisp-Entry "return-press" method (override) ("key") #f #f 81 20 81 32 ("filter-target" "key")}
        {Lisp-Entry "filter-target" method (public) () #f #f 90 18 90 31 ("ignore-case?:" "get-string-content" "make-search-context" "->search-set" "filter" "filter~" "lambda" ":wait" "with-cursor" "when" "find-target" "target" "let")}}}})
"Filterable"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Filterable.jazz"} 245735696. jazz
    {Lisp-Entry "jazz.ui.text.Filterable" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Filterable" interface (undocumented) () #f #f 40 24 40 34 ()
        {Lisp-Entry "filter" method (public virtual abstract) ("filter-search") #f #f 43 35 43 41 ("filter-search")}}}})
"Find-Mode-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "command" "Find-Mode-Actions.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.command.Find-Mode-Actions" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Find-Mode-Actions" class () ((extends . "Actions")) #f #f 45 7 45 24 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Escape" "alternate-shortcut:" ":control" "on-cancel" "cancel" "Return" "Shortcut" "shortcut:" "on-finish" ":mode" ":focus" "Event-Handler" "action-handler:" "finish" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Fit-Layout"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "layout" "Fit-Layout.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.ui.layout.Fit-Layout" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.geometry")}
      {Lisp-Entry "Fit-Layout" class () ((extends . "Layout")) #f #f 44 7 44 17 ("0" "Rect" "Layout")
        {Lisp-Entry "insets" property () ((initialize . "{Rect 0 0 0 0}") (accessors . "generate")) #f "<Rect>" 47 12 47 18 ("Rect" "<Rect>")}
        {Lisp-Entry "get-insets" accessor () () #f #f 47 62 47 70 ()}
        {Lisp-Entry "set-insets" accessor () () #f #f 47 62 47 70 ()}
        {Lisp-Entry "layout" method (override) ("view") #f #f 55 20 55 26 ("get-bottom" "get-bottom~" "get-height" "get-height~" "get-top" "get-top~" "get-right" "get-right~" "get-width" "get-width~" "get-left" "get-left~" "+" "Dimension" "new" "set-size" "set-size~" "insets" "rect-position" "set-position" "set-position~" "when" "first-child" "first-child~" "child" "let" "view")}}}})
"Flow-Layout"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "layout" "Flow-Layout.jazz"} 239509803. jazz
    {Lisp-Entry "jazz.ui.layout.Flow-Layout" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.geometry")}
      {Lisp-Entry "Flow-Layout" class () ((extends . "Layout")) #f #f 44 7 44 18 ("horizontal" "0" "Rect" "Layout")
        {Lisp-Entry "insets" property () ((initialize . "{Rect 0 0 0 0}") (accessors . "generate")) #f "<Rect>" 47 12 47 18 ("Rect" "<Rect>")}
        {Lisp-Entry "get-insets" accessor () () #f #f 47 69 47 77 ()}
        {Lisp-Entry "set-insets" accessor () () #f #f 47 69 47 77 ()}
        {Lisp-Entry "justification" property () ((initialize . "'horizontal") (accessors . "generate")) #f #f 48 12 48 25 ()}
        {Lisp-Entry "get-justification" accessor () () #f #f 48 69 48 77 ()}
        {Lisp-Entry "set-justification" accessor () () #f #f 48 69 48 77 ()}
        {Lisp-Entry "padding" property () ((initialize . "0") (accessors . "generate")) #f "<fx>" 49 12 49 19 ("fx" "<fx>")}
        {Lisp-Entry "get-padding" accessor () () #f #f 49 69 49 77 ()}
        {Lisp-Entry "set-padding" accessor () () #f #f 49 69 49 77 ()}
        {Lisp-Entry "fill?" property () ((initialize . "#f") (accessors . "generate")) #f "<bool>" 50 12 50 17 ("bool" "<bool>")}
        {Lisp-Entry "get-fill?" accessor () () #f #f 50 69 50 77 ()}
        {Lisp-Entry "set-fill?" accessor () () #f #f 50 69 50 77 ()}
        {Lisp-Entry "layout" method (override) ("figures" "width" "height" "." "rest") #f #f 59 20 59 26 ("vertical" "justification" "case" "values" "second" "pair?" "first" "else" "symbol?" "integer?" "not" "or" "cond" "location" "get-h" "get-h~" "get-top" "get-top~" "get-right" "get-right~" "layout-horizontal" "get-width" "get-width~" "if" "center" "decrease!" "get-v" "get-v~" ">" "let*" "for-each-reversed" "padding" "increase!" "get-height" "get-height~" "Dimension" "set-size" "set-size~" "fill?" "0" "+" "set-position" "set-position~" "get-size" "get-size~" "size" "eq?" "get-visible?" "get-visible?~" "and" "when" "get-location" "get-location~" "standardize-location" "offset" "where" "receive" "Figure" "<Figure>" "figure" "lambda" "for-each" "get-bottom" "get-bottom~" "-" "get-left" "get-left~" "Point" "new" "tail" "insets" "rect-position" "head" "let" "layout-vertical" "define" "rest" "height" "width" "figures")}}}})
"Focus-Container"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "hosting" "Focus-Container.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.hosting.Focus-Container" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Focus-Container" class (undocumented) ((extends . "View")) #f #f 43 20 43 35 ("View")
        {Lisp-Entry "focused" slot () ((initialize . "#f")) #f #f 46 8 46 15 ()}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 54 20 54 35 ()}
        {Lisp-Entry "mouse-activate" method (public virtual) () #f #f 58 26 58 40 ("focus-host")}
        {Lisp-Entry "get-focus-container" method (override) () #f #f 67 20 67 39 ("self")}
        {Lisp-Entry "get-focused" method (public) () #f #f 76 18 76 29 ("self" "get-focus-container" "get-focus-container~" "eq?" "focused" "and" "if")}
        {Lisp-Entry "set-focused" method (public) ("view") #f #f 84 18 84 29 ("focused" "set!" "view")}
        {Lisp-Entry "focus-host" method (public virtual) () #f #f 88 26 88 36 ("else" "acquire-focus" "acquire-focus~" "cond" "get-focused" "focused" "let")}
        {Lisp-Entry "preserve-focused" method (public) ("focus") #f #f 96 18 96 34 ("focus-master" "focus-master~" "focused" "set!" "focus")}
        {Lisp-Entry "container-focusable?" method (public virtual) () #f #f 100 26 100 46 ()}
        {Lisp-Entry "ensure-container-focusable" method (public virtual) () #f #f 104 26 104 52 ()}
        {Lisp-Entry "focus-default" method (override) () #f #f 108 20 108 33 ()}
        {Lisp-Entry "view-destroyed" method (protected) ("view") #f #f 112 21 112 35 ("set!" "focused" "eq?" "when" "view")}}}})
"Focus-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Focus-Event.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.event.Focus-Event" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Focus-Event" class () ((extends . "Event")) #f #f 43 7 43 18 ("Event")
        {Lisp-Entry "focus" slot () ((getter . "generate")) #f #f 46 8 46 13 ()}
        {Lisp-Entry "get-focus" accessor () () #f #f 46 21 46 29 ()}
        {Lisp-Entry "initialize" method (override) ("kind" "sender" "focus") #f #f 49 20 49 30 ("self" "focus~self" "set!" "nextmethod" "focus" "sender" "kind")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 54 20 54 25 ("lambda" "self" "print-unreadable" "readably" "output")}}}})
"Font-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Font-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.preference.Font-Preferences" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Font-Preferences" class (undocumented) ((extends . "Exemplar-Preferences")) #f #f 47 20 47 36 ("Exemplar-Preferences")
        {Lisp-Entry "font-name" property () ((accessors . "generate")) #f #f 50 12 50 21 ()}
        {Lisp-Entry "get-font-name" accessor () () #f #f 50 33 50 41 ()}
        {Lisp-Entry "set-font-name" accessor () () #f #f 50 33 50 41 ()}
        {Lisp-Entry "point-size" property () ((accessors . "generate")) #f #f 51 12 51 22 ()}
        {Lisp-Entry "get-point-size" accessor () () #f #f 51 33 51 41 ()}
        {Lisp-Entry "set-point-size" accessor () () #f #f 51 33 51 41 ()}
        {Lisp-Entry "color" property () ((accessors . "generate")) #f #f 52 12 52 17 ()}
        {Lisp-Entry "get-color" accessor () () #f #f 52 33 52 41 ()}
        {Lisp-Entry "set-color" accessor () () #f #f 52 33 52 41 ()}
        {Lisp-Entry "bold?" property () ((accessors . "generate")) #f #f 53 12 53 17 ()}
        {Lisp-Entry "get-bold?" accessor () () #f #f 53 33 53 41 ()}
        {Lisp-Entry "set-bold?" accessor () () #f #f 53 33 53 41 ()}
        {Lisp-Entry "italic?" property () ((accessors . "generate")) #f #f 54 12 54 19 ()}
        {Lisp-Entry "get-italic?" accessor () () #f #f 54 33 54 41 ()}
        {Lisp-Entry "set-italic?" accessor () () #f #f 54 33 54 41 ()}
        {Lisp-Entry "underline?" property () ((accessors . "generate")) #f #f 55 12 55 22 ()}
        {Lisp-Entry "get-underline?" accessor () () #f #f 55 33 55 41 ()}
        {Lisp-Entry "set-underline?" accessor () () #f #f 55 33 55 41 ()}
        {Lisp-Entry "antialias" property () ((accessors . "generate")) #f #f 56 12 56 21 ()}
        {Lisp-Entry "get-antialias" accessor () () #f #f 56 33 56 41 ()}
        {Lisp-Entry "set-antialias" accessor () () #f #f 56 33 56 41 ()}
        {Lisp-Entry "hint-style" property () ((accessors . "generate")) #f #f 57 12 57 22 ()}
        {Lisp-Entry "get-hint-style" accessor () () #f #f 57 33 57 41 ()}
        {Lisp-Entry "set-hint-style" accessor () () #f #f 57 33 57 41 ()}
        {Lisp-Entry "form" form () () #f #f 60 3 60 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "->exemplar" method (override) () #f #f 69 20 69 30 ("Font" "new" "apply" "hint-style:" "hint-style" "antialias:" "antialias" "underline?:" "underline?" "italic?:" "italic?" "bold?:" "bold?" "color:" "color" "point-size:" "point-size" "font-name:" "font-name" "base:" "list" "base" "specified?" "if" "arguments" "let")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 88 25 88 45 ("Font-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 97 11 97 17 ()
        {Lisp-Entry "import" import () () #f #f 100 1 100 7 ("jazz.designer")}
        {Lisp-Entry "Font-Preferences-Descriptor" class () ((extends . "Exemplar-Preferences-Descriptor")) #f #f 103 7 103 34 ("Exemplar-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 106 3 106 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "hint-style" "antialias" "underline?" "italic?" "bold?" "color" "point-size" "font-name" "base" "categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Fonts-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Fonts-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Fonts-Preferences" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Fonts-Preferences" class (undocumented) ((extends . "Exemplars-Preferences")) #f #f 45 20 45 37 ("Exemplars-Preferences")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 57 25 57 45 ("Fonts-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 66 11 66 17 ()
        {Lisp-Entry "import" import () () #f #f 69 1 69 7 ("jazz.designer")}
        {Lisp-Entry "Fonts-Preferences-Descriptor" class () ((extends . "Exemplars-Preferences-Descriptor")) #f #f 72 7 72 35 ("Exemplars-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 75 3 75 7 ("categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Format"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Format.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Format" module (protected) () #f #f 37 18 37 37 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}
      {Lisp-Entry "Format" class () ((extends . "Exemplar")) #f #f 44 7 44 13 ("unordered" "left" "0" "attributes" "Exemplar")
        {Lisp-Entry "left-margin" definition () ((initialize . "0")) #f #f 48 5 48 16 ()}
        {Lisp-Entry "get-left-margin" accessor () () #f #f 48 5 48 16 ()}
        {Lisp-Entry "set-left-margin" accessor () () #f #f 48 5 48 16 ()}
        {Lisp-Entry "right-margin" definition () ((initialize . "0")) #f #f 49 5 49 17 ()}
        {Lisp-Entry "get-right-margin" accessor () () #f #f 49 5 49 17 ()}
        {Lisp-Entry "set-right-margin" accessor () () #f #f 49 5 49 17 ()}
        {Lisp-Entry "justification" definition () ((initialize . "'left")) #f #f 50 5 50 18 ()}
        {Lisp-Entry "get-justification" accessor () () #f #f 50 5 50 18 ()}
        {Lisp-Entry "set-justification" accessor () () #f #f 50 5 50 18 ()}
        {Lisp-Entry "bulleted?" definition () ((initialize . "#f")) #f #f 51 5 51 14 ()}
        {Lisp-Entry "get-bulleted?" accessor () () #f #f 51 5 51 14 ()}
        {Lisp-Entry "set-bulleted?" accessor () () #f #f 51 5 51 14 ()}
        {Lisp-Entry "bullet-kind" definition () ((initialize . "'unordered")) #f #f 52 5 52 16 ()}
        {Lisp-Entry "get-bullet-kind" accessor () () #f #f 52 5 52 16 ()}
        {Lisp-Entry "set-bullet-kind" accessor () () #f #f 52 5 52 16 ()}
        {Lisp-Entry "bullet-outside" definition () ((initialize . "#f")) #f #f 53 5 53 19 ()}
        {Lisp-Entry "get-bullet-outside" accessor () () #f #f 53 5 53 19 ()}
        {Lisp-Entry "set-bullet-outside" accessor () () #f #f 53 5 53 19 ()}
        {Lisp-Entry "bullet-inside" definition () ((initialize . "#f")) #f #f 54 5 54 18 ()}
        {Lisp-Entry "get-bullet-inside" accessor () () #f #f 54 5 54 18 ()}
        {Lisp-Entry "set-bullet-inside" accessor () () #f #f 54 5 54 18 ()}
        {Lisp-Entry "background" definition () ((initialize . "#f")) #f #f 55 5 55 15 ()}
        {Lisp-Entry "get-background" accessor () () #f #f 55 5 55 15 ()}
        {Lisp-Entry "set-background" accessor () () #f #f 55 5 55 15 ()}
        {Lisp-Entry "frame" definition () ((initialize . "#f")) #f #f 56 5 56 10 ()}
        {Lisp-Entry "get-frame" accessor () () #f #f 56 5 56 10 ()}
        {Lisp-Entry "set-frame" accessor () () #f #f 56 5 56 10 ()}
        {Lisp-Entry "keep-with-next?" definition () ((initialize . "#f")) #f #f 57 5 57 20 ()}
        {Lisp-Entry "get-keep-with-next?" accessor () () #f #f 57 5 57 20 ()}
        {Lisp-Entry "set-keep-with-next?" accessor () () #f #f 57 5 57 20 ()}
        {Lisp-Entry "default-domain" method (override) () #f #f 60 20 60 34 ("formats-domain")}}}})
"Format-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Format-Menu.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Format-Menu" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Format-Menu" class (undocumented) ((extends . "Context-Menu")) #f #f 44 20 44 31 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("capitalize" "capitalize-selection" "downcase" "downcase-selection" "upcase" "text" "upcase-selection" "Separator-Item" "<Separator-Item>" "tabify" "code-text" "Action" "action-handler:" "title:" "tabify-selection" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Format-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Format-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.preference.Format-Preferences" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Format-Preferences" class (undocumented) ((extends . "Exemplar-Preferences")) #f #f 46 20 46 38 ("Exemplar-Preferences")
        {Lisp-Entry "left-margin" property () ((accessors . "generate")) #f #f 49 12 49 23 ()}
        {Lisp-Entry "get-left-margin" accessor () () #f #f 49 38 49 46 ()}
        {Lisp-Entry "set-left-margin" accessor () () #f #f 49 38 49 46 ()}
        {Lisp-Entry "right-margin" property () ((accessors . "generate")) #f #f 50 12 50 24 ()}
        {Lisp-Entry "get-right-margin" accessor () () #f #f 50 38 50 46 ()}
        {Lisp-Entry "set-right-margin" accessor () () #f #f 50 38 50 46 ()}
        {Lisp-Entry "justification" property () ((accessors . "generate")) #f #f 51 12 51 25 ()}
        {Lisp-Entry "get-justification" accessor () () #f #f 51 38 51 46 ()}
        {Lisp-Entry "set-justification" accessor () () #f #f 51 38 51 46 ()}
        {Lisp-Entry "bulleted?" property () ((accessors . "generate")) #f #f 52 12 52 21 ()}
        {Lisp-Entry "get-bulleted?" accessor () () #f #f 52 38 52 46 ()}
        {Lisp-Entry "set-bulleted?" accessor () () #f #f 52 38 52 46 ()}
        {Lisp-Entry "bullet-outside" property () ((accessors . "generate")) #f #f 53 12 53 26 ()}
        {Lisp-Entry "get-bullet-outside" accessor () () #f #f 53 38 53 46 ()}
        {Lisp-Entry "set-bullet-outside" accessor () () #f #f 53 38 53 46 ()}
        {Lisp-Entry "bullet-inside" property () ((accessors . "generate")) #f #f 54 12 54 25 ()}
        {Lisp-Entry "get-bullet-inside" accessor () () #f #f 54 38 54 46 ()}
        {Lisp-Entry "set-bullet-inside" accessor () () #f #f 54 38 54 46 ()}
        {Lisp-Entry "keep-with-next?" property () ((accessors . "generate")) #f #f 55 12 55 27 ()}
        {Lisp-Entry "get-keep-with-next?" accessor () () #f #f 55 38 55 46 ()}
        {Lisp-Entry "set-keep-with-next?" accessor () () #f #f 55 38 55 46 ()}
        {Lisp-Entry "form" form () () #f #f 58 3 58 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "->exemplar" method (override) () #f #f 67 20 67 30 ("Format" "new" "apply" "keep-with-next?:" "keep-with-next?" "bullet-inside:" "bullet-inside" "bullet-outside:" "bullet-outside" "bulleted?:" "bulleted?" "justification:" "justification" "right-margin:" "right-margin" "left-margin:" "left-margin" "base:" "list" "base" "specified?" "if" "arguments" "let")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 85 25 85 45 ("Format-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 94 11 94 17 ()
        {Lisp-Entry "import" import () () #f #f 97 1 97 7 ("jazz.designer")}
        {Lisp-Entry "Format-Preferences-Descriptor" class () ((extends . "Exemplar-Preferences-Descriptor")) #f #f 100 7 100 36 ("Exemplar-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 103 3 103 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "keep-with-next?" "bullet-inside" "bullet-outside" "bulleted?" "justification" "right-margin" "left-margin" "base" "categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Formats-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Formats-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Formats-Preferences" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Formats-Preferences" class (undocumented) ((extends . "Exemplars-Preferences")) #f #f 45 20 45 39 ("Exemplars-Preferences")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 57 25 57 45 ("Formats-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 66 11 66 17 ()
        {Lisp-Entry "import" import () () #f #f 69 1 69 7 ("jazz.designer")}
        {Lisp-Entry "Formats-Preferences-Descriptor" class () ((extends . "Exemplars-Preferences-Descriptor")) #f #f 72 7 72 37 ("Exemplars-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 75 3 75 7 ("categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Formatted-Text"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Formatted-Text.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Formatted-Text" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Formatted-Text" class () ((extends . "Text")) #f #f 43 7 43 21 ("Text")
        {Lisp-Entry "formats" slot (protected) ((accessors . "generate")) #f #f 46 18 46 25 ()}
        {Lisp-Entry "get-formats" accessor () () #f #f 46 36 46 44 ()}
        {Lisp-Entry "set-formats" accessor () () #f #f 46 36 46 44 ()}
        {Lisp-Entry "styles" slot (protected) ((accessors . "generate")) #f #f 47 18 47 24 ()}
        {Lisp-Entry "get-styles" accessor () () #f #f 47 36 47 44 ()}
        {Lisp-Entry "set-styles" accessor () () #f #f 47 36 47 44 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 50 20 50 30 ("styles~self" "self" "formats~self" "set!" "nextmethod" "apply" "others" "styles" "formats" "bind-keywords" "rest")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 57 20 57 25 ("paragraphs" "styles" "formats" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Formatted-Text-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Formatted-Text-Actions.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Formatted-Text-Actions" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Formatted-Text-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 42 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("on-bulleted" "bulleted" "Heading5" "heading5-style" "Heading4" "heading4-style" "Heading3" "heading3-style" "Heading2" "heading2-style" "Heading1" "heading1-style" ":alt" "Shortcut" "shortcut:" "Base" "style:" "on-paragraph-style" ":focus" "Event-Handler" "action-handler:" "default-style" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Formatted-Text-Model"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Formatted-Text-Model.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Formatted-Text-Model" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Formatted-Text-Model" class () ((extends . "Text-Model")) #f #f 43 7 43 27 ("Text-Model")
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 51 25 51 38 ("formatted-text" "rest")}
        {Lisp-Entry "empty-content" method (override) () #f #f 60 20 60 33 ("list" "paragraphs:" "styles:" "formats:" "Formatted-Text" "new")}
        {Lisp-Entry "get-content" method (override) () #f #f 67 20 67 31 ("get-formatted-content")}
        {Lisp-Entry "set-content" method (override) ("text") #f #f 71 20 71 31 ("empty-content" "or" "set-formatted-content" "text")}
        {Lisp-Entry "read-moniker" method (override) ("moniker") #f #f 80 20 80 32 ("read-formatted" "moniker")}
        {Lisp-Entry "save-to" method (override) ("moniker") #f #f 84 20 84 27 ("save-formatted" "moniker")}
        {Lisp-Entry "for-each-heading" method (public) ("proc") #f #f 93 18 93 34 ("get-string" "get-string~" "inherits?" "inherits?~" "error?:" "locate-style" "heading" "name" "for-each" "when" "get-style" "get-style~" "and" "style" "first-run" "first-run~" "run" "Paragraph" "<Paragraph>" "paragraph" "fx" "<fx>" "line" "lambda" "for-each-paragraph" "Heading5" "Heading4" "Heading3" "Heading2" "Heading1" "all" "let" "proc")}
        {Lisp-Entry "collect-headings" method (public) () #f #f 107 18 107 34 ("get-output" "get-output~" "list" "put" "put~" "string" "line" "style" "name" "lambda" "for-each-heading" "List-Factory" "new" "headings" "let")}
        {Lisp-Entry "insert-table-of-content" method (override) () #f #f 121 20 121 43 ("toggle-bulleted" "unless" "anchor:" "insert-link" "get-line" "get-line~" "get-start" "start" "let*" "eq?" "when" "string" "line" "style" "name" "bind" "heading" "lambda" "for-each" "insert-newline" "Heading1" "insert-styled" "collect-headings" "headings" "let")}
        {Lisp-Entry "Heading-Levels" definition () () #f #f 145 14 145 28 ("5" "Heading5" "4" "Heading4" "3" "Heading3" "2" "Heading2" "1" "Heading1")}
        {Lisp-Entry "heading-level" definition () ("heading") #f #f 153 15 153 28 ("error" "cdr" "if" "Heading-Levels" "assq" "info" "let" "heading")}
        {Lisp-Entry "get-chapters" method (override) () #f #f 166 20 166 32 ("collect-headings" "0" "Cell" "new" "heading-level" "list" "string" "line" "style" "name" "bind" "heading" "lambda" "map")}
        {Lisp-Entry "get-first-chapter" method (override) ("lst") #f #f 174 20 174 37 ("lst")}
        {Lisp-Entry "get-remaining-chapters" method (override) ("lst") #f #f 179 20 179 42 ("lst")}}}})
"Formatted-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Formatted-Text-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Formatted-Text-View" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui" "jazz.library")}
      {Lisp-Entry "Formatted-Text-View" class () ((extends . "Text-View")) #f #f 45 7 45 26 ("Text-View")
        {Lisp-Entry "ruler" slot () ((initialize . "#f")) #f #f 48 8 48 13 ()}
        {Lisp-Entry "new-model" method (override) () #f #f 51 20 51 29 ("Formatted-Text-Model" "new")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 60 20 60 33 ("nextmethod" "formatted-text" "find-actions" "cons")}
        {Lisp-Entry "host-workspaces" method (override) () #f #f 70 20 70 35 ("formatted")}
        {Lisp-Entry "new-document-controller" method (override) () #f #f 79 20 79 43 ("self" "Formatted-Text-Controller" "new")}
        {Lisp-Entry "default-extension" method (override) () #f #f 83 20 83 37 ()}
        {Lisp-Entry "extensions" method (override) () #f #f 87 20 87 30 ()}
        {Lisp-Entry "get-ruler" method (override) () #f #f 96 20 96 29 ("ruler")}
        {Lisp-Entry "set-ruler" method (public) ("r") #f #f 100 18 100 27 ("ruler" "set!" "r")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 110 20 110 36 ()}
        {Lisp-Entry "cursor-update" method (override) ("view" "<Point>") #f #f 119 20 119 33 (":ibeam" ":finger" "Link-Style" "is?" "model" "get-style-at" "get-style-at~" "style" "let" ":left-arrow" "set-cursor" "paragraph-left" "paragraph-left~" "get-h" "get-h~" "<" "if" "get-line" "get-line~" "get-paragraph" "par" "view->text" "pos" "let*" "selectable?" "view-enabled?" "and" "when" "show-text-cursor" "Point" "<Point>" "view")}
        {Lisp-Entry "mouse-down" method (override) ("view") #f #f 137 20 137 30 ("nextmethod" "Link-Style" "is?" "unless" "model" "get-style-at" "get-style-at~" "style" "view->text" "pos" "let*" "view-enabled?" "when" "view")}
        {Lisp-Entry "drag-up" method (override) ("view" "." "rest") #f #f 145 20 145 27 ("bell" "get-action" "get-action~" "get-anchor" "get-anchor~" "Link-Style" "get-style-at" "get-style-at~" "style" "view->text" "pos" "let*" "not" "view-enabled?" "and" "nextmethod" "mouse-selecting?" "let" "cardinality" "0" "Cell" "Range$Cell$" "set-selection" "equal?" "when" "string" "line" "heading" "name" "lambda" "model" "for-each-heading" "for-each-heading~" "anchor" "goto-anchor" "else" "get-properties" "get-properties~" ":link" "Event" "new" "apply" "self" "invoke" "invoke~" "Event-Handler" "is?" "cond" "action" "invoke-action" "define" "rest" "view")}
        {Lisp-Entry "copy-selection" method (override) () #f #f 181 20 181 34 ("copy-formatted-selection" "nextmethod")}
        {Lisp-Entry "paste-clipboard" method (override) () #f #f 186 20 186 35 ("paste-formatted-clipboard")}}
      {Lisp-Entry "Formatted-Text-Controller" class () ((extends . "Document-Controller")) #f #f 195 7 195 32 ("Document-Controller")
        {Lisp-Entry "install-container" method (override) () #f #f 198 20 198 37 ("install-scroller" "set-content" "set-content~" "set-client" "set-client~" "get-content" "get-content~" "set-parent" "set-parent~" "set-ruler" "set-ruler~" "parent:" "Ruler" "new" "ruler" "get-scroller" "get-scroller~" "scroller" "document" "get-host" "get-host~" "host" "let" "install-ruler" "define")}}}})
"Frame-Button"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Frame-Button.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.view.Frame-Button" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.geometry")}
      {Lisp-Entry "Frame-Button" class (undocumented) ((extends . "View")) #f #f 46 20 46 32 ("inactive" "explicit" "View")
        {Lisp-Entry "type" property () ((initialize . "#f") (accessors . "explicit")) #f #f 49 12 49 16 ()}
        {Lisp-Entry "state" slot () ((initialize . "'inactive")) #f #f 52 8 52 13 ()}
        {Lisp-Entry "get-type" method (public) () #f #f 60 18 60 26 ("type")}
        {Lisp-Entry "set-type" method (public) ("value") #f #f 64 18 64 26 ("invalidate-view" "type" "set!" "value")}
        {Lisp-Entry "get-state" method (public) () #f #f 74 18 74 27 ("state")}
        {Lisp-Entry "set-state" method (public) ("value") #f #f 78 18 78 27 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 88 20 88 35 ()}
        {Lisp-Entry "mouse-enter" method (override) () #f #f 92 20 92 31 ("pushed" "out-pushed" "highlighted" "set-state" "inactive" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "view-enabled?" "and" "when")}
        {Lisp-Entry "mouse-leave" method (override) () #f #f 99 20 99 31 ("out-pushed" "pushed" "inactive" "set-state" "highlighted" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "view-enabled?" "and" "when")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 106 20 106 30 ("pushed" "set-state" "view-enabled?" "when" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 111 20 111 27 ("inactive" "out-pushed" "highlighted" "set-state" "pushed" "get-state" "case" "up" "unwind-protect" "view-enabled?" "when" "rest" "pos")}
        {Lisp-Entry "up" method () () #f #f 120 11 120 13 ("self" "process-action" "pushed" "get-state" "eq?" "when")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 130 20 130 24 ("pushed" "state" "eq?" "if" "draw-caption" "draw-caption~" "+" "16" "Rect" "new" "rect" "0" "Medium" "Color" "get-application" "get-images-portfolio" "get-images-portfolio~" "draw-opaque-image" "draw-opaque-image~" "get-height" "14" "center" "top" "let" "close" "restore" "Image-Resource" "maximize" "case" "type" "type-icon" "define" "context" "surface")}}}})
"Frame-Host"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "hosting" "Frame-Host.jazz"} 241761214. jazz
    {Lisp-Entry "jazz.ui.hosting.Frame-Host" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui" "jazz.system")}
      {Lisp-Entry "Frame-Host" class (undocumented) ((extends . "Host-View")) #f #f 46 20 46 30 ("Host-View")
        {Lisp-Entry "conclude" method (override) ("rest") #f #f 54 20 54 28 ("self" "register-frame" "destroy-mandatory" "nextmethod" "rest")}
        {Lisp-Entry "activate-frame" method (protected virtual) () #f #f 65 29 65 43 ("simulate-mouse-move" "simulate-mouse-move~" "get-player" "when" "get-application" "update-windowing-actions" "update-windowing-actions~" "client-activate" "client-activate~" "for-each-docked" "bring-frame-to-front" "self" "set-active-frame" "close-popups")}
        {Lisp-Entry "deactivate-frame" method (protected virtual) () #f #f 76 29 76 45 ("set-active-frame")}
        {Lisp-Entry "close-host" method (protected virtual) ("(confirm?: confirm? #t)") #f #f 85 29 85 39 ("confirm?" "confirm?:")}
        {Lisp-Entry "close-with-confirm" method (override) () #f #f 89 20 89 38 ("nextmethod" "confirm-close" "close-popups")}
        {Lisp-Entry "destroy" method (override) () #f #f 100 20 100 27 ("get-application" "update-windowing-actions" "update-windowing-actions~" "self" "unregister-frame" "remove-surrogate" "get-surrogate" "when" "nextmethod")}
        {Lisp-Entry "confirm-close" method (override) ("." "rest") #f #f 113 20 113 33 ("confirm-close" "confirm-close~" "guest" "when" "rest")}}}})
"Frame-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Frame-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Frame-Preferences" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Frame-Preferences" class (undocumented) ((extends . "Figure-Preferences")) #f #f 45 20 45 37 ("Figure-Preferences")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Image-Resource" "icon:" "install" "<install>")}}}})
"Group-Box"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Group-Box.jazz"} 244260909. jazz
    {Lisp-Entry "jazz.ui.view.Group-Box" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.skin" "jazz.ui" "jazz.platform.cairo" "jazz.locale" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Group-Box" class () ((extends . "Base-Container")) #f #f 48 7 48 16 ("explicit" "Base-Container")
        {Lisp-Entry "flat?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 17 ()}
        {Lisp-Entry "get-flat?" method (public) () #f #f 59 18 59 27 ("flat?")}
        {Lisp-Entry "set-flat?" method (public) ("value") #f #f 63 18 63 27 ("invalidate-view" "flat?" "set!" "value")}
        {Lisp-Entry "set-title" method (override) ("value") #f #f 68 20 68 29 ("layout-view" "nextmethod" "value")}
        {Lisp-Entry "layout" method (override) () #f #f 78 20 78 26 ("Dimension" "set-size" "set-size~" "Point" "new" "set-position" "set-position~" "get-content" "content" "height" "4" "-" "width" "else" "+" "title" "cond" "top" "2" "1" "flat?" "if" "left" "get-ascent" "get-ascent~" "ascent" "effective-font" "get-metrics" "get-metrics~" "metrics" "get-height" "get-height~" "box-height" "get-width" "get-width~" "box-width" "get-size" "size" "let*")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 98 20 98 24 ("draw-text" "draw-text~" "Black" "set-text-color" "set-text-color~" "+" "-" "fill-rect" "fill-rect~" "when" "rectangle" "edges:" "sunken" "outer:" "raised" "inner:" "draw-edge" "draw-edge~" "Rect" "new" "frame-rect" "frame-rect~" "cairo_font_extents_t-free" "0" "2" "cairo_font_extents_t-ascent-ref" "/" "fxceiling" "if" "top" "get-text-extent" "get-text-extent~" "and" "extent" "get-text-metrics" "get-text-metrics~" "metrics" "get-bounds" "rect" "Group-Border" "else" "Entry-Border" "entry" "style" "case" "frame-color" "flat-look?" "flat?" "Medium" "Color" "color" "9" "offset" "get-height" "get-height~" "height" "get-width" "get-width~" "width" "get-size" "size" "get-title" "localize" "title" "let*" "context" "surface")}
        {Lisp-Entry "flat-look?" method () () #f #f 126 11 126 21 ("flat?" "else" "group" "find-look" "get-border-flat?" "get-border-flat?~" "styled" "style" "case")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 137 25 137 45 ("Group-Box-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 146 11 146 17 ()
        {Lisp-Entry "import" import () () #f #f 149 1 149 7 ("jazz.designer")}
        {Lisp-Entry "Group-Box-Descriptor" class () ((extends . "Layout-View-Descriptor")) #f #f 152 7 152 27 ("Layout-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 155 3 155 7 ("title:" "flat?" "name:" "Property-Descriptor" "<Property-Descriptor>" "title" "default:" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Group-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Group-Look.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Group-Look" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Group-Look" class () ((extends . "Look")) #f #f 43 7 43 17 ("Look")
        {Lisp-Entry "border-flat?" property () ((initialize . "#t") (accessors . "generate")) #f #f 46 12 46 24 ()}
        {Lisp-Entry "get-border-flat?" accessor () () #f #f 46 49 46 57 ()}
        {Lisp-Entry "set-border-flat?" accessor () () #f #f 46 49 46 57 ()}}}})
"Groupable"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Groupable.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Groupable" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Groupable" interface (undocumented) () #f #f 40 24 40 33 ()
        {Lisp-Entry "get-group" method (public virtual abstract) () #f #f 43 35 43 44 ()}
        {Lisp-Entry "set-group" method (public virtual abstract) ("value") #f #f 44 35 44 44 ("value")}}}})
"Guest-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "hosting" "Guest-Actions.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.hosting.Guest-Actions" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Guest-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 33 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("on-compare-saved" "compare-saved" "on-revert-saved" "revert-saved" "on-save-as" "save-as" ":alt" ":control" "Shortcut" "shortcut:" "on-save" ":document" "Event-Handler" "action-handler:" "save" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Guest-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "hosting" "Guest-Preferences.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.hosting.Guest-Preferences" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Guest-Preferences" class (undocumented) ((extends . "Frame-Preferences")) #f #f 43 20 43 37 ("Frame-Preferences")
        {Lisp-Entry "initargs" property () ((initialize . "'()") (accessors . "generate")) #f #f 46 12 46 20 ()}
        {Lisp-Entry "get-initargs" accessor () () #f #f 46 46 46 54 ()}
        {Lisp-Entry "set-initargs" accessor () () #f #f 46 46 46 54 ()}}}})
"Header-Bar"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Header-Bar.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Header-Bar" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Header-Bar" class () ((extends . "Base-Container")) #f #f 45 7 45 17 ("explicit" "Base-Container")
        {Lisp-Entry "flat?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 48 12 48 17 ()}
        {Lisp-Entry "shown?" property () ((initialize . "#t") (accessors . "explicit")) #f #f 49 12 49 18 ()}
        {Lisp-Entry "client" slot () ((initialize . "#f") (accessors . "generate")) #f #f 52 8 52 14 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 52 39 52 47 ()}
        {Lisp-Entry "set-client" accessor () () #f #f 52 39 52 47 ()}
        {Lisp-Entry "get-flat?" method (public) () #f #f 60 18 60 27 ("flat?")}
        {Lisp-Entry "set-flat?" method (public) ("value") #f #f 64 18 64 27 ("layout-view" "set!" "flat?" "neq?" "when" "value")}
        {Lisp-Entry "get-shown?" method (public) () #f #f 70 18 70 28 ("shown?")}
        {Lisp-Entry "set-shown?" method (public) ("value") #f #f 74 18 74 28 ("layout-view" "set!" "shown?" "neq?" "when" "value")}
        {Lisp-Entry "layout" method (override) () #f #f 85 20 85 26 ("content-size" "set-size" "set-size~" "content-position" "set-position" "set-position~" "get-size" "size" "when" "get-content" "content" "let")}
        {Lisp-Entry "content-position" method () ("size") #f #f 93 11 93 27 ("get-header-height" "0" "Point" "new" "size")}
        {Lisp-Entry "content-size" method () ("size") #f #f 97 11 97 23 ("get-header-height" "get-height" "get-height~" "-" "get-width" "get-width~" "Dimension" "new" "size")}
        {Lisp-Entry "get-header-height" method (public virtual) () #f #f 103 26 103 43 ("0" "16" "15" "flat?" "shown?" "if")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 112 25 112 45 ("Header-Bar-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 121 11 121 17 ()
        {Lisp-Entry "import" import () () #f #f 124 1 124 7 ("jazz.designer")}
        {Lisp-Entry "Header-Bar-Descriptor" class () ((extends . "Layout-View-Descriptor")) #f #f 127 7 127 28 ("Layout-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 130 3 130 7 ("shown?" "domain" "Boolean-Domain" "<Boolean-Domain>" "flat?" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Header-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Header-Look.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Header-Look" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Header-Look" class () ((extends . "Look")) #f #f 43 7 43 18 ("Look")
        {Lisp-Entry "flat?" property () ((initialize . "#t") (accessors . "generate")) #f #f 46 12 46 17 ()}
        {Lisp-Entry "get-flat?" accessor () () #f #f 46 42 46 50 ()}
        {Lisp-Entry "set-flat?" accessor () () #f #f 46 42 46 50 ()}}}})
"Header-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Header-View.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.ui.view.Header-View" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.skin" "jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Header-View" class () ((extends . "Base-Container")) #f #f 47 7 47 18 ("explicit" "Base-Container")
        {Lisp-Entry "flat?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 50 12 50 17 ()}
        {Lisp-Entry "shown?" property () ((initialize . "#t") (accessors . "explicit")) #f #f 51 12 51 18 ()}
        {Lisp-Entry "selector?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 52 12 52 21 ()}
        {Lisp-Entry "client" slot () ((initialize . "#f")) #f #f 55 8 55 14 ()}
        {Lisp-Entry "default-name" method (override) () #f #f 58 20 58 32 ("header")}
        {Lisp-Entry "get-flat?" method (public) () #f #f 67 18 67 27 ("flat?")}
        {Lisp-Entry "set-flat?" method (public) ("value") #f #f 71 18 71 27 ("layout-view" "set!" "flat?" "neq?" "when" "value")}
        {Lisp-Entry "get-shown?" method (public) () #f #f 77 18 77 28 ("shown?")}
        {Lisp-Entry "set-shown?" method (public) ("value") #f #f 81 18 81 28 ("layout-view" "set!" "shown?" "neq?" "when" "value")}
        {Lisp-Entry "get-selector?" method (public) () #f #f 87 18 87 31 ("selector?")}
        {Lisp-Entry "set-selector?" method (public) ("value") #f #f 91 18 91 31 ("layout-view" "set!" "selector?" "neq?" "when" "value")}
        {Lisp-Entry "get-client" method (public) () #f #f 102 18 102 28 ("set!" "find-client" "clt" "let" "client" "or")}
        {Lisp-Entry "set-client" method (public) ("clt") #f #f 108 18 108 28 ("client" "set!" "clt")}
        {Lisp-Entry "find-client" method (protected virtual) () #f #f 112 29 112 40 ()}
        {Lisp-Entry "content-inner?" method (override) ("view") #f #f 121 20 121 34 ("view")}
        {Lisp-Entry "layout" method (override) () #f #f 130 20 130 26 ("content-size" "set-size" "set-size~" "content-position" "set-position" "set-position~" "get-size" "size" "when" "get-content" "content" "let")}
        {Lisp-Entry "content-position" method () ("size") #f #f 138 11 138 27 ("get-header-height" "get-selector-width" "Point" "new" "size")}
        {Lisp-Entry "content-size" method () ("size") #f #f 142 11 142 23 ("get-header-height" "get-height" "get-height~" "-" "get-width" "get-width~" "Dimension" "new" "size")}
        {Lisp-Entry "get-header-height" method (public virtual) () #f #f 148 26 148 43 ("0" "16" "15" "flat?" "shown?" "if")}
        {Lisp-Entry "get-selector-width" method (public virtual) () #f #f 152 26 152 44 ("0" "16" "15" "flat?" "selector?" "if")}
        {Lisp-Entry "get-look" method (override) () #f #f 161 20 161 28 ("header" "else" "header/document" "document" "header/tool" "find-look" "tool" "style" "case")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 173 25 173 45 ("Header-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 182 11 182 17 ()
        {Lisp-Entry "import" import () () #f #f 185 1 185 7 ("jazz.designer")}
        {Lisp-Entry "Header-View-Descriptor" class () ((extends . "Layout-View-Descriptor")) #f #f 188 7 188 29 ("Layout-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 191 3 191 7 ("selector?" "shown?" "domain" "Boolean-Domain" "<Boolean-Domain>" "title:" "flat?" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 201 20 201 31 ("Image-Resource" "class")}}}}})
"Highlight-Mode-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "command" "Highlight-Mode-Actions.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.command.Highlight-Mode-Actions" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Highlight-Mode-Actions" class () ((extends . "Search-Mode-Actions")) #f #f 43 7 43 29 ("Search-Mode-Actions")}}})
"History-Document-Item"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "history" "History-Document-Item.jazz"} 243479599. jazz
    {Lisp-Entry "jazz.ui.history.History-Document-Item" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "History-Document-Item" class (undocumented) ((extends . "History-Item")) #f #f 43 20 43 41 ("History-Item")
        {Lisp-Entry "document" slot () () #f #f 46 8 46 16 ()}
        {Lisp-Entry "selection" slot () () #f #f 47 8 47 17 ()}
        {Lisp-Entry "initialize" method (override) ("document" "selection") #f #f 50 20 50 30 ("selection~self" "self" "document~self" "set!" "nextmethod" "selection" "document")}
        {Lisp-Entry "valid?" method (override) () #f #f 56 20 56 26 ("document" "get-guest" "get-guest~")}
        {Lisp-Entry "open-item" method (override) () #f #f 60 20 60 29 ("bring-to-front" "bring-to-front~" "selection" "document" "get-guest" "get-guest~" "set-selection" "set-selection~")}
        {Lisp-Entry "present" method (override) () #f #f 65 20 65 27 ("document" "get-guest" "get-guest~" "get-document-controller" "get-document-controller~" "name-status" "name-status~")}}}})
"History-File-Item"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "history" "History-File-Item.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.history.History-File-Item" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.system" "jazz.library")}
      {Lisp-Entry "History-File-Item" class (undocumented) ((extends . "History-Item")) #f #f 44 20 44 37 ("History-Item")
        {Lisp-Entry "file" slot () () #f #f 47 8 47 12 ()}
        {Lisp-Entry "selection" slot () () #f #f 48 8 48 17 ()}
        {Lisp-Entry "initialize" method (override) ("file" "selection") #f #f 51 20 51 30 ("selection~self" "self" "file~self" "set!" "nextmethod" "selection" "file")}
        {Lisp-Entry "open-item" method (override) () #f #f 57 20 57 29 ("selection" "selection:" "file" "get-application" "edit-document" "edit-document~")}
        {Lisp-Entry "present" method (override) () #f #f 61 20 61 27 ("get-col" "get-col~" "get-line" "get-line~" "file" "get-name" "get-name~" "format" "get-end" "get-end~" "end" "selection" "get-start" "get-start~" "start" "let")}}}})
"History-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "history" "History-Menu.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.history.History-Menu" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.history" "jazz.ui" "jazz.system" "jazz.library")}
      {Lisp-Entry "History-Menu" class (undocumented) ((extends . "Context-Menu")) #f #f 46 20 46 32 ("Context-Menu")
        {Lisp-Entry "manager" property () ((accessors . "generate")) #f #f 49 12 49 19 ()}
        {Lisp-Entry "get-manager" accessor () () #f #f 49 32 49 40 ()}
        {Lisp-Entry "set-manager" accessor () () #f #f 49 32 49 40 ()}
        {Lisp-Entry "direction" property () ((accessors . "generate")) #f #f 50 12 50 21 ()}
        {Lisp-Entry "get-direction" accessor () () #f #f 50 32 50 40 ()}
        {Lisp-Entry "set-direction" accessor () () #f #f 50 32 50 40 ()}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 58 20 58 26 ("direction" "manager" "get-history" "increase!" "rank:" "list" "properties:" "on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "present" "present~" "title" "item" "lambda" "for-each" "0" "rank" "let" "nextmethod" "rest")}
        {Lisp-Entry "on-action" method () ("evt") #f #f 73 11 73 20 ("go-forward-history" "go-forward-history~" "forward" "manager" "go-backward-history" "go-backward-history~" "backward" "direction" "case" "rank:" "get-property" "get-property~" "rank" "get-application" "appl" "let" "evt")}}}})
"History-Search-Item"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "History-Search-Item.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.History-Search-Item" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.system" "jazz.library")}
      {Lisp-Entry "History-Search-Item" class (undocumented) ((extends . "History-Item")) #f #f 44 20 44 39 ("History-Item")
        {Lisp-Entry "domain" slot (protected) () #f #f 47 18 47 24 ()}
        {Lisp-Entry "targets" slot (protected) () #f #f 48 18 48 25 ()}
        {Lisp-Entry "whole-words?" slot (protected) () #f #f 49 18 49 30 ()}
        {Lisp-Entry "ignore-case?" slot (protected) () #f #f 50 18 50 30 ()}
        {Lisp-Entry "preserve-case?" slot (protected) () #f #f 51 18 51 32 ()}
        {Lisp-Entry "play-recording?" slot (protected) () #f #f 52 18 52 33 ()}
        {Lisp-Entry "expression?" slot (protected) () #f #f 53 18 53 29 ()}
        {Lisp-Entry "content" slot (protected) () #f #f 54 18 54 25 ()}
        {Lisp-Entry "selection" slot (protected) () #f #f 55 18 55 27 ()}
        {Lisp-Entry "initialize" method (override) ("domain" "targets" "whole-words?" "ignore-case?" "preserve-case?" "play-recording?" "expression?" "content" "selection") #f #f 58 20 58 30 ("selection~self" "content~self" "expression?~self" "play-recording?~self" "preserve-case?~self" "ignore-case?~self" "whole-words?~self" "targets~self" "self" "domain~self" "set!" "nextmethod" "selection" "content" "expression?" "play-recording?" "preserve-case?" "ignore-case?" "whole-words?" "targets" "domain")}
        {Lisp-Entry "open-item" method (override) () #f #f 71 20 71 29 ("select-resultset" "select-resultset~" "set-visible?" "set-visible?~" "bring-to-front" "bring-to-front~" "self" "install-history-item" "install-history-item~" "get-application" "get-search-manager" "get-search-manager~" "search" "let")}
        {Lisp-Entry "present" method (override) () #f #f 79 20 79 27 ("format" "null?" "if" "targets" "caar" "target" "let")}}}})
"Horizontal-Line"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Horizontal-Line.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.view.Horizontal-Line" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Horizontal-Line" class () ((extends . "View")) #f #f 44 7 44 22 ("View")
        {Lisp-Entry "default-size" method (override) () #f #f 47 20 47 32 ("8" "100" "Dimension")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 56 20 56 24 ("top" "edges:" "sunken" "outer:" "raised" "inner:" "2" "0" "Rect" "new" "draw-edge" "draw-edge~" "Medium" "Color" "color" "get-width" "width" "let" "context" "surface")}}}})
"Host-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "hosting" "Host-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.hosting.Host-View" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system")}
      {Lisp-Entry "Host-View" class (undocumented) ((extends . "Focus-Container")) #f #f 44 20 44 29 ("explicit" "Focus-Container")
        {Lisp-Entry "content" property () ((initialize . "#f") (accessors . "explicit")) #f #f 47 12 47 19 ()}
        {Lisp-Entry "guest" property () ((initialize . "#f") (accessors . "explicit")) #f #f 48 12 48 17 ()}
        {Lisp-Entry "icon" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 16 ()}
        {Lisp-Entry "get-icon" accessor () () #f #f 49 44 49 52 ()}
        {Lisp-Entry "set-icon" accessor () () #f #f 49 44 49 52 ()}
        {Lisp-Entry "destroy-component" method (override) () #f #f 52 20 52 37 ("nextmethod" "close" "close~" "set-guest" "view" "let" "guest" "when" "close-guest" "define")}
        {Lisp-Entry "get-content" method (public) () #f #f 68 18 68 29 ("content")}
        {Lisp-Entry "set-content" method (public) ("view") #f #f 72 18 72 29 ("layout-view" "set!" "content" "neq?" "when" "view")}
        {Lisp-Entry "get-guest" method (override) () #f #f 78 20 78 29 ("guest")}
        {Lisp-Entry "set-guest" method (public) ("view") #f #f 82 18 82 27 ("install-guest" "set!" "content" "not" "uninstall-guest" "guest" "neq?" "when" "view")}
        {Lisp-Entry "layout" method (override) () #f #f 98 20 98 26 ("get-size" "set-size" "set-size~" "0" "Point" "new" "set-position" "set-position~" "content" "when")}
        {Lisp-Entry "invalidate-caption" method (public virtual) () #f #f 109 26 109 44 ()}
        {Lisp-Entry "get-host" method (override) () #f #f 118 20 118 28 ("self")}
        {Lisp-Entry "install-guest" method () () #f #f 127 11 127 24 ("install-tools" "install-in-host" "install-in-host~" "set-visible?" "set-visible?~" "get-size" "set-size" "set-size~" "0" "Point" "set-position" "set-position~" "self" "guest" "set-parent" "set-parent~")}
        {Lisp-Entry "uninstall-guest" method () () #f #f 136 11 136 26 ("close" "close~" "self" "guest" "uninstall-from-host" "uninstall-from-host~")}
        {Lisp-Entry "focus-host" method (override) () #f #f 146 20 146 30 ("else" "focus-default" "focus-default~" "guest" "acquire-focus" "acquire-focus~" "cond" "get-focused" "focused" "let")}
        {Lisp-Entry "activate-focus" method (public virtual) () #f #f 156 26 156 40 ("host-activate" "host-activate~" "get-guest-actions" "get-application" "set-guest-actions" "set-guest-actions~" "guest" "when")}
        {Lisp-Entry "deactivate-focus" method (public virtual) () #f #f 162 26 162 42 ("host-deactivate" "host-deactivate~" "guest" "when" "get-application" "set-guest-actions" "set-guest-actions~")}
        {Lisp-Entry "install-tools" method (protected virtual) () #f #f 173 29 173 42 ("layout-view")}}}})
"Image-Browser"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "image" "Image-Browser.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.image.Image-Browser" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.dialog" "jazz.ui" "jazz.library" "jazz.jml" "jazz.io")}
      {Lisp-Entry "Image-Browser" class (undocumented) ((extends . "Layout-View")) #f #f 47 20 47 33 ("Layout-View")
        {Lisp-Entry "directory" slot () ((initialize . "#f")) #f #f 50 8 50 17 ()}
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("toplevel-controls?:" "419" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" "tree" "Tree-View" "<Tree-View>" "header" "Tree-Header" "<Tree-Header>" "content" "!" "<!>" "vscroll?:" "hscroll?:" "document" "style:" "scroller" "Scroller-View" "<Scroller-View>" "on-select-directory" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "select" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 65 25 65 38 ("images-browser" "rest")}
        {Lisp-Entry "on-select-directory" method () ("evt") #f #f 69 11 69 30 ("update-images" "choose-directory" "directory" "set!" "evt")}
        {Lisp-Entry "update-images" method () () #f #f 74 11 74 24 ("recursive?:" "directories?:" "files?:" "load-image" "image-file?" "when" "file" "directory" "iterate-directory" "iterate-directory~" "lambda" "with-update-locked" "with-update-locked~" "get-tree" "tree" "let")}
        {Lisp-Entry "image-file?" definition () ("file") #f #f 87 15 87 26 ("extension=?" "test:" "get-extension" "get-extension~" "member?" "file")}
        {Lisp-Entry "load-image" definition () ("tree" "file") #f #f 92 15 92 25 ("image:" "title:" "Tree-Node" "list" "children:" "add-row" "add-row~" "Resource" "new" "image" "get-base" "get-base~" "name" "let*" "file" "tree")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 103 25 103 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 107 25 107 35 ()}
        {Lisp-Entry "get-tools-view" method (override) () #f #f 116 20 116 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) () #f #f 120 20 120 33 ("acquire-focus" "acquire-focus~" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" method () () #f #f 130 11 130 19 ("tree" "locate")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 139 20 139 27 ("header" "locate" "set-shown?" "set-shown?~" "nextmethod" "rest")}}}})
"Image-Style"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Image-Style.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Image-Style" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Image-Style" class () ((extends . "Style")) #f #f 44 7 44 18 ("attributes" "Style")
        {Lisp-Entry "moniker" definition () ((initialize . "#f")) #f #f 48 5 48 12 ()}
        {Lisp-Entry "get-moniker" accessor () () #f #f 48 5 48 12 ()}
        {Lisp-Entry "set-moniker" accessor () () #f #f 48 5 48 12 ()}
        {Lisp-Entry "size" definition () ((initialize . "#f")) #f #f 49 5 49 9 ()}
        {Lisp-Entry "get-size" accessor () () #f #f 49 5 49 9 ()}
        {Lisp-Entry "set-size" accessor () () #f #f 49 5 49 9 ()}
        {Lisp-Entry "image" slot () ((initialize . "#f")) #f #f 52 8 52 13 ()}
        {Lisp-Entry "setup" method () () #f #f 60 11 60 16 ("image-size" "image-size~" "set-size" "unless" "moniker:" "Image" "new" "set!" "image" "not" "and" "when" "get-size" "size" "get-moniker" "moniker" "let")}
        {Lisp-Entry "get-image" method (public) () #f #f 74 18 74 27 ("image" "setup")}
        {Lisp-Entry "get-width" method (override) () #f #f 84 20 84 29 ("get-size" "get-width" "get-width~" "setup")}
        {Lisp-Entry "get-height" method (override) () #f #f 89 20 89 30 ("get-size" "get-height" "get-height~" "setup")}
        {Lisp-Entry "run-width" method (override) ("run") #f #f 94 20 94 29 ("get-width" "run")}
        {Lisp-Entry "propagate?" method (override) () #f #f 103 20 103 30 ()}
        {Lisp-Entry "scan" method (override) ("h" "start" "end" "tabs" "run" "proc") #f #f 112 20 112 24 ("default-scan" "proc" "run" "tabs" "end" "start" "h")}
        {Lisp-Entry "wrap" method (override) ("context" "margin" "h" "v" "width" "tabs" "place" "break" "run") #f #f 121 20 121 24 ("get-width" "+" "run" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "draw-style" method (override) ("surface" "<Surface>" "context" "string" "<Sequence>" "h" "<fx>" "v" "<fx>" "line-height" "<fx>" "tabs" "left" "enabled?") #f #f 131 20 131 30 ("+" "get-image" "draw" "draw~" "justify-element" "top" "get-height" "height" "get-width" "width" "let*" "enabled?" "left" "tabs" "line-height" "v" "fx" "<fx>" "h" "Sequence" "<Sequence>" "string" "context" "Surface" "<Surface>" "surface")}}}})
"Image-Style-Dialog"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Image-Style-Dialog.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Image-Style-Dialog" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Image-Style-Dialog" class () ((extends . "View")) #f #f 46 7 46 25 ("View")
        {Lisp-Entry "image-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 23 ()}
        {Lisp-Entry "get-image-style" accessor () () #f #f 49 48 49 56 ()}
        {Lisp-Entry "set-image-style" accessor () () #f #f 49 48 49 56 ()}
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler:" "default?:" "24" "80" "227" "167" "ok" "Push-Button" "<Push-Button>" "213" "address-text" "140" "address-border" "54" "142" "address-label" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "tooltip-text:" "tooltip?:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "title-text" "Name-Text-View" "<Name-Text-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "19" "294" "108" "121" "title-border" "Border-View" "<Border-View>" "33" "110" "62" "title-label" "8" "50" "0" "Horizontal-Line" "<Horizontal-Line>" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "Label-View" "<Label-View>" "261" "500" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 72 20 72 26 ("title-text" "locate" "set-string-content" "set-string-content~" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method (override) () #f #f 77 20 77 33 ("title-text" "locate" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 86 25 86 35 ()}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 95 20 95 36 ("address-text" "title-text" "locate" "get-string-content" "get-string-content~" "values")}
        {Lisp-Entry "get-tab-stops" method (override) () #f #f 105 20 105 33 ("address-text" "title-text" "locate" "list")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 117 20 117 35 ("get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-host" "dialog" "let" "validate-dialog" "ok" "locate" "get-enabled?" "get-enabled?~" "when" "evt")}
        {Lisp-Entry "on-escape-press" method (override) ("evt") #f #f 125 20 125 35 ("cancel-modal" "cancel-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "Header-Color" definition () () #f #f 135 14 135 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 139 20 139 24 ("Header-Color" "1" "White" "Color" "list" "50" "get-width" "get-width~" "0" "Rect" "new" "gradient-fill" "gradient-fill~" "get-size" "size" "let" "context" "surface")}}}})
"Image-Tool"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Image-Tool.jazz"} 240045414. jazz
    {Lisp-Entry "jazz.ui.view.Image-Tool" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Image-Tool" class () ((extends . "Tool-Button")) #f #f 46 7 46 17 ("2" "Point" "position:" "Image" "new" "explicit" "Tool-Button")
        {Lisp-Entry "portfolio" property () ((initialize . "#f") (accessors . "explicit")) #f #f 49 12 49 21 ()}
        {Lisp-Entry "resource" property () ((initialize . "#f") (accessors . "explicit")) #f #f 50 12 50 20 ()}
        {Lisp-Entry "disabled-resource" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 29 ()}
        {Lisp-Entry "image" slot () ((initialize . "(new Image position: {Point 2 2})")) #f #f 54 8 54 13 ()}
        {Lisp-Entry "disabled-image" slot () ((initialize . "(new Image position: {Point 2 2})")) #f #f 55 8 55 22 ()}
        {Lisp-Entry "set-background" method (override) ("color") #f #f 63 20 63 34 ("invalidate-view" "disabled-image" "image" "set-background" "set-background~" "background" "set!" "color")}
        {Lisp-Entry "get-portfolio" method (public) () #f #f 70 18 70 31 ("image" "get-portfolio" "get-portfolio~")}
        {Lisp-Entry "set-portfolio" method (public) ("portfolio") #f #f 74 18 74 31 ("invalidate-view" "disabled-image" "image" "set-portfolio" "set-portfolio~" "child" "Portfolio" "is?" "if" "let" "portfolio")}
        {Lisp-Entry "get-resource" method (public) () #f #f 81 18 81 30 ("image" "get-resource" "get-resource~")}
        {Lisp-Entry "set-resource" method (public) ("name") #f #f 85 18 85 30 ("invalidate-view" "image" "set-resource" "set-resource~" "default-disabled-resource" "set-disabled-resource" "get-disabled-resource" "not" "when" "name")}
        {Lisp-Entry "get-disabled-resource" method (public) () #f #f 92 18 92 39 ("disabled-image" "get-resource" "get-resource~")}
        {Lisp-Entry "set-disabled-resource" method (public) ("name") #f #f 96 18 96 39 ("invalidate-view" "disabled-image" "set-resource" "set-resource~" "name")}
        {Lisp-Entry "draw-tool" method (override) ("surface" "context") #f #f 106 20 106 29 ("draw-image" "1" "2" "pushed" "get-state" "eq?" "if" "offset" "let" "context" "surface")}
        {Lisp-Entry "draw-image" method (protected) ("surface" "context" "h" "v") #f #f 111 21 111 31 ("disabled-image" "image" "view-enabled?" "if" "draw-at" "draw-at~" "v" "h" "context" "surface")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 125 25 125 45 ("Image-Tool-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 134 11 134 17 ()
        {Lisp-Entry "import" import () () #f #f 137 1 137 7 ("jazz.designer")}
        {Lisp-Entry "Image-Tool-Descriptor" class () ((extends . "Layout-View-Descriptor")) #f #f 140 7 140 28 ("Layout-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 143 3 143 7 ("disabled-resource" "resource" "domain" "Portfolio-Domain" "<Portfolio-Domain>" "title:" "portfolio" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 152 20 152 31 ("Image-Resource" "class")}}}}})
"Image-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "image" "Image-View.jazz"} 243479599. jazz
    {Lisp-Entry "jazz.ui.image.Image-View" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui" "jazz.graphic" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Image-View" class (undocumented) ((extends . "View") (implements . "Document")) #f #f 48 20 48 30 ("Image" "new" "position" "0" "Point" "explicit" "Document" "View")
        {Lisp-Entry "portfolio" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 21 ()}
        {Lisp-Entry "resource" property () ((initialize . "#f") (accessors . "explicit")) #f #f 52 12 52 20 ()}
        {Lisp-Entry "moniker" property () ((initialize . "#f") (accessors . "explicit")) #f #f 53 12 53 19 ()}
        {Lisp-Entry "image-position" property () ((initialize . "{Point 0 0}") (accessors . "explicit")) #f #f 54 12 54 26 ()}
        {Lisp-Entry "image-size" property () ((initialize . "#f") (accessors . "explicit")) #f #f 55 12 55 22 ()}
        {Lisp-Entry "fill-mode" property () ((initialize . "'position") (accessors . "explicit")) #f #f 56 12 56 21 ()}
        {Lisp-Entry "image" slot () ((initialize . "(new Image)") (getter . "generate")) #f #f 59 8 59 13 ()}
        {Lisp-Entry "get-image" accessor () () #f #f 59 58 59 66 ()}
        {Lisp-Entry "dragging?" slot () ((initialize . "#f")) #f #f 60 8 60 17 ()}
        {Lisp-Entry "base-position" slot () ((initialize . "#f")) #f #f 61 8 61 21 ()}
        {Lisp-Entry "document-controller" slot () ((initialize . "#f")) #f #f 62 8 62 27 ()}
        {Lisp-Entry "save-content" method (override) ("moniker") #f #f 65 20 65 32 ("moniker")}
        {Lisp-Entry "default-extension" method (override) () #f #f 66 20 66 37 ()}
        {Lisp-Entry "extensions" method (override) () #f #f 67 20 67 30 ()}
        {Lisp-Entry "focus-document" method (override) () #f #f 68 20 68 34 ()}
        {Lisp-Entry "current-history-item" method (override) () #f #f 69 20 69 40 ()}
        {Lisp-Entry "compare-moniker" method (override) ("moniker") #f #f 70 20 70 35 ("moniker")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 73 25 73 38 ("image-view" "rest")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 77 20 77 26 ("nextmethod" "size" "image" "set-size" "set-size~" "rest")}
        {Lisp-Entry "destroy" method (override) () #f #f 82 20 82 27 ("nextmethod" "image" "close" "close~")}
        {Lisp-Entry "install-in-host" method (override) ("host") #f #f 92 20 92 35 ("set-image-size" "set-size" "get-size" "get-size~" "size" "let" "nextmethod" "host")}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 99 20 99 31 ("invalidate-view" "set-image-size" "nextmethod" "size")}
        {Lisp-Entry "host-workspaces" method (override) () #f #f 105 20 105 35 ("image")}
        {Lisp-Entry "get-document-controller" method (override) () #f #f 114 20 114 43 ("new-document-controller" "set!" "document-controller" "unless")}
        {Lisp-Entry "new-document-controller" method (override) () #f #f 120 20 120 43 ("self" "Document-Controller" "new")}
        {Lisp-Entry "install-scroller?" method (override) () #f #f 124 20 124 37 ()}
        {Lisp-Entry "get-moniker" method () () #f #f 128 11 128 22 ("get-document-controller" "get-moniker" "get-moniker~")}
        {Lisp-Entry "set-moniker" method () ("moniker") #f #f 132 11 132 22 ("get-document-controller" "image" "set-moniker" "set-moniker~" "moniker")}
        {Lisp-Entry "load-content" method (override) ("moniker") #f #f 137 20 137 32 ("invalidate-view" "image" "set-moniker" "set-moniker~" "moniker")}
        {Lisp-Entry "verify-reload" method (override) () #f #f 142 20 142 33 ()}
        {Lisp-Entry "reload-moniker" method (override) ("moniker") #f #f 146 20 146 34 ("moniker")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 150 20 150 33 ("get-document-controller" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-modified?" method (override) ("state") #f #f 154 20 154 33 ("get-document-controller" "set-modified?" "set-modified?~" "state")}
        {Lisp-Entry "update-status" method () () #f #f 158 11 158 24 ("get-document-controller" "update-status" "update-status~")}
        {Lisp-Entry "update-moniker-time" method () ("moniker") #f #f 162 11 162 30 ("get-document-controller" "update-moniker-time" "update-moniker-time~" "moniker")}
        {Lisp-Entry "tool-update" method (override) ("tool?") #f #f 166 20 166 31 ("tool?")}
        {Lisp-Entry "console-update" method (override) ("console?") #f #f 170 20 170 34 ("console?")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 179 20 179 24 ("get-bounds" "fill-rect" "fill-rect~" "0.85" "set-alpha" "set-alpha~" "Medium" "Color" "copy-object" "copy-object~" "background" "or" "color" "let" "view-enabled?" "unless" "0" "draw-at" "context" "surface")}
        {Lisp-Entry "draw-at" method (protected virtual) ("surface" "context" "h" "v") #f #f 187 29 187 36 ("draw-image" "v" "h" "context" "surface")}
        {Lisp-Entry "draw-image" method () ("surface" "context" "h" "v") #f #f 191 11 191 21 ("get-bounds" "image" "fill-at" "fill-at~" "v" "h" "context" "surface")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 200 20 200 30 ("acquire-capture" "base-position" "dragging?" "set!" "scroller" "when" "pos")}
        {Lisp-Entry "drag-move" method (override) ("pos") #f #f 207 20 207 29 ("get-v" "get-v~" "get-h" "get-h~" "move-figure" "base-position" "-" "delta" "let" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 213 20 213 27 ("set!" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "get-portfolio" method (public) () #f #f 224 18 224 31 ("image" "get-portfolio" "get-portfolio~")}
        {Lisp-Entry "set-portfolio" method (public) ("portfolio") #f #f 228 18 228 31 ("invalidate-view" "child" "Portfolio" "is?" "if" "image" "set-portfolio" "set-portfolio~" "portfolio")}
        {Lisp-Entry "get-resource" method (public) () #f #f 233 18 233 30 ("image" "get-resource" "get-resource~")}
        {Lisp-Entry "set-resource" method (public) ("name") #f #f 237 18 237 30 ("invalidate-view" "image" "set-resource" "set-resource~" "name")}
        {Lisp-Entry "get-image-position" method (public) () #f #f 242 18 242 36 ("image" "get-position" "get-position~")}
        {Lisp-Entry "set-image-position" method (public) ("pos") #f #f 246 18 246 36 ("invalidate-view" "image" "set-position" "set-position~" "pos")}
        {Lisp-Entry "get-image-size" method (public) () #f #f 251 18 251 32 ("image" "get-size" "get-size~")}
        {Lisp-Entry "set-image-size" method (public) ("size") #f #f 255 18 255 32 ("invalidate-view" "image" "set-size" "set-size~" "size")}
        {Lisp-Entry "get-fill-mode" method (public) () #f #f 260 18 260 31 ("image" "get-fill-mode" "get-fill-mode~")}
        {Lisp-Entry "set-fill-mode" method (public) ("mode") #f #f 264 18 264 31 ("invalidate-view" "image" "set-fill-mode" "set-fill-mode~" "mode")}
        {Lisp-Entry "set-handle" method (public) ("handle") #f #f 269 18 269 28 ("invalidate-view" "image" "set-handle" "set-handle~" "handle")}
        {Lisp-Entry "cursor-update" method (override) ("pos") #f #f 279 20 279 33 (":arrow" ":finger" "scroller" "if" "set-cursor" "pos")}
        {Lisp-Entry "save-session" method (override) () #f #f 288 20 288 32 ("Opened-Windows" "properties" "push-property" "push-property~" "get-size" "get-size~" "size:" "get-position" "get-position~" "position:" "get-moniker" "moniker:" "external-name" "list" "info" "get-host" "host" "let*")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 304 25 304 45 ("Image-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 313 11 313 17 ()
        {Lisp-Entry "import" import () () #f #f 316 1 316 7 ("jazz.designer")}
        {Lisp-Entry "Image-View-Descriptor" class () ((extends . "View-Descriptor")) #f #f 319 7 319 28 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 322 3 322 7 ("tile" "stretch" "fit" "fill" "center" "position" "choices:" "Enumeration-Domain" "<Enumeration-Domain>" "fill-mode" "image-size" "image-position" "moniker" "String-Domain" "<String-Domain>" "resource" "domain" "Portfolio-Domain" "<Portfolio-Domain>" "title:" "portfolio" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 336 20 336 31 ("Image-Resource" "class")}}}}})
"Indicator"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Indicator.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Indicator" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Indicator" class () ((extends . "Object")) #f #f 40 7 40 16 ("Object")
        {Lisp-Entry "color" slot () () #f #f 43 8 43 13 ()}
        {Lisp-Entry "active-text" slot () ((initialize . "#f")) #f #f 44 8 44 19 ()}
        {Lisp-Entry "active-position" slot () ((initialize . "#f")) #f #f 45 8 45 23 ()}
        {Lisp-Entry "initialize" method (override) ("color") #f #f 48 20 48 30 ("self" "color~self" "set!" "nextmethod" "color")}
        {Lisp-Entry "edit" method (public) ("text" "position" "(ensure-displayed?: ensure-displayed? #t)" "(select?: select? #f)") #f #f 58 18 58 22 ("unfill" "unfill~" "uninstall-indicator" "set-caret" "set-caret~" "get-host" "get-host~" "focus-host" "focus-host~" "reset-tooltip" "reset-tooltip~" "active-position" "active-text" "set!" "ensure-cell-displayed" "ensure-cell-displayed~" "when" "color" "get-model" "get-model~" "fill" "fill~" "install-indicator" "define" "select?" "select?:" "ensure-displayed?" "ensure-displayed?:" "position" "text")}
        {Lisp-Entry "reset" method (public) () #f #f 82 18 82 23 ("edit")}}}})
"Info-Style"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Info-Style.jazz"} 242356019. jazz
    {Lisp-Entry "jazz.ui.text.Info-Style" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.library" "jazz.graphic")}
      {Lisp-Entry "Info-Style" class () ((extends . "Text-Style")) #f #f 46 7 46 17 ("attributes" "Text-Style")
        {Lisp-Entry "what" definition () ((initialize . "#f")) #f #f 50 5 50 9 ()}
        {Lisp-Entry "get-what" accessor () () #f #f 50 5 50 9 ()}
        {Lisp-Entry "set-what" accessor () () #f #f 50 5 50 9 ()}
        {Lisp-Entry "get-width" method (override) () #f #f 59 20 59 29 ("16")}
        {Lisp-Entry "run-width" method (override) ("run") #f #f 64 20 64 29 ("16" "run")}
        {Lisp-Entry "propagate?" method (override) () #f #f 73 20 73 30 ()}
        {Lisp-Entry "scan" method (override) ("h" "start" "end" "tabs" "run" "proc") #f #f 82 20 82 24 ("default-scan" "proc" "run" "tabs" "end" "start" "h")}
        {Lisp-Entry "wrap" method (override) ("context" "margin" "h" "v" "width" "tabs" "place" "break" "run") #f #f 91 20 91 24 ("+" "get-width" "info-value" "->string" "get-font" "text-width" "text-width~" "printing?:" "getf" "if" "get-context-width" "define" "run" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "info-icon" method () () #f #f 106 11 106 20 ("time" "date" "count" "no" "Image-Resource" "filename" "get-what" "case")}
        {Lisp-Entry "info-value" method () ("context") #f #f 115 11 115 21 ("print-time:" "time" "print-date:" "date" "page-count:" "count" "page-no:" "1" "+" "no" "filename:" "getf" "filename" "get-what" "case" "context")}
        {Lisp-Entry "draw-style" method (override) ("surface" "<Surface>" "context" "string" "<Sequence>" "h" "<fx>" "v" "<fx>" "line-height" "<fx>" "tabs" "left" "enabled?") #f #f 129 20 129 30 ("2" "+" "-" "get-application" "get-images-portfolio" "get-images-portfolio~" "draw-image" "draw-image~" "info-icon" "icon" "16" "justify-element" "top" "get-width" "width" "let" "info-value" "->string" "nextmethod" "printing?:" "getf" "if" "enabled?" "left" "tabs" "line-height" "v" "fx" "<fx>" "h" "Sequence" "<Sequence>" "string" "context" "Surface" "<Surface>" "surface")}}}})
"Interface-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Interface-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.preference.Interface-Preferences" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Interface-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 44 20 44 41 ("Preferences")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("print" "Print-Preferences" "<Print-Preferences>" "tree" "Tree-Preferences" "<Tree-Preferences>" "fonts" "name:" "Fonts-Preferences" "<Fonts-Preferences>" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 59 25 59 45 ("Interface-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 68 11 68 17 ()
        {Lisp-Entry "import" import () () #f #f 71 1 71 7 ("jazz.designer")}
        {Lisp-Entry "Interface-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 74 7 74 39 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 77 3 77 7 ("categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Internal-Frame-Host"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "hosting" "Internal-Frame-Host.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.ui.hosting.Internal-Frame-Host" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.workspace" "jazz.ui.window" "jazz.ui.view" "jazz.ui.resizer" "jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Internal-Frame-Host" class (undocumented) ((extends . "Frame-Host")) #f #f 53 20 53 39 ("Frame-Host")
        {Lisp-Entry "dragging?" slot () ((initialize . "#f")) #f #f 56 8 56 17 ()}
        {Lisp-Entry "current-part" slot () () #f #f 57 8 57 20 ()}
        {Lisp-Entry "start-mouse" slot () () #f #f 58 8 58 19 ()}
        {Lisp-Entry "start-position" slot () () #f #f 59 8 59 22 ()}
        {Lisp-Entry "start-size" slot () () #f #f 60 8 60 18 ()}
        {Lisp-Entry "preserved-position" slot () ((initialize . "#f") (getter . "generate")) #f #f 61 8 61 26 ()}
        {Lisp-Entry "get-preserved-position" accessor () () #f #f 61 49 61 57 ()}
        {Lisp-Entry "preserved-size" slot () ((initialize . "#f") (getter . "generate")) #f #f 62 8 62 22 ()}
        {Lisp-Entry "get-preserved-size" accessor () () #f #f 62 49 62 57 ()}
        {Lisp-Entry "workspace" slot () ((initialize . "#f") (accessors . "generate")) #f #f 63 8 63 17 ()}
        {Lisp-Entry "get-workspace" accessor () () #f #f 63 52 63 60 ()}
        {Lisp-Entry "set-workspace" accessor () () #f #f 63 52 63 60 ()}
        {Lisp-Entry "workspace-stages" slot () ((initialize . "'()") (accessors . "generate")) #f #f 64 8 64 24 ()}
        {Lisp-Entry "get-workspace-stages" accessor () () #f #f 64 52 64 60 ()}
        {Lisp-Entry "set-workspace-stages" accessor () () #f #f 64 52 64 60 ()}
        {Lisp-Entry "maximized?" slot () ((initialize . "#f")) #f #f 65 8 65 18 ()}
        {Lisp-Entry "form" form () () #f #f 68 3 68 7 ("on-close" "close" "on-maximize" ":form" "Event-Handler" "action-handler:" "french:" "english:" "Locales" "tooltip-text:" "tooltip?:" "type:" "maximize" "name:" "Frame-Button" "<Frame-Button>" "Medium" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "get-stage" method () () #f #f 79 11 79 20 ("parent")}
        {Lisp-Entry "get-maximized?" method (public) () #f #f 83 18 83 32 ("maximized?")}
        {Lisp-Entry "set-maximized?" method (public) ("value") #f #f 87 18 87 32 ("restore" "maximize" "if" "value")}
        {Lisp-Entry "adjust-title" method (override) () #f #f 98 20 98 32 ("invalidate-caption")}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 107 20 107 31 ("4" "Rect" "insets:" "invalidate-border" "invalidate-caption" "nextmethod" "size")}
        {Lisp-Entry "on-maximize" method (protected virtual) ("evt") #f #f 113 29 113 40 ("get-stage" "maximize" "maximize~" "evt")}
        {Lisp-Entry "on-close" method (protected virtual) ("evt") #f #f 117 29 117 37 ("close-host" "evt")}
        {Lisp-Entry "activate-frame" method (override) () #f #f 126 20 126 34 ("get-title" "get-stage" "get-maximized?" "get-maximized?~" "and" "get-toplevel" "set-caption" "set-caption~" "nextmethod")}
        {Lisp-Entry "deactivate-frame" method (override) () #f #f 131 20 131 36 ("acquire-focus" "acquire-focus~" "stage-empty-activate" "stage-empty-activate~" "get-player" "get-player~" "get-views" "get-views~" "null?" "and" "when" "get-stage" "stage" "let" "nextmethod")}
        {Lisp-Entry "close-host" method (override) ("(confirm?: confirm? #t)") #f #f 144 20 144 30 ("close" "close-with-confirm" "if" "confirm?" "confirm?:")}
        {Lisp-Entry "destroy" method (override) () #f #f 155 20 155 27 ("focus-host" "focus-host~" "activate-frame" "activate-frame~" "deactivate-frame" "nextmethod" "new-active" "active-frame" "self" "was-active?" "player" "get-player" "get-player~" "eq?" "and" "when" "second-frame" "frame" "let" "determine-new-active" "define")}
        {Lisp-Entry "set-title" method (override) ("value") #f #f 176 20 176 29 ("get-toplevel" "set-caption" "set-caption~" "get-stage" "get-maximized?" "get-maximized?~" "active-frame" "self" "eq?" "and" "when" "nextmethod" "value")}
        {Lisp-Entry "show" method (override) () #f #f 187 20 187 24 ("maximize/restore" "nextmethod")}
        {Lisp-Entry "maximize/restore" method (protected) () #f #f 192 21 192 37 ("restore~" "restore" "else" "guest" "maximize~" "get-size" "get-size~" "maximize-bounds" "maximize" "get-maximized?" "get-maximized?~" "cond" "get-stage" "stage" "let")}
        {Lisp-Entry "select-workspace" method (public) () #f #f 208 18 208 34 ("restore-focus?:" "apply-preferences" "apply-preferences~" "car" "find-workspace" "memq?" "not" "not-null?" "and" "effective-host-workspaces" "effective-host-workspaces~" "workspaces" "get-name" "get-name~" "current" "get-workspace-preferences" "pref" "let" "guest" "when")}
        {Lisp-Entry "ensure-displayed" method (public) () #f #f 220 18 220 34 ("set-position" "set-size" "8" "padding:" "fit-within" "new-size" "new-position" "receive" "get-rect" "rect" "parent" "get-size" "get-size~" "outer" "let")}
        {Lisp-Entry "remember-workspace-stage" method (public) () #f #f 228 18 228 42 ("get-active-stages" "difference" "get-stage" "cons" "workspace-stages" "set!")}
        {Lisp-Entry "get-effective-position" method (override) () #f #f 237 20 237 42 ("get-position" "get-preserved-position" "get-maximized?" "if")}
        {Lisp-Entry "get-effective-size" method (override) () #f #f 243 20 243 38 ("get-size" "get-preserved-size" "get-maximized?" "if")}
        {Lisp-Entry "dispatch-mouse-copy" method () () #f #f 254 11 254 30 ("mouse-position" "mouse-position~" "mouse-copy" "mouse-copy~" "and" "when" "get-focus" "dest" "mouse-view" "view" "let")}
        {Lisp-Entry "caption-rect" method () () #f #f 266 11 266 23 ("20" "+" "get-width" "-" "Rect" "new" "4" "0" "maximized?" "if" "border" "let")}
        {Lisp-Entry "title-rect" method (protected) () #f #f 271 21 271 31 ("20" "+" "40" "get-width" "-" "Rect" "new" "4" "0" "maximized?" "if" "border" "let")}
        {Lisp-Entry "maximize-rect" method (protected) ("top" "right") #f #f 276 21 276 34 ("17" "21" "3" "+" "37" "-" "Rect" "new" "right" "top")}
        {Lisp-Entry "close-rect" method (protected) ("top" "right") #f #f 280 21 280 31 ("17" "3" "+" "19" "-" "Rect" "new" "right" "top")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 289 20 289 35 ()}
        {Lisp-Entry "mouse-activate" method (override) () #f #f 293 20 293 34 ("nextmethod" "bring-to-front")}
        {Lisp-Entry "activate-focus" method (override) () #f #f 298 20 298 34 ("set-current-stage" "in-player?" "in-player?~" "when" "get-stage" "stage" "let" "invalidate-caption" "nextmethod")}
        {Lisp-Entry "deactivate-focus" method (override) () #f #f 306 20 306 36 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "maximize" method (override) () #f #f 316 20 316 28 ("update-buttons" "get-size" "preserved-size" "get-position" "preserved-position" "set!" "maximized?" "unless")}
        {Lisp-Entry "maximize-bounds" method (public) ("size") #f #f 324 18 324 33 ("invalidate-view" "layout-view" "set-size" "0" "Point" "set-position" "size")}
        {Lisp-Entry "restore" method (override) () #f #f 331 20 331 27 ("invalidate-view" "layout-view" "update-buttons" "maximized?" "set!" "set-size" "preserved-size" "set-position" "preserved-position" "when")}
        {Lisp-Entry "layout" method (override) () #f #f 349 20 349 26 ("get-height" "get-width" "-" "Dimension" "set-size" "set-size~" "+" "Point" "new" "set-position" "set-position~" "content" "when" "layout-buttons" "rect-height" "caption-height" "caption-rect" "0" "4" "if" "border" "caption-visible?" "caption?" "let*")}
        {Lisp-Entry "layout-buttons" method (protected virtual) () #f #f 360 29 360 43 ("close-rect" "close" "maximize-rect" "maximize" "locate" "set-rect" "set-rect~" "get-right" "get-right~" "-" "right" "get-bounds" "bounds" "top" "buttons-border" "border" "let*")}
        {Lisp-Entry "buttons-border" method (protected virtual) () #f #f 369 29 369 43 ("0" "4" "caption-visible?" "if")}
        {Lisp-Entry "invalidate-caption" method (override) () #f #f 378 20 378 38 ("caption-rect" "invalidate-rect" "maximized?" "unless")}
        {Lisp-Entry "update-buttons" method (protected virtual) () #f #f 383 29 383 43 ("close" "maximize" "locate" "set-visible?" "set-visible?~" "caption-visible?" "visible?" "let")}
        {Lisp-Entry "caption-icon" method () () #f #f 394 11 394 23 ("guest" "guest-icon" "guest-icon~")}
        {Lisp-Entry "caption-title" method () () #f #f 398 11 398 24 ("get-title")}
        {Lisp-Entry "caption-font" method () () #f #f 402 11 402 23 ("Caption" "Font")}
        {Lisp-Entry "caption-focused?" method () () #f #f 406 11 406 27 ("get-focused-host" "self" "eq?")}
        {Lisp-Entry "caption-visible?" method () () #f #f 410 11 410 27 ("maximized?" "not")}
        {Lisp-Entry "container-focusable?" method (override) () #f #f 419 20 419 40 ("get-visible?")}
        {Lisp-Entry "ensure-container-focusable" method (override) () #f #f 423 20 423 46 ("remember-workspace-stage" "bring-to-front" "set-visible?" "select-workspace")}
        {Lisp-Entry "cursor-update" method (override) ("pos") #f #f 435 20 435 33 ("get-resize-cursor" "full?:" "get-size" "find-resize-part" "maximized?" "and" "part" "let" ":arrow" "set-cursor" "resizeable?" "not" "if" "pos")}
        {Lisp-Entry "moveable?" method (protected virtual) () #f #f 449 29 449 38 ()}
        {Lisp-Entry "resizeable?" method (protected virtual) () #f #f 453 29 453 40 ()}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 457 20 457 30 ("acquire-capture" "start-size" "get-position" "start-position" "to-desktop" "start-mouse" "resizeable?" "current-part" "dragging?" "set!" "or" "full?:" "get-size" "find-resize-part" "part" "moveable?" "when" "send-to-back" "control-down?" "and" "if" "caption-rect" "in-rect?" "in-caption?" "let" "pos")}
        {Lisp-Entry "drag-move" method (override) ("pos") #f #f 472 20 472 29 ("set-size" "set-position" "get-height" "get-height~" "get-width" "get-width~" "max" "effective-size" "min" "Point" "effective-position" "new-size" "Dimension" "new" "start-size" "max-position" "dheight" "dwidth" "lambda" "resize-client" "player" "update-window" "update-window~" "point->distance" "get-parent" "scroll-view" "scroll-view~" "set-position-noupdate" "get-rect" "rect" "get-position" "nu-" "delta-position" "start-position" "nu+" "new-position" "let" "current-part" "not" "if" "get-v" "get-v~" "dv" "get-h" "get-h~" "dh" "start-mouse" "point-" "delta" "to-desktop" "desktop-pos" "guest" "host-minimal-size" "host-minimal-size~" "minimal" "let*" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 502 20 502 27 ("set!" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 508 20 508 32 ("toggle-maximized" "caption-rect" "in-rect?" "close-host" "in-close-rect?" "cond" "pos")}
        {Lisp-Entry "in-close-rect?" method () ("pos") #f #f 517 15 517 29 ("22" "6" "Rect" "in-rect?" "pos")}
        {Lisp-Entry "in-close-rect?" method () ("pos") #f #f 520 15 520 29 ("pos")}
        {Lisp-Entry "toggle-maximized" method (protected virtual) () #f #f 524 29 524 45 ("get-stage" "toggle-maximized" "toggle-maximized~")}
        {Lisp-Entry "Active-Colors" definition () () #f #f 533 14 533 27 ("255" "113" "28" "227" "blue:" "84" "green:" "0" "red:" "Color" "list")}
        {Lisp-Entry "Inactive-Colors" definition () () #f #f 536 14 536 29 ("235" "185" "157" "223" "blue:" "150" "green:" "122" "red:" "Color" "list")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 540 20 540 24 ("draw-caption" "caption-visible?" "rectangle" "edges:" "outer:" "raised" "inner:" "draw-edge" "draw-edge~" "get-bounds" "bounds" "let" "maximized?" "not" "when" "context" "surface")}
        {Lisp-Entry "draw-caption" method () ("surface" "context") #f #f 548 11 548 23 ("draw-text" "draw-text~" "lambda" "title-rect" "with-clip" "with-clip~" "title-offset" "White" "set-text-color" "set-text-color~" "set-font" "set-font~" "get-v" "get-v~" "get-top" "get-top~" "get-h" "get-h~" "get-left" "get-left~" "+" "get-application" "get-images-portfolio" "get-images-portfolio~" "draw-image" "draw-image~" "icon-offset" "offset" "when" "vertical" "direction:" "0" "list" "gradient-fill" "gradient-fill~" "cycle-debug-color!" "fill-rect" "fill-rect~" "debug-paint?" "24" "3" "-" "line" "line~" "1" "set-line-width" "set-line-width~" "Light" "Color" "set-color" "set-color~" "get-height" "height" "get-width" "width" "second" "end" "first" "start" "Inactive-Colors" "Active-Colors" "if" "colors" "caption-focused?" "focused?" "caption-font" "font" "caption-title" "localize" "title" "caption-icon" "icon" "let*" "caption-rect" "rect" "let" "context" "surface")}
        {Lisp-Entry "icon-offset" method (protected virtual) () #f #f 577 29 577 40 ("2" "Point")}
        {Lisp-Entry "title-offset" method (protected virtual) () #f #f 581 29 581 41 ("3" "22" "Point")}}}})
"Item"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Item.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.menu.Item" module (protected) () #f #f 37 18 37 35 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Item" class () ((extends . "View")) #f #f 43 7 43 11 ("0" "View")
        {Lisp-Entry "prefix-width" slot () ((initialize . "0") (setter . "generate")) #f #f 46 8 46 20 ()}
        {Lisp-Entry "set-prefix-width" accessor () () #f #f 46 44 46 52 ()}
        {Lisp-Entry "icon-width" slot () ((initialize . "0") (setter . "generate")) #f #f 47 8 47 18 ()}
        {Lisp-Entry "set-icon-width" accessor () () #f #f 47 44 47 52 ()}
        {Lisp-Entry "body-width" slot () ((initialize . "0") (setter . "generate")) #f #f 48 8 48 18 ()}
        {Lisp-Entry "set-body-width" accessor () () #f #f 48 44 48 52 ()}
        {Lisp-Entry "shortcut-width" slot () ((initialize . "0") (setter . "generate")) #f #f 49 8 49 22 ()}
        {Lisp-Entry "set-shortcut-width" accessor () () #f #f 49 44 49 52 ()}
        {Lisp-Entry "arrow-width" slot () ((initialize . "0") (setter . "generate")) #f #f 50 8 50 19 ()}
        {Lisp-Entry "set-arrow-width" accessor () () #f #f 50 44 50 52 ()}
        {Lisp-Entry "actionable-reachable?" method (override) () #f #f 58 20 58 41 ("actionable-reachable?" "actionable-reachable?~" "get-item" "get-item~" "owner-item" "Menubar" "is?" "or" "get-parent" "menu" "let" "get-visible?" "and")}
        {Lisp-Entry "get-menubar" method () () #f #f 71 11 71 22 ("Menubar" "find-ascendant")}
        {Lisp-Entry "preferred-prefix-width" method (public virtual) () #f #f 80 26 80 48 ("0")}
        {Lisp-Entry "preferred-icon-width" method (public virtual) () #f #f 84 26 84 46 ("0")}
        {Lisp-Entry "preferred-body-width" method (public virtual) () #f #f 88 26 88 46 ("0")}
        {Lisp-Entry "preferred-shortcut-width" method (public virtual) () #f #f 92 26 92 50 ("0")}
        {Lisp-Entry "preferred-arrow-width" method (public virtual) () #f #f 96 26 96 47 ("0")}
        {Lisp-Entry "layout-menu" method (protected) () #f #f 100 21 100 32 ("layout-menu" "layout-menu~" "Menu" "parent" "is?" "when")}
        {Lisp-Entry "navigable?" method (protected) () #f #f 110 21 110 31 ("view-enabled?" "Label-Item" "self" "is?" "and")}
        {Lisp-Entry "mouse-enter" method (override) () #f #f 120 20 120 31 ("invalidate-view" "invalidate-view~" "when" "popup-initiator" "initiator" "let" "self" "navigable?" "if" "parent" "set-highlighted" "set-highlighted~")}
        {Lisp-Entry "mouse-leave" method (override) () #f #f 127 20 127 31 ("parent" "set-highlighted" "set-highlighted~" "popped?" "unless")}
        {Lisp-Entry "popped?" method (protected) () #f #f 137 21 137 28 ("self" "popup-initiator" "popup-initiator~" "eq?" "and" "parent" "get-popped" "get-popped~" "popped" "let")}
        {Lisp-Entry "close-other-popups" method (protected) () #f #f 142 21 142 39 ("list" "exclude:" "close-popups" "popped?" "if" "get-player" "get-player~" "self" "popup-initiator" "popup-initiator~" "eq?" "and" "when" "parent" "get-popped" "get-popped~" "popped" "let" "popped-tool" "define")}}}})
"Jazz-Skin"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Jazz-Skin.jazz"} 232236596. jazz
    {Lisp-Entry "jazz.ui.skin.Jazz-Skin" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Jazz-Skin" class () ((extends . "Default-Skin")) #f #f 45 7 45 16 ("Default-Skin")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("statusbar" "menubar" "toolbar" "stage" "White" "frame-color:" "inactive-background:" "active-background:" "docked" "Medium" "splitter/document" "splitter" "tool" "109" "129" "133" "disabled-text-color:" "Orange" "Light-Orange" "vertical" "highlight:" "190" "146" "112" "218" "blue:" "192" "green:" "173" "red:" "Color" "horizontal" "Gradient" "background:" "menu" "name:" "!" "<!>" "title:" "install" "<install>")}}}})
"Keyboard-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Keyboard-Event.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.event.Keyboard-Event" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Keyboard-Event" class () ((extends . "Event")) #f #f 43 7 43 21 ("Event")
        {Lisp-Entry "key" slot () ((getter . "generate")) #f #f 46 8 46 11 ()}
        {Lisp-Entry "get-key" accessor () () #f #f 46 19 46 27 ()}
        {Lisp-Entry "initialize" method (override) ("kind" "sender" "k") #f #f 49 20 49 30 ("key" "set!" "nextmethod" "k" "sender" "kind")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 54 20 54 25 ("key" "kind" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Label-Item"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Label-Item.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.menu.Label-Item" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.skin" "jazz.ui" "jazz.system" "jazz.locale" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Label-Item" class () ((extends . "Item")) #f #f 49 7 49 17 ("explicit" "Item")
        {Lisp-Entry "icon" property () ((initialize . "#f") (accessors . "explicit")) #f #f 52 12 52 16 ()}
        {Lisp-Entry "disabled-icon" property () ((initialize . "#f") (accessors . "explicit")) #f #f 53 12 53 25 ()}
        {Lisp-Entry "shortcut" property () ((initialize . "#f") (accessors . "explicit")) #f #f 54 12 54 20 ()}
        {Lisp-Entry "default?" property () ((initialize . "#f") (accessors . "generate")) #f #f 55 12 55 20 ()}
        {Lisp-Entry "get-default?" accessor () () #f #f 55 50 55 58 ()}
        {Lisp-Entry "set-default?" accessor () () #f #f 55 50 55 58 ()}
        {Lisp-Entry "content" property () ((initialize . "#f") (accessors . "explicit")) #f #f 56 12 56 19 ()}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 59 20 59 35 ()}
        {Lisp-Entry "component-alias" method (override) ("name") #f #f 68 20 68 35 ("nextmethod" "else" "content" "case" "name")}
        {Lisp-Entry "shortcut-update" method (override) ("action-item") #f #f 79 20 79 35 ("get-alternate-shortcut" "get-alternate-shortcut~" "get-shortcut" "get-shortcut~" "or" "set-shortcut" "action-item")}
        {Lisp-Entry "add-child" method (override) ("child") #f #f 89 20 89 29 ("set-content" "child")}
        {Lisp-Entry "get-content" method (public) () #f #f 93 18 93 29 ("content")}
        {Lisp-Entry "set-content" method (public) ("menu") #f #f 97 18 97 29 ("self" "set-item" "set-item~" "content" "set!" "menu")}
        {Lisp-Entry "get-title" method (override) () #f #f 107 20 107 29 ("get-title" "get-title~" "content" "when" "title" "or")}
        {Lisp-Entry "get-icon" method (public) () #f #f 113 18 113 26 ("icon")}
        {Lisp-Entry "set-icon" method (public) ("icn") #f #f 117 18 117 26 ("layout-menu" "icon" "set!" "icn")}
        {Lisp-Entry "get-disabled-icon" method (public) () #f #f 122 18 122 35 ("disabled-icon")}
        {Lisp-Entry "set-disabled-icon" method (public) ("icn") #f #f 126 18 126 35 ("layout-menu" "disabled-icon" "set!" "icn")}
        {Lisp-Entry "get-shortcut" method (public) () #f #f 131 18 131 30 ("shortcut")}
        {Lisp-Entry "set-shortcut" method (public) ("shc") #f #f 135 18 135 30 ("layout-menu" "shortcut" "set!" "shc")}
        {Lisp-Entry "default-size" method (override) () #f #f 145 20 145 32 ("17" "100" "Dimension")}
        {Lisp-Entry "preferred-icon-width" method (override) () #f #f 149 20 149 40 ("0" "16" "+" "icon" "if" "4" "left" "let")}
        {Lisp-Entry "preferred-body-width" method (override) () #f #f 154 20 154 40 ("get-width" "get-width~" "+" "10" "6" "menubar-label?" "if" "left" "text-extent" "text-extent~" "extent" "get-title" "localize" "title" "effective-font" "font" "let*")}
        {Lisp-Entry "preferred-shortcut-width" method (override) () #f #f 162 20 162 44 ("get-width" "get-width~" "+" "12" "right" "6" "left" "present-shortcut" "present-shortcut~" "text-extent" "text-extent~" "extent" "effective-font" "font" "let*" "0" "shortcut" "not" "if")}
        {Lisp-Entry "preferred-arrow-width" method (override) () #f #f 172 20 172 41 ("0" "10" "menubar-label?" "not" "content" "and" "if")}
        {Lisp-Entry "preferred-height" method (override) () #f #f 178 20 178 36 ("4" "+" "font-height" "font-height~" "height" "get-title" "localize" "title" "effective-font" "font" "let*")}
        {Lisp-Entry "Label-Font" definition () () #f #f 190 14 190 24 ("Label" "Font")}
        {Lisp-Entry "Default-Label-Font" definition () () #f #f 193 14 193 32 ("bold?:" "Label" "Font")}
        {Lisp-Entry "get-label-font" definition () () #f #f 197 15 197 29 ("Label-Font")}
        {Lisp-Entry "get-default-label-font" definition () () #f #f 200 15 200 37 ("Default-Label-Font")}
        {Lisp-Entry "effective-font" method (override) () #f #f 204 20 204 34 ("get-label-font" "get-default-label-font" "default?" "if")}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 210 20 210 35 ("get-bounds" "fill-background" "fill-background~" "menubar" "find-look" "get-highlight" "get-highlight~" "highlight" "let" "item-selected?" "when" "context" "surface")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 217 20 217 24 ("draw-arrow" "draw-shortcut" "draw-body" "draw-icon" "draw-prefix" "draw-highlight" "context" "surface")}
        {Lisp-Entry "draw-highlight" method () ("surface") #f #f 226 11 226 25 ("Focused-Selection" "Color" "or" "fill-background" "fill-background~" "get-look" "get-highlight" "get-highlight~" "highlight" "rectangle" "edges:" "sunken" "outer:" "raised" "highlight-flag" "inner:" "draw-edge" "draw-edge~" "menubar-label?" "if" "get-bounds" "bounds" "let" "item-selected?" "when" "surface")}
        {Lisp-Entry "draw-prefix" method (protected virtual) ("surface" "context") #f #f 235 29 235 40 ("context" "surface")}
        {Lisp-Entry "draw-icon" method () ("surface" "context") #f #f 239 11 239 20 ("0" "draw-image" "draw-image~" "default-disabled-resource" "or" "disabled-icon" "let" "view-enabled?" "not" "if" "get-images-portfolio" "get-images-portfolio~" "portfolio" "9" "prefix-width" "+" "left" "get-application" "appl" "let*" "icon" "when" "context" "surface")}
        {Lisp-Entry "draw-body" method () ("surface") #f #f 250 11 250 20 ("text-enabled?" "draw-text" "draw-text~" "effective-font" "set-font" "set-font~" "text-color" "set-text-color" "set-text-color~" "2" "get-height" "quotient" "-" "v" "icon-width" "prefix-width" "+" "h" "1" "0" "top" "10" "6" "menubar-label?" "if" "left" "get-font-height" "get-font-height~" "height" "let*" "when" "get-title" "localize" "title" "let" "surface")}
        {Lisp-Entry "draw-shortcut" method () ("surface") #f #f 263 11 263 24 ("text-enabled?" "draw-text" "draw-text~" "2" "get-height" "quotient" "-" "v" "body-width" "icon-width" "prefix-width" "+" "h" "1" "top" "6" "left" "get-font-height" "get-font-height~" "height" "present-shortcut" "present-shortcut~" "text" "let*" "shortcut" "when" "surface")}
        {Lisp-Entry "draw-arrow" method () ("surface") #f #f 274 11 274 21 ("right" "4" "5" "10" "-" "draw-arrow-tip" "draw-arrow-tip~" "tip-color" "set-color" "set-color~" "get-width" "width" "let" "menubar-label?" "not" "content" "and" "when" "surface")}
        {Lisp-Entry "item-selected?" method () () #f #f 281 11 281 25 ("self" "parent" "get-highlighted" "get-highlighted~" "eq?" "surrogate" "not" "and")}
        {Lisp-Entry "menubar-label?" method () () #f #f 286 11 286 25 ("Menubar" "parent" "is?")}
        {Lisp-Entry "in-menubar?" method () () #f #f 290 11 290 22 ("Context-Menu" "parent" "is-not?")}
        {Lisp-Entry "highlight-flag" method () () #f #f 294 11 294 25 ("parent" "get-popped" "get-popped~" "eq?" "content" "and")}
        {Lisp-Entry "tip-color" method () () #f #f 298 11 298 20 ("Black" "White" "Color" "item-selected?" "if")}
        {Lisp-Entry "text-enabled?" method () () #f #f 302 11 302 24 ("item-selected?" "view-enabled?" "or")}
        {Lisp-Entry "text-color" method () () #f #f 306 11 306 21 ("Black" "get-text-color" "get-text-color~" "else" "White" "get-selected-text-color" "get-selected-text-color~" "menubar-label?" "item-selected?" "and" "Dark" "Color" "get-disabled-text-color" "get-disabled-text-color~" "or" "view-enabled?" "not" "cond" "get-look" "look" "let")}
        {Lisp-Entry "get-look" method (override) () #f #f 318 20 318 28 ("menu" "find-look")}
        {Lisp-Entry "mouse-enter" method (override) () #f #f 327 20 327 31 ("popup-content" "popped?" "close-other-popups" "if" "content" "popup-initiator" "popup-initiator~" "invalidate-view" "invalidate-view~" "track-hovering" "parent" "get-popped" "get-popped~" "popped" "let" "menubar-label?" "unless" "navigable?" "when" "nextmethod")}
        {Lisp-Entry "mouse-leave" method (override) () #f #f 344 20 344 31 ("cancel-hovering" "menubar-label?" "not" "when" "nextmethod")}
        {Lisp-Entry "mouse-hover" method (override) ("pos") #f #f 350 20 350 31 ("popup-content" "surrogate" "popped?" "not" "content" "and" "when" "close-other-popups" "pos")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 356 20 356 30 ("popup-content" "neq?" "not" "or" "content" "and" "push-focus" "when" "list" "if" "exclude:" "close-popups" "menubar-label?" "menubar?" "parent" "get-popped" "get-popped~" "popped" "let" "pos")}
        {Lisp-Entry "mouse-up" method (override) ("pos") #f #f 366 20 366 28 ("process-action" "view-enabled?" "pop-all-focuses" "all?:" "player" "close-popups" "close-popups~" "content" "not" "get-mouse-in" "self" "eq?" "and" "when" "pos")}
        {Lisp-Entry "popup-content" method () () #f #f 379 11 379 24 ("push-focus" "invalidate-view" "parent" "set-popped" "set-popped~" "3" "get-width" "get-width~" "-" "get-height" "0" "menubar-label?" "if" "get-size" "size" "let*" "clear-highlighted" "clear-highlighted~" "get-children" "get-children~" "when" "update" "update~" "get-content" "let" "-2" "2" "Point" "new" "alternate-position:" "detach-root" "close-behavior:" "3." "fade-speed:" "Menu-Transient" "class:" "popup" "position" "menu" "popup-menu" "define")}
        {Lisp-Entry "close-popups" method (override) ("(event: event #f)" "(all?: all? #f)" "(exclude: exclude #f)") #f #f 395 20 395 32 ("invalidate-view" "nextmethod" "double-click" "mouse-down" "memq?" "unless" "exclude" "exclude:" "all?" "all?:" "event" "event:")}
        {Lisp-Entry "popup-destroy" method (override) ("popup") #f #f 401 20 401 33 ("parent" "set-popped" "set-popped~" "popup")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 410 25 410 45 ("Label-Item-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 419 11 419 17 ()
        {Lisp-Entry "import" import () () #f #f 422 1 422 7 ("jazz.designer")}
        {Lisp-Entry "Label-Item-Descriptor" class () ((extends . "View-Descriptor")) #f #f 425 7 425 28 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 428 3 428 7 ("content" "default?" "shortcut" "disabled-icon" "title:" "icon" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Label-Tool"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Label-Tool.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Label-Tool" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Label-Tool" class () ((extends . "Tool-Button")) #f #f 46 7 46 17 ("Black" "Color" "explicit" "center" "Tool-Button")
        {Lisp-Entry "justification" property () ((initialize . "'center") (accessors . "explicit")) #f #f 49 12 49 25 ()}
        {Lisp-Entry "color" property () ((initialize . "{Color Black}") (accessors . "explicit")) #f #f 50 12 50 17 ()}
        {Lisp-Entry "default-size" method (override) () #f #f 53 20 53 32 ("20" "100" "Dimension")}
        {Lisp-Entry "get-justification" method (public) () #f #f 62 18 62 35 ("justification")}
        {Lisp-Entry "set-justification" method (public) ("value") #f #f 66 18 66 35 ("invalidate-view" "justification" "set!" "value")}
        {Lisp-Entry "get-color" method (public) () #f #f 71 18 71 27 ("color")}
        {Lisp-Entry "set-color" method (public) ("value") #f #f 75 18 75 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "draw-tool" method (override) ("surface" "context") #f #f 85 20 85 29 ("view-enabled?" "get-v" "get-v~" "get-h" "get-h~" "+" "draw-text" "draw-text~" "color" "set-text-color" "set-text-color~" "center" "justification" "list" "get-size" "get-text-extent" "get-text-extent~" "lambda" "justify-lazy" "pos" "0" "1" "pushed" "get-state" "eq?" "if" "offset" "localize" "title" "let" "context" "surface")}}}})
"Label-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Label-View.jazz"} 240884279. jazz
    {Lisp-Entry "jazz.ui.view.Label-View" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "Label-View" class () ((extends . "View")) #f #f 51 7 51 17 ("Black" "Color" "explicit" "head" "View")
        {Lisp-Entry "justification" property () ((initialize . "'head") (accessors . "explicit")) #f #f 54 12 54 25 ()}
        {Lisp-Entry "color" property () ((initialize . "{Color Black}") (accessors . "explicit")) #f #f 55 12 55 17 ()}
        {Lisp-Entry "shadow?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 56 12 56 19 ()}
        {Lisp-Entry "default-size" method (override) () #f #f 59 20 59 32 ("16" "100" "Dimension")}
        {Lisp-Entry "get-justification" method (public) () #f #f 68 18 68 35 ("justification")}
        {Lisp-Entry "set-justification" method (public) ("value") #f #f 72 18 72 35 ("invalidate-view" "justification" "set!" "value")}
        {Lisp-Entry "get-color" method (public) () #f #f 77 18 77 27 ("color")}
        {Lisp-Entry "set-color" method (public) ("value") #f #f 81 18 81 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "get-shadow?" method (public) () #f #f 86 18 86 29 ("shadow?")}
        {Lisp-Entry "set-shadow?" method (public) ("value") #f #f 90 18 90 29 ("invalidate-view" "shadow?" "set!" "value")}
        {Lisp-Entry "label-title" method (protected virtual) () #f #f 100 29 100 40 ("title")}
        {Lisp-Entry "effective-font" method (override) () #f #f 109 20 109 34 ("nextmethod" "or" "get-font" "get-font~" "style" "and" "font" "let")}
        {Lisp-Entry "style-update" method (override) () #f #f 119 20 119 32 ("adjust-size")}
        {Lisp-Entry "preferred-size" method (override) () #f #f 128 20 128 34 ("get-height" "get-height~" "16" "max" "get-width" "get-width~" "Dimension" "new" "effective-font" "text-extent" "text-extent~" "extent" "default-size" "not" "if" "label-title" "localize" "title" "let")}
        {Lisp-Entry "cursor-update" method (override) ("pos") #f #f 143 20 143 33 ("nextmethod" ":finger" "set-cursor" "alt-down?" "if" "pos")}
        {Lisp-Entry "mouse-data" method (override) ("pos") #f #f 149 20 149 30 ("title" "pos")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 158 20 158 24 ("Dark" "color" "2" "+" "draw-text" "draw-text~" "Medium-Gray" "Color" "set-text-color" "set-text-color~" "shadow?" "when" "draw-style" "draw-style~" "view-enabled?" "enabled?" "0" "left" "tabs" "get-height" "line-height" "get-v" "get-v~" "v" "get-h" "get-h~" "h" "style" "center" "list" "justification" "pair?" "if" "get-size" "get-text-extent" "get-text-extent~" "lambda" "justify-lazy" "pos" "label-title" "or" "localize" "title" "let" "context" "surface")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 184 25 184 45 ("Label-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 193 11 193 17 ()
        {Lisp-Entry "import" import () () #f #f 196 1 196 7 ("jazz.designer")}
        {Lisp-Entry "Label-View-Descriptor" class () ((extends . "View-Descriptor")) #f #f 199 7 199 28 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 202 3 202 7 ("Boolean-Domain" "<Boolean-Domain>" "Color-Domain" "<Color-Domain>" "domain" "Justification-Domain" "<Justification-Domain>" "title:" "name:" "Property-Descriptor" "<Property-Descriptor>" "auto-size?" "shadow?" "justification" "font" "size" "position" "color" "background" "name-info" "class-info" "categorized:" "title" "default:" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 213 20 213 31 ("Image-Resource" "class")}}}}})
"Layout"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "layout" "Layout.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.layout.Layout" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Layout" class () ((extends . "Component")) #f #f 43 7 43 13 ("Component")
        {Lisp-Entry "layout" method (public virtual) ("figures" "width" "height" "." "rest") #f #f 46 26 46 32 ("rest" "height" "width" "figures")}}}})
"Layout-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Layout-Text-View.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Layout-Text-View" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Layout-Text-View" class (undocumented) ((extends . "Formatted-Text-View")) #f #f 43 20 43 36 ("Formatted-Text-View")}}})
"Layout-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Layout-View.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.ui.view.Layout-View" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.layout" "jazz.ui" "jazz.library" "jazz.jml" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "Layout-View" class () ((extends . "View")) #f #f 48 7 48 18 ("center" "0" "Rect" "explicit" "View")
        {Lisp-Entry "layout-type" property () ((initialize . "#f") (accessors . "explicit")) #f #f 60 12 60 23 ()}
        {Lisp-Entry "layout-insets" property () ((initialize . "{Rect 0 0 0 0}") (accessors . "explicit")) #f #f 61 12 61 25 ()}
        {Lisp-Entry "layout-justification" property () ((initialize . "'center") (accessors . "explicit")) #f #f 62 12 62 32 ()}
        {Lisp-Entry "layout-padding" property () ((initialize . "0") (accessors . "explicit")) #f #f 63 12 63 26 ()}
        {Lisp-Entry "layout-fit" property () ((initialize . "#f") (accessors . "explicit")) #f #f 64 12 64 22 ()}
        {Lisp-Entry "get-layout-type" method (public) () #f #f 72 18 72 33 ("layout-type")}
        {Lisp-Entry "set-layout-type" method (public) ("type") #f #f 76 18 76 33 ("layout-view" "set!" "layout-type" "neq?" "when" "type")}
        {Lisp-Entry "get-layout-insets" method (public) () #f #f 83 18 83 35 ("layout-insets")}
        {Lisp-Entry "set-layout-insets" method (public) ("insets") #f #f 87 18 87 35 ("layout-view" "layout-type" "when" "layout-insets" "set!" "insets")}
        {Lisp-Entry "get-layout-justification" method (public) () #f #f 93 18 93 42 ("layout-justification")}
        {Lisp-Entry "set-layout-justification" method (public) ("just") #f #f 97 18 97 42 ("layout-view" "layout-type" "when" "layout-justification" "set!" "just")}
        {Lisp-Entry "get-layout-padding" method (public) () #f #f 103 18 103 36 ("layout-padding")}
        {Lisp-Entry "set-layout-padding" method (public) ("pad") #f #f 107 18 107 36 ("layout-view" "layout-type" "when" "layout-padding" "set!" "pad")}
        {Lisp-Entry "get-layout-fit" method (public) () #f #f 113 18 113 32 ("layout-fit")}
        {Lisp-Entry "set-layout-fit" method (public) ("fit") #f #f 117 18 117 32 ("layout-view" "set!" "layout-fit" "neq?" "when" "fit")}
        {Lisp-Entry "inner?" method (override) ("view") #f #f 129 20 129 26 ("children" "memq?" "layout-type" "and" "view")}
        {Lisp-Entry "fill-layout" method () () #f #f 140 11 140 22 ("fill-size" "fill-position" "get-views" "layout-fill" "else" "layout-fill-vertical" "vertical" "layout-fill-horizontal" "horizontal" "layout-justification" "case" "op" "let")}
        {Lisp-Entry "layout" method (override) () #f #f 148 20 148 26 ("adjust" "error" "else" "fill?:" "box" "Flow-Layout" "flow" "Snap-Layout" "snap" "get-height" "get-width" "justification:" "layout-fit" "fit:" "layout-padding" "padding:" "Border-Layout" "border" "nu+" "layout-justification" "get-location" "get-location~" "or" "justification" "rect-size" "rect-position" "topleft" "get-bottom" "get-bottom~" "get-right" "get-right~" "-" "get-top" "get-top~" "get-left" "get-left~" "expand-rect" "rect" "get-bounds" "bounds" "let*" "justify" "children" "set-position" "set-position~" "get-size~" "pos" "View" "is?" "when" "child" "lambda" "for-each" "get-size" "size" "center" "self" "layout" "layout~" "layout-insets" "insets:" "Fit-Layout" "new" "ly" "let" "fit" "fill-layout" "fill" "gravity" "layout-type" "case")}
        {Lisp-Entry "resize" method (override) ("dh" "dv") #f #f 192 20 192 26 ("get-children" "get-location" "get-location~" "let" "View" "is?" "child" "lambda" "for-each" "gravity" "layout-type" "when" "nextmethod" "size-figure" "size-figure~" "0" "eq?" "if" "move-figure" "move-figure~" "receive" "view" "resize-child" "v-fill" "h-fill" "v-move" "h-move" "symbol?" "else" "fill" "move" "case" "v-location" "h-location" "bind" "pair?" "values" "not" "cond" "error" "invalid" "location" "expand-location" "define" "dv" "dh")}
        {Lisp-Entry "adjust?" method (override) () #f #f 242 20 242 27 ("layout-fit" "boolean")}
        {Lisp-Entry "adjust-fit" method (override) () #f #f 246 20 246 30 ("update-scrollbars" "get-scroller" "scroller" "let" "layout-view" "layout-fit" "when")}
        {Lisp-Entry "adjust" method (override) () #f #f 254 20 254 26 ("size" "move-figure" "move-figure~" "dv" "-" "dh" "layout-insets" "+" "Dimension" "new" "set-size" "children" "get-bottom" "get-bottom~" "get-right" "get-right~" "max" "get-top" "get-top~" "min" "get-left" "get-left~" "not" "if" "set!" "get-rect" "get-rect~" "rect" "get-visible?" "get-visible?~" "View" "is?" "and" "when" "child" "lambda" "for-each" "bottom" "0" "right" "top" "left" "let" "around" "layout-fit" "case")}
        {Lisp-Entry "fill-position" method (protected virtual) () #f "<Point>" 286 29 286 42 ("get-top" "get-top~" "layout-insets" "get-left" "get-left~" "new" "Point" "<Point>")}
        {Lisp-Entry "fill-size" method (protected virtual) () #f "<Dimension>" 290 29 290 38 ("get-bottom" "get-bottom~" "get-top" "get-top~" "get-right" "get-right~" "layout-insets" "get-left" "get-left~" "+" "new" "get-size" "-" "Dimension" "<Dimension>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 299 25 299 45 ("Layout-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 308 11 308 17 ()
        {Lisp-Entry "import" import () () #f #f 311 1 311 7 ("jazz.designer")}
        {Lisp-Entry "Layout-View-Descriptor" class () ((extends . "View-Descriptor")) #f #f 314 7 314 29 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 317 3 317 7 ("Boolean-Domain" "<Boolean-Domain>" "layout-fit" "layout-padding" "Justification-Domain" "<Justification-Domain>" "layout-justification" "Rect-Domain" "<Rect-Domain>" "layout-insets" "domain" "Type-Domain" "<Type-Domain>" "title:" "layout-type" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 331 20 331 31 ("Image-Resource" "class")}}
        {Lisp-Entry "Type-Domain" class () ((extends . "Enumeration-Domain")) #f #f 340 7 340 18 ("Enumeration-Domain")
          {Lisp-Entry "Choices" definition () () #f #f 343 14 343 21 ("box" "flow" "snap" "border" "justify" "center" "fit" "fill")}
          {Lisp-Entry "finish" method (override) ("rest") #f #f 355 20 355 26 ("Choices" "set-choices" "nextmethod" "rest")}}
        {Lisp-Entry "Justification-Domain" class () ((extends . "Enumeration-Domain")) #f #f 365 7 365 27 ("Enumeration-Domain")
          {Lisp-Entry "Choices" definition () () #f #f 368 14 368 21 ("vertical" "horizontal" "tail" "center" "head")}
          {Lisp-Entry "finish" method (override) ("rest") #f #f 386 20 386 26 ("Choices" "set-choices" "nextmethod" "rest")}}}}})
"Line"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Line.jazz"} 244285115. jazz
    {Lisp-Entry "jazz.ui.text.Line" module (protected) () #f #f 37 18 37 35 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Line" class () ((extends . "Object")) #f #f 44 7 44 11 ("Object")
        {Lisp-Entry "model" slot (protected) ((getter . "generate")) #f #f 47 18 47 23 ()}
        {Lisp-Entry "get-model" accessor () () #f #f 47 37 47 45 ()}
        {Lisp-Entry "runs" slot (protected) ((getter . "generate")) #f #f 48 18 48 22 ()}
        {Lisp-Entry "get-runs" accessor () () #f #f 48 37 48 45 ()}
        {Lisp-Entry "rank" slot (protected) ((getter . "generate")) #f "<fx>" 49 18 49 22 ("fx" "<fx>")}
        {Lisp-Entry "get-rank" accessor () () #f #f 49 37 49 45 ()}
        {Lisp-Entry "offset" slot (protected) ((getter . "generate")) #f "<fx>" 50 18 50 24 ("fx" "<fx>")}
        {Lisp-Entry "get-offset" accessor () () #f #f 50 37 50 45 ()}
        {Lisp-Entry "length" slot (protected) ((getter . "generate")) #f "<fx>" 51 18 51 24 ("fx" "<fx>")}
        {Lisp-Entry "get-length" accessor () () #f #f 51 37 51 45 ()}
        {Lisp-Entry "left" slot (protected) ((getter . "generate")) #f "<fx>" 52 18 52 22 ("fx" "<fx>")}
        {Lisp-Entry "get-left" accessor () () #f #f 52 37 52 45 ()}
        {Lisp-Entry "top" slot (protected) ((getter . "generate")) #f "<fx>" 53 18 53 21 ("fx" "<fx>")}
        {Lisp-Entry "get-top" accessor () () #f #f 53 37 53 45 ()}
        {Lisp-Entry "width" slot (protected) ((getter . "generate")) #f "<fx>" 54 18 54 23 ("fx" "<fx>")}
        {Lisp-Entry "get-width" accessor () () #f #f 54 37 54 45 ()}
        {Lisp-Entry "height" slot (protected) ((accessors . "generate")) #f "<fx>" 55 18 55 24 ("fx" "<fx>")}
        {Lisp-Entry "get-height" accessor () () #f #f 55 40 55 48 ()}
        {Lisp-Entry "set-height" accessor () () #f #f 55 40 55 48 ()}
        {Lisp-Entry "initialize" method (override) ("model" "runs" "rank" "offset" "left" "top" "width") #f #f 58 20 58 30 ("height~self" "length" "length~self" "width~self" "top~self" "left~self" "offset~self" "rank~self" "runs~self" "self" "model~self" "nextmethod" "max" "set!" "run-height" "height" "get-default-style" "get-default-style~" "get-height" "get-height~" "null?" "if" "compute-height" "get-length" "get-length~" "increase!" "run" "lambda" "for-each" "0" "len" "let" "compute-length" "define" "width" "top" "left" "offset" "rank" "runs" "model")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 88 20 88 25 ("runs" "write" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-limit" method (public) () #f #f 99 18 99 27 ("length" "offset" "+")}
        {Lisp-Entry "get-bottom" method (public) () #f #f 103 18 103 28 ("height" "top" "+")}
        {Lisp-Entry "range-region" method (protected) ("paragraph-left" "paragraph-top" "paragraph-width" "start" "end" "paragraph" "transformer") #f #f 112 21 112 33 ("rect:" "keep-rectangles?:" "Region" "offset-rect" "get-bottom" "top" "Rect" "new" "rect" "not" "if" "right" "0" "or" "col->view" "get-h" "get-h~" "left" "let" "transformer" "paragraph" "end" "start" "paragraph-width" "paragraph-top" "paragraph-left")}
        {Lisp-Entry "scan" method (protected) ("end" "proc" "<procedure>") #f #f 125 21 125 25 ("runs" "1" "increase!" "set!" "continuation-return" "+" ">=" "and" "if" "right" "mid" "n" "c" "scan" "scan~" "get-length" "get-length~" "len" "rightmost" "nmost" "run" "for-each" "return" "lambda" "continuation-capture" "model" "get-tabs" "get-tabs~" "tabs" "left" "h" "0" "b" "let" "procedure" "<procedure>" "proc" "end")}
        {Lisp-Entry "draw-line" method (protected) ("surface" "context" "h" "<fx>" "v" "<fx>" "tabs" "left") #f "<void>" 152 21 152 30 ("runs" "increase!" "height" "draw-run" "draw-run~" "width" "run" "lambda" "for-each" "model" "draw-enabled?" "draw-enabled?~" "enabled?" "self" "left~self" "+" "let" "void" "<void>" "left" "tabs" "v" "fx" "<fx>" "h" "context" "surface")}
        {Lisp-Entry "view->col" method (protected) ("pos" "<Point>") #f "<fx+>" 166 21 166 30 ("get-length" "continuation-return" ">" "right" "mid" "left" "n" "c" "scan" "return" "lambda" "continuation-capture" "get-bottom" "<" "top" ">=" "and" "when" "get-v" "get-v~" "v" "get-h" "get-h~" "h" "let" "fx+" "<fx+>" "Point" "<Point>" "pos")}
        {Lisp-Entry "col->view" method (protected) ("col" "<fx>" "strict?" "<bool>") #f "<Point>" 179 21 179 30 ("runs" "not-null?" "unless" "set!" "top" "new" "continuation-return" "=" "when" "right" "mid" "left" "n" "c" "scan" "return" "lambda" "continuation-capture" "0" "rightmost" "let" "Point" "<Point>" "bool" "<bool>" "strict?" "fx" "<fx>" "col")}
        {Lisp-Entry "col->text" method (protected) ("col" "<fx>") #f "<Cell+>" 196 21 196 30 ("-" "rank" "Cell" "new" "get-limit" "<" "offset" ">=" "and" "when" "Cell+" "<Cell+>" "fx" "<fx>" "col")}}}})
"Line-Surrogate"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Line-Surrogate.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Line-Surrogate" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Line-Surrogate" class (undocumented) ((extends . "View-Surrogate")) #f #f 43 20 43 34 ("View-Surrogate")}}})
"Line-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Line-View.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.view.Line-View" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Line-View" class (undocumented) ((extends . "View")) #f #f 46 20 46 29 ("explicit" "View")
        {Lisp-Entry "from" property () ((initialize . "#f") (accessors . "explicit")) #f #f 49 12 49 16 ()}
        {Lisp-Entry "to" property () ((initialize . "#f") (accessors . "explicit")) #f #f 50 12 50 14 ()}
        {Lisp-Entry "color" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 17 ()}
        {Lisp-Entry "get-from" method (public) () #f #f 59 18 59 26 ("from")}
        {Lisp-Entry "set-from" method (public) ("value") #f #f 63 18 63 26 ("invalidate-view" "from" "set!" "value")}
        {Lisp-Entry "get-to" method (public) () #f #f 68 18 68 24 ("to")}
        {Lisp-Entry "set-to" method (public) ("value") #f #f 72 18 72 24 ("invalidate-view" "to" "set!" "value")}
        {Lisp-Entry "get-color" method (public) () #f #f 77 18 77 27 ("color")}
        {Lisp-Entry "set-color" method (public) ("value") #f #f 81 18 81 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "Tolerance" definition (package) () #f #f 91 22 91 31 ("4.")}
        {Lisp-Entry "in-drawing?" method (override) ("pos" "size") #f #f 95 20 95 31 ("Tolerance" "<" "line-distance" "distance" "let" "to" "from" "null?" "or" "nextmethod" "and" "size" "pos")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 103 20 103 30 ("pos")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 112 20 112 24 ("solid" "alternate" "eq?" "get-v" "get-v~" "get-h" "get-h~" "line" "line~" "line-color" "set-color" "set-color~" "line-width" "set-line-width" "set-line-width~" "set-style" "set-style~" "line-style" "let" "to" "from" "and" "when" "context" "surface")}
        {Lisp-Entry "line-style" method (protected virtual) () #f #f 123 29 123 39 ("solid" "style" "or")}
        {Lisp-Entry "line-width" method (protected virtual) () #f #f 127 29 127 39 ("1")}
        {Lisp-Entry "line-color" method (protected virtual) () #f #f 131 29 131 39 ("Black" "Color" "color" "or")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 140 25 140 45 ("Line-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 149 11 149 17 ()
        {Lisp-Entry "import" import () () #f #f 152 1 152 7 ("jazz.designer")}
        {Lisp-Entry "Line-View-Descriptor" class () ((extends . "View-Descriptor")) #f #f 155 7 155 27 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 158 3 158 7 ("color" "to" "from" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "component-surrogate-class" method (override) ("component") #f #f 166 20 166 45 ("Line-Surrogate" "component")}}}}})
"Link-Style"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Link-Style.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Link-Style" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Link-Style" class () ((extends . "Text-Style")) #f #f 43 7 43 17 ("equal?" "attributes" "Text-Style")
        {Lisp-Entry "address" definition () ((initialize . "#f") (test . "equal?")) #f #f 47 5 47 12 ()}
        {Lisp-Entry "get-address" accessor () () #f #f 47 5 47 12 ()}
        {Lisp-Entry "set-address" accessor () () #f #f 47 5 47 12 ()}
        {Lisp-Entry "anchor" definition () ((initialize . "#f") (test . "equal?")) #f #f 48 5 48 11 ()}
        {Lisp-Entry "get-anchor" accessor () () #f #f 48 5 48 11 ()}
        {Lisp-Entry "set-anchor" accessor () () #f #f 48 5 48 11 ()}
        {Lisp-Entry "action" definition () ((initialize . "#f")) #f #f 49 5 49 11 ()}
        {Lisp-Entry "get-action" accessor () () #f #f 49 5 49 11 ()}
        {Lisp-Entry "set-action" accessor () () #f #f 49 5 49 11 ()}}}})
"Link-Style-Dialog"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Link-Style-Dialog.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Link-Style-Dialog" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Link-Style-Dialog" class () ((extends . "View")) #f #f 46 7 46 24 ("View")
        {Lisp-Entry "text" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 16 ()}
        {Lisp-Entry "get-text" accessor () () #f #f 49 44 49 52 ()}
        {Lisp-Entry "set-text" accessor () () #f #f 49 44 49 52 ()}
        {Lisp-Entry "address" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 19 ()}
        {Lisp-Entry "get-address" accessor () () #f #f 50 44 50 52 ()}
        {Lisp-Entry "set-address" accessor () () #f #f 50 44 50 52 ()}
        {Lisp-Entry "anchor" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 18 ()}
        {Lisp-Entry "get-anchor" accessor () () #f #f 51 44 51 52 ()}
        {Lisp-Entry "set-anchor" accessor () () #f #f 51 44 51 52 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler:" "default?:" "24" "80" "227" "167" "ok" "Push-Button" "<Push-Button>" "213" "anchor-text" "152" "anchor-border" "154" "anchor-label" "address-text" "120" "address-border" "54" "122" "address-label" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "tooltip-text:" "tooltip?:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "text-text" "Name-Text-View" "<Name-Text-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "19" "294" "88" "121" "text-border" "Border-View" "<Border-View>" "33" "90" "62" "text-label" "8" "50" "0" "Horizontal-Line" "<Horizontal-Line>" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "Label-View" "<Label-View>" "261" "500" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 79 20 79 26 ("anchor" "anchor-text" "address" "address-text" "text" "or" "text-text" "locate" "set-string-content" "set-string-content~" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method (override) () #f #f 86 20 86 33 ("text-text" "locate" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 95 25 95 35 ()}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 104 20 104 36 ("anchor-text" "address-text" "text-text" "values" "empty-string?" "if" "locate" "get-string-content" "get-string-content~" "content" "let" "name" "non-empty" "define")}
        {Lisp-Entry "get-tab-stops" method (override) () #f #f 121 20 121 33 ("anchor-text" "address-text" "text-text" "locate" "list")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 134 20 134 35 ("get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-host" "dialog" "let" "validate-dialog" "ok" "locate" "get-enabled?" "get-enabled?~" "when" "evt")}
        {Lisp-Entry "on-escape-press" method (override) ("evt") #f #f 142 20 142 35 ("cancel-modal" "cancel-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "Header-Color" definition () () #f #f 152 14 152 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 156 20 156 24 ("Header-Color" "1" "White" "Color" "list" "50" "get-width" "get-width~" "0" "Rect" "new" "gradient-fill" "gradient-fill~" "get-size" "size" "let" "context" "surface")}}}})
"List-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "List-Request.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.dialog.List-Request" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "List-Request" class (undocumented) ((extends . "View")) #f #f 46 20 46 32 ("explicit" "View")
        {Lisp-Entry "present" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 19 ()}
        {Lisp-Entry "get-present" accessor () () #f #f 49 57 49 65 ()}
        {Lisp-Entry "set-present" accessor () () #f #f 49 57 49 65 ()}
        {Lisp-Entry "content" property () ((initialize . "'()") (accessors . "explicit")) #f #f 50 12 50 19 ()}
        {Lisp-Entry "multiple-selection?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 31 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("on-cancel" "694" "cancel" "default?:" "on-ok" ":host" "action-handler:" "24" "80" "315" "610" "ok" "Push-Button" "<Push-Button>" "8" "770" "300" "6" "separator" "Horizontal-Line" "<Horizontal-Line>" "400" "width:" "display-images?:" "toplevel-controls?:" "Tree-Node-Column" "<Tree-Node-Column>" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" ":form" "Event-Handler" "double-click-handler:" ":images" "portfolio:" "2" "top-padding:" "element" "filled-column:" "tree" "Tree-View" "<Tree-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "254" "766" "33" "7" "border" "Border-View" "<Border-View>" "Label" "Font" "font:" "16" "281" "9" "10" "Point" "position:" "title:" "invite" "name:" "Label-View" "<Label-View>" "350" "782" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "focus-default" method (override) () #f #f 67 20 67 33 ("get-tree" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "get-tree" method () () #f #f 76 11 76 19 ("tree" "locate")}
        {Lisp-Entry "set-invite" method (public) ("value") #f #f 85 18 85 28 ("invite" "locate" "set-title" "set-title~" "value")}
        {Lisp-Entry "get-content" method (public) () #f #f 94 18 94 29 ("content")}
        {Lisp-Entry "set-content" method (public) ("value") #f #f 98 18 98 29 ("setup-selection" "setup-content" "get-tree" "tree" "let" "content" "set!" "value")}
        {Lisp-Entry "get-multiple-selection?" method (public) () #f #f 105 18 105 41 ("multiple-selection?")}
        {Lisp-Entry "set-multiple-selection?" method (public) ("flag") #f #f 109 18 109 41 ("set-multiple-selection?" "set-multiple-selection?~" "get-tree" "tree" "let" "multiple-selection?" "set!" "flag")}
        {Lisp-Entry "set-selected" method (public) ("selected") #f #f 115 18 115 30 ("set-single-selection" "set-single-selection~" "when" "user-data-row" "user-data-row~" "else" "row->line" "row->line~" "row" "lambda" "map" "set-selection" "set-selection~" "user-data-rows" "user-data-rows~" "rows" "multiple-selection?" "cond" "get-tree" "tree" "let" "selected")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 133 25 133 35 ()}
        {Lisp-Entry "host-position" method (meta override) () #f #f 137 25 137 38 ("300" "450" "Point")}
        {Lisp-Entry "host-size" method (meta override) () #f #f 141 25 141 34 ("500" "300" "Dimension")}
        {Lisp-Entry "on-double-click" method () ("evt") #f #f 150 11 150 26 ("get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "resize" method (override) ("dh" "dv") #f #f 155 20 155 26 ("cancel" "ok" "0" "separator" "move-figure" "move-figure~" "border" "locate" "size-figure" "size-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 165 20 165 35 ("get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" method (override) ("evt") #f #f 171 20 171 35 ("cancel-modal" "cancel-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update" method () () #f #f 181 11 181 17 ("get-tree" "setup-content")}
        {Lisp-Entry "setup-content" method () ("tree") #f #f 185 11 185 24 ("content" "user-data:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "title" "element" "for-each" "->string" "or" "present" "let" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "tree")}
        {Lisp-Entry "setup-selection" method () ("tree") #f #f 196 11 196 26 ("0" "list" "set-selection" "set-selection~" "content" "not-null?" "when" "tree")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 206 20 206 36 ("get-single-selected-data" "get-single-selected-data~" "get-selected-data" "get-selected-data~" "multiple-selection?" "if" "get-tree" "tree" "let")}}}})
"Listener"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "listener" "Listener.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.listener.Listener" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Listener" interface () () #f #f 40 11 40 19 ()}}})
"Localized-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "locale" "Localized-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.locale.Localized-Domain" module (protected) () #f #f 37 18 37 49 ("0" "cardinality" ">" "and" "or" "in-edition?" "close-in-list-editor" "close-in-cell-editor" "close-editor" "is-not?" "when" "select-editor" "get-tree" "expand/collapse" "expand/collapse~" "user-data:" "Locale-Row" "class:" "get-locale" "get-locale~" "self" "add-row" "locale" "for-each" "edit-in-cell" "set!" "edit" "set-list-edited-modified?" "flag" "set-edited-modified?" "get-list-edited-modified?" "nextmethod" "get-edited-modified?" "get-output" "get-output~" "apply" "get-value" "get-value~" "get-user-data" "get-user-data~" "put" "put~" "subrow" "lambda" "get-sons" "iterate" "List-Factory" "new" "fact" "let" "editor" "get-string-content" "get-string-content~" "not" "get-edited-value" "get-locales" "get-locales~" "format" "Locales" "is?" "if" "value" "present" "override" "method" "initialize" "localized?" "slot" "Value-Domain" "extends" "Localized-Domain" "undocumented" "class" "jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Localized-Domain" class (undocumented) ((extends . "String-Domain")) #f #f 43 20 43 36 ("String-Domain")}}})
"Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Look.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.skin.Look" module (protected) () #f #f 37 18 37 35 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Look" class () ((extends . "Component")) #f #f 48 7 48 11 ("Component")}}})
"Mac-Skin"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Mac-Skin.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.skin.Mac-Skin" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Mac-Skin" class () ((extends . "Jazz-Skin")) #f #f 44 7 44 15 ("Jazz-Skin")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("title:" "install" "<install>")}}}})
"Mainbar-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Mainbar-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Mainbar-Preferences" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Mainbar-Preferences" class () ((extends . "Splitter-Preferences")) #f #f 44 7 44 26 ("Splitter-Preferences")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 (":toolbar" "model:" "first" "location:" "Toolbar-Preferences" "<Toolbar-Preferences>" "vert" "orientation:" "27" "division:" "edge" "separator:" "install" "<install>")}}}})
"Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Menu.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.ui.menu.Menu" module (protected) () #f #f 37 18 37 35 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.locale" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Menu" class () ((extends . "View")) #f #f 47 7 47 11 ("self" "Menu-Locator" "new" "View")
        {Lisp-Entry "item" slot () ((initialize . "#f") (accessors . "generate")) #f #f 50 8 50 12 ()}
        {Lisp-Entry "get-item" accessor () () #f #f 50 44 50 52 ()}
        {Lisp-Entry "set-item" accessor () () #f #f 50 44 50 52 ()}
        {Lisp-Entry "highlighted" slot () ((initialize . "#f")) #f #f 51 8 51 19 ()}
        {Lisp-Entry "popped" slot () ((initialize . "#f")) #f #f 52 8 52 14 ()}
        {Lisp-Entry "locator" slot () ((initialize . "(new Menu-Locator self)")) #f #f 53 8 53 15 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("visible?:" "install" "<install>")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 65 20 65 33 ("nextmethod" "menu-actions" "cons")}
        {Lisp-Entry "menu-actions" method (protected virtual) () #f #f 70 29 70 41 ("menu" "find-actions")}
        {Lisp-Entry "conclude" method (override) ("rest") #f #f 79 20 79 28 ("layout-menu" "nextmethod" "rest")}
        {Lisp-Entry "parent-menu" method (protected) () #f #f 89 21 89 32 ("get-parent" "get-parent~" "item" "and")}
        {Lisp-Entry "parent-menubar" method (protected) () #f #f 93 21 93 35 ("parent-menu" "parent-menu~" "Menubar" "is?" "if" "when" "self" "menu" "iter" "let")}
        {Lisp-Entry "get-popped" method (public) () #f #f 101 18 101 28 ("popped")}
        {Lisp-Entry "set-popped" method (public) ("menu") #f #f 105 18 105 28 ("set!" "invalidate-view" "invalidate-view~" "popup-initiator" "popup-initiator~" "initiator" "let" "popped" "when" "menu")}
        {Lisp-Entry "get-highlighted" method (public) () #f #f 118 18 118 33 ("highlighted")}
        {Lisp-Entry "set-highlighted" method (public) ("new") #f #f 122 18 122 33 ("invalidate-view" "invalidate-view~" "when" "set!" "highlighted" "old" "let" "new")}
        {Lisp-Entry "clear-highlighted" method (package) () #f #f 131 19 131 36 ("highlighted" "set!")}
        {Lisp-Entry "focus-lose" method (override) () #f #f 140 20 140 30 ("set-highlighted")}
        {Lisp-Entry "on-navigate-previous" method () ("evt") #f #f 149 11 149 31 ("navigate-previous" "evt")}
        {Lisp-Entry "on-navigate-next" method () ("evt") #f #f 153 11 153 27 ("navigate-next" "evt")}
        {Lisp-Entry "on-navigate-open" method () ("evt") #f #f 157 11 157 27 ("navigate-open" "evt")}
        {Lisp-Entry "on-navigate-close" method () ("evt") #f #f 161 11 161 28 ("navigate-close" "evt")}
        {Lisp-Entry "on-navigate-home" method () ("evt") #f #f 165 11 165 27 ("navigate-home" "evt")}
        {Lisp-Entry "on-navigate-end" method () ("evt") #f #f 169 11 169 26 ("navigate-end" "evt")}
        {Lisp-Entry "key-press" method (override) ("key") #f #f 173 20 173 29 ("locator" "enter" "enter~" "key")}
        {Lisp-Entry "up-arrow-press" method (override) ("modifiers") #f #f 177 20 177 34 ("navigate-previous" "modifiers")}
        {Lisp-Entry "down-arrow-press" method (override) ("modifiers") #f #f 181 20 181 36 ("navigate-next" "modifiers")}
        {Lisp-Entry "navigate-to" method () ("navigate") #f #f 185 11 185 22 ("highlighted" "set-highlighted" "not-null?" "when" "navigable-items" "items" "let" "navigate")}
        {Lisp-Entry "navigable-items" method () () #f #f 191 11 191 26 ("children" "Item" "collect-type" "navigable?" "navigable?~" "collect-if")}
        {Lisp-Entry "right-arrow-press" method (override) ("modifiers") #f #f 195 20 195 37 ("navigate-open~" "navigate-next" "navigate-next~" "close-all-popups" "when" "parent-menubar" "menubar" "let" "navigate-open" "or" "modifiers")}
        {Lisp-Entry "left-arrow-press" method (override) ("modifiers") #f #f 204 20 204 36 ("navigate-close" "navigate-open" "navigate-open~" "navigate-previous" "navigate-previous~" "close-all-popups" "begin" "Menubar" "is?" "if" "parent-menu" "parent" "let" "modifiers")}
        {Lisp-Entry "return-press" method (override) ("key") #f #f 214 20 214 32 ("navigate-select" "key")}
        {Lisp-Entry "escape-press" method (override) ("key") #f #f 218 20 218 32 ("navigate-close" "key")}
        {Lisp-Entry "navigate-previous" method (protected) () #f #f 227 21 227 38 ("previous-element" "navigate-to")}
        {Lisp-Entry "navigate-next" method (protected) () #f #f 231 21 231 34 ("next-element" "navigate-to")}
        {Lisp-Entry "navigate-home" method (protected) () #f #f 235 21 235 34 ("first" "highlighted" "items" "lambda" "navigate-to")}
        {Lisp-Entry "navigate-end" method (protected) () #f #f 241 21 241 33 ("last" "highlighted" "items" "lambda" "navigate-to")}
        {Lisp-Entry "navigate-select" method (protected) () #f #f 247 21 247 36 ("process-action" "process-action~" "all?:" "player" "close-popups" "close-popups~" "item" "let" "navigate-open" "get-content" "get-content~" "if" "highlighted" "when")}
        {Lisp-Entry "navigate-open" method (protected) ("(highlight-last? #f)") #f #f 256 21 256 34 ("first-child" "first-child~" "last-child" "last-child~" "if" "set-highlighted" "set-highlighted~" "popup-content" "popup-content~" "get-content" "get-content~" "content" "let" "highlighted" "when" "highlight-last?")}
        {Lisp-Entry "navigate-close" method (protected) () #f #f 268 21 268 35 ("set-highlighted" "set-highlighted~" "eq?" "get-focus" "focus" "get-parent" "get-parent~" "menu" "let" "item" "when" "get-player" "close-popup")}
        {Lisp-Entry "inner?" method (override) ("view") #f #f 282 20 282 26 ("children" "memq?" "view")}
        {Lisp-Entry "invalidate-update" method (override) () #f #f 291 20 291 37 ("layout-menu")}
        {Lisp-Entry "update" method (public virtual) () #f #f 295 26 295 32 ()}
        {Lisp-Entry "layout-menu" method (public virtual) ("." "rest") #f #f 304 26 304 37 ("2" "300" "120" "if" "increase!" "set-arrow-width" "set-arrow-width~" "set-shortcut-width" "set-shortcut-width~" "set-body-width" "set-body-width~" "set-icon-width" "set-icon-width~" "set-prefix-width" "set-prefix-width~" "Dimension" "set-size" "set-size~" "Point" "new" "set-position" "set-position~" "preferred-height" "preferred-height~" "height" "empty?" "1" "v" "or" "+" "max" "receive" "get-finished?" "width" "bind-keywords" "values" "set!" ">" "when" "preferred-arrow-width" "preferred-arrow-width~" "arrow" "preferred-shortcut-width" "preferred-shortcut-width~" "shortcut" "preferred-body-width" "preferred-body-width~" "body" "preferred-icon-width" "preferred-icon-width~" "icon" "preferred-prefix-width" "preferred-prefix-width~" "prefix" "view" "lambda" "for-each-view" "arrow-max" "shortcut-max" "body-max" "icon-max" "0" "prefix-max" "let" "collect-maximums" "define" "rest")}
        {Lisp-Entry "cleanup-separators" method (public) () #f #f 353 18 353 36 ("set!" "when" "set-visible?" "set-visible?~" "if" "and" "consecutive?" "Separator-Item" "is?" "separator?" "let*" "item" "lambda" "for-each" "kept-separator" "previous-separator?" "children" "get-visible?" "get-visible?~" "collect-if" "visibles" "let")}}
      {Lisp-Entry "Menu-Locator" class () ((extends . "Locator")) #f #f 375 7 375 19 ("Locator")
        {Lisp-Entry "menu" slot () () #f #f 378 8 378 12 ()}
        {Lisp-Entry "initialize" method (override) ("menu" "." "rest") #f #f 381 20 381 30 ("nextmethod" "apply" "self" "menu~self" "set!" "rest" "menu")}
        {Lisp-Entry "iterate" method (override) ("proc") #f #f 386 20 386 27 ("get-title" "get-title~" "localize" "title" "element" "item" "+" "modulo" "rank" "below" "from" "n" "for" "loop" "cardinality" "card" "next-element" "prefix" "get-rank" "0" "not" "if" "start" "not-null?" "when" "get-highlighted" "get-highlighted~" "current" "menu" "navigable-items" "navigable-items~" "items" "let" "proc")}
        {Lisp-Entry "select" method (override) ("rank") #f #f 399 20 399 26 ("element" "set-highlighted" "set-highlighted~" "menu" "navigable-items" "navigable-items~" "items" "let" "rank")}}}})
"Menu-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Menu-Actions.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.menu.Menu-Actions" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Menu-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 32 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("End" "on-navigate-end" "navigate-end" "Home" "Shortcut" "shortcut:" "on-navigate-home" "navigate-home" "on-navigate-open" "navigate-right" "on-navigate-close" "navigate-left" "on-navigate-next" "navigate-downward" "on-navigate-previous" ":focus" "Event-Handler" "action-handler:" "navigate-upward" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Menu-Host"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "hosting" "Menu-Host.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.hosting.Menu-Host" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.skin" "jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Menu-Host" class (undocumented) ((extends . "Host-View")) #f #f 45 20 45 29 ("Host-View")
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 48 20 48 35 ("get-bounds" "fill-background" "fill-background~" "Medium" "Color" "menu" "find-look" "get-background" "get-background~" "or" "background" "let" "context" "surface")}}}})
"Menu-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Menu-Look.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Menu-Look" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Menu-Look" class () ((extends . "Look")) #f #f 43 7 43 16 ("Look")
        {Lisp-Entry "background" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 22 ()}
        {Lisp-Entry "get-background" accessor () () #f #f 46 56 46 64 ()}
        {Lisp-Entry "set-background" accessor () () #f #f 46 56 46 64 ()}
        {Lisp-Entry "highlight" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 21 ()}
        {Lisp-Entry "get-highlight" accessor () () #f #f 47 56 47 64 ()}
        {Lisp-Entry "set-highlight" accessor () () #f #f 47 56 47 64 ()}
        {Lisp-Entry "text-color" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 22 ()}
        {Lisp-Entry "get-text-color" accessor () () #f #f 48 56 48 64 ()}
        {Lisp-Entry "set-text-color" accessor () () #f #f 48 56 48 64 ()}
        {Lisp-Entry "selected-text-color" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 31 ()}
        {Lisp-Entry "get-selected-text-color" accessor () () #f #f 49 56 49 64 ()}
        {Lisp-Entry "set-selected-text-color" accessor () () #f #f 49 56 49 64 ()}
        {Lisp-Entry "disabled-text-color" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 31 ()}
        {Lisp-Entry "get-disabled-text-color" accessor () () #f #f 50 56 50 64 ()}
        {Lisp-Entry "set-disabled-text-color" accessor () () #f #f 50 56 50 64 ()}}}})
"Menu-Transient"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "Menu-Transient.jazz"} 244078956. jazz
    {Lisp-Entry "jazz.ui.window.Menu-Transient" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Menu-Transient" class (undocumented) ((extends . "Transient")) #f #f 43 20 43 34 ("Transient")
        {Lisp-Entry "new-root" method (override) () #f #f 46 20 46 28 ("offscreen?:" "Menu-Host" "new")}}}})
"Menubar"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Menubar.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.menu.Menubar" module (protected) () #f #f 37 18 37 38 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.skin" "jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Menubar" class () ((extends . "Menu")) #f #f 47 7 47 14 ("Menu")
        {Lisp-Entry "showing?" slot () ((initialize . "#f")) #f #f 50 8 50 16 ()}
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("on-close" "close" "on-restore" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" "type:" "restore" "name:" "Frame-Button" "<Frame-Button>" "visible?:" "21" "1024" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "menu-actions" method (override) () #f #f 64 20 64 32 ("menubar" "find-actions")}
        {Lisp-Entry "on-restore" method () ("evt") #f #f 73 11 73 21 ("current-stage" "restore" "restore~" "evt")}
        {Lisp-Entry "on-close" method () ("evt") #f #f 77 11 77 19 ("close-host" "close-host~" "current-frame" "frame" "let" "evt")}
        {Lisp-Entry "up-arrow-press" method (override) ("modifiers") #f #f 87 20 87 34 ("navigate-open" "modifiers")}
        {Lisp-Entry "down-arrow-press" method (override) ("modifiers") #f #f 91 20 91 36 ("navigate-open" "modifiers")}
        {Lisp-Entry "left-arrow-press" method (override) ("modifiers") #f #f 95 20 95 36 ("navigate-previous" "modifiers")}
        {Lisp-Entry "right-arrow-press" method (override) ("modifiers") #f #f 99 20 99 37 ("navigate-next" "modifiers")}
        {Lisp-Entry "escape-press" method (override) ("key") #f #f 103 20 103 32 ("pop-all-focuses" "key")}
        {Lisp-Entry "maximize" method (override) () #f #f 112 20 112 28 ("show-buttons")}
        {Lisp-Entry "restore" method (override) () #f #f 116 20 116 27 ("hide-buttons")}
        {Lisp-Entry "update-buttons" method (public virtual) () #f #f 120 26 120 40 ("hide-buttons" "show-buttons" "get-maximized?" "get-maximized?~" "not-null?" "and" "get-views" "get-views~" "frames" "if" "current-stage" "stage" "let")}
        {Lisp-Entry "show-buttons" method () () #f #f 130 11 130 23 ("close" "restore" "locate" "set-visible?" "set-visible?~" "always-maximized?" "unless")}
        {Lisp-Entry "hide-buttons" method () () #f #f 136 11 136 23 ("close" "restore" "locate" "set-visible?" "set-visible?~")}
        {Lisp-Entry "always-maximized?" method (protected virtual) () #f #f 141 29 141 46 ()}
        {Lisp-Entry "layout" method (override) () #f #f 150 20 150 26 ("close" "restore" "locate" "set-rect" "set-rect~" "get-right" "get-right~" "0" "get-bounds" "bounds" "let*" "3" "19" "close-rect" "18" "21" "4" "+" "37" "-" "Rect" "new" "right" "top" "restore-rect" "define")}
        {Lisp-Entry "layout-menu" method (override) () #f #f 164 20 164 31 ("increase!" "3" "-" "Dimension" "set-size" "set-size~" "preferred-body-width" "preferred-body-width~" "width" "2" "Point" "new" "set-position" "set-position~" "Item" "is?" "when" "view" "lambda" "for-each-view" "0" "h" "get-height" "height" "let")}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 181 20 181 35 ("fill-background" "fill-background~" "get-bounds" "bounds" "nextmethod" "not" "if" "get-background" "get-background~" "background" "get-look" "look" "let" "context" "surface")}
        {Lisp-Entry "get-look" method (override) () #f #f 195 20 195 28 ("menubar" "find-look")}}}})
"Menubar-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Menubar-Actions.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.menu.Menubar-Actions" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Menubar-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 35 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("End" "on-navigate-end" "navigate-end" "Home" "Shortcut" "shortcut:" "on-navigate-home" "navigate-home" "on-navigate-next" "navigate-right" "on-navigate-previous" "navigate-left" "on-navigate-open" ":focus" "Event-Handler" "action-handler:" "navigate-downward" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Menubar-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Menubar-Look.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Menubar-Look" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Menubar-Look" class () ((extends . "Look")) #f #f 43 7 43 19 ("Look")
        {Lisp-Entry "background" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 22 ()}
        {Lisp-Entry "get-background" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "set-background" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "highlight" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 21 ()}
        {Lisp-Entry "get-highlight" accessor () () #f #f 47 47 47 55 ()}
        {Lisp-Entry "set-highlight" accessor () () #f #f 47 47 47 55 ()}}}})
"Menubar-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Menubar-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Menubar-Preferences" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Menubar-Preferences" class () ((extends . "Splitter-Preferences")) #f #f 44 7 44 26 ("Splitter-Preferences")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 (":menubar" "model:" "first" "location:" "Toolbar-Preferences" "<Toolbar-Preferences>" "vert" "orientation:" "21" "division:" "edge" "separator:" "install" "<install>")}}}})
"Message-Box"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "Message-Box.jazz"} 232598864. jazz
    {Lisp-Entry "jazz.ui.dialog.Message-Box" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.dialog" "jazz.ui" "jazz.media" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Message-Box" class (undocumented) ((extends . "View")) #f #f 51 20 51 31 ("View")
        {Lisp-Entry "type" slot () () #f #f 54 8 54 12 ()}
        {Lisp-Entry "process-keys?" slot () () #f #f 55 8 55 21 ()}
        {Lisp-Entry "user-content" slot () () #f #f 56 8 56 20 ()}
        {Lisp-Entry "action-buttons" slot () () #f #f 57 8 57 22 ()}
        {Lisp-Entry "default-button" slot () () #f #f 58 8 58 22 ()}
        {Lisp-Entry "form" form () () #f #f 61 3 61 7 ("editable?:" "selectable?:" "0" "top-padding:" "2" "left-padding:" "background:" "text" "Message-Text-View" "<Message-Text-View>" "fill" "layout-type:" "content" "!" "<!>" "tool" "style:" "vscroll?:" "hscroll?:" "scroller" "Scroller-View" "<Scroller-View>" "Dark" "Color" "border-color:" "border-type:" "100" "56" "border" "Border-View" "<Border-View>" ":images" "portfolio:" "Image-Resource" "resource:" "32" "12" "Point" "position:" "icon" "name:" "Image-View" "<Image-View>" "120" "302" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("initargs") #f #f 70 20 70 26 ("self" "text" "locate" "set-client" "set-client~" "nextmethod" "initargs")}
        {Lisp-Entry "focus-default" method (override) () #f #f 80 20 80 33 ("text" "locate" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "Type-Infos" definition () () #f #f 89 14 89 24 ("custom" "error" ":hand" ":error" "problem" "cancel" "confirmation" "no" ":exclamation" "question" "yes" ":asterisk" ":information" "message" "list")}
        {Lisp-Entry "type-info" definition () ("type") #f #f 99 15 99 24 ("error" "cdr" "if" "Type-Infos" "assq" "info" "let" "type")}
        {Lisp-Entry "resize" method (override) ("dh" "dv") #f #f 111 20 111 26 ("action-buttons" "move-figure" "move-figure~" "button" "lambda" "for-each" "user-content" "border" "locate" "size-figure" "size-figure~" "2" "get-width" "resize-parts" "second-dh" "first-dh" "bind" "current-modal" "get-host" "eq?" "when" "nextmethod" "dv" "dh")}
        {Lisp-Entry "process-return" method () () #f #f 124 11 124 25 ("default-button" "end-modal-dialog" "get-host" "dialog" "let")}
        {Lisp-Entry "process-escape" method () () #f #f 129 11 129 25 ("end-modal-dialog" "get-host" "dialog" "let" "when" "type" "type-info" "close-result" "cancelable?" "default-cancel" "default-no" "default-yes" "default-sound" "default-icon" "default-title" "bind")}
        {Lisp-Entry "process-key" method () ("key") #f #f 136 11 136 22 ("action-buttons" "for-each" "continuation-return" "end-modal-dialog" "ci=?" "0" "element" "or" "first" "get-title" "get-title~" "localize" "get-name" "get-name~" "result" "car" "null?" "if" "shortcut-key" "let" "get-user-data" "get-user-data~" "optional" "name" "title" "bind" "get-visible?" "get-visible?~" "button" "try-button" "get-host" "dialog" "let*" "return" "lambda" "continuation-capture" "process-keys?" "when" "key")}
        {Lisp-Entry "on-select" method () ("evt") #f #f 155 11 155 20 ("end-modal-dialog" "button:" "get-property" "get-property~" "button" "let" "evt")}
        {Lisp-Entry "process-box" method (public) ("text" "(type: type 'message)" "(title: title #f)" "(size: size #f)" "(icon: icon #f)" "(content: content #f)" "(sound: sound 'default)" "(selection: selection #f)" "(yes: yes #f)" "(no: no #f)" "(cancel: cancel #f)" "(actions: actions '())" "(default-button: default-button #f)" "(process-keys?: process-keys? #t)") #f #f 165 18 165 29 ("process-modal" "process-modal~" "play-sound" "layout-box" "dialog-size" "first" "locate" "set-resource" "set-resource~" "list" "cons" "second" "key:" "member?" "not" "and" "when" "eq?" "if" "or" "get-host" "host" "get-player" "let" "user-content" "user-content~self" "process-keys?~self" "self" "type~self" "set!" "type-info" "close-result" "cancelable?" "default-cancel" "default-no" "default-yes" "default-sound" "default-icon" "default-title" "bind" "Image-Resource" "else" "case" "icon-resource" "set-size" "set-size~" "set-position" "set-position~" "set-title" "set-title~" "get-size" "get-size~" "center" "position" "get-desktop" "desktop" "let*" "dialog" "layout-dialog" "define" "process-keys?" "process-keys?:" "default-button" "default-button:" "actions" "actions:" "cancel" "cancel:" "no" "no:" "yes" "yes:" "selection" "selection:" "default" "sound" "sound:" "content" "content:" "icon" "icon:" "size" "size:" "title" "title:" "message" "type" "type:" "text")}
        {Lisp-Entry "Left-Padding" definition () () #f #f 225 14 225 26 ("2")}
        {Lisp-Entry "Top-Padding" definition () () #f #f 228 14 228 25 ("0")}
        {Lisp-Entry "Content-Spacing" definition () () #f #f 231 14 231 29 ("10")}
        {Lisp-Entry "Buttons-Spacing" definition () () #f #f 234 14 234 29 ("6")}
        {Lisp-Entry "layout-box" method (protected virtual) ("text" "selection" "title" "size" "icon" "content" "actions" "default") #f #f 238 29 238 39 ("10" "center" "solid" "set-border-type" "set-border-type~" ">" "overflow?" "set-icon" "set-icon~" "58" "dialog-height" "68" "dialog-width" "2" "Content-Spacing" "get-left" "get-left~" "set-parent" "set-parent~" "get-bottom" "get-bottom~" "bottom" "200" "36" "get-visible-height" "get-visible-height~" "text-height" "100" "500" "208" "compute-width" "compute-width~" "min" "if" "set-selection" "set-selection~" "set-text" "set-text~" "Top-Padding" "Left-Padding" "1" "height" "size-border" "border" "border-view" "scroller" "scroller-view" "get-model" "get-model~" "text-model" "text-view" "locate" "icon-view" "+" "set-position" "set-position~" "get-visible?" "get-visible?~" "position-button" "let" "v" "h" "position-buttons" "default-button" "get-output" "get-output~" "action-buttons" "set!" "for-each" "put" "put~" "Buttons-Spacing" "/=" "when" "get-height" "get-height~" "set-size" "set-size~" "get-width" "get-width~" "max" "width" "preferred-size" "preferred-size~" "localize" "set-title" "set-title~" "eq?" "default?:" "action-handler:" "user-data:" "size:" "72" "75" "*" "Point" "position:" "self" "parent:" "name:" "Push-Button" "button" "button:" "list" "properties:" "on-select" "method-name:" ":guest" "target-name:" "Event-Handler" "handler" "increase!" "shortcut-key" "button-name" "bind" "action" "lambda" "setup-button" "List-Factory" "fact" "count" "24" "80" "Dimension" "new" "0" "buttons-width" "let*" "setup-buttons" "define" "default" "actions" "content" "icon" "size" "title" "selection" "text")}}
      {Lisp-Entry "Message-Text-View" class () ((extends . "Formatted-Text-View")) #f #f 312 7 312 24 ("Formatted-Text-View")
        {Lisp-Entry "client" property () ((accessors . "generate")) #f #f 315 12 315 18 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 315 29 315 37 ()}
        {Lisp-Entry "set-client" accessor () () #f #f 315 29 315 37 ()}
        {Lisp-Entry "new-model" method (override) () #f #f 318 20 318 29 ("wrap?:" "Formatted-Text-Model" "new")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 322 20 322 36 ("new-text-context-menu")}
        {Lisp-Entry "return-press" method (override) ("key") #f #f 326 20 326 32 ("client" "process-return" "process-return~" "key")}
        {Lisp-Entry "escape-press" method (override) ("key") #f #f 330 20 330 32 ("client" "process-escape" "process-escape~" "key")}
        {Lisp-Entry "key-press" method (override) ("key") #f #f 334 20 334 29 ("client" "process-key" "process-key~" "key")}}}})
"Minibuffer-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Minibuffer-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Minibuffer-Preferences" module (protected) () #f #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Minibuffer-Preferences" class () ((extends . "Splitter-Preferences")) #f #f 44 7 44 29 ("Splitter-Preferences")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 (":minibuffer" "model:" "second" "location:" "Toolbar-Preferences" "<Toolbar-Preferences>" "first" "target:" "zoom" "state:" "vert" "orientation:" "-17" "division:" "edge" "separator:" "install" "<install>")}}}})
"Minibuffer-Toolbar"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Minibuffer-Toolbar.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Minibuffer-Toolbar" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Minibuffer-Toolbar" class () ((extends . "Toolbar")) #f #f 44 7 44 25 ("Toolbar")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("top-padding:" "1" "left-padding:" "text" "content" "scroller" "!" "<!>" "command-shell" "name:" "Command-Shell" "<Command-Shell>" "0" "Rect" "layout-insets:" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 55 25 55 35 ()}}}})
"Moniker-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "widget" "Moniker-Text-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.widget.Moniker-Text-View" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ide")}
      {Lisp-Entry "Moniker-Text-View" class (undocumented) ((extends . "IDE-Text-View")) #f #f 43 20 43 37 ("IDE-Text-View")
        {Lisp-Entry "get-scroll-context" method (override) () #f #f 46 20 46 38 ("0" "cons")}}}})
"Moniker-Widget"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "widget" "Moniker-Widget.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.ui.widget.Moniker-Widget" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.io.protocol" "jazz.io")}
      {Lisp-Entry "Moniker-Widget" class () ((extends . "Combo-Text")) #f #f 49 7 49 21 ("file" "explicit" "open" "Combo-Text")
        {Lisp-Entry "mode" property () ((initialize . "'open") (accessors . "explicit")) #f #f 52 12 52 16 ()}
        {Lisp-Entry "protocol" property () ((initialize . "'file") (accessors . "generate")) #f #f 53 12 53 20 ()}
        {Lisp-Entry "get-protocol" accessor () () #f #f 53 62 53 70 ()}
        {Lisp-Entry "set-protocol" accessor () () #f #f 53 62 53 70 ()}
        {Lisp-Entry "parameters" property () ((initialize . "'()") (accessors . "generate")) #f #f 54 12 54 22 ()}
        {Lisp-Entry "get-parameters" accessor () () #f #f 54 62 54 70 ()}
        {Lisp-Entry "set-parameters" accessor () () #f #f 54 62 54 70 ()}
        {Lisp-Entry "display-logical?" property () ((accessors . "generate")) #f #f 55 12 55 28 ()}
        {Lisp-Entry "get-display-logical?" accessor () () #f #f 55 62 55 70 ()}
        {Lisp-Entry "set-display-logical?" accessor () () #f #f 55 62 55 70 ()}
        {Lisp-Entry "display-protocol?" property () ((accessors . "generate")) #f #f 56 12 56 29 ()}
        {Lisp-Entry "get-display-protocol?" accessor () () #f #f 56 62 56 70 ()}
        {Lisp-Entry "set-display-protocol?" accessor () () #f #f 56 62 56 70 ()}
        {Lisp-Entry "anchors" property () ((initialize . "#f") (accessors . "generate")) #f #f 57 12 57 19 ()}
        {Lisp-Entry "get-anchors" accessor () () #f #f 57 62 57 70 ()}
        {Lisp-Entry "set-anchors" accessor () () #f #f 57 62 57 70 ()}
        {Lisp-Entry "moniker-update-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 58 12 58 34 ()}
        {Lisp-Entry "get-moniker-update-handler" accessor () () #f #f 58 62 58 70 ()}
        {Lisp-Entry "set-moniker-update-handler" accessor () () #f #f 58 62 58 70 ()}
        {Lisp-Entry "form" form () () #f #f 61 3 61 7 ("on-browse" "action-handler:" "Image-Resource" "resource:" ":images" "portfolio:" "pick" "on-receive-files" "receive-files-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "body" "content" "scroller" "name:" "!" "<!>" "editable?:" "selectable?:" "choose" "kind:" "install" "<install>")}
        {Lisp-Entry "on-browse" method () ("evt") #f #f 74 11 74 20 ("browse-moniker" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 78 20 78 35 ("self" "invoke-handler" "return-press-handler" "when" "evt")}
        {Lisp-Entry "on-receive-files" method () ("evt") #f #f 83 11 83 27 ("bell" "set-moniker" "car" "is?" "1" "length" "=" "and" "protocol" "get-protocol-handler" "handler" ":receive-files" "Event" "new" "self" "invoke-handler" "receive-files-handler" "if" "files:" "files" "position:" "get-property" "get-property~" "pos" "let" "evt")}
        {Lisp-Entry "get-mode" method (public) () #f #f 100 18 100 26 ("mode")}
        {Lisp-Entry "set-mode" method (public) ("value") #f #f 104 18 104 26 ("save" "Image-Resource" "set-resource" "set-resource~" "open" "case" "get-pick" "browse" "let" "mode" "set!" "value")}
        {Lisp-Entry "call-moniker-update" method (public) () #f #f 112 18 112 37 ("moniker-update" ":update" "Event" "new" "self" "invoke-handler" "moniker-update-handler" "if")}
        {Lisp-Entry "browse-moniker" method (public) () #f #f 123 18 123 32 ("focus-body" "set-moniker" "moniker-modal" "apply" "moniker" "parameters" "actual:" "mode" "mode:" "augment" "arguments" "actual" "protocol" "get-protocol-handler" "handler" "let*" "get-moniker" "throw-cancel" "get-message" "get-message~" "message-box" "err" "Parse-Error" "catch" "get-moniker-safe" "define")}
        {Lisp-Entry "get-moniker" method (public) () #f #f 143 18 143 29 ("else" "Pathname" "Directory-Group" "typecase" "moniker" "read-delimited-string" "arguments" "receive" "anchors" "anchors:" "moniker-new" "anchorize" "anchorize~" "tokenise-filename" "list" "parts" "get-protocol-handler" "handler" "alias-displayed?" "empty-string?" "unless" "get-content" "string-length" "1" "+" "substring" "assert" "find" "pos" "let" "protocol" "values" "protocol-displayed?" "not" "if" "string" "parse-protocol" "define")}
        {Lisp-Entry "set-moniker" method (public) ("moniker" "(generate-event?: generate-event? #t)") #f #f 167 18 167 29 ("call-moniker-update" "when" "present-moniker" "not" "if" "set-content" "generate-event?" "generate-event?:" "moniker")}
        {Lisp-Entry "moniker-update" method (protected virtual) () #f #f 173 29 173 43 ()}
        {Lisp-Entry "present-moniker" method (public) ("moniker") #f #f 177 18 177 33 ("class-of" "get-protocol" "get-protocol~" "format" "else" "present" "present~" "protocol-displayed?" "->string" "parse" "parse~" "Pathname" "is?" "if" "alias-displayed?" "not" "cond" "moniker")}
        {Lisp-Entry "alias-displayed?" method () () #f #f 192 11 192 27 ("get-application" "display-aliases?" "display-aliases?~" "display-logical?" "unspecified?" "if")}
        {Lisp-Entry "protocol-displayed?" method () () #f #f 198 11 198 30 ("get-application" "display-protocol?~" "display-protocol?" "unspecified?" "if")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 209 25 209 45 ("Moniker-Widget-Descriptor" "new")}}
      {Lisp-Entry "get-protocol-handler" definition (public) ("protocol") #f #f 218 20 218 40 ("format" "message:" "Parse-Error" "new" "signal" "else" "Manifest" "manifest" "Directory-Group" "group" "Directory" "dir" "File" "file" "keyword->symbol" "keyword?" "if" "case" "protocol")}
      {Lisp-Entry "design" submodule () () #f #f 232 11 232 17 ()
        {Lisp-Entry "import" import () () #f #f 235 1 235 7 ("jazz.designer")}
        {Lisp-Entry "Moniker-Widget-Descriptor" class () ((extends . "View-Descriptor")) #f #f 238 7 238 32 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 241 3 241 7 ("handler" "category:" "moniker-update-handler" "anchors" "display-protocol?" "display-logical?" "parameters" "protocol" "title:" "mode" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Mouse-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Mouse-Event.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.event.Mouse-Event" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Mouse-Event" class () ((extends . "Event")) #f #f 43 7 43 18 ("Event")
        {Lisp-Entry "position" slot () ((getter . "generate")) #f #f 46 8 46 16 ()}
        {Lisp-Entry "get-position" accessor () () #f #f 46 24 46 32 ()}
        {Lisp-Entry "initialize" method (override) ("kind" "sender" "pos") #f #f 49 20 49 30 ("position" "set!" "nextmethod" "pos" "sender" "kind")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 54 20 54 25 ("position" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-h" method (public) () #f #f 65 18 65 23 ("position" "get-h" "get-h~")}
        {Lisp-Entry "get-v" method (public) () #f #f 69 18 69 23 ("position" "get-v" "get-v~")}}}})
"Name-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Name-Text-View.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.text.Name-Text-View" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Name-Text-View" class () ((extends . "Plain-Text-View")) #f #f 43 7 43 21 ("Plain-Text-View")
        {Lisp-Entry "new-model" method (override) () #f #f 46 20 46 29 ("top-padding:" "2" "left-padding:" "Text-Base" "Text-Style" "base-style:" "Text-Model" "new")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 50 20 50 36 ("new-text-context-menu")}}}})
"Navigable-Results"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Navigable-Results.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.search.Navigable-Results" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Navigable-Results" class (undocumented) ((extends . "Layout-View")) #f #f 46 20 46 37 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("on-return-press" "return-press-handler:" "on-double-click" ":form" "double-click-handler:" "row" "selection-mode:" "results" "Tree-View" "<Tree-View>" "header" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "tool" "style:" "hscroll?:" "vscroll?:" "center" "scroller" "Scroller-View" "<Scroller-View>" "on-edit-selection" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "edit" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "400" "650" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 60 20 60 26 ("get-tree" "invalidate-columns" "invalidate-columns~" "nextmethod" "rest")}
        {Lisp-Entry "get-tools-view" method (override) () #f #f 70 20 70 34 ("tools" "locate")}
        {Lisp-Entry "host-activated" method () () #f #f 74 11 74 25 ("self" "set-active-results" "set-active-results~" "get-application" "appl" "let")}
        {Lisp-Entry "get-tree" method (public) () #f #f 84 18 84 26 ("results" "locate")}
        {Lisp-Entry "on-double-click" method () ("evt") #f #f 93 11 93 26 ("forward" "edit-selection" "results" "get-name" "get-name~" "case" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 100 20 100 35 ("forward" "edit-selection" "evt")}
        {Lisp-Entry "on-edit-selection" method () ("evt") #f #f 104 11 104 28 ("forward" "edit-selection" "evt")}
        {Lisp-Entry "clear-results" method (public) () #f #f 113 18 113 31 ("get-tree" "remove-every-row" "remove-every-row~")}
        {Lisp-Entry "edit-next" method (public) () #f #f 122 18 122 27 ("forward" "edit-selection" "update-view" "update-view~" "list" "set-selection" "set-selection~" "begin" "not" "if" "next-editable" "rank" "last" "not-null?" "and" "current" "get-selection" "get-selection~" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "edit-previous" method (public) () #f #f 137 18 137 31 ("backward" "edit-selection" "list" "set-selection" "set-selection~" "begin" "not" "if" "previous-editable" "rank" "car" "not-null?" "and" "current" "get-selection" "get-selection~" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "edit-current" method (public) () #f #f 151 18 151 30 ("forward" "edit-selection")}
        {Lisp-Entry "edit-selection" method (protected virtual) ("select") #f #f 155 29 155 43 ("select")}
        {Lisp-Entry "editable-row?" method (protected virtual) ("user-data") #f #f 159 29 159 42 ("user-data")}
        {Lisp-Entry "next-editable" method () ("current") #f #f 163 11 163 24 ("increase!" "continuation-return" "get-user-data" "get-user-data~" "editable-row?" "get-row" "get-row~" "row" "let" "<" "while" "return" "lambda" "continuation-capture" "0" "1" "+" "if" "rank" "get-visible-count" "get-visible-count~" "count" "get-tree" "tree" "let*" "current")}
        {Lisp-Entry "previous-editable" method () ("current") #f #f 177 11 177 28 ("decrease!" "continuation-return" "get-user-data" "get-user-data~" "editable-row?" "get-row" "get-row~" "row" "let" "0" ">=" "while" "return" "lambda" "continuation-capture" "1" "-" "if" "rank" "get-visible-count" "get-visible-count~" "count" "get-tree" "tree" "let*" "current")}
        {Lisp-Entry "select-resultset" method (public) () #f #f 191 18 191 34 ("acquire-focus" "acquire-focus~" "get-tree" "tree" "let" "get-application" "get-active?" "get-active?~" "when")}
        {Lisp-Entry "select-first" method (public) () #f #f 197 18 197 30 ("list" "set-selection" "set-selection~" "bell" "not" "if" "next-editable" "rank" "get-tree" "tree" "let")}}}})
"NewFile-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "NewFile-Request.jazz"} 241772258. jazz
    {Lisp-Entry "jazz.ui.dialog.NewFile-Request" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.io" "jazz.graphic")}
      {Lisp-Entry "NewFile-Request" class (undocumented) ((extends . "Pathname-Request")) #f #f 48 20 48 35 ("Pathname-Request")
        {Lisp-Entry "form" form () () #f #f 51 3 51 7 ("title:" "ok" "on-content-change" "content-change-handler:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "filename" "Name-Text-View" "<Name-Text-View>" "content" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "Entry-Border" "Color" "border-color:" "solid" "border-type:" "Border-View" "<Border-View>" "22" "288" "3" "Rect" "layout-insets:" "fill" "layout-type:" "Layout-View" "<Layout-View>" "0" "4" "Dimension" "size:" "Separator" "<Separator>" "buttonbar" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 63 25 63 35 ()}
        {Lisp-Entry "initial-filename" property () ((initialize . "#f")) #f #f 67 12 67 28 ()}
        {Lisp-Entry "default-extension" property () ((initialize . "#f")) #f #f 68 12 68 29 ()}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 71 20 71 26 ("update-buttons" "select-all" "select-all~" "set-string-content" "set-string-content~" "1" "cardinality" "-" "0" "subseq" "concatenate" "ends-with?" "default-extension" "and" "if" "content" "filename" "locate" "text" "let" "initial-filename" "when" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method (override) () #f #f 84 20 84 33 ("filename" "locate" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "get-tab-stops" method (override) () #f #f 93 20 93 33 ("filename" "locate" "get-tree" "list")}
        {Lisp-Entry "update" method (override) () #f #f 104 20 104 26 ("update-buttons" "update-filename" "update-content" "update-history" "update-hierarchy")}
        {Lisp-Entry "update-content" method (override) () #f #f 112 20 112 34 ("for-each" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "add-pathname" "pathname" "add" "define" "get-tree" "tree" "files" "leaves?:" "nodes?:" "directory" "get-content" "get-content~" "directories" "let")}
        {Lisp-Entry "update-filename" method () () #f #f 126 11 126 26 ("filename" "locate" "set-string-content" "set-string-content~")}
        {Lisp-Entry "update-buttons" method (override) () #f #f 130 20 130 34 ("get-string-content" "get-string-content~" "empty-string?" "not" "ok" "set-enabled?" "set-enabled?~" "filename" "locate" "text" "let" "nextmethod")}
        {Lisp-Entry "validate-dialog" method (override) () #f #f 141 20 141 35 ("throw-cancel" "cancel" "no" "memq?" "confirmation" "type:" "parse" "parse~" "format" "message-box" "code" "exists?" "exists?~" "when" "get-newfile" "newfile" "let")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 150 20 150 36 ("get-newfile" "directory" "set-current-directory")}
        {Lisp-Entry "get-newfile" method () () #f #f 155 11 155 22 ("directory" "new-file" "new-file~" "anchorize" "concatenate" "search" "not" "default-extension" "and" "if" "filename" "locate" "get-string-content" "get-string-content~" "content" "let")}
        {Lisp-Entry "selection-change" method (override) () #f #f 169 20 169 36 ("update-buttons" "get-name" "get-name~" "filename" "locate" "set-string-content" "set-string-content~" "file?" "when" "selected-pathname" "pathname" "let")}
        {Lisp-Entry "on-content-change" method () ("evt") #f #f 176 11 176 28 ("update-buttons" "evt")}
        {Lisp-Entry "default-action" method (override) () #f #f 180 20 180 34 ("get-modal-result" "get-host" "end-modal" "end-modal~" "ok-enabled?" "down" "directory?" "cond" "selected-pathname" "pathname" "let")}}}})
"Note-Widget"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "widget" "Note-Widget.jazz"} 244260909. jazz
    {Lisp-Entry "jazz.ui.widget.Note-Widget" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Note-Widget" class () ((extends . "Layout-View")) #f #f 45 7 45 18 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Label-Bold" "Font" "font:" "text" "name:" "Note-Text-View" "<Note-Text-View>" "center" "layout-type:" "Tooltip" "Color" "background:" "150" "300" "Dimension" "size:" "install" "<install>")}}
      {Lisp-Entry "Note-Text-View" class () ((extends . "Plain-Text-View")) #f #f 58 7 58 21 ("Plain-Text-View")
        {Lisp-Entry "dynamic-scrollee?" method (override) () #f #f 61 20 61 37 ()}
        {Lisp-Entry "dynamic-set-scrollee-size" method (override) () #f #f 65 20 65 45 ("parent" "layout-view" "layout-view~" "50" "Dimension" "scrollee-size" "dimension-max" "set-size")}
        {Lisp-Entry "dynamic-scrollee-width?" method (override) () #f #f 70 20 70 43 ()}}}})
"Orphaned-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "action" "Orphaned-Actions.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.action.Orphaned-Actions" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Orphaned-Actions" class () ((extends . "Actions")) #f #f 43 7 43 23 ("Actions")
        {Lisp-Entry "actions-orphaned?" method (override) () #f #f 51 20 51 37 ()}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 60 25 60 45 ("Orphaned-Actions-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 69 11 69 17 ()
        {Lisp-Entry "import" import () () #f #f 72 1 72 7 ("jazz.designer")}
        {Lisp-Entry "Orphaned-Actions-Descriptor" class () ((extends . "Actions-Descriptor")) #f #f 75 7 75 34 ("Actions-Descriptor")}}}})
"Outline-Model"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "outline" "Outline-Model.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.outline.Outline-Model" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.jml")}
      {Lisp-Entry "Outline-Model" class () ((extends . "View")) #f #f 45 7 45 20 ("explicit" "0" "17" "View")
        {Lisp-Entry "default-row-height" property (protected) ((initialize . "17") (accessors . "generate")) #f "<fx>" 57 22 57 40 ("fx" "<fx>")}
        {Lisp-Entry "get-default-row-height" accessor () () #f #f 57 70 57 78 ()}
        {Lisp-Entry "set-default-row-height" accessor () () #f #f 57 70 57 78 ()}
        {Lisp-Entry "row-spacing" property (protected) ((initialize . "0") (accessors . "explicit")) #f "<fx>" 58 22 58 33 ("fx" "<fx>")}
        {Lisp-Entry "left-padding" property (protected) ((initialize . "0") (accessors . "explicit")) #f "<fx>" 59 22 59 34 ("fx" "<fx>")}
        {Lisp-Entry "top-padding" property (protected) ((initialize . "0") (accessors . "explicit")) #f "<fx>" 60 22 60 33 ("fx" "<fx>")}
        {Lisp-Entry "background-filler" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 61 22 61 39 ()}
        {Lisp-Entry "root-row" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 64 18 64 26 ()}
        {Lisp-Entry "get-root-row" accessor () () #f #f 64 67 64 75 ()}
        {Lisp-Entry "visible-count" slot (protected) ((initialize . "0") (getter . "generate")) #f "<fx>" 65 18 65 31 ("fx" "<fx>")}
        {Lisp-Entry "get-visible-count" accessor () () #f #f 65 67 65 75 ()}
        {Lisp-Entry "visible-height" slot (protected) ((initialize . "0") (getter . "generate")) #f "<fx>" 66 18 66 32 ("fx" "<fx>")}
        {Lisp-Entry "get-visible-height" accessor () () #f #f 66 67 66 75 ()}
        {Lisp-Entry "visible-width" slot (protected) ((initialize . "0") (getter . "generate")) #f "<fx>" 67 18 67 31 ("fx" "<fx>")}
        {Lisp-Entry "get-visible-width" accessor () () #f #f 67 67 67 75 ()}
        {Lisp-Entry "clients" slot (protected) ((initialize . "'()")) #f #f 68 18 68 25 ()}
        {Lisp-Entry "install" method (override) ("rest") #f #f 76 20 76 27 ("setup-outline" "nextmethod" "rest")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 81 20 81 26 ("layout-scrollee" "nextmethod" "rest")}
        {Lisp-Entry "set-player" method (override) ("plr") #f #f 86 20 86 30 ("set-player" "set-player~" "root-row" "nextmethod" "player" "neq?" "when" "plr")}
        {Lisp-Entry "setup-outline" method () () #f #f 93 11 93 24 ("expanded" "set-state" "set-state~" "-1" "set-level" "set-level~" "set-father" "set-father~" "self" "set-parent" "set-parent~" "row-class" "new" "root-row" "set!")}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 106 20 106 31 ("layout-scrollee" "get-finished?" "not" "update-locked?" "or" "unless" "nextmethod" "size")}
        {Lisp-Entry "get-row-spacing" method (public) () #f #f 117 18 117 33 ("row-spacing")}
        {Lisp-Entry "set-row-spacing" method (public) ("spacing") #f #f 121 18 121 33 ("invalidate-view" "update-displayed" "row-spacing" "set!" "spacing")}
        {Lisp-Entry "get-left-padding" method (public) () #f #f 127 18 127 34 ("left-padding")}
        {Lisp-Entry "set-left-padding" method (public) ("padding") #f #f 131 18 131 34 ("invalidate-view" "left-padding" "set!" "padding")}
        {Lisp-Entry "get-top-padding" method (public) () #f #f 136 18 136 33 ("top-padding")}
        {Lisp-Entry "set-top-padding" method (public) ("padding") #f #f 140 18 140 33 ("invalidate-view" "top-padding" "set!" "padding")}
        {Lisp-Entry "get-background-filler" method (public) () #f #f 145 18 145 39 ("background-filler")}
        {Lisp-Entry "set-background-filler" method (public) ("value") #f #f 149 18 149 39 ("invalidate-view" "background-filler" "set!" "value")}
        {Lisp-Entry "get-expand-state" method (public) ("(include-invisibles?: include-invisibles? #f)") #f #f 159 18 159 34 ("List" "type:" "collect" "cons" "expanded" "eq?" "0" "cardinality" ">" "and" "or" "get-sons" "get-sons~" "sons" "get-state" "get-state~" "state" "first-child" "first-child~" "get-title" "get-title~" "title" "let" "row" "lambda" "proc" "letrec" "root-row" "when" "include-invisibles?" "include-invisibles?:")}
        {Lisp-Entry "set-expand-state" method (public) ("state") #f #f 173 18 173 34 ("for-each" "collapse-all-deep" "root-row" "lambda" "iterate" "update-row" "dynamic" "and" "expand/collapse" "unless" "expanded" "eq?" "if" "get-state" "get-state~" "actual" "when" "find-by-title" "find-by-title~" "subrow" "let" "children" "title" "bind" "info" "row" "set-state" "define" "state")}
        {Lisp-Entry "expand-spine" method (public) ("spine") #f #f 200 18 200 30 ("if" "expand/collapse" "null?" "expanded" "eq?" "or" "unless" "get-state" "get-state~" "actual" "find-by-title" "find-by-title~" "subrow" "let" "subspine" "title" "bind" "row" "lambda" "proc" "letrec" "root-row" "when" "spine")}
        {Lisp-Entry "layout-scrollee-content" method (override) () #f #f 221 20 221 43 ("row-spacing" "increase!" "set!" "Dimension" "set-size" "set-size~" "Point" "new" "set-position" "set-position~" "+" "rb" "effective-row-height" "effective-row-height~" "height" "let*" "while" "top-padding" "rt" "root-row" "get-next" "get-next~" "row" "left-padding" "get-width" "-" "width" "let" "layout-rows" "define")}
        {Lisp-Entry "scrollee-width" method (override) () #f #f 243 20 243 34 ("visible-width" "left-padding" "+")}
        {Lisp-Entry "scrollee-height" method (override) () #f #f 247 20 247 35 ("visible-height" "top-padding" "+")}
        {Lisp-Entry "scrollee-content-size" method () () #f #f 251 11 251 32 ("scrollee-content-height" "scrollee-content-width" "Dimension" "new")}
        {Lisp-Entry "scrollee-content-width" method (public virtual) () #f #f 255 26 255 48 ("visible-width" "left-padding" "+")}
        {Lisp-Entry "scrollee-content-height" method (public virtual) () #f #f 259 26 259 49 ("visible-height" "top-padding" "+")}
        {Lisp-Entry "invalidate-update" method (override) () #f #f 268 20 268 37 ("layout-scrollee" "update-visible")}
        {Lisp-Entry "update-visible" method (public virtual) () #f #f 273 26 273 40 ()}
        {Lisp-Entry "draw-outline" method (protected virtual) ("surface" "context" "outline" "scrolled-v") #f #f 282 29 282 41 ("draw-empty" "row-spacing" "get-next" "get-next~" "set!" "increase!" ">=" "when" "rb" "get-height" "get-height~" "height" "let*" "<" "and" "while" "get-width" "width" "get-first-displayed-offset" "get-first-displayed-offset~" "top-padding" "-" "+" "rt" "get-first-displayed-line" "get-first-displayed-line~" "fx" "<fx>" "get-first-displayed" "get-first-displayed~" "get-bottom" "get-bottom~" "bottom" "get-top" "get-top~" "top" "get-clipper" "get-clipper~" "clipper" "paint-content" "paint-content~" "line:" "selected?:" "cons" "new-context" "effective-font" "set-font" "set-font~" "line-draw-selected?" "selected?" "let" "line" "row" "draw-row" "define" "scrolled-v" "outline" "context" "surface")}
        {Lisp-Entry "draw-empty" method (protected virtual) ("surface" "top" "bottom" "rt" "width") #f #f 308 29 308 39 ("width" "rt" "bottom" "top" "surface")}
        {Lisp-Entry "row-class" method (protected virtual) () #f #f 317 29 317 38 ("Outline-Row")}
        {Lisp-Entry "add-row" method (public) ("." "rest") #f #f 321 18 321 25 ("update-father-control" "add-row-scroll" "add-row-scroll~" "for-each-client" "layout-scrollee" "update-visible" "update-displayed" "get-effective-width" "get-effective-width~" "update-visible-width-incremental" "visible-height" "node-height" "node-height~" "height" "let" "update-locked?" "not" "count-visible" "count-visible~" "visible-count" "increase!" "row-visible?" "row-visible?~" "when" "add-son" "add-son~" "set-descendants-level" "set-descendants-level~" "default-row-height" "set-height-noevent" "set-height-noevent~" "self" "parent:" "new" "apply" "1" "get-level" "get-level~" "+" "level" "root-row" "or" "let*" "others" "position" "father" "row" "row-class" "class" "bind-keywords" "rest")}
        {Lisp-Entry "update-visible-width-incremental" method (protected virtual) ("level" "width") #f #f 344 29 344 61 ("width" "level")}
        {Lisp-Entry "remove-row" method (public virtual) ("row") #f #f 348 26 348 36 ("update-father-control" "detach-descendants" "detach-descendants~" "remove-row-scroll" "remove-row-scroll~" "for-each-client" "layout-scrollee" "update-visible" "update-displayed" "update-locked?" "not" "removed-update-selection" "collapsed" "set-state" "set-state~" "0" "get-sons" "get-sons~" "cardinality" "=" "remove-son" "remove-son~" "visible-height" "count-visible" "count-visible~" "1" "+" "visible-count" "decrease!" "row-top" "and" "top" "row->line" "line" "node-height" "node-height~" "height" "row-visible?" "row-visible?~" "visible?" "get-father" "get-father~" "father" "let*" "attached?" "attached?~" "when" "row")}
        {Lisp-Entry "move-row" method (public) ("row" "father" "(position: position #f)") #f #f 374 18 374 26 ("father:" "row:" "add-row" "procedure?" "if" "let" "remove-row" "position" "position:" "father" "row")}
        {Lisp-Entry "find-ordered-position" method (public) ("title" "father") #f #f 380 18 380 39 ("smaller/equal" "sort-predicate" "test:" "row-title" "key:" "get-sons" "get-sons~" "ordered-position" "0" "not" "if" "father" "title")}
        {Lisp-Entry "remove-every-row" method (public virtual) () #f #f 386 26 386 42 ("remove-every-row" "remove-every-row~" "for-each-client" "visible-width" "visible-height" "0" "visible-count" "set!")}
        {Lisp-Entry "update-father-control" method (protected virtual) ("father") #f #f 393 29 393 50 ("update-father-control" "update-father-control~" "view" "lambda" "for-each-client" "father")}
        {Lisp-Entry "update-displayed" method (override) () #f #f 399 20 399 36 ("update-displayed" "update-displayed~" "for-each-client")}
        {Lisp-Entry "update-displayed-from" method (protected) ("line") #f #f 403 21 403 42 ("update-displayed-from" "update-displayed-from~" "client" "lambda" "for-each-client" "line")}
        {Lisp-Entry "first-row" method (public) () #f #f 409 18 409 27 ("root-row" "get-sons" "get-sons~" "first")}
        {Lisp-Entry "get-root-rows" method (public) () #f #f 413 18 413 31 ("root-row" "get-sons" "get-sons~")}
        {Lisp-Entry "first-visible-row" method (public) () #f #f 417 18 417 35 ("root-row" "get-next" "get-next~")}
        {Lisp-Entry "get-visible-row" method (public) ("l") #f #f 421 18 421 33 ("continuation-return" "=" "when" "line" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "l")}
        {Lisp-Entry "get-row-classic" method () ("line") #f #f 432 11 432 26 ("decrease!" "get-next" "get-next~" "set!" "0" ">=" "and" "while" "root-row" "row" "let" "line")}
        {Lisp-Entry "row->line" method (public) ("target") #f #f 440 18 440 27 ("continuation-return" "eq?" "when" "line" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "target")}
        {Lisp-Entry "rows->lines" method (public) ("targets") #f #f 450 18 450 29 ("row->line" "map" "targets")}
        {Lisp-Entry "row-title" method (public) ("row") #f #f 454 18 454 27 ("first-child" "first-child~" "get-title" "get-title~" "row")}
        {Lisp-Entry "forward" method () ("row" "line") #f #f 458 11 458 18 ("decrease!" "get-next" "get-next~" "set!" "0" ">" "while" "line" "row")}
        {Lisp-Entry "backward" method () ("row" "line") #f #f 465 11 465 19 ("decrease!" "get-previous" "get-previous~" "set!" "0" ">" "while" "line" "row")}
        {Lisp-Entry "ensure-row-exists" method (public) ("row") #f #f 472 18 472 35 ("1" "+" "ensure-visible-count" "row")}
        {Lisp-Entry "ensure-visible-count" method (public) ("line") #f #f 476 18 476 38 ("add-empty-row" "visible-count" "<" "while" "line")}
        {Lisp-Entry "add-empty-row" method (public virtual) ("(father: father #f)") #f #f 481 26 481 39 ("add-row" "root-row" "or" "let" "father" "father:")}
        {Lisp-Entry "get-row-count" method (public) () #f #f 486 18 486 31 ("get-sons" "get-sons~" "cardinality" "0" "root-row" "not" "if")}
        {Lisp-Entry "for-each-row" method (public) ("proc") #f #f 497 18 497 30 ("root-row" "lambda" "get-sons" "get-sons~" "iterate" "recurse-sons" "increase!" "when" "expanded?" "expanded?~" "son-visible?" "get-visible-flag" "get-visible-flag~" "and" "let*" "visible?" "row" "recurse" "define" "0" "line" "let" "proc")}
        {Lisp-Entry "for-each-visible-row" method (public) ("proc" "(start: start #f)" "(end: end #f)" "(wrap?: wrap? #f)") #f #f 515 18 515 38 ("for-each-visible-row" "not" "increase!" "set!" "neq?" "and" "while" "when" "0" "row->line" "if" "line" "root-row" "get-next" "get-next~" "or" "row" "let" "wrap?" "wrap?:" "end" "end:" "start" "start:" "proc")}
        {Lisp-Entry "for-each-visible-descendant" method (public) ("parent-row" "proc") #f #f 527 18 527 45 ("end:" "start:" "for-each-visible-row" "when" "get-next" "get-next~" "and" "end-row" "last-visible-descendant" "last-visible-descendant~" "last-son" "first-visible-son" "first-visible-son~" "first-son" "let*" "proc" "parent-row")}
        {Lisp-Entry "collect-rows" method (public) () #f #f 535 18 535 30 ("queue-list" "enqueue" "line" "row" "lambda" "for-each-row" "new-queue" "queue" "let")}
        {Lisp-Entry "collect-visible-rows" method (public) () #f #f 543 18 543 38 ("queue-list" "enqueue" "line" "row" "lambda" "for-each-visible-row" "new-queue" "queue" "let")}
        {Lisp-Entry "get-content" method (public virtual) () #f #f 556 26 556 37 ("root-row" "get-sons" "get-sons~")}
        {Lisp-Entry "set-content" method (public virtual) ("content") #f #f 560 26 560 37 ("invalidate-view" "layout-scrollee" "update-displayed" "sons-height" "sons-height~" "visible-height" "count-visible" "count-visible~" "visible-count" "set!" "invalidate-columns" "car" "set-next" "set-next~" "root-row" "set-sons" "set-sons~" "content")}
        {Lisp-Entry "set-subrows" method (public) ("row" "seq" "proc") #f #f 571 18 571 29 ("visible-height" "visible-count" "last-proper-descendant" "last-proper-descendant~" "last" "link-rows" "first" "first-son" "get-next" "get-next~" "old-next" "expanded" "get-state" "get-state~" "eq?" "Axis" "coerce" "and" "set-sons" "set-sons~" "get-row-height" "get-row-height~" "increase!" "set!" "set-next" "set-next~" "set-previous" "set-previous~" "when" "set-level" "set-level~" "set-father" "set-father~" "subrow" "let" "info" "lambda" "map" "rows" "previous" "1" "get-level" "get-level~" "+" "level" "height" "0" "count" "root-row" "or" "let*" "empty?" "unless" "proc" "seq" "row")}
        {Lisp-Entry "invalidate-columns" method (public virtual) () #f #f 602 26 602 44 ()}
        {Lisp-Entry "expand/collapse" method (public virtual) ("row") #f #f 611 26 611 41 ("collapse" "expanded" "expand" "collapsed" "get-state" "get-state~" "case" "row")}
        {Lisp-Entry "update-row" method (protected virtual) ("row") #f #f 617 29 617 39 ("row")}
        {Lisp-Entry "expand" method (public) ("row" "(dynamic? #f)") #f #f 621 18 621 24 ("row-visible?" "row-visible?~" "show-rows" "in-expand?" "get-next" "get-next~" "next" "previous" "last-visible-descendant" "last-visible-descendant~" "last" "first-descendant" "first-descendant~" "first" "let" "set-state" "set-state~" "expanded" "get-state" "get-state~" "neq?" "when" "dynamic?" "row")}
        {Lisp-Entry "invalidate-expand" method (protected virtual) ("row" "top" "dynamic?") #f #f 633 29 633 46 ("dynamic?" "top" "row")}
        {Lisp-Entry "expand-all" method (public) ("row") #f #f 637 18 637 28 ("expand-all" "get-sons" "get-sons~" "iterate" "expand/collapse" "expanded" "get-state" "get-state~" "eq?" "unless" "lambda" "with-update-locked" "row")}
        {Lisp-Entry "collapse" method (public) ("row") #f #f 645 18 645 26 ("row-visible?" "row-visible?~" "last-proper-descendant" "last-proper-descendant~" "hide-rows" "invalidate-collapse" "line-selected?" "selected?" "get-position" "get-position~" "get-v" "get-v~" "top" "row->line" "line" "set-state" "set-state~" "not" "if" "in-collapse?" "first-descendant" "first-descendant~" "first" "let" "collapsed" "get-state" "get-state~" "neq?" "when" "row")}
        {Lisp-Entry "collapse-selection" method (protected virtual) ("line" "selected?") #f #f 658 29 658 47 ("selected?" "line")}
        {Lisp-Entry "invalidate-collapse" method (protected virtual) ("line" "row" "top" "selected?") #f #f 662 29 662 48 ("line-rect" "invalidate-rect" "when" "selected?" "top" "row" "line")}
        {Lisp-Entry "collapse-all" method (public) ("row") #f #f 668 18 668 30 ("expand/collapse" "expanded" "get-state" "get-state~" "eq?" "when" "collapse-all" "get-sons" "get-sons~" "iterate" "lambda" "with-update-locked" "row")}
        {Lisp-Entry "collapse-all-deep" method (public) () #f #f 676 18 676 35 ("root-row" "expand/collapse" "expanded" "get-state" "get-state~" "eq?" "when" "collapse" "get-sons" "get-sons~" "iterate" "row" "collapse-sons" "define" "lambda" "with-update-locked")}
        {Lisp-Entry "link-rows" definition () ("before" "after") #f #f 690 15 690 24 ("set-previous" "set-previous~" "set-next" "set-next~" "when" "after" "before")}
        {Lisp-Entry "unlink-rows" definition () ("first" "last") #f #f 697 15 697 26 ("set-next" "set-next~" "set-previous" "set-previous~" "link-rows" "get-next" "get-next~" "next" "get-previous" "get-previous~" "previous" "let" "last" "first")}
        {Lisp-Entry "ensure-expanded" method (public) ("row") #f #f 705 18 705 33 ("set!" "expand" "collapsed" "get-state" "get-state~" "eq?" "when" "while" "get-father" "get-father~" "scan" "let" "row")}
        {Lisp-Entry "ensure-expanded-rows" method (public) ("rows") #f #f 713 18 713 38 ("ensure-expanded" "for-each" "rows")}
        {Lisp-Entry "set-visibilities" method (public) ("predicate") #f #f 723 18 723 34 ("set!" "link-rows" "when" "visible?" "row" "lambda" "get-sons" "get-sons~" "iterate" "root-row" "previous" "let" "predicate")}
        {Lisp-Entry "show-rows" method (package) ("first" "last" "previous" "next" "visible?" "in-expand?" "dynamic?") #f #f 733 19 733 28 ("ensure-row-range-displayed" ">" "layout-scrollee" "Rect" "Distance" "new" "scroll-view" "scroll-view~" "invalidate-expand" "get-scrolled-v" "<" "invalidate-view" "1" "added-update-selection" "display-height" "get-width" "get-width~" "display-width" "get-size" "get-size~" "display-size" "get-display" "display" "get-height" "get-height~" "+" "opens" "0" "get-position" "get-position~" "get-v" "get-v~" "top" "-1" "row->line" "or" "line" "let*" "update-visible" "update-displayed" "get-level" "get-level~" "update-visible-width-incremental" "visible-height" "visible-count" "increase!" "count-visible-size" "width" "height" "count" "receive" "update-locked?" "not" "and" "when" "link-rows" "dynamic?" "in-expand?" "visible?" "next" "previous" "last" "first")}
        {Lisp-Entry "hide-rows" method (package) ("first" "last" "visible?" "in-collapse?") #f #f 763 19 763 28 ("layout-scrollee" "Rect" "-" "Distance" "new" "scroll-view" "scroll-view~" "invalidate-collapse" "<" "invalidate-view" "collapse-selection" "display-height" "get-width" "get-width~" "display-width" "get-size" "get-size~" "display-size" "get-display" "display" "1" "removed-update-selection" "removed" "get-height" "get-height~" "+" "opens" "0" "get-position" "get-position~" "get-v" "get-v~" "top" "-1" "row->line" "or" "line" "let*" "update-visible" "update-displayed" "update-locked?" "not" "collapsed" "set-state" "set-state~" "and" "unlink-rows" "get-previous" "get-previous~" "previous" "let" "visible-height" "visible-count" "decrease!" "when" "count-visible-size" "width" "height" "count" "receive" "in-collapse?" "visible?" "last" "first")}
        {Lisp-Entry "count-visible-size" method (public) ("first" "last" "visible?") #f #f 793 18 793 36 ("values" "set!" ">" "when" "get-effective-width" "get-effective-width~" "w" "row-spacing" "get-effective-height" "get-effective-height~" "+" "increase!" "neq?" "while" "width" "height" "0" "count" "get-next" "get-next~" "stop" "and" "scan" "let" "visible?" "last" "first")}
        {Lisp-Entry "get-clients" method (public) () #f #f 814 18 814 29 ("clients")}
        {Lisp-Entry "add-client" method (public) ("client") #f #f 818 18 818 28 ("cons" "clients" "set!" "client")}
        {Lisp-Entry "remove-client" method (public) ("client") #f #f 822 18 822 31 ("remove!" "clients" "set!" "client")}
        {Lisp-Entry "for-each-client" method (public) ("proc") #f #f 826 18 826 33 ("clients" "for-each" "proc")}
        {Lisp-Entry "single-client" method (public) () #f #f 831 18 831 31 ("car" "1" "clients" "length" "=" "when")}
        {Lisp-Entry "row-top" method (protected) ("line") #f #f 843 21 843 28 ("get-next" "get-next~" "set!" "row-spacing" "get-height" "get-height~" "increase!" "decrease!" ">" "while" "0" "v" "first-visible-row" "row" "let" "line")}
        {Lisp-Entry "get-row" method (protected) ("n") #f #f 854 21 854 28 ("1" "+" "root-row" "get-row-from" "n")}
        {Lisp-Entry "get-row-from" method (protected) ("row" "n") #f #f 858 21 858 33 ("decrease!" "get-next" "get-next~" "set!" "0" ">" "and" "while" "n" "row")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 870 25 870 45 ("Outline-Model-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 879 11 879 17 ()
        {Lisp-Entry "import" import () () #f #f 882 1 882 7 ("jazz.designer")}
        {Lisp-Entry "Outline-Model-Descriptor" class () ((extends . "View-Descriptor")) #f #f 885 7 885 31 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 888 3 888 7 ("background-filler" "top-padding" "left-padding" "row-spacing" "title:" "default-row-height" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Outline-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "outline" "Outline-Row.jazz"} 245481203. jazz
    {Lisp-Entry "jazz.ui.outline.Outline-Row" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "proclaim" proclaim () () #f #f 45 1 45 9 ("optimizations" "warn")}
      {Lisp-Entry "Outline-Row" class () ((extends . "Drawing")) #f #f 48 7 48 18 ("collapsed" "0" "Axis" "new" "explicit" "Drawing")
        {Lisp-Entry "father" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 51 22 51 28 ()}
        {Lisp-Entry "sons" property (protected) ((initialize . "(new Axis 0)") (accessors . "explicit")) #f "<Axis>" 52 22 52 26 ("Axis" "<Axis>")}
        {Lisp-Entry "level" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 53 22 53 27 ()}
        {Lisp-Entry "state" property (protected) ((initialize . "'collapsed") (accessors . "explicit")) #f #f 54 22 54 27 ()}
        {Lisp-Entry "row-height" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 55 22 55 32 ()}
        {Lisp-Entry "previous" slot (protected) ((initialize . "#f") (accessors . "generate")) #f #f 57 18 57 26 ()}
        {Lisp-Entry "get-previous" accessor () () #f #f 57 51 57 59 ()}
        {Lisp-Entry "set-previous" accessor () () #f #f 57 51 57 59 ()}
        {Lisp-Entry "next" slot (protected) ((initialize . "#f") (accessors . "generate")) #f #f 58 18 58 22 ()}
        {Lisp-Entry "get-next" accessor () () #f #f 58 51 58 59 ()}
        {Lisp-Entry "set-next" accessor () () #f #f 58 51 58 59 ()}
        {Lisp-Entry "initialize-component" method (override) ("rest") #f #f 68 20 68 40 ("rest")}
        {Lisp-Entry "install-in-parent" method (override) () #f #f 72 20 72 37 ()}
        {Lisp-Entry "set-player" method (override) ("plr") #f #f 76 20 76 30 ("set-player" "set-player~" "row" "lambda" "sons" "iterate" "nextmethod" "plr")}
        {Lisp-Entry "set-parent" method (override) ("prt") #f #f 82 20 82 30 ("parent" "set!" "prt")}
        {Lisp-Entry "get-outline-view" method (public inline) () #f #f 91 25 91 41 ("parent")}
        {Lisp-Entry "get-father" method (public inline) () #f #f 95 25 95 35 ("father")}
        {Lisp-Entry "set-father" method (public inline) ("row") #f #f 99 25 99 35 ("father" "set!" "row")}
        {Lisp-Entry "get-sons" method (public inline) () #f #f 103 25 103 33 ("sons")}
        {Lisp-Entry "set-sons" method (public inline) ("s") #f #f 107 25 107 33 ("sons" "set!" "s")}
        {Lisp-Entry "get-level" method (public inline) () #f #f 111 25 111 34 ("level")}
        {Lisp-Entry "set-level" method (public inline) ("lvl") #f #f 115 25 115 34 ("level" "set!" "lvl")}
        {Lisp-Entry "get-state" method (public inline) () #f #f 119 25 119 34 ("state")}
        {Lisp-Entry "set-state" method (public inline) ("s") #f #f 123 25 123 34 ("state" "set!" "s")}
        {Lisp-Entry "get-row-height" method (public inline) () #f #f 127 25 127 39 ("row-height")}
        {Lisp-Entry "set-row-height" method (public inline) ("height") #f #f 131 25 131 39 ("row-height" "set!" "height")}
        {Lisp-Entry "effective-row-height" method (public) () #f #f 135 18 135 38 ("get-outline-view" "get-default-row-height" "get-default-row-height~" "row-height" "or")}
        {Lisp-Entry "increase-row-height" method (public) ("inc") #f #f 139 18 139 37 ("effective-row-height" "+" "row-height" "set!" "inc")}
        {Lisp-Entry "change-father" method (public) ("father-row" "(position: position #f)") #f #f 148 18 148 31 ("get-sons" "get-sons~" "cardinality" "or" "add-son" "add-son~" "set-father" "self" "remove-son" "remove-son~" "father" "when" "position" "position:" "father-row")}
        {Lisp-Entry "for-each-father" method (public) ("proc" "(include-self?: include-self? #f)") #f #f 156 18 156 33 ("for-each-father~" "father" "when" "for-each-father" "self" "begin" "if" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "remove-every-son" method (public) () #f #f 171 18 171 34 ("sons" "gather" "remove-row" "remove-row~" "son" "lambda" "for-each" "get-outline-view" "outline-view" "let")}
        {Lisp-Entry "son-rank" method (public) ("son") #f #f 178 18 178 26 ("sons" "find" "son")}
        {Lisp-Entry "last-son" method (public) () #f #f 182 18 182 26 ("sons" "last")}
        {Lisp-Entry "get-transparent?" method (override) () #f #f 191 20 191 36 ()}
        {Lisp-Entry "expanded?" method (public) () #f #f 200 18 200 27 ("expanded" "state" "eq?")}
        {Lisp-Entry "collapsed?" method (public) () #f #f 204 18 204 28 ("collapsed" "state" "eq?")}
        {Lisp-Entry "expandable?" method (public) () #f #f 208 18 208 29 ("first-visible-son" "dynamic" "state" "eq?" "or")}
        {Lisp-Entry "collapsable?" method (public) () #f #f 213 18 213 30 ("expanded" "state" "eq?")}
        {Lisp-Entry "set-descendants-level" method (protected) ("lvl" "<fx>") #f #f 222 21 222 42 ("sons" "1" "+" "set-descendants-level" "set-descendants-level~" "son" "lambda" "for-each" "level" "set!" "fx" "<fx>" "lvl")}
        {Lisp-Entry "get-effective-width" method (public virtual) () #f #f 234 26 234 45 ("get-width")}
        {Lisp-Entry "get-effective-height" method (public) () #f #f 238 18 238 38 ("get-height" "row-height" "or")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 247 20 247 24 ("draw-selection" "selected?:" "getf" "when" "nextmethod" "context" "surface")}
        {Lisp-Entry "draw-selection" method (protected virtual) ("surface" "<Surface>") #f #f 253 29 253 43 ("Light-Gray" "Black" "Color" "frame-rect" "frame-rect~" "-1" "inflate-rect" "inner" "get-bounds" "outer" "let*" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "show" method (override) () #f #f 265 20 265 24 ("link" "show-rows" "show-rows~" "visible-in-father?" "visible?" "let" "parent" "nextmethod" "first-visible-son" "first-visible-son~" "father" "and" "get-next" "get-next~" "if" "next" "self" "previous-visible-row" "previous" "last-descendant" "last" "let*" "get-visible-flag" "unless")}
        {Lisp-Entry "hide" method (override) () #f #f 280 20 280 24 ("unlink" "visible-in-father?" "hide-rows" "hide-rows~" "parent" "if" "nextmethod" "self" "last-descendant" "or" "last" "let" "get-visible-flag" "when")}
        {Lisp-Entry "get-visible?" method (override) () #f #f 290 20 290 32 ("row-visible?" "father" "and")}
        {Lisp-Entry "row-visible?" method (public) () #f #f 294 18 294 30 ("visible-in-father?" "get-visible-flag" "and")}
        {Lisp-Entry "visible-in-father?" method (public) () #f #f 299 18 299 36 ("row-visible?" "row-visible?~" "expanded?" "expanded?~" "and" "father" "not" "or")}
        {Lisp-Entry "count-visible" method (public) () #f #f 304 18 304 31 ("increase!" "get-next" "get-next~" "set!" "level" "get-level" "get-level~" ">" "and" "while" "0" "count" "next" "scan" "let")}
        {Lisp-Entry "node-height" method (public) () #f #f 313 18 313 29 ("sons-height" "parent" "get-row-spacing" "get-row-spacing~" "get-effective-height" "+")}
        {Lisp-Entry "sons-height" method (public) () #f #f 317 18 317 29 ("get-next" "get-next~" "set!" "get-effective-height" "get-effective-height~" "+" "increase!" "level" "get-level" "get-level~" ">" "and" "while" "parent" "get-row-spacing" "get-row-spacing~" "rs" "0" "total" "next" "scan" "let")}
        {Lisp-Entry "sons-width" method (public) () #f #f 327 18 327 28 ("get-next" "get-next~" "set!" "when" "get-effective-width" "get-effective-width~" "w" "level" "get-level" "get-level~" ">" "and" "while" "0" "width" "next" "scan" "let")}
        {Lisp-Entry "first-visible-son" method (public) () #f #f 338 18 338 35 ("find-if" "get-visible-flag" "get-visible-flag~" "if" "first" "let" "sons" "empty?" "not" "when")}
        {Lisp-Entry "previous-visible-row" method (public) ("target") #f #f 347 18 347 38 ("expanded?" "expanded?~" "last-descendant" "last-descendant~" "and" "or" "get-father" "get-father~" "father" "previous-visible-sibling~" "previous-visible-sibling" "let" "target")}
        {Lisp-Entry "previous-visible-sibling" method (public) () #f #f 354 18 354 42 ("get-visible-flag" "get-visible-flag~" "when" "set!" "self" "eq?" "if" "unless" "lambda" "iterate" "found-self?" "first" "scan" "get-sons" "get-sons~" "father" "and" "siblings" "sibling" "let*")}
        {Lisp-Entry "last-visible-descendant" method (protected) () #f #f 369 21 369 44 ("set!" "level" "get-level" "get-level~" ">" "get-next" "get-next~" "and" "while" "when" "first-visible-son" "scan" "let")}
        {Lisp-Entry "add-son" method (public) ("row" "position") #f #f 382 18 382 25 ("insert!" "set!" "link" "first-visible-son" "/=" "level" "get-level" "get-level~" "after" "get-next" "get-next~" "and" "following" "element" "previous-visible-row" "last-visible-descendant" "if" "0" "=" "before" "get-visible-flag" "get-visible-flag~" "when" "else" ">" "not" "cond" "fx" "<fx>" "pos" "sons" "cardinality" "count" "last-descendant" "last-descendant~" "end" "expanded" "state" "eq?" "expanded?" "let*" "self" "set-father" "set-father~" "position" "row")}
        {Lisp-Entry "remove-son" method (public) ("row") #f #f 404 18 404 28 ("axis-remove!" "sons" "set!" "set-previous" "set-previous~" "set-next" "set-next~" "get-previous" "get-previous~" "error" "Outline-Row" "is-not?" "and" "when" "next-non-descendant" "next-non-descendant~" "following" "let" "row")}
        {Lisp-Entry "relink" method (public) ("replacement" "before" "after") #f #f 419 18 419 24 ("last-descendant" "last-descendant~" "expanded?" "expanded?~" "or" "set!" "link" "get-visible-flag" "get-visible-flag~" "when" "row" "lambda" "iterate" "let" "after" "before" "replacement")}
        {Lisp-Entry "replace-sons" method (public) ("replacement" "<list>" "start-row" "start" "<fx>" "end-row" "end" "<fx>") #f #f 429 18 429 30 ("replace-subseq!" "sons" "set!" "relink" "after" "get-previous" "get-previous~" "and" "before" "let" "end" "end-row" "fx" "<fx>" "start" "start-row" "list" "<list>" "replacement")}
        {Lisp-Entry "reorder-sons" method (public) ("replacement" "<Axis>") #f #f 436 18 436 30 ("sons" "set!" "relink" "next-non-descendant" "after" "self" "expanded?" "when" "before" "let" "Axis" "<Axis>" "replacement")}
        {Lisp-Entry "link" definition () ("before" "after") #f #f 444 15 444 19 ("set-previous" "set-previous~" "set-next" "set-next~" "when" "after" "before")}
        {Lisp-Entry "unlink" definition () ("first" "last") #f #f 452 15 452 21 ("set-next" "set-next~" "set-previous" "set-previous~" "link" "get-next" "get-next~" "next" "get-previous" "get-previous~" "previous" "let" "last" "first")}
        {Lisp-Entry "attached?" method (public) () #f #f 465 18 465 27 ("parent")}
        {Lisp-Entry "detach-descendants" method (public) () #f #f 469 18 469 36 ("sons" "detach-descendants" "detach-descendants~" "for-each")}
        {Lisp-Entry "first-descendant" method (protected) () #f #f 478 21 478 37 ("first-visible-son" "sons" "empty?" "not" "expanded" "state" "eq?" "and" "when")}
        {Lisp-Entry "last-proper-descendant" method (protected) () #f #f 483 21 483 43 ("set!" "level" "get-level" "get-level~" ">" "get-next" "get-next~" "and" "while" "when" "first-descendant" "scan" "let")}
        {Lisp-Entry "last-descendant" method (protected) () #f #f 491 21 491 36 ("self" "last-proper-descendant" "or")}
        {Lisp-Entry "next-non-descendant" method (protected) () #f #f 496 21 496 40 ("last-descendant" "get-next" "get-next~")}
        {Lisp-Entry "visible-sibling-follows?" method (protected) () #f #f 500 21 500 45 ("get-sons" "get-sons~" "set!" "self" "eq?" "get-visible-flag" "get-visible-flag~" "and" "prog1" "son" "lambda" "some?" "found?" "let" "father" "when")}
        {Lisp-Entry "sibling-follows?" method (protected) () #f #f 510 21 510 37 ("get-sons" "get-sons~" "last" "self" "neq?" "father" "and")}
        {Lisp-Entry "get-spine" method (public) () #f #f 519 18 519 27 ("get-father" "get-father~" "cons" "set!" "neq?" "while" "spine" "parent" "get-root-row" "get-root-row~" "root" "self" "row" "let")}
        {Lisp-Entry "internal-fields" method (public) () #f #f 534 18 534 33 ("next" "previous" "state" "level" "values")}}}})
"Outline-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "outline" "Outline-View.jazz"} 247283256. jazz
    {Lisp-Entry "jazz.ui.outline.Outline-View" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.graphic")}
      {Lisp-Entry "Outline-View" class () ((extends . "View")) #f #f 46 7 46 19 ("320" "16" "explicit" "0" "View")
        {Lisp-Entry "left-padding" property (protected) ((initialize . "0") (accessors . "explicit")) #f "<fx>" 57 22 57 34 ("fx" "<fx>")}
        {Lisp-Entry "top-padding" property (protected) ((initialize . "0") (accessors . "explicit")) #f "<fx>" 58 22 58 33 ("fx" "<fx>")}
        {Lisp-Entry "background-filler" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 59 22 59 39 ()}
        {Lisp-Entry "fit-to-scroller?" property (protected) ((initialize . "#t") (accessors . "explicit")) #f #f 60 22 60 38 ()}
        {Lisp-Entry "model" slot (protected) ((initialize . "#f")) #f #f 63 18 63 23 ()}
        {Lisp-Entry "outline" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 64 18 64 25 ()}
        {Lisp-Entry "get-outline" accessor () () #f #f 64 58 64 66 ()}
        {Lisp-Entry "selection" slot (protected) ((initialize . "'()")) #f #f 65 18 65 27 ()}
        {Lisp-Entry "line-size" slot (protected) ((initialize . "16")) #f "<fx>" 66 18 66 27 ("fx" "<fx>")}
        {Lisp-Entry "page-size" slot (protected) ((initialize . "320")) #f "<fx>" 67 18 67 27 ("fx" "<fx>")}
        {Lisp-Entry "hscrollbar?" slot (protected) ((initialize . "#f")) #f "<bool>" 68 18 68 29 ("bool" "<bool>")}
        {Lisp-Entry "vscrollbar?" slot (protected) ((initialize . "#f")) #f "<bool>" 69 18 69 29 ("bool" "<bool>")}
        {Lisp-Entry "prepare" method (override) ("rest") #f #f 77 20 77 27 ("new-model" "setup-model" "nextmethod" "rest")}
        {Lisp-Entry "new-model" method (protected virtual) () #f #f 82 29 82 38 ()}
        {Lisp-Entry "setup-model" method (protected virtual) ("mdl") #f #f 86 29 86 40 ("self" "add-client" "add-client~" "setup-outline" "model" "set!" "mdl")}
        {Lisp-Entry "setup-outline" method () () #f #f 92 11 92 24 ("update-displayed" "get-root-row" "get-root-row~" "model" "get-row-spacing" "get-row-spacing~" "Display-Outline" "new" "outline" "set!")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 97 20 97 26 ("layout-scrollee" "nextmethod" "rest")}
        {Lisp-Entry "destroy" method (override) () #f #f 102 20 102 27 ("nextmethod" "self" "model" "remove-client" "remove-client~")}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 112 20 112 31 ("layout-scrollee" "get-finished?" "not" "update-locked?" "or" "unless" "nextmethod" "size")}
        {Lisp-Entry "get-model" method (public) () #f #f 123 18 123 27 ("model")}
        {Lisp-Entry "set-model" method (public) ("model") #f #f 127 18 127 27 ("invalidate-view" "layout-scrollee" "setup-model" "model")}
        {Lisp-Entry "get-left-padding" method (public) () #f #f 133 18 133 34 ("model" "get-left-padding" "get-left-padding~")}
        {Lisp-Entry "set-left-padding" method (public) ("padding") #f #f 137 18 137 34 ("model" "set-left-padding" "set-left-padding~" "padding")}
        {Lisp-Entry "get-top-padding" method (public) () #f #f 141 18 141 33 ("model" "get-top-padding" "get-top-padding~")}
        {Lisp-Entry "set-top-padding" method (public) ("padding") #f #f 145 18 145 33 ("model" "set-top-padding" "set-top-padding~" "padding")}
        {Lisp-Entry "get-background-filler" method (public) () #f #f 149 18 149 39 ("background-filler")}
        {Lisp-Entry "set-background-filler" method (public) ("value") #f #f 153 18 153 39 ("invalidate-view" "background-filler" "set!" "value")}
        {Lisp-Entry "get-fit-to-scroller?" method (public) () #f #f 158 18 158 38 ("fit-to-scroller?")}
        {Lisp-Entry "set-fit-to-scroller?" method (public) ("value") #f #f 162 18 162 38 ("layout-scrollee" "fit-to-scroller?" "set!" "value")}
        {Lisp-Entry "find-subdrawing" method (override) ("surface" "<Surface>" "device-pos" "<Point>" "pos" "<Point>" "ignore") #f #f 172 20 172 35 ("find-in-drawing" "find-in-drawing~" "get-row" "Outline-Row" "<Outline-Row>" "cast" "row" "when" "get-v" "get-v~" "v->line" "line" "let" "ignore" "pos" "Point" "<Point>" "device-pos" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "layout-scrollee-content" method (override) () #f #f 184 20 184 43 ("model" "layout-scrollee-content" "layout-scrollee-content~")}
        {Lisp-Entry "scrollee-width" method (override) () #f #f 193 20 193 34 ("get-display-width" "max" "fit-to-scroller?" "scroller" "and" "if" "model" "scrollee-width" "scrollee-width~" "width" "let")}
        {Lisp-Entry "scrollee-height" method (override) () #f #f 200 20 200 35 ("get-display-height" "max" "fit-to-scroller?" "scroller" "and" "if" "model" "scrollee-height" "scrollee-height~" "height" "let")}
        {Lisp-Entry "scrollee-content-size" method () () #f #f 207 11 207 32 ("model" "scrollee-content-size" "scrollee-content-size~")}
        {Lisp-Entry "scrollee-content-width" method (public virtual) () #f #f 211 26 211 48 ("model" "scrollee-content-width" "scrollee-content-width~")}
        {Lisp-Entry "scrollee-content-height" method (public virtual) () #f #f 215 26 215 49 ("model" "scrollee-content-height" "scrollee-content-height~")}
        {Lisp-Entry "invalidate-update" method (override) () #f #f 224 20 224 37 ("update-scrollbars" "invalidate-view" "layout-scrollee" "update-displayed" "model" "invalidate-update" "invalidate-update~")}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 237 20 237 35 ("fill-rect" "fill-rect~" "get-bounds" "bounds" "when" "get-drawing-background" "else" "Medium" "Color" "view-enabled?" "not" "cycle-debug-color!" "debug-paint?" "cond" "background" "let" "context" "surface")}
        {Lisp-Entry "draw-children" method (override) ("surface" "nodes" "context") #f #f 249 20 249 33 ("get-scrolled-distance-v" "outline" "model" "draw-outline" "draw-outline~" "context" "nodes" "surface")}
        {Lisp-Entry "get-root-row" method (public) () #f #f 258 18 258 30 ("model" "get-root-row" "get-root-row~")}
        {Lisp-Entry "get-row" method (public) ("line" "<fx>") #f "<Outline-Row+>" 262 18 262 25 ("get-row" "get-row~" "1" "+" "model" "get-root-row" "get-root-row~" "outline" "get-row-from" "get-row-from~" "update-locked?" "if" "Outline-Row+" "<Outline-Row+>" "fx" "<fx>" "line")}
        {Lisp-Entry "call-with-v->line" method (protected) ("v" "proc") #f #f 269 21 269 38 ("get-scrolled-v" "outline" "call-with-v->line" "call-with-v->line~" "proc" "v")}
        {Lisp-Entry "on-prior" method (package) ("evt") #f #f 279 19 279 27 ("get-shift?" "get-shift?~" "prior-page" "evt")}
        {Lisp-Entry "prior-page" method (protected virtual) ("evt") #f #f 283 29 283 39 ("vert" "get-page-size" "0" "Point" "new" "scroll" "evt")}
        {Lisp-Entry "on-next" method (package) ("evt") #f #f 287 19 287 26 ("get-shift?" "get-shift?~" "next-page" "evt")}
        {Lisp-Entry "next-page" method (protected virtual) ("evt") #f #f 291 29 291 38 ("vert" "get-page-size" "-" "0" "Point" "new" "scroll" "evt")}
        {Lisp-Entry "get-line-size" method (override) ("orientation") #f #f 295 20 295 33 ("8" "horz" "model" "get-default-row-height" "get-default-row-height~" "vert" "case" "orientation")}
        {Lisp-Entry "scroll-invalidate" method (override) ("delta") #f #f 301 20 301 37 ("get-y" "get-y~" "-" "follow" "delta")}
        {Lisp-Entry "add-row-scroll" method (protected) () #f #f 310 21 310 35 ("Rect" "0" "Distance" "new" "scroll-view" "scroll-view~" "height" "-" "<" "when" "layout-scrollee" "1" "added-update-selection" "get-height" "get-height~" "display-height" "get-width" "get-width~" "display-width" "get-size" "get-size~" "display-size" "get-display" "display" "row-top" "top" "row" "row->line" "line" "let*")}
        {Lisp-Entry "remove-row-scroll" method (protected) () #f #f 324 21 324 38 ("Rect" "-" "0" "Distance" "new" "scroll-view" "scroll-view~" "height" "+" "<" "top" "and" "when" "layout-scrollee" "get-height" "get-height~" "display-height" "get-width" "get-width~" "display-width" "get-size" "get-size~" "display-size" "get-display" "display" "let*")}
        {Lisp-Entry "remove-every-row" method (protected) () #f #f 335 21 335 37 ("invalidate-view" "layout-scrollee" "update-displayed" "update-locked?" "unless" "set-scroll-pos" "Dimension" "set-size" "0" "Point" "set-position" "scroller" "when" "reset-selection" "setup-outline")}
        {Lisp-Entry "reset-selection" method (protected virtual) () #f #f 348 29 348 44 ("selection" "set!")}
        {Lisp-Entry "update-father-control" method (protected virtual) ("father") #f #f 352 29 352 50 ("father")}
        {Lisp-Entry "update-displayed" method (override) () #f #f 356 20 356 36 ("get-scrolled-distance-v" "outline" "update-displayed" "update-displayed~")}
        {Lisp-Entry "update-displayed-from" method (protected) ("line") #f #f 360 21 360 42 ("update-displayed" "outline" "get-first-displayed-line" "get-first-displayed-line~" "<=" "when" "line")}
        {Lisp-Entry "mouse-down" method (override) ("view") #f #f 371 20 371 30 ("set-selection" "get-v" "get-v~" "v->line" "line" "let" "acquire-focus" "view")}
        {Lisp-Entry "double-click" method (override) ("view") #f #f 377 20 377 32 ("get-row" "model" "expand/collapse" "expand/collapse~" "when" "get-v" "get-v~" "v->line" "line" "let" "view")}
        {Lisp-Entry "empty-selection" method (protected virtual) () #f #f 388 29 388 44 ()}
        {Lisp-Entry "get-selection" method (public virtual) () #f #f 392 26 392 39 ("selection")}
        {Lisp-Entry "set-selection" method (public virtual) ("sel" "(force?: force? #f)" "(ensure-displayed?: ensure-displayed? #t)" "(generate-event?: generate-event? #t)" "(user-origin: user-origin #f)") #f #f 396 26 396 39 ("call-selection-handler" "invalidate-selection" "not-null?" "ensure-displayed" "set!" "old" "let" "selection" "/=" "or" "when" "user-origin" "user-origin:" "generate-event?" "generate-event?:" "ensure-displayed?" "ensure-displayed?:" "force?" "force?:" "sel")}
        {Lisp-Entry "invalidate-selection" method (public virtual) ("sel") #f #f 414 26 414 46 ("player" "invalidate-region" "invalidate-region~" "logical->device" "logical->device~" "rect" "selection-region" "region" "with" "surface" "lambda" "with-transformation-surface" "view-visible?" "when" "sel")}
        {Lisp-Entry "selection-region" method (protected virtual) ("sel" "transformer") #f #f 422 29 422 45 ("selection-row-region" "transformer" "sel")}
        {Lisp-Entry "selection-row-region" method (protected) ("line" "transformer") #f #f 426 21 426 41 ("selection-row-rect" "rect:" "Region" "new" "transformer" "line")}
        {Lisp-Entry "selection-row-rect" method (protected virtual) ("line") #f #f 430 29 430 47 ("get-row" "get-rect" "get-rect~" "line")}
        {Lisp-Entry "added-update-selection" method (protected virtual) ("line" "count") #f #f 435 29 435 51 ("increase!" ">=" "selection" "and" "when" "count" "line")}
        {Lisp-Entry "removed-update-selection" method (protected virtual) ("line" "count") #f #f 441 29 441 53 ("set!" "decrease!" "+" "if" ">=" "selected?" "let" "selection" "not-null?" "when" "count" "line")}
        {Lisp-Entry "line-selected?" method (protected virtual) ("line") #f #f 452 29 452 43 ("selection" "=" "line")}
        {Lisp-Entry "line-draw-selected?" method (protected virtual) ("line") #f #f 456 29 456 48 ("line-selected?" "line")}
        {Lisp-Entry "follow" method () ("v") #f #f 465 11 465 17 ("get-scrolled-distance-v" "outline" "follow" "follow~" "v")}
        {Lisp-Entry "ensure-displayed" method (public virtual) ("." "rest") #f #f 469 26 469 42 ("ensure-row-displayed" "selection" "not-null?" "when" "rest")}
        {Lisp-Entry "ensure-row-displayed" method (public) ("line") #f #f 474 18 474 38 ("get-scroll-context" "0" "Point" "new" "scroll-needed" "scroll" "get-bottom" "get-bottom~" "bottom" "get-top" "get-top~" "top" "get-row" "row" "let*" "line")}
        {Lisp-Entry "ensure-row-range-displayed" method (public) ("from" "to") #f #f 481 18 481 44 ("get-scroll-context" "0" "Point" "new" "scroll-needed" "scroll" "get-bottom" "get-bottom~" "bottom" "get-row" "get-top" "get-top~" "top" "let" "to" "from")}
        {Lisp-Entry "ensure-at-end" method (public) () #f #f 487 18 487 31 ("1" "model" "get-visible-count" "get-visible-count~" "-" "ensure-row-displayed")}
        {Lisp-Entry "get-scroll-context" method (protected virtual) () #f #f 491 29 491 47 ("0.20" "0.15" "cons")}
        {Lisp-Entry "row-top" method (protected) ("line") #f #f 502 21 502 28 ("get-next" "get-next~" "set!" "get-row-spacing" "get-row-spacing~" "get-height" "get-height~" "increase!" "decrease!" ">" "while" "0" "v" "model" "first-visible-row" "first-visible-row~" "row" "let" "line")}
        {Lisp-Entry "line-rect" method (protected virtual) ("line") #f #f 513 29 513 38 ("get-height" "get-height~" "+" "Rect" "new" "get-width" "right" "row-top" "top" "0" "left" "get-row" "row" "let" "line")}
        {Lisp-Entry "row-region" method () ("line") #f #f 521 11 521 21 ("get-row" "get-bounds" "get-bounds~" "rect:" "Region" "new" "line")}
        {Lisp-Entry "line->v" method (protected) ("l") #f #f 525 21 525 28 ("get-row" "get-top" "get-top~" "l")}
        {Lisp-Entry "v->line" method (protected) ("v") #f #f 529 21 529 28 ("height" "line" "lambda" "call-with-v->line" "v")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 540 25 540 45 ("Outline-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 549 11 549 17 ()
        {Lisp-Entry "import" import () () #f #f 552 1 552 7 ("jazz.designer")}
        {Lisp-Entry "Outline-View-Descriptor" class () ((extends . "View-Descriptor")) #f #f 555 7 555 30 ("View-Descriptor")}}}})
"Outline-View-Old"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "outline" "Outline-View-Old.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.ui.outline.Outline-View-Old" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.graphic")}
      {Lisp-Entry "Outline-View-Old" class () ((extends . "View")) #f #f 47 7 47 23 ("320" "16" "explicit" "0" "17" "View")
        {Lisp-Entry "default-row-height" property (protected) ((initialize . "17") (accessors . "generate")) #f "<fx>" 60 22 60 40 ("fx" "<fx>")}
        {Lisp-Entry "get-default-row-height" accessor () () #f #f 60 72 60 80 ()}
        {Lisp-Entry "set-default-row-height" accessor () () #f #f 60 72 60 80 ()}
        {Lisp-Entry "row-spacing" property (protected) ((initialize . "0") (accessors . "explicit")) #f "<fx>" 61 22 61 33 ("fx" "<fx>")}
        {Lisp-Entry "left-padding" property (protected) ((initialize . "0") (accessors . "explicit")) #f "<fx>" 62 22 62 34 ("fx" "<fx>")}
        {Lisp-Entry "top-padding" property (protected) ((initialize . "0") (accessors . "explicit")) #f "<fx>" 63 22 63 33 ("fx" "<fx>")}
        {Lisp-Entry "background-filler" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 64 22 64 39 ()}
        {Lisp-Entry "fit-to-scroller?" property (protected) ((initialize . "#t") (accessors . "explicit")) #f #f 65 22 65 38 ()}
        {Lisp-Entry "root-row" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 68 18 68 26 ()}
        {Lisp-Entry "get-root-row" accessor () () #f #f 68 69 68 77 ()}
        {Lisp-Entry "outline" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 69 18 69 25 ()}
        {Lisp-Entry "get-outline" accessor () () #f #f 69 69 69 77 ()}
        {Lisp-Entry "visible-count" slot (protected) ((initialize . "0") (getter . "generate")) #f "<fx>" 70 18 70 31 ("fx" "<fx>")}
        {Lisp-Entry "get-visible-count" accessor () () #f #f 70 69 70 77 ()}
        {Lisp-Entry "visible-height" slot (protected) ((initialize . "0") (getter . "generate")) #f "<fx>" 71 18 71 32 ("fx" "<fx>")}
        {Lisp-Entry "get-visible-height" accessor () () #f #f 71 69 71 77 ()}
        {Lisp-Entry "visible-width" slot (protected) ((initialize . "0") (getter . "generate")) #f "<fx>" 72 18 72 31 ("fx" "<fx>")}
        {Lisp-Entry "get-visible-width" accessor () () #f #f 72 69 72 77 ()}
        {Lisp-Entry "selection" slot (protected) ((initialize . "#f")) #f #f 73 18 73 27 ()}
        {Lisp-Entry "line-size" slot (protected) ((initialize . "16")) #f "<fx>" 74 18 74 27 ("fx" "<fx>")}
        {Lisp-Entry "page-size" slot (protected) ((initialize . "320")) #f "<fx>" 75 18 75 27 ("fx" "<fx>")}
        {Lisp-Entry "hscrollbar?" slot (protected) ((initialize . "#f")) #f "<bool>" 76 18 76 29 ("bool" "<bool>")}
        {Lisp-Entry "vscrollbar?" slot (protected) ((initialize . "#f")) #f "<bool>" 77 18 77 29 ("bool" "<bool>")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 85 20 85 27 ("setup-outline" "nextmethod" "rest")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 90 20 90 26 ("layout-scrollee" "nextmethod" "rest")}
        {Lisp-Entry "set-player" method (override) ("plr") #f #f 95 20 95 30 ("set-player" "set-player~" "root-row" "nextmethod" "player" "neq?" "when" "plr")}
        {Lisp-Entry "setup-outline" method () () #f #f 102 11 102 24 ("expanded" "set-state" "set-state~" "-1" "set-level" "set-level~" "set-father" "set-father~" "self" "set-parent" "set-parent~" "row-spacing" "Display-Outline" "outline" "row-class" "new" "root-row" "set!")}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 116 20 116 31 ("layout-scrollee" "get-finished?" "not" "update-locked?" "or" "unless" "nextmethod" "size")}
        {Lisp-Entry "get-row-spacing" method (public) () #f #f 127 18 127 33 ("row-spacing")}
        {Lisp-Entry "set-row-spacing" method (public) ("spacing") #f #f 131 18 131 33 ("invalidate-view" "set-row-spacing" "set-row-spacing~" "outline" "when" "row-spacing" "set!" "spacing")}
        {Lisp-Entry "get-left-padding" method (public) () #f #f 138 18 138 34 ("left-padding")}
        {Lisp-Entry "set-left-padding" method (public) ("padding") #f #f 142 18 142 34 ("invalidate-view" "left-padding" "set!" "padding")}
        {Lisp-Entry "get-top-padding" method (public) () #f #f 147 18 147 33 ("top-padding")}
        {Lisp-Entry "set-top-padding" method (public) ("padding") #f #f 151 18 151 33 ("invalidate-view" "top-padding" "set!" "padding")}
        {Lisp-Entry "get-background-filler" method (public) () #f #f 156 18 156 39 ("background-filler")}
        {Lisp-Entry "set-background-filler" method (public) ("value") #f #f 160 18 160 39 ("invalidate-view" "background-filler" "set!" "value")}
        {Lisp-Entry "get-fit-to-scroller?" method (public) () #f #f 165 18 165 38 ("fit-to-scroller?")}
        {Lisp-Entry "set-fit-to-scroller?" method (public) ("value") #f #f 169 18 169 38 ("layout-scrollee" "fit-to-scroller?" "set!" "value")}
        {Lisp-Entry "get-expand-state" method (public) ("(include-invisibles?: include-invisibles? #f)") #f #f 179 18 179 34 ("List" "type:" "root-row" "collect" "cons" "expanded" "eq?" "0" "cardinality" ">" "and" "or" "when" "get-sons" "get-sons~" "sons" "get-state~" "state" "first-child" "first-child~" "get-title" "get-title~" "title" "let" "row" "get-state" "define" "include-invisibles?" "include-invisibles?:")}
        {Lisp-Entry "set-expand-state" method (public) ("state") #f #f 193 18 193 34 ("for-each" "collapse-all-deep" "root-row" "lambda" "iterate" "update-row" "dynamic" "and" "expand/collapse" "unless" "expanded" "eq?" "if" "get-state" "get-state~" "actual" "when" "find-by-title" "find-by-title~" "subrow" "let" "children" "title" "bind" "info" "row" "set-state" "define" "state")}
        {Lisp-Entry "with-preserved-expand-state" method (public) ("thunk") #f #f 215 18 215 45 ("set-expand-state" "set-selection" "get-expand-state" "saved-state" "let" "thunk")}
        {Lisp-Entry "expand-spine" method (public) ("spine") #f #f 227 18 227 30 ("if" "expand/collapse" "null?" "expanded" "eq?" "or" "unless" "get-state" "get-state~" "actual" "find-by-title" "find-by-title~" "subrow" "let" "subspine" "title" "bind" "row" "lambda" "proc" "letrec" "root-row" "when" "spine")}
        {Lisp-Entry "find-subdrawing" method (override) ("surface" "<Surface>" "device-pos" "<Point>" "pos" "<Point>" "ignore") #f #f 248 20 248 35 ("find-in-drawing" "find-in-drawing~" "get-row" "Outline-Row" "<Outline-Row>" "cast" "row" "when" "get-v" "get-v~" "v->line" "line" "let" "ignore" "pos" "Point" "<Point>" "device-pos" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "layout-scrollee-content" method (override) () #f #f 260 20 260 43 ("row-spacing" "increase!" "set!" "Dimension" "set-size" "set-size~" "Point" "new" "set-position" "set-position~" "+" "rb" "effective-row-height" "effective-row-height~" "height" "let*" "while" "top-padding" "rt" "root-row" "get-next" "get-next~" "row" "left-padding" "get-width" "-" "width" "let" "layout-rows" "define")}
        {Lisp-Entry "scrollee-size" method (override) () #f #f 282 20 282 33 ("scrollee-height" "scrollee-width" "Dimension" "new")}
        {Lisp-Entry "scrollee-width" method (override) () #f #f 286 20 286 34 ("get-display-width" "max" "fit-to-scroller?" "scroller" "and" "if" "visible-width" "left-padding" "+" "width" "let")}
        {Lisp-Entry "scrollee-height" method (override) () #f #f 293 20 293 35 ("get-display-height" "max" "fit-to-scroller?" "scroller" "and" "if" "visible-height" "top-padding" "+" "height" "let")}
        {Lisp-Entry "scrollee-content-size" method () () #f #f 300 11 300 32 ("scrollee-content-height" "scrollee-content-width" "Dimension" "new")}
        {Lisp-Entry "scrollee-content-width" method (public virtual) () #f #f 304 26 304 48 ("visible-width" "left-padding" "+")}
        {Lisp-Entry "scrollee-content-height" method (public virtual) () #f #f 308 26 308 49 ("visible-height" "top-padding" "+")}
        {Lisp-Entry "invalidate-update" method (override) () #f #f 317 20 317 37 ("update-scrollbars" "invalidate-view" "layout-scrollee" "update-visible" "update-displayed")}
        {Lisp-Entry "update-visible" method (public virtual) () #f #f 325 26 325 40 ()}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 334 20 334 35 ("context" "surface")}
        {Lisp-Entry "draw-children" method (override) ("surface" "nodes" "context") #f #f 338 20 338 33 ("get-scrolled-distance-v" "draw-outline" "fill-rect" "fill-rect~" "when" "get-drawing-background" "else" "Medium" "Color" "view-enabled?" "not" "cycle-debug-color!" "debug-paint?" "cond" "background" "get-clipper" "get-clipper~" "clipper" "let" "context" "nodes" "surface")}
        {Lisp-Entry "draw-outline" method (protected virtual) ("surface" "context" "clipper" "scrolled-v") #f #f 351 29 351 41 ("draw-empty" "row-spacing" "get-next" "get-next~" "set!" "increase!" ">=" "when" "rb" "get-height" "get-height~" "height" "let*" "<" "and" "while" "get-width" "width" "get-first-displayed-offset" "get-first-displayed-offset~" "top-padding" "-" "+" "rt" "get-first-displayed-line" "get-first-displayed-line~" "fx" "<fx>" "outline" "get-first-displayed" "get-first-displayed~" "get-bottom" "get-bottom~" "bottom" "get-top" "get-top~" "top" "get-clipper" "get-clipper~" "paint-content" "paint-content~" "line:" "selected?:" "cons" "new-context" "effective-font" "set-font" "set-font~" "line-draw-selected?" "selected?" "let" "line" "row" "draw-row" "define" "scrolled-v" "clipper" "context" "surface")}
        {Lisp-Entry "draw-empty" method (protected virtual) ("surface" "top" "bottom" "rt" "width") #f #f 377 29 377 39 ("width" "rt" "bottom" "top" "surface")}
        {Lisp-Entry "on-prior" method (package) ("evt") #f #f 386 19 386 27 ("get-shift?" "get-shift?~" "prior-page" "evt")}
        {Lisp-Entry "prior-page" method (protected virtual) ("evt") #f #f 390 29 390 39 ("vert" "get-page-size" "0" "Point" "new" "scroll" "evt")}
        {Lisp-Entry "on-next" method (package) ("evt") #f #f 394 19 394 26 ("get-shift?" "get-shift?~" "next-page" "evt")}
        {Lisp-Entry "next-page" method (protected virtual) ("evt") #f #f 398 29 398 38 ("vert" "get-page-size" "-" "0" "Point" "new" "scroll" "evt")}
        {Lisp-Entry "get-line-size" method (override) ("orientation") #f #f 402 20 402 33 ("8" "horz" "default-row-height" "vert" "case" "orientation")}
        {Lisp-Entry "scroll-invalidate" method (override) ("delta") #f #f 408 20 408 37 ("get-y" "get-y~" "-" "follow" "delta")}
        {Lisp-Entry "row-class" method (protected virtual) () #f #f 417 29 417 38 ("Outline-Row")}
        {Lisp-Entry "add-row" method (public) ("." "rest") #f #f 421 18 421 25 ("update-father-control" "Rect" "0" "Distance" "scroll-view" "scroll-view~" "-" "<" "layout-scrollee" "added-update-selection" "get-height" "get-height~" "display-height" "get-width" "get-width~" "display-width" "get-size" "get-size~" "display-size" "get-display" "display" "row-top" "top" "row->line" "line" "update-visible" "update-displayed" "get-effective-width" "get-effective-width~" "update-visible-width-incremental" "visible-height" "node-height" "node-height~" "height" "let" "update-locked?" "not" "count-visible" "count-visible~" "visible-count" "increase!" "row-visible?" "row-visible?~" "when" "add-son" "add-son~" "set-descendants-level" "set-descendants-level~" "default-row-height" "set-height-noevent" "set-height-noevent~" "self" "parent:" "new" "apply" "1" "get-level" "get-level~" "+" "level" "root-row" "or" "let*" "others" "position" "father" "row" "row-class" "class" "bind-keywords" "rest")}
        {Lisp-Entry "update-visible-width-incremental" method (protected virtual) ("level" "width") #f #f 452 29 452 61 ("width" "level")}
        {Lisp-Entry "remove-row" method (public virtual) ("row") #f #f 456 26 456 36 ("update-father-control" "detach-descendants" "detach-descendants~" "Rect" "-" "Distance" "new" "scroll-view" "scroll-view~" "<" "layout-scrollee" "get-height" "get-height~" "display-height" "get-width" "get-width~" "display-width" "get-size" "get-size~" "display-size" "get-display" "display" "update-visible" "update-displayed" "update-locked?" "not" "removed-update-selection" "collapsed" "set-state" "set-state~" "0" "get-sons" "get-sons~" "cardinality" "=" "remove-son" "remove-son~" "visible-height" "count-visible" "count-visible~" "1" "+" "visible-count" "decrease!" "row-top" "and" "top" "row->line" "line" "node-height" "node-height~" "height" "row-visible?" "row-visible?~" "visible?" "get-father" "get-father~" "father" "let*" "attached?" "attached?~" "when" "row")}
        {Lisp-Entry "move-row" method (public) ("row" "father" "(position: position #f)") #f #f 486 18 486 26 ("generate-event?:" "get-selection" "cons" "set-selection" "when" "father:" "row:" "add-row" "procedure?" "if" "remove-row" "row->line" "line-selected?" "selected?" "let" "position" "position:" "father" "row")}
        {Lisp-Entry "find-ordered-position" method (public) ("title" "father") #f #f 495 18 495 39 ("smaller/equal" "sort-predicate" "test:" "row-title" "key:" "get-sons" "get-sons~" "ordered-position" "0" "not" "if" "father" "title")}
        {Lisp-Entry "remove-every-row" method (public virtual) () #f #f 501 26 501 42 ("invalidate-view" "layout-scrollee" "update-displayed" "update-locked?" "unless" "set-scroll-pos" "Dimension" "set-size" "Point" "set-position" "scroller" "when" "selection" "visible-width" "visible-height" "0" "visible-count" "set!" "setup-outline")}
        {Lisp-Entry "update-father-control" method (protected virtual) ("father") #f #f 517 29 517 50 ("father")}
        {Lisp-Entry "update-displayed" method (override) () #f #f 521 20 521 36 ("get-scrolled-distance-v" "outline" "update-displayed" "update-displayed~")}
        {Lisp-Entry "first-row" method (public) () #f #f 525 18 525 27 ("root-row" "get-sons" "get-sons~" "first")}
        {Lisp-Entry "get-root-rows" method (public) () #f #f 529 18 529 31 ("root-row" "get-sons" "get-sons~")}
        {Lisp-Entry "first-visible-row" method (public) () #f #f 533 18 533 35 ("root-row" "get-next" "get-next~")}
        {Lisp-Entry "get-row" method (public) ("line" "<fx>") #f "<Outline-Row+>" 537 18 537 25 ("get-row" "get-row~" "1" "+" "root-row" "outline" "get-row-from" "get-row-from~" "update-locked?" "if" "Outline-Row+" "<Outline-Row+>" "fx" "<fx>" "line")}
        {Lisp-Entry "get-visible-row" method (public) ("l") #f #f 544 18 544 33 ("continuation-return" "=" "when" "line" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "l")}
        {Lisp-Entry "get-row-classic" method () ("line") #f #f 555 11 555 26 ("decrease!" "get-next" "get-next~" "set!" "0" ">=" "and" "while" "root-row" "row" "let" "line")}
        {Lisp-Entry "row->line" method (public) ("target") #f #f 563 18 563 27 ("continuation-return" "eq?" "when" "line" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "target")}
        {Lisp-Entry "rows->lines" method (public) ("targets") #f #f 573 18 573 29 ("row->line" "map" "targets")}
        {Lisp-Entry "row-title" method (public) ("row") #f #f 577 18 577 27 ("first-child" "first-child~" "get-title" "get-title~" "row")}
        {Lisp-Entry "forward" method () ("row" "line") #f #f 581 11 581 18 ("decrease!" "get-next" "get-next~" "set!" "0" ">" "while" "line" "row")}
        {Lisp-Entry "backward" method () ("row" "line") #f #f 588 11 588 19 ("decrease!" "get-previous" "get-previous~" "set!" "0" ">" "while" "line" "row")}
        {Lisp-Entry "ensure-row-exists" method (public) ("row") #f #f 595 18 595 35 ("1" "+" "ensure-visible-count" "row")}
        {Lisp-Entry "ensure-visible-count" method (public) ("line") #f #f 599 18 599 38 ("add-empty-row" "visible-count" "<" "while" "line")}
        {Lisp-Entry "add-empty-row" method (public virtual) ("(father: father #f)") #f #f 604 26 604 39 ("add-row" "root-row" "or" "let" "father" "father:")}
        {Lisp-Entry "line-selected?" method (protected virtual) ("line") #f #f 609 29 609 43 ("selection" "=" "line")}
        {Lisp-Entry "line-draw-selected?" method (protected virtual) ("line") #f #f 613 29 613 48 ("line-selected?" "line")}
        {Lisp-Entry "get-row-count" method (public) () #f #f 617 18 617 31 ("get-sons" "get-sons~" "cardinality" "0" "root-row" "not" "if")}
        {Lisp-Entry "mouse-down" method (override) ("view") #f #f 628 20 628 30 ("set-selection" "get-v" "get-v~" "v->line" "line" "let" "acquire-focus" "view")}
        {Lisp-Entry "double-click" method (override) ("view") #f #f 634 20 634 32 ("get-row" "expand/collapse" "when" "get-v" "get-v~" "v->line" "line" "let" "view")}
        {Lisp-Entry "empty-selection" method (protected virtual) () #f #f 645 29 645 44 ()}
        {Lisp-Entry "get-selection" method (public virtual) () #f #f 649 26 649 39 ("selection")}
        {Lisp-Entry "set-selection" method (public virtual) ("sel" "(force?: force? #f)" "(ensure-displayed?: ensure-displayed? #t)" "(generate-event?: generate-event? #t)" "(user-origin: user-origin #f)") #f #f 653 26 653 39 ("call-selection-handler" "invalidate-selection" "not-null?" "ensure-displayed" "set!" "old" "let" "selection" "/=" "or" "when" "user-origin" "user-origin:" "generate-event?" "generate-event?:" "ensure-displayed?" "ensure-displayed?:" "force?" "force?:" "sel")}
        {Lisp-Entry "invalidate-selection" method (public virtual) ("sel") #f #f 671 26 671 46 ("player" "invalidate-region" "invalidate-region~" "logical->device" "logical->device~" "rect" "selection-region" "region" "with" "surface" "lambda" "with-transformation-surface" "view-visible?" "when" "sel")}
        {Lisp-Entry "selection-region" method (protected virtual) ("sel" "transformer") #f #f 679 29 679 45 ("selection-row-region" "transformer" "sel")}
        {Lisp-Entry "selection-row-region" method (protected) ("line" "transformer") #f #f 683 21 683 41 ("selection-row-rect" "rect:" "Region" "new" "transformer" "line")}
        {Lisp-Entry "selection-row-rect" method (protected virtual) ("line") #f #f 687 29 687 47 ("get-row" "get-rect" "get-rect~" "line")}
        {Lisp-Entry "added-update-selection" method (protected virtual) ("line" "count") #f #f 692 29 692 51 ("increase!" ">=" "selection" "and" "when" "count" "line")}
        {Lisp-Entry "removed-update-selection" method (protected virtual) ("line" "count") #f #f 698 29 698 53 ("set!" "decrease!" "+" "if" ">=" "selected?" "let" "selection" "not-null?" "when" "count" "line")}
        {Lisp-Entry "for-each-row" method (public) ("proc") #f #f 714 18 714 30 ("root-row" "lambda" "get-sons" "get-sons~" "iterate" "recurse-sons" "increase!" "when" "expanded?" "expanded?~" "son-visible?" "get-visible-flag" "get-visible-flag~" "and" "let*" "visible?" "row" "recurse" "define" "0" "line" "let" "proc")}
        {Lisp-Entry "for-each-visible-row" method (public) ("proc" "(start: start #f)" "(end: end #f)" "(wrap?: wrap? #f)") #f #f 732 18 732 38 ("for-each-visible-row" "not" "increase!" "set!" "neq?" "and" "while" "when" "0" "row->line" "if" "line" "root-row" "get-next" "get-next~" "or" "row" "let" "wrap?" "wrap?:" "end" "end:" "start" "start:" "proc")}
        {Lisp-Entry "for-each-visible-descendant" method (public) ("parent-row" "proc") #f #f 744 18 744 45 ("end:" "start:" "for-each-visible-row" "when" "get-next" "get-next~" "and" "end-row" "last-visible-descendant" "last-visible-descendant~" "last-son" "first-visible-son" "first-visible-son~" "first-son" "let*" "proc" "parent-row")}
        {Lisp-Entry "collect-rows" method (public) () #f #f 752 18 752 30 ("queue-list" "enqueue" "line" "row" "lambda" "for-each-row" "new-queue" "queue" "let")}
        {Lisp-Entry "collect-visible-rows" method (public) () #f #f 760 18 760 38 ("queue-list" "enqueue" "line" "row" "lambda" "for-each-visible-row" "new-queue" "queue" "let")}
        {Lisp-Entry "get-content" method (public virtual) () #f #f 773 26 773 37 ("root-row" "get-sons" "get-sons~")}
        {Lisp-Entry "set-content" method (public virtual) ("content") #f #f 777 26 777 37 ("update-scrollbars" "invalidate-view" "layout-scrollee" "update-visible" "update-displayed" "empty-selection" "set-selection" "sons-height" "sons-height~" "visible-height" "count-visible" "count-visible~" "visible-count" "set!" "invalidate-columns" "car" "set-next" "set-next~" "root-row" "set-sons" "set-sons~" "remove-every-row" "content")}
        {Lisp-Entry "set-content-model" method (public) ("seq" "proc") #f #f 792 18 792 35 ("update-scrollbars" "invalidate-view" "layout-scrollee" "update-visible" "update-displayed" "empty-selection" "set-selection" "sons-height" "sons-height~" "visible-height" "count-visible" "count-visible~" "visible-count" "set!" "invalidate-columns" "root-row" "set-subrows" "remove-every-row" "proc" "seq")}
        {Lisp-Entry "set-subrows" method (public) ("row" "seq" "proc") #f #f 806 18 806 29 ("visible-height" "visible-count" "last-proper-descendant" "last-proper-descendant~" "last" "link-rows" "first" "first-son" "get-next" "get-next~" "old-next" "expanded" "get-state" "get-state~" "eq?" "Axis" "coerce" "and" "set-sons" "set-sons~" "get-height" "get-height~" "increase!" "set!" "set-next" "set-next~" "set-previous" "set-previous~" "when" "default-row-height" "set-height-noevent" "set-height-noevent~" "set-level" "set-level~" "set-father" "set-father~" "subrow" "let" "info" "lambda" "map" "rows" "previous" "1" "get-level" "get-level~" "+" "level" "height" "0" "count" "root-row" "or" "let*" "empty?" "unless" "proc" "seq" "row")}
        {Lisp-Entry "invalidate-columns" method (public virtual) () #f #f 837 26 837 44 ()}
        {Lisp-Entry "expand/collapse" method (public virtual) ("row") #f #f 846 26 846 41 ("collapse" "expanded" "expand" "collapsed" "get-state" "get-state~" "case" "row")}
        {Lisp-Entry "update-row" method (protected virtual) ("row") #f #f 852 29 852 39 ("row")}
        {Lisp-Entry "expand" method (public) ("row" "(dynamic? #f)") #f #f 856 18 856 24 ("row-visible?" "row-visible?~" "show-rows" "in-expand?" "get-next" "get-next~" "next" "previous" "last-visible-descendant" "last-visible-descendant~" "last" "first-descendant" "first-descendant~" "first" "let" "set-state" "set-state~" "expanded" "get-state" "get-state~" "neq?" "when" "dynamic?" "row")}
        {Lisp-Entry "invalidate-expand" method (protected virtual) ("row" "top" "dynamic?") #f #f 868 29 868 46 ("dynamic?" "top" "row")}
        {Lisp-Entry "expand-all" method (public) ("row") #f #f 872 18 872 28 ("expand-all" "get-sons" "get-sons~" "iterate" "expand/collapse" "expanded" "get-state" "get-state~" "eq?" "unless" "lambda" "with-update-locked" "row")}
        {Lisp-Entry "collapse" method (public) ("row") #f #f 880 18 880 26 ("row-visible?" "row-visible?~" "last-proper-descendant" "last-proper-descendant~" "hide-rows" "invalidate-collapse" "line-selected?" "selected?" "get-position" "get-position~" "get-v" "get-v~" "top" "row->line" "line" "set-state" "set-state~" "not" "if" "in-collapse?" "first-descendant" "first-descendant~" "first" "let" "collapsed" "get-state" "get-state~" "neq?" "when" "row")}
        {Lisp-Entry "collapse-selection" method (protected virtual) ("line" "selected?") #f #f 893 29 893 47 ("selected?" "line")}
        {Lisp-Entry "invalidate-collapse" method (protected virtual) ("line" "row" "top" "selected?") #f #f 897 29 897 48 ("line-rect" "invalidate-rect" "when" "selected?" "top" "row" "line")}
        {Lisp-Entry "collapse-all" method (public) ("row") #f #f 902 18 902 30 ("expand/collapse" "expanded" "get-state" "get-state~" "eq?" "when" "collapse-all" "get-sons" "get-sons~" "iterate" "lambda" "with-update-locked" "row")}
        {Lisp-Entry "collapse-all-deep" method (public) () #f #f 910 18 910 35 ("root-row" "expand/collapse" "expanded" "get-state" "get-state~" "eq?" "when" "collapse" "get-sons" "get-sons~" "iterate" "row" "collapse-sons" "define" "lambda" "with-update-locked")}
        {Lisp-Entry "link-rows" definition () ("before" "after") #f #f 924 15 924 24 ("set-previous" "set-previous~" "set-next" "set-next~" "when" "after" "before")}
        {Lisp-Entry "unlink-rows" definition () ("first" "last") #f #f 931 15 931 26 ("set-next" "set-next~" "set-previous" "set-previous~" "link-rows" "get-next" "get-next~" "next" "get-previous" "get-previous~" "previous" "let" "last" "first")}
        {Lisp-Entry "ensure-expanded" method (public) ("row") #f #f 939 18 939 33 ("set!" "expand" "collapsed" "get-state" "get-state~" "eq?" "when" "while" "get-father" "get-father~" "scan" "let" "row")}
        {Lisp-Entry "ensure-expanded-rows" method (public) ("rows") #f #f 947 18 947 38 ("ensure-expanded" "for-each" "rows")}
        {Lisp-Entry "set-visibilities" method (public) ("predicate") #f #f 957 18 957 34 ("set!" "link-rows" "when" "visible?" "row" "lambda" "get-sons" "get-sons~" "iterate" "root-row" "previous" "let" "predicate")}
        {Lisp-Entry "show-rows" method (package) ("first" "last" "previous" "next" "visible?" "in-expand?" "dynamic?") #f #f 967 19 967 28 ("ensure-row-range-displayed" ">" "layout-scrollee" "Rect" "Distance" "new" "scroll-view" "scroll-view~" "invalidate-expand" "get-scrolled-v" "<" "invalidate-view" "1" "added-update-selection" "display-height" "get-width" "get-width~" "display-width" "get-size" "get-size~" "display-size" "get-display" "display" "get-height" "get-height~" "+" "opens" "0" "get-position" "get-position~" "get-v" "get-v~" "top" "-1" "row->line" "or" "line" "let*" "update-visible" "update-displayed" "get-level" "get-level~" "update-visible-width-incremental" "visible-height" "visible-count" "increase!" "count-visible-size" "width" "height" "count" "receive" "update-locked?" "not" "and" "when" "link-rows" "dynamic?" "in-expand?" "visible?" "next" "previous" "last" "first")}
        {Lisp-Entry "hide-rows" method (package) ("first" "last" "visible?" "in-collapse?") #f #f 996 19 996 28 ("layout-scrollee" "Rect" "-" "Distance" "new" "scroll-view" "scroll-view~" "invalidate-collapse" "<" "invalidate-view" "collapse-selection" "display-height" "get-width" "get-width~" "display-width" "get-size" "get-size~" "display-size" "get-display" "display" "1" "removed-update-selection" "removed" "get-height" "get-height~" "+" "opens" "0" "get-position" "get-position~" "get-v" "get-v~" "top" "-1" "row->line" "or" "line" "let*" "update-visible" "update-displayed" "update-locked?" "not" "collapsed" "set-state" "set-state~" "and" "unlink-rows" "get-previous" "get-previous~" "previous" "let" "visible-height" "visible-count" "decrease!" "when" "count-visible-size" "width" "height" "count" "receive" "in-collapse?" "visible?" "last" "first")}
        {Lisp-Entry "count-visible-size" method (public) ("first" "last" "visible?") #f #f 1026 18 1026 36 ("values" "set!" ">" "when" "get-effective-width" "get-effective-width~" "w" "row-spacing" "get-effective-height" "get-effective-height~" "+" "increase!" "neq?" "while" "width" "height" "0" "count" "get-next" "get-next~" "stop" "and" "scan" "let" "visible?" "last" "first")}
        {Lisp-Entry "follow" method () ("v") #f #f 1047 11 1047 17 ("get-scrolled-distance-v" "outline" "follow" "follow~" "v")}
        {Lisp-Entry "ensure-displayed" method (public virtual) ("." "rest") #f #f 1051 26 1051 42 ("ensure-row-displayed" "selection" "not-null?" "when" "rest")}
        {Lisp-Entry "ensure-row-displayed" method (public) ("line") #f #f 1056 18 1056 38 ("get-scroll-context" "0" "Point" "new" "scroll-needed" "scroll" "get-bottom" "get-bottom~" "bottom" "get-top" "get-top~" "top" "get-row" "row" "let*" "line")}
        {Lisp-Entry "ensure-row-range-displayed" method (public) ("from" "to") #f #f 1063 18 1063 44 ("get-scroll-context" "0" "Point" "new" "scroll-needed" "scroll" "get-bottom" "get-bottom~" "bottom" "get-row" "get-top" "get-top~" "top" "let" "to" "from")}
        {Lisp-Entry "ensure-at-end" method (public) () #f #f 1069 18 1069 31 ("1" "visible-count" "-" "ensure-row-displayed")}
        {Lisp-Entry "get-scroll-context" method (protected virtual) () #f #f 1073 29 1073 47 ("0.20" "0.15" "cons")}
        {Lisp-Entry "row-top" method (protected) ("line") #f #f 1084 21 1084 28 ("get-next" "get-next~" "set!" "row-spacing" "get-height" "get-height~" "increase!" "decrease!" ">" "while" "0" "v" "first-visible-row" "row" "let" "line")}
        {Lisp-Entry "line-rect" method (protected virtual) ("line") #f #f 1095 29 1095 38 ("get-height" "get-height~" "+" "Rect" "new" "get-width" "right" "row-top" "top" "0" "left" "get-row" "row" "let" "line")}
        {Lisp-Entry "row-region" method () ("line") #f #f 1103 11 1103 21 ("get-row" "get-bounds" "get-bounds~" "rect:" "Region" "new" "line")}
        {Lisp-Entry "line->v" method (protected) ("l") #f #f 1107 21 1107 28 ("get-row" "get-top" "get-top~" "l")}
        {Lisp-Entry "v->line" method (protected) ("v") #f #f 1111 21 1111 28 ("height" "line" "lambda" "call-with-v->line" "v")}
        {Lisp-Entry "call-with-v->line" method (protected) ("v" "proc") #f #f 1117 21 1117 38 ("get-scrolled-v" "outline" "call-with-v->line" "call-with-v->line~" "proc" "v")}}}})
"Overlapped"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "Overlapped.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.window.Overlapped" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui")}
      {Lisp-Entry "Overlapped" class () ((extends . "View-Player")) #f #f 44 7 44 17 ("View-Player")
        {Lisp-Entry "owner" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 17 ()}
        {Lisp-Entry "get-owner" accessor () () #f #f 47 42 47 50 ()}
        {Lisp-Entry "set-owner" accessor () () #f #f 47 42 47 50 ()}
        {Lisp-Entry "conclude" method (override) ("rest") #f #f 50 20 50 28 ("self" "register-overlapped" "nextmethod" "rest")}
        {Lisp-Entry "destroy" method (override) () #f #f 55 20 55 27 ("nextmethod" "self" "unregister-overlapped")}
        {Lisp-Entry "get-owners" method (public) () #f #f 65 18 65 28 ("get-owners" "get-owners~" "cons" "self" "list" "owner" "not" "if")}}}})
"Pad-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Pad-Preferences.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.ui.preference.Pad-Preferences" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Pad-Preferences" class (undocumented) ((extends . "Figure-Preferences")) #f #f 45 20 45 35 ("Figure-Preferences")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "apply-root" method (override) ("player") #f #f 57 20 57 30 ("get-root" "get-root~" "apply-to" "self" "preferences:" "offscreen?:" "Pad-View" "new" "set-root" "set-root~" "player")}
        {Lisp-Entry "apply-preferences" method (override) ("(parent #f)") #f #f 62 20 62 37 ("self" "preferences:" "parent:" "Pad-View" "new" "apply-to" "assert" "parent")}
        {Lisp-Entry "apply-to" method () ("pad") #f #f 67 11 67 19 ("layout-view" "layout-view~" "get-children" "get-children~" "get-guest" "get-guest~" "host-install" "host-install~" "Host-View" "is?" "when" "child" "children" "apply-preferences" "apply-preferences~" "pref" "lambda" "for-each" "get-visible?" "set-visible?" "set-visible?~" "location" "set-location" "set-location~" "remove-children" "remove-children~" "pad")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 86 25 86 45 ("Pad-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 95 11 95 17 ()
        {Lisp-Entry "import" import () () #f #f 98 1 98 7 ("jazz.designer")}
        {Lisp-Entry "Pad-Preferences-Descriptor" class () ((extends . "Figure-Preferences-Descriptor")) #f #f 101 7 101 33 ("Figure-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 104 3 104 7 ("location" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image:" "install" "<install>")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 109 20 109 61 ("Stage-Preferences" "Docked-Preferences" "Pad-Preferences" "Splitter-Preferences" "reference" "list" "component")}}}}})
"Pad-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Pad-View.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.ui.view.Pad-View" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system")}
      {Lisp-Entry "Pad-View" class () ((extends . "View")) #f #f 44 7 44 15 ("View")
        {Lisp-Entry "preferences" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 23 ()}
        {Lisp-Entry "get-preferences" accessor () () #f #f 47 48 47 56 ()}
        {Lisp-Entry "set-preferences" accessor () () #f #f 47 48 47 56 ()}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 55 20 55 31 ("layout-view" "nextmethod" "size")}
        {Lisp-Entry "layout" method (override) () #f #f 60 20 60 26 ("neq?" "children" "selection" "get-location" "get-location~" "eq?" "when" "for-each" "set-size" "set-size~" "0" "Point" "set-position" "set-position~" "set-visible?" "set-visible?~" "visible?" "child" "lambda" "proc" "get-size" "size" "let*")}
        {Lisp-Entry "add-view" method (public) ("view") #f #f 82 18 82 26 ("self" "set-parent" "set-parent~" "view")}
        {Lisp-Entry "remove-view" method (public) ("view") #f #f 86 18 86 29 ("set-parent" "set-parent~" "view")}
        {Lisp-Entry "remove-children" method (public) () #f #f 90 18 90 33 ("children" "get-guest" "get-guest~" "host-uninstall" "host-uninstall~" "Host-View" "is?" "when" "set-parent" "set-parent~" "set-visible?" "set-visible?~" "child" "lambda" "for-each")}
        {Lisp-Entry "get-selection" method (public) () #f #f 104 18 104 31 ("children" "selection" "get-location" "get-location~" "eq?" "child" "lambda" "find-if")}
        {Lisp-Entry "set-selection" method (public) ("target") #f #f 110 18 110 31 ("layout-view" "children" "set-location" "set-location~" "get-children" "get-children~" "selection" "eq?" "if" "location" "set-property" "set-property~" "Docked-Preferences" "child" "lambda" "for-each" "preferences" "and" "get-application" "get-workspaces-designer" "get-workspaces-designer~" "designer" "get-preferences" "get-preferences~" "target-pref" "let" "Docked-Host" "is?" "when" "save-preferences" "define" "target")}
        {Lisp-Entry "select-next" method (public) () #f #f 128 18 128 29 ("get-host" "get-host~" "focus-host" "focus-host~" "set-selection" "get-selection" "next-child" "next" "let")}}}})
"Page-Content"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Page-Content.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.print.Page-Content" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Page-Content" class (undocumented) ((extends . "View")) #f #f 45 20 45 32 ("View")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("White" "Color" "background:" "install" "<install>")}}}})
"Page-Document"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Page-Document.jazz"} 241761214. jazz
    {Lisp-Entry "jazz.ui.print.Page-Document" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Page-Document" class (undocumented) ((extends . "Layout-View")) #f #f 45 20 45 33 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("border" "layout-type:" "White" "Color" "background:" "install" "<install>")}}}})
"Page-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Page-Editor.jazz"} 241664432. jazz
    {Lisp-Entry "jazz.ui.print.Page-Editor" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.workspace" "jazz.ui.dialog" "jazz.ui" "jazz.system" "jazz.platform" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "Page-Editor" class (undocumented) ((extends . "Layout-View")) #f #f 52 20 52 31 ("explicit" "Layout-View")
        {Lisp-Entry "client" property () ((initialize . "#f") (accessors . "explicit")) #f #f 55 12 55 18 ()}
        {Lisp-Entry "client-designer" slot () () #f #f 58 8 58 23 ()}
        {Lisp-Entry "designer" slot () () #f #f 59 8 59 16 ()}
        {Lisp-Entry "form" form () () #f #f 62 3 62 7 ("shadow" "border-type:" "664" "514" "Dimension" "size:" "0" "Point" "position:" "border" "name:" "Border-View" "<Border-View>" "Dark" "Color" "background:" "center" "layout-type:" "install" "<install>")}
        {Lisp-Entry "host-workspaces" method (override) () #f #f 72 20 72 35 ("page")}
        {Lisp-Entry "find-page-setup" method () () #f #f 81 11 81 26 ("border" "locate" "first-child" "first-child~")}
        {Lisp-Entry "on-print" method () ("evt") #f #f 90 11 90 19 ("client" "print-document" "print-document~" "evt")}
        {Lisp-Entry "on-print-preview" method () ("evt") #f #f 94 11 94 27 ("from-layout?:" "client" "print-preview" "print-preview~" "evt")}
        {Lisp-Entry "on-page-setup" method () ("evt") #f #f 98 11 98 24 ("page-setup" "evt")}
        {Lisp-Entry "on-fit" method () ("evt") #f #f 102 11 102 17 ("set-fit" "fit:" "get-property" "get-property~" "fit" "let" "evt")}
        {Lisp-Entry "set-fit" method () ("fit") #f #f 107 11 107 18 ("designer" "set-property" "set-property~" "find-page-setup" "page-setup" "let" "fit")}
        {Lisp-Entry "on-close" method () ("evt") #f #f 112 11 112 19 ("close-workspace" "evt")}
        {Lisp-Entry "escape-press" method (override) ("key") #f #f 116 20 116 32 ("close-workspace" "key")}
        {Lisp-Entry "activate-page" method (protected) () #f #f 125 21 125 34 ("update-page")}
        {Lisp-Entry "update-page" method () () #f #f 129 11 129 22 ("invalidate-view" "find-page-setup" "Page-Toolbar" "get-toplevel" "find-docked" "find-docked~" "layout-view" "4" "Dimension" "get-size" "get-size~" "nu+" "set-size" "set-size~" "border" "update-border" "locate" "locate~" "set-selected?" "set-selected?~" "get-fit" "get-fit~" "fit" "let" "page-setup" "toolbar" "update-fit" "define")}
        {Lisp-Entry "close-workspace" method () ("save?") #f #f 151 11 151 26 ("get-toplevel" "invalidate-window" "invalidate-window~" "get-previous" "get-previous~" "apply-preferences" "apply-preferences~" "close" "close~" "find-page-setup" "client-designer" "client" "apply-page-setup" "apply-page-setup~" "save-header/footer" "selected-workspace" "workspace" "get-host" "frame" "page-setup" "when" "border" "find-child" "find-child~" "border-form" "get-active-branch" "get-trait" "get-trait~" "get-client-form" "get-client-form~" "form" "let" "find-page-setup-form" "define" "save?")}
        {Lisp-Entry "get-client" method (public) () #f #f 173 18 173 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("value") #f #f 177 18 177 28 ("set-active-trait" "get-form" "get-form~" "context:" "install" "action:" "textual?:" "Form" "client-form:" "set-property" "set-property~" "trait:" "add-child" "add-child~" "parent:" "Trait" "trait" "4" "Dimension" "get-size" "get-size~" "nu+" "set-size" "set-size~" "set-visible?" "set-visible?~" "set-name" "set-name~" "instantiate-parcel" "instantiate-parcel~" "page-setup" "get-page-setup-parcel" "get-page-setup-parcel~" "parcel" "self" "reference:" "Page-Editor" "<Page-Editor>" "form" "<form>" "form:" "Designer" "new" "designer" "locate" "border" "let" "get-page-setup-designer" "get-page-setup-designer~" "client-designer" "client" "set!" "value")}
        {Lisp-Entry "page-setup" method () () #f #f 200 15 200 25 ("update-page" "symbolize-orientation" "layout-insets" "designer" "set-property" "set-property~" "paper-source:" "paper-size:" "orientation:" "margins:" "page-setup-dialog" "size" "receive" "get-paper-source" "get-paper-source~" "paper-source" "get-paper-size" "get-paper-size~" "paper-size" "get-orientation" "get-orientation~" "numerize-orientation" "orientation" "get-layout-insets" "get-layout-insets~" "margins" "get-min-margins" "get-min-margins~" "scale" "min-margins" "find-page-setup" "page-setup" "setup-ratio" "default-resolution" "fl" "<fl>" "cast" "/" "dialog-ratio" "let" "1000" "page-setup-resolution" "define")}
        {Lisp-Entry "page-setup" method () () #f #f 221 14 221 24 ()}
        {Lisp-Entry "numerize-orientation" definition () ("orientation") #f #f 227 19 227 39 ("DMORIENT_LANDSCAPE" "landscape" "DMORIENT_PORTRAIT" "portrait" "case" "orientation")}
        {Lisp-Entry "numerize-orientation" definition () ("orientation") #f #f 232 19 232 39 ("orientation")}
        {Lisp-Entry "symbolize-orientation" definition () ("orientation") #f #f 238 19 238 40 ("landscape" "DMORIENT_LANDSCAPE" "portrait" "DMORIENT_PORTRAIT" "ecase" "orientation")}
        {Lisp-Entry "symbolize-orientation" definition () ("orientation") #f #f 243 19 243 40 ("orientation")}
        {Lisp-Entry "save-header/footer" method () () #f #f 252 11 252 29 ("get-footer" "get-footer~" "footer" "get-model" "get-model~" "get-content" "get-content~" "text-content:" "set-property" "set-property~" "get-modified?" "get-modified?~" "get-header" "get-header~" "header" "designer" "when" "find-page-setup" "page-setup" "let")}}}})
"Page-Footer"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Page-Footer.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.print.Page-Footer" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Page-Footer" class (undocumented) ((extends . "Page-Text-View")) #f #f 44 20 44 31 ("Page-Text-View")
        {Lisp-Entry "get-drawing-background" method (override) ("context") #f #f 52 20 52 42 ("Light-Green" "Color" "nextmethod" "printing?:" "getf" "if" "context")}}}})
"Page-Header"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Page-Header.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.print.Page-Header" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Page-Header" class (undocumented) ((extends . "Page-Text-View")) #f #f 44 20 44 31 ("Page-Text-View")
        {Lisp-Entry "get-drawing-background" method (override) ("context") #f #f 52 20 52 42 ("Light-Yellow" "Color" "nextmethod" "printing?:" "getf" "if" "context")}}}})
"Page-Setup"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Page-Setup.jazz"} 242213477. jazz
    {Lisp-Entry "jazz.ui.print.Page-Setup" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.platform" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "default-paper-size" definition () () #f #f 49 17 49 35 ("DMPAPER_LETTER")}
      {Lisp-Entry "default-paper-source" definition () () #f #f 52 17 52 37 ("DMBIN_AUTO")}
      {Lisp-Entry "default-paper-size" definition () () #f #f 55 17 55 35 ()}
      {Lisp-Entry "default-paper-source" definition () () #f #f 58 17 58 37 ()}
      {Lisp-Entry "Page-Setup" class (undocumented) ((extends . "Layout-View")) #f #f 62 20 62 30 ("0" "Rect" "default-paper-source" "default-paper-size" "portrait" "width" "Layout-View")
        {Lisp-Entry "fit" property () ((initialize . "'width") (accessors . "generate")) #f #f 65 12 65 15 ()}
        {Lisp-Entry "get-fit" accessor () () #f #f 65 69 65 77 ()}
        {Lisp-Entry "set-fit" accessor () () #f #f 65 69 65 77 ()}
        {Lisp-Entry "orientation" property () ((initialize . "'portrait") (accessors . "generate")) #f #f 66 12 66 23 ()}
        {Lisp-Entry "get-orientation" accessor () () #f #f 66 69 66 77 ()}
        {Lisp-Entry "set-orientation" accessor () () #f #f 66 69 66 77 ()}
        {Lisp-Entry "paper-size" property () ((initialize . "(default-paper-size)") (accessors . "generate")) #f #f 67 12 67 22 ()}
        {Lisp-Entry "get-paper-size" accessor () () #f #f 67 69 67 77 ()}
        {Lisp-Entry "set-paper-size" accessor () () #f #f 67 69 67 77 ()}
        {Lisp-Entry "paper-source" property () ((initialize . "(default-paper-source)") (accessors . "generate")) #f #f 68 12 68 24 ()}
        {Lisp-Entry "get-paper-source" accessor () () #f #f 68 69 68 77 ()}
        {Lisp-Entry "set-paper-source" accessor () () #f #f 68 69 68 77 ()}
        {Lisp-Entry "min-margins" property () ((initialize . "{Rect 0 0 0 0}") (accessors . "generate")) #f #f 69 12 69 23 ()}
        {Lisp-Entry "get-min-margins" accessor () () #f #f 69 69 69 77 ()}
        {Lisp-Entry "set-min-margins" accessor () () #f #f 69 69 69 77 ()}
        {Lisp-Entry "form" form () () #f #f 72 3 72 7 ("south" "footer" "Page-Footer" "<Page-Footer>" "center" "content" "Page-Content" "<Page-Content>" "north" "location:" "19" "100" "Dimension" "size:" "header" "Page-Header" "<Page-Header>" "document" "name:" "Page-Document" "<Page-Document>" "White" "Color" "background:" "54" "Rect" "layout-insets:" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "default-size" method (override) () #f #f 80 20 80 32 ("11" "default-resolution" "17/2" "*" "Dimension" "new")}
        {Lisp-Entry "get-document" method (public) () #f #f 89 18 89 30 ("document" "locate")}
        {Lisp-Entry "get-header" method (public) () #f #f 98 18 98 28 ("header" "locate")}
        {Lisp-Entry "get-content" method (public) () #f #f 107 18 107 29 ("content" "locate")}
        {Lisp-Entry "get-content-rect" method (public) () #f #f 111 18 111 34 ("get-bounds" "get-bounds~" "acquire" "get-content" "content" "let")}
        {Lisp-Entry "scale-content" method (public) ("client" "dest-resolution") #f #f 116 18 116 31 ("default-resolution" "fit-rects" "transpose-rect" "reverse-landscape" "landscape" "get-content-rect" "reverse-portrait" "portrait" "orientation" "case" "content-rect" "get-print-area" "get-print-area~" "area" "let" "1." "none" "fit" "eq?" "if" "*" "fl" "<fl>" "cast" "/" "dest-resolution" "client")}
        {Lisp-Entry "get-footer" method (public) () #f #f 133 18 133 28 ("footer" "locate")}
        {Lisp-Entry "wrap-header/footer" method (public) ("context") #f #f 142 18 142 36 ("get-footer" "get-header" "get-model" "get-model~" "wrap-content" "wrap-content~" "context")}
        {Lisp-Entry "get-drawing-background" method (override) ("context") #f #f 152 20 152 42 ("255" "blue:" "green:" "193" "red:" "Color" "nextmethod" "printing?:" "getf" "if" "context")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 158 20 158 24 ("Light-Purple" "Color" "min-margins" "inset-rect" "fill-rect" "fill-rect~" "get-bounds" "bounds" "let" "printing?:" "getf" "unless" "context" "surface")}}}})
"Page-Status"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Page-Status.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.print.Page-Status" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Page-Status" class (undocumented) ((extends . "Status-Toolbar")) #f #f 45 20 45 31 ("Status-Toolbar")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("center" "location:" "20" "782" "Dimension" "size:" "message" "name:" "Status-Label" "<Status-Label>" "install" "<install>")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 58 25 58 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 62 25 62 35 ()}}}})
"Page-Text-Palette"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Page-Text-Palette.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.print.Page-Text-Palette" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Page-Text-Palette" class (undocumented) ((extends . "Text-Palette")) #f #f 45 20 45 37 ("Text-Palette")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("on-insert-time" "insert-time" "on-insert-date" "insert-date" "on-insert-count" "insert-count" "on-insert-no" "insert-no" "on-insert-filename" ":focus" "Event-Handler" "action-handler:" "enabled?:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "insert-filename" "Push-Tool" "<Push-Tool>" "Separator" "<Separator>" "insert-table" "table-separator" "insert-image" "image-separator" "toggle-ruler" "ruler-separator" "visible?:" "style-border" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "enable-buttons" method (override) ("enabled?") #f #f 67 20 67 34 ("insert-time" "insert-date" "insert-count" "insert-no" "insert-filename" "locate" "set-enabled?" "set-enabled?~" "nextmethod" "enabled?")}}}})
"Page-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Page-Text-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.print.Page-Text-View" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Page-Text-View" class (undocumented) ((extends . "Formatted-Text-View")) #f #f 44 20 44 34 ("Formatted-Text-View")
        {Lisp-Entry "new-model" method (override) () #f #f 47 20 47 29 ("0" "left-padding:" "Text" "Font" "font:" "Text-Style" "base-style:" "Formatted-Text-Model" "new")}
        {Lisp-Entry "scrollee-height" method (override) () #f #f 51 20 51 35 ("model" "get-visible-height" "get-visible-height~" "top-padding" "+")}
        {Lisp-Entry "layout-scrollee-content" method (override) () #f #f 55 20 55 43 ("parent" "layout-view" "layout-view~" "nextmethod")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 60 20 60 36 ("new-text-context-menu")}
        {Lisp-Entry "default-size" method (override) () #f #f 64 20 64 32 ("19" "100" "Dimension")}
        {Lisp-Entry "on-insert-filename" method () ("evt") #f #f 73 11 73 29 ("filename" "insert-info" "evt")}
        {Lisp-Entry "on-insert-no" method () ("evt") #f #f 77 11 77 23 ("no" "insert-info" "evt")}
        {Lisp-Entry "on-insert-count" method () ("evt") #f #f 81 11 81 26 ("count" "insert-info" "evt")}
        {Lisp-Entry "on-insert-date" method () ("evt") #f #f 85 11 85 25 ("date" "insert-info" "evt")}
        {Lisp-Entry "on-insert-time" method () ("evt") #f #f 89 11 89 25 ("time" "insert-info" "evt")}
        {Lisp-Entry "insert-info" method (public) ("what") #f #f 98 18 98 29 ("insert-styled" "what:" "Base" "base:" "Info-Style" "new" "style" "let" "what")}}}})
"Page-Toolbar"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Page-Toolbar.jazz"} 241761214. jazz
    {Lisp-Entry "jazz.ui.print.Page-Toolbar" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Page-Toolbar" class (undocumented) ((extends . "Toolbar")) #f #f 46 20 46 32 ("Toolbar")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("on-close" "22" "60" "title:" "close" "Push-Button" "<Push-Button>" "14" "height" "width" "both" "4" "fit:" "on-fit" "selected?:" "tooltip?:" ":images" "portfolio:" "none" "Radio-Tool" "<Radio-Tool>" "on-page-setup" "page-setup" "0" "12" "Dimension" "size:" "Separator" "<Separator>" "on-print-preview" "print-preview" "on-print" ":document" "Event-Handler" "action-handler:" "Image-Resource" "resource:" "tooltip-text:" "print" "name:" "Action-Icon" "<Action-Icon>" "install" "<install>")}
        {Lisp-Entry "client-activate" method (override) () #f #f 65 20 65 35 ("activate-page" "activate-page~" "when" "Page-Editor" "find-frame-guest" "editor" "let")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 76 25 76 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 80 25 80 35 ()}}}})
"Page-Workspace"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Page-Workspace.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.print.Page-Workspace" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Page-Workspace" class (undocumented) ((extends . "Workspace-Preferences")) #f #f 45 20 45 34 ("Workspace-Preferences")
        {Lisp-Entry "previous" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 20 ()}
        {Lisp-Entry "get-previous" accessor () () #f #f 48 45 48 53 ()}
        {Lisp-Entry "set-previous" accessor () () #f #f 48 45 48 53 ()}
        {Lisp-Entry "form" form () () #f #f 51 3 51 7 ("Stage-Preferences" "<Stage-Preferences>" "Page-Text-Palette" "-32" "status" "Page-Status" "-23" "line" "second" "text" "Page-Toolbar" "Class-Reference" "model:" "first" "Toolbar-Preferences" "<Toolbar-Preferences>" "vert" "orientation:" "27" "division:" "edge" "separator:" "root" "location:" "toolbar" "name:" "Splitter-Preferences" "<Splitter-Preferences>" "Image-Resource" "icon:" "title:" "install" "<install>")}}}})
"Paint-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Paint-Event.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.event.Paint-Event" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Paint-Event" class () ((extends . "Event")) #f #f 43 7 43 18 ("Event")
        {Lisp-Entry "surface" slot () () #f #f 46 8 46 15 ()}
        {Lisp-Entry "initialize" method (override) ("kind" "sender" "surface") #f #f 49 20 49 30 ("self" "surface~self" "set!" "nextmethod" "surface" "sender" "kind")}
        {Lisp-Entry "get-dc" method (public) () #f #f 54 18 54 24 ("surface")}
        {Lisp-Entry "get-hdc" method (public) () #f #f 58 18 58 25 ("surface" "get-hdc" "get-hdc~")}}}})
"Palette"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "Palette.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.window.Palette" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui" "jazz.jml")}
      {Lisp-Entry "Palette" class () ((extends . "Overlapped")) #f #f 45 7 45 14 ("Overlapped")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("hide" "close-behavior:" "install" "<install>")}
        {Lisp-Entry "default-parent" method (override) () #f #f 57 20 57 34 ("palette-parent")}
        {Lisp-Entry "new-root" method (override) () #f #f 66 20 66 28 ("offscreen?:" "Palette-Host" "new")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 75 20 75 35 ()}}}})
"Palette-Host"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "hosting" "Palette-Host.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.hosting.Palette-Host" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Palette-Host" class (undocumented) ((extends . "Host-View")) #f #f 45 20 45 32 ("Host-View")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Medium" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "on-close" method () ("evt") #f #f 57 11 57 19 ("player" "hide" "hide~" "evt")}
        {Lisp-Entry "dock-palette" method () () #f #f 67 11 67 23 ("dock-feedback" "highlight:" "get-toplevel" "list" "include:" "dock-to" "click:" "pick-figure")}
        {Lisp-Entry "dock-feedback" method () ("picker" "figure" "pos") #f #f 74 11 74 24 ("figure-rect" "self" "set-feedback-rect" "pos" "figure" "picker")}
        {Lisp-Entry "figure-rect" method (meta) ("picker" "figure") #f #f 79 16 79 27 ("get-bounds" "get-bounds~" "get-parent" "get-parent~" "acquire" "acquire~" "get-root" "get-root~" "root" "get-display" "get-display~" "display" "get-player" "get-player~" "player" "let" "View" "is?" "when" "figure" "picker")}
        {Lisp-Entry "dock-to" method () ("to-view" "pos") #f #f 88 11 88 18 ("set-selection" "set-selection~" "set-guest" "set-guest~" "set-title" "set-title~" "parent:" "Docked-Host" "new" "new-host" "close" "close~" "unanchor-guest" "unanchor-guest~" "set-parent" "set-parent~" "get-title" "get-title~" "title" "guest" "player" "let*" "null?" "Pad-Window" "find-ascendant" "find-ascendant~" "to-pad" "get-guest" "get-guest~" "to-guest" "bell" "Host-View" "is-not?" "if" "get-player" "get-player~" "to-player" "let" "pos" "to-view")}}
      {Lisp-Entry "Palette-Menu" class () ((extends . "Context-Menu")) #f #f 114 7 114 19 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 117 3 117 7 ("on-dock" ":form" "Event-Handler" "action-handler:" "title:" "dock" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}
        {Lisp-Entry "on-dock" method () ("evt") #f #f 122 11 122 18 ("dock-palette" "evt")}}}})
"Palette-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Palette-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Palette-Preferences" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Palette-Preferences" class (undocumented) ((extends . "Figure-Preferences")) #f #f 45 20 45 39 ("Figure-Preferences")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Image-Resource" "icon:" "install" "<install>")}
        {Lisp-Entry "apply-preferences" method (override) ("(client #f)") #f #f 57 20 57 37 ("set-visible?" "set-visible?~" "client-activate" "client-activate~" "nextmethod" "client")}}}})
"Paragraph"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Paragraph.jazz"} 245382887. jazz
    {Lisp-Entry "jazz.ui.text.Paragraph" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "proclaim" proclaim () () #f #f 45 1 45 9 ("optimizations" "warn")}
      {Lisp-Entry "Paragraph" class () ((extends . "Outline-Row")) #f #f 48 7 48 16 ("Outline-Row")
        {Lisp-Entry "format" slot (protected) ((initialize . "#f") (accessors . "generate")) #f "<Format>" 51 18 51 24 ("Format" "<Format>")}
        {Lisp-Entry "get-format" accessor () () #f #f 51 58 51 66 ()}
        {Lisp-Entry "set-format" accessor () () #f #f 51 58 51 66 ()}
        {Lisp-Entry "string" slot (protected) ((accessors . "generate")) #f "<string>" 52 18 52 24 ("string" "<string>")}
        {Lisp-Entry "get-string" accessor () () #f #f 52 58 52 66 ()}
        {Lisp-Entry "set-string" accessor () () #f #f 52 58 52 66 ()}
        {Lisp-Entry "runs" slot (protected) ((accessors . "generate")) #f "<list>" 53 18 53 22 ("list" "<list>")}
        {Lisp-Entry "get-runs" accessor () () #f #f 53 58 53 66 ()}
        {Lisp-Entry "set-runs" accessor () () #f #f 53 58 53 66 ()}
        {Lisp-Entry "lines" slot (protected) ((accessors . "generate")) #f "<list>" 54 18 54 23 ("list" "<list>")}
        {Lisp-Entry "get-lines" accessor () () #f #f 54 58 54 66 ()}
        {Lisp-Entry "set-lines" accessor () () #f #f 54 58 54 66 ()}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 57 20 57 25 ("string" "write" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "set-size" method (override) ("sz") #f #f 65 20 65 28 ("size" "set!" "sz")}
        {Lisp-Entry "get-length" method (public) () #f "<fx>" 74 18 74 28 ("string" "cardinality" "cast" "fx" "<fx>")}
        {Lisp-Entry "paragraph-left" method (public) () #f "<fx>" 78 18 78 32 ("format" "get-left-margin" "get-left-margin~" "position" "get-h" "get-h~" "+" "fx" "<fx>")}
        {Lisp-Entry "paragraph-top" method (public) () #f "<fx>" 82 18 82 31 ("position" "get-v" "get-v~" "fx" "<fx>")}
        {Lisp-Entry "compute-width" method (public) () #f "<fx>" 91 18 91 31 ("runs" "compute-width" "compute-width~" "increase!" "Run" "<Run>" "run" "lambda" "for-each" "format" "get-left-margin" "get-left-margin~" "width" "let" "fx" "<fx>")}
        {Lisp-Entry "range-region" method (protected) ("left-padding" "<fx>" "start" "end" "width" "transformer") #f #f 105 21 105 33 ("combine!" "combine!~" "self" "if" "range-region" "range-region~" "sub" "with" "limit" "lambda" "for-each-logical-range" "region" "w" "e" "col->text" "s" "else" "offset-rect" "offset" "get-bottom" "get-bottom~" "get-top" "get-top~" "-" "right" "col->view" "col->view~" "get-h" "get-h~" "beginning" "lines" "last" "Line" "<Line>" "line" "let*" "rect:" "keep-rectangles?:" "Region" "size" "get-height" "get-height~" "+" "Rect" "new" "rect" "not" "=" "and" "cond" "paragraph-top" "top" "paragraph-left" "left" "string" "cardinality" "re" "0" "or" "rs" "let" "transformer" "width" "end" "start" "fx" "<fx>" "left-padding")}
        {Lisp-Entry "for-each-logical-range" method () ("start" "<Cell>" "end" "<Cell>" "ignored" "proc" "<procedure>") #f #f 135 11 135 33 ("else" "cond" "get-length" "get-length~" "len" "line" "let*" "to" "from" "n" "for" "loop" "limit" "beginning" "let" "get-col" "get-col~" "get-line" "get-line~" "=" "if" "/=" "when" "procedure" "<procedure>" "proc" "ignored" "end" "Cell" "<Cell>" "start")}
        {Lisp-Entry "get-line" method (public) ("n" "<fx>") #f "<Line>" 154 18 154 26 ("lines" "element" "Line" "<Line>" "fx" "<fx>" "n")}
        {Lisp-Entry "get-line-at" method (public) ("col" "<fx>") #f "<Line>" 158 18 158 29 ("col->text" "get-line~" "get-line" "Line" "<Line>" "fx" "<fx>" "col")}
        {Lisp-Entry "get-run" method (public) ("col" "<fx>") #f "<Run+>" 167 18 167 25 ("continuation-return" "<=" ">" "and" "when" "limit" "offset" "Run" "<Run>" "run" "runs" "for-each-run" "return" "lambda" "continuation-capture" "Run+" "<Run+>" "fx" "<fx>" "col")}
        {Lisp-Entry "first-run" method (public) () #f "<Run+>" 177 18 177 27 ("car" "runs" "null?" "if" "Run+" "<Run+>")}
        {Lisp-Entry "range-runs" method (protected) ("start" "<fx>" "end" "<fx>") #f #f 183 21 183 31 ("get-output" "get-output~" "right" "left" "over" "put" "put~" "inside" "case" "limit" "offset" "where" "for-each-range-run" "get-style" "get-style~" "string" "subseq!" "e" "s" "Run" "<Run>" "run" "lambda" "make" "List-Factory" "new" "fact" "let" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "for-each-range-run" method () ("start" "<fx>" "end" "<fx>" "proc") #f #f 210 11 210 29 ("right" "else" "left" "over" ">" "<" "inside" "and" "outside" ">=" "<=" "or" "cond" "limit" "offset" "Run" "<Run>" "run" "lambda" "runs" "for-each-run" "proc" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "determine-run-range" method (public) ("target") #f #f 228 18 228 37 ("Range" "new" "continuation-return" "eq?" "when" "limit" "fx" "<fx>" "offset" "Run" "<Run>" "run" "runs" "for-each-run" "return" "lambda" "continuation-capture" "target")}
        {Lisp-Entry "set-style" method (protected) ("start" "<fx>" "end" "<fx>" "style") #f #f 243 21 243 30 ("s" "lambda" "modify-style" "style" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "set-text-alignment" method (protected) ("start" "<fx>" "end" "<fx>" "alignment") #f #f 249 21 249 39 ("alignment:" "extend" "extend~" "Style" "<Style>" "style" "lambda" "modify-style" "alignment" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "set-text-font" method (protected) ("start" "<fx>" "end" "<fx>" "font") #f #f 255 21 255 34 ("font:" "extend" "extend~" "Style" "<Style>" "style" "lambda" "modify-style" "font" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "set-text-color" method (protected) ("start" "<fx>" "end" "<fx>" "color") #f #f 261 21 261 35 ("color:" "extend" "extend~" "Style" "<Style>" "style" "lambda" "modify-style" "color" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "set-highlight-color" method (protected) ("start" "<fx>" "end" "<fx>" "color") #f #f 267 21 267 40 ("highlight:" "extend" "extend~" "Style" "<Style>" "style" "lambda" "modify-style" "color" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "set-frame-color" method (protected) ("start" "<fx>" "end" "<fx>" "color") #f #f 273 21 273 36 ("frame:" "extend" "extend~" "Style" "<Style>" "style" "lambda" "modify-style" "color" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "set-font-name" method (protected) ("start" "<fx>" "end" "<fx>" "name") #f #f 279 21 279 34 ("font-name:" "get-font" "get-font~" "font:" "extend" "extend~" "font" "supports?" "supports?~" "when" "Style" "<Style>" "style" "lambda" "modify-style" "name" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "set-point-size" method (protected) ("start" "<fx>" "end" "<fx>" "size") #f #f 286 21 286 35 ("point-size:" "get-font" "get-font~" "font:" "extend" "extend~" "font" "supports?" "supports?~" "when" "Style" "<Style>" "style" "lambda" "modify-style" "size" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "toggle-bold" method (protected) ("start" "<fx>" "end" "<fx>") #f #f 293 21 293 32 ("get-bold?" "get-bold?~" "not" "bold?:" "font:" "extend" "extend~" "get-font" "get-font~" "font" "let" "Style" "<Style>" "style" "lambda" "modify-style" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "toggle-italic" method (protected) ("start" "<fx>" "end" "<fx>") #f #f 300 21 300 34 ("get-italic?" "get-italic?~" "not" "italic?:" "font:" "extend" "extend~" "get-font" "get-font~" "font" "let" "Style" "<Style>" "style" "lambda" "modify-style" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "toggle-underline" method (protected) ("start" "<fx>" "end" "<fx>") #f #f 307 21 307 37 ("get-underline?" "get-underline?~" "not" "underline?:" "font:" "extend" "extend~" "get-font" "get-font~" "font" "let" "Style" "<Style>" "style" "lambda" "modify-style" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "modify-style" method (protected) ("start" "<fx>" "end" "<fx>" "proc") #f #f 314 21 314 33 ("get-output" "get-output~" "coalesce-runs" "runs" "set!" "right" "left" "over" "inside" "put" "put~" "outside" "case" "limit" "offset" "where" "for-each-range-run" "intern-style" "intern-style~" "new-style" "style" "make" "get-style" "get-style~" "subseq!" "e" "s" "Run" "<Run>" "run" "lambda" "split" "List-Factory" "new" "fact" "string" "cardinality" "0" "or" "parent" "Text-Model" "<Text-Model>" "model" "let*" "proc" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "remove-coloring" method (protected) ("default-style" "<Style>") #f #f 347 21 347 36 ("runs" "set!" "set-style" "set-style~" "get-color" "get-color~" "Text-Style" "is?" "and" "when" "get-style" "get-style~" "style" "Run" "<Run>" "run" "lambda" "for-each" "modified?" "let" "Style" "<Style>" "default-style")}
        {Lisp-Entry "coalesce-runs" definition () ("runs" "<list>") #f "<list>" 358 15 358 28 ("set-cdr!" "cardinality" "fx" "<fx>" "cast" "get-string" "get-string~" "grow-subseq!" "set!" "propagate?" "propagate?~" "not" "neq?" "or" "get-style" "get-style~" "previous-style" "car" "Run" "<Run>" "previous-run" "not-null?" "while" "cdr" "scan" "previous" "let" "null?" "if" "list" "<list>" "runs")}
        {Lisp-Entry "flatten" method (protected) () #f "<void>" 379 21 379 28 ("get-height" "get-height~" "row-height" "list" "lines" "set!" "0" "runs" "parent" "Line" "new" "line" "let" "void" "<void>")}
        {Lisp-Entry "wrap" method (protected) ("context" "width" "<fx>") #f "<void>" 385 21 385 25 ("+" "row-height" "self" "lines~self" "wrap" "wrap~" "get-length" "get-length~" "increase!" "set!" "reset" "reset~" "height-update" "height-update~" "Run" "<Run>" "for-each" "get-height" "get-height~" "height" "Line" "line" "tail" "justify" "center" "case" "line-left" "get-output" "get-output~" "runs" "right" "break-line" "put" "put~" "run" "lambda" "place" "lruns" "List-Factory" "new" "lines" "get-tabs" "get-tabs~" "tabs" "top" "left" "get-paragraph-spacing" "get-paragraph-spacing~" "spacing" "get-left-margin" "get-left-margin~" "margin" "format" "get-justification" "get-justification~" "justification" "offset" "0" "rank" "parent" "Text-Model" "<Text-Model>" "model" "let*" "void" "<void>" "fx" "<fx>" "width" "context")}
        {Lisp-Entry "Bullet-Outside" definition () () #f #f 426 14 426 28 ("Blue" "Color")}
        {Lisp-Entry "Bullet-Inside" definition () () #f #f 429 14 429 27 ("255" "blue:" "102" "green:" "51" "red:" "Color")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 433 20 433 24 ("increase!" "draw-line" "draw-line~" "Line" "<Line>" "line" "lambda" "for-each" "get-bulleted?" "get-bulleted?~" "fill-rect" "fill-rect~" "get-width" "rect" "let" "0" "get-background" "get-background~" "background" "get-right-margin" "get-right-margin~" "right-margin" "get-left-margin" "get-left-margin~" "left-margin" "get-tabs" "get-tabs~" "tabs" "parent" "Text-Model" "<Text-Model>" "model" "Rect" "new" "ellipse" "ellipse~" "7" "set!" "8" "=" "when" "1" "2" "-" "fxround/" "+" "vert" "Bullet-Inside" "get-bullet-inside" "get-bullet-inside~" "inside" "Bullet-Outside" "format" "get-bullet-outside" "get-bullet-outside~" "or" "outside" "40" "percent" "fxround" "size" "lines" "car" "get-height" "get-height~" "height" "let*" "void" "<void>" "left" "v" "fx" "<fx>" "h" "draw-bullet" "define" "context" "surface")}
        {Lisp-Entry "replace-range" method (protected) ("start" "<fx>" "end" "str" "<string>") #f "<void>" 468 21 468 34 ("append!" "coalesce-runs" "set-string" "set-string~" "limit" "offset" "for-each-run" "get-length~" ">" "replacement-list" "subseq!" "new" "replacement" "replace-subseq!" "set!" "get-propagate-styles?" "get-propagate-styles?~" "not-null?" "and" "if" "get-length" "after" "0" "range-runs" "before" "-" "delta" "+" "new-end" "or" "cardinality" "inserted" "Text-Model" "<Text-Model>" "model" "let*" "parent" "get-default-style" "get-default-style~" "continuation-return" "propagate?" "propagate?~" "when" "get-style" "get-style~" "style" "let" "Run" "<Run>" "run" "for-each-reversed" "return" "lambda" "continuation-capture" "list" "<list>" "runs" "find-propagatable-style" "define" "void" "<void>" "string" "<string>" "str" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "replace-runs" method (protected) ("start" "<fx>" "end" "replacement") #f #f 502 21 502 33 ("append!" "coalesce-runs" "self" "get-view" "get-view~" "set-parent" "set-parent~" "View-Style" "is?" "when" "get-style" "get-style~" "style" "subseq!" "set-string" "set-string~" "limit" "offset" "for-each-run" "replace-subseq!" "set!" "get-length" "after" "0" "range-runs" "before" "-" "delta" "+" "new-end" "or" "cardinality" "inserted" "str" "let*" "get-output-string" "get-string" "get-string~" "print-content" "print-content~" "Run" "<Run>" "run" "lambda" "for-each" "open-output-string" "output" "let" "string" "<string>" "list" "<list>" "runs" "runs->str" "define" "replacement" "end" "fx" "<fx>" "start")}
        {Lisp-Entry "replace-beginning" method (protected) ("runs" "<list>") #f "<void>" 533 21 533 38 ("0" "replace-runs" "void" "<void>" "list" "<list>" "runs")}
        {Lisp-Entry "replace-ending" method (protected) ("runs" "<list>") #f "<void>" 537 21 537 35 ("replace-runs" "string" "cardinality" "fx" "<fx>" "cast" "len" "let" "void" "<void>" "list" "<list>" "runs")}
        {Lisp-Entry "view->col" method (protected) ("pos" "<Point>") #f "<fx>" 548 21 548 30 ("lines" "get-offset" "get-offset~" "+" "continuation-return" "when" "view->col" "view->col~" "col" "Line" "<Line>" "line" "for-each" "return" "lambda" "continuation-capture" "get-v" "get-v~" "1" "get-height" "min" "0" "max" "format" "get-left-margin" "get-left-margin~" "get-h" "get-h~" "-" "new" "let" "fx" "<fx>" "Point" "<Point>" "pos")}
        {Lisp-Entry "col->view" method (protected) ("col" "<fx>") #f "<Point>" 560 21 560 30 ("get-v" "get-v~" "get-h" "get-h~" "paragraph-left" "+" "new" "continuation-return" "when" "get-offset" "get-offset~" "-" "col->view" "col->view~" "view" "neq?" "strict?" "let*" "Line" "<Line>" "line" "for-each" "return" "lambda" "continuation-capture" "lines" "last" "let" "Point" "<Point>" "fx" "<fx>" "col")}
        {Lisp-Entry "col->view-extended" method (protected) ("col" "<fx>") #f #f 573 21 573 39 ("get-v" "get-v~" "get-h" "get-h~" "paragraph-left" "+" "Point" "new" "cons" "continuation-return" "when" "get-offset" "get-offset~" "-" "col->view" "col->view~" "view" "neq?" "strict?" "let*" "Line" "<Line>" "line" "for-each" "return" "lambda" "continuation-capture" "lines" "last" "let" "fx" "<fx>" "col")}
        {Lisp-Entry "col->text" method (protected) ("col" "<fx>") #f "<Cell>" 586 21 586 30 ("get-length" "get-length~" "get-rank" "get-rank~" "new" "lines" "set!" "continuation-return" "when" "col->text" "col->text~" "text" "Line" "<Line>" "line" "for-each" "return" "lambda" "continuation-capture" "last" "let" "Cell" "<Cell>" "fx" "<fx>" "col")}}}})
"Password-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "Password-Request.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.Password-Request" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Password-Request" class (undocumented) ((extends . "String-Request")) #f #f 44 20 44 36 ("String-Request")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("prefix" "name:" "!" "<!>" "title:" "install" "<install>")}}}})
"Password-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Password-Text-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Password-Text-View" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Password-Text-View" class () ((extends . "Text-View")) #f #f 44 7 44 25 ("Text-View")
        {Lisp-Entry "new-model" method (override) () #f #f 47 20 47 29 ("top-padding:" "2" "left-padding:" "Password" "Font" "font:" "Text-Style" "base-style:" "Password-Text-Model" "new")}
        {Lisp-Entry "copy-selection" method (override) () #f #f 51 20 51 34 ("bell")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 55 20 55 36 ("new-text-context-menu")}}
      {Lisp-Entry "Password-Text-Model" class () ((extends . "Text-Model")) #f #f 64 7 64 26 ("Text-Model")
        {Lisp-Entry "draw-outline" method (override) ("surface" "context" "outline" "scrolled-v") #f #f 67 20 67 32 ("draw-text" "draw-text~" "Black" "Color" "set-text-color" "set-text-color~" "set-font" "set-font~" "-" "get-v" "get-v~" "+" "v" "get-h" "get-h~" "h" "get-font" "get-font~" "font" "get-default-style" "style" "effective-font" "get-metrics" "get-metrics~" "font-height" "get-height" "get-height~" "height" "get-position" "get-position~" "pos" "cardinality" "make-string" "hidden" "get-string" "get-string~" "password" "0" "get-paragraph" "paragraph" "let*" "draw-password" "define" "scrolled-v" "outline" "context" "surface")}}}})
"Pathname-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "Pathname-Request.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.dialog.Pathname-Request" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.io" "jazz.graphic")}
      {Lisp-Entry "Pathname-Request" class (undocumented) ((extends . "Layout-View") (implements . "History-Provider")) #f #f 47 20 47 36 ("self" "History-Manager" "new" "History-Provider" "Layout-View")
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("5" "on-cancel" "cancel" "on-ok" ":host" "default?:" "enabled?:" "24" "80" "tail" "ok" "Push-Button" "<Push-Button>" "south" "36" "buttonbar" "toplevel-controls?:" "235" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "name" "filled-column:" "content" "Content-Tree" "<Content-Tree>" "fill" "content!" "<content!>" "vscroll?:" "hscroll?:" "document" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "center" "content-border" "hierarchy" "Hierarchy-Combo" "<Hierarchy-Combo>" "Dark" "Medium" "Color" "border-color:" "1" "3" "border-insets:" "200" "Border-View" "<Border-View>" "2" "Separator" "<Separator>" "on-up" "up" "on-forward" "forward" "on-backward" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "backward" "Push-Tool" "<Push-Tool>" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "toolbar" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "300" "500" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "directory" property () ((initialize . "#f") (accessors . "generate")) #f #f 72 12 72 21 ()}
        {Lisp-Entry "get-directory" accessor () () #f #f 72 47 72 55 ()}
        {Lisp-Entry "set-directory" accessor () () #f #f 72 47 72 55 ()}
        {Lisp-Entry "filenames" property () ((initialize . "#f")) #f #f 73 12 73 21 ()}
        {Lisp-Entry "extensions" property () ((initialize . "#f")) #f #f 74 12 74 22 ()}
        {Lisp-Entry "anchors" property () ((initialize . "#f")) #f #f 75 12 75 19 ()}
        {Lisp-Entry "history-manager" slot () ((initialize . "(new History-Manager self)")) #f #f 78 8 78 23 ()}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 81 20 81 26 ("update" "setup-directory" "nextmethod" "rest")}
        {Lisp-Entry "setup-directory" method () () #f #f 87 11 87 26 ("get-current-directory" "set!" "directory" "not" "when")}
        {Lisp-Entry "focus-default" method (override) () #f #f 92 20 92 33 ("get-tree" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "get-tree" method () () #f #f 101 11 101 19 ("content" "locate")}
        {Lisp-Entry "get-hierarchy" method () () #f #f 105 11 105 24 ("hierarchy" "locate")}
        {Lisp-Entry "install-directory" method (public) ("dir") #f #f 109 18 109 35 ("update" "set-directory" "directory" "History-Directory" "new" "history-manager" "add-history" "add-history~" "dir")}
        {Lisp-Entry "update" method (protected virtual) () #f #f 120 29 120 35 ("update-buttons" "update-content" "update-history" "update-hierarchy")}
        {Lisp-Entry "update-hierarchy" method () () #f #f 127 11 127 27 ("set-value" "set-value~" "directory" "get-hierarchy" "get-hierarchy~" "reverse" "get-name" "get-name~" "list" "pathname" "lambda" "map" "set-choices" "set-choices~" "hierarchy" "locate" "combo" "let")}
        {Lisp-Entry "update-history" method () () #f #f 135 11 135 25 ("not-null?" "locate" "set-enabled?" "set-enabled?~" "get-forward-history" "get-forward-history~" "forward" "history-manager" "get-backward-history" "get-backward-history~" "backward" "let")}
        {Lisp-Entry "update-content" method (protected virtual) () #f #f 142 29 142 43 ()}
        {Lisp-Entry "update-buttons" method (protected virtual) () #f #f 146 29 146 43 ("up" "locate" "set-enabled?" "set-enabled?~" "get-directory" "get-parent" "get-parent~" "parent" "let")}
        {Lisp-Entry "add-pathname" method () ("tree" "pathname") #f #f 151 11 151 23 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "Image-Resource" "directory?" "image" "title" "let" "extension=?" "get-extension" "get-extension~" "ci=?" "test:" "get-name" "get-name~" "member?" "filenames" "and" "file?" "when" "cdr" "string?" "not" "or" "if" "extension" "effective-extension" "map" "extensions" "effective-extensions" "define" "pathname" "tree")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 173 20 173 36 ("selected-pathname" "anchorize" "directory" "get-directory" "get-directory~" "set-current-directory")}
        {Lisp-Entry "down" method () ("dir") #f #f 183 11 183 15 ("install-directory" "dir")}
        {Lisp-Entry "current-history-item" method (override) () #f #f 192 20 192 40 ("directory" "History-Directory" "new")}
        {Lisp-Entry "update-history-actions" method (override) () #f #f 196 20 196 42 ()}
        {Lisp-Entry "on-backward" method () ("evt") #f #f 205 11 205 22 ("update" "history-manager" "go-backward-history" "go-backward-history~" "get-directory" "get-directory~" "set-directory" "evt")}
        {Lisp-Entry "on-forward" method () ("evt") #f #f 210 11 210 21 ("update" "history-manager" "go-forward-history" "go-forward-history~" "get-directory" "get-directory~" "set-directory" "evt")}
        {Lisp-Entry "on-up" method () ("evt") #f #f 215 11 215 16 ("get-directory" "get-parent" "get-parent~" "install-directory" "evt")}
        {Lisp-Entry "hierarchy-change" method (protected virtual) ("dir") #f #f 219 29 219 45 ("install-directory" "dir")}
        {Lisp-Entry "selection-change" method (protected virtual) () #f #f 223 29 223 45 ("update-buttons")}
        {Lisp-Entry "default-action" method (protected virtual) () #f #f 227 29 227 43 ()}
        {Lisp-Entry "ok-enabled?" method () () #f #f 231 11 231 22 ("ok" "locate" "get-enabled?" "get-enabled?~")}
        {Lisp-Entry "on-double-click" method () ("evt") #f #f 235 11 235 26 ("default-action" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 240 20 240 35 ("default-action" "evt")}
        {Lisp-Entry "on-escape-press" method (override) ("evt") #f #f 245 20 245 35 ("cancel-modal" "cancel-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "selected-pathname" method () () #f #f 255 11 255 28 ("get-tree" "get-single-selected-data" "get-single-selected-data~")}
        {Lisp-Entry "anchorize" method () ("pathname") #f #f 259 11 259 20 ("anchors" "anchors:" "anchorize" "anchorize~" "pathname")}}
      {Lisp-Entry "Hierarchy-Combo" class () ((extends . "Combo-Box")) #f #f 268 7 268 22 ("Combo-Box")
        {Lisp-Entry "content-change" method (override) ("origin") #f #f 271 20 271 34 ("get-value" "get-host" "get-guest" "get-guest~" "hierarchy-change" "hierarchy-change~" "origin")}}
      {Lisp-Entry "History-Directory" class () ((extends . "History-Item")) #f #f 280 7 280 24 ("History-Item")
        {Lisp-Entry "directory" slot () ((getter . "generate")) #f #f 283 8 283 17 ()}
        {Lisp-Entry "get-directory" accessor () () #f #f 283 25 283 33 ()}
        {Lisp-Entry "initialize" method (override) ("directory") #f #f 286 20 286 30 ("self" "directory~self" "set!" "nextmethod" "directory")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 291 20 291 25 ("directory" "format" "lambda" "self" "print-unreadable" "readably" "output")}}
      {Lisp-Entry "Content-Tree" class () ((extends . "Tree-View")) #f #f 302 7 302 19 ("Tree-View")
        {Lisp-Entry "selection-change" method (override) ("old-selection" "force?" "user-origin") #f #f 305 20 305 36 ("get-host" "get-guest" "get-guest~" "selection-change" "selection-change~" "user-origin" "force?" "old-selection")}}}})
"Plain-Formatted-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Plain-Formatted-Text-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Plain-Formatted-Text-View" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Plain-Formatted-Text-View" class (undocumented) ((extends . "Formatted-Text-View")) #f #f 44 20 44 45 ("Formatted-Text-View")
        {Lisp-Entry "new-model" method (override) () #f #f 47 20 47 29 ("Text" "Font" "font:" "Text-Style" "base-style:" "Formatted-Text-Model" "new")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 51 20 51 27 ("Variable" "Link-Style" "Dark-Blue" "Link" "Reference" "Dark-Red" "color:" "Font" "font:" "Text-Style" "add-style" "Light-Gray" "Color" "background:" "right-margin:" "100" "left-margin:" "Code" "Heading5" "Heading4" "Heading3" "Heading2" "keep-with-next?:" "Base" "Format" "Heading1" "add-format" "nextmethod" "rest")}}}})
"Plain-Text-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Plain-Text-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Plain-Text-Preferences" module (protected) () #f #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Plain-Text-Preferences" class (undocumented) ((extends . "Text-Preferences")) #f #f 45 20 45 42 ("Text-Preferences")
        {Lisp-Entry "title-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 23 ()}
        {Lisp-Entry "get-title-style" accessor () () #f #f 48 50 48 58 ()}
        {Lisp-Entry "set-title-style" accessor () () #f #f 48 50 48 58 ()}
        {Lisp-Entry "comment-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 25 ()}
        {Lisp-Entry "get-comment-style" accessor () () #f #f 49 50 49 58 ()}
        {Lisp-Entry "set-comment-style" accessor () () #f #f 49 50 49 58 ()}
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("Text-Comment" "comment-style:" "Text-Title" "Base" "title-style:" "Code-Base" "Text-Style" "base-style:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 65 25 65 45 ("Plain-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 74 11 74 17 ()
        {Lisp-Entry "import" import () () #f #f 77 1 77 7 ("jazz.designer")}
        {Lisp-Entry "Plain-Text-Preferences-Descriptor" class () ((extends . "Document-Preferences-Descriptor")) #f #f 80 7 80 40 ("Document-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 83 3 83 7 ("title:" "name:" "Property-Descriptor" "<Property-Descriptor>" "comment-style" "title-style" "categorized:" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Plain-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Plain-Text-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Plain-Text-View" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system")}
      {Lisp-Entry "Plain-Text-View" class () ((extends . "Text-View")) #f #f 44 7 44 22 ("Text-View")
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 47 25 47 38 ("plain-text" "rest")}
        {Lisp-Entry "new-model" method (override) () #f #f 51 20 51 29 ("12" "left-padding:" "Code-Base" "Text-Style" "base-style:" "Text-Model" "new")}
        {Lisp-Entry "host-workspaces" method (override) () #f #f 60 20 60 35 ("text")}
        {Lisp-Entry "headers" constant () () #f #f 69 12 69 19 ("4" "make-string" "string-append" "list")}
        {Lisp-Entry "get-headers" method (override) () #f #f 74 20 74 31 ("headers")}
        {Lisp-Entry "preferences" method (override) () #f #f 83 20 83 31 ("error?:" "plain-text" "documents" "get-preferences")}}}})
"Popup"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "Popup.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.window.Popup" module (protected) () #f #f 37 18 37 38 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Popup" class () ((extends . "Overlapped")) #f #f 43 7 43 12 ("Overlapped")
        {Lisp-Entry "initiator" slot () ((initialize . "#f") (accessors . "generate")) #f #f 46 8 46 17 ()}
        {Lisp-Entry "get-initiator" accessor () () #f #f 46 42 46 50 ()}
        {Lisp-Entry "set-initiator" accessor () () #f #f 46 42 46 50 ()}
        {Lisp-Entry "conclude" method (override) ("rest") #f #f 54 20 54 28 ("destroy-mandatory" "nextmethod" "rest")}
        {Lisp-Entry "show" method (override) () #f #f 59 20 59 24 ("show-noactivate" "set-visible-flag")}
        {Lisp-Entry "destroy" method (override) () #f #f 69 20 69 27 ("nextmethod" "self" "popup-destroy" "popup-destroy~" "initiator" "when")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 80 20 80 35 ()}}}})
"Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Preferences.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.ui.preference.Preferences" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Preferences" class (undocumented) ((extends . "Component")) #f #f 45 20 45 31 ("Component")
        {Lisp-Entry "title" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 17 ()}
        {Lisp-Entry "get-title" accessor () () #f #f 48 42 48 50 ()}
        {Lisp-Entry "set-title" accessor () () #f #f 48 42 48 50 ()}
        {Lisp-Entry "icon" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 16 ()}
        {Lisp-Entry "get-icon" accessor () () #f #f 49 42 49 50 ()}
        {Lisp-Entry "set-icon" accessor () () #f #f 49 42 49 50 ()}
        {Lisp-Entry "apply-preferences" method (public virtual) ("(client #f)") #f #f 57 26 57 43 ("children" "apply-preferences" "apply-preferences~" "child" "lambda" "for-each" "client")}
        {Lisp-Entry "save-preferences" method (public virtual) ("designer" "(client #f)") #f #f 68 26 68 42 ("children" "save-preferences" "save-preferences~" "child" "lambda" "for-each" "client" "designer")}
        {Lisp-Entry "set-property" method (public) ("designer" "property" "value") #f #f 74 18 74 30 ("self" "set-property" "set-property~" "value" "property" "designer")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 83 25 83 45 ("Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 92 11 92 17 ()
        {Lisp-Entry "import" import () () #f #f 95 1 95 7 ("jazz.designer")}
        {Lisp-Entry "Preferences-Descriptor" class () ((extends . "Component-Descriptor")) #f #f 98 7 98 29 ("Component-Descriptor")
          {Lisp-Entry "form" form () () #f #f 101 3 101 7 ("icon" "title" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "component-get-component-image" method (override) ("component") #f #f 108 20 108 49 ("Image-Resource" "get-icon" "get-icon~" "or" "component")}
          {Lisp-Entry "component-presentation-property?" method (override) ("component" "property") #f #f 112 20 112 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method (override) ("component") #f #f 116 20 116 46 ("get-title" "get-title~" "component")}
          {Lisp-Entry "component-set-presentation" method (override) ("component" "designer" "title") #f #f 120 20 120 46 ("title:" "set-property" "set-property~" "title" "designer" "component")}
          {Lisp-Entry "component-display-property?" method (override) ("component" "property") #f #f 124 20 124 47 ("icon" "title" "visible?" "children" "before" "presentation-info" "name-info" "class-info" "field-name" "memq?" "not" "property" "component")}}}}})
"Preferences-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Preferences-Manager.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Preferences-Manager" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.system" "jazz.library" "jazz.jml" "jazz.io" "jazz.designer")}
      {Lisp-Entry "Preferences-Manager" class (undocumented) ((extends . "Canvas-Manager")) #f #f 48 20 48 39 ("Canvas-Manager")
        {Lisp-Entry "form-model" method (override) ("form") #f #f 51 20 51 30 ("nextmethod" "else" "Preferences-Editor" "descendants" "get-name" "get-name~" "case" "form")}
        {Lisp-Entry "install-in-host" method (override) ("host") #f #f 57 20 57 35 ("get-process" "apply-preferences" "apply-preferences~" "when" "tool-preferences" "preferences" "let" "nextmethod" "host")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 64 25 64 38 ("preferences-manager" "rest")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 73 25 73 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 77 25 77 35 ()}
        {Lisp-Entry "host-position" method (meta override) () #f #f 81 25 81 38 ()}
        {Lisp-Entry "host-size" method (meta override) () #f #f 85 25 85 34 ()}
        {Lisp-Entry "host-workspaces" method (override) () #f #f 89 20 89 35 ("home")}
        {Lisp-Entry "focus-default" method (override) () #f #f 98 20 98 33 ("acquire-focus" "acquire-focus~" "descendants" "locate" "tree" "let")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 108 20 108 27 ("get-preferences-root" "set-client" "get-application" "get-preferences-rights" "get-preferences-rights~" "set-rights" "nextmethod" "rest")}
        {Lisp-Entry "new-document-controller" method (override) () #f #f 119 20 119 43 ("self" "Preferences-Manager-Controller" "new")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 128 20 128 33 ()}
        {Lisp-Entry "tool-preferences" method (override) () #f #f 137 20 137 36 ("preferences-manager" "tools" "get-preferences")}
        {Lisp-Entry "confirm-close" method (override) ("." "rest") #f #f 146 20 146 33 ("save-session" "rest")}
        {Lisp-Entry "save-session" method (override) () #f #f 150 20 150 32 ("get-host" "save-preferences" "save-preferences~" "get-application" "get-preferences-designer" "get-preferences-designer~" "designer" "tool-preferences" "pref" "let")}
        {Lisp-Entry "on-save-preferences" method (package) ("evt") #f #f 161 19 161 38 ("save" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-edit" method (package) ("evt") #f #f 167 19 167 26 ("Profile" "File" "edit-document" "edit-document~" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-update" method (package) ("evt") #f #f 172 19 172 28 ("get-preferences-root" "set-client" "load-preferences" "load-preferences~" "get-process" "process" "let" "tree" "descendants" "locate" "set-selection" "set-selection~" "evt")}
        {Lisp-Entry "show-properties" method (override) () #f #f 184 20 184 35 ("set-single-selection" "set-single-selection~" "0" "get-visible-count" "get-visible-count~" ">" "get-selection" "get-selection~" "null?" "and" "when" "acquire-focus" "acquire-focus~" "locate" "locate~" "tree" "bell" "not" "if" "get-card" "card" "let")}
        {Lisp-Entry "set-application-selection" method () ("selection" "force?") #f #f 200 11 200 36 ("force?" "selection")}
        {Lisp-Entry "close-application-selection" method () () #f #f 204 11 204 38 ()}}
      {Lisp-Entry "Preferences-Manager-Controller" class () ((extends . "Component-Editor-Controller")) #f #f 213 7 213 37 ("Component-Editor-Controller")
        {Lisp-Entry "document-status" method (override) () #f #f 216 20 216 35 ()}}
      {Lisp-Entry "Preferences-Editor" class () ((extends . "Descendants-Editor")) #f #f 225 7 225 25 ("Descendants-Editor")
        {Lisp-Entry "form-model" method (override) ("form") #f #f 228 20 228 30 ("nextmethod" "else" "Preferences-Tree" "tree" "get-name" "get-name~" "case" "form")}}
      {Lisp-Entry "Preferences-Tree" class () ((extends . "Descendants-Tree")) #f #f 239 7 239 23 ("Descendants-Tree")
        {Lisp-Entry "form" form () () #f #f 242 3 242 7 ("reorderable?:" "draggable?:" ":images" "portfolio:" "install" "<install>")}
        {Lisp-Entry "update-selection" method (override) ("expand-state" "selected-components") #f #f 246 20 246 36 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" method (override) ("component" "update?" "level") #f #f 250 20 250 29 ("collapsed" "expanded" "1" "<" "if" "level" "update?" "component")}}}})
"Preferences-Manager-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Preferences-Manager-Preferences.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.preference.Preferences-Manager-Preferences" module (protected) () #f #f 37 18 37 68 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Preferences-Manager-Preferences" class (undocumented) ((extends . "Frame-Preferences")) #f #f 45 20 45 51 ("Frame-Preferences")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("441" "791" "Dimension" "size:" "94" "54" "Point" "position:" "Image-Resource" "icon:" "title:" "install" "<install>")}}}})
"Preview-Job"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Preview-Job.jazz"} 242213477. jazz
    {Lisp-Entry "jazz.ui.print.Preview-Job" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Preview-Job" class (undocumented) ((extends . "Print-Job")) #f #f 43 20 43 31 ("Print-Job")
        {Lisp-Entry "printed-page" method (override) () #f #f 51 20 51 32 ("page-setup")}
        {Lisp-Entry "print-orientation" method (override) () #f #f 55 20 55 37 ("portrait")}}}})
"Preview-Page"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Preview-Page.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.print.Preview-Page" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui" "jazz.system")}
      {Lisp-Entry "Preview-Page" class (undocumented) ((extends . "View")) #f #f 46 20 46 32 ("explicit" "View")
        {Lisp-Entry "client" property () ((initialize . "#f") (accessors . "explicit")) #f #f 49 12 49 18 ()}
        {Lisp-Entry "no" property () ((initialize . "#f") (accessors . "explicit")) #f #f 50 12 50 14 ()}
        {Lisp-Entry "dragging?" slot () ((initialize . "#f")) #f #f 53 8 53 17 ()}
        {Lisp-Entry "start-position" slot () ((initialize . "#f")) #f #f 54 8 54 22 ()}
        {Lisp-Entry "get-client" method (public) () #f #f 62 18 62 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("value") #f #f 66 18 66 28 ("invalidate-view" "client" "set!" "value")}
        {Lisp-Entry "get-no" method (public) () #f #f 71 18 71 24 ("no")}
        {Lisp-Entry "set-no" method (public) ("value") #f #f 75 18 75 24 ("invalidate-view" "no" "set!" "value")}
        {Lisp-Entry "get-pane" method () () #f #f 80 11 80 19 ("get-guest")}
        {Lisp-Entry "cursor-update" method (override) ("pos") #f #f 89 20 89 33 (":arrow" ":opened-hand" ":closed-hand" "set-cursor" "get-mouse-down?" "hscroll-needed?" "hscroll-needed?~" "vscroll-needed?" "vscroll-needed?~" "or" "if" "locate" "locate~" "scrollee" "get-pane" "pane" "let*" "pos")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 104 20 104 30 ("acquire-capture" "start-position" "dragging?" "set!" "pos")}
        {Lisp-Entry "drag-move" method (override) ("pos") #f #f 110 20 110 29 ("scroll" "scroll~" "locate" "locate~" "scrollee" "get-pane" "pane" "start-position" "nu-" "delta" "let*" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 118 20 118 27 ("set!" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 124 20 124 32 ("no" "set-start" "set-start~" "zoom" "Preview-Toolbar" "find-docked" "find-docked~" "locate" "locate~" "set-value" "set-value~" "1." "set-zoom" "set-zoom~" "get-toplevel" "toplevel" "get-pane" "pane" "let" "pos")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 137 20 137 24 ("print-page" "print-page~" "no" "get-page" "get-page~" "page" "get-job" "get-job~" "job" "get-pane" "pane" "let*" "context" "surface")}}}})
"Preview-Pane"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Preview-Pane.jazz"} 241595127. jazz
    {Lisp-Entry "jazz.ui.print.Preview-Pane" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.workspace" "jazz.ui" "jazz.system" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Preview-Pane" class (undocumented) ((extends . "Layout-View")) #f #f 48 20 48 32 ("0" "explicit" "Layout-View")
        {Lisp-Entry "client" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 18 ()}
        {Lisp-Entry "job" slot () ((getter . "generate")) #f #f 54 8 54 11 ()}
        {Lisp-Entry "get-job" accessor () () #f #f 54 21 54 29 ()}
        {Lisp-Entry "pages" slot () () #f #f 55 8 55 13 ()}
        {Lisp-Entry "start" slot () ((initialize . "0")) #f #f 56 8 56 13 ()}
        {Lisp-Entry "preserved" slot () () #f #f 57 8 57 17 ()}
        {Lisp-Entry "form" form () () #f #f 60 3 60 7 ("centered" "View" "<View>" "center" "664" "1078" "Dimension" "size:" "scrollee" "Layout-View" "<Layout-View>" "content" "!" "<!>" "vscroll?:" "hscroll?:" "scroller" "name:" "Scroller-View" "<Scroller-View>" "Dark" "Color" "background:" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "host-workspaces" method (override) () #f #f 73 20 73 35 ("preview")}
        {Lisp-Entry "guest-actions" method (override) () #f #f 82 20 82 33 ("nextmethod" "preview-pane" "find-actions" "cons")}
        {Lisp-Entry "on-print" method () ("evt") #f #f 92 11 92 19 ("client" "print-document" "print-document~" "evt")}
        {Lisp-Entry "on-print-layout" method () ("evt") #f #f 96 11 96 26 ("from-preview?:" "client" "print-layout" "print-layout~" "evt")}
        {Lisp-Entry "on-home" method () ("evt") #f #f 100 11 100 18 ("0" "set-start" "evt")}
        {Lisp-Entry "on-end" method () ("evt") #f #f 104 11 104 17 ("modulo" "set-start" "1" "-" "last" "job" "get-pages" "get-pages~" "pages" "length" "count" "let*" "evt")}
        {Lisp-Entry "on-previous" method () ("evt") #f #f 111 11 111 22 ("previous" "evt")}
        {Lisp-Entry "on-next" method () ("evt") #f #f 115 11 115 18 ("next" "evt")}
        {Lisp-Entry "on-close" method () ("evt") #f #f 119 11 119 19 ("close-workspace" "evt")}
        {Lisp-Entry "escape-press" method (override) ("key") #f #f 123 20 123 32 ("close-workspace" "key")}
        {Lisp-Entry "close-workspace" method () ("save?") #f #f 127 11 127 26 ("get-toplevel" "invalidate-window" "invalidate-window~" "get-previous" "get-previous~" "apply-preferences" "apply-preferences~" "close" "close~" "restore-client" "selected-workspace" "workspace" "get-host" "frame" "let" "save?")}
        {Lisp-Entry "get-client" method (public) () #f #f 141 18 141 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("value") #f #f 145 18 145 28 ("setup-printing" "setup-printing~" "preserved" "client" "set!" "value")}
        {Lisp-Entry "restore-client" method (protected) () #f #f 150 21 150 35 ("preserved" "restore-printing" "restore-printing~" "client" "get-page-setup" "get-page-setup~" "wrap-header/footer" "wrap-header/footer~")}
        {Lisp-Entry "Zoom" definition () () #f #f 160 14 160 18 ("0.5")}
        {Lisp-Entry "get-zoom" method (public) () #f #f 164 18 164 26 ("Zoom")}
        {Lisp-Entry "set-zoom" method (public) ("value") #f #f 168 18 168 26 ("layout-view" "0" "Point" "scrollee" "locate" "scroll-to" "scroll-to~" "Zoom" "set!" "value")}
        {Lisp-Entry "layout" method (override) () #f #f 179 20 179 26 ("start" "set-start" "set-client" "set-client~" "lambda" "for-each" "zoom:" "Preview-Job" "job" "update-scrollbars" "update-scrollbars~" "layout-view" "layout-view~" "13" "-" "set-size" "set-size~" "get-output" "get-output~" "pages" "get-height" "get-height~" "+" ">" "when" "put" "put~" "max" "set!" "get-width" "get-width~" "increase!" "Preview-Page" "page" "shadow" "border-type:" "size:" "Point" "position:" "parent:" "Border-View" "border" "not" "while" "List-Factory" "new" "fact" "horz-done?" "vert-done?" "max-v" "max-h" "v" "0" "h" "let" "close-children" "close-children~" "50" "separator" "4" "Dimension" "get-size~" "scale" "nu+" "border-size" "get-size" "display-size" "Zoom" "fl" "<fl>" "cast" "/" "zoom" "default-resolution" "scale-content" "scale-content~" "scaling" "get-page-setup" "get-page-setup~" "page-setup" "client" "get-print-area" "get-print-area~" "print-area" "centered" "locate" "scrollee" "let*" "nextmethod")}
        {Lisp-Entry "get-page-height" method () () #f #f 232 11 232 26 ("size" "get-height" "get-height~")}
        {Lisp-Entry "previous" method (public) () #f #f 241 18 241 26 ("start" "-" "0" "max" "set-start" "pages" "length" "count" "let")}
        {Lisp-Entry "next" method (public) () #f #f 246 18 246 22 ("set-start" "<" "when" "start" "+" "pg" "job" "get-pages" "get-pages~" "pages" "length" "count" "let*")}
        {Lisp-Entry "set-start" method (public) ("value") #f #f 254 18 254 27 ("0" "naturals" "pages" "set-no" "set-no~" "set-visible?" "set-visible?~" ">=" "if" "+" "pg" "get-parent" "get-parent~" "border" "n" "page" "lambda" "for-each" "job" "get-pages" "get-pages~" "length" "count" "let" "start" "set!" "value")}}}})
"Preview-Pane-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Preview-Pane-Actions.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.print.Preview-Pane-Actions" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Preview-Pane-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 40 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Next" "on-next" "next" "Prior" "on-previous" "previous" "End" "on-end" "end" "Home" "Shortcut" "shortcut:" "on-home" ":focus" "Event-Handler" "action-handler:" "home" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Preview-Status"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Preview-Status.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.print.Preview-Status" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Preview-Status" class (undocumented) ((extends . "Status-Toolbar")) #f #f 45 20 45 34 ("Status-Toolbar")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("center" "location:" "20" "782" "Dimension" "size:" "message" "name:" "Status-Label" "<Status-Label>" "install" "<install>")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 58 25 58 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 62 25 62 35 ()}}}})
"Preview-Toolbar"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Preview-Toolbar.jazz"} 244610079. jazz
    {Lisp-Entry "jazz.ui.print.Preview-Toolbar" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Preview-Toolbar" class (undocumented) ((extends . "Toolbar")) #f #f 47 20 47 35 ("Toolbar")
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("on-close" "60" "title:" "close" "Push-Button" "<Push-Button>" "on-zoom-change" ":form" "content-change-handler:" "content:" "zoom" "Zoom-Combo" "<Zoom-Combo>" "Dark" "Color" "border-color:" "Border-View" "<Border-View>" "1" "2" "Rect" "layout-insets:" "fill" "layout-type:" "22" "80" "Dimension" "size:" "Layout-View" "<Layout-View>" "on-next" "next" "on-previous" "previous" "Separator" "<Separator>" "on-print-layout" "print-layout" "on-print" ":document" "Event-Handler" "action-handler:" "Image-Resource" "resource:" "tooltip-text:" "print" "name:" "Action-Icon" "<Action-Icon>" "install" "<install>")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 70 25 70 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 74 25 74 35 ()}
        {Lisp-Entry "on-zoom-change" method () ("evt") #f #f 83 11 83 25 ("set-zoom" "set-zoom~" "current-document" "pane" "get-sender" "get-sender~" "get-zoom" "get-zoom~" "zoom" "let" "evt")}}}})
"Preview-Workspace"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Preview-Workspace.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.print.Preview-Workspace" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Preview-Workspace" class (undocumented) ((extends . "Workspace-Preferences")) #f #f 45 20 45 37 ("Workspace-Preferences")
        {Lisp-Entry "previous" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 20 ()}
        {Lisp-Entry "get-previous" accessor () () #f #f 48 45 48 53 ()}
        {Lisp-Entry "set-previous" accessor () () #f #f 48 45 48 53 ()}
        {Lisp-Entry "pane" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 16 ()}
        {Lisp-Entry "get-pane" accessor () () #f #f 49 45 49 53 ()}
        {Lisp-Entry "set-pane" accessor () () #f #f 49 45 49 53 ()}
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("Stage-Preferences" "<Stage-Preferences>" "Preview-Status" "-23" "line" "second" "status" "Preview-Toolbar" "Class-Reference" "model:" "first" "Toolbar-Preferences" "<Toolbar-Preferences>" "vert" "orientation:" "27" "division:" "edge" "separator:" "root" "location:" "toolbar" "name:" "Splitter-Preferences" "<Splitter-Preferences>" "Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "apply-preferences" method (override) ("." "rest") #f #f 66 20 66 37 ("nextmethod" "apply" "pane" "layout-view" "layout-view~" "rest")}}}})
"Print-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Print-Event.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.event.Print-Event" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Print-Event" class (undocumented) ((extends . "Event")) #f #f 43 20 43 31 ("Event")
        {Lisp-Entry "surface" slot () () #f #f 46 8 46 15 ()}
        {Lisp-Entry "context" slot () ((getter . "generate")) #f #f 47 8 47 15 ()}
        {Lisp-Entry "get-context" accessor () () #f #f 47 23 47 31 ()}
        {Lisp-Entry "initialize" method (override) ("kind" "sender" "surface" "context") #f #f 50 20 50 30 ("context~self" "self" "surface~self" "set!" "nextmethod" "context" "surface" "sender" "kind")}
        {Lisp-Entry "get-dc" method (public) () #f #f 56 18 56 24 ("surface")}
        {Lisp-Entry "get-hdc" method (public) () #f #f 60 18 60 25 ("surface" "get-hdc" "get-hdc~")}}}})
"Print-Job"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Print-Job.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.print.Print-Job" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Print-Job" class (undocumented) ((extends . "Object")) #f #f 45 20 45 29 ("Object")
        {Lisp-Entry "surface" slot () () #f #f 48 8 48 15 ()}
        {Lisp-Entry "selection?" slot () ((getter . "generate")) #f #f 49 8 49 18 ()}
        {Lisp-Entry "get-selection?" accessor () () #f #f 49 26 49 34 ()}
        {Lisp-Entry "from" slot () ((getter . "generate")) #f #f 50 8 50 12 ()}
        {Lisp-Entry "get-from" accessor () () #f #f 50 26 50 34 ()}
        {Lisp-Entry "to" slot () ((getter . "generate")) #f #f 51 8 51 10 ()}
        {Lisp-Entry "get-to" accessor () () #f #f 51 26 51 34 ()}
        {Lisp-Entry "nb-copies" slot () ((getter . "generate")) #f #f 52 8 52 17 ()}
        {Lisp-Entry "get-nb-copies" accessor () () #f #f 52 26 52 34 ()}
        {Lisp-Entry "client" slot () ((getter . "generate")) #f #f 53 8 53 14 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 53 26 53 34 ()}
        {Lisp-Entry "page-setup" slot () () #f #f 54 8 54 18 ()}
        {Lisp-Entry "resolution" slot () () #f #f 55 8 55 18 ()}
        {Lisp-Entry "scaling" slot () () #f #f 56 8 56 15 ()}
        {Lisp-Entry "zoom" slot () () #f #f 57 8 57 12 ()}
        {Lisp-Entry "pages" slot () ((getter . "generate")) #f #f 58 8 58 13 ()}
        {Lisp-Entry "get-pages" accessor () () #f #f 58 26 58 34 ()}
        {Lisp-Entry "initialize" method (override) ("surface" "client" "page-setup" "resolution" "(scaling: scaling #f)" "(zoom: zoom #f)" "(selection?: selection? #f)" "(from: from #f)" "(to: to #f)" "(nb-copies: nb-copies 1)") #f #f 61 20 61 30 ("paginate" "pages" "zoom~self" "scale-content" "scale-content~" "or" "scaling~self" "resolution~self" "page-setup~self" "client~self" "nb-copies~self" "to~self" "from~self" "selection?~self" "self" "surface~self" "set!" "nextmethod" "1" "nb-copies" "nb-copies:" "to" "to:" "from" "from:" "selection?" "selection?:" "zoom" "zoom:" "scaling" "scaling:" "resolution" "page-setup" "client" "surface")}
        {Lisp-Entry "get-dc" method (public) () #f #f 87 18 87 24 ("surface")}
        {Lisp-Entry "get-page" method (public) ("n") #f #f 91 18 91 26 ("pages" "element" "n")}
        {Lisp-Entry "print-job" method (public) () #f #f 100 18 100 27 ("print-document" "nb-copies" "repeat" "loop" "lambda" "with-document")}
        {Lisp-Entry "print-document" method () () #f #f 107 11 107 25 ("length" "to" "0" "1" "-" "from" "if" "naturals" "pages" "surface" "print-page" "with-page" "no" "page" "lambda" "for-each")}
        {Lisp-Entry "print-page" method (public) ("surface" "page" "no") #f #f 117 18 117 28 ("with-clip" "with-clip~" "translate" "translate~" "scaling" "get-top" "get-top~" "page-top" "get-left" "get-left~" "-" "page-left" "with-page-setup" "paint-drawing" "paint-drawing~" "printed-page" "printed" "default-resolution" "resolution" "fl" "<fl>" "cast" "/" "ratio" "scale" "scale~" "1." "zoom" "lambda" "with-orientation" "page-setup" "wrap-header/footer" "wrap-header/footer~" "context" "get-name" "get-name~" "get-document-controller" "get-document-controller~" "get-moniker" "get-moniker~" "moniker" "Document" "is?" "when" "client" "get-guest" "get-guest~" "guest" "let" "present-date-hour" "print-time:" "local-date" "present-date-day" "print-date:" "pages" "length" "page-count:" "page-no:" "client-filename" "or" "filename:" "selection?" "print-selection?:" "print-black/white?:" "printing?:" "list" "print-context" "define" "no" "page" "surface")}
        {Lisp-Entry "with-page-setup" method () ("surface" "page-setup" "proc") #f #f 159 11 159 26 ("translate" "translate~" "get-top" "get-top~" "top" "get-left" "get-left~" "left" "get-content-rect" "get-content-rect~" "content-rect" "default-resolution" "resolution" "fl" "<fl>" "cast" "/" "ratio" "let*" "scale" "scale~" "1." "or" "zoom" "let" "lambda" "with-orientation" "proc" "page-setup" "surface")}
        {Lisp-Entry "with-orientation" method () ("surface" "page-setup" "proc") #f #f 172 11 172 27 ("PI" "reverse-portrait" "get-width" "get-width~" "width" "reverse-landscape" "PI/2" "-" "rotate" "rotate~" "0" "translate" "translate~" "get-height" "get-height~" "height" "landscape" "case" "get-size" "get-size~" "size" "print-orientation" "orientation" "let" "lambda" "with-preserved-matrix" "with-preserved-matrix~" "proc" "page-setup" "surface")}
        {Lisp-Entry "printed-page" method (protected virtual) () #f #f 194 29 194 41 ("page-setup")}
        {Lisp-Entry "print-orientation" method (protected virtual) () #f #f 198 29 198 46 ("page-setup" "get-orientation" "get-orientation~")}
        {Lisp-Entry "paginate" method () () #f #f 207 11 207 19 ("rect-height" "rect-width" "not" "if" "get-page-area" "get-page-area~" "page-area" "client" "paginate" "paginate~" "page-height" "scaling" "default-resolution" "resolution" "*" "fl" "<fl>" "cast" "/" "fxceiling" "page-width" "get-height" "get-height~" "height" "get-width" "get-width~" "width" "page-setup" "get-content" "get-content~" "content" "let" "default-paginate" "define")}
        {Lisp-Entry "with-document" method (public) ("proc") #f #f 229 18 229 31 ("end-document" "start-document" "proc")}
        {Lisp-Entry "start-document" method (protected virtual) () #f #f 235 29 235 43 ()}
        {Lisp-Entry "end-document" method (protected virtual) () #f #f 239 29 239 41 ()}
        {Lisp-Entry "with-page" method (public) ("no" "proc") #f #f 248 18 248 27 ("end-page" "start-page" "proc" "no")}
        {Lisp-Entry "start-page" method (protected virtual) ("no") #f #f 254 29 254 39 ("no")}
        {Lisp-Entry "end-page" method (protected virtual) ("no") #f #f 258 29 258 37 ("no")}}}})
"Print-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Print-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.preference.Print-Preferences" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Print-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 45 20 45 37 ("Preferences")
        {Lisp-Entry "color?" property () ((initialize . "#t") (accessors . "generate")) #f #f 48 12 48 18 ()}
        {Lisp-Entry "get-color?" accessor () () #f #f 48 43 48 51 ()}
        {Lisp-Entry "set-color?" accessor () () #f #f 48 43 48 51 ()}
        {Lisp-Entry "form" form () () #f #f 51 3 51 7 ("title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 60 25 60 45 ("Print-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 69 11 69 17 ()
        {Lisp-Entry "import" import () () #f #f 72 1 72 7 ("jazz.designer")}
        {Lisp-Entry "Print-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 75 7 75 35 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 78 3 78 7 ("domain" "Boolean-Domain" "<Boolean-Domain>" "name:" "Property-Descriptor" "<Property-Descriptor>" "color?" "categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Printer-Job"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "Printer-Job.jazz"} 241495452. jazz
    {Lisp-Entry "jazz.ui.print.Printer-Job" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.platform.cairo.cairo-windows" "jazz.platform" "jazz.ui")}
      {Lisp-Entry "Printer-Job" class (undocumented) ((extends . "Print-Job")) #f #f 45 20 45 31 ("Print-Job")
        {Lisp-Entry "start-document" method (override) () #f #f 53 20 53 34 ("DOCINFO-free" "surface" "get-handle" "get-handle~" "cairo_win32_surface_get_dc" "StartDoc" "0" "DOCINFO-fwType-set!" "DOCINFO-lpszDocName-set!" "DOCINFO-sizeof" "DOCINFO-cbSize-set!" "DOCINFO-make" "rec" "let")}
        {Lisp-Entry "end-document" method (override) () #f #f 62 20 62 32 ("surface" "get-handle" "get-handle~" "cairo_win32_surface_get_dc" "EndDoc")}
        {Lisp-Entry "start-page" method (override) ("no") #f #f 71 20 71 30 ("surface" "get-handle" "get-handle~" "cairo_win32_surface_get_dc" "StartPage" "no")}
        {Lisp-Entry "end-page" method (override) ("no") #f #f 75 20 75 28 ("surface" "get-handle" "get-handle~" "cairo_win32_surface_get_dc" "EndPage" "no")}}}})
"Progress-Bar"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Progress-Bar.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.view.Progress-Bar" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Progress-Bar" class () ((extends . "View")) #f #f 45 7 45 19 ("1" "9" "Range" "0" "View")
        {Lisp-Entry "Bar-Width" definition () () #f #f 48 14 48 23 ("12")}
        {Lisp-Entry "Bar-Spacing" definition () () #f #f 51 14 51 25 ("2")}
        {Lisp-Entry "infinite?" property () ((initialize . "#f") (accessors . "generate")) #f #f 55 12 55 21 ()}
        {Lisp-Entry "get-infinite?" accessor () () #f #f 55 46 55 54 ()}
        {Lisp-Entry "set-infinite?" accessor () () #f #f 55 46 55 54 ()}
        {Lisp-Entry "pos" slot () ((initialize . "0")) #f #f 58 8 58 11 ()}
        {Lisp-Entry "range" slot () ((initialize . "{Range 0 9}")) #f #f 59 8 59 13 ()}
        {Lisp-Entry "step" slot () ((initialize . "1") (setter . "generate")) #f #f 60 8 60 12 ()}
        {Lisp-Entry "set-step" accessor () () #f #f 60 44 60 52 ()}
        {Lisp-Entry "bars" slot () ((initialize . "0")) #f #f 61 8 61 12 ()}
        {Lisp-Entry "default-size" method (override) () #f #f 64 20 64 32 ("20" "100" "Dimension")}
        {Lisp-Entry "get-pos" method (public) () #f #f 73 18 73 25 ("pos")}
        {Lisp-Entry "set-pos" method (public) ("p") #f #f 77 18 77 25 ("invalidate-bars" "pos" "set!" "p")}
        {Lisp-Entry "delta-pos" method (public) ("increment") #f #f 82 18 82 27 ("invalidate-bars" "range" "get-end" "get-end~" "modulo" "set!" "infinite?" "when" "pos" "increase!" "increment")}
        {Lisp-Entry "step-it" method (public) () #f #f 89 18 89 25 ("step" "delta-pos")}
        {Lisp-Entry "set-done" method (public) () #f #f 93 18 93 26 ("range" "get-end" "get-end~" "set-pos")}
        {Lisp-Entry "get-range" method (public) () #f #f 97 18 97 27 ("range")}
        {Lisp-Entry "set-range" method (public) ("rng") #f #f 101 18 101 27 ("invalidate-bars" "range" "set!" "rng")}
        {Lisp-Entry "invalidate-bars" method () () #f #f 111 11 111 26 ("invalidate-view" "set!" "bars" "/=" "when" "n" "Bar-Spacing" "Bar-Width" "quotient" "1" "pos" "*" "fxceiling/" "+" "right" "2" "get-width" "-" "width" "get-bounds" "bounds" "let*" "0" "=" "if" "get-end" "get-end~" "end" "range" "get-start" "get-start~" "start" "let" "calculate-bars" "define")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 133 20 133 24 ("0" "naturals" "Bar-Spacing" "increase!" "Focused-Selection" "Color" "min" "Rect" "new" "fill-rect" "fill-rect~" "=" "infinite?" "not" "or" "when" "Bar-Width" "+" "right" "let" "n" "lambda" "for-each" "1" "bars" "last" "3" "-" "max-right" "top" "2" "left" "get-height" "height" "get-width" "width" "let*" "rectangle" "edges:" "sunken" "outer:" "get-bounds" "draw-edge" "draw-edge~" "context" "surface")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 154 25 154 45 ("Progress-Bar-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 163 11 163 17 ()
        {Lisp-Entry "import" import () () #f #f 166 1 166 7 ("jazz.designer")}
        {Lisp-Entry "Progress-Bar-Descriptor" class () ((extends . "View-Descriptor")) #f #f 169 7 169 30 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 172 3 172 7 ("title:" "infinite?" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Progress-Reporter"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "Progress-Reporter.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.Progress-Reporter" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Progress-Reporter" class (undocumented) ((extends . "View") (implements . "Reporter")) #f #f 45 20 45 37 ("Reporter" "View")
        {Lisp-Entry "cancelled?" slot () ((initialize . "#f")) #f #f 48 8 48 18 ()}
        {Lisp-Entry "done?" slot () ((initialize . "#f")) #f #f 49 8 49 13 ()}
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-action" ":form" "Event-Handler" "action-handler:" "22" "90" "87" "319" "action" "Push-Button" "<Push-Button>" "88" "progress" "Progress-Bar" "<Progress-Bar>" "297" "70" "message" "16" "300" "23" "50" "invite" "name:" "Label-View" "<Label-View>" "Image-Resource" "resource:" ":images" "portfolio:" "32" "20" "10" "Point" "position:" "Image-View" "<Image-View>" "128" "420" "Dimension" "size:" "title:" "install" "<install>")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 61 20 61 27 ("action" "acquire-focus" "acquire-focus~" "0" "set-pos" "set-pos~" "locate" "progress" "let" "nextmethod" "rest")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 73 25 73 35 ()}
        {Lisp-Entry "dialog-class" method (meta) () #f #f 78 16 78 28 ("Progress-Reporter-Dialog")}
        {Lisp-Entry "meta" class () () #f #f 83 9 83 13 ("Dialog" "extends" "Progress-Reporter-Dialog")
          {Lisp-Entry "on-close" method () ("evt") #f #f 86 13 86 21 ("processed" "guest" "request-cancel" "request-cancel~" "closable?" "when" "evt")}}
        {Lisp-Entry "disable-cancel" method (override) () #f #f 97 20 97 34 ("action" "locate" "set-enabled?" "set-enabled?~")}
        {Lisp-Entry "cancel-enabled?" method () () #f #f 101 11 101 26 ("action" "locate" "get-enabled?" "get-enabled?~")}
        {Lisp-Entry "cancel-requested?" method (override) () #f #f 105 20 105 37 ("cancelled?")}
        {Lisp-Entry "test-cancelled" method (override) () #f #f 109 20 109 34 ("throw-cancel" "cancel-requested?" "when")}
        {Lisp-Entry "on-action" method () ("evt") #f #f 119 11 119 20 ("current-action" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 124 20 124 35 ("current-action" "evt")}
        {Lisp-Entry "escape-press" method (override) ("key") #f #f 129 20 129 32 ("request-cancel" "cancel-enabled?" "when" "key")}
        {Lisp-Entry "section-title" method (override) ("title") #f #f 139 20 139 33 ("set-message" "title")}
        {Lisp-Entry "set-message" method (override) ("msg") #f #f 143 20 143 31 ("message" "locate" "set-title" "set-title~" "msg")}
        {Lisp-Entry "user-message" method (override) ("fmt" "." "rest") #f #f 147 20 147 32 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "set-range" method (override) ("range") #f #f 151 20 151 29 ("progress" "locate" "set-range" "set-range~" "range")}
        {Lisp-Entry "set-pos" method (override) ("pos") #f #f 155 20 155 27 ("progress" "locate" "set-pos" "set-pos~" "pos")}
        {Lisp-Entry "delta-pos" method (override) ("increment") #f #f 159 20 159 29 ("progress" "locate" "delta-pos" "delta-pos~" "increment")}
        {Lisp-Entry "set-step" method (override) ("increment") #f #f 163 20 163 28 ("progress" "locate" "set-step" "set-step~" "increment")}
        {Lisp-Entry "step-it" method (override) () #f #f 167 20 167 27 ("progress" "locate" "step-it" "step-it~")}
        {Lisp-Entry "set-done" method (override) () #f #f 171 20 171 28 ("set-default?" "set-default?~" "done-title" "action" "set-title" "set-title~" "progress" "locate" "set-done" "set-done~" "done?" "set!")}
        {Lisp-Entry "current-action" method () () #f #f 183 11 183 25 ("request-cancel" "done-action" "done?" "if")}
        {Lisp-Entry "request-cancel" method (public virtual) () #f #f 190 26 190 40 ("set-message" "cancelled?" "set!")}
        {Lisp-Entry "done-title" method (protected virtual) () #f #f 195 29 195 39 ()}
        {Lisp-Entry "done-action" method (protected virtual) () #f #f 199 29 199 40 ("get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-guest" "get-guest~" "guest" "get-host" "dialog" "let*")}}}})
"Projects-Search"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Projects-Search.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.Projects-Search" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}
      {Lisp-Entry "Projects-Search" class () ((extends . "Search")) #f #f 44 7 44 22 ("Search")
        {Lisp-Entry "domain" slot () ((getter . "generate")) #f #f 47 8 47 14 ()}
        {Lisp-Entry "get-domain" accessor () () #f #f 47 22 47 30 ()}
        {Lisp-Entry "initialize" method (override) ("domain" "find" "replace") #f #f 50 20 50 30 ("self" "domain~self" "set!" "nextmethod" "replace" "find" "domain")}
        {Lisp-Entry "install-results" method (override) ("results-view" "results" "categorized?") #f #f 60 20 60 35 ("nextmethod" "references" "domain" "and" "father:" "add-result" "add-result~" "children" "bind" "car" "present-name" "present-name~" "key:" "string<?" "sort" "install-node" "father" "install-nodes" "if" "when" "cdr" "cons" "set-cdr!" "node" "get-parent" "get-parent~" "prepare-ascendant" "ascendant-node" "table-ref" "or" "prepare-reference" "prepare-references" "table-set!" "get-entry" "get-entry~" "entry" "result" "lambda" "for-each" "prepare-entries" "list" "root" "nodes" "eq?" "test:" "make-table" "entries" "let" "install-references" "define" "categorized?" "results" "results-view")}
        {Lisp-Entry "get-icon" method (override) () #f #f 115 20 115 28 ("else" "Image-Resource" "files" "domain" "case")}
        {Lisp-Entry "supports-drill-down?" method (override) () #f #f 126 20 126 40 ("references" "domain" "eq?")}
        {Lisp-Entry "dynamic-search?" method (override) ("categorized?") #f #f 130 20 130 35 ("not" "supports-drill-down?" "and" "categorized?")}}}})
"Projects-Search-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Projects-Search-Preferences.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.search.Projects-Search-Preferences" module (protected) () #f #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Projects-Search-Preferences" class (undocumented) ((extends . "Search-View-Preferences")) #f #f 44 20 44 47 ("Search-View-Preferences")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("title:" "install" "<install>")}}}})
"Projects-Search-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Projects-Search-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.search.Projects-Search-View" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui.search" "jazz.ui" "jazz.system" "jazz.project" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Projects-Search-View" class (undocumented) ((extends . "Search-View")) #f #f 51 20 51 40 ("Search-View")
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("entries" "Entries-Combo" "<Entries-Combo>" "41" "45" "project" "Project-Combo" "<Project-Combo>" "Entry-Border" "Medium" "Color" "border-color:" "1" "3" "2" "Rect" "border-insets:" "22" "155" "17" "163" "Border-View" "<Border-View>" "16" "46" "21" "115" "Label-View" "<Label-View>" "54" "references" "34" "definitions" "selected?:" "18" "100" "Dimension" "size:" "14" "13" "Point" "position:" "files" "Radio-Button" "<Radio-Button>" ">" "<content" "<content~>" "title:" "domain" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 71 20 71 26 ("nextmethod" "entries" "setup-entries" "queue-list" "include-inactives?:" "get-presentation-property" "get-presentation-property~" "->string" "list" "enqueue" "has-content?" "has-content?~" "when" "lambda" "for-each-project" "for-each-project~" "new-queue" "choices" "set-value" "set-value~" "collect-choices" "set-choices" "set-choices~" "project" "locate" "combo" "get-workbench" "workbench" "let" "setup-projects" "define" "rest")}
        {Lisp-Entry "get-search-domains" method (override) () #f #f 102 20 102 38 ("references" "definitions" "files")}
        {Lisp-Entry "project-change" method () ("project") #f #f 113 11 113 25 ("project")}
        {Lisp-Entry "search-targets" method (override) ("find" "replace") #f #f 122 20 122 34 ("new-thread" "thread-start!" "get-search-domain" "make-reference-search-resultset" "forward" "edit-reference" "edit-reference~" "search-references~" "references" "search-references" "make-definition-search-resultset" "else" "car" "edit" "edit~" "1" "length" "case" "message-box" "null?" "if" "context:" "get-find" "get-find~" "search-definitions~" "definitions" "search-definitions" "user-feedback" "user-feedback~" "select-results" "select-results~" "get-results" "results" "post-event" "Search-Resultset" "search-in-file" "file" "iterate-files" "iterate-files~" "lambda" "for-each-project" "for-each-project~" "resultset" "search-project" "User-Reporter" "reporter" "get-cataloguer" "get-cataloguer~" "cataloguer" "selected-project" "project" "files" "Projects-Search" "new" "search" "get-application" "appl" "let" "search-files" "define" "replace" "find")}
        {Lisp-Entry "selected-project" method () () #f #f 186 11 186 27 ("project" "locate" "get-value" "get-value~")}}
      {Lisp-Entry "Project-Combo" class () ((extends . "Combo-Box")) #f #f 195 7 195 20 ("Combo-Box")
        {Lisp-Entry "button-action" method (override) () #f #f 203 20 203 33 ("push-focus" "initiator:" "alternate-position:" "popup" "combo-popup-positions" "alternate-pos" "pos" "receive" "select-user-data-row" "select-user-data-row~" "row->line" "row->line~" "set-single-selection" "set-single-selection~" "ensure-expanded" "ensure-expanded~" "when" "include-invisibles?:" "get-value" "user-data-row" "user-data-row~" "row" "locate" "locate~" "tree" "on-project-picked" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "200" "2" "get-width" "-" "Dimension" "size:" "Project-Picker" "new" "picker" "let")}
        {Lisp-Entry "on-project-picked" method () ("evt") #f #f 216 11 216 28 ("popup" "call-content-change" "close-popups" "project:" "get-property" "get-property~" "project" "let" "evt")}}
      {Lisp-Entry "Project-Picker" class () ((extends . "Layout-View")) #f #f 227 7 227 21 ("Layout-View")
        {Lisp-Entry "mouse-selected?" slot () ((initialize . "#f")) #f #f 230 8 230 23 ()}
        {Lisp-Entry "form" form () () #f #f 233 3 233 7 ("toplevel-controls?:" "250" "width:" "title:" "name" "Tree-Node-Column" "<Tree-Node-Column>" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-mouse-up" "mouse-up-handler:" "on-selection-change" ":form" "Event-Handler" "selection-handler:" "auto-expand/collapse?:" ":images" "portfolio:" "tree" "Tree-View" "<Tree-View>" "fill" "content" "!" "<!>" "vscroll?:" "hscroll?:" "document" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "center" "location:" "name:" "Border-View" "<Border-View>" "border" "layout-type:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("initargs") #f #f 242 20 242 26 ("setup-projects" "nextmethod" "initargs")}
        {Lisp-Entry "setup-projects" method () () #f #f 247 11 247 25 ("include-inactives?:" "get-workbench" "fold-projects" "fold-projects~" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "add-row~" "collapsed" "expanded" "not" "if" "state" "get-component-image" "get-component-image~" "image" "get-presentation-property" "get-presentation-property~" "title" "has-content?" "has-content?~" "when" "father" "project" "insert-project" "define" "locate" "tree" "let")}
        {Lisp-Entry "on-selection-change" method () ("evt") #f #f 262 11 262 30 ("mouse-selected?" "set!" "mouse" "get-user-origin" "get-user-origin~" "eq?" "when" "evt")}
        {Lisp-Entry "on-mouse-up" method () ("evt") #f #f 267 11 267 22 ("process-selected" "mouse-selected?" "when" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 272 20 272 35 ("process-selected" "evt")}
        {Lisp-Entry "on-escape-press" method (override) ("evt") #f #f 276 20 276 35 ("get-toplevel" "close-popups" "close-popups~" "evt")}
        {Lisp-Entry "process-selected" method () () #f #f 280 11 280 27 ("set-value" "set-value~" "close-popups" "close-popups~" "popup-initiator" "combo" "when" "get-single-selected-data" "get-single-selected-data~" "project" "locate" "tree" "let")}}
      {Lisp-Entry "Entries-Combo" class () ((extends . "Combo-Box")) #f #f 295 7 295 20 ("Combo-Box")}}})
"Prop-Text-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Prop-Text-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Prop-Text-Preferences" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Prop-Text-Preferences" class (undocumented) ((extends . "Code-Text-Preferences")) #f #f 45 20 45 41 ("Code-Text-Preferences")
        {Lisp-Entry "title-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 23 ()}
        {Lisp-Entry "get-title-style" accessor () () #f #f 48 50 48 58 ()}
        {Lisp-Entry "set-title-style" accessor () () #f #f 48 50 48 58 ()}
        {Lisp-Entry "comment-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 25 ()}
        {Lisp-Entry "get-comment-style" accessor () () #f #f 49 50 49 58 ()}
        {Lisp-Entry "set-comment-style" accessor () () #f #f 49 50 49 58 ()}
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("Text-Comment" "comment-style:" "Text-Title" "Base" "Text-Style" "title-style:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 64 25 64 45 ("Prop-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 73 11 73 17 ()
        {Lisp-Entry "import" import () () #f #f 76 1 76 7 ("jazz.designer")}
        {Lisp-Entry "Prop-Text-Preferences-Descriptor" class () ((extends . "Document-Preferences-Descriptor")) #f #f 79 7 79 39 ("Document-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 82 3 82 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "comment-style" "title-style" "categorized:" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Push-Button"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Push-Button.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.view.Push-Button" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "Push-Button" class () ((extends . "View")) #f #f 50 7 50 18 ("inactive" "explicit" "View")
        {Lisp-Entry "default?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 53 12 53 20 ()}
        {Lisp-Entry "flat?" property () ((initialize . "#f") (accessors . "generate")) #f #f 54 12 54 17 ()}
        {Lisp-Entry "get-flat?" accessor () () #f #f 54 45 54 53 ()}
        {Lisp-Entry "set-flat?" accessor () () #f #f 54 45 54 53 ()}
        {Lisp-Entry "state" slot () ((initialize . "'inactive")) #f #f 57 8 57 13 ()}
        {Lisp-Entry "form" form () () #f #f 60 3 60 7 ("Medium" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 64 20 64 35 ()}
        {Lisp-Entry "get-default?" method (public) () #f #f 73 18 73 30 ("default?")}
        {Lisp-Entry "set-default?" method (public) ("flag") #f #f 77 18 77 30 ("invalidate-view" "default?" "set!" "flag")}
        {Lisp-Entry "get-state" method (public) () #f #f 87 18 87 27 ("state")}
        {Lisp-Entry "set-state" method (public) ("value") #f #f 91 18 91 27 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "default-size" method (override) () #f #f 101 20 101 32 ("22" "100" "Dimension")}
        {Lisp-Entry "preferred-size" method (override) () #f #f 105 20 105 34 ("22" "50" "effective-font" "text-extent" "text-extent~" "get-width" "get-width~" "+" "Dimension" "new" "default-size" "not" "if" "localize" "title" "let")}
        {Lisp-Entry "mouse-enter" method (override) () #f #f 117 20 117 31 ("pushed" "out-pushed" "highlighted" "set-state" "inactive" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "view-enabled?" "and" "when")}
        {Lisp-Entry "mouse-leave" method (override) () #f #f 124 20 124 31 ("out-pushed" "pushed" "inactive" "set-state" "highlighted" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "view-enabled?" "and" "when")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 131 20 131 30 ("pushed" "set-state" "view-enabled?" "when" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 136 20 136 27 ("inactive" "out-pushed" "highlighted" "set-state" "pushed" "get-state" "case" "up" "unwind-protect" "view-enabled?" "when" "rest" "pos")}
        {Lisp-Entry "up" method () () #f #f 145 11 145 13 ("self" "process-action" "pushed" "get-state" "eq?" "when")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 155 20 155 24 ("+" "draw-text" "draw-text~" "set-text-color" "set-text-color~" "v" "2" "-" "quotient" "h" "get-text-extent" "get-text-extent~" "extent" "get-height" "get-height~" "height" "get-width" "get-width~" "width" "get-size" "size" "let*" "eq?" "draw-push-button" "draw-push-button~" "rectangle" "edges:" "raised" "outer:" "draw-edge" "draw-edge~" "flat?" "-1" "inflate-rect" "set!" "Dark" "Black" "Color" "if" "frame-rect" "frame-rect~" "default?" "when" "view-enabled?" "enabled?" "get-bounds" "rect" "0" "else" "1" "pushed" "state" "case" "offset" "localize" "or" "title" "let" "context" "surface")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 181 25 181 45 ("Push-Button-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 190 11 190 17 ()
        {Lisp-Entry "import" import () () #f #f 193 1 193 7 ("jazz.designer")}
        {Lisp-Entry "Push-Button-Descriptor" class () ((extends . "View-Descriptor")) #f #f 196 7 196 29 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 199 3 199 7 ("flat?" "domain" "Boolean-Domain" "<Boolean-Domain>" "title:" "default?" "name:" "Property-Descriptor" "<Property-Descriptor>" "title" "default:" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 208 20 208 31 ("Image-Resource" "class")}}}}})
"Push-Combo"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Push-Combo.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Push-Combo" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Push-Combo" class () ((extends . "Combo-View")) #f #f 44 7 44 17 ("Combo-View")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("body" "name:" "Push-Icon" "<Push-Icon>" "22" "31" "Dimension" "size:" "install" "<install>")}}}})
"Push-Icon"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Push-Icon.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Push-Icon" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Push-Icon" class () ((extends . "Push-Tool")) #f #f 44 7 44 16 ("Push-Tool")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 (":images" "portfolio:" "tooltip?:" "22" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "get-combo" method (public) () #f #f 56 18 56 27 ("parent")}
        {Lisp-Entry "get-enabled?" method (override) () #f #f 65 20 65 32 ("parent" "get-enabled?" "get-enabled?~")}
        {Lisp-Entry "get-state" method (override) () #f #f 69 20 69 29 ("self" "parent" "child-state" "child-state~")}
        {Lisp-Entry "mouse-enter" method (override) () #f #f 73 20 73 31 ("self" "parent" "enter-child" "enter-child~")}
        {Lisp-Entry "mouse-leave" method (override) () #f #f 77 20 77 31 ("self" "parent" "leave-child" "leave-child~")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 81 20 81 30 ("self" "parent" "child-down" "child-down~" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 85 20 85 27 ("self" "parent" "child-up" "child-up~" "rest" "pos")}}}})
"Push-Tool"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Push-Tool.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Push-Tool" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Push-Tool" class () ((extends . "Image-Tool")) #f #f 43 7 43 16 ("Image-Tool")
        {Lisp-Entry "default-size" method (override) () #f #f 46 20 46 32 ("22" "Dimension")}
        {Lisp-Entry "up" method (override) () #f #f 50 20 50 22 ("self" "process-action" "pushed" "get-state" "eq?" "when")}}}})
"Radio-Button"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Radio-Button.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Radio-Button" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Radio-Button" class () ((extends . "View") (implements . "(Groupable Selectable)")) #f #f 46 7 46 19 ("explicit" "Selectable" "Groupable" "View")
        {Lisp-Entry "box-size" definition () () #f #f 49 14 49 22 ("13")}
        {Lisp-Entry "group" property () ((initialize . "#f") (accessors . "explicit")) #f #f 53 12 53 17 ()}
        {Lisp-Entry "selected?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 54 12 54 21 ()}
        {Lisp-Entry "tracking?" slot () ((initialize . "#f")) #f #f 57 8 57 17 ()}
        {Lisp-Entry "inside?" slot () ((initialize . "#f")) #f #f 58 8 58 15 ()}
        {Lisp-Entry "default-size" method (override) () #f #f 61 20 61 32 ("16" "100" "Dimension")}
        {Lisp-Entry "get-group" method (override) () #f #f 70 20 70 29 ("group")}
        {Lisp-Entry "set-group" method (override) ("value") #f #f 74 20 74 29 ("group" "set!" "value")}
        {Lisp-Entry "get-selected?" method (override) () #f #f 83 20 83 33 ("selected?")}
        {Lisp-Entry "set-selected?" method (override) ("flag") #f #f 87 20 87 33 ("not" "set-selected-state~" "set-selected-state" "get-current-selection" "current" "let" "selected?" "neq?" "when" "flag")}
        {Lisp-Entry "unselect" method (override) () #f #f 95 20 95 28 ("set-selected-state" "selected?" "when")}
        {Lisp-Entry "get-current-selection" method () () #f #f 100 11 100 32 ("continuation-return" "get-selected?" "get-selected?~" "when" "button" "for-each-button" "return" "lambda" "continuation-capture")}
        {Lisp-Entry "for-each-button" method () ("proc") #f #f 110 11 110 26 ("parent" "get-children" "get-children~" "get-group" "get-group~" "group" "eqv?" "Radio-Button" "is?" "and" "when" "child" "lambda" "for-each" "proc")}
        {Lisp-Entry "set-selected-state" method () ("flag") #f #f 118 11 118 29 ("invalidate-view" "selected?" "set!" "flag")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 128 20 128 24 ("draw-text" "draw-text~" "Black" "Color" "set-text-color" "set-text-color~" "inside?" "tracking?" "and" "inactive?:" "selected?" "selected?:" "box-size" "1" "+" "0" "Rect" "new" "draw-radio-button" "draw-radio-button~" "view-enabled?" "enabled?" "let" "2" "-" "quotient" "v" "18" "h" "get-text-extent" "get-text-extent~" "get-height" "get-height~" "13" "empty-string?" "not" "if" "height" "localize" "or" "title" "let*" "context" "surface")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 144 20 144 30 ("invalidate-view" "acquire-capture" "inside?" "tracking?" "set!" "view-enabled?" "when" "pos")}
        {Lisp-Entry "drag-move" method (override) ("pos") #f #f 152 20 152 29 ("invalidate-view" "set!" "inside?" "neq?" "over-view?" "over?" "let" "tracking?" "when" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 160 20 160 27 ("self" "process-action" "set-modified?" "selected?" "not" "set-selected?" "inside?" "set!" "release-capture" "tracking?" "when" "rest" "pos")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 175 25 175 45 ("Radio-Button-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 184 11 184 17 ()
        {Lisp-Entry "import" import () () #f #f 187 1 187 7 ("jazz.designer")}
        {Lisp-Entry "Radio-Button-Descriptor" class () ((extends . "View-Descriptor")) #f #f 190 7 190 30 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 193 3 193 7 ("selected?" "title:" "group" "name:" "Property-Descriptor" "<Property-Descriptor>" "title" "default:" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Radio-Item"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Radio-Item.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.menu.Radio-Item" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Radio-Item" class () ((extends . "Label-Item") (implements . "(Groupable Selectable)")) #f #f 46 7 46 17 ("explicit" "Selectable" "Groupable" "Label-Item")
        {Lisp-Entry "group" property () ((initialize . "#f") (accessors . "explicit")) #f #f 49 12 49 17 ()}
        {Lisp-Entry "selected?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 50 12 50 21 ()}
        {Lisp-Entry "get-group" method (override) () #f #f 58 20 58 29 ("group")}
        {Lisp-Entry "set-group" method (override) ("value") #f #f 62 20 62 29 ("group" "set!" "value")}
        {Lisp-Entry "radio-group" method () () #f #f 66 11 66 22 ("parent" "get-children" "get-children~" "group" "get-group" "get-group~" "eq?" "Radio-Item" "is?" "and" "component" "lambda" "collect-if")}
        {Lisp-Entry "get-selected?" method (override) () #f #f 78 20 78 33 ("selected?")}
        {Lisp-Entry "set-selected?" method (override) ("flag") #f #f 82 20 82 33 ("not" "set-selected-state~" "set-selected-state" "current" "let" "selected?" "neq?" "when" "radio-group" "get-selected?" "get-selected?~" "find-if" "find-selected" "define" "flag")}
        {Lisp-Entry "unselect" method (override) () #f #f 93 20 93 28 ("set-selected-state" "selected?" "when")}
        {Lisp-Entry "set-selected-state" method () ("flag") #f #f 98 11 98 29 ("invalidate-view" "selected?" "set!" "flag")}
        {Lisp-Entry "preferred-prefix-width" method (override) () #f #f 108 20 108 42 ("0" "12" "selected?" "if")}
        {Lisp-Entry "draw-prefix" method (override) ("surface" "context") #f #f 117 20 117 31 ("Image-Resource" "get-images-portfolio" "get-images-portfolio~" "draw-image" "draw-image~" "2" "top" "5" "left" "get-application" "appl" "let" "selected?" "when" "context" "surface")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 130 25 130 45 ("Radio-Item-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 139 11 139 17 ()
        {Lisp-Entry "import" import () () #f #f 142 1 142 7 ("jazz.designer")}
        {Lisp-Entry "Radio-Item-Descriptor" class () ((extends . "Label-Item-Descriptor")) #f #f 145 7 145 28 ("Label-Item-Descriptor")
          {Lisp-Entry "form" form () () #f #f 148 3 148 7 ("selected?" "title:" "group" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Radio-Tool"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Radio-Tool.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Radio-Tool" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.skin" "jazz.ui" "jazz.locale" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Radio-Tool" class () ((extends . "Image-Tool") (implements . "(Groupable Selectable)")) #f #f 47 7 47 17 ("explicit" "Selectable" "Groupable" "Image-Tool")
        {Lisp-Entry "group" property () ((initialize . "#f") (accessors . "explicit")) #f #f 50 12 50 17 ()}
        {Lisp-Entry "selected?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 21 ()}
        {Lisp-Entry "default-size" method (override) () #f #f 54 20 54 32 ("22" "Dimension")}
        {Lisp-Entry "preferred-size" method (override) () #f #f 63 20 63 34 ("21" "24" "localize" "effective-font" "text-width" "text-width~" "+" "Dimension" "new" "default-size" "title" "not" "if")}
        {Lisp-Entry "draw-frame" method (override) ("surface") #f #f 74 20 74 30 ("nextmethod" "draw-pushed" "out-pushed" "highlighted" "inactive" "get-state" "memq?" "selected?" "and" "if" "surface")}
        {Lisp-Entry "draw-tool" method (override) ("surface" "context") #f #f 80 20 80 29 ("view-enabled?" "get-v" "get-v~" "get-h" "get-h~" "+" "draw-text" "draw-text~" "Black" "Color" "get-look" "get-focused-text-color" "get-focused-text-color~" "set-text-color" "set-text-color~" "get-size" "get-text-extent" "get-text-extent~" "lambda" "justify-lazy" "center" "localize" "draw-image" "not" "1" "2" "pushed" "get-state" "eq?" "selected?" "or" "0" "title" "if" "offset" "let" "context" "surface")}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 92 20 92 35 ("nextmethod" "-1" "1" "expand-rect" "fill-rect" "fill-rect~" "Light-Background" "White" "Color" "title" "color" "get-bounds" "bounds" "let" "selected?" "if" "context" "surface")}
        {Lisp-Entry "get-look" method (override) () #f #f 105 20 105 28 ("tool" "find-look")}
        {Lisp-Entry "up" method (override) () #f #f 114 20 114 22 ("self" "process-action" "set-selected?" "set-selected?~" "find-pushed" "let" "selected?" "not" "pushed" "get-state" "eq?" "and" "when")}
        {Lisp-Entry "get-group" method (override) () #f #f 128 20 128 29 ("group")}
        {Lisp-Entry "set-group" method (override) ("value") #f #f 132 20 132 29 ("group" "set!" "value")}
        {Lisp-Entry "radio-group" method () () #f #f 136 11 136 22 ("parent" "get-children" "get-children~" "group" "get-group" "get-group~" "eq?" "Radio-Tool" "is?" "and" "component" "lambda" "collect-if")}
        {Lisp-Entry "find-pushed" method () () #f #f 143 11 143 22 ("radio-group" "get-selected?" "get-selected?~" "find-if")}
        {Lisp-Entry "get-selected?" method (override) () #f #f 152 20 152 33 ("selected?")}
        {Lisp-Entry "set-selected?" method (override) ("flag") #f #f 156 20 156 33 ("not" "set-selected-state~" "set-selected-state" "find-pushed" "current" "let" "selected?" "neq?" "when" "flag")}
        {Lisp-Entry "unselect" method (override) () #f #f 164 20 164 28 ("set-selected-state" "selected?" "when")}
        {Lisp-Entry "set-selected-state" method () ("flag") #f #f 169 11 169 29 ("invalidate-view" "selected?" "set!" "flag")}}}})
"Recorder-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Recorder-Menu.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.menu.Recorder-Menu" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Recorder-Menu" class (undocumented) ((extends . "Menu")) #f #f 45 20 45 33 ("Menu")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("play-recording-5" "play-recording-4" "play-recording-3" "play-recording-2" "play-recording-1" "play-recording" "output-recording" "present-recording" "set-active-recording" "register-recording" "Separator-Item" "<Separator-Item>" "resume-recording" "stop-recording" "ide" "Action" "action-handler:" "Image-Resource" "icon:" "start-recording" "name:" "Label-Item" "<Label-Item>" "title:" "install" "<install>")}}}})
"Reference-Search-Result"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Reference-Search-Result.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.search.Reference-Search-Result" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.search" "jazz.ui" "jazz.system")}
      {Lisp-Entry "Reference-Search-Result" class () ((extends . "Definition-Search-Result")) #f #f 45 7 45 30 ("Definition-Search-Result")
        {Lisp-Entry "edit" method (override) ("select" "(visible?: visible? #t)" "(activate-focus?: activate-focus? #t)") #f #f 53 20 53 24 ("self" "entry" "edit-reference" "edit-reference~" "activate-focus?" "activate-focus?:" "visible?" "visible?:" "select")}
        {Lisp-Entry "drill-down" method (override) () #f #f 57 20 57 30 ("present-name" "present-name~" "key:" "string<?" "sort" "make-reference-search-resultset" "get-references" "get-references~" "get-cataloguer" "get-cataloguer~" "cataloguer" "get-application" "appl" "->search-set" "references" "Projects-Search" "new" "search" "entry" "get-name" "get-name~" "name" "let*")}}}})
"Renderer"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Renderer.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Renderer" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Renderer" interface (undocumented) () #f #f 40 24 40 32 ()
        {Lisp-Entry "render" method (public virtual abstract) ("drawing" "surface" "context") #f #f 43 35 43 41 ("context" "surface" "drawing")}}}})
"Replace"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Replace.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.Replace" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Replace" class () ((extends . "Object")) #f #f 40 7 40 14 ("Object")
        {Lisp-Entry "replace-list" slot () ((getter . "generate")) #f #f 43 8 43 20 ()}
        {Lisp-Entry "get-replace-list" accessor () () #f #f 43 45 43 53 ()}
        {Lisp-Entry "preserve-case?" slot () ((initialize . "#f") (accessors . "generate")) #f #f 44 8 44 22 ()}
        {Lisp-Entry "get-preserve-case?" accessor () () #f #f 44 48 44 56 ()}
        {Lisp-Entry "set-preserve-case?" accessor () () #f #f 44 48 44 56 ()}
        {Lisp-Entry "play-recording?" slot () ((initialize . "#f") (accessors . "generate")) #f #f 45 8 45 23 ()}
        {Lisp-Entry "get-play-recording?" accessor () () #f #f 45 48 45 56 ()}
        {Lisp-Entry "set-play-recording?" accessor () () #f #f 45 48 45 56 ()}
        {Lisp-Entry "initialize" method (override) ("replace-list" "(preserve-case?: preserve-case? #f)" "(play-recording?: play-recording? #f)") #f #f 48 20 48 30 ("play-recording?~self" "preserve-case?~self" "self" "replace-list~self" "set!" "nextmethod" "play-recording?" "play-recording?:" "preserve-case?" "preserve-case?:" "replace-list")}}}})
"Ruler"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Ruler.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.text.Ruler" module (protected) () #f #f 37 18 37 36 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Ruler" class () ((extends . "Header-View")) #f #f 47 7 47 12 ("Header-View")
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("fill" "layout-type:" "content" "name:" "!" "<!>" "shown?:" "install" "<install>")}
        {Lisp-Entry "get-header-height" method (override) () #f #f 60 20 60 37 ("0" "22" "shown?" "if")}
        {Lisp-Entry "Tabbed-Color" definition () () #f #f 69 14 69 26 ("Dark-Red" "Color")}
        {Lisp-Entry "Untabbed-Color" definition () () #f #f 72 14 72 28 ("blue:" "green:" "90" "red:" "Color")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 76 20 76 24 ("get-top" "get-top~" "<" "when" "get-header-height" "get-width" "get-clipper" "get-clipper~" "clipper" "let" "naturals" "line-to" "line-to~" "move-to" "move-to~" "Untabbed-Color" "Tabbed-Color" "5" "if" "offset" "modulo" "=" "major?" "memq?" "tab?" ">=" "unless" "+" "pixel" "*" "rank" "n" "lambda" "for-each" "set-line-width" "set-line-width~" "Black" "set-color" "set-color~" "get-tabs" "get-tabs~" "tabs" "client" "get-left-padding" "get-left-padding~" "left" "1" "-" "limit" "quotient" "number" "4" "major" "8" "unit" "Medium" "Color" "fill-rect" "fill-rect~" "rectangle" "edges:" "raised" "inner:" "draw-edge" "draw-edge~" "-1" "inflate-rect" "inner" "0" "Rect" "new" "outer" "let*" "draw-measurements" "draw-border" "height" "width" "draw-ruler" "define" "context" "surface")}
        {Lisp-Entry "cursor-update" method (override) ("pos") #f #f 120 20 120 33 (":arrow" "set-cursor" "pos")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 129 20 129 30 ("pos")}
        {Lisp-Entry "drag-move" method (override) ("pos") #f #f 133 20 133 29 ("pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 137 20 137 27 ("rest" "pos")}}}})
"Run"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Run.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Run" module (protected) () #f #f 37 18 37 34 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Run" class () ((extends . "Object")) #f #f 44 7 44 10 ("Object")
        {Lisp-Entry "string" slot (protected) ((accessors . "generate")) #f "<Subseq$string$>" 47 18 47 24 ("Subseq$string$" "<Subseq$string$>")}
        {Lisp-Entry "get-string" accessor () () #f #f 47 52 47 60 ()}
        {Lisp-Entry "set-string" accessor () () #f #f 47 52 47 60 ()}
        {Lisp-Entry "style" slot (protected) ((accessors . "generate")) #f "<Style>" 48 18 48 23 ("Style" "<Style>")}
        {Lisp-Entry "get-style" accessor () () #f #f 48 52 48 60 ()}
        {Lisp-Entry "set-style" accessor () () #f #f 48 52 48 60 ()}
        {Lisp-Entry "height" slot (protected) ((getter . "generate")) #f "<fx>" 49 18 49 24 ("fx" "<fx>")}
        {Lisp-Entry "get-height" accessor () () #f #f 49 52 49 60 ()}
        {Lisp-Entry "initialize" method (override) ("string" "<Subseq$string$>" "style" "<Style>") #f #f 52 20 52 30 ("get-height" "get-height~" "height" "height~self" "style~self" "self" "string~self" "set!" "nextmethod" "Style" "<Style>" "style" "Subseq$string$" "<Subseq$string$>" "string")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 59 20 59 25 ("style" "string" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "export-string" method (public) () #f #f 72 18 72 31 ("String" "string" "coerce")}
        {Lisp-Entry "get-length" method (public) () #f "<fx>" 76 18 76 28 ("string" "cardinality" "cast" "fx" "<fx>")}
        {Lisp-Entry "compute-width" method (public) () #f "<fx>" 85 18 85 31 ("self" "style" "run-width" "run-width~" "fx" "<fx>")}
        {Lisp-Entry "scan" method (protected) ("h" "start" "end" "tabs" "proc") #f #f 94 21 94 25 ("self" "style" "scan" "scan~" "proc" "tabs" "end" "start" "h")}
        {Lisp-Entry "wrap" method (protected) ("context" "margin" "h" "v" "width" "tabs" "place" "break") #f #f 103 21 103 25 ("self" "style" "wrap" "wrap~" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "height-update" method (protected) ("height") #f #f 107 21 107 34 ("style" "height-update" "height-update~" "height")}
        {Lisp-Entry "draw-run" method (protected) ("surface" "<Surface>" "context" "h" "<fx>" "v" "<fx>" "line-height" "<fx>" "tabs" "left" "enabled?") #f #f 116 21 116 29 ("string" "style" "draw-style" "draw-style~" "enabled?" "left" "tabs" "line-height" "v" "fx" "<fx>" "h" "context" "Surface" "<Surface>" "surface")}}}})
"Runtime-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Runtime-Event.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.event.Runtime-Event" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Runtime-Event" class (undocumented) ((extends . "Event")) #f #f 43 20 43 33 ("Event")}}})
"Runtime-Listener"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "listener" "Runtime-Listener.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.listener.Runtime-Listener" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Runtime-Listener" interface (undocumented) ((extends . "Listener")) #f #f 43 24 43 40 ("Listener")
        {Lisp-Entry "on-thread-added" method (public virtual abstract) ("evt") #f #f 46 35 46 50 ("evt")}
        {Lisp-Entry "on-thread-removed" method (public virtual abstract) ("evt") #f #f 47 35 47 52 ("evt")}
        {Lisp-Entry "on-gc-marking" method (public virtual abstract) ("evt") #f #f 48 35 48 48 ("evt")}
        {Lisp-Entry "on-gc-sweeping" method (public virtual abstract) ("evt") #f #f 49 35 49 49 ("evt")}
        {Lisp-Entry "on-gc-completed" method (public virtual abstract) ("evt") #f #f 50 35 50 50 ("evt")}
        {Lisp-Entry "on-zone-expanded" method (public virtual abstract) ("evt") #f #f 51 35 51 51 ("evt")}
        {Lisp-Entry "on-zone-shrinked" method (public virtual abstract) ("evt") #f #f 52 35 52 51 ("evt")}}}})
"Scrollbar"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Scrollbar.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.ui.view.Scrollbar" module (protected) () #f #f 38 18 38 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 41 1 41 7 ("jazz.ui.view" "jazz.ui.skin" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Scrollbar" class () ((extends . "View")) #f #f 50 7 50 16 ("3" "1" "9" "Range" "0" "explicit" "vert" "View")
        {Lisp-Entry "autorepeat-delay" definition () () #f #f 53 14 53 30 ("0.3")}
        {Lisp-Entry "autorepeat-period" definition () () #f #f 56 14 56 31 ("0.001")}
        {Lisp-Entry "orientation" property () ((initialize . "'vert") (accessors . "explicit")) #f #f 60 12 60 23 ()}
        {Lisp-Entry "pos" property () ((initialize . "0") (accessors . "explicit")) #f "<fx>" 61 12 61 15 ("fx" "<fx>")}
        {Lisp-Entry "range" property () ((initialize . "{Range 0 9}") (accessors . "explicit")) #f "<Range>" 62 12 62 17 ("Range" "<Range>")}
        {Lisp-Entry "line-height" property () ((initialize . "1") (accessors . "explicit")) #f "<fx>" 63 12 63 23 ("fx" "<fx>")}
        {Lisp-Entry "page-height" property () ((initialize . "3") (accessors . "explicit")) #f "<fx>" 64 12 64 23 ("fx" "<fx>")}
        {Lisp-Entry "flat?" property () ((initialize . "#f") (accessors . "explicit")) #f "<bool>" 65 12 65 17 ("bool" "<bool>")}
        {Lisp-Entry "tracking?" slot () ((initialize . "#f")) #f #f 68 8 68 17 ()}
        {Lisp-Entry "tracking-start" slot () ((initialize . "#f")) #f #f 69 8 69 22 ()}
        {Lisp-Entry "tracking-start-pos" slot () ((initialize . "#f")) #f #f 70 8 70 26 ()}
        {Lisp-Entry "autorepeat-pulse" slot () ((initialize . "#f")) #f #f 71 8 71 24 ()}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 74 20 74 25 ("range" "pos" "size" "position" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-orientation" method (public) () #f #f 85 18 85 33 ("orientation")}
        {Lisp-Entry "set-orientation" method (public) ("or") #f #f 89 18 89 33 ("invalidate-view" "set!" "orientation" "neq?" "when" "or")}
        {Lisp-Entry "get-pos" method (public) () #f "<fx>" 95 18 95 25 ("pos" "fx" "<fx>")}
        {Lisp-Entry "set-pos" method (public) ("p" "<fx>" "(redraw?: redraw? #f)") #f #f 99 18 99 25 ("invalidate-view" "redraw-view-only" "if" "set!" "pos" "/=" "when" "min" "max" "new-pos" "let" "page-height" "get-end" "get-end~" "-" "max-pos" "range" "get-start" "get-start~" "min-pos" "define" "redraw?" "redraw?:" "fx" "<fx>" "p")}
        {Lisp-Entry "get-range" method (public) () #f "<Range>" 114 18 114 27 ("range" "Range" "<Range>")}
        {Lisp-Entry "set-range" method (public) ("rg") #f #f 118 18 118 27 ("invalidate-view" "set!" "/=" "range" "range=?" "not" "when" "rg")}
        {Lisp-Entry "get-line-height" method (public) () #f "<fx>" 124 18 124 33 ("line-height" "fx" "<fx>")}
        {Lisp-Entry "set-line-height" method (public) ("height") #f #f 128 18 128 33 ("invalidate-view" "set!" "line-height" "/=" "when" "height")}
        {Lisp-Entry "get-page-height" method (public) () #f "<fx>" 134 18 134 33 ("page-height" "fx" "<fx>")}
        {Lisp-Entry "set-page-height" method (public) ("height") #f #f 138 18 138 33 ("invalidate-view" "set!" "page-height" "/=" "when" "height")}
        {Lisp-Entry "set-info" method (public) ("min" "max" "line" "page") #f #f 144 18 144 26 ("set-page-height" "set-line-height" "Range" "new" "set-range" "page" "line" "max" "min")}
        {Lisp-Entry "get-flat?" method (public) () #f "<bool>" 150 18 150 27 ("flat?" "bool" "<bool>")}
        {Lisp-Entry "set-flat?" method (public) ("value") #f #f 154 18 154 27 ("invalidate-view" "set!" "flat?" "neq?" "when" "value")}
        {Lisp-Entry "get-client" method (public) () #f #f 165 18 165 28 ("parent")}
        {Lisp-Entry "call-scroll" method () ("action" "(thumb-pos #f)") #f #f 174 11 174 22 ("orientation" "page-height" "line-height" "get-client" "scroll-action" "scroll-action~" "thumb-pos" "action")}
        {Lisp-Entry "line-up" method () () #f #f 183 11 183 18 ("setup-autorepeat" "line-up" "call-scroll")}
        {Lisp-Entry "line-down" method () () #f #f 188 11 188 20 ("setup-autorepeat" "line-down" "call-scroll")}
        {Lisp-Entry "page-up" method () () #f #f 198 11 198 18 ("setup-autorepeat" "page-up" "call-scroll")}
        {Lisp-Entry "page-down" method () () #f #f 203 11 203 20 ("setup-autorepeat" "page-down" "call-scroll")}
        {Lisp-Entry "get-breadth" method () () #f "<fx>" 213 11 213 22 ("get-height" "horz" "get-width" "vert" "orientation" "case" "fx" "<fx>")}
        {Lisp-Entry "get-extent" method () () #f "<fx>" 219 11 219 21 ("get-width" "horz" "get-height" "vert" "orientation" "case" "fx" "<fx>")}
        {Lisp-Entry "new-rect" method () ("left" "top" "right" "bottom") #f "<Rect>" 225 11 225 19 ("horz" "new" "vert" "orientation" "case" "Rect" "<Rect>" "bottom" "right" "top" "left")}
        {Lisp-Entry "get-place" method () ("point") #f "<fx>" 231 11 231 20 ("get-h" "get-h~" "horz" "get-v" "get-v~" "vert" "orientation" "case" "fx" "<fx>" "point")}
        {Lisp-Entry "up-rect" method () () #f "<Rect>" 242 11 242 18 ("0" "new-rect" "get-breadth" "b" "let" "Rect" "<Rect>")}
        {Lisp-Entry "down-rect" method () () #f "<Rect>" 247 11 247 20 ("-" "0" "new-rect" "get-extent" "e" "get-breadth" "b" "let" "Rect" "<Rect>")}
        {Lisp-Entry "thumb-range" method () () #f #f 253 11 253 22 ("values" "pos" "+" "thumb-pos" "page-height" "fl" "<fl>" "cast" "/" "1" "min" "*" "fxround" "6" "max" "thumb" "shaft" "let*" "0" ">" "when" "get-start" "get-start~" "range" "get-end" "get-end~" "-" "r" "get-extent" "e" "get-breadth" "b" "let")}
        {Lisp-Entry "thumb-rect" method () () #f #f 264 11 264 21 ("0" "new-rect" "get-breadth" "b" "end" "start" "receive" "when" "thumb-range" "info" "let")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 277 20 277 35 ("front?" "front?~" "not" "Internal-Frame-Host" "is?" "and" "get-host" "host" "let")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 283 20 283 30 ("page-down" ">=" "page-up" "<=" "end" "start" "receive" "when" "thumb-range" "info" "place" "let" "else" "thumb-rect" "line-down" "down-rect" "line-up" "up-rect" "in-rect?" "cond" "acquire-capture" "get-pos" "tracking-start-pos" "get-place" "tracking-start" "tracking?" "set!" "start-tracking" "define" "pos")}
        {Lisp-Entry "drag-move" method (override) ("pos") #f #f 302 20 302 29 ("tracking?" "when" "tracking-start-pos" "+" "thumb-track" "call-scroll" "*" "quotient" "dp" "shaft" "tracking-start" "get-place" "dv" "get-start" "get-start~" "range" "get-end" "get-end~" "-" "r" "get-extent" "e" "get-breadth" "b" "let*" "track-thumb" "define" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 316 20 316 27 ("when" "release-capture" "kill-autorepeat" "tracking?" "set!" "end-tracking" "define" "rest" "pos")}
        {Lisp-Entry "Flat-Color" definition () () #f #f 331 14 331 24 ()}
        {Lisp-Entry "Background-Color" definition () () #f #f 334 14 334 30 ()}
        {Lisp-Entry "get-flat-color" method () () #f #f 338 11 338 25 ("flat-color" "set!" "Flat-Color" "unless")}
        {Lisp-Entry "flat-color" definition () () #f #f 344 15 344 25 ("166" "200" "176" "blue:" "188" "green:" "194" "red:" "Light" "Color" "white?" "white?~" "if")}
        {Lisp-Entry "get-background-color" method () () #f #f 350 11 350 31 ("background-color" "set!" "Background-Color" "unless")}
        {Lisp-Entry "background-color" definition () () #f #f 356 15 356 31 ("227" "blue:" "240" "green:" "242" "red:" "white?" "white?~" "if" "Light" "Color" "color" "let")}
        {Lisp-Entry "draw" method (override) ("surface" "<Surface>" "context") #f #f 363 20 363 24 ("7" "9" "Dark" "6" "line" "line~" "set-line-width" "set-line-width~" "Light" "8" "quotient" "v" "rect-height" "height" "let*" "-" "2" "width" "rectangle" "edges:" "outer:" "raised" "inner:" "draw-edge" "draw-edge~" "Entry-Border" "frame-rect" "frame-rect~" "when" "draw-scroll-bar" "draw-scroll-bar~" "else" "right" "down" "left" "up" "vert" "case" "cond" "get-background-color" "or" "fill-background" "fill-background~" "get-flat?" "get-flat?~" "flat?" "get-thumb" "get-thumb~" "thumb" "get-background" "get-background~" "background" "thumb-rect" "down-rect" "up-rect" "get-bounds" "bounds" "get-look" "look" "4" "get-top" "get-top~" "3" "get-left" "get-left~" "+" "draw-arrow-tip" "draw-arrow-tip~" "dv" "0" "1" "horz" "orientation" "eq?" "dh" "Black" "set-color" "set-color~" "Medium" "Color" "cycle-debug-color!" "debug-paint?" "if" "fill-rect" "fill-rect~" "-1" "inflate-rect" "inflated" "let" "draw-raised" "draw-raised~" "direction" "rect" "draw-button" "define" "context" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "get-look" method (override) () #f #f 416 20 416 28 ("scrollbar" "else" "scrollbar/document" "document" "scrollbar/tool" "find-look" "tool" "style" "case")}
        {Lisp-Entry "get-opaque?" method (override) () #f #f 428 20 428 31 ()}
        {Lisp-Entry "setup-autorepeat" method () ("action") #f #f 437 11 437 27 ("autorepeat-delay" "delay:" "autorepeat-period" "autorepeat" "Pulse" "new" "set!" "autorepeat-pulse" "not" "when" "page-down" "page-up" "line-down" "line-up" "case" "pulse-action" "define" "action")}
        {Lisp-Entry "kill-autorepeat" method () () #f #f 449 11 449 26 ("set!" "close" "close~" "autorepeat-pulse" "when")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 460 25 460 45 ("Scrollbar-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 469 11 469 17 ()
        {Lisp-Entry "import" import () () #f #f 472 1 472 7 ("jazz.designer")}
        {Lisp-Entry "Scrollbar-Descriptor" class () ((extends . "View-Descriptor")) #f #f 475 7 475 27 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 478 3 478 7 ("flat?" "page-height" "line-height" "range" "pos" "title:" "orientation" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 489 20 489 31 ("Image-Resource" "class")}}}}})
"Scrollbar-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Scrollbar-Look.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Scrollbar-Look" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Scrollbar-Look" class () ((extends . "Look")) #f #f 43 7 43 21 ("Look")
        {Lisp-Entry "background" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 22 ()}
        {Lisp-Entry "get-background" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "set-background" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "thumb" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 17 ()}
        {Lisp-Entry "get-thumb" accessor () () #f #f 47 47 47 55 ()}
        {Lisp-Entry "set-thumb" accessor () () #f #f 47 47 47 55 ()}
        {Lisp-Entry "flat?" property () ((initialize . "#t") (accessors . "generate")) #f #f 48 12 48 17 ()}
        {Lisp-Entry "get-flat?" accessor () () #f #f 48 47 48 55 ()}
        {Lisp-Entry "set-flat?" accessor () () #f #f 48 47 48 55 ()}}}})
"Scroller-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Scroller-View.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.ui.view.Scroller-View" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Scroller-View" class () ((extends . "Base-Container")) #f #f 48 7 48 20 ("explicit" "Base-Container")
        {Lisp-Entry "client" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 18 ()}
        {Lisp-Entry "vscroll?" property () ((initialize . "#f") (accessors . "generate")) #f #f 52 12 52 20 ()}
        {Lisp-Entry "get-vscroll?" accessor () () #f #f 52 45 52 53 ()}
        {Lisp-Entry "set-vscroll?" accessor () () #f #f 52 45 52 53 ()}
        {Lisp-Entry "hscroll?" property () ((initialize . "#f") (accessors . "generate")) #f #f 53 12 53 20 ()}
        {Lisp-Entry "get-hscroll?" accessor () () #f #f 53 45 53 53 ()}
        {Lisp-Entry "set-hscroll?" accessor () () #f #f 53 45 53 53 ()}
        {Lisp-Entry "flat?" property () ((initialize . "#f") (accessors . "generate")) #f #f 54 12 54 17 ()}
        {Lisp-Entry "get-flat?" accessor () () #f #f 54 45 54 53 ()}
        {Lisp-Entry "set-flat?" accessor () () #f #f 54 45 54 53 ()}
        {Lisp-Entry "vscroll" slot () ((initialize . "#f") (getter . "generate")) #f #f 57 8 57 15 ()}
        {Lisp-Entry "get-vscroll" accessor () () #f #f 57 37 57 45 ()}
        {Lisp-Entry "hscroll" slot () ((initialize . "#f") (getter . "generate")) #f #f 58 8 58 15 ()}
        {Lisp-Entry "get-hscroll" accessor () () #f #f 58 37 58 45 ()}
        {Lisp-Entry "default-name" method (override) () #f #f 61 20 61 32 ("scroller")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 65 20 65 26 ("get-content" "get-scroll-client" "get-scroll-client~" "set-client" "client" "unless" "nextmethod" "rest")}
        {Lisp-Entry "get-client" method (public) () #f #f 76 18 76 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("clt") #f #f 80 18 80 28 ("layout-scrollee" "layout-scrollee~" "self" "set-scroller" "set-scroller~" "invalidate-layout" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "inner?" method (override) ("view") #f #f 94 20 94 26 ("hscroll" "vscroll" "eq?" "nextmethod" "or" "view")}
        {Lisp-Entry "content-inner?" method (override) ("view") #f #f 100 20 100 34 ("view")}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 109 20 109 31 ("layout-scrollee-patch" "layout-scrollee-patch~" "layout-scrollee" "layout-scrollee~" "get-content" "get-client" "get-client~" "eq?" "client" "and" "when" "nextmethod" "size")}
        {Lisp-Entry "layout" method (override) () #f #f 123 20 123 26 ("hscroll" "vscroll" "and" "layout-scrollee" "layout-scrollee~" "client" "set-size" "set-size~" "set-position" "set-position~" "when" "find-child" "content" "get-size" "hscroll-size" "hscroll-position" "vscroll-size" "vscroll-position" "get-height" "get-height~" "scrollbar-size" "if" "get-width" "get-width~" "-" "Dimension" "new" "content-size" "0" "Point" "size" "content-position" "define" "hscroll-active?" "h?" "vscroll-active?" "v?" "let")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 166 20 166 24 ("Medium" "Color" "fill-rect" "fill-rect~" "scrollbar-size" "-" "Rect" "new" "rect" "get-bottom" "get-bottom~" "b" "get-right" "get-right~" "r" "get-bounds" "bounds" "let" "hscroll?" "vscroll?" "and" "when" "context" "surface")}
        {Lisp-Entry "set-scroll-pos" method (override) ("pos" "(redraw?: redraw? #f)") #f #f 180 20 180 34 ("get-h" "get-h~" "hscroll" "get-v" "get-v~" "set-pos" "set-pos~" "vscroll" "when" "redraw?" "redraw?:" "pos")}
        {Lisp-Entry "set-scroll-info" method (override) ("part" "min" "max" "line" "page") #f #f 185 20 185 35 ("hscroll" "horz" "set-info" "set-info~" "vscroll" "when" "vert" "case" "page" "line" "max" "min" "part")}
        {Lisp-Entry "scroll-action" method (override) ("action" "line" "page" "thumb-pos" "orientation") #f #f 191 20 191 33 ("get-scrolled-distance-h" "get-scrolled-distance-h~" "get-scrolled-distance-v" "get-scrolled-distance-v~" "thumb-track" "page-down" "page-up" "-" "line-down" "line-up" "when" "redraw?:" "horz" "0" "Point" "new" "vert" "case" "client" "scroll~" "amount" "scroll" "define" "orientation" "thumb-pos" "page" "line" "action")}
        {Lisp-Entry "vscroll-active?" method () () #f #f 215 11 215 26 ("get-visible?" "get-visible?~" "vscroll" "and")}
        {Lisp-Entry "set-vscroll-needed?" method (public) ("flag") #f #f 219 18 219 37 ("layout-view" "hide" "hide~" "style" "style:" "flat?" "flat?:" "vert" "orientation:" "self" "parent:" "Scrollbar" "new" "set!" "show" "show~" "vscroll" "if" "vscroll-active?" "boolean" "neq?" "vscroll?" "and" "when" "flag")}
        {Lisp-Entry "hscroll-active?" method () () #f #f 230 11 230 26 ("get-visible?" "get-visible?~" "hscroll" "and")}
        {Lisp-Entry "set-hscroll-needed?" method (public) ("flag") #f #f 234 18 234 37 ("layout-view" "close" "close~" "style" "style:" "flat?" "flat?:" "horz" "orientation:" "self" "parent:" "Scrollbar" "new" "set!" "not" "if" "hscroll" "boolean" "neq?" "hscroll?" "and" "when" "flag")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 248 25 248 45 ("Scroller-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 257 11 257 17 ()
        {Lisp-Entry "import" import () () #f #f 260 1 260 7 ("jazz.designer")}
        {Lisp-Entry "Scroller-View-Descriptor" class () ((extends . "Layout-View-Descriptor")) #f #f 263 7 263 31 ("Layout-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 266 3 266 7 ("flat?" "hscroll?" "domain" "Boolean-Domain" "<Boolean-Domain>" "vscroll?" "title:" "client" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 278 20 278 31 ("Image-Resource" "class")}}}}})
"Search"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Search.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.Search" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Search" class () ((extends . "Object")) #f #f 43 7 43 13 ("Object")
        {Lisp-Entry "find" slot () ((getter . "generate")) #f #f 46 8 46 12 ()}
        {Lisp-Entry "get-find" accessor () () #f #f 46 41 46 49 ()}
        {Lisp-Entry "replace" slot () ((getter . "generate")) #f #f 47 8 47 15 ()}
        {Lisp-Entry "get-replace" accessor () () #f #f 47 41 47 49 ()}
        {Lisp-Entry "expression?" slot () ((initialize . "#f") (accessors . "generate")) #f #f 48 8 48 19 ()}
        {Lisp-Entry "get-expression?" accessor () () #f #f 48 44 48 52 ()}
        {Lisp-Entry "set-expression?" accessor () () #f #f 48 44 48 52 ()}
        {Lisp-Entry "initialize" method (override) ("find" "replace") #f #f 51 20 51 30 ("set-replace" "set-find" "nextmethod" "replace" "find")}
        {Lisp-Entry "set-find" method (protected) ("obj") #f #f 62 21 62 29 ("->search-set" "find" "set!" "obj")}
        {Lisp-Entry "set-replace" method (protected) ("repl") #f #f 66 21 66 32 ("replace" "set!" "repl")}
        {Lisp-Entry "collect-find" method (protected) () #f #f 70 21 70 33 ("find" "get-contexts" "get-contexts~" "get-target" "get-target~" "map")}
        {Lisp-Entry "empty?" method (public) () #f #f 74 18 74 24 ("find" "get-contexts" "get-contexts~" "null?")}
        {Lisp-Entry "install-results" method (protected virtual) ("results-view" "results" "categorized?") #f #f 83 29 83 44 ("present-name" "present-name~" "key:" "string<?" "sort" "add-result" "add-result~" "result" "lambda" "for-each" "categorized?" "results" "results-view")}
        {Lisp-Entry "get-icon" method (public virtual) () #f #f 94 26 94 34 ("Image-Resource")}
        {Lisp-Entry "present" method (public) () #f #f 98 18 98 25 ("collect-find" "join")}
        {Lisp-Entry "supports-drill-down?" method (protected virtual) () #f #f 107 29 107 49 ()}
        {Lisp-Entry "dynamic-search?" method (protected virtual) ("categorized?") #f #f 111 29 111 44 ("categorized?")}}}})
"Search-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Search-Manager.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.Search-Manager" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.search" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Search-Manager" class (undocumented) ((extends . "View")) #f #f 47 20 47 34 ("View")
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("159" "848" "5" "4" "Point" "position:" "tab" "name:" "Tab-View" "<Tab-View>" "169" "857" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 55 25 55 38 ("search-manager" "rest")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 64 25 64 34 ("Image-Resource")}
        {Lisp-Entry "host-position" method (meta override) () #f #f 68 25 68 38 ("220" "300" "Point")}
        {Lisp-Entry "host-size" method (meta override) () #f #f 72 25 72 34 ("169" "857" "Dimension")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 76 25 76 35 ()}
        {Lisp-Entry "guest-actions" method (override) () #f #f 85 20 85 33 ("nextmethod" "search-manager" "find-actions" "cons")}
        {Lisp-Entry "resize" method (override) ("dh" "dv") #f #f 95 20 95 26 ("tab" "locate" "size-figure" "size-figure~" "dv" "dh")}
        {Lisp-Entry "on-whole-words" method () ("evt") #f #f 99 11 99 25 ("toggle-whole-words" "evt")}
        {Lisp-Entry "on-ignore-case" method () ("evt") #f #f 103 11 103 25 ("toggle-ignore-case" "evt")}
        {Lisp-Entry "on-regexp" method () ("evt") #f #f 107 11 107 20 ("toggle-regexp" "evt")}
        {Lisp-Entry "on-preserve-case" method () ("evt") #f #f 111 11 111 27 ("toggle-preserve-case" "evt")}
        {Lisp-Entry "on-play-recording" method () ("evt") #f #f 115 11 115 28 ("toggle-play-recording" "evt")}
        {Lisp-Entry "toggle-whole-words" method () () #f #f 119 11 119 29 ("get-checked?" "get-checked?~" "not" "set-checked?" "set-checked?~" "whole-words?" "get-search" "locate" "locate~" "checkbox" "let")}
        {Lisp-Entry "toggle-ignore-case" method () () #f #f 124 11 124 29 ("get-checked?" "get-checked?~" "not" "set-checked?" "set-checked?~" "ignore-case?" "get-search" "locate" "locate~" "checkbox" "let")}
        {Lisp-Entry "toggle-regexp" method () () #f #f 129 11 129 24 ("get-checked?" "get-checked?~" "not" "set-checked?" "set-checked?~" "regexp?" "get-search" "locate" "locate~" "checkbox" "let")}
        {Lisp-Entry "toggle-preserve-case" method () () #f #f 134 11 134 31 ("get-checked?" "get-checked?~" "not" "set-checked?" "set-checked?~" "preserve-case?" "get-search" "locate" "locate~" "checkbox" "let")}
        {Lisp-Entry "toggle-play-recording" method () () #f #f 139 11 139 32 ("get-checked?" "get-checked?~" "not" "set-checked?" "set-checked?~" "play-recording?" "get-search" "locate" "locate~" "checkbox" "let")}
        {Lisp-Entry "get-search" method (public) () #f #f 149 18 149 28 ("get-sheet-search" "selected-sheet" "selected-sheet~" "sheet" "locate" "tab" "let*")}
        {Lisp-Entry "get-search-named" method (public) ("name") #f #f 155 18 155 34 ("get-sheet-search" "when" "child" "child~" "sheet" "locate" "tab" "let*" "name")}
        {Lisp-Entry "get-searches" method (public) () #f #f 162 18 162 30 ("get-children" "get-children~" "get-sheet-search" "map" "locate" "tab" "let")}
        {Lisp-Entry "get-sheet-search" definition () ("sheet") #f #f 167 15 167 31 ("get-content" "get-content~" "first-child" "first-child~" "sheet")}
        {Lisp-Entry "current-history-item" method () () #f #f 176 11 176 31 ("get-search" "current-history-item" "current-history-item~")}
        {Lisp-Entry "install-history-item" method (protected) ("item") #f #f 180 21 180 41 ("get-search" "install-history-item" "install-history-item~" "item")}
        {Lisp-Entry "edit-definitions" method (public) ("search" "definitions") #f #f 189 18 189 34 ("make-definition-search-resultset" "select-results" "select-results~" "get-application" "get-search-results" "get-search-results~" "results" "let" "definitions" "search")}
        {Lisp-Entry "edit-references" method (public) ("search" "references") #f #f 194 18 194 33 ("make-reference-search-resultset" "select-results" "select-results~" "get-application" "get-search-results" "get-search-results~" "results" "let" "references" "search")}}}})
"Search-Manager-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Search-Manager-Actions.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.search.Search-Manager-Actions" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Search-Manager-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 42 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("on-play-recording" "play-recording" "on-preserve-case" "preserve-case" "on-regexp" "regexp" "on-ignore-case" "ignore-case" ":alt" "Shortcut" "shortcut:" "on-whole-words" ":focus-guest" "Event-Handler" "action-handler:" "whole-words" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Search-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Search-Menu.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.Search-Menu" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Search-Menu" class (undocumented) ((extends . "Menu")) #f #f 45 20 45 31 ("Menu")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("previous-search" "results-separator" "replace-selected" "edit-current" "edit-previous" "edit-next" "edit-separator" "replace-all" "replace&find-forward" "replace" "find-backward" "find-forward" "find-separator" "Separator-Item" "<Separator-Item>" "find-in-user" "find-in-directories" "find-in-projects" "find-in-text" "Menu" "<Menu>" "Image-Resource" "icon:" "application" "Action" "action-handler:" "find" "name:" "Label-Item" "<Label-Item>" "title:" "install" "<install>")}}}})
"Search-Mode-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "command" "Search-Mode-Actions.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.command.Search-Mode-Actions" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Search-Mode-Actions" class () ((extends . "Actions")) #f #f 45 7 45 26 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Escape" "on-cancel" "cancel" "Return" "on-finish" "finish" "on-replace-all" "replace-all" "on-replace&find-forward" "replace&find-forward" "on-replace" "replace" "on-find-backward" "find-backward" "F3" "on-find-forward" "find-forward" "on-goto-replace" "goto-replace" "on-goto-find" "goto-find" "on-persist-highlights" "persist-highlights" "on-highlight" "highlight" "End" "on-end" "end" "alternate-shortcut:" "Home" "on-home" "home" "on-next" "next" "on-prior" "prior" "on-center-caret" "center-caret" ":shift" "on-buffer-boundaries" "buffer-boundaries" "on-declaration-boundaries" "declaration-boundaries" "Space" "on-outer-boundaries" "outer-boundaries" "on-widen" "widen" "on-current" "current" "on-backward" "backward" ":control" "on-forward" "forward" "on-regexp" "regexp" "on-ignore-case" "ignore-case" ":alt" "Shortcut" "shortcut:" "on-whole-words" ":mode" ":focus" "Event-Handler" "action-handler:" "whole-words" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Search-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Search-Preferences.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.Search-Preferences" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Search-Preferences" class (undocumented) ((extends . "Tool-Preferences")) #f #f 45 20 45 38 ("Tool-Preferences")
        {Lisp-Entry "active" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 18 ()}
        {Lisp-Entry "get-active" accessor () () #f #f 48 43 48 51 ()}
        {Lisp-Entry "set-active" accessor () () #f #f 48 43 48 51 ()}
        {Lisp-Entry "form" form () () #f #f 51 3 51 7 ("user" "User-Search-Preferences" "<User-Search-Preferences>" "directories" "Directories-Search-Preferences" "<Directories-Search-Preferences>" "projects" "Projects-Search-Preferences" "<Projects-Search-Preferences>" "text" "name:" "Text-Search-Preferences" "<Text-Search-Preferences>" "Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 64 25 64 45 ("Search-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 73 11 73 17 ()
        {Lisp-Entry "import" import () () #f #f 76 1 76 7 ("jazz.designer")}
        {Lisp-Entry "Search-Preferences-Descriptor" class () ((extends . "Tool-Preferences-Descriptor")) #f #f 79 7 79 36 ("Tool-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 82 3 82 7 ("active" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "component-get-addable-base" method (override) ("component") #f #f 88 20 88 46 ("Search-View-Preferences" "component")}
          {Lisp-Entry "component-get-addable-details" method (override) ("component") #f #f 92 20 92 49 ("expression?" "play-recording?" "preserve-case?" "ignore-case?" "100" "whole-words?" "targets" "150" "name-info" "component")}}}}})
"Search-Result"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Search-Result.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.search.Search-Result" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("irregex" "jazz.system")}
      {Lisp-Entry "Search-Result" class () ((extends . "Object")) #f #f 44 7 44 20 ("Object")
        {Lisp-Entry "resultset" slot () ((getter . "generate")) #f #f 47 8 47 17 ()}
        {Lisp-Entry "get-resultset" accessor () () #f #f 47 25 47 33 ()}
        {Lisp-Entry "search" slot () ((getter . "generate")) #f #f 48 8 48 14 ()}
        {Lisp-Entry "get-search" accessor () () #f #f 48 25 48 33 ()}
        {Lisp-Entry "beginning" slot () ((accessors . "generate")) #f #f 49 8 49 17 ()}
        {Lisp-Entry "get-beginning" accessor () () #f #f 49 28 49 36 ()}
        {Lisp-Entry "set-beginning" accessor () () #f #f 49 28 49 36 ()}
        {Lisp-Entry "ending" slot () ((accessors . "generate")) #f #f 50 8 50 14 ()}
        {Lisp-Entry "get-ending" accessor () () #f #f 50 28 50 36 ()}
        {Lisp-Entry "set-ending" accessor () () #f #f 50 28 50 36 ()}
        {Lisp-Entry "initialize" method (override) ("resultset" "(beginning: beginning #f)" "(ending: ending #f)") #f #f 53 20 53 30 ("ending~self" "beginning~self" "get-search" "get-search~" "search" "search~self" "self" "resultset~self" "set!" "nextmethod" "ending" "ending:" "beginning" "beginning:" "resultset")}
        {Lisp-Entry "get-icon" method (protected virtual) () #f #f 66 29 66 37 ("search" "get-icon" "get-icon~")}
        {Lisp-Entry "present" method (protected virtual) () #f #f 70 29 70 36 ("search" "present" "present~")}
        {Lisp-Entry "present-name" method (protected virtual) () #f #f 74 29 74 41 ()}
        {Lisp-Entry "present-location" method (protected virtual) () #f #f 78 29 78 45 ()}
        {Lisp-Entry "present-type" method (protected virtual) () #f #f 82 29 82 41 ()}
        {Lisp-Entry "location-sort-value" method (protected virtual) () #f #f 91 29 91 48 ("present-location")}
        {Lisp-Entry "edit" method (protected virtual) ("select" "(visible?: visible? #t)" "(activate-focus?: activate-focus? #t)") #f #f 100 29 100 33 ("activate-focus?" "activate-focus?:" "visible?" "visible?:" "select")}
        {Lisp-Entry "drill-down" method (protected virtual) () #f #f 104 29 104 39 ()}
        {Lisp-Entry "effective-client" method (public virtual) () #f #f 113 26 113 42 ("get-guest" "get-guest~" "get-text-view" "get-text-view~" "new?" "frame" "receive" "when" "activate-focus?:" "visible?:" "edit" "info" "let")}
        {Lisp-Entry "get-boundaries" method (public) () #f #f 125 18 125 32 ("Range$Cell$" "new" "ending" "beginning" "and" "when")}
        {Lisp-Entry "find-forward" method (protected) ("(client: client #f)" "(follow?: follow? #t)") #f #f 135 21 135 33 ("follow-forward" "when" "find-next" "and" "if" "effective-client" "or" "let" "follow?" "follow?:" "client" "client:")}
        {Lisp-Entry "find-backward" method (protected) ("(client: client #f)" "(follow?: follow? #t)") #f #f 143 21 143 34 ("follow-backward" "when" "find-previous" "and" "if" "effective-client" "or" "let" "follow?" "follow?:" "client" "client:")}
        {Lisp-Entry "find-next" method (protected) ("client") #f #f 151 21 151 30 ("ending" "end:" "search" "get-find" "get-find~" "select-next" "select-next~" "client")}
        {Lisp-Entry "find-previous" method (protected) ("client") #f #f 155 21 155 34 ("beginning" "end:" "search" "get-find" "get-find~" "select-previous" "select-previous~" "client")}
        {Lisp-Entry "follow-forward" method (protected) () #f #f 159 21 159 35 ("edit-next" "edit-next~" "same-search?" "when" "get-results" "results" "let")}
        {Lisp-Entry "follow-backward" method (protected) () #f #f 165 21 165 36 ("edit-previous" "edit-previous~" "same-search?" "when" "get-results" "results" "let")}
        {Lisp-Entry "install-indicators" method (protected virtual) ("beginning-indicator" "ending-indicator") #f #f 171 29 171 47 ("reset" "reset~" "ending-indicator" "beginning-indicator")}
        {Lisp-Entry "get-results" method (protected) () #f #f 176 21 176 32 ("get-application" "get-search-results" "get-search-results~")}
        {Lisp-Entry "same-search?" method (protected) ("results") #f #f 180 21 180 33 ("resultset" "get-current-resultset" "get-current-resultset~" "eq?" "results")}
        {Lisp-Entry "replace-selection" method (protected) ("(client: client #f)") #f #f 189 21 189 38 ("get-application" "get-recorder" "get-recorder~" "play-current-recording" "play-current-recording~" "acquire-focus" "acquire-focus~" "insert-string" "insert-string~" "not" "when" "get-selected-string" "get-selected-string~" "let*" "else" "char->integer" "irregex-match-substring" "2" "+" "string-ref" "eqv?" "reverse" "string-append" "apply" ">=" "cond" "substring" "cons" "collect" "res" "i" "from" "lp" "string-length" "-" "end" "repl" "cdr" "expand-replacement" "get-regexp?" "get-regexp?~" "car" "search-context-regexp" "irregex-match" "m" "pair?" "and" "get-replacement" "capitalize" "upcase" "downcase" "case" "cs" "convert-case" "capitalized" "upper-case" "upper-case?" "1" "cardinality" "=" "lower-case" "0" "element" "lower-case?" "empty-string?" "if" "str" "determine-case" "define" "effective-client" "or" "get-play-recording?" "get-play-recording?~" "play-recording?" "get-preserve-case?" "get-preserve-case?~" "preserve-case?" "get-replace-list" "get-replace-list~" "repl-list" "get-contexts" "get-contexts~" "find-list" "get-expression?" "get-expression?~" "expression?" "get-replace" "get-replace~" "replace" "search" "get-find" "get-find~" "find" "let" "client" "client:")}
        {Lisp-Entry "replace-selection&find-forward" method (protected) ("(client: client #f)" "(follow?: follow? #t)") #f #f 251 21 251 51 ("find-forward" "replace-selection" "follow?" "follow?:" "client" "client:")}
        {Lisp-Entry "replace-all" method (protected) ("(client: client #f)") #f #f 256 21 256 32 ("follow?:" "find-forward" "while" "replace-selection" "client" "client:")}}}})
"Search-Results"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Search-Results.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.search.Search-Results" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.search" "jazz.ui.clipboard" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Search-Results" class (undocumented) ((extends . "Navigable-Results")) #f #f 50 20 50 34 ("Navigable-Results")
        {Lisp-Entry "current-resultset" slot () ((initialize . "#f") (getter . "generate")) #f #f 53 8 53 25 ()}
        {Lisp-Entry "get-current-resultset" accessor () () #f #f 53 48 53 56 ()}
        {Lisp-Entry "resultset-stack" slot () ((initialize . "'()") (getter . "generate")) #f #f 54 8 54 23 ()}
        {Lisp-Entry "get-resultset-stack" accessor () () #f #f 54 48 54 56 ()}
        {Lisp-Entry "categorized?" slot () ((initialize . "#f")) #f #f 55 8 55 20 ()}
        {Lisp-Entry "form" form () () #f #f 58 3 58 7 ("100" "type" "Tree-Label-Column" "<Tree-Label-Column>" "337" "Tree-Location-Column" "<Tree-Location-Column>" "250" "width:" "title:" "name" "Tree-Node-Column" "<Tree-Node-Column>" "on-context-menu" ":form" "context-menu-handler:" "multiple-selection?:" "location" "filled-column:" "results" "header" "content" "scroller" "resultset" "Resultset-Combo" "<Resultset-Combo>" "Dark" "Color" "border-color:" "Border-View" "<Border-View>" "2" "Rect" "layout-insets:" "fill" "layout-type:" "150" "Layout-View" "<Layout-View>" "on-pop-resultset" "pop" "Push-Tool" "<Push-Tool>" "4" "0" "8" "Separator" "<Separator>" "on-categorize" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "edit" "before:" "22" "Dimension" "size:" "Toggle-Tool" "<Toggle-Tool>" "tools" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 79 25 79 38 ("search-results" "rest")}
        {Lisp-Entry "form-model" method (override) ("form") #f #f 83 20 83 30 ("nextmethod" "else" "Search-Results-Tree" "results" "get-name" "get-name~" "case" "form")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 94 25 94 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 98 25 98 35 ()}
        {Lisp-Entry "on-context-menu" method () ("evt") #f #f 107 11 107 26 ("track-popup-menu" "lambda" "with-context-click" "with-context-click~" "when" "get-context-menu" "menu" "acquire" "acquired" "get-position" "get-position~" "pos" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 118 20 118 36 ("Found-Menu" "new")}
        {Lisp-Entry "on-categorize" method () ("evt") #f #f 122 11 122 24 ("update-resultset" "not" "categorized?" "set!" "evt")}
        {Lisp-Entry "on-pop-resultset" method () ("evt") #f #f 127 11 127 27 ("pop-resultset" "evt")}
        {Lisp-Entry "edit-selection" method (override) ("select") #f #f 136 20 136 34 ("rank->result" "edit-result" "rank" "lambda" "for-each" "get-tree" "get-selection" "get-selection~" "selection" "let" "select")}
        {Lisp-Entry "edit-result" method () ("result" "select" "(visible?: visible? #t)" "(activate-focus?: activate-focus? #t)") #f #f 143 11 143 22 ("edit" "edit~" "set-active-search-result" "lambda" ":wait" "with-cursor" "activate-focus?" "activate-focus?:" "visible?" "visible?:" "select" "result")}
        {Lisp-Entry "rank->result" method () ("rank") #f #f 150 11 150 23 ("get-tree" "get-row" "get-row~" "get-user-data" "get-user-data~" "rank")}
        {Lisp-Entry "replace-selected" method (public) () #f #f 159 18 159 34 ("format-plural" "format" "close" "close~" "increase!" "save" "save~" "get-modified?" "get-modified?~" "and" "when" "client:" "replace-all" "replace-all~" "set-active-search-result" "get-document-controller" "get-document-controller~" "name-status" "name-status~" "user-feedback" "get-text-view" "get-text-view~" "text" "get-guest" "get-guest~" "guest" "let*" "activate-focus?:" "visible?:" "forward" "edit-result" "new?" "frame" "receive" "rank->result" "result" "rank" "lambda" "for-each" "0" "modified-count" "get-tree" "get-selection" "get-selection~" "selection" "yes" "auto-save/close?" "throw-cancel" "cancel" "eq?" "if" "confirmation" "type:" "message-box" "code" "let")}
        {Lisp-Entry "select-results" method (public) ("resultset") #f #f 190 18 190 32 ("select-resultset" "Search-Result" "new" "set-active-search-result" "update-resultset-combo" "update-resultset" "cons" "resultset-stack" "current-resultset" "set!" "preserve-current-selection" "resultset")}
        {Lisp-Entry "preserve-current-selection" method () () #f #f 200 11 200 37 ("get-tree" "get-selection" "get-selection~" "set-selection" "set-selection~" "current-resultset" "when")}
        {Lisp-Entry "set-resultset" method () ("resultset") #f #f 210 11 210 24 ("Search-Result" "new" "set-active-search-result" "update-resultset-combo" "update-resultset" "current-resultset" "set!" "preserve-current-selection" "resultset")}
        {Lisp-Entry "pop-resultset" method () () #f #f 218 11 218 24 ("Search-Result" "new" "set-active-search-result" "update-resultset-combo" "update-resultset" "car" "current-resultset" "cdr" "set!" "bell" "1" "resultset-stack" "length" "<=" "if")}
        {Lisp-Entry "update-resultset-combo" method () () #f #f 228 11 228 33 ("current-resultset" "set-value" "set-value~" "resultset-stack" "present" "present~" "not" "if" "list" "get-search" "get-search~" "search" "result" "lambda" "map" "set-choices" "set-choices~" "resultset" "locate" "combo" "let")}
        {Lisp-Entry "update-resultset" method () () #f #f 242 11 242 27 ("update-search-actions" "update-search-actions~" "list" "or" "set-selection" "set-selection~" "0" "get-visible-count" "get-visible-count~" ">" "categorized?" "self" "install-results" "install-results~" "supports-drill-down?" "supports-drill-down?~" "get-node-column" "get-node-column~" "set-toplevel-controls?" "set-toplevel-controls?~" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "get-selection" "get-selection~" "selection" "get-results" "get-results~" "results" "get-search" "get-search~" "search" "get-tree" "tree" "get-application" "appl" "let" "current-resultset" "when")}
        {Lisp-Entry "update-tree-row" method () ("row") #f #f 259 11 259 26 ("drill-down" "drill-down~" "get-results" "get-results~" "father:" "add-result" "lambda" "for-each" "get-user-data" "get-user-data~" "result" "let" "row")}
        {Lisp-Entry "add-result" method () ("result" "(father: father #f)") #f #f 266 11 266 21 ("user-data:" "list" "children:" "state:" "add-row" "add-row~" "user-data" "present-type" "present-type~" "type" "present-location" "present-location~" "Tree-Label" "location" "get-icon" "get-icon~" "image:" "present-name" "present-name~" "title:" "Tree-Node" "new" "node" "collapsed" "dynamic" "categorized?" "get-search" "get-search~" "dynamic-search?" "dynamic-search?~" "if" "state" "get-tree" "tree" "let" "father" "father:" "result")}}
      {Lisp-Entry "Search-Results-Tree" class () ((extends . "Tree-View")) #f #f 281 7 281 26 ("Tree-View")
        {Lisp-Entry "focus-actions" method (override) () #f #f 289 20 289 33 ("nextmethod" "search-results-tree" "find-actions" "cons")}
        {Lisp-Entry "get-search" method () () #f #f 299 11 299 21 ("Search-Results" "find-ascendant")}
        {Lisp-Entry "return-press" method (override) ("key") #f #f 308 20 308 32 ("get-search" "edit-selection" "edit-selection~" "key")}
        {Lisp-Entry "copy-selection" method (override) () #f #f 312 20 312 34 ("get-selection" "present-name" "present-name~" "get-row" "get-user-data" "get-user-data~" "result" "let" "n" "lambda" "map" "format" "set-clipboard-text")}
        {Lisp-Entry "select-all" method (override) ("." "rest") #f #f 321 20 321 30 ("rest")}
        {Lisp-Entry "on-edit-selection" method () ("evt") #f #f 325 11 325 28 ("get-search" "edit-selection" "edit-selection~" "evt")}
        {Lisp-Entry "update-row" method (override) ("row") #f #f 329 20 329 30 ("get-search" "update-tree-row" "update-tree-row~" "row")}}
      {Lisp-Entry "Search-Results-Tree-Actions" class () ((extends . "Actions")) #f #f 338 7 338 34 ("Actions")
        {Lisp-Entry "form" form () () #f #f 341 3 341 7 (":alt" "alternate-shortcut:" "F12" "on-edit-selection" "edit-selection" "Return" ":control" "Shortcut" "shortcut:" "on-action" ":focus" "Event-Handler" "action-handler:" "action" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}
      {Lisp-Entry "Tree-Location-Column" class () ((extends . "Tree-Label-Column")) #f #f 352 7 352 27 ("Tree-Label-Column")
        {Lisp-Entry "sort-value" method (override) ("row" "data") #f #f 355 20 355 30 ("get-user-data" "get-user-data~" "location-sort-value" "location-sort-value~" "data" "row")}}
      {Lisp-Entry "Resultset-Combo" class () ((extends . "Combo-Box")) #f #f 364 7 364 22 ("Combo-Box")
        {Lisp-Entry "content-change" method (override) ("origin") #f #f 367 20 367 34 ("get-value" "parent" "get-creator" "get-creator~" "set-resultset" "set-resultset~" "origin")}}
      {Lisp-Entry "Found-Menu" class () ((extends . "Context-Menu")) #f #f 376 7 376 17 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 379 3 379 7 ("on-copy" ":focus" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "title:" "copy" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Search-Resultset"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Search-Resultset.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.Search-Resultset" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Search-Resultset" class () ((extends . "Object")) #f #f 40 7 40 23 ("Object")
        {Lisp-Entry "search" slot () ((getter . "generate")) #f #f 43 8 43 14 ()}
        {Lisp-Entry "get-search" accessor () () #f #f 43 25 43 33 ()}
        {Lisp-Entry "selection" slot () ((accessors . "generate")) #f #f 44 8 44 17 ()}
        {Lisp-Entry "get-selection" accessor () () #f #f 44 28 44 36 ()}
        {Lisp-Entry "set-selection" accessor () () #f #f 44 28 44 36 ()}
        {Lisp-Entry "queue" slot () () #f #f 45 8 45 13 ()}
        {Lisp-Entry "initialize" method (override) ("search") #f #f 48 20 48 30 ("new-queue" "queue" "queue~self" "selection" "selection~self" "self" "search~self" "set!" "nextmethod" "search")}
        {Lisp-Entry "get-results" method (public) () #f #f 60 18 60 29 ("queue" "queue-list")}
        {Lisp-Entry "add-result" method (public) ("result") #f #f 64 18 64 28 ("queue" "enqueue" "result")}}}})
"Search-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Search-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.search.Search-View" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.activity" "jazz.ui" "jazz.system" "jazz.project" "jazz.library" "jazz.jml" "jazz.io" "jazz.graphic" "jazz.editor.jazz" "jazz.catalog")}
      {Lisp-Entry "Search-View" class (undocumented) ((extends . "Layout-View")) #f #f 52 20 52 31 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 55 3 55 7 ("200" "388" "visible?:" "expression?" "483" "play-recording?" "375" "preserve-case?" "226" "regexp?" "118" "ignore-case?" "18" "100" "114" "whole-words?" "Check-Box" "<Check-Box>" "173" "Tree-Label-Column" "<Tree-Label-Column>" "display-images?:" "toplevel-controls?:" "176" "width:" "Tree-Node-Column" "<Tree-Node-Column>" "15" "default-row-height:" "Label-User" "Font" "font:" "targets" "Search-Targets" "<Search-Targets>" "Tree-Header" "<Tree-Header>" "fill" "layout-type:" ">" "<content" "<content~>" "vscroll?:" "Scroller-View" "<Scroller-View>" "style:" "edge" "border-type:" "91" "373" "370" "targets-border" "Border-View" "<Border-View>" "on-splitter-move" "move-handler:" "6" "362" "vertical" "Splitter" "<Splitter>" "97" "350" "8" "10" "domain" "Group-Box" "<Group-Box>" "default?:" "on-search" ":form" "Event-Handler" "action-handler:" "24" "80" "Dimension" "size:" "14" "755" "Point" "position:" "title:" "search" "name:" "Push-Button" "<Push-Button>" "install" "<install>")}
        {Lisp-Entry "next-radio" method (public) () #f #f 77 18 77 28 ("length" "1" "+" "modulo" "element" "set-search-domain" "when" "find" "pos" "get-search-domains" "domains" "get-search-domain" "domain" "let*")}
        {Lisp-Entry "next-tab" method (public) () #f #f 85 18 85 26 ("set-selection" "set-selection~" "1" "+" "modulo" "new-selection" "get-selection" "get-selection~" "old-selection" "get-children" "get-children~" "length" "max-selection" "get-manager" "manager" "let*")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 98 20 98 26 ("get-columns" "get-columns~" "1" "set-justification" "set-justification~" "column" "lambda" "for-each" "get-targets" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-manager" method () () #f #f 111 11 111 22 ("Search-Manager" "find-ascendant")}
        {Lisp-Entry "get-results" method (protected) () #f #f 120 21 120 32 ("get-application" "get-search-results" "get-search-results~")}
        {Lisp-Entry "get-targets" method (public) () #f #f 124 18 124 29 ("targets" "locate")}
        {Lisp-Entry "get-search-targets" method (public) () #f #f 128 18 128 36 ("get-output" "get-output~" "naturals" "list" "put" "put~" "empty-string?" "and" "unless" "1" "repl" "0" "Cell" "get-cell-data" "get-cell-data~" "get-title" "get-title~" "find" "let" "line" "lambda" "for-each" "in-edition?" "in-edition?~" "if" "List-Factory" "new" "fact" "get-visible-count" "get-visible-count~" "height" "get-targets" "tree" "let*")}
        {Lisp-Entry "set-search-targets" method (public) ("targets") #f #f 144 18 144 36 ("0" "naturals" "invalidate-cell" "invalidate-cell~" "set-cell-title" "set-cell-title~" "Cell" "new" "cell" "col" "line" "target" "for-each" "lambda" "with-update-locked" "with-update-locked~" "get-visible-count" "get-visible-count~" "height" "get-columns-count" "get-columns-count~" "width" "ensure-visible-count" "ensure-visible-count~" "length" "count" "get-targets" "tree" "let" "targets")}
        {Lisp-Entry "get-find-targets" method (public) () #f #f 170 18 170 34 ("get-search-targets" "regexp?:" "ignore-case?:" "whole-words?:" "first" "make-search-context" "target" "lambda" "map" "->search-set" "get-regexp?" "regexp?" "get-ignore-case?" "ignore-case?" "get-whole-words?" "whole-words?" "let")}
        {Lisp-Entry "get-replace-targets" method () () #f #f 183 11 183 30 ("get-play-recording?" "play-recording?:" "get-preserve-case?" "preserve-case?:" "get-search-targets" "second" "map" "Replace" "new")}
        {Lisp-Entry "get-search-domain" method (public) () #f #f 189 18 189 35 ("get-search-domains" "get-selected?" "get-selected?~" "and" "when" "find-component" "find-component~" "radio" "name" "lambda" "find-if" "domain" "locate" "get-content" "get-content~" "group" "let")}
        {Lisp-Entry "set-search-domain" method (public) ("domain") #f #f 198 18 198 35 ("get-children" "get-children~" "eq?" "set-selected?" "set-selected?~" "Radio-Button" "is?" "child" "lambda" "for-each" "when" "find-component" "find-component~" "radio" "locate" "get-content" "get-content~" "group" "let*" "domain")}
        {Lisp-Entry "get-whole-words?" method (public) () #f #f 208 18 208 34 ("whole-words?" "locate" "get-checked?" "get-checked?~")}
        {Lisp-Entry "set-whole-words?" method (public) ("flag") #f #f 212 18 212 34 ("whole-words?" "locate" "set-checked?" "set-checked?~" "flag")}
        {Lisp-Entry "get-ignore-case?" method (public) () #f #f 216 18 216 34 ("ignore-case?" "locate" "get-checked?" "get-checked?~")}
        {Lisp-Entry "set-ignore-case?" method (public) ("flag") #f #f 220 18 220 34 ("ignore-case?" "locate" "set-checked?" "set-checked?~" "flag")}
        {Lisp-Entry "get-regexp?" method (public) () #f #f 224 18 224 29 ("regexp?" "locate" "get-checked?" "get-checked?~")}
        {Lisp-Entry "set-regexp?" method (public) ("flag") #f #f 228 18 228 29 ("regexp?" "locate" "set-checked?" "set-checked?~" "flag")}
        {Lisp-Entry "get-preserve-case?" method (public) () #f #f 232 18 232 36 ("preserve-case?" "locate" "get-checked?" "get-checked?~")}
        {Lisp-Entry "set-preserve-case?" method (public) ("flag") #f #f 236 18 236 36 ("preserve-case?" "locate" "set-checked?" "set-checked?~" "flag")}
        {Lisp-Entry "get-play-recording?" method (public) () #f #f 240 18 240 37 ("play-recording?" "locate" "get-checked?" "get-checked?~")}
        {Lisp-Entry "set-play-recording?" method (public) ("flag") #f #f 244 18 244 37 ("play-recording?" "locate" "set-checked?" "set-checked?~" "flag")}
        {Lisp-Entry "get-expression?" method (public) () #f #f 248 18 248 33 ("expression?" "locate" "get-checked?" "get-checked?~")}
        {Lisp-Entry "set-expression?" method (public) ("flag") #f #f 252 18 252 33 ("expression?" "locate" "set-checked?" "set-checked?~" "flag")}
        {Lisp-Entry "get-search-domains" method (public virtual) () #f #f 261 26 261 44 ()}
        {Lisp-Entry "on-search" method (package) ("evt") #f #f 270 19 270 28 ("search" "evt")}
        {Lisp-Entry "resize" method (override) ("dh" "dv") #f #f 274 20 274 26 ("expression?" "play-recording?" "preserve-case?" "regexp?" "ignore-case?" "whole-words?" "targets-border" "domain" "size-figure" "size-figure~" "0" "search" "locate" "move-figure" "move-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-splitter-move" method () ("evt") #f #f 287 11 287 27 ("update-view" "-" "targets-border" "move-figure" "move-figure~" "0" "domain" "locate" "size-figure" "size-figure~" "delta:" "get-property" "get-property~" "delta" "let" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 295 20 295 35 ("on-search" "evt")}
        {Lisp-Entry "get-search-reporter" method (protected) ("count") #f #f 304 21 304 40 ("show" "show~" "setup-search-reporter" "register-activity" "register-activity~" "reporter" "get-activity-manager" "manager" "let*" "count")}
        {Lisp-Entry "setup-search-reporter" method (protected virtual) ("reporter" "count") #f #f 312 29 312 50 ("count" "reporter")}
        {Lisp-Entry "search" method () () #f #f 321 11 321 17 ("search-targets" "bell" "null?" "if" "get-replace-targets" "replace" "get-find-targets" "find" "let" "get-targets" "end-edition" "end-edition~" "get-player" "hide" "hide~")}
        {Lisp-Entry "search-targets" method (protected virtual) ("find" "replace") #f #f 331 29 331 43 ("replace" "find")}
        {Lisp-Entry "search-in-file" method () ("search" "file" "resultset" "reporter") #f #f 335 11 335 25 ("File-Search-Result" "new" "add-result" "add-result~" "search-file" "found" "let" "step-it" "step-it~" "get-name" "get-name~" "user-feedback" "user-feedback~" "when" "cancel-requested?" "cancel-requested?~" "and" "unless" "reporter" "resultset" "file" "search")}
        {Lisp-Entry "search-in-directories" method (protected) ("search" "directories" "extensions" "resultset" "reporter") #f #f 345 21 345 42 ("search-in-directory" "directory" "lambda" "for-each" "reporter" "resultset" "extensions" "directories" "search")}
        {Lisp-Entry "search-in-directory" method (protected) ("search" "directory" "extensions" "resultset" "reporter") #f #f 351 21 351 40 ("search-in-file" "512000" "get-size" "get-size~" "<=" "extension=?" "test:" "Binary-Extensions" "member?" "not" "and" "cond" "get-extension" "get-extension~" "ext" "file" "lambda" "iterate-project/directory" "equal?" "all-extensions?" "let" "reporter" "resultset" "extensions" "directory" "search")}
        {Lisp-Entry "search-file" method () ("file" "search") #f #f 362 11 362 22 ("search-expressions" "search-expressions~" "quotation" "code" "extension=?" "mode" "end:" "start:" "Jazz-Explorer" "expl" "text-beginning" "text-beginning~" "beginning" "let*" "set-moniker" "set-moniker~" "Jazz-Text-View" "new" "text" "constituent-test:" "match-test:" "get-find" "get-find~" "regular-search" "extension-constituent-test" "constituent-test" "extension-match-test" "match-test" "read-content-string" "content" "input" "lambda" "cr-lf" "eol-encoding:" "char-encoding-errors:" "path-settings" "call-with-input-file" "get-expression?" "get-expression?~" "not" "if" "get-extension" "get-extension~" "ext" "let" "exists?" "exists?~" "when" "search" "file")}
        {Lisp-Entry "iterate-project/directory" method (protected) ("project/directory" "proc") #f #f 380 21 380 46 ("ignored-toplevel-directories:" "iterate-directory" "iterate-directory~" "iterate-files" "iterate-files~" "project" "lambda" "for-each-project" "for-each-project~" "symbol?" "if" "include-inactives?:" "error?:" "find-project~" "or" "get-workbench" "workbench" "let" "name" "find-project" "define" "proc" "project/directory")}
        {Lisp-Entry "select-search" method (public virtual) () #f #f 400 26 400 39 ("0" "Cell" "select-cell" "select-cell~" "get-targets" "targets" "let")}
        {Lisp-Entry "current-history-item" method () () #f #f 410 11 410 31 ("get-selection" "get-selection~" "get-content" "get-content~" "get-expression?" "get-play-recording?" "get-preserve-case?" "get-ignore-case?" "get-whole-words?" "get-search-targets" "get-search-domain" "History-Search-Item" "new" "results" "locate" "tree" "let")}
        {Lisp-Entry "install-history-item" method (protected) ("item") #f #f 424 21 424 41 ("get-selection" "get-selection~" "set-selection" "set-selection~" "get-content" "get-content~" "set-content" "set-content~" "get-expression?" "get-expression?~" "set-expression?" "get-play-recording?" "get-play-recording?~" "set-play-recording?" "get-preserve-case?" "get-preserve-case?~" "set-preserve-case?" "get-ignore-case?" "get-ignore-case?~" "set-ignore-case?" "get-whole-words?" "get-whole-words?~" "set-whole-words?" "get-targets" "get-targets~" "set-search-targets" "get-domain" "get-domain~" "set-search-domain" "results" "locate" "tree" "let" "item")}}
      {Lisp-Entry "Search-Targets" class () ((extends . "Tree-View")) #f #f 442 7 442 21 ("Tree-View")
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 445 20 445 30 ("select-cell" "nextmethod" "not" "if" "uniform-height?:" "any?:" "view->tree" "cell" "let" "pos")}
        {Lisp-Entry "tab-stop-enter" method (override) () #f #f 452 20 452 34 ("0" "Cell" "select-cell")}
        {Lisp-Entry "add-empty-row" method (override) ("(father: father #f)") #f #f 456 20 456 33 ("children:" "add-row" "columns" "new-empty-cell" "new-empty-cell~" "map" "children" "root-row" "or" "let" "father" "father:")}
        {Lisp-Entry "select-cell" method (override) ("cell") #f #f 462 20 462 31 ("select-all" "select-all~" "acquire-focus" "acquire-focus~" "layout-scrollee" "layout-scrollee~" "self" "set-tree" "set-tree~" "set-client" "set-client~" "get-string-content" "get-string-content~" "set-title" "set-title~" "lambda" "after-end:" "editor:" "edit-cell" "get-line" "get-line~" "ensure-row-exists" "get-title" "get-title~" "set-string-content" "set-string-content~" "when" "font" "font:" "top-padding:" "left-padding:" "get-content" "get-content~" "Tree-Embedded-Search-Text-View" "text" "hscroll?:" "vscroll?:" "parent:" "Scroller-View" "scroller" "Medium" "Color" "border-color:" "solid" "border-type:" "Border-View" "new" "editor" "3" "0" "get-col" "get-col~" "=" "if" "left" "get-cell-data" "data" "let*" "end-edition" "cell")}}}})
"Search-View-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Search-View-Preferences.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.search.Search-View-Preferences" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Search-View-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 46 20 46 43 ("Preferences")
        {Lisp-Entry "targets" property () ((initialize . "'()") (accessors . "generate")) #f #f 49 12 49 19 ()}
        {Lisp-Entry "get-targets" accessor () () #f #f 49 53 49 61 ()}
        {Lisp-Entry "set-targets" accessor () () #f #f 49 53 49 61 ()}
        {Lisp-Entry "whole-words?" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 24 ()}
        {Lisp-Entry "get-whole-words?" accessor () () #f #f 50 53 50 61 ()}
        {Lisp-Entry "set-whole-words?" accessor () () #f #f 50 53 50 61 ()}
        {Lisp-Entry "ignore-case?" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 24 ()}
        {Lisp-Entry "get-ignore-case?" accessor () () #f #f 51 53 51 61 ()}
        {Lisp-Entry "set-ignore-case?" accessor () () #f #f 51 53 51 61 ()}
        {Lisp-Entry "preserve-case?" property () ((initialize . "#f") (accessors . "generate")) #f #f 52 12 52 26 ()}
        {Lisp-Entry "get-preserve-case?" accessor () () #f #f 52 53 52 61 ()}
        {Lisp-Entry "set-preserve-case?" accessor () () #f #f 52 53 52 61 ()}
        {Lisp-Entry "play-recording?" property () ((initialize . "#f") (accessors . "generate")) #f #f 53 12 53 27 ()}
        {Lisp-Entry "get-play-recording?" accessor () () #f #f 53 53 53 61 ()}
        {Lisp-Entry "set-play-recording?" accessor () () #f #f 53 53 53 61 ()}
        {Lisp-Entry "expression?" property () ((initialize . "#f") (accessors . "generate")) #f #f 54 12 54 23 ()}
        {Lisp-Entry "get-expression?" accessor () () #f #f 54 53 54 61 ()}
        {Lisp-Entry "set-expression?" accessor () () #f #f 54 53 54 61 ()}
        {Lisp-Entry "form" form () () #f #f 57 3 57 7 ("Image-Resource" "icon:" "install" "<install>")}
        {Lisp-Entry "get-domain" method (meta override) ("property") #f #f 66 25 66 35 ("nextmethod" "else" "Boolean-Domain" "new" "expression?" "play-recording?" "preserve-case?" "ignore-case?" "whole-words?" "field-name" "case" "property")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 77 25 77 45 ("Search-View-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 86 11 86 17 ()
        {Lisp-Entry "import" import () () #f #f 89 1 89 7 ("jazz.designer")}
        {Lisp-Entry "Search-View-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 92 7 92 41 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 95 3 95 7 ("expression?" "play-recording?" "preserve-case?" "ignore-case?" "domain" "Boolean-Domain" "<Boolean-Domain>" "whole-words?" "title:" "targets" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Selectable"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Selectable.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Selectable" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Selectable" interface (undocumented) () #f #f 40 24 40 34 ()
        {Lisp-Entry "get-selected?" method (public virtual abstract) () #f #f 43 35 43 48 ()}
        {Lisp-Entry "set-selected?" method (public virtual abstract) ("selected?") #f #f 44 35 44 48 ("selected?")}
        {Lisp-Entry "unselect" method (public virtual abstract) () #f #f 45 35 45 43 ()}}}})
"Selected-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Selected-Event.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.event.Selected-Event" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Selected-Event" class () ((extends . "Event")) #f #f 43 7 43 21 ("Event")
        {Lisp-Entry "owner" slot () ((getter . "generate")) #f #f 46 8 46 13 ()}
        {Lisp-Entry "get-owner" accessor () () #f #f 46 24 46 32 ()}
        {Lisp-Entry "old" slot () ((getter . "generate")) #f #f 47 8 47 11 ()}
        {Lisp-Entry "get-old" accessor () () #f #f 47 24 47 32 ()}
        {Lisp-Entry "selected" slot () ((getter . "generate")) #f #f 48 8 48 16 ()}
        {Lisp-Entry "get-selected" accessor () () #f #f 48 24 48 32 ()}
        {Lisp-Entry "force?" slot () ((getter . "generate")) #f #f 49 8 49 14 ()}
        {Lisp-Entry "get-force?" accessor () () #f #f 49 24 49 32 ()}
        {Lisp-Entry "initialize" method (override) ("kind" "sender" "owner" "old" "selected" "(force?: force? #f)" "(user-origin: user-origin #f)") #f #f 52 20 52 30 ("force?~self" "selected~self" "old~self" "self" "owner~self" "set!" "nextmethod" "user-origin" "user-origin:" "force?" "force?:" "selected" "old" "owner" "sender" "kind")}}}})
"Selection-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Selection-Event.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.event.Selection-Event" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Selection-Event" class () ((extends . "Event")) #f #f 43 7 43 22 ("Event")
        {Lisp-Entry "old" slot () ((getter . "generate")) #f #f 46 8 46 11 ()}
        {Lisp-Entry "get-old" accessor () () #f #f 46 29 46 37 ()}
        {Lisp-Entry "selection" slot () ((getter . "generate")) #f #f 47 8 47 17 ()}
        {Lisp-Entry "get-selection" accessor () () #f #f 47 29 47 37 ()}
        {Lisp-Entry "origin" slot () ((getter . "generate")) #f #f 48 8 48 14 ()}
        {Lisp-Entry "get-origin" accessor () () #f #f 48 29 48 37 ()}
        {Lisp-Entry "force-parent?" slot () ((getter . "generate")) #f #f 49 8 49 21 ()}
        {Lisp-Entry "get-force-parent?" accessor () () #f #f 49 29 49 37 ()}
        {Lisp-Entry "force?" slot () ((getter . "generate")) #f #f 50 8 50 14 ()}
        {Lisp-Entry "get-force?" accessor () () #f #f 50 29 50 37 ()}
        {Lisp-Entry "user-origin" slot () ((getter . "generate")) #f #f 51 8 51 19 ()}
        {Lisp-Entry "get-user-origin" accessor () () #f #f 51 29 51 37 ()}
        {Lisp-Entry "initialize" method (override) ("kind" "sender" "old" "selection" "(origin: origin #f)" "(force-parent?: force-parent? #f)" "(force?: force? #f)" "(user-origin: user-origin #f)") #f #f 54 20 54 30 ("user-origin~self" "force?~self" "force-parent?~self" "origin~self" "selection~self" "self" "old~self" "set!" "nextmethod" "user-origin" "user-origin:" "force?" "force?:" "force-parent?" "force-parent?:" "origin" "origin:" "selection" "old" "sender" "kind")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 64 20 64 25 ("properties" "selection" "old" "kind" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Selection-Handler"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "handler" "Selection-Handler.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.handler.Selection-Handler" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Selection-Handler" class () ((extends . "Event-Handler")) #f #f 43 7 43 24 ("Event-Handler")
        {Lisp-Entry "force?" slot () ((getter . "generate")) #f #f 46 8 46 14 ()}
        {Lisp-Entry "get-force?" accessor () () #f #f 46 22 46 30 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 49 20 49 30 ("self" "force?~self" "set!" "nextmethod" "apply" "others" "force?" "bind-keywords" "rest")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 55 20 55 25 ("properties" "null?" "force?" "if" "method-name" "target-name" "target" "or" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Selection-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "selection" "Selection-Manager.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.selection.Selection-Manager" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Selection-Manager" class (undocumented) ((extends . "Object")) #f #f 40 20 40 37 ("0" "Object")
        {Lisp-Entry "modifiers" property () ((initialize . "0") (getter . "generate")) #f #f 43 12 43 21 ()}
        {Lisp-Entry "get-modifiers" accessor () () #f #f 43 53 43 61 ()}
        {Lisp-Entry "shift?" property () ((initialize . "#f") (getter . "generate")) #f #f 44 12 44 18 ()}
        {Lisp-Entry "get-shift?" accessor () () #f #f 44 53 44 61 ()}
        {Lisp-Entry "control?" property () ((initialize . "#f") (getter . "generate")) #f #f 45 12 45 20 ()}
        {Lisp-Entry "get-control?" accessor () () #f #f 45 53 45 61 ()}
        {Lisp-Entry "alt?" property () ((initialize . "#f") (getter . "generate")) #f #f 46 12 46 16 ()}
        {Lisp-Entry "get-alt?" accessor () () #f #f 46 53 46 61 ()}
        {Lisp-Entry "multiple-selection?" property () ((initialize . "#f") (getter . "generate")) #f #f 47 12 47 31 ()}
        {Lisp-Entry "get-multiple-selection?" accessor () () #f #f 47 53 47 61 ()}
        {Lisp-Entry "mouse-down-part" property () ((initialize . "#f") (getter . "generate")) #f #f 48 12 48 27 ()}
        {Lisp-Entry "get-mouse-down-part" accessor () () #f #f 48 53 48 61 ()}
        {Lisp-Entry "mouse-down-view" property () ((initialize . "#f") (getter . "generate")) #f #f 49 12 49 27 ()}
        {Lisp-Entry "get-mouse-down-view" accessor () () #f #f 49 53 49 61 ()}
        {Lisp-Entry "provider" slot () ((initialize . "#f")) #f #f 52 8 52 16 ()}
        {Lisp-Entry "current-operation" slot () ((initialize . "#f")) #f #f 53 8 53 25 ()}
        {Lisp-Entry "delay-selection?" slot () ((initialize . "#f")) #f #f 54 8 54 24 ()}
        {Lisp-Entry "initialize" method (override) ("p") #f #f 57 20 57 30 ("provider" "set!" "nextmethod" "p")}
        {Lisp-Entry "debug-current-operation" method (public) () #f #f 67 18 67 41 ("current-operation")}
        {Lisp-Entry "mouse-down?" method (public) () #f #f 71 18 71 29 ("mouse-down" "current-operation" "eq?")}
        {Lisp-Entry "mouse-up?" method (public) () #f #f 75 18 75 27 ("mouse-up" "current-operation" "eq?")}
        {Lisp-Entry "mouse-double-down?" method (public) () #f #f 79 18 79 36 ("mouse-double-down" "current-operation" "eq?")}
        {Lisp-Entry "mouse-double-up?" method (public) () #f #f 83 18 83 34 ("mouse-double-up" "current-operation" "eq?")}
        {Lisp-Entry "keyboard?" method (public) () #f #f 87 18 87 27 ("keyboard" "current-operation" "eq?")}
        {Lisp-Entry "locked?" method (public) () #f #f 91 18 91 25 ("locked" "current-operation" "eq?")}
        {Lisp-Entry "set-modifiers" method () ("s?" "c?" "a?") #f #f 95 11 95 24 ("alt?" "control?" "shift?" "set!" "a?" "c?" "s?")}
        {Lisp-Entry "with-locked-operation" method (public) ("proc") #f #f 106 18 106 39 ("locked" "set!" "begin" "unwind-protect" "current-operation" "old-operation" "let" "proc")}
        {Lisp-Entry "collapse?" method (public) ("row") #f #f 115 18 115 27 ("row")}
        {Lisp-Entry "expand?" method (public) ("row") #f #f 119 18 119 25 ("row")}
        {Lisp-Entry "end-delayed?" method (public) () #f #f 123 18 123 30 ("mouse-up?" "content" "mouse-down-part" "eq?" "control?" "shift?" "not" "multiple-selection?" "and" "if")}
        {Lisp-Entry "allow-start-drag?" method (public) () #f #f 129 18 129 35 ("mouse-down?" "content" "mouse-down-part" "eq?" "and")}
        {Lisp-Entry "mouse-down-part-control?" method (public) () #f #f 134 18 134 42 ("control" "mouse-down-part" "eq?")}
        {Lisp-Entry "delay-selection" method (public) () #f #f 143 18 143 33 ("delay-selection?" "set!")}
        {Lisp-Entry "change-selection?" method (public) () #f #f 147 18 147 35 ("else" "mouse-up" "delay-selection?" "not" "mouse-down" "current-operation" "case")}
        {Lisp-Entry "mouse-down" method (public) ("view" "part" "shift?" "control?" "alt?" "ms?") #f #f 154 18 154 28 ("multiple-selection?" "set-modifiers" "mouse-down-part" "mouse-down-view" "mouse-down" "current-operation" "set!" "ms?" "alt?" "control?" "shift?" "part" "view")}
        {Lisp-Entry "mouse-up" method (public) ("shift?" "control?" "alt?") #f #f 162 18 162 26 ("set-modifiers" "mouse-up" "mouse-double-up" "current-operation" "set!" "mouse-double-down?" "if" "alt?" "control?" "shift?")}
        {Lisp-Entry "double-click" method (public) ("shift?" "control?" "alt?") #f #f 169 18 169 30 ("set-modifiers" "mouse-double-down" "current-operation" "set!" "alt?" "control?" "shift?")}
        {Lisp-Entry "keyboard" method (public) ("shift?" "control?" "alt?") #f #f 174 18 174 26 ("set-modifiers" "keyboard" "current-operation" "set!" "alt?" "control?" "shift?")}
        {Lisp-Entry "reset" method (public) () #f #f 179 18 179 23 ("delay-selection?" "multiple-selection?" "set-modifiers" "mouse-down-part" "current-operation" "set!")}}}})
"Selection-Provider"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "selection" "Selection-Provider.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.selection.Selection-Provider" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Selection-Provider" interface (undocumented) () #f #f 40 24 40 42 ()}}})
"Separator"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "layout" "Separator.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.layout.Separator" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Separator" class () ((extends . "Figure")) #f #f 43 7 43 16 ("Figure")
        {Lisp-Entry "default-size" method (override) () #f #f 46 20 46 32 ("0" "8" "Dimension")}}}})
"Separator-Item"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Separator-Item.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.menu.Separator-Item" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Separator-Item" class () ((extends . "Item")) #f #f 44 7 44 21 ("Item")
        {Lisp-Entry "default-size" method (override) () #f #f 52 20 52 32 ("8" "100" "Dimension")}
        {Lisp-Entry "preferred-height" method (override) () #f #f 56 20 56 36 ("8")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 65 20 65 24 ("4" "Light" "3" "line" "line~" "Dark" "Color" "set-color" "set-color~" "set-line-width" "set-line-width~" "get-width" "-" "right" "1" "left" "let" "context" "surface")}}}})
"Separator-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Separator-View.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.view.Separator-View" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Separator-View" class () ((extends . "View")) #f #f 44 7 44 21 ("View")
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 52 20 52 24 ("Light" "0" "line" "line~" "Dark" "Color" "set-color" "set-color~" "set-line-width" "set-line-width~" "1" "get-height" "get-height~" "-" "top" "get-size" "size" "let*" "context" "surface")}}}})
"Shortcut"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "action" "Shortcut.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.action.Shortcut" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale")}
      {Lisp-Entry "Shortcut" class () ((extends . "Object")) #f #f 44 7 44 15 ("Object")
        {Lisp-Entry "modifiers" slot () ((getter . "generate")) #f #f 47 8 47 17 ()}
        {Lisp-Entry "get-modifiers" accessor () () #f #f 47 25 47 33 ()}
        {Lisp-Entry "key" slot () ((getter . "generate")) #f #f 48 8 48 11 ()}
        {Lisp-Entry "get-key" accessor () () #f #f 48 25 48 33 ()}
        {Lisp-Entry "initialize" method (override) ("modifiers" "key") #f #f 51 20 51 30 ("key~self" "self" "modifiers~self" "nextmethod" ":control" ":shift" ":alt" "cons" "set!" "memq?" "when" "modifier" "lambda" "try" "standard" "let" "standardize-modifiers" "upcase" "char?" "if" "standardize-key" "define" "key" "modifiers")}
        {Lisp-Entry "hash-object" method (override) () #f #f 73 20 73 31 ("self" "shortcut-hash")}
        {Lisp-Entry "compare-object" method (override) ("target") #f #f 77 20 77 34 (":not-equal" "else" ":equal" "get-key" "get-key~" "key" "get-modifiers" "get-modifiers~" "modifiers" "=" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 87 20 87 25 ("key" "modifiers" "not-null?" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "present" method (public) () #f #f 100 18 100 25 ("key" "modifiers" "format")}
        {Lisp-Entry "present-shortcut" method (public) () #f #f 104 18 104 34 ("->string" "format" "key" "char?" ":shift" ":alt" "string-append" "set!" "modifiers" ":control" "memq?" "when" "str" "cdr" "localize" "not" "if" "assq" "info" "let" "shortcut" "localize-shortcut" "Multiply" "Subtract" "Add" "Delete" "Insert" "Next" "Prior" "Down" "Right" "Up" "Left" "End" "Home" "Tab" "Space" "Return" "Backspace" "Localized-Shortcuts" "define")}}}})
"Shortcut-Chooser"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Shortcut-Chooser.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.preference.Shortcut-Chooser" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Shortcut-Chooser" class (undocumented) ((extends . "Shortcut-Viewer")) #f #f 44 20 44 36 ("Shortcut-Viewer")
        {Lisp-Entry "action-name" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 23 ()}
        {Lisp-Entry "get-action-name" accessor () () #f #f 47 48 47 56 ()}
        {Lisp-Entry "set-action-name" accessor () () #f #f 47 48 47 56 ()}
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("ok" "buttons" "bindings-view" "title:" "title" "header" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 65 25 65 35 ()}
        {Lisp-Entry "setup-description" method (override) () #f #f 74 20 74 37 ("action-name" "format" "description" "locate" "set-title" "set-title~")}
        {Lisp-Entry "choose-hook" method (override) ("shortcut" "bindings") #f #f 84 20 84 31 ("get-host" "end-modal" "end-modal~" "begin" "null?" "if" "bindings" "shortcut")}}}})
"Shortcut-Viewer"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Shortcut-Viewer.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Shortcut-Viewer" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.dialog" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Shortcut-Viewer" class (undocumented) ((extends . "Layout-View")) #f #f 48 20 48 35 ("Layout-View")
        {Lisp-Entry "selected-shortcut" slot () ((initialize . "#f")) #f #f 51 8 51 25 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("on-cancel" "351" "cancel" "on-ok" ":host" "default?:" "90" "255" "ok" "on-choose" "action-handler:" "enabled?:" "120" "7" "choose" "Push-Button" "<Push-Button>" "south" "40" "buttons" "210" "on-context-menu" "context-menu-handler:" "on-double-click" "double-click-handler:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "bindings" "BindingsByActions-Tree" "<BindingsByActions-Tree>" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "vscroll?:" "hscroll?:" "document" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "124" "436" "24" "bindings-border" "Border-View" "<Border-View>" "6" "center" "bindings-view" "View" "<View>" "2" "448" "54" "0" "Horizontal-Line" "<Horizontal-Line>" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "Label-View" "<Label-View>" "north" "location:" "56" "100" "Dimension" "size:" "header" "name:" "Shortcut-Header" "<Shortcut-Header>" "border" "layout-type:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 75 20 75 26 ("setup-chooser" "setup-description" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method (override) () #f #f 81 20 81 33 ("get-tree" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 90 25 90 35 ()}
        {Lisp-Entry "host-size" method (meta override) () #f #f 94 25 94 34 ("249" "448" "Dimension")}
        {Lisp-Entry "dialog-class" method (meta override) () #f #f 98 25 98 37 ("Shortcut-Chooser-Dialog")}
        {Lisp-Entry "setup-description" method (virtual) () #f #f 107 19 107 36 ("description" "locate" "set-title" "set-title~")}
        {Lisp-Entry "setup-chooser" method () () #f #f 112 11 112 24 ("choose" "shortcut" "lambda" "get-application" "set-shortcut-hook" "set-shortcut-hook~")}
        {Lisp-Entry "get-tree" method () () #f #f 124 11 124 19 ("bindings" "locate")}
        {Lisp-Entry "guest-actions" method (override) () #f #f 133 20 133 33 ("nextmethod" "shortcut-viewer" "find-actions" "cons")}
        {Lisp-Entry "on-choose" method () ("evt") #f #f 143 11 143 20 ("setup-chooser" "ok" "choose" "locate" "set-enabled?" "set-enabled?~" "get-tree" "remove-every-row" "remove-every-row~" "selected-shortcut" "set!" "evt")}
        {Lisp-Entry "on-double-click" method () ("evt") #f #f 151 11 151 26 ("close-modal-dialog" "edit-action" "evt")}
        {Lisp-Entry "on-context-menu" method () ("evt") #f #f 156 11 156 26 ("track-popup-menu" "when" "new-menu" "menu" "let" "lambda" "with-context-click" "with-context-click~" "acquire" "acquired" "get-position" "get-position~" "pos" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "on-edit-action" method () ("evt") #f #f 167 11 167 25 ("close-modal-dialog" "edit-action" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 172 20 172 35 ("get-modal-result" "end-modal" "end-modal~" "get-host" "dialog" "let" "ok" "locate" "get-enabled?" "get-enabled?~" "when" "evt")}
        {Lisp-Entry "on-escape-press" method (override) ("evt") #f #f 178 20 178 35 ("cancel-modal" "cancel-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 183 20 183 36 ("selected-shortcut")}
        {Lisp-Entry "choose" method () ("shortcut") #f #f 192 11 192 17 ("ok" "choose" "locate" "set-enabled?" "set-enabled?~" "list" "view-bindings" "view-bindings~" "get-tree" "tree" "get-application" "get-bindings-designer" "get-bindings-designer~" "designer" "selected-shortcut" "set!" "choose-hook" "bindings" "get-output" "get-output~" "get-bindings" "get-children" "get-children~" "put" "put~" "shortcut=?" "and" "or" "when" "get-alternate-shortcut" "get-alternate-shortcut~" "action-alternate-shortcut" "get-shortcut" "get-shortcut~" "action-shortcut" "action" "actions" "lambda" "for-each" "List-Factory" "new" "fact" "let" "gather-bindings" "define" "shortcut")}
        {Lisp-Entry "choose-hook" method (protected virtual) ("shortcut" "bindings") #f #f 216 29 216 40 ("bindings" "shortcut")}
        {Lisp-Entry "edit-action" method () () #f #f 225 11 225 22 ("get-method-name" "get-method-name~" "get-application" "edit-definitions" "edit-definitions~" "bell" "not" "if" "get-action-handler" "get-action-handler~" "action-handler" "when" "get-tree" "get-single-selected-data" "get-single-selected-data~" "action" "let")}
        {Lisp-Entry "new-menu" method () () #f #f 239 11 239 19 ("self" "client:" "Action-Menu" "new" "when" "get-tree" "get-single-selected-data" "get-single-selected-data~" "action" "let")}}
      {Lisp-Entry "Shortcut-Chooser-Dialog" class () ((extends . "Dialog")) #f #f 250 7 250 30 ("Dialog")
        {Lisp-Entry "destroy" method (override) () #f #f 253 20 253 27 ("nextmethod" "get-application" "set-shortcut-hook" "set-shortcut-hook~")}}
      {Lisp-Entry "Shortcut-Header" class () ((extends . "View")) #f #f 263 7 263 22 ("View")
        {Lisp-Entry "Header-Color" definition () () #f #f 266 14 266 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 270 20 270 24 ("Header-Color" "1" "White" "Color" "0" "list" "get-bounds" "gradient-fill" "gradient-fill~" "context" "surface")}}
      {Lisp-Entry "Action-Menu" class () ((extends . "Context-Menu")) #f #f 279 7 279 18 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 282 3 282 7 ("shortcut-viewer" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "edit-action" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Shortcut-Viewer-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Shortcut-Viewer-Actions.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.preference.Shortcut-Viewer-Actions" module (protected) () #f #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Shortcut-Viewer-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 43 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("on-edit-action" "edit-action" ":shift" ":control" "Shortcut" "shortcut:" "on-choose" ":focus-guest" "Event-Handler" "action-handler:" "choose" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Skin"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Skin.jazz"} 231466338. jazz
    {Lisp-Entry "jazz.ui.skin.Skin" module (protected) () #f #f 37 18 37 35 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Skin" class () ((extends . "Component")) #f #f 45 7 45 11 ("Component")
        {Lisp-Entry "title" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 17 ()}
        {Lisp-Entry "get-title" accessor () () #f #f 48 42 48 50 ()}
        {Lisp-Entry "set-title" accessor () () #f #f 48 42 48 50 ()}
        {Lisp-Entry "form" form () () #f #f 51 3 51 7 ("tree" "Tree-Look" "<Tree-Look>" "text" "Text-Look" "<Text-Look>" "statusbar" "Statusbar-Look" "<Statusbar-Look>" "menubar" "Menubar-Look" "<Menubar-Look>" "toolbar" "Toolbar-Look" "<Toolbar-Look>" "stage" "Stage-Look" "<Stage-Look>" "docked" "Docked-Look" "<Docked-Look>" "splitter/document" "splitter" "Splitter-Look" "<Splitter-Look>" "tool" "Tool-Look" "<Tool-Look>" "menu" "Menu-Look" "<Menu-Look>" "scrollbar/document" "scrollbar/tool" "scrollbar" "Scrollbar-Look" "<Scrollbar-Look>" "header/document" "header/tool" "header" "Header-Look" "<Header-Look>" "group" "Group-Look" "<Group-Look>" "border/outline" "border/entry" "name:" "Border-Look" "<Border-Look>" "install" "<install>")}
        {Lisp-Entry "present" method (public virtual) () #f #f 80 26 80 33 ("title")}}}})
"Skins"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Skins.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.skin.Skins" module (protected) () #f #f 37 18 37 36 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Skins" class () ((extends . "Component")) #f #f 48 7 48 12 ("Component")
        {Lisp-Entry "active" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 18 ()}
        {Lisp-Entry "get-active" accessor () () #f #f 51 43 51 51 ()}
        {Lisp-Entry "set-active" accessor () () #f #f 51 43 51 51 ()}}}})
"Snap-Layout"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "layout" "Snap-Layout.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.ui.layout.Snap-Layout" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.geometry")}
      {Lisp-Entry "Snap-Layout" class () ((extends . "Layout")) #f #f 44 7 44 18 ("center" "0" "Rect" "Layout")
        {Lisp-Entry "insets" property () ((initialize . "{Rect 0 0 0 0}") (accessors . "generate")) #f "<Rect>" 47 12 47 18 ("Rect" "<Rect>")}
        {Lisp-Entry "get-insets" accessor () () #f #f 47 69 47 77 ()}
        {Lisp-Entry "set-insets" accessor () () #f #f 47 69 47 77 ()}
        {Lisp-Entry "justification" property () ((initialize . "'center") (accessors . "generate")) #f #f 48 12 48 25 ()}
        {Lisp-Entry "get-justification" accessor () () #f #f 48 69 48 77 ()}
        {Lisp-Entry "set-justification" accessor () () #f #f 48 69 48 77 ()}
        {Lisp-Entry "padding" property () ((initialize . "0") (accessors . "generate")) #f "<fx>" 49 12 49 19 ("fx" "<fx>")}
        {Lisp-Entry "get-padding" accessor () () #f #f 49 69 49 77 ()}
        {Lisp-Entry "set-padding" accessor () () #f #f 49 69 49 77 ()}
        {Lisp-Entry "layout" method (override) ("layout" "figures" "width" "height") #f #f 57 20 57 26 ("Dimension" "set-size" "set-size~" "move-figure" "move-figure~" "b" "r" "t" "insets" "l" "get-bottom" "get-bottom~" "get-right" "get-right~" "max" "get-top" "get-top~" "get-left" "get-left~" "min" "east" "west" "south" "padding" "north" "get-location" "get-location~" "case" "h" "w" "for-each" "Point" "new" "set-position" "set-position~" "+" "-" "hh" "2" "fxfloor/" "hw" "get-height" "get-height~" "get-width" "get-width~" "set!" "when" "bottom" "right" "top" "left" "second" "cv" "first" "ch" "find-located" "find-located~" "get-visible?" "get-visible?~" "Figure" "is?" "and" "figure" "lambda" "collect-if" "visibles" "0" "justify" "integer?" "if" "else" "center" "fit" "eq?" "pair?" "cond" "justification" "let" "part" "size" "justify-center" "define" "height" "width" "figures" "layout")}}}})
"Split-Layout"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "layout" "Split-Layout.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.layout.Split-Layout" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Split-Layout" class () ((extends . "Layout")) #f #f 43 7 43 19 ("Layout")
        {Lisp-Entry "layout" method (override) ("figures" "width" "height" "(separator: separator #f)" "(state: state #f)" "(target: target #f)" "(orientation: orientation #f)" "(mode: mode #f)" "(division: division #f)" "(insets: insets #f)") #f #f 46 20 46 26 ("split" "zoom" "Rect" "second-height" "second-width" "first-height" "first-width" "positive?" "fl" "<fl>" "cast" "abs" "percent" "fxround" "pct" "relative" "quotient" ">" "<" "or" "+" "set!" "negative?" "absolute" "1" "line" "2" "edge" "4" "resize" "splitter-size" "vert" "horz" "case" "size" "let" "error" "not" "unspecified" "bar" "second" "first" "eq?" "find-if" "location" "find" "let*" "when" "layout-split" "get-bottom" "get-bottom~" "get-right" "get-right~" "-" "Dimension" "set-size" "set-size~" "get-top" "get-top~" "get-left" "get-left~" "Point" "new" "set-position" "set-position~" "get-location" "get-location~" "neq?" "Figure" "is?" "if" "layout-zoom" "set-visible?" "set-visible?~" "figure" "lambda" "for-each" "layout-empty" "define" "insets" "insets:" "division" "division:" "mode" "mode:" "orientation" "orientation:" "target" "target:" "state" "state:" "separator" "separator:" "height" "width" "figures")}}}})
"Splitter"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Splitter.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Splitter" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Splitter" class () ((extends . "View")) #f #f 47 7 47 15 ("vert" "View")
        {Lisp-Entry "orientation" property () ((initialize . "'vert") (accessors . "generate")) #f #f 50 12 50 23 ()}
        {Lisp-Entry "get-orientation" accessor () () #f #f 50 52 50 60 ()}
        {Lisp-Entry "set-orientation" accessor () () #f #f 50 52 50 60 ()}
        {Lisp-Entry "move-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 24 ()}
        {Lisp-Entry "get-move-handler" accessor () () #f #f 51 52 51 60 ()}
        {Lisp-Entry "set-move-handler" accessor () () #f #f 51 52 51 60 ()}
        {Lisp-Entry "dragging?" slot () ((initialize . "#f")) #f #f 54 8 54 17 ()}
        {Lisp-Entry "base-position" slot () ((initialize . "#f")) #f #f 55 8 55 21 ()}
        {Lisp-Entry "displacement" slot () ((initialize . "#f")) #f #f 56 8 56 20 ()}
        {Lisp-Entry "cursor-update" method (override) ("pos") #f #f 64 20 64 33 (":horizontal-splitter" "horz" ":vertical-splitter" "vert" "orientation" "case" "set-cursor" "pos")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 76 20 76 30 ("acquire-capture" "0" "Point" "displacement" "base-position" "dragging?" "set!" "pos")}
        {Lisp-Entry "drag-move" method (override) ("pos") #f #f 83 20 83 29 ("get-v" "get-v~" "horz" "self" "process-move" "0" "get-h" "get-h~" "move-figure" "vert" "orientation" "case" "nu+" "displacement" "set!" "base-position" "nu-" "delta" "let" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 96 20 96 27 ("set!" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "process-move" method (public virtual) ("sender" "delta") #f #f 107 26 107 38 ("self" "invoke-handler" "delta:" ":move" "Event" "new" "evt" "let" "move-handler" "when" "delta" "sender")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 118 25 118 45 ("Splitter-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 127 11 127 17 ()
        {Lisp-Entry "import" import () () #f #f 130 1 130 7 ("jazz.designer")}
        {Lisp-Entry "Splitter-Descriptor" class () ((extends . "View-Descriptor")) #f #f 133 7 133 26 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 136 3 136 7 ("domain" "Handler-Domain" "<Handler-Domain>" "handler" "category:" "move-handler" "title:" "orientation" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Splitter-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Splitter-Look.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.skin.Splitter-Look" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Splitter-Look" class () ((extends . "Look")) #f #f 43 7 43 20 ("Look")
        {Lisp-Entry "background" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 22 ()}
        {Lisp-Entry "get-background" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "set-background" accessor () () #f #f 46 47 46 55 ()}}}})
"Splitter-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Splitter-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Splitter-Preferences" module (protected) () #f #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Splitter-Preferences" class (undocumented) ((extends . "Figure-Preferences")) #f #f 45 20 45 40 ("0" "Rect" "absolute" "horz" "split" "resize" "Figure-Preferences")
        {Lisp-Entry "separator" property () ((initialize . "'resize") (accessors . "generate")) #f #f 48 12 48 21 ()}
        {Lisp-Entry "get-separator" accessor () () #f #f 48 60 48 68 ()}
        {Lisp-Entry "set-separator" accessor () () #f #f 48 60 48 68 ()}
        {Lisp-Entry "state" property () ((initialize . "'split") (accessors . "generate")) #f #f 49 12 49 17 ()}
        {Lisp-Entry "get-state" accessor () () #f #f 49 60 49 68 ()}
        {Lisp-Entry "set-state" accessor () () #f #f 49 60 49 68 ()}
        {Lisp-Entry "target" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 18 ()}
        {Lisp-Entry "get-target" accessor () () #f #f 50 60 50 68 ()}
        {Lisp-Entry "set-target" accessor () () #f #f 50 60 50 68 ()}
        {Lisp-Entry "orientation" property () ((initialize . "'horz") (accessors . "generate")) #f #f 51 12 51 23 ()}
        {Lisp-Entry "get-orientation" accessor () () #f #f 51 60 51 68 ()}
        {Lisp-Entry "set-orientation" accessor () () #f #f 51 60 51 68 ()}
        {Lisp-Entry "mode" property () ((initialize . "'absolute") (accessors . "generate")) #f #f 52 12 52 16 ()}
        {Lisp-Entry "get-mode" accessor () () #f #f 52 60 52 68 ()}
        {Lisp-Entry "set-mode" accessor () () #f #f 52 60 52 68 ()}
        {Lisp-Entry "division" property () ((initialize . "#f") (accessors . "generate")) #f #f 53 12 53 20 ()}
        {Lisp-Entry "get-division" accessor () () #f #f 53 60 53 68 ()}
        {Lisp-Entry "set-division" accessor () () #f #f 53 60 53 68 ()}
        {Lisp-Entry "insets" property () ((initialize . "{Rect 0 0 0 0}") (accessors . "generate")) #f #f 54 12 54 18 ()}
        {Lisp-Entry "get-insets" accessor () () #f #f 54 60 54 68 ()}
        {Lisp-Entry "set-insets" accessor () () #f #f 54 60 54 68 ()}
        {Lisp-Entry "form" form () () #f #f 57 3 57 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "apply-root" method (override) ("player") #f #f 66 20 66 30 ("get-root" "get-root~" "apply-to" "self" "preferences:" "offscreen?:" "Splitter-View" "new" "set-root" "set-root~" "player")}
        {Lisp-Entry "apply-preferences" method (override) ("(parent #f)") #f #f 71 20 71 37 ("self" "preferences:" "parent:" "Splitter-View" "new" "apply-to" "assert" "parent")}
        {Lisp-Entry "apply-to" method () ("splitter") #f #f 76 11 76 19 ("layout-view" "layout-view~" "get-children" "get-children~" "get-guest" "get-guest~" "host-install" "host-install~" "Host-View" "is?" "when" "child" "children" "apply-preferences" "apply-preferences~" "pref" "lambda" "for-each" "apply-properties" "remove-children" "remove-children~" "splitter")}
        {Lisp-Entry "apply-properties" method (protected) ("splitter") #f #f 89 21 89 37 ("location" "set-location" "set-location~" "get-visible?" "set-visible?" "set-visible?~" "insets" "set-insets" "set-insets~" "division" "set-division" "set-division~" "mode" "set-mode" "set-mode~" "orientation" "set-orientation" "set-orientation~" "target" "set-target" "set-target~" "state" "set-state" "set-state~" "separator" "set-separator" "set-separator~" "splitter")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 106 25 106 45 ("Splitter-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 115 11 115 17 ()
        {Lisp-Entry "import" import () () #f #f 118 1 118 7 ("jazz.designer")}
        {Lisp-Entry "Splitter-Preferences-Descriptor" class () ((extends . "Figure-Preferences-Descriptor")) #f #f 121 7 121 38 ("Figure-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 124 3 124 7 ("separator" "name:" "Property-Descriptor" "<Property-Descriptor>" "insets" "division" "mode" "orientation" "target" "state" "location" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image:" "install" "<install>")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 136 20 136 61 ("Stage-Preferences" "Docked-Preferences" "Pad-Preferences" "Splitter-Preferences" "reference" "list" "component")}}}}})
"Splitter-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Splitter-View.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.ui.view.Splitter-View" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui.skin" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Splitter-View" class () ((extends . "View")) #f #f 51 7 51 20 ("Split-Layout" "new" "0" "Rect" "100" "absolute" "horz" "split" "resize" "View")
        {Lisp-Entry "separator" property () ((initialize . "'resize") (accessors . "generate")) #f #f 54 12 54 21 ()}
        {Lisp-Entry "get-separator" accessor () () #f #f 54 62 54 70 ()}
        {Lisp-Entry "set-separator" accessor () () #f #f 54 62 54 70 ()}
        {Lisp-Entry "state" property () ((initialize . "'split") (accessors . "generate")) #f #f 55 12 55 17 ()}
        {Lisp-Entry "get-state" accessor () () #f #f 55 62 55 70 ()}
        {Lisp-Entry "set-state" accessor () () #f #f 55 62 55 70 ()}
        {Lisp-Entry "target" property () ((initialize . "#f") (accessors . "generate")) #f #f 56 12 56 18 ()}
        {Lisp-Entry "get-target" accessor () () #f #f 56 62 56 70 ()}
        {Lisp-Entry "set-target" accessor () () #f #f 56 62 56 70 ()}
        {Lisp-Entry "orientation" property () ((initialize . "'horz") (accessors . "generate")) #f #f 57 12 57 23 ()}
        {Lisp-Entry "get-orientation" accessor () () #f #f 57 62 57 70 ()}
        {Lisp-Entry "set-orientation" accessor () () #f #f 57 62 57 70 ()}
        {Lisp-Entry "mode" property () ((initialize . "'absolute") (accessors . "generate")) #f #f 58 12 58 16 ()}
        {Lisp-Entry "get-mode" accessor () () #f #f 58 62 58 70 ()}
        {Lisp-Entry "set-mode" accessor () () #f #f 58 62 58 70 ()}
        {Lisp-Entry "division" property () ((initialize . "100") (accessors . "generate")) #f #f 59 12 59 20 ()}
        {Lisp-Entry "get-division" accessor () () #f #f 59 62 59 70 ()}
        {Lisp-Entry "set-division" accessor () () #f #f 59 62 59 70 ()}
        {Lisp-Entry "insets" property () ((initialize . "{Rect 0 0 0 0}") (accessors . "generate")) #f #f 60 12 60 18 ()}
        {Lisp-Entry "get-insets" accessor () () #f #f 60 62 60 70 ()}
        {Lisp-Entry "set-insets" accessor () () #f #f 60 62 60 70 ()}
        {Lisp-Entry "full?" property () ((initialize . "#f") (accessors . "generate")) #f #f 61 12 61 17 ()}
        {Lisp-Entry "get-full?" accessor () () #f #f 61 62 61 70 ()}
        {Lisp-Entry "set-full?" accessor () () #f #f 61 62 61 70 ()}
        {Lisp-Entry "after-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 62 12 62 25 ()}
        {Lisp-Entry "get-after-handler" accessor () () #f #f 62 62 62 70 ()}
        {Lisp-Entry "set-after-handler" accessor () () #f #f 62 62 62 70 ()}
        {Lisp-Entry "preferences" property () ((initialize . "#f") (accessors . "generate")) #f #f 63 12 63 23 ()}
        {Lisp-Entry "get-preferences" accessor () () #f #f 63 62 63 70 ()}
        {Lisp-Entry "set-preferences" accessor () () #f #f 63 62 63 70 ()}
        {Lisp-Entry "split-layout" slot () ((initialize . "(new Split-Layout)")) #f #f 66 8 66 20 ()}
        {Lisp-Entry "bar-bounds" slot () ((initialize . "#f")) #f #f 67 8 67 18 ()}
        {Lisp-Entry "dragging?" slot () ((initialize . "#f")) #f #f 68 8 68 17 ()}
        {Lisp-Entry "previous" slot () ((initialize . "#f")) #f #f 69 8 69 16 ()}
        {Lisp-Entry "preserved-insets" slot () ((initialize . "#f") (accessors . "generate")) #f #f 70 8 70 24 ()}
        {Lisp-Entry "get-preserved-insets" accessor () () #f #f 70 49 70 57 ()}
        {Lisp-Entry "set-preserved-insets" accessor () () #f #f 70 49 70 57 ()}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 78 20 78 31 ("layout-view" "nextmethod" "size")}
        {Lisp-Entry "layout" method (override) () #f #f 83 20 83 26 ("insets" "insets:" "division" "division:" "mode:" "orientation" "orientation:" "target" "target:" "state" "state:" "separator" "separator:" "get-height" "get-height~" "get-width" "get-width~" "split-layout" "layout" "layout~" "bar-bounds" "set!" "absolute" "dragging?" "if" "mode" "get-size" "size" "let" "children" "null?" "unless")}
        {Lisp-Entry "remove-children" method (public) () #f #f 95 18 95 33 ("children" "get-guest" "get-guest~" "host-uninstall" "host-uninstall~" "Host-View" "set-parent" "set-parent~" "set-visible?" "set-visible?~" "close" "close~" "if" "Pad-View" "remove-children" "remove-children~" "Splitter-View" "is?" "when" "child" "lambda" "for-each")}
        {Lisp-Entry "workspace-zoomable?" method (public) ("view") #f #f 115 18 115 37 ("workspace-minimisable?" "workspace-minimisable?~" "get-guest" "get-guest~" "guest" "Host-View" "is-not?" "or" "brother" "let" "children" "neq?" "child" "lambda" "find-if" "get-brother" "define" "view")}
        {Lisp-Entry "zoom" method (public) ("view") #f #f 132 18 132 22 ("layout-view" "target" "zoom" "state" "set!" "view")}
        {Lisp-Entry "rezoom" method (public) () #f #f 138 18 138 24 ("layout-view" "zoom" "state" "set!")}
        {Lisp-Entry "unzoom" method (public) () #f #f 143 18 143 24 ("layout-view" "split" "state" "set!")}
        {Lisp-Entry "get-effective-target" method (public) () #f #f 148 18 148 38 ("find-located" "Figure" "target" "is?" "if")}
        {Lisp-Entry "cursor-update" method (override) ("pos") #f #f 159 20 159 33 ("nextmethod" ":horizontal-splitter" "vert" ":vertical-splitter" "set-cursor" "horz" "orientation" "case" "in-rect?" "dragging?" "or" "bar-bounds" "resize" "separator" "eq?" "and" "if" "pos")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 172 20 172 24 ("or" "get-bounds" "fill-insets" "fill-insets~" "insets" "empty-rect?" "not" "line" "top" "vert" "left" "edges:" "sunken" "outer:" "raised" "inner:" "draw-edge" "draw-edge~" "horz" "orientation" "edge" "Medium" "Color" "resize" "separator" "case" "cycle-debug-color!" "debug-paint?" "fill-rect" "fill-rect~" "if" "bar-bounds" "split" "state" "eq?" "and" "when" "get-background" "get-background~" "background" "get-look" "look" "let" "context" "surface")}
        {Lisp-Entry "get-look" method (override) () #f #f 198 20 198 28 ("splitter" "else" "splitter/document" "find-look" "document" "style" "case")}
        {Lisp-Entry "absolute->relative" method () ("division") #f #f 209 11 209 29 ("percentage" "get-height" "vert" "get-width" "horz" "orientation" "case" "size" "let" "division")}
        {Lisp-Entry "relative->absolute" method () ("division") #f #f 216 11 216 29 ("-" "set!" "positive?" "if" "abs" "percent" "fxround" "pct" "get-height" "vert" "get-width" "horz" "orientation" "case" "size" "let*" "division")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 232 20 232 30 ("acquire-capture" "relative->absolute" "division" "relative" "mode" "get-v" "get-v~" "vert" "get-h" "get-h~" "horz" "orientation" "case" "previous" "dragging?" "set!" "in-rect?" "bar-bounds" "resize" "separator" "eq?" "and" "when" "pos")}
        {Lisp-Entry "drag-move" method (override) ("pos") #f #f 241 20 241 29 ("call-after-handler" "redraw-view" "layout-view" "inhibit-invalidates?" "inhibit-layouts?" "parameterize" "set!" "division" "increase!" "previous" "-" "delta" "get-v" "get-v~" "vert" "get-h" "get-h~" "horz" "orientation" "case" "n" "let*" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 254 20 254 27 ("absolute->relative" "set!" "relative" "mode" "eq?" "release-capture" "dragging?" "division" "set-property" "set-property~" "preferences" "and" "when" "get-application" "get-workspaces-designer" "get-workspaces-designer~" "designer" "let" "save-preferences" "define" "rest" "pos")}
        {Lisp-Entry "call-after-handler" method () () #f #f 273 11 273 29 ("after:" "Event" "new" "self" "invoke-handler" "after-handler" "when")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 283 25 283 45 ("Splitter-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 292 11 292 17 ()
        {Lisp-Entry "import" import () () #f #f 295 1 295 7 ("jazz.designer")}
        {Lisp-Entry "Splitter-View-Descriptor" class () ((extends . "View-Descriptor")) #f #f 298 7 298 31 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 301 3 301 7 ("preferences" "handler" "category:" "after-handler" "full?" "insets" "division" "mode" "orientation" "target" "state" "title:" "separator" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 316 20 316 31 ("Image-Resource" "class")}}}}})
"Stage"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Stage.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Stage" module (protected) () #f #f 37 18 37 36 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.workspace" "jazz.ui.view" "jazz.ui" "jazz.system" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Stage" class () ((extends . "View")) #f #f 48 7 48 12 ("View")
        {Lisp-Entry "maximized?" slot () ((initialize . "#f")) #f #f 51 8 51 18 ()}
        {Lisp-Entry "fullscreen?" slot () ((initialize . "#f")) #f #f 52 8 52 19 ()}
        {Lisp-Entry "figure-preferences" slot () ((initialize . "#f") (accessors . "generate")) #f #f 53 8 53 26 ()}
        {Lisp-Entry "get-figure-preferences" accessor () () #f #f 53 51 53 59 ()}
        {Lisp-Entry "set-figure-preferences" accessor () () #f #f 53 51 53 59 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("Dark" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 60 25 60 38 ("stage" "rest")}
        {Lisp-Entry "get-border" method (public) () #f #f 69 18 69 28 ("parent")}
        {Lisp-Entry "stage-activate" method (public virtual) () #f #f 78 26 78 40 ("maximized?" "get-toplevel" "set-caption?" "set-caption?~")}
        {Lisp-Entry "stage-empty-activate" method (public virtual) () #f #f 82 26 82 46 ("get-toplevel" "set-caption" "set-caption~" "client-deactivate" "client-deactivate~" "for-each-docked" "get-player" "assert")}
        {Lisp-Entry "focus-gained" method (override) () #f #f 89 20 89 32 ("self" "set-current-stage" "workspace-activation?" "unless")}
        {Lisp-Entry "get-maximized?" method (public) () #f #f 99 18 99 32 ("maximized?")}
        {Lisp-Entry "set-maximized?" method (public) ("value") #f #f 103 18 103 32 ("restore" "maximize" "if" "value")}
        {Lisp-Entry "toggle-maximized" method (public) () #f #f 109 18 109 34 ("maximized?" "not" "set-maximized?")}
        {Lisp-Entry "maximize" method (override) () #f #f 113 20 113 28 ("get-title" "get-title~" "set-caption" "set-caption~" "children" "get-guest" "get-guest~" "get-host" "get-host~" "maximize" "maximize~" "get-visible?" "get-visible?~" "when" "frame" "lambda" "for-each" "set-caption?" "set-caption?~" "maximized?" "set!" "first-view" "current" "find-menubar" "find-menubar~" "menubar" "get-application" "appl" "get-player" "player" "get-toplevel" "toplevel" "get-border" "border" "let*")}
        {Lisp-Entry "restore" method (override) () #f #f 134 20 134 27 ("children" "get-guest" "get-guest~" "get-host" "get-host~" "restore" "restore~" "get-visible?" "get-visible?~" "when" "frame" "lambda" "for-each" "set-caption?" "set-caption?~" "maximized?" "set!" "find-menubar" "find-menubar~" "menubar" "get-application" "appl" "get-toplevel" "toplevel" "get-border" "border" "let*")}
        {Lisp-Entry "get-fullscreen?" method (public) () #f #f 156 18 156 33 ("fullscreen?")}
        {Lisp-Entry "set-fullscreen?" method (public) ("value") #f #f 160 18 160 33 ("get-size" "get-size~" "layout-stage" "layout-stage~" "get-border" "border" "let" "set!" "fullscreen?" "neq?" "when" "value")}
        {Lisp-Entry "install-wallpaper" method (public virtual) () #f #f 172 26 172 43 ()}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 181 20 181 31 ("nextmethod" "children" "get-host" "get-host~" "maximize-bounds" "maximize-bounds~" "get-visible?" "get-visible?~" "frame" "lambda" "for-each" "maximized?" "when" "layout-frames" "define" "size")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 198 20 198 30 ("acquire-focus" "pos")}}}})
"Stage-Border"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Stage-Border.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.view.Stage-Border" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.skin" "jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Stage-Border" class () ((extends . "View")) #f #f 46 7 46 19 ("View")
        {Lisp-Entry "size-change" method (override) ("size") #f #f 49 20 49 31 ("layout-stage" "nextmethod" "size")}
        {Lisp-Entry "get-stage" method (public) () #f #f 59 18 59 27 ("stage" "child")}
        {Lisp-Entry "maximize" method (override) () #f #f 68 20 68 28 ("get-size" "layout-stage")}
        {Lisp-Entry "restore" method (override) () #f #f 72 20 72 27 ("get-size" "layout-stage")}
        {Lisp-Entry "layout-stage" method () ("size" "<Dimension>") #f #f 81 11 81 23 ("+" "-" "set-size" "set-size~" "Point" "new" "set-position" "set-position~" "2" "1" "0" "if" "width" "get-fullscreen?" "get-fullscreen?~" "fullscreen?" "get-maximized?" "get-maximized?~" "maximized?" "get-stage" "stage" "let*" "Dimension" "<Dimension>" "size")}
        {Lisp-Entry "Active-Color" definition () () #f #f 95 14 95 26 ("blue:" "0" "green:" "128" "red:" "Color")}
        {Lisp-Entry "Frame-Color" definition () () #f #f 98 14 98 25 ("blue:" "green:" "128" "red:" "Color")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 102 20 102 24 ("White" "Color" "get-look" "get-border" "get-border~" "-" "or" "unless" "get-fullscreen?" "get-fullscreen?~" "fullscreen?" "get-maximized?" "get-maximized?~" "maximized?" "stage" "let*" "get-bottom" "get-bottom~" "get-right" "get-right~" "0" "Rect" "new" "frame-rect" "frame-rect~" "Frame-Color" "Active-Color" "if" "color" "get-bounds" "bounds" "let" "1" "get-active-stages" "length" ">" "current-stage" "get-stage" "eq?" "and" "draw-active?" "define" "context" "surface")}
        {Lisp-Entry "get-look" method (override) () #f #f 122 20 122 28 ("stage" "find-look")}}}})
"Stage-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Stage-Look.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Stage-Look" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Stage-Look" class () ((extends . "Look")) #f #f 43 7 43 17 ("Look")
        {Lisp-Entry "background" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 22 ()}
        {Lisp-Entry "get-background" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "set-background" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "border" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 18 ()}
        {Lisp-Entry "get-border" accessor () () #f #f 47 47 47 55 ()}
        {Lisp-Entry "set-border" accessor () () #f #f 47 47 47 55 ()}}}})
"Stage-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Stage-Preferences.jazz"} 247283256. jazz
    {Lisp-Entry "jazz.ui.preference.Stage-Preferences" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Stage-Preferences" class (undocumented) ((extends . "Figure-Preferences")) #f #f 46 20 46 37 ("Figure-Preferences")
        {Lisp-Entry "maximized?" property () ((initialize . "#t") (accessors . "generate")) #f #f 49 12 49 22 ()}
        {Lisp-Entry "get-maximized?" accessor () () #f #f 49 48 49 56 ()}
        {Lisp-Entry "set-maximized?" accessor () () #f #f 49 48 49 56 ()}
        {Lisp-Entry "guest-model" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 23 ()}
        {Lisp-Entry "get-guest-model" accessor () () #f #f 50 48 50 56 ()}
        {Lisp-Entry "set-guest-model" accessor () () #f #f 50 48 50 56 ()}
        {Lisp-Entry "stage" slot () ((initialize . "#f")) #f #f 53 8 53 13 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "apply-root" method (override) ("player") #f #f 65 20 65 30 ("apply-to" "get-root" "get-root~" "set-offscreen?" "set-offscreen?~" "remember-stage" "get-parent" "get-parent~" "set-root" "set-root~" "player")}
        {Lisp-Entry "apply-preferences" method (override) ("(parent #f)") #f #f 71 20 71 37 ("apply-to" "set-parent" "set-parent~" "remember-stage" "get-parent" "get-parent~" "stage-border" "let" "assert" "parent")}
        {Lisp-Entry "apply-to" method () ("stage-border") #f #f 78 11 78 19 ("maximized?" "stage" "set-maximized?" "set-maximized?~" "get-visible?" "set-visible?" "set-visible?~" "location" "set-location" "set-location~" "stage-border")}
        {Lisp-Entry "remember-stage" method () () #f #f 84 11 84 25 ("set-current-stage" "current-stage" "self" "set-figure-preferences" "set-figure-preferences~" "create-stage" "set!" "stage" "unless")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 98 25 98 45 ("Stage-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 107 11 107 17 ()
        {Lisp-Entry "import" import () () #f #f 110 1 110 7 ("jazz.designer")}
        {Lisp-Entry "Stage-Preferences-Descriptor" class () ((extends . "Figure-Preferences-Descriptor")) #f #f 113 7 113 35 ("Figure-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 116 3 116 7 ("guest-model" "maximized?" "name:" "Property-Descriptor" "<Property-Descriptor>" "location" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image:" "install" "<install>")}}}}})
"Status-Label"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Status-Label.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Status-Label" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.skin" "jazz.ui" "jazz.system" "jazz.locale" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Status-Label" class () ((extends . "View")) #f #f 48 7 48 19 ("View")
        {Lisp-Entry "icon" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 16 ()}
        {Lisp-Entry "get-icon" accessor () () #f #f 51 41 51 49 ()}
        {Lisp-Entry "set-icon" accessor () () #f #f 51 41 51 49 ()}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 54 20 54 35 ()}
        {Lisp-Entry "set-title" method (override) ("title") #f #f 63 20 63 29 ("nextmethod" "self" "title~self" "empty-string?" "and" "unless" "title")}
        {Lisp-Entry "mouse-up" method (override) ("pos") #f #f 73 20 73 28 ("self" "process-action" "pos")}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 82 20 82 35 ("fill-rect" "fill-rect~" "-1" "inflate-rect" "rect" "get-bounds" "bounds" "let*" "background" "when" "context" "surface")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 89 20 89 24 ("draw-body" "draw-icon" "rectangle" "edges:" "sunken" "outer:" "get-bounds" "draw-edge" "draw-edge~" "context" "surface")}
        {Lisp-Entry "draw-icon" method () ("surface" "context") #f #f 95 11 95 20 ("get-images-portfolio" "get-images-portfolio~" "draw-image" "draw-image~" "top" "2" "left" "get-application" "appl" "let" "icon" "when" "context" "surface")}
        {Lisp-Entry "draw-body" method () ("surface") #f #f 103 11 103 20 ("draw-text" "draw-text~" "Black" "Color" "get-look" "get-text-color" "get-text-color~" "or" "set-text-color" "set-text-color~" "Caption" "Font" "set-font" "set-font~" "4" "top" "3" "20" "icon" "if" "left" "localize" "let" "title" "when" "surface")}
        {Lisp-Entry "get-look" method (override) () #f #f 118 20 118 28 ("statusbar" "find-look")}}}})
"Status-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Status-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Status-Preferences" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Status-Preferences" class () ((extends . "Splitter-Preferences")) #f #f 44 7 44 25 ("Splitter-Preferences")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 (":status" "model:" "second" "location:" "Toolbar-Preferences" "<Toolbar-Preferences>" "vert" "orientation:" "-23" "division:" "line" "separator:" "install" "<install>")}}}})
"Status-Toolbar"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Status-Toolbar.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Status-Toolbar" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.workspace" "jazz.ui.skin" "jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Status-Toolbar" class () ((extends . "Toolbar")) #f #f 47 7 47 21 ("Toolbar")
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("Medium" "Color" "background:" "layout-padding:" "2" "0" "Rect" "layout-insets:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 54 20 54 26 ("update-status" "update-status~" "when" "selected-workspace" "workspace" "let" "nextmethod" "rest")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 61 25 61 35 ()}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 70 20 70 35 ("fill-background" "fill-background~" "get-bounds" "bounds" "nextmethod" "not" "if" "get-background" "get-background~" "background" "get-look" "look" "let" "context" "surface")}
        {Lisp-Entry "get-look" method (override) () #f #f 84 20 84 28 ("statusbar" "find-look")}}}})
"Statusbar-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Statusbar-Look.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Statusbar-Look" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Statusbar-Look" class () ((extends . "Toolbar-Look")) #f #f 43 7 43 21 ("Toolbar-Look")}}})
"String-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "String-Request.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.String-Request" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "String-Request" class (undocumented) ((extends . "View")) #f #f 47 20 47 34 ("explicit" "View")
        {Lisp-Entry "accepts-empty?" property () ((initialize . "#t") (accessors . "explicit")) #f #f 50 12 50 26 ()}
        {Lisp-Entry "unicity-domain" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 26 ()}
        {Lisp-Entry "validator" property () ((initialize . "#f") (accessors . "explicit")) #f #f 52 12 52 21 ()}
        {Lisp-Entry "form" form () () #f #f 55 3 55 7 ("167" "cancel" "default?:" "on-ok" "action-handler:" "24" "80" "ok" "Push-Button" "<Push-Button>" "Entry-Border" "Color" "color:" "south" "16" "100" "message" "on-cancel" ":host" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-content-change" ":form" "Event-Handler" "content-change-handler:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "text" "Text-View" "<Text-View>" "fill" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "Border-View" "<Border-View>" "center" "width" "auto-size?:" "-20" "head" "justification:" "Label" "Font" "font:" "west" "location:" "title:" "prefix" "Label-View" "<Label-View>" "layout-padding:" "border" "layout-type:" "37" "294" "30" "10" "Point" "position:" "layout" "name:" "Layout-View" "<Layout-View>" "120" "322" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "get-accepts-empty?" method (public) () #f #f 74 18 74 36 ("accepts-empty?")}
        {Lisp-Entry "set-accepts-empty?" method (public) ("value") #f #f 78 18 78 36 ("name-change" "accepts-empty?" "set!" "value")}
        {Lisp-Entry "get-unicity-domain" method (public) () #f #f 83 18 83 36 ("unicity-domain")}
        {Lisp-Entry "set-unicity-domain" method (public) ("value") #f #f 87 18 87 36 ("name-change" "unicity-domain" "set!" "value")}
        {Lisp-Entry "get-validator" method (public) () #f #f 92 18 92 31 ("validator")}
        {Lisp-Entry "set-validator" method (public) ("value") #f #f 96 18 96 31 ("name-change" "validator" "set!" "value")}
        {Lisp-Entry "get-prefix" method (public) () #f #f 101 18 101 28 ("prefix" "locate" "get-title" "get-title~")}
        {Lisp-Entry "set-prefix" method (public) ("value") #f #f 105 18 105 28 ("layout" "layout-view" "layout-view~" "prefix" "locate" "set-title" "set-title~" "value")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 115 25 115 35 ()}
        {Lisp-Entry "on-content-change" method () ("evt") #f #f 124 11 124 28 ("name-change" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 128 20 128 35 ("get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-host" "dialog" "let" "ok" "locate" "get-enabled?" "get-enabled?~" "when" "evt")}
        {Lisp-Entry "name-change" method () () #f #f 134 11 134 22 ("null?" "let" "equal" "sort-predicate" "test:" "member?" "empty-string?" "continuation-return" "if" "set-title" "set-title~" "ok" "set-enabled?" "set-enabled?~" "message" "enabled?" "proc" "get-string-content" "get-string-content~" "name" "locate" "text" "let*" "return" "lambda" "continuation-capture" "when" "validator" "unicity-domain" "accepts-empty?" "not" "or" "name-validated?" "define")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 163 20 163 36 ("text" "locate" "get-string-content" "get-string-content~")}}}})
"Style"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Style.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Style" module (protected) () #f #f 37 18 37 36 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.graphic")}
      {Lisp-Entry "Style" class () ((extends . "Exemplar")) #f #f 45 7 45 12 ("bottom" "attributes" "Exemplar")
        {Lisp-Entry "alignment" definition () ((initialize . "'bottom")) #f #f 49 5 49 14 ()}
        {Lisp-Entry "get-alignment" accessor () () #f #f 49 5 49 14 ()}
        {Lisp-Entry "set-alignment" accessor () () #f #f 49 5 49 14 ()}
        {Lisp-Entry "default-domain" method (override) () #f #f 52 20 52 34 ("styles-domain")}
        {Lisp-Entry "get-width" method (public virtual) () #f "<fx>" 61 26 61 35 ("fx" "<fx>")}
        {Lisp-Entry "get-height" method (public virtual) () #f "<fx>" 65 26 65 36 ("fx" "<fx>")}
        {Lisp-Entry "run-width" method (public virtual) ("run") #f "<fx>" 69 26 69 35 ("fx" "<fx>" "run")}
        {Lisp-Entry "justify-element" method (protected) ("element-height" "height") #f #f 78 21 78 36 ("2" "fxceiling/" "center" "-" "0" "top" "bottom" "get-alignment" "or" "case" "height" "element-height")}
        {Lisp-Entry "propagate?" method (public virtual) () #f #f 90 26 90 36 ()}
        {Lisp-Entry "scan" method (protected virtual) ("h" "start" "end" "tabs" "run" "proc") #f #f 99 29 99 33 ("default-scan" "proc" "run" "tabs" "end" "start" "h")}
        {Lisp-Entry "default-scan" method () ("h" "start" "end" "tabs" "run" "proc") #f #f 103 11 103 23 ("2" "fxround/" "0" "+" "right" "get-width" "width" "let*" "proc" "run" "tabs" "end" "start" "h")}
        {Lisp-Entry "wrap" method (protected virtual) ("context" "margin" "h" "v" "width" "tabs" "place" "break" "run") #f #f 114 29 114 33 ("else" "place-update" "<=" "cond" "get-width" "+" "right" "let" "run" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "place-update" method (protected virtual) ("h" "v") #f #f 127 29 127 41 ("v" "h")}
        {Lisp-Entry "height-update" method (protected virtual) ("height") #f #f 131 29 131 42 ("height")}
        {Lisp-Entry "draw-style" method (protected virtual) ("surface" "<Surface>" "context" "string" "<Sequence>" "h" "<fx>" "v" "<fx>" "line-height" "<fx>" "tabs" "left" "enabled?") #f #f 140 29 140 39 ("get-width" "enabled?" "left" "tabs" "line-height" "v" "fx" "<fx>" "h" "Sequence" "<Sequence>" "string" "context" "Surface" "<Surface>" "surface")}}}})
"Style-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Style-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.preference.Style-Preferences" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Style-Preferences" class (undocumented) ((extends . "Exemplar-Preferences")) #f #f 46 20 46 37 ("Exemplar-Preferences")
        {Lisp-Entry "alignment" property () ((accessors . "generate")) #f #f 49 12 49 21 ()}
        {Lisp-Entry "get-alignment" accessor () () #f #f 49 32 49 40 ()}
        {Lisp-Entry "set-alignment" accessor () () #f #f 49 32 49 40 ()}
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "->exemplar" method (override) () #f #f 61 20 61 30 ("Style" "new" "apply" "alignment:" "alignment" "base:" "list" "base" "specified?" "if" "arguments" "let")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 73 25 73 45 ("Style-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 82 11 82 17 ()
        {Lisp-Entry "import" import () () #f #f 85 1 85 7 ("jazz.designer")}
        {Lisp-Entry "Style-Preferences-Descriptor" class () ((extends . "Exemplar-Preferences-Descriptor")) #f #f 88 7 88 35 ("Exemplar-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 91 3 91 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "alignment" "base" "categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Styles-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Styles-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Styles-Preferences" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Styles-Preferences" class (undocumented) ((extends . "Exemplars-Preferences")) #f #f 45 20 45 38 ("Exemplars-Preferences")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 57 25 57 45 ("Styles-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 66 11 66 17 ()
        {Lisp-Entry "import" import () () #f #f 69 1 69 7 ("jazz.designer")}
        {Lisp-Entry "Styles-Preferences-Descriptor" class () ((extends . "Exemplars-Preferences-Descriptor")) #f #f 72 7 72 36 ("Exemplars-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 75 3 75 7 ("categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Symbol-Completer"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Symbol-Completer.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Symbol-Completer" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Symbol-Completer" class (undocumented) ((extends . "Object")) #f #f 40 20 40 36 ("Object")
        {Lisp-Entry "domain" slot () () #f #f 43 8 43 14 ()}
        {Lisp-Entry "initialize" method (override) ("domain") #f #f 46 20 46 30 ("self" "domain~self" "set!" "nextmethod" "domain")}
        {Lisp-Entry "complete" method (public virtual) ("string" "(test: test eqv?)") #f #f 56 26 56 34 ("get-output" "get-output~" "domain" "put" "put~" "compare-n" "when" "target" "lambda" "for-each" "List-Factory" "new" "result" "cardinality" "length" "let" "eqv?" "test" "test:" "string")}}}})
"Symbol-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "Symbol-Request.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.Symbol-Request" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.ide")}
      {Lisp-Entry "Symbol-Request" class (undocumented) ((extends . "String-Request")) #f #f 44 20 44 34 ("String-Request")
        {Lisp-Entry "form-model" method (override) ("form") #f #f 47 20 47 30 ("nextmethod" "else" "IDE-Text-View" "text" "get-name" "get-name~" "case" "form")}}}})
"Tab-Sheet"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Tab-Sheet.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.ui.view.Tab-Sheet" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Tab-Sheet" class () ((extends . "Focus-Container") (implements . "Container")) #f #f 47 7 47 16 ("explicit" "Container" "Focus-Container")
        {Lisp-Entry "title-color" property () ((initialize . "#f") (accessors . "explicit")) #f #f 50 12 50 23 ()}
        {Lisp-Entry "header-color" property () ((initialize . "#f") (getter . "generate") (setter . "explicit")) #f #f 51 12 51 24 ()}
        {Lisp-Entry "get-header-color" accessor () () #f #f 51 53 51 61 ()}
        {Lisp-Entry "header-end-color" property () ((initialize . "#f") (accessors . "explicit")) #f #f 52 12 52 28 ()}
        {Lisp-Entry "border-color" property () ((initialize . "#f") (getter . "generate") (setter . "explicit")) #f #f 53 12 53 24 ()}
        {Lisp-Entry "get-border-color" accessor () () #f #f 53 53 53 61 ()}
        {Lisp-Entry "closable?" property () ((initialize . "#f") (accessors . "generate")) #f #f 54 12 54 21 ()}
        {Lisp-Entry "get-closable?" accessor () () #f #f 54 53 54 61 ()}
        {Lisp-Entry "set-closable?" accessor () () #f #f 54 53 54 61 ()}
        {Lisp-Entry "borders" slot (protected) ((accessors . "generate")) #f #f 57 18 57 25 ()}
        {Lisp-Entry "get-borders" accessor () () #f #f 57 62 57 70 ()}
        {Lisp-Entry "set-borders" accessor () () #f #f 57 62 57 70 ()}
        {Lisp-Entry "close-button-enter?" slot (protected) ((initialize . "#f") (accessors . "generate")) #f #f 58 18 58 37 ()}
        {Lisp-Entry "get-close-button-enter?" accessor () () #f #f 58 62 58 70 ()}
        {Lisp-Entry "set-close-button-enter?" accessor () () #f #f 58 62 58 70 ()}
        {Lisp-Entry "close-button-down?" slot (protected) ((initialize . "#f") (accessors . "generate")) #f #f 59 18 59 36 ()}
        {Lisp-Entry "get-close-button-down?" accessor () () #f #f 59 62 59 70 ()}
        {Lisp-Entry "set-close-button-down?" accessor () () #f #f 59 62 59 70 ()}
        {Lisp-Entry "form" form () () #f #f 62 3 62 7 ("content" "name:" "Content-View" "<Content-View>" "install" "<install>")}
        {Lisp-Entry "get-content" method (override) () #f #f 72 20 72 31 ("content" "child")}
        {Lisp-Entry "get-title-color" method (public) () #f #f 76 18 76 33 ("Dark" "Color" "title-color" "is-enabled?" "if")}
        {Lisp-Entry "set-title-color" method (public) ("value") #f #f 82 18 82 33 ("invalidate-header" "title-color" "set!" "value")}
        {Lisp-Entry "set-header-color" method (public) ("value") #f #f 87 18 87 34 ("invalidate-header" "header-color" "set!" "value")}
        {Lisp-Entry "get-header-end-color" method (public) () #f #f 92 18 92 38 ("Medium" "Color" "background" "get-background" "backgound" "let" "header-end-color" "if")}
        {Lisp-Entry "set-header-end-color" method (public) ("value") #f #f 101 18 101 38 ("invalidate-header" "header-end-color" "set!" "value")}
        {Lisp-Entry "set-border-color" method (public) ("value") #f #f 106 18 106 34 ("invalidate-header" "border-color" "set!" "value")}
        {Lisp-Entry "adjust-title" method (override) () #f #f 116 20 116 32 ("invalidate-header" "parent" "update-borders" "update-borders~")}
        {Lisp-Entry "is-enabled?" method (public) () #f #f 126 18 126 29 ("parent" "view-enabled?" "view-enabled?~" "enabled?" "and")}
        {Lisp-Entry "set-enabled?" method (override) ("flag") #f #f 130 20 130 32 ("invalidate-header" "enabled?" "set!" "flag")}
        {Lisp-Entry "invalidate-header" method () () #f #f 140 11 140 28 ("invalidate-header" "invalidate-header~" "when" "self" "parent" "sheet->rank" "sheet->rank~" "rank" "let")}
        {Lisp-Entry "get-transparent?" method (override) () #f #f 151 20 151 36 ()}
        {Lisp-Entry "layout" method (override) () #f #f 160 20 160 26 ("21" "get-height" "get-height~" "2" "get-width" "get-width~" "-" "Dimension" "new" "set-size" "set-size~" "20" "1" "Point" "set-position" "set-position~" "get-size" "size" "when" "find-child" "content" "let")}
        {Lisp-Entry "container-focusable?" method (override) () #f #f 173 20 173 40 ("self" "parent" "selected-sheet" "selected-sheet~" "eq?")}
        {Lisp-Entry "ensure-container-focusable" method (override) () #f #f 177 20 177 46 ("focus?:" "self" "child-rank" "child-rank~" "parent" "set-selection" "set-selection~")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 186 25 186 45 ("Tab-Sheet-Descriptor" "new")}
        {Lisp-Entry "in-close-button?" method () ("pt") #f #f 195 11 195 27 ("self" "parent" "get-close-button-borders" "get-close-button-borders~" "in-rect?" "closable?" "and" "pt")}
        {Lisp-Entry "invalidate-close-button" method () () #f #f 199 11 199 34 ("self" "get-close-button-borders" "get-close-button-borders~" "parent" "invalidate-rect" "invalidate-rect~" "closable?" "when")}
        {Lisp-Entry "close-button-enter" method (public) () #f #f 204 18 204 36 ("invalidate-close-button" "self" "parent" "set-close-button-enter" "set-close-button-enter~" "set-close-button-enter?")}
        {Lisp-Entry "close-button-leave" method (public) () #f #f 210 18 210 36 ("invalidate-close-button" "parent" "set-close-button-enter" "set-close-button-enter~" "set-close-button-down?" "set-close-button-enter?")}
        {Lisp-Entry "close-button-down" method (public) () #f #f 217 18 217 35 ("invalidate-close-button" "set-close-button-down?")}
        {Lisp-Entry "close-button-up" method (public) () #f #f 222 18 222 33 ("invalidate-close-button" "set-close-button-down?")}
        {Lisp-Entry "content-inner?" method (override) ("view") #f #f 232 20 232 34 ("view")}}
      {Lisp-Entry "design" submodule () () #f #f 241 11 241 17 ()
        {Lisp-Entry "import" import () () #f #f 244 1 244 7 ("jazz.designer")}
        {Lisp-Entry "Tab-Sheet-Descriptor" class () ((extends . "Layout-View-Descriptor")) #f #f 247 7 247 27 ("Layout-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 250 3 250 7 ("closable?" "border-color" "header-end-color" "header-color" "title:" "title-color" "name:" "Property-Descriptor" "<Property-Descriptor>" "title" "default:" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 260 20 260 31 ("Image-Resource" "class")}}}}})
"Tab-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Tab-View.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.ui.view.Tab-View" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.locale" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Tab-View" class () ((extends . "View")) #f #f 48 7 48 15 ("0" "20" "10" "explicit" "top" "View")
        {Lisp-Entry "close-border-left" definition () () #f #f 51 14 51 31 ("-20")}
        {Lisp-Entry "close-border-top" definition () () #f #f 52 14 52 30 ("3")}
        {Lisp-Entry "close-border-right" definition () () #f #f 53 14 53 32 ("-4")}
        {Lisp-Entry "close-border-bottom" definition () () #f #f 54 14 54 33 ("17")}
        {Lisp-Entry "orientation" property () ((initialize . "'top") (accessors . "explicit")) #f #f 57 12 57 23 ()}
        {Lisp-Entry "keep-one-sheet?" property () ((initialize . "#t") (accessors . "generate")) #f #f 58 12 58 27 ()}
        {Lisp-Entry "get-keep-one-sheet?" accessor () () #f #f 58 54 58 62 ()}
        {Lisp-Entry "set-keep-one-sheet?" accessor () () #f #f 58 54 58 62 ()}
        {Lisp-Entry "padding" slot () ((initialize . "10")) #f #f 61 8 61 15 ()}
        {Lisp-Entry "headers-height" slot () ((initialize . "20")) #f #f 62 8 62 22 ()}
        {Lisp-Entry "selection" slot () ((initialize . "0")) #f #f 63 8 63 17 ()}
        {Lisp-Entry "close-button-enter" slot () ((initialize . "#f") (accessors . "generate")) #f #f 64 8 64 26 ()}
        {Lisp-Entry "get-close-button-enter" accessor () () #f #f 64 54 64 62 ()}
        {Lisp-Entry "set-close-button-enter" accessor () () #f #f 64 54 64 62 ()}
        {Lisp-Entry "default-size" method (override) () #f #f 67 20 67 32 ("200" "400" "Dimension")}
        {Lisp-Entry "get-orientation" method (public) () #f #f 76 18 76 33 ("orientation")}
        {Lisp-Entry "set-orientation" method (public) ("o") #f #f 80 18 80 33 ("invalidate-view" "orientation" "set!" "o")}
        {Lisp-Entry "get-content" method (public) () #f #f 85 18 85 29 ("content" "locate")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 94 20 94 30 ("user-origin:" "find-header" "set-selection" "close-button-down" "close-button-down~" "in-close-button?" "in-close-button?~" "selected-sheet?" "and" "if" "when" "find-tab-sheet" "header" "let" "pos")}
        {Lisp-Entry "mouse-up" method (override) ("pos") #f #f 102 20 102 28 ("remove-child" "close-button-up" "close-button-up~" "1" "children" "length" ">" "keep-one-sheet?" "not" "or" "get-close-button-down?" "get-close-button-down?~" "in-close-button?" "in-close-button?~" "selected-sheet?" "and" "when" "find-tab-sheet" "header" "let" "pos")}
        {Lisp-Entry "mouse-move" method (override) ("pos") #f #f 115 20 115 30 ("close-button-enter~" "close-button-leave" "close-button-leave~" "when" "eq?" "close-button-enter" "unless" "in-close-button?" "in-close-button?~" "selected-sheet?" "and" "if" "find-tab-sheet" "header" "let" "pos")}
        {Lisp-Entry "drag-move" method (override) ("pos") #f #f 130 20 130 29 ("mouse-move" "pos")}
        {Lisp-Entry "mouse-leave" method (override) () #f #f 134 20 134 31 ("close-button-leave" "close-button-leave~" "close-button-enter" "when")}
        {Lisp-Entry "update-borders" method (package) () #f #f 144 19 144 33 ("set!" "increase!" "cons" "set-borders" "set-borders~" "10" "8" "effective-font" "text-extent" "text-extent~" "get-width" "get-width~" "if" "padding" "+" "next" "1" "children" "length" ">" "keep-one-sheet?" "not" "or" "get-closable?" "get-closable?~" "and" "closable?" "get-title" "get-title~" "localize" "title" "let*" "header" "lambda" "for-each" "2" "h" "0" "n" "let")}
        {Lisp-Entry "find-header" method () ("pt") #f #f 160 11 160 22 ("length" "0" "naturals" "children" "continuation-return" ">=" "and" "get-borders" "get-borders~" "right" "left" "bind" "is-enabled?" "is-enabled?~" "n" "header" "for-each" "return" "lambda" "continuation-capture" "headers-height" "<" "when" "get-v" "get-v~" "v" "get-h" "get-h~" "h" "let" "pt")}
        {Lisp-Entry "find-tab-sheet" method () ("pt") #f #f 176 11 176 25 ("children" "list-ref" "if" "find-header" "rank" "let" "pt")}
        {Lisp-Entry "get-close-button-borders" method () ("header") #f #f 183 11 183 35 ("close-border-bottom" "close-border-right" "close-border-top" "close-border-left" "+" "Rect" "new" "offset-rect" "0" "top" "2" "4" "if" "left" "selected-sheet" "eq?" "selected?" "let" "get-borders" "get-borders~" "rg" "lf" "bind" "header")}
        {Lisp-Entry "add-child" method (override) ("child") #f #f 198 20 198 29 ("0" "set-selection" "layout-view" "update-borders" "set-visible?" "set-visible?~" "not" "when" "nextmethod" "children" "null?" "empty?" "let" "child")}
        {Lisp-Entry "remove-child" method (override) ("child") #f #f 209 20 209 32 ("force?:" "set-selection" "invalidate-view" "layout-view" "update-borders" "sheet-ranked" "set-visible?" "set-visible?~" "invalidate-header" "children" "length" "=" "1" "-" "set!" "child-rank" ">=" "0" "selection" ">" "and" "when" "nextmethod" "destroying?" "if" "child")}
        {Lisp-Entry "get-selection" method (public) () #f #f 231 18 231 31 ("selection")}
        {Lisp-Entry "set-selection" method (public virtual) ("sel" "(focus?: focus? #t)" "(force?: force? #f)" "(user-origin: user-origin #f)") #f #f 235 26 235 39 ("simulate-mouse-move" "simulate-mouse-move~" "player" "call-selection-handler" "invalidate-header" "focus-host" "focus-host~" "set!" "set-visible?" "set-visible?~" "sheet-ranked" "sheet" "eqv?" "not" "or" "when" "selection" "old" "let" "user-origin" "user-origin:" "force?" "force?:" "focus?" "focus?:" "sel")}
        {Lisp-Entry "invalidate-header" method (public) ("n") #f #f 256 18 256 35 ("headers-height" "+" "0" "2" "-" "Rect" "new" "invalidate-rect" "sheet-ranked" "get-borders" "get-borders~" "rg" "lf" "bind" "n")}
        {Lisp-Entry "get-selection-name" method (public) () #f #f 261 18 261 36 ("selected-sheet" "get-name" "get-name~")}
        {Lisp-Entry "set-selection-name" method (public) ("name" "(focus?: focus? #t)") #f #f 265 18 265 36 ("set-selection" "child-rank" "rank" "child" "sheet" "let*" "focus?" "focus?:" "name")}
        {Lisp-Entry "selected-sheet?" method (public) ("sheet") #f #f 271 18 271 33 ("selected-sheet" "eq?" "sheet")}
        {Lisp-Entry "selected-sheet" method (public) () #f #f 275 18 275 32 ("sheet-ranked" "selection" "and")}
        {Lisp-Entry "sheet->rank" method (public) ("sheet") #f #f 279 18 279 29 ("children" "find" "sheet")}
        {Lisp-Entry "sheet-ranked" method () ("n") #f #f 283 11 283 23 ("child-ranked" "n")}
        {Lisp-Entry "all-sheets" method (public) () #f #f 292 18 292 28 ("get-children")}
        {Lisp-Entry "remove-every-sheet" method (public) () #f #f 296 18 296 36 ("close-children")}
        {Lisp-Entry "layout" method (override) () #f #f 305 20 305 26 ("children" "set-size" "set-size~" "0" "Point" "set-position" "set-position~" "Tab-Sheet" "is?" "when" "child" "lambda" "for-each" "get-size" "size" "let")}
        {Lisp-Entry "draw-children" method (override) ("surface" "nodes" "context") #f #f 319 20 319 33 ("orientation" "case" "get-size" "get-clipper" "get-clipper~" "nextmethod" "draw-bottom" "get-close-button-enter?" "get-close-button-enter?~" "get-close-button-down?" "get-close-button-down?~" "close" "draw-caption" "draw-caption~" "get-close-button-borders" "length" "keep-one-sheet?" "get-closable?" "get-closable?~" "and" "5" "draw-text" "draw-text~" "Black" "or" "set-text-color" "set-text-color~" "241" "243" "4" "line-to-preserve" "line-to-preserve~" "not" "vertical" "direction:" "list" "gradient-fill" "gradient-fill~" "3" "cycle-debug-color!" "fill-rect" "fill-rect~" "rect" "debug-paint?" "cond" "187" "blue:" "198" "green:" "200" "red:" "background" "next?" "previous?" "get-header-end-color" "get-header-end-color~" "header-end-color" "get-header-color" "get-header-color~" "header-color" "get-border-color" "get-border-color~" "border-color" "get-title-color" "get-title-color~" "title-color" "get-title" "get-title~" "localize" "title" "let*" ">" "increase!" "decrease!" "rg" "lf" "bind" "selection" "=" "selected?" "car" "header" "not-null?" "n" "headers" "iter" "get-right" "get-right~" "right-clip" "get-left" "get-left~" "left-clip" "get-top" "get-top~" "<" "when" "-" "last" "get-borders" "get-borders~" "cdr" "h" "line" "line~" "line-to" "line-to~" "move-to" "move-to~" "edges:" "outer:" "raised" "inner:" "draw-edge" "draw-edge~" "set-line-width" "set-line-width~" "Light" "Color" "set-color" "set-color~" "Label" "Font" "set-font" "set-font~" "2" "1" "rect-inside-border?" "unless" "Rect" "new" "content-rect" "-1" "headers-height" "+" "children" "null?" "if" "content" "get-height" "get-height~" "bottom" "get-width" "get-width~" "right" "top" "0" "left" "let" "size" "clipper" "draw-top" "define" "context" "nodes" "surface")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 430 25 430 45 ("Tab-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 439 11 439 17 ()
        {Lisp-Entry "import" import () () #f #f 442 1 442 7 ("jazz.designer")}
        {Lisp-Entry "Tab-View-Descriptor" class () ((extends . "View-Descriptor")) #f #f 445 7 445 26 ("View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 448 3 448 7 ("keep-one-sheet?" "title:" "orientation" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "component-surrogate-class" method (override) ("component") #f #f 455 20 455 45 ("Tab-View-Surrogate" "component")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 459 20 459 61 ("Tab-Sheet" "reference" "list" "component")}}}}})
"Table"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Table.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.tree.Table" module (protected) () #f #f 37 18 37 36 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}
      {Lisp-Entry "Table" class () ((extends . "Object")) #f #f 45 7 45 12 ("Object")
        {Lisp-Entry "rows" slot (protected) () #f #f 48 18 48 22 ()}
        {Lisp-Entry "construct-literal" method (meta) ("context" "." "rest") #f #f 52 16 52 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "initialize" method () ("(rows: rows '())") #f #f 56 11 56 21 ("self" "rows~self" "set!" "nextmethod" "rows" "rows:")}
        {Lisp-Entry "print" method () ("output" "readably") #f #f 61 11 61 16 ("rows" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "get-rows" method (public) () #f #f 72 18 72 26 ("rows")}}}})
"Table-Border"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Table-Border.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Table-Border" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Table-Border" class (undocumented) ((extends . "Border-View")) #f #f 45 20 45 32 ("Border-View")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Label" "Font" "font:" ":images" "portfolio:" "row-spacing:" "1" "column-spacing:" "filled-column:" "Entry-Border" "Color" "background:" "tree" "Table-Tree-View" "<Table-Tree-View>" "header" "Tree-Header" "<Tree-Header>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "document" "scroller" "name:" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "install" "<install>")}}}})
"Table-Cell"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Table-Cell.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Table-Cell" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Table-Cell" class (undocumented) ((extends . "Border-View")) #f #f 45 20 45 30 ("Border-View")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Label" "Font" "font:" "text" "Table-Text-View" "<Table-Text-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "document" "scroller" "name:" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "install" "<install>")}}}})
"Table-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Table-Row.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.tree.Table-Row" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Table-Row" class (undocumented) ((extends . "Object")) #f #f 40 20 40 29 ("Object")
        {Lisp-Entry "children" slot (protected) () #f #f 43 18 43 26 ()}
        {Lisp-Entry "sons" slot (protected) ((getter . "generate")) #f #f 44 18 44 22 ()}
        {Lisp-Entry "get-sons" accessor () () #f #f 44 30 44 38 ()}
        {Lisp-Entry "construct-literal" method (meta) ("context" "." "rest") #f #f 48 16 48 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "initialize" method (override) ("children" "." "sons") #f #f 52 20 52 30 ("sons~self" "self" "children~self" "set!" "nextmethod" "sons" "children")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 58 20 58 25 ("sons" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Table-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Table-Text-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Table-Text-View" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Table-Text-View" class (undocumented) ((extends . "Formatted-Text-View")) #f #f 43 20 43 35 ("Formatted-Text-View")
        {Lisp-Entry "new-model" method (override) () #f #f 46 20 46 29 ("2" "top-padding:" "4" "left-padding:" "Formatted-Text-Model" "new")}}}})
"Table-Tree-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Table-Tree-View.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Table-Tree-View" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Table-Tree-View" class (undocumented) ((extends . "Tree-View")) #f #f 43 20 43 35 ("Tree-View")}}})
"Text"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Text" module (protected) () #f #f 37 18 37 35 ("jazz")
      {Lisp-Entry "Text" class () ((extends . "Object")) #f #f 40 7 40 11 ("Object")
        {Lisp-Entry "paragraphs" slot (protected) ((getter . "generate")) #f #f 43 18 43 28 ()}
        {Lisp-Entry "get-paragraphs" accessor () () #f #f 43 36 43 44 ()}
        {Lisp-Entry "initialize" method (override) ("(paragraphs: paragraphs '())") #f #f 46 20 46 30 ("self" "paragraphs~self" "set!" "nextmethod" "paragraphs" "paragraphs:")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 51 20 51 25 ("paragraphs" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Text-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Text-Actions.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.preference.Text-Actions" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Text-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 32 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("on-toggle-lock-anchor" "lock-anchor" "one/none" "one/no-space" "one" "one-space" "none" "keep:" "on-remove-spaces" "no-space" "on-display-info" "display-info" "on-top-caret" "top-caret" "on-center-caret" "center-caret" "on-capitalize-selection" "capitalize" "on-downcase-selection" "downcase" "on-upcase-selection" "upcase" "on-fill-to-column" "fill-to-column" "on-mark-column" "mark-column" "extend-mark" "on-jump-mark" "jump-mark" "on-set-mark" "set-mark" "Space" "on-select-outer" "select-outer" "on-goto-line" "goto-line" "on-search-current" "search-current" "on-search-backward-mode" "search-backward-mode" "on-search-forward-mode" "search-forward-mode" "on-widen-forward" "widen-forward" "on-open-line" "open-line" "on-kill-line" "kill-line" "on-paste&next" "paste&next" "on-paste&stay" "paste&stay" "on-paste" "paste" "Insert" "on-copy" "copy" "on-cut" "cut" "backspace-word-alt" "Backspace" "on-backspace-press" "backspace-word" "extend-next" "Next" "on-next" "next" "extend-prior" "Prior" "on-prior" "prior" "extend-document-end" "document-end" "extend-document-home" "document?:" "document-home" "extend-end" "End" "on-end" "end" "extend-home" "Home" "on-home" "home" "delete-word-alt" "on-delete-word" "delete-word" "Delete" "on-delete-char" "delete-char" "on-downward-compound" "downward-compound" "on-upward-compound" "upward-compound" "extend-forward-compound" "on-forward-compound" "forward-compound" "extend-backward-compound" ":alt" "on-backward-compound" "backward-compound" "scroll-downward" "extend-downward" "Down" "down" "move-downward" "scroll?:" "scroll-upward" "extend-upward" "Up" "up" "move-upward" "extend-forward-word" "move-forward-word" "extend-forward-char" "Right" "right" "move-forward-char" "extend-backward-word" ":control" "move-backward-word" ":shift" "extend-backward-char" "Left" "Shortcut" "shortcut:" "word?:" "extend?:" "left" "direction:" "on-move" ":focus" "Event-Handler" "action-handler:" "move-backward-char" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Text-Color-Combo"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Color-Combo.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Text-Color-Combo" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Text-Color-Combo" class (undocumented) ((extends . "Push-Combo")) #f #f 44 20 44 36 ("Push-Combo")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("pick" "tooltip-text:" "tooltip?:" "body" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "form-model" method (override) ("form") #f #f 53 20 53 30 ("nextmethod" "else" "Color-Button" "body" "get-name" "get-name~" "case" "form")}
        {Lisp-Entry "popup-colors" method (public) ("(colors: colors #f)" "(geometry: geometry #f)") #f #f 64 18 64 30 ("self" "initiator:" "action-handler" "action-handler:" "Color-Picker" "popup" "get-height" "get-width" "0" "Point" "new" "pos" "let" "geometry" "geometry:" "colors" "colors:")}}}})
"Text-Colorizer"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Colorizer.jazz"} 237856878. jazz
    {Lisp-Entry "jazz.ui.text.Text-Colorizer" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Text-Colorizer" class (undocumented) ((extends . "Object")) #f #f 43 20 43 34 ("Object")
        {Lisp-Entry "model" slot () () #f "<Text-Model>" 46 8 46 13 ("Text-Model" "<Text-Model>")}
        {Lisp-Entry "row" slot () ((initialize . "#f")) #f "<Integer+>" 47 8 47 11 ("Integer+" "<Integer+>")}
        {Lisp-Entry "col" slot () () #f "<fx>" 48 8 48 11 ("fx" "<fx>")}
        {Lisp-Entry "runs" slot () () #f "<List-Factory>" 49 8 49 12 ("List-Factory" "<List-Factory>")}
        {Lisp-Entry "initialize" method (override) ("mdl" "<Object>") #f #f 52 20 52 30 ("List-Factory" "new" "runs" "0" "col" "model" "set!" "nextmethod" "Object" "<Object>" "mdl")}
        {Lisp-Entry "apply-style" method (public) ("start" "<Cell>" "end" "<Cell>" "name/style" "<Object>") #f #f 59 18 59 29 ("locate-style" "locate-style~" "intern-style" "intern-style~" "el" "sl" "new" "Subseq$string$" "<Subseq$string$>" "else" "get-col" "get-col~" "=" "cond" "for" "loop" "limit" "get-line" "get-line~" "beginning" "add-runs" "get-runs" "get-runs~" "get-style" "get-style~" "subseq!" "put-run" "put" "put~" "if" "<" "and" "cardinality" "cast" "+" "to" "str" "Run" "<Run>" "run" "lambda" "for-each" "from" "let" ">" "get-string" "get-string~" "string" "model" "get-paragraph" "get-paragraph~" "Paragraph" "<Paragraph>" "paragraph" "let*" "runs" "reset" "reset~" "0" "col" "set!" "finish-current" "/=" "row" "not" "or" "when" "style" "fx" "<fx>" "n" "add-run" "define" "Object" "<Object>" "name/style" "end" "Cell" "<Cell>" "start")}
        {Lisp-Entry "finish-current" method (public) () #f #f 106 18 106 32 ("wrap-paragraph" "wrap-paragraph~" "set-runs" "set-runs~" "get-output" "get-output~" "let" "get-default-style" "get-default-style~" "subseq!" "Run" "new" "put" "put~" "col" ">" "cardinality" "fx" "<fx>" "len" "get-string" "get-string~" "string" "model" "get-paragraph" "get-paragraph~" "Paragraph" "<Paragraph>" "paragraph" "let*" "runs" "row" "and" "when")}}}})
"Text-Combo"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Combo.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Text-Combo" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Text-Combo" class (undocumented) ((extends . "Combo-Box")) #f #f 43 20 43 30 ("explicit" "Combo-Box")
        {Lisp-Entry "client" property () ((initialize . "#f") (accessors . "explicit")) #f #f 46 12 46 18 ()}
        {Lisp-Entry "get-client" method (public) () #f #f 54 18 54 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("value") #f #f 58 18 58 28 ("client-update" "set!" "client" "neq?" "when" "value")}
        {Lisp-Entry "client-update" method (protected virtual) () #f #f 64 29 64 42 ()}
        {Lisp-Entry "selection-change" method (public virtual) () #f #f 73 26 73 42 ()}}}})
"Text-Context-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Context-Menu.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.Text-Context-Menu" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Text-Context-Menu" class () ((extends . "Context-Menu")) #f #f 46 7 46 24 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("select-all" "Separator-Item" "<Separator-Item>" "paste" "copy" "view" "Action" "action-handler:" "Image-Resource" "icon:" "french:" "english:" "Locales" "title:" "cut" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Text-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "event" "Text-Event.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.event.Text-Event" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Text-Event" class () ((extends . "Event")) #f #f 43 7 43 17 ("Event")}}})
"Text-Explorer"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Explorer.jazz"} 247720899. jazz
    {Lisp-Entry "jazz.ui.text.Text-Explorer" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "proclaim" proclaim () () #f #f 43 1 43 9 ("optimizations" "warn")}
      {Lisp-Entry "Text-Explorer" class (undocumented) ((extends . "Explorer")) #f #f 46 20 46 33 ("0" "Cell" "new" "Explorer")
        {Lisp-Entry "model" slot () ((getter . "generate")) #f "<Text-Model>" 49 8 49 13 ("Text-Model" "<Text-Model>")}
        {Lisp-Entry "get-model" accessor () () #f #f 49 40 49 48 ()}
        {Lisp-Entry "syntax" slot () ((getter . "generate")) #f "<Text-Syntax>" 50 8 50 14 ("Text-Syntax" "<Text-Syntax>")}
        {Lisp-Entry "get-syntax" accessor () () #f #f 50 40 50 48 ()}
        {Lisp-Entry "paragraphs" slot () () #f "<Axis>" 51 8 51 18 ("Axis" "<Axis>")}
        {Lisp-Entry "limit" slot () () #f "<fx>" 52 8 52 13 ("fx" "<fx>")}
        {Lisp-Entry "beginning" slot () () #f "<Cell>" 53 8 53 17 ("Cell" "<Cell>")}
        {Lisp-Entry "ending" slot () () #f "<Cell>" 54 8 54 14 ("Cell" "<Cell>")}
        {Lisp-Entry "start" slot () ((initialize . "(new Cell 0 0)")) #f "<Cell>" 55 8 55 13 ("Cell" "<Cell>")}
        {Lisp-Entry "end" slot () ((initialize . "(new Cell 0 0)")) #f "<Cell>" 56 8 56 11 ("Cell" "<Cell>")}
        {Lisp-Entry "kind" slot () ((initialize . "#f")) #f "<symbol+>" 57 8 57 12 ("symbol+" "<symbol+>")}
        {Lisp-Entry "line-hook" slot () ((initialize . "#f") (accessors . "generate")) #f "<procedure+>" 58 8 58 17 ("procedure+" "<procedure+>")}
        {Lisp-Entry "get-line-hook" accessor () () #f #f 58 57 58 65 ()}
        {Lisp-Entry "set-line-hook" accessor () () #f #f 58 57 58 65 ()}
        {Lisp-Entry "initialize" method (override) ("mdl" "<Text-Model>" "(direction: direction 'forward)" "(start: start #f)" "(end: end #f)" "(range: range #f)") #f #f 61 20 61 30 ("set-end" "set-start" "or" "when" "set-range" "if" "set-direction" "text-ending" "text-ending~" "ending" "text-beginning" "text-beginning~" "beginning" "get-limit" "get-limit~" "limit" "get-paragraphs" "get-paragraphs~" "paragraphs" "get-syntax" "get-syntax~" "syntax" "model" "set!" "nextmethod" "range" "range:" "end" "end:" "start" "start:" "forward" "direction" "direction:" "Text-Model" "<Text-Model>" "mdl")}
        {Lisp-Entry "goto-beginning" method (override) () #f "<void>" 82 20 82 34 ("beginning" "set-start" "void" "<void>")}
        {Lisp-Entry "goto-ending" method () () #f "<void>" 86 11 86 22 ("ending" "set-end" "void" "<void>")}
        {Lisp-Entry "at-beginning?" method (public) () #f "<bool>" 90 18 90 31 ("beginning" "start" "<=" "bool" "<bool>")}
        {Lisp-Entry "at-ending?" method (public) () #f "<bool>" 94 18 94 28 ("ending" "end" ">=" "bool" "<bool>")}
        {Lisp-Entry "get-start" method (public) () #f "<Cell>" 98 18 98 27 ("start" "copy" "Cell" "<Cell>")}
        {Lisp-Entry "set-start" method (public) ("pos" "<Cell>") #f "<void>" 102 18 102 27 ("get-col" "get-col~" "set-col" "set-col~" "get-line" "get-line~" "start" "set-line" "set-line~" "void" "<void>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "get-end" method (public) () #f "<Cell>" 107 18 107 25 ("end" "copy" "Cell" "<Cell>")}
        {Lisp-Entry "set-end" method (public) ("pos" "<Cell>") #f "<void>" 111 18 111 25 ("get-col" "get-col~" "set-col" "set-col~" "get-line" "get-line~" "end" "set-line" "set-line~" "void" "<void>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "get-range" method (public) () #f "<Range$Cell$>" 116 18 116 27 ("end" "start" "copy" "new" "Range$Cell$" "<Range$Cell$>")}
        {Lisp-Entry "set-range" method (public) ("range" "<Range$Cell$>") #f "<void>" 120 18 120 27 ("get-end" "get-end~" "set-end" "get-start" "get-start~" "set-start" "void" "<void>" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "set-pos" method (public) ("pos" "<Cell+>") #f "<void>" 125 18 125 25 ("set-end" "set-start" "void" "<void>" "Cell+" "<Cell+>" "pos")}
        {Lisp-Entry "call-line-hook" method (protected) () #f #f 130 21 130 35 ("self" "line-hook" "when")}
        {Lisp-Entry "looking-at?" method (public) ("str" "<string>") #f #f 135 18 135 29 ("1" "+" "else" "char-forward" "string-ref" "eqv?" "not" ">=" "cond" "0" "i" "lp" "string-length" "len" "let" "string" "<string>" "str")}
        {Lisp-Entry "looking-back?" method (public) ("str" "<string>") #f #f 143 18 143 31 ("+" "else" "char-backward" "1" "-" "string-ref" "eqv?" "not" ">=" "cond" "0" "i" "lp" "string-length" "len" "let" "string" "<string>" "str")}
        {Lisp-Entry "get-kind" method (public inline) () #f "<symbol>" 156 25 156 33 ("kind" "symbol" "<symbol>")}
        {Lisp-Entry "set-kind" method (protected inline) ("knd" "<symbol+>") #f "<void>" 160 28 160 36 ("kind" "set!" "void" "<void>" "symbol+" "<symbol+>" "knd")}
        {Lisp-Entry "get-paragraph" method (inline) ("n" "<fx>") #f "<Paragraph>" 164 18 164 31 ("paragraphs" "element" "Paragraph" "<Paragraph>" "fx" "<fx>" "n")}
        {Lisp-Entry "paragraph-string" method (inline) ("n" "<fx>") #f "<string>" 168 18 168 34 ("get-paragraph" "get-string" "get-string~" "string" "<string>" "fx" "<fx>" "n")}
        {Lisp-Entry "paragraph-length" method (inline) ("n" "<fx>") #f "<fx>" 172 18 172 34 ("paragraph-string" "cardinality" "fx" "<fx>" "n")}
        {Lisp-Entry "get-char" method (public) ("pos" "<Cell>") #f "<char>" 176 18 176 26 ("element" "cardinality" "fx" "<fx>" "cast" "<" "if" "get-paragraph" "get-string" "get-string~" "string" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "let" "char" "<char>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "get-range-string" method (public) ("start" "<Cell>" "end" "<Cell>") #f "<string>" 185 18 185 34 ("Range$Cell$" "new" "model" "get-string" "get-string~" "string" "<string>" "end" "Cell" "<Cell>" "start")}
        {Lisp-Entry "get-marked" method (public) () #f "<string>" 189 18 189 28 ("end" "start" "get-range-string" "string" "<string>")}
        {Lisp-Entry "read-marked" method (public) () #f #f 193 18 193 29 ("get-marked" "read-string-element")}
        {Lisp-Entry "get-symbol-string" method (public) () #f "<string>" 199 18 199 35 ("get-marked" "end" "1" "+" "get-range-string" "start" "get-char" "eqv?" "if" "string" "<string>")}
        {Lisp-Entry "find-marked-symbol" method (public) () #f "<symbol+>" 205 18 205 36 ("get-marked" "find-symbol" "symbol+" "<symbol+>")}
        {Lisp-Entry "intern-marked-symbol" method (public) () #f "<symbol>" 209 18 209 38 ("get-marked" "string->symbol" "symbol" "<symbol>")}
        {Lisp-Entry "get-range-symbol" method (public) ("start" "end") #f "<symbol+>" 213 18 213 34 ("get-range-string" "find-symbol" "symbol+" "<symbol+>" "end" "start")}
        {Lisp-Entry "get-mark" method (public) () #f #f 217 18 217 26 ("get-range" "get-kind" "Explorer-Mark" "new")}
        {Lisp-Entry "specifier-marked?" method (public) () #f #f 221 18 221 35 ("1" "end" "-" "start" "get-char" "eqv?" "symbol" "kind" "eq?" "and")}
        {Lisp-Entry "next!" method () ("pos" "<Cell>") #f "<bool>" 232 11 232 16 ("else" "0" "set-col" "set-col~" "1" "+" "set-line" "set-line~" "limit" "increase-col" "increase-col~" "paragraph-length" "<" "cond" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "let" "bool" "<bool>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "previous!" method () ("pos" "<Cell>") #f "<bool>" 246 11 246 20 ("else" "paragraph-length" "set-col" "set-col~" "set-line" "set-line~" "1" "-" "previous-line" "-1" "increase-col" "increase-col~" "0" ">" "cond" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "let" "bool" "<bool>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "next-cell!" method () ("pos" "<Cell>") #f #f 261 11 261 21 ("next!" "when" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "previous-cell!" method () ("pos" "<Cell>") #f #f 266 11 266 25 ("previous!" "when" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "next-pos" method () ("pos" "<Cell>" "offset" "<fx>") #f "<Cell+>" 271 11 271 19 ("else" "1" "-" "next!" "0" "<=" "cond" "iterate" "copy" "let" "Cell+" "<Cell+>" "fx" "<fx>" "offset" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "previous-pos" method () ("pos" "<Cell>" "offset" "<fx>") #f "<Cell+>" 282 11 282 23 ("else" "1" "-" "previous!" "0" "<=" "cond" "iterate" "copy" "let" "Cell+" "<Cell+>" "fx" "<fx>" "offset" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "forward" method (override) () #f #f 293 20 293 27 ("end" "next!")}
        {Lisp-Entry "forward-n" method () ("offset" "<fx>") #f #f 297 11 297 20 ("forward" ">=" "1" "+" "0" "i" "do" "fx" "<fx>" "offset")}
        {Lisp-Entry "backward" method (override) () #f #f 301 20 301 28 ("start" "previous!")}
        {Lisp-Entry "backward-n" method () ("offset" "<fx>") #f #f 305 11 305 21 ("backward" ">=" "1" "+" "0" "i" "do" "fx" "<fx>" "offset")}
        {Lisp-Entry "next-char" method (public) ("pos" "<Cell>" "offset" "<fx>") #f "<char+>" 309 18 309 27 ("get-char" "when" "next-pos" "<=" "or" "0" ">=" "paragraph-length" "=" "and" "in-text?" "limit" "<" "if" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "let" "bool" "<bool>" "next-in-text?" "define" "char+" "<char+>" "fx" "<fx>" "offset" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "char-forward" method (public inline) ("offset" "<fx>") #f "<char+>" 327 25 327 37 ("end" "next-char" "char+" "<char+>" "fx" "<fx>" "offset")}
        {Lisp-Entry "previous-char" method (public) ("pos" "<Cell>" "offset" "<fx>") #f "<char+>" 331 18 331 31 ("get-char" "when" "1" "+" "previous-pos" "let" "char+" "<char+>" "fx" "<fx>" "offset" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "char-backward" method (public inline) ("offset" "<fx>") #f "<char+>" 337 25 337 38 ("start" "previous-char" "char+" "<char+>" "fx" "<fx>" "offset")}
        {Lisp-Entry "forward-while" method (public) ("predicate" "<procedure>") #f #f 341 18 341 31 ("forward" "not" "if" "0" "char-forward" "c" "iterate" "let" "procedure" "<procedure>" "predicate")}
        {Lisp-Entry "backward-while" method (public) ("predicate" "<procedure>") #f #f 353 18 353 32 ("backward" "not" "if" "0" "char-backward" "c" "iterate" "let" "procedure" "<procedure>" "predicate")}
        {Lisp-Entry "forward-until" method (public) ("predicate" "<procedure>") #f #f 365 18 365 31 ("not" "c" "lambda" "forward-while" "procedure" "<procedure>" "predicate")}
        {Lisp-Entry "backward-until" method (public) ("predicate" "<procedure>") #f #f 369 18 369 32 ("not" "c" "lambda" "backward-while" "procedure" "<procedure>" "predicate")}
        {Lisp-Entry "forward-to" method (public) ("char") #f #f 373 18 373 28 ("eqv?" "c" "lambda" "forward-until" "char")}
        {Lisp-Entry "backward-to" method (public) ("char") #f #f 377 18 377 29 ("eqv?" "c" "lambda" "backward-until" "char")}
        {Lisp-Entry "forward-whitespaces" method (public) () #f #f 381 18 381 37 ("whitespace?" "forward-while")}
        {Lisp-Entry "backward-whitespaces" method (public) () #f #f 385 18 385 38 ("whitespace?" "backward-while")}
        {Lisp-Entry "forward-word" method (public) () #f #f 394 18 394 30 ("forward" "alphanumeric?" "not" "or" "if" "0" "char-forward" "c" "iterate" "let")}
        {Lisp-Entry "forward-non-word" method (public) () #f #f 403 18 403 34 ("forward" "alphanumeric?" "not" "or" "if" "0" "char-forward" "c" "iterate" "let")}
        {Lisp-Entry "backward-word" method (public) () #f #f 412 18 412 31 ("backward" "alphanumeric?" "not" "or" "if" "0" "char-backward" "c" "iterate" "let")}
        {Lisp-Entry "backward-non-word" method (public) () #f #f 421 18 421 35 ("backward" "alphanumeric?" "not" "or" "if" "0" "char-backward" "c" "iterate" "let")}
        {Lisp-Entry "forward-constituent" method (protected virtual) () #f #f 430 29 430 48 ("else" "symbol" "kind" "text-constituent?" "not" "or" "set!" "forward" "eqv?" "cond" "0" "char-forward" "c" "iterate" "last" "let")}
        {Lisp-Entry "backward-constituent" method (protected virtual) () #f #f 448 29 448 49 ("else" "symbol" "kind" "text-constituent?" "not" "or" "set!" "backward" "1" "eqv?" "cond" "0" "char-backward" "c" "iterate" "last" "let")}
        {Lisp-Entry "outer-expr" method (public virtual) ("." "rest") #f #f 466 26 466 36 ("backward-constituent" "forward-constituent" "rest")}
        {Lisp-Entry "text-constituent?" method (public) ("char") #f #f 476 18 476 35 ("syntax" "text-constituent?" "text-constituent?~" "char")}
        {Lisp-Entry "paragraph-start" method (public) () #f #f 485 18 485 33 ("0" "start" "set-col" "set-col~")}
        {Lisp-Entry "paragraph-end" method (public) () #f #f 489 18 489 31 ("get-line" "get-line~" "paragraph-length" "end" "set-col" "set-col~")}
        {Lisp-Entry "previous-paragraph" method (public) () #f #f 493 18 493 36 ("0" "set-col" "set-col~" "-1" "start" "increase-line" "increase-line~")}
        {Lisp-Entry "next-paragraph" method (public) () #f #f 498 18 498 32 ("0" "set-col" "set-col~" "end" "increase-line" "increase-line~")}
        {Lisp-Entry "paragraph-column" method (public) () #f #f 503 18 503 34 ("eqv?" "c" "lambda" "forward-while")}
        {Lisp-Entry "backward-style" method (public) ("predicate") #f #f 512 18 512 32 ("backward" "get-style" "get-style~" "not" "or" "when" "start" "model" "get-run-at" "get-run-at~" "run" "iterate" "let" "predicate")}
        {Lisp-Entry "forward-style" method (public) ("predicate") #f #f 520 18 520 31 ("forward" "get-style" "get-style~" "not" "or" "model" "get-run-at" "get-run-at~" "run" "when" "1" "end" "next-pos" "next" "iterate" "let" "predicate")}
        {Lisp-Entry "select-style" method (public) ("predicate") #f #f 530 18 530 30 ("forward-style" "backward-style" "predicate")}}}})
"Text-File-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "Text-File-Request.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.Text-File-Request" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Text-File-Request" class (undocumented) ((extends . "File-Request")) #f #f 45 20 45 37 ("File-Request")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("char-encoding" "Combo-Box" "<Combo-Box>" "Dark" "Medium" "Color" "border-color:" "1" "2" "Rect" "border-insets:" "22" "150" "0" "80" "Border-View" "<Border-View>" "auto-size?:" "3" "4" "Point" "position:" "title:" "Label-View" "<Label-View>" "24" "250" "Dimension" "size:" "View" "<View>" "buttonbar" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 58 25 58 35 ()}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 62 20 62 26 ("update-char-encoding" "nextmethod" "rest")}
        {Lisp-Entry "Char-Encodings" definition () () #f #f 72 14 72 28 ("UTF-16" "UTF-8" "UTF" "ISO-8859-1" "ASCII")}
        {Lisp-Entry "update-char-encoding" method () () #f #f 80 11 80 31 ("UTF" "set-value" "set-value~" "Char-Encodings" "set-choices" "set-choices~" "char-encoding" "locate" "combo" "let")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 91 20 91 36 ("char-encoding" "locate" "get-value" "get-value~" "nextmethod" "values")}}}})
"Text-Font-Combo"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Font-Combo.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.text.Text-Font-Combo" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "font-list" definition () () #f #f 45 16 45 25 ()}
      {Lisp-Entry "font-list" definition () () #f #f 52 16 52 25 ("vera-mono" "vera-serif" "vera-sans")}
      {Lisp-Entry "Text-Font-Combo" class (undocumented) ((extends . "Text-Combo")) #f #f 58 20 58 35 ("Text-Combo")
        {Lisp-Entry "client-update" method (override) () #f #f 66 20 66 33 ("font-list" "->string" "list" "name" "lambda" "map" "set-choices")}
        {Lisp-Entry "selection-change" method (override) () #f #f 77 20 77 36 ("get-font" "get-font~" "get-font-name" "get-font-name~" "set-value" "Text-Style" "is?" "if" "get-model" "get-model~" "get-style-at" "get-style-at~" "style" "client" "get-end" "get-end~" "end" "let*")}
        {Lisp-Entry "combo-choice" method (override) () #f #f 90 20 90 32 ("selection-change" "get-value" "client" "set-selection-font-name" "set-selection-font-name~")}}}})
"Text-Format-Combo"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Format-Combo.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.text.Text-Format-Combo" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Text-Format-Combo" class (undocumented) ((extends . "Text-Combo")) #f #f 43 20 43 37 ("Text-Combo")
        {Lisp-Entry "client-update" method (override) () #f #f 51 20 51 33 ("key:" "client" "get-model" "get-model~" "get-named-formats" "get-named-formats~" "table-keys" "string-ci<?" "sort" "->string" "base:" "Format" "new" "list" "name" "lambda" "map" "set-choices")}
        {Lisp-Entry "selection-change" method (override) () #f #f 62 20 62 36 ("->string" "set-content" "last" "not-null?" "and" "name" "get-base" "get-base~" "base" "get-model" "get-model~" "get-format-at" "get-format-at~" "format" "client" "get-end" "get-end~" "end" "let*")}
        {Lisp-Entry "combo-choice" method (override) () #f #f 75 20 75 32 ("selection-change" "format?:" "get-value" "client" "set-selection-format/style" "set-selection-format/style~")}}}})
"Text-Highlight"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Highlight.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Text-Highlight" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Text-Highlight" class () ((extends . "Text-Mark")) #f #f 43 7 43 21 ("Text-Mark")
        {Lisp-Entry "style" slot () ((getter . "generate")) #f #f 46 8 46 13 ()}
        {Lisp-Entry "get-style" accessor () () #f #f 46 31 46 39 ()}
        {Lisp-Entry "show-unfocused?" slot () ((getter . "generate")) #f #f 47 8 47 23 ()}
        {Lisp-Entry "get-show-unfocused?" accessor () () #f #f 47 31 47 39 ()}
        {Lisp-Entry "initialize" method (override) ("text" "range" "style" "(show-unfocused?: show-unfocused? #t)") #f #f 50 20 50 30 ("show-unfocused?~self" "self" "style~self" "set!" "nextmethod" "show-unfocused?" "show-unfocused?:" "style" "range" "text")}}}})
"Text-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Text-Look.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Text-Look" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Text-Look" class () ((extends . "Look")) #f #f 43 7 43 16 ("Look")
        {Lisp-Entry "background" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 22 ()}
        {Lisp-Entry "get-background" accessor () () #f #f 46 61 46 69 ()}
        {Lisp-Entry "set-background" accessor () () #f #f 46 61 46 69 ()}
        {Lisp-Entry "caret-color" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 23 ()}
        {Lisp-Entry "get-caret-color" accessor () () #f #f 47 61 47 69 ()}
        {Lisp-Entry "set-caret-color" accessor () () #f #f 47 61 47 69 ()}
        {Lisp-Entry "active-selection-color" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 34 ()}
        {Lisp-Entry "get-active-selection-color" accessor () () #f #f 48 61 48 69 ()}
        {Lisp-Entry "set-active-selection-color" accessor () () #f #f 48 61 48 69 ()}
        {Lisp-Entry "inactive-selection-color" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 36 ()}
        {Lisp-Entry "get-inactive-selection-color" accessor () () #f #f 49 61 49 69 ()}
        {Lisp-Entry "set-inactive-selection-color" accessor () () #f #f 49 61 49 69 ()}
        {Lisp-Entry "completion-color" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 28 ()}
        {Lisp-Entry "get-completion-color" accessor () () #f #f 50 61 50 69 ()}
        {Lisp-Entry "set-completion-color" accessor () () #f #f 50 61 50 69 ()}}}})
"Text-Mark"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Mark.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Text-Mark" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Text-Mark" class () ((extends . "Object")) #f #f 40 7 40 16 ("Object")
        {Lisp-Entry "text" slot () ((getter . "generate")) #f #f 43 8 43 12 ()}
        {Lisp-Entry "get-text" accessor () () #f #f 43 35 43 43 ()}
        {Lisp-Entry "range" slot () ((getter . "generate")) #f "<Range$Cell$>" 44 8 44 13 ("Range$Cell$" "<Range$Cell$>")}
        {Lisp-Entry "get-range" accessor () () #f #f 44 35 44 43 ()}
        {Lisp-Entry "strict?" slot () ((getter . "generate")) #f #f 45 8 45 15 ()}
        {Lisp-Entry "get-strict?" accessor () () #f #f 45 35 45 43 ()}
        {Lisp-Entry "change-proc" slot () ((getter . "generate")) #f #f 46 8 46 19 ()}
        {Lisp-Entry "get-change-proc" accessor () () #f #f 46 35 46 43 ()}
        {Lisp-Entry "initialize" method (override) ("text" "range" "(strict?: strict? #t)" "(change-proc: change-proc #f)") #f #f 49 20 49 30 ("add-mark" "add-mark~" "change-proc~self" "strict?~self" "range~self" "self" "text~self" "set!" "nextmethod" "change-proc" "change-proc:" "strict?" "strict?:" "range" "text")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 58 20 58 25 ("get-end" "get-end~" "range" "get-start" "get-start~" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-start" method (public) () #f #f 69 18 69 27 ("range" "get-start" "get-start~")}
        {Lisp-Entry "get-end" method (public) () #f #f 73 18 73 25 ("range" "get-end" "get-end~")}
        {Lisp-Entry "set-range" method (public) ("r") #f #f 77 18 77 27 ("change-proc" "when" "range" "set!" "r")}
        {Lisp-Entry "adjust" method (protected) ("start" "end" "caret") #f #f 88 21 88 27 ("case" "end-pos" "start-pos" "get-end" "get-end~" "mark-end" "get-start" "get-start~" "mark-start" "Range$Cell$" "strict?" "touch-range" "change-proc" "range" "set!" "r" "update-range" "=" "if" "+" "Cell" "new" "get-col" "get-col~" "col-delta" "get-line" "get-line~" "-" "line-delta" "let" "adjust-cell" "inside" "else" "after" "nu>=?" "before" "nu<=?" "at" "nu=?" "and" "cond" "cell" "cell-position" "define" "caret" "end" "start")}}}})
"Text-Model"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Model.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Text-Model" module (protected) () #f #f 38 18 38 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 41 1 41 7 ("jazz.ui.view" "jazz.ui.skin" "jazz.ui" "jazz.system" "jazz.library.exemplar" "jazz.library" "jazz.jml" "jazz.io" "jazz.graphic" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "Text-Model" class () ((extends . "Outline-Model")) #f #f 54 7 54 17 ("span" "<span>" "div" "<div>" "td" "<td>" "tr" "<tr>" "table" "<table>" "img" "<img>" "image" "<image>" "link" "<link>" "hyperlink" "<hyperlink>" "a" "<a>" "anchor" "<anchor>" "style" "<style>" "format" "<format>" "item" "<item>" "unordered" "ordered" "type:" "list" "<list>" "h" "<h>" "header" "<header>" "p" "<p>" "paragraph" "<paragraph>" "text" "<text>" "make-styles" "make-formats" "0" "explicit" "Outline-Model")
        {Lisp-Entry "text" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 67 22 67 26 ()}
        {Lisp-Entry "wrap?" property (protected) ((initialize . "#f") (accessors . "generate")) #f #f 68 22 68 27 ()}
        {Lisp-Entry "get-wrap?" accessor () () #f #f 68 99 68 107 ()}
        {Lisp-Entry "set-wrap?" accessor () () #f #f 68 99 68 107 ()}
        {Lisp-Entry "base-format" property (protected) ((initialize . "#f") (accessors . "generate")) #f #f 69 22 69 33 ()}
        {Lisp-Entry "get-base-format" accessor () () #f #f 69 99 69 107 ()}
        {Lisp-Entry "set-base-format" accessor () () #f #f 69 99 69 107 ()}
        {Lisp-Entry "default-format" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 70 22 70 36 ()}
        {Lisp-Entry "base-style" property (protected) ((initialize . "#f") (accessors . "generate")) #f #f 71 22 71 32 ()}
        {Lisp-Entry "get-base-style" accessor () () #f #f 71 99 71 107 ()}
        {Lisp-Entry "set-base-style" accessor () () #f #f 71 99 71 107 ()}
        {Lisp-Entry "default-style" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 72 22 72 35 ()}
        {Lisp-Entry "paragraph-spacing" property (protected) ((initialize . "0") (accessors . "generate")) #f "<fx>" 73 22 73 39 ("fx" "<fx>")}
        {Lisp-Entry "get-paragraph-spacing" accessor () () #f #f 73 99 73 107 ()}
        {Lisp-Entry "set-paragraph-spacing" accessor () () #f #f 73 99 73 107 ()}
        {Lisp-Entry "char-encoding" property (protected) ((initialize . "#f") (accessors . "generate")) #f #f 74 22 74 35 ()}
        {Lisp-Entry "get-char-encoding" accessor () () #f #f 74 99 74 107 ()}
        {Lisp-Entry "set-char-encoding" accessor () () #f #f 74 99 74 107 ()}
        {Lisp-Entry "eol-encoding" property (protected) ((initialize . "#f") (accessors . "generate")) #f #f 75 22 75 34 ()}
        {Lisp-Entry "get-eol-encoding" accessor () () #f #f 75 99 75 107 ()}
        {Lisp-Entry "set-eol-encoding" accessor () () #f #f 75 99 75 107 ()}
        {Lisp-Entry "propagate-styles?" property (protected) ((initialize . "#t") (accessors . "generate")) #f #f 76 22 76 39 ()}
        {Lisp-Entry "get-propagate-styles?" accessor () () #f #f 76 99 76 107 ()}
        {Lisp-Entry "set-propagate-styles?" accessor () () #f #f 76 99 76 107 ()}
        {Lisp-Entry "syntax" slot (protected) ((initialize . "#f") (accessors . "generate")) #f #f 79 18 79 24 ()}
        {Lisp-Entry "get-syntax" accessor () () #f #f 79 78 79 86 ()}
        {Lisp-Entry "set-syntax" accessor () () #f #f 79 78 79 86 ()}
        {Lisp-Entry "undoer" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 80 18 80 24 ()}
        {Lisp-Entry "get-undoer" accessor () () #f #f 80 75 80 83 ()}
        {Lisp-Entry "user-tabs" slot (protected) ((initialize . "'()")) #f #f 81 18 81 27 ()}
        {Lisp-Entry "tabs" slot (protected) ((initialize . "'()") (accessors . "generate")) #f #f 82 18 82 22 ()}
        {Lisp-Entry "get-tabs" accessor () () #f #f 82 78 82 86 ()}
        {Lisp-Entry "set-tabs" accessor () () #f #f 82 78 82 86 ()}
        {Lisp-Entry "formats" slot (protected) ((initialize . "(make-formats)") (getter . "generate")) #f #f 83 18 83 25 ()}
        {Lisp-Entry "get-formats" accessor () () #f #f 83 75 83 83 ()}
        {Lisp-Entry "styles" slot (protected) ((initialize . "(make-styles)") (getter . "generate")) #f #f 84 18 84 24 ()}
        {Lisp-Entry "get-styles" accessor () () #f #f 84 75 84 83 ()}
        {Lisp-Entry "wrap-width" slot (protected) ((initialize . "#f") (accessors . "generate")) #f #f 85 18 85 28 ()}
        {Lisp-Entry "get-wrap-width" accessor () () #f #f 85 78 85 86 ()}
        {Lisp-Entry "set-wrap-width" accessor () () #f #f 85 78 85 86 ()}
        {Lisp-Entry "wrap-patch" slot (protected) ((initialize . "#f")) #f #f 86 18 86 28 ()}
        {Lisp-Entry "form" form () () #f #f 89 3 89 7 ("16" "default-row-height:" "12" "left-padding:" "Text-Background" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "make-formats" definition () () #f #f 94 15 94 27 ("formats-domain" "list" "chained:" "intern?:" "formats" "name:" "Exemplar-Domain" "new")}
        {Lisp-Entry "make-styles" definition () () #f #f 97 15 97 26 ("styles-domain" "list" "chained:" "intern?:" "styles" "name:" "Exemplar-Domain" "new")}
        {Lisp-Entry "prepare" method (override) ("rest") #f #f 101 20 101 27 ("reset-modified?" "reset-modified:" "Undoer" "undoer" "default-style" "default-format" "set!" "nextmethod" "styles" "Text-Style" "new-default-style" "Text-Base" "base:" "formats" "domain:" "Format" "new" "new-default-format" "define" "rest")}
        {Lisp-Entry "install-child" method (override) ("form" "creator" "creator-branch" "restore-form") #f #f 114 20 114 33 ("nextmethod" "else" "form->node" "set-text" "text" "get-model" "get-model~" "case" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 121 20 121 26 ("make-tabs" "tabs" "set!" "empty-content" "set-content" "text" "not" "when" "nextmethod" "rest")}
        {Lisp-Entry "new-syntax" method (protected virtual) () #f "<Text-Syntax>" 128 29 128 39 ("self" "new" "Text-Syntax" "<Text-Syntax>")}
        {Lisp-Entry "get-paragraphs" method (protected) () #f "<Axis>" 137 21 137 35 ("root-row" "get-sons" "get-sons~" "Axis" "<Axis>")}
        {Lisp-Entry "set-paragraphs" method (protected) ("lst") #f #f 141 21 141 35 ("root-row" "set-sons" "set-sons~" "lst")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 150 20 150 33 ("modified?")}
        {Lisp-Entry "set-modified?" method (override) ("state") #f #f 154 20 154 33 ("set-modified?" "set-modified?~" "view" "lambda" "for-each-client" "modified?" "set!" "state")}
        {Lisp-Entry "reset-modified?" method () () #f #f 161 11 161 26 ("set-modified?")}
        {Lisp-Entry "update-status" method () () #f #f 165 11 165 24 ("update-status" "update-status~" "view" "lambda" "for-each-client")}
        {Lisp-Entry "update-moniker-time" method () ("moniker") #f #f 171 11 171 30 ("update-moniker-time" "update-moniker-time~" "view" "lambda" "for-each-client" "moniker")}
        {Lisp-Entry "load-content" method (protected) ("moniker") #f #f 182 21 182 33 ("update-status" "read-content" "set-content" "not" "if" "moniker")}
        {Lisp-Entry "save-content" method (protected) ("moniker") #f #f 189 21 189 33 ("undoer" "reset-save-depth" "reset-save-depth~" "set-modified?" "update-status" "get-modified?" "not" "if" "update-moniker-time" "save-to" "moniker")}
        {Lisp-Entry "save-to" method (override) ("moniker") #f #f 198 20 198 27 ("eol-encoding" "eol-encoding:" "char-encoding" "char-encoding:" "save-lines" "save-lines~" "get-content" "content" "let" "moniker")}
        {Lisp-Entry "reload-moniker" method (protected) ("moniker") #f #f 203 21 203 35 ("update-moniker-time" "read-moniker" "reload-content" "when" "moniker")}
        {Lisp-Entry "compare-moniker" method (protected) ("moniker") #f #f 209 21 209 36 ("focus-host" "focus-host~" "Document-Moniker" "new" "get-guest" "get-guest~" "compare-monikers" "compare-monikers~" "host-visible?:" "Compare-Files" "require-service" "new-frame" "frame" "let" "when" "moniker")}
        {Lisp-Entry "empty-content" method (protected virtual) () #f #f 216 29 216 42 ("list" "paragraphs:" "Text" "new")}
        {Lisp-Entry "get-content" method (override) () #f #f 220 20 220 31 ("List" "paragraph->string" "get-paragraphs" "accumulate")}
        {Lisp-Entry "set-content" method (override) ("lst") #f #f 224 20 224 31 ("set-unformatted-content" "lst")}
        {Lisp-Entry "empty-text" method (public) () #f #f 228 18 228 28 ("empty-content" "set-content")}
        {Lisp-Entry "set-unformatted-content" method () ("lst") #f #f 232 11 232 34 ("complete-setup" "get-row-height" "get-row-height~" "increase!" "wrap-paragraph" "set!" "set-next" "set-next~" "set-previous" "set-previous~" "make-string-paragraph" "paragraph" "let" "string" "lambda" "map" "rows" "root-row" "previous" "height" "0" "fx" "<fx>" "count" "get-paragraphs" "get-paragraphs~" "null/pair?" "if" "empty-content" "or" "let*" "lst")}
        {Lisp-Entry "get-string-content" method (public) () #f "<string>" 251 18 251 36 ("get-content" "join-lines" "string" "<string>")}
        {Lisp-Entry "set-string-content" method (public) ("content" "<string>") #f "<void>" 255 18 255 36 ("call-content-change" "syntax" "colorize" "colorize~" "parse-string-content" "set-content" "void" "<void>" "string" "<string>" "content")}
        {Lisp-Entry "make-string-paragraph" method () ("format" "string" "<string>") #f "<Paragraph>" 261 11 261 32 ("get-default-style" "cardinality" "fx" "<fx>" "cast" "0" "subseq!" "Run" "new" "list" "empty-string?" "if" "make-paragraph" "Paragraph" "<Paragraph>" "<string>" "string" "format")}
        {Lisp-Entry "make-paragraph" method () ("format" "string" "<string>" "runs") #f #f 270 11 270 25 ("fix-view-style-parent" "get-default-style" "get-font" "get-font~" "get-metrics" "get-metrics~" "get-height" "get-height~" "set-row-height" "set-row-height~" "0" "set-level" "set-level~" "root-row" "set-father" "set-father~" "set-runs" "set-runs~" "set-string" "set-string~" "get-default-format" "or" "set-format" "set-format~" "self" "set-parent" "set-parent~" "Paragraph" "new" "paragraph" "let" "runs" "<string>" "string" "format")}
        {Lisp-Entry "read-content" method (public virtual) ("moniker") #f #f 283 26 283 38 ("syntax" "colorize" "colorize~" "update-moniker-time" "read-moniker" "set-content" "moniker")}
        {Lisp-Entry "read-moniker" method (protected virtual) ("moniker") #f #f 289 29 289 41 ("if" "char-encoding-errors:" "char-encoding" "char-encoding:" "load-lines" "load-lines~" "moniker")}
        {Lisp-Entry "reload-content" method (public) ("lst") #f #f 293 18 293 32 ("update-status" "syntax" "colorize" "colorize~" "set-content" "remove-every-row" "lst")}
        {Lisp-Entry "content-size-change" method (override) ("size" "<Dimension>") #f #f 305 20 305 39 ("wrap-content" "wrap?" "when" "get-width" "get-width~" "visible-width" "set!" "Dimension" "<Dimension>" "size")}
        {Lisp-Entry "for-each-logical-range" method (public) ("range" "<Range$Cell$>" "proc") #f #f 316 18 316 40 ("else" "cond" "paragraph" "to" "from" "for" "loop" "limit" "beginning" "get-col" "get-col~" "get-paragraph" "line" "get-line" "get-line~" "=" "if" "/=" "when" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "let" "proc" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "for-each-range" method (public) ("range" "<Range$Cell$>" "proc") #f #f 332 18 332 32 ("get-length" "get-length~" "0" "or" "end" "start" "paragraph" "line" "lambda" "for-each-logical-range" "proc" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "make-tabs" method () () #f #f 348 11 348 20 ("512" "32" "0" "make-tabs-from")}
        {Lisp-Entry "make-tabs-from" method (public) ("from" "tab-size" "number") #f #f 352 18 352 32 ("0" "naturals" "increase!" "prog1" "n" "lambda" "map" "stop" "let" "number" "tab-size" "from")}
        {Lisp-Entry "can-undo?" method (override) () #f #f 365 20 365 29 ("undoer" "can-undo?" "can-undo?~")}
        {Lisp-Entry "can-redo?" method (override) () #f #f 369 20 369 29 ("undoer" "can-redo?" "can-redo?~")}
        {Lisp-Entry "undo" method (override) () #f #f 373 20 373 24 ("undoer" "undo" "undo~")}
        {Lisp-Entry "redo" method (override) () #f #f 377 20 377 24 ("undoer" "redo" "redo~")}
        {Lisp-Entry "text-beginning" method (public) () #f "<Cell>" 386 18 386 32 ("0" "new" "Cell" "<Cell>")}
        {Lisp-Entry "text-ending" method (public) () #f "<Cell>" 390 18 390 29 ("paragraph-length" "new" "get-limit" "limit" "let" "Cell" "<Cell>")}
        {Lisp-Entry "text-range" method (public) () #f "<Range$Cell$>" 395 18 395 28 ("text-ending" "text-beginning" "new" "Range$Cell$" "<Range$Cell$>")}
        {Lisp-Entry "text-empty?" method (public) () #f "<bool>" 399 18 399 29 ("text-ending" "text-beginning" "=" "bool" "<bool>")}
        {Lisp-Entry "get-char" method (public) ("pos" "<Cell>") #f "<char>" 408 18 408 26 ("element" "cardinality" "<" "if" "get-paragraph" "get-string" "get-string~" "string" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "let" "char" "<char>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "get-string" method (public) ("range" "<Range$Cell$>") #f "<string>" 417 18 417 28 ("range-strings" "join-lines" "string" "<string>" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "next!" method (public) ("pos" "<Cell>") #f "<bool>" 421 18 421 23 ("else" "0" "set-col" "set-col~" "increase-line" "increase-line~" "get-limit" "<" "increase-col" "increase-col~" "get-line" "get-line~" "paragraph-length" "get-col" "get-col~" "/=" "cond" "bool" "<bool>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "previous!" method (public) ("pos" "<Cell>") #f "<bool>" 433 18 433 27 ("else" "paragraph-length" "set-col" "set-col~" "increase-line" "increase-line~" "get-line" "get-line~" ">" "-1" "increase-col" "increase-col~" "0" "get-col" "get-col~" "/=" "cond" "bool" "<bool>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "next-cell" method (public) ("pos" "<Cell>") #f "<Cell+>" 445 18 445 27 ("next!" "when" "copy" "cell" "let" "Cell+" "<Cell+>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "previous-cell" method (public) ("pos" "<Cell>") #f "<Cell+>" 451 18 451 31 ("previous!" "when" "copy" "cell" "let" "Cell+" "<Cell+>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "get-range-strings" method (public) ("range") #f #f 457 18 457 35 ("range-strings" "empty?" "empty?~" "if" "range")}
        {Lisp-Entry "next-pos" method (public) ("pos" "<Cell>" "offset" "<fx>") #f "<Cell+>" 463 18 463 26 ("else" "1" "-" "next!" "0" "<=" "cond" "iterate" "copy" "let" "Cell+" "<Cell+>" "fx" "<fx>" "offset" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "previous-pos" method (public) ("pos" "<Cell>" "offset" "<fx>") #f "<Cell+>" 474 18 474 30 ("else" "1" "-" "previous!" "0" "<=" "cond" "iterate" "copy" "let" "Cell+" "<Cell+>" "fx" "<fx>" "offset" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "get-column" method (public) ("line" "<fx>") #f "<fx>" 485 18 485 28 ("get-col" "get-col~" "increase!" "get-char" "memq?" "while" "0" "Cell" "new" "pos" "let" "fx" "<fx>" "line")}
        {Lisp-Entry "dynamic-scrollee?" method (override) () #f #f 497 20 497 37 ()}
        {Lisp-Entry "dynamic-set-scrollee-size" method (override) () #f #f 501 20 501 45 ("scrollee-size-update" "scrollee-size-update~" "view" "lambda" "for-each-client" "get-size" "size" "let" "nextmethod")}
        {Lisp-Entry "scrollee-width" method (override) () #f #f 509 20 509 34 ("4000" "calculate-scrollee-width" "left-padding" "+" "dynamic-scrollee-width?" "dynamic-scrollee-width?~" "get-display-width" "get-display-width~" "wrap-width" "or" "wrap?" "and" "if" "single-client" "let")}
        {Lisp-Entry "scrollee-content-width" method (override) () #f #f 518 20 518 42 ("calculate-scrollee-width" "left-padding" "+")}
        {Lisp-Entry "calculate-scrollee-width" method () () #f #f 522 11 522 35 ("set!" ">" "when" "compute-width" "compute-width~" "paragraph-width" "Paragraph" "<Paragraph>" "paragraph" "fx" "<fx>" "line" "lambda" "for-each-paragraph" "0" "width" "let")}
        {Lisp-Entry "invalidate-update" method (override) () #f #f 537 20 537 37 ("wrap-content" "nextmethod")}
        {Lisp-Entry "get-length" method (public) () #f "<fx>" 547 18 547 28 ("get-paragraphs" "cardinality" "fx" "<fx>")}
        {Lisp-Entry "get-limit" method (public) () #f "<fx>" 551 18 551 27 ("1" "get-length" "-" "fx" "<fx>")}
        {Lisp-Entry "get-paragraph" method (public) ("line" "<fx>") #f "<Paragraph>" 555 18 555 31 ("get-paragraphs" "element" "Paragraph" "<Paragraph>" "fx" "<fx>" "line")}
        {Lisp-Entry "paragraph-string" method (public) ("line" "<fx>") #f "<string>" 559 18 559 34 ("get-paragraph" "get-string" "get-string~" "string" "<string>" "fx" "<fx>" "line")}
        {Lisp-Entry "paragraph-length" method (public) ("line" "<fx>") #f "<fx>" 563 18 563 34 ("paragraph-string" "cardinality" "fx" "<fx>" "line")}
        {Lisp-Entry "paragraph->string" method () ("paragraph" "<Paragraph>") #f "<string>" 567 11 567 28 ("get-string" "get-string~" "string" "<string>" "Paragraph" "<Paragraph>" "paragraph")}
        {Lisp-Entry "first-paragraph" method (public) () #f #f 571 18 571 33 ("0" "get-paragraph")}
        {Lisp-Entry "get-print-area" method (override) ("context") #f #f 580 20 580 34 ("scrollee-height" "800" "0" "Rect" "new" "context")}
        {Lisp-Entry "paginate-range" method () ("start" "end" "page-width" "page-height") #f #f 584 11 584 25 ("get-output" "get-output~" "get-keep-with-next?" "get-keep-with-next?~" "empty-string?" "not" "Rect" "put" "put~" "or" "effective-bottom" "set!" "<=" "if" "+" "bot" "get-height" "get-height~" "height" "get-format" "get-format~" "format" "get-string" "get-string~" "string" "paragraph-top" "let*" "<" ">=" "and" "when" "Paragraph" "<Paragraph>" "paragraph" "fx" "<fx>" "line" "lambda" "for-each-paragraph" "together" "bottom" "top" "0" "page" "List-Factory" "new" "pages" "let" "page-height" "page-width" "end" "start")}
        {Lisp-Entry "setup-printing" method (override) () #f #f 612 20 612 34 ("nextmethod" ":wrap-width" "cons" "wrap-content" "layout-scrollee" "50" "wrap-patch" "800" "set!" "wrap-width" "width" "let")}
        {Lisp-Entry "restore-printing" method (override) ("preserved") #f #f 623 20 623 36 ("wrap-content" "layout-scrollee" "wrap-patch" ":wrap-width" "getf" "wrap-width" "set!" "nextmethod" "preserved")}
        {Lisp-Entry "draw-enabled?" method (protected virtual) () #f #f 636 29 636 42 ("view-enabled?")}
        {Lisp-Entry "get-drawing-background" method (override) ("context") #f #f 640 20 640 42 ("nextmethod" "get-background" "get-background~" "or" "get-look" "look" "let" "Medium" "Color" "draw-enabled?" "not" "if" "context")}
        {Lisp-Entry "get-look" method (override) () #f #f 653 20 653 28 ("text" "find-look")}
        {Lisp-Entry "next-word" method (public) ("pos" "(constituent-test: constituent-test #f)") #f #f 662 18 662 27 ("get-end" "get-end~" "not" "c" "lambda" "forward-until" "forward-until~" "alphanumeric?" "or" "test" "end:" "start:" "self" "Text-Explorer" "new" "expl" "let" "constituent-test" "constituent-test:" "pos")}
        {Lisp-Entry "previous-word" method (public) ("pos" "(constituent-test: constituent-test #f)") #f #f 670 18 670 31 ("get-start" "get-start~" "not" "c" "lambda" "backward-until" "backward-until~" "alphanumeric?" "or" "test" "end:" "start:" "self" "Text-Explorer" "new" "expl" "let" "constituent-test" "constituent-test:" "pos")}
        {Lisp-Entry "get-constituent-test" method (public virtual) () #f #f 683 26 683 46 ("syntax" "get-constituent-test" "get-constituent-test~")}
        {Lisp-Entry "text-constituent?" method (public virtual) ("char") #f #f 687 26 687 43 ("syntax" "text-constituent?" "text-constituent?~" "char")}
        {Lisp-Entry "get-match-test" method (public virtual) () #f #f 691 26 691 40 ("syntax" "get-match-test" "get-match-test~")}
        {Lisp-Entry "move-forward" method (public) ("pos" "word?") #f #f 700 18 700 30 ("next-cell" "next-word" "if" "when" "word?" "pos")}
        {Lisp-Entry "move-backward" method (public) ("pos" "word?") #f #f 705 18 705 31 ("previous-cell" "previous-word" "if" "when" "word?" "pos")}
        {Lisp-Entry "insert-char" method (public) ("range" "c") #f #f 715 18 715 29 ("string" "insert-string" "c" "range")}
        {Lisp-Entry "insert-string" method (public) ("range" "str") #f #f 719 18 719 31 ("split-lines" "replace" "str" "range")}
        {Lisp-Entry "insert-newline" method (public) ("range") #f #f 723 18 723 32 ("insert-string" "range")}
        {Lisp-Entry "insert-styled" method (public) ("range" "string" "style") #f #f 727 18 727 31 ("Range$Cell$" "new" "stylize-range" "insert-string" "end" "locate-style" "else" "default-style" "not" "Style" "is?" "cond" "get-start" "get-start~" "start" "let" "style" "string" "range")}
        {Lisp-Entry "insert-link" method (public) ("range" "string" "(font: font #f)" "(anchor: anchor #f)" "(action: action #f)") #f #f 734 18 734 29 ("insert-styled" "Color" "color:" "Link-Style" "new" "style" "Link" "Font" "or" "let*" "action" "action:" "anchor" "anchor:" "font" "font:" "string" "range")}
        {Lisp-Entry "insert-image" method (public) ("range" "moniker") #f #f 740 18 740 30 ("insert-styled" "moniker:" "Image-Style" "new" "style" "let" "moniker" "range")}
        {Lisp-Entry "insert-view" method (public) ("range" "view/form") #f #f 745 18 745 29 ("insert-styled" "view:" "View-Style" "new" "style" "let" "set-parent" "set-parent~" "get-line" "get-line~" "get-paragraph" "paragraph" "get-end" "get-end~" "end" "instantiate" "instantiate~" "View" "is?" "if" "view" "let*" "view/form" "range")}
        {Lisp-Entry "create-table" method (public) ("(size: size #f)" "(header?: header? #t)" "(node-column?: node-column? #f)" "(columns: columns '())" "(row-count: row-count #f)") #f #f 759 18 759 30 ("header" "set-shown?" "set-shown?~" "set-size" "set-size~" "locate" "locate~" "Table-Border" "border" "0" "naturals" "children:" "row-height:" "add-row" "add-row~" "Formatted-Text-View" "new" "map" "children" "line" "fx" "<fx>" "cast" "quotient" "row-height" "16" "increase!" "not" "get-height" "get-height~" "height" "when" "setup-rows" "class:" "add-column" "~" "apply" "set!" ":display-images?" "list" "others" "width:" "width" "title:" "getf" "title" "Tree-Label-Column" "Tree-Node-Column" "if" "class" "and" "node?" "let*" "column" "lambda" "for-each" "first?" "let" "Tree-View" "<Tree-View>" "tree" "setup-columns" "define" "row-count" "row-count:" "columns" "columns:" "node-column?" "node-column?:" "header?" "header?:" "size" "size:")}
        {Lisp-Entry "insert-table" method (public) ("range" "." "rest") #f #f 797 18 797 30 ("insert-view" "create-table" "apply" "table" "let" "rest" "range")}
        {Lisp-Entry "insert-table-of-content" method (public virtual) () #f #f 808 26 808 49 ()}
        {Lisp-Entry "with-adjusted-marks" method () ("range" "thunk") #f #f 817 11 817 30 ("queue-list" "change-proc" "for-each" "adjust-marks" "adjust-marks~" "view" "lambda" "for-each-client" "new-queue" "procs" "caret" "let" "thunk" "range")}
        {Lisp-Entry "delete-range" method (public) ("range") #f #f 834 18 834 30 ("list" "replace" "range")}
        {Lisp-Entry "replace" method (public) ("range" "<Range$Cell$>" "strings") #f #f 838 18 838 25 ("replace-text" "lambda" "with-adjusted-marks" "strings" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "replace-text" method (protected) ("range" "<Range$Cell$>" "strings") #f #f 844 21 844 33 ("update-focus-actions" "update-focus-actions~" "when" "get-application" "appl" "call-content-change" "call-content-change~" "set-selection" "set-selection~" "client" "for-each-client" "replace" "lambda" "copy" "old-range" "new" "new-range" "undoer" "register-undo" "register-undo~" "set-modified?" "1" "+" "-" "syntax" "recolorize" "recolorize~" "update-displayed-from" "get-line" "get-line~" "start-line" "replace-range" "caret" "range-strings" "old" "length" "count" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "let" "strings" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "replace-range" method () ("range" "<Range$Cell$>" "strings") #f #f 871 11 871 24 ("with-update-locked" "<=" "model-update" "model-update~" "count" "make-string-paragraph" "map" "get-format" "get-format~" "last-format" "get-row-height" "get-row-height~" "set!" "do" "to" "from" "n" "for" "get-row" "row" "with" "loop" "visible-height" "visible-count" "increase!" "after" "wrap-paragraph-lowlevel" "for-each" "car" "paragraph-height" "cdr" "null?" "sum" "iterate" "paragraphs-height" "invalidate-paragraph" "Distance" "scroll-view" "scroll-view~" "get-height" "get-height~" "get-width" "get-width~" "Rect" "rect" "get-size" "get-size~" "size" "client" "lambda" "for-each-client" "/=" "layout-scrollee~" "dynamic-scrollee-width?" "dynamic-scrollee-width?~" "wrap?" "or" "and" "when" "single-client" "layout-scrollee" "wrap-paragraph" "delta" "let" "invalidate-replacements" "replace-ending" "replace-ending~" "replace-beginning" "replace-beginning~" "get-next" "get-next~" "root-row" "replace-sons" "replace-sons~" "=" "if" "caret-col" "-1" "caret-line" "last" "cast" "last-length" "get-length" "get-length~" "last-runs" "get-col" "get-col~" "0" "range-runs" "range-runs~" "first-runs" "strings->paragraphs" "paragraphs" "bottom" "last-par" "first-par" "range-height" "before" "length" "1" "-" "replaced" "el" "get-line" "get-line~" "sl" "get-end" "get-end~" "get-start" "get-start~" "replace-paragraphs" "+" "Cell" "new" "invalidate-replacement" "replace-range" "replace-range~" "get-bottom" "get-bottom~" "top" "cardinality" "inserted" "get-paragraph" "paragraph" "let*" "<string>" "string" "end" "start" "fx" "<fx>" "line" "replace-paragraph" "define" "strings" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "invalidate-paragraph" method () ("paragraph") #f #f 973 11 973 31 ("invalidate-rect" "invalidate-rect~" "get-height" "get-height~" "get-width" "get-width~" "Dimension" "new" "get-position" "get-position~" "position/size->rect" "rect" "let" "client" "lambda" "for-each-client" "paragraph")}
        {Lisp-Entry "get-text" method (public) () #f #f 985 18 985 26 ("text")}
        {Lisp-Entry "set-text" method (public) ("value") #f #f 989 18 989 26 ("text" "set!" "parse-text-content" "set-content" "value")}
        {Lisp-Entry "parse-text-content" method () ("content") #f #f 994 11 994 29 ("class-of" "category-identifier" "error" "else" "parse-jml-content" "JML-Node" "parse-formatted-content" "Formatted-Text-Model" "self" "is?" "null/pair?" "and" "parse-string-content" "string?" "empty-content" "not" "cond" "content")}
        {Lisp-Entry "parse-string-content" method () ("content") #f #f 1007 11 1007 31 ("split-lines" "paragraphs:" "Text" "new" "content")}
        {Lisp-Entry "parse-formatted-content" method () ("content") #f #f 1011 11 1011 34 ("paragraphs:" "styles:" "get-output" "get-output~" "formats:" "Formatted-Text" "map" "paragraphs" "put" "put~" "styles" "List-Factory" "formats" "action:" "Link" "Link-Small" "Link-Style" "scaled?:" "scaling:" "eq?" "peek" "peek~" "next" "scaling" "moniker" "moniker:" "resource:" "portfolio:" "Image-Style" "get-application" "get-images-portfolio" "get-images-portfolio~" "portfolio" "image" "image:" "set-font" "set-font~" "Font" "font" "font:" "set-highlight" "set-highlight~" "highlight" "highlight:" "set-color" "set-color~" "Color" "class-of" "dispatch" "symbol?" "color" "color:" "new-link-style" "action" ":link" "locate-style" "name" "style:" "Base" "base:" "Text-Style" "add-styling" "style" "string" "error" "parse-run" "pair?" "cond" "run" "accumulate" "unget" "unget~" "else" "32" "*" "get-left-margin" "get-left-margin~" "+" "n" "indent:" "16" "set-left-margin" "set-left-margin~" "set-bulleted?" "set-bulleted?~" ":bulleted" "case" "get-next" "get-next~" "target" "let" "done?" "done?~" "and" "while" "out?" "Format" "new" "set!" "not" "when" "proc" "lambda" "add-formatting" "Iterator" "<Iterator>" "parse-runs" "parse-format" "format" "iterate-sequence" "scan" "let*" "list" "cons" "string?" "if" "intern-style" "intern-format" "par" "parse-paragraph" "define" "content")}
        {Lisp-Entry "parse-jml-content" method () ("node") #f #f 1151 11 1151 28 ("paragraphs:" "styles:" "get-output" "get-output~" "formats:" "Formatted-Text" "par" "paragraphs" "put" "put~" "styles" "List-Factory" "formats" "Color" "class-of" "dispatch" "get-properties" "get-properties~" "parse-color" "set-color" "set-color~" "color" "value" "property" "for-each-property" "Base" "base:" "Text-Style" "first-child" "first-child~" "string" "parse-style-tag" "style" "get-children" "get-children~" "parse-p-run" "map" "16" "set-left-margin" "set-left-margin~" "set-bulleted?" "set-bulleted?~" "bulleted?" "get-property" "get-property~" "Format" "new" "set!" "not" "when" "proc" "lambda" "add-formatting" "let*" "parse-p-runs" "parse-p-format" "format" "error" "else" "parse-p-tag" "span" "p" "case" "get-tag" "get-tag~" "tag" "let" "get-text" "get-text~" "list" "cons" "JML-Text" "is?" "if" "intern-style" "intern-format" "parse-jml-paragraph" "define" "node")}
        {Lisp-Entry "patch-formatted-bug" method (public) () #f #f 1228 18 1228 37 ("get-runs" "get-runs~" "get-style" "get-style~" "intern-style" "set-style" "set-style~" "run" "for-each" "get-format" "get-format~" "intern-format" "set-format" "set-format~" "Paragraph" "<Paragraph>" "paragraph" "fx" "<fx>" "line" "lambda" "for-each-paragraph" "styles" "formats" "empty-interned" "empty-interned~")}
        {Lisp-Entry "read-formatted" method (protected) ("moniker") #f #f 1239 21 1239 35 ("read" "jazz-readtable" "readtable:" "cr-lf" "eol-encoding:" "path-settings" "call-with-input-file" "walk-for" "parameterize" "moniker")}
        {Lisp-Entry "save-formatted" method (protected) ("moniker") #f #f 1245 21 1245 35 ("print-formatted" "output" "lambda" "path-settings" "call-with-output-file" "moniker")}
        {Lisp-Entry "print-formatted" method (protected) ("output" "range" "<Range$Cell$>") #f #f 1251 21 1251 36 ("get-style" "get-style~" "export-string" "export-string~" "run" "for-each" "get-format" "get-format~" "get-rank" "range-paragraphs" "get-paragraphs" "paragraphs" "get-interned" "get-interned~" "range-runs" "range-runs~" "get-length" "get-length~" "end" "0" "get-col" "get-col~" "start" "get-end" "get-end~" "last?" "get-start" "get-start~" "get-line" "get-line~" "get-paragraph" "eq?" "get-runs" "get-runs~" "not" "paragraph" "range-paragraph-runs" "style" "styles" "print-styles" "set!" "if" "fmt" "lambda" "iterate" "first?" "let" "format" "formats" "print-formats" "define" "Range$Cell$" "<Range$Cell$>" "range" "output")}
        {Lisp-Entry "get-formatted-content" method (public) () #f #f 1309 18 1309 39 ("paragraphs:" "styles:" "List" "coerce" "formats:" "Formatted-Text" "get-output" "get-output~" "get-runs" "get-runs~" "get-style" "get-style~" "export-string" "export-string~" "list" "run" "map" "get-format" "get-format~" "get-rank" "cons" "put" "put~" "Paragraph" "<Paragraph>" "paragraph" "fx" "<fx>" "line" "lambda" "for-each-paragraph" "List-Factory" "new" "fact" "get-formatted-paragraphs" "define" "styles" "get-interned" "get-interned~" "formats" "let")}
        {Lisp-Entry "set-formatted-content" method (public) ("text") #f #f 1328 18 1328 39 ("error" "else" "set-unformatted-content" "Text" "complete-setup" "get-row-height" "get-row-height~" "increase!" "wrap-paragraph" "set!" "set-next" "set-next~" "set-previous" "set-previous~" "make-paragraph" "paragraph" "make-runs" "run-infos->string" "string" "reference-format" "and" "runs" "format" "bind" "info" "lambda" "accumulate" "rows" "root-row" "previous" "height" "0" "count" "intern-style" "intern-format" "map" "let*" "get-paragraphs" "get-paragraphs~" "paragraphs" "get-styles" "get-styles~" "styles" "get-formats" "get-formats~" "formats" "let" "Formatted-Text" "typecase" "text")}
        {Lisp-Entry "complete-setup" method () ("rows" "count" "height") #f #f 1360 11 1360 25 ("invalidate-update" "invalidate-update~" "reset-selection" "reset-selection~" "for-each-client" "get-width" "visible-width" "visible-height" "visible-count" "set!" "Axis" "coerce" "set-paragraphs" "height" "count" "rows")}
        {Lisp-Entry "wrap-content" method (public) ("context") #f #f 1369 18 1369 30 ("invalidate-view" "invalidate-view~" "layout-scrollee" "layout-scrollee~" "visible-height" "set!" "get-row-height" "get-row-height~" "increase!" "wrap-paragraph" "paragraph" "lambda" "get-paragraphs" "iterate" "0" "height" "not" "update-locked?" "or" "unless" "single-client" "let" "context")}
        {Lisp-Entry "wrap-paragraph" method (protected) ("context" "paragraph") #f #f 1385 21 1385 35 ("visible-height" "increase!" "-" "delta" "wrap-paragraph-lowlevel" "get-row-height" "get-row-height~" "before" "let" "paragraph" "context")}
        {Lisp-Entry "wrap-paragraph-lowlevel" method (protected) ("context" "paragraph") #f #f 1393 21 1393 44 ("wrap" "wrap~" "width" "flatten" "flatten~" "wrap?" "not" "100" "get-display-width" "get-display-width~" "single-client" "let" "get-format" "get-format~" "get-left-margin" "get-left-margin~" "left-padding" "display-width-patch" "wrap-patch" "wrap-width" "if" "-" "40" "max" "get-paragraph-width" "define" "paragraph" "context")}
        {Lisp-Entry "range-paragraphs" method () ("range" "<Range$Cell$>") #f #f 1409 11 1409 27 ("get-output" "get-output~" "set!" "eq?" "unless" "put" "put~" "not" "if" "get-paragraph" "paragraph" "get-end" "get-end~" "to" "get-start" "get-start~" "get-line" "get-line~" "from" "line" "for" "loop" "List-Factory" "new" "fact" "last" "let" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "replace-formatted" method (protected) ("range" "<Range$Cell$>" "info") #f #f 1422 21 1422 38 ("error" "else" "split-lines" "replace-text" "Text" "replace-formatted-text" "run-infos->string" "runs" "format" "bind" "run-info" "strings" "intern-style" "interned-styles" "intern-format" "map" "interned-formats" "get-paragraphs" "get-paragraphs~" "paragraphs" "get-styles" "get-styles~" "styles" "get-formats" "get-formats~" "formats" "let*" "Formatted-Text" "typecase" "lambda" "with-adjusted-marks" "info" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "replace-formatted-text" method (protected) ("range" "<Range$Cell$>" "strings" "formats" "styles" "paragraphs") #f #f 1443 21 1443 43 ("update-focus-actions" "update-focus-actions~" "call-content-change" "call-content-change~" "set-selection" "set-selection~" "client" "for-each-client" "replace-formatted" "copy" "old-range" "new-range" "undoer" "register-undo" "register-undo~" "set-modified?" "syntax" "recolorize" "recolorize~" "update-displayed-from" "start-line" "get-application" "appl" "replace-range" "caret" "old" "length" "count" "get-end" "get-end~" "set-line" "set-line~" "fix-view-style-parent" "reference-format" "set-format" "set-format~" "0" "inside?" "inside?~" "and" "when" "1" "get-length" "get-length~" "-" "line-length" "get-paragraph" "full-paragraph" "let*" "stylize-range" "cardinality" "fx" "<fx>" "cast" "+" "set-col" "set-col~" "car" "reference-style" "style" "ref" "string" "run" "runs" "format" "bind" "paragraph" "lambda" "for-each" "end" "get-col" "get-col~" "get-start" "get-start~" "get-line" "get-line~" "Cell" "new" "start" "apply-formats/styles" "get-output-string" "read-string-element" "print-formatted" "open-output-string" "output" "let" "range-formatted-text" "define" "paragraphs" "styles" "formats" "strings" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "toggle-bulleted" method (public) ("line") #f #f 1505 18 1505 33 ("16" "-16" "if" "+" "left-margin:" "not" "bulleted?:" "extend" "extend~" "get-bulleted?" "get-bulleted?~" "bulleted?" "get-left-margin" "get-left-margin~" "left-margin" "let" "format" "lambda" "get-paragraph" "modify-format" "line")}
        {Lisp-Entry "indent-paragraph" method (public) ("line" "paragraph" "delta") #f #f 1513 18 1513 34 ("+" "left-margin:" "extend" "extend~" "get-left-margin" "get-left-margin~" "left-margin" "let" "format" "lambda" "modify-format" "delta" "paragraph" "line")}
        {Lisp-Entry "set-justification" method () ("line" "paragraph" "justification") #f #f 1520 11 1520 28 ("justification:" "extend" "extend~" "format" "lambda" "modify-format" "justification" "paragraph" "line")}
        {Lisp-Entry "modify-format" method () ("paragraph" "proc") #f #f 1526 11 1526 24 ("set-paragraph-format" "get-format" "get-format~" "format" "let" "proc" "paragraph")}
        {Lisp-Entry "set-paragraph-format" method () ("paragraph" "format") #f #f 1531 11 1531 31 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "intern-format" "set-format" "set-format~" "format" "paragraph")}
        {Lisp-Entry "apply-style" method (public) ("name" "start" "(end #f)") #f #f 1539 18 1539 29 ("locate-style" "stylize" "end" "start" "name")}
        {Lisp-Entry "stylize" method (public) ("name/style" "start" "(end #f)") #f #f 1543 18 1543 25 ("locate-style" "Range$Cell$" "set-text-style" "paragraph-length" "get-line" "get-line~" "Cell" "new" "set!" "not" "when" "end" "start" "name/style")}
        {Lisp-Entry "stylize-range" method (public) ("range" "<Range$Cell$>" "style" "<Style>") #f #f 1549 18 1549 31 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "set-style" "set-style~" "end" "start" "paragraph" "line" "lambda" "for-each-range" "intern-style" "let" "Style" "<Style>" "style" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "modify-style" method (public) ("range" "<Range$Cell$>" "proc") #f #f 1560 18 1560 30 ("invalidate-paragraph" "wrap-paragraph" "modify-style" "modify-style~" "end" "start" "paragraph" "line" "lambda" "for-each-range" "proc" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "remove-style" method (public) ("range") #f #f 1568 18 1568 30 ("get-end" "get-end~" "get-start" "get-start~" "default-style" "apply-style" "range")}
        {Lisp-Entry "push-style" method (public) ("range" "style-name") #f #f 1572 18 1572 28 ("get-base" "get-base~" "cons" "set-base" "set-base~" "extend" "extend~" "style" "let" "inherits?" "inherits?~" "unless" "s" "lambda" "modify-style" "style-name" "range")}
        {Lisp-Entry "pop-style" method (public) ("range" "style-name") #f #f 1581 18 1581 27 ("remove" "set-base" "set-base~" "extend" "extend~" "style" "memq?" "when" "get-base" "get-base~" "base" "let" "s" "lambda" "modify-style" "style-name" "range")}
        {Lisp-Entry "set-text-alignment" method (public) ("range" "<Range$Cell$>" "alignment") #f #f 1591 18 1591 36 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "set-text-alignment" "set-text-alignment~" "end" "start" "paragraph" "line" "lambda" "for-each-range" "alignment" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "set-text-font" method (public) ("range" "<Range$Cell$>" "font" "<Font>") #f #f 1601 18 1601 31 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "set-text-font" "set-text-font~" "end" "start" "paragraph" "line" "lambda" "for-each-range" "Font" "<Font>" "font" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "set-text-style" method (public) ("range" "<Range$Cell$>" "style" "<Style>") #f #f 1611 18 1611 32 ("set-modified?" "invalidate-paragraph" "wrap-paragraph" "set-style" "set-style~" "end" "start" "paragraph" "line" "lambda" "for-each-range" "intern-style" "let" "Style" "<Style>" "style" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "set-text-color" method (public) ("range" "<Range$Cell$>" "color" "<Color>") #f #f 1621 18 1621 32 ("set-modified?" "invalidate-paragraph" "wrap-paragraph" "set-text-color" "set-text-color~" "end" "start" "paragraph" "line" "lambda" "for-each-range" "Color" "<Color>" "color" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "set-highlight-color" method (public) ("range" "<Range$Cell$>" "color" "<Color+>") #f #f 1630 18 1630 37 ("set-modified?" "invalidate-paragraph" "wrap-paragraph" "set-highlight-color" "set-highlight-color~" "end" "start" "paragraph" "line" "lambda" "for-each-range" "Color+" "<Color+>" "color" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "set-frame-color" method (public) ("range" "<Range$Cell$>" "color" "<Color+>") #f #f 1639 18 1639 33 ("set-modified?" "invalidate-paragraph" "wrap-paragraph" "set-frame-color" "set-frame-color~" "end" "start" "paragraph" "line" "lambda" "for-each-range" "Color+" "<Color+>" "color" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "toggle-bold" method (public) ("range" "<Range$Cell$>") #f #f 1648 18 1648 29 ("invalidate-paragraph" "wrap-paragraph" "toggle-bold" "toggle-bold~" "end" "start" "paragraph" "line" "lambda" "for-each-range" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "toggle-italic" method (public) ("range" "<Range$Cell$>") #f #f 1656 18 1656 31 ("invalidate-paragraph" "wrap-paragraph" "toggle-italic" "toggle-italic~" "end" "start" "paragraph" "line" "lambda" "for-each-range" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "toggle-underline" method (public) ("range" "<Range$Cell$>") #f #f 1664 18 1664 34 ("invalidate-paragraph" "wrap-paragraph" "toggle-underline" "toggle-underline~" "end" "start" "paragraph" "line" "lambda" "for-each-range" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "for-each-paragraph" method (public) ("proc" "(start: start 0)" "(end: end (get-limit))") #f #f 1672 18 1672 36 ("element" "to" "from" "line" "for" "loop" "get-paragraphs" "paragraphs" "or" "let" "get-limit" "end" "end:" "0" "start" "start:" "proc")}
        {Lisp-Entry "get-default-format" method (public) () #f #f 1685 18 1685 36 ("default-format")}
        {Lisp-Entry "set-default-format" method (public) ("value") #f #f 1689 18 1689 36 ("copy" "intern-format" "formats" "set-domain" "set-domain~" "default-format" "set!" "value")}
        {Lisp-Entry "get-formats-domain" method (public) () #f #f 1695 18 1695 36 ("formats")}
        {Lisp-Entry "get-named-formats" method (public) () #f #f 1699 18 1699 35 ("formats" "get-index" "get-index~")}
        {Lisp-Entry "get-interned-formats" method (public) () #f #f 1703 18 1703 38 ("formats" "get-interned" "get-interned~")}
        {Lisp-Entry "symbolize-format" method (public) ("format") #f #f 1707 18 1707 34 ("formats" "symbolize" "symbolize~" "format")}
        {Lisp-Entry "add-format" method (public) ("name" "pref-format") #f "<Format>" 1711 18 1711 28 ("formats" "register-exemplar" "extend" "extend~" "format" "let" "Format" "<Format>" "pref-format" "name")}
        {Lisp-Entry "locate-format" method (public) ("name/format" "(error?: error? #t)") #f "<Format>" 1716 18 1716 31 ("formats" "locate" "locate~" "is?" "if" "Format" "<Format>" "error?" "error?:" "name/format")}
        {Lisp-Entry "intern-format" method (public) ("format") #f "<Format>" 1722 18 1722 31 ("formats" "intern" "intern~" "Format" "<Format>" "format")}
        {Lisp-Entry "reference-format" method () ("formats" "reference") #f #f 1726 11 1726 27 ("element" "locate-format" "symbol?" "if" "reference" "formats")}
        {Lisp-Entry "get-default-style" method (public) () #f #f 1737 18 1737 35 ("default-style")}
        {Lisp-Entry "set-default-style" method (public) ("value") #f #f 1741 18 1741 35 ("copy" "intern-style" "styles" "set-domain" "set-domain~" "default-style" "set!" "value")}
        {Lisp-Entry "patch-default-style-height" method (public) () #f #f 1749 18 1749 44 ("get-line" "get-line~" "set-height" "set-height~" "set-row-height" "set-row-height~" "default-style" "get-font" "get-font~" "get-metrics" "get-metrics~" "get-height" "get-height~" "height" "0" "get-paragraph" "paragraph" "let" "text-empty?" "when")}
        {Lisp-Entry "get-styles-domain" method (public) () #f #f 1758 18 1758 35 ("styles")}
        {Lisp-Entry "get-named-styles" method (public) () #f #f 1762 18 1762 34 ("styles" "get-index" "get-index~")}
        {Lisp-Entry "get-interned-styles" method (public) () #f #f 1766 18 1766 37 ("styles" "get-interned" "get-interned~")}
        {Lisp-Entry "symbolize-style" method (public) ("style") #f #f 1770 18 1770 33 ("styles" "symbolize" "symbolize~" "style")}
        {Lisp-Entry "add-style" method (public) ("name" "pref-style") #f "<Style>" 1774 18 1774 27 ("styles" "register-exemplar" "extend" "extend~" "style" "let" "Style" "<Style>" "pref-style" "name")}
        {Lisp-Entry "locate-style" method (public) ("name/style" "(error?: error? #t)") #f "<Style>" 1779 18 1779 30 ("styles" "locate" "locate~" "is?" "if" "Style" "<Style>" "error?" "error?:" "name/style")}
        {Lisp-Entry "intern-style" method (public) ("style") #f "<Style>" 1785 18 1785 30 ("styles" "intern" "intern~" "Style" "<Style>" "style")}
        {Lisp-Entry "reference-style" method () ("styles" "reference") #f #f 1789 11 1789 26 ("element" "locate-style" "symbol?" "if" "reference" "styles")}
        {Lisp-Entry "fix-view-style-parent" definition () ("paragraph") #f #f 1795 15 1795 36 ("set-parent" "set-parent~" "get-view" "get-view~" "view" "View-Style" "is?" "when" "get-style" "get-style~" "style" "run" "lambda" "for-each" "get-runs" "get-runs~" "runs" "let" "paragraph")}
        {Lisp-Entry "comment-style?" method (public) ("style") #f #f 1805 18 1805 32 ("syntax" "comment-style?" "comment-style?~" "style")}
        {Lisp-Entry "string-style?" method (public) ("style") #f #f 1809 18 1809 31 ("syntax" "string-style?" "string-style?~" "style")}
        {Lisp-Entry "textual-style?" method (public) ("style") #f #f 1813 18 1813 32 ("syntax" "textual-style?" "textual-style?~" "style")}
        {Lisp-Entry "run-infos->string" definition () ("infos") #f #f 1822 15 1822 32 ("get-output-string" "format" "car" "string" "info" "lambda" "for-each" "open-output-string" "output" "let" "infos")}
        {Lisp-Entry "make-runs" method () ("string" "<string>" "styles" "infos") #f #f 1831 11 1831 20 ("Run" "new" "set!" "reference-style" "get-default-style" "not" "if" "style" "subseq!" "subseq" "cardinality" "fx" "<fx>" "cast" "+" "limit" "let*" "cdr" "rank" "bind-optionals" "car" "str" "info" "lambda" "map" "0" "offset" "let" "infos" "styles" "<string>" "string")}
        {Lisp-Entry "get-default-height" method (public) () #f "<fx>" 1849 18 1849 36 ("default-style" "get-height" "get-height~" "fx" "<fx>")}
        {Lisp-Entry "get-height-at" method (public) ("pos" "<Cell>") #f "<fx>" 1853 18 1853 31 ("get-col" "get-col~" "get-line" "get-line~" "get-paragraph" "get-line-at" "get-line-at~" "get-height" "get-height~" "fx" "<fx>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "compute-width" method (public) () #f "<fx>" 1862 18 1862 31 ("set!" ">" "when" "compute-width" "compute-width~" "w" "Paragraph" "<Paragraph>" "paragraph" "line" "lambda" "for-each-paragraph" "0" "width" "let" "fx" "<fx>")}
        {Lisp-Entry "new-range" method (public inline) ("start" "end") #f #f 1877 25 1877 34 ("Range$Cell$" "new" "end" "start")}
        {Lisp-Entry "range-strings" method (public) ("range" "<Range$Cell$>") #f "<list>" 1881 18 1881 31 ("get-output" "get-output~" "0" "1" "+" "naturals" "map" "put-sequence" "put-sequence~" "put" "put~" "List-Factory" "new" "dest" "get-col" "get-col~" "paragraph-string" "subseq" "get-line" "get-line~" "=" "if" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "let" "list" "<list>" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "range-first-string" method (public) ("range" "<Range$Cell$>") #f "<string>" 1893 18 1893 36 ("range-strings" "first" "string" "<string>" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "position-offset" method () ("pos" "<Cell>") #f "<fx>" 1902 11 1902 26 ("1" "paragraph-length" "+" "increase!" "below" "from" "n" "for" "loop" "0" "offset" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "let" "fx" "<fx>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "offset-position" method () ("offset" "<fx>") #f "<Cell>" 1911 11 1911 26 ("set!" "-" "new" "continuation-return" ">" "if" "1" "get-string" "get-string~" "cardinality" "+" "next" "Paragraph" "<Paragraph>" "paragraph" "line" "for-each-paragraph" "return" "lambda" "continuation-capture" "0" "scan" "let" "Cell" "<Cell>" "fx" "<fx>" "offset")}
        {Lisp-Entry "get-format-at" method (public) ("pos" "<Cell>") #f "<Format>" 1928 18 1928 31 ("get-format" "get-format~" "get-line" "get-line~" "get-paragraph" "paragraph" "let" "Format" "<Format>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "get-run-at" method (public) ("pos" "<Cell>") #f "<Run+>" 1933 18 1933 28 ("get-col" "get-col~" "get-run" "get-run~" "get-line" "get-line~" "get-paragraph" "paragraph" "let" "Run+" "<Run+>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "get-style-at" method (public) ("pos" "<Cell>") #f "<Style>" 1938 18 1938 30 ("get-style" "get-style~" "get-default-style" "not" "if" "get-run-at" "run" "let" "Style" "<Style>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "uncolorize-row" method (public) ("line" "<fx>") #f "<void>" 1945 18 1945 32 ("invalidate-paragraph" "default-style" "remove-coloring" "remove-coloring~" "when" "get-paragraph" "paragraph" "let" "void" "<void>" "fx" "<fx>" "line")}
        {Lisp-Entry "colorize" method (public) ("color" "<Color>" "start" "<Cell>" "(end #f)") #f #f 1951 18 1951 26 ("Range$Cell$" "set-text-color" "paragraph-length" "get-line" "get-line~" "new" "set!" "not" "when" "end" "Cell" "<Cell>" "start" "Color" "<Color>" "color")}
        {Lisp-Entry "fill" method (public) ("color" "<Color>" "pos" "<Cell>") #f "<void>" 1957 18 1957 22 ("set-highlight-color" "1" "+" "Range$Cell$" "new" "range" "let" "void" "<void>" "Cell" "<Cell>" "pos" "Color" "<Color>" "color")}
        {Lisp-Entry "unfill" method (public) ("pos" "<Cell>") #f "<void>" 1962 18 1962 24 ("set-highlight-color" "1" "+" "Range$Cell$" "new" "range" "let" "void" "<void>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "new-colorizer" method (public) () #f #f 1972 18 1972 31 ("self" "Text-Colorizer" "new")}
        {Lisp-Entry "line->view" method () ("line" "<fx>") #f "<fx>" 1981 11 1981 21 ("get-position" "get-position~" "get-v" "get-v~" "get-paragraph" "par" "let" "fx" "<fx>" "line")}
        {Lisp-Entry "text-regular-search" method (public) ("search-context" "(start: start #f)" "(end: end #f)" "(reversed?: reversed? #f)") #f #f 1991 18 1991 37 ("+" "1" "-" "Cell" "new" "=" "paragraph-string" "string" "<=" ">=" "n" "iter" "end-col" "end-line" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "text-beginning" "text-ending" "or" "pos" "offset-position" "cons" "to" "from" "bind" "when" "position-offset" "constituent-test:" "match-test:" "regular-search" "found" "get-string-content" "content" "get-contexts" "get-contexts~" "get-target" "get-target~" "search" "context" "lambda" "some?" "if" "->search-set" "search-set" "get-constituent-test" "constituent-test" "get-match-test" "match-test" "let" "reversed?" "reversed?:" "end" "end:" "start" "start:" "search-context")}
        {Lisp-Entry "text-regular-search-all" method (public) ("search-context" "(start: start #f)" "(end: end #f)") #f #f 2022 18 2022 41 ("queue-list" "constituent-test:" "match-test:" "regular-search-all" "+" "Cell" "new" "cons" "enqueue" "to" "from" "bind" "found" "for-each" "get-string" "get-string~" "substring" "str" "Paragraph" "<Paragraph>" "paragraph" "line" "lambda" "new-range" "for-each-range" "text-ending" "text-beginning" "or" "->search-set" "search-set" "get-constituent-test" "constituent-test" "get-match-test" "match-test" "new-queue" "queue" "let" "end" "end:" "start" "start:" "search-context")}
        {Lisp-Entry "text-search" method (public) ("context" "." "rest") #f #f 2039 18 2039 29 ("car" "if" "text-regular-search" "apply" "found" "let" "rest" "context")}
        {Lisp-Entry "text-search-all" method (public) ("context" "." "rest") #f #f 2046 18 2046 33 ("text-regular-search-all" "apply" "car" "map" "rest" "context")}
        {Lisp-Entry "search-context" method (protected) ("obj" "(whole-words?: whole-words? #f)" "(ignore-case?: ignore-case? #f)") #f #f 2050 21 2050 35 ("get-constituent-test" "constituent-test:" "get-match-test" "match-test:" "or" "make-search-context" "else" "get-contexts" "get-contexts~" "car" "Search-Set" "Search-Context" "is?" "cond" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "obj")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 2067 25 2067 45 ("Text-Model-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 2076 11 2076 17 ()
        {Lisp-Entry "import" import () () #f #f 2079 1 2079 7 ("jazz.designer")}
        {Lisp-Entry "Text-Model-Descriptor" class () ((extends . "Outline-View-Descriptor")) #f #f 2082 7 2082 28 ("Outline-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 2085 3 2085 7 ("eol-encoding" "char-encoding" "paragraph-spacing" "domain" "Boolean-Domain" "<Boolean-Domain>" "text-content" "title:" "text" "name:" "Property-Descriptor" "<Property-Descriptor>" "default-style" "default-format" "wrap?" "name-info" "class-info" "categorized:" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Text-Palette"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Palette.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.Text-Palette" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.dialog" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Text-Palette" class (undocumented) ((extends . "Layout-View")) #f #f 50 20 50 32 ("Layout-View")
        {Lisp-Entry "client" slot () ((initialize . "#f")) #f #f 53 8 53 14 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("on-insert-table" "insert-table" "table-separator" "on-insert-image" "insert-image" "image-separator" "on-insert-link" ":form" "insert-link" "link-separator" "on-toggle-ruler" "toggle-ruler" "ruler-separator" "on-increase-indent" "increase-indent" "on-decrease-indent" "decrease-indent" "Push-Tool" "<Push-Tool>" "on-bulleted" "bulleted" "right" "justify-right" "justify-center" "left" "justification:" "on-justify" "justification" "justify-left" "format" "Text-Format-Combo" "<Text-Format-Combo>" "format-border" "top" "selected?:" "alignment-top" "center" "alignment-center" "bottom" "alignment:" "on-alignment" "alignment" "group:" "alignment-bottom" "Radio-Tool" "<Radio-Tool>" "on-pick-frame-color" "Dark-Red" "on-frame-color" "frame-color" "on-pick-highlight-color" "Dark-Green" "on-highlight-color" "highlight-color" "on-pick-text-color" "pick" "Dark-Blue" "color:" "body" "!" "<!>" "on-text-color" "31" "text-color" "Text-Color-Combo" "<Text-Color-Combo>" "on-underline" "underline" "on-italic" "italic" "on-bold" ":focus" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "bold" "Toggle-Tool" "<Toggle-Tool>" "Separator" "<Separator>" "size" "Text-Size-Combo" "<Text-Size-Combo>" "40" "size-border" "font" "Text-Font-Combo" "<Text-Font-Combo>" "140" "font-border" "enabled?:" "style" "Text-Style-Combo" "<Text-Style-Combo>" "166" "blue:" "188" "green:" "200" "red:" "border-color:" "1" "2" "border-insets:" "22" "120" "Dimension" "size:" "style-border" "name:" "Border-View" "<Border-View>" "Medium" "Color" "background:" "0" "5" "4" "Rect" "layout-insets:" "flow" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 112 25 112 38 ("text-palette" "rest")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 116 20 116 35 ()}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 125 25 125 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 129 25 129 35 ()}
        {Lisp-Entry "host-install" method (override) () #f #f 133 20 133 32 ("on-focus-change" "method-name:" "self" "target:" "Event-Handler" "new" "add-focus-listener" "add-focus-listener~" "get-application" "appl" "let")}
        {Lisp-Entry "host-uninstall" method (override) () #f #f 138 20 138 34 ("self" "remove-focus-listener" "remove-focus-listener~" "get-application" "appl" "let")}
        {Lisp-Entry "on-focus-change" method () ("evt") #f #f 148 11 148 26 ("get-guest" "get-guest~" "eq?" "get-host" "get-host~" "host" "or" "enable-buttons" "activate-text" "on-text" "method-name:" "target:" "Event-Handler" "new" "add-text-listener" "add-text-listener~" "not" "remove-text-listener" "remove-text-listener~" "self" "text-listener?" "text-listener?~" "Formatted-Text-View" "old-focus" "is?" "and" "when" "get-focus" "get-focus~" "focus" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-text" method () ("evt") #f #f 168 11 168 18 ("selection-change" ":selection-change" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "enable-buttons" method (protected virtual) ("enabled?") #f #f 173 29 173 43 ("insert-table" "insert-image" "insert-link" "toggle-ruler" "frame-color" "highlight-color" "text-color" "increase-indent" "decrease-indent" "bulleted" "numbered" "justify-right" "justify-center" "justify-left" "alignment-top" "alignment-center" "alignment-bottom" "underline" "italic" "bold" "size" "font" "style" "format" "locate" "set-enabled?" "set-enabled?~" "enabled?")}
        {Lisp-Entry "on-insert-link" method () ("evt") #f #f 207 11 207 25 ("bell" "else" "=" "Range$Cell$" "get-anchor" "get-anchor~" "get-address" "get-address~" "export-string" "export-string~" "Cell" "determine-run-range" "determine-run-range~" "get-run-at" "get-run-at~" "run" "get-line" "get-line~" "get-paragraph" "get-paragraph~" "paragraph" "is-not?" "nu=?" "cond" "get-style-at" "get-style-at~" "style" "get-selected-string" "get-selected-string~" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "get-selection" "get-selection~" "selection" "let*" "Link-Style" "new" "apply" "or" "client" "replace-styled" "replace-styled~" "list" "if" "Link" "base:" "arguments" "let" "Link-Style-Dialog" "get-modal" "receive" "range" "range:" "anchor" "anchor:" "address" "address:" "text" "text:" "replace" "define" "evt")}
        {Lisp-Entry "on-insert-image" method () ("evt") #f #f 238 11 238 26 ("client" "insert-styled" "insert-styled~" "moniker:" "Image-Style" "new" "style" "choose-file" "moniker" "let*" "evt")}
        {Lisp-Entry "on-insert-table" method () ("evt") #f #f 244 11 244 26 ("2" "row-count:" "100" "width:" "columns:" "node-column?:" "header?:" "101" "304" "Dimension" "size:" "client" "insert-table" "insert-table~" "evt")}
        {Lisp-Entry "activate-text" method () ("text") #f #f 253 11 253 24 ("selection-change" "size" "font" "style" "format" "locate" "set-client" "set-client~" "set!" "client" "neq?" "when" "text")}
        {Lisp-Entry "selection-change" method () () #f #f 268 11 268 27 ("let" "else" "list" "get-application" "set-selected" "set-selected~" "reference:" "class-of" "category-identifier" "model:" "action:" "Form" "form:" "Designer" "new" "designer" "get-view" "get-view~" "view" "View-Style" "typecase" "get-bulleted?" "get-bulleted?~" "bulleted" "right" "justify-right" "justify-center" "left" "get-justification" "get-justification~" "justify-left" "top" "alignment-top" "center" "alignment-center" "eq?" "alignment-bottom" "get-underline?" "get-underline?~" "underline" "get-italic?" "get-italic?~" "italic" "get-bold?" "get-bold?~" "bold" "set-selected?" "set-selected?~" "get-font" "get-font~" "Text-Style" "is?" "and" "bottom" "get-alignment" "get-alignment~" "or" "alignment" "get-style-at" "get-style-at~" "get-line" "get-line~" "get-paragraph" "get-paragraph~" "get-format" "get-format~" "get-end" "get-end~" "end" "client" "get-model" "get-model~" "model" "let*" "size" "font" "style" "format" "locate" "selection-change" "selection-change~")}}}})
"Text-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Text-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Text-Preferences" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Text-Preferences" class (undocumented) ((extends . "Document-Preferences")) #f #f 45 20 45 36 ("Document-Preferences")
        {Lisp-Entry "background" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 22 ()}
        {Lisp-Entry "get-background" accessor () () #f #f 48 52 48 60 ()}
        {Lisp-Entry "set-background" accessor () () #f #f 48 52 48 60 ()}
        {Lisp-Entry "base-format" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 23 ()}
        {Lisp-Entry "get-base-format" accessor () () #f #f 49 52 49 60 ()}
        {Lisp-Entry "set-base-format" accessor () () #f #f 49 52 49 60 ()}
        {Lisp-Entry "default-format" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 26 ()}
        {Lisp-Entry "get-default-format" accessor () () #f #f 50 52 50 60 ()}
        {Lisp-Entry "set-default-format" accessor () () #f #f 50 52 50 60 ()}
        {Lisp-Entry "base-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 22 ()}
        {Lisp-Entry "get-base-style" accessor () () #f #f 51 52 51 60 ()}
        {Lisp-Entry "set-base-style" accessor () () #f #f 51 52 51 60 ()}
        {Lisp-Entry "default-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 52 12 52 25 ()}
        {Lisp-Entry "get-default-style" accessor () () #f #f 52 52 52 60 ()}
        {Lisp-Entry "set-default-style" accessor () () #f #f 52 52 52 60 ()}
        {Lisp-Entry "pulse-caret?" property () ((initialize . "#t") (accessors . "generate")) #f #f 53 12 53 24 ()}
        {Lisp-Entry "get-pulse-caret?" accessor () () #f #f 53 52 53 60 ()}
        {Lisp-Entry "set-pulse-caret?" accessor () () #f #f 53 52 53 60 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("styles" "Styles-Preferences" "<Styles-Preferences>" "formats" "name:" "Formats-Preferences" "<Formats-Preferences>" "Text-Style" "base-style:" "Text-Base" "Format" "base-format:" "Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 67 25 67 45 ("Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 76 11 76 17 ()
        {Lisp-Entry "import" import () () #f #f 79 1 79 7 ("jazz.designer")}
        {Lisp-Entry "Text-Preferences-Descriptor" class () ((extends . "Document-Preferences-Descriptor")) #f #f 82 7 82 34 ("Document-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 85 3 85 7 ("pulse-caret?" "default-style" "background" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Text-Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "Text-Request.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.Text-Request" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Text-Request" class (undocumented) ((extends . "View")) #f #f 45 20 45 32 ("View")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("209" "cancel" "default?:" "on-ok" "action-handler:" "24" "80" "143" "122" "title:" "ok" "Push-Button" "<Push-Button>" "on-cancel" "escape-press-handler:" "on-return" ":host" "Event-Handler" "return-press-handler:" "wrap?:" "top-padding:" "2" "left-padding:" "text" "Entry-Text-View" "<Entry-Text-View>" "fill" "layout-type:" "content" "name:" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "121" "390" "7" "6" "Point" "position:" "Border-View" "<Border-View>" "180" "402" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "dialog-class" method (meta) () #f #f 64 16 64 28 ("Text-Request-Dialog")}
        {Lisp-Entry "meta" class () () #f #f 69 9 69 13 ("Dialog" "extends" "Text-Request-Dialog")
          {Lisp-Entry "focus-gained" method () () #f #f 72 13 72 25 ("text" "guest" "locate" "locate~" "acquire-focus" "acquire-focus~" "nextmethod")}
          {Lisp-Entry "on-return" method () ("evt") #f #f 77 13 77 22 ("get-modal-result" "end-modal" "text" "guest" "locate" "locate~" "insert-newline" "insert-newline~" "get-shift?" "get-shift?~" "if" "evt")}
          {Lisp-Entry "get-modal-result" method () () #f #f 83 13 83 29 ("text" "guest" "locate" "locate~" "get-string-content" "get-string-content~")}}}}})
"Text-Search"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Text-Search.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.Text-Search" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}
      {Lisp-Entry "Text-Search" class () ((extends . "Search")) #f #f 44 7 44 18 ("Search")
        {Lisp-Entry "get-icon" method (override) () #f #f 52 20 52 28 ("Image-Resource")}}}})
"Text-Search-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Text-Search-Preferences.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.Text-Search-Preferences" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Text-Search-Preferences" class (undocumented) ((extends . "Search-View-Preferences")) #f #f 44 20 44 43 ("Search-View-Preferences")
        {Lisp-Entry "active-domain" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 25 ()}
        {Lisp-Entry "get-active-domain" accessor () () #f #f 47 50 47 58 ()}
        {Lisp-Entry "set-active-domain" accessor () () #f #f 47 50 47 58 ()}
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("title:" "install" "<install>")}}}})
"Text-Search-Result"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Text-Search-Result.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.search.Text-Search-Result" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui")}
      {Lisp-Entry "Text-Search-Result" class () ((extends . "Search-Result")) #f #f 44 7 44 25 ("Search-Result")
        {Lisp-Entry "client" slot () ((getter . "generate")) #f #f 47 8 47 14 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 47 22 47 30 ()}
        {Lisp-Entry "initialize" method (override) ("resultset" "(client: client #f)" "(beginning: beginning #f)" "(ending: ending #f)") #f #f 50 20 50 30 ("self" "client~self" "set!" "nextmethod" "ending" "ending:" "beginning" "beginning:" "client" "client:" "resultset")}
        {Lisp-Entry "effective-client" method (override) () #f #f 60 20 60 36 ("client" "or" "get-text-view" "get-text-view~" "Document" "get-guest" "get-guest~" "guest" "Frame-Host" "is?" "when" "first-frame" "frame" "let" "get-target-text" "define")}
        {Lisp-Entry "install-indicators" method (override) ("beginning-indicator" "ending-indicator") #f #f 76 20 76 38 ("1" "previous-pos" "previous-pos~" "ending" "and" "beginning" "ensure-displayed?:" "client" "edit" "edit~" "reset" "reset~" "not" "if" "position" "indicator" "install" "define" "ending-indicator" "beginning-indicator")}}}})
"Text-Search-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "Text-Search-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.search.Text-Search-View" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.search" "jazz.ui" "jazz.system" "jazz.jml")}
      {Lisp-Entry "Text-Search-View" class (undocumented) ((extends . "Search-View")) #f #f 47 20 47 36 ("Search-View")
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("54" "selection" "34" "declaration" "selected?:" "group:" "18" "120" "Dimension" "size:" "14" "13" "Point" "position:" "window" "Radio-Button" "<Radio-Button>" ">" "<content" "<content~>" "title:" "domain" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "preferences" method () () #f #f 59 11 59 22 ("text" "search-manager" "tools" "get-preferences")}
        {Lisp-Entry "get-search-domains" method (override) () #f #f 68 20 68 38 ("selection" "declaration" "window")}
        {Lisp-Entry "search-targets" method (override) ("find" "replace") #f #f 79 20 79 34 ("selection" "declaration" "window" "get-search-domain" "case" "Text-View" "is?" "when" "current-document" "guest" "empty?" "empty?~" "get-selection" "get-selection~" "search-selection" "get-end" "get-end~" "ending:" "beginning:" "message-box" "declaration-range" "declaration-range~" "range" "search-declaration" "acquire-focus" "acquire-focus~" "client:" "find-forward" "find-forward~" "get-start" "get-start~" "set-caret" "set-caret~" "set-active-search-result" "Text-Search-Result" "result" "Search-Resultset" "resultset" "Text-Search" "new" "search" "bell" "not" "if" "active-text" "text" "let" "search-window" "define" "replace" "find")}}}})
"Text-Size-Combo"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Size-Combo.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.text.Text-Size-Combo" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Text-Size-Combo" class (undocumented) ((extends . "Text-Combo")) #f #f 43 20 43 35 ("Text-Combo")
        {Lisp-Entry "client-update" method (override) () #f #f 51 20 51 33 ("->string" "list" "size" "lambda" "map" "set-choices" "72" "48" "36" "24" "18" "14" "12" "10" "9" "8" "size-list" "define")}
        {Lisp-Entry "selection-change" method (override) () #f #f 65 20 65 36 ("get-font" "get-font~" "get-point-size" "get-point-size~" "->string" "set-content" "Text-Style" "is?" "if" "get-model" "get-model~" "get-style-at" "get-style-at~" "style" "client" "get-end" "get-end~" "end" "let*")}
        {Lisp-Entry "combo-choice" method (override) () #f #f 78 20 78 32 ("selection-change" "get-value" "client" "set-selection-point-size" "set-selection-point-size~")}}}})
"Text-Style"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Style.jazz"} 240884279. jazz
    {Lisp-Entry "jazz.ui.text.Text-Style" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library.exemplar" "jazz.graphic")}
      {Lisp-Entry "Text-Style" class () ((extends . "Style")) #f #f 45 7 45 17 ("exemplar+=?" "attributes" "Style")
        {Lisp-Entry "font" definition () ((initialize . "#f") (test . "exemplar+=?")) #f #f 49 5 49 9 ()}
        {Lisp-Entry "get-font" accessor () () #f #f 49 5 49 9 ()}
        {Lisp-Entry "set-font" accessor () () #f #f 49 5 49 9 ()}
        {Lisp-Entry "color" definition () ((initialize . "#f") (test . "exemplar+=?")) #f #f 50 5 50 10 ()}
        {Lisp-Entry "get-color" accessor () () #f #f 50 5 50 10 ()}
        {Lisp-Entry "set-color" accessor () () #f #f 50 5 50 10 ()}
        {Lisp-Entry "highlight" definition () ((initialize . "#f") (test . "exemplar+=?")) #f #f 51 5 51 14 ()}
        {Lisp-Entry "get-highlight" accessor () () #f #f 51 5 51 14 ()}
        {Lisp-Entry "set-highlight" accessor () () #f #f 51 5 51 14 ()}
        {Lisp-Entry "frame" definition () ((initialize . "#f") (test . "exemplar+=?")) #f #f 52 5 52 10 ()}
        {Lisp-Entry "get-frame" accessor () () #f #f 52 5 52 10 ()}
        {Lisp-Entry "set-frame" accessor () () #f #f 52 5 52 10 ()}
        {Lisp-Entry "get-height" method (override) () #f #f 60 20 60 30 ("get-font" "get-metrics" "get-metrics~" "get-height" "get-height~")}
        {Lisp-Entry "run-width" method (override) ("run") #f #f 64 20 64 29 ("String" "coerce" "get-font" "text-width" "text-width~" "get-string" "get-string~" "string" "let" "run")}
        {Lisp-Entry "scan" method (override) ("h" "<fx>" "start" "<fx>" "end" "<fx>" "tabs" "run" "<Run>" "proc") #f #f 75 20 75 24 ("increase!" "get-font" "get-char-width" "get-char-width~" "2" "fxround/" "+" "-" "width" "cdr" "set!" "car" "<=" "while" "begin" "eqv?" "if" "element" "c" "min" "max" "below" "from" "n" "for" "loop" "cardinality" "len" "right" "mid" "left" "get-string" "get-string~" "string" "let" "proc" "Run" "<Run>" "run" "tabs" "end" "start" "fx" "<fx>" "h")}
        {Lisp-Entry "Break-Characters" definition () () #f #f 103 14 103 30 ()}
        {Lisp-Entry "wrap" method (override) ("context" "margin" "h" "<fx>" "v" "<fx>" "width" "<fx>" "tabs" "place" "break" "run" "<Run>") #f #f 107 20 107 24 ("=" ">=" "if" "self" "subseq!" "new" "let" "not" "or" ">" "and" "+" "Break-Characters" "memq?" "when" "set!" "right" "mid" "left" "n" "char" "<char>" "c" "lambda" "scan" "rightmost" "brk-right" "brk" "0" "offset" "1" "-" "end" "cardinality" "len" "get-string" "get-string~" "string" "start" "let*" "Run" "<Run>" "run" "break" "place" "tabs" "width" "v" "fx" "<fx>" "h" "margin" "context")}
        {Lisp-Entry "height-update" method (override) ("height") #f #f 139 20 139 33 ("height")}
        {Lisp-Entry "draw-style" method (override) ("surface" "<Surface>" "context" "string" "<Sequence>" "h" "<fx>" "v" "<fx>" "line-height" "<fx>" "tabs" "left" "<fx>" "enabled?" "<bool>") #f "<fx>" 148 20 148 30 ("frame-rect" "frame-rect~" "Rect" "new" "rect" "when" "draw-tabbed-text" "draw-tabbed-text~" "width" "0" "String" "coerce" "draw-text" "draw-text~" "Dark" "Color" "set-text-color" "set-text-color~" "begin" "not" "get-frame" "frame" "get-highlight" "highlight" "get-color" "Black" "registered-color" "print-black/white?:" "getf" "if" "color" "justify-element" "+" "get-metrics" "get-metrics~" "get-height" "get-height~" "font-height" "let*" "set-font" "set-font~" "Label" "registered-font" "get-font" "or" "font" "let" "bool" "<bool>" "enabled?" "left" "tabs" "line-height" "v" "fx" "<fx>" "h" "Sequence" "<Sequence>" "string" "context" "Surface" "<Surface>" "surface")}}}})
"Text-Style-Combo"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-Style-Combo.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.text.Text-Style-Combo" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Text-Style-Combo" class (undocumented) ((extends . "Text-Combo")) #f #f 43 20 43 36 ("Text-Combo")
        {Lisp-Entry "client-update" method (override) () #f #f 51 20 51 33 ("key:" "client" "get-model" "get-model~" "get-named-styles" "get-named-styles~" "table-keys" "string-ci<?" "sort" "->string" "base:" "Text-Style" "new" "list" "name" "lambda" "map" "set-choices")}
        {Lisp-Entry "selection-change" method (override) () #f #f 62 20 62 36 ("->string" "set-content" "last" "not-null?" "and" "name" "get-base" "get-base~" "base" "get-model" "get-model~" "get-style-at" "get-style-at~" "style" "client" "get-end" "get-end~" "end" "let*")}
        {Lisp-Entry "combo-choice" method (override) () #f #f 75 20 75 32 ("selection-change" "style?:" "get-value" "client" "set-selection-format/style" "set-selection-format/style~")}}}})
"Text-Style-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Text-Style-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.preference.Text-Style-Preferences" module (protected) () #f #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Text-Style-Preferences" class (undocumented) ((extends . "Style-Preferences")) #f #f 46 20 46 42 ("Style-Preferences")
        {Lisp-Entry "font" property () ((accessors . "generate")) #f #f 49 12 49 16 ()}
        {Lisp-Entry "get-font" accessor () () #f #f 49 32 49 40 ()}
        {Lisp-Entry "set-font" accessor () () #f #f 49 32 49 40 ()}
        {Lisp-Entry "color" property () ((accessors . "generate")) #f #f 50 12 50 17 ()}
        {Lisp-Entry "get-color" accessor () () #f #f 50 32 50 40 ()}
        {Lisp-Entry "set-color" accessor () () #f #f 50 32 50 40 ()}
        {Lisp-Entry "highlight" property () ((accessors . "generate")) #f #f 51 12 51 21 ()}
        {Lisp-Entry "get-highlight" accessor () () #f #f 51 32 51 40 ()}
        {Lisp-Entry "set-highlight" accessor () () #f #f 51 32 51 40 ()}
        {Lisp-Entry "frame" property () ((accessors . "generate")) #f #f 52 12 52 17 ()}
        {Lisp-Entry "get-frame" accessor () () #f #f 52 32 52 40 ()}
        {Lisp-Entry "set-frame" accessor () () #f #f 52 32 52 40 ()}
        {Lisp-Entry "form" form () () #f #f 55 3 55 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "->exemplar" method (override) () #f #f 64 20 64 30 ("Text-Style" "new" "apply" "frame:" "frame" "highlight:" "highlight" "color:" "color" "font:" "font" "alignment:" "alignment" "base:" "list" "base" "specified?" "if" "arguments" "let")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 80 25 80 45 ("Text-Style-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 89 11 89 17 ()
        {Lisp-Entry "import" import () () #f #f 92 1 92 7 ("jazz.designer")}
        {Lisp-Entry "Text-Style-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 95 7 95 40 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 98 3 98 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "frame" "highlight" "color" "font" "alignment" "base" "categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Text-Syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "syntax" "Text-Syntax.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.syntax.Text-Syntax" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.catalog")}
      {Lisp-Entry "Text-Syntax" class () ((extends . "Object")) #f #f 44 7 44 18 ("Object")
        {Lisp-Entry "model" slot () ((accessors . "generate")) #f #f 47 8 47 13 ()}
        {Lisp-Entry "get-model" accessor () () #f #f 47 28 47 36 ()}
        {Lisp-Entry "set-model" accessor () () #f #f 47 28 47 36 ()}
        {Lisp-Entry "colorize?" slot () ((accessors . "generate")) #f #f 48 8 48 17 ()}
        {Lisp-Entry "get-colorize?" accessor () () #f #f 48 28 48 36 ()}
        {Lisp-Entry "set-colorize?" accessor () () #f #f 48 28 48 36 ()}
        {Lisp-Entry "initialize" method (override) ("model" "(colorize?: colorize? #t)") #f #f 51 20 51 30 ("colorize?~self" "self" "model~self" "set!" "nextmethod" "colorize?" "colorize?:" "model")}
        {Lisp-Entry "preferences" method (protected virtual) () #f #f 62 29 62 40 ("Text-Preferences" "new")}
        {Lisp-Entry "comment-style?" method (public virtual) ("style") #f #f 71 26 71 40 ("style")}
        {Lisp-Entry "string-style?" method (public virtual) ("style") #f #f 75 26 75 39 ("style")}
        {Lisp-Entry "textual-style?" method (public virtual) ("style") #f #f 79 26 79 40 ("style")}
        {Lisp-Entry "default-extension" method (protected virtual) () #f #f 88 29 88 46 ()}
        {Lisp-Entry "extensions" method (protected virtual) () #f #f 92 29 92 39 ()}
        {Lisp-Entry "comment-string" method (public virtual) () #f #f 101 26 101 40 ()}
        {Lisp-Entry "title-comment-string" method (public virtual) () #f #f 105 26 105 46 ()}
        {Lisp-Entry "get-headers" method (public virtual) () #f "<list>" 114 26 114 37 ("list" "<list>")}
        {Lisp-Entry "get-chapters" method (public virtual) () #f "<list>" 118 26 118 38 ("get-output" "get-output~" "put" "put~" "get-chapter-label" "label" "2" "1" "0" "level" "subseq" "header" "paragraph-string" "paragraph-string~" "string" "get-column" "get-column~" "=" "when" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "to" "from" "bind" "info" "lambda" "for-each" "List-Factory" "new" "chapters" "make-search-context" "map" "model" "text-regular-search-all" "text-regular-search-all~" "occurences" "not" "if" "get-headers" "headers" "let" "list" "<list>")}
        {Lisp-Entry "get-chapter-label" method (public virtual) ("string" "col" "from" "to") #f #f 138 26 138 43 ("model" "position-offset" "position-offset~" "-" "+" "subseq" "to" "from" "col" "string")}
        {Lisp-Entry "get-first-special?" method (public virtual) () #f "<bool>" 142 26 142 44 ("bool" "<bool>")}
        {Lisp-Entry "get-first-chapter" method (public virtual) ("lst") #f #f 146 26 146 43 ("get-name" "get-name~" "not" "text-beginning" "text-beginning~" "0" "list" "model" "get-moniker" "get-moniker~" "file" "let" "car" "null?" "get-first-special?" "if" "lst")}
        {Lisp-Entry "get-remaining-chapters" method (public virtual) ("lst") #f #f 158 26 158 48 ("cdr" "null?" "get-first-special?" "if" "lst")}
        {Lisp-Entry "get-match-test" method (public virtual) () #f #f 169 26 169 40 ()}
        {Lisp-Entry "get-constituent-test" method (public virtual) () #f #f 173 26 173 46 ("word-constituent?")}
        {Lisp-Entry "text-constituent?" method (public) ("char") #f #f 177 18 177 35 ("get-constituent-test" "proc" "let" "char")}
        {Lisp-Entry "parser-class" method (public virtual) () #f #f 187 26 187 38 ("File-Parser")}
        {Lisp-Entry "translate-key" method (public virtual) ("key") #f #f 196 26 196 39 ("key")}
        {Lisp-Entry "auto-complete-characters" method (public virtual) () #f #f 205 26 205 50 ()}
        {Lisp-Entry "auto-complete-char?" method (public virtual) ("key" "last") #f #f 209 26 209 45 ("text-constituent?" "not" "auto-complete-characters" "memq?" "or" "last" "key")}
        {Lisp-Entry "favorite-completions" method (public virtual) () #f #f 214 26 214 46 ()}
        {Lisp-Entry "symbol-completions" method (public virtual) ("name") #f #f 218 26 218 44 ("name")}
        {Lisp-Entry "explorer-class" method (public virtual) () #f #f 227 26 227 40 ("Text-Explorer")}
        {Lisp-Entry "name-at" method (public virtual) ("range") #f #f 236 26 236 33 ("range-expr" "range")}
        {Lisp-Entry "expr-at" method (public virtual) ("pos") #f #f 240 26 240 33 ("expr-range" "name-at" "pos")}
        {Lisp-Entry "supports-expr?" method (public virtual) () #f #f 244 26 244 40 ()}
        {Lisp-Entry "range-expr" method (public virtual) ("range") #f #f 248 26 248 36 ("model" "get-string" "get-string~" "range")}
        {Lisp-Entry "expr-range" method (public virtual) ("pos") #f #f 252 26 252 36 ("get-range" "get-range~" "outer-expr" "outer-expr~" "end:" "start:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "let" "pos")}
        {Lisp-Entry "outer-range" method (public) ("range") #f #f 258 18 258 29 ("get-range" "get-range~" "outer-expr" "outer-expr~" "when" "range:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "let" "range")}
        {Lisp-Entry "colorize" method (protected) () #f #f 269 21 269 29 ("colorize-syntax" "colorize?" "when")}
        {Lisp-Entry "colorize-syntax" method (protected virtual) ("." "rest") #f #f 274 29 274 44 ("rest")}
        {Lisp-Entry "colorize-comments" method (protected virtual) ("." "rest") #f #f 278 29 278 46 ("rest")}
        {Lisp-Entry "colorize-declarations" method (protected virtual) ("." "rest") #f #f 282 29 282 50 ("rest")}
        {Lisp-Entry "recolorize" method (protected virtual) ("start" "end-line") #f #f 286 29 286 39 ("recolorize-text" "colorize?" "when" "end-line" "start")}
        {Lisp-Entry "recolorize-text" method (protected virtual) ("start" "end-line") #f #f 291 29 291 44 ("end-line" "start")}
        {Lisp-Entry "uncolorize-row" method (public) ("line" "<fx>") #f "<void>" 295 18 295 32 ("model" "uncolorize-row" "uncolorize-row~" "void" "<void>" "fx" "<fx>" "line")}
        {Lisp-Entry "find-imports" method (public virtual) ("symbol") #f #f 304 26 304 38 ("symbol")}}}})
"Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "Text-View.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.ui.text.Text-View" module (protected) () #f #f 38 18 38 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 41 1 41 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui.skin" "jazz.ui.dialog" "jazz.ui.clipboard" "jazz.ui" "jazz.system" "jazz.library.listener" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Text-View" class () ((extends . "Outline-View") (implements . "Document")) #f #f 55 7 55 16 ("char" "explicit" "Document" "Outline-View")
        {Lisp-Entry "text-content" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 59 22 59 34 ()}
        {Lisp-Entry "selectable?" property (protected) ((initialize . "#t") (accessors . "generate")) #f #f 60 22 60 33 ()}
        {Lisp-Entry "get-selectable?" accessor () () #f #f 60 72 60 80 ()}
        {Lisp-Entry "set-selectable?" accessor () () #f #f 60 72 60 80 ()}
        {Lisp-Entry "editable?" property (protected) ((initialize . "#t") (accessors . "generate")) #f #f 61 22 61 31 ()}
        {Lisp-Entry "get-editable?" accessor () () #f #f 61 72 61 80 ()}
        {Lisp-Entry "set-editable?" accessor () () #f #f 61 72 61 80 ()}
        {Lisp-Entry "accepts-returns?" property (protected) ((initialize . "#t") (accessors . "generate")) #f #f 62 22 62 38 ()}
        {Lisp-Entry "get-accepts-returns?" accessor () () #f #f 62 72 62 80 ()}
        {Lisp-Entry "set-accepts-returns?" accessor () () #f #f 62 72 62 80 ()}
        {Lisp-Entry "focus-selects-all?" property (protected) ((initialize . "#f") (accessors . "generate")) #f #f 63 22 63 40 ()}
        {Lisp-Entry "get-focus-selects-all?" accessor () () #f #f 63 72 63 80 ()}
        {Lisp-Entry "set-focus-selects-all?" accessor () () #f #f 63 72 63 80 ()}
        {Lisp-Entry "show-unfocused-selection?" property (protected) ((initialize . "#t") (accessors . "generate")) #f #f 64 22 64 47 ()}
        {Lisp-Entry "get-show-unfocused-selection?" accessor () () #f #f 64 72 64 80 ()}
        {Lisp-Entry "set-show-unfocused-selection?" accessor () () #f #f 64 72 64 80 ()}
        {Lisp-Entry "force-tab-navigate?" property (protected) ((initialize . "#f") (accessors . "generate")) #f #f 65 22 65 41 ()}
        {Lisp-Entry "get-force-tab-navigate?" accessor () () #f #f 65 72 65 80 ()}
        {Lisp-Entry "set-force-tab-navigate?" accessor () () #f #f 65 72 65 80 ()}
        {Lisp-Entry "syntax" slot (protected) ((initialize . "#f") (accessors . "generate")) #f #f 68 18 68 24 ()}
        {Lisp-Entry "get-syntax" accessor () () #f #f 68 65 68 73 ()}
        {Lisp-Entry "set-syntax" accessor () () #f #f 68 65 68 73 ()}
        {Lisp-Entry "document-controller" slot (protected) ((initialize . "#f")) #f #f 69 18 69 37 ()}
        {Lisp-Entry "selection-anchor" slot (protected) ((initialize . "#f")) #f #f 70 18 70 34 ()}
        {Lisp-Entry "locked-anchor?" slot (protected) ((initialize . "#f")) #f #f 71 18 71 32 ()}
        {Lisp-Entry "mouse-selecting?" slot (protected) ((initialize . "#f")) #f #f 72 18 72 34 ()}
        {Lisp-Entry "selection-mode" slot (protected) ((initialize . "'char")) #f #f 73 18 73 32 ()}
        {Lisp-Entry "special-mode" slot (protected) ((initialize . "#f")) #f #f 74 18 74 30 ()}
        {Lisp-Entry "virtual-h" slot (protected) ((initialize . "#f")) #f #f 75 18 75 27 ()}
        {Lisp-Entry "caret-pulse" slot (protected) ((initialize . "#f")) #f #f 76 18 76 29 ()}
        {Lisp-Entry "caret-pulse?" slot (protected) ((initialize . "#t")) #f #f 77 18 77 30 ()}
        {Lisp-Entry "caret-visible?" slot (protected) ((initialize . "#f")) #f #f 78 18 78 32 ()}
        {Lisp-Entry "completion-active?" slot (protected) ((initialize . "#f")) #f #f 79 18 79 36 ()}
        {Lisp-Entry "completion-unique?" slot (protected) ((initialize . "#f")) #f #f 80 18 80 36 ()}
        {Lisp-Entry "mark" slot (protected) ((initialize . "#f") (accessors . "generate")) #f #f 81 18 81 22 ()}
        {Lisp-Entry "get-mark" accessor () () #f #f 81 65 81 73 ()}
        {Lisp-Entry "set-mark" accessor () () #f #f 81 65 81 73 ()}
        {Lisp-Entry "marks" slot (protected) ((initialize . "'()")) #f #f 82 18 82 23 ()}
        {Lisp-Entry "previous-position" slot (protected) ((initialize . "#f")) #f #f 83 18 83 35 ()}
        {Lisp-Entry "autoscroll-pulse" slot (protected) ((initialize . "#f")) #f #f 84 18 84 34 ()}
        {Lisp-Entry "mouse-copy-selection" slot (protected) ((initialize . "#f")) #f #f 85 18 85 38 ()}
        {Lisp-Entry "mouse-copy-destination" slot (protected) ((initialize . "#f")) #f #f 86 18 86 40 ()}
        {Lisp-Entry "highlights" slot (protected) ((initialize . "'()") (getter . "generate")) #f #f 87 18 87 28 ()}
        {Lisp-Entry "get-highlights" accessor () () #f #f 87 63 87 71 ()}
        {Lisp-Entry "text-actions" slot (protected) ((initialize . "#f")) #f #f 88 18 88 30 ()}
        {Lisp-Entry "text-listeners" slot (protected) ((initialize . "'()")) #f #f 89 18 89 32 ()}
        {Lisp-Entry "form" form () () #f #f 92 3 92 7 ("Text-Background" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "verify-reload" method (override) () #f #f 96 20 96 33 ()}
        {Lisp-Entry "current-history-item" method (override) () #f #f 97 20 97 40 ()}
        {Lisp-Entry "preferences" method (protected virtual) () #f #f 100 29 100 40 ("Text-Preferences" "new")}
        {Lisp-Entry "new-model" method (override) () #f #f 104 20 104 29 ("Text-Model" "new")}
        {Lisp-Entry "setup-model" method (override) ("mdl") #f #f 108 20 108 31 ("get-formats" "get-formats~" "formats" "get-styles" "get-styles~" "styles" "child" "child~" "register-children" "register-children~" "Text-Style" "get-default-style" "get-default-style~" "intern-style" "intern-style~" "set-default-style" "set-default-style~" "add-style" "get-base-style" "get-base-style~" "base:" "Format" "new" "get-default-format" "get-default-format~" "intern-format" "intern-format~" "set-default-format" "set-default-format~" "Base" "add-format" "model" "get-base-format" "get-base-format~" "or" "base" "preferences" "pref" "let" "set-model" "set-model~" "syntax" "when" "nextmethod" "mdl")}
        {Lisp-Entry "prepare" method (override) ("rest") #f #f 124 20 124 27 ("nextmethod" "selection-anchor" "selection-change" "change-proc:" "strict?:" "empty-selection" "self" "Text-Mark" "new" "selection" "set!" "rest")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 130 20 130 27 ("get-pulse-caret?" "get-pulse-caret?~" "caret-pulse?" "symbolic-color" "set-background" "get-background" "get-background~" "background" "when" "preferences" "pref" "let" "model" "set-syntax" "set-syntax~" "new-syntax" "syntax" "set!" "nextmethod" "rest")}
        {Lisp-Entry "install-child" method (override) ("form" "creator" "creator-branch" "restore-form") #f #f 142 20 142 33 ("nextmethod" "else" "form->node" "model" "set-text" "set-text~" "text" "get-model" "get-model~" "case" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "destroy" method (override) () #f #f 149 20 149 27 ("nextmethod" "show-text-cursor")}
        {Lisp-Entry "new-syntax" method (protected virtual) () #f "<Text-Syntax>" 154 29 154 39 ("model" "new" "Text-Syntax" "<Text-Syntax>")}
        {Lisp-Entry "get-text-view" method (override) () #f "<Text-View>" 158 20 158 33 ("self" "Text-View" "<Text-View>")}
        {Lisp-Entry "get-paragraphs" method (protected) () #f "<Axis>" 167 21 167 35 ("model" "get-paragraphs" "get-paragraphs~" "Axis" "<Axis>")}
        {Lisp-Entry "set-paragraphs" method (protected) ("lst") #f #f 171 21 171 35 ("model" "set-paragraphs" "set-paragraphs~" "lst")}
        {Lisp-Entry "host-workspaces" method (override) () #f #f 180 20 180 35 ("text")}
        {Lisp-Entry "install-in-host" method (override) ("host") #f #f 184 20 184 35 ("get-document-controller" "install-in-host" "install-in-host~" "nextmethod" "host")}
        {Lisp-Entry "split-view" method (override) () #f #f 189 20 189 30 ("focus-host" "focus-host~" "update-status" "update-status~" "ensure-displayed?:" "get-selection" "set-selection" "set-selection~" "get-scrolled-position" "scroll-to" "scroll-to~" "get-moniker" "get-document-controller" "get-document-controller~" "change-moniker" "change-moniker~" "model" "set-model" "set-model~" "get-guest" "get-guest~" "view" "host-visible?:" "get-host" "get-workspace" "get-workspace~" "host-workspace:" "self" "class-of" "new-frame" "host" "let")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 206 20 206 33 ("nextmethod" "text" "find-actions" "cons")}
        {Lisp-Entry "get-document-controller" method (override) () #f #f 216 20 216 43 ("new-document-controller" "set!" "document-controller" "unless")}
        {Lisp-Entry "new-document-controller" method (override) () #f #f 222 20 222 43 ("default-console?" "console?:" "default-tool?" "tool?:" "self" "Document-Controller" "new")}
        {Lisp-Entry "default-tool?" method (protected virtual) () #f #f 226 29 226 42 ()}
        {Lisp-Entry "default-console?" method (protected virtual) () #f #f 230 29 230 45 ()}
        {Lisp-Entry "save" method (override) () #f #f 234 20 234 24 ("get-document-controller" "save" "save~")}
        {Lisp-Entry "save-as" method (override) () #f #f 238 20 238 27 ("get-document-controller" "save-as" "save-as~")}
        {Lisp-Entry "save-all" method (public virtual) () #f #f 242 26 242 34 ("get-document-controller" "save-all" "save-all~")}
        {Lisp-Entry "get-moniker" method (public) () #f #f 246 18 246 29 ("get-document-controller" "get-moniker" "get-moniker~")}
        {Lisp-Entry "set-moniker" method (public) ("moniker") #f #f 250 18 250 29 ("get-document-controller" "set-moniker" "set-moniker~" "moniker")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 254 20 254 33 ("get-document-controller" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-modified?" method (override) ("state") #f #f 258 20 258 33 ("get-document-controller" "set-modified?" "set-modified?~" "state")}
        {Lisp-Entry "get-read-only?" method () () #f #f 262 11 262 25 ("get-document-controller" "get-read-only?" "get-read-only?~")}
        {Lisp-Entry "write-allowed?" method () () #f #f 266 11 266 25 ("get-document-controller" "write-allowed?" "write-allowed?~" "editable?" "and")}
        {Lisp-Entry "update-status" method () () #f #f 270 11 270 24 ("get-document-controller" "update-status" "update-status~")}
        {Lisp-Entry "update-moniker-time" method () ("moniker") #f #f 274 11 274 30 ("get-document-controller" "update-moniker-time" "update-moniker-time~" "moniker")}
        {Lisp-Entry "confirm-close" method (override) ("." "rest") #f #f 278 20 278 33 ("get-document-controller" "confirm-close" "confirm-close~" "last-client?" "when" "rest")}
        {Lisp-Entry "tool-update" method (override) ("tool?") #f #f 283 20 283 31 ("tool?")}
        {Lisp-Entry "console-update" method (override) ("console?") #f #f 287 20 287 34 ("console?")}
        {Lisp-Entry "revert-saved" method (override) () #f #f 291 20 291 32 ("get-document-controller" "revert-saved" "revert-saved~")}
        {Lisp-Entry "compare-saved" method (override) () #f #f 295 20 295 33 ("get-document-controller" "compare-saved" "compare-saved~")}
        {Lisp-Entry "install-scroller?" method (override) () #f #f 299 20 299 37 ()}
        {Lisp-Entry "get-string-content" method (public) () #f "<string>" 308 18 308 36 ("model" "get-string-content" "get-string-content~" "string" "<string>")}
        {Lisp-Entry "set-string-content" method (public) ("content" "<string>") #f "<void>" 312 18 312 36 ("model" "set-string-content" "set-string-content~" "void" "<void>" "string" "<string>" "content")}
        {Lisp-Entry "default-extension" method (override) () #f #f 316 20 316 37 ("syntax" "default-extension" "default-extension~")}
        {Lisp-Entry "extensions" method (override) () #f #f 320 20 320 30 ("syntax" "extensions" "extensions~")}
        {Lisp-Entry "load-content" method (override) ("moniker") #f #f 324 20 324 32 ("model" "load-content" "load-content~" "moniker")}
        {Lisp-Entry "save-content" method (override) ("moniker") #f #f 328 20 328 32 ("model" "save-content" "save-content~" "moniker")}
        {Lisp-Entry "save-to" method (override) ("moniker") #f #f 332 20 332 27 ("model" "save-to" "save-to~" "moniker")}
        {Lisp-Entry "reload-moniker" method (override) ("moniker") #f #f 336 20 336 34 ("set-modified?" "set-modified?~" "0" "get-paragraphs" "cardinality" "min" "Cell" "new" "set-caret" "model" "reload-moniker" "reload-moniker~" "get-start" "get-line" "get-line~" "line" "let" "moniker")}
        {Lisp-Entry "compare-moniker" method (override) ("moniker") #f #f 343 20 343 35 ("model" "compare-moniker" "compare-moniker~" "moniker")}
        {Lisp-Entry "get-text-content" method (public) () #f #f 352 18 352 34 ("text-content")}
        {Lisp-Entry "set-text-content" method (public) ("value") #f #f 356 18 356 34 ("model" "set-content" "set-content~" "text-content" "set!" "value")}
        {Lisp-Entry "explorer-class" method (public virtual) () #f #f 366 26 366 40 ("syntax" "explorer-class" "explorer-class~")}
        {Lisp-Entry "on-select-outer" method () ("evt") #f #f 370 11 370 26 ("select-outer" "evt")}
        {Lisp-Entry "select-outer" method (protected virtual) () #f #f 374 29 374 41 ("get-range" "get-range~" "set-selection" "reset-mode" "outer-expr" "outer-expr~" "when" "lambda" "with-safe-explore" "get-selection" "range:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "let" "end-completion")}
        {Lisp-Entry "focus-gained" method (override) () #f #f 389 20 389 32 ("invalidate-non-showed-highlights" "get-selection" "invalidate-selection" "has-selection?" "select-all" "activating-window?" "not" "focus-selects-all?" "and" "when" "update-caret" "show-text-cursor" "nextmethod")}
        {Lisp-Entry "focus-lose" method (override) () #f #f 400 20 400 30 ("hide-caret" "end-completion" "show-text-cursor" "nextmethod")}
        {Lisp-Entry "focus-lost" method (override) () #f #f 407 20 407 30 ("invalidate-non-showed-highlights" "get-selection" "invalidate-selection" "has-selection?" "when" "nextmethod")}
        {Lisp-Entry "focus-activate" method (override) () #f #f 414 20 414 34 ("focus-document")}
        {Lisp-Entry "focus-document" method (override) () #f #f 418 20 418 34 ("acquire-focus")}
        {Lisp-Entry "mouse-leave" method (override) () #f #f 422 20 422 31 ("show-text-cursor")}
        {Lisp-Entry "on-backspace-press" method (override) ("evt") #f #f 426 20 426 38 ("get-property" "get-property~" "word?:" "backspace-press" "keyboard" "event-type" "parameterize" "evt")}
        {Lisp-Entry "on-delete-press" method () ("evt") #f #f 431 11 431 26 ("get-property" "get-property~" "word?:" "delete-press" "evt")}
        {Lisp-Entry "on-paragraph-style" method () ("evt") #f #f 435 11 435 29 ("style?:" "style:" "get-property" "get-property~" "set-selection-format/style" "evt")}
        {Lisp-Entry "on-numbered" method () ("evt") #f #f 439 11 439 22 ("on-numbered" "unimplemented" "evt")}
        {Lisp-Entry "on-bulleted" method () ("evt") #f #f 443 11 443 22 ("model" "toggle-bulleted" "toggle-bulleted~" "paragraph" "line" "lambda" "for-each-selected-paragraph" "evt")}
        {Lisp-Entry "on-decrease-indent" method () ("evt") #f #f 449 11 449 29 ("-32" "model" "indent-paragraph" "indent-paragraph~" "paragraph" "line" "lambda" "for-each-selected-paragraph" "evt")}
        {Lisp-Entry "on-increase-indent" method () ("evt") #f #f 455 11 455 29 ("32" "model" "indent-paragraph" "indent-paragraph~" "paragraph" "line" "lambda" "for-each-selected-paragraph" "evt")}
        {Lisp-Entry "on-justify" method () ("evt") #f #f 461 11 461 21 ("model" "set-justification" "set-justification~" "paragraph" "line" "lambda" "for-each-selected-paragraph" "justification:" "get-property" "get-property~" "justification" "let" "evt")}
        {Lisp-Entry "on-alignment" method () ("evt") #f #f 468 11 468 23 ("get-selection" "model" "set-text-alignment" "set-text-alignment~" "alignment:" "get-property" "get-property~" "alignment" "let" "evt")}
        {Lisp-Entry "on-text-style" method () ("evt") #f #f 473 11 473 24 ("bell" "evt")}
        {Lisp-Entry "on-text-font" method () ("evt") #f #f 477 11 477 23 ("get-selection" "model" "set-text-font" "set-text-font~" "close-popups" "initial-font:" "choose-font" "font" "get-style" "get-style~" "get-font" "get-font~" "and" "current" "get-col" "get-col~" "get-run" "get-run~" "run" "get-line" "get-line~" "get-paragraph" "par" "get-caret" "caret" "let*" "evt")}
        {Lisp-Entry "on-text-color" method () ("evt") #f #f 487 11 487 24 ("get-selection" "model" "set-text-color" "set-text-color~" "Black" "Color" "or" "get-body" "get-body~" "set-color" "set-color~" "when" "close-popups" "get-sender" "get-sender~" "popup-initiator" "popup-initiator~" "combo" "color:" "get-property" "get-property~" "color" "let" "evt")}
        {Lisp-Entry "on-pick-text-color" method () ("evt") #f #f 496 11 496 29 ("get-sender" "get-sender~" "pick-text-color" "evt")}
        {Lisp-Entry "on-highlight-color" method () ("evt") #f #f 500 11 500 29 ("get-selection" "model" "set-highlight-color" "set-highlight-color~" "White" "Color" "or" "get-body" "get-body~" "set-color" "set-color~" "when" "close-popups" "get-sender" "get-sender~" "popup-initiator" "popup-initiator~" "combo" "color:" "get-property" "get-property~" "color" "let" "evt")}
        {Lisp-Entry "on-pick-highlight-color" method () ("evt") #f #f 509 11 509 34 ("get-sender" "get-sender~" "pick-highlight-color" "evt")}
        {Lisp-Entry "on-frame-color" method () ("evt") #f #f 513 11 513 25 ("get-selection" "model" "set-frame-color" "set-frame-color~" "White" "Color" "or" "get-body" "get-body~" "set-color" "set-color~" "when" "close-popups" "get-sender" "get-sender~" "popup-initiator" "popup-initiator~" "combo" "color:" "get-property" "get-property~" "color" "let" "evt")}
        {Lisp-Entry "on-pick-frame-color" method () ("evt") #f #f 522 11 522 30 ("get-sender" "get-sender~" "pick-frame-color" "evt")}
        {Lisp-Entry "add-text-listener" method (public) ("listener") #f #f 531 18 531 35 ("add-listener" "text-listeners" "set!" "listener")}
        {Lisp-Entry "remove-text-listener" method (public) ("listener") #f #f 535 18 535 38 ("remove-listener" "text-listeners" "set!" "listener")}
        {Lisp-Entry "text-listener?" method (public) ("object") #f #f 539 18 539 32 ("text-listeners" "listener?" "object")}
        {Lisp-Entry "process-selection-change" method (public) () #f #f 543 18 543 42 ("invoke" "invoke~" "listener" "lambda" "for-each" "self" ":selection-change" "Text-Event" "new" "evt" "let" "text-listeners" "when")}
        {Lisp-Entry "model-update" method (protected) () #f #f 556 21 556 33 ("remove-all-text-actions")}
        {Lisp-Entry "last-client?" method (protected) () #f #f 560 21 560 33 ("1" "model" "get-clients" "get-clients~" "length" "=")}
        {Lisp-Entry "key-press" method (override) ("key") #f #f 569 20 569 29 ("syntax" "translate-key" "translate-key~" "char-press" "hide-text-cursor" "key")}
        {Lisp-Entry "backspace-press" method (override) ("key" "(word?: word? #f)") #f #f 574 20 574 35 ("get-start" "complete-at" "completion-active?" "when" "insert-char/backspace" "word?" "word?:" "key")}
        {Lisp-Entry "delete-press" method () ("key" "(word?: word? #f)") #f #f 580 11 580 23 ("delete-action" "word?" "word?:" "key")}
        {Lisp-Entry "on-delete-char" method () ("evt") #f #f 584 11 584 25 ("delete-char" "evt")}
        {Lisp-Entry "on-delete-word" method () ("evt") #f #f 588 11 588 25 ("delete-word" "evt")}
        {Lisp-Entry "on-kill-line" method () ("evt") #f #f 592 11 592 23 ("model" "delete-range" "delete-range~" "not" "get-clipboard-text" "neq?" "string-append" "actual" "append-clipboard" "kill-line" "special-mode" "set!" "set-clipboard-text" "get-application" "add-clipboard" "add-clipboard~" "replace-clipboard" "get-string" "string" "when" "range" "let" "0" "1" "+" "Cell" "Range$Cell$" "new" "get-limit" "=" "if" "paragraph-length" "len" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "forward" "selection-tail" "pos" "let*" "kill-range" "define" "evt")}
        {Lisp-Entry "on-open-line" method () ("evt") #f #f 624 11 624 23 ("left-arrow-move" "insert-newline" "evt")}
        {Lisp-Entry "return-press" method (override) ("key") #f #f 629 20 629 32 ("insert-newline" "accepts-returns?" "when" "key")}
        {Lisp-Entry "escape-press" method (override) ("key") #f #f 634 20 634 32 ("remove-completion" "key")}
        {Lisp-Entry "tab-press" method (override) ("key" "modifiers") #f #f 638 20 638 29 ("insert-char" "has-completion?" "if" "else" "shift-key?" "navigate-view" "force-tab-navigate?" "accepts-returns?" "not" "or" "end-completion" "has-ambiguous-completion?" "cond" "modifiers" "key")}
        {Lisp-Entry "char-press" method (public virtual) ("key") #f #f 649 26 649 36 ("insert-char" "auto-complete" "auto-complete?" "if" "key")}
        {Lisp-Entry "reset-mode" method () ("(keep: keep #f)") #f #f 655 11 655 21 ("virtual-h" "virtual" "eq?" "unless" "special-mode" "set!" "keep" "keep:")}
        {Lisp-Entry "on-insert" method (package) ("evt") #f #f 661 19 661 28 ("insert-string" ":string" "call-key-press" ":char" ":key" "case" "content:" "get-property" "get-property~" "content" "get-kind" "get-kind~" "kind" "let" "evt")}
        {Lisp-Entry "hide-text-cursor" method (public) () #f #f 674 18 674 34 ("hide-cursor" "mouse-over?" "editable?" "selectable?" "view-enabled?" "and" "when")}
        {Lisp-Entry "show-text-cursor" method (public) () #f #f 679 18 679 34 ("show-cursor" "editable?" "selectable?" "view-enabled?" "and" "when")}
        {Lisp-Entry "cursor-update" method (override) ("view" "<Point>") #f #f 684 20 684 33 (":ibeam" ":left-arrow" "paragraph-left" "paragraph-left~" "get-h" "get-h~" "<" "view->text" "get-line" "get-line~" "get-paragraph" "par" "let" ":finger" "set-cursor" "alt-down?" "if" "selectable?" "view-enabled?" "and" "when" "show-text-cursor" "Point" "<Point>" "view")}
        {Lisp-Entry "show-caret" method () () #f #f 700 11 700 21 ("0.5" "caret" "Pulse" "new" "caret-pulse" "caret-pulse?" "has-focus?" "and" "invalidate-caret" "not" "caret-visible?" "set!" "editable?" "when" "pulse-caret" "define")}
        {Lisp-Entry "hide-caret" method () () #f #f 713 11 713 21 ("invalidate-caret" "caret-visible?" "set!" "close" "close~" "caret-pulse" "editable?" "when")}
        {Lisp-Entry "without-caret" method () ("proc") #f #f 722 11 722 24 ("update-caret" "when" "hide-caret" "begin" "unwind-protect" "caret-visible?" "shown?" "let" "editable?" "not" "if" "proc")}
        {Lisp-Entry "update-caret" method () () #f #f 734 11 734 23 ("show-caret" "hide-caret" "has-selection?" "if" "has-focus?" "editable?" "player" "and" "when")}
        {Lisp-Entry "invalidate-caret" method () () #f #f 741 11 741 27 ("invalidate-rect" "1" "get-caret" "caret-rect" "rect" "let" "editable?" "when")}
        {Lisp-Entry "caret-rect" method () ("caret-pos" "<Cell+>" "width") #f #f 748 11 748 21 ("get-h" "get-h~" "Rect" "new" "-" "get-style" "get-style~" "justify-element" "justify-element~" "get-v" "get-v~" "+" "top" "line-height" "get-height" "get-height~" "if" "fx" "<fx>" "height" "get-run" "get-run~" "run" "get-col" "get-col~" "get-line-at" "get-line-at~" "lne" "get-line" "get-line~" "get-paragraph" "Paragraph" "<Paragraph>" "par" "text->view" "Point" "<Point>" "pos" "let*" "when" "width" "Cell+" "<Cell+>" "caret-pos")}
        {Lisp-Entry "mouse-down" method (override) ("view") #f #f 768 20 768 30 ("previous-position" "reset-mode" "update-caret" "set-caret" "change-selection" "focus-selects-all?" "set-anchor?:" "selection-line" "set-selection" "paragraph-left" "paragraph-left~" "get-h" "get-h~" "<" "if" "get-line" "get-line~" "get-paragraph" "par" "reset-caret" "not" "shift-down?" "or" "char" "selection-mode" "mouse-selecting?" "set!" "unlock-anchor" "acquire-capture" "acquire-focus" "unless" "end-completion" "view->text" "pos" "alt-down?" "mouse-copy?" "has-focus?" "focus?" "let" "selectable?" "view-enabled?" "and" "when" "view")}
        {Lisp-Entry "mouse-copy" method (override) ("pos" "destination") #f #f 795 20 795 30 ("call-mouse-down" "mouse-copy-destination" "get-selection" "mouse-copy-selection" "set!" "destination" "pos")}
        {Lisp-Entry "drag-move" method (override) ("view") #f #f 802 20 802 29 ("drag-move-action" "mouse-selecting?" "when" "view")}
        {Lisp-Entry "drag-move-action" method () ("view") #f #f 807 11 807 27 ("calculate-autoscroll-amount" "setup-autoscroll" "get-scroller" "when" "drag-select" "view")}
        {Lisp-Entry "drag-up" method (override) ("view" "." "rest") #f #f 813 20 813 27 ("update-focus-actions" "update-focus-actions~" "play-current-recording" "play-current-recording~" "get-recorder" "get-recorder~" "recorder" "not" "and" "ensure-displayed" "mouse-copy-destination" "mouse-insert" "mouse-insert~" "ensure-displayed?:" "set-selection" "get-string" "copy" "get-start" "expr-range" "get-selection" "has-selection?" "range" "mouse-copy-selection" "if" "get-selected-string" "lambda" "mouse-select-copy" "process-selection-change" "char" "selection-mode" "update-caret" "previous-position" "set!" "drag-select" "kill-autoscroll" "release-capture" "get-application" "appl" "shift-down?" "shift?" "control-down?" "control?" "alt-down?" "alt?" "let" "mouse-selecting?" "when" "rest" "view")}
        {Lisp-Entry "drag-select" method () ("view" "final?") #f #f 847 11 847 22 ("region:" "redraw-window" "redraw-window~" "invalidate-region" "invalidate-region~" "if" "logical->device" "logical->device~" "rect" "multi-part-region" "region" "with" "change-selection" "surface" "lambda" "with-transformation-surface" "get-player" "player" "get-selection" "range-difference" "parts" "selection-range" "range" "let*" "previous-position" "/=" "selection-line" "get-end" "get-end~" "set!" "get-end-anchor" "cell>=?" "get-line" "get-line~" "get-paragraph" "paragraph-left" "paragraph-left~" "get-h" "get-h~" "<" "and" "when" "view->text" "pos" "let" "final?" "view")}
        {Lisp-Entry "double-click" method (override) ("view") #f #f 869 20 869 32 ("call-mouse-down" "previous-position" "reset-mode" "word" "selection-mode" "mouse-selecting?" "set!" "ensure-displayed?:" "set-anchor?:" "get-range" "get-range~" "set-selection" "outer-expr" "outer-expr~" "when" "lambda" "with-safe-explore" "end:" "start:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "let" "select-paragraph" "paragraph-left" "paragraph-left~" "get-h" "get-h~" "<" "get-line" "get-line~" "get-paragraph" "par" "view->text" "pos" "let*" "selectable?" "view-enabled?" "and" "if" "view")}
        {Lisp-Entry "middle-mouse-down" method (override) ("pos") #f #f 887 20 887 37 ("mouse-down" "paste-clipboard-string" "text" "lambda" "middle-mouse-paste" "unless" "pos")}
        {Lisp-Entry "context-menu-click" method (protected) ("pos" "(move-caret: move-caret #f)") #f #f 894 21 894 39 ("update-caret" "set-caret" "get-end" ">=" "get-start" "<" "always" "eq?" "or" "never" "neq?" "view->text" "text" "let" "acquire-focus" "selectable?" "view-enabled?" "and" "when" "move-caret" "move-caret:" "pos")}
        {Lisp-Entry "right-mouse-down" method (override) ("pos") #f #f 904 20 904 36 ("context-menu-click" "pos")}
        {Lisp-Entry "context-menu" method (override) ("pos") #f #f 908 20 908 32 ("track-popup-menu" "get-context-menu" "menu" "let" "selectable?" "view-enabled?" "and" "when" "pos")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 915 20 915 36 ("self" "get-application" "text-menu" "text-menu~")}
        {Lisp-Entry "new-text-context-menu" method (public) () #f #f 919 18 919 39 ("layout-menu" "layout-menu~" "paste" "cut" "locate" "locate~" "set-visible?" "set-visible?~" "editable?" "not" "when" "Text-Context-Menu" "new" "menu" "let")}
        {Lisp-Entry "new-range" method (public inline) ("start" "end") #f #f 928 25 928 34 ("Range$Cell$" "new" "end" "start")}
        {Lisp-Entry "select-paragraph" method () ("line") #f #f 932 11 932 27 ("0" "Cell" "Range$Cell$" "new" "set-selection" "get-length" "get-length~" "len" "get-paragraph" "par" "let*" "<=" "when" "get-limit" "limit" "let" "line")}
        {Lisp-Entry "selection-line" method () ("line" "<fx>") #f #f 940 11 940 25 ("1" "+" "paragraph-length" "0" "Cell" "Range$Cell$" "new" "=" "if" "<=" "when" "get-limit" "limit" "let" "fx" "<fx>" "line")}
        {Lisp-Entry "selection-range" method () ("pos") #f #f 948 11 948 26 ("minimum" "list" "maximum" "not" "get-range" "get-range~" "and" "range" "explore-whitespace?:" "outer-expr" "outer-expr~" "kind" "end:" "start:" "model" "explorer-class" "Text-Explorer" "<Text-Explorer>" "expl" "let*" "inside?" "inside?~" "if" "word" "char" "selection-mode" "case" "else" "get-start" "get-start~" "after?" "after?~" "get-end" "get-end~" "Range$Cell$" "new" "before?" "before?~" "cond" "selection-range-from-anchor" "define" "get-selection-anchor" "anchor" "let" "pos")}
        {Lisp-Entry "range-difference" definition () ("x" "<Range$Cell$>" "y" "<Range$Cell$>") #f #f 978 15 978 31 ("get-output" "get-output~" "put" "put~" "List-Factory" "new" "parts" "else" ">" "<" "or" "list" "cond" "=" "and" "if" "ey" "sy" "get-end" "get-end~" "ex" "get-start" "get-start~" "sx" "let" "y" "Range$Cell$" "<Range$Cell$>" "x")}
        {Lisp-Entry "multi-part-region" method () ("parts" "transformer") #f #f 998 11 998 28 ("or" "combine!" "combine!~" "and" "when" "second" "union" "let" "first" "region" "with" "2" "car" "range-region" "1" "0" "length" "case" "transformer" "parts")}
        {Lisp-Entry "calculate-autoscroll-amount" method () ("view") #f #f 1009 11 1009 38 ("Point" "new" "-" "get-height" "get-height~" "av" "else" "-8" "get-width" "get-width~" ">" "8" "0" "<" "cond" "ah" "get-default-height" "height" "get-v" "get-v~" "v" "get-h" "get-h~" "h" "get-display" "get-size" "get-size~" "size" "view->display" "display" "let*" "view")}
        {Lisp-Entry "setup-autoscroll" method () ("amount") #f #f 1020 11 1020 27 ("delay:" "0.01" "autoscroll" "Pulse" "new" "set!" "autoscroll-pulse" "not" "when" "kill-autoscroll" "0" "Point" "nu=?" "if" "update-view" "scroll" "mouse-position" "drag-move-action" "autoscroll-action" "define" "amount")}
        {Lisp-Entry "kill-autoscroll" method () () #f #f 1032 11 1032 26 ("set!" "autoscroll-pulse" "close" "close~")}
        {Lisp-Entry "home-column" method (protected virtual) ("line" "col") #f #f 1042 29 1042 40 ("0" "=" "if" "get-column" "column" "let" "col" "line")}
        {Lisp-Entry "on-home" method (package) ("evt") #f #f 1049 19 1049 26 ("extend?:" "locked-anchor?" "or" "document?:" "get-property" "get-property~" "goto-home" "evt")}
        {Lisp-Entry "goto-home" method (public) ("document?" "extend?") #f #f 1054 18 1054 27 ("process-selection-change" "ensure-scrolled-left" "Cell" "new" "start" "get-col" "get-col~" "home-column" "col" "get-line" "get-line~" "line" "backward" "selection-tail" "pos" "let*" "set-caret" "text-beginning" "change-selection" "if" "reset-mode" "extend?" "document?")}
        {Lisp-Entry "on-end" method (package) ("evt") #f #f 1071 19 1071 25 ("extend?:" "locked-anchor?" "or" "document?:" "get-property" "get-property~" "goto-end" "evt")}
        {Lisp-Entry "goto-end" method (public) ("document?" "extend?") #f #f 1076 18 1076 26 ("process-selection-change" "extend-selection?:" "goto-paragraph-end" "set-caret" "text-ending" "change-selection" "if" "reset-mode" "extend?" "document?")}
        {Lisp-Entry "goto-paragraph-end" method (public) ("(extend-selection?: extend-selection? #f)") #f #f 1086 18 1086 36 ("set-caret" "change-selection" "if" "paragraph-length" "get-line" "get-line~" "Cell" "new" "end" "forward" "selection-tail" "pos" "let*" "extend-selection?" "extend-selection?:")}
        {Lisp-Entry "on-move" method () ("evt") #f #f 1094 11 1094 18 ("arrow-move" "self" "invoke-handler" "arrow-press-handler" "if" "evt")}
        {Lisp-Entry "arrow-move" method (public) ("evt") #f #f 1100 18 1100 28 ("down-arrow-move" "down" "up-arrow-move" "up" "right-arrow-move" "right" "left-arrow-move" "left" "case" "scroll?:" "scroll?" "word?:" "word?" "extend?:" "locked-anchor?" "or" "extend?" "direction:" "get-property" "get-property~" "direction" "let" "evt")}
        {Lisp-Entry "left-arrow-move" method (protected virtual) ("extend?" "word?") #f #f 1112 29 1112 44 ("textual-left-arrow-move" "word?" "extend?")}
        {Lisp-Entry "textual-left-arrow-move" method (protected) ("extend?" "word?") #f #f 1116 21 1116 44 ("process-selection-change" "get-start" "set-caret" "empty-selection?" "backward" "selection-tail" "move-backward" "change-selection" "if" "reset-mode" "word?" "extend?")}
        {Lisp-Entry "right-arrow-move" method (protected virtual) ("extend?" "word?") #f #f 1126 29 1126 45 ("textual-right-arrow-move" "word?" "extend?")}
        {Lisp-Entry "textual-right-arrow-move" method (protected) ("extend?" "word?") #f #f 1130 21 1130 45 ("process-selection-change" "get-end" "set-caret" "empty-selection?" "forward" "selection-tail" "move-forward" "change-selection" "if" "reset-mode" "word?" "extend?")}
        {Lisp-Entry "up-arrow-move" method (protected virtual) ("extend?" "scroll?") #f #f 1140 29 1140 42 ("textual-up-arrow-move" "scroll?" "extend?")}
        {Lisp-Entry "textual-up-arrow-move" method (protected) ("extend?" "scroll?") #f #f 1144 21 1144 42 ("process-selection-change" "reset-caret" "unless" "-1" "move-verticaly" ">" "else" "0" "Point" "new" "scroll" "get-default-height" "height" "let" "cond" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "get-start" "backward" "selection-tail" "if" "pos" "let*" "reset-mode-on-anchor" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method (protected virtual) ("extend?" "scroll?") #f #f 1159 29 1159 44 ("textual-down-arrow-move" "scroll?" "extend?")}
        {Lisp-Entry "textual-down-arrow-move" method (protected virtual) ("extend?" "scroll?") #f #f 1163 29 1163 52 ("process-selection-change" "reset-caret" "unless" "1" "move-verticaly" "get-limit" "<" "else" "-" "0" "Point" "new" "scroll" "get-default-height" "height" "let" "cond" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "get-end" "forward" "selection-tail" "if" "pos" "let*" "reset-mode-on-anchor" "scroll?" "extend?")}
        {Lisp-Entry "on-widen-forward" method () ("evt") #f #f 1178 11 1178 27 ("Range$Cell$" "new" "set-selection" "model" "next-word" "next-word~" "extend" "get-end" "end" "get-start" "start" "let" "evt")}
        {Lisp-Entry "reset-mode-on-anchor" method () () #f #f 1185 11 1185 31 ("virtual" "keep:" "reset-mode" "get-end-anchor" "get-end" "get-start-anchor" "get-start" "nu=?" "has-selection?" "and" "if")}
        {Lisp-Entry "move-verticaly" method () ("line" "col" "inc" "direction" "shift?") #f #f 1191 11 1191 25 ("else" "set!" ">" "get-top" "get-top~" "Point" "view->text" "min" "move-caret" "virtual-h" "cond" "new-end" "paragraph-length" "new-len" "new-par" "+" "new-line" "forward" "selection-tail" "get-col" "get-col~" "has-selection?" "if" "Cell" "new" "text->view" "get-h" "get-h~" "h" "get-paragraph" "par" "let*" "shift?" "direction" "inc" "col" "line")}
        {Lisp-Entry "move-caret" method (protected virtual) ("pos" "direction" "shift?") #f #f 1207 29 1207 39 ("set-caret" "change-selection" "if" "backward" "-" "forward" "case" "0" "Point" "new" "scroll" "get-default-height" "height" "let" "cell-displayed?" "unless" "shift?" "direction" "pos")}
        {Lisp-Entry "on-backward-compound" method () ("evt") #f #f 1216 11 1216 31 ("backward-compound" "extend?:" "get-property" "get-property~" "extend?" "let" "evt")}
        {Lisp-Entry "on-forward-compound" method () ("evt") #f #f 1221 11 1221 30 ("forward-compound" "extend?:" "get-property" "get-property~" "extend?" "let" "evt")}
        {Lisp-Entry "on-upward-compound" method () ("evt") #f #f 1226 11 1226 29 ("upward-compound" "evt")}
        {Lisp-Entry "on-downward-compound" method () ("evt") #f #f 1230 11 1230 31 ("downward-compound" "evt")}
        {Lisp-Entry "backward-compound" method (protected virtual) ("(extend?: extend? #f)") #f #f 1234 29 1234 46 ("left-arrow-move" "extend?" "extend?:")}
        {Lisp-Entry "forward-compound" method (protected virtual) ("(extend?: extend? #f)") #f #f 1238 29 1238 45 ("right-arrow-move" "extend?" "extend?:")}
        {Lisp-Entry "upward-compound" method (protected virtual) () #f #f 1242 29 1242 44 ("up-arrow-move")}
        {Lisp-Entry "downward-compound" method (protected virtual) () #f #f 1246 29 1246 46 ("down-arrow-move")}
        {Lisp-Entry "on-transpose-word" method () ("evt") #f #f 1250 11 1250 28 ("transpose-word" "evt")}
        {Lisp-Entry "transpose-movements" method (public) ("forward" "backward") #f #f 1254 18 1254 37 ("set-modified?" "replace" "replace~" "rs" "range-strings" "ls" "not" "or" "right" "get-range" "get-range~" "left" "get-end" "get-start" "set-pos" "set-pos~" "right-expl" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "left-expl" "let" "lambda" "model" "get-undoer" "get-undoer~" "with-atomic-undo" "with-atomic-undo~" "bell" "has-selection?" "if" "backward" "forward")}
        {Lisp-Entry "transpose-word" method (public) () #f #f 1276 18 1276 32 ("backward-word" "backward-word~" "get-start" "get-start~" "set-end" "set-end~" "backward-non-word" "backward-non-word~" "forward-word" "forward-word~" "get-end" "get-end~" "set-start" "set-start~" "forward-non-word" "forward-non-word~" "expl" "lambda" "transpose-movements")}
        {Lisp-Entry "prior-page" method (override) ("shift?") #f #f 1282 20 1282 30 ("set-caret" "change-selection" "if" "Cell" "dest" "display-v->line" "line" "vert" "get-page-size" "0" "Point" "new" "scroll" "get-line" "get-line~" "line->display-v" "v" "get-start" "start" "let*" "shift?")}
        {Lisp-Entry "next-page" method (override) ("shift?") #f #f 1293 20 1293 29 ("set-caret" "change-selection" "if" "Cell" "dest" "display-v->line" "line" "vert" "get-page-size" "-" "0" "Point" "new" "scroll" "get-line" "get-line~" "line->display-v" "v" "get-start" "start" "let*" "shift?")}
        {Lisp-Entry "line->display-v" method () ("line") #f "<fx>" 1304 11 1304 26 ("line->view" "v" "position" "get-v" "get-v~" "-" "top" "let" "fx" "<fx>" "line")}
        {Lisp-Entry "display-v->line" method () ("v") #f "<fx>" 1310 11 1310 26 ("get-line" "get-line~" "view->text" "text" "+" "left-padding" "Point" "new" "pos" "position" "get-v" "get-v~" "-" "top" "let*" "fx" "<fx>" "v")}
        {Lisp-Entry "selection-tail" method () ("direction") #f "<Cell>" 1317 11 1317 25 ("forward" "backward" "case" "else" "get-start" "before?" "before?~" "get-end" "after?" "after?~" "cond" "get-selection-anchor" "anchor" "let" "Cell" "<Cell>" "direction")}
        {Lisp-Entry "on-remove-spaces" method (package) ("evt") #f #f 1330 19 1330 35 ("get-property" "get-property~" "keep:" "get-caret" "remove-spaces" "bell" "empty-selection?" "not" "if" "evt")}
        {Lisp-Entry "remove-spaces" method (public) ("pos" "(keep: keep 'one/none)") #f #f 1336 18 1336 31 ("if" "one" "list" "none" "case" "replace" "replace~" "1" "get-col" "get-col~" "+" "get-end" "get-end~" "get-start" "get-start~" "get-line" "get-line~" "=" "and" "one-left?" "get-range" "get-range~" "range" "let*" "forward-whitespaces" "forward-whitespaces~" "backward-whitespaces" "backward-whitespaces~" "end:" "start:" "model" "explorer-class" "new" "Text-Explorer" "<Text-Explorer>" "expl" "let" "one/none" "keep" "keep:" "pos")}
        {Lisp-Entry "on-display-info" method (package) ("evt") #f #f 1349 19 1349 34 ("info-message" "user-message" "evt")}
        {Lisp-Entry "info-message" method (protected virtual) () #f #f 1353 29 1353 41 ("get-col" "get-col~" "1" "get-line" "get-line~" "+" "format" "get-end" "end" "get-start" "start" "let")}
        {Lisp-Entry "on-user-code" method (package) ("evt") #f #f 1361 19 1361 31 ("self" "user-code" "user-code~" "get-profile" "get-profile~" "profile" "get-application" "appl" "let*" "evt")}
        {Lisp-Entry "range-region" method () ("range" "<Range$Cell$>" "transformer" "(top: top #f)" "(bottom: bottom #f)") #f #f 1372 11 1372 23 ("and" "get-view-clipper" "rect:" "clipper" "or" "combine!" "combine!~" "left-padding" "range-region" "range-region~" "sub" "with" "end" "start" "paragraph" "line" "lambda" "for-each-logical-range" "get-width" "width" "keep-rectangles?:" "Region" "new" "region" "get-root" "root" "let" "bottom" "bottom:" "top" "top:" "transformer" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "line-range-rect" method () ("line" "start" "end") #f #f 1385 11 1385 26 ("get-default-height" "get-line-at" "get-line-at~" "get-height" "get-height~" "+" "get-width" "1" "max" "if" "line->view" "col->view" "col->view~" "get-h" "get-h~" "Rect" "new" "get-paragraph" "paragraph" "let" "end" "start" "line")}
        {Lisp-Entry "invalidate-range" method () ("range" "<Range$Cell$>") #f #f 1394 11 1394 27 ("player" "invalidate-region" "invalidate-region~" "logical->device" "logical->device~" "rect" "range-region" "region" "with" "surface" "lambda" "with-transformation-surface" "view-visible?" "when" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "text-selection-region" method () ("transformer" "top" "bottom") #f #f 1403 11 1403 32 ("bottom:" "top:" "get-selection" "range-region" "bottom" "top" "transformer")}
        {Lisp-Entry "selection-region-all" method () ("transformer") #f #f 1407 11 1407 31 ("get-display-height" "0" "text-selection-region" "transformer")}
        {Lisp-Entry "get-selection-color" method (protected virtual) () #f #f 1411 29 1411 48 ("230" "190" "get-active-selection-color" "get-active-selection-color~" "blue:" "240" "green:" "128" "red:" "Color" "get-look" "get-completion-color" "get-completion-color~" "or" "completion-active?" "if")}
        {Lisp-Entry "get-inactive-selection-color" method (protected virtual) () #f #f 1417 29 1417 57 ("Unfocused-Selection" "Color" "get-look" "get-inactive-selection-color" "get-inactive-selection-color~" "or")}
        {Lisp-Entry "for-each-logical-range" method (public) ("range" "<Range$Cell$>" "proc") #f #f 1421 18 1421 40 ("else" "cond" "paragraph" "to" "from" "for" "loop" "limit" "beginning" "get-col" "get-col~" "get-paragraph" "line" "get-line" "get-line~" "=" "if" "/=" "when" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "let" "proc" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "for-each-range" method (public) ("range" "<Range$Cell$>" "proc") #f #f 1437 18 1437 32 ("get-length" "get-length~" "0" "or" "end" "start" "paragraph" "line" "lambda" "for-each-logical-range" "proc" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "can-undo?" method (override) () #f #f 1451 20 1451 29 ("model" "can-undo?" "can-undo?~")}
        {Lisp-Entry "can-redo?" method (override) () #f #f 1455 20 1455 29 ("model" "can-redo?" "can-redo?~")}
        {Lisp-Entry "can-cut?" method (override) () #f #f 1459 20 1459 28 ("has-selection?")}
        {Lisp-Entry "can-copy?" method (override) () #f #f 1463 20 1463 29 ("has-selection?")}
        {Lisp-Entry "can-paste?" method (override) () #f #f 1467 20 1467 30 ()}
        {Lisp-Entry "can-delete?" method (override) () #f #f 1471 20 1471 31 ("has-selection?")}
        {Lisp-Entry "can-select-all?" method (override) () #f #f 1475 20 1475 35 ()}
        {Lisp-Entry "undo" method (override) () #f #f 1479 20 1479 24 ("get-application" "update-focus-actions" "update-focus-actions~" "model" "undo" "undo~")}
        {Lisp-Entry "redo" method (override) () #f #f 1484 20 1484 24 ("get-application" "update-focus-actions" "update-focus-actions~" "model" "redo" "redo~")}
        {Lisp-Entry "cut-selection" method (override) () #f #f 1489 20 1489 33 ("delete-selection" "copy-selection")}
        {Lisp-Entry "copy-selection" method (override) () #f #f 1494 20 1494 34 ("selection-lines" "join-lines" "set-clipboard-text" "get-application" "add-clipboard" "add-clipboard~" "bell" "empty-selection?" "if")}
        {Lisp-Entry "paste-clipboard" method (override) () #f #f 1501 20 1501 35 ("paste-clipboard-string" "when" "get-clipboard-text" "text" "let")}
        {Lisp-Entry "paste-clipboard-string" method (public) ("string") #f #f 1507 18 1507 40 ("split-lines" "replace-selection" "string")}
        {Lisp-Entry "on-paste&stay" method (package) ("evt") #f #f 1511 19 1511 32 ("paste&stay" "evt")}
        {Lisp-Entry "on-paste&next" method (package) ("evt") #f #f 1515 19 1515 32 ("down-arrow-move" "paste&stay" "evt")}
        {Lisp-Entry "paste&stay" method () () #f #f 1520 11 1520 21 ("set-caret" "paste-clipboard" "get-start" "pos" "let")}
        {Lisp-Entry "delete-selection" method (override) () #f #f 1526 20 1526 36 ("list" "replace-selection")}
        {Lisp-Entry "select-all" method (override) ("." "rest") #f #f 1530 20 1530 30 ("buffer-selection" "set-selection" "rest")}
        {Lisp-Entry "clear-all" method (public) () #f #f 1534 18 1534 27 ("delete-selection" "select-all")}
        {Lisp-Entry "on-set-mark" method (package) ("evt") #f #f 1544 19 1544 30 ("user-message" "get-selection" "set-mark" "evt")}
        {Lisp-Entry "on-jump-mark" method (package) ("evt") #f #f 1549 19 1549 31 ("get-selection" "set-mark" "new-mark" "let" "get-end" "get-end~" "get-end-anchor" "maximum" "get-start" "get-start~" "get-start-anchor" "list" "minimum" "Range$Cell$" "new" "set-selection" "extend?:" "get-property" "get-property~" "locked-anchor?" "or" "if" "mark" "when" "evt")}
        {Lisp-Entry "get-marks" method (public) () #f #f 1565 18 1565 27 ("marks")}
        {Lisp-Entry "add-mark" method (public) ("mark") #f #f 1569 18 1569 26 ("cons" "marks" "set!" "mark")}
        {Lisp-Entry "remove-mark" method (public) ("mark") #f #f 1573 18 1573 29 ("remove!" "marks" "set!" "mark")}
        {Lisp-Entry "adjust-marks" method (protected) ("range" "caret" "procs") #f #f 1577 21 1577 33 ("marks" "enqueue" "when" "get-end" "get-end~" "get-start" "get-start~" "adjust" "adjust~" "change-proc" "let" "mark" "lambda" "for-each" "procs" "caret" "range")}
        {Lisp-Entry "proclaim" proclaim () () #f #f 1590 3 1590 11 ("optimizations" "warn")}
        {Lisp-Entry "empty-selection" method (override) () #f "<Range$Cell$>" 1593 20 1593 35 ("text-beginning" "new" "Range$Cell$" "<Range$Cell$>")}
        {Lisp-Entry "reset-selection" method (override) () #f #f 1597 20 1597 35 ("selection-anchor" "empty-selection" "selection" "set-range" "set-range~")}
        {Lisp-Entry "buffer-selection" method () () #f "<Range$Cell$>" 1602 11 1602 27 ("text-ending" "text-beginning" "new" "Range$Cell$" "<Range$Cell$>")}
        {Lisp-Entry "line-selected?" method (override) ("line") #f "<bool>" 1606 20 1606 34 ("bool" "<bool>" "line")}
        {Lisp-Entry "text-beginning" method (public) () #f "<Cell>" 1610 18 1610 32 ("0" "new" "Cell" "<Cell>")}
        {Lisp-Entry "text-ending" method (public) () #f "<Cell>" 1614 18 1614 29 ("paragraph-length" "new" "get-limit" "limit" "let" "Cell" "<Cell>")}
        {Lisp-Entry "text-range" method (public) () #f "<Range$Cell$>" 1619 18 1619 28 ("text-ending" "text-beginning" "new" "Range$Cell$" "<Range$Cell$>")}
        {Lisp-Entry "text-empty?" method (public) () #f "<bool>" 1623 18 1623 29 ("text-ending" "text-beginning" "=" "bool" "<bool>")}
        {Lisp-Entry "get-start" method (public inline) () #f "<Cell>" 1627 25 1627 34 ("selection" "get-start" "get-start~" "Cell" "<Cell>")}
        {Lisp-Entry "get-end" method (public inline) () #f "<Cell>" 1631 25 1631 32 ("selection" "get-end" "get-end~" "Cell" "<Cell>")}
        {Lisp-Entry "get-selection" method (inline override) () #f "<Range$Cell$>" 1635 27 1635 40 ("selection" "get-range" "get-range~" "Range$Cell$" "<Range$Cell$>")}
        {Lisp-Entry "set-selection" method (override) ("range" "<Range$Cell$>" "(force?: force? #f)" "(reposition: reposition #f)" "(ensure-displayed?: ensure-displayed? #t)" "(set-anchor?: set-anchor? #t)") #f #f 1639 20 1639 33 ("get-application" "update-focus-actions" "update-focus-actions~" "self" "get-mouse-in" "mouse-down?" "unless" "center-caret" "eq?" "center?:" "ensure-displayed" "mouse-selecting?" "not" "and" "update-caret" "update-selection" "set-selection-anchor" "hide-caret" "get-selection" "cast" "/=" "or" "when" "validate-range" "set-anchor?" "set-anchor?:" "ensure-displayed?" "ensure-displayed?:" "reposition" "reposition:" "force?" "force?:" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "update-selection" method (public) ("range" "<Range$Cell$>") #f #f 1653 18 1653 34 ("when" "player" "invalidate-region" "invalidate-region~" "xor" "combine!" "combine!~" "begin" "and" "new" "selection-region-all" "old" "with" "logical->device" "logical->device~" "rect" "transformer" "let" "surface" "lambda" "with-transformation-surface" "selection" "set-range" "set-range~" "view-visible?" "not" "if" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "reset-caret" method (public) ("pos" "<Cell>" "(force?: force? #f)") #f #f 1672 18 1672 29 ("Range$Cell$" "new" "set-selection" "force?" "force?:" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "fit-range" method () ("range" "<Range$Cell$>") #f #f 1676 11 1676 20 ("new" "or" "e" ">" "when" "s" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "text-ending" "ending" "let*" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "get-selection-anchor" method (public) () #f #f 1686 18 1686 38 ("selection-anchor" "get-range" "get-range~")}
        {Lisp-Entry "get-start-anchor" method (public) () #f #f 1690 18 1690 34 ("selection-anchor" "get-start" "get-start~")}
        {Lisp-Entry "get-end-anchor" method (public) () #f #f 1694 18 1694 32 ("selection-anchor" "get-end" "get-end~")}
        {Lisp-Entry "set-selection-anchor" method (public) ("range") #f #f 1698 18 1698 38 ("copy" "selection-anchor" "set-range" "set-range~" "range")}
        {Lisp-Entry "lock-anchor" method (public) () #f #f 1702 18 1702 29 ("locked-anchor?" "set!")}
        {Lisp-Entry "unlock-anchor" method (public) () #f #f 1706 18 1706 31 ("locked-anchor?" "set!")}
        {Lisp-Entry "change-selection" method (public) ("pos" "." "rest") #f #f 1711 18 1711 34 ("set-anchor?:" "selection-range" "set-selection" "apply" "when" "others" "set-anchor?" "bind-keywords" "rest" "pos")}
        {Lisp-Entry "get-caret" method (public) () #f "<Cell>" 1716 18 1716 27 ("get-start" "Cell" "<Cell>")}
        {Lisp-Entry "set-caret" method (public) ("pos" "(force?: force? #f)") #f #f 1720 18 1720 27 ("reset-caret" "Cell" "new" "=" "and" "if" "caret" "get-length" "get-length~" "get-col" "get-col~" "col" "get-paragraph" "par" "get-limit" "get-line" "get-line~" "0" "max" "min" "line" "let*" "when" "force?" "force?:" "pos")}
        {Lisp-Entry "selection-change" method (protected virtual) () #f #f 1734 29 1734 45 ()}
        {Lisp-Entry "has-selection?" method (public) () #f #f 1738 18 1738 32 ("get-end" "get-start" "/=")}
        {Lisp-Entry "empty-selection?" method (public) () #f #f 1742 18 1742 34 ("get-end" "get-start" "=")}
        {Lisp-Entry "at-beginning?" method (public) () #f #f 1746 18 1746 31 ("text-beginning" "get-end" "get-start" "=" "and")}
        {Lisp-Entry "at-end?" method (public) () #f #f 1751 18 1751 25 ("text-ending" "get-end" "get-start" "=" "and")}
        {Lisp-Entry "at-line-start?" method (public) () #f #f 1756 18 1756 32 ("0" "get-start" "get-col" "get-col~" "=")}
        {Lisp-Entry "selected-lines" method (public) () #f #f 1760 18 1760 32 ("+" "naturals" "1" "get-line" "get-line~" "-" "0" "get-col" "get-col~" "=" "if" "end-line" "get-end" "end" "get-start" "start" "let*")}
        {Lisp-Entry "for-each-selected-paragraph" method (public) ("proc") #f #f 1767 18 1767 45 ("get-end" "get-end~" "end:" "get-start" "get-start~" "get-line" "get-line~" "start:" "model" "for-each-paragraph" "for-each-paragraph~" "get-selection" "selection" "let" "proc")}
        {Lisp-Entry "invalidate-selection" method (override) ("sel") #f #f 1774 20 1774 40 ("invalidate-range" "sel")}
        {Lisp-Entry "selection-region" method (override) ("sel" "transformer") #f #f 1778 20 1778 36 ("self" "range-region" "transformer" "sel")}
        {Lisp-Entry "get-char" method (public) ("pos" "<Cell>") #f "<char>" 1782 18 1782 26 ("element" "cardinality" "<" "if" "get-paragraph" "get-string" "get-string~" "string" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "let" "char" "<char>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "get-string" method (public) ("range" "<Range$Cell$>") #f "<string>" 1791 18 1791 28 ("range-strings" "join-lines" "string" "<string>" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "next!" method (public) ("pos" "<Cell>") #f "<bool>" 1795 18 1795 23 ("else" "0" "set-col" "set-col~" "increase-line" "increase-line~" "get-limit" "<" "increase-col" "increase-col~" "get-line" "get-line~" "paragraph-length" "get-col" "get-col~" "/=" "cond" "bool" "<bool>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "previous!" method (public) ("pos" "<Cell>") #f "<bool>" 1807 18 1807 27 ("else" "paragraph-length" "set-col" "set-col~" "increase-line" "increase-line~" "get-line" "get-line~" ">" "-1" "increase-col" "increase-col~" "0" "get-col" "get-col~" "/=" "cond" "bool" "<bool>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "next-cell" method (public) ("pos" "<Cell>") #f "<Cell+>" 1819 18 1819 27 ("next!" "when" "copy" "cell" "let" "Cell+" "<Cell+>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "previous-cell" method (public) ("pos" "<Cell>") #f "<Cell+>" 1825 18 1825 31 ("previous!" "when" "copy" "cell" "let" "Cell+" "<Cell+>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "selection-lines" method () () #f #f 1831 11 1831 26 ("get-selection" "range-strings")}
        {Lisp-Entry "get-selected-string" method (public) () #f "<string+>" 1835 18 1835 37 ("get-selection" "get-string" "has-selection?" "when" "string+" "<string+>")}
        {Lisp-Entry "get-selected-strings" method (public) () #f #f 1840 18 1840 38 ("get-selection" "get-range-strings")}
        {Lisp-Entry "get-range-strings" method (public) ("range") #f #f 1844 18 1844 35 ("range-strings" "empty?" "empty?~" "if" "range")}
        {Lisp-Entry "next-pos" method (public) ("pos" "<Cell>" "offset" "<fx>") #f "<Cell+>" 1850 18 1850 26 ("else" "1" "-" "next!" "0" "<=" "cond" "iterate" "copy" "let" "Cell+" "<Cell+>" "fx" "<fx>" "offset" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "previous-pos" method (public) ("pos" "<Cell>" "offset" "<fx>") #f "<Cell+>" 1861 18 1861 30 ("else" "1" "-" "previous!" "0" "<=" "cond" "iterate" "copy" "let" "Cell+" "<Cell+>" "fx" "<fx>" "offset" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "get-column" method (public) ("line" "<fx>") #f "<fx>" 1872 18 1872 28 ("get-col" "get-col~" "increase!" "get-char" "memq?" "while" "0" "Cell" "new" "pos" "let" "fx" "<fx>" "line")}
        {Lisp-Entry "on-goto-line" method () ("evt") #f #f 1879 11 1879 23 ("parse-integer" "-" "goto-line" "->string" "initial-value:" "prefix:" "title:" "request-string" "string" "1" "get-line" "get-line~" "+" "line" "get-start" "start" "let*" "evt")}
        {Lisp-Entry "goto-line" method (public) ("line") #f #f 1886 18 1886 27 ("+" "else" "paragraph-length" "let" "get-limit" ">=" "1" "Cell" "Range$Cell$" "new" "set-selection" "0" "<" "cond" "line")}
        {Lisp-Entry "added-update-selection" method (override) ("line" "count") #f #f 1896 20 1896 42 ("count" "line")}
        {Lisp-Entry "removed-update-selection" method (override) ("line" "count") #f #f 1900 20 1900 44 ("count" "line")}
        {Lisp-Entry "proclaim" proclaim () () #f #f 1904 3 1904 11 ("optimizations" "warn" "not")}
        {Lisp-Entry "on-lock-anchor" method (package) ("evt") #f #f 1907 19 1907 33 ("user-message" "lock-anchor" "evt")}
        {Lisp-Entry "on-unlock-anchor" method (package) ("evt") #f #f 1912 19 1912 35 ("user-message" "unlock-anchor" "evt")}
        {Lisp-Entry "on-toggle-lock-anchor" method (package) ("evt") #f #f 1917 19 1917 40 ("on-lock-anchor" "on-unlock-anchor" "locked-anchor?" "if" "evt")}
        {Lisp-Entry "add-text-action" method (public) ("text-action") #f #f 1928 18 1928 33 ("cons" "text-actions" "set!" "text-action")}
        {Lisp-Entry "run-text-action" method (public) ("text-action") #f #f 1932 18 1932 33 ("remove!" "text-actions" "memq" "when" "text-action")}
        {Lisp-Entry "remove-all-text-actions" method (public) () #f #f 1938 18 1938 41 ("text-actions" "set!")}
        {Lisp-Entry "add-highlight" method (public) ("highlight") #f #f 1947 18 1947 31 ("cons" "highlights" "set!" "highlight")}
        {Lisp-Entry "remove-highlight" method (public) ("highlight") #f #f 1951 18 1951 34 ("remove!" "highlights" "set!" "highlight")}
        {Lisp-Entry "remove-all-highlights" method (public) () #f #f 1955 18 1955 39 ("invalidate-view" "highlights" "set!")}
        {Lisp-Entry "invalidate-highlight" method (public) ("highlight") #f #f 1960 18 1960 38 ("get-range" "get-range~" "valid-range" "invalidate-range" "highlight")}
        {Lisp-Entry "invalidate-non-showed-highlights" method (public) () #f #f 1964 18 1964 50 ("highlights" "invalidate-highlight" "get-show-unfocused?" "get-show-unfocused?~" "not" "when" "highlight" "lambda" "for-each")}
        {Lisp-Entry "layout-scrollee-patch" method (override) () #f #f 1977 20 1977 41 ("update-displayed")}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 1986 20 1986 31 ("layout-scrollee" "layout-scrollee~" "model" "get-wrap?" "get-wrap?~" "when" "nextmethod" "size")}
        {Lisp-Entry "scrollee-width" method (override) () #f #f 1994 20 1994 34 ("get-display-width" "max" "fit-to-scroller?" "scroller" "and" "if" "model" "scrollee-width" "scrollee-width~" "width" "let")}
        {Lisp-Entry "dynamic-scrollee-width?" method (protected virtual) () #f #f 2002 29 2002 52 ("16" "model" "get-visible-count" "get-visible-count~" "<=")}
        {Lisp-Entry "scrollee-content-width" method (override) () #f #f 2006 20 2006 42 ("model" "scrollee-content-width" "scrollee-content-width~")}
        {Lisp-Entry "scrollee-size-update" method (protected virtual) ("size") #f #f 2010 29 2010 49 ("size")}
        {Lisp-Entry "get-length" method (public) () #f "<fx>" 2019 18 2019 28 ("model" "get-length" "get-length~" "fx" "<fx>")}
        {Lisp-Entry "get-limit" method (public) () #f "<fx>" 2023 18 2023 27 ("model" "get-limit" "get-limit~" "fx" "<fx>")}
        {Lisp-Entry "get-paragraph" method (public) ("line" "<fx>") #f "<Paragraph>" 2027 18 2027 31 ("model" "get-paragraph" "get-paragraph~" "Paragraph" "<Paragraph>" "fx" "<fx>" "line")}
        {Lisp-Entry "paragraph-string" method (public) ("line" "<fx>") #f "<string>" 2031 18 2031 34 ("model" "paragraph-string" "paragraph-string~" "string" "<string>" "fx" "<fx>" "line")}
        {Lisp-Entry "paragraph-length" method (public) ("line" "<fx>") #f "<fx>" 2035 18 2035 34 ("model" "paragraph-length" "paragraph-length~" "fx" "<fx>" "line")}
        {Lisp-Entry "first-paragraph" method (public) () #f #f 2039 18 2039 33 ("model" "first-paragraph" "first-paragraph~")}
        {Lisp-Entry "get-print-area" method (override) ("context") #f #f 2048 20 2048 34 ("model" "get-print-area" "get-print-area~" "context")}
        {Lisp-Entry "paginate" method (override) ("page-width" "page-height") #f #f 2052 20 2052 28 ("model" "paginate-range" "paginate-range~" "1" "get-limit" "get-end" "+" "end" "0" "get-start" "get-line" "get-line~" "if" "start" "has-selection?" "selected?" "let" "page-height" "page-width")}
        {Lisp-Entry "setup-printing" method (override) () #f #f 2059 20 2059 34 ("model" "setup-printing" "setup-printing~")}
        {Lisp-Entry "restore-printing" method (override) ("preserved") #f #f 2063 20 2063 36 ("model" "restore-printing" "restore-printing~" "preserved")}
        {Lisp-Entry "draw-enabled?" method (protected virtual) () #f #f 2072 29 2072 42 ("view-enabled?")}
        {Lisp-Entry "get-drawing-background" method (override) ("context") #f #f 2076 20 2076 42 ("nextmethod" "get-background" "get-background~" "or" "get-look" "look" "let" "Medium" "Color" "draw-enabled?" "not" "if" "context")}
        {Lisp-Entry "draw-children" method (override) ("surface" "nodes" "context") #f #f 2084 20 2084 33 ("nextmethod" "draw-selection" "unless" "printing?:" "getf" "printing?" "bottom" "top" "get-bottom" "get-bottom~" "get-right" "get-right~" "get-top" "get-top~" "get-left" "get-left~" "line~" "1" "set-line-width" "set-line-width~" "Black" "Color" "get-look" "get-caret-color" "get-caret-color~" "set-color" "set-color~" "0" "get-caret" "caret-rect" "Rect" "<Rect>" "rect" "alt-down?" "mouse-down?" "not" "empty-selection?" "caret-visible?" "and" "draw-caret" "highlights" "get-v" "get-v~" "get-h" "get-h~" "draw-style" "draw-style~" "draw-enabled?" "enabled?" "get-left-margin" "get-left-margin~" "left" "get-format" "get-format~" "format" "get-height" "get-height~" "height" "cdr" "pos" "car" "line" "text->view-extended" "info" "get-col" "get-col~" "get-string" "get-string~" "subseq" "target" "get-line" "get-line~" "get-paragraph" "paragraph" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "let*" "get-style" "get-style~" "style" "get-range" "get-range~" "range" "get-show-unfocused?" "get-show-unfocused?~" "or" "when" "highlight" "lambda" "for-each" "model" "get-tabs" "get-tabs~" "tabs" "has-focus?" "focus?" "let" "draw-highlights" "define" "context" "nodes" "surface")}
        {Lisp-Entry "draw-selection" method (protected) ("surface" "top" "bottom") #f #f 2124 21 2124 35 ("get-inactive-selection-color" "get-selection-color" "if" "fill-region" "fill-region~" "identity" "text-selection-region" "region" "with" "selectable?" "show-unfocused-selection?" "is-focused?" "or" "and" "when" "bottom" "top" "surface")}
        {Lisp-Entry "get-look" method (override) () #f #f 2139 20 2139 28 ("text" "find-look")}
        {Lisp-Entry "ensure-displayed" method (override) ("." "rest") #f #f 2148 20 2148 36 ("ensure-range-displayed" "apply" "when" "get-selection" "selection" "let" "rest")}
        {Lisp-Entry "ensure-cell-displayed" method (public) ("pos" "<Cell>") #f #f 2154 18 2154 39 ("get-scroll-context" "scroll-needed" "scroll" "get-height-at" "0" "Point" "new" "+" "end" "text->view" "start" "let*" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "ensure-range-displayed" method (public) ("range" "<Range$Cell$>" "." "rest") #f #f 2160 18 2160 40 ("get-scroll-context" "0" "Point" "new" "+" "text->view" "scroll-needed" "apply" "scroll" "get-height-at" "end-height" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "let*" "update-locked?" "unless" "rest" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "ensure-scrolled-left" method (public) () #f #f 2168 18 2168 38 ("Point" "new" "scroll" "-" "<" "get-end" "text->view" "end" "get-scrolled-distance-h" "+" "tail" "*" "fxround" "if" "get-scroll-context" "cdr" "context" "get-display-width" "size" "let*" "get-position" "get-h" "get-h~" "0" "/=" "when" "update-locked?" "unless")}
        {Lisp-Entry "cell-displayed?" method (public) ("pos") #f #f 2180 18 2180 33 ("scroll-needed" "=" "get-height-at" "0" "Point" "new" "+" "end" "text->view" "start" "let*" "pos")}
        {Lisp-Entry "on-center-caret" method () ("evt") #f #f 2186 11 2186 26 ("center-caret" "evt")}
        {Lisp-Entry "on-top-caret" method () ("evt") #f #f 2190 11 2190 23 ("top-caret" "evt")}
        {Lisp-Entry "center-caret" method (public) () #f #f 2194 18 2194 30 ("0" "Point" "new" "scroll-to" "2" "fxround/" "half" "let" ">=" "if" "top" "get-display-height" "height" "-" "size" "get-end" "get-top" "get-top~" "end" "get-start" "get-line" "get-line~" "get-row" "get-bottom" "get-bottom~" "start" "let*")}
        {Lisp-Entry "center-undisplayed-caret" method (public) () #f #f 2206 18 2206 42 ("center-caret" "get-end" "get-start" "cell-displayed?" "not" "or" "when")}
        {Lisp-Entry "top-caret" method (public) () #f #f 2212 18 2212 27 ("-" "0" "Point" "new" "scroll-to" "get-start" "get-line" "get-line~" "get-row" "get-top" "get-top~" "start" "let")}
        {Lisp-Entry "get-constituent-test" method (public virtual) () #f #f 2222 26 2222 46 ("syntax" "get-constituent-test" "get-constituent-test~")}
        {Lisp-Entry "text-constituent?" method (public virtual) ("char") #f #f 2226 26 2226 43 ("syntax" "text-constituent?" "text-constituent?~" "char")}
        {Lisp-Entry "get-match-test" method (public virtual) () #f #f 2230 26 2230 40 ("syntax" "get-match-test" "get-match-test~")}
        {Lisp-Entry "move-forward" method (public) ("pos" "word?") #f #f 2239 18 2239 30 ("model" "move-forward" "move-forward~" "word?" "pos")}
        {Lisp-Entry "move-backward" method (public) ("pos" "word?") #f #f 2243 18 2243 31 ("model" "move-backward" "move-backward~" "word?" "pos")}
        {Lisp-Entry "insert-char" method (public) ("c") #f #f 2252 18 2252 29 ("get-selection" "model" "insert-char" "insert-char~" "caret-update" "write-allowed?" "when" "c")}
        {Lisp-Entry "insert-string" method (public) ("str") #f #f 2257 18 2257 31 ("get-selection" "model" "insert-string" "insert-string~" "caret-update" "write-allowed?" "when" "str")}
        {Lisp-Entry "insert-styled" method (public) ("string" "style") #f #f 2262 18 2262 31 ("Range$Cell$" "new" "stylize-range" "stylize-range~" "insert-string" "locate-style" "locate-style~" "else" "model" "get-default-style" "get-default-style~" "not" "Style" "is?" "cond" "get-start" "start" "let" "write-allowed?" "when" "style" "string")}
        {Lisp-Entry "replace-styled" method (public) ("range" "strings" "style") #f #f 2270 18 2270 32 ("Range$Cell$" "new" "stylize-range" "stylize-range~" "replace" "replace~" "locate-style" "locate-style~" "else" "model" "get-default-style" "get-default-style~" "not" "Style" "is?" "cond" "get-start" "get-start~" "start" "let" "write-allowed?" "when" "style" "strings" "range")}
        {Lisp-Entry "insert-line" method (public) ("line" "(proper? #t)") #f #f 2278 18 2278 29 ("list" "if" "replace-selection" "write-allowed?" "when" "proper?" "line")}
        {Lisp-Entry "insert-bulleted-line" method (public) ("line") #f #f 2283 18 2283 38 ("model" "toggle-bulleted" "toggle-bulleted~" "insert-line" "get-start" "get-line" "get-line~" "let" "write-allowed?" "when" "line")}
        {Lisp-Entry "insert-newline" method (public) () #f #f 2290 18 2290 32 ("insert-string" "end-completion" "write-allowed?" "when")}
        {Lisp-Entry "insert-link" method (public) ("string" "(font: font #f)" "(anchor: anchor #f)" "(action: action #f)") #f #f 2296 18 2296 29 ("insert-styled" "Color" "color:" "Link-Style" "new" "style" "Link" "Font" "or" "let*" "write-allowed?" "when" "action" "action:" "anchor" "anchor:" "font" "font:" "string")}
        {Lisp-Entry "insert-image" method (public) ("moniker") #f #f 2303 18 2303 30 ("insert-styled" "moniker:" "Image-Style" "new" "style" "let" "write-allowed?" "when" "moniker")}
        {Lisp-Entry "insert-view" method (public) ("view/form") #f #f 2309 18 2309 29 ("insert-styled" "view:" "View-Style" "new" "style" "let" "set-parent" "set-parent~" "get-line" "get-line~" "get-paragraph" "paragraph" "get-end" "end" "instantiate" "instantiate~" "View" "is?" "if" "view" "let*" "write-allowed?" "when" "view/form")}
        {Lisp-Entry "backspace" method (public) ("word?") #f #f 2324 18 2324 27 ("get-end" "get-start" "move-backward" "Range$Cell$" "new" "model" "delete-range" "delete-range~" "caret-update" "delete-selection" "has-selection?" "if" "at-beginning?" "unless" "write-allowed?" "when" "word?")}
        {Lisp-Entry "delete-char" method (public virtual) () #f #f 2332 26 2332 37 ("delete-action")}
        {Lisp-Entry "delete-word" method (public virtual) () #f #f 2336 26 2336 37 ("delete-action")}
        {Lisp-Entry "delete-action" method (public) ("word?") #f #f 2340 18 2340 31 ("get-end" "move-forward" "get-start" "Range$Cell$" "new" "model" "delete-range" "delete-range~" "caret-update" "delete-selection" "has-selection?" "if" "at-end?" "unless" "write-allowed?" "when" "word?")}
        {Lisp-Entry "replace" method (public) ("range" "<Range$Cell$>" "strings") #f #f 2348 18 2348 25 ("model" "replace" "replace~" "caret-update" "lambda" "without-caret" "write-allowed?" "when" "strings" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "replace-text" method (protected) ("range" "<Range$Cell$>" "strings") #f #f 2355 21 2355 33 ("model" "replace-text" "replace-text~" "caret-update" "write-allowed?" "when" "strings" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "replace-selection" method (public) ("strings") #f #f 2360 18 2360 35 ("get-selection" "model" "replace" "replace~" "caret-update" "write-allowed?" "when" "strings")}
        {Lisp-Entry "caret-update" method () ("caret") #f #f 2365 11 2365 23 ("update-caret" "force?:" "set-caret" "when" "caret")}
        {Lisp-Entry "copy-formatted-selection" method () () #f #f 2376 11 2376 35 ("jazz-formatted-text" "format:" "set-clipboard-text" "get-output-string" "text" "get-selection" "model" "print-formatted" "print-formatted~" "open-output-string" "output" "let" "bell" "empty-selection?" "if")}
        {Lisp-Entry "paste-formatted-clipboard" method () () #f #f 2385 11 2385 36 ("replace-selection" "split-lines" "strings" "let" "get-selection" "model" "replace-formatted" "replace-formatted~" "read-string-element" "lambda" "with-jazz-readtable" "info" "format:" "get-clipboard-text" "text" "let*" "jazz-formatted-text" "clipboard-format-available?" "if")}
        {Lisp-Entry "replace-formatted-text" method (protected) ("range" "<Range$Cell$>" "strings" "formats" "styles" "paragraphs") #f #f 2394 21 2394 43 ("model" "replace-formatted-text" "replace-formatted-text~" "lambda" "without-caret" "write-allowed?" "when" "paragraphs" "styles" "formats" "strings" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "formatted-start-delimiter" definition (protected) () #f #f 2406 24 2406 49 ()}
        {Lisp-Entry "formatted-end-delimiter" definition (protected) () #f #f 2409 24 2409 47 ()}
        {Lisp-Entry "insert-formatted-line" method (public virtual) ("line") #f #f 2413 26 2413 47 ("process-formatted" "call-with-input-string" "line")}
        {Lisp-Entry "process-formatted" method (protected) ("input") #f #f 2418 21 2418 38 ("else" "process-formatted-directive" "read-formatted-parameter" "directive" "cond" "not" "and" "when" "process" "read-char" "write-char" "Output" "get-output-string" "insert-styled" "formatted-end-delimiter" "formatted-start-delimiter" "eqv?" "eof-object?" "or" "if" "peek-char" "c" "iterate" "open-output-string" "output" "let" "process-string" "define" "input")}
        {Lisp-Entry "with-formatted-range" method () ("input" "proc") #f #f 2445 11 2445 31 ("Range$Cell$" "new" "end" "error" "eof-object?" "if" "read-char" "end-char" "process-formatted" "get-start" "start" "let" "proc" "input")}
        {Lisp-Entry "process-formatted-directive" method (protected virtual) ("directive" "input") #f #f 2455 29 2455 56 ("error" "else" "registered-font" "set-text-font" "set-text-font~" "font" "registered-color" "set-text-color" "set-text-color~" "read-formatted-parameter" "let" "color" "toggle-underline" "toggle-underline~" "underline" "toggle-italic" "toggle-italic~" "italic" "model" "toggle-bold" "toggle-bold~" "range" "lambda" "with-formatted-range" "bold" "at-line-start?" "unless" "$" "insert-newline" "%" "case" "input" "directive")}
        {Lisp-Entry "read-formatted-parameter" definition () ("input") #f #f 2488 15 2488 39 ("read-char" "read" "prog1" "input")}
        {Lisp-Entry "add-format" method (public) ("name" "pref-format") #f "<Format>" 2498 18 2498 28 ("model" "add-format" "add-format~" "Format" "<Format>" "pref-format" "name")}
        {Lisp-Entry "add-style" method (public) ("name" "pref-style") #f "<Style>" 2507 18 2507 27 ("model" "add-style" "add-style~" "Style" "<Style>" "pref-style" "name")}
        {Lisp-Entry "locate-style" method (public) ("name/style" "(error?: error? #t)") #f "<Style>" 2511 18 2511 30 ("model" "locate-style" "locate-style~" "Style" "<Style>" "error?" "error?:" "name/style")}
        {Lisp-Entry "get-default-height" method (public) () #f "<fx>" 2520 18 2520 36 ("model" "get-default-height" "get-default-height~" "fx" "<fx>")}
        {Lisp-Entry "get-height-at" method (public) ("pos" "<Cell>") #f "<fx>" 2524 18 2524 31 ("model" "get-height-at" "get-height-at~" "fx" "<fx>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "get-headers" method (public virtual) () #f "<list>" 2533 26 2533 37 ("list" "<list>")}
        {Lisp-Entry "get-chapters" method (public virtual) () #f "<list>" 2537 26 2537 38 ("get-output" "get-output~" "put" "put~" "get-chapter-label" "label" "2" "1" "0" "level" "subseq" "header" "paragraph-string" "string" "get-column" "=" "when" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "to" "from" "bind" "info" "lambda" "for-each" "List-Factory" "new" "chapters" "make-search-context" "map" "model" "text-regular-search-all" "text-regular-search-all~" "occurences" "not" "if" "get-headers" "headers" "let" "list" "<list>")}
        {Lisp-Entry "get-chapter-label" method (public virtual) ("string" "col" "from" "to") #f #f 2557 26 2557 43 ("model" "position-offset" "position-offset~" "-" "+" "subseq" "to" "from" "col" "string")}
        {Lisp-Entry "get-first-special?" method (public virtual) () #f "<bool>" 2561 26 2561 44 ("bool" "<bool>")}
        {Lisp-Entry "get-first-chapter" method (public virtual) ("lst") #f #f 2565 26 2565 43 ("get-name" "get-name~" "not" "text-beginning" "0" "list" "get-moniker" "file" "let" "car" "null?" "get-first-special?" "if" "lst")}
        {Lisp-Entry "get-remaining-chapters" method (public virtual) ("lst") #f #f 2577 26 2577 48 ("cdr" "null?" "get-first-special?" "if" "lst")}
        {Lisp-Entry "current-name" method (public) () #f #f 2588 18 2588 30 ("name-at" "when" "current-expr-range" "range" "let")}
        {Lisp-Entry "current-symbol" method (public) () #f #f 2594 18 2594 32 ("symbol?" "when" "current-expr" "expr" "let")}
        {Lisp-Entry "current-expr" method (public) () #f #f 2600 18 2600 30 ("current-name")}
        {Lisp-Entry "current-expr-range" method (public) () #f #f 2604 18 2604 36 ("get-end" "expr-range" "effective-selection" "or")}
        {Lisp-Entry "current-expr-string" method (public) () #f #f 2609 18 2609 37 ("get-string" "when" "current-expr-range" "range" "let")}
        {Lisp-Entry "name-at" method (public virtual) ("range") #f #f 2615 26 2615 33 ("syntax" "name-at" "name-at~" "range")}
        {Lisp-Entry "expr-at" method (public virtual) ("pos") #f #f 2619 26 2619 33 ("syntax" "expr-at" "expr-at~" "pos")}
        {Lisp-Entry "range-expr" method (public virtual) ("range") #f #f 2623 26 2623 36 ("syntax" "range-expr" "range-expr~" "range")}
        {Lisp-Entry "expr-range" method (public virtual) ("pos") #f #f 2627 26 2627 36 ("syntax" "expr-range" "expr-range~" "pos")}
        {Lisp-Entry "outer-range" method (public) ("range") #f #f 2631 18 2631 29 ("syntax" "outer-range" "outer-range~" "range")}
        {Lisp-Entry "mouse-insert" method (override) ("copy") #f #f 2640 20 2640 32 ("insert-string" "last" "string-append" "set!" "0" "element" "text-ending" "next" "previous-cell" "get-char" "text-beginning" "/=" "prev" "nu=?" "when" "get-end" "end" "get-start" "start" "let" "text-constituent?" "memv?" "or" "not" "and" "after" "before" "separate?" "define" "copy")}
        {Lisp-Entry "range-strings" method (public) ("range" "<Range$Cell$>") #f "<list>" 2664 18 2664 31 ("get-output" "get-output~" "0" "1" "+" "naturals" "map" "put-sequence" "put-sequence~" "put" "put~" "List-Factory" "new" "dest" "get-col" "get-col~" "paragraph-string" "subseq" "get-line" "get-line~" "=" "if" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "let" "list" "<list>" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "range-first-string" method (public) ("range" "<Range$Cell$>") #f "<string>" 2676 18 2676 36 ("range-strings" "first" "string" "<string>" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "Marked-Column" definition () () #f #f 2685 14 2685 27 ()}
        {Lisp-Entry "on-mark-column" method () ("evt") #f #f 2689 11 2689 25 ("mark-column" "evt")}
        {Lisp-Entry "on-fill-to-column" method () ("evt") #f #f 2693 11 2693 28 ("fill-to-column" "evt")}
        {Lisp-Entry "mark-column" method () () #f #f 2697 11 2697 22 ("user-message" "Marked-Column" "set!" "get-col" "get-col~" "col" "get-start" "start" "let*")}
        {Lisp-Entry "fill-to-column" method () () #f #f 2704 11 2704 25 ("make-string" "insert-string" "1" "sign" "case" "-" "delta" "get-col" "get-col~" "col" "get-start" "start" "let*" "bell" "Marked-Column" "not" "has-selection?" "or" "if")}
        {Lisp-Entry "on-upcase-selection" method () ("evt") #f #f 2719 11 2719 30 ("get-selected-string" "upcase" "insert-string" "lambda" "with-preserved-selection" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "on-downcase-selection" method () ("evt") #f #f 2727 11 2727 32 ("get-selected-string" "downcase" "insert-string" "lambda" "with-preserved-selection" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "on-capitalize-selection" method () ("evt") #f #f 2735 11 2735 34 ("get-selected-string" "capitalize" "insert-string" "lambda" "with-preserved-selection" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "with-preserved-selection" method () ("proc") #f #f 2743 11 2743 35 ("set-selection-anchor" "valid-range" "set-selection" "get-selection-anchor" "anchor" "get-selection" "selection" "let" "proc")}
        {Lisp-Entry "view->text" method (public) ("pos" "<Point>") #f "<Cell>" 2756 18 2756 28 ("new" "get-position" "get-position~" "-" "view->col" "view->col~" "col" "get-paragraph" "par" "assert" "line" "get-v" "get-v~" "let" "v->line" "else" "get-limit" "model" "get-visible-height" "get-visible-height~" ">=" "0" "<" "cond" "v" "effective-line" "define" "Cell" "<Cell>" "Point" "<Point>" "pos")}
        {Lisp-Entry "text->view" method (public) ("pos" "<Cell>") #f "<Point>" 2774 18 2774 28 ("get-v" "get-v~" "line->view" "+" "get-h" "get-h~" "new" "get-col" "get-col~" "col->view" "col->view~" "view" "get-line" "get-line~" "get-paragraph" "par" "let*" "Point" "<Point>" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "text->view-extended" method (public) ("pos" "<Cell>") #f #f 2782 18 2782 37 ("get-v" "get-v~" "line->view" "+" "get-h" "get-h~" "Point" "new" "cons" "cdr" "view" "car" "line" "get-col" "get-col~" "col->view-extended" "col->view-extended~" "info" "get-line" "get-line~" "get-paragraph" "par" "let*" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "line->view" method () ("line" "<fx>") #f "<fx>" 2792 11 2792 21 ("get-position" "get-position~" "get-v" "get-v~" "get-paragraph" "par" "let" "fx" "<fx>" "line")}
        {Lisp-Entry "validate-range" method () ("range" "<Range$Cell$>") #f "<void>" 2802 11 2802 25 ("error" "valid-cell" "=" "and" "unless" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "let" "void" "<void>" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "valid-cell" method (public) ("cell") #f "<Cell>" 2810 18 2810 28 ("paragraph-length" "len" "get-col" "get-col~" "col" "line" "restrict-col" "0" "new" "get-line" "get-line~" ">" "if" "restrict-row" "define" "get-limit" "limit" "let" "Cell" "<Cell>" "cell")}
        {Lisp-Entry "valid-range" method (public) ("range") #f "<Range$Cell$>" 2828 18 2828 29 ("get-end" "get-end~" "get-start" "get-start~" "valid-cell" "new" "Range$Cell$" "<Range$Cell$>" "range")}
        {Lisp-Entry "set-selection-safe" method (public) ("range" "." "rest") #f #f 2834 18 2834 36 ("valid-range" "set-selection" "apply" "rest" "range")}
        {Lisp-Entry "set-selection-format/style" method (public) ("name/exemplar" "(format?: format? #f)" "(style?: style? #f)") #f #f 2843 18 2843 44 ("invalidate-view" "layout-scrollee" "set-modified?" "set-paragraph-format" "set-paragraph-format~" "else" "end:" "start:" "get-length" "get-length~" "0" "Cell" "Range$Cell$" "new" "set-text-style" "set-text-style~" "Paragraph" "<Paragraph>" "paragraph" "fx" "<fx>" "line" "lambda" "for-each-paragraph" "for-each-paragraph~" "empty-selection?" "or" "cond" "when" "get-line" "get-line~" "get-paragraph" "neq?" "span?" "get-end" "end" "get-start" "start" "get-selection" "selection" "locate-style" "locate-style~" "style" "error?:" "model" "locate-format" "locate-format~" "and" "format" "let*" "style?" "style?:" "format?" "format?:" "name/exemplar")}
        {Lisp-Entry "on-bold" method () ("evt") #f #f 2870 11 2870 18 ("get-selection" "model" "toggle-bold" "toggle-bold~" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "on-italic" method () ("evt") #f #f 2876 11 2876 20 ("get-selection" "model" "toggle-italic" "toggle-italic~" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "on-underline" method () ("evt") #f #f 2882 11 2882 23 ("get-selection" "model" "toggle-underline" "toggle-underline~" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "get-ruler" method (public virtual) () #f #f 2893 26 2893 35 ()}
        {Lisp-Entry "on-toggle-ruler" method () ("evt") #f #f 2897 11 2897 26 ("get-shown?" "get-shown?~" "set-shown?" "set-shown?~" "bell" "not" "if" "get-ruler" "ruler" "let" "evt")}
        {Lisp-Entry "set-selection-font-name" method (public) ("name") #f #f 2909 18 2909 41 ("invalidate-view" "layout-scrollee" "set-modified?" "model" "wrap-paragraph" "wrap-paragraph~" "set-font-name" "set-font-name~" "end" "start" "paragraph" "line" "lambda" "get-selection" "for-each-range" "name")}
        {Lisp-Entry "set-selection-point-size" method (public) ("size") #f #f 2919 18 2919 42 ("invalidate-view" "layout-scrollee" "set-modified?" "model" "wrap-paragraph" "wrap-paragraph~" "set-point-size" "set-point-size~" "end" "start" "paragraph" "line" "lambda" "get-selection" "for-each-range" "size")}
        {Lisp-Entry "pick-text-color" definition () ("sender") #f #f 2934 15 2934 30 ("8" "3" "Cell" "geometry:" "get-parent" "get-parent~" "popup-colors" "popup-colors~" "sender")}
        {Lisp-Entry "pick-highlight-color" definition () ("sender") #f #f 2938 15 2938 35 ("8" "3" "Cell" "geometry:" "get-parent" "get-parent~" "popup-colors" "popup-colors~" "sender")}
        {Lisp-Entry "pick-frame-color" definition () ("sender") #f #f 2942 15 2942 31 ("8" "3" "Cell" "geometry:" "get-parent" "get-parent~" "popup-colors" "popup-colors~" "sender")}
        {Lisp-Entry "has-completion?" method (protected) () #f #f 2951 21 2951 36 ("has-selection?" "completion-active?" "and")}
        {Lisp-Entry "has-ambiguous-completion?" method (protected) () #f #f 2955 21 2955 46 ("has-selection?" "completion-unique?" "not" "completion-active?" "and")}
        {Lisp-Entry "has-effective-selection?" method (protected) () #f #f 2959 21 2959 45 ("has-selection?" "completion-active?" "not" "and")}
        {Lisp-Entry "empty-effective-selection?" method (protected) () #f #f 2963 21 2963 47 ("empty-selection?" "completion-active?" "or")}
        {Lisp-Entry "effective-selection" method (protected) () #f #f 2967 21 2967 40 ("get-selection" "has-effective-selection?" "when")}
        {Lisp-Entry "set-completion" method (protected) ("range" "unique?") #f #f 2972 21 2972 35 ("set-selection" "completion-unique?" "completion-active?" "set!" "unique?" "range")}
        {Lisp-Entry "remove-completion" method () () #f #f 2978 11 2978 28 ("set!" "delete-selection" "completion-active?" "when")}
        {Lisp-Entry "end-completion" method (protected) () #f #f 2984 21 2984 35 ("get-end" "set-caret" "set!" "completion-active?" "when")}
        {Lisp-Entry "auto-complete?" method (protected virtual) () #f #f 2990 29 2990 43 ()}
        {Lisp-Entry "favorite-completions?" method (protected virtual) () #f #f 2994 29 2994 50 ()}
        {Lisp-Entry "favorite-completions" method (protected virtual) () #f #f 2998 29 2998 49 ("syntax" "favorite-completions" "favorite-completions~")}
        {Lisp-Entry "favorite-completion" method (protected virtual) ("name") #f #f 3002 29 3002 48 ("favorite-completions" "assoc-value" "name")}
        {Lisp-Entry "completion-name" method (protected virtual) ("pos") #f #f 3006 29 3006 44 ("pos")}
        {Lisp-Entry "completion-string" method () ("pos") #f #f 3010 11 3010 28 ("else" "alphabet" "completions-prefix" "common" "5" "string=?" "user-message" "car" "found" "=" "cond" "length" "count" "symbol-completions" "let*" "complete-name?" "subseq" "clear-user-message" "when" "begin" "get-application" "macro-playing?" "macro-playing?~" "feedback?" "favorite-completion" "get-user-completion" "or" "favorite-completions?" "favorite" "size" "values" "not" "completion-name" "String" "coerce" "element" "completion" "lambda" "map" "char<?" "sort" "remove-duplicates" "alphabet-char" "offset" "completions" "alphabetize-completion" "1" "substring" "string-ref" "eqv?" "0" ">" "and" "string-length" "len" "let" "if" "name" "skip-prefix" "define" "pos")}
        {Lisp-Entry "complete-name?" method (protected virtual) ("size") #f #f 3070 29 3070 43 ("2" ">=" "size")}
        {Lisp-Entry "symbol-completions" method (protected virtual) ("name") #f #f 3074 29 3074 47 ("name")}
        {Lisp-Entry "completions-prefix" method (protected virtual) ("completions") #f #f 3078 29 3078 47 ("prefix" "completions")}
        {Lisp-Entry "auto-complete" method (protected virtual) ("key") #f #f 3082 29 3082 42 ("insert-char/backspace" "end-completion" "list" "replace-selection" "completion-active?" "when" "subseq" "replacement" "find" "offset" "selection-lines" "join-lines" "completion" "complete-at" "insert-char" "begin" "auto-complete-char?" "not" "if" "self" "class-of" "class" "1" "-" "get-char" "0" "get-col" "get-col~" ">" "and" "last" "get-end" "end" "let*" "get-start" "get-style-at" "get-style-at~" "lambda" "model" "get-undoer" "get-undoer~" "with-atomic-undo" "with-atomic-undo~" "key")}
        {Lisp-Entry "auto-complete-char?" method (protected virtual) ("key" "last") #f #f 3103 29 3103 48 ("syntax" "auto-complete-char?" "auto-complete-char?~" "last" "key")}
        {Lisp-Entry "complete-at" method () ("pos" "<Cell>") #f #f 3107 11 3107 22 ("cardinality" "fx" "<fx>" "cast" "+" "Range$Cell$" "new" "set-completion" "insert-string" "completion-unique?" "completion-active?" "set!" "begin" "not" "if" "completion-string" "unique?" "completion" "receive" "get-application" "macro-recording?" "macro-recording?~" "get-style-at" "get-style-at~" "model" "textual-style?" "textual-style?~" "or" "unless" "Cell" "<Cell>" "pos")}
        {Lisp-Entry "convert-completion" method (protected) () #f #f 3119 21 3119 39 ("set-anchor?:" "Range$Cell$" "new" "set-selection" "end-completion" "get-end" "end" "get-start" "start" "let" "completion-active?" "when")}
        {Lisp-Entry "insert-char/backspace" method (protected) ("c" "(word?: word? #f)") #f #f 3127 21 3127 42 ("insert-char" "else" "backspace" "delete-selection" "completion-active?" "when" "case" "word?" "word?:" "c")}
        {Lisp-Entry "on-search-forward-mode" method () ("evt") #f #f 3143 11 3143 33 ("ignore-case?:" "get-selected-string" "model" "search-context" "search-context~" "forward" "get-application" "select-command-search" "select-command-search~" "evt")}
        {Lisp-Entry "on-search-backward-mode" method () ("evt") #f #f 3148 11 3148 34 ("ignore-case?:" "get-selected-string" "model" "search-context" "search-context~" "backward" "get-application" "select-command-search" "select-command-search~" "evt")}
        {Lisp-Entry "on-search-current" method () ("evt") #f #f 3153 11 3153 28 ("select-command-search-current" "select-command-search-current~" "get-range-strings" "current" "ignore-case?:" "model" "search-context" "search-context~" "forward" "get-application" "select-command-search" "select-command-search~" "not" "current-expr-range" "range" "let" "car" "null?" "if" "strings" "single-line" "define" "evt")}
        {Lisp-Entry "text-expression-search" method (public) ("string" "(start: start #f)" "(end: end (get-limit))" "(reversed?: reversed? #f)") #f #f 3166 18 3166 40 ("car" "when" "position" "search-expressions" "search-expressions~" "found" "quotation" "code" "get-extension" "get-extension~" "ci=?" "not" "or" "if" "mode" "get-moniker" "moniker" "text-beginning" "model" "explorer-class" "new" "expl" "let*" "reversed?" "reversed?:" "get-limit" "end" "end:" "start" "start:" "string")}
        {Lisp-Entry "select-next" method (public virtual) ("search-context" "(end: end #f)") #f #f 3180 26 3180 37 ("ensure-scrolled-left" "ensure-displayed" "-" "position-offset" "position-offset~" "+" "offset-position" "offset-position~" "Range$Cell$" "new" "set-selection" "to" "from" "bind" "when" "reversed?:" "get-end" "start:" "model" "text-regular-search" "text-regular-search~" "found" "let" "end" "end:" "search-context")}
        {Lisp-Entry "select-previous" method (public virtual) ("search-context" "(end: end #f)") #f #f 3190 26 3190 41 ("ensure-scrolled-left" "ensure-displayed" "-" "position-offset" "position-offset~" "+" "offset-position" "offset-position~" "Range$Cell$" "new" "set-selection" "to" "from" "bind" "when" "reversed?:" "get-start" "start:" "model" "text-regular-search" "text-regular-search~" "found" "let" "end" "end:" "search-context")}
        {Lisp-Entry "select-expr" method (public virtual) ("search-context" "direction") #f #f 3200 26 3200 37 ("select-expr-backward" "backward" "select-expr-forward" "forward" "case" "direction" "search-context")}
        {Lisp-Entry "select-expr-forward" method (public virtual) ("search-context") #f #f 3206 26 3206 45 ("select-next" "text-beginning" "set-caret" "search-context")}
        {Lisp-Entry "select-expr-backward" method (public virtual) ("search-context") #f #f 3211 26 3211 46 ("select-previous" "text-ending" "set-caret" "search-context")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 3221 25 3221 45 ("Text-View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 3230 11 3230 17 ()
        {Lisp-Entry "import" import () () #f #f 3233 1 3233 7 ("jazz.designer")}
        {Lisp-Entry "Text-View-Descriptor" class () ((extends . "Outline-View-Descriptor")) #f #f 3236 7 3236 27 ("Outline-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 3239 3 3239 7 ("force-tab-navigate?" "show-unfocused-selection?" "editable?" "domain" "Boolean-Domain" "<Boolean-Domain>" "title:" "selectable?" "name:" "Property-Descriptor" "<Property-Descriptor>" "background" "focus-selects-all?" "accepts-returns?" "name-info" "class-info" "categorized:" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 3256 20 3256 31 ("Image-Resource" "class")}
          {Lisp-Entry "component-surrogate-class" method (override) ("component") #f #f 3260 20 3260 45 ("Text-View-Surrogate" "component")}
          {Lisp-Entry "component-save-properties" method (override) ("component" "designer") #f #f 3264 20 3264 45 ("set-modified?" "set-modified?~" "design-events?:" "get-model" "get-model~" "get-content" "get-content~" "text-content" "set-property" "set-property~" "get-modified?" "get-modified?~" "when" "designer" "component")}}}}})
"Text-Widget"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "widget" "Text-Widget.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.widget.Text-Widget" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Text-Widget" class (undocumented) ((extends . "Border-View")) #f #f 44 20 44 31 ("Border-View")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("text" "Plain-Text-View" "<Plain-Text-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "scroller" "name:" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "install" "<install>")}
        {Lisp-Entry "default-size" method (override) () #f #f 54 20 54 32 ("150" "300" "Dimension")}}}})
"TextToXHTML-Exporter"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "TextToXHTML-Exporter.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.text.TextToXHTML-Exporter" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "TextToXHTML-Exporter" class (undocumented) ((extends . "Object")) #f #f 43 20 43 40 ("Object")
        {Lisp-Entry "text" slot () () #f #f 46 8 46 12 ()}
        {Lisp-Entry "initialize" method (override) ("text") #f #f 49 20 49 30 ("self" "text~self" "set!" "nextmethod" "text")}
        {Lisp-Entry "export-html" method (public) () #f #f 59 18 59 29 ("export-body" "export-head" "html" "<html>")}
        {Lisp-Entry "export-head" method () () #f #f 70 11 70 22 ("head" "<head>")}
        {Lisp-Entry "export-body" method () () #f #f 79 11 79 22 ("text" "export-element" "body" "<body>")}
        {Lisp-Entry "export-element" method () ("element" "in-table?") #f #f 89 11 89 25 ("error" "else" "export-paragraph" "Paragraph" "export-text" "Text-View" "typecase" "in-table?" "element")}
        {Lisp-Entry "export-text" method () ("element" "in-table?") #f #f 101 11 101 22 ("export-paragraph" "paragraph" "lambda" "get-paragraphs" "get-paragraphs~" "accumulate" "in-table?" "element")}
        {Lisp-Entry "export-paragraph" method () ("paragraph" "in-table?") #f #f 107 11 107 27 (",@runs" ",@style" "p" "<p>" "export-runs" "runs" "style" "else" "right" "style:" "center" "get-justification" "get-justification~" "case" "paragraph-style" "define" "get-format" "get-format~" "fmt" "let" "in-table?" "paragraph")}
        {Lisp-Entry "export-runs" method () ("paragraph" "in-table?") #f #f 120 11 120 22 ("get-runs" "get-runs~" "export-run" "run" "lambda" "map" "in-table?" "paragraph")}
        {Lisp-Entry "export-run" method () ("run" "in-table?") #f #f 126 11 126 21 ("u" "<u>" "i" "<i>" "b" "<b>" "or" "get-underline?" "get-underline?~" "underline?" "get-italic?" "get-italic?~" "italic?" "get-bold?" "get-bold?~" "bold?" "get-color" "get-color~" "get-font" "get-font~" "font" "Text-Style" "height:" "width:" "alt:" "src:" "title:" "img" "<img>" "Image-Style" ",str" "href:" "a" "<a>" "Link-Style" "get-view" "get-view~" "export-element" "View-Style" "typecase" "get-style" "get-style~" "export-string" "export-string~" "str" "let" "else" "h5" "<h5>" "Heading5" "h4" "<h4>" "Heading4" "h3" "<h3>" "Heading3" "h2" "<h2>" "Heading2" "h1" "<h1>" "Heading1" "inherits?" "inherits?~" "cond" "style" "add-heading" "->rbg" "->rbg~" "format" "style:" "span" "<span>" "color" "add-color" ",element" ",tag" "if" "element" "flag" "tag" "add" "define" "in-table?" "run")}
        {Lisp-Entry "export-element" method () ("element" "in-table?") #f #f 170 11 170 25 ("error" "else" "text" "export-element" "Table-Cell" "header" "get-shown?" "get-shown?~" "tree" "locate" "locate~" "Table-Border" "export-tree-column" "Tree-Label-Column" "export-tree-label" "Tree-Label" "export-row" "Tree-Row" "export-tree" "Tree-View" "typecase" "in-table?" "element")}
        {Lisp-Entry "export-tree" method () ("tree" "header?") #f #f 183 11 183 22 ("export-row" "for-each-row" "for-each-row~" "get-columns" "get-columns~" "export-element" "column" "lambda" "for-each" "when" "output" "format" "header?" "tree")}
        {Lisp-Entry "export-row" method () ("row") #f #f 200 11 200 21 ("get-children" "get-children~" "set!" "export-element" "0" "get-level" "get-level~" "/=" "and" "when" "child" "lambda" "for-each" "first?" "in-table?" "let" "output" "format" "row")}
        {Lisp-Entry "export-tree-label" method () ("data") #f #f 216 11 216 28 ("output" "format" "empty-string?" "if" "get-title" "get-title~" "localize" "string" "let" "data")}
        {Lisp-Entry "export-tree-column" method () ("column") #f #f 224 11 224 29 ("get-title" "get-title~" "localize" "output" "format" "column")}}}})
"Threeway-Checkbox"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Threeway-Checkbox.jazz"} 223698782. jazz
    {Lisp-Entry "jazz.ui.view.Threeway-Checkbox" module (protected) () #f #f 41 18 41 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 44 1 44 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Threeway-Checkbox" class () ((extends . "Check-Box")) #f #f 48 7 48 24 ("none" "set-property" "get-property" "explicit" "Check-Box")
        {Lisp-Entry "type" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 16 ()}
        {Lisp-Entry "property_" property () ((initialize . "#f") (getter . "get-property") (setter . "set-property")) #f #f 52 12 52 21 ()}
        {Lisp-Entry "state" property () ((initialize . "'none") (accessors . "explicit")) #f #f 53 12 53 17 ()}
        {Lisp-Entry "get-type" method () () #f #f 56 11 56 19 ("type")}
        {Lisp-Entry "set-type" method () ("value") #f #f 60 11 60 19 ("type" "set!" "value")}
        {Lisp-Entry "get-property" method () () #f #f 64 11 64 23 ("property_")}
        {Lisp-Entry "set-property" method () ("value") #f #f 68 11 68 23 ("property_" "set!" "value")}
        {Lisp-Entry "get-state" method () () #f #f 72 11 72 20 ("state")}
        {Lisp-Entry "set-state" method () ("value") #f #f 76 11 76 20 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "change-state" method (override) ("reverse?") #f #f 81 20 81 32 ("invalidate-view" "if" "set!" "next-state" "displayed" "validated" "none" "case" "state" "previous-state" "define" "reverse?")}
        {Lisp-Entry "Validated-Color" definition () () #f #f 98 14 98 29 ("Dark-Red" "Color")}
        {Lisp-Entry "Validated-Color-Grayed" definition () () #f #f 101 14 101 36 ("blue:" "101" "green:" "154" "red:" "Color")}
        {Lisp-Entry "draw-check" method (override) ("surface" "h" "v" "grayed?") #f #f 105 20 105 30 ("draw-check" "draw-check~" "set-color" "set-color~" "none" "eq?" "unless" "Validated-Color" "Validated-Color-Grayed" "validated" "Black" "Dark" "Color" "if" "displayed" "state" "case" "state-color" "define" "grayed?" "v" "h" "surface")}}}})
"Toggle-Tool"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Toggle-Tool.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Toggle-Tool" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Toggle-Tool" class () ((extends . "Image-Tool")) #f #f 44 7 44 18 ("explicit" "Image-Tool")
        {Lisp-Entry "selected?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 47 12 47 21 ()}
        {Lisp-Entry "default-size" method (override) () #f #f 50 20 50 32 ("22" "Dimension")}
        {Lisp-Entry "draw-frame" method (override) ("surface") #f #f 59 20 59 30 ("nextmethod" "draw-pushed" "out-pushed" "highlighted" "inactive" "get-state" "memq?" "selected?" "and" "if" "surface")}
        {Lisp-Entry "draw-tool" method (override) ("surface" "context") #f #f 65 20 65 29 ("draw-image" "1" "2" "pushed" "get-state" "eq?" "selected?" "or" "if" "offset" "let" "context" "surface")}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 70 20 70 35 ("nextmethod" "Light-Background" "Color" "fill-rect" "fill-rect~" "get-bounds" "bounds" "selected?" "if" "get-state" "state" "let" "context" "surface")}
        {Lisp-Entry "up" method (override) () #f #f 83 20 83 22 ("self" "process-action" "toggle-selected?" "pushed" "get-state" "eq?" "when")}
        {Lisp-Entry "get-selected?" method (public) () #f #f 94 18 94 31 ("selected?")}
        {Lisp-Entry "set-selected?" method (public) ("flag") #f #f 98 18 98 31 ("invalidate-view" "set!" "selected?" "neq?" "when" "flag")}
        {Lisp-Entry "toggle-selected?" method (public) () #f #f 104 18 104 34 ("selected?" "not" "set-selected?")}}}})
"Tool-Button"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Tool-Button.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.view.Tool-Button" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.skin" "jazz.ui" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Tool-Button" class () ((extends . "Layout-View")) #f #f 47 7 47 18 ("inactive" "Layout-View")
        {Lisp-Entry "state" slot () ((initialize . "'inactive")) #f #f 54 8 54 13 ()}
        {Lisp-Entry "default-size" method (override) () #f #f 57 20 57 32 ("22" "100" "Dimension")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 61 20 61 35 ()}
        {Lisp-Entry "get-state" method (public virtual) () #f #f 70 26 70 35 ("state")}
        {Lisp-Entry "set-state" method (public virtual) ("value") #f #f 74 26 74 35 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "set-enabled?" method (override) ("flag") #f #f 84 20 84 32 ("nextmethod" "inactive" "state" "set!" "not" "when" "flag")}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 95 20 95 35 ("-1" "1" "get-bounds" "expand-rect" "fill-background" "fill-background~" "get-highlight" "get-highlight~" "highlight" "get-look" "look" "let" "pushed" "highlighted" "get-state" "memq?" "when" "context" "surface")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 103 20 103 24 ("draw-tool" "draw-frame" "context" "surface")}
        {Lisp-Entry "draw-frame" method (protected virtual) ("surface") #f #f 108 29 108 39 ("draw-out-pushed" "out-pushed" "draw-pushed" "pushed" "draw-highlighted" "highlighted" "draw-inactive" "inactive" "get-state" "case" "surface")}
        {Lisp-Entry "draw-inactive" method (protected virtual) ("surface") #f #f 116 29 116 42 ("surface")}
        {Lisp-Entry "draw-highlighted" method (protected virtual) ("surface") #f #f 120 29 120 45 ("dark-color" "light-color" "draw-border" "surface")}
        {Lisp-Entry "draw-pushed" method (protected virtual) ("surface") #f #f 124 29 124 40 ("light-color" "dark-color" "draw-border" "surface")}
        {Lisp-Entry "light-color" method (protected virtual) () #f #f 128 29 128 40 ("Light" "Color")}
        {Lisp-Entry "dark-color" method (protected virtual) () #f #f 132 29 132 39 ("Dark" "Color")}
        {Lisp-Entry "draw-out-pushed" method (protected virtual) ("surface") #f #f 136 29 136 44 ("surface")}
        {Lisp-Entry "draw-border" method () ("surface" "upper" "lower") #f #f 140 11 140 22 ("line-to-no-stroke" "line-to-no-stroke~" "line-to" "line-to~" "move-to" "move-to~" "set-line-width" "set-line-width~" "set-color" "set-color~" "get-bottom" "get-bottom~" "bottom" "1" "get-right" "get-right~" "-" "right" "top" "0" "left" "get-bounds" "rect" "let" "lower" "upper" "surface")}
        {Lisp-Entry "draw-tool" method (protected virtual) ("surface" "context") #f #f 157 29 157 38 ("context" "surface")}
        {Lisp-Entry "get-look" method (override) () #f #f 166 20 166 28 ("tool" "find-look")}
        {Lisp-Entry "mouse-enter" method (override) () #f #f 175 20 175 31 ("pushed" "out-pushed" "highlighted" "set-state" "inactive" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "view-enabled?" "and" "when")}
        {Lisp-Entry "mouse-leave" method (override) () #f #f 182 20 182 31 ("out-pushed" "pushed" "inactive" "set-state" "highlighted" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "when")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 189 20 189 30 ("invalidate-view" "down" "pushed" "state" "set!" "view-enabled?" "when" "pos")}
        {Lisp-Entry "down" method (public virtual) () #f #f 196 26 196 30 ()}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 200 20 200 27 ("inactive" "out-pushed" "highlighted" "set-state" "pushed" "get-state" "case" "up" "unwind-protect" "view-enabled?" "when" "rest" "pos")}
        {Lisp-Entry "up" method (public virtual) () #f #f 209 26 209 28 ()}}}})
"Tool-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Tool-Look.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Tool-Look" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Tool-Look" class () ((extends . "Look")) #f #f 43 7 43 16 ("Look")
        {Lisp-Entry "active-background" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 29 ()}
        {Lisp-Entry "get-active-background" accessor () () #f #f 46 57 46 65 ()}
        {Lisp-Entry "set-active-background" accessor () () #f #f 46 57 46 65 ()}
        {Lisp-Entry "inactive-background" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 31 ()}
        {Lisp-Entry "get-inactive-background" accessor () () #f #f 47 57 47 65 ()}
        {Lisp-Entry "set-inactive-background" accessor () () #f #f 47 57 47 65 ()}
        {Lisp-Entry "highlight" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 21 ()}
        {Lisp-Entry "get-highlight" accessor () () #f #f 48 57 48 65 ()}
        {Lisp-Entry "set-highlight" accessor () () #f #f 48 57 48 65 ()}
        {Lisp-Entry "focused-text-color" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 30 ()}
        {Lisp-Entry "get-focused-text-color" accessor () () #f #f 49 57 49 65 ()}
        {Lisp-Entry "set-focused-text-color" accessor () () #f #f 49 57 49 65 ()}
        {Lisp-Entry "unfocused-text-color" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 32 ()}
        {Lisp-Entry "get-unfocused-text-color" accessor () () #f #f 50 57 50 65 ()}
        {Lisp-Entry "set-unfocused-text-color" accessor () () #f #f 50 57 50 65 ()}}}})
"Tool-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tool" "Tool-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.tool.Tool-Preferences" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Tool-Preferences" class (undocumented) ((extends . "Frame-Preferences")) #f #f 44 20 44 36 ("Frame-Preferences")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 56 25 56 45 ("Tool-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 65 11 65 17 ()
        {Lisp-Entry "import" import () () #f #f 68 1 68 7 ("jazz.designer")}
        {Lisp-Entry "Tool-Preferences-Descriptor" class () ((extends . "Figure-Preferences-Descriptor")) #f #f 71 7 71 34 ("Figure-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 74 3 74 7 (">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Tool-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tool" "Tool-View.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.tool.Tool-View" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system")}
      {Lisp-Entry "Tool-View" class () ((extends . "Layout-View")) #f #f 44 7 44 16 ("Layout-View")
        {Lisp-Entry "install-in-host" method (override) ("host") #f #f 52 20 52 35 ("get-process" "apply-preferences" "apply-preferences~" "when" "tool-preferences" "preferences" "let" "nextmethod" "host")}
        {Lisp-Entry "confirm-close" method (override) ("." "rest") #f #f 64 20 64 33 ("save-session" "rest")}
        {Lisp-Entry "save-session" method (override) () #f #f 68 20 68 32 ("get-host" "save-preferences" "save-preferences~" "get-application" "get-preferences-designer" "get-preferences-designer~" "designer" "when" "tool-preferences" "pref" "let")}}}})
"Toolbar"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Toolbar.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Toolbar" module (protected) () #f #f 37 18 37 38 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.skin" "jazz.ui" "jazz.jml")}
      {Lisp-Entry "Toolbar" class () ((extends . "Layout-View")) #f #f 45 7 45 14 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("0" "3" "2" "Rect" "layout-insets:" "flow" "layout-type:" "install" "<install>")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 52 20 52 35 ()}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 61 20 61 35 ("fill-background" "fill-background~" "get-bounds" "bounds" "nextmethod" "not" "if" "get-background" "get-background~" "background" "get-look" "look" "let" "context" "surface")}
        {Lisp-Entry "get-look" method (override) () #f #f 75 20 75 28 ("toolbar" "find-look")}}}})
"Toolbar-Host"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "hosting" "Toolbar-Host.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.hosting.Toolbar-Host" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Toolbar-Host" class (undocumented) ((extends . "Host-View")) #f #f 49 20 49 32 ("Host-View")
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("Medium" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 61 20 61 31 ("2" "Rect" "insets:" "invalidate-border" "invalidate-top" "nextmethod" "size")}
        {Lisp-Entry "on-close" method () ("evt") #f #f 67 11 67 19 ("selection" "first-child" "first-child~" "Pad-View" "close" "close~" "set-parent~" "get-location" "get-location~" "set-location" "set-location~" "layout-view" "layout-view~" "zoom" "set-mode" "set-mode~" "begin" "Workspace-Splitter" "if" "when" "first-view" "first-view~" "other" "let" "Splitter-View" "is?" "cond" "get-toplevel" "set-parent" "set-visible?" "lambda" "with-locked-update" "get-parent~" "grand" "get-parent" "parent" "let*" "evt")}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 97 20 97 35 ()}
        {Lisp-Entry "activate-focus" method (override) () #f #f 101 20 101 34 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "deactivate-focus" method (override) () #f #f 106 20 106 36 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "layout" method (override) () #f #f 116 20 116 26 ("Dimension" "new" "set-size" "set-size~" "0" "Point" "set-position" "set-position~" "get-height" "height" "get-width" "width" "let" "guest" "when")}
        {Lisp-Entry "menu-rect" method () () #f #f 129 11 129 20 ("25" "1" "Rect" "new")}
        {Lisp-Entry "caption-rect" method () () #f #f 133 11 133 23 ("24" "2" "get-width" "-" "1" "Rect" "new")}
        {Lisp-Entry "top-rect" method () () #f #f 137 11 137 19 ("25" "2" "get-width" "-" "1" "Rect" "new")}
        {Lisp-Entry "invalidate-top" method () () #f #f 146 11 146 25 ("top-rect" "invalidate-rect")}
        {Lisp-Entry "invalidate-caption" method (override) () #f #f 150 20 150 38 ("caption-rect" "invalidate-rect")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 159 20 159 30 ("toggle-docked" "caption-rect" "select-menu" "menu-rect" "in-rect?" "cond" "pos")}
        {Lisp-Entry "toggle-docked" method () ("pos") #f #f 166 11 166 24 ("select-next" "select-next~" "lambda" "with-locked-update" "get-h" "get-h~" "<" "text-width" "text-width~" "28" "+" "h" "Label" "Font" "font" "get-title" "title" "let*" "Pad-View" "is?" "when" "get-parent" "parent" "let" "pos")}
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 178 20 178 32 ("unzoom" "unzoom~" "zoom" "zoom~" "split" "get-state" "get-state~" "=" "lambda" "with-locked-update" "Splitter-View" "when" "get-parent~" "splitter" "self" "Pad-View" "is?" "if" "target" "get-parent" "parent" "let*" "pos")}
        {Lisp-Entry "select-menu" method () () #f #f 195 11 195 22 ("25" "2" "Point" "track-popup-menu" "layout-menu" "layout-menu~" "host:" "list" "properties:" "on-select" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "parent:" "Label-Item" "class-of" "host-icon" "host-icon~" "icon" "get-title" "get-title~" "title" "get-guest" "get-guest~" "guest" "let*" "docked" "lambda" "for-each" "Context-Menu" "new" "menu" "when" "collect-brothers" "brothers" "let")}
        {Lisp-Entry "collect-brothers" method () () #f #f 209 11 209 27 ("get-children" "get-children~" "self" "neq?" "host" "lambda" "collect-if" "Pad-View" "is?" "when" "get-parent" "pad" "let")}
        {Lisp-Entry "on-select" method () ("evt") #f #f 217 11 217 20 ("focus-host" "focus-host~" "set-selection" "set-selection~" "lambda" "with-locked-update" "host:" "get-property" "get-property~" "host" "get-parent" "parent" "let" "evt")}}}})
"Toolbar-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Toolbar-Look.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Toolbar-Look" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Toolbar-Look" class () ((extends . "Look")) #f #f 43 7 43 19 ("Look")
        {Lisp-Entry "background" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 22 ()}
        {Lisp-Entry "get-background" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "set-background" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "text-color" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 22 ()}
        {Lisp-Entry "get-text-color" accessor () () #f #f 47 47 47 55 ()}
        {Lisp-Entry "set-text-color" accessor () () #f #f 47 47 47 55 ()}}}})
"Toolbar-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Toolbar-Preferences.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.preference.Toolbar-Preferences" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Toolbar-Preferences" class (undocumented) ((extends . "Figure-Preferences")) #f #f 47 20 47 39 ("Figure-Preferences")
        {Lisp-Entry "model" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 17 ()}
        {Lisp-Entry "get-model" accessor () () #f #f 50 42 50 50 ()}
        {Lisp-Entry "set-model" accessor () () #f #f 50 42 50 50 ()}
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("Image-Resource" "icon:" "install" "<install>")}
        {Lisp-Entry "apply-root" method (override) ("player") #f #f 62 20 62 30 ("get-root" "get-root~" "apply-to" "model" "get-class" "singleton-toolbar" "set-root" "set-root~" "player")}
        {Lisp-Entry "apply-preferences" method (override) ("(parent #f)") #f #f 67 20 67 37 ("set-visible?" "set-visible?~" "get-guest" "get-guest~" "client-activate" "client-activate~" "location" "set-location" "set-location~" "set-title" "set-title~" "title" "when" "set-parent" "set-parent~" "model" "get-class" "singleton-toolbar" "host" "let" "assert" "parent")}
        {Lisp-Entry "apply-to" method () ("toolbar") #f #f 78 11 78 19 ("set-visible?" "set-visible?~" "get-guest" "get-guest~" "client-activate" "client-activate~" "location" "set-location" "set-location~" "set-title" "set-title~" "title" "when" "toolbar")}
        {Lisp-Entry "default-toolbar-classes" define () () #f #f 86 10 86 33 ("Minibuffer-Toolbar" ":minibuffer" "Command-Toolbar" ":command" "Status-Toolbar" ":status" "Toolbar" ":toolbar" "Menubar" "Class-Reference" ":menubar" "environment" "<environment>")}
        {Lisp-Entry "get-class" method () () #f #f 95 11 95 20 ("resolve-reference" "resolve-reference~" "cdr" "error" "not" "default-toolbar-classes" "get-data" "get-data~" "get-preferences-root" "get-toolbar-classes" "get-toolbar-classes~" "assq" "or" "pair" "let" "model" "symbol?" "if" "get-reference" "define")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 112 25 112 45 ("Toolbar-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 121 11 121 17 ()
        {Lisp-Entry "import" import () () #f #f 124 1 124 7 ("jazz.designer")}
        {Lisp-Entry "Toolbar-Preferences-Descriptor" class () ((extends . "Figure-Preferences-Descriptor")) #f #f 127 7 127 37 ("Figure-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 130 3 130 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "model" "location" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image:" "install" "<install>")}
          {Lisp-Entry "component-presentation-property?" method (override) ("component" "property") #f #f 141 20 141 52 ("title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method (override) ("component") #f #f 145 20 145 46 ("get-title" "get-title~" "or" "component")}
          {Lisp-Entry "component-set-presentation" method (override) ("component" "designer" "title") #f #f 149 20 149 46 ("title:" "set-property" "set-property~" "title" "designer" "component")}}}}})
"Tools-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tool" "Tools-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.tool.Tools-Preferences" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Tools-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 44 20 44 37 ("Preferences")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 56 25 56 45 ("Tools-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 65 11 65 17 ()
        {Lisp-Entry "import" import () () #f #f 68 1 68 7 ("jazz.designer")}
        {Lisp-Entry "Tools-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 71 7 71 35 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 74 3 74 7 (">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Tooltip"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "Tooltip.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.window.Tooltip" module (protected) () #f #f 37 18 37 40 ("context-menu~" "context-menu" "double-click~" "double-click" "mouse-up~" "mouse-up" "mouse-move~" "mouse-move" "mouse-down~" "mouse-down" "mouse-hover~" "mouse-hover" "get-v" "get-v~" "get-h" "get-h~" "lambda" "acquired" "when" "self" "acquire" "acquire~" "owner" "find-window" "find-window~" "window" "Point" "new" "pos" "let*" "v" "h" "pass-through" "set-passing-through?" "begin" "unwind-protect" "get-passing-through?" "preserved" "let" "proc" "with-passing-through" "method" "jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Tooltip" class () ((extends . "Transient")) #f #f 43 7 43 14 ("Transient")}}})
"Tooltip-Context"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Tooltip-Context.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Tooltip-Context" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Tooltip-Context" class () ((extends . "Object")) #f #f 40 7 40 22 ("Object")
        {Lisp-Entry "view" slot () ((initialize . "#f") (getter . "generate")) #f #f 43 8 43 12 ()}
        {Lisp-Entry "get-view" accessor () () #f #f 43 38 43 46 ()}
        {Lisp-Entry "text" slot () ((initialize . "#f") (getter . "generate")) #f #f 44 8 44 12 ()}
        {Lisp-Entry "get-text" accessor () () #f #f 44 38 44 46 ()}
        {Lisp-Entry "bounds" slot () ((initialize . "#f") (getter . "generate")) #f #f 45 8 45 14 ()}
        {Lisp-Entry "get-bounds" accessor () () #f #f 45 38 45 46 ()}
        {Lisp-Entry "position" slot () ((initialize . "#f") (getter . "generate")) #f #f 46 8 46 16 ()}
        {Lisp-Entry "get-position" accessor () () #f #f 46 38 46 46 ()}
        {Lisp-Entry "padding" slot () ((initialize . "#f") (getter . "generate")) #f #f 47 8 47 15 ()}
        {Lisp-Entry "get-padding" accessor () () #f #f 47 38 47 46 ()}
        {Lisp-Entry "font" slot () ((initialize . "#f") (getter . "generate")) #f #f 48 8 48 12 ()}
        {Lisp-Entry "get-font" accessor () () #f #f 48 38 48 46 ()}
        {Lisp-Entry "tooltip" slot () ((initialize . "#f") (accessors . "generate")) #f #f 49 8 49 15 ()}
        {Lisp-Entry "get-tooltip" accessor () () #f #f 49 41 49 49 ()}
        {Lisp-Entry "set-tooltip" accessor () () #f #f 49 41 49 49 ()}
        {Lisp-Entry "initialize" method (override) ("(view: view #f)" "(text: text #f)" "(bounds: bounds #f)" "(position: position #f)" "(padding: padding #f)" "(font: font #f)") #f #f 52 20 52 30 ("font~self" "padding~self" "position~self" "bounds~self" "text~self" "self" "view~self" "set!" "nextmethod" "font" "font:" "padding" "padding:" "position" "position:" "bounds" "bounds:" "text" "text:" "view" "view:")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 62 20 62 25 ("font" "position" "bounds" "text" "view" "format" "lambda" "self" "print-unreadable" "readably" "output")}}}})
"Tooltip-Label"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Tooltip-Label.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.view.Tooltip-Label" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Tooltip-Label" class (undocumented) ((extends . "View")) #f #f 46 20 46 33 ("View")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("Caption" "Font" "font:" "install" "<install>")}
        {Lisp-Entry "preferred-size" method (override) () #f #f 53 20 53 34 ("length" "13" "*" "3" "get-width" "get-width~" "+" "new" "localize" "effective-font" "text-extent" "text-extent~" "str" "lambda" "map" "maximum" "extent" "20" "100" "Dimension" "null?" "if" "standard-title" "title" "let")}
        {Lisp-Entry "standard-title" method () () #f #f 66 11 66 25 ("equal?" "test:" "list" "title" "null/pair?" "if" "remove-trailing")}
        {Lisp-Entry "Background-Color" definition () () #f #f 79 14 79 30 ("Tooltip" "Color")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 83 20 83 24 ("13" "increase!" "localize" "draw-text" "draw-text~" "str" "lambda" "for-each" "effective-font" "set-font" "set-font~" "standard-title" "title" "1" "v" "2" "h" "let" "Black" "Color" "set-text-color" "set-text-color~" "Background-Color" "get-bounds" "fill-rect" "fill-rect~" "context" "surface")}}}})
"Tooltip-Text"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Tooltip-Text.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Tooltip-Text" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Tooltip-Text" class (undocumented) ((extends . "Layout-View")) #f #f 45 20 45 32 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("editable?:" "Tooltip" "Color" "background:" "text" "Tooltip-Text-View" "<Tooltip-Text-View>" "content" "name:" "!" "<!>" "tool" "style:" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "get-text" method (public) () #f #f 60 18 60 26 ("text" "locate")}}}})
"Tooltip-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Tooltip-Text-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Tooltip-Text-View" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Tooltip-Text-View" class (undocumented) ((extends . "Formatted-Text-View")) #f #f 44 20 44 37 ("Formatted-Text-View")
        {Lisp-Entry "new-model" method (override) () #f #f 47 20 47 29 ("4" "left-padding:" "Text-Base" "Text-Style" "base-style:" "Formatted-Text-Model" "new")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 51 20 51 27 ("Variable" "Code" "Dark-Blue" "Link" "Reference" "Purple" "Comment" "Dark-Red" "Color" "color:" "Title" "Doc-Heading3" "Doc-Heading2" "Font" "font:" "Text-Style" "add-style" "Heading3" "Heading2" "Base" "Format" "Heading1" "add-format" "nextmethod" "rest")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 69 20 69 36 ("new-text-context-menu")}}}})
"Toplevel"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "Toplevel.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.window.Toplevel" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui" "jazz.system" "jazz.jml")}
      {Lisp-Entry "Toplevel" class () ((extends . "Overlapped")) #f #f 47 7 47 15 ("explicit" "Overlapped")
        {Lisp-Entry "fullscreen?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 50 12 50 23 ()}
        {Lisp-Entry "previous-state" slot () ((initialize . "#f") (getter . "generate")) #f #f 53 8 53 22 ()}
        {Lisp-Entry "get-previous-state" accessor () () #f #f 53 51 53 59 ()}
        {Lisp-Entry "previous-position" slot () ((initialize . "#f") (getter . "generate")) #f #f 54 8 54 25 ()}
        {Lisp-Entry "get-previous-position" accessor () () #f #f 54 51 54 59 ()}
        {Lisp-Entry "previous-size" slot () ((initialize . "#f") (getter . "generate")) #f #f 55 8 55 21 ()}
        {Lisp-Entry "get-previous-size" accessor () () #f #f 55 51 55 59 ()}
        {Lisp-Entry "workspace-preferences" slot () ((initialize . "#f") (accessors . "generate")) #f #f 56 8 56 29 ()}
        {Lisp-Entry "get-workspace-preferences" accessor () () #f #f 56 54 56 62 ()}
        {Lisp-Entry "set-workspace-preferences" accessor () () #f #f 56 54 56 62 ()}
        {Lisp-Entry "form" form () () #f #f 59 3 59 7 ("visible?:" "install" "<install>")}
        {Lisp-Entry "prepare-root" method (override) () #f #f 68 20 68 32 ()}
        {Lisp-Entry "mouse-activate?" method (override) () #f #f 77 20 77 35 ()}
        {Lisp-Entry "on-activate" method (override) ("kind") #f #f 81 20 81 31 ("nextmethod" "toplevel-deactivate" "inactive" "eq?" "when" "kind")}
        {Lisp-Entry "activate-application" method (override) () #f #f 87 20 87 40 ("processed" "get-application" "activate" "activate~" "Cancel-Signal" "catch")}
        {Lisp-Entry "deactivate-application" method (override) () #f #f 93 20 93 42 ("processed" "get-application" "deactivate" "deactivate~" "Cancel-Signal" "catch")}
        {Lisp-Entry "position-change" method (override) ("position") #f #f 99 20 99 35 ("nextmethod" "previous-position" "set!" "get-size" "get-size~" "get-position" "get-position~" "not" "or" "and" "when" "get-workspace-preferences" "pref" "let" "position")}
        {Lisp-Entry "size-change" method (override) ("state" "size") #f #f 106 20 106 31 ("nextmethod" "get-window-size" "previous-size" "restored" "eq?" "previous-state" "set!" "get-size" "get-size~" "get-position" "get-position~" "not" "or" "and" "when" "get-workspace-preferences" "pref" "let" "size" "state")}
        {Lisp-Entry "show" method (override) () #f #f 115 20 115 24 ("simulate-mouse-move" "update-window" "workspace-installed" "workspace-installed~" "show-undisplayed-message" "show-undisplayed-message~" "get-application" "appl" "get-window-size" "previous-size" "get-position" "previous-position" "set-window-size" "set-position" "when" "show-restored" "previous-state" "set!" "show-maximized" "maximized" "if" "case" "get-toplevel-size" "get-toplevel-size~" "size" "get-toplevel-position" "get-toplevel-position~" "position" "restored" "jazz.ui.toplevel-state" "get-setting" "get-toplevel-state" "get-toplevel-state~" "or" "state" "handle" "assert" "error?:" "get-preferences" "pref" "let" "set-visible-flag")}
        {Lisp-Entry "close-window" method (override) () #f #f 142 20 142 32 ("processed" "get-process" "exit-process" "exit-process~" "lambda" "delay-event")}
        {Lisp-Entry "restore-state" method (package) () #f #f 155 19 155 32 ("previous-size" "previous-position" "set-placement" "restored" "maximize" "maximized" "previous-state" "case")}
        {Lisp-Entry "get-fullscreen?" method (public) () #f #f 166 18 166 33 ("fullscreen?")}
        {Lisp-Entry "set-fullscreen?" method (public) ("value") #f #f 170 18 170 33 ("set!" "fullscreen?" "neq?" "when" "value")}
        {Lisp-Entry "get-palettes" method (public) () #f #f 180 18 180 30 ("children" "get-visible?" "get-visible?~" "Palette" "is?" "and" "window" "lambda" "collect-if")}}}})
"Transient"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "Transient.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.window.Transient" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Transient" class () ((extends . "Popup")) #f #f 43 7 43 16 ("Popup")}}})
"Tree-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Actions.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Actions" module (protected) () #f #f 38 18 38 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 41 1 41 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Tree-Actions" class (undocumented) ((extends . "Actions")) #f #f 46 20 46 32 ("Actions")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("Return" ":alt" "on-properties" "properties" "Subtract" "on-collapse" "collapse" "Multiply" "on-expand-all" "expand-all" "Add" "on-expand" "expand" "Next" "on-next" "next" "Prior" "on-prior" "prior" "extend-end" "End" "on-end" "end" ":shift" "extend-home" "Home" "Shortcut" "shortcut:" "extend?:" "on-home" "home" "right" "move-right" "left" "move-left" "down" "move-downward" "up" "direction:" "on-move" ":focus" "Event-Handler" "action-handler:" "move-upward" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Tree-Column"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Column.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Column" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Tree-Column" class () ((extends . "Component")) #f #f 49 7 49 18 ("2" "1" "0" "explicit" "Component")
        {Lisp-Entry "title" property (protected) ((initialize . "\"\"") (accessors . "explicit")) #f #f 52 22 52 27 ()}
        {Lisp-Entry "width" property (protected) ((initialize . "0") (accessors . "explicit")) #f #f 53 22 53 27 ()}
        {Lisp-Entry "background" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 54 22 54 32 ()}
        {Lisp-Entry "justification" property (protected) ((initialize . "'(1 2)") (accessors . "explicit")) #f #f 55 22 55 35 ()}
        {Lisp-Entry "user-data" property (protected) ((initialize . "#f") (accessors . "generate")) #f #f 56 22 56 31 ()}
        {Lisp-Entry "get-user-data" accessor () () #f #f 56 64 56 72 ()}
        {Lisp-Entry "set-user-data" accessor () () #f #f 56 64 56 72 ()}
        {Lisp-Entry "rank" slot (protected) ((initialize . "#f") (accessors . "generate")) #f #f 59 18 59 22 ()}
        {Lisp-Entry "get-rank" accessor () () #f #f 59 50 59 58 ()}
        {Lisp-Entry "set-rank" accessor () () #f #f 59 50 59 58 ()}
        {Lisp-Entry "borders" slot (protected) ((initialize . "#f") (accessors . "generate")) #f #f 60 18 60 25 ()}
        {Lisp-Entry "get-borders" accessor () () #f #f 60 50 60 58 ()}
        {Lisp-Entry "set-borders" accessor () () #f #f 60 50 60 58 ()}
        {Lisp-Entry "down?" slot (protected) ((initialize . "#f")) #f #f 61 18 61 23 ()}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 64 20 64 25 ("title" "name" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-title" method (public) () #f #f 77 18 77 27 ("title")}
        {Lisp-Entry "set-title" method (public) ("value") #f #f 81 18 81 27 ("self" "invalidate-column-header" "invalidate-column-header~" "get-header" "get-header~" "header" "let" "parent" "get-player" "get-player~" "initialized?" "and" "when" "title" "set!" "value")}
        {Lisp-Entry "get-width" method (public) () #f #f 90 18 90 27 ("0" "width" "get-visible?" "if")}
        {Lisp-Entry "set-width" method (public) ("value") #f #f 94 18 94 27 ("invalidate-view" "invalidate-view~" "parent" "invalidate-columns" "invalidate-columns~" "width" "set!" "value")}
        {Lisp-Entry "get-background" method (public) () #f #f 100 18 100 32 ("background")}
        {Lisp-Entry "set-background" method (public) ("value") #f #f 104 18 104 32 ("parent" "invalidate-view" "invalidate-view~" "background" "set!" "value")}
        {Lisp-Entry "get-justification" method (public) () #f #f 109 18 109 35 ("justification")}
        {Lisp-Entry "set-justification" method (public) ("just") #f #f 113 18 113 35 ("parent" "invalidate-view" "invalidate-view~" "justification" "set!" "just")}
        {Lisp-Entry "set-visible?" method (override) ("flag") #f #f 118 20 118 32 ("invalidate-view" "invalidate-view~" "fill-column" "fill-column~" "parent" "invalidate-columns" "invalidate-columns~" "nextmethod" "flag")}
        {Lisp-Entry "cell-class" method (public virtual) () #f #f 130 26 130 36 ()}
        {Lisp-Entry "new-empty-cell" method (public virtual) () #f #f 134 26 134 40 ("title:" "cell-class" "new")}
        {Lisp-Entry "find-part" method (public virtual) ("cell" "pos") #f #f 143 26 143 35 ("content" "pos" "cell")}
        {Lisp-Entry "content-rect" method (protected virtual) ("row" "cell" "width" "height") #f #f 152 29 152 41 ("0" "Rect" "new" "get-level" "get-level~" "content-h" "h" "let" "height" "width" "cell" "row")}
        {Lisp-Entry "content-h" method (protected virtual) ("level") #f #f 157 29 157 38 ("0" "level")}
        {Lisp-Entry "text-h" method (protected virtual) ("level") #f #f 161 29 161 35 ("0" "level")}
        {Lisp-Entry "sort-value" method (protected virtual) ("row" "data") #f #f 170 29 170 39 ("get-sort-value" "get-sort-value~" "data" "row")}
        {Lisp-Entry "get-header-tooltip" method (public virtual) () #f #f 179 26 179 44 ("self" "parent" "get-column-tooltip" "get-column-tooltip~")}
        {Lisp-Entry "get-data-tooltip" method (public virtual) ("data") #f #f 183 26 183 42 ("data")}
        {Lisp-Entry "header-down" method (public virtual) ("pos") #f #f 192 26 192 37 ("self" "parent" "get-header" "get-header~" "invalidate-column-header" "invalidate-column-header~" "down?" "set!" "pos")}
        {Lisp-Entry "header-move" method (public virtual) ("pos") #f #f 197 26 197 37 ("pos")}
        {Lisp-Entry "header-up" method (public virtual) ("pos") #f #f 201 26 201 35 ("header-click" "header-click~" "self" "parent" "get-header" "get-header~" "invalidate-column-header" "invalidate-column-header~" "down?" "set!" "pos")}
        {Lisp-Entry "header-double-click" method (public virtual) ("pos") #f #f 207 26 207 45 ("header-down" "pos")}
        {Lisp-Entry "mouse-down" method (public virtual) ("cell" "pos" "shift?" "control?") #f #f 211 26 211 36 ("column-mouse-down" "parent" "acquire-focus" "acquire-focus~" "control?" "shift?" "pos" "cell")}
        {Lisp-Entry "column-mouse-down" method (public virtual) ("cell" "pos" "shift?" "control?") #f #f 216 26 216 43 ("mouse" "parent" "process-selection" "process-selection~" "control?" "shift?" "pos" "cell")}
        {Lisp-Entry "drag-move" method (public virtual) ("cell" "pos") #f #f 220 26 220 35 ("pos" "cell")}
        {Lisp-Entry "drag-up" method (public virtual) ("cell" "pos") #f #f 224 26 224 33 ("pos" "cell")}
        {Lisp-Entry "double-click" method (public virtual) ("cell" "pos") #f #f 228 26 228 38 ("pos" "cell")}
        {Lisp-Entry "context-menu" method (public virtual) ("cell" "pos") #f #f 232 26 232 38 ("parent" "call-context-menu" "call-context-menu~" "pos" "cell")}
        {Lisp-Entry "layout-cell" method (public virtual) ("row" "data" "h" "v" "width" "height") #f #f 241 26 241 37 ("Dimension" "set-size" "set-size~" "Point" "set-position" "set-position~" "merge-cell-rect" "merge-cell-rect~" "acquire" "acquire~" "set-rect" "set-rect~" "if" "self" "Site" "new" "parent" "get-merge-cell" "get-merge-cell~" "merge-cell" "let" "View" "is?" "when" "height" "width" "v" "h" "data" "row")}
        {Lisp-Entry "draw-data" method (public virtual) ("surface" "context" "row" "data" "width" "height") #f #f 255 26 255 35 ("0" "draw-at" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "draw-at" method (public virtual) ("surface" "context" "row" "data" "h" "v" "width" "height") #f #f 259 26 259 33 ("draw-background" "height" "width" "v" "h" "data" "row" "context" "surface")}
        {Lisp-Entry "draw-background" method (public virtual) ("surface" "context" "row" "data" "width" "height") #f #f 263 26 263 41 ("frame-rect" "frame-rect~" "get-frame-color" "get-frame-color~" "frame-color" "Tree-Data" "is?" "when" "fill-rect" "fill-rect~" "background-color" "else" "Medium" "Color" "parent" "view-enabled?" "view-enabled?~" "not" "cycle-debug-color!" "debug-paint?" "cond" "color" "0" "Rect" "new" "rect" "let" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "background-color" method () ("row" "data" "context") #f #f 278 11 278 27 ("Tree-Background" "Color" "get-look" "get-look~" "get-cell-background" "get-cell-background~" "get-background" "get-background~" "Tree-Data" "is?" "or" "parent" "selection-color" "selection-color~" "cell-selected?" "and" "if" "selected?:" "getf" "selected?" "let" "context" "data" "row")}
        {Lisp-Entry "cell-selected?" method (protected) ("context") #f #f 289 21 289 35 ("row" "0" "node" "merge-cell-selected?" "merge-cell-selected?~" "when" "Cell" "new" "cell->site" "cell->site~" "get-merge-cell" "get-merge-cell~" "merge-cell" "get-selection" "get-selection~" "get-col" "get-col~" "get-line" "get-line~" "=" "and" "lambda" "some?" "or" "self" "column->col" "column->col~" "col" "line:" "getf" "line" "let" "cell" "parent" "get-selection-mode" "get-selection-mode~" "case" "context")}
        {Lisp-Entry "draw-header" method (public virtual) ("surface" "context" "h" "v" "width" "height" "sorted" "spaced?" "flat?" "enabled?") #f #f 305 26 305 37 ("down?" "title" "localize" "draw-header-at" "enabled?" "flat?" "spaced?" "sorted" "height" "width" "v" "h" "context" "surface")}
        {Lisp-Entry "draw-header-at" method () ("surface" "h" "v" "width" "height" "title" "down?" "sorted" "spaced?" "flat?" "enabled?") #f #f 309 11 309 25 ("draw-raised-button" "draw-sunken-button" "if" "enabled?" "flat?" "spaced?" "sorted" "down?" "title" "height" "width" "v" "h" "surface")}
        {Lisp-Entry "draw-raised-button" method () ("surface" "h" "v" "width" "height" "title" "sorted" "spaced?" "flat?" "enabled?") #f #f 315 11 315 29 ("draw-sorted" "draw-text" "draw-text~" "lambda" "-" "with-clipping-transform" "with-clipping-transform~" "Dark" "Black" "Color" "set-text-color" "set-text-color~" "parent" "header-color" "header-color~" "background" "or" "cycle-debug-color!" "debug-paint?" "fill-rect" "fill-rect~" "rect" "bottom" "right" "outer:" "rectangle" "left" "top" "edges:" "raised" "inner:" "draw-edge" "draw-edge~" "smaller" "header-title-h" "text-h" "0" "1" "expand-rect" "inner" "+" "Rect" "new" "outer" "let*" "-2" "-1" "if" "thick" "let" "enabled?" "flat?" "spaced?" "sorted" "title" "height" "width" "v" "h" "surface")}
        {Lisp-Entry "header-title-h" method (protected) ("surface" "width" "height" "title") #f #f 337 21 337 35 ("justification" "4" "-" "justify-title" "get-h" "get-h~" "2" "+" "title" "height" "width" "surface")}
        {Lisp-Entry "justify-title" method (protected) ("surface" "width" "height" "title" "justification") #f #f 341 21 341 34 ("list" "pair?" "if" "Dimension" "new" "get-text-extent" "get-text-extent~" "lambda" "justify-lazy" "justification" "title" "height" "width" "surface")}
        {Lisp-Entry "draw-sorted" definition () ("surface" "h" "v" "title" "sorted") #f #f 351 15 351 26 ("down" "descending" "up" "draw-arrow-tip" "draw-arrow-tip~" "ascending" "case" "4" "size" "6" "+" "get-text-width" "get-text-width~" "width" "let*" "Dark" "Color" "set-color" "set-color~" "when" "sorted" "title" "v" "h" "surface")}
        {Lisp-Entry "draw-sunken-button" method () ("surface" "h" "v" "width" "height" "title" "sorted" "spaced?" "flat?" "enabled?") #f #f 363 11 363 29 ("draw-sorted" "2" "draw-text" "draw-text~" "lambda" "-" "with-clipping-transform" "with-clipping-transform~" "Black" "set-text-color" "set-text-color~" "parent" "header-color" "header-color~" "background" "or" "cycle-debug-color!" "debug-paint?" "if" "fill-rect" "fill-rect~" "frame-rect" "frame-rect~" "Dark" "Color" "set-color" "set-color~" "1" "header-title-h" "text-h" "-1" "inflate-rect" "inner" "+" "Rect" "new" "outer" "let*" "enabled?" "flat?" "spaced?" "sorted" "title" "height" "width" "v" "h" "surface")}
        {Lisp-Entry "get-debugged" method (public virtual) ("cell" "pos") #f #f 382 26 382 38 ("values" "pos" "cell")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 391 25 391 45 ("Tree-Column-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 400 11 400 17 ()
        {Lisp-Entry "import" import () () #f #f 403 1 403 7 ("jazz.designer")}
        {Lisp-Entry "Tree-Column-Descriptor" class () ((extends . "Component-Descriptor")) #f #f 406 7 406 29 ("Component-Descriptor")
          {Lisp-Entry "form" form () () #f #f 409 3 409 7 ("justification" "background" "width" "domain" "String-Domain" "<String-Domain>" "title:" "title" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "can-relocate?:" "Image-Resource" "image:" "install" "<install>")}}}}})
"Tree-Data"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Data.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Data" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Tree-Data" class () ((extends . "Object")) #f #f 40 7 40 16 ("Object")
        {Lisp-Entry "background" slot (protected) ((accessors . "generate")) #f #f 43 18 43 28 ()}
        {Lisp-Entry "get-background" accessor () () #f #f 43 40 43 48 ()}
        {Lisp-Entry "set-background" accessor () () #f #f 43 40 43 48 ()}
        {Lisp-Entry "frame-color" slot (protected) ((accessors . "generate")) #f #f 44 18 44 29 ()}
        {Lisp-Entry "get-frame-color" accessor () () #f #f 44 40 44 48 ()}
        {Lisp-Entry "set-frame-color" accessor () () #f #f 44 40 44 48 ()}
        {Lisp-Entry "initialize" method (override) ("(background: background #f)" "(frame-color: frame-color #f)") #f #f 47 20 47 30 ("frame-color~self" "self" "background~self" "set!" "nextmethod" "frame-color" "frame-color:" "background" "background:")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 53 20 53 25 ("frame-color" "background" "format" "lambda" "self" "print-unreadable" "readably" "output")}}}})
"Tree-Data-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Data-View.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Data-View" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Tree-Data-View" class (undocumented) ((extends . "Layout-View")) #f #f 44 20 44 34 ("Layout-View")
        {Lisp-Entry "cover-spacing?" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 26 ()}
        {Lisp-Entry "get-cover-spacing?" accessor () () #f #f 47 52 47 60 ()}
        {Lisp-Entry "set-cover-spacing?" accessor () () #f #f 47 52 47 60 ()}
        {Lisp-Entry "preserved-data" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 26 ()}
        {Lisp-Entry "get-preserved-data" accessor () () #f #f 48 52 48 60 ()}
        {Lisp-Entry "set-preserved-data" accessor () () #f #f 48 52 48 60 ()}
        {Lisp-Entry "before-end" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 22 ()}
        {Lisp-Entry "get-before-end" accessor () () #f #f 49 52 49 60 ()}
        {Lisp-Entry "set-before-end" accessor () () #f #f 49 52 49 60 ()}
        {Lisp-Entry "after-end" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 21 ()}
        {Lisp-Entry "get-after-end" accessor () () #f #f 50 52 50 60 ()}
        {Lisp-Entry "set-after-end" accessor () () #f #f 50 52 50 60 ()}
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "get-editor" method (public) () #f #f 62 18 62 28 ("first-child")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 71 20 71 24 ("context" "surface")}}}})
"Tree-Drag-Source"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Drag-Source.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Drag-Source" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Tree-Drag-Source" class () ((extends . "Drag-Source")) #f #f 43 7 43 23 ("Drag-Source")
        {Lisp-Entry "row" slot () ((initialize . "#f") (getter . "generate")) #f #f 46 8 46 11 ()}
        {Lisp-Entry "get-row" accessor () () #f #f 46 33 46 41 ()}
        {Lisp-Entry "col" slot () ((initialize . "#f") (getter . "generate")) #f #f 47 8 47 11 ()}
        {Lisp-Entry "get-col" accessor () () #f #f 47 33 47 41 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 50 20 50 30 ("col~self" "self" "row~self" "set!" "nextmethod" "apply" "others" "col" "row" "bind-keywords" "rest")}
        {Lisp-Entry "get-cell" method (public) () #f #f 62 18 62 26 ("col" "row" "view" "row->line" "row->line~" "Cell" "new")}}}})
"Tree-Drop-Target"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Drop-Target.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Drop-Target" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Tree-Drop-Target" class () ((extends . "Drop-Target")) #f #f 43 7 43 23 ("Drop-Target")
        {Lisp-Entry "row" slot () ((getter . "generate")) #f #f 46 8 46 11 ()}
        {Lisp-Entry "get-row" accessor () () #f #f 46 23 46 31 ()}
        {Lisp-Entry "col" slot () ((getter . "generate")) #f #f 47 8 47 11 ()}
        {Lisp-Entry "get-col" accessor () () #f #f 47 23 47 31 ()}
        {Lisp-Entry "quarter" slot () ((getter . "generate")) #f #f 48 8 48 15 ()}
        {Lisp-Entry "get-quarter" accessor () () #f #f 48 23 48 31 ()}
        {Lisp-Entry "part" slot () ((getter . "generate")) #f #f 49 8 49 12 ()}
        {Lisp-Entry "get-part" accessor () () #f #f 49 23 49 31 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 52 20 52 30 ("part~self" "quarter~self" "col~self" "self" "row~self" "set!" "nextmethod" "apply" "others" "part" "quarter" "col" "row" "bind-keywords" "rest")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 61 20 61 25 ("part" "quarter" "col" "row" "view" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-cell" method (public) () #f #f 72 18 72 26 ("col" "row" "view" "row->line" "row->line~" "Cell" "new")}}}})
"Tree-Embedded-Search-Text-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Embedded-Search-Text-Actions.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Embedded-Search-Text-Actions" module (protected) () #f #f 37 18 37 64 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Tree-Embedded-Search-Text-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 53 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Return" ":control" "Shortcut" "shortcut:" "on-end-edition" ":focus" "Event-Handler" "action-handler:" "end-edition" "name:" "Action-Item" "<Action-Item>" "Actions" "<Actions>")}}}})
"Tree-Embedded-Search-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Embedded-Search-Text-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Embedded-Search-Text-View" module (protected) () #f #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui" "jazz.system" "jazz.ide")}
      {Lisp-Entry "Tree-Embedded-Search-Text-View" class (undocumented) ((extends . "IDE-Text-View")) #f #f 46 20 46 50 ("IDE-Text-View")
        {Lisp-Entry "tree" slot () () #f #f 49 8 49 12 ()}
        {Lisp-Entry "set-tree" method (public) ("t") #f #f 57 18 57 26 ("tree" "set!" "t")}
        {Lisp-Entry "get-tree" method () () #f #f 66 11 66 19 ("tree")}
        {Lisp-Entry "get-cell" method () () #f #f 70 11 70 19 ("get-tree" "get-edited-cell" "get-edited-cell~")}
        {Lisp-Entry "get-cell-values" method () () #f #f 74 11 74 26 ("get-col" "get-col~" "get-line" "get-line~" "values" "get-cell" "cell" "let")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 84 20 84 33 ("nextmethod" "tree-embedded-search-text" "find-actions" "cons")}
        {Lisp-Entry "upward-compound" method (override) () #f #f 90 20 90 35 ("get-guest" "toggle-play-recording" "toggle-play-recording~")}
        {Lisp-Entry "focus-lose" method (override) () #f #f 99 20 99 30 ("end-edition" "lambda" "delay-event" "nextmethod")}
        {Lisp-Entry "return-press" method (override) ("evt") #f #f 106 20 106 32 ("on-search" "on-search~" "bell" "get-find-targets" "get-find-targets~" "get-contexts" "get-contexts~" "null?" "if" "get-search" "get-search~" "search" "end-edition" "get-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-end-edition" method () ("key") #f #f 115 11 115 25 ("end-edition" "key")}
        {Lisp-Entry "tab-press" method (override) ("key" "modifiers") #f #f 119 20 119 29 ("end-edition" "select-cell" "select-cell~" "when" "Cell" "new" "cell" "+" "modulo" "else" "-1" "cond" "row-direction" "1" "-" "max-col" "navigate-tab" "navigate-tab~" "0" "=" "get-cell-values" "col" "line" "receive" "get-visible-count" "get-visible-count~" "height" "get-columns-count" "get-columns-count~" "width" "neq?" "to-navigable?" "navigated-view" "navigated-view~" "to-view" "find-tab-manager" "find-tab-manager~" "tab-manager" "get-tree" "tree" "let*" "end-completion" "not" "has-completion?" "and" "if" "shift-key?" "shift?" "let" "modifiers" "key")}
        {Lisp-Entry "left-arrow-move" method (override) ("extend?" "word?") #f #f 145 20 145 35 ("nextmethod" "get-cell" "get-tree" "select-left" "select-left~" "if" "word?" "extend?")}
        {Lisp-Entry "right-arrow-move" method (override) ("extend?" "word?") #f #f 151 20 151 36 ("nextmethod" "get-cell" "get-tree" "select-right" "select-right~" "if" "word?" "extend?")}
        {Lisp-Entry "up-arrow-move" method (override) ("extend?" "scroll?") #f #f 157 20 157 33 ("get-cell" "get-tree" "select-up" "select-up~" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method (override) ("extend?" "scroll?") #f #f 161 20 161 35 ("get-cell" "get-tree" "select-down" "select-down~" "scroll?" "extend?")}
        {Lisp-Entry "end-edition" method () () #f #f 165 11 165 22 ("get-tree" "end-edition" "end-edition~" "player" "when")}}}})
"Tree-Header"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Header.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Header" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Tree-Header" class () ((extends . "Header-View")) #f #f 51 7 51 18 ("0" "explicit" "Header-View")
        {Lisp-Entry "empty-background" property () ((initialize . "#f") (accessors . "explicit")) #f #f 54 12 54 28 ()}
        {Lisp-Entry "resizing?" slot (protected) ((initialize . "#f")) #f #f 57 18 57 27 ()}
        {Lisp-Entry "autofiting?" slot (protected) ((initialize . "#f")) #f #f 58 18 58 29 ()}
        {Lisp-Entry "resized-column" slot (protected) ((initialize . "#f")) #f #f 59 18 59 32 ()}
        {Lisp-Entry "resized-column-ref" slot (protected) ((initialize . "0")) #f #f 60 18 60 36 ()}
        {Lisp-Entry "resize-start-width" slot (protected) ((initialize . "#f")) #f #f 61 18 61 36 ()}
        {Lisp-Entry "resize-start-h" slot (protected) ((initialize . "#f")) #f #f 62 18 62 32 ()}
        {Lisp-Entry "initial-line" slot (protected) ((initialize . "#f")) #f #f 63 18 63 30 ()}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 66 20 66 26 ("invalidate-layout" "nextmethod" "rest")}
        {Lisp-Entry "get-empty-background" method (public) () #f #f 76 18 76 38 ("empty-background")}
        {Lisp-Entry "set-empty-background" method (public) ("value") #f #f 80 18 80 38 ("invalidate-view" "set!" "empty-background" "neq?" "when" "value")}
        {Lisp-Entry "find-client" method (override) () #f #f 91 20 91 31 ("content" "child" "get-scroll-client" "get-scroll-client~")}
        {Lisp-Entry "get-column" method (public) ("col") #f #f 100 18 100 28 ("get-columns" "element" "col")}
        {Lisp-Entry "column->col" method (public) ("column") #f #f 104 18 104 29 ("get-columns" "find" "column")}
        {Lisp-Entry "borders-left" definition () ("borders") #f #f 113 15 113 27 ("car" "borders")}
        {Lisp-Entry "borders-right" definition () ("borders") #f #f 117 15 117 28 ("cdr" "borders")}
        {Lisp-Entry "get-columns" method () () #f #f 126 11 126 22 ("get-client" "get-columns" "get-columns~")}
        {Lisp-Entry "get-columns-count" method () () #f #f 130 11 130 28 ("get-client" "get-columns-count" "get-columns-count~")}
        {Lisp-Entry "invalidate-columns" method () () #f #f 134 11 134 29 ("get-client" "invalidate-columns" "invalidate-columns~")}
        {Lisp-Entry "layout-column" method () ("column") #f #f 138 11 138 24 ("get-client" "layout-column" "layout-column~" "column")}
        {Lisp-Entry "get-rows" method () () #f #f 147 11 147 19 ("get-client" "get-root-rows" "get-root-rows~")}
        {Lisp-Entry "invalidate-row-selector" method (public) ("row") #f #f 151 18 151 41 ("invalidate-rect" "selector-rect" "rect" "let" "get-finished?" "when" "row")}
        {Lisp-Entry "selector-rect" method (public) ("row") #f #f 157 18 157 31 ("+" "get-selector-width" "0" "Rect" "new" "parent" "get-height" "get-height~" "height" "let" "row")}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 167 20 167 31 ("layout-scrollee" "layout-scrollee~" "when" "get-client" "client" "let" "nextmethod" "size")}
        {Lisp-Entry "set-scroller" method (override) ("view") #f #f 179 20 179 32 ("get-client" "set-scroller" "set-scroller~" "view")}
        {Lisp-Entry "get-scroll-client" method (override) () #f #f 183 20 183 37 ("get-client" "get-scroll-client" "get-scroll-client~")}
        {Lisp-Entry "get-hscroll-amount" method () () #f #f 187 11 187 29 ("0" "get-position" "get-position~" "get-h" "get-h~" "get-selector-width" "+" "if" "get-client" "client" "let")}
        {Lisp-Entry "get-vscroll-amount" method () () #f #f 192 11 192 29 ("0" "get-position" "get-position~" "get-v" "get-v~" "get-header-height" "+" "if" "get-client" "client" "let")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 202 20 202 24 ("increase!" "get-selector-width" "draw-selector" "draw-selector~" "get-height" "get-height~" "row-height" "row" "lambda" "get-rows" "iterate" "get-row-spacing" "get-row-spacing~" "get-vscroll-amount" "selector?" "cdr" "line" "line~" "-" "set-line-width" "set-line-width~" "set-color" "set-color~" "eq?" "draw-header" "draw-header~" ">" "space-column?" "space-column?~" "spaced?" "column-sorting" "column-sorting~" "sorted" "get-width~" "get-visible?" "get-visible?~" "car" "column" "iter" "rank" "enabled?" "get-flat?" "get-flat?~" "get-look" "look" "last" "not-null?" "and" "last-column" "get-columns" "columns" "get-right" "get-right~" "right-clip" "get-left" "get-left~" "left-clip" "get-column-spacing" "get-column-spacing~" "cs" "get-hscroll-amount" "get-top" "get-top~" "<" "when" "Medium" "empty-background" "Dark" "view-enabled?" "view-enabled?~" "get-header-height" "get-width" "get-columns-right" "get-columns-right~" "right" "get-clipper" "get-clipper~" "clipper" "get-client" "Black" "Color" "set-text-color" "set-text-color~" "header-color" "header-color~" "background" "or" "fill-rect" "fill-rect~" "left" "top" "edges:" "raised" "inner:" "draw-edge" "draw-edge~" "0" "smaller" "1" "expand-rect" "inner" "+" "Rect" "new" "outer" "let*" "-2" "-1" "if" "thick" "let" "flat?" "height" "width" "v" "h" "client" "draw-intersection" "define" "context" "surface")}
        {Lisp-Entry "cursor-update" method (override) ("pos") #f #f 270 20 270 33 (":arrow" ":west-east" "set-cursor" "get-hscroll-amount" "get-h" "get-h~" "-" "resized-col" "resizing?" "or" "client" "view-enabled?" "view-enabled?~" "and" "if" "pos")}
        {Lisp-Entry "calculate-tooltip-bounds" method () ("column") #f #f 281 11 281 35 ("0" "header-rect" "offset-rect" "get-hscroll-amount" "hscrolled" "let" "column")}
        {Lisp-Entry "get-tooltip-bounds" method (override) ("pos") #f #f 286 20 286 38 ("get-column" "calculate-tooltip-bounds" "when" "h->col" "col" "get-h" "get-h~" "-" "h" "get-hscroll-amount" "hscrolled" "let*" "pos")}
        {Lisp-Entry "get-tooltip-context" method (override) ("pos") #f #f 294 20 294 39 ("bounds:" "text:" "self" "view:" "Tooltip-Context" "new" "0" "header-rect" "offset-rect" "rect" "get-header-tooltip" "get-header-tooltip~" "text" "get-column" "column" "let" "h->col" "col" "get-h" "get-h~" "-" "h" "get-hscroll-amount" "hscrolled" "let*" "when" "pos")}
        {Lisp-Entry "context-menu" method (override) ("pos") #f #f 315 20 315 32 ("header-coordinates" "header-menu" "header-menu~" "get-column" "column" "h->col" "unless" "resized-col" "col" "get-v" "get-v~" "v" "get-hscroll-amount" "get-h" "get-h~" "-" "h" "let" "client" "view-enabled?" "view-enabled?~" "and" "when" "pos")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 332 20 332 30 ("selector-down" "selector-down~" "initial-line" "get-row" "get-row~" "row" "v->line" "v->line~" "line" "get-client" "tree" "resize-start-h" "get-width" "get-width~" "resize-start-width" "resized-column-ref" "resized-column" "resizing?" "header-coordinates" "header-down" "header-down~" "get-column" "column" "h->col" "not" "if" "resized-col" "col" "get-vscroll-amount" "get-v" "get-v~" "v" "get-hscroll-amount" "get-h" "get-h~" "-" "h" "let" "autofiting?" "set!" "acquire-capture" "client" "view-enabled?" "view-enabled?~" "and" "when" "pos")}
        {Lisp-Entry "drag-move" method (override) ("pos") #f #f 358 20 358 29 ("selector-move" "selector-move~" "get-row" "get-row~" "row" "v->line" "v->line~" "line" "get-client" "initial-line" "resized-column" "resize-column" "min-column-width" "resize-start-width" "+" "max" "width" "resize-start-h" "delta" "header-coordinates" "header-move" "header-move~" "get-column" "column" "h->col" "col" "resizing?" "not" "if" "get-vscroll-amount" "get-v" "get-v~" "v" "get-hscroll-amount" "get-h" "get-h~" "-" "h" "let" "client" "view-enabled?" "view-enabled?~" "and" "when" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 379 20 379 27 ("release-capture" "resized-column" "set!" "selector-up" "selector-up~" "get-row" "get-row~" "row" "tree" "initial-line" "header-coordinates" "header-up" "header-up~" "get-column" "column" "h->col" "col" "autofiting?" "unless" "resizing?" "not" "if" "get-vscroll-amount" "get-v" "get-v~" "v" "get-hscroll-amount" "get-h" "get-h~" "-" "h" "let" "client" "view-enabled?" "view-enabled?~" "and" "when" "rest" "pos")}
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 400 20 400 32 ("header-coordinates" "header-double-click" "header-double-click~" "column" "h->col" "autofiting?" "set!" "get-column" "autofit-column" "begin" "if" "resized-col" "col" "get-v" "get-v~" "v" "get-hscroll-amount" "get-h" "get-h~" "-" "h" "let" "client" "view-enabled?" "view-enabled?~" "and" "when" "pos")}
        {Lisp-Entry "resize-column" method () ("column" "width") #f #f 415 11 415 24 ("get-height" "2" "Rect" "Distance" "new" "scroll-view" "update-view" "invalidate-view" "layout-scrollee" "layout-scrollee~" "layout-column" "invalidate-columns" "set-width" "set-width~" "client" "set-filled-column" "set-filled-column~" "get-hscroll-amount" "get-borders" "get-borders~" "borders-right" "+" "left" "get-width" "get-width~" "-" "delta" "let" "0" ">=" "when" "width" "column")}
        {Lisp-Entry "autofit-column" method () ("column") #f #f 430 11 430 25 ("min-column-width" "max" "resize-column" "set!" ">" "2" "effective-font" "effective-font~" "text-width" "text-width~" "get-level" "get-level~" "text-h" "text-h~" "+" "width" "get-title" "get-title~" "title" "Tree-Label" "is?" "when" "get-child" "get-child~" "data" "rank" "row" "lambda" "for-each-visible-row" "for-each-visible-row~" "0" "max-width" "column->col" "column->col~" "col" "tree" "get-client" "client" "let" "column")}
        {Lisp-Entry "header-coordinates" method () ("column" "pos") #f #f 449 11 449 29 ("header-position" "point-" "pos" "column")}
        {Lisp-Entry "resized-col" method () ("h") #f #f 453 11 453 22 ("continuation-return" "4" "near?" "when" "get-borders" "get-borders~" "right" "left" "bind" "get-columns" "in" "column" "get-columns-count" "below" "0" "from" "col" "for" "loop" "return" "lambda" "continuation-capture" "h")}
        {Lisp-Entry "invalidate-column-header" method (public) ("column") #f #f 469 18 469 42 ("invalidate-rect" "header-rect" "rect" "let" "get-finished?" "when" "column")}
        {Lisp-Entry "header-rect" method (public) ("column") #f #f 475 18 475 29 ("get-height" "0" "Rect" "new" "get-borders" "get-borders~" "right" "left" "bind" "column")}
        {Lisp-Entry "header-position" method () ("column") #f #f 485 11 485 26 ("0" "get-borders" "get-borders~" "borders-left" "Point" "new" "column")}
        {Lisp-Entry "h->col" method () ("h") #f #f 489 11 489 17 ("continuation-return" "<=" ">=" "and" "when" "get-borders" "get-borders~" "right" "left" "bind" "get-columns" "in" "column" "get-columns-count" "below" "0" "from" "n" "for" "loop" "return" "lambda" "continuation-capture" "h")}}}})
"Tree-Highlight"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Highlight.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Highlight" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Tree-Highlight" class (undocumented) ((extends . "Object")) #f #f 43 20 43 34 ("Object")
        {Lisp-Entry "row" slot () ((getter . "generate")) #f #f 46 8 46 11 ()}
        {Lisp-Entry "get-row" accessor () () #f #f 46 27 46 35 ()}
        {Lisp-Entry "col" slot () ((getter . "generate")) #f #f 47 8 47 11 ()}
        {Lisp-Entry "get-col" accessor () () #f #f 47 27 47 35 ()}
        {Lisp-Entry "insert" slot () ((getter . "generate")) #f #f 48 8 48 14 ()}
        {Lisp-Entry "get-insert" accessor () () #f #f 48 27 48 35 ()}
        {Lisp-Entry "outer-color" slot () ((getter . "generate")) #f #f 49 8 49 19 ()}
        {Lisp-Entry "get-outer-color" accessor () () #f #f 49 27 49 35 ()}
        {Lisp-Entry "inner-color" slot () ((getter . "generate")) #f #f 50 8 50 19 ()}
        {Lisp-Entry "get-inner-color" accessor () () #f #f 50 27 50 35 ()}
        {Lisp-Entry "initialize" method (override) ("row" "col" "(insert: insert #f)" "(outer-color: outer-color #f)" "(inner-color: inner-color #f)") #f #f 53 20 53 30 ("inner-color~self" "outer-color~self" "insert~self" "col~self" "self" "row~self" "set!" "nextmethod" "inner-color" "inner-color:" "outer-color" "outer-color:" "insert" "insert:" "col" "row")}
        {Lisp-Entry "compare-object" method (override) ("target") #f #f 62 20 62 34 (":not-equal" "else" ":equal" "get-insert" "get-insert~" "insert" "get-col" "get-col~" "col" "=" "get-row" "get-row~" "row" "eq?" "and" ":incompatible" "Tree-Highlight" "is-not?" "cond" "target")}}}})
"Tree-Image"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Image.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Image" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Tree-Image" class () ((extends . "Tree-Label")) #f #f 43 7 43 17 ("Tree-Label")
        {Lisp-Entry "image" slot (protected) ((accessors . "generate")) #f #f 46 18 46 23 ()}
        {Lisp-Entry "get-image" accessor () () #f #f 46 34 46 42 ()}
        {Lisp-Entry "set-image" accessor () () #f #f 46 34 46 42 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 49 20 49 30 ("self" "image~self" "set!" "nextmethod" "apply" "others" "image" "bind-keywords" "rest")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 55 20 55 25 ("image" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-sort-value" method (override) () #f #f 66 20 66 34 ("image")}}}})
"Tree-Image-Column"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Image-Column.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Image-Column" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system")}
      {Lisp-Entry "Tree-Image-Column" class () ((extends . "Tree-Label-Column")) #f #f 44 7 44 24 ("Tree-Label-Column")
        {Lisp-Entry "draw-data" method (override) ("surface" "context" "row" "data" "width" "height") #f #f 52 20 52 29 ("draw-title" "draw-image" "draw-image~" "1" "2" "16" "-" "quotient" "+" "0" "if" "h" "get-title" "get-title~" "title" "get-images-portfolio" "get-images-portfolio~" "images" "get-application" "appl" "let*" "when" "get-image" "get-image~" "image" "let" "draw-background" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "sort-value" method (override) ("row" "data") #f #f 70 20 70 30 ("get-name" "get-name~" "not" "if" "get-image" "get-image~" "image" "let" "get-title" "get-title~" "or" "data" "row")}}}})
"Tree-Label"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Label.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Label" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale")}
      {Lisp-Entry "Tree-Label" class () ((extends . "Tree-Data")) #f #f 44 7 44 17 ("Tree-Data")
        {Lisp-Entry "title" slot (protected) () #f #f 47 18 47 23 ()}
        {Lisp-Entry "font" slot (protected) ((accessors . "generate")) #f #f 48 18 48 22 ()}
        {Lisp-Entry "get-font" accessor () () #f #f 48 34 48 42 ()}
        {Lisp-Entry "set-font" accessor () () #f #f 48 34 48 42 ()}
        {Lisp-Entry "color" slot (protected) ((accessors . "generate")) #f #f 49 18 49 23 ()}
        {Lisp-Entry "get-color" accessor () () #f #f 49 34 49 42 ()}
        {Lisp-Entry "set-color" accessor () () #f #f 49 34 49 42 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 52 20 52 30 ("color~self" "self" "font~self" "set!" "set-title" "nextmethod" "apply" "others" "color" "font" "title" "bind-keywords" "rest")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 60 20 60 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-title" method (public) () #f #f 71 18 71 27 ("title")}
        {Lisp-Entry "set-title" method (public) ("value") #f #f 75 18 75 27 ("->string" "Locales" "is?" "if" "and" "title" "set!" "value")}
        {Lisp-Entry "get-sort-value" method (override) () #f #f 84 20 84 34 ("title")}}}})
"Tree-Label-Column"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Label-Column.jazz"} 246091630. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Label-Column" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Tree-Label-Column" class () ((extends . "Tree-Column")) #f #f 46 7 46 24 ("explicit" "0" "Tree-Column")
        {Lisp-Entry "padding" property (protected) ((initialize . "0") (accessors . "explicit")) #f #f 49 22 49 29 ()}
        {Lisp-Entry "cell-class" method (override) () #f #f 57 20 57 30 ("Tree-Label")}
        {Lisp-Entry "get-padding" method (public) () #f #f 66 18 66 29 ("padding")}
        {Lisp-Entry "set-padding" method (public) ("value") #f #f 70 18 70 29 ("parent" "invalidate-view" "invalidate-view~" "padding" "set!" "value")}
        {Lisp-Entry "get-data-tooltip" method (override) ("data") #f #f 80 20 80 36 ("get-title" "get-title~" "Tree-Label" "is?" "when" "data")}
        {Lisp-Entry "Default-Color" definition () () #f #f 90 14 90 27 ("Black" "Color")}
        {Lisp-Entry "draw-at" method (override) ("surface" "context" "row" "data" "h" "v" "width" "height") #f #f 94 20 94 27 ("draw-title" "nextmethod" "height" "width" "v" "h" "data" "row" "context" "surface")}
        {Lisp-Entry "draw-title" method (protected virtual) ("surface" "context" "row" "data" "h" "v" "width" "height") #f #f 99 29 99 39 ("get-v" "get-v~" "0" "else" "-1" "-" "tail" "padding" "1" "head" "justification" "case" "get-h" "get-h~" "+" "draw-text" "draw-text~" "title-position" "pos" "set-font" "set-font~" "cell-color" "set-text-color" "set-text-color~" "get-color" "get-color~" "color" "parent" "effective-font" "effective-font~" "get-font" "get-font~" "font" "get-title" "get-title~" "or" "localize" "title" "let" "height" "width" "v" "h" "data" "row" "context" "surface")}
        {Lisp-Entry "title-position" method (protected virtual) ("surface" "width" "height" "title") #f #f 109 29 109 43 ("justification" "justify-title" "title" "height" "width" "surface")}
        {Lisp-Entry "cell-color" method (protected) ("color" "context") #f #f 113 21 113 31 ("Default-Color" "get-look" "get-look~" "get-text-color" "get-text-color~" "else" "selected-text-color" "selected-text-color~" "Dark" "Color" "not" "cond" "focused?" "focused?~" "determine-color" "determine-color~" "or" "cell-selected?" "selected?:" "getf" "and" "selected?" "parent" "view-enabled?" "view-enabled?~" "enabled?" "let" "context" "color")}
        {Lisp-Entry "text-h" method (override) ("level") #f #f 123 20 123 26 ("1" "level")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 132 25 132 45 ("Tree-Label-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 141 11 141 17 ()
        {Lisp-Entry "import" import () () #f #f 144 1 144 7 ("jazz.designer")}
        {Lisp-Entry "Tree-Label-Descriptor" class () ((extends . "Tree-Column-Descriptor")) #f #f 147 7 147 28 ("Tree-Column-Descriptor")
          {Lisp-Entry "form" form () () #f #f 150 3 150 7 ("title:" "padding" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Tree-Look"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Tree-Look.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Tree-Look" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Tree-Look" class () ((extends . "Look")) #f #f 43 7 43 16 ("Look")
        {Lisp-Entry "background" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 22 ()}
        {Lisp-Entry "get-background" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "set-background" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "text-color" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 22 ()}
        {Lisp-Entry "get-text-color" accessor () () #f #f 47 47 47 55 ()}
        {Lisp-Entry "set-text-color" accessor () () #f #f 47 47 47 55 ()}
        {Lisp-Entry "line-color" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 22 ()}
        {Lisp-Entry "get-line-color" accessor () () #f #f 48 47 48 55 ()}
        {Lisp-Entry "set-line-color" accessor () () #f #f 48 47 48 55 ()}}}})
"Tree-Node"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Node.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Node" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Tree-Node" class () ((extends . "Tree-Label")) #f #f 43 7 43 16 ("Tree-Label")
        {Lisp-Entry "image" slot (protected) ((accessors . "generate")) #f #f 46 18 46 23 ()}
        {Lisp-Entry "get-image" accessor () () #f #f 46 34 46 42 ()}
        {Lisp-Entry "set-image" accessor () () #f #f 46 34 46 42 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 49 20 49 30 ("self" "image~self" "set!" "break" "title:" "getf" "not" "when" "nextmethod" "apply" "others" "image" "bind-keywords" "rest")}}}})
"Tree-Node-Column"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Node-Column.jazz"} 244272381. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Node-Column" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.locale" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Tree-Node-Column" class () ((extends . "Tree-Label-Column")) #f #f 47 7 47 23 ("1" "explicit" "Tree-Label-Column")
        {Lisp-Entry "controls?" property (protected) ((initialize . "#t") (accessors . "explicit")) #f #f 50 22 50 31 ()}
        {Lisp-Entry "toplevel-controls?" property (protected) ((initialize . "#t") (accessors . "explicit")) #f #f 51 22 51 40 ()}
        {Lisp-Entry "display-images?" property (protected) ((initialize . "#t") (accessors . "explicit")) #f #f 52 22 52 37 ()}
        {Lisp-Entry "image-offset" slot () ((initialize . "1")) #f #f 55 8 55 20 ()}
        {Lisp-Entry "get-controls?" method (public) () #f #f 63 18 63 31 ("controls?")}
        {Lisp-Entry "set-controls?" method (public) ("flag") #f #f 67 18 67 31 ("parent" "invalidate-view" "invalidate-view~" "controls?" "set!" "flag")}
        {Lisp-Entry "get-toplevel-controls?" method (public) () #f #f 72 18 72 40 ("toplevel-controls?")}
        {Lisp-Entry "set-toplevel-controls?" method (public) ("flag") #f #f 76 18 76 40 ("parent" "invalidate-view" "invalidate-view~" "toplevel-controls?" "set!" "flag")}
        {Lisp-Entry "get-display-images?" method (public) () #f #f 81 18 81 37 ("display-images?")}
        {Lisp-Entry "set-display-images?" method (public) ("flag") #f #f 85 18 85 37 ("parent" "invalidate-view" "invalidate-view~" "display-images?" "set!" "flag")}
        {Lisp-Entry "set-image-offset" method (public) ("offset") #f #f 90 18 90 34 ("parent" "invalidate-view" "invalidate-view~" "image-offset" "set!" "offset")}
        {Lisp-Entry "cell-class" method (override) () #f #f 100 20 100 30 ("Tree-Node")}
        {Lisp-Entry "column-mouse-down" method (override) ("cell" "pos" "shift?" "control?") #f #f 109 20 109 37 ("mouse" "process-selection" "process-selection~" "content" "expand/collapse" "expand/collapse~" "control" "find-part" "case" "get-line" "get-line~" "parent" "get-row" "get-row~" "row" "let" "control?" "shift?" "pos" "cell")}
        {Lisp-Entry "double-click" method (override) ("cell" "pos") #f #f 116 20 116 32 ("get-line" "get-line~" "get-row" "get-row~" "parent" "expand/collapse" "expand/collapse~" "pos" "cell")}
        {Lisp-Entry "find-part" method (override) ("cell" "pos") #f #f 125 20 125 29 ("content" "control" "13" "<" "4" "+" ">=" "toplevel-controls?" "0" ">" "or" "controls?" "and" "if" "level-h" "base" "get-line" "get-line~" "parent" "get-row" "get-row~" "get-level" "get-level~" "level" "get-v" "get-v~" "v" "get-h" "get-h~" "h" "let" "pos" "cell")}
        {Lisp-Entry "row-text-left" method (protected) ("row") #f #f 140 21 140 34 ("1" "get-level" "get-level~" "text-h" "-" "row")}
        {Lisp-Entry "text-rect" method (protected) ("row" "data" "width" "height" "force-node?") #f #f 144 21 144 30 ("4" "+" "0" "Rect" "new" "get-columns-count" "get-columns-count~" "<=" "if" "min" "get-width" "get-width~" "title-width" "text-extent" "text-extent~" "extent" "let" "parent" "effective-font" "effective-font~" "get-font" "get-font~" "or" "font" "2" "max" "1" "get-level" "get-level~" "text-h" "-" "h" "get-title" "get-title~" "localize" "title" "let*" "force-node?" "height" "width" "data" "row")}
        {Lisp-Entry "control-rect" method (protected) ("row" "top") #f #f 160 21 160 33 ("13" "4" "+" "Rect" "new" "get-level" "get-level~" "control-h" "h" "let" "top" "row")}
        {Lisp-Entry "plus/minus-rect" method (protected) ("row" "top") #f #f 165 21 165 36 ("12" "5" "+" "Rect" "new" "get-level" "get-level~" "control-h" "h" "let" "top" "row")}
        {Lisp-Entry "image-rect" method (protected) ("row" "top") #f #f 170 21 170 31 ("16" "0" "+" "Rect" "new" "get-level" "get-level~" "image-h" "h" "let" "top" "row")}
        {Lisp-Entry "layout-cell" method (override) ("row" "data" "h" "v" "width" "height") #f #f 180 20 180 31 ("-" "Dimension" "set-size" "set-size~" "+" "Point" "new" "set-position" "set-position~" "get-level" "get-level~" "image-h" "offset" "let" "View" "is?" "when" "height" "width" "v" "h" "data" "row")}
        {Lisp-Entry "draw-data" method (override) ("surface" "context" "row" "data" "width" "height") #f #f 192 20 192 29 ("0" "draw-title" "draw-image" "draw-control" "draw-level" "draw-background" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "draw-background" method (override) ("surface" "context" "row" "data" "width" "height") #f #f 200 20 200 35 ("frame-rect" "frame-rect~" "get-frame-color" "get-frame-color~" "frame-color" "gradient-fill" "~" "apply" "pair?" "selection-color" "selection-color~" "get-left" "get-left~" "r" "when" "text-rect" "rect" "cell-selected?" "and" "selected?:" "getf" "selected?" "cycle-debug-color!" "debug-paint?" "if" "fill-rect" "fill-rect~" "0" "Rect" "new" "cell-rect" "Tree-Background" "Color" "get-look" "get-look~" "get-background" "get-background~" "parent" "get-cell-background" "get-cell-background~" "or" "background" "let" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "draw-level" method (public) ("surface" "row" "data" "width" "<fx>" "height" "<fx>") #f #f 224 18 224 28 ("solid" "get-father" "get-father~" "set!" "19" "horz-adjusted" "odd?" "and" "half-adjusted" "-1" "top-adjusted" "2" "fxround/" "half" "let*" "8" "+" "line" "line~" "0" "even?" "adjust" "when" "/=" "if" "visible-sibling-follows?" "visible-sibling-follows?~" "sf?" "level-h" "h" "downto" "from" "n" "for" "loop" "get-position" "get-position~" "get-v" "get-v~" "row-v" "get-level" "get-level~" "level" "1" "set-line-width" "set-line-width~" "set-color" "set-color~" "alternate" "set-style" "set-style~" "Black" "Color" "parent" "get-look" "get-look~" "get-line-color" "get-line-color~" "or" "line-color" "let" "height" "fx" "<fx>" "width" "data" "row" "surface")}
        {Lisp-Entry "draw-control" method (protected) ("surface" "row" "data" "width" "height") #f #f 249 21 249 33 ("expanded" "get-state" "get-state~" "neq?" "11" "8" "6" "line" "line~" "1" "set-line-width" "set-line-width~" "set-color" "set-color~" "fill-rect" "fill-rect~" "12" "5" "get-background" "get-background~" "background" "frame-rect" "frame-rect~" "13" "4" "+" "Rect" "new" "rect" "Black" "Color" "get-line-color" "get-line-color~" "line-color" "control-h" "h" "let" "toplevel-controls?" "not" "or" "controls?" "expandable?" "expandable?~" "and" "when" "0" "=" "toplevel?" "get-level" "get-level~" "level" "parent" "get-look" "get-look~" "look" "let*" "height" "width" "data" "row" "surface")}
        {Lisp-Entry "draw-image" method () ("surface" "context" "row" "data" "width" "height") #f #f 269 11 269 21 ("0" "get-portfolio" "get-portfolio~" "draw-opaque-image" "draw-opaque-image~" "Tree-Background" "Color" "parent" "get-look" "get-look~" "get-background" "get-background~" "or" "background" "display-images?" "and" "when" "get-image" "get-image~" "image" "get-level" "get-level~" "image-h" "h" "let" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "draw-title" method (override) ("surface" "context" "row" "data" "h" "v" "width" "height") #f #f 277 20 277 30 ("draw-text" "draw-text~" "set-font" "set-font~" "get-color" "get-color~" "cell-color" "set-text-color" "set-text-color~" "parent" "effective-font" "effective-font~" "get-font" "get-font~" "font" "title-position" "get-v" "get-v~" "get-level" "get-level~" "text-h" "get-title" "get-title~" "or" "localize" "title" "let" "height" "width" "v" "h" "data" "row" "context" "surface")}
        {Lisp-Entry "level-h" method () ("level") #f #f 287 11 287 18 ("16" "toplevel-controls?" "0" "=" "or" "if" "parent" "get-indentation" "get-indentation~" "*" "-" "level")}
        {Lisp-Entry "control-h" method () ("level") #f #f 292 11 292 20 ("level-h" "level")}
        {Lisp-Entry "image-h" method (public) ("level") #f #f 296 18 296 25 ("image-offset" "display-images?" "16" "toplevel-controls?" "0" "/=" "or" "if" "control-h" "+" "level")}
        {Lisp-Entry "content-h" method (override) ("level") #f #f 300 20 300 29 ("0" "14" "display-images?" "if" "image-h" "+" "level")}
        {Lisp-Entry "text-h" method (override) ("level") #f #f 304 20 304 26 ("4" "3" "0" "16" "display-images?" "if" "image-h" "+" "level")}
        {Lisp-Entry "get-debugged" method (override) ("cell" "pos") #f #f 313 20 313 32 ("find-part" "values" "pos" "cell")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 322 25 322 45 ("Tree-Node-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 331 11 331 17 ()
        {Lisp-Entry "import" import () () #f #f 334 1 334 7 ("jazz.library" "jazz.designer")}
        {Lisp-Entry "Tree-Node-Descriptor" class () ((extends . "Tree-Label-Descriptor")) #f #f 338 7 338 27 ("Tree-Label-Descriptor")
          {Lisp-Entry "form" form () () #f #f 341 3 341 7 ("display-images?" "toplevel-controls?" "title:" "controls?" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "Image-Resource" "image:" "install" "<install>")}}}}})
"Tree-Path"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Path.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Path" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Tree-Path" class (undocumented) ((extends . "Tree-Label")) #f #f 43 20 43 29 ("Tree-Label")
        {Lisp-Entry "father-row" slot (protected) ((getter . "generate")) #f #f 46 18 46 28 ()}
        {Lisp-Entry "get-father-row" accessor () () #f #f 46 36 46 44 ()}
        {Lisp-Entry "initialize" method (override) ("father-row" "." "rest") #f #f 49 20 49 30 ("update-path-title" "self" "father-row~self" "set!" "nextmethod" "apply" "rest" "father-row")}
        {Lisp-Entry "update-path-title" method (public) () #f #f 60 18 60 35 ("list" "join" "if" "set-title" "father-path" "get-title" "get-title~" "father-title" "get-path-child" "get-path-child~" "path-cell" "get-node-child" "get-node-child~" "title-cell" "let*" "0" "get-level" "get-level~" ">" "father-row" "when")}}}})
"Tree-Path-Column"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Path-Column.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Path-Column" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Tree-Path-Column" class (undocumented) ((extends . "Tree-Label-Column")) #f #f 43 20 43 36 ("Tree-Label-Column")}}})
"Tree-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "Tree-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.preference.Tree-Preferences" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Tree-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 46 20 46 36 ("Preferences")
        {Lisp-Entry "sort-case-sensitive?" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 32 ()}
        {Lisp-Entry "get-sort-case-sensitive?" accessor () () #f #f 49 57 49 65 ()}
        {Lisp-Entry "set-sort-case-sensitive?" accessor () () #f #f 49 57 49 65 ()}
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 61 25 61 45 ("Tree-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 70 11 70 17 ()
        {Lisp-Entry "import" import () () #f #f 73 1 73 7 ("jazz.designer")}
        {Lisp-Entry "Tree-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 76 7 76 34 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 79 3 79 7 ("domain" "Boolean-Domain" "<Boolean-Domain>" "title:" "name:" "Property-Descriptor" "<Property-Descriptor>" "sort-case-sensitive?" "categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"Tree-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-Row.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-Row" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Tree-Row" class () ((extends . "Outline-Row")) #f #f 46 7 46 15 ("explicit" "Outline-Row")
        {Lisp-Entry "user-data" property (protected) ((initialize . "#f") (accessors . "generate")) #f #f 49 22 49 31 ()}
        {Lisp-Entry "get-user-data" accessor () () #f #f 49 57 49 65 ()}
        {Lisp-Entry "set-user-data" accessor () () #f #f 49 57 49 65 ()}
        {Lisp-Entry "background" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 50 22 50 32 ()}
        {Lisp-Entry "down?" slot (protected) ((initialize . "#f")) #f #f 53 18 53 23 ()}
        {Lisp-Entry "default-size" method (override) () #f #f 56 20 56 32 ("17" "100" "Dimension")}
        {Lisp-Entry "initialize" method (override) ("(parent: parent #f)" "(father: father #f)" "(level: level #f)" "(state: state 'collapsed)" "(row-height: row-height #f)" "(background: background #f)" "(children: children #f)" "(visible?: visible? #t)" "(user-data: user-data #f)") #f #f 65 20 65 30 ("set-visible-flag" "set-finished?" "set-installed?" "user-data~self" "children~self" "set-children" "if" "background~self" "row-height~self" "state~self" "level~self" "father~self" "self" "parent~self" "set!" "nextmethod" "user-data" "user-data:" "visible?" "visible?:" "children" "children:" "background" "background:" "row-height" "row-height:" "collapsed" "state" "state:" "level" "level:" "father" "father:" "parent" "parent:")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 87 20 87 25 ("user-data" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-tree" method (public) () #f #f 98 18 98 26 ("parent")}
        {Lisp-Entry "get-background" method (public) () #f #f 102 18 102 32 ("background")}
        {Lisp-Entry "set-background" method (public) ("value") #f #f 106 18 106 32 ("parent" "invalidate-view" "invalidate-view~" "background" "set!" "value")}
        {Lisp-Entry "set-children" method (override) ("lst") #f #f 116 20 116 32 ("add-child" "self" "set-parent" "set-parent~" "View" "is?" "if" "child" "lambda" "for-each" "children" "set!" "get-columns" "get-columns~" "length" "=" "assert" "when" "get-tree" "tree" "let" "lst")}
        {Lisp-Entry "set-data-children" method (protected) ("lst") #f #f 128 21 128 38 ("children" "set!" "lst")}
        {Lisp-Entry "replace-child" method (override) ("rank" "child") #f #f 132 20 132 33 ("parent" "layout-scrollee" "layout-scrollee~" "remove!" "insert!" "set!" "self" "set-parent" "set-parent~" "begin" "View" "is?" "if" "neq?" "when" "children" "element" "current" "let" "child" "rank")}
        {Lisp-Entry "get-child" method (public) ("rank") #f #f 146 18 146 27 ("children" "element" "rank")}
        {Lisp-Entry "get-node-child" method (public) () #f #f 150 18 150 32 ("children" "Tree-Node" "is?" "child" "lambda" "find-if")}
        {Lisp-Entry "get-path-child" method (public) () #f #f 156 18 156 32 ("children" "Tree-Path" "is?" "child" "lambda" "find-if")}
        {Lisp-Entry "calculate-node-width" method (package) () #f #f 162 19 162 39 ("get-title" "get-title~" "localize" "parent" "effective-font" "effective-font~" "text-width" "text-width~" "children" "car" "node" "let")}
        {Lisp-Entry "flatten" method (public) ("root-row") #f #f 172 18 172 25 ("sons" "flatten" "flatten~" "disconnect" "disconnect~" "flatten-row?" "flatten-row?~" "if" "son" "lambda" "for-each" "get-tree" "tree" "let" "root-row")}
        {Lisp-Entry "disconnect" method (public) () #f #f 181 18 181 28 ("0" "set-descendants-level" "position:" "change-father" "get-spine" "first" "son-rank" "son-rank~" "position" "get-tree" "get-root-row" "get-root-row~" "root-row" "get-father-row" "get-father-row~" "and" "father-row" "get-path-child" "path" "let*")}
        {Lisp-Entry "reconnect" method (public) () #f #f 190 18 190 27 ("change-father" "get-level" "get-level~" "1" "+" "set-descendants-level" "get-father-row" "father-row" "let")}
        {Lisp-Entry "disconnected?" method (public virtual) () #f #f 196 26 196 39 ("father" "/=" "and" "get-father-row" "father-row" "let")}
        {Lisp-Entry "get-father-row" method (public virtual) () #f #f 201 26 201 40 ("get-father-row" "get-father-row~" "and" "get-path-child" "path" "let")}
        {Lisp-Entry "auto-collapsable?" method (public virtual) () #f #f 211 26 211 43 ("collapsable?")}
        {Lisp-Entry "layout" method (override) () #f #f 220 20 220 26 ("get-columns" "get-columns~" "space-column?" "space-column?~" "if" "+" "increase!" "self" "layout-cell" "layout-cell~" "get-width" "get-width~" "width" "data" "column" "lambda" "for-each" "rank" "get-effective-height" "height" "get-column-spacing" "get-column-spacing~" "cs" "0" "h" "children" "and" "when" "get-tree" "tree" "let")}
        {Lisp-Entry "context-menu" method (public virtual) ("pos") #f #f 241 26 241 38 ("pos")}
        {Lisp-Entry "double-click" method (public virtual) ("pos") #f #f 245 26 245 38 ("pos")}
        {Lisp-Entry "selector-down" method (public virtual) () #f #f 249 26 249 39 ("selector-click" "selector-click~" "self" "invalidate-row-selector" "invalidate-row-selector~" "parent" "get-header" "get-header~" "acquire-capture" "acquire-capture~" "down?" "set!")}
        {Lisp-Entry "selector-up" method (public virtual) () #f #f 256 26 256 37 ("self" "invalidate-row-selector" "invalidate-row-selector~" "parent" "get-header" "get-header~" "release-capture" "release-capture~" "down?" "set!")}
        {Lisp-Entry "selector-move" method (public virtual) ("initial-line") #f #f 262 26 262 39 ("selector-multi-select" "selector-multi-select~" "self" "parent" "get-header" "get-header~" "invalidate-row-selector" "invalidate-row-selector~" "initial-line")}
        {Lisp-Entry "draw-children" method (override) ("surface" "nodes" "context") #f #f 272 20 272 33 ("1" "cdr" "render-drawing" "render-drawing~" "with-self-transform" "with-self-transform~" "draw-control" "draw-control~" "draw-level" "draw-level~" "draw-data" "draw-data~" "lambda" "with-clipping-transform" "with-clipping-transform~" "View" "is-not?" "table-set!" ">" "<" "space-column?" "space-column?~" "+" "right" "self" "row/column->site" "row/column->site~" "get-merge-cell" "get-merge-cell~" "merge-cell" "get-width" "get-width~" "width" "Tree-Node-Column" "is?" "node?" "get-visible?" "get-visible?~" "if" "data" "car" "column" "not-null?" "when" "rank" "0" "h" "children" "get-columns" "get-columns~" "columns" "iter" "redrawn-merge-cells" "redrawn" "get-right" "get-right~" "right-clip" "get-left" "get-left~" "left-clip" "get-column-spacing" "get-column-spacing~" "cs" "get-height" "height" "get-clipper" "get-clipper~" "clipper" "get-tree" "tree" "let" "context" "nodes" "surface")}
        {Lisp-Entry "draw-selection" method (override) ("surface") #f #f 316 20 316 34 ("surface")}
        {Lisp-Entry "draw-selector" method (public virtual) ("surface" "context" "h" "v" "width" "height" "flat?") #f #f 320 26 320 39 ("draw-raised-button" "draw-sunken-button" "down?" "if" "flat?" "height" "width" "v" "h" "context" "surface")}
        {Lisp-Entry "draw-sunken-button" method () ("surface" "h" "v" "width" "height" "flat?") #f #f 326 11 326 29 ("Black" "set-text-color" "set-text-color~" "parent" "header-color" "header-color~" "background" "or" "fill-rect" "fill-rect~" "frame-rect" "frame-rect~" "Dark" "Color" "set-color" "set-color~" "-1" "inflate-rect" "inner" "+" "Rect" "new" "outer" "let*" "flat?" "height" "width" "v" "h" "surface")}
        {Lisp-Entry "draw-raised-button" method () ("surface" "h" "v" "width" "height" "flat?") #f #f 335 11 335 29 ("Black" "Color" "set-text-color" "set-text-color~" "parent" "header-color" "header-color~" "background" "or" "fill-rect" "fill-rect~" "left" "top" "edges:" "raised" "inner:" "draw-edge" "draw-edge~" "0" "smaller" "1" "expand-rect" "inner" "+" "Rect" "new" "outer" "let*" "-2" "-1" "if" "thick" "let" "flat?" "height" "width" "v" "h" "surface")}
        {Lisp-Entry "with-self-transform" method (override) ("surface" "thunk") #f #f 351 20 351 39 ("get-transformation" "get-v" "get-v~" "position" "get-h" "get-h~" "with-transform" "with-transform~" "thunk" "surface")}
        {Lisp-Entry "find-by-title" method (public) ("title") #f #f 361 18 361 31 ("sons" "first-child" "first-child~" "get-title" "get-title~" "string=?" "row" "lambda" "find-if" "title")}
        {Lisp-Entry "auto-in-place?" method (public virtual) () #f #f 372 26 372 40 ()}
        {Lisp-Entry "auto-expand" method (public virtual) () #f #f 376 26 376 37 ("self" "parent" "expand/collapse" "expand/collapse~" "expandable?" "when")}
        {Lisp-Entry "auto-select" method (public virtual) () #f #f 381 26 381 37 ()}
        {Lisp-Entry "auto-collapse" method (public virtual) () #f #f 385 26 385 39 ("self" "parent" "collapse" "collapse~" "collapsable?" "when")}}}})
"Tree-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "Tree-View.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.ui.tree.Tree-View" module (protected) () #f #f 38 18 38 40 ("jazz")
      {Lisp-Entry "import" import () () #f #f 41 1 41 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui.skin" "jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "Tree-View" class () ((extends . "Outline-View-Old") (implements . "Selection-Provider")) #f #f 54 7 54 16 ("site-hash" "hash:" "site=?" "test:" "make-table" "Selection-Manager" "self" "Tree-Locator" "new" "16" "1" "0" "row" "explicit" "Selection-Provider" "Outline-View-Old")
        {Lisp-Entry "delayed-autorow" definition () () #f #f 80 14 80 29 ()}
        {Lisp-Entry "portfolio" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 84 22 84 31 ()}
        {Lisp-Entry "show-header?" property (protected) ((initialize . "#t") (accessors . "generate")) #f #f 85 22 85 34 ()}
        {Lisp-Entry "get-show-header?" accessor () () #f #f 85 74 85 82 ()}
        {Lisp-Entry "set-show-header?" accessor () () #f #f 85 74 85 82 ()}
        {Lisp-Entry "selection-mode" property (protected) ((initialize . "'row") (accessors . "explicit")) #f #f 87 22 87 36 ()}
        {Lisp-Entry "multiple-selection?" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 88 22 88 41 ()}
        {Lisp-Entry "can-select-empty?" property (protected) ((initialize . "#t") (accessors . "explicit")) #f #f 89 22 89 39 ()}
        {Lisp-Entry "show-unfocused-selection?" property (protected) ((initialize . "#t") (accessors . "explicit")) #f #f 90 22 90 47 ()}
        {Lisp-Entry "focused-on-descendants?" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 91 22 91 45 ()}
        {Lisp-Entry "auto-expand/collapse?" property (protected) ((initialize . "#f") (accessors . "generate")) #f #f 92 22 92 43 ()}
        {Lisp-Entry "get-auto-expand/collapse?" accessor () () #f #f 92 74 92 82 ()}
        {Lisp-Entry "set-auto-expand/collapse?" accessor () () #f #f 92 74 92 82 ()}
        {Lisp-Entry "cell-background" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 93 22 93 37 ()}
        {Lisp-Entry "empty-background" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 94 22 94 38 ()}
        {Lisp-Entry "filled-column" property (protected) ((initialize . "#t") (accessors . "generate")) #f #f 95 22 95 35 ()}
        {Lisp-Entry "get-filled-column" accessor () () #f #f 95 74 95 82 ()}
        {Lisp-Entry "set-filled-column" accessor () () #f #f 95 74 95 82 ()}
        {Lisp-Entry "column-spacing" property (protected) ((initialize . "0") (accessors . "explicit")) #f #f 96 22 96 36 ()}
        {Lisp-Entry "column-frequency" property (protected) ((initialize . "1") (accessors . "explicit")) #f #f 97 22 97 38 ()}
        {Lisp-Entry "reorderable?" property (protected) ((initialize . "#f") (accessors . "generate")) #f #f 98 22 98 34 ()}
        {Lisp-Entry "get-reorderable?" accessor () () #f #f 98 74 98 82 ()}
        {Lisp-Entry "set-reorderable?" accessor () () #f #f 98 74 98 82 ()}
        {Lisp-Entry "content" property (protected) ((initialize . "#f") (accessors . "explicit")) #f #f 99 22 99 29 ()}
        {Lisp-Entry "columns" slot (protected) ((initialize . "'()") (getter . "generate")) #f #f 102 18 102 25 ()}
        {Lisp-Entry "get-columns" accessor () () #f #f 102 71 102 79 ()}
        {Lisp-Entry "node-column" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 103 18 103 29 ()}
        {Lisp-Entry "get-node-column" accessor () () #f #f 103 71 103 79 ()}
        {Lisp-Entry "sorted-columns" slot (protected) ((initialize . "'()") (getter . "generate")) #f #f 104 18 104 32 ()}
        {Lisp-Entry "get-sorted-columns" accessor () () #f #f 104 71 104 79 ()}
        {Lisp-Entry "selection-pivot" slot (protected) ((initialize . "#f")) #f #f 105 18 105 33 ()}
        {Lisp-Entry "highlighted" slot (protected) ((initialize . "'()")) #f #f 106 18 106 29 ()}
        {Lisp-Entry "indentation" slot (protected) ((initialize . "16") (getter . "generate")) #f #f 107 18 107 29 ()}
        {Lisp-Entry "get-indentation" accessor () () #f #f 107 71 107 79 ()}
        {Lisp-Entry "columns-right" slot (protected) ((initialize . "0") (getter . "generate")) #f "<fx>" 108 18 108 31 ("fx" "<fx>")}
        {Lisp-Entry "get-columns-right" accessor () () #f #f 108 71 108 79 ()}
        {Lisp-Entry "edited-cell" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 109 18 109 29 ()}
        {Lisp-Entry "get-edited-cell" accessor () () #f #f 109 71 109 79 ()}
        {Lisp-Entry "cell-editor" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 110 18 110 29 ()}
        {Lisp-Entry "get-cell-editor" accessor () () #f #f 110 71 110 79 ()}
        {Lisp-Entry "close-cell-editor?" slot (protected) ((initialize . "#t")) #f #f 111 18 111 36 ()}
        {Lisp-Entry "auto-expanded-row" slot (protected) ((initialize . "#f") (setter . "generate")) #f #f 112 18 112 35 ()}
        {Lisp-Entry "set-auto-expanded-row" accessor () () #f #f 112 71 112 79 ()}
        {Lisp-Entry "locator" slot (protected) ((initialize . "(new Tree-Locator self)")) #f #f 113 18 113 25 ()}
        {Lisp-Entry "selection-manager" slot (protected) ((initialize . "(new Selection-Manager self)")) #f #f 114 18 114 35 ()}
        {Lisp-Entry "merge-cell-table" slot (protected) ((initialize . "(make-table test: site=? hash: site-hash)") (getter . "generate")) #f #f 115 18 115 34 ()}
        {Lisp-Entry "get-merge-cell-table" accessor () () #f #f 115 108 115 116 ()}
        {Lisp-Entry "form" form () () #f #f 118 3 118 7 ("Tree-Background" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "prepare" method (override) ("rest") #f #f 127 20 127 27 ("selection" "set!" "nextmethod" "rest")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 132 20 132 26 ("invalidate-header" "fill-column" "invalidate-columns" "nextmethod" "rest")}
        {Lisp-Entry "destroy-component" method (override) () #f #f 139 20 139 37 ("nextmethod" "end-edition")}
        {Lisp-Entry "add-child" method (override) ("child") #f #f 149 20 149 29 ("invalidate-header" "fill-column" "invalidate-columns" "list" "append!" "columns" "set!" "Tree-Column" "is?" "when" "nextmethod" "child")}
        {Lisp-Entry "remove-child" method (override) ("child") #f #f 158 20 158 32 ("invalidate-header" "fill-column" "invalidate-columns" "node-column" "eq?" "remove!" "columns" "set!" "Tree-Column" "is?" "when" "destroying?" "unless" "nextmethod" "child")}
        {Lisp-Entry "get-portfolio" method (public) () #f #f 176 18 176 31 ("child" "set!" "Portfolio" "is?" "if" "portfolio" "when")}
        {Lisp-Entry "set-portfolio" method (public) ("object") #f #f 184 18 184 31 ("invalidate-view" "portfolio" "set!" "object")}
        {Lisp-Entry "get-multiple-selection?" method (public) () #f #f 189 18 189 41 ("multiple-selection?")}
        {Lisp-Entry "set-multiple-selection?" method (public) ("flag") #f #f 193 18 193 41 ("invalidate-view" "multiple-selection?" "set!" "flag")}
        {Lisp-Entry "get-can-select-empty?" method (public) () #f #f 198 18 198 39 ("can-select-empty?")}
        {Lisp-Entry "set-can-select-empty?" method (public) ("flag") #f #f 202 18 202 39 ("invalidate-view" "can-select-empty?" "set!" "flag")}
        {Lisp-Entry "get-show-unfocused-selection?" method (public) () #f #f 207 18 207 47 ("show-unfocused-selection?")}
        {Lisp-Entry "set-show-unfocused-selection?" method (public) ("flag") #f #f 211 18 211 47 ("invalidate-view" "show-unfocused-selection?" "set!" "flag")}
        {Lisp-Entry "get-focused-on-descendants?" method (public) () #f #f 216 18 216 45 ("focused-on-descendants?")}
        {Lisp-Entry "set-focused-on-descendants?" method (public) ("flag") #f #f 220 18 220 45 ("invalidate-view" "focused-on-descendants?" "set!" "flag")}
        {Lisp-Entry "get-selection-mode" method (public) () #f #f 225 18 225 36 ("selection-mode")}
        {Lisp-Entry "set-selection-mode" method (public) ("value") #f #f 229 18 229 36 ("invalidate-view" "selection-mode" "set!" "value")}
        {Lisp-Entry "get-cell-background" method (public) () #f #f 234 18 234 37 ("cell-background")}
        {Lisp-Entry "set-cell-background" method (public) ("color") #f #f 238 18 238 37 ("invalidate-view" "cell-background" "set!" "color")}
        {Lisp-Entry "get-empty-background" method (public) () #f #f 243 18 243 38 ("empty-background")}
        {Lisp-Entry "set-empty-background" method (public) ("color") #f #f 247 18 247 38 ("invalidate-view" "empty-background" "set!" "color")}
        {Lisp-Entry "get-column-spacing" method (public) () #f #f 252 18 252 36 ("column-spacing")}
        {Lisp-Entry "set-column-spacing" method (public) ("spacing") #f #f 256 18 256 36 ("invalidate-view" "column-spacing" "set!" "spacing")}
        {Lisp-Entry "get-column-frequency" method (public) () #f #f 261 18 261 38 ("column-frequency")}
        {Lisp-Entry "set-column-frequency" method (public) ("frequency") #f #f 265 18 265 38 ("invalidate-view" "column-frequency" "set!" "frequency")}
        {Lisp-Entry "focus-gained" method (override) () #f #f 275 20 275 32 ("selection" "invalidate-selection" "nextmethod")}
        {Lisp-Entry "focus-lost" method (override) () #f #f 280 20 280 30 ("selection" "invalidate-selection" "nextmethod")}
        {Lisp-Entry "selection-color" method (public) () #f #f 285 18 285 33 ("unfocused-color" "focused-color" "focused?" "if")}
        {Lisp-Entry "focused-color" method (protected virtual) () #f #f 291 29 291 42 ("Focused-Selection" "Color")}
        {Lisp-Entry "unfocused-color" method (protected virtual) () #f #f 295 29 295 44 ("Unfocused-Selection" "Color")}
        {Lisp-Entry "selected-text-color" method (public) () #f #f 299 18 299 37 ("Unfocused-Selected-Text" "Focused-Selected-Text" "Color" "focused?" "if")}
        {Lisp-Entry "focused?" method (public virtual) () #f #f 305 26 305 34 ("self" "has-parent?" "has-parent?~" "get-focus" "focus" "let" "focused-on-descendants?" "and" "is-focused?" "or")}
        {Lisp-Entry "focus-and-select" method (public) () #f #f 312 18 312 34 ("set-single-selection" "0" "get-visible-count" ">" "when" "acquire-focus")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 323 20 323 33 ("nextmethod" "tree" "find-actions" "cons")}
        {Lisp-Entry "on-expand" method () ("evt") #f #f 333 11 333 20 ("expand" "bell" "not" "if" "get-selected-row" "row" "let" "evt")}
        {Lisp-Entry "on-expand-all" method () ("evt") #f #f 340 11 340 24 ("expand-all" "bell" "not" "if" "get-selected-row" "row" "let" "evt")}
        {Lisp-Entry "on-collapse" method () ("evt") #f #f 347 11 347 22 ("collapse" "bell" "not" "if" "get-selected-row" "row" "let" "evt")}
        {Lisp-Entry "on-properties" method (protected virtual) ("evt") #f #f 354 29 354 42 ("evt")}
        {Lisp-Entry "get-header" method (public) () #f #f 363 18 363 28 ("Tree-Header" "is?" "get-parent" "get-parent~" "header" "let" "parent" "and")}
        {Lisp-Entry "invalidate-header" method (public) () #f #f 369 18 369 35 ("invalidate-view" "invalidate-view~" "when" "get-header" "header" "let")}
        {Lisp-Entry "header-menu" method (public virtual) ("column" "pos") #f #f 375 26 375 37 ("pos" "column")}
        {Lisp-Entry "find-subdrawing" method (override) ("surface" "<Surface>" "device-pos" "<Point>" "pos" "<Point>" "ignore") #f #f 384 20 384 35 ("nextmethod" "find-in-drawing" "find-in-drawing~" "lambda" "get-transformation" "get-transformation~" "get-height" "get-height~" "get-width" "get-width~" "get-v" "get-v~" "get-h" "get-h~" "with-clipping-transform" "with-clipping-transform~" "get-size" "get-size~" "size" "get-position" "get-position~" "position" "get-parent" "get-parent~" "row" "View" "is?" "get-first-site" "get-first-site~" "get-site-data" "data" "cell->site" "get-merge-cell" "merge-cell" "and" "view->tree" "cell" "let" "or" "ignore" "pos" "Point" "<Point>" "device-pos" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "layout-column" method (protected) ("column") #f #f 406 21 406 34 ("row-spacing" "increase!" "set!" "columns-right" "Dimension" "new" "set-size" "set-size~" "+" "rb" "get-effective-height" "get-effective-height~" "height" "let*" "while" "0" "rt" "root-row" "get-next" "get-next~" "row" "let" "column")}
        {Lisp-Entry "layout-scrollee" method (override) () #f #f 423 20 423 35 ("nextmethod" "fill-column" "filled-column" "when" "update-locked?" "unless")}
        {Lisp-Entry "scrollee-width" method (override) () #f #f 431 20 431 34 ("get-display-width" "max" "fit-to-scroller?" "scroller" "and" "column-spacing" "visible-width" "+" "columns-right" "show-header?" "if" "width" "let")}
        {Lisp-Entry "update-visible" method (override) () #f #f 444 20 444 34 ("set-width" "set-width~" "cons" "set-borders" "set-borders~" "columns-right" "visible-width" ">" "get-level" "get-level~" "text-h" "text-h~" "w" "calculate-node-width" "calculate-node-width~" "or" "+" "nw" "3" "highlight-border" "let*" "Tree-Node-Column" "node-column" "is?" "width" "show-header?" "not" "when" "update-visible-width" "visible-height" "visible-count" "row-spacing" "set!" "if" "get-effective-height" "get-effective-height~" "increase!" "line" "row" "lambda" "for-each-visible-row" "first?" "height" "0" "count" "let" "update-visible-height" "define")}
        {Lisp-Entry "scroll-invalidate" method (override) ("delta") #f #f 482 20 482 37 ("invalidate-header" "0" "get-x" "get-x~" "/=" "when" "nextmethod" "delta")}
        {Lisp-Entry "Highlighted-Outer-Color" definition () () #f #f 493 14 493 37 ("128" "blue:" "green:" "0" "red:" "Color" "new")}
        {Lisp-Entry "Highlighted-Inner-Color" definition () () #f #f 496 14 496 37 ("255" "blue:" "green:" "218" "red:" "Color" "new")}
        {Lisp-Entry "Highlighted-Insert-Color" definition () () #f #f 499 14 499 38 ("Dark-Red" "Color")}
        {Lisp-Entry "get-drawing-background" method (override) ("context") #f #f 503 20 503 42 ("nextmethod" "get-background" "get-background~" "or" "get-look" "look" "let" "context")}
        {Lisp-Entry "draw-outline" method (override) ("surface" "context" "clipper" "scrolled-v") #f #f 509 20 509 32 ("draw-highlighted" "cycle-debug-color!" "debug-paint?" "if" "fill-rect" "fill-rect~" "0" "Rect" "new" "rect" "columns-right" "<=" "empty-background" "view-enabled?" "and" "when" "get-height" "height" "get-position" "get-h" "get-h~" "get-right" "get-right~" "+" "right" "let" "nextmethod" "scrolled-v" "clipper" "context" "surface")}
        {Lisp-Entry "draw-empty" method (override) ("surface" "top" "bottom" "rt" "width") #f #f 519 20 519 30 ("cycle-debug-color!" "debug-paint?" "if" "fill-rect" "fill-rect~" "fxround" "0" "Rect" "new" "rect" "let" "<=" "empty-background" "view-enabled?" "and" "when" "width" "rt" "bottom" "top" "surface")}
        {Lisp-Entry "draw-highlighted" method () ("surface") #f #f 525 11 525 27 ("highlighted" "Highlighted-Insert-Color" "fill-rect" "fill-rect~" "highlighted-insert-rect" "rect" "draw-highlighted-cell" "not" "if" "get-insert" "get-insert~" "insert" "get-col" "get-col~" "col" "get-row" "get-row~" "row" "let" "highlight" "lambda" "for-each-reversed" "surface")}
        {Lisp-Entry "draw-highlighted-cell" method (protected virtual) ("surface" "row" "col" "highlight") #f #f 537 29 537 50 ("highlight-inner?" "when" "frame-rect" "frame-rect~" "highlighted-inner-color" "get-inner-color" "get-inner-color~" "inner-color" "highlighted-outer-color" "get-outer-color" "get-outer-color~" "or" "outer-color" "let" "1" "inflate-rect" "outer-rect" "highlighted-target-rect" "inner-rect" "let*" "highlight" "col" "row" "surface")}
        {Lisp-Entry "highlighted-outer-color" method (protected virtual) () #f #f 547 29 547 52 ("Highlighted-Outer-Color")}
        {Lisp-Entry "highlighted-inner-color" method (protected virtual) () #f #f 551 29 551 52 ("Highlighted-Inner-Color")}
        {Lisp-Entry "highlight-inner?" method (protected virtual) () #f #f 555 29 555 45 ()}
        {Lisp-Entry "header-color" method (public virtual) () #f #f 559 26 559 38 ("Medium" "Color")}
        {Lisp-Entry "draw-children" method (override) ("surface" "<Surface>" "nodes" "context") #f #f 563 20 563 33 ("value" "iterate-table" "nextmethod" "eq?" "test:" "make-table" "redrawn-merge-cells" "parameterize" "-" ",@context" "row->line" "line:" ",selected?" "selected?:" "new-context" "merge-cell-selected?" "selected?" "get-first-site" "get-first-site~" "get-site-data" "get-bottom" "get-bottom~" "bottom" "get-right" "get-right~" "right" "get-top" "get-top~" "top" "get-left" "get-left~" "left" "get-row" "get-row~" "top-row" "get-column" "get-column~" "left-column" "merge-corner-site" "bottom-right" "top-left" "receive" "merge-cell-rect" "rect" "merge-cell" "paint-merge-cell" "render-drawing" "render-drawing~" "draw-data" "draw-data~" "not" "if" "lambda" "get-transformation" "get-transformation~" "and" "with-clipping-transform" "with-clipping-transform~" "View" "is?" "view?" "let" "data" "height" "width" "v" "h" "row" "column" "paint-data" "define" "context" "nodes" "Surface" "<Surface>" "surface")}
        {Lisp-Entry "get-look" method (override) () #f #f 598 20 598 28 ("tree" "find-look")}
        {Lisp-Entry "get-highlighted" method (public) () #f #f 607 18 607 33 ("highlighted")}
        {Lisp-Entry "set-highlighted" method (public) ("value") #f #f 611 18 611 33 ("set!" "old" "equal?" "when" "Tree-Highlight" "is?" "object" "every?" "assert" "highlighted-insert-rect" "invalidate-rect" "invalidate-highlighted-cell" "not" "if" "get-insert" "get-insert~" "insert" "get-col" "get-col~" "col" "get-row" "get-row~" "row" "let" "highlight" "lambda" "for-each" "highlighted" "invalidate-highlighted" "define" "value")}
        {Lisp-Entry "invalidate-highlighted-cell" method (protected virtual) ("row" "col") #f #f 630 29 630 56 ("invalidate-region" "2" "Rect" "insets:" "frame-region" "region" "1" "inflate-rect" "outer" "highlighted-target-rect" "inner" "with" "col" "row")}
        {Lisp-Entry "highlighted-target-rect" method () ("row" "col") #f #f 637 11 637 34 ("cell-rect" "0" "row->line" "Cell" "new" "cell-text-rect" "not" "if" "col" "row")}
        {Lisp-Entry "highlighted-insert-rect" method () ("row" "insert") #f #f 643 11 643 34 ("get-bottom" "get-bottom~" "get-top" "get-top~" "case" "get-right" "get-right~" "get-left" "get-left~" "Rect" "bottom" "+" "top" "v" "lambda" "proc" "else" "-2" "cond" "offset" "2" "row-spacing" "fxround/" "half-spacing" "after" "1" "visible-count" "-" "after-last?" "before" "eq?" "=" "and" "before-first?" "0" "Cell" "new" "cell-content-rect" "line-rect" "rect" "row->line" "line" "get-height" "height" "let*" "insert" "row")}
        {Lisp-Entry "update-visible-width-incremental" method (override) ("level" "width") #f #f 669 20 669 52 ("set!" "visible-width" ">" "when" "node-column" "text-h" "text-h~" "+" "let" "width" "level")}
        {Lisp-Entry "remove-row" method (override) ("row") #f #f 676 20 676 30 ("nextmethod" "close-auto-expanded-row" "auto-expanded-row" "eq?" "attached?" "attached?~" "and" "when" "row")}
        {Lisp-Entry "remove-every-row" method (override) () #f #f 682 20 682 36 ("nextmethod" "unmerge-all-cells" "selection-pivot" "highlighted" "set!" "set-sorted-column" "close-auto-expanded-row")}
        {Lisp-Entry "unmerge-all-cells" method (public) () #f #f 691 18 691 35 ("merge-cell-table" "empty-table")}
        {Lisp-Entry "cursor-update" method (override) ("pos") #f #f 700 20 700 33 ("nextmethod" ":finger" "set-cursor" "alt-down?" "if" "pos")}
        {Lisp-Entry "allow-start-drag?" method (override) ("pos") #f #f 711 20 711 37 ("selection-manager" "allow-start-drag?" "allow-start-drag?~" "nextmethod" "and" "pos")}
        {Lisp-Entry "mouse-down" method (override) ("view") #f #f 716 20 716 30 ("column" "mouse" "user-origin:" "set-selection" "can-select-empty?" "when" "not" "if" "control?" "shift?" "let" "acquire-capture" "acquire-focus" "get-multiple-selection?" "alt-down?" "control-down?" "shift-down?" "selection-manager" "mouse-down" "mouse-down~" "get-col" "get-col~" "get-column" "find-part" "find-part~" "part" "cell-coordinates" "and" "pos" "view->tree" "cell" "let*" "view")}
        {Lisp-Entry "drag-move" method (override) ("view") #f #f 734 20 734 29 ("drag-move" "drag-move~" "get-col" "get-col~" "get-column" "column" "cell-coordinates" "pos" "when" "view->tree" "cell" "let" "view")}
        {Lisp-Entry "drag-up" method (override) ("view" "(dragging? #f)") #f #f 742 20 742 27 ("reset" "reset~" "release-capture" "self" "process-action" "drag-up" "drag-up~" "focus-delegate" "auto-select" "auto-select~" "auto-expand/collapse" "auto-expand/collapse?" "get-col" "get-col~" "get-column" "column" "get-line" "get-line~" "get-row" "row" "view->tree" "cell" "mouse-down-part-control?" "mouse-down-part-control?~" "not" "and" "when" "get-mouse-down-view" "get-mouse-down-view~" "pos" "selection-manager" "mouse-up" "mouse-up~" "alt-down?" "alt?" "control-down?" "control?" "shift-down?" "shift?" "let" "dragging?" "view")}
        {Lisp-Entry "call-double-click" method (override) ("view") #f #f 763 20 763 37 ("double-click" "double-click~" "else" "nextmethod" "content" "mouse-down" "control" "case" "find-part" "find-part~" "part" "get-col" "get-col~" "get-column" "column" "cell-coordinates" "pos" "let*" "when" "view->tree" "cell" "let" "view")}
        {Lisp-Entry "double-click" method (override) ("view") #f #f 775 20 775 32 ("find-part" "find-part~" "part" "get-col" "get-col~" "get-column" "column" "cell-coordinates" "pos" "let*" "when" "view->tree" "cell" "let" "alt-down?" "control-down?" "shift-down?" "selection-manager" "double-click" "double-click~" "view")}
        {Lisp-Entry "context-menu" method (override) ("view") #f #f 785 20 785 32 ("self" "acquire" "acquire~" "context-menu" "context-menu~" "get-line" "get-line~" "get-row" "row" "when" "view->tree" "cell" "let" "view")}
        {Lisp-Entry "cell-coordinates" method () ("cell" "<Cell>" "pos" "<Point>") #f "<Point>" 792 11 792 27 ("cell-position" "-" "Point" "<Point>" "pos" "Cell" "<Cell>" "cell")}
        {Lisp-Entry "mouse-data" method (override) ("pos") #f #f 801 20 801 30 ("get-cell-title" "when" "view->tree" "cell" "let" "pos")}
        {Lisp-Entry "key-press" method (override) ("key") #f #f 812 20 812 29 ("locator" "enter" "enter~" "0" "visible-count" ">" "alphanumeric?" "use-locator?" "and" "when" "key")}
        {Lisp-Entry "use-locator?" method (protected virtual) () #f #f 822 29 822 41 ()}
        {Lisp-Entry "locate-prefix" method (public) ("prefix") #f #f 826 18 826 31 ("locator" "locate" "locate~" "prefix")}
        {Lisp-Entry "header-click" method (public virtual) ("column") #f #f 835 26 835 38 ("ensure-displayed" "sort-column" "column")}
        {Lisp-Entry "set-sorted-column" method (public virtual) ("column" "direction") #f #f 840 26 840 43 ("invalidate-header" "cons" "list" "sorted-columns" "set!" "not" "if" "direction" "column")}
        {Lisp-Entry "column-sorting" method (public virtual) ("column") #f #f 847 26 847 40 ("cdr" "if" "sorted-columns" "assq" "pair" "let" "column")}
        {Lisp-Entry "sort-rows" method (protected virtual) ("column" "direction") #f #f 854 29 854 38 ("ensure-displayed?:" "root-row" "with-update-locked" "with-preserved-selection" "iterate" "reorder-sons" "reorder-sons~" "get-sons" "get-sons~" "sorted" "iter" "descending" "ascending" "column-sorting" "case" "sort-predicates" "greater" "smaller" "receive" "and" "ny" "localize" "nx" "cy" "get-children" "get-children~" "cx" "let*" "ry" "rx" "lambda" "sort" "get-column" "sort-value" "sort-value~" "or" "element" "data" "n" "children" "row" "get-node" "0" "/=" "dual?" "column->col" "col" "let" "predicate" "equal" "rows" "call-sort" "define" "direction" "column")}
        {Lisp-Entry "sort-column" method (protected) ("column") #f #f 890 21 890 32 ("sort-column/direction" "descending" "eq?" "direction" "reverse-direction" "ascending" "not" "if" "column-sorting" "actual" "let" "determine-direction" "define" "column")}
        {Lisp-Entry "sort-column/direction" method (public virtual) ("column" "direction") #f #f 905 26 905 47 ("sort-rows" "set-sorted-column" "direction" "column")}
        {Lisp-Entry "selector-click" method (public) ("row") #f #f 915 18 915 32 ("list" "else" "set-selection" "row->line" "Cell" "new" "collect" "get-columns-count" "below" "from" "n" "for" "loop" "select-list" "0" "get-col" "get-col~" "selection-pivot" "if" "col" "let" "cell" "selection-mode" "case" "acquire-focus" "row")}
        {Lisp-Entry "selector-multi-select" method (public) ("row" "initial-line") #f #f 928 18 928 39 ("collect" "else" "queue-list" "set-selection" "Cell" "new" "enqueue" "get-columns-count" "below" "0" "col" "to" "from" "line" "for" "loop" "new-queue" "select-list" "cell" "selection-mode" "case" "max" "to-line" "min" "from-line" "row->line" "new-line" "let" "initial-line" "row")}
        {Lisp-Entry "get-content" method (override) () #f #f 951 20 951 31 ("content")}
        {Lisp-Entry "set-content" method (override) ("value") #f #f 955 20 955 31 ("invalidate-cell" "set-title" "set-title~" "get-cell-data" "data" "Cell" "new" "cell" "let*" "do" "j" "info" "0" "from" "i" "in" "row" "for" "loop" "value")}
        {Lisp-Entry "with-context-click" method (override) ("pos" "proc") #f #f 971 20 971 38 ("update-view" "auto-select" "auto-select~" "auto-expand/collapse?" "memq?" "else" "list" "cell=?" "test:" "get-selection" "member?" "unless" "selection-mode" "case" "get-line" "get-line~" "get-row" "row" "set-selection" "can-select-empty?" "when" "not" "if" "view->tree" "cell" "let" "acquire-focus" "proc" "pos")}
        {Lisp-Entry "flattened?" method (public) () #f #f 996 18 996 28 ("get-visible?" "get-visible?~" "and" "get-path-column" "path-column" "let")}
        {Lisp-Entry "flatten/unflatten" method (public) () #f #f 1001 18 1001 35 ("flatten" "unflatten" "with-update-locked" "lambda" "with-preserved-selection" "fill-column" "set-visible?" "set-visible?~" "error" "not" "if" "flattened?" "get-path-column" "path-column" "let*")}
        {Lisp-Entry "get-path-column" method (public) () #f #f 1017 18 1017 33 ("columns" "Tree-Path-Column" "is?" "column" "lambda" "find-if")}
        {Lisp-Entry "flatten-row?" method (public virtual) ("row") #f #f 1023 26 1023 38 ("row")}
        {Lisp-Entry "flatten" method (public) () #f #f 1027 18 1027 25 ("set-visible?" "set-visible?~" "disconnected?" "disconnected?~" "unless" "flatten" "flatten~" "disconnect" "disconnect~" "flatten-row?" "if" "son" "lambda" "iterate" "root-row" "get-sons" "get-sons~" "sons" "let")}
        {Lisp-Entry "unflatten" method (public) () #f #f 1040 18 1040 27 ("set-visible?" "set-visible?~" "get-visible?" "get-visible?~" "unless" "reconnect" "reconnect~" "disconnected?" "disconnected?~" "when" "son" "lambda" "root-row" "get-sons" "get-sons~" "iterate")}
        {Lisp-Entry "filter-rows" method (public) ("filter-search") #f #f 1056 18 1056 29 ("rank" "for-each-row" "with-update-locked" "set-selection" "get-father" "get-father~" "node" "loop" "when" "set-visible?" "set-visible?~" "visible?" "make-row-visible" "get-children" "get-children~" "search" "and" "get-title" "get-title~" "title" "let" "cell" "lambda" "some?" "row" "determine-visible?" "define" "filter-search")}
        {Lisp-Entry "get-tooltip?" method (override) () #f #f 1086 20 1086 32 ()}
        {Lisp-Entry "calculate-tooltip-bounds" method () ("cell") #f #f 1090 11 1090 35 ("cell-rect" "cell")}
        {Lisp-Entry "get-tooltip-bounds" method (override) ("pos") #f #f 1094 20 1094 38 ("calculate-tooltip-bounds" "when" "view->tree" "cell" "let" "pos")}
        {Lisp-Entry "get-tooltip-context" method (override) ("pos") #f #f 1100 20 1100 39 ("font:" "Dimension" "padding:" "get-tooltip-position" "position:" "bounds:" "split-lines" "text:" "self" "view:" "Tooltip-Context" "new" "-2" "=" "get-level" "get-level~" "content-h" "content-h~" "h" "calculate-tooltip-bounds" "rect" "rect-width" ">" "cell-tooltips?" "or" "2" "effective-font" "text-width~" "+" "0" "text-width" "get-formatted-tooltip?" "formatted?" "content-rect~" "content-rect" "get-height" "get-height~" "height" "get-width" "get-width~" "width" "let*" "get-cell-tooltip" "localize" "text" "get-col" "get-col~" "get-column" "column" "get-line" "get-line~" "get-row" "row" "when" "view->tree" "cell" "let" "nextmethod" "get-tooltip-text" "if" "pos")}
        {Lisp-Entry "cell-tooltips?" method (protected virtual) ("cell") #f #f 1126 29 1126 43 ("cell")}
        {Lisp-Entry "get-cell-tooltip" method (protected virtual) ("cell") #f #f 1130 29 1130 45 ("get-data-tooltip" "get-data-tooltip~" "get-cell-data" "data" "get-col" "get-col~" "get-column" "column" "let" "cell")}
        {Lisp-Entry "get-tooltip-position" method (protected virtual) ("text" "rect" "h" "v") #f #f 1136 29 1136 49 ("5" "rect-height" "10" "-" "Point" "new" "rect-position" "+" "v" "h" "rect" "text")}
        {Lisp-Entry "get-column-tooltip" method (protected virtual) ("column") #f #f 1140 29 1140 47 ("column")}
        {Lisp-Entry "get-drag-drop" method (override) () #f #f 1149 20 1149 33 ("nextmethod" "mouse-down-point" "view->tree" "when")}
        {Lisp-Entry "get-drag-source" method (override) () #f #f 1159 20 1159 35 ("get-drag-cell-source" "get-col" "get-col~" "col" "get-line" "get-line~" "get-row" "row" "view->tree" "cell" "get-drag-position" "pos" "let*")}
        {Lisp-Entry "get-drag-cell-source" method (protected virtual) ("pos" "row" "col") #f #f 1167 29 1167 49 ("col:" "row:" "get-drag-image" "image:" "position:" "self" "view:" "Tree-Drag-Source" "new" "col" "row" "pos")}
        {Lisp-Entry "get-drag-image" method (override) ("pos") #f #f 1171 20 1171 34 ("get-node-image" "get-line" "get-line~" "line" "view->tree" "cell" "let*" "pos")}
        {Lisp-Entry "get-node-image" method (public) ("line") #f #f 1177 18 1177 32 ("resource:" "portfolio:" "Image" "add-masked-bitmap" "add-masked-bitmap~" "no" "Portfolio" "get-bitmap" "get-bitmap~" "set!" "2" "19" "draw-text" "draw-text~" "Black" "set-text-color" "set-text-color~" "set-font" "set-font~" "draw-mask" "draw-mask~" "portfolio" "draw-image" "draw-image~" "Tree-Background" "Color" "Rect" "fill-rect" "fill-rect~" "maskdc" "keep-bitmap?:" "Dimension" "Memory-Surface" "memdc" "with" "mask" "unspecified" "bitmap" "get-height" "get-height~" "height" "node-column" "get-width" "get-width~" "width" "get-title" "get-title~" "title" "get-image" "get-image~" "image" "0" "Cell" "get-cell-data" "data" "get-row" "row" "effective-font" "font" "player" "Client-Surface" "new" "cdc" "let*" "line")}
        {Lisp-Entry "current-drop" method (override) ("drag-drop" "pos") #f #f 1213 20 1213 32 ("get-tree-target" "get-source" "get-source~" "reorderable?" "nextmethod" "get-surrogate" "else" "3" "-" "1" "<" "cond" "2" "middle" "4" "fl" "<fl>" "cast" "/" "let" "get-row-reorder-target" "get-quarter" "get-quarter~" "eqv?" "get-row~" "get-view" "get-view~" "self" "eq?" "and" "if" "get-row" "row" "get-target" "get-target~" "current" "get-row-quarter" "quarter" "get-line" "get-line~" "line" "let*" "when" "height" "v" "cell" "lambda" "call-with-view->tree" "get-reorder-target" "define" "pos" "drag-drop")}
        {Lisp-Entry "get-row-reorder-target" method (protected virtual) ("drag-drop" "row" "quarter") #f #f 1241 29 1241 51 ("part:" "row:" "self" "view:" "Tree-Drop-Target" "new" "after" "before" "=" "part" "let" "when" "cdr" "/=" "and" "not" "or" "accept?" "+" "2" "1" "if" "current-rank" "dst-line" "get-user-data" "get-user-data~" "dst" "contiguous-range" "src-range" "get-source" "get-source~" "get-view" "get-view~" "get-selection" "get-selection~" "src-selection" "selection" "row->line" "memq?" "same-row?" "let*" "quarter" "row" "drag-drop")}
        {Lisp-Entry "get-tree-target" method (protected virtual) ("drag-drop" "pos") #f #f 1254 29 1254 44 ("get-row-target" "get-row~" "get-view" "get-view~" "self" "eq?" "and" "if" "get-target" "get-target~" "current" "get-line" "get-line~" "get-row" "row" "let" "when" "height" "v" "cell" "lambda" "call-with-view->tree" "pos" "drag-drop")}
        {Lisp-Entry "get-tree-data-target" method (public) ("drag-drop" "pos") #f #f 1265 18 1265 38 ("get-cell-target" "=" "eq?" "and" "if" "/=" "get-row~" "self" "get-view" "get-view~" "neq?" "or" "get-target" "get-target~" "current" "get-source" "get-source~" "source" "get-col" "get-col~" "col" "get-line" "get-line~" "get-row" "row" "let" "when" "height" "v" "cell" "lambda" "call-with-view->tree" "pos" "drag-drop")}
        {Lisp-Entry "get-row-target" method (protected virtual) ("drag-drop" "row") #f #f 1279 29 1279 43 ("row" "drag-drop")}
        {Lisp-Entry "get-cell-target" method (protected virtual) ("drag-drop" "row" "col") #f #f 1283 29 1283 44 ("col" "row" "drag-drop")}
        {Lisp-Entry "highlight-drop" method (override) ("drag-drop" "pos") #f #f 1287 20 1287 34 ("get-highlighted" "cons" "set-highlighted" "Highlighted-Inner-Color" "inner-color:" "Highlighted-Outer-Color" "outer-color:" "insert:" "Tree-Highlight" "new" "highlight" "after" "before" "case" "insert" "get-part" "get-part~" "part" "get-col" "get-col~" "col" "get-row" "get-row~" "row" "let*" "Tree-Drop-Target" "is?" "when" "get-target" "get-target~" "target" "let" "pos" "drag-drop")}
        {Lisp-Entry "unhighlight-drop" method (override) ("drag-drop") #f #f 1303 20 1303 36 ("cdr" "highlighted" "null?" "if" "set-highlighted" "drag-drop")}
        {Lisp-Entry "tab-stop-enter" method (override) () #f #f 1314 20 1314 34 ()}
        {Lisp-Entry "on-move" method () ("evt") #f #f 1323 11 1323 18 ("right-arrow-action" "right" "left-arrow-action" "left" "down-arrow-action" "down" "up-arrow-action" "up" "case" "get-modifiers" "get-modifiers~" "modifiers" "direction:" "get-property" "get-property~" "direction" "let" "self" "invoke-handler" "arrow-press-handler" "if" "evt")}
        {Lisp-Entry "on-home" method (package) ("evt") #f #f 1335 19 1335 26 ("home-action" "evt")}
        {Lisp-Entry "home-action" method (public) () #f #f 1339 18 1339 29 ("else" "Cell" "new" "list" "set-selection" "get-col" "get-col~" "selection-pivot" "if" "col" "cell" "selection-mode" "case" "0" ">" "when" "get-visible-count" "count" "let")}
        {Lisp-Entry "on-end" method (package) ("evt") #f #f 1350 19 1350 25 ("end-action" "evt")}
        {Lisp-Entry "end-action" method (public) () #f #f 1354 18 1354 28 ("else" "1" "-" "Cell" "new" "list" "set-selection" "get-col" "get-col~" "selection-pivot" "if" "col" "cell" "selection-mode" "case" "0" ">" "when" "get-visible-count" "count" "let")}
        {Lisp-Entry "left-arrow-press" method (override) ("modifiers") #f #f 1365 20 1365 36 ("left-arrow-action" "modifiers")}
        {Lisp-Entry "left-arrow-action" method (public) ("modifiers" "user-origin") #f #f 1369 18 1369 35 ("get-father" "get-father~" "row->line" "list" "set-selection" "get-level" "get-level~" "expand/collapse" "expanded?" "expanded?~" "bell" "not" "get-selected-row" "row" "left" "1" "-" "get-line" "get-line~" "Cell" "new" "move-cell" "0" ">" "col" "selection-pivot" "selection" "not-null?" "selection-mode" "case" "get-col" "get-col~" "get-first-col" "get-first-col~" "if" "get-merge-cell" "merge-cell" "when" "cell->site" "site" "let" "cell" "logical-col" "define" "user-origin" "modifiers")}
        {Lisp-Entry "up-arrow-press" method (override) ("modifiers") #f #f 1395 20 1395 34 ("up-arrow-action" "modifiers")}
        {Lisp-Entry "up-arrow-action" method (public) ("modifiers" "user-origin") #f #f 1399 18 1399 33 ("car" "backward" "move-selection" "null?" "get-visible-count" "count" "else" "up" "get-col" "get-col~" "1" "-" "Cell" "new" "move-cell" "0" ">" "line" "selection-pivot" "selection" "not-null?" "selection-mode" "case" "get-line" "get-line~" "get-first-line" "get-first-line~" "if" "get-merge-cell" "merge-cell" "when" "cell->site" "site" "let" "cell" "logical-row" "define" "user-origin" "modifiers")}
        {Lisp-Entry "right-arrow-press" method (override) ("modifiers") #f #f 1425 20 1425 37 ("right-arrow-action" "modifiers")}
        {Lisp-Entry "right-arrow-action" method (public) ("modifiers" "user-origin") #f #f 1429 18 1429 36 ("expand/collapse" "expanded?" "expanded?~" "unless" "bell" "not" "get-selected-row" "row" "else" "right" "+" "get-line" "get-line~" "Cell" "new" "move-cell" "1" "get-columns-count" "-" "<" "col" "selection-pivot" "selection" "not-null?" "selection-mode" "case" "get-col" "get-col~" "get-last-col" "get-last-col~" "if" "get-merge-cell" "merge-cell" "when" "cell->site" "site" "let" "cell" "logical-col" "define" "user-origin" "modifiers")}
        {Lisp-Entry "down-arrow-press" method (override) ("modifiers") #f #f 1453 20 1453 36 ("down-arrow-action" "modifiers")}
        {Lisp-Entry "down-arrow-action" method (public) ("modifiers" "user-origin") #f #f 1457 18 1457 35 ("car" "forward" "move-selection" "0" ">" "null?" "else" "down" "get-col" "get-col~" "+" "Cell" "new" "move-cell" "<" "line" "selection-pivot" "selection" "not-null?" "selection-mode" "case" "1" "-" "last" "get-visible-count" "count" "let*" "get-line" "get-line~" "get-last-line" "get-last-line~" "if" "get-merge-cell" "merge-cell" "when" "cell->site" "site" "let" "cell" "logical-row" "define" "user-origin" "modifiers")}
        {Lisp-Entry "move-selection" method () ("line" "direction" "user-origin") #f #f 1484 11 1484 25 ("update-view" "auto-select" "auto-select~" "auto-expand/collapse?" "when" "user-origin:" "list" "set-selection" "get-row" "row" "let" "user-origin" "direction" "line")}
        {Lisp-Entry "move-cell" method () ("cell" "direction" "user-origin") #f #f 1493 11 1493 20 ("update-view" "when" "get-bottom" "get-bottom~" "down" "forward" "get-right" "get-right~" "right" "get-top" "get-top~" "vertical-scroll-needed" "up" "0" "backward" "get-left" "get-left~" "horizontal-scroll-needed" "Point" "new" "scroll" "left" "case" "cell-rect" "rect" "let" "user-origin:" "ensure-displayed?:" "list" "set-selection" "user-origin" "direction" "cell")}
        {Lisp-Entry "line-displayed?" method () ("line") #f #f 1505 11 1505 26 ("get-v" "get-v~" "=" "0" "Point" "new" "scroll-needed" "needed" "get-bottom" "get-bottom~" "bottom" "get-top" "get-top~" "top" "get-row" "row" "let*" "line")}
        {Lisp-Entry "cell-displayed?" method () ("cell") #f #f 1513 11 1513 26 ("get-v" "get-v~" "0" "get-h" "get-h~" "=" "and" "get-bottom" "get-bottom~" "get-right" "get-right~" "get-top" "get-top~" "get-left" "get-left~" "Point" "new" "scroll-needed" "needed" "cell-rect" "rect" "let*" "cell")}
        {Lisp-Entry "select-all" method (override) ("(user-origin: user-origin #f)") #f #f 1520 20 1520 30 ("visible-count" "0" "naturals" "set-selection" "multiple-selection?" "when" "user-origin" "user-origin:")}
        {Lisp-Entry "for-each-column" method (public) ("proc") #f #f 1530 18 1530 33 ("get-columns-count" "iota" "get-columns" "for-each" "proc")}
        {Lisp-Entry "fill-column" method (public) () #f #f 1534 18 1534 29 ("invalidate-header" "Rect" "new" "invalidate-rect" "get-height" "get-height~" "bottom" "top" "0" "2" "min" "min-column-width" "set-width" "set-width~" "increase!" "set-cdr!" "1" "tail" "cons" "set-borders" "set-borders~" "right" "left" "bind" "for-each" "+" "new-right" "cdr" "old-right" "get-width" "get-width~" "borders-width" "max" "delta" "get-display-size" "size" "borders-right" "columns-right" "-" "space-after" "get-borders" "get-borders~" "filled-borders" "let*" "length" "<" "column->col" "col" "let" "get-finished?" "filled-column" "when" "get-name" "get-name~" "column" "lambda" "find-if" "else" "last" "not-null?" "and" "eq?" "columns" "element" "integer?" "cond" "name" "find-filled-column" "define")}
        {Lisp-Entry "add-column" method (public) ("." "rest") #f #f 1569 18 1569 28 ("self" "parent:" "new" "apply" "others" "Tree-Column" "class" "bind-keywords" "rest")}
        {Lisp-Entry "remove-column" method (public) ("column") #f #f 1574 18 1574 31 ("remove-child" "column")}
        {Lisp-Entry "remove-columns" method (public) ("(preserve-node-column?: preserve-node-column? #f)" "(preserve: preserve '())") #f #f 1578 18 1578 32 ("if" "node-column" "0" "columns-right" "columns" "set!" "set-children" "remove-all-columns" "invalidate-header" "get-columns" "remove-column" "get-name" "get-name~" "memq?" "Tree-Node-Column" "is?" "and" "or" "unless" "column" "lambda" "for-each" "remove-every-row" "remove-columns-preserving" "define" "preserve" "preserve:" "preserve-node-column?" "preserve-node-column?:")}
        {Lisp-Entry "invalidate-columns" method (override) () #f #f 1601 20 1601 38 ("not-null?" "columns-right" "length" "naturals" "column-spacing" "space-column?" "if" "get-visible?" "get-visible?~" "when" "cons" "set-borders" "set-borders~" "+" "right" "get-width" "get-width~" "width" "let*" "set-rank" "set-rank~" "rank" "for-each" "last-right" "0" "left" "let" "update-columns" "columns" "Tree-Node-Column" "is?" "column" "lambda" "find-if" "node-column" "set!" "update-node-column" "define")}
        {Lisp-Entry "space-column?" method (protected virtual) ("column" "rank") #f #f 1627 29 1627 42 ("0" "column-frequency" "1" "+" "modulo" "=" "rank" "column")}
        {Lisp-Entry "get-columns-count" method (public) () #f #f 1631 18 1631 35 ("columns" "length")}
        {Lisp-Entry "get-column" method (public) ("col") #f #f 1635 18 1635 28 ("columns" "element" "col")}
        {Lisp-Entry "find-column" method (public) ("name") #f #f 1639 18 1639 29 ("find-component" "name")}
        {Lisp-Entry "get-node-column-index" method (public) () #f #f 1643 18 1643 39 ("node-column" "column->col")}
        {Lisp-Entry "column->col" method (public) ("column") #f #f 1647 18 1647 29 ("get-rank" "get-rank~" "column")}
        {Lisp-Entry "row-class" method (override) () #f #f 1656 20 1656 29 ("Tree-Row")}
        {Lisp-Entry "update-father-control" method (override) ("father") #f #f 1660 20 1660 41 ("image-rect" "image-rect~" "node-column" "control-rect" "control-rect~" "invalidate-rect" "get-height" "<" "row-top" "top" "row->line" "line" "let*" "row-visible?" "row-visible?~" "root-row" "neq?" "update-locked?" "not" "and" "when" "father")}
        {Lisp-Entry "add-empty-row" method (override) ("(father: father #f)") #f #f 1669 20 1669 33 ("columns" "new-empty-cell" "new-empty-cell~" "column" "lambda" "map" "children:" "add-row" "root-row" "or" "let" "father" "father:")}
        {Lisp-Entry "line-selected?" method (override) ("line") #f #f 1676 20 1676 34 ("memq?" "else" "selection" "get-line" "get-line~" "=" "lambda" "some?" "cell" "selection-mode" "case" "line")}
        {Lisp-Entry "line-draw-selected?" method (override) ("line") #f #f 1682 20 1682 39 ("show-unfocused-selection?" "has-focus?" "or" "nextmethod" "and" "line")}
        {Lisp-Entry "merge-cells" method (public) ("cell" "nbline" "nbcol") #f #f 1692 18 1692 29 ("error" "invalidate-rect" "get-parent" "get-parent~" "acquire" "acquire~" "set-rect" "set-rect~" "View" "is?" "merge-cell-rect" "rect" "Site" "set-merge-cell!" "column" "in" "row" "self" "Merge-Cell" "new" "merge-cell" "get-column" "c" "merge-columns" "queue-list" "get-row" "enqueue" "below" "from" "r" "for" "loop" "new-queue" "queue" "merge-rows" "get-columns-count" "get-row-count" "-1" "+" "<" "get-col" "get-col~" "cell-col" "get-line" "get-line~" "cell-line" "1" "or" "unmerge-cells" "get-merge-cell" "when" "cell->site" "site" "get-cell-title" "title" "get-cell-data" "cell-data" "let" "0" ">" "and" "if" "nbcol" "nbline" "cell")}
        {Lisp-Entry "unmerge-cells" method (public) ("cell") #f #f 1729 18 1729 31 ("invalidate-rect" "clear-merge-cell" "row/column->site" "site" "column" "row" "lambda" "for-each-cell" "for-each-cell~" "merge-cell-rect" "rect" "when" "cell->site" "get-merge-cell" "merge-cell-to-remove" "let" "cell")}
        {Lisp-Entry "add-merged-row" method (public) ("row" "merge-cell") #f #f 1741 18 1741 32 ("error" "not" "when" "clear-merge-cell" "add-merged-row" "add-merged-row~" "get-merged-columns" "get-merged-columns~" "cons" "set!" "set-merge-cell!" "Site" "new" "site" "equal?" "if" "column->col" "get-child" "get-child~" "get-data-title" "new-title" "column" "lambda" "for-each" "site-list" "is-valid?" "get-master-cell" "get-master-cell~" "get-cell-title" "merged-title" "let" "merge-cell" "row")}
        {Lisp-Entry "get-merge-cell" method (public) ("site") #f #f 1761 18 1761 32 ("merge-cell-table" "table-ref" "site")}
        {Lisp-Entry "safe-get-merge-cell" method (public) ("site") #f #f 1765 18 1765 37 ("else" "get-merge-cell" "cell" "selection-mode" "case" "site")}
        {Lisp-Entry "set-merge-cell!" method (public) ("site" "merge-cell") #f #f 1771 18 1771 33 ("merge-cell-table" "table-set!" "merge-cell" "site")}
        {Lisp-Entry "clear-merge-cell" method (public) ("site") #f #f 1775 18 1775 34 ("merge-cell-table" "table-clear" "site")}
        {Lisp-Entry "merge-cell-selected?" method () ("merge-cell") #f #f 1779 11 1779 31 ("else" "get-selection" "get-merge-cell" "eq?" "when" "cell->site" "site" "let" "lambda" "some?" "cell" "selection-mode" "case" "show-unfocused-selection?" "has-focus?" "or" "and" "merge-cell")}
        {Lisp-Entry "merge-corner-site" method () ("merge-cell") #f #f 1792 11 1792 28 ("get-last-site" "get-last-site~" "get-first-site" "get-first-site~" "values" "merge-cell")}
        {Lisp-Entry "merge-corner-cell" method () ("merge-cell") #f #f 1796 11 1796 28 ("get-last-cell" "get-last-cell~" "get-first-cell" "get-first-cell~" "values" "merge-cell")}
        {Lisp-Entry "merge-cell-rect" method (public) ("merge-cell") #f #f 1800 18 1800 33 ("get-bottom" "get-bottom~" "get-right" "get-right~" "get-top" "get-top~" "get-left" "get-left~" "Rect" "new" "bottom-right-rect" "unmerged-site-rect" "top-left-rect" "let" "and" "if" "merge-corner-site" "bottom-right" "top-left" "receive" "merge-cell")}
        {Lisp-Entry "invalidate-merge-cell" method (public) ("merge-cell") #f #f 1809 18 1809 39 ("player" "invalidate-region" "invalidate-region~" "get-clipper" "get-clipper~" "merge-cell-rect" "rect-intersection" "logical->device" "logical->device~" "rect:" "Region" "new" "region" "with" "surface" "lambda" "with-transformation-surface" "view-visible?" "when" "merge-cell")}
        {Lisp-Entry "get-master-cell" method (public) ("cell") #f #f 1817 18 1817 33 ("get-master-cell" "get-master-cell~" "if" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "cell")}
        {Lisp-Entry "get-top-cell" method (public) ("cell") #f #f 1824 18 1824 30 ("get-first-cell" "get-first-cell~" "if" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "cell")}
        {Lisp-Entry "row-index" method (public) ("target") #f #f 1836 18 1836 27 ("continuation-return" "eq?" "when" "line" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "target")}
        {Lisp-Entry "user-data-row" method (public) ("data" "(test: test eqv?)" "(include-invisibles?: include-invisibles? #f)") #f #f 1846 18 1846 31 ("item" "return:" "get-user-data" "get-user-data~" "key:" "find" "collect-visible-rows" "collect-rows" "if" "rows" "let" "include-invisibles?" "include-invisibles?:" "eqv?" "test" "test:" "data")}
        {Lisp-Entry "user-data-rows" method (public) ("data-list" "(test: test eqv?)" "(include-invisibles?: include-invisibles? #f)") #f #f 1851 18 1851 32 ("get-output" "get-output~" "put" "put~" "member?" "when" "get-user-data" "get-user-data~" "user-data" "line" "row" "lambda" "for-each-visible-row" "for-each-row" "if" "List-Factory" "new" "fact" "let" "include-invisibles?" "include-invisibles?:" "eqv?" "test" "test:" "data-list")}
        {Lisp-Entry "user-data-index" method (public) ("data" "(test: test eqv?)") #f #f 1862 18 1862 33 ("continuation-return" "get-user-data" "get-user-data~" "when" "line" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "eqv?" "test" "test:" "data")}
        {Lisp-Entry "user-data-indexes" method (public) ("data-list" "(test: test eqv?)") #f #f 1873 18 1873 35 ("get-output" "get-output~" "put" "put~" "member?" "when" "get-user-data" "get-user-data~" "user-data" "line" "row" "lambda" "for-each-visible-row" "List-Factory" "new" "fact" "let" "eqv?" "test" "test:" "data-list")}
        {Lisp-Entry "select-user-data-row" method (public) ("data" "(include-invisibles?: include-invisibles? #f)" "(error?: error? #t)") #f #f 1883 18 1883 38 ("row->line" "set-single-selection" "error" "when" "not" "if" "user-data-row" "row" "let" "error?" "error?:" "include-invisibles?" "include-invisibles?:" "data")}
        {Lisp-Entry "cell-values" method (public) ("cell") #f #f 1896 18 1896 29 ("get-col" "get-col~" "get-column" "get-line" "get-line~" "get-row" "values" "cell")}
        {Lisp-Entry "get-site-data" method (public) ("site") #f #f 1901 18 1901 31 ("get-child" "get-child~" "get-column" "get-column~" "column->col" "col" "get-row" "get-row~" "row" "let" "site")}
        {Lisp-Entry "get-cell-data" method (public) ("cell") #f #f 1907 18 1907 31 ("get-child" "get-child~" "error" "selection" "set!" "get-children" "get-children~" "length" "get-col" "get-col~" ">=" "when" "get-line" "get-line~" "get-row" "row" "let" "cell")}
        {Lisp-Entry "set-cell-data" method (public) ("cell" "data") #f #f 1916 18 1916 31 ("get-col" "get-col~" "get-children" "get-children~" "set-element!" "get-line" "get-line~" "get-row" "row" "let" "data" "cell")}
        {Lisp-Entry "get-data-title" method (public) ("data") #f #f 1921 18 1921 32 ("get-preserved-data" "get-preserved-data~" "Tree-Data-View" "get-title" "get-title~" "Tree-Label" "is?" "cond" "data")}
        {Lisp-Entry "set-data-title" method (public) ("data" "title") #f #f 1928 18 1928 32 ("get-preserved-data" "get-preserved-data~" "Tree-Data-View" "set-title" "set-title~" "Tree-Label" "is?" "cond" "title" "data")}
        {Lisp-Entry "get-cell-title" method (public) ("cell") #f #f 1935 18 1935 32 ("get-data-title" "when" "get-cell-data" "data" "let" "cell")}
        {Lisp-Entry "set-cell-title" method (public) ("cell" "title") #f #f 1941 18 1941 32 ("set-data-title" "when" "get-cell-data" "data" "let" "title" "cell")}
        {Lisp-Entry "invalidate-site" method (public) ("site") #f #f 1947 18 1947 33 ("site-rect" "invalidate-rect" "site")}
        {Lisp-Entry "invalidate-cell" method (public) ("cell") #f #f 1951 18 1951 33 ("cell-rect" "invalidate-rect" "cell")}
        {Lisp-Entry "redraw-cell" method (public) ("cell") #f #f 1955 18 1955 29 ("update-view" "invalidate-cell" "cell")}
        {Lisp-Entry "expand/collapse" method (override) ("row") #f #f 1965 20 1965 35 ("nextmethod" "else" "dynamic-expand" "dynamic" "get-state" "get-state~" "case" "node-column" "control-rect" "control-rect~" "invalidate-rect" "get-position" "get-position~" "get-v" "get-v~" "top" "let" "row")}
        {Lisp-Entry "dynamic-expand" method (public) ("row") #f #f 1973 18 1973 32 ("expand" "update-row" "row")}
        {Lisp-Entry "invalidate-expand" method (override) ("row" "top" "dynamic?") #f #f 1978 20 1978 37 ("plus/minus-rect" "plus/minus-rect~" "control-rect" "control-rect~" "0" "get-sons" "get-sons~" "cardinality" "=" "and" "if" "image-rect" "image-rect~" "invalidate-rect" "node-column" "when" "dynamic?" "top" "row")}
        {Lisp-Entry "invalidate-collapse" method (override) ("line" "row" "top" "selected?") #f #f 1986 20 1986 39 ("plus/minus-rect" "plus/minus-rect~" "line-rect" "if" "image-rect" "image-rect~" "invalidate-rect" "node-column" "when" "selected?" "top" "row" "line")}
        {Lisp-Entry "collapse-selection" method (override) ("line" "removed") #f #f 1994 20 1994 38 ("car" "not-null?" "set!" "selection-pivot" "line-selected?" "not" "and" "else" "cons" "set-selection" "selection" "member?" "unless" "get-col" "get-col~" "Cell" "new" "let" "when" "cell" "selection-mode" "case" "removed" "line")}
        {Lisp-Entry "auto-expand/collapse" method (public) ("row" "(close-auto-expanded?: close-auto-expanded? #t)" "(auto-toggle?: auto-toggle? #f)") #f #f 2008 18 2008 38 ("rows->selection" "else" "not" "get-father" "get-father~" "close-delayed-row" "mouse-up?" "mouse-up?~" "auto-in-place?" "auto-in-place?~" "delayed-autorow" "force?:" "get-spine" "get-spine~" "new-spine:" "close-auto-expanded" "neq?" "and" "selection-manager" "mouse-down?" "mouse-down?~" "cond" "selection" "selection->rows" "selected-rows" "let" "auto-expand" "auto-expand~" "auto-expanded-row" "set!" "auto-collapse" "auto-collapse~" "when" "expanded?" "expanded?~" "if" "auto-toggle" "define" "auto-toggle?" "auto-toggle?:" "close-auto-expanded?" "close-auto-expanded?:" "row")}
        {Lisp-Entry "close-delayed-row" method (public) ("(new-spine: new-spine #f)") #f #f 2043 18 2043 35 ("auto-collapse" "auto-collapse~" "memq?" "and" "if" "unless" "row" "lambda" "for-each-reversed" "set!" "done?" "get-spine" "get-spine~" "old-spine" "let" "delayed-autorow" "when" "new-spine" "new-spine:")}
        {Lisp-Entry "close-auto-expanded" method (public) ("(new-spine: new-spine #f)" "(force?: force? #t)") #f #f 2056 18 2056 37 ("auto-collapse" "auto-collapse~" "auto-in-place?" "auto-in-place?~" "or" "memq?" "and" "if" "unless" "row" "lambda" "for-each-reversed" "set!" "done?" "get-spine" "get-spine~" "old-spine" "let" "auto-expanded-row" "when" "force?" "force?:" "new-spine" "new-spine:")}
        {Lisp-Entry "close-auto-expanded-row" method () () #f #f 2072 11 2072 34 ("set!" "auto-collapse" "auto-collapse~" "auto-expanded-row" "when")}
        {Lisp-Entry "set-dynamic" method (public) ("row") #f #f 2078 18 2078 29 ("node-column" "control-rect" "control-rect~" "invalidate-rect" "row-top" "top" "row->line" "line" "let*" "set-state" "set-state~" "dynamic" "get-state" "get-state~" "neq?" "when" "row")}
        {Lisp-Entry "ensure-displayed" method (override) ("." "rest") #f #f 2091 20 2091 36 ("selection-row" "ensure-row-displayed" "car" "ensure-cell-displayed" "cell" "selection-mode" "eq?" "if" "selection" "not-null?" "when" "rest")}
        {Lisp-Entry "ensure-cell-displayed" method () ("cell") #f #f 2098 11 2098 32 ("get-scroll-context" "rect-end-position" "rect-position" "scroll-needed" "scroll" "cell-rect" "rect" "let" "cell")}
        {Lisp-Entry "cell->site" method () ("cell") #f #f 2109 11 2109 21 ("Site" "new" "get-line" "get-line~" "get-row" "row" "get-col" "get-col~" "get-column" "column" "let" "Cell" "is?" "if" "cell")}
        {Lisp-Entry "row/column->site" method () ("row" "column") #f #f 2117 11 2117 27 ("Site" "new" "column" "row")}
        {Lisp-Entry "site->cell" method () ("site") #f #f 2121 11 2121 21 ("Cell" "new" "get-row" "get-row~" "row->line" "line" "get-column" "get-column~" "column->col" "col" "let" "Site" "is?" "if" "site")}
        {Lisp-Entry "process-selection" method (public) ("cell" "shift?" "control?" "user-origin") #f #f 2129 18 2129 35 ("delay-selection" "delay-selection~" "selection-manager" "allow-start-drag?" "allow-start-drag?~" "cell=?" "last" "car" "null?" "when" "cons" "equal?" "test:" "remove" "<" "1" "+" "naturals" ">" "=" "0" "pivot" "eq?" "user-origin:" "set-pivot?:" "list" "set-selection" "selection" "member?" "unless" "selection-pivot" "set!" "cond" "or" "multiple-selection?" "and" "if" "get-line" "get-line~" "else" "selection-mode" "case" "element" "let" "user-origin" "control?" "shift?" "cell")}
        {Lisp-Entry "get-selection" method (override) () #f #f 2157 20 2157 33 ("selection")}
        {Lisp-Entry "get-ordered-selection" method (public) () #f #f 2161 18 2161 39 ("selection" "<" "sort")}
        {Lisp-Entry "set-selection" method (override) ("sel" "(force?: force? #f)" "(set-pivot?: set-pivot? #t)" "(ensure-displayed?: ensure-displayed? #t)" "(auto-expand?: auto-expand? #t)" "(generate-event?: generate-event? #t)" "(user-origin: user-origin #f)") #f #f 2165 20 2165 33 ("ensure-displayed" "end-delayed?" "end-delayed?~" "auto-select" "auto-select~" "auto-toggle?:" "auto-expand/collapse" "collapsed?" "collapsed?~" "not" "or" "multiple-selection?" "auto-expand/collapse?" "selection-row" "get-row" "auto-row" "selection-change" "car" "null?" "selection-pivot" "set!" "old-selection" "change-selection?" "change-selection?~" "locator" "reset" "reset~" "selection-manager" "locked?" "locked?~" "unless" "list" "invalidate-selection" "invalidate-merge-cell" "if" "cell->site" "get-merge-cell" "Cell" "is?" "and" "merge-cell" "let" "cell" "lambda" "for-each" "not-null?" "when" "selection" "inval-selection" "define" "user-origin" "user-origin:" "generate-event?" "generate-event?:" "auto-expand?" "auto-expand?:" "ensure-displayed?" "ensure-displayed?:" "set-pivot?" "set-pivot?:" "force?" "force?:" "sel")}
        {Lisp-Entry "selection-change" method (protected virtual) ("old-selection" "force?" "user-origin") #f #f 2203 29 2203 45 ("selection" "call-selection-handler" "lambda" "selection-manager" "with-locked-operation" "with-locked-operation~" "user-origin" "force?" "old-selection")}
        {Lisp-Entry "get-selection-state" method (public) ("(use: use 'row)") #f #f 2209 18 2209 37 ("edited-cell" "saved-edited" "list" "selection-pivot" "and" "saved-pivot" "selection-position" "get-scrolled-position" "nu+" "saved-position" "get-selection" "saved-selection" "let" "get-spine" "get-spine~" "row-title" "get-user-data" "get-user-data~" "data" "line->text" "text" "rank" "get-row" "line" "get-col" "get-col~" "get-line" "get-line~" "cons" "save-row" "else" "save-cell" "map" "cell" "selection-mode" "case" "selection" "save-selection" "define" "row" "use" "use:")}
        {Lisp-Entry "set-selection-state" method (public) ("state" "(test: test eqv?)" "(ensure-expanded?: ensure-expanded? #f)" "(ensure-displayed?: ensure-displayed? #t)" "(generate-event?: generate-event? #f)") #f #f 2239 18 2239 37 ("auto-expand?:" "set-selection" "selection-position" "nu-" "scroll-to" "cell-editor" "replace-cell" "get-master-cell" "edited-cell" "kill-edition" "not" "edited" "selection" "not-null?" "cond" "selection-pivot" "set!" "pivot" "cdr" "car" "find-by-title" "find-by-title~" "subrow" "null?" "root-row" "iter" "user-data-index" "data" "text->line" "text" "rank" "Cell" "new" "when" "line" "col" "saved" "restore-row" "else" "restore-cell" "map" "cell" "selection-mode" "case" "remove-false" "restore-selection" "define" "ensure-expanded" "row" "lambda" "if" "row->line" "let" "saved-edited" "saved-pivot" "saved-position" "saved-selection" "use" "bind" "generate-event?" "generate-event?:" "ensure-displayed?" "ensure-displayed?:" "ensure-expanded?" "ensure-expanded?:" "eqv?" "test" "test:" "state")}
        {Lisp-Entry "selection-position" method () ("selection") #f #f 2289 11 2289 29 ("get-box" "get-box~" "rect-position" "identity" "selection-region" "region" "with" "surface" "lambda" "with-transformation-surface" "selection")}
        {Lisp-Entry "with-preserved-selection" method (public) ("thunk" "(use: use 'row)" "(test: test eqv?)" "(ensure-expanded?: ensure-expanded? #f)" "(ensure-displayed?: ensure-displayed? #t)" "(generate-event?: generate-event? #f)") #f #f 2296 18 2296 42 ("set-selection-state" "get-selection-state" "saved-state" "let" "generate-event?" "generate-event?:" "ensure-displayed?" "ensure-displayed?:" "ensure-expanded?" "ensure-expanded?:" "eqv?" "test" "test:" "row" "use" "use:" "thunk")}
        {Lisp-Entry "get-single-selection" method (public) () #f #f 2302 18 2302 38 ("car" "selection" "null?" "if")}
        {Lisp-Entry "set-single-selection" method (public) ("sel" "." "rest") #f #f 2308 18 2308 38 ("list" "set-selection" "apply" "Cell" "is?" "integer?" "or" "assert" "rest" "sel")}
        {Lisp-Entry "auto-select-first" method (public) () #f #f 2313 18 2313 35 ("list" "set-selection" "0" "get-visible-count" ">" "selection" "null?" "and" "when")}
        {Lisp-Entry "selected-row-proc" method () () #f #f 2318 11 2318 28 ("else" "get-line" "get-line~" "get-row" "lambda" "cell" "selection-mode" "case")}
        {Lisp-Entry "get-selected-row" method (public) () #f #f 2327 18 2327 34 ("selected-row-proc" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "get-selected-rows" method (public) () #f #f 2333 18 2333 35 ("selection" "<" "sort" "selected-row-proc" "map")}
        {Lisp-Entry "get-selected-data" method (public) () #f #f 2337 18 2337 35 ("get-selected-rows" "get-user-data" "get-user-data~" "map")}
        {Lisp-Entry "get-single-selected-data" method (public) () #f #f 2341 18 2341 42 ("get-user-data" "get-user-data~" "when" "get-selected-row" "row" "let")}
        {Lisp-Entry "get-selection-data" method (public) ("selection") #f #f 2347 18 2347 36 ("get-user-data" "get-user-data~" "get-row" "row" "let" "line" "lambda" "map" "selection")}
        {Lisp-Entry "with-deleted-selection" method (public) ("selection" "proc" "(can-survive?: can-survive? #f)") #f #f 2354 18 2354 40 ("Cell" "new" "set-single-selection" "1" "-" "previous" "0" ">" "when" "set-selection" "length" "=" "user-data-index" "remove-false" "sel" "let" "min" "apply" "smallest" "get-selection-data" "and" "data" "get-line" "get-line~" "map" "cell" "selection-mode" "eq?" "if" "selected-lines" "let*" "can-survive?" "can-survive?:" "proc" "selection")}
        {Lisp-Entry "selection->rows" method () ("selection") #f #f 2367 11 2367 26 ("else" "get-col" "get-col~" "get-line" "get-line~" "get-visible-row" "cons" "lambda" "map" "cell" "selection-mode" "case" "selection")}
        {Lisp-Entry "rows->selection" method () ("rows") #f #f 2377 11 2377 26 ("else" "row-index" "Cell" "new" "col" "row" "bind" "pair" "lambda" "map" "remove-false" "cell" "selection-mode" "case" "rows")}
        {Lisp-Entry "added-update-selection" method (override) ("line" "count") #f #f 2389 20 2389 42 ("new-pivot" "selection-pivot" "map" "selection" "set!" "else" "get-col" "get-col~" "Cell" "new" "if" "l" "lambda" "cell" "selection-mode" "case" "proc" "let" "+" "set-line" "set-line~" "get-line" "get-line~" ">=" "edited-cell" "and" "when" "count" "line")}
        {Lisp-Entry "removed-update-selection" method (override) ("line" "count") #f #f 2410 20 2410 44 ("car" "not-null?" "pivot" "selection-pivot" "or" "unless" "old" "collect" "selection" "set!" "else" "get-col" "get-col~" "Cell" "new" "<" "cond" "l" "lambda" "cell" "selection-mode" "case" "proc" "removed" "+" "end-line" "let" "-" "set-line" "set-line~" "get-line" "get-line~" ">=" "edited-cell" "and" "when" "count" "line")}
        {Lisp-Entry "selection-region" method (override) ("sel" "transformer") #f #f 2443 20 2443 36 ("and" "get-view-clipper" "clipper" "or" "combine!" "combine!~" "merge-cell-rect" "row-region" "with" "if" "cell->site" "safe-get-merge-cell" "merge-cell" "in" "for" "loop" "region" "let" "selection-row-region" "else" "cell-rect" "rect:" "Region" "new" "cell" "selection-mode" "case" "element" "element-region" "define" "transformer" "sel")}
        {Lisp-Entry "selection-row-rect" method (override) ("line") #f #f 2462 20 2462 38 ("get-height" "get-height~" "+" "columns-right" "3" "-" "Rect" "new" "get-position" "get-position~" "get-v" "get-v~" "top" "left" "get-row" "let" "first" "left-without-node" "min" "second" "get-borders" "get-borders~" "borders-left" "1" "columns" "length" ">" "if" "columns-left" "node-column" "row-text-left" "row-text-left~" "node-left" "let*" "row" "left-with-node" "define" "line")}
        {Lisp-Entry "selection-row" method () ("element") #f #f 2479 11 2479 24 ("else" "get-line" "get-line~" "cell" "selection-mode" "case" "element")}
        {Lisp-Entry "get-view-state" method (override) ("(use: use 'row)") #f #f 2490 20 2490 34 ("get-selection-state" "get-expand-state" "list" "row" "use" "use:")}
        {Lisp-Entry "set-view-state" method (override) ("state") #f #f 2494 20 2494 34 ("set-selection-state" "set-expand-state" "selection-state" "expand-state" "bind" "state")}
        {Lisp-Entry "cell-visible?" method (public) ("cell") #f #f 2505 18 2505 31 ("get-columns-count" "get-col" "get-col~" "visible-count" "get-line" "get-line~" "<" "and" "cell")}
        {Lisp-Entry "borders-left" definition () ("borders") #f #f 2515 15 2515 27 ("car" "borders")}
        {Lisp-Entry "borders-right" definition () ("borders") #f #f 2519 15 2519 28 ("cdr" "borders")}
        {Lisp-Entry "borders-width" definition () ("borders") #f #f 2523 15 2523 28 ("borders-left" "borders-right" "-" "borders")}
        {Lisp-Entry "line-rect" method (override) ("line" "<fx>") #f "<Rect>" 2533 20 2533 29 ("get-height" "get-height~" "+" "new" "columns-right" "right" "get-position" "get-position~" "get-v" "get-v~" "top" "columns" "car" "get-borders" "get-borders~" "borders-left" "left" "get-row" "row" "let*" "Rect" "<Rect>" "fx" "<fx>" "line")}
        {Lisp-Entry "cell-position" method (public) ("cell" "<Cell>") #f "<Point>" 2541 18 2541 31 ("get-top" "get-top~" "get-left" "get-left~" "new" "cell-rect" "rect" "let" "Point" "<Point>" "Cell" "<Cell>" "cell")}
        {Lisp-Entry "site-rect" method (public) ("site" "<Site>") #f "<Rect>" 2546 18 2546 27 ("unmerged-site-rect" "merge-cell-rect" "if" "safe-get-merge-cell" "merge-cell" "let" "Rect" "<Rect>" "Site" "<Site>" "site")}
        {Lisp-Entry "cell-rect" method (public) ("cell" "<Cell>") #f "<Rect>" 2553 18 2553 27 ("cell->site" "site-rect" "Rect" "<Rect>" "Cell" "<Cell>" "cell")}
        {Lisp-Entry "unmerged-site-rect" method (public) ("site" "<Site>") #f "<Rect>" 2557 18 2557 36 ("get-height" "get-height~" "+" "borders-right" "borders-left" "new" "get-position" "get-position~" "get-v" "get-v~" "top" "get-row" "get-row~" "row" "get-column" "get-column~" "get-borders" "get-borders~" "borders" "let*" "Rect" "<Rect>" "Site" "<Site>" "site")}
        {Lisp-Entry "cell-region" method (public) ("cell" "<Cell>") #f "<Region>" 2564 18 2564 29 ("cell-rect" "rect:" "new" "Region" "<Region>" "Cell" "<Cell>" "cell")}
        {Lisp-Entry "cell-content-rect" method () ("cell" "<Cell>") #f "<Rect>" 2568 11 2568 28 ("get-height" "get-height~" "content-rect" "content-rect~" "offset-rect" "borders-left" "left" "get-borders" "get-borders~" "borders" "get-width" "get-width~" "width" "get-cell-data" "data" "get-position" "get-position~" "get-v" "get-v~" "top" "get-column" "column" "get-row" "row" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "let*" "Rect" "<Rect>" "Cell" "<Cell>" "cell")}
        {Lisp-Entry "cell-text-rect" method () ("cell" "<Cell>") #f "<Rect>" 2581 11 2581 25 ("0" "get-height" "get-height~" "get-column" "text-rect" "text-rect~" "offset-rect" "node-column" "get-width" "get-width~" "width" "get-cell-data" "data" "get-position" "get-position~" "get-v" "get-v~" "top" "get-row" "row" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "let*" "Rect" "<Rect>" "Cell" "<Cell>" "cell")}
        {Lisp-Entry "view->tree" method (public) ("pos" "<Point>" "(any?: any? #f)" "(uniform-height?: uniform-height? #f)") #f #f 2591 18 2591 28 ("get-first-cell" "get-first-cell~" "cell->site" "get-merge-cell" "merge-cell" "Cell" "new" "0" ">=" "and" "get-h" "get-h~" "h->col" "col" "v->line" "default-row-height" "get-v" "get-v~" "quotient" "line" "let" "cell-visible?" "when" "if" "cell" "visible-cell" "define" "uniform-height?" "uniform-height?:" "any?" "any?:" "Point" "<Point>" "pos")}
        {Lisp-Entry "call-with-view->tree" method (public) ("pos" "<Point>" "proc") #f #f 2606 18 2606 38 ("cell-visible?" "Cell" "new" "cell" "0" ">=" "and" "get-h" "get-h~" "h->col" "col" "let" "if" "height" "v" "line" "lambda" "get-v" "get-v~" "call-with-v->line" "proc" "Point" "<Point>" "pos")}
        {Lisp-Entry "h->col" method (public) ("h") #f #f 2620 18 2620 24 ("continuation-return" "/=" "<=" ">=" "and" "when" "get-borders" "get-borders~" "right" "left" "bind" "columns" "in" "column" "get-columns-count" "below" "0" "from" "col" "for" "loop" "return" "lambda" "continuation-capture" "h")}
        {Lisp-Entry "in-edition?" method (public) () #f #f 2636 18 2636 29 ("edited-cell")}
        {Lisp-Entry "edit-cell" method (public) ("cell" "(editor: editor #f)" "(cover-spacing?: cover-spacing? #f)" "(close-editor?: close-editor? #t)" "(before-end: before-end #f)" "(after-end: after-end #f)") #f #f 2640 18 2640 27 ("set-visible?" "set-visible?~" "close-cell-editor?" "cell-editor" "edited-cell" "set!" "self" "get-parent" "get-parent~" "acquire" "acquire~" "set-rect" "set-rect~" "get-top-cell" "replace-cell" "list" "children:" "visible?:" "get-cell-data" "preserved-data:" "Tree-Data-View" "new" "view" "cell-editor-rect" "rect" "let" "end-edition" "get-columns-count" "get-col" "get-col~" "<" "update-locked?" "not" "assert" "after-end" "after-end:" "before-end" "before-end:" "close-editor?" "close-editor?:" "cover-spacing?" "cover-spacing?:" "editor" "editor:" "cell")}
        {Lisp-Entry "end-edition" method (public) () #f #f 2660 18 2660 29 ("invalidate-rect" "set-parent" "set-parent~" "close" "close~" "close-cell-editor?" "get-master-cell" "get-master-cell~" "replace-cell" "if" "cell->site" "safe-get-merge-cell" "merge-cell" "get-preserved-data" "get-preserved-data~" "preserved-data" "break" "unless" "Cell" "new" "new-cell" "get-col" "get-col~" "let*" "set!" "get-after-end" "get-after-end~" "after-end" "get-before-end" "get-before-end~" "before-end" "cell-editor-rect" "bounds" "cell-editor" "cell" "let" "edited-cell" "continuation-return" "get-child" "get-child~" "eq?" "when" "line" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "col" "editor" "find-editor-line" "define")}
        {Lisp-Entry "kill-edition" method (public) () #f #f 2697 18 2697 30 ("set-parent" "set-parent~" "close" "close~" "close-cell-editor?" "if" "set!" "cell-editor" "editor" "cell" "let" "edited-cell" "when")}
        {Lisp-Entry "replace-cell" method (public) ("cell" "child") #f #f 2708 18 2708 30 ("get-col" "get-col~" "get-line" "get-line~" "get-row" "replace-child" "replace-child~" "child" "cell")}
        {Lisp-Entry "cell-editor-rect" method () ("cell") #f #f 2712 11 2712 27 ("offset-rect" "get-height" "get-height~" "content-rect" "content-rect~" "rect" "get-level" "get-level~" "text-h" "text-h~" "h" "borders-left" "left" "get-borders" "get-borders~" "borders" "get-width" "get-width~" "show-header?" "width" "get-cell-data" "get-position" "get-position~" "get-v" "get-v~" "top" "get-column" "column" "get-row" "row" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "let*" "merge-cell-rect" "if" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "cell")}
        {Lisp-Entry "cell-up" method (public) ("cell") #f #f 2731 18 2731 25 ("Cell" "new" "0" ">=" "when" "get-col" "get-col~" "col" "1" "get-line" "get-line~" "get-first-line" "get-first-line~" "if" "-" "line" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "cell")}
        {Lisp-Entry "cell-down" method (public) ("cell" "(validate? #t)") #f #f 2741 18 2741 27 ("Cell" "new" "get-visible-count" "<" "not" "or" "when" "get-col" "get-col~" "col" "1" "get-line" "get-line~" "get-last-line" "get-last-line~" "if" "+" "line" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "validate?" "cell")}
        {Lisp-Entry "cell-left" method (public) ("cell") #f #f 2751 18 2751 27 ("Cell" "new" "0" ">=" "when" "1" "get-col" "get-col~" "get-first-col" "get-first-col~" "if" "-" "col" "get-line" "get-line~" "line" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "cell")}
        {Lisp-Entry "cell-right" method (public) ("cell") #f #f 2761 18 2761 28 ("Cell" "new" "get-columns-count" "<" "when" "1" "get-col" "get-col~" "get-first-col" "get-first-col~" "if" "+" "col" "get-line" "get-line~" "line" "cell->site" "safe-get-merge-cell" "merge-cell" "let" "cell")}
        {Lisp-Entry "select-up" method (public) ("cell") #f #f 2771 18 2771 27 ("select-cell" "end-edition" "when" "cell-up" "sel" "let" "cell")}
        {Lisp-Entry "select-down" method (public) ("cell" "(validate? #t)") #f #f 2778 18 2778 29 ("select-cell" "end-edition" "when" "cell-down" "sel" "let" "validate?" "cell")}
        {Lisp-Entry "select-left" method (public) ("cell") #f #f 2785 18 2785 29 ("select-cell" "end-edition" "when" "cell-left" "sel" "let" "cell")}
        {Lisp-Entry "select-right" method (public) ("cell") #f #f 2792 18 2792 30 ("select-cell" "end-edition" "when" "cell-right" "sel" "let" "cell")}
        {Lisp-Entry "select-cell" method (public virtual) ("cell" "." "rest") #f #f 2799 26 2799 37 ("get-line" "get-line~" "selection-mode" "eq?" "if" "set-single-selection" "rest" "cell")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 2811 25 2811 45 ("Tree-View-Descriptor" "new")}}
      {Lisp-Entry "Tree-Locator" class () ((extends . "Locator")) #f #f 2820 7 2820 19 ("Locator")
        {Lisp-Entry "tree" slot () () #f #f 2823 8 2823 12 ()}
        {Lisp-Entry "column" slot () ((initialize . "#f")) #f #f 2824 8 2824 14 ()}
        {Lisp-Entry "initialize" method (override) ("tree" "." "rest") #f #f 2827 20 2827 30 ("nextmethod" "apply" "self" "tree~self" "set!" "rest" "tree")}
        {Lisp-Entry "iterate" method (override) ("proc") #f #f 2832 20 2832 27 ("wrap?:" "get-next" "get-next~" "prefix" "when" "start:" "get-title" "get-title~" "title" "line" "for-each-visible-row" "for-each-visible-row~" "label-get" "bind" "car" "else" "get-children" "get-children~" "element" "row" "lambda" "get-line" "get-line~" "get-row" "get-row~" "and" "cons" "0" "get-col" "get-col~" "if" "column" "set!" "cell" "get-selection-mode" "get-selection-mode~" "case" "tree" "get-single-selection" "get-single-selection~" "sel" "let" "prepare-iterate" "define" "proc")}
        {Lisp-Entry "select" method (override) ("line") #f #f 2853 20 2853 26 ("else" "column" "Cell" "new" "set-single-selection" "set-single-selection~" "cell" "tree" "get-selection-mode" "get-selection-mode~" "case" "line")}}
      {Lisp-Entry "Merge-Cell" class () ((extends . "Object")) #f #f 2864 7 2864 17 ("Object")
        {Lisp-Entry "master-cell" slot () ((initialize . "#f") (accessors . "generate")) #f #f 2867 8 2867 19 ()}
        {Lisp-Entry "get-master-cell" accessor () () #f #f 2867 48 2867 56 ()}
        {Lisp-Entry "set-master-cell" accessor () () #f #f 2867 48 2867 56 ()}
        {Lisp-Entry "merged-rows" slot () ((initialize . "'()") (accessors . "generate")) #f #f 2868 8 2868 19 ()}
        {Lisp-Entry "get-merged-rows" accessor () () #f #f 2868 48 2868 56 ()}
        {Lisp-Entry "set-merged-rows" accessor () () #f #f 2868 48 2868 56 ()}
        {Lisp-Entry "merged-columns" slot () ((initialize . "'()") (accessors . "generate")) #f #f 2869 8 2869 22 ()}
        {Lisp-Entry "get-merged-columns" accessor () () #f #f 2869 48 2869 56 ()}
        {Lisp-Entry "set-merged-columns" accessor () () #f #f 2869 48 2869 56 ()}
        {Lisp-Entry "tree" slot () ((initialize . "#f") (accessors . "generate")) #f #f 2870 8 2870 12 ()}
        {Lisp-Entry "get-tree" accessor () () #f #f 2870 48 2870 56 ()}
        {Lisp-Entry "set-tree" accessor () () #f #f 2870 48 2870 56 ()}
        {Lisp-Entry "initialize" method (override) ("cell" "rows-list" "columns-list" "cells-tree") #f #f 2873 20 2873 30 ("tree" "merged-columns" "merged-rows" "master-cell" "set!" "nextmethod" "cells-tree" "columns-list" "rows-list" "cell")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 2881 20 2881 25 ("format-plural" "format" "merged-columns" "c" "merged-rows" "length" "r" "let" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "add-merged-row" method (public) ("row") #f #f 2889 18 2889 32 ("cons" "merged-rows" "set!" "row")}
        {Lisp-Entry "for-each-cell" method (public) ("proc") #f #f 2893 18 2893 31 ("merged-rows" "merged-columns" "column" "row" "lambda" "for-each" "proc")}
        {Lisp-Entry "get-first-row" method (public) () #f #f 2901 18 2901 31 ("merged-rows" "first")}
        {Lisp-Entry "get-last-row" method (public) () #f #f 2905 18 2905 30 ("merged-rows" "last")}
        {Lisp-Entry "get-first-column" method (public) () #f #f 2909 18 2909 34 ("merged-columns" "first")}
        {Lisp-Entry "get-last-column" method (public) () #f #f 2913 18 2913 33 ("merged-columns" "last")}
        {Lisp-Entry "get-first-site" method (public) () #f #f 2917 18 2917 32 ("get-first-column" "get-first-row" "Site" "new")}
        {Lisp-Entry "get-last-site" method (public) () #f #f 2921 18 2921 31 ("get-last-column" "get-last-row" "Site" "new")}
        {Lisp-Entry "get-first-line" method (public) () #f #f 2925 18 2925 32 ("merged-rows" "set!" "<" "not" "or" "tree" "row->line" "row->line~" "line" "get-visible?" "get-visible?~" "when" "row" "lambda" "for-each" "first-line" "let")}
        {Lisp-Entry "get-last-line" method (public) () #f #f 2937 18 2937 31 ("merged-rows" "set!" ">" "tree" "row->line" "row->line~" "line" "get-visible?" "get-visible?~" "when" "row" "lambda" "for-each" "0" "last-line" "let")}
        {Lisp-Entry "get-first-col" method (public) () #f #f 2948 18 2948 31 ("merged-columns" "set!" "<" "not" "or" "tree" "column->col" "column->col~" "col" "get-visible?" "get-visible?~" "when" "column" "lambda" "for-each" "first-col" "let")}
        {Lisp-Entry "get-last-col" method (public) () #f #f 2960 18 2960 30 ("merged-columns" "set!" ">" "tree" "column->col" "column->col~" "col" "get-visible?" "get-visible?~" "when" "column" "lambda" "for-each" "0" "last-col" "let")}
        {Lisp-Entry "get-first-cell" method (public) () #f #f 2971 18 2971 32 ("Cell" "new" "and" "if" "get-first-col" "first-col" "get-first-line" "first-line" "let")}
        {Lisp-Entry "get-last-cell" method (public) () #f #f 2979 18 2979 31 ("Cell" "new" "get-last-col" "last-col" "get-last-line" "last-line" "let")}}
      {Lisp-Entry "design" submodule () () #f #f 2991 11 2991 17 ()
        {Lisp-Entry "import" import () () #f #f 2994 1 2994 7 ("jazz.designer")}
        {Lisp-Entry "Tree-View-Descriptor" class () ((extends . "Outline-View-Descriptor")) #f #f 2997 7 2997 27 ("Outline-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 3000 3 3000 7 ("content" "reorderable?" "column-spacing" "filled-column" "empty-background" "cell-background" "auto-expand/collapse?" "focused-on-descendants?" "show-unfocused-selection?" "can-select-empty?" "multiple-selection?" "selection-mode" "Boolean-Domain" "<Boolean-Domain>" "show-header?" "domain" "Portfolio-Domain" "<Portfolio-Domain>" "title:" "portfolio" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "class-image" method (override) ("class") #f #f 3027 20 3027 31 ("Image-Resource" "class")}}}}})
"Tree-Widget"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "widget" "Tree-Widget.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.widget.Tree-Widget" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Tree-Widget" class () ((extends . "Outline-View")) #f #f 44 7 44 18 ("Outline-View")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 (":images" "portfolio:" "tree" "Tree-View" "<Tree-View>" "header" "Tree-Header" "<Tree-Header>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "document" "scroller" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "border" "name:" "Border-View" "<Border-View>" "install" "<install>")}}}})
"User-Reporter"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "User-Reporter.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.User-Reporter" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.system" "jazz.library")}
      {Lisp-Entry "User-Reporter" class (undocumented) ((extends . "Object") (implements . "Reporter")) #f #f 44 20 44 33 ("Reporter" "Object")
        {Lisp-Entry "section-title" method (override) ("title") #f #f 47 20 47 33 ("user-message" "title")}
        {Lisp-Entry "set-message" method (override) ("msg" "update?") #f #f 51 20 51 31 ("get-application" "set-status-message" "set-status-message~" "update?" "msg")}
        {Lisp-Entry "user-message" method (override) ("fmt" "." "rest") #f #f 55 20 55 32 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "user-feedback" method (override) ("fmt" "." "rest") #f #f 59 20 59 33 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "set-range" method (override) ("range") #f #f 63 20 63 29 ("range")}
        {Lisp-Entry "set-pos" method (override) ("pos") #f #f 67 20 67 27 ("pos")}
        {Lisp-Entry "delta-pos" method (override) ("increment") #f #f 71 20 71 29 ("increment")}
        {Lisp-Entry "set-step" method (override) ("increment") #f #f 75 20 75 28 ("increment")}
        {Lisp-Entry "step-it" method (override) () #f #f 79 20 79 27 ()}
        {Lisp-Entry "set-done" method (override) () #f #f 83 20 83 28 ()}
        {Lisp-Entry "disable-cancel" method (override) () #f #f 87 20 87 34 ()}
        {Lisp-Entry "cancel-requested?" method (override) () #f #f 91 20 91 37 ()}
        {Lisp-Entry "test-cancelled" method (override) () #f #f 95 20 95 34 ()}}}})
"User-Search"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "User-Search.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.User-Search" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}
      {Lisp-Entry "User-Search" class () ((extends . "Search")) #f #f 44 7 44 18 ("Search")
        {Lisp-Entry "get-icon" method (override) () #f #f 52 20 52 28 ("Image-Resource")}}}})
"User-Search-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "User-Search-Preferences.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search.User-Search-Preferences" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "User-Search-Preferences" class (undocumented) ((extends . "Search-View-Preferences")) #f #f 44 20 44 43 ("Search-View-Preferences")
        {Lisp-Entry "active-domain" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 25 ()}
        {Lisp-Entry "get-active-domain" accessor () () #f #f 47 53 47 61 ()}
        {Lisp-Entry "set-active-domain" accessor () () #f #f 47 53 47 61 ()}
        {Lisp-Entry "jazz-label" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 22 ()}
        {Lisp-Entry "get-jazz-label" accessor () () #f #f 48 53 48 61 ()}
        {Lisp-Entry "set-jazz-label" accessor () () #f #f 48 53 48 61 ()}
        {Lisp-Entry "jazz-directories" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 28 ()}
        {Lisp-Entry "get-jazz-directories" accessor () () #f #f 49 53 49 61 ()}
        {Lisp-Entry "set-jazz-directories" accessor () () #f #f 49 53 49 61 ()}
        {Lisp-Entry "jazz-extensions" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 27 ()}
        {Lisp-Entry "get-jazz-extensions" accessor () () #f #f 50 53 50 61 ()}
        {Lisp-Entry "set-jazz-extensions" accessor () () #f #f 50 53 50 61 ()}
        {Lisp-Entry "user-label" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 22 ()}
        {Lisp-Entry "get-user-label" accessor () () #f #f 51 53 51 61 ()}
        {Lisp-Entry "set-user-label" accessor () () #f #f 51 53 51 61 ()}
        {Lisp-Entry "user-directories" property () ((initialize . "#f") (accessors . "generate")) #f #f 52 12 52 28 ()}
        {Lisp-Entry "get-user-directories" accessor () () #f #f 52 53 52 61 ()}
        {Lisp-Entry "set-user-directories" accessor () () #f #f 52 53 52 61 ()}
        {Lisp-Entry "user-extensions" property () ((initialize . "#f") (accessors . "generate")) #f #f 53 12 53 27 ()}
        {Lisp-Entry "get-user-extensions" accessor () () #f #f 53 53 53 61 ()}
        {Lisp-Entry "set-user-extensions" accessor () () #f #f 53 53 53 61 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("title:" "install" "<install>")}}}})
"User-Search-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "User-Search-View.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.search.User-Search-View" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.search" "jazz.ui" "jazz.system" "jazz.jml" "jazz.io")}
      {Lisp-Entry "User-Search-View" class (undocumented) ((extends . "Search-View")) #f #f 48 20 48 36 ("Search-View")
        {Lisp-Entry "form" form () () #f #f 51 3 51 7 ("44" "user-files" "selected?:" "18" "120" "Dimension" "size:" "20" "13" "Point" "position:" "jazz-files" "Radio-Button" "<Radio-Button>" ">" "<content" "<content~>" "title:" "domain" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 59 20 59 26 ("user-files" "get-user-label" "get-user-label~" "jazz-files" "locate" "set-title" "set-title~" "when" "get-jazz-label" "get-jazz-label~" "label" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "preferences" method () () #f #f 70 11 70 22 ("user" "search-manager" "tools" "get-preferences")}
        {Lisp-Entry "get-search-domains" method (override) () #f #f 79 20 79 38 ("user-files" "jazz-files")}
        {Lisp-Entry "search-targets" method (override) ("find" "replace") #f #f 89 20 89 34 ("search-threaded" "Directories-Search" "new" "search" "let" "lambda" "new-thread" "thread-start!" "replace" "find")}
        {Lisp-Entry "search-threaded" method (synchronized) ("search") #f #f 98 24 98 39 ("close-manager" "close-manager~" "unregister-activity" "unregister-activity~" "get-activity-manager" "manager" "when" "user-feedback" "user-feedback~" "select-results" "select-results~" "get-results" "results" "let" "lambda" "post-event" "search-user-files" "user-files" "search-jazz-files" "jazz-files" "get-search-domain" "case" "resultset" "count-files" "get-search-reporter" "User-Reporter" "new" "reporter" "let*" "search")}
        {Lisp-Entry "Jazz-Count" definition () () #f #f 120 14 120 24 ()}
        {Lisp-Entry "count-jazz-files" method () () #f #f 124 11 124 27 ("count-jazz-directories" "set!" "Jazz-Count" "unless")}
        {Lisp-Entry "count-jazz-directories" method () () #f #f 130 11 130 33 ("increase!" "extension=?" "test:" "get-extension" "get-extension~" "member?" "when" "file" "iterate-project/directory" "directory" "lambda" "for-each" "default-search-extensions" "get-jazz-extensions" "get-jazz-extensions~" "effective-extensions" "extensions" "default-search-directories" "get-jazz-directories" "get-jazz-directories~" "or" "filter-existing" "directories" "0" "count" "preferences" "pref" "let")}
        {Lisp-Entry "User-Count" definition () () #f #f 144 14 144 24 ()}
        {Lisp-Entry "count-user-files" method () () #f #f 148 11 148 27 ("set!" "User-Count" "unless" "increase!" "extension=?" "test:" "get-extension" "get-extension~" "member?" "when" "file" "iterate-project/directory" "directory" "for-each" "0" "lambda" "count" "default-search-extensions" "get-user-extensions" "get-user-extensions~" "effective-extensions" "extensions" "default-search-directories" "get-user-directories" "get-user-directories~" "or" "filter-existing" "directories" "preferences" "pref" "let")}
        {Lisp-Entry "count-files" method () () #f #f 167 11 167 22 ("count-user-files" "user-files" "count-jazz-files" "jazz-files" "get-search-domain" "case")}
        {Lisp-Entry "filter-existing" definition () ("directories") #f #f 173 15 173 30 ("exists?" "exists?~" "symbol?" "or" "project/directory" "lambda" "collect-if" "directories")}
        {Lisp-Entry "default-search-directories" definition () () #f #f 180 15 180 41 ("Projects" "Profiles" "Directory" "list" "Jazz" "is-alias?" "if" "append")}
        {Lisp-Entry "setup-search-reporter" method (override) ("reporter" "count") #f #f 192 20 192 41 ("set-step" "set-step~" "set-pos" "set-pos~" "1" "Range" "new" "set-range" "set-range~" "count" "reporter")}
        {Lisp-Entry "search-jazz-files" method () ("search" "reporter") #f #f 203 11 203 28 ("search-in-directories" "default-search-extensions" "get-jazz-extensions" "get-jazz-extensions~" "effective-extensions" "extensions" "default-search-directories" "get-jazz-directories" "get-jazz-directories~" "or" "filter-existing" "directories" "preferences" "pref" "Search-Resultset" "new" "resultset" "let" "reporter" "search")}
        {Lisp-Entry "search-user-files" method () ("search" "reporter") #f #f 212 11 212 28 ("search-in-directories" "default-search-extensions" "get-user-extensions" "get-user-extensions~" "effective-extensions" "extensions" "default-search-directories" "get-user-directories" "get-user-directories~" "or" "filter-existing" "directories" "preferences" "pref" "Search-Resultset" "new" "resultset" "let" "reporter" "search")}}}})
"Vertical-Line"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Vertical-Line.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ui.view.Vertical-Line" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Vertical-Line" class () ((extends . "View")) #f #f 44 7 44 20 ("View")
        {Lisp-Entry "default-size" method (override) () #f #f 47 20 47 32 ("100" "8" "Dimension")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 56 20 56 24 ("left" "edges:" "sunken" "outer:" "raised" "inner:" "2" "0" "Rect" "new" "draw-edge" "draw-edge~" "Medium" "Color" "color" "get-height" "height" "let" "context" "surface")}}}})
"View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "View.jazz"} 247283256. jazz
    {Lisp-Entry "jazz.ui.view.View" module (protected) () #f #f 38 18 38 35 ("jazz")
      {Lisp-Entry "import" import () () #f #f 41 1 41 7 ("time" "jazz.ui.workspace" "jazz.ui.view" "jazz.ui.window" "jazz.ui.print" "jazz.ui.dialog" "jazz.ui" "jazz.system" "jazz.platform.cairo" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "View" class () ((extends . "Drawing") (implements . "(Actionable Context-Provider)")) #f #f 58 7 58 11 ("0" "5" "explicit" "Context-Provider" "Actionable" "Drawing")
        {Lisp-Entry "title" property () ((initialize . "#f") (accessors . "explicit")) #f #f 61 12 61 17 ()}
        {Lisp-Entry "font" property () ((initialize . "#f") (accessors . "explicit")) #f #f 62 12 62 16 ()}
        {Lisp-Entry "style" property () ((initialize . "#f") (accessors . "explicit")) #f #f 63 12 63 17 ()}
        {Lisp-Entry "background" property () ((initialize . "#f") (accessors . "explicit")) #f #f 64 12 64 22 ()}
        {Lisp-Entry "auto-size?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 65 12 65 22 ()}
        {Lisp-Entry "tooltip?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 66 12 66 20 ()}
        {Lisp-Entry "tooltip-text" property () ((initialize . "#f") (accessors . "explicit")) #f #f 67 12 67 24 ()}
        {Lisp-Entry "draggable?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 68 12 68 22 ()}
        {Lisp-Entry "drag-tolerance" property () ((initialize . "5") (accessors . "generate")) #f #f 69 12 69 26 ()}
        {Lisp-Entry "get-drag-tolerance" accessor () () #f #f 69 73 69 81 ()}
        {Lisp-Entry "set-drag-tolerance" accessor () () #f #f 69 73 69 81 ()}
        {Lisp-Entry "enabled?" property () ((initialize . "#t") (accessors . "explicit")) #f #f 70 12 70 20 ()}
        {Lisp-Entry "outline-view" property () ((initialize . "#f") (accessors . "generate")) #f #f 71 12 71 24 ()}
        {Lisp-Entry "get-outline-view" accessor () () #f #f 71 73 71 81 ()}
        {Lisp-Entry "set-outline-view" accessor () () #f #f 71 73 71 81 ()}
        {Lisp-Entry "offscreen?" property () ((initialize . "#f") (accessors . "explicit")) #f "<bool>" 72 12 72 22 ("bool" "<bool>")}
        {Lisp-Entry "scaling" property () ((initialize . "#f") (accessors . "explicit")) #f #f 73 12 73 19 ()}
        {Lisp-Entry "rotation" property () ((initialize . "#f") (accessors . "explicit")) #f #f 74 12 74 20 ()}
        {Lisp-Entry "layer" property () ((initialize . "0") (accessors . "explicit")) #f #f 76 12 76 17 ()}
        {Lisp-Entry "effect" property () ((initialize . "#f") (accessors . "explicit")) #f #f 77 12 77 18 ()}
        {Lisp-Entry "user-data" property () ((initialize . "#f") (accessors . "generate")) #f #f 78 12 78 21 ()}
        {Lisp-Entry "get-user-data" accessor () () #f #f 78 73 78 81 ()}
        {Lisp-Entry "set-user-data" accessor () () #f #f 78 73 78 81 ()}
        {Lisp-Entry "disabled-navigate?" property () ((initialize . "#f") (accessors . "generate")) #f #f 79 12 79 30 ()}
        {Lisp-Entry "get-disabled-navigate?" accessor () () #f #f 79 73 79 81 ()}
        {Lisp-Entry "set-disabled-navigate?" accessor () () #f #f 79 73 79 81 ()}
        {Lisp-Entry "focus-gained-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 82 12 82 32 ()}
        {Lisp-Entry "get-focus-gained-handler" accessor () () #f #f 82 73 82 81 ()}
        {Lisp-Entry "set-focus-gained-handler" accessor () () #f #f 82 73 82 81 ()}
        {Lisp-Entry "focus-lose-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 83 12 83 30 ()}
        {Lisp-Entry "get-focus-lose-handler" accessor () () #f #f 83 73 83 81 ()}
        {Lisp-Entry "set-focus-lose-handler" accessor () () #f #f 83 73 83 81 ()}
        {Lisp-Entry "cursor-update-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 84 12 84 33 ()}
        {Lisp-Entry "get-cursor-update-handler" accessor () () #f #f 84 73 84 81 ()}
        {Lisp-Entry "set-cursor-update-handler" accessor () () #f #f 84 73 84 81 ()}
        {Lisp-Entry "mouse-enter-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 85 12 85 31 ()}
        {Lisp-Entry "get-mouse-enter-handler" accessor () () #f #f 85 73 85 81 ()}
        {Lisp-Entry "set-mouse-enter-handler" accessor () () #f #f 85 73 85 81 ()}
        {Lisp-Entry "mouse-hover-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 86 12 86 31 ()}
        {Lisp-Entry "get-mouse-hover-handler" accessor () () #f #f 86 73 86 81 ()}
        {Lisp-Entry "set-mouse-hover-handler" accessor () () #f #f 86 73 86 81 ()}
        {Lisp-Entry "mouse-leave-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 87 12 87 31 ()}
        {Lisp-Entry "get-mouse-leave-handler" accessor () () #f #f 87 73 87 81 ()}
        {Lisp-Entry "set-mouse-leave-handler" accessor () () #f #f 87 73 87 81 ()}
        {Lisp-Entry "mouse-down-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 88 12 88 30 ()}
        {Lisp-Entry "get-mouse-down-handler" accessor () () #f #f 88 73 88 81 ()}
        {Lisp-Entry "set-mouse-down-handler" accessor () () #f #f 88 73 88 81 ()}
        {Lisp-Entry "mouse-move-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 89 12 89 30 ()}
        {Lisp-Entry "get-mouse-move-handler" accessor () () #f #f 89 73 89 81 ()}
        {Lisp-Entry "set-mouse-move-handler" accessor () () #f #f 89 73 89 81 ()}
        {Lisp-Entry "mouse-up-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 90 12 90 28 ()}
        {Lisp-Entry "get-mouse-up-handler" accessor () () #f #f 90 73 90 81 ()}
        {Lisp-Entry "set-mouse-up-handler" accessor () () #f #f 90 73 90 81 ()}
        {Lisp-Entry "drag-move-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 91 12 91 29 ()}
        {Lisp-Entry "get-drag-move-handler" accessor () () #f #f 91 73 91 81 ()}
        {Lisp-Entry "set-drag-move-handler" accessor () () #f #f 91 73 91 81 ()}
        {Lisp-Entry "drag-up-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 92 12 92 27 ()}
        {Lisp-Entry "get-drag-up-handler" accessor () () #f #f 92 73 92 81 ()}
        {Lisp-Entry "set-drag-up-handler" accessor () () #f #f 92 73 92 81 ()}
        {Lisp-Entry "double-click-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 93 12 93 32 ()}
        {Lisp-Entry "get-double-click-handler" accessor () () #f #f 93 73 93 81 ()}
        {Lisp-Entry "set-double-click-handler" accessor () () #f #f 93 73 93 81 ()}
        {Lisp-Entry "current-drop-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 94 12 94 32 ()}
        {Lisp-Entry "get-current-drop-handler" accessor () () #f #f 94 73 94 81 ()}
        {Lisp-Entry "set-current-drop-handler" accessor () () #f #f 94 73 94 81 ()}
        {Lisp-Entry "receive-drop-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 95 12 95 32 ()}
        {Lisp-Entry "get-receive-drop-handler" accessor () () #f #f 95 73 95 81 ()}
        {Lisp-Entry "set-receive-drop-handler" accessor () () #f #f 95 73 95 81 ()}
        {Lisp-Entry "receive-files-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 96 12 96 33 ()}
        {Lisp-Entry "get-receive-files-handler" accessor () () #f #f 96 73 96 81 ()}
        {Lisp-Entry "set-receive-files-handler" accessor () () #f #f 96 73 96 81 ()}
        {Lisp-Entry "context-menu-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 97 12 97 32 ()}
        {Lisp-Entry "get-context-menu-handler" accessor () () #f #f 97 73 97 81 ()}
        {Lisp-Entry "set-context-menu-handler" accessor () () #f #f 97 73 97 81 ()}
        {Lisp-Entry "key-press-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 98 12 98 29 ()}
        {Lisp-Entry "get-key-press-handler" accessor () () #f #f 98 73 98 81 ()}
        {Lisp-Entry "set-key-press-handler" accessor () () #f #f 98 73 98 81 ()}
        {Lisp-Entry "arrow-press-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 99 12 99 31 ()}
        {Lisp-Entry "get-arrow-press-handler" accessor () () #f #f 99 73 99 81 ()}
        {Lisp-Entry "set-arrow-press-handler" accessor () () #f #f 99 73 99 81 ()}
        {Lisp-Entry "escape-press-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 100 12 100 32 ()}
        {Lisp-Entry "get-escape-press-handler" accessor () () #f #f 100 73 100 81 ()}
        {Lisp-Entry "set-escape-press-handler" accessor () () #f #f 100 73 100 81 ()}
        {Lisp-Entry "backspace-press-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 101 12 101 35 ()}
        {Lisp-Entry "get-backspace-press-handler" accessor () () #f #f 101 73 101 81 ()}
        {Lisp-Entry "set-backspace-press-handler" accessor () () #f #f 101 73 101 81 ()}
        {Lisp-Entry "return-press-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 102 12 102 32 ()}
        {Lisp-Entry "get-return-press-handler" accessor () () #f #f 102 73 102 81 ()}
        {Lisp-Entry "set-return-press-handler" accessor () () #f #f 102 73 102 81 ()}
        {Lisp-Entry "tab-press-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 103 12 103 29 ()}
        {Lisp-Entry "get-tab-press-handler" accessor () () #f #f 103 73 103 81 ()}
        {Lisp-Entry "set-tab-press-handler" accessor () () #f #f 103 73 103 81 ()}
        {Lisp-Entry "content-change-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 104 12 104 34 ()}
        {Lisp-Entry "get-content-change-handler" accessor () () #f #f 104 73 104 81 ()}
        {Lisp-Entry "set-content-change-handler" accessor () () #f #f 104 73 104 81 ()}
        {Lisp-Entry "selection-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 105 12 105 29 ()}
        {Lisp-Entry "get-selection-handler" accessor () () #f #f 105 73 105 81 ()}
        {Lisp-Entry "set-selection-handler" accessor () () #f #f 105 73 105 81 ()}
        {Lisp-Entry "action-handler" property () ((initialize . "#f") (accessors . "explicit")) #f #f 106 12 106 26 ()}
        {Lisp-Entry "player" slot () ((initialize . "#f")) #f "<Window+>" 109 8 109 14 ("Window+" "<Window+>")}
        {Lisp-Entry "offscreen" slot () ((initialize . "#f")) #f #f 110 8 110 17 ()}
        {Lisp-Entry "scroller" slot () ((initialize . "#f")) #f #f 111 8 111 16 ()}
        {Lisp-Entry "renderer" slot () ((initialize . "#f") (accessors . "generate")) #f #f 112 8 112 16 ()}
        {Lisp-Entry "get-renderer" accessor () () #f #f 112 73 112 81 ()}
        {Lisp-Entry "set-renderer" accessor () () #f #f 112 73 112 81 ()}
        {Lisp-Entry "transformation" slot () ((initialize . "#f")) #f #f 113 8 113 22 ()}
        {Lisp-Entry "previous-size" slot () ((initialize . "#f")) #f "<Dimension+>" 114 8 114 21 ("Dimension+" "<Dimension+>")}
        {Lisp-Entry "update-locked?" slot () ((initialize . "#f") (getter . "generate")) #f "<bool>" 115 8 115 22 ("bool" "<bool>")}
        {Lisp-Entry "get-update-locked?" accessor () () #f #f 115 70 115 78 ()}
        {Lisp-Entry "scrollee-locked?" slot () ((initialize . "#f")) #f "<bool>" 116 8 116 24 ("bool" "<bool>")}
        {Lisp-Entry "modified?" slot () ((initialize . "#f")) #f "<bool>" 117 8 117 17 ("bool" "<bool>")}
        {Lisp-Entry "hover-history" slot () ((initialize . "#f")) #f #f 118 8 118 21 ()}
        {Lisp-Entry "hover-pulse" slot () ((initialize . "#f")) #f #f 119 8 119 19 ()}
        {Lisp-Entry "tools-info" slot () ((initialize . "#f")) #f #f 120 8 120 18 ()}
        {Lisp-Entry "shortcut-update" method (override) ("action-item") #f #f 123 20 123 35 ("action-item")}
        {Lisp-Entry "conclude" method (override) ("rest") #f #f 131 20 131 28 ("layout-scrollee" "layout" "nextmethod" "rest")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 137 20 137 25 ("size" "position" "title" "name" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "close-with-confirm" method (public virtual) () #f #f 148 26 148 44 ("close")}
        {Lisp-Entry "destroy-component" method (override) () #f #f 152 20 152 37 ("nextmethod" "detach-view-focus" "detach-mouse-in")}
        {Lisp-Entry "destroy" method (override) () #f #f 158 20 158 27 ("invalidate-rect" "invalidate-rect~" "View" "is?" "cairo_matrix_t-free" "transformation" "player" "set!" "set-offscreen?" "self" "view-destroyed" "view-destroyed~" "when" "get-host" "host" "get-rect" "rect" "parent" "let" "nextmethod")}
        {Lisp-Entry "detach-mouse-in" method (protected) () #f #f 179 21 179 36 ("call-mouse-leave" "call-mouse-leave~" "reset-mouse-in" "self" "has-ascendant?" "has-ascendant?~" "and" "when" "get-mouse-in" "mouse-in" "let")}
        {Lisp-Entry "detach-view-focus" method (protected) () #f #f 186 21 186 38 ("reset-focus" "reset-focus~" "player" "eq?" "get-window-focus" "window-focus" "self" "has-ascendant?" "has-ascendant?~" "and" "when" "get-focus" "focus" "let")}
        {Lisp-Entry "component-alias" method (override) ("name") #f #f 200 20 200 35 ("nextmethod" "else" "popup-initiator" ":initiator" "get-root" ":root" "get-guest" ":guest" "get-host" ":host" "case" "name")}
        {Lisp-Entry "get-player" method (override) () #f #f 214 20 214 30 ("player")}
        {Lisp-Entry "set-player" method (override) ("plr") #f #f 218 20 218 30 ("acquire-focus" "acquire-focus~" "and" "nextmethod" "set!" "detach-view-focus" "own-focus" "let" "detach-mouse-in" "player" "neq?" "when" "plr")}
        {Lisp-Entry "in-player?" method (public) () #f #f 228 18 228 28 ("player" "boolean")}
        {Lisp-Entry "get-overlapped" method (public) () #f #f 232 18 232 32 ("get-overlapped" "get-overlapped~" "when" "get-player" "player" "let")}
        {Lisp-Entry "different-overlapped?" method (public) ("window") #f #f 238 18 238 39 ("get-overlapped~" "get-overlapped" "neq?" "not" "or" "window")}
        {Lisp-Entry "get-host" method (public virtual) () #f #f 247 26 247 34 ("Host-View" "find-ascendant")}
        {Lisp-Entry "get-guest" method (public virtual) () #f #f 251 26 251 35 ("get-guest" "get-guest~" "and" "get-host" "host" "let")}
        {Lisp-Entry "install-in-host" method (public virtual) ("host") #f #f 256 26 256 41 ("host")}
        {Lisp-Entry "uninstall-from-host" method (public virtual) ("host") #f #f 260 26 260 45 ("host")}
        {Lisp-Entry "save-guest" method (public virtual) ("designer" "session") #f #f 264 26 264 36 ("session" "designer")}
        {Lisp-Entry "add-guest-preferences" method (public) ("designer" "session" "." "initargs") #f #f 268 18 268 39 ("select?:" "design-events?:" "add-child" "add-child~" "get-size~" "get-position~" "cons" "initargs:" "self" "class-of" "category-identifier" "name:" "get-size" "size:" "get-position" "position:" "Guest-Preferences" "new" "pref" "get-host" "host" "let*" "add-guest-preferences" "unimplemented" "initargs" "session" "designer")}
        {Lisp-Entry "host-activate" method (public virtual) () #f #f 282 26 282 39 ()}
        {Lisp-Entry "host-deactivate" method (public virtual) () #f #f 286 26 286 41 ()}
        {Lisp-Entry "focus-default" method (public virtual) () #f #f 290 26 290 39 ("acquire-focus")}
        {Lisp-Entry "get-text-view" method (public virtual) () #f #f 294 26 294 39 ()}
        {Lisp-Entry "frame-guest?" method (public) () #f #f 298 18 298 30 ("self" "get-guest" "get-guest~" "eq?" "Frame-Host" "is?" "and" "get-host" "host" "let")}
        {Lisp-Entry "dialog-class" method (meta protected virtual) () #f #f 309 34 309 46 ("Dialog")}
        {Lisp-Entry "frame-class" method (meta protected virtual) () #f #f 313 34 313 45 ("Internal-Frame-Host")}
        {Lisp-Entry "palette-class" method (meta protected virtual) () #f #f 317 34 317 47 ("Palette")}
        {Lisp-Entry "docked-class" method (meta protected virtual) () #f #f 321 34 321 46 ("Docked-Host")}
        {Lisp-Entry "toolbar-class" method (meta protected virtual) () #f #f 325 34 325 47 ("Toolbar-Host")}
        {Lisp-Entry "host-icon" method (meta protected virtual) () #f #f 329 34 329 43 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta protected virtual) () #f #f 333 34 333 44 ()}
        {Lisp-Entry "host-position" method (meta protected virtual) () #f #f 337 34 337 47 ()}
        {Lisp-Entry "host-size" method (meta protected virtual) () #f #f 341 34 341 43 ()}
        {Lisp-Entry "host-minimal-size" method (public virtual) () #f #f 345 26 345 43 ("100" "Dimension")}
        {Lisp-Entry "host-workspaces" method (public virtual) () #f #f 349 26 349 41 ()}
        {Lisp-Entry "effective-host-workspaces" method (public) () #f #f 353 18 353 43 ("host-workspaces" "cons" "get-workspaces-preferences" "memq?" "and" "name" "collect-if" "get-children" "get-children~" "get-name" "get-name~" "map" "names" "workspaces" "filter-inexistant-workspaces" "get-host" "get-workspace" "get-workspace~" "host-workspace" "continuation-return" "self" "is?" "when" "resolve-reference" "resolve-reference~" "class" "workspace" "reference" "bind" "association" "for-each" "return" "lambda" "continuation-capture" "get-associations" "get-associations~" "associations" "let" "pref" "pref-workspace" "define")}
        {Lisp-Entry "for-each-view-docked" method (public) ("proc") #f #f 380 18 380 38 ("children" "get-guest" "get-guest~" "Host-View" "for-each-view-docked" "for-each-view-docked~" "Pad-View" "Splitter-View" "is?" "or" "cond" "child" "lambda" "for-each" "proc")}
        {Lisp-Entry "find-view-docked" method (public) ("type") #f #f 390 18 390 34 ("continuation-return" "is?" "when" "guest" "for-each-view-docked" "return" "lambda" "continuation-capture" "type")}
        {Lisp-Entry "find-host" method (public) ("guest-type") #f #f 400 18 400 27 ("children" "get-guest" "get-guest~" "Host-View" "is?" "and" "view" "lambda" "find-if" "guest-type")}
        {Lisp-Entry "find-guest" method (public) ("guest-type") #f #f 407 18 407 28 ("get-guest" "get-guest~" "when" "find-host" "host" "let" "guest-type")}
        {Lisp-Entry "collect-guest" method (public) ("guest-type") #f #f 413 18 413 31 ("children" "get-guest" "get-guest~" "guest" "let" "Host-View" "is?" "when" "view" "lambda" "collect" "guest-type")}
        {Lisp-Entry "get-frame" method (public) () #f #f 422 18 422 27 ("Frame-Host" "find-ascendant")}
        {Lisp-Entry "guest-icon" method (public virtual) () #f #f 426 26 426 36 ("self" "class-of" "host-icon" "host-icon~")}
        {Lisp-Entry "focus-activate" method (public virtual) () #f #f 430 26 430 40 ()}
        {Lisp-Entry "focus-deactivate" method (public virtual) () #f #f 434 26 434 42 ()}
        {Lisp-Entry "maximize" method (public virtual) () #f #f 438 26 438 34 ()}
        {Lisp-Entry "restore" method (public virtual) () #f #f 442 26 442 33 ()}
        {Lisp-Entry "split-view" method (public virtual) () #f #f 446 26 446 36 ()}
        {Lisp-Entry "new-event" method (meta public virtual) ("." "rest") #f #f 455 31 455 40 ("self" "new-frame" "apply" "rest")}
        {Lisp-Entry "tool-preferences" method (public virtual) () #f #f 464 26 464 42 ()}
        {Lisp-Entry "get-tools-info" method () () #f #f 473 11 473 25 ("eq?" "test:" "make-table" "set!" "tools-info" "unless")}
        {Lisp-Entry "get-tool-info" method (public virtual) ("tool-name") #f #f 479 26 479 39 ("get-tools-info" "table-ref" "tool-name")}
        {Lisp-Entry "set-tool-info" method (public virtual) ("tool-name" "info") #f #f 483 26 483 39 ("get-tools-info" "table-set!" "info" "tool-name")}
        {Lisp-Entry "host-install" method (public virtual) () #f #f 492 26 492 38 ()}
        {Lisp-Entry "host-uninstall" method (public virtual) () #f #f 496 26 496 40 ()}
        {Lisp-Entry "client-activate" method (public virtual) () #f #f 500 26 500 41 ()}
        {Lisp-Entry "client-deactivate" method (public virtual) () #f #f 504 26 504 43 ()}
        {Lisp-Entry "get-tools-view" method (public virtual) () #f #f 513 26 513 40 ()}
        {Lisp-Entry "workspace-minimisable?" method (public virtual) () #f #f 517 26 517 48 ()}
        {Lisp-Entry "validate-dialog" method (public virtual) () #f #f 526 26 526 41 ()}
        {Lisp-Entry "get-modal-result" method (public virtual) () #f #f 530 26 530 42 ()}
        {Lisp-Entry "has-dialog-result?" method (public virtual) () #f #f 534 26 534 44 ()}
        {Lisp-Entry "get-component-editor" method (public virtual) () #f #f 543 26 543 46 ()}
        {Lisp-Entry "content-valid?" method (public virtual) () #f #f 552 26 552 40 ()}
        {Lisp-Entry "validate-content" method (public virtual) () #f #f 556 26 556 42 ()}
        {Lisp-Entry "setup-parent" method (override) () #f #f 565 20 565 32 ("get-player" "get-player~" "parent" "if" "set-player" "nextmethod")}
        {Lisp-Entry "set-parent" method (override) ("parent") #f #f 570 20 570 30 ("invalidate-view" "when" "get-player" "get-player~" "and" "set-player" "nextmethod" "view-invalidater" "invalidater" "let" "parent")}
        {Lisp-Entry "get-title" method (public virtual) () #f #f 585 26 585 35 ("title")}
        {Lisp-Entry "set-title" method (public virtual) ("value") #f #f 589 26 589 35 ("adjust-title" "title" "set!" "value")}
        {Lisp-Entry "adjust-title" method (protected virtual) () #f #f 594 29 594 41 ("adjust-size")}
        {Lisp-Entry "initially-visible?" method (override) () #f #f 603 20 603 38 ()}
        {Lisp-Entry "show" method (override) () #f #f 607 20 607 24 ("invalidate-view" "call-layout" "nextmethod")}
        {Lisp-Entry "hide" method (override) () #f #f 613 20 613 24 ("when" "nextmethod" "view-invalidater" "invalidater" "let")}
        {Lisp-Entry "update-displayed" method (protected virtual) () #f #f 620 29 620 45 ()}
        {Lisp-Entry "get-enabled?" method (public virtual) () #f #f 629 26 629 38 ("enabled?")}
        {Lisp-Entry "set-enabled?" method (public virtual) ("flag") #f #f 633 26 633 38 ("invalidate-view" "enabled?" "set!" "flag")}
        {Lisp-Entry "view-enabled?" method (public) () #f #f 638 18 638 31 ("view-enabled?" "view-enabled?~" "View" "parent" "is-not?" "or" "get-enabled?" "and")}
        {Lisp-Entry "get-scaling" method (public) () #f #f 649 18 649 29 ("scaling")}
        {Lisp-Entry "effective-scaling" method (public) () #f #f 653 18 653 35 ("1." "scaling" "or")}
        {Lisp-Entry "set-scaling" method (public) ("value") #f #f 657 18 657 29 ("update-transformation" "scaling" "set!" "value")}
        {Lisp-Entry "scale-view" method (public) ("factor") #f #f 662 18 662 28 ("effective-scaling" "*" "and" "set-scaling" "factor")}
        {Lisp-Entry "get-rotation" method (public) () #f #f 666 18 666 30 ("rotation")}
        {Lisp-Entry "effective-rotation" method (public) () #f #f 670 18 670 36 ("0." "rotation" "or")}
        {Lisp-Entry "set-rotation" method (public) ("value") #f #f 674 18 674 30 ("update-transformation" "rotation" "set!" "value")}
        {Lisp-Entry "get-transformation" method (override) () #f #f 679 20 679 38 ("transformation")}
        {Lisp-Entry "update-transformation" method () () #f #f 683 11 683 32 ("invalidate-view" "invalidate-view~" "parent" "if" "update-scrollbars" "update-displayed" "cairo_matrix_scale" "degree->radian" "cairo_matrix_rotate" "when" "cairo_matrix_init_identity" "cairo_matrix_t-make" "matrix" "let" "rotation" "scaling" "or" "and" "transformation" "set!")}
        {Lisp-Entry "enabled-update" method (override) ("action-item") #f #f 706 20 706 34 ("get-enabled?" "get-enabled?~" "set-enabled?" "action-item")}
        {Lisp-Entry "actionable-reachable?" method (public virtual) () #f #f 710 26 710 47 ("view-visible?")}
        {Lisp-Entry "outline-select" method (public) ("(focus?: focus? #f)") #f #f 719 18 719 32 ("list" "set-selection" "set-selection~" "acquire-focus" "acquire-focus~" "when" "0" "Cell" "new" "cell" "get-selection-mode" "get-selection-mode~" "eq?" "Tree-View" "is?" "and" "if" "elem" "outline-view" "row->line" "row->line~" "line" "outline-row" "row" "let*" "focus?" "focus?:")}
        {Lisp-Entry "outline-row" method (public) () #f #f 728 18 728 29 ("Outline-Row" "find-ascendant")}
        {Lisp-Entry "get-offscreen?" method (override) () #f #f 737 20 737 34 ("offscreen?")}
        {Lisp-Entry "set-offscreen?" method (override) ("flag" "<bool>") #f #f 741 20 741 34 ("close-offscreen" "not" "set!" "offscreen?" "neq?" "when" "bool" "<bool>" "flag")}
        {Lisp-Entry "get-layer" method (override) () #f #f 753 20 753 29 ("layer")}
        {Lisp-Entry "set-layer" method (override) ("value") #f #f 757 20 757 29 ("layer" "set!" "value")}
        {Lisp-Entry "get-effect" method (override) () #f #f 766 20 766 30 ("effect")}
        {Lisp-Entry "set-effect" method (override) ("value") #f #f 770 20 770 30 ("effect" "set!" "value")}
        {Lisp-Entry "default-position" method (override) () #f "<Point>" 779 20 779 36 ("0" "Point" "<Point>")}
        {Lisp-Entry "set-position" method (override) ("pos" "<Point>") #f #f 783 20 783 32 ("position-change" "invalidate-rect" "invalidate-rect~" "new" "set!" "self" "acquire" "acquire~" "old" "get-bounds" "bounds" "let*" "View" "parent" "is?" "player" "and" "inval?" "let" "position" "/=" "when" "Point" "<Point>" "pos")}
        {Lisp-Entry "set-position-noupdate" method (package) ("pos" "<Point>") #f #f 798 19 798 40 ("position-change" "set!" "position" "/=" "when" "Point" "<Point>" "pos")}
        {Lisp-Entry "default-size" method (override) () #f "<Dimension>" 809 20 809 32 ("100" "Dimension" "<Dimension>")}
        {Lisp-Entry "minimal-size" method (public virtual) () #f #f 813 26 813 38 ()}
        {Lisp-Entry "preferred-size" method (public virtual) () #f "<Dimension>" 817 26 817 40 ("get-size" "Dimension" "<Dimension>")}
        {Lisp-Entry "preferred-width" method (public virtual) () #f "<fx>" 820 26 820 41 ("preferred-size" "get-width" "get-width~" "fx" "<fx>")}
        {Lisp-Entry "preferred-height" method (public virtual) () #f "<fx>" 823 26 823 42 ("preferred-size" "get-height" "get-height~" "fx" "<fx>")}
        {Lisp-Entry "fit-size" method (public virtual) () #f #f 827 26 827 34 ()}
        {Lisp-Entry "invalidated-size" method () ("sz") #f #f 831 11 831 27 ("rect-union" "self" "acquire" "acquire~" "size-rect" "new" "get-bounds" "old" "let" "View" "parent" "is?" "player" "and" "when" "sz")}
        {Lisp-Entry "set-size" method (override) ("sz" "<Dimension>") #f #f 838 20 838 28 ("invalidate-rect" "invalidate-rect~" "adjust-fit" "adjust-fit~" "parent" "content-size-change" "scroller" "unless" "size-change" "set!" "invalidated-size" "let" "size" "/=" "when" "Dimension" "<Dimension>" "sz")}
        {Lisp-Entry "set-size-noevent" method (override) ("sz" "<Dimension>") #f #f 851 20 851 36 ("parent" "invalidate-rect" "invalidate-rect~" "set!" "invalidated-size" "let" "size" "/=" "when" "Dimension" "<Dimension>" "sz")}
        {Lisp-Entry "set-preferred-size" method (public) () #f #f 859 18 859 36 ("preferred-size" "set-size")}
        {Lisp-Entry "set-preferred-width" method (public) () #f #f 862 18 862 37 ("preferred-width" "set-width")}
        {Lisp-Entry "set-preferred-height" method (public) () #f #f 865 18 865 38 ("preferred-height" "set-height")}
        {Lisp-Entry "layout-view" method (public) () #f #f 874 18 874 29 ("layout-drawing")}
        {Lisp-Entry "front-view" method (public) () #f #f 883 18 883 28 ("children" "last")}
        {Lisp-Entry "back-view" method (public) () #f #f 887 18 887 27 ("children" "first")}
        {Lisp-Entry "send-before" method (override) ("target") #f #f 891 20 891 31 ("invalidate-view" "nextmethod" "target")}
        {Lisp-Entry "bring-to-front" method (override) () #f #f 896 20 896 34 ("invalidate-view" "nextmethod" "front?" "unless")}
        {Lisp-Entry "send-to-back" method (override) () #f #f 902 20 902 32 ("invalidate-view" "nextmethod" "back?" "unless")}
        {Lisp-Entry "front-child?" method (override) ("child") #f #f 908 20 908 32 ("children" "last" "eq?" "child")}
        {Lisp-Entry "back-child?" method (override) ("child") #f #f 912 20 912 31 ("children" "first" "eq?" "child")}
        {Lisp-Entry "send-child-to-front" method (override) ("child") #f #f 916 20 916 39 ("move-to-tail!" "children" "set!" "child")}
        {Lisp-Entry "send-child-to-back" method (override) ("child") #f #f 920 20 920 38 ("move-to-head!" "children" "set!" "child")}
        {Lisp-Entry "scrollee-size" method (public virtual) () #f "<Dimension>" 929 26 929 39 ("scrollee-height" "scrollee-width" "new" "Dimension" "<Dimension>")}
        {Lisp-Entry "scrollee-width" method (protected virtual) () #f #f 933 29 933 43 ("get-width")}
        {Lisp-Entry "scrollee-height" method (protected virtual) () #f #f 937 29 937 44 ("get-height")}
        {Lisp-Entry "dynamic-scrollee?" method (protected virtual) () #f #f 943 29 943 46 ()}
        {Lisp-Entry "dynamic-set-scrollee-size" method (protected virtual) () #f #f 947 29 947 54 ("scrollee-size" "set-size")}
        {Lisp-Entry "with-update-locked" method (public) ("proc") #f #f 956 18 956 36 ("invalidate-update" "set!" "begin" "unwind-protect" "update-locked?" "if" "proc")}
        {Lisp-Entry "invalidate-update" method (protected virtual) () #f #f 967 29 967 46 ("update-scrollbars" "invalidate-view")}
        {Lisp-Entry "render" method (override) ("surface" "draw-self?" "nodes" "context") #f #f 977 20 977 26 ("nextmethod" "self" "render" "render~" "renderer" "if" "context" "nodes" "draw-self?" "surface")}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 988 20 988 35 ("fill-rect" "fill-rect~" "get-bounds" "bounds" "when" "get-drawing-background" "background" "let" "context" "surface")}
        {Lisp-Entry "get-drawing-background" method (public virtual) ("context") #f #f 995 26 995 48 ("background" "context")}
        {Lisp-Entry "draw-content" method (override) ("surface" "context") #f #f 999 20 999 32 ("draw" "effective-font" "set-font" "set-font~" "context" "surface")}
        {Lisp-Entry "get-look" method (public virtual) () #f #f 1009 26 1009 34 ()}
        {Lisp-Entry "get-offscreen" method (override) ("surface" "<Surface+>") #f #f 1018 20 1018 33 ("new-offscreen" "set!" "close-offscreen" "renew-context" "renew-context~" "begin" "<=" "get-size" "get-size~" "offscreen" "and" "if" "get-height" "get-height~" "height" "size" "get-width" "get-width~" "width" "let" "Surface+" "<Surface+>" "surface")}
        {Lisp-Entry "new-offscreen" definition () ("surface" "<Surface+>" "width" "<fx>" "height" "<fx>") #f #f 1033 15 1033 28 ("Dimension" "Memory-Surface" "new" "height" "fx" "<fx>" "width" "Surface+" "<Surface+>" "surface")}
        {Lisp-Entry "close-offscreen" method (package) () #f #f 1037 19 1037 34 ("set!" "close" "close~" "offscreen" "when")}
        {Lisp-Entry "get-opaque?" method (override) () #f #f 1048 20 1048 31 ("background" "boolean")}
        {Lisp-Entry "custom-page-setup?" method (public virtual) () #f #f 1057 26 1057 44 ()}
        {Lisp-Entry "get-page-setup" method (public virtual) () #f #f 1061 26 1061 40 ("get-application" "default-page-setup" "default-page-setup~")}
        {Lisp-Entry "get-page-setup-designer" method (public virtual) () #f #f 1065 26 1065 49 ("get-application" "default-page-setup-designer" "default-page-setup-designer~")}
        {Lisp-Entry "get-page-setup-parcel" method (public virtual) ("designer") #f #f 1069 26 1069 47 ("get-application" "default-page-setup-parcel" "default-page-setup-parcel~" "designer")}
        {Lisp-Entry "apply-page-setup" method (public virtual) ("designer" "form" "page-setup") #f #f 1073 26 1073 42 ("get-application" "default-apply-page-setup" "default-apply-page-setup~" "page-setup" "form" "designer")}
        {Lisp-Entry "print-document" method (public virtual) () #f #f 1082 26 1082 40 ("self" "platform-print-document")}
        {Lisp-Entry "print-picture" method (public virtual) () #f #f 1086 26 1086 39 ("self" "platform-print-picture")}
        {Lisp-Entry "print-layout" method (public virtual) ("(from-preview?: from-preview? #f)") #f #f 1090 26 1090 38 ("acquire-focus" "acquire-focus~" "get-guest" "get-guest~" "pane" "client:" "host-title:" "Page-Editor" "new-frame" "frame" "invalidate-window" "invalidate-window~" "layout-view" "layout-view~" "not" "print-preview" "locate" "locate~" "set-visible?" "set-visible?~" "Page-Toolbar" "find-docked" "find-docked~" "toolbar" "get-toplevel" "toplevel" "apply-preferences" "apply-preferences~" "previous:" "page" "name:" "Page-Workspace" "new" "ws" "selected-workspace" "current" "current-document" "client" "let*" "lambda" "with-locked-update" "from-preview?" "from-preview?:")}
        {Lisp-Entry "print-layout-debug" method (public virtual) ("(from-preview?: from-preview? #f)") #f #f 1107 26 1107 44 ("acquire-focus" "acquire-focus~" "get-guest" "get-guest~" "pane" "client:" "host-title:" "Page-Editor" "new-frame" "frame" "current-document" "client" "let" "from-preview?" "from-preview?:")}
        {Lisp-Entry "print-preview" method (public virtual) ("(from-layout?: from-layout? #f)") #f #f 1114 26 1114 39 ("acquire-focus" "acquire-focus~" "invalidate-window" "invalidate-window~" "layout-view" "layout-view~" "not" "print-layout" "locate" "locate~" "set-visible?" "set-visible?~" "Preview-Toolbar" "find-docked" "find-docked~" "toolbar" "get-toplevel" "toplevel" "apply-preferences" "apply-preferences~" "pane:" "previous:" "preview" "name:" "Preview-Workspace" "new" "ws" "selected-workspace" "current" "get-guest" "get-guest~" "pane" "self" "client:" "host-visible?:" "host-title:" "Preview-Pane" "new-frame" "frame" "let*" "lambda" "with-locked-update" "from-layout?" "from-layout?:")}
        {Lisp-Entry "print-preview-debug" method (public virtual) ("(from-layout?: from-layout? #f)") #f #f 1131 26 1131 45 ("acquire-focus" "acquire-focus~" "get-guest" "get-guest~" "pane" "self" "client:" "host-title:" "Preview-Pane" "new-frame" "frame" "let" "get-application" "setup-page-setup" "setup-page-setup~" "from-layout?" "from-layout?:")}
        {Lisp-Entry "get-page-area" method (public virtual) ("context") #f #f 1138 26 1138 39 ("context")}
        {Lisp-Entry "get-print-area" method (public virtual) ("context") #f #f 1142 26 1142 40 ("scrollee-size" "0" "Point" "position/size->rect" "context")}
        {Lisp-Entry "paginate" method (public virtual) ("page-width" "page-height") #f #f 1146 26 1146 34 ("get-output" "get-output~" "0" "naturals" "put" "put~" "Rect" "page" "get-top" "get-top~" "v" "*" "get-left" "get-left~" "+" "h" "col" "row" "lambda" "for-each" "List-Factory" "new" "pages" "rows" "fxceiling/" "cols" "rect-height" "height" "rect-width" "width" "get-print-area" "area" "let*" "page-height" "page-width")}
        {Lisp-Entry "with-printing" method (protected) ("proc") #f #f 1164 21 1164 34 ("restore-printing" "when" "setup-printing" "set!" "begin" "unwind-protect" "preserved" "let" "proc")}
        {Lisp-Entry "setup-printing" method (protected virtual) () #f #f 1174 29 1174 43 ("position:" "list" "update-displayed" "0" "Point" "new" "set!" "position" "pos" "let")}
        {Lisp-Entry "restore-printing" method (protected virtual) ("preserved") #f #f 1181 29 1181 45 ("update-displayed" "position:" "getf" "position" "set!" "preserved")}
        {Lisp-Entry "export-picture" method (public) ("(context: context '())" "(where: where 'file)" "(destination: destination #f)") #f #f 1191 18 1191 32 ("default-extension:" "choose-new-file" "or" "export-to-png" "export-to-png~" "paint-drawing" "get-height" "get-width" "0" "Rect" "set-clipper" "set-clipper~" "get-size" "Memory-Surface" "new" "surface" "with" "destination" "destination:" "file" "where" "where:" "context" "context:")}
        {Lisp-Entry "export-picture" method (public) ("(context: context #f)" "(where: where 'file)" "(destination: destination #f)") #f #f 1199 18 1199 32 ("move-pathname" "move-pathname~" "exists?" "exists?~" "when" "extensions:" "default-extension:" "choose-new-file" "or" "dest" "delete-file" "delete-file~" "Cancel-Signal" "catch" "delete-metafile" "delete-metafile~" "set-clipboard-metafile" "eq?" "if" "get-metafile" "get-metafile~" "set!" "1." "get-top" "get-top~" "get-left" "get-left~" "paint-drawing" "with-clip" "with-clip~" "get-print-area" "offset-rect" "content" "with-printing" "file:" "Picture" "new" "picture" "with" "metafile" "lambda" ":wait" "with-cursor" "create-temporary-file" "clipboard" "case" "let" "destination" "destination:" "file" "where" "where:" "context" "context:")}
        {Lisp-Entry "get-scroller" method (public) () #f #f 1230 18 1230 30 ("scroller")}
        {Lisp-Entry "set-scroller" method (public virtual) ("view") #f #f 1234 26 1234 38 ("scroller" "set!" "view")}
        {Lisp-Entry "set-scroll-pos" method (public virtual) ("pos" "(redraw?: redraw? #f)") #f #f 1238 26 1238 40 ("set-scroll-pos" "set-scroll-pos~" "scroller" "when" "redraw?" "redraw?:" "pos")}
        {Lisp-Entry "set-scroll-info" method (public virtual) ("part" "min" "max" "line" "page") #f #f 1243 26 1243 41 ("set-scroll-info" "set-scroll-info~" "scroller" "when" "page" "line" "max" "min" "part")}
        {Lisp-Entry "compute-scroll-info" method (public) () #f #f 1248 18 1248 37 ("values" "horz" "get-width" "hupdate" ">" "get-page-size" "vert" "get-line-size" "get-height" "-" "set!" "0" "scrollbar-size" "if" "adjust" "vupdate" "define" "hscroll?" "hpage" "hline" "hmax" "hmin" "vscroll?" "vpage" "vline" "vmax" "vmin" "let")}
        {Lisp-Entry "update-scrollbars" method (public) () #f #f 1282 18 1282 35 ("horz" "get-hscroll?" "get-hscroll?~" "set-hscroll-needed?" "set-hscroll-needed?~" "vert" "set-scroll-info" "get-vscroll?" "get-vscroll?~" ">" "set-vscroll-needed?" "set-vscroll-needed?~" "compute-scroll-info" "hpage" "hline" "hmax" "hmin" "vpage" "vline" "vmax" "vmin" "receive" "update-locked?" "not" "scroller" "and" "when")}
        {Lisp-Entry "vscroll-needed?" method (public) () #f #f 1293 18 1293 33 (">" "compute-scroll-info" "hpage" "hline" "hmax" "hmin" "vpage" "vline" "vmax" "vmin" "receive")}
        {Lisp-Entry "hscroll-needed?" method (public) () #f #f 1298 18 1298 33 (">" "compute-scroll-info" "hpage" "hline" "hmax" "hmin" "vpage" "vline" "vmax" "vmin" "receive")}
        {Lisp-Entry "scroll" method (public) ("delta" "<Point>" "(redraw?: redraw? #f)") #f #f 1303 18 1303 24 ("get-scrolled-position" "+" "scroll-to" "0" "=" "unless" "redraw?" "redraw?:" "Point" "<Point>" "delta")}
        {Lisp-Entry "scroll-to" method (public) ("dest" "<Point>" "(redraw?: redraw? #f)") #f #f 1308 18 1308 27 ("scroll-view" "scroll-view~" "get-bounds" "get-bounds~" "rect" "get-display" "display" "invalidate-view" "transformation" "if" "scroll-invalidate" "update-scrollbars" "set-scroll-pos" "delta" "set!" "position" "distance->point" "get-display-position" "new-pos" "point->distance" "distance-max" "distance-min" "new-dist" "-" "dimension->distance" "max-dist" "0" "Distance" "min-dist" "get-display-size" "display-size" "get-size" "size" "let*" "/=" "get-scrolled-position" "pos" "let" "get-scroller" "when" "redraw?" "redraw?:" "Point" "<Point>" "dest")}
        {Lisp-Entry "scroll2" method (public) ("delta" "<Point>" "(redraw?: redraw? #f)") #f #f 1332 18 1332 25 ("get-scrolled-position" "+" "scroll-to2" "0" "=" "unless" "redraw?" "redraw?:" "Point" "<Point>" "delta")}
        {Lisp-Entry "scroll-to2" method (public) ("dest" "<Point>" "(redraw?: redraw? #f)") #f #f 1339 18 1339 28 ("get-bounds" "scroll-view2" "scroller" "invalidate-view" "invalidate-view~" "transformation" "if" "scroll-invalidate" "dv" "dh" "update-scrollbars" "set-scroll-pos" "set!" "position" "*" "new" "new-pos" "get-v" "get-v~" "v" "get-h" "get-h~" "max" "min" "fxround" "h" "max-v" "0" "max-h" "get-height" "get-height~" "min-v" "get-width" "get-width~" "fl" "<fl>" "cast" "/" "-" "min-h" "scaling" "1.0" "sc" "get-size~" "display-size" "get-display" "display" "get-size" "size" "let*" "/=" "when" "get-scrolled-position" "pos" "let" "redraw?" "redraw?:" "Point" "<Point>" "dest")}
        {Lisp-Entry "redraw-scrollbars" method (protected virtual) () #f #f 1365 29 1365 46 ()}
        {Lisp-Entry "scroll-invalidate" method (protected virtual) ("delta") #f #f 1369 29 1369 46 ("delta")}
        {Lisp-Entry "scroll-view" method (public) ("delta" "rect" "(clip-rect: clip-rect #f)") #f #f 1373 18 1373 29 ("scroll-window" "scroll-window~" "get-clipper" "get-clipper~" "or" "logical->device" "logical->device~" "acquired" "device->logical" "device->logical~" "surface" "lambda" "with-transformation-surface" "view-visible?" "and" "when" "get-player" "player" "let" "clip-rect" "clip-rect:" "rect" "delta")}
        {Lisp-Entry "scroll-view2" method (public) ("dh" "dv" "rect" "(clip-rect: clip-rect #f)") #f #f 1386 18 1386 30 ("scroll-offscreen2" "scroll-offscreen2~" "get-clipper" "get-clipper~" "or" "logical->device" "logical->device~" "acquired" "surface" "device->logical" "device->logical~" "delta" "view-visible?" "and" "when" "get-root" "root" "get-player" "player" "let" "clip-rect" "clip-rect:" "rect" "dv" "dh")}
        {Lisp-Entry "scroll-offscreen2" method () ("delta" "src-rect" "clip-rect") #f #f 1397 11 1397 28 (">" "+" "Rect" "new" "invalidate-rect" "0" "<" "when" "get-bottom" "get-bottom~" "mb" "get-right" "get-right~" "mr" "get-top" "get-top~" "mt" "get-left" "get-left~" "ml" "let" "fill" "fill~" "draw-rectangle" "draw-rectangle~" "set-source-surface" "set-source-surface~" "get-offscreen" "offscreen" "new-clipper" "rect-union" "modified-rect" "dv" "dh" "offset-rect" "dst-rect" "rect-intersection" "let*" "surface" "lambda" "with-view-surface" "clip-rect" "src-rect" "delta")}
        {Lisp-Entry "get-scrolled-distance" method (public) () #f "<Distance>" 1425 18 1425 39 ("0" "position" "point->distance" "display->view" "nu-" "scroller" "if" "Distance" "<Distance>")}
        {Lisp-Entry "get-scrolled-distance-h" method (public) () #f "<fx>" 1431 18 1431 41 ("get-scrolled-distance" "get-x" "get-x~" "fx" "<fx>")}
        {Lisp-Entry "get-scrolled-distance-v" method (public) () #f "<fx>" 1435 18 1435 41 ("get-scrolled-distance" "get-y" "get-y~" "fx" "<fx>")}
        {Lisp-Entry "get-scrolled-position" method (public) () #f "<Point>" 1439 18 1439 39 ("0" "position" "point->distance" "display->view" "distance->point" "scroller" "if" "Point" "<Point>")}
        {Lisp-Entry "get-scrolled-h" method (public) () #f "<fx>" 1445 18 1445 32 ("get-scrolled-position" "get-h" "get-h~" "fx" "<fx>")}
        {Lisp-Entry "get-scrolled-v" method (public) () #f "<fx>" 1449 18 1449 32 ("get-scrolled-position" "get-v" "get-v~" "fx" "<fx>")}
        {Lisp-Entry "get-scroll-client" method (public virtual) () #f #f 1453 26 1453 43 ("self")}
        {Lisp-Entry "get-line-size" method (public virtual) ("orientation") #f "<fx>" 1457 26 1457 39 ("8" "horz" "13" "vert" "case" "fx" "<fx>" "orientation")}
        {Lisp-Entry "get-page-size" method (public virtual) ("orientation") #f "<fx>" 1463 26 1463 39 ("get-width" "get-width~" "horz" "get-height" "get-height~" "vert" "case" "get-display-size" "size" "let" "fx" "<fx>" "orientation")}
        {Lisp-Entry "with-scrollee-locked" method (public) ("proc") #f #f 1470 18 1470 38 ("set!" "begin" "unwind-protect" "scrollee-locked?" "if" "proc")}
        {Lisp-Entry "layout-scrollee" method (public virtual) () #f #f 1480 26 1480 41 ("update-scrollbars" "lambda" "with-scrollee-locked" "scrollee-locked?" "set-size" "scrollee-size" "size" "layout-scrollee-content" "scroller" "not" "if" "dynamic-set-scrollee-size" "dynamic-scrollee?" "update-locked?" "unless" "get-display-width" "get-right" "right" "-" "0" "Point" "new" "scroll" "<" "when" "get-display-height" "fit" "get-bottom" "bottom" "let" "scroll-to-fit" "define")}
        {Lisp-Entry "layout-scrollee-patch" method (public virtual) () #f #f 1512 26 1512 47 ()}
        {Lisp-Entry "layout-scrollee-content" method (public virtual) () #f #f 1516 26 1516 49 ()}
        {Lisp-Entry "scroll-action" method (package virtual) ("action" "line" "page" "thumb-pos" "orientation") #f #f 1520 27 1520 40 ("orientation" "thumb-pos" "page" "line" "action")}
        {Lisp-Entry "content-size-change" method (public virtual) ("size") #f #f 1529 26 1529 45 ("size")}
        {Lisp-Entry "get-display" method (public) () #f #f 1533 18 1533 29 ("self" "parent" "scroller" "if")}
        {Lisp-Entry "get-display-position" method (public) ("pos" "<Point>") #f "<Point>" 1539 18 1539 38 ("point->distance" "view->display" "distance->point" "Point" "<Point>" "pos")}
        {Lisp-Entry "get-display-size" method (public) () #f "<Dimension>" 1543 18 1543 34 ("get-display" "get-size" "get-size~" "display->view" "Dimension" "<Dimension>")}
        {Lisp-Entry "get-display-width" method (public) () #f "<fx>" 1547 18 1547 35 ("get-display-size" "get-width" "get-width~" "fx" "<fx>")}
        {Lisp-Entry "get-display-height" method (public) () #f "<fx>" 1551 18 1551 36 ("get-display-size" "get-height" "get-height~" "fx" "<fx>")}
        {Lisp-Entry "view->display" method (public) ("shape") #f #f 1555 18 1555 31 ("self" "get-display" "acquire" "acquire~" "shape")}
        {Lisp-Entry "display->view" method (public) ("shape") #f #f 1559 18 1559 31 ("get-display" "self" "acquire" "acquire~" "shape")}
        {Lisp-Entry "scroll-needed" method (public) ("start" "end" "context" "(force-vertical: force-vertical #f)" "(force-horizontal: force-horizontal #f)" "(reposition: reposition #f)" "(center?: center? #f)") #f "<Point>" 1563 18 1563 31 ("vertical" "get-height" "get-height~" "get-y" "get-y~" "cdr" "get-v" "get-v~" "horizontal" "get-width" "get-width~" "get-x" "get-x~" "car" "get-h" "get-h~" "new" "else" "head" "eq?" "not" "2" "quotient" "<" "and" "tail" "neq?" "cond" "0" "*" "fxround" "if" "use-head?" "proc" ">" "big-range?" "+" "end-offset" "-" "start-offset" "let*" "reposition?" "force-direction" "size" "pos" "lambda" "needed" "get-display-size" "display-size" "get-scrolled-distance" "distance" "let" "Point" "<Point>" "center?" "center?:" "reposition" "reposition:" "force-horizontal" "force-horizontal:" "force-vertical" "force-vertical:" "context" "end" "start")}
        {Lisp-Entry "horizontal-scroll-needed" method (public) ("target" "direction") #f "<fx>" 1585 18 1585 42 (">" "forward" "0" "-" "<" "if" "backward" "case" "get-display-width" "+" "end" "get-scrolled-distance-h" "start" "let*" "fx" "<fx>" "direction" "target")}
        {Lisp-Entry "vertical-scroll-needed" method (public) ("target" "direction") #f "<fx>" 1599 18 1599 40 (">" "forward" "0" "-" "<" "if" "backward" "case" "get-display-height" "+" "end" "get-scrolled-distance-v" "start" "let*" "fx" "<fx>" "direction" "target")}
        {Lisp-Entry "default-font" definition () () #f #f 1618 14 1618 26 ("Label")}
        {Lisp-Entry "get-font" method (public) () #f #f 1622 18 1622 26 ("font")}
        {Lisp-Entry "set-font" method (public virtual) ("fnt") #f #f 1626 26 1626 34 ("adjust-size" "font" "set!" "fnt")}
        {Lisp-Entry "effective-font" method (public virtual) () #f #f 1631 26 1631 40 ("default-font" "registered-font" "font" "or")}
        {Lisp-Entry "get-style" method (public) () #f #f 1640 18 1640 27 ("style")}
        {Lisp-Entry "set-style" method (public) ("value") #f #f 1644 18 1644 27 ("style-update" "set!" "style" "neq?" "when" "value")}
        {Lisp-Entry "style-update" method (protected virtual) () #f #f 1650 29 1650 41 ("invalidate-view")}
        {Lisp-Entry "get-background" method (public) () #f #f 1659 18 1659 32 ("background")}
        {Lisp-Entry "set-background" method (public virtual) ("color") #f #f 1663 26 1663 40 ("invalidate-view" "background" "set!" "color")}
        {Lisp-Entry "get-auto-size?" method (public) () #f #f 1673 18 1673 32 ("auto-size?")}
        {Lisp-Entry "set-auto-size?" method (public) ("value") #f #f 1677 18 1677 32 ("adjust-size" "auto-size?" "set!" "value")}
        {Lisp-Entry "adjust-size" method (public) () #f #f 1682 18 1682 29 ("invalidate-view" "set-preferred-size" "else" "set-preferred-height" "height" "set-preferred-width" "width" "case" "auto-size?" "when")}
        {Lisp-Entry "find-mouse-view" method (public) ("pos") #f #f 1696 18 1696 33 ("find-drawing" "get-captured-view" "or" "pos")}
        {Lisp-Entry "first-view" method (public) () #f #f 1706 18 1706 28 ("first" "null?" "if" "get-views" "views" "let")}
        {Lisp-Entry "second-view" method (public) () #f #f 1713 18 1713 29 ("second" "2" "length" ">=" "if" "get-views" "views" "let")}
        {Lisp-Entry "last-view" method (public) () #f #f 1720 18 1720 27 ("last" "null?" "if" "get-views" "views" "let")}
        {Lisp-Entry "get-views" method (public) ("(include-invisibles?: include-invisibles? #f)") #f #f 1727 18 1727 27 ("get-children" "get-visible?" "get-visible?~" "or" "View" "is?" "and" "child" "lambda" "collect-if" "reverse!" "include-invisibles?" "include-invisibles?:")}
        {Lisp-Entry "front-view?" method (public) () #f #f 1735 18 1735 29 ("parent" "first-view" "first-view~" "self" "eq?")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 1744 20 1744 33 ("nextmethod" "view" "find-actions" "cons")}
        {Lisp-Entry "guest-actions" method (override) () #f #f 1749 20 1749 33 ("nextmethod" "guest" "find-actions" "cons")}
        {Lisp-Entry "call-content-change" method () ("origin") #f #f 1759 11 1759 30 ("content-change" "origin:" "list" ":change" "Event" "new" "self" "invoke-handler" "content-change-handler" "if" "origin")}
        {Lisp-Entry "content-change" method (public virtual) ("origin") #f #f 1765 26 1765 40 ("origin")}
        {Lisp-Entry "call-selection-handler" method (public) ("old" "selection" "force?" "user-origin") #f #f 1774 18 1774 40 ("user-origin:" "force?:" ":selection-change" "Selection-Event" "new" "self" "invoke-handler" "selection-handler" "when" "user-origin" "force?" "selection" "old")}
        {Lisp-Entry "get-view-state" method (public virtual) () #f #f 1784 26 1784 40 ()}
        {Lisp-Entry "set-view-state" method (public virtual) ("state") #f #f 1788 26 1788 40 ("state")}
        {Lisp-Entry "get-modified?" method (public virtual) () #f #f 1797 26 1797 39 ("modified?")}
        {Lisp-Entry "set-modified?" method (public virtual) ("state") #f #f 1801 26 1801 39 ("set!" "modified?" "neq?" "when" "state")}
        {Lisp-Entry "position-change" method (public virtual) ("position" "<Point>") #f #f 1811 26 1811 41 ("Point" "<Point>" "position")}
        {Lisp-Entry "size-change" method (public virtual) ("size" "<Dimension>") #f #f 1815 26 1815 37 ("call-layout" "get-finished?" "invalidate-layout" "adjust?" "unless" "resize" "0" "/=" "or" "dv" "-" "dh" "when" "set!" "height" "width" "get-height" "get-height~" "ph" "get-width" "get-width~" "previous-size" "and" "pw" "let" "Dimension" "<Dimension>" "size")}
        {Lisp-Entry "resize" method (protected virtual) ("dh" "<fx>" "dv" "<fx>") #f #f 1832 29 1832 35 ("dv" "fx" "<fx>" "dh")}
        {Lisp-Entry "acquire-focus" method (public) () #f #f 1841 18 1841 31 ("self" "set-focus")}
        {Lisp-Entry "call-focus-gained" method (public) () #f #f 1845 18 1845 35 ("focus-gained" ":focus-gained" "Event" "new" "invoke-handler" "focus-gained-handler" "if" "self" "get-focus-actions" "get-application" "set-focus-actions" "set-focus-actions~")}
        {Lisp-Entry "call-focus-lose" method (public) () #f #f 1852 18 1852 33 ("focus-lose" ":focus-lose" "Event" "new" "self" "invoke-handler" "focus-lose-handler" "if" "get-application" "set-focus-actions" "set-focus-actions~")}
        {Lisp-Entry "call-focus-lost" method (public) () #f #f 1859 18 1859 33 ("focus-lost")}
        {Lisp-Entry "has-focus?" method (public) () #f #f 1863 18 1863 28 ("get-focus" "self" "eq?")}
        {Lisp-Entry "is-focused?" method (public) () #f #f 1867 18 1867 29 ("player" "get-pushed-focuses" "get-pushed-focuses~" "self" "memq?" "has-focus?" "or")}
        {Lisp-Entry "focus-lose" method (public virtual) () #f #f 1872 26 1872 36 ()}
        {Lisp-Entry "focus-lost" method (public virtual) () #f #f 1876 26 1876 36 ()}
        {Lisp-Entry "focus-master" method (public virtual) () #f #f 1880 26 1880 38 ("self")}
        {Lisp-Entry "focus-reset" method (public virtual) () #f #f 1884 26 1884 37 ()}
        {Lisp-Entry "focus-gained" method (public virtual) () #f #f 1888 26 1888 38 ()}
        {Lisp-Entry "focus-delegate" method (public virtual) () #f #f 1892 26 1892 40 ()}
        {Lisp-Entry "focus-update-actions" method (public virtual) () #f #f 1896 26 1896 46 ()}
        {Lisp-Entry "get-focus-container" method (public virtual) () #f #f 1900 26 1900 45 ("Focus-Container" "find-ascendant")}
        {Lisp-Entry "focusable?" method (public virtual) () #f #f 1904 26 1904 36 ("container-focusable?" "container-focusable?~" "not" "or" "get-focus-container" "container" "let" "get-visible?" "in-player?" "and")}
        {Lisp-Entry "ensure-focusable" method (public virtual) () #f #f 1912 26 1912 42 ("ensure-container-focusable" "ensure-container-focusable~" "when" "get-focus-container" "container" "let")}
        {Lisp-Entry "get-action-handler" method (public) () #f #f 1923 18 1923 36 ("action-handler")}
        {Lisp-Entry "set-action-handler" method (public virtual) ("value") #f #f 1927 26 1927 44 ("self" "register-actionable" "register-actionable~" "require-action-item" "action-item" "let" "Action" "is?" "when" "action-handler" "set!" "value")}
        {Lisp-Entry "process-action" method (public virtual) ("sender" "(properties (action-properties))") #f #f 1935 26 1935 40 ("notify-action" "action-properties" "properties" "sender")}
        {Lisp-Entry "action-properties" method (protected virtual) () #f #f 1939 29 1939 46 ()}
        {Lisp-Entry "notify-action" method (public) ("sender" "properties") #f #f 1943 18 1943 31 ("self" "notify-handler" "action-handler" "when" "properties" "sender")}
        {Lisp-Entry "dispatch-receive-files" method (protected) ("pos" "files") #f #f 1953 21 1953 43 ("call-receive-files" "call-receive-files~" "self" "acquire" "acquire~" "view-pos" "when" "find-mouse-view" "view" "let" "files" "pos")}
        {Lisp-Entry "call-receive-files" method (public) ("pos" "files") #f #f 1960 18 1960 36 ("receive-files" "files:" "position:" ":receive-files" "Event" "new" "self" "invoke-handler" "receive-files-handler" "if" "files" "pos")}
        {Lisp-Entry "receive-files" method (public virtual) ("pos" "pathnames") #f #f 1966 26 1966 39 ("receive-files" "receive-files~" "set-current-stage" "when" "include-self?:" "Stage" "find-ascendant" "stage" "get-application" "appl" "let" "pathnames" "pos")}
        {Lisp-Entry "call-cursor-update" method (public) ("pos") #f #f 1979 18 1979 36 ("cursor-update" ":set-cursor" "Cursor-Event" "new" "self" "invoke-handler" "cursor-update-handler" "if" "pos")}
        {Lisp-Entry "cursor-update" method (public virtual) ("pos") #f #f 1985 26 1985 39 (":arrow" "set-cursor" "current-drag-drop" "unless" "pos")}
        {Lisp-Entry "mouse-pressed?" method (public) () #f #f 1990 18 1990 32 ("mouse-down?")}
        {Lisp-Entry "mouse-right-pressed?" method (public) () #f #f 1994 18 1994 38 ("get-mouse-right-down?")}
        {Lisp-Entry "mouse-in?" method (public) () #f #f 1998 18 1998 27 ("get-mouse-in" "self" "eq?")}
        {Lisp-Entry "mouse-over?" method (public) () #f #f 2002 18 2002 29 ("mouse-position" "over-view?")}
        {Lisp-Entry "over-view?" method (public) ("point") #f #f 2006 18 2006 28 ("in-rect?" "get-bounds" "bounds" "let" "point")}
        {Lisp-Entry "mouse-position" method (public) () #f #f 2011 18 2011 32 ("mouse-position" "mouse-position~" "acquire" "get-root" "root" "get-player" "player" "let")}
        {Lisp-Entry "call-mouse-hover" method () ("pos") #f #f 2022 11 2022 27 ("popup-tooltip" "get-tooltip?" "when" "mouse-hover" ":mouse-hover" "Mouse-Event" "new" "self" "invoke-handler" "mouse-hover-handler" "if" "pos")}
        {Lisp-Entry "dispatch-mouse-down" method (protected) ("h" "v") #f #f 2030 21 2030 40 ("call-cursor-update" "call-cursor-update~" "call-mouse-down" "call-mouse-down~" "mouse-activate" "mouse-activate~" "focused-host?" "not" "get-host" "get-host~" "host" "mouse-activate?" "mouse-activate?~" "mouse-copy" "mouse-copy~" "alt-down?" "and" "unless" "set-mouse-down-point" "set-mouse-down-view" "set-mouse-down?" "self" "acquire" "acquire~" "acquired" "get-focus" "actual-focus" "let" "mouse-down" "event:" "close-popups" "close-popups~" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "call-mouse-down" method (public) ("pos") #f #f 2049 18 2049 33 ("mouse-down" ":mouse-down" "Mouse-Event" "new" "self" "invoke-handler" "mouse-down-handler" "if" "pos")}
        {Lisp-Entry "dispatch-mouse-move" method (protected) ("h" "v") #f #f 2055 21 2055 40 ("process-mouse-move" "process-mouse-move~" "process-drag-move" "process-drag-move~" "call-cursor-update" "call-cursor-update~" "self" "mouse-down-view" "acquire" "acquire~" "acquired" "mouse-down?" "if" "track-tooltip" "track-tooltip~" "current-drag-drop" "*current-tooltip-context*" "track-mouse-leave" "call-mouse-enter" "call-mouse-enter~" "set-mouse-in" "cancel-tooltip-tracking" "in-tooltip?" "is?" "or" "unless" "get-handle" "get-handle~" "cancel-mouse-leave-tracking" "call-mouse-leave" "call-mouse-leave~" "get-mouse-in" "neq?" "Tooltip" "get-overlapped" "is-not?" "and" "get-player" "get-player~" "player" "when" "find-mouse-view" "view" "Point" "new" "pos" "let" "v" "h")}
        {Lisp-Entry "process-mouse-move" method () ("pos") #f #f 2082 11 2082 29 ("call-mouse-move" "process-tooltip" "*current-tooltip-context*" "when" "pos")}
        {Lisp-Entry "call-mouse-move" method () ("pos") #f #f 2088 11 2088 26 ("mouse-move" ":mouse-move" "Mouse-Event" "new" "self" "invoke-handler" "mouse-move-handler" "if" "pos")}
        {Lisp-Entry "dispatch-mouse-up" method (protected) ("h" "v") #f #f 2094 21 2094 38 ("set-delayed-mouse-action" "action" "get-delayed-mouse-action" "process-mouse-up" "process-mouse-up~" "call-cursor-update" "call-cursor-update~" "acquired" "let" "self" "acquire" "acquire~" "mouse-down-view" "process-drag-up" "process-drag-up~" "mouse-down?" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "process-mouse-up" method () ("pos") #f #f 2109 11 2109 27 ("call-mouse-up" "drag-drop" "current-drag-drop" "when" "pos")}
        {Lisp-Entry "call-mouse-up" method () ("pos") #f #f 2115 11 2115 24 ("mouse-up" ":mouse-up" "Mouse-Event" "new" "self" "invoke-handler" "mouse-up-handler" "if" "pos")}
        {Lisp-Entry "process-drag-move" method () ("pos") #f #f 2121 11 2121 28 ("call-drag-move" "drag-follow" "drag-start" "get-drag-drop" "drag-drop" "let" "allow-start-drag?" "when" "begin" "get-source" "get-source~" "get-view" "get-view~" "current-drag-drop" "not" "or" "get-draggable?" "mouse-down-view" "self" "eq?" "and" "if" "pos")}
        {Lisp-Entry "allow-start-drag?" method (protected virtual) ("pos") #f #f 2133 29 2133 46 ("drag-tolerance" "mouse-down-point" "near?" "current-drag-drop" "not" "mouse-down?" "and" "pos")}
        {Lisp-Entry "call-drag-move" method () ("pos") #f #f 2137 11 2137 25 ("drag-move" ":drag-move" "Mouse-Event" "new" "self" "invoke-handler" "drag-move-handler" "if" "pos")}
        {Lisp-Entry "process-drag-up" method () ("pos" "(dragging? (current-drag-drop))") #f #f 2143 11 2143 26 ("call-drag-up" "player" "when" "set-mouse-down-point" "set-mouse-down-view" "set-mouse-down?" "current-drag-drop" "dragging?" "pos")}
        {Lisp-Entry "call-drag-up" method () ("pos" "dragging?") #f #f 2151 11 2151 23 ("drag-up" ":drag-up" "Mouse-Event" "new" "self" "invoke-handler" "drag-up-handler" "if" "dragging?" "pos")}
        {Lisp-Entry "dispatch-double-click" method (protected) ("h" "v") #f #f 2157 21 2157 42 ("call-double-click" "call-double-click~" "mouse-activate" "mouse-activate~" "focused-host?" "not" "and" "get-host" "get-host~" "host" "mouse-activate?" "mouse-activate?~" "set-mouse-down-point" "set-mouse-down-view" "set-mouse-down?" "self" "acquire" "acquire~" "acquired" "let" "double-click" "event:" "close-popups" "close-popups~" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "call-double-click" method (public virtual) ("pos") #f #f 2173 26 2173 43 ("double-click" ":double-click" "Mouse-Event" "new" "self" "invoke-handler" "double-click-handler" "if" "pos")}
        {Lisp-Entry "dispatch-context-menu" method (protected) ("h" "v") #f #f 2179 21 2179 42 ("self" "acquire" "acquire~" "call-context-menu" "call-context-menu~" "context-menu" "event:" "close-popups" "close-popups~" "view-enabled?" "view-enabled?~" "and" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "call-context-menu" method (public) ("pos") #f #f 2187 18 2187 35 ("context-menu" ":context-menu" "Mouse-Event" "new" "self" "invoke-handler" "context-menu-handler" "if" "pos")}
        {Lisp-Entry "dispatch-middle-mouse-down" method (protected) ("h" "v") #f #f 2193 21 2193 47 ("self" "acquire" "acquire~" "middle-mouse-down" "middle-mouse-down~" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "dispatch-middle-mouse-up" method (protected) ("h" "v") #f #f 2200 21 2200 45 ("self" "acquire" "acquire~" "middle-mouse-up" "middle-mouse-up~" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "dispatch-right-mouse-down" method (protected) ("h" "v") #f #f 2207 21 2207 46 ("self" "acquire" "acquire~" "right-mouse-down" "right-mouse-down~" "when" "set-mouse-right-down?" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "dispatch-right-mouse-up" method (protected) ("h" "v") #f #f 2215 21 2215 44 ("self" "acquire" "acquire~" "right-mouse-up" "right-mouse-up~" "when" "set-mouse-right-down?" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "call-mouse-enter" method () () #f #f 2223 11 2223 27 ("mouse-enter" ":mouse-enter" "Mouse-Event" "new" "self" "invoke-handler" "mouse-enter-handler" "if")}
        {Lisp-Entry "call-mouse-leave" method () () #f #f 2229 11 2229 27 ("mouse-leave" ":mouse-leave" "Mouse-Event" "new" "self" "invoke-handler" "mouse-leave-handler" "if" "close-self-tooltip" "cancel-hovering")}
        {Lisp-Entry "mouse-hover" method (public virtual) ("pos") #f #f 2237 26 2237 37 ("pos")}
        {Lisp-Entry "mouse-wheel" method (public virtual) ("pos" "delta") #f #f 2241 26 2241 37 ("0" "3" "quotient" "Point" "new" "scroll" "scroll~" "shift-down?" "if" "get-client" "get-client~" "client" "when" "Scroller-View" "find-ascendant" "scroller" "let" "delta" "pos")}
        {Lisp-Entry "mouse-enter" method (public virtual) () #f #f 2251 26 2251 37 ()}
        {Lisp-Entry "mouse-leave" method (public virtual) () #f #f 2255 26 2255 37 ()}
        {Lisp-Entry "mouse-down" method (public virtual) ("pos") #f #f 2259 26 2259 36 ("pos")}
        {Lisp-Entry "mouse-move" method (public virtual) ("pos") #f #f 2263 26 2263 36 ("pos")}
        {Lisp-Entry "mouse-up" method (public virtual) ("pos") #f #f 2267 26 2267 34 ("pos")}
        {Lisp-Entry "drag-move" method (public virtual) ("pos") #f #f 2271 26 2271 35 ("pos")}
        {Lisp-Entry "drag-up" method (public virtual) ("pos" "." "rest") #f #f 2275 26 2275 33 ("rest" "pos")}
        {Lisp-Entry "double-click" method (public virtual) ("pos") #f #f 2279 26 2279 38 ("call-mouse-down" "pos")}
        {Lisp-Entry "with-context-click" method (public virtual) ("pos" "proc") #f #f 2283 26 2283 44 ("proc" "pos")}
        {Lisp-Entry "context-menu" method (public virtual) ("pos") #f #f 2287 26 2287 38 ("pos")}
        {Lisp-Entry "get-context-menu" method (public virtual) () #f #f 2291 26 2291 42 ()}
        {Lisp-Entry "middle-mouse-down" method (public virtual) ("pos") #f #f 2295 26 2295 43 ("mouse-down" "pos")}
        {Lisp-Entry "middle-mouse-up" method (public virtual) ("pos") #f #f 2299 26 2299 41 ("mouse-up" "pos")}
        {Lisp-Entry "right-mouse-down" method (public virtual) ("pos") #f #f 2303 26 2303 42 ("pos")}
        {Lisp-Entry "right-mouse-up" method (public virtual) ("pos") #f #f 2307 26 2307 40 ("pos")}
        {Lisp-Entry "mouse-activate?" method (public virtual) () #f #f 2311 26 2311 41 ()}
        {Lisp-Entry "mouse-view" method (public) () #f #f 2315 18 2315 28 ("get-mouse-in" "get-captured-view" "or")}
        {Lisp-Entry "Hovering-Tolerance" definition () () #f #f 2324 14 2324 32 ("3")}
        {Lisp-Entry "Hovering-Time" definition () () #f #f 2327 14 2327 27 ("0.5")}
        {Lisp-Entry "Hovering-Steps" definition () () #f #f 2330 14 2330 28 ("5")}
        {Lisp-Entry "track-hovering" method (public) ("(time: time Hovering-Time)") #f #f 2334 18 2334 32 ("0" "delay:" "hovering" "Pulse" "new" "hover-pulse" "fl" "<fl>" "cast" "/" "period" "1" "-" "tail" "set-cdr!" "call-mouse-hover" "begin" "Hovering-Tolerance" "distance" "point" "lambda" "every?" "cons" "set!" "Hovering-Steps" "length" "<" "mouse-position" "pos" "let" "hover-history" "when" "cancel-hovering" "self" "mouse-view" "neq?" "if" "start" "check-hovering" "define" "Hovering-Time" "time" "time:")}
        {Lisp-Entry "cancel-hovering" method (public) () #f #f 2358 18 2358 33 ("hover-history" "set!" "close" "close~" "hover-pulse" "when")}
        {Lisp-Entry "*current-tooltip-context*" definition (package) () #f #f 2370 22 2370 47 ()}
        {Lisp-Entry "*recent-tooltip-close*" definition () () #f #f 2373 14 2373 36 ()}
        {Lisp-Entry "*last-tooltip-position*" definition () () #f #f 2376 14 2376 37 ()}
        {Lisp-Entry "track-tooltip" method () () #f #f 2380 11 2380 24 ("0.1" "time:" "track-hovering" "if" "get-player" "get-tooltip?" "when" "current-time" "time->seconds" "<" "*recent-tooltip-close*" "and" "recently-closed?" "define")}
        {Lisp-Entry "cancel-tooltip-tracking" method () () #f #f 2390 11 2390 34 ("close-tooltip" "cancel-hovering")}
        {Lisp-Entry "reset-tooltip" method (public) () #f #f 2395 18 2395 31 ("cancel-tooltip-tracking")}
        {Lisp-Entry "in-tooltip?" method () ("pos") #f #f 2399 11 2399 22 ("self" "acquire" "acquire~" "in-rect?" "get-bounds" "get-bounds~" "rect" "get-view" "get-view~" "view" "let" "*current-tooltip-context*" "when" "pos")}
        {Lisp-Entry "process-tooltip" method () ("pos") #f #f 2407 11 2407 26 ("reset-tooltip" "nu=?" "get-overlapped~" "eq?" "and" "get-tooltip-bounds" "new-bounds" "get-bounds" "get-bounds~" "bounds" "*current-tooltip-context*" "get-view" "get-view~" "view" "Tooltip" "is?" "unless" "get-overlapped" "overlapped" "let" "pos")}
        {Lisp-Entry "popup-tooltip" method () ("pos") #f #f 2418 11 2418 24 ("reset-tooltip" "set-tooltip" "set-tooltip~" "get-padding" "get-padding~" "get-position" "get-position~" "get-font" "get-font~" "get-tooltip-context" "*current-tooltip-context*" "set!" "close-tooltip" "in-tooltip?" "current-drag-drop" "mouse-down?" "unless" "21" "else" "9" ":ibeam" "case" "get-cursor" "cursor" "border:" "Tooltip" "class:" "padding:" "popup" "get-cursor-height" "0" "or" "set-preferred-size" "set-preferred-size~" "set-font" "set-font~" "when" "solid" "border-type:" "Border-View" "border" "let" "padding" "position" "font" "new-tooltip" "title:" "Tooltip-Label" "2" "scrollee-content-size" "scrollee-content-size~" "nu+" "set-size" "set-size~" "set-text" "set-text~" "get-model" "get-model~" "text-model" "get-text" "get-text~" "text-view" "100" "4000" "Dimension" "size:" "Tooltip-Text" "new" "view" "let*" "pair?" "get-formatted-tooltip?" "if" "text" "new-tooltip-view" "nu=?" "*last-tooltip-position*" "and" "same-position?" "define" "pos")}
        {Lisp-Entry "update-tooltip" method (public) ("text") #f #f 2463 18 2463 32 ("layout-view" "layout-view~" "get-size" "get-size~" "6" "scrollee-content-size" "scrollee-content-size~" "nu+" "get-model" "get-model~" "set-text" "set-text~" "100" "4000" "Dimension" "set-size" "set-size~" "get-text" "get-text~" "text-view" "view" "get-root" "get-root~" "first-child" "first-child~" "border" "get-tooltip" "get-tooltip~" "tooltip" "let*" "*current-tooltip-context*" "when" "text")}
        {Lisp-Entry "close-self-tooltip" method (virtual) () #f #f 2476 19 2476 37 ("close-tooltip" "get-view" "get-view~" "self" "eq?" "*current-tooltip-context*" "and" "when")}
        {Lisp-Entry "close-tooltip" method () () #f #f 2481 11 2481 24 ("0.5" "current-time" "time->seconds" "+" "*recent-tooltip-close*" "set!" "close-popup" "opened?" "opened?~" "and" "get-tooltip" "get-tooltip~" "tooltip" "let" "*current-tooltip-context*" "when")}
        {Lisp-Entry "get-selected-element" method (public) ("(class: class Radio-Button)" "(group: group #f)") #f #f 2495 18 2495 38 ("get-name" "get-name~" "when" "children" "get-selected?" "get-selected?~" "get-group" "get-group~" "eqv?" "is?" "and" "child" "lambda" "find-if" "element" "let" "group" "group:" "Radio-Button" "class" "class:")}
        {Lisp-Entry "set-selected-element" method (public) ("name" "(class: class Radio-Button)" "(group: group #f)") #f #f 2506 18 2506 38 ("error" "unless" "children" "set!" "set-selected?" "set-selected?~" "get-name" "get-name~" "eq?" "selected?" "get-group" "get-group~" "eqv?" "is?" "and" "when" "child" "lambda" "for-each" "found?" "let" "group" "group:" "Radio-Button" "class" "class:" "name")}
        {Lisp-Entry "unselect-elements" method (public) ("(class: class Radio-Button)" "(group: group #f)") #f #f 2520 18 2520 35 ("children" "unselect" "unselect~" "get-group" "get-group~" "eqv?" "is?" "and" "when" "child" "lambda" "for-each" "group" "group:" "Radio-Button" "class" "class:")}
        {Lisp-Entry "track-popup-menu" method (public) ("menu" "pos" "(alternate-position: alternate-position #f)" "(initiator: initiator self)") #f #f 2533 18 2533 34 ("push-focus" "Menu-Transient" "class:" "popup" "let" "clear-highlighted" "clear-highlighted~" "unless" "error" "Context-Menu" "is-not?" "if" "get-children" "get-children~" "get-visible?" "get-visible?~" "not" "item" "lambda" "every?" "all-invisible?" "define" "self" "initiator" "initiator:" "alternate-position" "alternate-position:" "pos" "menu")}
        {Lisp-Entry "get-context-text" method (override) () #f #f 2553 20 2553 36 ()}
        {Lisp-Entry "mouse-copy" method (public virtual) ("pos" "destination") #f #f 2562 26 2562 36 ("mouse-insert" "mouse-insert~" "not" "if" "mouse-data" "data" "let" "destination" "pos")}
        {Lisp-Entry "mouse-data" method (public virtual) ("pos") #f #f 2570 26 2570 36 ("pos")}
        {Lisp-Entry "mouse-insert" method (public virtual) ("object") #f #f 2574 26 2574 38 ("object")}
        {Lisp-Entry "to-desktop" method (public) ("shape") #f #f 2583 18 2583 28 ("self" "acquire" "acquire~" "get-root" "root" "get-player" "player" "get-desktop" "desktop" "let" "shape")}
        {Lisp-Entry "from-desktop" method (public) ("shape") #f #f 2590 18 2590 30 ("acquire~" "acquire" "get-root" "root" "get-player" "player" "get-desktop" "desktop" "let" "shape")}
        {Lisp-Entry "popup" method (public) ("view" "<View>" "position" "<Point>" "(padding: padding #f)" "(alternate-position: alternate-position #f)" "(initiator: initiator self)" "(class: class Popup)" "(border: border #f)" "(fade-speed: fade-speed #f)" "(effect: effect #f)" "(close-behavior: close-behavior #f)") #f #f 2602 18 2602 23 ("fade-in" "fade-in~" "set-effect" "set-effect~" "layout-view" "layout-view~" "set-visible?" "set-visible?~" "set-size" "set-size~" "set-position" "set-position~" "get-root" "get-root~" "set-parent" "set-parent~" "set-initiator" "set-initiator~" "size:" "fit-point" "position:" "popup~" "popup" "raised" "border-type:" "name:" "Border-View" "new" "0" "or" "4" "Dimension" "get-size" "get-size~" "+" "size" "to-desktop" "and" "alternate" "get-work-area" "rect-size" "max" "get-player" "player" "let*" "close-behavior" "close-behavior:" "effect" "effect:" "fade-speed" "fade-speed:" "border" "border:" "Popup" "class" "class:" "self" "initiator" "initiator:" "alternate-position" "alternate-position:" "padding" "padding:" "Point" "<Point>" "position" "View" "<View>" "view")}
        {Lisp-Entry "close-current-popup" method (package) () #f #f 2623 19 2623 38 ("close-popup" "Popup" "player" "is?" "when")}
        {Lisp-Entry "close-popups" method (public virtual) ("(event: event #f)" "(all?: all? #f)" "(exclude: exclude #f)") #f #f 2628 26 2628 38 ("close-popups" "close-popups~" "player" "when" "exclude" "exclude:" "all?" "all?:" "event" "event:")}
        {Lisp-Entry "popup-destroy" method (public virtual) ("popup") #f #f 2633 26 2633 39 ("popup")}
        {Lisp-Entry "popup-initiator" method (public) () #f #f 2637 18 2637 33 ("get-initiator" "get-initiator~" "Popup" "is?" "when" "get-overlapped" "overlapped" "let")}
        {Lisp-Entry "owned?" method (public) ("overlapped") #f #f 2643 18 2643 24 ("get-overlapped" "get-owners" "get-owners~" "memq?" "overlapped")}
        {Lisp-Entry "get-draggable?" method (public virtual) () #f #f 2652 26 2652 40 ("draggable?")}
        {Lisp-Entry "set-draggable?" method (public) ("flag") #f #f 2656 18 2656 32 ("draggable?" "set!" "flag")}
        {Lisp-Entry "get-drag-drop" method (public virtual) () #f #f 2660 26 2660 39 ("source:" "DnD" "new" "when" "get-drag-source" "source" "let")}
        {Lisp-Entry "get-drag-source" method (public virtual) () #f #f 2666 26 2666 41 ("get-drag-image" "image:" "position:" "self" "view:" "Drag-Source" "new" "get-drag-position" "pos" "let")}
        {Lisp-Entry "get-drag-position" method (public virtual) () #f #f 2671 26 2671 43 ("mouse-down-point")}
        {Lisp-Entry "get-drag-image" method (public virtual) ("pos") #f #f 2675 26 2675 40 ("pos")}
        {Lisp-Entry "drag-start" method () ("pos" "drag-drop") #f #f 2679 11 2679 21 ("process-drag-feedback" "hide-drag-image" "to-desktop" "to-desktop~" "global" "acquire-capture" "acquire-capture~" "acquire-focus" "acquire-focus~" ":no" "set-cursor" "get-source" "get-source~" "get-view" "get-view~" "view" "let" "set-current-drag-drop" "drag-drop" "pos")}
        {Lisp-Entry "drag-follow" method () ("pos") #f #f 2690 11 2690 22 ("process-drag-feedback" "to-desktop" "to-desktop~" "global" "get-source" "get-source~" "get-view" "get-view~" "view" "drag-drop" "let*" "current-drag-drop" "when" "pos")}
        {Lisp-Entry "drag-drop" method () ("drag-drop" "pos") #f #f 2698 11 2698 20 ("drop" "get-target" "get-target~" "when" "drag-end" "pos" "drag-drop")}
        {Lisp-Entry "drag-end" method () () #f #f 2704 11 2704 19 ("set-current-drag-drop" "get-source" "get-source~" "get-view" "get-view~" "release-capture" "release-capture~" "unhighlight-current" "hide-drag-image" "drag-drop" "let" "current-drag-drop" "when")}
        {Lisp-Entry "process-drag-feedback" method () ("global") #f #f 2713 11 2713 32 ("show-drag-image" "highlight-current" "set-target" "set-target~" "unhighlight-current" "hide-drag-image" ":no" ":move" "if" "set-cursor" "get-target" "get-target~" "neq?" "call-current-drop" "call-current-drop~" "target" "to-view" "to-view~" "local" "when" "set-view" "set-view~" "find-view" "find-view~" "view" "get-desktop" "desktop" "get-view" "get-view~" "current" "current-drag-drop" "drag-drop" "let*" "global")}
        {Lisp-Entry "hide-drag-image" method () () #f #f 2733 11 2733 26 ("ImageList_DragShowNolock")}
        {Lisp-Entry "show-drag-image" method () () #f #f 2737 11 2737 26 ("ImageList_DragShowNolock")}
        {Lisp-Entry "highlight-current" method () ("drag-drop" "view" "local") #f #f 2741 11 2741 28 ("highlight-drop" "highlight-drop~" "local" "view" "drag-drop")}
        {Lisp-Entry "unhighlight-current" method () ("drag-drop") #f #f 2745 11 2745 30 ("get-view" "get-view~" "unhighlight-drop" "unhighlight-drop~" "when" "get-target" "get-target~" "current-target" "let" "drag-drop")}
        {Lisp-Entry "highlight-drop" method (public virtual) ("drag-drop" "pos") #f #f 2751 26 2751 40 ("pos" "drag-drop")}
        {Lisp-Entry "unhighlight-drop" method (public virtual) ("drag-drop") #f #f 2755 26 2755 42 ("drag-drop")}
        {Lisp-Entry "call-current-drop" method (public) ("drag-drop" "pos") #f #f 2764 18 2764 35 ("current-drop" ":drop-target" "Drop-Event" "new" "self" "invoke-handler" "current-drop-handler" "if" "pos" "drag-drop")}
        {Lisp-Entry "current-drop" method (public virtual) ("drag-drop" "pos") #f #f 2770 26 2770 38 ("pos" "drag-drop")}
        {Lisp-Entry "standard-current-drop" method (public) ("evt" "acceptance" "(handler: handler #f)") #f #f 2774 18 2774 39 ("current-drop" "current-drop~" "criteria:" "position:" "view:" "Drop-Target" "new" "accepts?" "accepts?~" "lambda" "find-if" "criteria" "let" "neq?" "if" "cons" "drag-info" "drag-over" "get-source" "get-source~" "get-view" "get-view~" "drag-start" "get-target" "get-target~" "current" "get-drag-drop" "get-drag-drop~" "drag-drop" "get-position" "get-position~" "pos" "get-sender" "get-sender~" "sender" "let*" "handler" "handler:" "acceptance" "evt")}
        {Lisp-Entry "drop" method (public virtual) ("drag-drop" "pos") #f #f 2790 26 2790 30 ("acquire" "acquire~" "self" "call-receive-drop" "call-receive-drop~" "when" "get-handler" "get-handler~" "or" "dst" "get-target" "get-target~" "trg" "get-source" "get-source~" "get-view" "get-view~" "src" "let*" "pos" "drag-drop")}
        {Lisp-Entry "call-receive-drop" method (public) ("sender" "pos" "drag-drop") #f #f 2798 18 2798 35 ("receive-drop" ":receive-drop" "Drop-Event" "new" "self" "invoke-handler" "receive-drop-handler" "if" "drag-drop" "pos" "sender")}
        {Lisp-Entry "receive-drop" method (public virtual) ("sender" "pos" "drag-drop") #f #f 2804 26 2804 38 ("drag-drop" "pos" "sender")}
        {Lisp-Entry "call-key-press" method (protected) ("key") #f #f 2813 21 2813 35 ("key-press" "lambda" "hook-event" "content:" ":key" "char?" "Event" "event" "on-insert" ":focus" "Event-Handler" "handler" "let" ":char" "Keyboard-Event" "new" "self" "invoke-handler" "key-press-handler" "if" "key")}
        {Lisp-Entry "on-arrow" method () ("evt") #f #f 2823 11 2823 19 ("call-arrow-press" "evt")}
        {Lisp-Entry "call-arrow-press" method () ("evt") #f #f 2827 11 2827 27 ("arrow-press" "self" "invoke-handler" "arrow-press-handler" "if" "evt")}
        {Lisp-Entry "arrow-press" method (public virtual) ("evt") #f #f 2833 26 2833 37 ("down-arrow-press" "down" "up-arrow-press" "up" "right-arrow-press" "right" "left-arrow-press" "left" "case" "get-modifiers" "get-modifiers~" "modifiers" "direction:" "get-property" "get-property~" "direction" "let" "evt")}
        {Lisp-Entry "left-arrow-press" method (public virtual) ("modifiers") #f #f 2843 26 2843 42 ("modifiers")}
        {Lisp-Entry "right-arrow-press" method (public virtual) ("modifiers") #f #f 2847 26 2847 43 ("modifiers")}
        {Lisp-Entry "up-arrow-press" method (public virtual) ("modifiers") #f #f 2851 26 2851 40 ("modifiers")}
        {Lisp-Entry "down-arrow-press" method (public virtual) ("modifiers") #f #f 2855 26 2855 42 ("modifiers")}
        {Lisp-Entry "on-escape-press" method (package virtual) ("evt") #f #f 2859 27 2859 42 ("call-escape-press" "evt")}
        {Lisp-Entry "call-escape-press" method () ("key") #f #f 2863 11 2863 28 ("escape-press" ":char" "Keyboard-Event" "new" "self" "invoke-handler" "escape-press-handler" "if" "key")}
        {Lisp-Entry "escape-press" method (public virtual) ("key") #f #f 2869 26 2869 38 ("key")}
        {Lisp-Entry "on-backspace-press" method (package virtual) ("evt") #f #f 2873 27 2873 45 ("call-backspace-press" "evt")}
        {Lisp-Entry "call-backspace-press" method () ("key") #f #f 2877 11 2877 31 ("backspace-press" ":char" "Keyboard-Event" "new" "self" "invoke-handler" "backspace-press-handler" "if" "key")}
        {Lisp-Entry "backspace-press" method (public virtual) ("key" "." "rest") #f #f 2883 26 2883 41 ("rest" "key")}
        {Lisp-Entry "on-return-press" method (package virtual) ("evt") #f #f 2887 27 2887 42 ("call-return-press" "evt")}
        {Lisp-Entry "call-return-press" method () ("key") #f #f 2891 11 2891 28 ("return-press" ":char" "Keyboard-Event" "new" "self" "invoke-handler" "return-press-handler" "if" "key")}
        {Lisp-Entry "return-press" method (public virtual) ("key") #f #f 2897 26 2897 38 ("key")}
        {Lisp-Entry "on-tab-press" method (package virtual) ("evt") #f #f 2901 27 2901 39 ("call-tab-press" "evt")}
        {Lisp-Entry "call-tab-press" method () ("key") #f #f 2905 11 2905 25 ("modifiers-keys" "tab-press" ":char" "Keyboard-Event" "new" "self" "invoke-handler" "tab-press-handler" "if" "key")}
        {Lisp-Entry "tab-press" method (public virtual) ("key" "modifiers") #f #f 2911 26 2911 35 ("shift-key?" "navigate-view" "modifiers" "key")}
        {Lisp-Entry "on-key-press" method (package) ("evt") #f #f 2915 19 2915 31 ("key:" "get-property" "get-property~" "key-press" "evt")}
        {Lisp-Entry "key-press" method (public virtual) ("key") #f #f 2919 26 2919 35 ("key")}
        {Lisp-Entry "dispatch-key-press" method (protected) ("key") #f #f 2923 21 2923 39 ("call-key-press" "call-key-press~" "when" "get-focus" "view" "let" "complete-drag-up" "drag-end" "begin" "eqv?" "current-drag-drop" "and" "if" "key")}
        {Lisp-Entry "find-tab-manager" method (public) () #f #f 2938 18 2938 34 ("find-tab-manager" "find-tab-manager~" "not" "View" "find-ascendant" "ascendant" "let" "self" "get-tab-stops" "if")}
        {Lisp-Entry "navigate-tab" method (public virtual) ("from" "backward?") #f #f 2947 26 2947 38 ("self" "navigate-tab" "navigate-tab~" "View" "is?" "set!" "disabled-navigate?" "not" "and" "while" "view-enabled?" "view-enabled?~" "enabled" "if" "navigated-view" "let" "tab-stop-enter" "tab-stop-enter~" "acquire-focus" "acquire-focus~" "tab-stop-exit" "tab-stop-exit~" "to" "navigate" "define" "backward?" "from")}
        {Lisp-Entry "navigated-view" method (public) ("from" "backward?" "(test: test #f)") #f #f 2965 18 2965 32 ("element" "+" "modulo" "1" "-" "0" "=" "if" "new-rank" "find" "rank" "length" "count" "when" "get-tab-stops" "stops" "let" "test" "test:" "backward?" "from")}
        {Lisp-Entry "navigate-view" method (protected) ("backward?") #f #f 2975 21 2975 34 ("self" "navigate-tab" "navigate-tab~" "find-tab-manager" "manager" "let" "backward?")}
        {Lisp-Entry "get-tab-stops" method (public virtual) () #f #f 2980 26 2980 39 ()}
        {Lisp-Entry "tab-stop-enter" method (public virtual) () #f #f 2984 26 2984 40 ("select-all")}
        {Lisp-Entry "tab-stop-exit" method (public virtual) () #f #f 2988 26 2988 39 ()}
        {Lisp-Entry "on-undo" method () ("evt") #f #f 2997 11 2997 18 ("undo~" "undo" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-redo" method () ("evt") #f #f 3003 11 3003 18 ("redo~" "redo" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-cut" method () ("evt") #f #f 3009 11 3009 17 ("cut-selection~" "cut-selection" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-copy" method () ("evt") #f #f 3015 11 3015 18 ("copy-selection~" "copy-selection" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-paste" method () ("evt") #f #f 3021 11 3021 19 ("paste-clipboard~" "paste-clipboard" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-paste-properties" method () ("evt") #f #f 3027 11 3027 30 ("paste-properties~" "paste-properties" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-delete" method () ("evt") #f #f 3033 11 3033 20 ("delete-selection~" "delete-selection" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-rename" method () ("evt") #f #f 3039 11 3039 20 ("rename-selection~" "rename-selection" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-select-all" method () ("evt") #f #f 3045 11 3045 24 ("select-all~" "select-all" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "can-view-undo?" method (public) () #f #f 3051 18 3051 32 ("can-undo?" "can-undo?~" "surrogate" "if")}
        {Lisp-Entry "can-undo?" method (public virtual) () #f #f 3057 26 3057 35 ()}
        {Lisp-Entry "can-view-redo?" method (public) () #f #f 3061 18 3061 32 ("can-redo?" "can-redo?~" "surrogate" "if")}
        {Lisp-Entry "can-redo?" method (public virtual) () #f #f 3067 26 3067 35 ()}
        {Lisp-Entry "can-view-cut?" method (public) () #f #f 3071 18 3071 31 ("can-cut?" "can-cut?~" "surrogate" "if")}
        {Lisp-Entry "can-cut?" method (public virtual) () #f #f 3077 26 3077 34 ()}
        {Lisp-Entry "can-view-copy?" method (public) () #f #f 3081 18 3081 32 ("can-copy?" "can-copy?~" "surrogate" "if")}
        {Lisp-Entry "can-copy?" method (public virtual) () #f #f 3087 26 3087 35 ()}
        {Lisp-Entry "can-view-paste?" method (public) () #f #f 3091 18 3091 33 ("can-paste?" "can-paste?~" "surrogate" "if")}
        {Lisp-Entry "can-paste?" method (public virtual) () #f #f 3097 26 3097 36 ()}
        {Lisp-Entry "can-view-paste-properties?" method (public) () #f #f 3101 18 3101 44 ("can-paste-properties?" "can-paste-properties?~" "surrogate" "if")}
        {Lisp-Entry "can-paste-properties?" method (public virtual) () #f #f 3107 26 3107 47 ()}
        {Lisp-Entry "can-view-delete?" method (public) () #f #f 3111 18 3111 34 ("can-delete?" "can-delete?~" "surrogate" "if")}
        {Lisp-Entry "can-delete?" method (public virtual) () #f #f 3117 26 3117 37 ()}
        {Lisp-Entry "can-view-rename?" method (public) () #f #f 3121 18 3121 34 ("can-rename?" "can-rename?~" "surrogate" "if")}
        {Lisp-Entry "can-rename?" method (public virtual) () #f #f 3127 26 3127 37 ()}
        {Lisp-Entry "can-view-select-all?" method (public) () #f #f 3131 18 3131 38 ("can-select-all?" "can-select-all?~" "surrogate" "if")}
        {Lisp-Entry "can-select-all?" method (public virtual) () #f #f 3137 26 3137 41 ()}
        {Lisp-Entry "undo" method (public virtual) () #f #f 3141 26 3141 30 ()}
        {Lisp-Entry "redo" method (public virtual) () #f #f 3145 26 3145 30 ()}
        {Lisp-Entry "cut-selection" method (public virtual) () #f #f 3149 26 3149 39 ()}
        {Lisp-Entry "copy-selection" method (public virtual) () #f #f 3153 26 3153 40 ()}
        {Lisp-Entry "paste-clipboard" method (public virtual) () #f #f 3157 26 3157 41 ()}
        {Lisp-Entry "paste-properties" method (public virtual) () #f #f 3161 26 3161 42 ()}
        {Lisp-Entry "delete-selection" method (public virtual) () #f #f 3165 26 3165 42 ()}
        {Lisp-Entry "rename-selection" method (public virtual) () #f #f 3169 26 3169 42 ()}
        {Lisp-Entry "select-all" method (public virtual) ("." "rest") #f #f 3173 26 3173 36 ("rest")}
        {Lisp-Entry "acquire-capture" method (public) () #f #f 3182 18 3182 33 ("get-player" "acquire-capture" "acquire-capture~" "self" "set-captured-view")}
        {Lisp-Entry "release-capture" method (public) () #f #f 3187 18 3187 33 ("get-player" "release-capture" "release-capture~" "set-captured-view")}
        {Lisp-Entry "get-tooltip?" method (public virtual) () #f #f 3197 26 3197 38 ("tooltip?")}
        {Lisp-Entry "set-tooltip?" method (public) ("flag") #f #f 3201 18 3201 30 ("set!" "tooltip?" "neq?" "when" "flag")}
        {Lisp-Entry "get-tooltip-text" method (public virtual) () #f #f 3206 26 3206 42 ("present-shortcut" "present-shortcut~" "format" "require-action-item" "get-shortcut" "get-shortcut~" "Action" "action-handler" "is?" "and" "shortcut" "not" "if" "tooltip-text" "localize" "text" "let")}
        {Lisp-Entry "set-tooltip-text" method (public) ("text") #f #f 3216 18 3216 34 ("tooltip-text" "set!" "text")}
        {Lisp-Entry "get-formatted-tooltip?" method (public virtual) () #f #f 3221 26 3221 48 ()}
        {Lisp-Entry "get-tooltip-bounds" method (public virtual) ("pos") #f #f 3225 26 3225 44 ("pos")}
        {Lisp-Entry "get-tooltip-context" method (public virtual) ("pos") #f #f 3229 26 3229 45 ("bounds:" "text:" "self" "view:" "Tooltip-Context" "new" "when" "get-tooltip-bounds" "bounds" "get-tooltip-text" "text" "let" "pos")}
        {Lisp-Entry "with-view-surface" method (public) ("proc") #f #f 3241 18 3241 35 ("lambda" "get-rootmost" "with-view-transform" "get-player" "get-window-surface" "Surface" "new" "surface" "with" "proc")}
        {Lisp-Entry "invalidate-view" method (public) () #f #f 3253 18 3253 33 ("invalidate-rect" "get-bounds" "bounds" "let")}
        {Lisp-Entry "invalidate-rect" method (public) ("rect") #f #f 3258 18 3258 33 ("player" "invalidate-rect" "invalidate-rect~" "get-clipper" "get-clipper~" "rect-intersection" "logical->device" "logical->device~" "surface" "lambda" "with-transformation-surface" "acquired" "let" "view-visible?" "inhibit-invalidates?" "not" "and" "when" "rect")}
        {Lisp-Entry "invalidate-region" method (public) ("region") #f #f 3268 18 3268 35 ("player" "invalidate-region" "invalidate-region~" "combine!" "combine!~" "get-clipper" "get-clipper~" "rect:" "Region" "new" "clipper" "with" "get-v" "get-v~" "get-h" "get-h~" "offset!" "offset!~" "0" "Point" "logical->device" "logical->device~" "delta" "let" "surface" "lambda" "with-transformation-surface" "view-visible?" "inhibit-invalidates?" "not" "and" "when" "region")}
        {Lisp-Entry "redraw-view" method (public) ("(rect: rect #f)" "(region: region #f)") #f #f 3279 18 3279 29 ("get-bounds" "else" "and" "combine!" "combine!~" "Region" "new" "clipper" "with" "get-v" "get-v~" "get-h" "get-h~" "offset!" "offset!~" "0" "Point" "delta" "redraw-window" "redraw-window~" "get-clipper" "get-clipper~" "rect-intersection" "logical->device" "logical->device~" "surface" "lambda" "with-transformation-surface" "acquired" "cond" "when" "get-player" "player" "let" "region" "region:" "rect" "rect:")}
        {Lisp-Entry "redraw-view-only" method (public) () #f #f 3306 18 3306 34 ("self" "platform-redraw-view-only" "get-handle" "get-handle~" "hwnd" "when" "get-player" "player" "let")}
        {Lisp-Entry "update-view" method (public) ("(effect: effect #f)") #f #f 3313 18 3313 29 ("update-window" "update-window~" "set-effect" "when" "get-player" "player" "let" "effect" "effect:")}
        {Lisp-Entry "view-invalidater" method (public) () #f #f 3320 18 3320 34 ("invalidate-rect" "invalidate-rect~" "get-clipper" "get-clipper~" "logical->device" "logical->device~" "rect" "let" "surface" "lambda" "with-transformation-surface" "player" "when")}
        {Lisp-Entry "invalidate-border" method (public) ("(insets: insets {Rect 1 1 1 1})") #f #f 3335 18 3335 35 ("invalidate-region" "border-region" "region" "with" "get-finished?" "when" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "redraw-border" method (public) ("(insets: insets {Rect 1 1 1 1})") #f #f 3341 18 3341 31 ("region:" "redraw-view" "border-region" "region" "with" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "border-region" method (public) ("(insets: insets {Rect 1 1 1 1})") #f #f 3346 18 3346 31 ("frame-region" "get-bounds" "bounds" "let" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "on-save" method (package) ("evt") #f #f 3356 19 3356 26 ("save~" "save" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-save-as" method (package) ("evt") #f #f 3362 19 3362 29 ("save-as" "evt")}
        {Lisp-Entry "on-revert-saved" method (package) ("evt") #f #f 3366 19 3366 34 ("revert-saved" "evt")}
        {Lisp-Entry "on-compare-saved" method (package) ("evt") #f #f 3370 19 3370 35 ("compare-saved" "evt")}
        {Lisp-Entry "save" method (public virtual) () #f #f 3374 26 3374 30 ()}
        {Lisp-Entry "save-as" method (public virtual) () #f #f 3378 26 3378 33 ()}
        {Lisp-Entry "save-to" method (public virtual) ("moniker") #f #f 3382 26 3382 33 ("moniker")}
        {Lisp-Entry "revert-saved" method (public virtual) () #f #f 3386 26 3386 38 ()}
        {Lisp-Entry "compare-saved" method (public virtual) () #f #f 3390 26 3390 39 ()}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 3399 25 3399 45 ("View-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 3408 11 3408 17 ()
        {Lisp-Entry "import" import () () #f #f 3411 1 3411 7 ("jazz.designer")}
        {Lisp-Entry "View-Descriptor" class () ((extends . "Figure-Descriptor")) #f #f 3414 7 3414 22 ("Figure-Descriptor")
          {Lisp-Entry "form" form () () #f #f 3417 3 3417 7 ("action-handler" "selection-handler" "content-change-handler" "tab-press-handler" "return-press-handler" "backspace-press-handler" "escape-press-handler" "arrow-press-handler" "key-press-handler" "context-menu-handler" "receive-files-handler" "receive-drop-handler" "current-drop-handler" "double-click-handler" "drag-up-handler" "drag-move-handler" "mouse-up-handler" "mouse-move-handler" "mouse-down-handler" "mouse-leave-handler" "mouse-hover-handler" "mouse-enter-handler" "cursor-update-handler" "focus-lose-handler" "Handler-Domain" "<Handler-Domain>" "handler" "category:" "focus-gained-handler" "disabled-navigate?" "user-data" "effect" "layer" "offscreen?" "outline-view" "action" "enabled?" "drag-tolerance" "draggable?" "nullable?:" "String-Domain" "<String-Domain>" "tooltip-text" "tooltip?" "Boolean-Domain" "<Boolean-Domain>" "auto-size?" "Color-Domain" "<Color-Domain>" "background" "Style-Domain" "<Style-Domain>" "style" "Font-Domain" "<Font-Domain>" "font" "domain" "Localized-Domain" "<Localized-Domain>" "title:" "title" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "Image-Resource" "image:" "install" "<install>")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 3500 20 3500 61 ("View" "reference" "list" "component")}
          {Lisp-Entry "component-surrogate-class" method (override) ("component") #f #f 3506 20 3506 45 ("View-Surrogate" "component")}}}}})
"View-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "View-Actions.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.preference.View-Actions" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "View-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 32 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("scroll-down" "extend-down" "Down" "down" "move-down" "extend-right" "Right" "right" "move-right" "scroll-up" "extend-up" "Up" "up" "move-up" "extend-left" "Left" "left" "direction:" "on-arrow" "move-left" "on-select-all" "select-all" "Delete" "on-delete" "delete" "on-paste-properties" "paste-properties" "on-paste" "paste" "on-copy" "copy" "on-cut" "cut" "on-redo" "redo" "on-undo" "undo" "control-shift-return" ":control" "control-return" "shift-return" "Return" "on-return-press" "return" "shift-backspace" "Backspace" "on-backspace-press" "backspace" "shift-tab" "Tab" "on-tab-press" "tab" ":shift" "shift-escape" "Escape" "Shortcut" "shortcut:" "on-escape-press" ":focus" "Event-Handler" "action-handler:" "escape" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"View-Player"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "View-Player.jazz"} 246588192. jazz
    {Lisp-Entry "jazz.ui.window.View-Player" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui" "jazz.system" "jazz.locale" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "View-Player" class () ((extends . "Window")) #f #f 49 7 49 18 ("explicit" "close-root" "Window")
        {Lisp-Entry "close-behavior" property () ((initialize . "'close-root") (accessors . "generate")) #f #f 55 12 55 26 ()}
        {Lisp-Entry "get-close-behavior" accessor () () #f #f 55 60 55 68 ()}
        {Lisp-Entry "set-close-behavior" accessor () () #f #f 55 60 55 68 ()}
        {Lisp-Entry "caption-base" property () ((initialize . "#f") (accessors . "explicit")) #f #f 56 12 56 24 ()}
        {Lisp-Entry "caption" property () ((initialize . "#f") (accessors . "explicit")) #f #f 57 12 57 19 ()}
        {Lisp-Entry "caption?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 58 12 58 20 ()}
        {Lisp-Entry "root" slot () ((initialize . "#f")) #f #f 61 8 61 12 ()}
        {Lisp-Entry "view-focus" slot () ((initialize . "#f") (accessors . "generate")) #f #f 62 8 62 18 ()}
        {Lisp-Entry "get-view-focus" accessor () () #f #f 62 48 62 56 ()}
        {Lisp-Entry "set-view-focus" accessor () () #f #f 62 48 62 56 ()}
        {Lisp-Entry "pushed-focuses" slot () ((initialize . "'()") (getter . "generate")) #f #f 63 8 63 22 ()}
        {Lisp-Entry "get-pushed-focuses" accessor () () #f #f 63 45 63 53 ()}
        {Lisp-Entry "prepare" method (override) ("rest") #f #f 71 20 71 27 ("destroy-mandatory" "prepare-root" "nextmethod" "rest")}
        {Lisp-Entry "prepare-root" method (protected virtual) () #f #f 77 29 77 41 ("new-root" "set-root")}
        {Lisp-Entry "new-root" method (protected virtual) () #f #f 81 29 81 37 ("offscreen?:" "Host-View" "new")}
        {Lisp-Entry "find-to-modify" method (override) ("name" "test") #f #f 85 20 85 34 ("nextmethod" "get-root" "root" "eq?" "if" "test" "name")}
        {Lisp-Entry "close" method (override) () #f #f 96 20 96 25 ("nextmethod" "set-visible?" "hide" "close-behavior" "eq?" "if")}
        {Lisp-Entry "destroy" method (override) () #f #f 102 20 102 27 ("nextmethod" "detach-root" "close-behavior" "eq?" "if" "set!" "close" "close~" "root" "when" "close-root" "define")}
        {Lisp-Entry "get-caption-base" method (public) () #f #f 119 18 119 34 ("caption-base")}
        {Lisp-Entry "set-caption-base" method (public) ("value") #f #f 123 18 123 34 ("invalidate-title" "caption-base" "set!" "value")}
        {Lisp-Entry "get-caption" method (public) () #f #f 128 18 128 29 ("caption")}
        {Lisp-Entry "set-caption" method (public) ("value") #f #f 132 18 132 29 ("invalidate-title" "caption" "set!" "value")}
        {Lisp-Entry "get-caption?" method (public) () #f #f 137 18 137 30 ("caption?")}
        {Lisp-Entry "set-caption?" method (public) ("value") #f #f 141 18 141 30 ("invalidate-title" "caption?" "set!" "value")}
        {Lisp-Entry "invalidate-title" method () () #f #f 151 11 151 27 ("set-title" "format" "let" "localize" "caption-base" "caption?" "caption" "not" "or" "if" "effective-title" "define")}
        {Lisp-Entry "erase-background" method (override) ("surface") #f #f 170 20 170 36 ("nextmethod" "processed" "get-offscreen?" "get-offscreen?~" "root" "and" "if" "surface")}
        {Lisp-Entry "get-root" method (public) () #f #f 181 18 181 26 ("root")}
        {Lisp-Entry "set-root" method (public) ("value" "(detach?: detach? #t)") #f #f 185 18 185 26 ("layout-window" "set-offscreen?" "set-offscreen?~" "self" "set-player" "set-player~" "set-parent" "set-parent~" "set-name" "set-name~" "set!" "detach-root" "root" "neq?" "when" "detach?" "detach?:" "value")}
        {Lisp-Entry "detach-root" method () () #f #f 197 11 197 22 ("set!" "set-offscreen?" "set-offscreen?~" "set-player" "set-player~" "root" "when")}
        {Lisp-Entry "size-change" method (override) ("state" "size") #f #f 209 20 209 31 ("layout-window" "nextmethod" "size" "state")}
        {Lisp-Entry "layout" method (override) () #f #f 214 20 214 26 ("redraw-window" "get-size" "set-size" "set-size~" "0" "Point" "set-position" "set-position~" "inhibit-invalidates?" "inhibit-layouts?" "parameterize" "root" "when")}
        {Lisp-Entry "in-error?" slot () ((initialize . "#f")) #f #f 228 8 228 17 ()}
        {Lisp-Entry "get-in-error?" method (public) () #f #f 231 18 231 31 ("in-error?")}
        {Lisp-Entry "set-in-error?" method (public) ("flag") #f #f 235 18 235 31 ("invalidate-window" "in-error?" "set!" "flag")}
        {Lisp-Entry "Error-Color" definition () () #f #f 240 14 240 25 ("Dark-Red" "Color")}
        {Lisp-Entry "paint" method (override) ("update-region" "." "platform-data") #f #f 249 20 249 25 ("root" "paint-root" "paint-root~" "set!" "in-error?" "if" "set-clipper" "set-clipper~" "get-box" "get-box~" "update-rect" "lambda" "self" "with-platform-painting" "when" "debug-flicker" "proc" "let" "Error-Color" "fill-rect" "fill-rect~" "bounds" "surface" "paint-in-error" "define" "platform-data" "update-region")}
        {Lisp-Entry "receive-files" method (override) ("pos" "files") #f #f 272 20 272 33 ("processed" "root" "dispatch-receive-files" "dispatch-receive-files~" "in-error?" "unless" "files" "pos")}
        {Lisp-Entry "mouse-down" method (override) ("h" "v") #f #f 283 20 283 30 ("processed" "root" "dispatch-mouse-down" "dispatch-mouse-down~" "mouse" "event-type" "parameterize" "bell" "in-error?" "if" "v" "h")}
        {Lisp-Entry "simulate-mouse-down" method () ("(pos #f)") #f #f 291 11 291 30 ("get-v" "get-v~" "get-h" "get-h~" "root" "dispatch-mouse-down" "dispatch-mouse-down~" "when" "find-view" "view" "mouse-position" "or" "let" "pos")}
        {Lisp-Entry "mouse-move" method (override) ("h" "v") #f #f 298 20 298 30 ("processed" "root" "dispatch-mouse-move" "dispatch-mouse-move~" "mouse" "event-type" "parameterize" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "simulate-mouse-move" method () ("(pos #f)") #f #f 305 11 305 30 ("get-v" "get-v~" "get-h" "get-h~" "root" "dispatch-mouse-move" "dispatch-mouse-move~" "when" "find-view" "view" "mouse-position" "or" "let" "pos")}
        {Lisp-Entry "simulate-global-mouse-move" method () () #f #f 312 11 312 37 ("get-v" "get-v~" "get-h" "get-h~" "dispatch-mouse-move" "dispatch-mouse-move~" "get-desktop" "acquire" "acquire~" "get-root" "get-root~" "root" "View-Player" "is?" "when" "find-window" "player" "platform-mouse-position" "pos" "let")}
        {Lisp-Entry "mouse-up" method (override) ("h" "v") #f #f 321 20 321 28 ("processed" "root" "dispatch-mouse-up" "dispatch-mouse-up~" "mouse" "event-type" "parameterize" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "double-click" method (override) ("h" "v") #f #f 328 20 328 32 ("processed" "root" "dispatch-double-click" "dispatch-double-click~" "mouse" "event-type" "parameterize" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "context-menu" method (override) ("h" "v") #f #f 335 20 335 32 ("processed" "root" "dispatch-context-menu" "dispatch-context-menu~" "mouse" "event-type" "parameterize" "set-in-error?" "in-error?" "if" "v" "h")}
        {Lisp-Entry "middle-mouse-down" method (override) ("h" "v") #f #f 343 20 343 37 ("processed" "root" "dispatch-middle-mouse-down" "dispatch-middle-mouse-down~" "mouse" "event-type" "parameterize" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "middle-mouse-up" method (override) ("h" "v") #f #f 350 20 350 35 ("processed" "root" "dispatch-middle-mouse-up" "dispatch-middle-mouse-up~" "mouse" "event-type" "parameterize" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "right-mouse-down" method (override) ("h" "v") #f #f 357 20 357 36 ("processed" "root" "dispatch-right-mouse-down" "dispatch-right-mouse-down~" "mouse" "event-type" "parameterize" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "right-mouse-up" method (override) ("h" "v") #f #f 364 20 364 34 ("unprocessed" "root" "dispatch-right-mouse-up" "dispatch-right-mouse-up~" "mouse" "event-type" "parameterize" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "mouse-leave" method (override) () #f #f 371 20 371 31 ("reset-mouse-in" "cancel-tooltip-tracking" "cancel-tooltip-tracking~" "call-mouse-leave" "call-mouse-leave~" "self" "get-player" "get-player~" "eq?" "mouse-in" "and" "when")}
        {Lisp-Entry "for-each-docked" method (public) ("proc") #f #f 383 18 383 33 ("for-each-view-docked" "for-each-view-docked~" "root" "when" "proc")}
        {Lisp-Entry "find-docked" method (public) ("type") #f #f 388 18 388 29 ("find-view-docked" "find-view-docked~" "root" "when" "type")}
        {Lisp-Entry "popup" method (public) ("class" "." "initargs") #f #f 398 18 398 23 ("get-popups" "cons" "set-popups" "popup" "let" "visible?:" "get-overlapped" "owner:" "new" "apply" "new-popup" "define" "initargs" "class")}
        {Lisp-Entry "close-popups" method (public) ("(all?: all? #f)" "(exclude: exclude #f)") #f #f 410 18 410 30 ("close-popup" "memq?" "or" "popup" "lambda" "for-each" "get-owners" "get-owners~" "owners" "get-overlapped" "overlapped" "let*" "get-passing-through?" "not" "get-popups" "and" "when" "exclude" "exclude:" "all?" "all?:")}
        {Lisp-Entry "focus-gain" method (override) () #f #f 425 20 425 30 ("processed" "focus-delegate" "focus-delegate~" "focus-view" "activating-window?" "parameterize" "in-player?" "in-player?~" "view-focus" "and" "when" "self" "set-focused-window")}
        {Lisp-Entry "focus-lose" method (override) () #f #f 434 20 434 30 ("processed" "set-focused-window" "unfocus-view")}
        {Lisp-Entry "focus-view" method (package) ("new-focus" "(process-focus-change? #t)") #f #f 440 19 440 29 ("get-application" "process-focus-change" "process-focus-change~" "process-active?" "and" "activate-focus" "activate-focus~" "when" "get-host" "get-host~" "host" "let" "call-focus-gained" "call-focus-gained~" "view-focus" "set!" "process-focus-change?" "new-focus")}
        {Lisp-Entry "unfocus-view" method (package) () #f #f 450 19 450 31 ("call-focus-lost" "call-focus-lost~" "focus-master" "focus-master~" "set!" "call-focus-lose" "call-focus-lose~" "deactivate-focus" "deactivate-focus~" "get-host" "get-host~" "host" "preserve-focused" "preserve-focused~" "get-focus-container" "get-focus-container~" "container" "focus" "let" "view-focus" "when")}
        {Lisp-Entry "reset-focus" method (override) () #f #f 464 20 464 31 ("set!" "unfocus-view" "view-focus" "when" "nextmethod")}
        {Lisp-Entry "push-view-focus" method (package) ("new-focus") #f #f 471 19 471 34 ("focus-view" "cons" "pushed-focuses" "set!" "view-focus" "when" "new-focus")}
        {Lisp-Entry "pop-view-focus" method (package) () #f #f 477 19 477 33 ("focus-view" "activating-window?" "parameterize" "call-focus-lose" "call-focus-lose~" "view-focus" "cdr" "set!" "pushed-focuses" "car" "new-focus" "let" "has-pushed-focuses?" "when")}
        {Lisp-Entry "pop-view-focuses" method (package) ("popup") #f #f 487 19 487 35 ("pop-view-focus" "has-pushed-focuses?" "get-player" "get-player~" "eq?" "and" "when" "view-focus" "focus" "iterate" "let" "popup")}
        {Lisp-Entry "pop-all-view-focuses" method (package) () #f #f 497 19 497 39 ("pop-view-focus" "has-pushed-focuses?" "when" "iterate" "let")}
        {Lisp-Entry "clear-pushed-focuses" method (package) () #f #f 504 19 504 39 ("pushed-focuses" "set!")}
        {Lisp-Entry "has-pushed-focuses?" method (package) () #f #f 508 19 508 38 ("pushed-focuses" "not-null?")}
        {Lisp-Entry "key-press" method (override) ("char") #f #f 517 20 517 29 ("processed" "root" "dispatch-key-press" "dispatch-key-press~" "keyboard" "event-type" "parameterize" "char")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 528 25 528 45 ("View-Player-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 537 11 537 17 ()
        {Lisp-Entry "import" import () () #f #f 540 1 540 7 ("jazz.designer")}
        {Lisp-Entry "View-Player-Descriptor" class () ((extends . "Figure-Descriptor")) #f #f 543 7 543 29 ("Figure-Descriptor")
          {Lisp-Entry "form" form () () #f #f 546 3 546 7 ("caption?" "caption" "caption-base" "close-behavior" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "component-get-components" method (override) ("component") #f #f 555 20 555 44 ("get-children" "get-children~" "get-root" "get-root~" "cons" "component")}}}}})
"View-Style"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "text" "View-Style.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.text.View-Style" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "View-Style" class () ((extends . "Style")) #f #f 43 7 43 17 ("Style")
        {Lisp-Entry "properties" definition () () #f #f 47 14 47 24 ("form:" "alignment:")}
        {Lisp-Entry "form" slot (protected) () #f #f 53 18 53 22 ()}
        {Lisp-Entry "view" slot (protected) ((getter . "generate")) #f #f 54 18 54 22 ()}
        {Lisp-Entry "get-view" accessor () () #f #f 54 30 54 38 ()}
        {Lisp-Entry "construct-literal" method (meta) ("context" "." "rest") #f #f 58 16 58 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 62 20 62 30 ("self" "view~self" "set!" "nextmethod" "apply" "others" "view" "bind-keywords" "rest")}
        {Lisp-Entry "compare-object" method (override) ("target") #f #f 68 20 68 34 ("else" ":not-equal" "get-view" "get-view~" "view" "eq?" "if" ":equal" "case" "nextmethod" "result" "let" "target")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 79 20 79 25 ("view" "get-alignment" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "get" method () ("property") #f #f 87 11 87 14 ("nextmethod" "else" "form" "case" "property")}
        {Lisp-Entry "set" method () ("property" "value") #f #f 94 11 94 14 ("nextmethod" "else" "set!" "form" "case" "value" "property")}
        {Lisp-Entry "get-form" method (public) () #f #f 106 18 106 26 ("form")}
        {Lisp-Entry "set-view" method (public) ("value") #f #f 111 18 111 26 ("view" "set!" "value")}
        {Lisp-Entry "get-width" method (override) () #f #f 120 20 120 29 ("view" "get-width" "get-width~")}
        {Lisp-Entry "get-height" method (override) () #f #f 124 20 124 30 ("view" "get-height" "get-height~")}
        {Lisp-Entry "run-width" method (override) ("run") #f #f 128 20 128 29 ("get-width" "run")}
        {Lisp-Entry "propagate?" method (override) () #f #f 137 20 137 30 ()}
        {Lisp-Entry "place-update" method (override) ("h" "v") #f #f 146 20 146 32 ("Point" "new" "view" "set-position" "set-position~" "v" "h")}
        {Lisp-Entry "height-update" method (override) ("height") #f #f 150 20 150 33 ("Point" "new" "set-position" "set-position~" "get-height" "justify-element" "get-v" "get-v~" "+" "v" "get-h" "get-h~" "h" "view" "get-position" "get-position~" "pos" "let*" "height")}}}})
"Wallpaper-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Wallpaper-Actions.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.view.Wallpaper-Actions" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Wallpaper-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 37 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("on-display-info" "display-info" "on-previous" "previous" "on-change" "change" "on-paused" "paused" "on-random" "random" "on-delete-file" "delete-file" "on-add-to-favorite" "add-to-favorite" "stretched" "stretched-mode" "filled" "filled-mode" "tiled" "tiled-mode" ":alt" "centered" "mode:" "on-change-mode" "centered-mode" "Next" "on-next" "next" "Prior" "on-prior" "prior" "End" "on-end" "end" "Home" "on-home" "home" "Space" "Shortcut" "shortcut:" "on-empty" ":stage" "Event-Handler" "action-handler:" "empty" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Wallpaper-Stage"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Wallpaper-Stage.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Wallpaper-Stage" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.skin" "jazz.ui.dialog" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.io" "jazz.graphic")}
      {Lisp-Entry "Wallpaper-Stage" class (undocumented) ((extends . "Stage")) #f #f 51 20 51 35 ("1." "max-delay:" "Wallpaper-Locator" "new" "Stage")
        {Lisp-Entry "image" slot () ((initialize . "#f")) #f #f 54 8 54 13 ()}
        {Lisp-Entry "previous" slot () ((initialize . "#f")) #f #f 55 8 55 16 ()}
        {Lisp-Entry "wallpapers" slot () ((initialize . "'()")) #f #f 56 8 56 18 ()}
        {Lisp-Entry "mode" slot () ((initialize . "#f")) #f #f 57 8 57 12 ()}
        {Lisp-Entry "random?" slot () ((initialize . "#f")) #f #f 58 8 58 15 ()}
        {Lisp-Entry "browse?" slot () ((initialize . "#f")) #f #f 59 8 59 15 ()}
        {Lisp-Entry "configuration" slot () ((initialize . "#f")) #f #f 60 8 60 21 ()}
        {Lisp-Entry "choices" slot () ((initialize . "'()")) #f #f 61 8 61 15 ()}
        {Lisp-Entry "locator" slot () ((initialize . "(new Wallpaper-Locator max-delay: 1.)")) #f #f 62 8 62 15 ()}
        {Lisp-Entry "changer" slot () ((initialize . "#f")) #f #f 63 8 63 15 ()}
        {Lisp-Entry "threads" slot () ((initialize . "'()")) #f #f 64 8 64 15 ()}
        {Lisp-Entry "paused?" slot () ((initialize . "#f")) #f #f 65 8 65 15 ()}
        {Lisp-Entry "done?" slot () ((initialize . "#f")) #f #f 66 8 66 13 ()}
        {Lisp-Entry "form" form () () #f #f 69 3 69 7 ("tooltip?:" "install" "<install>")}
        {Lisp-Entry "preferences" method () () #f #f 73 11 73 22 ("error?:" "wallpaper" "get-preferences")}
        {Lisp-Entry "install-wallpaper" method (override) () #f #f 77 20 77 37 ("child" "child~" "install-configuration" "get-active" "get-active~" "active" "when" "preferences" "pref" "let")}
        {Lisp-Entry "install-configuration" method () ("config" "(brws? #f)") #f #f 85 11 85 32 ("get-period" "get-period~" "setup-changer" "changer" "and" "get-startup" "get-startup~" "startup-file" "set-source" "get-favorites" "get-favorites~" "setup-favorites" "get-recursive?" "get-recursive?~" "setup-wallpapers" "Directory" "is?" "dir?" "get-directory" "get-directory~" "wallpaper" "let" "get-size" "set-size" "set-size~" "get-random?" "get-random?~" "set-random?" "get-mode" "get-mode~" "set-mode" "cache?:" "Image" "new" "invalidate-view" "wallpapers" "image" "begin" "not" "if" "browse?" "set!" "configuration" "neq?" "when" "brws?" "config")}
        {Lisp-Entry "context-menu" method () ("pos") #f #f 110 11 110 23 ("track-popup-menu" "acquire-focus" "nextmethod" "preferences" "get-children" "get-children~" "null?" "layout-menu" "layout-menu~" "if" "set-title" "set-title~" "member?" "favorite?" "get-favorites" "get-favorites~" "favorites" "get-name" "get-name~" "name" "configuration" "and" "when" "favorite-separator" "favorite" "set-visible?" "set-visible?~" "get-source" "source" "manage" "locate" "locate~" "get-content" "get-content~" "manage-menu" "Stage-Menu" "new" "menu" "let*" "new-stage-menu" "define" "pos")}
        {Lisp-Entry "on-change" method () ("evt") #f #f 132 11 132 20 ("change-wallpaper" "evt")}
        {Lisp-Entry "on-previous" method () ("evt") #f #f 136 11 136 22 ("show-previous" "evt")}
        {Lisp-Entry "on-add-to-favorite" method () ("evt") #f #f 140 11 140 29 ("format" "flash-message" "set-preference" "cons" "remove!" "new-favorites" "member?" "favorite?" "get-favorites" "get-favorites~" "favorites" "get-name" "get-name~" "name" "let*" "bell" "configuration" "not" "or" "if" "get-source" "source" "let" "evt")}
        {Lisp-Entry "on-delete-file" method () ("evt") #f #f 152 11 152 25 ("change-wallpaper" "choices" "=" "test:" "remove!" "wallpapers" "set!" "get-name" "get-name~" "format" "flash-message" "delete-file" "delete-file~" "get-source" "source" "let" "image" "when" "evt")}
        {Lisp-Entry "on-change-mode" method () ("evt") #f #f 163 11 163 25 ("mode:" "get-property" "get-property~" "set-mode" "evt")}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 167 20 167 31 ("invalidate-view" "set-size" "set-size~" "image" "when" "nextmethod" "size")}
        {Lisp-Entry "get-tooltip-text" method (override) () #f #f 174 20 174 36 ("get-mode" "get-mode~" "get-height" "get-height~" "get-width" "get-width~" "format" "list" "image-size~" "image-size" "get-source" "source" "let" "alt-down?" "control-down?" "image" "and" "when")}
        {Lisp-Entry "get-source" method () () #f #f 187 11 187 21 ("get-source" "get-source~" "image" "when")}
        {Lisp-Entry "set-source" method () ("file") #f #f 192 11 192 21 ("update-view" "invalidate-view" "format" "message-box" "else" "exists?" "exists?~" "image" "set-source" "set-source~" "not" "cond" "get-source" "previous" "set!" "file")}
        {Lisp-Entry "set-mode" method () ("mode") #f #f 205 11 205 19 ("invalidate-view" "set-mode" "set-mode~" "image" "when" "self" "mode~self" "set!" "mode")}
        {Lisp-Entry "set-random?" method () ("flag") #f #f 212 11 212 22 ("random?" "set!" "flag")}
        {Lisp-Entry "setup-wallpapers" method () ("dir" "recursive?") #f #f 216 11 216 27 ("get-name" "get-name~" "key:" "ci<?" "sort" "wallpapers" "recursive?:" "cons" "set!" "image-file?" "when" "file" "lambda" "iterate-directory" "iterate-directory~" "files" "let" "recursive?" "dir")}
        {Lisp-Entry "image-file?" method () ("file") #f #f 226 11 226 22 ("extension=?" "test:" "get-extension" "get-extension~" "member?" "file")}
        {Lisp-Entry "setup-favorites" method () ("dir" "favorites") #f #f 231 11 231 26 ("wallpaper-file" "favorite" "lambda" "map" "choices" "set!" "favorites" "dir")}
        {Lisp-Entry "startup-file" method () ("dir?" "dir" "startup") #f #f 237 11 237 23 ("next-wallpaper" "else" "wallpaper-file" ":empty" "eq?" "if" "background" "not" "cond" "startup" "dir" "dir?")}
        {Lisp-Entry "setup-changer" method () ("period") #f #f 243 11 243 24 ("wallpaper-changer" "change-wallpaper" "paused?" "unless" "sleep" "done?" "not" "while" "lambda" "new-thread" "thread-start!" "changer" "set!" "unimplemented" "period")}
        {Lisp-Entry "wallpaper-file" definition () ("dir" "name") #f #f 257 15 257 29 ("new-file" "new-file~" "name" "dir")}
        {Lisp-Entry "change-wallpaper" method (public) () #f #f 261 18 261 34 ("next-wallpaper" "set-source" "configuration" "when")}
        {Lisp-Entry "show-first" method () () #f #f 266 11 266 21 ("car" "set-source" "wallpapers" "when" "random?" "unless")}
        {Lisp-Entry "show-last" method () () #f #f 272 11 272 20 ("last" "set-source" "wallpapers" "when" "random?" "unless")}
        {Lisp-Entry "show-previous" method () () #f #f 278 11 278 24 ("previous" "set!" "set-source" "when" "previous-wallpaper" "wallpaper" "let")}
        {Lisp-Entry "next-wallpaper" method () () #f #f 285 11 285 25 ("remove!" "random-element" "wallpaper" "copy" "set!" "choices" "null?" "when" "length" "1" "wallpaper-rank" "+" "modulo" "element" "wallpapers" "car" "get-source" "source" "let" "random?" "not" "if")}
        {Lisp-Entry "previous-wallpaper" method () () #f #f 299 11 299 29 ("previous" "1" "-" "element" "0" "=" "wallpaper-rank" "rank" "length" "count" "last" "wallpapers" "and" "get-source" "source" "let" "random?" "not" "if")}
        {Lisp-Entry "wallpaper-rank" method () ("wallpaper") #f #f 312 11 312 25 ("=" "test:" "wallpapers" "find" "wallpaper")}
        {Lisp-Entry "focus-actions" method () () #f #f 322 11 322 24 ("nextmethod" "wallpaper" "find-actions" "cons")}
        {Lisp-Entry "on-empty" method () ("evt") #f #f 332 11 332 19 ("install-configuration" "evt")}
        {Lisp-Entry "on-home" method () ("evt") #f #f 336 11 336 18 ("show-first" "evt")}
        {Lisp-Entry "on-end" method () ("evt") #f #f 340 11 340 17 ("show-last" "evt")}
        {Lisp-Entry "on-prior" method () ("evt") #f #f 344 11 344 19 ("show-previous" "evt")}
        {Lisp-Entry "on-next" method () ("evt") #f #f 348 11 348 18 ("change-wallpaper" "evt")}
        {Lisp-Entry "on-random" method () ("evt") #f #f 352 11 352 20 ("if" "flash-message" "change-wallpaper" "when" "not" "random?" "set!" "evt")}
        {Lisp-Entry "on-paused" method () ("evt") #f #f 359 11 359 20 ("if" "flash-message" "not" "paused?" "set!" "evt")}
        {Lisp-Entry "on-display-info" method () ("evt") #f #f 364 11 364 26 ("2." "delay:" "format" "member?" "favorite?" "configuration" "get-favorites" "get-favorites~" "favorites" "get-name" "get-name~" "name" "let*" "Image-Resource" "not" "if" "flash-message" "get-source" "source" "let" "evt")}
        {Lisp-Entry "flash-message" method () ("message" "(delay: delay 1.)") #f #f 376 11 376 24 ("message-flasher" "clear-user-message" "sleep" "user-message" "lambda" "new-thread" "thread-start!" "unimplemented" "1." "delay" "delay:" "message")}
        {Lisp-Entry "key-press" method (override) ("key") #f #f 393 20 393 29 ("locator" "enter" "enter~" "wallpapers" "alphanumeric?" "and" "when" "key")}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 403 20 403 35 ("fill-background" "fill-background~" "get-bounds" "bounds" "nextmethod" "not" "if" "get-background" "get-background~" "background" "get-look" "look" "let" "context" "surface")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 412 20 412 24 ("size:" "0" "draw" "draw~" "image" "when" "get-size" "size" "let" "nextmethod" "context" "surface")}
        {Lisp-Entry "get-look" method (override) () #f #f 424 20 424 28 ("stage" "find-look")}
        {Lisp-Entry "on-configure" method (package) ("evt") #f #f 433 19 433 31 ("eq?" "if" "configuration:" "get-property" "get-property~" "let" "get-mode" "get-mode~" "mode:" "get-period" "get-period~" "configuration" "and" "period:" "choose-directory" "directory:" "Wallpaper-Configuration" "new" "install-configuration" "browse-configuration" "define" "evt")}}
      {Lisp-Entry "Wallpaper-Locator" class () ((extends . "Locator")) #f #f 453 7 453 24 ("Locator")
        {Lisp-Entry "iterate" method () ("proc") #f #f 457 11 457 18 ("length" "0" "naturals" "wallpapers" "get-name" "get-name~" "title" "let" "rank" "wallpaper" "lambda" "for-each" "proc")}
        {Lisp-Entry "select" method () ("rank") #f #f 466 11 466 17 ("wallpapers" "element" "set-source" "rank")}}
      {Lisp-Entry "Stage-Menu" class () ((extends . "Context-Menu")) #f #f 475 7 475 17 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 478 3 478 7 ("Manage-Menu" "<Manage-Menu>" "manage" "manage-separator" "previous" "change" "paused" "slide-separator" "random" "Check-Item" "<Check-Item>" "random-separator" "stretched-mode" "stretched" "filled-mode" "filled" "tiled-mode" "tiled" "centered-mode" "wallpaper" "Action" "action-handler:" "centered" "Radio-Item" "<Radio-Item>" "Separator-Item" "<Separator-Item>" "Configure-Menu" "<Configure-Menu>" "Image-Resource" "icon:" "title:" "configure" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}
        {Lisp-Entry "finish" method () ("rest") #f #f 499 11 499 17 ("get-name" "get-name~" "set-title" "set-title~" "or" "paused?" "random?" "set-checked?" "set-checked?~" "manage" "manage-separator" "previous" "change" "paused" "slide-separator" "random" "random-separator" "set-visible?" "set-visible?~" "begin" "not" "if" "get-source" "source" "let" "locate" "set-selected?" "set-selected?~" "mode" "when" "nextmethod" "rest")}}
      {Lisp-Entry "Configure-Menu" class () ((extends . "Context-Menu")) #f #f 525 7 525 21 ("Context-Menu")
        {Lisp-Entry "finish" method () ("rest") #f #f 529 11 529 17 ("update-menu" "nextmethod" "rest")}
        {Lisp-Entry "update-menu" method (public) () #f #f 535 18 535 29 ("get-presentation-property" "get-presentation-property~" "get-active?" "get-active?~" "config" "lambda" "for-each" "self" "parent:" "Separator-Item" "new" "when" "preferences" "get-children" "get-children~" "children" "let" "Image-Resource" "insert-item")}
        {Lisp-Entry "insert-item" method () ("title" "icon" "config" "browse-item?") #f #f 549 11 549 22 ("configuration:" "list" "properties:" "on-configure" "method-name:" ":stage" "target-name:" "Event-Handler" "action-handler:" "icon:" "selected?:" "title:" "self" "parent:" "Radio-Item" "new" "configuration" "eq?" "browse?" "if" "selected?" "let" "browse-item?" "config" "icon" "title")}}
      {Lisp-Entry "Manage-Menu" class () ((extends . "Context-Menu")) #f #f 561 7 561 18 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 564 3 564 7 ("title:" "delete-file" "favorite-separator" "Separator-Item" "<Separator-Item>" "add-to-favorite" "wallpaper" "Action" "action-handler:" "Image-Resource" "icon:" "favorite" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Window"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "Window.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.ui.window.Window" module (protected) () #f #f 39 18 39 39 ("jazz")
      {Lisp-Entry "import" import () () #f #f 42 1 42 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui" "jazz.locale" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Window" class () ((extends . "Figure")) #f #f 50 7 50 13 ("explicit" "Figure")
        {Lisp-Entry "title" property () ((initialize . "#f") (accessors . "explicit")) #f #f 53 12 53 17 ()}
        {Lisp-Entry "handle" slot () ((initialize . "#f") (accessors . "generate")) #f #f 56 8 56 14 ()}
        {Lisp-Entry "get-handle" accessor () () #f #f 56 39 56 47 ()}
        {Lisp-Entry "set-handle" accessor () () #f #f 56 39 56 47 ()}
        {Lisp-Entry "initially-visible?" method (override) () #f #f 64 20 64 38 ()}
        {Lisp-Entry "default-parent" method (override) () #f #f 68 20 68 34 ("self" "window-default-parent")}
        {Lisp-Entry "prepare" method (override) ("rest") #f #f 72 20 72 27 ("prepare-handle" "nextmethod" "set-handle" "self" "set-window" "handle" "setup-handle" "define" "rest")}
        {Lisp-Entry "conclude" method (override) ("rest") #f #f 81 20 81 28 ("get-size" "restored" "size-change" "nextmethod" "rest")}
        {Lisp-Entry "open?" method (public) () #f #f 86 18 86 23 ("handle" "boolean")}
        {Lisp-Entry "show" method (override) () #f #f 90 20 90 24 ("show-window" "handle" "assert" "nextmethod")}
        {Lisp-Entry "hide" method (override) () #f #f 96 20 96 24 ("hide-window" "handle" "assert" "nextmethod")}
        {Lisp-Entry "minimize" method (public) () #f #f 102 18 102 26 ("minimize-window" "handle" "assert")}
        {Lisp-Entry "get-state" method (public) () #f #f 107 18 107 27 ("window-state" "handle" "assert")}
        {Lisp-Entry "set-state" method (public) ("state") #f #f 112 18 112 27 ("error" "else" "restore-window" "restored" "maximize-window" "maximized" "minimize-window" "minimized" "case" "handle" "assert" "state")}
        {Lisp-Entry "set-placement" method (public) ("position" "size") #f #f 121 18 121 31 ("set-window-placement" "handle" "assert" "size" "position")}
        {Lisp-Entry "maximize" method (public) () #f #f 126 18 126 26 ("show-maximized" "handle" "assert")}
        {Lisp-Entry "close" method (override) () #f #f 131 20 131 25 ("set-handle" "set-window" "handle" "destroy-window" "destroy-component" "set-visible?")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 139 20 139 25 ("empty-string?" "title" "or" "get-size" "size" "get-position" "position" "let" "format" "handle" "not" "if" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "add-child" method (override) ("child") #f #f 156 20 156 29 ("cons" "children" "set!" "child")}
        {Lisp-Entry "add-form" method (override) ("parent-form" "child-form") #f #f 160 20 160 28 ("set-parent" "set-parent~" "child-form" "parent-form")}
        {Lisp-Entry "unprocessed-message" method (protected virtual) () #f #f 169 29 169 48 ("unprocessed")}
        {Lisp-Entry "erase-background" method (protected virtual) ("handle") #f #f 178 29 178 45 ("platform-erase-background" "assert" "handle")}
        {Lisp-Entry "paint" method (protected virtual) ("region" "." "platform-data") #f #f 183 29 183 34 ("draw" "surface" "lambda" "self" "with-platform-painting" "platform-data" "region")}
        {Lisp-Entry "*colors*" definition () () #f #f 189 14 189 22 ("Ochre" "Dark-Purple" "Dark-Blue" "Dark-Green" "Dark-Yellow" "Dark-Orange" "Dark-Red" "Color")}
        {Lisp-Entry "*nb-colors*" definition () () #f #f 198 14 198 25 ("*colors*" "length")}
        {Lisp-Entry "*current-color*" definition () () #f #f 201 14 201 29 ("0")}
        {Lisp-Entry "draw-placeholder" definition () ("surface") #f #f 205 15 205 31 ("paint" "paint~" "cycle-debug-color!" "set-color" "set-color~" "surface")}
        {Lisp-Entry "draw" method (protected virtual) ("surface") #f #f 210 29 210 33 ("surface")}
        {Lisp-Entry "mouse-wheel" method (protected virtual) ("h" "v" "delta") #f #f 219 29 219 40 ("unprocessed" "processed" "mouse-wheel" "mouse-wheel~" "acquired" "if" "get-mouse-in" "view" "let" "delta" "v" "h")}
        {Lisp-Entry "mouse-down" method (protected virtual) ("h" "v") #f #f 228 29 228 39 ("unprocessed" "v" "h")}
        {Lisp-Entry "mouse-move" method (protected virtual) ("h" "v") #f #f 232 29 232 39 ("unprocessed" "v" "h")}
        {Lisp-Entry "mouse-up" method (protected virtual) ("h" "v") #f #f 236 29 236 37 ("unprocessed" "v" "h")}
        {Lisp-Entry "double-click" method (protected virtual) ("h" "v") #f #f 240 29 240 41 ("mouse-down" "v" "h")}
        {Lisp-Entry "middle-mouse-down" method (protected virtual) ("h" "v") #f #f 244 29 244 46 ("unprocessed" "v" "h")}
        {Lisp-Entry "middle-mouse-up" method (protected virtual) ("h" "v") #f #f 248 29 248 44 ("unprocessed" "v" "h")}
        {Lisp-Entry "right-mouse-down" method (protected virtual) ("h" "v") #f #f 252 29 252 45 ("unprocessed" "v" "h")}
        {Lisp-Entry "right-mouse-up" method (protected virtual) ("h" "v") #f #f 256 29 256 43 ("unprocessed" "v" "h")}
        {Lisp-Entry "call-context-menu" method () ("h" "v") #f #f 261 11 261 28 ("get-v" "get-v~" "get-h" "get-h~" "context-menu" "Point" "new" "get-desktop" "acquire" "pos" "let" "v" "h")}
        {Lisp-Entry "context-menu" method (protected virtual) ("h" "v") #f #f 266 29 266 41 ("unprocessed" "v" "h")}
        {Lisp-Entry "acquire-capture" method (public) () #f #f 275 18 275 33 ("set-capture" "handle" "assert")}
        {Lisp-Entry "release-capture" method (public) () #f #f 280 18 280 33 ("unset-capture")}
        {Lisp-Entry "cursor-update" method (protected virtual) ("hit") #f #f 289 29 289 42 ("unprocessed" "processed" "if" "hit")}
        {Lisp-Entry "system-key-down" method () () #f #f 300 11 300 26 ("processed" "update-cursor")}
        {Lisp-Entry "system-key-up" method () () #f #f 305 11 305 24 ("processed" "update-cursor")}
        {Lisp-Entry "key-down" method (protected virtual) ("code") #f #f 310 29 310 37 ("unprocessed" "code")}
        {Lisp-Entry "key-up" method (protected virtual) ("code") #f #f 314 29 314 35 ("unprocessed" "code")}
        {Lisp-Entry "call-key-press" method () ("char") #f #f 318 11 318 25 ("key-press" "invalid-character?" "unless" "char")}
        {Lisp-Entry "key-press" method (public virtual) ("char") #f #f 323 26 323 35 ("unprocessed" "char")}
        {Lisp-Entry "reset-focus" method (package virtual) () #f #f 332 27 332 38 ()}
        {Lisp-Entry "timer-pulse" method (protected virtual) () #f #f 341 29 341 40 ("thread-yield!")}
        {Lisp-Entry "call-position-change" method (public) ("h" "v") #f #f 350 18 350 38 ("Point" "new" "position-change" "v" "h")}
        {Lisp-Entry "position-change" method (protected virtual) ("position") #f #f 354 29 354 44 ("unprocessed" "position")}
        {Lisp-Entry "call-size-change" method (public) ("state" "width" "height") #f #f 358 18 358 34 ("unprocessed" "Dimension" "new" "size-change" "get-installed?" "if" "height" "width" "state")}
        {Lisp-Entry "size-change" method (protected virtual) ("state" "size") #f #f 364 29 364 40 ("unprocessed" "size" "state")}
        {Lisp-Entry "mouse-leave" method (protected virtual) () #f #f 368 29 368 40 ("unprocessed")}
        {Lisp-Entry "mouse-activate?" method (protected virtual) () #f #f 372 29 372 44 ()}
        {Lisp-Entry "on-mouse-activate" method (protected virtual) () #f #f 376 29 376 46 ("unprocessed")}
        {Lisp-Entry "on-activate" method (protected virtual) ("kind") #f #f 381 29 381 40 ("unprocessed" "on-activate-palette" "on-deactivate-palette" "inactive" "eq?" "if" "kind")}
        {Lisp-Entry "on-activate-palette" method (protected virtual) () #f #f 388 29 388 48 ()}
        {Lisp-Entry "on-deactivate-palette" method (protected virtual) () #f #f 392 29 392 50 ()}
        {Lisp-Entry "activate-application" method (protected virtual) () #f #f 398 29 398 49 ("unprocessed")}
        {Lisp-Entry "deactivate-application" method (protected virtual) () #f #f 404 29 404 51 ("unprocessed")}
        {Lisp-Entry "on-close" method (protected virtual) ("evt") #f #f 408 29 408 37 ("close-window" "evt")}
        {Lisp-Entry "close-window" method (public virtual) () #f #f 412 26 412 38 ("close")}
        {Lisp-Entry "focus-gain" method (protected virtual) () #f #f 416 29 416 39 ("unprocessed")}
        {Lisp-Entry "focus-lose" method (protected virtual) () #f #f 420 29 420 39 ("unprocessed")}
        {Lisp-Entry "drop-files" method () ("wparam") #f #f 429 11 429 21 ("self" "platform-drop-files" "wparam")}
        {Lisp-Entry "receive-files" method (protected virtual) ("pos" "files") #f #f 433 29 433 42 ("files" "pos")}
        {Lisp-Entry "fade-in" method (public) ("(fade-speed: fade-speed #f)") #f #f 446 18 446 25 ("set-layered?" "set!" "fl" "<fl>" "cast" "/" "-" "*" "fxceiling" "+" "<" "while" "start" "current-time" "time->seconds" "now" "0.15" "delay" "255" "max" "let*" "update-window" "set-visible?" "0" "handle" "set-alpha-blending" "fade-speed" "fade-speed:")}
        {Lisp-Entry "fade-out" method (public) ("(to: to 0)" "(step: step 5)") #f #f 463 18 463 26 ("=" "unless" "set!" "handle" "set-alpha-blending" "by" "from" "n" "for" "loop" "alpha" "let" "5" "step" "step:" "0" "to" "to:")}
        {Lisp-Entry "opened?" method (public) () #f #f 478 18 478 25 ("handle" "boolean")}
        {Lisp-Entry "set-parent" method (override) ("parent") #f #f 482 20 482 30 ("platform-set-parent" "handle" "assert" "nextmethod" "parent")}
        {Lisp-Entry "get-external-frame" method (public) () #f #f 488 18 488 36 ("get-frame" "get-frame~" "parent" "when" "External-Frame" "self" "is?" "if")}
        {Lisp-Entry "get-overlapped" method (public) () #f #f 495 18 495 32 ("parent" "get-overlapped" "get-overlapped~" "Overlapped" "self" "is?" "if")}
        {Lisp-Entry "get-title" method (public virtual) () #f #f 501 26 501 35 ("title")}
        {Lisp-Entry "set-title" method (public virtual) ("value") #f #f 505 26 505 35 ("localize" "set-window-title" "handle" "assert" "title" "set!" "value")}
        {Lisp-Entry "get-window-title" method (public) () #f #f 511 18 511 34 ("get-window-handle-title" "handle" "assert")}
        {Lisp-Entry "acquire" method (public) ("window" "<Window>" "shape") #f #f 516 18 516 25 ("error" "else" "acquire-rect" "Rect" "get-handle" "get-handle~" "acquire-point" "Point" "typecase" "handle" "assert" "shape" "Window" "<Window>" "window")}
        {Lisp-Entry "get-position" method (override) () #f "<Point>" 527 20 527 32 ("platform-get-position" "handle" "assert" "Point" "<Point>")}
        {Lisp-Entry "set-position" method (override) ("pos" "<Point>") #f "<void>" 532 20 532 32 ("platform-set-position" "get-position" "nu=?" "unless" "handle" "assert" "void" "<void>" "Point" "<Point>" "pos")}
        {Lisp-Entry "move-window" method (public) ("dh" "<fx>" "dv" "<fx>") #f #f 538 18 538 29 ("get-v" "get-v~" "get-h" "get-h~" "+" "Point" "new" "set-position" "get-position" "pos" "let" "dv" "fx" "<fx>" "dh")}
        {Lisp-Entry "get-size" method (override) () #f "<Dimension>" 543 20 543 28 ("platform-get-size" "handle" "assert" "Dimension" "<Dimension>")}
        {Lisp-Entry "set-size" method (override) ("new-size" "<Dimension>") #f "<void>" 548 20 548 28 ("get-window-size" "nu+" "set-window-size" "0" "nu=?" "unless" "platform-get-size" "nu-" "delta" "let" "handle" "assert" "void" "<void>" "Dimension" "<Dimension>" "new-size")}
        {Lisp-Entry "size-window" method (public) ("dwidth" "<fx>" "dheight" "<fx>") #f #f 555 18 555 29 ("get-height" "get-height~" "get-width" "get-width~" "+" "Dimension" "new" "set-size" "get-size" "size" "let" "dheight" "fx" "<fx>" "dwidth")}
        {Lisp-Entry "get-window-size" method (public) () #f "<Dimension>" 560 18 560 33 ("platform-get-window-size" "handle" "assert" "Dimension" "<Dimension>")}
        {Lisp-Entry "set-window-size" method (public) ("size") #f #f 565 18 565 33 ("platform-set-window-size" "handle" "assert" "size")}
        {Lisp-Entry "set-rect" method (public) ("rect") #f #f 570 18 570 26 ("platform-set-rect" "handle" "assert" "rect")}
        {Lisp-Entry "grow-rect" method (public) ("dh" "dv" "dwidth" "dheight") #f #f 575 18 575 27 ("set-position" "set-window-size" "Dimension" "get-window-size" "size" "Point" "new" "get-position" "+" "pos" "let" "dheight" "dwidth" "dv" "dh")}
        {Lisp-Entry "get-width" method (public) () #f "<fx>" 582 18 582 27 ("get-size" "get-width" "get-width~" "fx" "<fx>")}
        {Lisp-Entry "get-height" method (public) () #f "<fx>" 586 18 586 28 ("get-size" "get-height" "get-height~" "fx" "<fx>")}
        {Lisp-Entry "get-rect" method (public) () #f "<Rect>" 590 18 590 26 ("get-handle" "get-handle~" "get-parent" "if" "platform-get-rect" "handle" "assert" "Rect" "<Rect>")}
        {Lisp-Entry "get-bounds" method (public) () #f "<Rect>" 595 18 595 28 ("platform-get-bounds" "handle" "assert" "Rect" "<Rect>")}
        {Lisp-Entry "ensure-displayed" method (public) () #f #f 600 18 600 34 ("set-position" "set-size" "8" "padding:" "fit-within" "new-size" "new-position" "receive" "get-rect" "rect" "get-desktop" "get-size" "get-size~" "parent" "not" "if" "outer" "let")}
        {Lisp-Entry "mouse-position" method (public) () #f "<Point>" 608 18 608 32 ("platform-mouse-position" "get-desktop" "acquire" "Point" "<Point>")}
        {Lisp-Entry "mouse-window" method (public) () #f #f 612 18 612 30 ("mouse-position" "find-window")}
        {Lisp-Entry "mouse-in-window?" method (public) () #f #f 616 18 616 34 ("mouse-position" "point-in-window?")}
        {Lisp-Entry "point-in-window?" method (public) ("point") #f #f 620 18 620 34 ("get-height" "get-height~" "get-v" "get-v~" "get-width" "get-width~" "0" "get-h" "get-h~" "in-interval?" "and" "get-window-size" "size" "let" "point")}
        {Lisp-Entry "find-window" method (public) ("point") #f #f 626 18 626 29 ("platform-window-from-point" "get-window" "point")}
        {Lisp-Entry "flash-window" method (public) () #f #f 630 18 630 30 (".1" "sleep" "handle" "FlashWindow" "3" "repeat" "loop" "flash-window" "unimplemented")}
        {Lisp-Entry "move" method (public) ("x" "y" "cx" "cy") #f #f 640 18 640 22 ("platform-move-window" "handle" "assert" "cy" "cx" "y" "x")}
        {Lisp-Entry "acquire-focus" method (public) () #f #f 645 18 645 31 ("self" "set-window-focus")}
        {Lisp-Entry "get-enabled?" method (public) () #f #f 649 18 649 30 ("platform-window-enabled?" "handle" "assert")}
        {Lisp-Entry "enable-window" method (public) () #f #f 654 18 654 31 ("platform-enable-window" "handle" "assert")}
        {Lisp-Entry "disable-window" method (public) () #f #f 659 18 659 32 ("platform-disable-window" "handle" "assert")}
        {Lisp-Entry "get-client-rect" method (public) () #f #f 664 18 664 33 ("platform-get-client-rect" "handle" "assert")}
        {Lisp-Entry "scroll-window" method (public) ("delta" "rect" "clip-rect") #f #f 669 18 669 31 ("when" "debug-flicker" "proc" "let" "platform-scroll-window" "invalidate-rect" "inhibit-updates?" "if" "handle" "assert" "clip-rect" "rect" "delta")}
        {Lisp-Entry "invalidate-rect" method (public) ("rect") #f #f 679 18 679 33 ("platform-invalidate-rect" "handle" "assert" "rect")}
        {Lisp-Entry "invalidate-region" method (public) ("region") #f #f 684 18 684 35 ("platform-invalidate-region" "handle" "assert" "region")}
        {Lisp-Entry "invalidate-window" method (public) () #f #f 689 18 689 35 ("platform-invalidate-window" "handle" "assert")}
        {Lisp-Entry "redraw-window" method (public) ("(rect: rect #f)" "(region: region #f)") #f #f 694 18 694 31 ("get-client-rect" "platform-redraw-window" "or" "invalidate-window" "else" "invalidate-region" "invalidate-rect" "cond" "inhibit-updates?" "if" "handle" "assert" "region" "region:" "rect" "rect:")}
        {Lisp-Entry "invalidate-border" method (public) ("(insets: insets {Rect 1 1 1 1})") #f #f 705 18 705 35 ("invalidate-region" "border-region" "region" "with" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "redraw-border" method (public) ("(insets: insets {Rect 1 1 1 1})") #f #f 710 18 710 31 ("region:" "redraw-window" "border-region" "region" "with" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "border-region" method (public) ("(insets: insets {Rect 1 1 1 1})") #f #f 715 18 715 31 ("get-client-rect" "frame-region" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "update-window" method (public) () #f #f 719 18 719 31 ("platform-update-window" "invalidate-window" "inhibit-updates?" "if" "handle" "assert")}
        {Lisp-Entry "show-noactivate" method (public) () #f #f 726 18 726 33 ("platform-show-noactivate" "handle" "assert")}
        {Lisp-Entry "hide-noactivate" method (public) () #f #f 731 18 731 33 ("platform-hide-noactivate" "handle" "assert")}
        {Lisp-Entry "first-window" method (public) () #f #f 741 18 741 30 ("first" "null?" "if" "get-windows" "windows" "let")}
        {Lisp-Entry "get-windows" method (public) ("(include-invisibles?: include-invisibles? #f)") #f #f 748 18 748 29 ("get-children" "get-visible?" "get-visible?~" "or" "Window" "is?" "and" "child" "lambda" "collect-if" "include-invisibles?" "include-invisibles?:")}
        {Lisp-Entry "front-window?" method (public) () #f #f 755 18 755 31 ("parent" "first-window" "first-window~" "self" "eq?")}
        {Lisp-Entry "bring-to-front" method (override) () #f #f 764 20 764 34 ("platform-bring-window-to-front" "handle" "assert" "nextmethod")}
        {Lisp-Entry "send-to-back" method (override) () #f #f 770 20 770 32 ("platform-send-window-to-back" "handle" "assert" "nextmethod")}
        {Lisp-Entry "select-foreground" method (public) () #f #f 776 18 776 35 ("handle" "platform-select-foreground-window")}
        {Lisp-Entry "get-location" method (override) () #f #f 785 20 785 32 ("location")}
        {Lisp-Entry "set-location" method (override) ("loc") #f #f 789 20 789 32 ("location" "set!" "loc")}
        {Lisp-Entry "layout-window" method (public) () #f #f 793 18 793 31 ("layout")}
        {Lisp-Entry "layout" method (public virtual) () #f #f 797 26 797 32 ()}
        {Lisp-Entry "mouse-view" method (public) () #f #f 806 18 806 28 ("mouse-position" "find-view")}
        {Lisp-Entry "find-view" method (public) ("pos") #f #f 810 18 810 27 ("self" "acquire" "acquire~" "find-drawing" "find-drawing~" "get-root" "get-root~" "root" "View-Player" "is?" "when" "find-window" "window" "let" "pos")}
        {Lisp-Entry "to-view" method (public) ("shape" "view") #f #f 817 18 817 25 ("get-root" "get-root~" "self" "acquire" "acquire~" "acquired" "get-player" "get-player~" "player" "let*" "view" "shape")}
        {Lisp-Entry "debug-window" method (public virtual) ("pos") #f #f 828 26 828 38 ("self" "Development" "set-%" "set-%~" "debug-window" "unimplemented" "pos")}
        {Lisp-Entry "describe-window" method (public virtual) ("pos") #f #f 834 26 834 41 ("WINEXSTYLE" "get-ex-style" "WINSTYLE" "bits->names" "get-client-rect" "get-bounds" "get-size" "get-position" "WS_CLIPSIBLINGS" "WS_CLIPCHILDREN" "get-style" "mask-bit-set?" "get-class-background" "get-name" "self" "class-of" ":console" "format" "describe-window" "unimplemented" "pos")}}}})
"Window-Advanced-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Window-Advanced-Menu.jazz"} 243057373. jazz
    {Lisp-Entry "jazz.ui.menu.Window-Advanced-Menu" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Window-Advanced-Menu" class () ((extends . "Window-Menu")) #f #f 44 7 44 27 ("Window-Menu")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("previous-stage" "next-stage" "stage-separator" "Separator-Item" "<Separator-Item>" "current-frame" "application" "Action" "action-handler:" "tile-separator" "before:" "title:" "current" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Window-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Window-Menu.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.menu.Window-Menu" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.locale" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Window-Menu" class () ((extends . "Menu")) #f #f 47 7 47 18 ("Menu")
        {Lisp-Entry "base-items" slot () () #f #f 50 8 50 18 ()}
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("full-screen" "maximize/restore" "zoom-vertically" "zoom-horizontally" "zoom-separator" "tile-vertically" "tile-horizontally" "tile-separator" "Separator-Item" "<Separator-Item>" "previous-frame" "previous" "next-frame" "application" "Action" "action-handler:" "Image-Resource" "icon:" "next" "name:" "Label-Item" "<Label-Item>" "french:" "english:" "Locales" "title:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 67 20 67 26 ("get-children" "length" "base-items" "set!" "nextmethod" "rest")}
        {Lisp-Entry "update" method (override) () #f #f 72 20 72 26 ("layout-menu" "get-root" "get-root~" "on-select-palette" "Palette" "palette" "host:" "list" "properties:" "on-select-frame" "method-name:" ":application" "target-name:" "Event-Handler" "action-handler:" "icon:" "get-title" "get-title~" "title:" "Label-Item" "get-guest" "get-guest~" "guest-icon" "guest-icon~" "Frame-Host" "is?" "icon" "frame" "lambda" "self" "parent:" "Separator-Item" "new" "not-null?" "when" "base-items" "get-children" "tail" "close" "close~" "for-each" "collect-frames" "frames" "collect-palettes" "palettes" "let" "empty-string?" "null?" "or" "if" "title" "present-title" "define")}}}})
"Windows-Skin"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "Windows-Skin.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.skin.Windows-Skin" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Windows-Skin" class () ((extends . "Skin")) #f #f 44 7 44 19 ("Skin")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("scrollbar/document" "scrollbar/tool" "scrollbar" "header/document" "header/tool" "flat?:" "header" "border-flat?:" "group" "border/outline" "edge-flat?:" "border/entry" "name:" "!" "<!>" "title:" "install" "<install>")}}}})
"Wipe-Effect"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "effect" "Wipe-Effect.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.effect.Wipe-Effect" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Wipe-Effect" class (undocumented) ((extends . "Effect")) #f #f 43 20 43 31 ("Effect")
        {Lisp-Entry "direction" slot () () #f #f 46 8 46 17 ()}
        {Lisp-Entry "delay" slot () () #f #f 47 8 47 13 ()}
        {Lisp-Entry "initialize" method (override) ("(direction: direction #f)" "(delay: delay #f)") #f #f 50 20 50 30 ("delay~self" "self" "direction~self" "set!" "nextmethod" "delay" "delay:" "direction" "direction:")}
        {Lisp-Entry "animate" method (override) ("src" "dst" "pos" "size") #f #f 56 20 56 27 ("up" "v" "get-height" "get-height~" "down" "left" "get-v" "get-v~" "get-h" "get-h~" "-" "Point" "new" "1" "*" "h" "let*" "get-width" "get-width~" "below" "0" "from" "n" "for" "loop" "right" "direction" "case" "destination:" "size:" "position:" "bit-blit" "bit-blit~" "sleep" "delay" "when" "p" "lambda" "blit" "let" "size" "pos" "dst" "src")}}}})
"Workspace-Button"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "workspace" "Workspace-Button.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.workspace.Workspace-Button" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "Workspace-Button" class (undocumented) ((extends . "Radio-Tool")) #f #f 46 20 46 36 ("Radio-Tool")
        {Lisp-Entry "visit?" property () ((initialize . "#f") (getter . "generate")) #f #f 49 12 49 18 ()}
        {Lisp-Entry "get-visit?" accessor () () #f #f 49 42 49 50 ()}
        {Lisp-Entry "problem?" property () ((initialize . "#f") (getter . "generate")) #f #f 50 12 50 20 ()}
        {Lisp-Entry "get-problem?" accessor () () #f #f 50 42 50 50 ()}
        {Lisp-Entry "set-visit?" method (public) ("flag") #f #f 58 18 58 28 ("invalidate-view" "set!" "visit?" "neq?" "when" "flag")}
        {Lisp-Entry "set-problem?" method (public) ("flag") #f #f 64 18 64 30 ("invalidate-view" "set!" "problem?" "neq?" "when" "flag")}
        {Lisp-Entry "notify" method (public) ("visit?" "problem?") #f #f 70 18 70 24 ("invalidate-view" "problem?~self" "self" "visit?~self" "set!" "problem?" "visit?")}
        {Lisp-Entry "preferred-size" method (override) () #f #f 81 20 81 34 ("22" "localize" "effective-font" "text-width" "text-width~" "32" "+" "Dimension" "new" "default-size" "title" "not" "if")}
        {Lisp-Entry "problem-border" definition () () #f #f 92 14 92 28 ("Dark-Red" "Color")}
        {Lisp-Entry "visit-start" definition () () #f #f 95 14 95 25 ("Light-Red" "Color")}
        {Lisp-Entry "visit-end" definition () () #f #f 98 14 98 23 ("Red" "Color")}
        {Lisp-Entry "draw-frame" method (override) ("surface") #f #f 102 20 102 30 ("nextmethod" "problem-border" "get-bounds" "frame-round-rect" "frame-round-rect~" "problem?" "if" "surface")}
        {Lisp-Entry "draw-tool" method (override) ("surface" "context") #f #f 108 20 108 29 ("view-enabled?" "get-v" "get-v~" "20" "draw-text" "draw-text~" "Black" "Color" "set-text-color" "set-text-color~" "get-h" "get-h~" "+" "get-size" "get-text-extent" "get-text-extent~" "24" "Dimension" "nu+" "lambda" "justify-lazy" "center" "0" "localize" "draw-image" "title" "not" "1" "2" "pushed" "get-state" "eq?" "selected?" "or" "if" "offset" "let" "context" "surface")}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 122 20 122 35 ("nextmethod" "vertical" "direction:" "visit-end" "0.5" "visit-start" "0" "list" "-1" "1" "get-bounds" "expand-rect" "gradient-fill" "gradient-fill~" "visit?" "if" "context" "surface")}}}})
"Workspace-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "menu" "Workspace-Menu.jazz"} 247283256. jazz
    {Lisp-Entry "jazz.ui.menu.Workspace-Menu" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Workspace-Menu" class () ((extends . "Menu")) #f #f 45 7 45 21 ("Menu")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("previous-workspace" "previous" "next-workspace" "next" "next-separator" "untie-stage" "tie-frame-model" "clone-frame" "move-frame" "split-horizontally" "split-vertically" "delete-others" "application" "Action" "action-handler:" "Image-Resource" "icon:" "delete" "Label-Item" "<Label-Item>" "layout-separator" "name:" "Separator-Item" "<Separator-Item>" "title:" "install" "<install>")}}}})
"Workspace-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "workspace" "Workspace-Preferences.jazz"} 247283256. jazz
    {Lisp-Entry "jazz.ui.workspace.Workspace-Preferences" module (protected) () #f #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.workspace" "jazz.ui.window" "jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.designer" "jazz.debuggee")}
      {Lisp-Entry "Workspace-Preferences" class (undocumented) ((extends . "Figure-Preferences")) #f #f 51 20 51 41 ("Figure-Preferences")
        {Lisp-Entry "shortcut" property () ((initialize . "#f") (accessors . "generate")) #f #f 54 12 54 20 ()}
        {Lisp-Entry "get-shortcut" accessor () () #f #f 54 48 54 56 ()}
        {Lisp-Entry "set-shortcut" accessor () () #f #f 54 48 54 56 ()}
        {Lisp-Entry "frame-model" property () ((initialize . "#f") (accessors . "generate")) #f #f 55 12 55 23 ()}
        {Lisp-Entry "get-frame-model" accessor () () #f #f 55 48 55 56 ()}
        {Lisp-Entry "set-frame-model" accessor () () #f #f 55 48 55 56 ()}
        {Lisp-Entry "fullscreen?" property () ((initialize . "#f") (accessors . "generate")) #f #f 56 12 56 23 ()}
        {Lisp-Entry "get-fullscreen?" accessor () () #f #f 56 48 56 56 ()}
        {Lisp-Entry "set-fullscreen?" accessor () () #f #f 56 48 56 56 ()}
        {Lisp-Entry "form" form () () #f #f 59 3 59 7 ("Image-Resource" "icon:" "install" "<install>")}
        {Lisp-Entry "apply-preferences" method (override) ("(restore-focus?: restore-focus? #t)") #f #f 68 20 68 37 ("activate" "parameterize" "workspace-activation?" "not" "assert" "deactivate" "deactivate~" "selected-workspace" "when" "lambda" "without-local-debugger" "restore-focus?" "restore-focus?:")}
        {Lisp-Entry "activate" method () ("(restore-focus?: restore-focus? #t)") #f #f 83 11 83 19 ("verify-reloads" "verify-reloads~" "Focus-Container" "is?" "set-current-stage" "in-player?" "in-player?~" "workspace:" "activate" "workspace" "process-application-event" "process-application-event~" "update-menubar-buttons" "update-menubar-buttons~" "update-windowing-actions" "update-windowing-actions~" "current-frame" "restore-state" "restore-state~" "fullscreen?" "update-status" "set-selected-workspace" "self" "set-workspace-preferences" "set-offscreen?" "set-offscreen?~" "get-root" "get-root~" "previous-root" "find-located" "reset-current-stage" "full-screen-stage" "full-screen-stage~" "with-locked-update" "get-focus" "focus" "get-toplevel" "toplevel" "get-application" "appl" "acquire-focus" "acquire-focus~" "focus-host" "focus-host~" "first-view" "first-view~" "focus-stage" "client-activate" "client-activate~" "for-each-docked" "stage-empty-activate" "stage-empty-activate~" "process-activation" "set!" "ensure-displayed" "ensure-displayed~" "maximized?" "maximize/restore" "maximize/restore~" "remember-workspace-stage" "remember-workspace-stage~" "current-stage" "stage" "car" "set-parent" "set-parent~" "not-null?" "get-workspace-stages" "get-workspace-stages~" "intersection" "preferred" "current" "get-active-stages" "active-stages" "show-frames" "not" "bind" "info" "visibilities" "hide-frames" "null?" "name" "memq?" "or" "cons" "effective-host-workspaces" "effective-host-workspaces~" "workspaces" "get-guest" "get-guest~" "guest" "get-visible?" "get-visible?~" "visible?" "frame" "collect" "reverse!" "include-invisibles?:" "all-internal-frames" "frames" "collect-visibilities" "children" "set-visible?" "set-visible?~" "maximize" "maximize~" "set-placement" "set-placement~" "and" "if" "set-title" "set-title~" "when" "apply-root" "apply-root~" "visible?:" "detach-root" "close-behavior:" "Palette" "new" "palette" "first-child" "first-child~" "root-preferences" "get-size" "get-size~" "size" "get-position" "get-position~" "position" "get-title" "get-title~" "title" "let" "root" "get-location" "get-location~" "eq?" "unless" "preferences" "lambda" "process-palettes" "collect-palettes" "close" "close~" "for-each" "close-palettes" "define" "restore-focus?" "restore-focus?:")}
        {Lisp-Entry "deactivate" method () () #f #f 204 11 204 21 ("workspace:" "self" "deactivate" "workspace" "get-application" "process-application-event" "process-application-event~")}
        {Lisp-Entry "update-status" method (public) () #f #f 208 18 208 31 ("get-icon" "set-icon" "set-icon~" "get-title" "set-title" "set-title~" "when" "workspace" "find-component" "find-component~" "and" "label" "find-status-bar" "find-status-bar~" "status" "get-application" "appl" "let*")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 222 25 222 45 ("Workspace-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 231 11 231 17 ()
        {Lisp-Entry "import" import () () #f #f 234 1 234 7 ("jazz.designer")}
        {Lisp-Entry "Workspace-Preferences-Descriptor" class () ((extends . "Figure-Preferences-Descriptor")) #f #f 237 7 237 39 ("Figure-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 240 3 240 7 ("domain" "Boolean-Domain" "<Boolean-Domain>" "title:" "name:" "Property-Descriptor" "<Property-Descriptor>" "fullscreen?" "frame-model" "shortcut" "icon" "title" "categorized:" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "get-domain" method (meta override) ("property") #f #f 249 25 249 35 ("nextmethod" "else" "Boolean-Domain" "new" "fullscreen?" "field-name" "case" "property")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 255 20 255 61 ("Stage-Preferences" "Docked-Preferences" "Pad-Preferences" "Splitter-Preferences" "reference" "list" "component")}}}}})
"Workspaces-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "workspace" "Workspaces-Preferences.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.workspace.Workspaces-Preferences" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Workspaces-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 45 20 45 42 ("Preferences")
        {Lisp-Entry "active" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 18 ()}
        {Lisp-Entry "get-active" accessor () () #f #f 48 50 48 58 ()}
        {Lisp-Entry "set-active" accessor () () #f #f 48 50 48 58 ()}
        {Lisp-Entry "associations" property () ((initialize . "'()") (accessors . "generate")) #f #f 49 12 49 24 ()}
        {Lisp-Entry "get-associations" accessor () () #f #f 49 50 49 58 ()}
        {Lisp-Entry "set-associations" accessor () () #f #f 49 50 49 58 ()}
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 61 25 61 45 ("Workspaces-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 70 11 70 17 ()
        {Lisp-Entry "import" import () () #f #f 73 1 73 7 ("jazz.designer")}
        {Lisp-Entry "Workspaces-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 76 7 76 40 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 79 3 79 7 ("domain" "Associations-Domain" "<Associations-Domain>" "associations" "active" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 87 20 87 61 ("Workspace-Preferences" "reference" "list" "component")}
          {Lisp-Entry "component-get-addable-details" method (override) ("component") #f #f 93 20 93 49 ("100" "fullscreen?" "frame-model" "shortcut" "150" "name-info" "component")}}
        {Lisp-Entry "Associations-Domain" class () ((extends . "List-Domain")) #f #f 102 7 102 26 ("List-Domain")
          {Lisp-Entry "finish" method (override) ("rest") #f #f 105 20 105 26 ("Association-Domain" "new" "domain" "set!" "nextmethod" "rest")}
          {Lisp-Entry "add-value" method (override) ("value" "class") #f #f 111 20 111 29 ("class:" "cdr" "car" "self" "add-row" "class" "value")}
          {Lisp-Entry "new-value" method (override) () #f #f 116 20 116 29 ()}}
        {Lisp-Entry "Association-Domain" class () ((extends . "Value-Domain")) #f #f 125 7 125 25 ("Value-Domain")
          {Lisp-Entry "present" method (override) ("model") #f #f 133 20 133 27 ("format" "model")}}}}})
"X11-Skin"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "X11-Skin.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.skin.X11-Skin" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "X11-Skin" class () ((extends . "Jazz-Skin")) #f #f 44 7 44 15 ("Jazz-Skin")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("title:" "install" "<install>")}}}})
"Zoom-Combo"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "Zoom-Combo.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.view.Zoom-Combo" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Zoom-Combo" class () ((extends . "Combo-Box")) #f #f 44 7 44 17 ("Combo-Box")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("editable?:" "install" "<install>")}
        {Lisp-Entry "Zoom-Factors" definition () () #f #f 51 14 51 26 ("0.25" "0.33" "0.50" "0.75" "1.0" "1.5" "2.0" "5.0")}
        {Lisp-Entry "finish" method (override) ("initargs") #f #f 62 20 62 26 ("1.0" "set-value" "Zoom-Factors" "set-choices" "nextmethod" "initargs")}
        {Lisp-Entry "standardize-content" method (override) ("content") #f #f 73 20 73 39 ("remove-trailing" "format" "content")}
        {Lisp-Entry "get-zoom" method (public) () #f #f 82 18 82 26 ("throw-cancel" "bell" "100." "/" "if" "remove-trailing" "string->number" "zoom" "get-content" "content" "let")}
        {Lisp-Entry "set-zoom" method (public) ("value") #f #f 91 18 91 26 ("100." "*" "fxfloor" "format" "set-content" "value")}}}})
"_activity"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "activity" "_activity.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.activity" module () () #f #f 37 8 37 24 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui" "jazz.system")}
      {Lisp-Entry "Manager" definition () () #f #f 45 12 45 19 ()}
      {Lisp-Entry "get-activity-manager" definition (public) ("(visible?: visible? #f)") #f #f 49 20 49 40 ("set!" "Manager" "unless" "manager-position" "position:" "Activity-Manager" "new" "new-manager" "define" "visible?" "visible?:")}
      {Lisp-Entry "manager-position" definition (package) () #f #f 59 21 59 37 ("acquire" "acquire~" "79" "get-height" "get-height~" "543" "get-width" "get-width~" "-" "Point" "new" "pos" "get-size" "get-size~" "size" "get-toplevel" "toplevel" "get-desktop" "desktop" "let*")}
      {Lisp-Entry "destroy-manager" definition (package) () #f #f 67 21 67 36 ("Manager" "set!")}}})
"_clipboard"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "clipboard" "_clipboard.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.clipboard" module () () #f #f 37 8 37 25 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("x11" "jazz.ui.clipboard.platform.x11" "windows" "jazz.ui.clipboard.platform.windows" "carbon" "cond" "jazz.ui.clipboard.platform.carbon")}
      {Lisp-Entry "import" import () () #f #f 44 1 44 7 ("x11" "jazz.ui.clipboard.platform.x11" "windows" "jazz.ui.clipboard.platform.windows" "carbon" "cond" "jazz.ui.clipboard.platform.carbon")}
      {Lisp-Entry "jazz-formatted-text" definition () () #f #f 54 12 54 31 ()}
      {Lisp-Entry "jazz-parcels" definition () () #f #f 57 12 57 24 ()}
      {Lisp-Entry "register-jazz-clipboard-formats" definition (package) ("prefix") #f #f 61 21 61 52 ("jazz-parcels" "jazz-formatted-text" "register-clipboard-format" "string-append" "format" "prefixed-format" "define" "prefix")}
      {Lisp-Entry "get-jazz-parcels" definition (package) () #f #f 69 21 69 37 ("format:" "get-clipboard-text" "read-string-element" "lambda" "with-jazz-readtable" "jazz-parcels" "clipboard-format-available?" "if")}
      {Lisp-Entry "Clipboard-Parcel" class (undocumented) ((extends . "Object")) #f #f 82 20 82 36 ("Object")
        {Lisp-Entry "process-id" slot () ((getter . "generate")) #f #f 85 8 85 18 ()}
        {Lisp-Entry "get-process-id" accessor () () #f #f 85 26 85 34 ()}
        {Lisp-Entry "object-id" slot () ((getter . "generate")) #f #f 86 8 86 17 ()}
        {Lisp-Entry "get-object-id" accessor () () #f #f 86 26 86 34 ()}
        {Lisp-Entry "content" slot () ((getter . "generate")) #f #f 87 8 87 15 ()}
        {Lisp-Entry "get-content" accessor () () #f #f 87 26 87 34 ()}
        {Lisp-Entry "initialize" method (override) ("process-id" "object-id" "content") #f #f 90 20 90 30 ("content~self" "object-id~self" "self" "process-id~self" "set!" "nextmethod" "content" "object-id" "process-id")}}}})
"_dialog"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "_dialog.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog" module () () #f #f 37 8 37 22 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("x11" "jazz.ui.dialog.platform.x11" "windows" "jazz.ui.dialog.platform.windows" "carbon" "cond" "jazz.ui.dialog.platform.carbon")}
      {Lisp-Entry "import" import () () #f #f 44 1 44 7 ("jazz.system")}
      {Lisp-Entry "*current-modal*" definition () () #f #f 52 12 52 27 ()}
      {Lisp-Entry "current-modal" definition (public) () #f #f 56 20 56 33 ("*current-modal*")}
      {Lisp-Entry "set-current-modal" definition (public) ("dialog") #f #f 59 20 59 37 ("*current-modal*" "set!" "dialog")}
      {Lisp-Entry "in-modal?" definition (public) () #f #f 63 20 63 29 ("current-modal")}
      {Lisp-Entry "current-window" definition (public) () #f #f 67 20 67 34 ("get-toplevel" "get-player" "get-player~" "and" "or" "current-modal" "modal" "let")}
      {Lisp-Entry "end-modal-dialog" definition (public) ("result") #f #f 73 20 73 36 ("current-modal" "end-modal" "end-modal~" "result")}
      {Lisp-Entry "close-modal-dialog" definition (public) ("(action #f)") #f #f 77 20 77 38 ("close-modal" "close-modal~" "when" "current-modal" "dialog" "let" "action")}}})
"_history"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "history" "_history.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.history" module () () #f #f 37 8 37 23 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "track-history" definition (public) ("sender" "initiator" "manager" "direction") #f #f 48 20 48 33 ("initiator:" "direction:" "manager:" "History-Menu" "track-popup-menu" "track-popup-menu~" "bell" "null?" "if" "get-history" "history" "get-size" "get-size~" "get-height" "get-height~" "0" "Point" "new" "pos" "let" "direction" "manager" "initiator" "sender")}
      {Lisp-Entry "get-history" definition (public) ("manager" "direction") #f #f 56 20 56 31 ("get-forward-history" "get-forward-history~" "forward" "get-backward-history" "get-backward-history~" "backward" "case" "direction" "manager")}}})
"_layout"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "layout" "_layout.jazz"} 243566239. jazz
    {Lisp-Entry "jazz.ui.layout" module () () #f #f 0 8 0 22 ("jazz")
      {Lisp-Entry "partition-range" definition () ("from" "to" "n") #f #f 3 13 3 28 ("1" "0" "naturals" "/" "*" "round" "+" "i" "lambda" "map" "-" "size" "let" "n" "to" "from")}
      {Lisp-Entry "layout-fill" definition (public) ("figures" "position" "size") #f #f 10 20 10 31 ("set-size" "set-size~" "set-position" "set-position~" "figure" "lambda" "for-each" "size" "position" "figures")}
      {Lisp-Entry "layout-fill-horizontal" definition (public) ("figures" "position" "size") #f #f 16 20 16 42 ("cdr" "butlast" "-" "Dimension" "set-size" "set-size~" "Point" "new" "set-position" "set-position~" "next-v" "figure" "lambda" "for-each" "+" "partition-range" "get-height" "get-height~" "height" "get-v" "get-v~" "v" "vs" "length" "0" "=" "unless" "get-h" "get-h~" "h" "get-width" "get-width~" "width" "let" "size" "position" "figures")}
      {Lisp-Entry "layout-fill-vertical" definition (public) ("figures" "position" "size") #f #f 31 20 31 40 ("cdr" "butlast" "-" "Dimension" "set-size" "set-size~" "Point" "new" "set-position" "set-position~" "next-h" "figure" "lambda" "for-each" "+" "partition-range" "get-width" "get-width~" "width" "get-h" "get-h~" "h" "hs" "length" "0" "=" "unless" "get-v" "get-v~" "v" "get-height" "get-height~" "height" "let" "size" "position" "figures")}}})
"_literals"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "literals" "_literals.jazz"} 237856878. jazz
    {Lisp-Entry "jazz.ui.literals" module () () #f #f 37 8 37 24 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.clipboard" "jazz.ui" "jazz.library.exemplar")}
      {Lisp-Entry "construct-action" definition (package) ("action-context" "action-name" "." "properties") #f #f 50 21 50 37 ("Action" "new" "properties" "action-name" "action-context")}
      {Lisp-Entry "construct-shortcut" definition (package) ("." "rest") #f #f 59 21 59 39 ("last" "butlast" "Shortcut" "new" "rest")}
      {Lisp-Entry "construct-format" definition (package) ("." "rest") #f #f 68 21 68 37 ("Format" "construct-exemplar" "rest")}
      {Lisp-Entry "construct-text-style" definition (package) ("." "rest") #f #f 77 21 77 41 ("Text-Style" "construct-exemplar" "rest")}
      {Lisp-Entry "construct-link-style" definition (package) ("." "rest") #f #f 81 21 81 41 ("Link-Style" "construct-exemplar" "rest")}
      {Lisp-Entry "construct-image-style" definition (package) ("." "rest") #f #f 85 21 85 42 ("Image-Style" "construct-exemplar" "rest")}
      {Lisp-Entry "construct-info-style" definition (package) ("." "rest") #f #f 89 21 89 41 ("Info-Style" "construct-exemplar" "rest")}
      {Lisp-Entry "construct-text" definition (package) ("." "rest") #f #f 98 21 98 35 ("Text" "new" "apply" "rest")}
      {Lisp-Entry "construct-formatted-text" definition (package) ("." "rest") #f #f 102 21 102 45 ("Formatted-Text" "new" "apply" "rest")}
      {Lisp-Entry "construct-clipboard-parcel" definition (package) ("process-id" "object-id" "content") #f #f 111 21 111 47 ("Clipboard-Parcel" "new" "content" "object-id" "process-id")}
      {Lisp-Entry "construct-action-event" definition (package) ("kind" "." "properties") #f #f 120 21 120 43 ("Action-Event" "new" "apply" "properties" "kind")}
      {Lisp-Entry "construct-keyboard-event" definition (package) ("kind" "key") #f #f 124 21 124 45 ("Keyboard-Event" "new" "key" "kind")}
      {Lisp-Entry "construct-selection-handler" definition (package) ("target-name" "method-name" "." "rest") #f #f 133 21 133 48 ("method-name:" "target-name:" "Selection-Handler" "new" "apply" "rest" "method-name" "target-name")}}})
"_offscreen"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "offscreen" "_offscreen.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.offscreen" module () () #f #f 37 8 37 25 ("jazz")
      {Lisp-Entry "effect-offscreen" definition () () #f #f 46 12 46 28 ()}
      {Lisp-Entry "get-effect-offscreen" definition (public) ("surface" "<Surface>" "width" "<fx>" "height" "<fx>") #f #f 51 20 51 40 ("new-offscreen" "set!" "close" "close~" "when" "get-height" "get-height~" "get-width" "get-width~" "<=" "get-size" "get-size~" "size" "let" "effect-offscreen" "and" "if" "height" "fx" "<fx>" "width" "Surface" "<Surface>" "surface")}}})
"_picker"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "picker" "_picker.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.picker" module () () #f #f 37 8 37 22 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.development" "jazz.ui" "jazz.system" "jazz.library" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "In-Pick?" definition () () #f #f 53 12 53 20 ()}
      {Lisp-Entry "All-Overlays" definition () () #f #f 56 12 56 24 ()}
      {Lisp-Entry "*highlighted-overlay*" definition () () #f #f 59 12 59 33 ()}
      {Lisp-Entry "pick-figure" definition (public) ("(include: include #f)" "(exclude: exclude #f)" "(click: click #f)" "(menu: menu #f)" "(highlight: highlight #f)" "(highlight-root-only?: highlight-root-only? #f)" "(report-figure?: report-figure? #t)" "(obscure-unhighlighted?: obscure-unhighlighted? #t)" "(tooltips?: tooltips? #t)") #f #f 63 20 63 31 ("cons" "invalidate-view" "invalidate-view~" "install-overlay" "overlay" "memq?" "not" "or" "and" "overlapped" "for-each" "All-Overlays" "set!" "setup-pick" "not-null?" "when" "process-windows" "windows" "let" "lambda" "with-locked-update" "In-Pick?" "unless" "tooltips?" "tooltips?:" "obscure-unhighlighted?" "obscure-unhighlighted?:" "report-figure?" "report-figure?:" "highlight-root-only?" "highlight-root-only?:" "highlight" "highlight:" "menu" "menu:" "click" "click:" "exclude" "exclude:" "include" "include:")}
      {Lisp-Entry "install-overlay" definition () ("overlapped" "click" "menu" "highlight" "highlight-root-only?" "report-figure?" "obscure-unhighlighted?" "tooltips?") #f #f 89 13 89 28 ("tooltips?:" "obscure-unhighlighted?:" "report-figure?:" "highlight-root-only?:" "highlight:" "menu:" "click:" "get-size" "get-size~" "size:" "0" "Point" "position:" "parent:" "Picker-Overlay" "detach?:" "set-root" "set-root~" "set-parent" "set-parent~" "Picker-Root" "new" "new-root" "get-root" "get-root~" "old-root" "let" "tooltips?" "obscure-unhighlighted?" "report-figure?" "highlight-root-only?" "highlight" "menu" "click" "overlapped")}
      {Lisp-Entry "remove-overlay" definition () ("overlay") #f #f 107 13 107 27 ("close" "close~" "set-root" "set-root~" "set-parent" "set-parent~" "first-child" "first-child~" "old-root" "when" "get-root" "get-root~" "new-root" "get-overlapped" "get-overlapped~" "overlapped" "let" "overlay")}
      {Lisp-Entry "root-overlay" definition () ("root") #f #f 117 13 117 25 ("get-children" "get-children~" "second" "root")}
      {Lisp-Entry "shortcut-hook" definition () ("shortcut") #f #f 121 13 121 26 ("get-toplevel" "simulate-mouse-move" "simulate-mouse-move~" "F8" "get-click" "get-click~" "click" "Return" "previous-brother" "previous-brother~" "Left" "type:" "next-brother" "next-brother~" "brother" "Right" "first-view" "first-view~" "first" "Down" "bell" "Picker-Root" "is?" "or" "View" "find-ascendant" "find-ascendant~" "parent" "get-last-view-rect" "get-last-view-rect~" "change-highlight-rect" "change-highlight-rect~" "get-last-cell-rect" "get-last-cell-rect~" "get-highlighted-rect" "get-highlighted-rect~" "eq?" "if" "Up" "user-message" "view-describe" "display-description" "update-tooltip" "update-tooltip~" "default-highlight" "default-highlight~" "acquire" "acquire~" "pos" "view" "setup-view" "define" "get-highlighted-position" "get-highlighted-position~" "highlighted-position" "get-highlighted-view" "get-highlighted-view~" "highlighted-view" "let" "else" "*highlighted-overlay*" "not" "clear-user-message" "end-pick" "lambda" "with-locked-update" "Escape" "Shortcut" "shortcut=?" "cond" "shortcut")}
      {Lisp-Entry "display-description" definition () ("description") #f #f 180 13 180 32 ("format" ":bulleted" "list" "value" "name" "bind" "info" "lambda" "map" "cons" "description")}
      {Lisp-Entry "setup-pick" definition () () #f #f 188 13 188 23 ("shortcut-hook" "get-application" "set-shortcut-hook" "set-shortcut-hook~")}
      {Lisp-Entry "end-pick" definition () () #f #f 192 13 192 21 ("get-application" "set-shortcut-hook" "set-shortcut-hook~" "In-Pick?" "set!" "All-Overlays" "remove-overlay" "for-each" "close-overlays" "define")}
      {Lisp-Entry "Picker-Root" class () ((extends . "View")) #f #f 207 7 207 18 ("View")}
      {Lisp-Entry "Picker-Overlay" class () ((extends . "View")) #f #f 215 7 215 21 ("View")
        {Lisp-Entry "click" property () ((accessors . "generate")) #f #f 218 12 218 17 ()}
        {Lisp-Entry "get-click" accessor () () #f #f 218 45 218 53 ()}
        {Lisp-Entry "set-click" accessor () () #f #f 218 45 218 53 ()}
        {Lisp-Entry "menu" property () ((accessors . "generate")) #f #f 219 12 219 16 ()}
        {Lisp-Entry "get-menu" accessor () () #f #f 219 45 219 53 ()}
        {Lisp-Entry "set-menu" accessor () () #f #f 219 45 219 53 ()}
        {Lisp-Entry "highlight" property () ((accessors . "generate")) #f #f 220 12 220 21 ()}
        {Lisp-Entry "get-highlight" accessor () () #f #f 220 45 220 53 ()}
        {Lisp-Entry "set-highlight" accessor () () #f #f 220 45 220 53 ()}
        {Lisp-Entry "highlight-root-only?" property () ((accessors . "generate")) #f #f 221 12 221 32 ()}
        {Lisp-Entry "get-highlight-root-only?" accessor () () #f #f 221 45 221 53 ()}
        {Lisp-Entry "set-highlight-root-only?" accessor () () #f #f 221 45 221 53 ()}
        {Lisp-Entry "report-figure?" property () ((accessors . "generate")) #f #f 222 12 222 26 ()}
        {Lisp-Entry "get-report-figure?" accessor () () #f #f 222 45 222 53 ()}
        {Lisp-Entry "set-report-figure?" accessor () () #f #f 222 45 222 53 ()}
        {Lisp-Entry "obscure-unhighlighted?" property () ((accessors . "generate")) #f #f 223 12 223 34 ()}
        {Lisp-Entry "get-obscure-unhighlighted?" accessor () () #f #f 223 45 223 53 ()}
        {Lisp-Entry "set-obscure-unhighlighted?" accessor () () #f #f 223 45 223 53 ()}
        {Lisp-Entry "tooltips?" property () ((accessors . "generate")) #f #f 224 12 224 21 ()}
        {Lisp-Entry "get-tooltips?" accessor () () #f #f 224 45 224 53 ()}
        {Lisp-Entry "set-tooltips?" accessor () () #f #f 224 45 224 53 ()}
        {Lisp-Entry "highlighted-view" slot () ((initialize . "#f") (getter . "generate")) #f #f 227 8 227 24 ()}
        {Lisp-Entry "get-highlighted-view" accessor () () #f #f 227 50 227 58 ()}
        {Lisp-Entry "highlighted-rect" slot () ((initialize . "#f") (getter . "generate")) #f #f 228 8 228 24 ()}
        {Lisp-Entry "get-highlighted-rect" accessor () () #f #f 228 50 228 58 ()}
        {Lisp-Entry "highlighted-position" slot () ((initialize . "#f") (getter . "generate")) #f #f 229 8 229 28 ()}
        {Lisp-Entry "get-highlighted-position" accessor () () #f #f 229 50 229 58 ()}
        {Lisp-Entry "last-mouse-position" slot () ((initialize . "#f") (getter . "generate")) #f #f 230 8 230 27 ()}
        {Lisp-Entry "get-last-mouse-position" accessor () () #f #f 230 50 230 58 ()}
        {Lisp-Entry "last-cell-rect" slot () ((initialize . "#f") (getter . "generate")) #f #f 231 8 231 22 ()}
        {Lisp-Entry "get-last-cell-rect" accessor () () #f #f 231 50 231 58 ()}
        {Lisp-Entry "last-view-rect" slot () ((initialize . "#f") (getter . "generate")) #f #f 232 8 232 22 ()}
        {Lisp-Entry "get-last-view-rect" accessor () () #f #f 232 50 232 58 ()}
        {Lisp-Entry "cursor-update" method (override) ("pos") #f #f 240 20 240 33 (":spy" "set-cursor" "pos")}
        {Lisp-Entry "close-self-tooltip" method (override) () #f #f 249 20 249 38 ("close-tooltip" "*current-tooltip-context*" "when")}
        {Lisp-Entry "get-tooltip?" method (override) () #f #f 254 20 254 32 ("tooltips?")}
        {Lisp-Entry "get-formatted-tooltip?" method (override) () #f #f 258 20 258 42 ()}
        {Lisp-Entry "calculate-tooltip-bounds" definition () ("view" "pos") #f #f 262 15 262 39 ("get-bounds" "get-bounds~" "acquire" "acquire~" "get-display" "get-display~" "display" "let" "get-tooltip-bounds" "get-tooltip-bounds~" "values" "if" "pos" "view")}
        {Lisp-Entry "get-tooltip-bounds" method (override) ("pos") #f #f 270 20 270 38 ("or" "calculate-tooltip-bounds" "view-rect" "cell-rect" "find-view-info" "view" "receive" "pos")}
        {Lisp-Entry "get-tooltip-context" method (override) ("pos") #f #f 276 20 276 39 ("Label" "Font" "font:" "or" "bounds:" "view-describe" "display-description" "text:" "view:" "Tooltip-Context" "new" "calculate-tooltip-bounds" "view-rect" "cell-rect" "when" "find-view-info" "view" "receive" "pos")}
        {Lisp-Entry "mouse-move" method (override) ("pos") #f #f 292 20 292 30 ("self" "user-message" "not" "if" "report-figure?" "when" "else" "default-highlight" "highlight" "case" "find-view-info" "view" "receive" "set!" "nu=?" "last-mouse-position" "and" "unless" "nextmethod" "pos")}
        {Lisp-Entry "mouse-up" method (override) ("pos") #f #f 307 20 307 28 ("click" "end-pick" "lambda" "with-locked-update" "find-view-info" "view" "receive" "nextmethod" "pos")}
        {Lisp-Entry "find-view-info" method () ("pos") #f #f 316 11 316 25 ("values" "and" "view-pos" "list" "ignore:" "find-drawing" "find-drawing~" "view" "self" "acquire" "acquire~" "root-pos" "get-root" "root" "let*" "pos")}
        {Lisp-Entry "default-highlight" method () ("view" "pos") #f #f 329 11 329 28 ("acquire" "acquire~" "and" "calculate-tooltip-bounds" "view-rect" "cell-rect" "receive" "get-bounds" "get-bounds~" "view-rect:" "cell-rect:" "update-highlight" "highlight-root-only?" "if" "root-overlay" "overlay" "get-player" "get-player~" "get-root" "get-root~" "root" "let" "pos" "view")}
        {Lisp-Entry "change-highlight-rect" method () ("override-rect") #f #f 340 11 340 32 ("override-rect:" "highlighted-position" "highlighted-view" "self" "update-highlight" "override-rect")}
        {Lisp-Entry "update-highlight" method () ("overlay" "view" "pos" "(cell-rect: cell-rect last-cell-rect)" "(view-rect: view-rect last-view-rect)" "(override-rect: override-rect #f)") #f #f 344 11 344 27 ("highlighted-position" "or" "highlighted-rect" "set!" "old-view" "old-overlay" "not" "highlighted-view" "*highlighted-overlay*" "eq?" "and" "unless" "redraw-view" "redraw-view~" "rect:" "redraw-window" "redraw-window~" "1" "get-bounds" "get-bounds~" "inflate-rect" "get-root" "get-root~" "acquire" "acquire~" "rect" "get-player" "get-player~" "player" "let" "when" "if" "same-overlay?" "redraw" "define" "override-rect" "override-rect:" "last-view-rect" "view-rect" "view-rect:" "last-cell-rect" "cell-rect" "cell-rect:" "pos" "view" "overlay")}
        {Lisp-Entry "context-menu" method (override) ("pos") #f #f 377 20 377 32 ("processed" "acquire" "acquire~" "track-popup-menu" "track-popup-menu~" "get-root" "root" "let" "find-view-info" "receive" "close-popups" "nextmethod" "not" "if" "get-children" "get-children~" "execute:" "Event-Handler" "set-action-handler" "set-action-handler~" "invoke" "invoke~" "self" ":action" "Action-Event" "new" "apply" "get-properties" "get-properties~" "pos:" "view:" "augment" "properties" "when" "end-pick" "event" "execute" "get-action-handler" "get-action-handler~" "action-handler" "let*" "item" "lambda" "for-each" "view" "menu" "setup-actions" "define" "pos")}
        {Lisp-Entry "Overlay-Color" definition () () #f #f 406 14 406 27 ("0.25" "alpha:" "Black" "Color")}
        {Lisp-Entry "Highlight-Color" definition () () #f #f 409 14 409 29 ("177" "blue:" "green:" "109" "red:" "Color")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 413 20 413 24 ("rectangle" "rectangle~" "highlighted-rect" "Overlay-Color" "get-bounds" "fill-rect" "fill-rect~" "obscure-unhighlighted?" "when" "get-root~" "get-root" "neq?" "*highlighted-overlay*" "not" "or" "cond" "Highlight-Color" "set-color" "set-color~" "2" "set-line-width" "set-line-width~" "solid" "set-style" "set-style~" "highlighter" "define" "context" "surface")}}}})
"_print"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "_print.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.print" module () () #f #f 37 8 37 21 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("carbon" "jazz.ui.print.platform.carbon" "x11" "jazz.ui.print.platform.x11" "windows" "cond" "jazz.ui.print.platform.windows")}}})
"_resizer"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "resizer" "_resizer.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.resizer" module () () #f #f 37 8 37 23 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("x11" "jazz.ui.resizer.platform.x11" "windows" "jazz.ui.resizer.platform.windows" "carbon" "cond" "jazz.ui.resizer.platform.carbon")}
      {Lisp-Entry "import" import () () #f #f 44 1 44 7 ("x11" "jazz.ui.resizer.platform.x11" "windows" "jazz.ui.resizer.platform.windows" "carbon" "cond" "jazz.ui.resizer.platform.carbon")}
      {Lisp-Entry "Border-Size" constant () () #f #f 49 10 49 21 ("6")}
      {Lisp-Entry "Handle-Size" constant () () #f #f 50 10 50 21 ("16")}
      {Lisp-Entry "Middle-Size" constant () () #f #f 51 10 51 21 ("12")}
      {Lisp-Entry "Part-Array" constant () () #f #f 54 10 54 20 ("1" "0" "-1")}
      {Lisp-Entry "find-resize-part" definition (public) ("pt" "size" "(full?: full? #f)") #f #f 67 20 67 36 ("Part-Array" "element" "and" "when" "get-height" "get-height~" "get-v" "get-v~" "v" "get-width" "get-width~" "get-h" "get-h~" "h" "else" "+" "between?" "or" ">" "4" "-" ">=" "1" "0" "<" "cond" "2" "fxround/" "center" "Middle-Size" "middle" "3" "quotient" "Handle-Size" "min" "handle" "Border-Size" "border" "s" "n" "lambda" "p" "let" "full?" "full?:" "size" "pt")}
      {Lisp-Entry "get-resize-cursor" definition (public) ("part") #f #f 85 20 85 37 ("Part-Cursor" "assoc-value" "part")}
      {Lisp-Entry "resize-client" definition (public) ("dh" "dv" "part" "proc") #f #f 89 20 89 33 ("*" "cdr" "rv" "mv" "car" "rh" "mh" "receive" "0" "1" "values" "-1" "case" "r" "lambda" "p" "let" "proc" "part" "dv" "dh")}}})
"_search"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "search" "_search.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.search" module () () #f #f 37 8 37 22 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.graphic")}
      {Lisp-Entry "*active-search-result*" define () () #f #f 50 8 50 30 ()}
      {Lisp-Entry "active-search-result" definition (public) () #f #f 54 20 54 40 ("*active-search-result*")}
      {Lisp-Entry "set-active-search-result" definition (public) ("search-result") #f #f 58 20 58 44 ("update-search-actions" "update-search-actions~" "present" "present~" "get-icon" "get-icon~" "set-search-result" "set-search-result~" "get-application" "appl" "let" "reset" "reset~" "*ending-indicator*" "*beginning-indicator*" "install-indicators" "install-indicators~" "if" "*active-search-result*" "set!" "search-result")}
      {Lisp-Entry "*beginning-indicator*" definition () () #f #f 71 12 71 33 ("Boundary" "Color" "Indicator" "new")}
      {Lisp-Entry "*ending-indicator*" definition () () #f #f 74 12 74 30 ("Boundary" "Color" "Indicator" "new")}
      {Lisp-Entry "make-definition-search-resultset" definition (public) ("search" "definitions") #f #f 83 20 83 52 ("Definition-Search-Result" "add-result" "add-result~" "definition" "lambda" "for-each" "Search-Resultset" "new" "resultset" "let" "definitions" "search")}
      {Lisp-Entry "make-reference-search-resultset" definition (public) ("search" "references") #f #f 91 20 91 51 ("Reference-Search-Result" "add-result" "add-result~" "reference" "lambda" "for-each" "Search-Resultset" "new" "resultset" "let" "references" "search")}
      {Lisp-Entry "make-text-search-result" definition (public) ("find" "client" "beginning" "ending") #f #f 99 20 99 43 ("ending:" "beginning:" "client:" "Text-Search-Result" "Search-Resultset" "resultset" "Text-Search" "new" "search" "let" "ending" "beginning" "client" "find")}
      {Lisp-Entry "default-search-extensions" definition (package) () #f #f 110 21 110 46 ()}}})
"_skin"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "skin" "_skin.jazz"} 240280184. jazz
    {Lisp-Entry "jazz.ui.skin" module () () #f #f 37 8 37 20 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.jml")}
      {Lisp-Entry "*active-skin*" definition () () #f #f 50 12 50 25 ()}
      {Lisp-Entry "get-skin" definition (public) () #f #f 54 20 54 28 ("*active-skin*")}
      {Lisp-Entry "set-skin" definition (public) ("skin") #f #f 58 20 58 28 ("skin-update" "*active-skin*" "set!" "skin")}
      {Lisp-Entry "skin-update" definition (package) () #f #f 63 21 63 32 ("get-skin" "present" "present~" "set-title" "set-title~" "skin" "locate-component" "locate-component~" "label" "find-status-bar" "find-status-bar~" "status" "is-application?" "is-application?~" "and" "when" "get-process" "process" "let")}
      {Lisp-Entry "get-skins" definition (public) () #f #f 73 20 73 29 ("get-reference" "get-reference~" "when" "get-application" "get-skins-designer" "get-skins-designer~" "designer" "let")}
      {Lisp-Entry "prepare-skins" definition (public) () #f #f 79 20 79 33 ("default-skin" "child" "child~" "set-skin" "default-skins" "skins" "let")}
      {Lisp-Entry "default-skins" definition (package) () #f #f 84 21 84 34 ("windows" "Windows-Skin" "<Windows-Skin>" "jazz" "Jazz-Skin" "<Jazz-Skin>" "default" "name:" "Default-Skin" "<Default-Skin>" "Skins" "<Skins>" "form" "<form>" "instantiate" "instantiate~")}
      {Lisp-Entry "default-skin" definition (package) () #f #f 93 21 93 33 ("jazz" "jazz.ui.skin" "get-setting")}
      {Lisp-Entry "find-look" definition (public) ("name") #f #f 102 20 102 29 ("get-skin" "child" "child~" "name")}}})
"_syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "syntax" "_syntax.jazz"} 245225712. jazz
    {Lisp-Entry "jazz.ui.syntax" module (protected) () #f #f 37 18 37 32 ("jazz")
      {Lisp-Entry "define-format" macro (public) ("name" "." "rest") ("macro") #f 45 15 45 28 (",@rest" "Format" "new" ",name" "register-format" "rest" "name")}
      {Lisp-Entry "define-style" macro (public) ("name" "." "rest") ("macro") #f 55 15 55 27 (",@rest" "Style" "new" ",name" "register-style" "rest" "name")}
      {Lisp-Entry "define-text-style" macro (public) ("name" "." "rest") ("macro") #f 60 15 60 32 (",@rest" "Text-Style" "new" ",name" "register-style" "rest" "name")}}})
"_tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "_tree.jazz"} 246662659. jazz
    {Lisp-Entry "jazz.ui.tree" module () () #f #f 37 8 37 20 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.autoload")}
      {Lisp-Entry "allocate-tree-label" definition (public inline) ("title") #f #f 43 27 43 46 ("Tree-Label" "allocate" "title")}}})
"_ui"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "_ui.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.ui" module () () #f #f 37 8 37 15 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("jazz.ui.syntax" "jazz.ui.autoload")}
      {Lisp-Entry "import" import () () #f #f 43 1 43 7 ("jazz.library.exemplar" "jazz.library" "jazz.graphic" "jazz.ui.autoload")}
      {Lisp-Entry "default-disabled-resource" definition (package) ("resource") #f #f 54 21 54 46 ("get-name" "get-name~" "format" "class-of" "new" "resource")}
      {Lisp-Entry "preference->text-style" definition (public) ("name" "preference") #f #f 64 20 64 42 ("frame:" "highlight:" "symbolic-color" "color:" "symbolic-font" "font:" "base:" "name:" "list" "if" "Text-Style" "new" "apply" "get-frame" "get-frame~" "frame" "get-highlight" "get-highlight~" "highlight" "get-color" "get-color~" "color" "get-font" "get-font~" "font" "get-base" "get-base~" "base" "get-name" "get-name~" "let" "preference" "name")}
      {Lisp-Entry "shortcut=?" definition (public) ("s1" "<Shortcut>" "s2" "<Shortcut>") #f "<bool>" 85 20 85 30 ("get-key" "get-key~" "eqv?" "get-modifiers" "get-modifiers~" "equal?" "and" "bool" "<bool>" "s2" "Shortcut" "<Shortcut>" "s1")}
      {Lisp-Entry "shortcut-hash" definition (public) ("shortcut" "<Shortcut>") #f #f 90 20 90 33 ("get-modifiers" "get-modifiers~" "equal?-hash" "get-key" "get-key~" "eqv?-hash" "fxwrap+" "Shortcut" "<Shortcut>" "shortcut")}
      {Lisp-Entry "*bindings*" definition () () #f #f 100 12 100 22 ()}
      {Lisp-Entry "get-bindings" definition (public) () #f #f 104 20 104 32 ("*bindings*")}
      {Lisp-Entry "set-bindings" definition (public) ("bindings") #f #f 108 20 108 32 ("register-bindings" "*bindings*" "set!" "bindings")}
      {Lisp-Entry "register-bindings" definition (package) ("bindings") #f #f 113 21 113 38 ("get-children" "get-children~" "get-name" "get-name~" "register-actions" "actions" "lambda" "for-each" "bindings")}
      {Lisp-Entry "*actions*" definition () () #f #f 124 12 124 21 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-actions" definition (package) () #f #f 128 21 128 32 ("*actions*")}
      {Lisp-Entry "register-actions" definition (package) ("context" "actions") #f #f 131 21 131 37 ("*actions*" "table-set!" "actions" "context")}
      {Lisp-Entry "find-actions" definition (package) ("context") #f #f 134 21 134 33 ("error" "*actions*" "table-ref" "or" "context")}
      {Lisp-Entry "find-action-item" definition (package) ("context" "name") #f #f 139 21 139 37 ("find-actions" "find-component" "find-component~" "name" "context")}
      {Lisp-Entry "require-action-item" definition (package) ("action") #f #f 143 21 143 40 ("error" "get-action-name" "get-action-name~" "get-action-context" "get-action-context~" "find-action-item" "or" "action")}
      {Lisp-Entry "call-action" definition (package) ("action" "sender" "properties" "(event: event #f)") #f #f 148 21 148 32 ("action:" "invoke" "invoke~" "require-action-item" "action-item" "let" "event" "event:" "properties" "sender" "action")}
      {Lisp-Entry "get-action-enabled?" definition (package) ("action") #f #f 153 21 153 40 ("get-enabled?" "get-enabled?~" "require-action-item" "action-item" "let" "action")}
      {Lisp-Entry "set-action-enabled?" definition (package) ("action" "enabled?") #f #f 158 21 158 40 ("set-enabled?" "set-enabled?~" "require-action-item" "action-item" "let" "enabled?" "action")}
      {Lisp-Entry "set-actions-enabled?" definition (package) ("actions" "enabled?") #f #f 163 21 163 41 ("set-action-enabled?" "action" "lambda" "for-each" "enabled?" "actions")}
      {Lisp-Entry "get-class-actions" definition (package) ("object") #f #f 169 21 169 38 ("class-actions" "class-actions~" "object")}
      {Lisp-Entry "get-guest-actions" definition (package) ("view") #f #f 173 21 173 38 ("guest-actions" "guest-actions~" "view")}
      {Lisp-Entry "extract-actions" definition (package) ("actions-list") #f #f 177 21 177 36 ("get-output" "get-output~" "get-children" "get-children~" "put" "put~" "when" "get-shortcut" "get-shortcut~" "shortcut" "action-name" "let*" "action-item" "get-name" "get-name~" "context-name" "action-list" "lambda" "for-each" "List-Factory" "new" "fact" "let" "actions-list")}
      {Lisp-Entry "notify-handler" definition (public) ("component" "handler" "sender" "properties") #f #f 196 20 196 34 ("error" "else" "call-action" "Action" "invoke" "invoke~" ":action" "Event" "new" "apply" "event" "get-properties" "get-properties~" "or" "let" "Handler" "typecase" "properties" "sender" "handler" "component")}
      {Lisp-Entry "invoke-handler" definition (public) ("component" "handler" "event") #f #f 208 20 208 34 ("error" "else" "event:" "call-action" "Action" "invoke" "invoke~" "Handler" "typecase" "event" "handler" "component")}
      {Lisp-Entry "user-completions" definition () () #f #f 223 12 223 28 ("equal?" "test:" "make-table")}
      {Lisp-Entry "register-user-completion" definition (public) ("prefix" "completion") #f #f 227 20 227 44 ("user-completions" "table-set!" "completion" "prefix")}
      {Lisp-Entry "register-user-completions" definition (public) ("alist") #f #f 231 20 231 45 ("register-user-completion" "completion" "prefix" "bind" "pair" "lambda" "for-each" "alist")}
      {Lisp-Entry "get-user-completion" definition (public) ("prefix") #f #f 238 20 238 39 ("user-completions" "table-ref" "prefix")}
      {Lisp-Entry "LayoutType" enumeration () () #f #f 247 13 247 23 ("box" "flow" "snap" "border" "justify" "center" "fit" "fill")}
      {Lisp-Entry "iterate-cells" definition () ("top-left" "bottom-right" "start" "direction" "proc") #f #f 264 13 264 26 ("set!" "while" "or" "horizontal" "cell" "lambda" "advance" "previous-cell" "backward" "next-cell" "forward" "case" "next" "let*" "proc" "direction" "start" "bottom-right" "top-left")}
      {Lisp-Entry "previous-cell" definition () ("cell" "min-cell" "max-cell" "direction") #f #f 277 13 277 26 ("horizontal" "Cell" "new" "minor" "major" "receive" "when" ">" "-1" "get-line" "get-line~" "get-col" "get-col~" "loop-cell" "info" "let" "vertical" "case" "direction" "max-cell" "min-cell" "cell")}
      {Lisp-Entry "next-cell" definition () ("cell" "min-cell" "max-cell" "direction") #f #f 289 13 289 22 ("horizontal" "Cell" "new" "minor" "major" "receive" "when" "<" "1" "get-line" "get-line~" "get-col" "get-col~" "loop-cell" "info" "let" "vertical" "case" "direction" "max-cell" "min-cell" "cell")}
      {Lisp-Entry "loop-cell" definition () ("major" "minor" "start-major" "start-minor" "end-major" "end-minor" "step" "test") #f #f 302 13 302 22 ("else" "+" "values" "cond" "test" "step" "end-minor" "end-major" "start-minor" "start-major" "minor" "major")}
      {Lisp-Entry "inhibit-updates?" definition (public) () #f #f 316 19 316 35 ("make-parameter")}
      {Lisp-Entry "inhibit-invalidates?" definition (public) () #f #f 320 19 320 39 ("make-parameter")}
      {Lisp-Entry "inhibit-layouts?" definition (public) () #f #f 324 19 324 35 ("make-parameter")}
      {Lisp-Entry "event-type" definition (public) () #f #f 333 19 333 29 ("make-parameter")}
      {Lisp-Entry "*formats*" definition () () #f #f 342 12 342 21 ("jazz.ui.literals.formats" "load-unit" "lambda" "initer:" "Formats" "name:" "Exemplar-Domain" "new")}
      {Lisp-Entry "formats-domain" definition (public) () #f #f 349 20 349 34 ("*formats*")}
      {Lisp-Entry "register-format" definition (public) ("name" "format") #f #f 353 20 353 35 ("*formats*" "register-exemplar" "format" "name")}
      {Lisp-Entry "registered-format" definition (public) ("name") #f #f 357 20 357 37 ("error?:" "*formats*" "locate" "locate~" "name")}
      {Lisp-Entry "symbolic-formats" definition (public) () #f #f 361 20 361 36 ("*formats*" "get-index" "get-index~" "table-keys")}
      {Lisp-Entry "symbolic-format" definition (public) ("format") #f #f 365 20 365 35 ("registered-format" "symbol?" "if" "format")}
      {Lisp-Entry "*styles*" definition () () #f #f 376 12 376 20 ("jazz.ui.literals.styles" "load-unit" "lambda" "initer:" "Styles" "name:" "Exemplar-Domain" "new")}
      {Lisp-Entry "styles-domain" definition (public) () #f #f 383 20 383 33 ("*styles*")}
      {Lisp-Entry "register-style" definition (public) ("name" "style") #f #f 387 20 387 34 ("*styles*" "register-exemplar" "style" "name")}
      {Lisp-Entry "registered-style" definition (public) ("name") #f #f 391 20 391 36 ("error?:" "*styles*" "locate" "locate~" "name")}
      {Lisp-Entry "symbolic-styles" definition (public) () #f #f 395 20 395 35 ("*styles*" "get-index" "get-index~" "table-keys")}
      {Lisp-Entry "symbolic-style" definition (public) ("style") #f #f 399 20 399 34 ("registered-style" "symbol?" "if" "style")}
      {Lisp-Entry "for-each-run" definition (public) ("runs" "<list>" "proc") #f #f 410 20 410 32 ("set!" "+" "limit" "get-length" "get-length~" "len" "let*" "Run" "<Run>" "run" "lambda" "for-each" "0" "offset" "let" "proc" "list" "<list>" "runs")}
      {Lisp-Entry "redrawn-merge-cells" definition (protected) () #f #f 425 22 425 41 ("make-parameter")}
      {Lisp-Entry "in-cell-edit?" definition (public) ("view") #f #f 429 20 429 33 ("Tree-Data-View" "find-ascendant" "find-ascendant~" "view")}
      {Lisp-Entry "min-column-width" definition (public) () #f #f 433 19 433 35 ("9")}
      {Lisp-Entry "Site" class () ((extends . "Object")) #f #f 442 7 442 11 ("Object")
        {Lisp-Entry "row" slot () ((accessors . "generate")) #f #f 445 8 445 11 ()}
        {Lisp-Entry "get-row" accessor () () #f #f 445 25 445 33 ()}
        {Lisp-Entry "set-row" accessor () () #f #f 445 25 445 33 ()}
        {Lisp-Entry "column" slot () ((accessors . "generate")) #f #f 446 8 446 14 ()}
        {Lisp-Entry "get-column" accessor () () #f #f 446 25 446 33 ()}
        {Lisp-Entry "set-column" accessor () () #f #f 446 25 446 33 ()}
        {Lisp-Entry "initialize" method (override) ("row" "column") #f #f 449 20 449 30 ("column~self" "self" "row~self" "set!" "column" "row")}
        {Lisp-Entry "copy-object" method (override) ("deep?") #f #f 454 20 454 31 ("column" "row" "Site" "new" "deep?")}
        {Lisp-Entry "compare-object" method (override) ("target") #f #f 458 20 458 34 ("get-column" "get-column~" "column" ":equal" "eq?" "not" "get-row" "get-row~" "row" "compare" "compared" "let" ":incompatible" "Site" "is-not?" "if" "target")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 467 20 467 25 ("column" "row" "self" "class-of" "category-name" "format" "readably" "output")}}
      {Lisp-Entry "site=?" specialize (inline) () #f #f 474 22 474 28 ()}
      {Lisp-Entry "=" specialize (inline) ("s1" "<Site>" "s2" "<Site>") ("site=?") #f 474 30 474 31 ("get-column" "get-column~" "get-row" "get-row~" "eq?" "and" "bool" "<bool>" "s2" "Site" "<Site>" "s1")}
      {Lisp-Entry "site-hash" definition (public) ("s" "<Site>") #f #f 479 20 479 29 ("get-column" "get-column~" "get-row" "get-row~" "eqv?-hash" "fxwrap+" "Site" "<Site>" "s")}}})
"_view"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "view" "_view.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.ui.view" module () () #f #f 37 8 37 20 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.workspace" "jazz.ui.window" "jazz.ui" "jazz.system" "jazz.library" "jazz.graphic" "jazz.geometry" "jazz.debuggee")}
      {Lisp-Entry "mouse-in" definition (package) () #f #f 55 20 55 28 ()}
      {Lisp-Entry "mouse-down?" definition (package) () #f #f 56 20 56 31 ()}
      {Lisp-Entry "mouse-right-down?" definition (package) () #f #f 57 20 57 37 ()}
      {Lisp-Entry "mouse-down-view" definition (package) () #f #f 58 20 58 35 ()}
      {Lisp-Entry "mouse-down-point" definition (package) () #f #f 59 20 59 36 ()}
      {Lisp-Entry "delayed-mouse-action" definition () () #f #f 64 12 64 32 ()}
      {Lisp-Entry "get-delayed-mouse-action" definition (public) () #f #f 68 20 68 44 ("delayed-mouse-action")}
      {Lisp-Entry "set-delayed-mouse-action" definition (public) ("action") #f #f 71 20 71 44 ("delayed-mouse-action" "set!" "action")}
      {Lisp-Entry "get-mouse-in" definition (public) () #f #f 75 20 75 32 ("mouse-in")}
      {Lisp-Entry "set-mouse-in" definition (public) ("view") #f #f 78 20 78 32 ("mouse-in" "set!" "view")}
      {Lisp-Entry "reset-mouse-in" definition (public) () #f #f 81 20 81 34 ("mouse-in" "set!")}
      {Lisp-Entry "get-mouse-down?" definition (public) () #f #f 85 20 85 35 ("mouse-down?")}
      {Lisp-Entry "set-mouse-down?" definition (public) ("flag") #f #f 88 20 88 35 ("mouse-down?" "set!" "flag")}
      {Lisp-Entry "get-mouse-right-down?" definition (public) () #f #f 92 20 92 41 ("mouse-right-down?")}
      {Lisp-Entry "set-mouse-right-down?" definition (public) ("flag") #f #f 95 20 95 41 ("mouse-right-down?" "set!" "flag")}
      {Lisp-Entry "get-mouse-down-view" definition (public) () #f #f 99 20 99 39 ("mouse-down-view")}
      {Lisp-Entry "set-mouse-down-view" definition (public) ("view") #f #f 102 20 102 39 ("mouse-down-view" "set!" "view")}
      {Lisp-Entry "get-mouse-down-point" definition (public) () #f #f 106 20 106 40 ("mouse-down-point")}
      {Lisp-Entry "set-mouse-down-point" definition (public) ("point") #f #f 109 20 109 40 ("mouse-down-point" "set!" "point")}
      {Lisp-Entry "mouse-view" definition (public) () #f #f 113 20 113 30 ("mouse-in" "Captured-View" "or")}
      {Lisp-Entry "toplevel-deactivate" definition (public) () #f #f 120 20 120 39 ("mouse-down-point" "mouse-down-view" "mouse-down?" "set!")}
      {Lisp-Entry "with-cursor" definition (public) ("cursor" "proc" "(duration: duration #f)") #f #f 131 20 131 31 ("update-cursor" "sleep" "when" "set-cursor" "begin" "unwind-protect" "duration" "duration:" "proc" "cursor")}
      {Lisp-Entry "update-cursor" definition (public) () #f #f 141 20 141 33 ("mouse-position" "mouse-position~" "call-cursor-update" "call-cursor-update~" "in-player?" "in-player?~" "mouse-in" "and" "when")}
      {Lisp-Entry "Current-Drag-Drop" definition () () #f #f 151 12 151 29 ()}
      {Lisp-Entry "current-drag-drop" definition (public) () #f #f 155 20 155 37 ("Current-Drag-Drop")}
      {Lisp-Entry "set-current-drag-drop" definition (public) ("drag-drop") #f #f 158 20 158 41 ("Current-Drag-Drop" "set!" "drag-drop")}
      {Lisp-Entry "Captured-View" definition () () #f #f 167 12 167 25 ()}
      {Lisp-Entry "get-captured-view" definition (public) () #f #f 171 20 171 37 ("Captured-View")}
      {Lisp-Entry "set-captured-view" definition (public) ("view") #f #f 174 20 174 37 ("Captured-View" "set!" "view")}
      {Lisp-Entry "release-captured-view" definition (package) () #f #f 178 21 178 42 ("unset-capture" "set!" "Captured-View" "when")}
      {Lisp-Entry "external-name" definition (public) ("guest-class") #f #f 190 20 190 33 ("category-name" "guest-class")}
      {Lisp-Entry "get-focused-host" definition (public) () #f #f 199 20 199 36 ("get-host" "get-host~" "when" "get-focus" "focus" "let")}
      {Lisp-Entry "focused-host?" definition (public) ("host") #f #f 205 20 205 33 ("get-focused-host" "eq?" "host")}
      {Lisp-Entry "new-guest" definition () ("guest-class" "rest") #f #f 214 13 214 22 ("new" "apply" "rest" "guest-class")}
      {Lisp-Entry "get-modal" definition (public) ("guest-class" "." "rest") #f #f 223 20 223 29 ("process-modal" "process-modal~" "not" "if" "host-visible?:" "new-dialog" "apply" "dialog/result" "process?" "receive" "rest" "guest-class")}
      {Lisp-Entry "new-dialog" definition (public) ("guest-class" "." "rest") #f #f 230 20 230 30 ("focus-host" "focus-host~" "select-foreground" "select-foreground~" "set-visible?" "set-visible?~" "get-modal-result" "get-modal-result~" "values" "has-dialog-result?" "has-dialog-result?~" "if" "when" "set-guest" "set-guest~" "set-position" "set-position~" "set-size" "set-size~" "host-title~" "set-title" "set-title~" "center-dialog" "host-position" "host-position~" "pos" "get-size" "get-size~" "host-size" "host-size~" "size" "new-guest" "or" "get-root" "get-root~" "host" "visible?:" "closable?:" "sizable?:" "dialog-class" "dialog-class~" "new" "player" "let*" "others" "initialize" "guest" "host-visible?" "host-closable?" "host-sizable?" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "center-dialog" definition (public) ("inner") #f #f 254 20 254 33 ("50" "get-v" "get-v~" "-" "get-h" "get-h~" "Point" "new" "center" "pos" "get-desktop" "get-size" "get-size~" "outer" "let*" "inner")}
      {Lisp-Entry "Palettes" definition (package) () #f #f 265 20 265 28 ("eq?" "test:" "make-table")}
      {Lisp-Entry "singleton-palette" definition (public) ("guest-class" "name" "." "rest") #f #f 269 20 269 37 ("table-set!" "host-visible?:" "new-palette" "apply" "procedure?" "if" "palette" "Palettes" "table-ref" "category-identifier" "or" "ref" "let" "rest" "name" "guest-class")}
      {Lisp-Entry "new-palette" definition (public) ("guest-class" "." "rest") #f #f 281 20 281 31 ("focus-host" "focus-host~" "fade-in" "fade-in~" "layout-view" "layout-view~" "set-guest" "set-guest~" "new-guest" "let" "set-size" "set-size~" "set-position" "set-position~" "when" "host-title~" "or" "set-title" "set-title~" "get-root" "get-root~" "host" "visible?:" "palette-class" "palette-class~" "new" "player" "let*" "others" "initialize" "guest" "host-visible?" "host-size~" "host-size" "host-position~" "host-position" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "show-palette" definition (public) ("guest-class" "." "rest") #f #f 305 20 305 32 ("focus-host" "focus-host~" "fade-in" "fade-in~" "unless" "bring-to-front" "bring-to-front~" "get-visible?" "get-visible?~" "visible?" "let" "client-activate" "client-activate~" "when" "initialize:" "getf" "initialize" "get-player" "get-player~" "palette" "get-guest" "get-guest~" "guest" "external-name" "external-name~" "singleton-palette" "apply" "host" "let*" "rest" "guest-class")}
      {Lisp-Entry "collect-palettes" definition (public) () #f #f 321 20 321 36 ("palette-parent" "get-windows" "get-windows~" "Palette" "is?" "window" "lambda" "collect-if")}
      {Lisp-Entry "reset-palettes" definition (package) () #f #f 327 21 327 35 ("eq?" "test:" "make-table" "Palettes" "set!")}
      {Lisp-Entry "Dockeds" definition (package) () #f #f 336 20 336 27 ("eq?" "test:" "make-table")}
      {Lisp-Entry "singleton-docked" definition (public) ("guest-class" "name" "." "rest") #f #f 340 20 340 36 ("table-set!" "name:" "new-docked" "apply" "palette" "Dockeds" "table-ref" "external-name" "or" "ref" "let" "rest" "name" "guest-class")}
      {Lisp-Entry "new-docked" definition (public) ("guest-class" "." "rest") #f #f 348 20 348 30 ("new-guest" "set-guest" "set-guest~" "set-location" "set-location~" "when" "host-title~" "or" "set-title" "set-title~" "visible?:" "Docked-Host" "new" "host" "let" "others" "host-location" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "reset-dockeds" definition (package) () #f #f 358 21 358 34 ("eq?" "test:" "make-table" "Dockeds" "set!")}
      {Lisp-Entry "*stages*" definition (package) () #f #f 367 20 367 28 ()}
      {Lisp-Entry "*current-stage*" definition (package) () #f #f 370 20 370 35 ()}
      {Lisp-Entry "get-stages" definition (public) () #f #f 374 20 374 30 ("*stages*")}
      {Lisp-Entry "get-active-stages" definition (public) () #f #f 377 20 377 37 ("*stages*" "in-player?" "in-player?~" "collect-if")}
      {Lisp-Entry "first-stage" definition (public) () #f #f 381 20 381 31 ("get-active-stages" "first")}
      {Lisp-Entry "last-stage" definition (public) () #f #f 384 20 384 30 ("get-active-stages" "last")}
      {Lisp-Entry "current-stage" definition (public) () #f #f 388 20 388 33 ("*current-stage*")}
      {Lisp-Entry "set-current-stage" definition (public) ("stage" "(activate?: activate? #t)") #f #f 391 20 391 37 ("get-application" "update-menubar-buttons" "update-menubar-buttons~" "activate-current-frame" "stage-activate" "stage-activate~" "get-border" "get-border~" "invalidate-border" "invalidate-border~" "remove!" "cons" "*stages*" "when" "set!" "previous" "let" "*current-stage*" "eq?" "unless" "activate?" "activate?:" "stage")}
      {Lisp-Entry "reset-current-stage" definition (public) () #f #f 406 20 406 39 ("set-current-stage")}
      {Lisp-Entry "create-stage" definition (public) () #f #f 410 20 410 32 ("cons" "*stages*" "set!" "get-application" "new-stage" "new-stage~" "stage" "let")}
      {Lisp-Entry "current-stage-border" definition (public) () #f #f 416 20 416 40 ("get-parent" "get-parent~" "when" "current-stage" "stage" "let")}
      {Lisp-Entry "all-frames" definition (public) ("(include-invisibles?: include-invisibles? #f)") #f #f 422 20 422 30 ("all-external-frames" "all-internal-frames" "append" "include-invisibles?" "include-invisibles?:")}
      {Lisp-Entry "all-internal-frames" definition (public) ("(include-invisibles?: include-invisibles? #f)") #f #f 427 20 427 39 ("get-frames" "get-visible?" "get-visible?~" "or" "Internal-Frame-Host" "is?" "and" "frame" "lambda" "collect-if" "include-invisibles?" "include-invisibles?:")}
      {Lisp-Entry "all-external-frames" definition (public) ("(include-invisibles?: include-invisibles? #f)") #f #f 434 20 434 39 ("get-frames" "get-visible?" "get-visible?~" "or" "External-Frame-Host" "is?" "and" "frame" "lambda" "collect-if" "include-invisibles?" "include-invisibles?:")}
      {Lisp-Entry "first-frame" definition (public) () #f #f 441 20 441 31 ("first" "null?" "if" "current-stage-frames" "frames" "let")}
      {Lisp-Entry "second-frame" definition (public) () #f #f 448 20 448 32 ("second" "2" "length" ">=" "if" "current-stage-frames" "frames" "let")}
      {Lisp-Entry "last-frame" definition (public) () #f #f 455 20 455 30 ("last" "null?" "if" "current-stage-frames" "frames" "let")}
      {Lisp-Entry "collect-frames" definition (public) () #f #f 462 20 462 34 ("all-frames" "get-document-controller" "get-document-controller~" "get-tool?" "get-tool?~" "not" "Document" "is-not?" "or" "get-guest" "get-guest~" "guest" "let" "frame" "lambda" "collect-if")}
      {Lisp-Entry "find-frame-if-guest" definition (public) ("pred") #f #f 470 20 470 39 ("get-guest" "get-guest~" "key:" "include-invisibles?:" "all-frames" "find-if" "pred")}
      {Lisp-Entry "find-frame-host" definition (public) ("guest-type") #f #f 474 20 474 35 ("include-invisibles?:" "all-frames" "get-guest" "get-guest~" "Host-View" "is?" "and" "view" "lambda" "find-if" "guest-type")}
      {Lisp-Entry "find-frame-guest" definition (public) ("guest-type") #f #f 481 20 481 36 ("get-guest" "get-guest~" "when" "find-frame-host" "host" "let" "guest-type")}
      {Lisp-Entry "close-popup" definition (public) ("popup") #f #f 492 20 492 31 ("remove-popup" "close" "close~" "pop-focuses" "popup")}
      {Lisp-Entry "close-all-popups" definition (public) () #f #f 498 20 498 36 ("get-popups" "close-popup" "for-each")}
      {Lisp-Entry "delete-stage" definition (public) () #f #f 507 20 507 32 ("delete-stages" "get-border" "get-border~" "splitter-view" "bell" "Splitter-Preferences" "is-not?" "if" "get-parent" "get-parent~" "splitter" "get-figure-preferences" "get-figure-preferences~" "stage" "current-stage" "get-application" "get-workspaces-designer" "get-workspaces-designer~" "designer" "let")}
      {Lisp-Entry "delete-other-stages" definition (public) () #f #f 518 20 518 39 ("delete-stages" "get-border" "get-border~" "splitter-view" "receive" "bell" "is-not?" "get-figure-preferences" "get-figure-preferences~" "stage" "current-stage" "get-application" "get-workspaces-designer" "get-workspaces-designer~" "designer" "let" "get-children" "get-children~" "Stage-Preferences" "or" "pref" "lambda" "every?" "Splitter-Preferences" "is?" "and" "values" "get-parent" "get-parent~" "stage-splitter?" "if" "view" "parent" "splitter" "find-splitter" "define")}
      {Lisp-Entry "delete-stages" definition () ("designer" "stage" "splitter" "stage-view" "splitter-view") #f #f 541 13 541 26 ("get-application" "update-window-actions" "update-window-actions~" "layout-view" "layout-view~" "set-location" "set-location~" "Stage" "collect-descendants" "collect-descendants~" "remove!" "parent-view" "get-border" "get-border~" "border-view" "remove-child" "remove-child~" "relocate-component" "relocate-component~" "get-location" "get-location~" "location" "set-property" "set-property~" "bell" "can-relocate-component?" "can-relocate-component?~" "not" "get-parent" "get-parent~" "parent" "let" "send-to-back" "send-to-back~" "set-parent" "set-parent~" "close" "close~" "find-frame-brother" "if" "frame" "lambda" "for-each" "destroyed-stages" "move-frames" "get-children" "get-children~" "every?" "Splitter-Preferences" "and" "Stage-Preferences" "is?" "or" "view" "only-stages?" "define" "splitter-view" "stage-view" "splitter" "stage" "designer")}
      {Lisp-Entry "find-frame-brother" definition (protected) ("stage" "frame") #f #f 575 23 575 41 ("get-views" "get-views~" "eq?" "actual-guest" "actual-frame" "lambda" "find-if" "get-model" "get-model~" "model" "Text-View" "get-guest" "get-guest~" "guest" "let" "Host-View" "is?" "and" "frame" "stage")}
      {Lisp-Entry "split-stage-vertically" definition (public) () #f #f 588 20 588 42 ("vert" "split-stage")}
      {Lisp-Entry "split-stage-horizontally" definition (public) () #f #f 592 20 592 44 ("horz" "split-stage")}
      {Lisp-Entry "split-stage" definition () ("direction") #f #f 596 13 596 24 ("update-window-actions" "update-window-actions~" "activate-current-frame" "remember-workspace-stage" "remember-workspace-stage~" "get-guest" "get-guest~" "split-view" "split-view~" "splitted" "Host-View" "is?" "when" "activate?:" "set-current-stage" "layout-view" "layout-view~" "set-maximized?" "set-maximized?~" "set-location" "set-location~" "apply-properties" "apply-properties~" "set-parent" "set-parent~" "remember-stage" "remember-stage~" "Splitter-View" "splitter" "get-border" "get-border~" "border" "get-maximized?" "get-maximized?~" "maximized?" "second" "first" "50" "division" "relative" "mode" "orientation" "get-location" "get-location~" "location" "set-property" "set-property~" "relocate-component" "relocate-component~" "add-child" "add-child~" "Stage-Preferences" "new-stage" "Splitter-Preferences" "new" "new-splitter" "get-parent" "get-parent~" "parent" "first-view" "first-view~" "frame" "get-figure-preferences" "get-figure-preferences~" "stage" "bell" "not" "if" "current-stage" "get-application" "get-workspaces-designer" "get-workspaces-designer~" "designer" "let" "direction")}
      {Lisp-Entry "move-frame" definition (public) () #f #f 638 20 638 30 ("remember-workspace-stage" "remember-workspace-stage~" "maximize/restore" "maximize/restore~" "set-parent" "set-parent~" "when" "bell" "not" "navigate-next-stage" "next-stage" "current-stage" "get-stage" "get-stage~" "if" "stage" "current-frame" "frame" "let")}
      {Lisp-Entry "clone-frame" definition (public) () #f #f 650 20 650 31 ("remember-workspace-stage" "remember-workspace-stage~" "maximize/restore" "maximize/restore~" "set-parent" "set-parent~" "get-guest" "get-guest~" "split-view" "split-view~" "splitted" "focus-host" "focus-host~" "find-frame-brother" "brother" "not" "navigate-next-stage" "next-stage" "get-stage" "get-stage~" "stage" "bell" "Host-View" "is-not?" "if" "current-frame" "frame" "let")}
      {Lisp-Entry "tie-frame-model" definition (public) () #f #f 669 20 669 35 ("user-message" "Reference" "new" "set-property" "set-property~" "class-of" "category-name" "guest-model" "get-application" "get-workspaces-designer" "get-workspaces-designer~" "designer" "current-stage" "get-figure-preferences" "get-figure-preferences~" "stage" "get-guest" "get-guest~" "guest" "bell" "Host-View" "is-not?" "if" "current-frame" "frame" "let")}
      {Lisp-Entry "untie-stage" definition (public) () #f #f 681 20 681 31 ("user-message" "guest-model" "set-property" "set-property~" "get-application" "get-workspaces-designer" "get-workspaces-designer~" "designer" "current-stage" "get-figure-preferences" "get-figure-preferences~" "stage" "let")}
      {Lisp-Entry "next-stage" definition (public) ("stage") #f #f 688 20 688 30 ("next-element" "2" ">=" "when" "length" "count" "get-active-stages" "stages" "let" "stage")}
      {Lisp-Entry "previous-stage" definition (public) ("stage") #f #f 695 20 695 34 ("previous-element" "2" ">=" "when" "length" "count" "get-active-stages" "stages" "let" "stage")}
      {Lisp-Entry "navigate-next-stage" definition (public) () #f #f 702 20 702 39 ("activate-stage" "last-stage" "2" "length" ">=" "when" "get-active-stages" "stages" "let" "remove!" "cons" "*stages*" "set!" "stage" "bring-stage-to-front" "define")}
      {Lisp-Entry "navigate-previous-stage" definition (public) () #f #f 714 20 714 43 ("activate-stage" "first-stage" "2" "length" ">=" "when" "get-active-stages" "stages" "let" "list" "remove!" "append" "*stages*" "set!" "stage" "send-stage-to-back" "define")}
      {Lisp-Entry "activate-stage" define () ("stage") #f #f 727 9 727 23 ("acquire-focus" "acquire-focus~" "focus-host" "focus-host~" "if" "first-view" "first-view~" "frame" "let" "stage")}
      {Lisp-Entry "*active-frame*" definition () () #f #f 739 12 739 26 ()}
      {Lisp-Entry "active-frame" definition (package) () #f #f 743 21 743 33 ("*active-frame*")}
      {Lisp-Entry "set-active-frame" definition (package) ("frame") #f #f 746 21 746 37 ("*active-frame*" "set!" "frame")}
      {Lisp-Entry "activate-current-frame" definition (package) () #f #f 750 21 750 43 ("stage-empty-activate" "stage-empty-activate~" "current-stage" "stage" "activate-frame" "activate-frame~" "if" "deactivate-frame" "deactivate-frame~" "neq?" "when" "*active-frame*" "active" "front-frame" "front" "let")}
      {Lisp-Entry "front-frame" definition (public) () #f #f 763 20 763 31 ("first-view" "first-view~" "when" "current-stage" "stage" "let")}
      {Lisp-Entry "current-stage-frames" definition (public) () #f #f 769 20 769 40 ("get-views" "get-views~" "if" "current-stage" "stage" "let")}
      {Lisp-Entry "frame-region" definition (public) ("frame" "<Rect>" "(insets: insets (new Rect 1 1 1 1))") #f #f 781 20 781 32 ("or" "combine!" "combine!~" "b" "-" "r" "t" "+" "rect:" "l" "with" "Region" "region" "get-bottom" "get-bottom~" "bottom" "get-right" "get-right~" "right" "get-top" "get-top~" "top" "get-left" "get-left~" "left" "let" "1" "new" "insets" "insets:" "Rect" "<Rect>" "frame")}
      {Lisp-Entry "default-frame-kind" define-macro () () ("setting") #f 803 16 803 34 ("internal")}
      {Lisp-Entry "new-frame" definition (public) ("guest-class" "." "rest") #f #f 807 20 807 29 ("new-external-frame" "external" "new-internal-frame" "apply" "internal" "default-frame-kind" "or" "case" "others" "kind" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "Internal-Frame-Cascade-Position" definition () () #f #f 819 12 819 43 ("25" "Point")}
      {Lisp-Entry "Internal-Frame-Cascade-Step" definition () () #f #f 823 12 823 39 ("22" "Dimension")}
      {Lisp-Entry "collect-frames-positions" definition () ("host" "guest") #f #f 827 13 827 37 ("get-views" "get-views~" "get-position" "get-position~" "get-preserved-position" "get-preserved-position~" "if" "get-guest" "get-guest~" "class-of" "eq?" "Internal-Frame-Host" "is?" "and" "frame" "lambda" "collect" "get-maximized?" "get-maximized?~" "maximized?" "get-stage" "get-stage~" "stage" "let*" "guest" "host")}
      {Lisp-Entry "cascade-frame-position" definition () ("host" "guest") #f #f 839 13 839 35 ("collect-frames-positions" "Internal-Frame-Cascade-Step" "Internal-Frame-Cascade-Position" "cascade-position" "guest" "host")}
      {Lisp-Entry "new-internal-frame" definition (public) ("guest-class" "." "rest") #f #f 845 20 845 38 ("focus-host" "focus-host~" "remember-workspace-stage" "remember-workspace-stage~" "set-visible?" "set-visible?~" "bring-to-front" "bring-to-front~" "ensure-displayed" "ensure-displayed~" "set-guest" "set-guest~" "set-workspace" "set-workspace~" "28" "8" "Dimension" "get-size" "get-size~" "nu+" "set-size" "set-size~" "cascade-frame-position" "set-position" "set-position~" "host-title~" "set-title" "set-title~" "visible?:" "parent:" "Internal-Frame-Host" "new" "host" "new-guest" "or" "others" "initialize" "guest" "host-focus?" "host-visible?" "host-workspace" "host-size~" "host-size" "host-position~" "host-position" "host-title" "bind-keywords" "current-stage" "not" "continuation-return" "resolve-reference" "resolve-reference~" "subtype?" "and" "when" "get-figure-preferences" "get-figure-preferences~" "get-guest-model" "get-guest-model~" "guest-model" "stage" "for-each" "return" "lambda" "continuation-capture" "get-active-stages" "stages" "let" "determine-stage" "define" "rest" "guest-class")}
      {Lisp-Entry "cascade-position" definition (public) ("position" "step" "positions") #f #f 893 20 893 36 ("nu+" "nu=?" "test:" "member?" "if" "pos" "iterate" "let" "positions" "step" "position")}
      {Lisp-Entry "new-external-frame" definition (public) ("guest-class" "." "rest") #f #f 905 20 905 38 ("activate-frame" "activate-frame~" "focus-host" "focus-host~" "fade-in" "fade-in~" "layout-view" "layout-view~" "set-guest" "set-guest~" "new-guest" "let" "set-size" "set-size~" "set-position" "set-position~" "when" "host-title~" "or" "set-title" "set-title~" "get-root" "get-root~" "host" "visible?:" "External-Frame" "new" "player" "let*" "others" "initialize" "guest" "host-focus?" "host-visible?" "host-workspace" "host-size~" "host-size" "host-position~" "host-position" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "Toolbars" definition (package) () #f #f 936 20 936 28 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-toolbar" definition (public) ("name") #f #f 940 20 940 31 ("Toolbars" "table-ref" "name")}
      {Lisp-Entry "singleton-toolbar" definition (public) ("guest-class" "name" "." "rest") #f #f 944 20 944 37 ("table-set!" "name:" "new-toolbar" "palette" "Toolbars" "table-ref" "category-identifier" "or" "ref" "let" "rest" "name" "guest-class")}
      {Lisp-Entry "new-toolbar" definition (public) ("guest-class" "." "rest") #f #f 952 20 952 31 ("new-guest" "set-guest" "set-guest~" "set-location" "set-location~" "when" "host-title~" "or" "set-title" "set-title~" "visible?:" "Toolbar-Host" "new" "host" "let" "others" "host-location" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "reset-toolbars" definition (package) () #f #f 962 21 962 35 ("eq?" "test:" "make-table" "Toolbars" "set!")}
      {Lisp-Entry "scrollbar-size" definition (public) () #f #f 971 19 971 33 ("13")}
      {Lisp-Entry "with-progress" definition () ("proc" "(threaded?: threaded? #t)" "(name: name #f)" "(progress-reporter: progress-reporter Progress-Reporter)" "(cancelable?: cancelable? #t)" "(abnormal-cleanup: abnormal-cleanup #f)") #f #f 980 13 980 26 ("process-modal" "process-modal~" "worker" "end-modal" "end-modal~" "signal-modal" "signal-modal~" "signal" "forwardable?" "forwardable?~" "Signal" "catch" "unwind-protect" "set!" "sig" "abnormal" "resignal" "result" "let*" "lambda" "new-thread" "thread-start!" "disable-cancel" "disable-cancel~" "when" "get-guest" "get-guest~" "reporter" "let" "host-closable?:" "new-dialog" "dialog" "process?" "receive" "User-Reporter" "new" "not" "if" "with-progress" "unimplemented" "abnormal-cleanup" "abnormal-cleanup:" "cancelable?" "cancelable?:" "Progress-Reporter" "progress-reporter" "progress-reporter:" "name" "name:" "threaded?" "threaded?:" "proc")}
      {Lisp-Entry "message-box" definition (public) ("text" "(class: class #f)" "(type: type 'message)" "(title: title #f)" "(size: size #f)" "(icon: icon #f)" "(content: content #f)" "(sound: sound 'default)" "(selection: selection #f)" "(yes: yes #f)" "(no: no #f)" "(cancel: cancel #f)" "(actions: actions '())" "(default-button: default-button #f)" "(process-keys?: process-keys? #t)" "(sizable?: sizable? #f)") #f #f 1030 20 1030 31 ("process-box" "process-box~" "get-guest" "get-guest~" "guest" "let" "host-sizable?:" "host-visible?:" "Message-Box" "or" "new-dialog" "dialog" "process?" "receive" "sizable?" "sizable?:" "process-keys?" "process-keys?:" "default-button" "default-button:" "actions" "actions:" "cancel" "cancel:" "no" "no:" "yes" "yes:" "selection" "selection:" "default" "sound" "sound:" "content" "content:" "icon" "icon:" "size" "size:" "title" "title:" "message" "type" "type:" "class" "class:" "text")}
      {Lisp-Entry "with-safe-execution" definition (public) ("context" "thunk" "(continue-text: continue-text #f)" "(continue-handler: continue-handler #f)") #f #f 1069 20 1069 39 ("wrap-exception" "obj" "lambda" "with-exception-filter" "get-controller-debugger" "if" "warn-exit" "exit" "cancel" "no" "post-stop" "yes" "case" "cancel:" "no:" "yes:" "confirmation" "type:" "message-box" "result" "or" "exception-reason" "format" "text" "let" "err" "ask-continue" "define" "continue-handler" "continue-handler:" "continue-text" "continue-text:" "thunk" "context")}
      {Lisp-Entry "with-catched-exception" definition (public) ("filter" "thunk") #f #f 1105 20 1105 42 ("throw-cancel" "wrap-exception" "if" "obj" "lambda" "with-exception-filter" "no" "yes" "case" "no:" "yes:" "question" "type:" "message-box" "result" "exception-reason" "text" "let" "err" "ask" "define" "thunk" "filter")}
      {Lisp-Entry "with-safe-explore" definition (public) ("proc" "(action: action 'ask)") #f #f 1126 20 1126 37 ("throw-cancel" "no" "neq?" "selection:" "get-application" "edit-document" "edit-document~" "get-range" "get-range~" "range" "get-source" "get-source~" "source" "yes" "eq?" "cancel" "ignore" "cancel:" "no:" "yes:" "confirmation" "type:" "exception-reason" "message-box" "case" "result" "when" "Explore-Error" "is?" "object?" "and" "exc" "let" "obj" "lambda" "with-exception-filter" "ask" "action" "action:" "proc")}
      {Lisp-Entry "choose-color" definition (public) ("." "rest") #f #f 1154 20 1154 32 ("Color-Request" "get-modal" "apply" "rest")}
      {Lisp-Entry "request-string" definition (public) ("(class: class String-Request)" "(title: title #f)" "(prefix: prefix #f)" "(initial-value: initial-value #f)" "(accepts-empty?: accepts-empty? #t)" "(unicity-domain: unicity-domain #f)" "(validator: validator #f)") #f #f 1158 20 1158 34 ("empty-string?" "process-modal" "process-modal~" "string" "let" "acquire-focus" "acquire-focus~" "select-all" "select-all~" "->string" "if" "set-string-content" "set-string-content~" "set-prefix" "set-prefix~" "set-validator" "set-validator~" "set-unicity-domain" "set-unicity-domain~" "set-accepts-empty?" "set-accepts-empty?~" "or" "get-player" "get-player~" "set-title" "set-title~" "locate" "locate~" "text" "get-guest" "get-guest~" "view" "let*" "new-dialog" "host" "process?" "receive" "validator" "validator:" "unicity-domain" "unicity-domain:" "accepts-empty?" "accepts-empty?:" "initial-value" "initial-value:" "prefix" "prefix:" "title" "title:" "String-Request" "class" "class:")}
      {Lisp-Entry "request-name" definition (public) ("." "rest") #f #f 1176 20 1176 32 ("string->symbol" "not" "if" "prefix:" "title:" "request-string" "apply" "string" "or" "let*" "others" "prefix" "title" "bind-keywords" "rest")}
      {Lisp-Entry "request-text" definition (public) ("(class: class Text-Request)" "(title: title #f)" "(initial-text: initial-text #f)") #f #f 1186 20 1186 32 ("empty-string?" "if" "process-modal" "process-modal~" "string" "let" "acquire-focus" "acquire-focus~" "select-all" "select-all~" "set-string-content" "set-string-content~" "or" "set-title" "set-title~" "locate" "locate~" "text" "get-guest" "get-guest~" "view" "let*" "new-dialog" "dialog" "process?" "receive" "request-text" "unimplemented" "initial-text" "initial-text:" "title" "title:" "Text-Request" "class" "class:")}
      {Lisp-Entry "request-date" definition (public) ("(class: class Date-Request)" "(title: title #f)" "(prefix: prefix #f)" "(initial-date: initial-date #f)") #f #f 1202 20 1202 32 ("Date" "parse-string" "parse-string~" "empty-string?" "process-modal" "process-modal~" "string" "let" "acquire-focus" "acquire-focus~" "select-all" "select-all~" "present" "present~" "if" "set-string-content" "set-string-content~" "set-prefix" "set-prefix~" "or" "set-title" "set-title~" "locate" "locate~" "text" "get-guest" "get-guest~" "view" "let*" "new-dialog" "dialog" "process?" "receive" "request-date" "unimplemented" "initial-date" "initial-date:" "prefix" "prefix:" "title" "title:" "Date-Request" "class" "class:")}
      {Lisp-Entry "request-list" definition (public) ("content" "(class: class List-Request)" "(title: title #f)" "(invite: invite #f)" "(present: present #f)" "(selected: selected #f)" "(multiple-selection?: multiple-selection? #f)") #f #f 1219 20 1219 32 ("process-modal" "process-modal~" "set-selected" "set-selected~" "set-content" "set-content~" "set-multiple-selection?" "set-multiple-selection?~" "set-present" "set-present~" "set-invite" "set-invite~" "set-title" "set-title~" "when" "get-player" "get-player~" "player" "get-guest" "get-guest~" "view" "let" "new-dialog" "host" "process?" "receive" "multiple-selection?" "multiple-selection?:" "selected" "selected:" "present" "present:" "invite" "invite:" "title" "title:" "List-Request" "class" "class:" "content")}
      {Lisp-Entry "get-output-log" definition (public) () #f #f 1241 20 1241 34 ("get-application" "get-output-log" "get-output-log~")}
      {Lisp-Entry "get-active-results" definition (public) () #f #f 1245 20 1245 38 ("get-application" "get-active-results" "get-active-results~")}
      {Lisp-Entry "all-windows" definition (public) () #f #f 1249 20 1249 31 ("get-windows" "get-windows~" "cons" "if" "get-toplevel" "toplevel" "let")}
      {Lisp-Entry "select-docked" definition (public) ("class" "(name: name #f)" "(workspace: workspace 'home)" "(focus?: focus? #f)") #f #f 1256 20 1256 33 ("get-workspace" "apply-preferences" "apply-preferences~" "find-docked" "guest" "let" "focus-host" "focus-host~" "Splitter-View" "if" "ensure-unzoomed" "set-selection" "set-selection~" "Pad-View" "is?" "get-parent" "get-parent~" "parent" "get-host" "get-host~" "host" "let*" "when" "view" "select-view" "define" "focus?" "focus?:" "home" "workspace" "workspace:" "name" "name:" "class")}
      {Lisp-Entry "find-docked" definition (public) ("class") #f #f 1276 20 1276 31 ("continuation-return" "is?" "when" "view" "for-each-docked" "return" "lambda" "continuation-capture" "class")}
      {Lisp-Entry "for-each-docked" definition (public) ("proc") #f #f 1286 20 1286 35 ("all-windows" "for-each-docked" "for-each-docked~" "window" "lambda" "for-each" "proc")}
      {Lisp-Entry "docked-views" definition (public) () #f #f 1293 20 1293 32 ("cons" "set!" "view" "lambda" "for-each-docked" "docked-views" "let")}
      {Lisp-Entry "for-each-splitter" definition (public) ("view" "proc") #f #f 1300 20 1300 37 ("set!" "is?" "while" "Splitter-View" "splitter-class" "get-parent" "get-parent~" "splitter" "let" "proc" "view")}
      {Lisp-Entry "ensure-unzoomed" definition (public) ("view") #f #f 1309 20 1309 35 ("unzoom" "unzoom~" "get-effective-target" "get-effective-target~" "neq?" "zoom" "get-state" "get-state~" "eq?" "and" "when" "splitter" "lambda" "for-each-splitter" "view")}
      {Lisp-Entry "current-frame" definition (public) () #f #f 1317 20 1317 33 ("first-frame")}
      {Lisp-Entry "current-document" definition (public) () #f #f 1321 20 1321 36 ("get-guest" "get-guest~" "Frame-Host" "is?" "when" "current-frame" "frame" "let")}
      {Lisp-Entry "current-guest" definition (public) () #f #f 1327 20 1327 33 ("get-guest" "get-guest~" "when" "get-focused-host" "host" "let")}
      {Lisp-Entry "focused-host" definition (public) () #f #f 1333 20 1333 32 ("get-host" "get-host~" "when" "get-focus" "focus" "let")}
      {Lisp-Entry "focused-guest" definition (public) () #f #f 1339 20 1339 33 ("get-guest" "get-guest~" "when" "get-focus" "focus" "let")}
      {Lisp-Entry "get-focus" definition (public) () #f #f 1350 20 1350 29 ("get-view-focus" "get-view-focus~" "when" "get-focused-window" "player" "let")}
      {Lisp-Entry "set-focus" definition (public) ("new-focus") #f #f 1356 20 1356 29 ("clear-pushed-focuses" "clear-pushed-focuses~" "set-window-focus" "bring-to-front" "bring-to-front~" "set-view-focus" "set-view-focus~" "focus-view" "focus-view~" "unfocus-view" "unfocus-view~" "begin" "eq?" "if" "assert" "get-player" "get-player~" "new-player" "get-focused-window" "old-player" "ensure-focusable" "ensure-focusable~" "neq?" "when" "get-focus" "old-focus" "let" "new-focus")}
      {Lisp-Entry "push-focus" definition (public) ("new-focus") #f #f 1373 20 1373 30 ("push-view-focus" "push-view-focus~" "get-focused-window" "player" "ensure-focusable" "ensure-focusable~" "neq?" "when" "get-focus" "old-focus" "let" "new-focus")}
      {Lisp-Entry "pop-focus" definition (public) () #f #f 1381 20 1381 29 ("pop-view-focus" "pop-view-focus~" "get-focused-window" "player" "let")}
      {Lisp-Entry "pop-focuses" definition (package) ("popup") #f #f 1386 21 1386 32 ("pop-view-focuses" "pop-view-focuses~" "when" "get-window-focus" "window-focus" "let" "popup")}
      {Lisp-Entry "pop-all-focuses" definition (package) () #f #f 1392 21 1392 36 ("pop-all-view-focuses" "pop-all-view-focuses~" "when" "get-window-focus" "window-focus" "let")}
      {Lisp-Entry "set-default-focus" definition (public) () #f #f 1398 20 1398 37 ("get-toplevel" "get-root" "get-root~" "acquire-focus" "acquire-focus~")}
      {Lisp-Entry "get-focus-actions" definition (public) ("view") #f #f 1402 20 1402 37 ("focus-actions" "focus-actions~" "if" "get-surrogate" "get-surrogate~" "surrogate" "let" "view")}
      {Lisp-Entry "refresh-focus-actions" definition (public) ("view") #f #f 1409 20 1409 41 ("get-focus-actions" "get-application" "set-focus-actions" "set-focus-actions~" "get-focus" "eq?" "when" "view")}
      {Lisp-Entry "*debug-colors*" definition () () #f #f 1419 12 1419 26 ("25" "10" "1" "0.9" "0" "hsv->color" "color-cycle")}
      {Lisp-Entry "*nb-debug-colors*" definition () () #f #f 1422 12 1422 29 ("*debug-colors*" "length")}
      {Lisp-Entry "*current-debug-color*" definition () () #f #f 1425 12 1425 33 ("0")}
      {Lisp-Entry "cycle-debug-color!" definition (public) () #f #f 1429 20 1429 38 ("*nb-debug-colors*" "1" "+" "modulo" "set!" "*current-debug-color*" "*debug-colors*" "element" "prog1")}
      {Lisp-Entry "cleanup-mouse-processing" definition (package) () #f #f 1439 21 1439 45 ("complete-drag-up" "complete-drag-and-drop" "release-captured-view")}
      {Lisp-Entry "complete-drag-and-drop" definition (package) () #f #f 1445 21 1445 43 ("get-source" "get-source~" "get-view" "get-view~" "drag-end" "drag-end~" "Current-Drag-Drop" "when")}
      {Lisp-Entry "complete-drag-up" definition (package) ("dragging?") #f #f 1450 21 1450 37 ("process-drag-up" "process-drag-up~" "mouse-down-view" "mouse-position" "mouse-position~" "pos" "let" "mouse-down?" "when" "dragging?")}}})
"_window"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "_window.jazz"} 245382882. jazz
    {Lisp-Entry "jazz.ui.window" module () () #f #f 37 8 37 22 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("x11" "jazz.ui.window.platform.x11" "windows" "jazz.ui.window.platform.windows" "carbon" "cond" "jazz.ui.window.platform.carbon" "jazz.ui.window.platform.independant")}
      {Lisp-Entry "import" import () () #f #f 46 1 46 7 ("jazz.system" "jazz.graphic" "jazz.debuggee" "x11" "jazz.ui.window.platform.x11" "windows" "jazz.ui.window.platform.windows" "carbon" "cond" "jazz.ui.window.platform.carbon" "jazz.ui.window.platform.independant" "jazz.ui")}
      {Lisp-Entry "desktop" definition () () #f #f 61 12 61 19 ()}
      {Lisp-Entry "Desktop-Surface" definition () () #f #f 64 12 64 27 ()}
      {Lisp-Entry "desktop-surface" definition (public) () #f #f 67 20 67 35 ("0" "Dimension" "Memory-Surface" "new" "set!" "Desktop-Surface" "unless")}
      {Lisp-Entry "get-desktop" definition (public) () #f #f 73 20 73 31 ("Desktop" "new" "set!" "desktop" "unless")}
      {Lisp-Entry "activating-window?" definition (public) () #f #f 84 19 84 37 ("make-parameter")}
      {Lisp-Entry "select-foreground-window" definition (public) ("handle") #f #f 93 20 93 44 ("platform-select-foreground-window" "assert" "handle")}
      {Lisp-Entry "get-window-handle-title" definition (public) ("handle") #f #f 98 20 98 43 ("platform-get-window-handle-title" "assert" "handle")}
      {Lisp-Entry "process-events" definition (public) () #f #f 108 20 108 34 ("get-events-single-threaded?" "0" "=" "if" "format" "get-level" "get-level~" "level" "current-loop" "thread-stop-loop" "thread-read" "unwind-protect" "thread-start!" "thread-start-loop" "process-messages-multi-threaded" "pump" "process-events-multi-threaded" "get-exception-debugger" "with-exception-debugger" "eof-object?" "not" "when" "thread-read-non-blocking" "thunk" "loop" "process-messages-single-threaded" "Cancel-Signal" "catch" "lambda" "present-event-loop-restart" "resume-loop" "with-restart-catcher" "restart-loop" "let" "proper-tail-calls" "declare" "process-events-single-threaded" "define")}
      {Lisp-Entry "locked-update?" definition () () #f #f 164 12 164 26 ()}
      {Lisp-Entry "with-locked-update" definition (public) ("proc") #f #f 168 20 168 38 ("update-window" "update-window~" "open?" "open?~" "when" "set!" "get-handle" "get-handle~" "platform-lock-window-update" "begin" "unwind-protect" "get-toplevel" "toplevel" "let" "locked-update?" "if" "proc")}
      {Lisp-Entry "Key-Hook" definition (package) () #f #f 189 20 189 28 ()}
      {Lisp-Entry "get-key-hook" definition (public) () #f #f 193 20 193 32 ("Key-Hook")}
      {Lisp-Entry "set-key-hook" definition (public) ("hook") #f #f 197 20 197 32 ("Key-Hook" "set!" "hook")}
      {Lisp-Entry "Overlappeds" definition () () #f #f 206 12 206 23 ()}
      {Lisp-Entry "get-overlappeds" definition (public) () #f #f 210 20 210 35 ("Overlappeds")}
      {Lisp-Entry "set-overlappeds" definition (public) ("lst") #f #f 213 20 213 35 ("Overlappeds" "set!" "lst")}
      {Lisp-Entry "register-overlapped" definition (public) ("overlapped") #f #f 217 20 217 39 ("get-overlappeds" "cons" "set-overlappeds" "overlapped")}
      {Lisp-Entry "unregister-overlapped" definition (public) ("overlapped") #f #f 220 20 220 41 ("get-overlappeds" "remove!" "set-overlappeds" "overlapped")}
      {Lisp-Entry "palette-parent" definition (package) () #f #f 231 25 231 39 ("get-toplevel")}
      {Lisp-Entry "palette-parent" definition (package) () #f #f 234 25 234 39 ("get-desktop")}
      {Lisp-Entry "Passing-Through?" definition () () #f #f 243 12 243 28 ()}
      {Lisp-Entry "get-passing-through?" definition (public) () #f #f 247 20 247 40 ("Passing-Through?")}
      {Lisp-Entry "set-passing-through?" definition (public) ("flag") #f #f 250 20 250 40 ("Passing-Through?" "set!" "flag")}
      {Lisp-Entry "Popups" definition () () #f #f 254 12 254 18 ()}
      {Lisp-Entry "get-popups" definition (public) () #f #f 258 20 258 30 ("Popups")}
      {Lisp-Entry "set-popups" definition (public) ("lst") #f #f 261 20 261 30 ("Popups" "set!" "lst")}
      {Lisp-Entry "remove-popup" definition (package) ("popup") #f #f 264 21 264 33 ("remove!" "Popups" "set!" "popup")}
      {Lisp-Entry "Frames" definition () () #f #f 273 12 273 18 ()}
      {Lisp-Entry "get-frames" definition (public) () #f #f 277 20 277 30 ("Frames")}
      {Lisp-Entry "set-frames" definition (public) ("lst") #f #f 280 20 280 30 ("Frames" "set!" "lst")}
      {Lisp-Entry "register-frame" definition (public) ("frame") #f #f 284 20 284 34 ("get-frames" "cons" "set-frames" "frame")}
      {Lisp-Entry "unregister-frame" definition (public) ("frame") #f #f 287 20 287 36 ("get-frames" "remove!" "set-frames" "frame")}
      {Lisp-Entry "bring-frame-to-front" definition (public) ("frame") #f #f 291 20 291 40 ("get-frames" "remove!" "cons" "set-frames" "frame")}
      {Lisp-Entry "send-frame-to-back" definition (public) ("frame") #f #f 294 20 294 38 ("list" "get-frames" "remove!" "append" "set-frames" "frame")}
      {Lisp-Entry "process-windows" definition (public) ("(include-invisibles?: include-invisibles? #f)") #f #f 303 20 303 35 ("get-overlappeds" "get-visible?" "get-visible?~" "or" "overlapped" "lambda" "collect-if" "include-invisibles?" "include-invisibles?:")}
      {Lisp-Entry "get-window-focus" definition (public) () #f #f 314 20 314 36 ("get-window" "when" "platform-get-focus" "focus" "let")}
      {Lisp-Entry "set-window-focus" definition (public) ("window") #f #f 320 20 320 36 ("get-handle" "get-handle~" "and" "platform-set-focus" "get-focused-window" "neq?" "when" "window")}
      {Lisp-Entry "*focused-window*" definition () () #f #f 328 12 328 28 ()}
      {Lisp-Entry "get-focused-window" definition (public) () #f #f 332 20 332 38 ("*focused-window*")}
      {Lisp-Entry "set-focused-window" definition (public) ("window") #f #f 335 20 335 38 ("*focused-window*" "set!" "window")}
      {Lisp-Entry "debug-flicker" definition (public) () #f #f 344 19 344 32 ("make-parameter")}}})
"_workspace"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "workspace" "_workspace.jazz"} 227918331. jazz
    {Lisp-Entry "jazz.ui.workspace" module () () #f #f 37 8 37 25 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system")}
      {Lisp-Entry "Selected-Workspace" definition () () #f #f 44 12 44 30 ()}
      {Lisp-Entry "workspace-activation?" definition (public) () #f #f 48 19 48 40 ("make-parameter")}
      {Lisp-Entry "get-workspace-preferences" definition (public) () #f #f 52 20 52 45 ("get-toplevel" "get-workspace-preferences" "get-workspace-preferences~")}
      {Lisp-Entry "set-workspace-preferences" definition (public) ("preferences") #f #f 55 20 55 45 ("get-toplevel" "set-workspace-preferences" "set-workspace-preferences~" "preferences")}
      {Lisp-Entry "get-workspaces-preferences" definition (public) ("(error?: error? #t)") #f #f 59 20 59 46 ("get-reference" "get-reference~" "error" "when" "not" "if" "get-application" "get-workspaces-designer" "get-workspaces-designer~" "designer" "let" "error?" "error?:")}
      {Lisp-Entry "get-workspaces" definition (public) () #f #f 67 20 67 34 ("get-workspaces-preferences" "get-children" "get-children~")}
      {Lisp-Entry "find-workspace" definition (public) ("name") #f #f 71 20 71 34 ("get-workspaces-preferences" "find-component" "find-component~" "name")}
      {Lisp-Entry "get-workspace" definition (public) ("name") #f #f 75 20 75 33 ("error" "find-workspace" "or" "name")}
      {Lisp-Entry "selected-workspace" definition (public) () #f #f 80 20 80 38 ("Selected-Workspace")}
      {Lisp-Entry "set-selected-workspace" definition (public) ("workspace") #f #f 83 20 83 42 ("Selected-Workspace" "set!" "workspace")}
      {Lisp-Entry "select-workspace" definition (public) ("name") #f #f 87 20 87 36 ("get-workspace" "apply-preferences" "apply-preferences~" "name")}
      {Lisp-Entry "select-current-workspace" definition (public) () #f #f 91 20 91 44 ("get-workspace-preferences" "apply-preferences" "apply-preferences~")}
      {Lisp-Entry "select-next-workspace" definition (public) () #f #f 95 20 95 41 ("apply-preferences" "apply-preferences~" "eq?" "unless" "length" "1" "+" "modulo" "element" "next" "find" "rank" "get-workspaces" "Workspace-Preferences" "collect-type" "workspaces" "get-workspace-preferences" "current" "let*")}
      {Lisp-Entry "select-previous-workspace" definition (public) () #f #f 104 20 104 45 ("apply-preferences" "apply-preferences~" "eq?" "unless" "element" "previous" "1" "length" "-" "0" "=" "if" "previous-rank" "find" "rank" "get-workspaces" "Workspace-Preferences" "collect-type" "workspaces" "get-workspace-preferences" "current" "let*")}}})
"aliases"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "aliases.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.preference.aliases" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Aliases-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 50 20 50 39 ("Preferences")
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 62 25 62 45 ("Aliases-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 71 11 71 17 ()
        {Lisp-Entry "Aliases-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 74 7 74 37 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 77 3 77 7 (">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 82 20 82 61 ("Alias-Configuration" "reference" "list" "component")}
          {Lisp-Entry "component-get-addable-details" method (override) ("component") #f #f 88 20 88 49 ("300" "directory" "150" "alias" "component")}}
        {Lisp-Entry "Alias-Configuration" class (undocumented) ((extends . "Preferences")) #f #f 97 20 97 39 ("Preferences")
          {Lisp-Entry "alias" property () ((initialize . "#f") (accessors . "generate")) #f #f 100 12 100 17 ()}
          {Lisp-Entry "get-alias" accessor () () #f #f 100 46 100 54 ()}
          {Lisp-Entry "set-alias" accessor () () #f #f 100 46 100 54 ()}
          {Lisp-Entry "directory" property () ((initialize . "#f") (accessors . "generate")) #f #f 101 12 101 21 ()}
          {Lisp-Entry "get-directory" accessor () () #f #f 101 46 101 54 ()}
          {Lisp-Entry "set-directory" accessor () () #f #f 101 46 101 54 ()}
          {Lisp-Entry "form" form () () #f #f 104 3 104 7 ("Image-Resource" "icon:" "install" "<install>")}
          {Lisp-Entry "get-domain" method (meta override) ("property") #f #f 113 25 113 35 ("nextmethod" "else" "field-name" "case" "property")}
          {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 123 25 123 45 ("Alias-Configuration-Descriptor" "new")}}
        {Lisp-Entry "design" submodule () () #f #f 132 11 132 17 ()
          {Lisp-Entry "import" import () () #f #f 135 1 135 7 ("jazz.jml" "jazz.designer")}
          {Lisp-Entry "Alias-Configuration-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 139 7 139 37 ("Preferences-Descriptor")
            {Lisp-Entry "form" form () () #f #f 142 3 142 7 ("domain" "Directory-Domain" "<Directory-Domain>" "name:" "Property-Descriptor" "<Property-Descriptor>" "directory" "alias" "categorized:" ">" "<properties" "<properties~>" "title:" "install" "<install>")}
            {Lisp-Entry "component-presentation-property?" method (override) ("component" "property") #f #f 150 20 150 52 ("alias" "field-name" "memq?" "property" "component")}
            {Lisp-Entry "component-get-presentation" method (override) ("component") #f #f 154 20 154 46 ("get-alias" "get-alias~" "or" "component")}
            {Lisp-Entry "component-set-presentation" method (override) ("component" "designer" "presentation") #f #f 159 20 159 46 ("string->symbol" ":alias" "set-property" "set-property~" "presentation" "designer" "component")}}}}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "autoload.jazz"} 245735327. jazz
    {Lisp-Entry "jazz.ui.autoload" module (protected) () #f #f 37 18 37 34 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("Workspaces-Preferences" "jazz.ui.workspace.Workspaces-Preferences" "Workspace-Preferences" "jazz.ui.workspace.Workspace-Preferences" "Workspace-Button" "jazz.ui.workspace.Workspace-Button" "Window" "jazz.ui.window.Window" "View-Player" "jazz.ui.window.View-Player" "Transient" "jazz.ui.window.Transient" "Toplevel" "jazz.ui.window.Toplevel" "Tooltip" "jazz.ui.window.Tooltip" "Popup" "jazz.ui.window.Popup" "Palette" "jazz.ui.window.Palette" "Overlapped" "jazz.ui.window.Overlapped" "Menu-Transient" "jazz.ui.window.Menu-Transient" "External-Frame" "jazz.ui.window.External-Frame" "Desktop" "jazz.ui.window.Desktop" "Tree-Widget" "jazz.ui.widget.Tree-Widget" "Text-Widget" "jazz.ui.widget.Text-Widget" "Note-Widget" "jazz.ui.widget.Note-Widget" "Moniker-Widget" "jazz.ui.widget.Moniker-Widget" "Moniker-Text-View" "jazz.ui.widget.Moniker-Text-View" "Entry-Widget" "jazz.ui.widget.Entry-Widget" "Combo-Widget" "jazz.ui.widget.Combo-Widget" "jazz.ui.view.Zoom-Combo" "Wallpaper-Stage" "jazz.ui.view.Wallpaper-Stage" "Wallpaper-Actions" "jazz.ui.view.Wallpaper-Actions" "View-Descriptor" "View" "jazz.ui.view.View" "Vertical-Line" "jazz.ui.view.Vertical-Line" "Tooltip-Text-View" "jazz.ui.view.Tooltip-Text-View" "Tooltip-Text" "jazz.ui.view.Tooltip-Text" "Tooltip-Label" "jazz.ui.view.Tooltip-Label" "Tooltip-Context" "jazz.ui.view.Tooltip-Context" "Toolbar" "jazz.ui.view.Toolbar" "Tool-Button" "jazz.ui.view.Tool-Button" "Toggle-Tool" "jazz.ui.view.Toggle-Tool" "Threeway-Checkbox" "jazz.ui.view.Threeway-Checkbox" "Tab-View" "jazz.ui.view.Tab-View" "Tab-Sheet" "jazz.ui.view.Tab-Sheet" "Status-Toolbar" "jazz.ui.view.Status-Toolbar" "Status-Label" "jazz.ui.view.Status-Label" "Stage-Border" "jazz.ui.view.Stage-Border" "Stage" "jazz.ui.view.Stage" "Splitter-View" "jazz.ui.view.Splitter-View" "Splitter" "jazz.ui.view.Splitter" "Separator-View" "jazz.ui.view.Separator-View" "Selectable" "jazz.ui.view.Selectable" "Scroller-View" "jazz.ui.view.Scroller-View" "Scrollbar" "jazz.ui.view.Scrollbar" "Renderer" "jazz.ui.view.Renderer" "Radio-Tool" "jazz.ui.view.Radio-Tool" "Radio-Button" "jazz.ui.view.Radio-Button" "Push-Tool" "jazz.ui.view.Push-Tool" "Push-Icon" "jazz.ui.view.Push-Icon" "Push-Combo" "jazz.ui.view.Push-Combo" "Push-Button" "jazz.ui.view.Push-Button" "Progress-Bar" "jazz.ui.view.Progress-Bar" "Pad-View" "jazz.ui.view.Pad-View" "Minibuffer-Toolbar" "jazz.ui.view.Minibuffer-Toolbar" "Line-View-Descriptor" "Line-View" "jazz.ui.view.Line-View" "Line-Surrogate" "jazz.ui.view.Line-Surrogate" "Justification-Domain" "Type-Domain" "Layout-View-Descriptor" "Layout-View" "jazz.ui.view.Layout-View" "Label-View" "jazz.ui.view.Label-View" "Label-Tool" "jazz.ui.view.Label-Tool" "Image-Tool" "jazz.ui.view.Image-Tool" "Horizontal-Line" "jazz.ui.view.Horizontal-Line" "Header-View-Descriptor" "Header-View" "jazz.ui.view.Header-View" "Header-Bar" "jazz.ui.view.Header-Bar" "Groupable" "jazz.ui.view.Groupable" "Group-Box" "jazz.ui.view.Group-Box" "Frame-Button" "jazz.ui.view.Frame-Button" "Entry-Combo-Text-View" "jazz.ui.view.Entry-Combo-Text-View" "Entry-Combo-Box" "jazz.ui.view.Entry-Combo-Box" "Drawing" "jazz.ui.view.Drawing" "Content-View-Descriptor" "Content-View" "jazz.ui.view.Content-View" "Base-Container" "Container" "jazz.ui.view.Container" "Connector-Surrogate" "jazz.ui.view.Connector-Surrogate" "Connector" "jazz.ui.view.Connector" "Command-Toolbar" "jazz.ui.view.Command-Toolbar" "Combo-View-Descriptor" "Combo-View" "jazz.ui.view.Combo-View" "Combo-Text-View" "jazz.ui.view.Combo-Text-View" "Combo-Text-Actions" "jazz.ui.view.Combo-Text-Actions" "Combo-Text" "jazz.ui.view.Combo-Text" "Combo-Button" "jazz.ui.view.Combo-Button" "Combo-Box" "jazz.ui.view.Combo-Box" "Color-Text-View" "jazz.ui.view.Color-Text-View" "Color-Picker" "jazz.ui.view.Color-Picker" "Color-Combo" "jazz.ui.view.Color-Combo" "Color-Button" "jazz.ui.view.Color-Button" "Chooser" "jazz.ui.view.Chooser" "Check-Box" "jazz.ui.view.Check-Box" "Border-View-Descriptor" "Border-View" "jazz.ui.view.Border-View" "Action-Icon" "jazz.ui.view.Action-Icon" "Tree-View" "jazz.ui.tree.Tree-View" "Tree-Row" "jazz.ui.tree.Tree-Row" "Tree-Path-Column" "jazz.ui.tree.Tree-Path-Column" "Tree-Path" "jazz.ui.tree.Tree-Path" "Tree-Node-Descriptor" "Tree-Node-Column" "jazz.ui.tree.Tree-Node-Column" "Tree-Node" "jazz.ui.tree.Tree-Node" "Tree-Label-Descriptor" "Tree-Label-Column" "jazz.ui.tree.Tree-Label-Column" "Tree-Label" "jazz.ui.tree.Tree-Label" "Tree-Image-Column" "jazz.ui.tree.Tree-Image-Column" "Tree-Image" "jazz.ui.tree.Tree-Image" "Tree-Highlight" "jazz.ui.tree.Tree-Highlight" "Tree-Header" "jazz.ui.tree.Tree-Header" "Tree-Embedded-Search-Text-View" "jazz.ui.tree.Tree-Embedded-Search-Text-View" "Tree-Embedded-Search-Text-Actions" "jazz.ui.tree.Tree-Embedded-Search-Text-Actions" "Tree-Drop-Target" "jazz.ui.tree.Tree-Drop-Target" "Tree-Drag-Source" "jazz.ui.tree.Tree-Drag-Source" "Tree-Column-Descriptor" "Tree-Column" "jazz.ui.tree.Tree-Column" "Tree-Data-View" "jazz.ui.tree.Tree-Data-View" "Tree-Data" "jazz.ui.tree.Tree-Data" "Tree-Actions" "jazz.ui.tree.Tree-Actions" "Table-Row" "jazz.ui.tree.Table-Row" "Grid-Tree-Column" "Grid-Tree" "jazz.ui.tree.grid" "Tools-Preferences" "jazz.ui.tool.Tools-Preferences" "Tool-View" "jazz.ui.tool.Tool-View" "Tool-Preferences-Descriptor" "Tool-Preferences" "jazz.ui.tool.Tool-Preferences" "View-Style" "jazz.ui.text.View-Style" "TextToXHTML-Exporter" "jazz.ui.text.TextToXHTML-Exporter" "Text-View-Descriptor" "Text-View" "jazz.ui.text.Text-View" "Text-Style-Combo" "jazz.ui.text.Text-Style-Combo" "Text-Style" "jazz.ui.text.Text-Style" "Text-Size-Combo" "jazz.ui.text.Text-Size-Combo" "Text-Palette" "jazz.ui.text.Text-Palette" "Text-Model" "jazz.ui.text.Text-Model" "Text-Mark" "jazz.ui.text.Text-Mark" "Text-Highlight" "jazz.ui.text.Text-Highlight" "Text-Format-Combo" "jazz.ui.text.Text-Format-Combo" "Text-Font-Combo" "jazz.ui.text.Text-Font-Combo" "Text-Explorer" "jazz.ui.text.Text-Explorer" "Text-Context-Menu" "jazz.ui.text.Text-Context-Menu" "Text-Combo" "jazz.ui.text.Text-Combo" "Text-Colorizer" "jazz.ui.text.Text-Colorizer" "Text-Color-Combo" "jazz.ui.text.Text-Color-Combo" "Text" "jazz.ui.text.Text" "Table-Tree-View" "jazz.ui.text.Table-Tree-View" "Table-Text-View" "jazz.ui.text.Table-Text-View" "Table-Cell" "jazz.ui.text.Table-Cell" "Table-Border" "jazz.ui.text.Table-Border" "Symbol-Completer" "jazz.ui.text.Symbol-Completer" "Style" "jazz.ui.text.Style" "Run" "jazz.ui.text.Run" "Ruler" "jazz.ui.text.Ruler" "Plain-Text-View" "jazz.ui.text.Plain-Text-View" "Plain-Formatted-Text-View" "jazz.ui.text.Plain-Formatted-Text-View" "Password-Text-View" "jazz.ui.text.Password-Text-View" "Paragraph" "jazz.ui.text.Paragraph" "Name-Text-View" "jazz.ui.text.Name-Text-View" "Line" "jazz.ui.text.Line" "Layout-Text-View" "jazz.ui.text.Layout-Text-View" "Info-Style" "jazz.ui.text.Info-Style" "Image-Style-Dialog" "jazz.ui.text.Image-Style-Dialog" "Image-Style" "jazz.ui.text.Image-Style" "Link-Style-Dialog" "jazz.ui.text.Link-Style-Dialog" "Link-Style" "jazz.ui.text.Link-Style" "Indicator" "jazz.ui.text.Indicator" "Formatted-Text-View" "jazz.ui.text.Formatted-Text-View" "Formatted-Text-Model" "jazz.ui.text.Formatted-Text-Model" "Formatted-Text-Actions" "jazz.ui.text.Formatted-Text-Actions" "Formatted-Text" "jazz.ui.text.Formatted-Text" "Format-Menu" "jazz.ui.text.Format-Menu" "Format" "jazz.ui.text.Format" "Filter-Text-View" "jazz.ui.text.Filter-Text-View" "Filterable" "jazz.ui.text.Filterable" "Explorer-Mark" "jazz.ui.text.Explorer-Mark" "Entry-Text-View" "jazz.ui.text.Entry-Text-View" "Date-Text-View" "jazz.ui.text.Date-Text-View" "Column-Menu" "jazz.ui.text.Column-Menu" "Code-Text-View" "jazz.ui.text.Code-Text-View" "Code-Text-Event" "jazz.ui.text.Code-Text-Event" "Code-Explorer" "jazz.ui.text.Code-Explorer" "Anchor-Style" "jazz.ui.text.Anchor-Style" "Code-Syntax" "jazz.ui.syntax.Code-Syntax" "Text-Syntax" "jazz.ui.syntax.Text-Syntax" "X11-Skin" "jazz.ui.skin.X11-Skin" "Windows-Skin" "jazz.ui.skin.Windows-Skin" "Tree-Look" "jazz.ui.skin.Tree-Look" "Toolbar-Look" "jazz.ui.skin.Toolbar-Look" "Tool-Look" "jazz.ui.skin.Tool-Look" "Text-Look" "jazz.ui.skin.Text-Look" "Statusbar-Look" "jazz.ui.skin.Statusbar-Look" "Stage-Look" "jazz.ui.skin.Stage-Look" "Splitter-Look" "jazz.ui.skin.Splitter-Look" "Skins" "jazz.ui.skin.Skins" "Skin" "jazz.ui.skin.Skin" "Scrollbar-Look" "jazz.ui.skin.Scrollbar-Look" "Menubar-Look" "jazz.ui.skin.Menubar-Look" "Menu-Look" "jazz.ui.skin.Menu-Look" "Mac-Skin" "jazz.ui.skin.Mac-Skin" "Look" "jazz.ui.skin.Look" "Jazz-Skin" "jazz.ui.skin.Jazz-Skin" "Header-Look" "jazz.ui.skin.Header-Look" "Group-Look" "jazz.ui.skin.Group-Look" "Docked-Look" "jazz.ui.skin.Docked-Look" "Default-Skin" "jazz.ui.skin.Default-Skin" "Border-Look" "jazz.ui.skin.Border-Look" "Selection-Provider" "jazz.ui.selection.Selection-Provider" "Selection-Manager" "jazz.ui.selection.Selection-Manager" "User-Search-View" "jazz.ui.search.User-Search-View" "User-Search-Preferences" "jazz.ui.search.User-Search-Preferences" "User-Search" "jazz.ui.search.User-Search" "Text-Search-View" "jazz.ui.search.Text-Search-View" "Text-Search-Result" "jazz.ui.search.Text-Search-Result" "Text-Search-Preferences" "jazz.ui.search.Text-Search-Preferences" "Text-Search" "jazz.ui.search.Text-Search" "Search-View-Preferences" "jazz.ui.search.Search-View-Preferences" "Search-View" "jazz.ui.search.Search-View" "Search-Results-Tree-Actions" "Search-Results" "jazz.ui.search.Search-Results" "Search-Resultset" "jazz.ui.search.Search-Resultset" "Search-Result" "jazz.ui.search.Search-Result" "Replace" "jazz.ui.search.Replace" "Navigable-Results" "jazz.ui.search.Navigable-Results" "Search-Preferences" "jazz.ui.search.Search-Preferences" "Search-Menu" "jazz.ui.search.Search-Menu" "Search-Manager-Actions" "jazz.ui.search.Search-Manager-Actions" "Search-Manager" "jazz.ui.search.Search-Manager" "Search" "jazz.ui.search.Search" "Reference-Search-Result" "jazz.ui.search.Reference-Search-Result" "Projects-Search-View" "jazz.ui.search.Projects-Search-View" "Projects-Search-Preferences" "jazz.ui.search.Projects-Search-Preferences" "Projects-Search" "jazz.ui.search.Projects-Search" "History-Search-Item" "jazz.ui.search.History-Search-Item" "File-Search-Result" "jazz.ui.search.File-Search-Result" "Directories-Search-View" "jazz.ui.search.Directories-Search-View" "Directories-Search-Preferences" "jazz.ui.search.Directories-Search-Preferences" "Directories-Search" "jazz.ui.search.Directories-Search" "Definition-Search-Result" "jazz.ui.search.Definition-Search-Result" "Printer-Job" "windows" "cond" "jazz.ui.print.Printer-Job" "Print-Job" "jazz.ui.print.Print-Job" "Preview-Workspace" "jazz.ui.print.Preview-Workspace" "Zoom-Combo" "Preview-Toolbar" "jazz.ui.print.Preview-Toolbar" "Preview-Status" "jazz.ui.print.Preview-Status" "Preview-Pane-Actions" "jazz.ui.print.Preview-Pane-Actions" "Preview-Pane" "jazz.ui.print.Preview-Pane" "Preview-Page" "jazz.ui.print.Preview-Page" "Preview-Job" "jazz.ui.print.Preview-Job" "Page-Workspace" "jazz.ui.print.Page-Workspace" "Page-Toolbar" "jazz.ui.print.Page-Toolbar" "Page-Text-View" "jazz.ui.print.Page-Text-View" "Page-Text-Palette" "jazz.ui.print.Page-Text-Palette" "Page-Status" "jazz.ui.print.Page-Status" "Page-Setup" "jazz.ui.print.Page-Setup" "Page-Header" "jazz.ui.print.Page-Header" "Page-Footer" "jazz.ui.print.Page-Footer" "Page-Editor" "jazz.ui.print.Page-Editor" "Page-Document" "jazz.ui.print.Page-Document" "Page-Content" "jazz.ui.print.Page-Content" "Wallpaper-Configuration" "Wallpaper-Preferences" "jazz.ui.preference.wallpaper" "View-Actions" "jazz.ui.preference.View-Actions" "Tree-Preferences" "jazz.ui.preference.Tree-Preferences" "Toolbar-Preferences" "jazz.ui.preference.Toolbar-Preferences" "Text-Style-Preferences" "jazz.ui.preference.Text-Style-Preferences" "Text-Preferences-Descriptor" "Text-Preferences" "jazz.ui.preference.Text-Preferences" "Text-Actions" "jazz.ui.preference.Text-Actions" "Styles-Preferences" "jazz.ui.preference.Styles-Preferences" "Style-Preferences" "jazz.ui.preference.Style-Preferences" "Status-Preferences" "jazz.ui.preference.Status-Preferences" "Stage-Preferences" "jazz.ui.preference.Stage-Preferences" "Splitter-Preferences" "jazz.ui.preference.Splitter-Preferences" "Shortcut-Viewer-Actions" "jazz.ui.preference.Shortcut-Viewer-Actions" "Shortcut-Viewer" "jazz.ui.preference.Shortcut-Viewer" "Shortcut-Chooser" "jazz.ui.preference.Shortcut-Chooser" "Prop-Text-Preferences" "jazz.ui.preference.Prop-Text-Preferences" "Print-Preferences" "jazz.ui.preference.Print-Preferences" "Preferences-Manager-Preferences" "jazz.ui.preference.Preferences-Manager-Preferences" "Preferences-Manager" "jazz.ui.preference.Preferences-Manager" "Preferences-Descriptor" "Preferences" "jazz.ui.preference.Preferences" "Plain-Text-Preferences" "jazz.ui.preference.Plain-Text-Preferences" "Palette-Preferences" "jazz.ui.preference.Palette-Preferences" "Pad-Preferences" "jazz.ui.preference.Pad-Preferences" "Minibuffer-Preferences" "jazz.ui.preference.Minibuffer-Preferences" "Menubar-Preferences" "jazz.ui.preference.Menubar-Preferences" "Mainbar-Preferences" "jazz.ui.preference.Mainbar-Preferences" "Interface-Preferences" "jazz.ui.preference.Interface-Preferences" "Frame-Preferences" "jazz.ui.preference.Frame-Preferences" "Formats-Preferences" "jazz.ui.preference.Formats-Preferences" "Format-Preferences" "jazz.ui.preference.Format-Preferences" "Fonts-Preferences" "jazz.ui.preference.Fonts-Preferences" "Font-Preferences" "jazz.ui.preference.Font-Preferences" "Figure-Preferences-Descriptor" "Figure-Preferences" "jazz.ui.preference.Figure-Preferences" "Favorite-Configuration" "Favorites-Preferences" "jazz.ui.preference.favorites" "Exemplars-Preferences-Descriptor" "Exemplars-Preferences" "jazz.ui.preference.Exemplars-Preferences" "Exemplar-Preferences-Descriptor" "Exemplar-Preferences" "jazz.ui.preference.Exemplar-Preferences" "Docked-Preferences" "jazz.ui.preference.Docked-Preferences" "Completions-Domain" "jazz.ui.preference.Completions-Domain" "Commandbar-Preferences" "jazz.ui.preference.Commandbar-Preferences" "Colors-Preferences" "jazz.ui.preference.Colors-Preferences" "Color-Preferences" "jazz.ui.preference.Color-Preferences" "Code-Text-Preferences-Descriptor" "Code-Text-Preferences" "jazz.ui.preference.Code-Text-Preferences" "Code-Text-Actions" "jazz.ui.preference.Code-Text-Actions" "BindingsByShortcuts-Tree" "BindingsByActions-Tree" "Bindings-Tree" "jazz.ui.preference.Bindings-Tree" "Bindings-Manager" "jazz.ui.preference.Bindings-Manager" "Alias-Configuration" "Aliases-Preferences" "jazz.ui.preference.aliases" "Outline-View-Old" "jazz.ui.outline.Outline-View-Old" "Outline-View-Descriptor" "Outline-View" "jazz.ui.outline.Outline-View" "Outline-Row" "jazz.ui.outline.Outline-Row" "Outline-Model" "jazz.ui.outline.Outline-Model" "Workspace-Menu" "jazz.ui.menu.Workspace-Menu" "Window-Menu" "jazz.ui.menu.Window-Menu" "Window-Advanced-Menu" "jazz.ui.menu.Window-Advanced-Menu" "Separator-Item" "jazz.ui.menu.Separator-Item" "Recorder-Menu" "jazz.ui.menu.Recorder-Menu" "Radio-Item" "jazz.ui.menu.Radio-Item" "Menubar-Actions" "jazz.ui.menu.Menubar-Actions" "Menubar" "jazz.ui.menu.Menubar" "Menu-Actions" "jazz.ui.menu.Menu-Actions" "Menu" "jazz.ui.menu.Menu" "Label-Item-Descriptor" "Label-Item" "jazz.ui.menu.Label-Item" "Item" "jazz.ui.menu.Item" "File-Menu" "jazz.ui.menu.File-Menu" "File-Base-Menu" "jazz.ui.menu.File-Base-Menu" "Edit-Menu" "jazz.ui.menu.Edit-Menu" "Edit-Base-Menu" "jazz.ui.menu.Edit-Base-Menu" "Context-Menu" "jazz.ui.menu.Context-Menu" "Check-Item" "jazz.ui.menu.Check-Item" "Localized-Domain" "jazz.ui.locale.Localized-Domain" "Runtime-Listener" "jazz.ui.listener.Runtime-Listener" "Listener" "jazz.ui.listener.Listener" "Snap-Layout" "jazz.ui.layout.Snap-Layout" "Split-Layout" "jazz.ui.layout.Split-Layout" "Separator" "jazz.ui.layout.Separator" "Layout" "jazz.ui.layout.Layout" "Flow-Layout" "jazz.ui.layout.Flow-Layout" "Fit-Layout" "jazz.ui.layout.Fit-Layout" "Figure-Descriptor" "Figure" "jazz.ui.layout.Figure" "Border-Layout" "jazz.ui.layout.Border-Layout" "Image-View-Descriptor" "Image-View" "jazz.ui.image.Image-View" "Image-Browser" "jazz.ui.image.Image-Browser" "Toolbar-Host" "jazz.ui.hosting.Toolbar-Host" "Palette-Host" "jazz.ui.hosting.Palette-Host" "Menu-Host" "jazz.ui.hosting.Menu-Host" "Internal-Frame-Host" "jazz.ui.hosting.Internal-Frame-Host" "Host-View" "jazz.ui.hosting.Host-View" "Guest-Preferences" "jazz.ui.hosting.Guest-Preferences" "Guest-Actions" "jazz.ui.hosting.Guest-Actions" "Frame-Host" "jazz.ui.hosting.Frame-Host" "Focus-Container" "jazz.ui.hosting.Focus-Container" "External-Frame-Host" "jazz.ui.hosting.External-Frame-Host" "Docked-Host" "jazz.ui.hosting.Docked-Host" "Dialog-Host" "jazz.ui.hosting.Dialog-Host" "History-Menu" "jazz.ui.history.History-Menu" "History-File-Item" "jazz.ui.history.History-File-Item" "History-Document-Item" "jazz.ui.history.History-Document-Item" "Selection-Handler" "jazz.ui.handler.Selection-Handler" "Text-Event" "jazz.ui.event.Text-Event" "Selection-Event" "jazz.ui.event.Selection-Event" "Selected-Event" "jazz.ui.event.Selected-Event" "Runtime-Event" "jazz.ui.event.Runtime-Event" "Print-Event" "jazz.ui.event.Print-Event" "Paint-Event" "jazz.ui.event.Paint-Event" "Mouse-Event" "jazz.ui.event.Mouse-Event" "Keyboard-Event" "jazz.ui.event.Keyboard-Event" "Focus-Event" "jazz.ui.event.Focus-Event" "Edition-Event" "jazz.ui.event.Edition-Event" "Draw-Event" "jazz.ui.event.Draw-Event" "Cursor-Event" "jazz.ui.event.Cursor-Event" "Capture-Event" "jazz.ui.event.Capture-Event" "Action-Event" "jazz.ui.event.Action-Event" "Entity-Parcel" "jazz.ui.entity.Entity-Parcel" "Entity-Menu" "jazz.ui.entity.Entity-Menu" "Entities-Tree-Actions" "jazz.ui.entity.Entities-Tree-Actions" "Entities-Tree" "jazz.ui.entity.Entities-Tree" "Entities-Controller" "jazz.ui.entity.Entities-Controller" "Wipe-Effect" "jazz.ui.effect.Wipe-Effect" "Effect" "jazz.ui.effect.Effect" "Documents-Preferences" "jazz.ui.document.Documents-Preferences" "Document-Preferences-Descriptor" "Document-Preferences" "jazz.ui.document.Document-Preferences" "Document-Moniker" "jazz.ui.document.Document-Moniker" "Document-Controller" "jazz.ui.document.Document-Controller" "Document" "jazz.ui.document.Document" "Drop-Target" "jazz.ui.dnd.Drop-Target" "Drop-Event" "jazz.ui.dnd.Drop-Event" "Drag-Source" "jazz.ui.dnd.Drag-Source" "DnD" "jazz.ui.dnd.DnD" "User-Reporter" "jazz.ui.dialog.User-Reporter" "Text-File-Request" "jazz.ui.dialog.Text-File-Request" "Text-Request" "jazz.ui.dialog.Text-Request" "Symbol-Request" "jazz.ui.dialog.Symbol-Request" "String-Request" "jazz.ui.dialog.String-Request" "Progress-Reporter" "jazz.ui.dialog.Progress-Reporter" "Pathname-Request" "jazz.ui.dialog.Pathname-Request" "Password-Request" "jazz.ui.dialog.Password-Request" "NewFile-Request" "jazz.ui.dialog.NewFile-Request" "Message-Box" "jazz.ui.dialog.Message-Box" "List-Request" "jazz.ui.dialog.List-Request" "File-Request" "jazz.ui.dialog.File-Request" "Directory-Request" "jazz.ui.dialog.Directory-Request" "Directories-Request" "jazz.ui.dialog.Directories-Request" "Dialog-Actions" "jazz.ui.dialog.Dialog-Actions" "Dialog" "jazz.ui.dialog.Dialog" "Date-Request" "jazz.ui.dialog.Date-Request" "Color-Request" "jazz.ui.dialog.Color-Request" "Context-View" "jazz.ui.context.Context-View" "Context-Provider" "jazz.ui.context.Context-Provider" "Context-Manager" "jazz.ui.context.Context-Manager" "Context-Combo" "jazz.ui.context.Context-Combo" "Context-Action" "jazz.ui.context.Context-Action" "Search-Mode-Actions" "jazz.ui.command.Search-Mode-Actions" "Highlight-Mode-Actions" "jazz.ui.command.Highlight-Mode-Actions" "Find-Mode-Actions" "jazz.ui.command.Find-Mode-Actions" "Extended-Mode-Actions" "jazz.ui.command.Extended-Mode-Actions" "Execute-Mode-Actions" "jazz.ui.command.Execute-Mode-Actions" "Command-Mode" "Command-Text-View" "jazz.ui.command.Command-Text-View" "Command-Text-Preferences" "jazz.ui.command.Command-Text-Preferences" "Command-Shell" "jazz.ui.command.Command-Shell" "Activity-Reporter" "jazz.ui.activity.Activity-Reporter" "Activity-Manager" "jazz.ui.activity.Activity-Manager" "Activity" "jazz.ui.activity.Activity" "Activities-Manager" "jazz.ui.activity.Activities-Manager" "Shortcut" "jazz.ui.action.Shortcut" "Orphaned-Actions" "jazz.ui.action.Orphaned-Actions" "Figure-Mover" "jazz.ui.action.Figure-Mover" "Bindings-Preferences" "jazz.ui.action.Bindings-Preferences" "Bindings" "jazz.ui.action.Bindings" "Actions-Descriptor" "Actions" "jazz.ui.action.Actions" "Actionable" "jazz.ui.action.Actionable" "Action-Item" "jazz.ui.action.Action-Item" "Action" "autoload" "jazz.ui.action.Action")}}})
"carbon"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "clipboard" "platform" "carbon.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.clipboard.platform.carbon" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.platform")}
      {Lisp-Entry "initialize-clipboard" definition (package) () #f #f 48 21 48 41 ()}
      {Lisp-Entry "internal-clipboard" definition () () #f #f 52 12 52 30 ()}
      {Lisp-Entry "get-clipboard-text" definition (public) ("(format: format #f)") #f #f 55 20 55 38 ("internal-clipboard" "format" "format:")}
      {Lisp-Entry "set-clipboard-text" definition (public) ("text" "(format: format #f)") #f #f 59 20 59 38 ("internal-clipboard" "set!" "format" "format:" "text")}
      {Lisp-Entry "register-clipboard-format" definition (public undocumented) ("name" "format") #f #f 63 33 63 58 ("Formats" "table-set!" "RegisterClipboardFormat" "id" "let" "format" "name")}
      {Lisp-Entry "clipboard-format-available?" definition (public undocumented) ("format") #f #f 69 33 69 60 ("available-clipboard-formats" "member?" "error" "Formats" "table-ref" "or" "get-format" "define" "format")}
      {Lisp-Entry "available-clipboard-formats" definition (public undocumented) () #f #f 79 33 79 60 ("get-output" "get-output~" "put" "put~" "/=" "when" "EnumClipboardFormats" "format" "0" "previous" "iter" "List-Factory" "new" "formats" "let" "lambda" "with-opened-clipboard")}
      {Lisp-Entry "mouse-select-copy" definition (package) ("proc") #f #f 98 21 98 38 ("proc")}
      {Lisp-Entry "middle-mouse-paste" definition (package) ("proc") #f #f 102 21 102 39 ("proc")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "platform" "carbon.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.platform.carbon" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui" "jazz.system" "jazz.platform" "jazz.library")}
      {Lisp-Entry "choose-file" definition (public) ("(title: title #f)" "(directory: directory #f)" "(filenames: filenames #f)" "(extensions: extensions #f)" "(multiple-selection?: multiple-selection? #f)" "(anchors: anchors #f)") #f #f 53 20 53 31 ("host-title:" "File-Request" "get-modal" "anchors" "anchors:" "multiple-selection?" "multiple-selection?:" "extensions" "extensions:" "filenames" "filenames:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-new-file" definition (public) ("(title: title #f)" "(directory: directory #f)" "(filenames: filenames #f)" "(extensions: extensions #f)" "(initial-filename: initial-filename #f)" "(default-extension: default-extension #f)" "(anchors: anchors #f)") #f #f 73 20 73 35 ("host-title:" "NewFile-Request" "get-modal" "anchors" "anchors:" "default-extension" "default-extension:" "initial-filename" "initial-filename:" "extensions" "extensions:" "filenames" "filenames:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-directory" definition (public) ("(title: title #f)" "(directory: directory #f)" "(anchors: anchors #f)") #f #f 95 20 95 36 ("host-title:" "Directory-Request" "get-modal" "anchors" "anchors:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-font" definition (public) ("(initial-font: initial-font #f)" "(initial-color: initial-color #f)") #f #f 109 20 109 31 ("choose-font" "unimplemented" "initial-color" "initial-color:" "initial-font" "initial-font:")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "platform" "carbon.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.print.platform.carbon" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.dialog" "jazz.ui")}
      {Lisp-Entry "platform-print-document" definition (package) ("view") #f #f 49 21 49 44 ("view")}
      {Lisp-Entry "platform-print-picture" definition (package) ("view") #f #f 52 21 52 43 ("view")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "ui" "resizer" "platform" "carbon.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.resizer.platform.carbon" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.platform")}
      {Lisp-Entry "Part-Cursor" constant () () #f #f 43 10 43 21 ()}}}
  {Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "platform" "carbon.jazz"} 244285115. jazz
    {Lisp-Entry "jazz.ui.window.platform.carbon" module (protected) () #f #f 37 18 37 48 ("process-control-message" "set-process-control-message" "process-window-message" "set-process-window-message" "jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("time" "jazz.ui" "jazz.system" "jazz.platform.carbon" "jazz.platform.cairo" "jazz.platform" "jazz.library" "jazz.io" "jazz.graphic")}
      {Lisp-Entry "unprocessed" definition (public) () #f #f 51 19 51 30 ("unprocessed")}
      {Lisp-Entry "processed" definition (public) () #f #f 52 19 52 28 ("processed")}
      {Lisp-Entry "desktop" definition () () #f #f 55 12 55 19 ()}
      {Lisp-Entry "processed-result" definition () ("return") #f #f 58 13 58 29 ("cadr" "0" "cdr" "null?" "processed" "car" "eq?" "pair?" "and" "if" "return")}
      {Lisp-Entry "is-window-HIView?" definition () ("window") #f #f 66 13 66 30 ("Desktop" "Toplevel" "is?" "or" "not" "window")}
      {Lisp-Entry "Windows-Table" definition (public) () #f #f 76 19 76 32 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "Window-Title-Table" definition (public) () #f #f 80 19 80 37 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "get-window" definition (public inline) ("hwnd") #f #f 84 27 84 37 ("Windows-Table" "table-ref" "foreign-address" "foreign?" "if" "let" "hwnd")}
      {Lisp-Entry "set-window" definition (public inline) ("hwnd" "window") #f #f 89 27 89 37 ("foreign-address" "Windows-Table" "table-set!" "window" "hwnd")}
      {Lisp-Entry "platform-get-window-handle-title" definition (public inline) ("handle") #f #f 93 27 93 59 ("Window-Title-Table" "table-ref" "handle")}
      {Lisp-Entry "set-window-title" definition (public inline) ("handle" "title") #f #f 97 27 97 43 ("Window-Title-Table" "table-set!" "title" "handle")}
      {Lisp-Entry "window-parent" definition (package) ("window") #f #f 101 21 101 34 ("get-handle" "get-handle~" "if" "get-parent" "get-parent~" "parent" "let" "window")}
      {Lisp-Entry "window-default-parent" definition (package) ("window") #f #f 108 21 108 42 ("else" "get-toplevel" "Popup" "typecase" "window")}
      {Lisp-Entry "prepare-handle" definition (package) ("window" "rest") #f #f 114 21 114 35 ("InstallControlEventHandler" "HIViewGetContent" "handle" "create-window-handle" "window-handle" "let*" "create-HIView-handle" "is-window-HIView?" "if" "rest" "window")}
      {Lisp-Entry "create-HIView-handle" definition () ("window" "rest") #f #f 123 13 123 33 ("InstallControlEventHandler" "500.0" "0.0" "HIViewSetFrame" "0" "kHIViewFeatureAllowsSubviews" "HIViewChangeFeatures" "HIViewAddSubview" "HIViewCreate" "new-handle" "window-parent" "parent" "let*" "rest" "window")}
      {Lisp-Entry "create-window-handle" definition () ("window" "rest") #f #f 133 13 133 33 ("fxfloor" "kWindowStructureRgn" "WindowSetBounds" "HIWindowGetAvailablePositioningBounds" "h" "w" "y" "x" "receive" "desktop" "set!" "Desktop" "is?" "when" "InstallWindowEventHandler" "500" "0" "kWindowCompositingAttribute" "kWindowLiveResizeAttribute" "kWindowStandardHandlerAttribute" "kWindowStandardDocumentAttributes" "bitwise-ior" "kDocumentWindowClass" "CreateNewWindow" "handle" "let" "rest" "window")}
      {Lisp-Entry "destroy-window" definition (package) ("handle") #f #f 151 21 151 35 ("HIViewGetWindow" "DestroyWindow" "DestroyView" "is-window-HIView?" "if" "focus-lose" "focus-lose~" "platform-get-focus" "=" "when" "get-window" "window" "let" "handle")}
      {Lisp-Entry "dispatch-message" definition () ("window" "msg") #f #f 161 13 161 29 ("process-window-message" "msg" "window")}
      {Lisp-Entry "setup-events" definition (package) () #f #f 170 21 170 33 ()}
      {Lisp-Entry "process-messages-single-threaded" definition (package) ("thunk") #f #f 179 21 179 53 ("RunApplicationEventLoop" "thunk")}
      {Lisp-Entry "process-messages-multi-threaded" definition (package) () #f #f 183 21 183 52 ("message-pump" "new-thread" "RunApplicationEventLoop" "process" "define")}
      {Lisp-Entry "show-window" definition (package) ("handle") #f #f 190 21 190 32 ("SelectWindow" "HIViewGetWindow" "ShowWindow" "HIViewSetVisible" "is-window-HIView?" "Desktop" "get-window" "is?" "if" "handle")}
      {Lisp-Entry "show-maximized" definition (package) ("handle") #f #f 200 21 200 35 ("show-window" "handle")}
      {Lisp-Entry "show-restored" definition (package) ("handle") #f #f 204 21 204 34 ("show-window" "handle")}
      {Lisp-Entry "hide-window" definition (package) ("handle") #f #f 208 21 208 32 ("HIViewGetWindow" "HideWindow" "HIViewSetVisible" "get-window" "is-window-HIView?" "if" "handle")}
      {Lisp-Entry "bring-window-to-top" definition (package) ("handle") #f #f 214 21 214 40 ("platform-bring-window-to-front" "handle")}
      {Lisp-Entry "window-state" definition (package) ("handle") #f #f 218 21 218 33 ("restored" "handle")}
      {Lisp-Entry "set-window-placement" definition (package) ("handle" "position" "size") #f #f 222 21 222 41 ("platform-set-window-size" "platform-set-position" "size" "position" "handle")}
      {Lisp-Entry "minimize-window" definition (package) ("handle") #f #f 227 21 227 36 ("minimize-window" "unimplemented" "handle")}
      {Lisp-Entry "maximize-window" definition (package) ("handle") #f #f 231 21 231 36 ("maximize-window" "unimplemented" "handle")}
      {Lisp-Entry "restore-window" definition (package) ("handle") #f #f 235 21 235 35 ("restore-window" "unimplemented" "handle")}
      {Lisp-Entry "platform-erase-background" definition (package) ("handle") #f #f 239 21 239 46 ("platform-erase-background" "unimplemented" "handle")}
      {Lisp-Entry "convert-key" definition () ("char" "keycode") #f #f 243 13 243 24 ("else" "Down" "Top" "Right" "Left" "Tab" "Space" "Return" "Backspace" "Escape" "F8" "100" "F7" "98" "F6" "97" "F5" "96" "F4" "118" "F3" "99" "F2" "120" "F1" "122" "case" "keycode" "char")}
      {Lisp-Entry "current-mouse-x" definition () () #f #f 266 12 266 27 ("0")}
      {Lisp-Entry "current-mouse-y" definition () () #f #f 267 12 267 27 ("0")}
      {Lisp-Entry "process-window-message" definition () ("handler" "event" "userdata") #f #f 270 13 270 35 ("get-current-focus" "call-key-press" "call-key-press~" "char?" "and" "Space" "eq?" "Shortcut" "new" "get-application" "dispatch-shortcut" "dispatch-shortcut~" "not" ":alt" "optionKeyBit" ":control" "controlKeyBit" ":shift" "cons" "shiftKeyBit" "bit-set?" "when" "mods" "convert-key" "eventKeyUnicode" "unicode" "unmodifiedKey" "unmodified" "eventKeyMods" "state" "eventKeyboardType" "keyboard" "eventKeyCode" "keycode" "kEventRawKeyDown" "kEventClassKeyboard" "mouse-down" "mouse-down~" "kEventMouseDown" "mouse-up" "mouse-up~" "kEventMouseUp" "flonum->fixnum" "mouse-move" "mouse-move~" "HIViewGetRoot" "convertCoordinates" "if" "get-window" "win" "HIViewForPoint" "view" "let*" "current-mouse-y" "current-mouse-x" "set!" "convertPointToGlobal" "glo-y" "glo-x" "eventMouseLocation" "y" "x" "receive" "eventWindowRef" "window" "kEventMouseMoved" "kEventClassMouse" "eventNotHandledErr" "else" "kEventWindowBoundsChanged" "noErr" "QuitApplicationEventLoop" "kEventWindowClose" "kEventClassWindow" "=" "cond" "GetEventKind" "type" "GetEventClass" "class" "let" "userdata" "event" "handler")}
      {Lisp-Entry "process-control-message" definition () ("handler" "event" "userdata") #f #f 343 13 343 36 ("eventNotHandledErr" "else" "call-position-change" "call-position-change~" "flonum->fixnum" "restored" "call-size-change" "call-size-change~" "show-window" "Docked-Host" "is?" "when" "HIViewGetBounds" "height" "width" "top" "left" "receive" "kEventControlBoundsChanged" "noErr" "eventControlRgn" "rect:" "Region" "new" "get-window" "paint" "paint~" "EventCGContext" "context" "kEventControlDraw" "=" "cond" "void*->HIViewRef" "handle" "GetEventKind" "type" "let" "userdata" "event" "handler")}
      {Lisp-Entry "get-toplevel-hwnd" definition () () #f #f 368 13 368 30 ("get-handle" "get-handle~" "when" "get-toplevel" "toplevel" "let")}
      {Lisp-Entry "set-capture" definition () ("handle") #f #f 379 13 379 24 ("handle")}
      {Lisp-Entry "unset-capture" definition (public) () #f #f 383 20 383 33 ()}
      {Lisp-Entry "with-platform-painting" definition (package) ("window" "platform-data" "proc") #f #f 387 21 387 43 ("close" "close~" "unwind-protect" "get-height" "get-height~" "get-width" "get-width~" "cairo_quartz_surface_create_for_cg_context" "Surface" "new" "surface" "car" "context" "let*" "proc" "platform-data" "window")}
      {Lisp-Entry "get-window-surface" definition (public) ("window") #f #f 395 20 395 38 ("get-height" "get-height~" "get-width" "get-width~" "get-handle" "get-handle~" "cairo_xlib_surface_create" "XDefaultVisual" "visual" "x11-default-display" "XDefaultScreen" "screen-no" "let*" "get-window-surface" "unimplemented" "window")}
      {Lisp-Entry "set-alpha-blending" definition () ("handle" "n") #f #f 403 13 403 31 ("RDW_INVALIDATE" "RDW_ERASE" "bitwise-ior" "NULL" "RedrawWindow" "LWA_ALPHA" "0" "SetLayeredWindowAttributes" "set-layered?" "n" "handle")}
      {Lisp-Entry "track-mouse-leave" definition (public) ("handle") #f #f 416 20 416 37 ("handle")}
      {Lisp-Entry "cancel-mouse-leave-tracking" definition (public) ("handle") #f #f 420 20 420 47 ("handle")}
      {Lisp-Entry "platform-set-parent" definition (package) ("handle" "parent") #f #f 429 21 429 40 ("get-handle" "get-handle~" "HIViewAddSubview" "HIViewRemoveFromSuperview" "HIViewGetSuperview" "when" "parent" "handle")}
      {Lisp-Entry "platform-get-first-child" definition (package) ("handle") #f #f 435 21 435 45 ("XGetChildHandle" "0" "=" "if" "x11-default-display" "XNumberOfChildren" "num-of-children" "let" "platform-get-first-child" "unimplemented" "handle")}
      {Lisp-Entry "platform-get-first-visible-child" definition (package) ("handle") #f #f 444 21 444 53 ("1" "+" "platform-is-window-visible?" "XGetChildHandle" "child-handle" "n" "loop" "0" "=" "if" "x11-default-display" "XNumberOfChildren" "num-of-children" "let" "platform-get-first-visible-child" "unimplemented" "handle")}
      {Lisp-Entry "platform-is-window-visible?" definition (package) ("handle") #f #f 459 21 459 48 ("IsViewable" "XWindowAttributes-map_state-ref" "=" "x11-default-display" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "let" "platform-is-window-visible?" "unimplemented" "handle")}
      {Lisp-Entry "acquire-point" definition (public) ("to-handle" "from-handle" "shape") #f #f 467 20 467 33 ("flonum->fixnum" "Point" "new" "fixnum->flonum" "convertCoordinates" "receive" "get-v" "get-v~" "y" "get-h" "get-h~" "x" "let" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "acquire-rect" definition (public) ("to-handle" "from-handle" "shape") #f #f 474 20 474 32 ("RECT->rect" "2" "RECT->POINTS" "MapWindowPoints" "rect->RECT" "acquired" "let" "acquire-rect" "unimplemented" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "platform-get-position" definition (package) ("handle" "parent-handle") #f #f 482 21 482 42 ("flonum->fixnum" "Point" "new" "platform-get-system-rect" "height" "width" "top" "left" "receive" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-position" definition (package) ("handle" "pos") #f #f 487 21 487 42 ("kWindowContentRgn" "HIViewGetWindow" "WindowSetBounds" "fixnum->flonum" "HIViewSetFrame" "get-window" "is-window-HIView?" "if" "get-v" "get-v~" "get-h" "get-h~" "let" "platform-get-system-rect" "height" "width" "top" "left" "receive" "pos" "handle")}
      {Lisp-Entry "platform-get-size" definition (package) ("handle") #f #f 496 21 496 38 ("flonum->fixnum" "Dimension" "new" "platform-get-system-rect" "height" "width" "top" "left" "receive" "handle")}
      {Lisp-Entry "platform-get-window-size" definition (package) ("handle") #f #f 501 21 501 45 ("platform-get-size" "handle")}
      {Lisp-Entry "platform-get-system-rect" definition (package) ("handle") #f #f 505 21 505 45 ("kWindowContentRgn" "HIViewGetWindow" "WindowGetBounds" "else" "HIViewGetFrame" "get-window" "is-window-HIView?" "cond" "handle")}
      {Lisp-Entry "platform-set-window-size" definition (package) ("handle" "size") #f #f 512 21 512 45 ("kWindowContentRgn" "HIViewGetWindow" "WindowSetBounds" "fixnum->flonum" "HIViewSetFrame" "get-window" "is-window-HIView?" "if" "get-height" "get-height~" "get-width" "get-width~" "let" "platform-get-system-rect" "height" "width" "top" "left" "receive" "size" "handle")}
      {Lisp-Entry "platform-set-position-size" definition (package) ("handle" "pos" "size") #f #f 521 21 521 47 ("get-height" "get-height~" "get-width" "get-width~" "get-v" "get-v~" "get-h" "get-h~" "x11-default-display" "XMoveResizeWindow" "platform-set-position-size" "unimplemented" "size" "pos" "handle")}
      {Lisp-Entry "platform-get-rect" definition (package) ("handle" "parent-handle") #f #f 527 21 527 38 ("+" "Rect" "new" "platform-get-system-rect" "height" "width" "top" "left" "receive" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-rect" definition (package) ("handle" "rect") #f #f 532 21 532 38 ("SWP_NOACTIVATE" "SWP_NOZORDER" "bitwise-ior" "rect-height" "rect-width" "get-top" "get-top~" "get-left" "get-left~" "NULL" "SetWindowPos" "platform-set-rect" "unimplemented" "rect" "handle")}
      {Lisp-Entry "platform-get-bounds" definition (package) ("handle") #f #f 538 21 538 40 ("RECT-free" "RECT-bottom-ref" "RECT-right-ref" "RECT-top-ref" "RECT-left-ref" "Rect" "new" "prog1" "2" "NULL" "MapWindowPoints" "GetWindowRect" "RECT-make" "rect" "let" "platform-get-bounds" "unimplemented" "handle")}
      {Lisp-Entry "platform-mouse-position" definition (package) () #f #f 548 21 548 44 ("current-mouse-y" "current-mouse-x" "Point" "new")}
      {Lisp-Entry "platform-window-from-point" definition (package) ("point") #f #f 552 21 552 47 ("POINT-free" "WindowFromPoint" "prog1" "get-v" "get-v~" "POINT-y-set!" "get-h" "get-h~" "POINT-x-set!" "POINT-make" "pt" "let" "point")}
      {Lisp-Entry "platform-child-window-from-point" definition (package) ("handle" "point") #f #f 562 21 562 53 ("POINT-free" "CWP_SKIPTRANSPARENT" "CWP_SKIPDISABLED" "CWP_SKIPINVISIBLE" "bitwise-ior" "ChildWindowFromPointEx" "prog1" "get-v" "get-v~" "POINT-y-set!" "get-h" "get-h~" "POINT-x-set!" "POINT-make" "pt" "let" "point" "handle")}
      {Lisp-Entry "platform-move-window" definition (package) ("handle" "x" "y" "cx" "cy") #f #f 572 21 572 41 ("MoveWindow" "platform-move-window" "unimplemented" "cy" "cx" "y" "x" "handle")}
      {Lisp-Entry "platform-window-enabled?" definition (package) ("handle") #f #f 578 21 578 45 ("IsWindowEnabled" "platform-window-enabled?" "unimplemented" "handle")}
      {Lisp-Entry "platform-enable-window" definition (package) ("handle") #f #f 584 21 584 43 ("platform-enable-window" "warn-unimplemented" "handle")}
      {Lisp-Entry "platform-disable-window" definition (package) ("handle") #f #f 588 21 588 44 ("platform-disable-window" "warn-unimplemented" "handle")}
      {Lisp-Entry "platform-get-client-rect" definition (package) ("handle") #f #f 592 21 592 45 ("get-height" "get-height~" "get-width" "get-width~" "0" "Rect" "new" "platform-get-size" "size" "let" "handle")}
      {Lisp-Entry "platform-scroll-window" definition (package) ("handle" "delta" "rect" "clip-rect") #f #f 597 21 597 43 ("platform-update-window" "platform-invalidate-rect" "clip-rect" "rect" "delta" "handle")}
      {Lisp-Entry "platform-invalidate-rect" definition (package) ("handle" "rect") #f #f 603 21 603 45 ("-" "HIViewSetNeedsDisplayInRect" "0" "=" "and" "unless" "get-bottom" "get-bottom~" "bottom" "get-right" "get-right~" "right" "get-top" "get-top~" "top" "get-left" "get-left~" "fixnum->flonum" "left" "let" "when" "rect" "handle")}
      {Lisp-Entry "platform-invalidate-region" definition (package) ("handle" "region") #f #f 614 21 614 47 ("get-rectangles" "get-rectangles~" "platform-invalidate-rect" "rect" "lambda" "for-each" "region" "handle")}
      {Lisp-Entry "platform-invalidate-window" definition (package) ("handle") #f #f 620 21 620 47 ("platform-invalidate-rect" "handle")}
      {Lisp-Entry "platform-redraw-window" definition (package) ("handle" "rect" "region") #f #f 624 21 624 43 ("platform-update-window" "HIViewGetWindow" "HIWindowFlush" "HIViewRender" "platform-invalidate-region" "platform-invalidate-rect" "if" "region" "rect" "handle")}
      {Lisp-Entry "platform-get-update-rect" definition (package) ("handle") #f #f 634 21 634 45 ("RECT-free" "RECT->rect" "prog1" "GetUpdateRect" "RECT-make" "rect" "let" "platform-get-update-rect" "unimplemented" "handle")}
      {Lisp-Entry "platform-get-update-region" definition (package) ("handle") #f #f 643 21 643 47 ("get-handle" "get-handle~" "GetUpdateRgn" "Region" "new" "region" "let" "platform-get-update-region" "unimplemented" "handle")}
      {Lisp-Entry "platform-redraw-view-only" definition (package) ("view" "handle") #f #f 651 21 651 46 ("platform-invalidate-rect" "get-height" "get-height~" "get-width" "get-width~" "0" "Rect" "new" "rct" "platform-get-size" "size" "let*" "handle" "view")}
      {Lisp-Entry "platform-update-window" definition (package) ("handle") #f #f 657 21 657 43 ("platform-invalidate-rect" "get-height" "get-height~" "get-width" "get-width~" "0" "Rect" "new" "rct" "platform-get-size" "size" "let*" "when" "HIViewGetWindow" "HIWindowFlush" "HIViewRender" "HIViewSetNeedsDisplay" "handle")}
      {Lisp-Entry "platform-show-noactivate" definition (package) ("handle") #f #f 668 21 668 45 ("show-window" "handle")}
      {Lisp-Entry "platform-hide-noactivate" definition (package) ("handle") #f #f 672 21 672 45 ("hide-window" "handle")}
      {Lisp-Entry "platform-bring-window-to-front" definition (package) ("handle") #f #f 676 21 676 51 ("HIViewGetWindow" "SelectWindow" "kHIViewZOrderAbove" "HIViewSetZOrder" "get-window" "is-window-HIView?" "if" "handle")}
      {Lisp-Entry "platform-send-window-to-back" definition (package) ("handle") #f #f 682 21 682 49 ("HIViewGetWindow" "SendBehind" "kHIViewZOrderBelow" "HIViewSetZOrder" "get-window" "is-window-HIView?" "if" "handle")}
      {Lisp-Entry "platform-select-foreground-window" definition (package) ("handle") #f #f 688 21 688 54 ("HIViewGetWindow" "SelectWindow" "makeFrontProcess" "handle")}
      {Lisp-Entry "actions-store" definition () () #f #f 698 12 698 25 ("make-table")}
      {Lisp-Entry "add-position-action" definition () ("window" "position") #f #f 701 13 701 32 ("cdr" "and" "cons" "table-set!" "actions-store" "table-ref" "action" "let" "position" "window")}
      {Lisp-Entry "add-size-action" definition () ("window" "size") #f #f 706 13 706 28 ("car" "and" "cons" "table-set!" "actions-store" "table-ref" "action" "let" "size" "window")}
      {Lisp-Entry "platform-lock-window-update" definition (package) ("handle") #f #f 711 21 711 48 ("process-window-actions" "begin" "*locked-update*" "set!" "if" "handle")}
      {Lisp-Entry "process-window-actions" definition () () #f #f 721 13 721 35 ("make-table" "set!" "show-window" "platform-set-window-size" "platform-set-position" "platform-set-position-size" "and" "if" "cdr" "size" "car" "position" "hide-window" "get-handle" "get-handle~" "handle" "let" "when" "action" "window" "lambda" "actions-store" "iterate-table")}
      {Lisp-Entry "platform-get-focus" definition (package) () #f #f 742 21 742 39 ("x11-default-display" "XGetInputFocus" "state" "win" "receive" "platform-get-focus" "unimplemented")}
      {Lisp-Entry "current-focus" definition () () #f #f 749 12 749 25 ()}
      {Lisp-Entry "get-current-focus" definition () () #f #f 751 13 751 30 ("get-toplevel" "set!" "current-focus" "unless")}
      {Lisp-Entry "platform-set-focus" definition (package) ("handle") #f #f 756 21 756 39 ("HIViewGetWindow" "SetUserFocusWindow" "get-window" "current-focus" "set!" "handle")}
      {Lisp-Entry "Current-Cursor" definition (public) () #f #f 766 19 766 33 ()}
      {Lisp-Entry "Cursors" definition (public) () #f #f 771 19 771 26 (":horizontal-splitter" ":vertical-splitter" ":left-arrow" ":spy" ":zoom-out" ":zoom-in" ":zoom" ":closed-hand" ":opened-hand" "Cursor-Resource" "new" ":move" "IDC_NO" ":no" "IDC_SIZEWE" ":west-east" "IDC_SIZEALL" ":all" "IDC_HAND" ":finger" "IDC_CROSS" ":cross" "IDC_IBEAM" ":ibeam" "IDC_WAIT" ":wait" "IDC_ARROW" ":arrow" "list")}
      {Lisp-Entry "load-cursor" definition () ("cursor") #f #f 793 13 793 24 ("load-cursor" "unimplemented" "cursor")}
      {Lisp-Entry "get-named-cursor" definition () ("name") #f #f 797 13 797 29 ("cadr" "error" "not" "if" "Cursors" "assq" "info" "let" "get-named-cursor" "unimplemented" "name")}
      {Lisp-Entry "get-cursor" definition (public) () #f #f 806 20 806 30 ("Current-Cursor")}
      {Lisp-Entry "set-cursor" definition (public) ("cursor") #f #f 810 20 810 30 ("load-cursor" "SetCursor" "get-named-cursor" "symbol?" "if" "let" "set!" "Current-Cursor" "=" "unless" "cursor")}
      {Lisp-Entry "hide-cursor" definition (public) () #f #f 819 20 819 31 ()}
      {Lisp-Entry "show-cursor" definition (public) () #f #f 823 20 823 31 ()}
      {Lisp-Entry "platform-get-desktop" definition (package) () #f #f 832 21 832 41 ("XDefaultScreen" "x11-default-display" "XRootWindow" "platform-get-desktop" "unimplemented")}
      {Lisp-Entry "get-work-area" definition (public) () #f "<Rect>" 839 20 839 33 ("desktop" "get-handle" "get-handle~" "platform-get-rect" "Rect" "<Rect>")}
      {Lisp-Entry "platform-drop-files" definition (package) ("window" "temp") #f #f 848 21 848 40 ("platform-drop-files" "unimplemented" "temp" "window")}}})
"development"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "development.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.development" module () () #f #f 37 8 37 27 ("Tree-View" "<Tree-View>" "Text-View" "<Text-View>" "Outline-View" "<Outline-View>" "Label-Item" "<Label-Item>" "Image-Tool" "<Image-Tool>" "View" "<View>" "jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.jml" "jazz.io" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "pt" definition (public) ("obj" "(rect #f)") #f #f 53 20 53 22 ("unspecified" "painting-tree" "painting-tree~" "rect:" "Region" "region" "with" "surface" "lambda" "with-transformation-surface" "with-transformation-surface~" "get-view-clipper" "get-view-clipper~" "get-bounds" "get-bounds~" "or" "rect-intersection" "acquire" "acquire~" "typecase" "5000" "0" "Rect" "not" "update" "get-toplevel" "get-root" "get-root~" "View" "is?" "root" "map" "children:" "properties:" "class-of" "category-name" "JML-Element" "new" "object->serial" "format" "serial" "get-opaque?" "get-opaque?~" "opaque?" "get-background" "get-background~" "background" "get-height" "get-height~" "get-width" "get-width~" "get-size" "get-size~" "size" "get-v" "get-v~" "get-h" "get-h~" "get-position" "get-position~" "position" "| |" "yes" "if" "get-name" "get-name~" "name" "list" "properties" "let" "nodes" "draw?" "view" "bind" "align-name?:" ":console" "convert" "pretty-print~" "node" "pretty-print" "define" "rect" "obj")}
      {Lisp-Entry "debug-window" method () ("pos") #f #f 88 9 88 21 ("acquire" "acquire~" "view-debug" "view-debug~" "nextmethod" "not" "if" "root" "find-drawing" "find-drawing~" "view" "let" "pos")}
      {Lisp-Entry "describe-window" method () ("pos") #f #f 96 9 96 24 ("acquire" "acquire~" "view-describe" "view-describe~" "when" "root" "find-drawing" "find-drawing~" "view" "let" "pos")}
      {Lisp-Entry "view-debug" generic/specific () ("pos") ("<View>") #f 107 10 107 20 ("set-%g" "set-%l" "set-%h" "set-%t" "set-%m" "set-%" "get-guest" "get-guest~" "Host-View" "is?" "and" "guest" "get-player" "get-player~" "player" "get-host" "get-host~" "host" "view" "get-root" "get-root~" "root" "let*" "pos")}
      {Lisp-Entry "view-describe" generic/specific () ("pos") ("<View>") #f 120 10 120 23 ("object->serial" "get-action-handler" "get-action-handler~" "get-size" "get-size~" "get-position" "get-position~" "get-title" "get-title~" "get-name" "get-name~" "view" "class-of" "category-identifier" "list" "pos")}
      {Lisp-Entry "view-describe-state" generic/specific () ("pos") ("<View>") #f 134 10 134 29 ("pos")}
      {Lisp-Entry "view-outline" definition () ("view") #f #f 139 13 139 25 (":console" "list" "print-to" "print-to~" "newline" "newline~" "get-height" "get-height~" "get-width" "get-width~" "get-v" "get-v~" "get-h" "get-h~" "format" "output" "output~" "get-size" "get-size~" "size" "get-position" "get-position~" "position" "class-of" "category-identifier" "type" "let" "View" "is?" "when" "level" "lambda" "for-each-descendant" "3" "border:" "Aligned-Column" "properties" "Indented-Column" "classes" "Columns-Display" "new" "display" "let*" "view")}
      {Lisp-Entry "view-describe" generic/specific () ("pos") ("<Image-Tool>") #f 166 11 166 24 ("get-disabled-resource" "get-disabled-resource~" "get-resource" "get-resource~" "list" "view" "nextmethod" "append" "pos")}
      {Lisp-Entry "view-describe" generic/specific () ("pos") ("<Label-Item>") #f 178 11 178 24 ("get-icon" "get-icon~" "list" "view" "nextmethod" "append" "pos")}
      {Lisp-Entry "view-debug" generic/specific () ("pos") ("<Outline-View>") #f 189 11 189 21 ("set-%r" "get-row" "get-row~" "row" "let" "when" "v->line" "v->line~" "l" "get-v" "get-v~" "v" "let*" "view" "nextmethod" "pos")}
      {Lisp-Entry "view-describe" generic/specific () ("pos") ("<Outline-View>") #f 198 11 198 24 ("get-visible-height" "get-visible-height~" "get-visible-width" "get-visible-width~" "get-visible-count" "get-visible-count~" "list" "get-model" "get-model~" "model" "let" "view" "nextmethod" "append" "pos")}
      {Lisp-Entry "view-debug" generic/specific () ("pos") ("<Text-View>") #f 212 11 212 21 ("get-document-controller" "get-document-controller~" "set-%c" "set-%k" "and" "set-%i" "get-style-at" "get-style-at~" "set-%y" "get-run-at" "get-run-at~" "set-%r" "get-col" "get-col~" "get-line-at" "get-line-at~" "set-%n" "get-format" "get-format~" "set-%f" "set-%p" "set-%x" "set-%m" "set-%e" "set-%s" "string-length" "substring" "starts-with?" "if" "filename" "Jazz" "Directory" "parse" "parse~" "jazzdir" "let" "path" "git-filename" "define" "get-line" "get-line~" "get-paragraph" "get-paragraph~" "paragraph" "get-moniker" "get-moniker~" "moniker" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "get-syntax" "get-syntax~" "syntax" "get-model" "get-model~" "model" "let*" "view" "nextmethod" "pos")}
      {Lisp-Entry "view-describe" generic/specific () ("pos") ("<Text-View>") #f 241 11 241 24 ("get-end" "get-end~" "get-start" "get-start~" "format" "list" "view" "nextmethod" "append" "pos")}
      {Lisp-Entry "view-debug" generic/specific () ("pos") ("<Tree-View>") #f 252 11 252 21 ("set-%u" "set-%r" "set-%p" "set-%o" "set-%n" "set-%d" "set-%c" "get-cell-data" "get-cell-data~" "data" "get-debugged" "get-debugged~" "part" "receive" "get-user-data" "get-user-data~" "user-data" "get-children" "get-children~" "car" "node" "get-line" "get-line~" "get-row" "get-row~" "row" "get-col" "get-col~" "get-column" "get-column~" "column" "cell-coordinates" "cell-coordinates~" "let*" "when" "view->tree" "view->tree~" "cell" "let" "view" "nextmethod" "pos")}
      {Lisp-Entry "view-describe" generic/specific () ("pos") ("<Tree-View>") #f 272 11 272 24 ("get-image" "get-image~" "Tree-Node" "is?" "and" "get-columns-right" "get-columns-right~" "get-node-column" "get-node-column~" "list" "get-cell-data" "get-cell-data~" "data" "get-debugged" "get-debugged~" "part" "receive" "get-user-data" "get-user-data~" "user-data" "get-children" "get-children~" "car" "node" "get-line" "get-line~" "get-row" "get-row~" "row" "get-col" "get-col~" "get-column" "get-column~" "column" "cell-coordinates" "cell-coordinates~" "let*" "not" "if" "view->tree" "view->tree~" "cell" "let" "view" "nextmethod" "append" "pos")}}})
"favorites"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "favorites.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.preference.favorites" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Favorites-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 51 20 51 41 ("Preferences")
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 63 25 63 45 ("Favorites-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 72 11 72 17 ()
        {Lisp-Entry "Favorites-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 75 7 75 39 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 78 3 78 7 (">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 83 20 83 61 ("Favorite-Configuration" "reference" "list" "component")}
          {Lisp-Entry "component-get-addable-details" method (override) ("component") #f #f 89 20 89 49 ("300" "target" "100" "shortcut" "component")}}
        {Lisp-Entry "Favorite-Configuration" class (undocumented) ((extends . "Preferences")) #f #f 98 20 98 42 ("Preferences")
          {Lisp-Entry "shortcut" property () ((initialize . "#f") (accessors . "generate")) #f #f 101 12 101 20 ()}
          {Lisp-Entry "get-shortcut" accessor () () #f #f 101 45 101 53 ()}
          {Lisp-Entry "set-shortcut" accessor () () #f #f 101 45 101 53 ()}
          {Lisp-Entry "target" property () ((initialize . "#f") (accessors . "generate")) #f #f 102 12 102 18 ()}
          {Lisp-Entry "get-target" accessor () () #f #f 102 45 102 53 ()}
          {Lisp-Entry "set-target" accessor () () #f #f 102 45 102 53 ()}
          {Lisp-Entry "form" form () () #f #f 105 3 105 7 ("Image-Resource" "icon:" "install" "<install>")}
          {Lisp-Entry "get-domain" method (meta override) ("property") #f #f 114 25 114 35 ("nextmethod" "else" "String-Domain" "new" "shortcut" "field-name" "case" "property")}
          {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 125 25 125 45 ("Favorite-Configuration-Descriptor" "new")}}
        {Lisp-Entry "design" submodule () () #f #f 134 11 134 17 ()
          {Lisp-Entry "Favorite-Configuration-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 137 7 137 40 ("Preferences-Descriptor")
            {Lisp-Entry "form" form () () #f #f 140 3 140 7 ("domain" "String-Domain" "<String-Domain>" "name:" "Property-Descriptor" "<Property-Descriptor>" "target" "shortcut" "categorized:" ">" "<properties" "<properties~>" "title:" "install" "<install>")}
            {Lisp-Entry "component-presentation-property?" method (override) ("component" "property") #f #f 147 20 147 52 ("shortcut" "field-name" "memq?" "property" "component")}
            {Lisp-Entry "component-get-presentation" method (override) ("component") #f #f 151 20 151 46 ("get-shortcut" "get-shortcut~" "or" "component")}
            {Lisp-Entry "component-set-presentation" method (override) ("component" "designer" "shortcut") #f #f 156 20 156 46 ("shortcut:" "set-property" "set-property~" "shortcut" "designer" "component")}}}}}})
"formats"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "literals" "formats.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.literals.formats" module () () #f #f 37 8 37 32 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Text-Base" define () () ("format") #f 43 15 43 24 ()}}})
"grid"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "tree" "grid.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.ui.tree.grid" module () () #f #f 37 8 37 25 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "call-with-row/column-data" definition (public) ("row" "column" "proc") #f #f 48 20 48 45 ("get-provider-data" "get-provider-data~" "get-user-data" "get-user-data~" "proc" "column" "row")}
      {Lisp-Entry "Data-Provider" interface () () #f #f 57 11 57 24 ()
        {Lisp-Entry "get-domain" method (public virtual abstract) ("row-data" "column-data") #f #f 60 35 60 45 ("column-data" "row-data")}
        {Lisp-Entry "get-data" method (public virtual abstract) ("row-data" "column-data" "fail" "succeed") #f #f 61 35 61 43 ("succeed" "fail" "column-data" "row-data")}
        {Lisp-Entry "set-data" method (public virtual abstract) ("row-data" "column-data" "value") #f #f 62 35 62 43 ("value" "column-data" "row-data")}
        {Lisp-Entry "read-only?" method (public virtual abstract) ("row-data" "column-data") #f #f 63 35 63 45 ("column-data" "row-data")}
        {Lisp-Entry "get-violation" method (public virtual abstract) ("row-data" "column-data") #f #f 64 35 64 48 ("column-data" "row-data")}
        {Lisp-Entry "set-violation" method (public virtual abstract) ("row-data" "column-data" "violation") #f #f 65 35 65 48 ("violation" "column-data" "row-data")}}
      {Lisp-Entry "Provider-Data" class () ((extends . "Component")) #f #f 68 7 68 20 ("Component")
        {Lisp-Entry "default-name" method (override) () #f #f 71 20 71 32 ("provider-data")}}
      {Lisp-Entry "Provider-Violation" class () ((extends . "Component")) #f #f 76 7 76 25 ("Component")
        {Lisp-Entry "violation" property () ((initialize . "#f") (accessors . "generate")) #f #f 79 12 79 21 ()}
        {Lisp-Entry "get-violation" accessor () () #f #f 79 46 79 54 ()}
        {Lisp-Entry "set-violation" accessor () () #f #f 79 46 79 54 ()}
        {Lisp-Entry "presentation" property () ((initialize . "#f") (accessors . "generate")) #f #f 80 12 80 24 ()}
        {Lisp-Entry "get-presentation" accessor () () #f #f 80 49 80 57 ()}
        {Lisp-Entry "set-presentation" accessor () () #f #f 80 49 80 57 ()}}
      {Lisp-Entry "Grid-Controller" interface () () #f #f 88 11 88 26 ()
        {Lisp-Entry "get-focus-actions" method (public virtual abstract) () #f #f 91 35 91 52 ()}
        {Lisp-Entry "focus-update-actions" method (public virtual abstract) () #f #f 92 35 92 55 ()}
        {Lisp-Entry "selection-cell?" method (public virtual abstract) ("row" "column") #f #f 93 35 93 50 ("column" "row")}
        {Lisp-Entry "get-context-menu" method (public virtual abstract) () #f #f 94 35 94 51 ()}
        {Lisp-Entry "on-selection-change" method (public virtual abstract) ("evt") #f #f 95 35 95 54 ("evt")}
        {Lisp-Entry "get-tab-stops" method (public virtual abstract) () #f #f 96 35 96 48 ()}
        {Lisp-Entry "copy-selection" method (public virtual abstract) () #f #f 97 35 97 49 ()}
        {Lisp-Entry "cut-selection" method (public virtual abstract) () #f #f 98 35 98 48 ()}
        {Lisp-Entry "delete-selection" method (public virtual abstract) () #f #f 99 35 99 51 ()}
        {Lisp-Entry "paste-clipboard" method (public virtual abstract) () #f #f 100 35 100 50 ()}
        {Lisp-Entry "can-copy?" method (public virtual abstract) () #f #f 101 35 101 44 ()}
        {Lisp-Entry "can-cut?" method (public virtual abstract) () #f #f 102 35 102 43 ()}
        {Lisp-Entry "can-delete?" method (public virtual abstract) () #f #f 103 35 103 46 ()}
        {Lisp-Entry "can-paste?" method (public virtual abstract) () #f #f 104 35 104 45 ()}
        {Lisp-Entry "get-draggable?" method (public virtual abstract) () #f #f 105 35 105 49 ()}
        {Lisp-Entry "active-background" method (public virtual abstract) ("row-data" "column-data") #f #f 106 35 106 52 ("column-data" "row-data")}
        {Lisp-Entry "inactive-background" method (public virtual abstract) ("row-data" "column-data") #f #f 107 35 107 54 ("column-data" "row-data")}
        {Lisp-Entry "get-frame-color" method (public virtual abstract) () #f #f 108 35 108 50 ()}
        {Lisp-Entry "cell-editable?" method (public virtual abstract) ("row" "column") #f #f 109 35 109 49 ("column" "row")}
        {Lisp-Entry "merge?" method (public virtual abstract) ("master-row-data" "row-data" "column-data") #f #f 110 35 110 41 ("column-data" "row-data" "master-row-data")}
        {Lisp-Entry "client-rows-datas" method (public virtual abstract) () #f #f 111 35 111 52 ()}
        {Lisp-Entry "drop?" method (public virtual abstract) ("source" "cell") #f #f 112 35 112 40 ("cell" "source")}
        {Lisp-Entry "receive-drop" method (public virtual abstract) ("sender" "pos" "drag-drop") #f #f 113 35 113 47 ("drag-drop" "pos" "sender")}}
      {Lisp-Entry "Grid-Tree-Column" class () ((extends . "Tree-Label-Column")) #f #f 121 7 121 23 ("Tree-Label-Column")
        {Lisp-Entry "form" form () () #f #f 124 3 124 7 ("1" "justification:" "install" "<install>")}
        {Lisp-Entry "get-provider-data" method () () #f #f 128 11 128 28 ("provider-data" "child")}
        {Lisp-Entry "draw-data" method (override) ("surface" "context" "row" "data" "width" "height") #f #f 132 20 132 29 ("draw-data" "draw-data~" "get-domain" "get-domain~" "domain" "value" "nextmethod" "get-data" "get-data~" "column-data" "row-data" "lambda" "self" "call-with-row/column-data" "parent" "get-provider" "get-provider~" "provider" "let" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Grid-Tree" class () ((extends . "Tree-View")) #f #f 149 7 149 16 ("Tree-View")
        {Lisp-Entry "form" form () () #f #f 152 3 152 7 ("on-selection-change" ":self" "Event-Handler" "selection-handler:" "cell" "selection-mode:" "filled-column:" "multiple-selection?:" "empty-background:" "Medium-Gray" "Color" "background:" "column-spacing:" "1" "row-spacing:" "15" "default-row-height:" "install" "<install>")}
        {Lisp-Entry "get-provider" method () () #f #f 156 11 156 23 ("provider" "child")}
        {Lisp-Entry "get-controller" method () () #f #f 160 11 160 25 ("controller" "child")}
        {Lisp-Entry "get-widget" method (virtual) () #f #f 164 19 164 29 ("Grid-Tree-Widget" "find-ascendant")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 168 20 168 33 ("nextmethod" "cons" "if" "get-controller" "get-focus-actions" "get-focus-actions~" "actions" "let")}
        {Lisp-Entry "focus-update-actions" method (override) () #f #f 175 20 175 40 ("get-controller" "focus-update-actions" "focus-update-actions~")}
        {Lisp-Entry "selected-cells-data" method () () #f #f 179 11 179 30 ("get-col" "get-col~" "get-column" "get-provider-data" "get-provider-data~" "get-line" "get-line~" "get-row" "get-user-data" "get-user-data~" "compose*" "map" "values" "cell=?" "test:" "get-selection" "remove-duplicates" "cells" "let")}
        {Lisp-Entry "cell-data-values" method () ("cell") #f #f 185 11 185 27 ("get-provider-data" "get-provider-data~" "get-user-data" "get-user-data~" "values" "cell-values" "column" "row" "receive" "cell")}
        {Lisp-Entry "mouse-down" method (override) ("view") #f #f 195 20 195 30 ("select-cell" "nextmethod" "get-controller" "selection-cell?" "selection-cell?~" "if" "cell-values" "column" "row" "receive" "end-edition" "when" "view->tree" "cell" "let" "view")}
        {Lisp-Entry "context-menu" method (override) ("pos") #f #f 205 20 205 32 ("track-popup-menu" "when" "get-controller" "get-context-menu" "get-context-menu~" "menu" "let" "lambda" "with-context-click" "end-edition" "pos")}
        {Lisp-Entry "on-selection-change" method () ("evt") #f #f 214 11 214 30 ("get-application" "update-focus-actions" "update-focus-actions~" "get-controller" "on-selection-change" "on-selection-change~" "evt")}
        {Lisp-Entry "editor-arrow-press" method () ("tab-view" "evt") #f #f 219 11 219 29 ("select-down" "down" "select-up" "up" "select-right" "right" "edited-cell" "select-left" "left" "case" "get-control?" "get-control?~" "word?:" "not" "internal?" "direction:" "get-property" "get-property~" "direction" "let" "arrow-press" "arrow-move" "if" "class-of" "dispatch" "next-move" "Text-View" "is?" "text?" "let*" "evt" "tab-view")}
        {Lisp-Entry "arrow-press" method (override) ("evt") #f #f 231 20 231 31 ("cell-down" "down" "cell-up" "up" "cell-right" "right" "cell-left" "left" "case" "direction:" "get-property" "get-property~" "direction" "select-cell" "when" "get-single-selection" "cell" "let" "next-cell" "select-direction" "define" "evt")}
        {Lisp-Entry "editor-return-press" method () ("tab-view" "evt") #f #f 245 11 245 30 ("on-tab-press" "on-tab-press~" "evt" "tab-view")}
        {Lisp-Entry "editor-tab-press" method () ("tab-view" "evt") #f #f 249 11 249 27 ("get-shift?" "get-shift?~" "navigate-view" "navigate-view~" "end-completion" "end-completion~" "has-ambiguous-completion?" "has-ambiguous-completion?~" "Text-View" "is?" "and" "if" "evt" "tab-view")}
        {Lisp-Entry "navigate-tab" method (override) ("from" "backward?") #f #f 255 20 255 32 ("nextmethod" "and" "cell=?" "test:" "get-selection" "car" "sel" "self" "navigate-tab" "navigate-tab~" "select-cell" "Cell" "is?" "navigated-view" "set!" "when" "first" "last" "cell" "get-creator" "eq?" "not-null?" "if" "get-tab-stops" "stops" "let" "backward?" "from")}
        {Lisp-Entry "get-tab-stops" method (override) () #f #f 275 20 275 33 ("get-controller" "get-tab-stops" "get-tab-stops~")}
        {Lisp-Entry "copy-selection" method (override) () #f #f 284 20 284 34 ("get-controller" "copy-selection" "copy-selection~")}
        {Lisp-Entry "cut-selection" method (override) () #f #f 288 20 288 33 ("get-controller" "cut-selection" "cut-selection~")}
        {Lisp-Entry "delete-selection" method (override) () #f #f 292 20 292 36 ("get-controller" "delete-selection" "delete-selection~")}
        {Lisp-Entry "paste-clipboard" method (override) () #f #f 296 20 296 35 ("get-controller" "paste-clipboard" "paste-clipboard~")}
        {Lisp-Entry "can-copy?" method (override) () #f #f 300 20 300 29 ("get-controller" "can-copy?" "can-copy?~")}
        {Lisp-Entry "can-cut?" method (override) () #f #f 304 20 304 28 ("get-controller" "can-cut?" "can-cut?~")}
        {Lisp-Entry "can-paste?" method (override) () #f #f 308 20 308 30 ("get-controller" "can-paste?" "can-paste?~")}
        {Lisp-Entry "can-delete?" method (override) () #f #f 312 20 312 31 ("get-controller" "can-delete?" "can-delete?~")}
        {Lisp-Entry "get-draggable?" method (override) () #f #f 316 20 316 34 ("get-controller" "get-draggable?" "get-draggable?~")}
        {Lisp-Entry "highlight-drop" method (override) ("drag-drop" "pos") #f #f 325 20 325 34 ("pos" "drag-drop")}
        {Lisp-Entry "get-tree-target" method (override) ("drag-drop" "pos") #f #f 329 20 329 35 ("col:" "row:" "view:" "Tree-Drop-Target" "new" "get-controller" "drop?" "drop?~" "eq?" "if" "equal?" "not" "get-row~" "self" "get-view" "get-view~" "neq?" "or" "when" "get-target" "get-target~" "current" "get-source" "get-source~" "source" "get-col" "get-col~" "col" "get-line" "get-line~" "get-row" "and" "row" "let" "height" "v" "cell" "lambda" "call-with-view->tree" "pos" "drag-drop")}
        {Lisp-Entry "receive-drop" method (override) ("sender" "pos" "drag-drop") #f #f 342 20 342 32 ("get-controller" "receive-drop" "receive-drop~" "drag-drop" "pos" "sender")}
        {Lisp-Entry "prepare-and-focus-entry" method () ("entry") #f #f 351 11 351 34 ("select-all" "select-all~" "acquire-focus" "acquire-focus~" "editor-tab-press" "set-tab-press-handler" "set-tab-press-handler~" "editor-return-press" "set-return-press-handler" "set-return-press-handler~" "editor-arrow-press" "evt" "lambda" "execute:" "Event-Handler" "new" "set-arrow-press-handler" "set-arrow-press-handler~" "tab-view" "tab-view~" "view-to-focus" "let" "entry")}
        {Lisp-Entry "new-editor" method (virtual) () #f #f 360 19 360 29 ("entry" "style:" "edge" "border-type:" "Border-View" "new")}
        {Lisp-Entry "setup-entry" method (virtual) ("editor" "domain") #f #f 364 19 364 30 ("setup-for-grid" "setup-for-grid~" "setup-entry" "setup-entry~" "entry" "let" "domain" "editor")}
        {Lisp-Entry "select-cell" method (override) ("cell") #f #f 370 20 370 31 ("prepare-and-focus-entry" "after-end:" "close-editor?:" "editor:" "edit-cell" "set-value" "set-value~" "set-presentation" "set-presentation~" "get-violation" "get-violation~" "provider-violation" "get-value" "get-value~" "set-data" "set-data~" "update-cell" "if" "presentation:" "violation:" "Provider-Violation" "new" "set-violation" "set-violation~" "validate-text" "validate-text~" "violation" "get-presentation" "get-presentation~" "Text-Domain" "is?" "and" "text" "get-modified?" "get-modified?~" "when" "after-end" "setup-entry" "entry" "let*" "new-editor" "editor" "get-domain" "get-domain~" "domain" "value" "lambda" "const" "get-data" "get-data~" "read-only?" "read-only?~" "unless" "set-single-selection" "acquire-focus" "cell-data-values" "column-data" "row-data" "receive" "get-provider" "provider" "let" "cell")}
        {Lisp-Entry "populate" method () () #f #f 399 11 399 19 ("update-highlight" "merge-grid-cells" "make-row-labels" "map" "user-data:" "children:" "add-row" "row-labels" "row-data" "lambda" "for-each" "get-controller" "client-rows-datas" "client-rows-datas~" "datas" "let" "remove-every-row")}
        {Lisp-Entry "make-row-label" method () ("row-data" "column-data") #f #f 415 11 415 25 ("update-label" "Tree-Label" "new" "label" "let" "column-data" "row-data")}
        {Lisp-Entry "make-row-labels" method () ("row-data") #f #f 421 11 421 26 ("get-columns" "get-provider-data" "get-provider-data~" "make-row-label" "column" "lambda" "map" "row-data")}
        {Lisp-Entry "update-label" method (public) ("row-data" "column-data" "label") #f #f 427 18 427 30 ("get-data" "get-data~" "present" "present~" "get-presentation" "get-presentation~" "if" "get-violation" "get-violation~" "violation" "active-background" "active-background~" "get-provider" "get-domain" "get-domain~" "domain" "let" "val" "update-active-element" "get-controller" "inactive-background" "inactive-background~" "set-background" "set-background~" "set-title" "set-title~" "update-inactive-element" "define" "label" "column-data" "row-data")}
        {Lisp-Entry "update-editor" method (public) ("row-data" "column-data" "editor") #f #f 443 18 443 31 ("set-value" "~" "const" "get-data" "get-data~" "get-provider" "get-violation" "get-violation~" "get-modified?" "get-modified?~" "or" "unless" "get-editor" "get-editor~" "first-child" "first-child~" "entry" "let" "editor" "column-data" "row-data")}
        {Lisp-Entry "update-frame-highlight" method (virtual) () #f #f 457 19 457 41 ("get-controller" "get-frame-color" "get-frame-color~" "get-widget" "set-border-color" "set-border-color~")}
        {Lisp-Entry "update-cell-highlight" method (virtual) ("tree-data" "cell") #f #f 461 19 461 40 ("invalidate-cell" "set-frame-color" "set-frame-color~" "eq?" "unless" "get-controller" "get-cell-color" "get-cell-color~" "color" "get-frame-color" "get-frame-color~" "current-color" "let" "cell-data-values" "column-data" "row-data" "receive" "cell" "tree-data")}
        {Lisp-Entry "get-editor-widget" method (virtual) ("editor") #f #f 470 19 470 36 ("include-self?:" "Border-View" "find-ascendant" "find-ascendant~" "editor")}
        {Lisp-Entry "update-editor-highlight" method (virtual) ("tree-data" "cell") #f #f 474 19 474 42 ("set-border-color" "set-border-color~" "eq?" "unless" "get-controller" "get-editor-color" "get-editor-color~" "color" "get-border-color" "get-border-color~" "current-color" "cell-data-values" "column-data" "row-data" "receive" "get-editor" "get-editor~" "get-editor-widget" "border" "let" "get-preserved-data" "get-preserved-data~" "update-cell-highlight" "cell" "tree-data")}
        {Lisp-Entry "update-cells-highlight" method () () #f #f 484 11 484 33 ("update-editor-highlight" "Tree-Data-View" "update-cell-highlight" "Tree-Label" "child" "typecase" "Cell" "new" "cell" "get-child" "get-child~" "tree-data" "let" "col" "column" "for-each-column" "line" "row" "lambda" "for-each-visible-row")}
        {Lisp-Entry "update-highlight" method () () #f #f 499 11 499 27 ("update-cells-highlight" "update-frame-highlight")}
        {Lisp-Entry "merge-column-cells" method () ("column" "col") #f #f 508 11 508 29 ("merge-cells" "row->line" "Cell" "new" "cell" "1" "+" "get-provider-data" "get-provider-data~" "get-user-data" "get-user-data~" "get-controller" "merge?" "merge?~" "and" "if" "0" "to-merge" "current" "iterate-rows" "when" "get-root-row" "get-next" "get-next~" "master" "iterate-master-rows" "let" "col" "column")}
        {Lisp-Entry "merge-grid-cells" method () () #f #f 519 11 519 27 ("merge-column-cells" "for-each-column")}
        {Lisp-Entry "update-cell" method () ("cell") #f #f 523 11 523 22 ("invalidate-cell" "update-editor-highlight" "get-controller" "update-editor" "update-editor~" "when" "update-cell-highlight" "update-label" "cd" "rd" "lambda" "call-with-row/column-data" "cell-values" "column" "row" "receive" "get-cell-data" "get-preserved-data" "get-preserved-data~" "if" "label" "cell-editor" "cell=?" "edited-cell" "and" "editor" "let*" "cell")}}
      {Lisp-Entry "Grid-Tree-Widget" class () ((extends . "Border-View")) #f #f 537 7 537 23 ("Border-View")
        {Lisp-Entry "form" form () () #f #f 540 3 540 7 ("grid" "Grid-Tree" "<Grid-Tree>" "empty-background:" "grid-header" "Tree-Header" "<Tree-Header>" "fill" "layout-type:" ">" "<content" "<content~>" "hscroll?:" "vscroll?:" "document" "scroller" "name:" "Scroller-View" "<Scroller-View>" "Medium-Gray" "Color" "background:" "entry" "style:" "edge" "border-type:" "install" "<install>")}}}})
"independant"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "platform" "independant.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.window.platform.independant" module (protected) () #f #f 38 18 38 53 ("jazz")
      {Lisp-Entry "*events-single-threaded?*" definition () () #f #f 46 12 46 37 ()}
      {Lisp-Entry "get-events-single-threaded?" definition (public) () #f #f 50 20 50 47 ("*events-single-threaded?*")}
      {Lisp-Entry "set-events-single-threaded?" definition (public) ("flag") #f #f 54 20 54 47 ("*events-single-threaded?*" "set!" "flag")}
      {Lisp-Entry "event-thread" definition (public) () #f #f 63 20 63 32 ("primordial-thread")}
      {Lisp-Entry "event-thread?" definition (public) () #f #f 67 20 67 33 ("event-thread" "current-thread" "eq?")}
      {Lisp-Entry "delay-event" definition (public) ("thunk") #f #f 71 20 71 31 ("event-thread" "thread-write" "thunk")}
      {Lisp-Entry "post-event" definition (public) ("thunk") #f #f 76 20 76 30 ("post-event" "event-thread" "thread-post" "thunk")}
      {Lisp-Entry "execute-event" definition (public) ("thunk") #f #f 81 20 81 33 ("execute-event" "event-thread" "thread-execute" "thunk")}
      {Lisp-Entry "call-event" definition (public) ("thunk") #f #f 86 20 86 30 ("call-event" "event-thread" "thread-call" "thunk")}}})
"install"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "install.scm"} 237856878. scheme
    {Lisp-Entry "jazz.ui.install" unit () () #f #f 37 6 37 21 ()
      {Lisp-Entry "Action" define () () ("literal") #f 40 21 40 27 ("construct-action" "jazz.ui.literals" "jazz.ui.literals:construct-action")}
      {Lisp-Entry "Shortcut" define () () ("literal") #f 41 21 41 29 ("construct-shortcut" "jazz.ui.literals" "jazz.ui.literals:construct-shortcut")}
      {Lisp-Entry "Format" define () () ("literal") #f 42 21 42 27 ("construct-format" "jazz.ui.literals" "jazz.ui.literals:construct-format")}
      {Lisp-Entry "Text-Style" define () () ("literal") #f 43 21 43 31 ("construct-text-style" "jazz.ui.literals" "jazz.ui.literals:construct-text-style")}
      {Lisp-Entry "Link-Style" define () () ("literal") #f 44 21 44 31 ("construct-link-style" "jazz.ui.literals" "jazz.ui.literals:construct-link-style")}
      {Lisp-Entry "Image-Style" define () () ("literal") #f 45 21 45 32 ("construct-image-style" "jazz.ui.literals" "jazz.ui.literals:construct-image-style")}
      {Lisp-Entry "Info-Style" define () () ("literal") #f 46 21 46 31 ("construct-info-style" "jazz.ui.literals" "jazz.ui.literals:construct-info-style")}
      {Lisp-Entry "Text" define () () ("literal") #f 47 21 47 25 ("construct-text" "jazz.ui.literals" "jazz.ui.literals:construct-text")}
      {Lisp-Entry "Formatted-Text" define () () ("literal") #f 48 21 48 35 ("construct-formatted-text" "jazz.ui.literals" "jazz.ui.literals:construct-formatted-text")}
      {Lisp-Entry "Clipboard-Parcel" define () () ("literal") #f 49 21 49 37 ("construct-clipboard-parcel" "jazz.ui.literals" "jazz.ui.literals:construct-clipboard-parcel")}
      {Lisp-Entry "Action-Event" define () () ("literal") #f 50 21 50 33 ("construct-action-event" "jazz.ui.literals" "jazz.ui.literals:construct-action-event")}
      {Lisp-Entry "Keyboard-Event" define () () ("literal") #f 51 21 51 35 ("construct-keyboard-event" "jazz.ui.literals" "jazz.ui.literals:construct-keyboard-event")}
      {Lisp-Entry "Selection-Handler" define () () ("literal") #f 52 21 52 38 ("construct-selection-handler" "jazz.ui.literals" "jazz.ui.literals:construct-selection-handler")}}})
"styles"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "literals" "styles.jazz"} 231466231. jazz
    {Lisp-Entry "jazz.ui.literals.styles" module () () #f #f 37 8 37 31 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic")}
      {Lisp-Entry "Text-Base" define () () ("style") #f 49 19 49 28 ("Label" "Font" "font:")}
      {Lisp-Entry "Text-Bold" define () () ("style") #f 50 19 50 28 ("Label-Bold" "Font" "font:")}
      {Lisp-Entry "Text-User" define () () ("style") #f 51 19 51 28 ("Label-User" "Font" "font:")}
      {Lisp-Entry "Text-Title" define () () ("style") #f 52 19 52 29 ("Dark-Red" "Color" "color:")}
      {Lisp-Entry "Text-Comment" define () () ("style") #f 53 19 53 31 ("Purple" "Color" "color:")}
      {Lisp-Entry "Text-Expr-Comment" define () () ("style") #f 54 19 54 36 ("Dark-Gray" "Color" "color:")}
      {Lisp-Entry "Text-Named-Comment" define () () ("style") #f 55 19 55 37 ("Dark-Gray" "Color" "color:")}
      {Lisp-Entry "Text-Line-Comment" define () () ("style") #f 56 19 56 36 ("Purple" "Color" "color:")}
      {Lisp-Entry "Text-Balanced-Comment" define () () ("style") #f 57 19 57 40 ("Dark-Green" "Color" "color:")}
      {Lisp-Entry "Text-Declaration-Keyword" define () () ("style") #f 58 19 58 43 ("Dark-Blue" "Color" "color:")}
      {Lisp-Entry "Text-Declaration" define () () ("style") #f 59 19 59 35 ("Dark-Green" "Color" "color:")}
      {Lisp-Entry "Text-Documented-Declaration" define () () ("style") #f 60 19 60 46 ("Dark-Green" "Color" "color:")}
      {Lisp-Entry "Text-Undocumented-Declaration" define () () ("style") #f 61 19 61 48 ("Dark-Green" "Color" "color:")}
      {Lisp-Entry "Text-Definition" define () () ("style") #f 62 19 62 34 ("Dark-Red" "Color" "color:")}
      {Lisp-Entry "Text-Keyword" define () () ("style") #f 63 19 63 31 ("Dark-Blue" "Color" "color:")}
      {Lisp-Entry "Text-Tag" define () () ("style") #f 64 19 64 27 ("Dark-Purple" "Color" "color:")}
      {Lisp-Entry "Text-Specifier" define () () ("style") #f 65 19 65 33 ("Dark-Gray" "Color" "color:")}
      {Lisp-Entry "Text-Literal" define () () ("style") #f 66 19 66 31 ("Ochre" "Color" "color:")}
      {Lisp-Entry "Text-Char" define () () ("style") #f 67 19 67 28 ("Ochre" "Color" "color:")}
      {Lisp-Entry "Text-Number" define () () ("style") #f 68 19 68 30 ("Ochre" "Color" "color:")}
      {Lisp-Entry "Text-Boolean" define () () ("style") #f 69 19 69 31 ("Ochre" "Color" "color:")}
      {Lisp-Entry "Text-String" define () () ("style") #f 70 19 70 30 ("Ochre" "Color" "color:")}
      {Lisp-Entry "Text-Delimited-String" define () () ("style") #f 71 19 71 40 ("Ochre" "Color" "color:")}
      {Lisp-Entry "Text-Named-String" define () () ("style") #f 72 19 72 36 ("Ochre" "Color" "color:")}
      {Lisp-Entry "Text-Quotation" define () () ("style") #f 73 19 73 33 ("Ochre" "Color" "color:")}
      {Lisp-Entry "Text-Feature" define () () ("style") #f 74 19 74 31 ("Dark-Orange" "Color" "color:")}
      {Lisp-Entry "Text-Reference" define () () ("style") #f 75 19 75 33 ("Reference" "Color" "frame:")}
      {Lisp-Entry "Text-Boundary" define () () ("style") #f 76 19 76 32 ("Dark-Red" "Color" "frame:")}
      {Lisp-Entry "Text-Warning" define () () ("style") #f 77 19 77 31 ("Orange" "Color" "frame:")}
      {Lisp-Entry "Text-Fatal" define () () ("style") #f 78 19 78 29 ("Red" "Color" "frame:")}
      {Lisp-Entry "Text-Break" define () () ("style") #f 79 19 79 29 ("Red" "Color" "highlight:")}
      {Lisp-Entry "Text-Match" define () () ("style") #f 80 19 80 29 ("Match" "Color" "highlight:")}
      {Lisp-Entry "Code-Base" define () () ("style") #f 88 19 88 28 ("Code" "Font" "font:")}
      {Lisp-Entry "Code-Bold" define () () ("style") #f 89 19 89 28 ("Code-Bold" "Font" "font:")}
      {Lisp-Entry "C-Profile-Macro" define () () ("style") #f 97 19 97 34 ("Dark-Orange" "Color" "color:")}
      {Lisp-Entry "C-Profile-Keyword" define () () ("style") #f 98 19 98 36 ("Dark-Blue" "Color" "color:")}
      {Lisp-Entry "C-Profile-Type" define () () ("style") #f 99 19 99 33 ("Dark-Green" "Color" "color:")}
      {Lisp-Entry "Console-Base" define () () ("style") #f 107 19 107 31 ("Code-Base" "base:")}
      {Lisp-Entry "Console-Bold" define () () ("style") #f 108 19 108 31 ("Code-Bold" "base:")}
      {Lisp-Entry "Console-Banner" define () () ("style") #f 109 19 109 33 ("Dark-Blue" "Color" "color:")}
      {Lisp-Entry "Console-Prompt" define () () ("style") #f 110 19 110 33 ("Ochre" "Color" "color:")}
      {Lisp-Entry "Console-Entry" define () () ("style") #f 111 19 111 32 ("Dark-Red" "Color" "color:")}
      {Lisp-Entry "Console-Input" define () () ("style") #f 112 19 112 32 ("Dark-Green" "Color" "color:")}
      {Lisp-Entry "Console-Output" define () () ("style") #f 113 19 113 33 ("Dark-Blue" "Color" "color:")}
      {Lisp-Entry "Console-Comment" define () () ("style") #f 114 19 114 34 ("Dark-Gray" "Color" "color:")}
      {Lisp-Entry "Command-Separator" define () () ("style") #f 122 19 122 36 ("blue:" "140" "green:" "254" "red:" "Color" "highlight:")}
      {Lisp-Entry "Diff-Left" define () () ("style") #f 130 19 130 28 ("Green" "Color" "color:")}
      {Lisp-Entry "Diff-Right" define () () ("style") #f 131 19 131 29 ("Blue" "Color" "color:")}
      {Lisp-Entry "Diff-File" define () () ("style") #f 139 19 139 28 ("Ochre" "Color" "color:")}
      {Lisp-Entry "Diff-Diff" define () () ("style") #f 140 19 140 28 ("Dark-Purple" "Color" "color:")}
      {Lisp-Entry "Diff-Add" define () () ("style") #f 141 19 141 27 ("Dark-Green" "Color" "color:")}
      {Lisp-Entry "Diff-Remove" define () () ("style") #f 142 19 142 30 ("Dark-Red" "Color" "color:")}}})
"wallpaper"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "preference" "wallpaper.jazz"} 242521356. jazz
    {Lisp-Entry "jazz.ui.preference.wallpaper" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Wallpaper-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 51 20 51 41 ("Preferences")
        {Lisp-Entry "active" property () ((initialize . "#f") (accessors . "generate")) #f #f 54 12 54 18 ()}
        {Lisp-Entry "get-active" accessor () () #f #f 54 43 54 51 ()}
        {Lisp-Entry "set-active" accessor () () #f #f 54 43 54 51 ()}
        {Lisp-Entry "form" form () () #f #f 57 3 57 7 ("title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 66 25 66 45 ("Wallpaper-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 75 11 75 17 ()
        {Lisp-Entry "Wallpaper-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 78 7 78 39 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 81 3 81 7 ("active" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 87 20 87 61 ("Wallpaper-Configuration" "reference" "list" "component")}
          {Lisp-Entry "component-get-addable-details" method (override) ("component") #f #f 93 20 93 49 ("active?" "random?" "recursive?" "period" "favorites" "startup" "mode" "directory" "100" "name-info" "component")}}}
      {Lisp-Entry "Wallpaper-Configuration" class (undocumented) ((extends . "Preferences")) #f #f 110 20 110 43 ("Preferences")
        {Lisp-Entry "directory" property () ((initialize . "#f") (accessors . "generate")) #f #f 113 12 113 21 ()}
        {Lisp-Entry "get-directory" accessor () () #f #f 113 48 113 56 ()}
        {Lisp-Entry "set-directory" accessor () () #f #f 113 48 113 56 ()}
        {Lisp-Entry "mode" property () ((initialize . "#f") (accessors . "generate")) #f #f 114 12 114 16 ()}
        {Lisp-Entry "get-mode" accessor () () #f #f 114 48 114 56 ()}
        {Lisp-Entry "set-mode" accessor () () #f #f 114 48 114 56 ()}
        {Lisp-Entry "startup" property () ((initialize . "#f") (accessors . "generate")) #f #f 115 12 115 19 ()}
        {Lisp-Entry "get-startup" accessor () () #f #f 115 48 115 56 ()}
        {Lisp-Entry "set-startup" accessor () () #f #f 115 48 115 56 ()}
        {Lisp-Entry "favorites" property () ((initialize . "'()") (accessors . "generate")) #f #f 116 12 116 21 ()}
        {Lisp-Entry "get-favorites" accessor () () #f #f 116 48 116 56 ()}
        {Lisp-Entry "set-favorites" accessor () () #f #f 116 48 116 56 ()}
        {Lisp-Entry "period" property () ((initialize . "#f") (accessors . "generate")) #f #f 117 12 117 18 ()}
        {Lisp-Entry "get-period" accessor () () #f #f 117 48 117 56 ()}
        {Lisp-Entry "set-period" accessor () () #f #f 117 48 117 56 ()}
        {Lisp-Entry "recursive?" property () ((initialize . "#f") (accessors . "generate")) #f #f 118 12 118 22 ()}
        {Lisp-Entry "get-recursive?" accessor () () #f #f 118 48 118 56 ()}
        {Lisp-Entry "set-recursive?" accessor () () #f #f 118 48 118 56 ()}
        {Lisp-Entry "random?" property () ((initialize . "#f") (accessors . "generate")) #f #f 119 12 119 19 ()}
        {Lisp-Entry "get-random?" accessor () () #f #f 119 48 119 56 ()}
        {Lisp-Entry "set-random?" accessor () () #f #f 119 48 119 56 ()}
        {Lisp-Entry "active?" property () ((initialize . "#t") (accessors . "generate")) #f #f 120 12 120 19 ()}
        {Lisp-Entry "get-active?" accessor () () #f #f 120 48 120 56 ()}
        {Lisp-Entry "set-active?" accessor () () #f #f 120 48 120 56 ()}
        {Lisp-Entry "form" form () () #f #f 123 3 123 7 ("300000" "period:" "favorites:" "startup:" "Image-Resource" "icon:" "install" "<install>")}
        {Lisp-Entry "get-domain" method (meta override) ("property") #f #f 132 25 132 35 ("nextmethod" "else" "Boolean-Domain" "new" "active?" "random?" "recursive?" "field-name" "case" "property")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 143 25 143 45 ("Wallpaper-Configuration-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 152 11 152 17 ()
        {Lisp-Entry "Wallpaper-Configuration-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 155 7 155 41 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 158 3 158 7 ("Boolean-Domain" "<Boolean-Domain>" "domain" "Directory-Domain" "<Directory-Domain>" "name:" "Property-Descriptor" "<Property-Descriptor>" "active?" "random?" "recursive?" "period" "favorites" "startup" "mode" "directory" "categorized:" ">" "<properties" "<properties~>" "title:" "install" "<install>")}}}}})
"windows"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "clipboard" "platform" "windows.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.clipboard.platform.windows" module (protected) () #f #f 37 18 37 52 ("CF_UNICODETEXT" "unicode-text" "register-clipboard-format" "jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.platform")}
      {Lisp-Entry "initialize-clipboard" definition (package) () #f #f 43 21 43 41 ()}
      {Lisp-Entry "get-clipboard-text" definition (public) ("(format: format 'unicode-text)") #f #f 52 20 52 38 ("read-line" "input" "cr-lf" "eol-encoding:" "UCS-2" "char-encoding:" "init:" "list" "call-with-input-u8vector" "u8vector?" "not" "if" "get-clipboard-format" "GetClipboardText" "u8vect" "let" "lambda" "with-opened-clipboard" "unicode-text" "format" "format:")}
      {Lisp-Entry "set-clipboard-text" definition (public) ("text" "(format: format 'unicode-text)") #f #f 63 20 63 38 ("empty?:" "get-clipboard-format" "SetClipboardText" "get-output-u8vector" "u8vect" "display" "cr-lf" "eol-encoding:" "UCS-2" "char-encoding:" "list" "open-output-u8vector" "output" "let" "lambda" "with-opened-clipboard" "unicode-text" "format" "format:" "text")}
      {Lisp-Entry "mouse-select-copy" definition (package) ("proc") #f #f 78 21 78 38 ("proc")}
      {Lisp-Entry "middle-mouse-paste" definition (package) ("proc") #f #f 82 21 82 39 ("proc")}
      {Lisp-Entry "get-clipboard-metafile" definition (package) () #f #f 91 21 91 43 ("CF_ENHMETAFILE" "GetClipboardData" "lambda" "with-opened-clipboard" "get-clipboard-metafile" "unimplemented")}
      {Lisp-Entry "set-clipboard-metafile" definition (package) ("metafile") #f #f 99 21 99 43 ("empty?:" "CF_ENHMETAFILE" "SetClipboardData" "lambda" "with-opened-clipboard" "set-clipboard-metafile" "unimplemented" "metafile")}
      {Lisp-Entry "with-opened-clipboard" definition (public undocumented) ("proc" "(empty?: empty? #f)") #f #f 113 33 113 54 ("CloseClipboard" "EmptyClipboard" "when" "set!" "NULL" "OpenClipboard" "begin" "unwind-protect" "opened?" "let" "empty?" "empty?:" "proc")}
      {Lisp-Entry "Formats" definition () () #f #f 131 12 131 19 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-clipboard-format" definition (public undocumented) ("name" "format") #f #f 135 33 135 58 ("Formats" "table-set!" "RegisterClipboardFormat" "integer?" "if" "id" "let" "format" "name")}
      {Lisp-Entry "get-clipboard-format" definition (public undocumented) ("format") #f #f 142 33 142 53 ("error" "Formats" "table-ref" "or" "format")}
      {Lisp-Entry "clipboard-format-available?" definition (public undocumented) ("format") #f #f 147 33 147 60 ("available-clipboard-formats" "get-clipboard-format" "member?" "format")}
      {Lisp-Entry "available-clipboard-formats" definition (public undocumented) () #f #f 151 33 151 60 ("get-output" "get-output~" "put" "put~" "/=" "when" "EnumClipboardFormats" "format" "0" "previous" "iter" "List-Factory" "new" "formats" "let" "lambda" "with-opened-clipboard")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "platform" "windows.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ui.dialog.platform.windows" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.platform" "jazz.io")}
      {Lisp-Entry "choose-file" definition (public) ("(title: title #f)" "(directory: directory #f)" "(filenames: filenames #f)" "(extensions: extensions #f)" "(multiple-selection?: multiple-selection? #f)" "(anchors: anchors #f)" "(text?: text? #f)") #f #f 53 20 53 31 ("WCHAR-array-free" "OPENFILENAME-free" "error" "throw-cancel" "CommDlgExtendedError" "code" "append" "map" "dirlist" "dir" "bind" "list" "1" "length" "=" "parse-choose-file-string" "tokens" "tokenise-windows" "File" "new" "WCHAR-string" "filename" "not" "begin" "GetOpenFileName" "prog1" "anchorize~" "pathname" "lambda" "anchorize" "OPENFILENAME-lpfnHook-set!" "OPENFILENAME-lCustData-set!" "OPENFILENAME-lpstrDefExt-set!" "OFN_ENABLESIZING" "OFN_FILEMUSTEXIST" "OFN_ENABLEHOOK" "OFN_HIDEREADONLY" "OFN_ALLOWMULTISELECT" "OFN_EXPLORER" "bitwise-ior" "OPENFILENAME-Flags-set!" "or" "OPENFILENAME-lpstrTitle-set!" "parse" "parse~" "OPENFILENAME-lpstrInitialDir-set!" "OPENFILENAME-nMaxFile-set!" "OPENFILENAME-lpstrFile-set!" "OPENFILENAME-lpstrFilter-set!" "get-handle" "get-handle~" "get-toplevel" "toplevel" "OPENFILENAME-hwndOwner-set!" "OPENFILENAME-sizeof" "OPENFILENAME-lStructSize-set!" "get-dialog-proc" "fake-dialog-proc" "get-current-directory" "fake-current-directory" "NULL" "extensions-filter" "fake-extensions-filter" "0" "WCHAR-array-set!" "WCHAR-array-make" "buffer" "OPENFILENAME-make" "r" "50" "64" "*" "MAX_PATH" "+" "size" "let" "host-title:" "File-Request" "Text-File-Request" "get-modal" "use-generic-dialogs?" "if" "text?" "text?:" "anchors" "anchors:" "multiple-selection?" "multiple-selection?:" "extensions" "extensions:" "filenames" "filenames:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "map-WCHAR-array" definition () ("buffer" "size") #f #f 116 13 116 28 ("0" "naturals" "WCHAR-array-ref" "char" "let" "n" "lambda" "map" "size" "buffer")}
      {Lisp-Entry "choose-new-file" definition (public) ("(title: title #f)" "(directory: directory #f)" "(filenames: filenames #f)" "(extensions: extensions #f)" "(initial-filename: initial-filename #f)" "(default-extension: default-extension #f)" "(anchors: anchors #f)") #f #f 123 20 123 35 ("WCHAR-array-free" "OPENFILENAME-free" "error" "throw-cancel" "=" "CommDlgExtendedError" "code" "tokenise-windows" "File" "new" "anchorize" "anchorize~" "after-GetSaveFileName" "WCHAR-string" "filename" "GetSaveFileName" "prog1" "map-WCHAR-array" "before-GetSaveFileName" "debug" "OPENFILENAME-lpfnHook-set!" "OPENFILENAME-lCustData-set!" "or" "OPENFILENAME-lpstrDefExt-set!" "OFN_OVERWRITEPROMPT" "OFN_ENABLESIZING" "OFN_FILEMUSTEXIST" "OFN_ENABLEHOOK" "OFN_EXPLORER" "bitwise-ior" "OPENFILENAME-Flags-set!" "parse" "parse~" "OPENFILENAME-lpstrInitialDir-set!" "OPENFILENAME-nMaxFile-set!" "OPENFILENAME-lpstrFile-set!" "OPENFILENAME-lpstrFilter-set!" "get-handle" "get-handle~" "get-toplevel" "toplevel" "OPENFILENAME-hwndOwner-set!" "OPENFILENAME-sizeof" "OPENFILENAME-lStructSize-set!" "get-dialog-proc" "fake-dialog-proc" "get-current-directory" "fake-current-directory" "NULL" "extensions-filter" "fake-extensions-filter" "WCHAR-copy" "0" "WCHAR-array-set!" "not" "MAX_PATH" "WCHAR-array-make" "buffer" "OPENFILENAME-make" "r" "let" "create-directories" "create-directories~" "when" "host-title:" "NewFile-Request" "get-modal" "use-generic-dialogs?" "if" "anchors" "anchors:" "default-extension" "default-extension:" "initial-filename" "initial-filename:" "extensions" "extensions:" "filenames" "filenames:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-directory" definition (public) ("(title: title #f)" "(directory: directory #f)" "(anchors: anchors #f)") #f #f 179 20 179 36 ("tokenise-windows" "Directory" "new" "anchorize" "anchorize~" "WCHAR-string" "throw-cancel" "not" "SHBrowseForFolder" "items" "BROWSEINFO-iImage-set!" "BROWSEINFO-lParam-set!" "get-browse-callback" "BROWSEINFO-lpfn-set!" "BROWSEINFO-ulFlags-set!" "or" "BROWSEINFO-lpszTitle-set!" "BROWSEINFO-pszDisplayName-set!" "BROWSEINFO-pidlRoot-set!" "NULL" "get-handle" "get-handle~" "get-toplevel" "toplevel" "BROWSEINFO-hwndOwner-set!" "0" "WCHAR-array-set!" "MAX_PATH" "WCHAR-array-make" "buffer" "BROWSEINFO-make" "r" "set-current-directory" "when" "get-current-directory" "preserved" "let" "host-title:" "Directory-Request" "get-modal" "use-generic-dialogs?" "if" "anchors" "anchors:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "print-dialog" definition (public) ("." "rest") #f #f 217 20 217 32 ("PRINTDLG-free" "error" "throw-cancel" "=" "CommDlgExtendedError" "code" "DEVMODE-dmOrientation-ref" "PRINTDLG-nCopies-ref" "PRINTDLG-nToPage-ref" "PRINTDLG-nFromPage-ref" "PD_PAGENUMS" "PD_SELECTION" "PD_PRINTTOFILE" "mask-bit-set?" "PRINTDLG-hDC-ref" "values" "VOID*->DEVMODE" "devmode" "GlobalLock" "pointer" "PRINTDLG-hDevMode-ref" "handle" "PRINTDLG-Flags-ref" "flags" "let*" "PrintDlg" "if" "prog1" "10" "PRINTDLG-nMaxPage-set!" "1" "PRINTDLG-nMinPage-set!" "PRINTDLG-nToPage-set!" "0" "PRINTDLG-nFromPage-set!" "PD_RETURNDC" "PD_USEDEVMODECOPIESANDCOLLATE" "PD_NOSELECTION" "PD_HIDEPRINTTOFILE" "bitwise-ior" "PRINTDLG-Flags-set!" "get-application" "get-toplevel" "get-toplevel~" "get-handle" "get-handle~" "PRINTDLG-hwndOwner-set!" "PRINTDLG-sizeof" "PRINTDLG-lStructSize-set!" "PRINTDLG-make" "rec" "let" "close-all-popups" "rest")}
      {Lisp-Entry "page-setup-dialog" definition (public) ("(margins: margins '())" "(orientation: orientation #f)" "(paper-size: paper-size #f)" "(paper-source: paper-source #f)") #f #f 240 20 240 37 ("DEVMODE-free" "PAGESETUPDLG-free" "error" "throw-cancel" "=" "CommDlgExtendedError" "code" "GlobalUnlock" "DEVMODE-dmDefaultSource-ref" "DEVMODE-dmPaperSize-ref" "DEVMODE-dmOrientation-ref" "PAGESETUPDLG-rtMinMargin-ref" "RECT->rect" "PAGESETUPDLG-ptPaperSize-ref" "POINT->dimension" "values" "VOID*->DEVMODE" "GlobalLock" "pointer" "PAGESETUPDLG-hDevMode-ref" "handle" "let*" "PageSetupDlg" "prog1" "get-bottom" "get-bottom~" "RECT-bottom-set!" "get-right" "get-right~" "RECT-right-set!" "get-top" "get-top~" "RECT-top-set!" "get-left" "get-left~" "PAGESETUPDLG-rtMargin-ref" "RECT-left-set!" "when" "PSD_DISABLEPRINTER" "0" "PSD_MARGINS" "if" "PSD_INTHOUSANDTHSOFINCHES" "PAGESETUPDLG-Flags-set!" "DEVMODE->HANDLE" "PAGESETUPDLG-hDevMode-set!" "get-application" "get-toplevel" "get-toplevel~" "get-handle" "get-handle~" "PAGESETUPDLG-hwndOwner-set!" "PAGESETUPDLG-sizeof" "PAGESETUPDLG-lStructSize-set!" "DM_DEFAULTSOURCE" "DM_PAPERSIZE" "DM_ORIENTATION" "bitwise-ior" "DEVMODE-dmFields-set!" "DEVMODE-dmDefaultSource-set!" "DEVMODE-dmPaperSize-set!" "DEVMODE-dmOrientation-set!" "DEVMODE-sizeof" "DEVMODE-dmSize-set!" "DEVMODE-make" "devmode" "PAGESETUPDLG-make" "rec" "let" "close-all-popups" "paper-source" "paper-source:" "paper-size" "paper-size:" "orientation" "orientation:" "margins" "margins:")}
      {Lisp-Entry "choose-font" definition (public) ("(initial-font: initial-font #f)" "(initial-color: initial-color #f)") #f #f 283 20 283 31 ("error" "throw-cancel" "=" "CommDlgExtendedError" "code" "logfont:" "Font" "ChooseFont" "0" "CF_INITTOLOGFONTSTRUCT" "CF_NOSCRIPTSEL" "CF_EFFECTS" "CF_SCREENFONTS" "bitwise-ior" "Flags" "get-ref" "get-ref~" "rgbColors" "lpLogFont" "get-toplevel" "get-handle" "get-handle~" "hwndOwner" "size-of" "lStructSize" "set" "LOGFONT" "get-logfont" "get-logfont~" "if" "logfont" "CHOOSEFONT" "new" "r" "let" "close-all-popups" "choose-font" "unimplemented" "initial-color" "initial-color:" "initial-font" "initial-font:")}
      {Lisp-Entry "parse-choose-file-string" definition () ("buffer") #f #f 307 13 307 37 ("1" "+" "loop" "WCHAR-subarray" "WCHAR-string" "cons" "if" "WCHAR-array-ref" "eq?" "end-of-string?" "start-of-string?" "0" "offset" "iterate" "let" "buffer")}
      {Lisp-Entry "extensions-filter" definition (public) ("extensions") #f #f 321 20 321 37 ("get-output" "get-output~" "join" "cdr" "car" "put" "put~" "ext" "lambda" "for-each" "1" "make-string" "separator" "List-Factory" "new" "dst" "let" "not" "if" "NULL" "extensions")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "platform" "windows.jazz"} 241761214. jazz
    {Lisp-Entry "jazz.ui.print.platform.windows" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.dialog" "jazz.ui" "jazz.platform.cairo.cairo-windows" "jazz.platform" "jazz.library" "jazz.graphic")}
      {Lisp-Entry "platform-print-document" definition (package) ("view") #f #f 53 21 53 44 ("print-job" "print-job~" "nb-copies:" "to:" "and" "from:" "selection?:" "Printer-Job" "job" "LOGPIXELSX" "GetDeviceCaps" "resolution" "get-page-setup" "get-page-setup~" "page-setup" "cairo_win32_surface_create" "Surface" "new" "surface" "let" "print-picture" "print-picture~" "if" "print-dialog" "orientation" "nb-copies" "to" "from" "pages?" "selection?" "print-to-file?" "hdc" "receive" "view")}
      {Lisp-Entry "delete-existing" definition () ("directory" "filename") #f #f 64 13 64 28 ("recursive?:" "delete-file" "delete-file~" "get-name" "get-name~" "matches?" "matches?~" "when" "file" "lambda" "iterate-directory" "iterate-directory~" "format" "Regular-Expression" "new" "regexp" "let" "filename" "directory")}
      {Lisp-Entry "platform-print-picture" definition (package) ("view") #f #f 73 21 73 43 ("message-box" "print-job" "print-job~" "Picture-Job" "new" "job" "LOGPIXELSX" "desktop-surface" "GetDeviceCaps" "resolution" "get-page-setup" "get-page-setup~" "page-setup" "let*" "delete-existing" "filename" "choose-directory" "directory" "let" "view")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "ui" "resizer" "platform" "windows.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.resizer.platform.windows" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.platform")}
      {Lisp-Entry "Part-Cursor" constant () () #f #f 43 10 43 21 ("IDC_ARROW" "IDC_SIZEWE" "IDC_SIZENESW" "1" "IDC_SIZENS" "0" "IDC_SIZENWSE" "-1" "cons" "list")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "platform" "windows.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.ui.window.platform.windows" module (protected) () #f #f 39 18 39 49 ("message-callback" "set-process-hwnd-message" "Desktop" "<Desktop>" "Dialog" "<Dialog>" "Toplevel" "<Toplevel>" "Palette" "<Palette>" "Popup" "<Popup>" "External-Frame" "<External-Frame>" "register-window-class" "Window" "<Window>" "jazz")
      {Lisp-Entry "export" export () () #f #f 42 1 42 7 ("jazz.ui.window.platform.independant")}
      {Lisp-Entry "import" import () () #f #f 45 1 45 7 ("jazz.ui.window.platform.independant" "jazz.ui" "jazz.system" "jazz.snapshot" "jazz.platform.cairo" "jazz.platform" "jazz.library" "jazz.io" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "unprocessed" definition (public) () #f #f 62 19 62 30 ("unprocessed")}
      {Lisp-Entry "processed" definition (public) () #f #f 63 19 63 28 ("processed")}
      {Lisp-Entry "processed-result" definition () ("return") #f #f 66 13 66 29 ("cadr" "0" "cdr" "null?" "processed" "car" "eq?" "pair?" "and" "if" "return")}
      {Lisp-Entry "Windows-Table" definition (public) () #f #f 79 19 79 32 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "get-window" definition (public inline) ("hwnd") #f #f 83 27 83 37 ("Windows-Table" "table-ref" "foreign-address" "foreign?" "if" "let" "hwnd")}
      {Lisp-Entry "set-window" definition (public inline) ("hwnd" "window") #f #f 88 27 88 37 ("table-clear" "foreign-address" "Windows-Table" "table-set!" "if" "window" "hwnd")}
      {Lisp-Entry "in-creation" definition () () #f #f 95 12 95 23 ()}
      {Lisp-Entry "set-in-creation" definition () ("in") #f #f 98 13 98 28 ("in-creation" "set!" "in")}
      {Lisp-Entry "get-in-creation" definition () () #f #f 102 13 102 28 ("in-creation")}
      {Lisp-Entry "window-class" generic/specific () () ("<Window>") #f 106 10 106 22 ("CLASS_ATOM")}
      {Lisp-Entry "class-style" definition (package) () #f #f 110 21 110 32 ("CS_DBLCLKS" "bitwise-ior")}
      {Lisp-Entry "class-background" definition (package) () #f #f 114 21 114 37 ("COLOR_BTNFACE" "GetSysColorBrush")}
      {Lisp-Entry "get-class-background" definition (package) ("handle") #f #f 118 21 118 41 ("GCL_HBRBACKGROUND" "GetClassLong" "handle")}
      {Lisp-Entry "platform-erase-background" definition (package) ("handle") #f #f 122 21 122 46 ("unprocessed" "handle")}
      {Lisp-Entry "CLASS_ATOM" definition (package) () #f #f 126 20 126 30 ()}
      {Lisp-Entry "register-window-class" definition () () #f #f 130 13 130 34 ("RegisterClassEx" "CLASS_ATOM" "set!" "16" "WNDCLASSEX-hIconSm-set!" "WNDCLASSEX-lpszClassName-set!" "WNDCLASSEX-lpszMenuName-set!" "WNDCLASSEX-hbrBackground-set!" "NULL" "WNDCLASSEX-hCursor-set!" "32" "load-product-icon" "WNDCLASSEX-hIcon-set!" "WNDCLASSEX-hInstance-set!" "WNDCLASSEX-cbWndExtra-set!" "0" "WNDCLASSEX-cbClsExtra-set!" "call-process-hwnd-message" "WNDCLASSEX-lpfnWndProc-set!" "class-style" "WNDCLASSEX-style-set!" "WNDCLASSEX-sizeof" "WNDCLASSEX-cbSize-set!" "WNDCLASSEX-make" "wc" "class-background" "background" "current-instance" "instance" "let")}
      {Lisp-Entry "load-product-icon" definition (package) ("cx" "cy") #f #f 149 21 149 38 ("LR_LOADFROMFILE" "NULL" "file-exists?" "if" "format" "kernel-install" "string-append" "file" "jazz" "jazz-product" "or" "product" "let" "LR_SHARED" "IMAGE_ICON" "current-instance" "LoadImage" "cy" "cx")}
      {Lisp-Entry "window-style" generic/specific () ("rest") ("<Window>") #f 162 10 162 22 ("WS_CLIPSIBLINGS" "WS_CLIPCHILDREN" "WS_CHILD" "bitwise-ior" "rest")}
      {Lisp-Entry "window-style" generic/specific () ("rest") ("<External-Frame>") #f 168 11 168 23 ("WS_CLIPSIBLINGS" "WS_CLIPCHILDREN" "WS_SYSMENU" "WS_OVERLAPPEDWINDOW" "WS_POPUP" "bitwise-ior" "rest")}
      {Lisp-Entry "window-style" generic/specific () ("rest") ("<Popup>") #f 176 11 176 23 ("WS_CLIPCHILDREN" "WS_POPUP" "bitwise-ior" "rest")}
      {Lisp-Entry "window-style" generic/specific () ("rest") ("<Palette>") #f 181 11 181 23 ("WS_CLIPCHILDREN" "WS_OVERLAPPEDWINDOW" "WS_POPUP" "bitwise-ior" "rest")}
      {Lisp-Entry "window-style" generic/specific () ("rest") ("<Toplevel>") #f 187 11 187 23 ("WS_SYSMENU" "WS_MINIMIZEBOX" "WS_OVERLAPPEDWINDOW" "WS_POPUP" "WS_CLIPCHILDREN" "WS_CLIPSIBLINGS" "bitwise-ior" "rest")}
      {Lisp-Entry "window-style" generic/specific () ("rest") ("<Dialog>") #f 196 11 196 23 ("WS_SYSMENU" "closable?:" "0" "WS_THICKFRAME" "not-found:" "sizable?:" "getf" "if" "WS_DLGFRAME" "WS_CAPTION" "WS_OVERLAPPED" "WS_BORDER" "WS_POPUP" "WS_CLIPSIBLINGS" "WS_CLIPCHILDREN" "bitwise-ior" "rest")}
      {Lisp-Entry "window-ex-style" generic/specific () ("rest") ("<Window>") #f 208 10 208 25 ("0" "rest")}
      {Lisp-Entry "window-ex-style" generic/specific () ("rest") ("<External-Frame>") #f 212 11 212 26 ("0" "rest")}
      {Lisp-Entry "window-ex-style" generic/specific () ("rest") ("<Popup>") #f 216 11 216 26 ("WS_EX_TOOLWINDOW" "rest")}
      {Lisp-Entry "window-ex-style" generic/specific () ("rest") ("<Palette>") #f 220 11 220 26 ("WS_EX_TOOLWINDOW" "rest")}
      {Lisp-Entry "window-ex-style" generic/specific () ("rest") ("<Toplevel>") #f 224 11 224 26 ("WS_EX_APPWINDOW" "rest")}
      {Lisp-Entry "window-ex-style" generic/specific () ("rest") ("<Dialog>") #f 228 11 228 26 ("WS_EX_DLGMODALFRAME" "rest")}
      {Lisp-Entry "window-parent" definition (package) ("window") #f #f 232 21 232 34 ("NULL" "get-handle" "get-handle~" "if" "get-parent" "get-parent~" "parent" "let" "window")}
      {Lisp-Entry "window-default-parent" definition (package) ("window") #f #f 239 21 239 42 ("else" "get-toplevel" "Dialog" "typecase" "window")}
      {Lisp-Entry "create-handle" generic/specific () ("rest") ("<Window>") #f 245 10 245 23 ("current-instance" "window-parent" "500" "0" "window-style" "NULL" "window-class" "CLASS_ATOM" "window" "window-ex-style" "CreateWindowEx" "rest")}
      {Lisp-Entry "create-handle" generic/specific () ("rest") ("<Desktop>") #f 260 11 260 24 ("GetDesktopWindow" "rest")}
      {Lisp-Entry "prepare-handle" definition (package) ("window" "rest") #f #f 264 21 264 35 ("DragAcceptFiles" "GetLastError" "window-parent" "parent:" "window-ex-style" "ex-style:" "window-style" "style:" "window-class" "class:" "list" "error" "not" "if" "create-handle" "let" "set-in-creation" "others" "hwnd" "bind-keywords" "rest" "window")}
      {Lisp-Entry "bring-window-to-top" definition (package) ("hwnd") #f #f 276 21 276 40 ("BringWindowToTop" "hwnd")}
      {Lisp-Entry "window-state" definition (package) ("handle") #f #f 280 21 280 33 ("WINDOWPLACEMENT-free" "restored" "else" "maximized" "SW_SHOWMAXIMIZED" "minimized" "SW_SHOWMINIMIZED" "WINDOWPLACEMENT-showCmd-ref" "ecase" "prog1" "GetWindowPlacement" "WINDOWPLACEMENT-sizeof" "WINDOWPLACEMENT-length-set!" "WINDOWPLACEMENT-make" "placement" "let" "handle")}
      {Lisp-Entry "set-window-placement" definition (package) ("handle" "position" "size") #f #f 291 21 291 41 ("WINDOWPLACEMENT-free" "SetWindowPlacement" "get-height" "get-height~" "RECT-bottom-set!" "get-width" "get-width~" "+" "RECT-right-set!" "get-v" "get-v~" "RECT-top-set!" "get-h" "get-h~" "RECT-left-set!" "WINDOWPLACEMENT-rcNormalPosition-ref" "rect" "SW_SHOWNORMAL" "WINDOWPLACEMENT-showCmd-set!" "WINDOWPLACEMENT-sizeof" "WINDOWPLACEMENT-length-set!" "WINDOWPLACEMENT-make" "placement" "let" "size" "position" "handle")}
      {Lisp-Entry "show-window" definition (package) ("handle") #f #f 304 21 304 32 ("SW_SHOWNORMAL" "ShowWindow" "handle")}
      {Lisp-Entry "show-maximized" definition (package) ("handle") #f #f 308 21 308 35 ("SW_MAXIMIZE" "ShowWindow" "handle")}
      {Lisp-Entry "show-restored" definition (package) ("handle") #f #f 312 21 312 34 ("SW_RESTORE" "ShowWindow" "handle")}
      {Lisp-Entry "hide-window" definition (package) ("handle") #f #f 316 21 316 32 ("SW_HIDE" "ShowWindow" "handle")}
      {Lisp-Entry "minimize-window" definition (package) ("handle") #f #f 320 21 320 36 ("SW_MINIMIZE" "ShowWindow" "handle")}
      {Lisp-Entry "maximize-window" definition (package) ("handle") #f #f 324 21 324 36 ("SW_MAXIMIZE" "ShowWindow" "handle")}
      {Lisp-Entry "restore-window" definition (package) ("handle") #f #f 328 21 328 35 ("SW_RESTORE" "ShowWindow" "handle")}
      {Lisp-Entry "destroy-window" definition (package) ("handle") #f #f 332 21 332 35 ("DestroyWindow" "handle")}
      {Lisp-Entry "dispatch-message" definition () ("window" "msg" "<int>" "wparam" "<int>" "lparam" "<int>") #f #f 336 13 336 29 ("processed-result" "get-handle" "get-handle~" "DefWindowProc" "unprocessed" "eq?" "if" "process-window-message" "return" "let" "lparam" "wparam" "int" "<int>" "msg" "window")}
      {Lisp-Entry "setup-events" definition (package) () #f #f 348 21 348 33 ("event-thread" "thread-priority-boost-set!" "NULL" "0" "get-toplevel-hwnd" "SetTimer" "get-events-single-threaded?" "if" "1" "events-heartbeat" "define")}
      {Lisp-Entry "c-stack-unwinding-restart" define () () #f #f 365 8 365 33 ()}
      {Lisp-Entry "with-c-stack-unwinding-entry" definition () ("thunk") #f #f 368 13 368 41 ("set!" "c-stack-unwinding-restart" "if" "error" "restart" "lambda" "continuation-checkpoint" "result" "let" "thunk")}
      {Lisp-Entry "with-c-stack-unwinding-exit" definition () ("thunk" "cleanup") #f #f 382 13 382 40 ("continuation-graft" "c-stack-unwinding-restart" "set!" "error" "restart" "continuation-checkpoint" "exit" "lambda" "continuation-capture" "cleanup" "thunk")}
      {Lisp-Entry "process-messages-single-threaded" definition (package) ("thunk") #f #f 399 21 399 53 ("MSG-free" "when" "0" "NULL" "GetMessage" "message" "loop" "MSG-make" "let" "proper-tail-calls" "declare" "DispatchMessage" "lambda" "with-c-stack-unwinding-entry" "TranslateMessage" "translate-shortcut" "unless" "msg" "process-message" "define" "thunk")}
      {Lisp-Entry "process-messages-multi-threaded" definition (package) () #f #f 420 21 420 52 ("message-pump" "new-thread" "thread-loop?" "when" "read" "loop" "current-thread" "thread" "QS_ALLINPUT" "open-event-queue" "port" "MSG-free" "PM_REMOVE" "0" "NULL" "PeekMessage" "while" "MSG-make" "let" "proper-tail-calls" "declare" "process" "DispatchMessage" "TranslateMessage" "translate-shortcut" "unless" "lambda" "execute-event" "msg" "process-message" "define")}
      {Lisp-Entry "callback-level" definition () () #f #f 458 12 458 26 ("0")}
      {Lisp-Entry "callback-thread-mutex" definition () () #f #f 461 12 461 33 ("callback-thread-mutex" "make-mutex")}
      {Lisp-Entry "callback-thread-condition" definition () () #f #f 464 12 464 37 ("callback-thread-condition" "make-condition")}
      {Lisp-Entry "message-callback" definition () ("hwnd" "<foreign>" "msg" "<int>" "wparam" "<int>" "lparam" "<int>") #f #f 468 13 468 29 ("callback-thread-condition" "current-thread" "interleaved-problem-detected" "terminal" "decrease!" "=" "iterate" "call-event" "unwind-protect" "mutex-unlock!" "prog1" "callback-level" "increase!" "callback-thread-mutex" "mutex-lock!" "begin" "level" "1" "exit" "reason:" "snapshot-process" "primordial-thread?" "get-events-single-threaded?" "lambda" "with-c-stack-unwinding-exit" "dispatch-message" "DefWindowProc" "if" "set-in-creation" "set-window" "set-handle" "set-handle~" "set!" "get-in-creation" "not" "and" "when" "get-window" "window" "let" "process" "define" "lparam" "wparam" "int" "<int>" "msg" "foreign" "<foreign>" "hwnd")}
      {Lisp-Entry "Symbolic-Keys" definition (public) () #f #f 527 19 527 32 ("eqv?" "test:" "Divide" "VK_DIVIDE" "Multiply" "VK_MULTIPLY" "Subtract" "VK_SUBTRACT" "Add" "VK_ADD" "Delete" "VK_DELETE" "Pause" "VK_PAUSE" "Insert" "VK_INSERT" "Next" "VK_NEXT" "Prior" "VK_PRIOR" "Down" "VK_DOWN" "Right" "VK_RIGHT" "Up" "VK_UP" "Left" "VK_LEFT" "End" "VK_END" "Home" "VK_HOME" "Tab" "VK_TAB" "Space" "VK_SPACE" "Return" "VK_RETURN" "Backspace" "VK_BACK" "Escape" "VK_ESCAPE" "F12" "VK_F12" "F11" "VK_F11" "F10" "VK_F10" "F9" "VK_F9" "F8" "VK_F8" "F7" "VK_F7" "F6" "VK_F6" "F5" "VK_F5" "F4" "VK_F4" "F3" "VK_F3" "F2" "VK_F2" "F1" "VK_F1" "VK_OEM_7" "VK_OEM_6" "VK_OEM_5" "VK_OEM_4" "VK_OEM_3" "VK_OEM_2" "VK_OEM_1" "VK_OEM_PERIOD" "VK_OEM_COMMA" "VK_OEM_PLUS" "VK_OEM_MINUS" "cons" "list" "list->table")}
      {Lisp-Entry "translate-shortcut" definition () ("msg") #f #f 576 13 576 31 ("Shortcut" "new" "dispatch-shortcut" "dispatch-shortcut~" "MSG-wParam-ref" "WM_SYSKEYDOWN" "WM_KEYDOWN" "=" "MSG-message-ref" "message" "not" "if" "get-application" "appl" "integer->char" "Symbolic-Keys" "table-ref" "or" "VK_LMENU" "VK_MENU" "VK_CONTROL" "VK_SHIFT" "/=" "and" "code" "key" ":control" "control-down?" ":shift" "shift-down?" ":alt" "alt-down?" "cons" "set!" "when" "modifier" "down?" "lambda" "try" "let" "modifiers" "define" "msg")}
      {Lisp-Entry "process-window-message" definition () ("window" "msg" "<int>" "wparam" "<int>" "lparam" "<int>") #f #f 614 13 614 35 ("unprocessed-message" "unprocessed-message~" "timer-pulse" "timer-pulse~" "WM_TIMER" "settings-change" "WM_SETTINGCHANGE" "drop-files" "drop-files~" "WM_DROPFILES" "focus-lose" "focus-lose~" "WM_KILLFOCUS" "focus-gain" "focus-gain~" "WM_SETFOCUS" "on-close" "on-close~" "WM_CLOSE" "deactivate-application" "deactivate-application~" "activate-application" "activate-application~" "WM_ACTIVATEAPP" "on-activate" "on-activate~" "active" "inactive" "WA_INACTIVE" "kind" "WM_ACTIVATE" "MA_NOACTIVATE" "processed" "list" "on-mouse-activate" "on-mouse-activate~" "mouse-activate?" "mouse-activate?~" "WM_MOUSEACTIVATE" "mouse-leave" "mouse-leave~" "WM_MOUSELEAVE" "call-size-change" "call-size-change~" "0" "/=" "or" "height" "width" "eq?" "unless" "state" "let" "WM_SIZE" "call-position-change" "call-position-change~" "WM_MOVE" "integer->char" "call-key-press" "call-key-press~" "WM_CHAR" "key-up" "key-up~" "WM_KEYUP" "key-down" "key-down~" "WM_KEYDOWN" "system-key-up" "system-key-up~" "WM_SYSKEYUP" "unprocessed" "system-key-down" "system-key-down~" "VK_MENU" "if" "WM_SYSKEYDOWN" "call-context-menu" "call-context-menu~" "WM_CONTEXTMENU" "right-mouse-up" "right-mouse-up~" "WM_RBUTTONUP" "right-mouse-down" "right-mouse-down~" "WM_RBUTTONDOWN" "middle-mouse-up" "middle-mouse-up~" "WM_MBUTTONUP" "middle-mouse-down" "middle-mouse-down~" "WM_MBUTTONDOWN" "double-click" "double-click~" "WM_LBUTTONDBLCLK" "mouse-up" "mouse-up~" "WM_LBUTTONUP" "mouse-down" "mouse-down~" "WM_LBUTTONDOWN" "mouse-wheel" "mouse-wheel~" "WM_MOUSEWHEEL" "mouse-move" "mouse-move~" "WM_MOUSEMOVE" "HTCLIENT" "loword" "=" "cursor-update" "cursor-update~" "WM_SETCURSOR" "paint" "paint~" "get-handle" "get-handle~" "platform-get-update-region" "region" "with" "WM_PAINT" "erase-background" "erase-background~" "WM_ERASEBKGND" "restored" "else" "maximized" "SIZE_MAXIMIZED" "minimized" "SIZE_MINIMIZED" "ecase" "convert-state" "get-wheel-delta-wparam" "signed-hiword" "get-y-lparam" "signed-loword" "get-x-lparam" "define" "lparam" "wparam" "int" "<int>" "msg" "window")}
      {Lisp-Entry "set-capture" definition (public) ("handle") #f #f 671 20 671 31 ("SetCapture" "handle")}
      {Lisp-Entry "unset-capture" definition (public) () #f #f 675 20 675 33 ("ReleaseCapture")}
      {Lisp-Entry "with-platform-painting" definition (package) ("window" "platform-data" "proc") #f #f 679 21 679 43 ("processed" "PAINTSTRUCT-free" "EndPaint" "close" "close~" "unwind-protect" "cairo_win32_surface_create" "Surface" "new" "surface" "BeginPaint" "hdc" "PAINTSTRUCT-make" "ps" "get-handle" "get-handle~" "handle" "let" "debugging-with-platform-painting" "debug-painting?" "if" "proc" "platform-data" "window")}
      {Lisp-Entry "debugging-with-platform-painting" definition () ("window" "platform-data" "proc") #f #f 694 13 694 45 ("processed" "close" "close~" "unwind-protect" "cairo_win32_surface_create" "Surface" "new" "surface" "NULL" "ValidateRgn" "GetDC" "hdc" "get-handle" "get-handle~" "handle" "let" "proc" "platform-data" "window")}
      {Lisp-Entry "get-window-surface" definition (public) ("window") #f #f 705 20 705 38 ("get-handle" "get-handle~" "GetDC" "cairo_win32_surface_create" "window")}
      {Lisp-Entry "settings-change" definition () ("window" "wparam") #f #f 709 13 709 28 ("set-fullscreen?" "set-fullscreen?~" "Toplevel" "is?" "when" "SPI_SETWORKAREA" "ecase" "wparam" "window")}
      {Lisp-Entry "get-style" definition () ("handle") #f #f 722 13 722 22 ("GWL_STYLE" "GetWindowLong" "handle")}
      {Lisp-Entry "set-style" definition () ("handle" "style") #f #f 726 13 726 22 ("GWL_STYLE" "SetWindowLong" "style" "handle")}
      {Lisp-Entry "get-ex-style" definition () ("handle") #f #f 730 13 730 25 ("GWL_EXSTYLE" "GetWindowLong" "handle")}
      {Lisp-Entry "set-ex-style" definition () ("handle" "style") #f #f 734 13 734 25 ("GWL_EXSTYLE" "SetWindowLong" "style" "handle")}
      {Lisp-Entry "child-window?" definition () ("handle") #f #f 738 13 738 26 ("WS_CHILD" "get-style" "mask-bit-set?" "handle")}
      {Lisp-Entry "get-toplevel-hwnd" definition () () #f #f 747 13 747 30 ("get-handle" "get-handle~" "when" "get-toplevel" "toplevel" "let")}
      {Lisp-Entry "get-layered?" definition () ("handle") #f #f 758 13 758 25 ("WS_EX_LAYERED" "get-ex-style" "mask-bit-set?" "handle")}
      {Lisp-Entry "set-layered?" definition () ("handle" "flag") #f #f 762 13 762 25 ("WS_EX_LAYERED" "GetWindowLong" "mask-bit-set" "GWL_EXSTYLE" "SetWindowLong" "flag" "handle")}
      {Lisp-Entry "set-alpha-blending" definition () ("handle" "n") #f #f 766 13 766 31 ("RDW_INVALIDATE" "RDW_ERASE" "bitwise-ior" "NULL" "RedrawWindow" "LWA_ALPHA" "0" "SetLayeredWindowAttributes" "set-layered?" "n" "handle")}
      {Lisp-Entry "track-mouse-leave" definition (public) ("handle") #f #f 777 20 777 37 ("TME_LEAVE" "track-mouse-event" "handle")}
      {Lisp-Entry "cancel-mouse-leave-tracking" definition (public) ("handle") #f #f 781 20 781 47 ("TME_LEAVE" "TME_CANCEL" "bitwise-ior" "track-mouse-event" "handle")}
      {Lisp-Entry "track-mouse-event" definition () ("handle" "flags" "(time: time HOVER_DEFAULT)") #f #f 785 13 785 30 ("TRACKMOUSEEVENT-free" "TrackMouseEvent" "TRACKMOUSEEVENT-dwHoverTime-set!" "TRACKMOUSEEVENT-hwndTrack-set!" "TRACKMOUSEEVENT-dwFlags-set!" "TRACKMOUSEEVENT-sizeof" "TRACKMOUSEEVENT-cbSize-set!" "TRACKMOUSEEVENT-make" "rec" "let" "HOVER_DEFAULT" "time" "time:" "flags" "handle")}
      {Lisp-Entry "platform-set-parent" definition (package) ("handle" "parent") #f #f 800 21 800 40 ("NULL" "get-handle" "get-handle~" "if" "SetParent" "parent" "handle")}
      {Lisp-Entry "set-window-title" definition (package) ("handle" "title") #f #f 804 21 804 37 ("SetWindowText" "title" "handle")}
      {Lisp-Entry "get-window-owner-handle" definition (package) ("handle") #f #f 808 21 808 44 ("GW_OWNER" "GetWindow" "handle")}
      {Lisp-Entry "platform-get-first-child" definition (package) ("handle") #f #f 812 21 812 45 ("GW_CHILD" "GetWindow" "handle")}
      {Lisp-Entry "platform-get-first-visible-child" definition (package) ("handle") #f #f 816 21 816 53 ("platform-get-next-window-handle" "platform-is-window-visible?" "if" "platform-get-first-child" "child-handle" "loop" "let" "handle")}
      {Lisp-Entry "platform-get-next-window-handle" definition (package) ("handle") #f #f 825 21 825 52 ("GW_HWNDNEXT" "GetWindow" "handle")}
      {Lisp-Entry "platform-is-window-visible?" definition (package) ("handle") #f #f 829 21 829 48 ("IsWindowVisible" "handle")}
      {Lisp-Entry "get-top-window-handle" definition () ("handle") #f #f 833 13 833 34 ("GetTopWindow" "handle")}
      {Lisp-Entry "acquire-point" definition (public) ("to-handle" "from-handle" "shape") #f #f 837 20 837 33 ("POINT-free" "POINT->point" "prog1" "1" "MapWindowPoints" "point->POINT" "acquired" "let" "error" "not" "when" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "acquire-rect" definition (public) ("to-handle" "from-handle" "shape") #f #f 846 20 846 32 ("RECT-free" "RECT->rect" "prog1" "2" "RECT->POINTS" "MapWindowPoints" "rect->RECT" "acquired" "let" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "platform-get-position" definition (package) ("handle" "parent-handle") #f "<Point>" 853 21 853 42 ("RECT-free" "RECT-top-ref" "RECT-left-ref" "new" "prog1" "2" "RECT->POINTS" "NULL" "MapWindowPoints" "child-window?" "and" "when" "GetWindowRect" "RECT-make" "rect" "let" "Point" "<Point>" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-position" definition (package) ("handle" "pos") #f #f 862 21 862 42 ("SWP_NOACTIVATE" "SWP_NOZORDER" "SWP_NOSIZE" "bitwise-ior" "0" "get-v" "get-v~" "get-h" "get-h~" "NULL" "SetWindowPos" "pos" "handle")}
      {Lisp-Entry "platform-get-size" definition (package) ("handle") #f "<Dimension>" 866 21 866 38 ("RECT-free" "RECT-bottom-ref" "RECT-right-ref" "new" "prog1" "GetClientRect" "RECT-make" "rect" "let" "Dimension" "<Dimension>" "handle")}
      {Lisp-Entry "platform-get-window-size" definition (package) ("handle") #f "<Dimension>" 873 21 873 45 ("RECT-free" "RECT-top-ref" "RECT-bottom-ref" "RECT-left-ref" "RECT-right-ref" "-" "new" "prog1" "GetWindowRect" "RECT-make" "rect" "let" "Dimension" "<Dimension>" "handle")}
      {Lisp-Entry "platform-set-window-size" definition (package) ("handle" "size") #f #f 881 21 881 45 ("SWP_NOACTIVATE" "SWP_NOZORDER" "SWP_NOMOVE" "SWP_NOCOPYBITS" "bitwise-ior" "get-height" "get-height~" "get-width" "get-width~" "0" "NULL" "SetWindowPos" "size" "handle")}
      {Lisp-Entry "platform-get-rect" definition (package) ("handle" "parent-handle") #f "<Rect>" 885 21 885 38 ("RECT-free" "RECT-bottom-ref" "RECT-right-ref" "RECT-top-ref" "RECT-left-ref" "new" "prog1" "2" "RECT->POINTS" "NULL" "MapWindowPoints" "when" "GetWindowRect" "RECT-make" "rect" "let" "Rect" "<Rect>" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-rect" definition (package) ("handle" "rect") #f #f 894 21 894 38 ("SWP_NOACTIVATE" "SWP_NOZORDER" "bitwise-ior" "rect-height" "rect-width" "get-top" "get-top~" "get-left" "get-left~" "NULL" "SetWindowPos" "rect" "handle")}
      {Lisp-Entry "platform-get-bounds" definition (package) ("handle") #f "<Rect>" 898 21 898 40 ("RECT-free" "RECT-bottom-ref" "RECT-right-ref" "RECT-top-ref" "RECT-left-ref" "new" "prog1" "2" "NULL" "MapWindowPoints" "GetWindowRect" "RECT-make" "rect" "let" "Rect" "<Rect>" "handle")}
      {Lisp-Entry "platform-mouse-position" definition (package) () #f "<Point>" 906 21 906 44 ("POINT-free" "POINT-y-ref" "POINT-x-ref" "new" "prog1" "GetCursorPos" "POINT-make" "point" "let" "Point" "<Point>")}
      {Lisp-Entry "platform-window-from-point" definition (package) ("point") #f #f 913 21 913 47 ("POINT-free" "WindowFromPoint" "prog1" "get-v" "get-v~" "POINT-y-set!" "get-h" "get-h~" "POINT-x-set!" "POINT-make" "pt" "let" "point")}
      {Lisp-Entry "platform-child-window-from-point" definition (package) ("handle" "point") #f #f 921 21 921 53 ("POINT-free" "CWP_SKIPTRANSPARENT" "CWP_SKIPDISABLED" "CWP_SKIPINVISIBLE" "bitwise-ior" "ChildWindowFromPointEx" "prog1" "get-v" "get-v~" "POINT-y-set!" "get-h" "get-h~" "POINT-x-set!" "POINT-make" "pt" "let" "point" "handle")}
      {Lisp-Entry "platform-move-window" definition (package) ("handle" "x" "y" "cx" "cy") #f #f 929 21 929 41 ("MoveWindow" "cy" "cx" "y" "x" "handle")}
      {Lisp-Entry "platform-window-enabled?" definition (package) ("handle") #f #f 933 21 933 45 ("IsWindowEnabled" "handle")}
      {Lisp-Entry "platform-enable-window" definition (package) ("handle") #f #f 937 21 937 43 ("EnableWindow" "handle")}
      {Lisp-Entry "platform-disable-window" definition (package) ("handle") #f #f 941 21 941 44 ("EnableWindow" "handle")}
      {Lisp-Entry "platform-get-client-rect" definition (package) ("handle") #f #f 945 21 945 45 ("RECT-free" "RECT->rect" "prog1" "GetClientRect" "RECT-make" "rect" "let" "handle")}
      {Lisp-Entry "platform-scroll-window" definition (package) ("handle" "delta" "rect" "clip-rect") #f #f 952 21 952 43 ("RECT-free" "NULL" "get-y" "get-y~" "get-x" "get-x~" "ScrollWindowEx" "prog1" "rect->RECT" "SW_INVALIDATE" "flags" "let" "clip-rect" "rect" "delta" "handle")}
      {Lisp-Entry "platform-invalidate-rect" definition (package) ("handle" "rect") #f #f 961 21 961 45 ("InvalidateRect" "lambda" "with-RECT" "when" "rect" "handle")}
      {Lisp-Entry "platform-invalidate-region" definition (package) ("handle" "region") #f #f 969 21 969 47 ("get-handle" "get-handle~" "InvalidateRgn" "when" "region" "handle")}
      {Lisp-Entry "platform-invalidate-window" definition (package) ("handle") #f #f 975 21 975 47 ("NULL" "InvalidateRect" "when" "handle")}
      {Lisp-Entry "platform-redraw-window" definition (package) ("handle" "rect" "region") #f #f 981 21 981 43 ("RECT-free" "get-handle" "get-handle~" "RedrawWindow" "prog1" "rect->RECT" "NULL" "not" "if" "RDW_ALLCHILDREN" "RDW_INVALIDATE" "RDW_UPDATENOW" "RDW_ERASENOW" "bitwise-ior" "flags" "let" "when" "region" "rect" "handle")}
      {Lisp-Entry "platform-get-update-rect" definition (package) ("handle") #f #f 993 21 993 45 ("RECT-free" "RECT->rect" "prog1" "GetUpdateRect" "RECT-make" "rect" "let" "handle")}
      {Lisp-Entry "platform-get-update-region" definition (package) ("handle") #f #f 1000 21 1000 47 ("get-handle" "get-handle~" "GetUpdateRgn" "Region" "new" "region" "let" "handle")}
      {Lisp-Entry "platform-update-window" definition (package) ("handle") #f #f 1006 21 1006 43 ("UpdateWindow" "handle")}
      {Lisp-Entry "platform-show-noactivate" definition (package) ("handle") #f #f 1010 21 1010 45 ("SWP_NOSIZE" "SWP_NOMOVE" "SWP_NOACTIVATE" "SWP_SHOWWINDOW" "bitwise-ior" "0" "HWND_TOP" "SetWindowPos" "handle")}
      {Lisp-Entry "platform-hide-noactivate" definition (package) ("handle") #f #f 1014 21 1014 45 ("SWP_NOSIZE" "SWP_NOMOVE" "SWP_NOACTIVATE" "SWP_HIDEWINDOW" "bitwise-ior" "0" "SetWindowPos" "handle")}
      {Lisp-Entry "platform-bring-window-to-front" definition (package) ("handle") #f #f 1018 21 1018 51 ("BringWindowToTop" "handle")}
      {Lisp-Entry "platform-send-window-to-back" definition (package) ("handle") #f #f 1022 21 1022 49 ("SWP_NOSIZE" "SWP_NOMOVE" "bitwise-ior" "0" "HWND_BOTTOM" "SetWindowPos" "handle")}
      {Lisp-Entry "platform-select-foreground-window" definition (package) ("handle") #f #f 1026 21 1026 54 ("SetForegroundWindow" "handle")}
      {Lisp-Entry "platform-get-window-handle-title" definition (package) ("handle") #f #f 1030 21 1030 53 ("WCHAR-array-free" "WCHAR-string" "str" "let" "GetWindowText" "WCHAR-array-make" "buffer" "1" "GetWindowTextLength" "+" "size" "let*" "handle")}
      {Lisp-Entry "platform-lock-window-update" definition (package) ("handle") #f #f 1039 21 1039 48 ("LockWindowUpdate" "handle")}
      {Lisp-Entry "platform-get-focus" definition (package) () #f #f 1048 21 1048 39 ("GetFocus")}
      {Lisp-Entry "platform-set-focus" definition (package) ("handle") #f #f 1052 21 1052 39 ("SetFocus" "handle")}
      {Lisp-Entry "Current-Cursor" definition (public) () #f #f 1065 19 1065 33 ()}
      {Lisp-Entry "Cursor-Cache" definition (public) () #f #f 1068 19 1068 31 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "Cursors" definition (public) () #f #f 1072 19 1072 26 (":horizontal-splitter" ":vertical-splitter" ":left-arrow" ":spy" ":zoom-out" ":zoom-in" ":zoom" ":closed-hand" ":opened-hand" "Cursor-Resource" ":move" "IDC_NO" ":no" "IDC_SIZEWE" ":west-east" "IDC_SIZEALL" ":all" "IDC_HAND" ":finger" "IDC_CROSS" ":cross" "IDC_IBEAM" ":ibeam" "IDC_WAIT" ":wait" "IDC_ARROW" ":arrow" "list")}
      {Lisp-Entry "load-cursor" definition () ("cursor") #f #f 1094 13 1094 24 ("table-set!" "Cursor-Cache" "table-ref" "or" "LR_LOADFROMFILE" "0" "IMAGE_CURSOR" "NULL" "LoadImage" "get-application" "get-resource" "get-resource~" "parse" "parse~" "ident" "let" "LoadCursorInt" "name" "load" "get-name" "get-name~" "number?" "if" "cursor-name" "define" "cursor")}
      {Lisp-Entry "get-named-cursor" definition () ("name") #f #f 1113 13 1113 29 ("cadr" "error" "not" "if" "Cursors" "assq" "info" "let" "name")}
      {Lisp-Entry "get-cursor" definition (public) () #f #f 1120 20 1120 30 ("Current-Cursor")}
      {Lisp-Entry "set-cursor" definition (public) ("cursor") #f #f 1124 20 1124 30 ("load-cursor" "SetCursor" "get-named-cursor" "symbol?" "if" "let" "set!" "Current-Cursor" "=" "unless" "cursor")}
      {Lisp-Entry "hide-cursor" definition (public) () #f #f 1131 20 1131 31 ("0" "ShowCursor" ">=" "while")}
      {Lisp-Entry "show-cursor" definition (public) () #f #f 1136 20 1136 31 ("0" "ShowCursor" "<" "while")}
      {Lisp-Entry "platform-redraw-view-only" definition (package) ("view" "hwnd") #f #f 1146 21 1146 46 ("DeleteObject" "InvalidateRgn" "redraw-view" "redraw-view~" "NULL" "ValidateRect" "GetUpdateRgn" "0" "CreateRectRgn" "hrgn" "let" "hwnd" "view")}
      {Lisp-Entry "platform-get-desktop" definition (package) () #f #f 1159 21 1159 41 ("GetDesktopWindow")}
      {Lisp-Entry "get-work-area" definition (public) () #f "<Rect>" 1168 20 1168 33 ("RECT-free" "RECT->rect" "prog1" "SPI_GETWORKAREA" "SystemParametersInfo" "RECT-make" "area" "ABE_BOTTOM" "-1" "ABE_RIGHT" "ABE_TOP" "0" "1" "expand-rect" "ABE_LEFT" "ecase" "ABS_ALWAYSONTOP" "ABS_AUTOHIDE" "mask-bit-set?" "and" "if" "get-taskbar-edge" "edge" "get-taskbar-state" "state" "let" "rect" "adjust-work-area-with-taskbar" "define" "Rect" "<Rect>")}
      {Lisp-Entry "get-taskbar-state" definition (public) () #f #f 1189 20 1189 37 ("APPBARDATA-free" "ABM_GETSTATE" "SHAppBarMessage" "prog1" "size-of" "cbSize" "set" "APPBARDATA" "new" "data" "let" "get-taskbar-state" "unimplemented")}
      {Lisp-Entry "get-taskbar-edge" definition (public) () #f #f 1198 20 1198 36 ("APPBARDATA-free" "uEdge" "get" "prog1" "ABM_GETTASKBARPOS" "SHAppBarMessage" "size-of" "cbSize" "set" "APPBARDATA" "new" "data" "let" "get-taskbar-edge" "unimplemented")}
      {Lisp-Entry "platform-drop-files" definition (package) ("window" "wparam") #f #f 1213 21 1213 40 ("POINT-free" "POINT->point" "receive-files" "receive-files~" "DragFinish" "DragQueryPoint" "POINT-make" "pt" "files" "WPARAM->HDROP" "naturals" "WCHAR-array-free" "anchorize" "anchorize~" "prog1" "tokenise-windows" "File" "else" "Directory" "directory" "pathname-type" "case" "new" "pathname" "WCHAR-string" "filename" "WCHAR-array-set!" "WCHAR-array-make" "buffer" "MAX_PATH" "size" "let*" "n" "lambda" "map" "0" "NULL" "#xFFFFFFFF" "DragQueryFile" "count" "let" "hdrop" "received-files" "define" "wparam" "window")}}})
"x11"
 ({Lisp-File-Entry {File :context "src" "jazz" "ui" "clipboard" "platform" "x11.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.clipboard.platform.x11" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.dialog" "jazz.system" "mac" "cond" "jazz.platform.carbon.clipboard" "jazz.platform")}
      {Lisp-Entry "initialize-clipboard" definition (package) () #f #f 54 25 54 45 ("carbon-initialize-clipboard")}
      {Lisp-Entry "initialize-clipboard" definition (package) () #f #f 57 25 57 45 ()}
      {Lisp-Entry "get-clipboard-text" definition (public) ("(format: format #f)") #f #f 63 24 63 42 ("read-line" "input" "lambda" "cr" "eol-encoding:" "UTF-16" "char-encoding:" "init:" "list" "call-with-input-u8vector" "u8vector?" "not" "if" "carbon-get-clipboard-text" "u8vect" "let" "format" "format:")}
      {Lisp-Entry "get-clipboard-text" definition (public) ("(format: format #f)" "(selection: selection XA_CLIPBOARD)") #f #f 71 23 71 41 ("current-window" "get-handle" "get-handle~" "x11-default-display" "x11-get-clipboard-string" "XA_CLIPBOARD" "selection" "selection:" "format" "format:")}
      {Lisp-Entry "set-clipboard-text" definition (public) ("text" "(format: format #f)") #f #f 77 24 77 42 ("carbon-set-clipboard-text" "get-output-u8vector" "u8vect" "display" "cr" "eol-encoding:" "UTF-16" "char-encoding:" "list" "open-output-u8vector" "output" "let" "format" "format:" "text")}
      {Lisp-Entry "set-clipboard-text" definition (public) ("text" "(format: format #f)" "(selection: selection XA_CLIPBOARD)") #f #f 83 23 83 41 ("current-window" "get-handle" "get-handle~" "x11-default-display" "x11-set-clipboard-string" "XA_CLIPBOARD" "selection" "selection:" "format" "format:" "text")}
      {Lisp-Entry "mouse-select-copy" definition (package) ("proc") #f #f 94 25 94 42 ("proc")}
      {Lisp-Entry "mouse-select-copy" definition (package) ("proc") #f #f 97 25 97 42 ("XA_PRIMARY" "selection:" "set-clipboard-text" "not" "if" "text" "let" "proc")}
      {Lisp-Entry "middle-mouse-paste" definition (package) ("proc") #f #f 107 25 107 43 ("proc")}
      {Lisp-Entry "middle-mouse-paste" definition (package) ("proc") #f #f 110 25 110 43 ("not" "if" "XA_PRIMARY" "selection:" "get-clipboard-text" "text" "let" "proc")}
      {Lisp-Entry "register-clipboard-format" definition (public undocumented) ("name" "format") #f #f 123 33 123 58 ("Formats" "table-set!" "RegisterClipboardFormat" "id" "let" "format" "name")}
      {Lisp-Entry "clipboard-format-available?" definition (public undocumented) ("format") #f #f 129 33 129 60 ("available-clipboard-formats" "member?" "error" "Formats" "table-ref" "or" "get-format" "define" "format")}
      {Lisp-Entry "available-clipboard-formats" definition (public undocumented) () #f #f 139 33 139 60 ("get-output" "get-output~" "put" "put~" "/=" "when" "EnumClipboardFormats" "format" "0" "previous" "iter" "List-Factory" "new" "formats" "let" "lambda" "with-opened-clipboard")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "ui" "dialog" "platform" "x11.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.dialog.platform.x11" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.window" "jazz.ui" "jazz.system" "jazz.platform" "jazz.library")}
      {Lisp-Entry "choose-file" definition (public) ("(title: title #f)" "(directory: directory #f)" "(filenames: filenames #f)" "(extensions: extensions #f)" "(multiple-selection?: multiple-selection? #f)" "(anchors: anchors #f)" "(text?: text? #f)") #f #f 53 20 53 31 ("host-title:" "File-Request" "Text-File-Request" "if" "get-modal" "text?" "text?:" "anchors" "anchors:" "multiple-selection?" "multiple-selection?:" "extensions" "extensions:" "filenames" "filenames:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-new-file" definition (public) ("(title: title #f)" "(directory: directory #f)" "(filenames: filenames #f)" "(extensions: extensions #f)" "(initial-filename: initial-filename #f)" "(default-extension: default-extension #f)" "(anchors: anchors #f)") #f #f 74 20 74 35 ("host-title:" "NewFile-Request" "get-modal" "anchors" "anchors:" "default-extension" "default-extension:" "initial-filename" "initial-filename:" "extensions" "extensions:" "filenames" "filenames:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-directory" definition (public) ("(title: title #f)" "(directory: directory #f)" "(anchors: anchors #f)") #f #f 96 20 96 36 ("host-title:" "Directory-Request" "get-modal" "anchors" "anchors:" "directory" "directory:" "title" "title:")}
      {Lisp-Entry "choose-font" definition (public) ("(initial-font: initial-font #f)" "(initial-color: initial-color #f)") #f #f 110 20 110 31 ("choose-font" "unimplemented" "initial-color" "initial-color:" "initial-font" "initial-font:")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "ui" "print" "platform" "x11.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.print.platform.x11" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.dialog" "jazz.ui")}
      {Lisp-Entry "platform-print-document" definition (package) ("view") #f #f 49 21 49 44 ("view")}
      {Lisp-Entry "platform-print-picture" definition (package) ("view") #f #f 52 21 52 43 ("view")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "ui" "resizer" "platform" "x11.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.ui.resizer.platform.x11" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.platform")}
      {Lisp-Entry "Part-Cursor" constant () () #f #f 43 10 43 21 ()}}}
  {Lisp-File-Entry {File :context "src" "jazz" "ui" "window" "platform" "x11.jazz"} 244285115. jazz
    {Lisp-Entry "jazz.ui.window.platform.x11" module (protected) () #f #f 38 18 38 45 ("jazz")
      {Lisp-Entry "export" export () () #f #f 41 1 41 7 ("jazz.ui.window.platform.independant")}
      {Lisp-Entry "import" import () () #f #f 44 1 44 7 ("time" "jazz.ui.window.platform.independant" "jazz.ui" "jazz.system" "jazz.platform.cairo" "jazz.platform" "jazz.library" "jazz.io" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "unprocessed" definition (public) () #f #f 56 19 56 30 ("unprocessed")}
      {Lisp-Entry "processed" definition (public) () #f #f 57 19 57 28 ("processed")}
      {Lisp-Entry "processed-result" definition () ("return") #f #f 60 13 60 29 ("cadr" "0" "cdr" "null?" "processed" "car" "eq?" "pair?" "and" "if" "return")}
      {Lisp-Entry "*locked-update*" definition () () #f #f 68 12 68 27 ()}
      {Lisp-Entry "alt-key" definition () () #f #f 73 17 73 24 ("Mod2Mask")}
      {Lisp-Entry "alt-key" definition () () #f #f 76 17 76 24 ("Mod1Mask")}
      {Lisp-Entry "Symbolic-Keys" definition (public) () #f #f 80 19 80 32 ("Mode" "XK_Mode_switch" "Divide" "XK_KP_Divide" "Multiply" "XK_KP_Decimal" "Subtract" "XK_KP_Subtract" "Add" "XK_KP_Add" "Delete" "XK_Delete" "Pause" "XK_Pause" "Insert" "XK_Insert" "Next" "XK_Next" "Prior" "XK_Prior" "Down" "XK_Down" "Right" "XK_Right" "Up" "XK_Up" "Left" "XK_Left" "End" "XK_End" "Home" "XK_Home" "Tab" "XK_Tab" "Space" "XK_space" "XK_KP_Enter" "Return" "XK_Return" "XK_grave" "XK_underscore" "XK_asciicircum" "XK_bar" "XK_braceright" "XK_braceleft" "XK_at" "XK_question" "XK_asterisk" "XK_parenright" "XK_parenleft" "XK_ampersand" "XK_percent" "XK_dollar" "XK_numbersign" "XK_quotedbl" "XK_exclam" "XK_apostrophe" "XK_bracketright" "XK_backslash" "XK_bracketleft" "XK_asciitilde" "XK_slash" "XK_greater" "XK_equal" "XK_less" "XK_semicolon" "XK_colon" "XK_period" "XK_comma" "XK_plus" "XK_minus" "Backspace" "XK_BackSpace" "Escape" "XK_Escape" "F12" "XK_F12" "F11" "XK_F11" "F10" "XK_F10" "F9" "XK_F9" "F8" "XK_F8" "F7" "XK_F7" "F6" "XK_F6" "F5" "XK_F5" "F4" "XK_F4" "F3" "XK_F3" "F2" "XK_F2" "F1" "XK_F1" "XK_9" "XK_8" "XK_7" "XK_6" "XK_5" "XK_4" "XK_3" "XK_2" "XK_1" "XK_0" "XK_Z" "XK_Y" "XK_X" "XK_W" "XK_V" "XK_U" "XK_T" "XK_S" "XK_R" "XK_Q" "XK_P" "XK_O" "XK_N" "XK_M" "XK_L" "XK_K" "XK_J" "XK_I" "XK_H" "XK_G" "XK_F" "XK_E" "XK_D" "XK_C" "XK_B" "XK_A" "XK_z" "XK_y" "XK_x" "XK_w" "XK_v" "XK_u" "XK_t" "XK_s" "XK_r" "XK_q" "XK_p" "XK_o" "XK_n" "XK_m" "XK_l" "XK_k" "XK_j" "XK_i" "XK_h" "XK_g" "XK_f" "XK_e" "XK_d" "XK_c" "XK_b" "XK_a" "cons" "list")}
      {Lisp-Entry "Windows-Table" definition (public) () #f #f 217 19 217 32 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "Window-Title-Table" definition (public) () #f #f 221 19 221 37 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "XIC-Table" definition (public) () #f #f 225 19 225 28 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "last-click" definition () () #f #f 229 12 229 22 ("current-time" "time->seconds")}
      {Lisp-Entry "get-window" definition (public inline) ("handle") #f #f 233 27 233 37 ("Windows-Table" "table-ref" "handle")}
      {Lisp-Entry "set-window" definition (public inline) ("handle" "window") #f #f 237 27 237 37 ("Windows-Table" "table-set!" "window" "handle")}
      {Lisp-Entry "get-xic" definition (public inline) ("handle") #f #f 241 27 241 34 ("XIC-Table" "table-ref" "handle")}
      {Lisp-Entry "set-xic" definition (public inline) ("handle" "xic") #f #f 245 27 245 34 ("XIC-Table" "table-set!" "xic" "handle")}
      {Lisp-Entry "clear-xic" definition (public inline) ("handle") #f #f 249 27 249 36 ("XIC-Table" "table-set!" "handle")}
      {Lisp-Entry "platform-get-window-handle-title" definition (package) ("handle") #f #f 253 21 253 53 ("Window-Title-Table" "table-ref" "handle")}
      {Lisp-Entry "set-window-title" definition (public) ("handle" "title") #f #f 257 20 257 36 ("x11-default-display" "XSetWMName" "Window-Title-Table" "table-set!" "title" "handle")}
      {Lisp-Entry "window-parent" definition (package) ("window") #f #f 262 21 262 34 ("XDefaultScreen" "x11-default-display" "XRootWindow" "get-handle" "get-handle~" "if" "get-parent" "get-parent~" "parent" "let" "window")}
      {Lisp-Entry "window-default-parent" definition (package) ("window") #f #f 269 21 269 42 ("window")}
      {Lisp-Entry "prepare-handle" definition (package) ("window" "rest") #f #f 273 21 273 35 ("error" "not" "if" "create-handle" "let" "others" "handle" "bind-keywords" "rest" "window")}
      {Lisp-Entry "create-handle" definition () ("window" "rest") #f #f 281 13 281 26 ("create-xic" "set-xic" "KeyPressMask" "PointerMotionMask" "ExposureMask" "StructureNotifyMask" "ButtonPressMask" "ButtonReleaseMask" "FocusChangeMask" "XSelectInput" "WM_DELETE_WINDOW" "XSetWMProtocols" "XdndVersion" "XdndAware" "get-handle" "get-handle~" "XSetTransientForHint" "get-toplevel" "_NET_WM_STATE_FULLSCREEN" "wm-change-state" "set-modal" "when" "else" "_NET_WM_WINDOW_TYPE_DIALOG" "Dialog" "_NET_WM_WINDOW_TYPE_TOOLTIP" "Tooltip" "_NET_WM_WINDOW_TYPE_NORMAL" "Menu-Transient" "cond" "u32vector" "PropModeReplace" "XA_ATOM" "_NET_WM_WINDOW_TYPE" "x11-change-property" "CWBackPixel" "CWOverrideRedirect" "CWBitGravity" "+" "InputOutput" "CopyFromParent" "500" "0" "XCreateWindow" "handle" "let" "platform-get-desktop" "Desktop" "if" "216" "233" "236" "rgb-pixel" "XSetWindowAttributes-background_pixel-set!" "Popup" "is?" "XSetWindowAttributes-override_redirect-set!" "StaticGravity" "XSetWindowAttributes-bit_gravity-set!" "XDefaultVisual" "visual" "XSetWindowAttributes-make" "attr" "window-parent" "parent" "XScreenOfDisplay" "screen" "x11-default-display" "XDefaultScreen" "screen-no" "let*" "rest" "window")}
      {Lisp-Entry "wm-change-state" definition () ("display" "handle" "atom") #f #f 331 13 331 28 ("XEvent-free" "SubstructureNotifyMask" "SubstructureRedirectMask" "bitwise-ior" "XDefaultScreen" "XRootWindow" "XSendEvent" "4" "3" "2" "1" "_NET_WM_STATE_ADD" "0" "long*-set!" "XClientMessageEvent-l-ref" "l" "let" "32" "XClientMessageEvent-format-set!" "_NET_WM_STATE" "XClientMessageEvent-message_type-set!" "XClientMessageEvent-window-set!" "ClientMessage" "XClientMessageEvent-type-set!" "XEvent-xclient-ref" "ev" "XEvent-make" "msg" "let*" "atom" "handle" "display")}
      {Lisp-Entry "destroy-window" definition (package) ("handle") #f #f 353 21 353 35 ("x11-default-display" "XDestroyWindow" "get-handle" "get-handle~" "platform-set-focus" "get-parent" "get-parent~" "parent" "focus-lose" "focus-lose~" "platform-get-focus" "=" "when" "clear-xic" "expose-store" "table-set!" "get-window" "window" "let" "handle")}
      {Lisp-Entry "dispatch-message" definition () ("window" "msg") #f #f 364 13 364 29 ("process-window-message" "msg" "window")}
      {Lisp-Entry "show-window" definition (package) ("handle") #f #f 368 21 368 32 ("x11-default-display" "XMapWindow" "handle")}
      {Lisp-Entry "show-maximized" definition (package) ("handle") #f #f 372 21 372 35 ("show-window" "rect-size" "platform-set-window-size" "get-work-area" "rect-position" "platform-set-position" "handle")}
      {Lisp-Entry "show-restored" definition (package) ("handle") #f #f 378 21 378 34 ("show-window" "handle")}
      {Lisp-Entry "hide-window" definition (package) ("handle") #f #f 382 21 382 32 ("x11-default-display" "XUnmapWindow" "handle")}
      {Lisp-Entry "bring-window-to-top" definition (package) ("handle") #f #f 386 21 386 40 ("x11-default-display" "XRaiseWindow" "handle")}
      {Lisp-Entry "window-state" definition (package) ("handle") #f #f 390 21 390 33 ("restored" "handle")}
      {Lisp-Entry "set-window-placement" definition (package) ("handle" "position" "size") #f #f 394 21 394 41 ("platform-set-window-size" "platform-set-position" "size" "position" "handle")}
      {Lisp-Entry "minimize-window" definition (package) ("handle") #f #f 399 21 399 36 ("minimize-window" "unimplemented" "handle")}
      {Lisp-Entry "maximize-window" definition (package) ("handle") #f #f 403 21 403 36 ("maximize-window" "unimplemented" "handle")}
      {Lisp-Entry "restore-window" definition (package) ("handle") #f #f 407 21 407 35 ("restore-window" "unimplemented" "handle")}
      {Lisp-Entry "platform-erase-background" definition (package) ("handle") #f #f 411 21 411 46 ("platform-erase-background" "unimplemented" "handle")}
      {Lisp-Entry "setup-events" definition (package) () #f #f 420 21 420 33 ()}
      {Lisp-Entry "expose-store" definition () () #f #f 424 12 424 24 ("make-table")}
      {Lisp-Entry "process-message" definition () ("msg") #f #f 427 13 427 28 ("dispatch-message" "when" "get-window" "window" "let" "XAnyEvent-window-ref" "handle" "XEvent-xany-ref" "any-event" "let*" "lambda" "execute-event" "msg")}
      {Lisp-Entry "process-expose" definition () () #f #f 437 13 437 27 ("paint" "paint~" "when" "table-set!" "region" "win" "expose-store" "iterate-table" "lambda" "execute-event")}
      {Lisp-Entry "process-messages-single-threaded" definition (package) ("thunk") #f #f 447 21 447 53 ("free-fdset" "XEvent-free" "current-thread" "thread-loop?" "process-expose" "when" "process-message" "XNextEvent" "0.01" "thread-sleep!" "XPending" "=" "if" "1000" "0" "1" "+" "select" "process-inval-rects" "loop" "let" "setup-fdset" "fdset" "x11-default-display" "ConnectionNumber" "display-fd" "XEvent-make" "msg" "let*" "proper-tail-calls" "declare" "thunk")}
      {Lisp-Entry "process-messages-multi-threaded" definition (package) () #f #f 468 21 468 52 ("message-pump" "new-thread" "XEvent-free" "current-thread" "thread-loop?" "process-expose" "XPending" "0" "=" "when" "process-message" "x11-default-display" "XNextEvent" "loop" "XEvent-make" "msg" "let" "proper-tail-calls" "declare" "process" "define")}
      {Lisp-Entry "process-window-message" definition () ("window" "msg") #f #f 489 13 489 35 ("unprocessed" "else" "process-client-message-message" "ClientMessage" "process-selection-request-message" "SelectionRequest" "process-selection-notify-message" "SelectionNotify" "process-configure-notify-message" "ConfigureNotify" "process-key-press-message" "KeyPress" "process-motion-notify-message" "MotionNotify" "process-focus-out-message" "FocusOut" "process-focus-in-message" "FocusIn" "process-button-release-message" "ButtonRelease" "process-button-press-message" "ButtonPress" "process-expose-message" "Expose" "XEvent-type-ref" "ecase" "msg" "window")}
      {Lisp-Entry "process-expose-message" definition () ("window" "msg") #f #f 505 13 505 35 ("processed" "region-union" "table-set!" "if" "0" "get-box" "get-box~" "nu=?" "unless" "expose-store" "table-ref" "old-region" "Rect" "rect:" "Region" "new" "region" "XExposeEvent-height-ref" "bottom" "XExposeEvent-width-ref" "+" "right" "XExposeEvent-y-ref" "top" "XExposeEvent-x-ref" "left" "XEvent-xexpose-ref" "let" "msg" "window")}
      {Lisp-Entry "process-button-press-message" definition () ("window" "msg") #f #f 520 13 520 41 ("-120" "Button7" "Button5" "120" "mouse-wheel" "mouse-wheel~" "Button6" "Button4" "or" "get-v" "get-v~" "get-h" "get-h~" "call-context-menu" "call-context-menu~" "Point" "new" "get-handle" "get-handle~" "platform-get-desktop" "acquire-point" "pt" "right-mouse-down" "right-mouse-down~" "Button3" "middle-mouse-down" "middle-mouse-down~" "Button2" "mouse-down" "mouse-down~" "0" "set!" "double-click" "double-click~" "begin" "0.4" "last-click" "-" "<" "if" "current-time" "time->seconds" "click" "Button1" "=" "cond" "x11-set-latest-timestamp" "XButtonEvent-time-ref" "stamp" "XButtonEvent-button-ref" "button" "XButtonEvent-y-ref" "v" "XButtonEvent-x-ref" "h" "XEvent-xbutton-ref" "let" "msg" "window")}
      {Lisp-Entry "process-button-release-message" definition () ("window" "msg") #f #f 547 13 547 43 ("right-mouse-up" "right-mouse-up~" "Button3" "middle-mouse-up" "middle-mouse-up~" "Button2" "mouse-up" "mouse-up~" "Button1" "=" "cond" "x11-set-latest-timestamp" "XButtonEvent-time-ref" "stamp" "XButtonEvent-button-ref" "button" "XButtonEvent-y-ref" "v" "XButtonEvent-x-ref" "h" "XEvent-xbutton-ref" "let" "msg" "window")}
      {Lisp-Entry "process-focus-in-message" definition () ("window" "msg") #f #f 562 13 562 37 ("activate-application" "activate-application~" "focus-gain" "focus-gain~" "NotifyNonlinear" "NotifyInferior" "NotifyAncestor" "=" "or" "when" "XFocusChangeEvent-detail-ref" "detail" "XEvent-xfocus-ref" "let" "msg" "window")}
      {Lisp-Entry "process-focus-out-message" definition () ("window" "msg") #f #f 572 13 572 38 ("focus-lose" "focus-lose~" "deactivate-application" "deactivate-application~" "NotifyNonlinear" "NotifyInferior" "NotifyAncestor" "=" "or" "when" "XFocusChangeEvent-detail-ref" "detail" "XEvent-xfocus-ref" "let" "msg" "window")}
      {Lisp-Entry "process-motion-notify-message" definition () ("window" "msg") #f #f 582 13 582 42 ("process-expose" "mouse-move" "mouse-move~" "XMotionEvent-y-ref" "v" "XMotionEvent-x-ref" "h" "XEvent-xmotion-ref" "MotionNotify" "x11-default-display" "XCheckTypedEvent" "when" "loop" "let" "msg" "window")}
      {Lisp-Entry "process-key-press-message" definition () ("window" "msg") #f #f 594 13 594 38 ("unprocessed" "call-key-press" "call-key-press~" "c" "lambda" "iterate" "if" "get-handle" "get-handle~" "get-xic" "x11-utf8-lookup-string" "str" "sym" "receive" "None" "XFilterEvent" "translate-shortcut" "or" "unless" ":alt" "alt-key" ":control" "ControlMask" ":shift" "cons" "set!" "ShiftMask" "bit-set?" "when" "x11-set-latest-timestamp" "XKeyEvent-time-ref" "stamp" "mod" "XKeyEvent-state-ref" "state" "0" "integer->char" "x11-default-display" "XKeycodeToKeysym" "keysym" "XKeyEvent-keycode-ref" "keycode" "XEvent-xkey-ref" "key-msg" "let*" "msg" "window")}
      {Lisp-Entry "process-configure-notify-message" definition () ("window" "msg") #f #f 616 13 616 45 ("call-position-change" "call-position-change~" "restored" "call-size-change" "call-size-change~" "XConfigureEvent-y-ref" "y" "XConfigureEvent-x-ref" "x" "XConfigureEvent-height-ref" "height" "XConfigureEvent-width-ref" "width" "XEvent-xconfigure-ref" "let" "msg" "window")}
      {Lisp-Entry "process-selection-notify-message" definition () ("window" "msg") #f #f 626 13 626 45 ("unprocessed" "msg" "window")}
      {Lisp-Entry "process-selection-request-message" definition () ("window" "msg") #f #f 630 13 630 46 ("get-handle" "get-handle~" "x11-default-display" "send-clipboard-selection" "XSelectionRequestEvent-time-ref" "time" "XSelectionRequestEvent-property-ref" "property" "XSelectionRequestEvent-target-ref" "target" "XSelectionRequestEvent-selection-ref" "selection" "XSelectionRequestEvent-requestor-ref" "requestor" "XEvent-xselectionrequest-ref" "let" "msg" "window")}
      {Lisp-Entry "send-clipboard-selection" definition () ("display" "window" "requestor" "selection" "target" "property" "time") #f #f 640 13 640 37 ("None" "else" "uint8*-free" "8" "XChangeProperty" "1" "string-length" "+" "nitems" "clipboard-string" "char-string->uint8*" "data" "let" "XA_STRING" "XA_ATOM" "XA_TARGETS" "clipboard-stamp" "u32vector" "PropModeReplace" "x11-change-property" "XA_TIMESTAMP" "ecase" "XEvent-free" "NoEventMask" "XSendEvent" "XSelectionEvent-time-set!" "XSelectionEvent-property-set!" "XSelectionEvent-target-set!" "XSelectionEvent-selection-set!" "XSelectionEvent-requestor-set!" "XSelectionEvent-display-set!" "XSelectionEvent-send_event-set!" "SelectionNotify" "XSelectionEvent-type-set!" "XEvent-xselection-ref" "xselection" "XEvent-make" "ev" "let*" "send-event" "define" "time" "property" "target" "selection" "requestor" "window" "display")}
      {Lisp-Entry "process-client-message-message" definition () ("window" "msg") #f #f 673 13 673 43 ("process-xdnd-leave" "XdndLeave" "process-xdnd-drop" "XdndDrop" "process-xdnd-position" "XdndPosition" "process-xdnd-enter" "XdndEnter" "process-wm-protocols" "WM_PROTOCOLS" "equal?" "cond" "XClientMessageEvent-message_type-ref" "type" "XEvent-xclient-ref" "let" "msg" "window")}
      {Lisp-Entry "process-wm-protocols" definition () ("window" "msg") #f #f 688 13 688 33 ("on-close" "on-close~" "WM_DELETE_WINDOW" "equal?" "cond" "0" "long*-ref" "protocol" "XClientMessageEvent-l-ref" "data" "let" "msg" "window")}
      {Lisp-Entry "DndSource" definition () () #f #f 695 12 695 21 ()}
      {Lisp-Entry "DndAccept?" definition () () #f #f 696 12 696 22 ()}
      {Lisp-Entry "DndPosition" definition () () #f #f 697 12 697 23 ()}
      {Lisp-Entry "Dnd-type-supported?" definition () ("type" "typelist" "size") #f #f 700 13 700 32 ("1" "+" "ulong*-ref" "equal?" "=" "if" "0" "i" "loop" "let" "size" "typelist" "type")}
      {Lisp-Entry "process-xdnd-enter" definition () ("window" "msg") #f #f 709 13 709 31 ("text/uri-list" "Dnd-type-supported?" "DndAccept?" "uint8*->ulong*" "let" "XA_ATOM" "100000" "XdndTypeList" "x11-default-display" "XGetWindowProperty" "prop" "bytes-after" "nitems" "format_return" "type_return" "receive" "set!" "DndSource" "XdndVersion" ">" "or" "unless" "#x00000001" "=" "typelist?" "-24" "#xff000000" "1" "bitwise-and" "arithmetic-shift" "version" "0" "long*-ref" "source" "XClientMessageEvent-l-ref" "data" "let*" "msg" "window")}
      {Lisp-Entry "process-xdnd-position" definition () ("window" "msg") #f #f 721 13 721 34 ("XEvent-free" "NoEventMask" "x11-default-display" "XSendEvent" "None" "XdndActionCopy" "4" "3" "#x00000000" "#x00000001" "DndAccept?" "#x00000002" "bitwise-ior" "1" "get-handle" "get-handle~" "long*-set!" "32" "XClientMessageEvent-format-set!" "XdndStatus" "XClientMessageEvent-message_type-set!" "XClientMessageEvent-window-set!" "ClientMessage" "XClientMessageEvent-type-set!" "l" "XEvent-xclient-ref" "mess" "XEvent-make" "ev" "#x0000ffff" "-16" "#xffff0000" "bitwise-and" "arithmetic-shift" "Point" "new" "DndPosition" "set!" "begin" "DndSource" "equal?" "if" "2" "position" "0" "long*-ref" "source" "XClientMessageEvent-l-ref" "data" "let*" "msg" "window")}
      {Lisp-Entry "process-xdnd-drop" definition () ("window" "msg") #f #f 744 13 744 30 ("XEvent-free" "NoEventMask" "XSendEvent" "XdndActionCopy" "#x00000001" "1" "long*-set!" "32" "XClientMessageEvent-format-set!" "XdndFinished" "XClientMessageEvent-message_type-set!" "XClientMessageEvent-window-set!" "XClientMessageEvent-display-set!" "ClientMessage" "XClientMessageEvent-type-set!" "l" "XEvent-xclient-ref" "mess" "XEvent-make" "ev" "DndAccept?" "set!" "DndPosition" "platform-get-desktop" "acquire-point" "receive-files" "receive-files~" "XFree" "uint8*->char-string" "tokenise-windows" "File" "else" "Directory" "directory" "cadr" "pathname-type" "case" "new" "car" "split" "splitted" "not" "and" "x" "lambda" "collect" "files" "text/uri-list" "XdndSelection" "get-handle" "get-handle~" "x11-default-display" "x11-retrieve-selection" "prop" "let" "DndSource" "equal?" "when" "2" "stamp" "0" "long*-ref" "source" "XClientMessageEvent-l-ref" "data" "let*" "msg" "window")}
      {Lisp-Entry "process-xdnd-leave" definition () ("window" "msg") #f #f 776 13 776 31 ("DndPosition" "DndAccept?" "set!" "DndSource" "equal?" "when" "0" "long*-ref" "source" "XClientMessageEvent-l-ref" "data" "let*" "msg" "window")}
      {Lisp-Entry "translate-shortcut" definition () ("mods" "keysym") #f #f 785 13 785 31 ("Shortcut" "new" "dispatch-shortcut" "dispatch-shortcut~" "and" "if" "get-application" "app" "Symbolic-Keys" "assv-value" "key" "let" "keysym" "mods")}
      {Lisp-Entry "get-toplevel-hwnd" definition () () #f #f 798 13 798 30 ("get-handle" "get-handle~" "when" "get-toplevel" "toplevel" "let")}
      {Lisp-Entry "set-capture" definition (public) ("handle") #f #f 809 20 809 31 ("handle")}
      {Lisp-Entry "unset-capture" definition (public) () #f #f 814 20 814 33 ()}
      {Lisp-Entry "with-platform-painting" definition (package) ("window" "platform-data" "proc") #f #f 824 21 824 43 ("processed" "close" "close~" "unwind-protect" "get-height" "get-height~" "get-width" "get-width~" "get-handle" "get-handle~" "cairo_xlib_surface_create" "Surface" "new" "surface" "let" "XDefaultVisual" "visual" "x11-default-display" "XDefaultScreen" "screen-no" "let*" "proc" "platform-data" "window")}
      {Lisp-Entry "get-window-surface" definition (public) ("window") #f #f 834 20 834 38 ("get-height" "get-height~" "get-width" "get-width~" "get-handle" "get-handle~" "cairo_xlib_surface_create" "XDefaultVisual" "visual" "x11-default-display" "XDefaultScreen" "screen-no" "let*" "window")}
      {Lisp-Entry "set-alpha-blending" definition () ("handle" "n") #f #f 840 13 840 31 ("RDW_INVALIDATE" "RDW_ERASE" "bitwise-ior" "NULL" "RedrawWindow" "LWA_ALPHA" "0" "SetLayeredWindowAttributes" "set-layered?" "n" "handle")}
      {Lisp-Entry "track-mouse-leave" definition (public) ("handle") #f #f 853 20 853 37 ("handle")}
      {Lisp-Entry "cancel-mouse-leave-tracking" definition (public) ("handle") #f #f 857 20 857 47 ("handle")}
      {Lisp-Entry "platform-set-parent" definition (package) ("handle" "parent") #f #f 866 21 866 40 ("0" "get-handle" "get-handle~" "x11-default-display" "XReparentWindow" "parent" "handle")}
      {Lisp-Entry "platform-get-first-child" definition (package) ("handle") #f #f 870 21 870 45 ("XGetChildHandle" "0" "=" "if" "x11-default-display" "XNumberOfChildren" "num-of-children" "let" "handle")}
      {Lisp-Entry "platform-get-first-visible-child" definition (package) ("handle") #f #f 877 21 877 53 ("1" "+" "platform-is-window-visible?" "XGetChildHandle" "child-handle" "n" "loop" "0" "=" "if" "x11-default-display" "XNumberOfChildren" "num-of-children" "let" "handle")}
      {Lisp-Entry "platform-is-window-visible?" definition (package) ("handle") #f #f 890 21 890 48 ("XWindowAttributes-free" "IsViewable" "XWindowAttributes-map_state-ref" "=" "prog1" "x11-default-display" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "let" "handle")}
      {Lisp-Entry "acquire-point" definition (public) ("to-handle" "from-handle" "shape") #f #f 897 20 897 33 ("Point" "new" "get-v" "get-v~" "get-h" "get-h~" "x11-default-display" "XTranslateCoordinates" "y" "x" "receive" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "acquire-rect" definition (public) ("to-handle" "from-handle" "shape") #f #f 902 20 902 32 ("corners->rect" "get-bottom" "get-bottom~" "get-right" "get-right~" "right-bottom" "get-top" "get-top~" "get-left" "get-left~" "Point" "new" "acquire-point" "left-top" "let" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "platform-get-position" definition (package) ("handle" "parent-handle") #f #f 908 21 908 42 ("Point" "new" "XWindowAttributes-free" "XWindowAttributes-y-ref" "y" "XWindowAttributes-x-ref" "x" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "XQueryTree-parent" "parent" "iterate" "neq?" "if" "x11-default-display" "XQueryTree-root" "root" "let" "top-parent" "define" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-position" definition (package) ("handle" "pos") #f #f 928 21 928 42 ("XEvent-free" "process-message" "StructureNotifyMask" "XWindowEvent" "get-v" "get-v~" "get-h" "get-h~" "x11-default-display" "XMoveWindow" "XEvent-make" "event" "let" "pos" "handle")}
      {Lisp-Entry "platform-get-size" definition (package) ("handle") #f #f 936 21 936 38 ("Dimension" "new" "XWindowAttributes-free" "XWindowAttributes-height-ref" "height" "XWindowAttributes-width-ref" "width" "x11-default-display" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "let" "handle")}
      {Lisp-Entry "platform-get-window-size" definition (package) ("handle") #f #f 945 21 945 45 ("platform-get-size" "handle")}
      {Lisp-Entry "platform-set-window-size" definition (package) ("handle" "size") #f #f 949 21 949 45 ("XEvent-free" "process-message" "StructureNotifyMask" "XWindowEvent" "get-height" "get-height~" "get-width" "get-width~" "x11-default-display" "XResizeWindow" "XEvent-make" "event" "let" "size" "handle")}
      {Lisp-Entry "platform-get-rect" definition (package) ("handle" "parent-handle") #f #f 957 21 957 38 ("Rect" "new" "get-height" "get-height~" "b" "get-width" "get-width~" "+" "r" "get-v" "get-v~" "t" "get-h" "get-h~" "l" "let*" "platform-get-size" "size" "platform-get-position" "position" "let" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-rect" definition (package) ("handle" "rect") #f #f 967 21 967 38 ("SWP_NOACTIVATE" "SWP_NOZORDER" "bitwise-ior" "rect-height" "rect-width" "get-top" "get-top~" "get-left" "get-left~" "NULL" "SetWindowPos" "platform-set-rect" "unimplemented" "rect" "handle")}
      {Lisp-Entry "platform-get-bounds" definition (package) ("handle") #f #f 973 21 973 40 ("RECT-free" "RECT-bottom-ref" "RECT-right-ref" "RECT-top-ref" "RECT-left-ref" "Rect" "new" "prog1" "2" "NULL" "MapWindowPoints" "GetWindowRect" "RECT-make" "rect" "let" "platform-get-bounds" "unimplemented" "handle")}
      {Lisp-Entry "platform-mouse-position" definition (package) () #f #f 983 21 983 44 ("Point" "new" "XDefaultScreen" "XRootWindow" "x11-default-display" "XMousePosition" "y" "x" "receive")}
      {Lisp-Entry "platform-window-from-point" definition (package) ("point") #f #f 988 21 988 47 ("XDefaultScreen" "XRootWindow" "x11-default-display" "XMouseWindow" "get-window" "point")}
      {Lisp-Entry "platform-move-window" definition (package) ("handle" "x" "y" "cx" "cy") #f #f 992 21 992 41 ("MoveWindow" "platform-move-window" "unimplemented" "cy" "cx" "y" "x" "handle")}
      {Lisp-Entry "platform-window-enabled?" definition (package) ("handle") #f #f 998 21 998 45 ("IsWindowEnabled" "platform-window-enabled?" "unimplemented" "handle")}
      {Lisp-Entry "platform-enable-window" definition (package) ("handle") #f #f 1004 21 1004 43 ("handle")}
      {Lisp-Entry "platform-disable-window" definition (package) ("handle") #f #f 1009 21 1009 44 ("handle")}
      {Lisp-Entry "platform-get-client-rect" definition (package) ("handle") #f #f 1014 21 1014 45 ("0" "Rect" "new" "XWindowAttributes-free" "XWindowAttributes-height-ref" "height" "XWindowAttributes-width-ref" "width" "x11-default-display" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "let" "handle")}
      {Lisp-Entry "platform-scroll-invalidate" definition () ("handle" "dh" "dv" "src-rect" "clip-rect") #f #f 1023 13 1023 39 (">" "+" "Rect" "new" "platform-invalidate-rect" "0" "<" "when" "get-bottom" "get-bottom~" "mb" "get-right" "get-right~" "mr" "get-top" "get-top~" "mt" "get-left" "get-left~" "ml" "let" "rect-union" "modified-rect" "offset-rect" "dst-rect" "rect-intersection" "let*" "clip-rect" "src-rect" "dv" "dh" "handle")}
      {Lisp-Entry "platform-scroll-window" definition (package) ("handle" "delta" "rect" "clip-rect") #f #f 1042 21 1042 43 ("platform-update-window" "get-y" "get-y~" "get-x" "get-x~" "platform-scroll-invalidate" "XRectangle-free" "XFreeGC" "dv" "dh" "+" "XCopyArea" "1" "XSetClipRectangles" "get-top" "get-top~" "get-bottom" "get-bottom~" "XRectangle-height-set!" "get-left" "get-left~" "get-right" "get-right~" "-" "XRectangle-width-set!" "XRectangle-x-set!" "XRectangle-make" "xrect" "0" "x11-default-display" "XCreateGC" "gc" "let" "platform-invalidate-rect" "clip-rect" "rect" "delta" "handle")}
      {Lisp-Entry "inval-rects" definition () () #f #f 1059 12 1059 23 ("make-table")}
      {Lisp-Entry "validate-inval-rect" definition () ("rect" "<Rect>" "window") #f #f 1062 13 1062 32 ("new" "or" "h" "-" "w" "get-height" "get-height~" "get-bottom" "get-bottom~" "b" "get-width" "get-width~" "get-right" "get-right~" ">" "r" "get-top" "get-top~" "t" "get-left" "get-left~" "<" "l" "get-size" "get-size~" "size" "let" "0" "=" "if" "window" "Rect" "<Rect>" "rect")}
      {Lisp-Entry "process-inval-rects" definition () () #f #f 1081 13 1081 32 ("x11-default-display" "XInvalidateRect" "h" "-" "w" "get-bottom" "get-bottom~" "b" "get-right" "get-right~" "r" "get-top" "get-top~" "t" "get-left" "get-left~" "l" "when" "get-window" "window" "let" "table-set!" "rect" "handle" "lambda" "inval-rects" "iterate-table")}
      {Lisp-Entry "platform-invalidate-rect" definition (package) ("handle" "rect") #f #f 1096 21 1096 45 ("rect-union" "cond" "table-set!" "or" "get-window" "validate-inval-rect" "new-rect" "inval-rects" "table-ref" "old-rect" "let" "and" "when" "rect" "handle")}
      {Lisp-Entry "platform-invalidate-region" definition (package) ("handle" "region") #f #f 1110 21 1110 47 ("get-rectangles" "get-rectangles~" "platform-invalidate-rect" "rect" "lambda" "for-each" "region" "handle")}
      {Lisp-Entry "platform-invalidate-window" definition (package) ("handle") #f #f 1116 21 1116 47 ("get-height" "get-height~" "get-width" "get-width~" "0" "Rect" "new" "platform-invalidate-rect" "platform-get-size" "size" "let" "handle")}
      {Lisp-Entry "platform-redraw-window" definition (package) ("handle" "rect" "region") #f #f 1121 21 1121 43 ("rect:" "Region" "new" "get-window" "paint" "paint~" "if" "region" "rect" "handle")}
      {Lisp-Entry "platform-get-update-rect" definition (package) ("handle") #f #f 1127 21 1127 45 ("RECT-free" "RECT->rect" "prog1" "GetUpdateRect" "RECT-make" "rect" "let" "platform-get-update-rect" "unimplemented" "handle")}
      {Lisp-Entry "platform-get-update-region" definition (package) ("handle") #f #f 1136 21 1136 47 ("get-handle" "get-handle~" "GetUpdateRgn" "Region" "new" "region" "let" "platform-get-update-region" "unimplemented" "handle")}
      {Lisp-Entry "platform-redraw-view-only" definition (package) ("view" "handle") #f #f 1144 21 1144 46 ("platform-invalidate-rect" "get-height" "get-height~" "get-width" "get-width~" "0" "Rect" "new" "rct" "platform-get-size" "size" "let*" "redraw-view" "redraw-view~" "handle" "view")}
      {Lisp-Entry "platform-update-window" definition (package) ("handle") #f #f 1152 21 1152 43 ("rect:" "Region" "new" "get-window" "paint" "paint~" "table-set!" "when" "inval-rects" "table-ref" "rect" "let" "handle")}
      {Lisp-Entry "platform-show-noactivate" definition (package) ("handle") #f #f 1159 21 1159 45 ("show-window" "handle")}
      {Lisp-Entry "platform-hide-noactivate" definition (package) ("handle") #f #f 1163 21 1163 45 ("hide-window" "handle")}
      {Lisp-Entry "platform-bring-window-to-front" definition (package) ("handle") #f #f 1167 21 1167 51 ("x11-default-display" "XRaiseWindow" "handle")}
      {Lisp-Entry "platform-send-window-to-back" definition (package) ("handle") #f #f 1171 21 1171 49 ("x11-default-display" "XLowerWindow" "handle")}
      {Lisp-Entry "platform-select-foreground-window" definition (package) ("handle") #f #f 1175 21 1175 54 ("x11-default-display" "XRaiseWindow" "handle")}
      {Lisp-Entry "platform-lock-window-update" definition (package) ("handle") #f #f 1184 21 1184 48 ("handle")}
      {Lisp-Entry "platform-get-focus" definition (package) () #f #f 1193 21 1193 39 ("x11-default-display" "XGetInputFocus" "state" "win" "receive")}
      {Lisp-Entry "platform-set-focus" definition (package) ("handle") #f #f 1198 21 1198 39 ("CurrentTime" "RevertToNone" "XSetInputFocus" "platform-is-window-visible?" "and" "when" "x11-default-display" "XFlush" "handle")}
      {Lisp-Entry "Current-Cursor" definition (public) () #f #f 1211 19 1211 33 ()}
      {Lisp-Entry "load-cursor" definition () ("cursor") #f #f 1215 13 1215 24 ("load-cursor" "unimplemented" "cursor")}
      {Lisp-Entry "get-named-cursor" definition () ("name") #f #f 1219 13 1219 29 ("cadr" "and" "Cursors" "assq" "info" "let" "name")}
      {Lisp-Entry "get-cursor" definition (public) () #f #f 1224 20 1224 30 ("Current-Cursor")}
      {Lisp-Entry "set-cursor" definition (public) ("cursor") #f #f 1228 20 1228 30 ("get-handle" "get-handle~" "x11-default-display" "XDefineCursor" "Current-Cursor" "set!" "get-toplevel" "toplevel" "get-named-cursor" "let" "symbol?" "when" "cursor")}
      {Lisp-Entry "hide-cursor" definition (public) () #f #f 1240 20 1240 31 ()}
      {Lisp-Entry "show-cursor" definition (public) () #f #f 1244 20 1244 31 ()}
      {Lisp-Entry "platform-get-desktop" definition (package) () #f #f 1253 21 1253 41 ("XDefaultScreen" "x11-default-display" "XRootWindow")}
      {Lisp-Entry "get-work-area" definition (public) () #f "<Rect>" 1257 20 1257 33 ("get-bottom-margin" "get-height" "get-height~" "get-right-margin" "get-width" "get-width~" "-" "0" "new" "platform-get-desktop" "platform-get-size" "size" "let" "Rect" "<Rect>")}
      {Lisp-Entry "get-right-margin" definition () () #f #f 1267 17 1267 33 ("64")}
      {Lisp-Entry "get-bottom-margin" definition () () #f #f 1269 17 1269 34 ("64")}
      {Lisp-Entry "get-right-margin" definition () () #f #f 1272 16 1272 32 ("0")}
      {Lisp-Entry "get-bottom-margin" definition () () #f #f 1274 16 1274 33 ("0")}
      {Lisp-Entry "platform-drop-files" definition (package) ("window" "temp") #f #f 1283 21 1283 40 ("platform-drop-files" "unimplemented" "temp" "window")}}})
