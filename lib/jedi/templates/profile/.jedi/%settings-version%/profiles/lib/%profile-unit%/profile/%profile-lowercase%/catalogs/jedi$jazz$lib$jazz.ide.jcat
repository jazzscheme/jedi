"Chapters-Browser"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "code" "Chapters-Browser.jazz"} 244772373. jazz
    {Lisp-Entry "jazz.ide.code.Chapters-Browser" module (protected) #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Chapters-Browser" class () #f 46 7 46 23 ("weak-keys:" "eq?" "test:" "make-table" "explicit" "initialize" "Layout-View")
        {Lisp-Entry "client" property () #f 49 12 49 18 ()}
        {Lisp-Entry "client-selection" slot () #f 52 8 52 24 ()}
        {Lisp-Entry "client-position" slot () #f 53 8 53 23 ()}
        {Lisp-Entry "preserved-states" slot () #f 56 8 56 24 ()}
        {Lisp-Entry "form" anonymous #f #f 59 3 59 7 ("329" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-action" ":form" "Selection-Handler" "show-header?:" "chapters" "Chapters-Tree" "<Chapters-Tree>" "shown?:" "header" "Tree-Header" "<Tree-Header>" "content" "!" "<!>" "tool" "style:" "hscroll?:" "vscroll?:" "scroller" "Scroller-View" "<Scroller-View>" "on-update" "update" "Push-Tool" "<Push-Tool>" "on-toggle-occurence" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "occurence?" "Toggle-Tool" "<Toggle-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 72 25 72 38 ("chapters-browser" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 81 25 81 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 85 25 85 35 ()}
        {Lisp-Entry "client-activate" method (override) #f 89 20 89 35 ("set-client" "Text-View" "is?" "if" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method (override) #f 96 20 96 37 ("set-client")}
        {Lisp-Entry "tree-focus-gained" method () #f 100 11 100 28 ("get-scrolled-position" "get-scrolled-position~" "client-position" "get-selection" "get-selection~" "client-selection" "set!" "client" "when")}
        {Lisp-Entry "get-tools-view" method (override) #f 111 20 111 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) #f 115 20 115 33 ("acquire-focus" "acquire-focus~" "chapters" "locate" "tree" "let")}
        {Lisp-Entry "get-occurence?" method () #f 125 11 125 25 ("occurence?" "locate" "get-selected?" "get-selected?~")}
        {Lisp-Entry "guest-actions" method (override) #f 134 20 134 33 ("nextmethod" "chapters-browser" "find-actions" "cons")}
        {Lisp-Entry "on-toggle-occurence" method () #f 144 11 144 30 ("update" "evt")}
        {Lisp-Entry "on-update" method () #f 148 11 148 20 ("update" "evt")}
        {Lisp-Entry "on-action" method () #f 152 11 152 20 ("head" "force-vertical:" "ensure-displayed" "ensure-displayed~" "ensure-displayed?:" "set-selection-safe" "set-selection-safe~" "Cell" "Range$Cell$" "new" "range" "paragraph-length" "paragraph-length~" "len" "get-col" "get-col~" "col" "get-line" "get-line~" "line" "get-row" "get-row~" "get-user-data" "get-user-data~" "client" "valid-cell" "valid-cell~" "pos" "let*" "when" "get-single-selection" "get-single-selection~" "selection" "chapters" "get-name" "get-name~" "case" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "on-double-click" method () #f 167 11 167 26 ("finish-focus" "evt")}
        {Lisp-Entry "on-return-press" method (override) #f 171 20 171 35 ("finish-focus" "key")}
        {Lisp-Entry "on-escape-press" method (override) #f 175 20 175 35 ("cancel-focus" "key")}
        {Lisp-Entry "on-cancel" method () #f 179 11 179 20 ("cancel-focus" "evt")}
        {Lisp-Entry "finish-focus" method () #f 183 11 183 23 ("acquire-focus" "acquire-focus~" "client" "when")}
        {Lisp-Entry "cancel-focus" method () #f 188 11 188 23 ("acquire-focus" "acquire-focus~" "client-position" "scroll-to" "scroll-to~" "set-selection-safe" "set-selection-safe~" "client-selection" "client" "when")}
        {Lisp-Entry "get-client" method (public) #f 201 18 201 28 ("client")}
        {Lisp-Entry "set-client" method (public) #f 205 18 205 28 ("restore-state" "update" "set!" "preserve-state" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update" method () #f 215 11 215 17 ("with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "chapters" "locate" "child" "key:" "string<?" "sort" "get-occurence?" "effective" "get-children" "get-children~" "children" "insert-children" "user-data:" "image:" "title:" "Tree-Node" "children:" "17" "row-height:" "expanded" "state:" "father:" "add-row" "add-row~" "row" "tree" "insert-item" "level:" "get-property" "get-property~" "<" "when" "continuation-return" "eq?" "for-each-ancestor" "for-each-ancestor~" "return" "continuation-capture" "list" "properties:" "cardinality" "nu+" "data" "0" "else" "1" "=" "Image-Resource" "cond" "image" "first?" "set!" "element" "find-father" "father" "title" "header" "pos" "level" "bind" "info" "lambda" "for-each" "insert-element" "if" "previous" "JML-Element" "new" "root" "get-remaining-chapters" "get-remaining-chapters~" "remaining" "get-first-chapter" "get-first-chapter~" "first" "get-chapters" "get-chapters~" "lst" "let" "client" "build-tree" "define")}
        {Lisp-Entry "preserve-state" method () #f 274 11 274 25 ("text" "use:" "chapters" "locate" "get-view-state" "get-view-state~" "preserved-states" "table-set!" "client")}
        {Lisp-Entry "restore-state" method () #f 278 11 278 24 ("chapters" "locate" "set-view-state" "set-view-state~" "when" "preserved-states" "table-ref" "state" "let" "client")}}
      {Lisp-Entry "Chapters-Tree" class () #f 289 7 289 20 ("Tree-View")
        {Lisp-Entry "focus-gained" method (override) #f 292 20 292 32 ("get-guest" "tree-focus-gained" "tree-focus-gained~" "nextmethod")}}}})
"Chapters-Browser-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "code" "Chapters-Browser-Actions.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.code.Chapters-Browser-Actions" module (protected) #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Chapters-Browser-Actions" class () #f 45 7 45 31 ("Actions")
        {Lisp-Entry "form" anonymous #f #f 48 3 48 7 (":control" "Shortcut" "shortcut:" "on-cancel" ":focus-guest" "Event-Handler" "action-handler:" "cancel" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Code-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "code" "Code-Tree.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.code.Code-Tree" module (protected) #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Code-Tree" class () #f 43 7 43 16 ("initialize" "Tree-View")
        {Lisp-Entry "sort?" property () #f 46 12 46 17 ()}
        {Lisp-Entry "get-sort?" accessor #f #f 46 42 46 50 ()}
        {Lisp-Entry "set-sort?" accessor #f #f 46 42 46 50 ()}
        {Lisp-Entry "insert-definition" method (public) #f 49 18 49 35 ("self" "insert-definition" "insert-definition~" "sort?" "definition" "level" "father")}
        {Lisp-Entry "update-row" method (override) #f 53 20 53 30 ("sort?" "self" "insert-self-definitions" "insert-self-definitions~" "get-level" "get-level~" "level" "get-user-data" "get-user-data~" "definition" "let" "row")}}}})
"Hierarchy-Browser"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "code" "Hierarchy-Browser.jazz"} 244772373. jazz
    {Lisp-Entry "jazz.ide.code.Hierarchy-Browser" module (protected) #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.io" "jazz.ide" "jazz.catalog")}
      {Lisp-Entry "Hierarchy-Browser" class () #f 51 7 51 24 ("weak-keys:" "eq?" "test:" "make-table" "initialize" "Layout-View")
        {Lisp-Entry "client" property () #f 54 12 54 18 ()}
        {Lisp-Entry "get-client" accessor #f #f 54 43 54 51 ()}
        {Lisp-Entry "set-client" accessor #f #f 54 43 54 51 ()}
        {Lisp-Entry "client-entry" slot () #f 57 8 57 20 ()}
        {Lisp-Entry "client-selection" slot () #f 58 8 58 24 ()}
        {Lisp-Entry "client-position" slot () #f 59 8 59 23 ()}
        {Lisp-Entry "preserved-states" slot () #f 62 8 62 24 ()}
        {Lisp-Entry "form" anonymous #f #f 65 3 65 7 ("329" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-action" ":form" "show-header?:" "definitions" "Hierarchy-Tree" "<Hierarchy-Tree>" "shown?:" "header" "Tree-Header" "<Tree-Header>" "content" "!" "<!>" "tool" "style:" "hscroll?:" "vscroll?:" "scroller" "Scroller-View" "<Scroller-View>" "on-update" "update" "Push-Tool" "<Push-Tool>" "on-toggle-occurence" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "occurence?" "Toggle-Tool" "<Toggle-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 78 25 78 38 ("definitions-browser" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 87 25 87 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 91 25 91 35 ()}
        {Lisp-Entry "client-activate" method (override) #f 95 20 95 35 ("set-client/entry" "not" "entry" "current-document" "car" "length" "1" "=" "get-context" "get-context~" "context:" "get-file-entries" "get-file-entries~" "entries" "get-cataloguer" "get-cataloguer~" "cataloguer" "get-application" "appl" "let*" "safe-read-form" "extension=?" "if" "get-extension" "get-extension~" "ext" "get-document-controller" "get-document-controller~" "get-moniker" "get-moniker~" "moniker" "let" "Code-Text-View" "is?" "when" "guest" "client-entry" "define")}
        {Lisp-Entry "client-deactivate" method (override) #f 116 20 116 37 ("set-client/entry")}
        {Lisp-Entry "tree-focus-gained" method () #f 120 11 120 28 ("get-scrolled-position" "get-scrolled-position~" "client-position" "get-selection" "get-selection~" "client-selection" "set!" "client" "when")}
        {Lisp-Entry "get-tools-view" method (override) #f 131 20 131 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) #f 135 20 135 33 ("acquire-focus" "acquire-focus~" "definitions" "locate" "tree" "let")}
        {Lisp-Entry "get-occurence?" method () #f 145 11 145 25 ("occurence?" "locate" "get-selected?" "get-selected?~")}
        {Lisp-Entry "get-sorted?" method () #f 149 11 149 22 ("get-occurence?" "not")}
        {Lisp-Entry "guest-actions" method (override) #f 158 20 158 33 ("nextmethod" "hierarchy-browser" "find-actions" "cons")}
        {Lisp-Entry "on-toggle-occurence" method () #f 168 11 168 30 ("update" "get-sorted?" "definitions" "locate" "set-sort?" "set-sort?~" "evt")}
        {Lisp-Entry "on-update" method () #f 173 11 173 20 ("update" "Form" "Exception" "is?" "or" "when" "safe-read-form" "client-entry" "set!" "if" "client" "get-document-controller" "get-document-controller~" "get-moniker" "get-moniker~" "moniker" "let" "reload-jml" "define" "evt")}
        {Lisp-Entry "on-action" method () #f 185 11 185 20 ("selection-change" "definitions" "get-name" "get-name~" "case" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "on-double-click" method () #f 192 11 192 26 ("selection-change" "definitions" "get-name" "get-name~" "case" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" method (override) #f 199 20 199 35 ("finish-focus" "key")}
        {Lisp-Entry "on-escape-press" method (override) #f 203 20 203 35 ("cancel-focus" "key")}
        {Lisp-Entry "on-cancel" method () #f 207 11 207 20 ("cancel-focus" "evt")}
        {Lisp-Entry "finish-focus" method () #f 211 11 211 23 ("acquire-focus" "acquire-focus~" "client" "when")}
        {Lisp-Entry "cancel-focus" method () #f 216 11 216 23 ("acquire-focus" "acquire-focus~" "client-position" "scroll-to" "scroll-to~" "ensure-displayed?:" "set-selection-safe" "set-selection-safe~" "client-selection" "client" "when")}
        {Lisp-Entry "edit-definitions" method () #f 229 11 229 27 ("activate-focus?:" "edit" "edit~" "JML-Node" "is?" "if" "focus-host" "focus-host~" "center-caret" "ensure-displayed?:" "set-selection-safe" "set-selection-safe~" "location-range" "location-range~" "range" "0" "list" "get-location" "get-location~" "append" "location" "get-guest" "get-guest~" "text" "visible?:" "edit-document" "edit-document~" "frame" "client-entry" "get-origin" "get-origin~" "moniker" "get-application" "appl" "let*" "edit-jml-definition" "define" "definition")}
        {Lisp-Entry "set-client/entry" method (public) #f 250 18 250 34 ("restore-state" "update" "set!" "preserve-state" "client" "client-entry" "neq?" "when" "entry" "clt")}
        {Lisp-Entry "update" method () #f 261 11 261 17 ("with-update-locked" "with-update-locked~" "format" "exception-reason" "Exception" "remove-every-row" "remove-every-row~" "set-title" "client-entry" "not" "locate" "key:" "string<?" "sort" "get-children" "get-children~" "some?" "child" "collect-if" "or" "JML-Element" "named?" "+" "definition" "lambda" "for-each" "sort-jml-definitions" "ordered" "definitions" "get-jml-named-children" "insert-jml-definitions" "autoload" "get-autoload" "when" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "add-row~" "collapsed" "expanded" "1" "<" "state" "get-model" "get-model~" "else" "->string" "get-name" "get-name~" "identity" "=>" "get-property" "get-property~" "cond" "title" "Image-Resource" "get-class-image" "get-class-image~" "Component" "subtype?" "and" "image" "get-jml-model" "model" "let*" "insert-jml-self-definitions" "insert-jml-self" "row" "let" "sort?" "node" "level" "father" "insert-definition" "insert-definition~" "get-sorted?" "0" "insert-jml-definition" "tree" "insert-entry-definition" "get-title" "get-title~" "JML-Node" "is?" "if" "entry" "get-entry-title" "define")}
        {Lisp-Entry "preserve-state" method () #f 339 11 339 25 ("text" "use:" "definitions" "locate" "get-view-state" "get-view-state~" "preserved-states" "table-set!" "client")}
        {Lisp-Entry "restore-state" method () #f 343 11 343 24 ("definitions" "locate" "set-view-state" "set-view-state~" "when" "preserved-states" "table-ref" "state" "let" "client")}
        {Lisp-Entry "selection-change" method () #f 354 11 354 27 ("edit-definitions" "Indexed-Entry" "is-not?" "or" "Exception" "is?" "unless" "get-row" "get-row~" "get-user-data" "get-user-data~" "get-single-selection" "get-single-selection~" "selection" "get-document-controller" "get-document-controller~" "get-moniker" "get-moniker~" "when" "current-document" "guest" "let" "get-file-definition" "get-file-definition~" "get-file" "get-file~" "pathname=?" "and" "moniker" "definition" "same-file?" "define" "double-click?" "tree")}}
      {Lisp-Entry "Hierarchy-Tree" class () #f 374 7 374 21 ("Code-Tree")
        {Lisp-Entry "focus-gained" method (override) #f 377 20 377 32 ("get-guest" "tree-focus-gained" "tree-focus-gained~" "nextmethod")}}}})
"Hierarchy-Browser-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "code" "Hierarchy-Browser-Actions.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.code.Hierarchy-Browser-Actions" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Hierarchy-Browser-Actions" class () #f 45 7 45 32 ("Actions")
        {Lisp-Entry "form" anonymous #f #f 48 3 48 7 (":control" "Shortcut" "shortcut:" "on-cancel" ":focus-guest" "Event-Handler" "action-handler:" "cancel" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"IDE"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "application" "IDE.jazz"} 246937334. jazz
    {Lisp-Entry "jazz.ide.application.IDE" module (protected) #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.workspace" "jazz.ui.window" "jazz.ui.view" "jazz.ui.dialog" "jazz.ui.clipboard" "jazz.ui" "jazz.system.application" "jazz.system" "jazz.recorder" "jazz.project" "jazz.locale" "jazz.library.component" "jazz.library" "jazz.jrm" "jazz.jml" "jazz.io" "jazz.ide.login" "jazz.ide" "jazz.groupware" "jazz.git.ui" "jazz.editor.sql.view" "jazz.editor.sql" "jazz.editor.lisp" "jazz.editor.jazz" "jazz.designer" "jazz.debugger.jazz.stub" "jazz.debugger.jazz" "jazz.debugger" "jazz.debuggee" "jazz.console" "jazz.catalog")}
      {Lisp-Entry "IDE" class () #f 73 7 73 10 ("Macro-Recorder" "Workbench-Cataloguer" "new" "initialize" "Application")
        {Lisp-Entry "local-debugger" slot () #f 76 8 76 22 ()}
        {Lisp-Entry "snapshot-debugger" slot () #f 77 8 77 25 ()}
        {Lisp-Entry "cataloguer" slot () #f 78 8 78 18 ()}
        {Lisp-Entry "recorder" slot () #f 79 8 79 16 ()}
        {Lisp-Entry "install-process" method (override) #f 82 20 82 35 ("start-debuggers" "nextmethod")}
        {Lisp-Entry "prepare-workbench" method (override) #f 87 20 87 37 ("setup-workbench" "nextmethod")}
        {Lisp-Entry "finalize-process" method (override) #f 92 20 92 36 ("on-workspace" "method-name:" "self" "target:" "Event-Handler" "new" "workspace" "add-application-listener" "nextmethod")}
        {Lisp-Entry "finish-process" method (override) #f 97 20 97 34 ("preload-catalogs" "nextmethod" "Debugger-Manager" "new" "set-debugger-manager" "get-preferences" "get-toplevel-title" "get-toplevel-title~" "toplevel-title~" "profile" "if" "get-caption-base" "get-caption-base~" "not" "toplevel" "set-caption-base" "set-caption-base~" "cond" "toplevel-title" "let" "setup-caption-base" "define")}
        {Lisp-Entry "preload-catalogs" method (protected virtual) #f 114 29 114 45 ("get-workbench" "load-catalogs-threaded" "load-catalogs-threaded~" "lambda" "delay-event")}
        {Lisp-Entry "conclude-environment" method (override) #f 122 20 122 40 ("console-output-port" "current-output-port" "console-input-port" "current-input-port" "ready-to-controller" "with-system-exception-debugger" "get-local-register" "attach-to-controller" "update-modal-actions" "set-current-modal" "get-toplevel" "enable-window" "enable-window~" "lambda" "modal" "add-debugger-release" "get-controller-debugger" "not" "use-local-debugger?" "layout-menu" "layout-menu~" "set-visible?" "set-visible?~" "windows" "kernel-platform" "neq?" "and" "toggle-terminal" "find-component" "find-component~" "label" "when" "debug" "find-menu" "menu" "let" "nextmethod")}
        {Lisp-Entry "close-environment" method (override) #f 147 20 147 37 ("nextmethod" "detach-debugger-processes" "reloading-process?" "unless")}
        {Lisp-Entry "get-backward-history" method (public) #f 158 18 158 38 ("history-manager" "get-backward-history" "get-backward-history~")}
        {Lisp-Entry "get-forward-history" method (public) #f 162 18 162 37 ("history-manager" "get-forward-history" "get-forward-history~")}
        {Lisp-Entry "get-recorder" method (override) #f 171 20 171 32 ("recorder")}
        {Lisp-Entry "use-profile?" method (override) #f 180 20 180 32 ()}
        {Lisp-Entry "use-profile-logging?" method () #f 187 15 187 35 ()}
        {Lisp-Entry "use-profile-logging?" method (override) #f 190 24 190 44 ()}
        {Lisp-Entry "choose-profile-login" method (override) #f 194 20 194 40 ("process-name" "invite:" "choose-login")}
        {Lisp-Entry "default-frame-class" method (override) #f 203 20 203 39 ("Plain-Text-View")}
        {Lisp-Entry "known-extension-frame-class" method (override) #f 207 20 207 47 ("nextmethod" "else" "View-Editor" "Jazz-Text-View" "Jazz-Extensions" "CommonLisp-Text-View" "jazz.editor.commonlisp" "jazz.editor.commonlisp:CommonLisp-Text-View" "CommonLisp-Extensions" "Scheme-Text-View" "jazz.editor.scheme" "jazz.editor.scheme:Scheme-Text-View" "Scheme-Extensions" "Diff-Text-View" "jazz.editor.diff" "jazz.editor.diff:Diff-Text-View" "Image-View" "jazz.ui" "jazz.ui:Image-View" "Tex-Text-View" "jazz.editor.tex" "jazz.editor.tex:Tex-Text-View" "Python-Text-View" "jazz.editor.python" "jazz.editor.python:Python-Text-View" "Lua-Text-View" "jazz.editor.lua" "jazz.editor.lua:Lua-Text-View" "JavaScript-Text-View" "jazz.editor.javascript" "jazz.editor.javascript:JavaScript-Text-View" "Properties-Text-View" "jazz.editor.properties" "jazz.editor.properties:Properties-Text-View" "CSS-Text-View" "jazz.editor.css" "jazz.editor.css:CSS-Text-View" "SQL-Text-View" "jazz.editor.sql" "jazz.editor.sql:SQL-Text-View" "XML-Text-View" "HTML-Text-View" "jazz.editor.html" "jazz.editor.html:HTML-Text-View" "CSharp-Text-View" "jazz.editor.csharp" "jazz.editor.csharp:CSharp-Text-View" "Java-Text-View" "jazz.editor.java" "jazz.editor.java:Java-Text-View" "Prop-Text-View" "jazz.editor.prop" "jazz.editor.prop:Prop-Text-View" "C-Text-View" "jazz.editor.c" "jazz.editor.c:C-Text-View" "Plain-Formatted-Text-View" "Plain-Text-View" "extension=?" "test:" "member?" "cond" "ext")}
        {Lisp-Entry "unknown-extension-frame-class" method (override) #f 233 20 233 49 ("Plain-Text-View")}
        {Lisp-Entry "edit-file" method (override) #f 242 20 242 29 ("nextmethod" "else" "edit-snapshot" "extension=?" "cond" "get-extension" "get-extension~" "ext" "let" "file")}
        {Lisp-Entry "edit-snapshot" method () #f 253 11 253 24 ("debugger" "select-workspace" "get-processes-view" "open-snapshot" "open-snapshot~" "file")}
        {Lisp-Entry "get-cataloguer" method (override) #f 263 20 263 34 ("cataloguer")}
        {Lisp-Entry "get-history-manager" method (public) #f 272 18 272 37 ("history-manager")}
        {Lisp-Entry "stage-class" method (override) #f 281 20 281 31 ("Wallpaper-Stage")}
        {Lisp-Entry "set-search-result" method (public) #f 290 18 290 35 ("->string" "else" "Locales" "is?" "not" "cond" "set-title" "set-title~" "set-icon" "set-icon~" "search-result" "find-component" "find-component~" "label" "when" "find-status-bar" "status-bar" "let" "msg" "icon")}
        {Lisp-Entry "class-actions" method (override) #f 305 20 305 33 ("nextmethod" "ide" "find-actions" "cons")}
        {Lisp-Entry "terminate-process" method (override) #f 315 20 315 37 ("error?:" "debugger" "get-local-register" "unregister-object" "unregister-object~" "use-local-debugger?" "when" "nextmethod")}
        {Lisp-Entry "save-environment" method (override) #f 326 20 326 36 ("cataloguer" "save-catalogs" "save-catalogs~" "use-profile?" "when" "nextmethod")}
        {Lisp-Entry "reload-process" method (override) #f 337 20 337 34 ("message-box")}
        {Lisp-Entry "load-session" method () #f 347 11 347 23 ("set-current-directory" "when" "session" "application" "get-preferences" "get-current-directory" "get-current-directory~" "dir" "let")}
        {Lisp-Entry "reload-opened-windows" method () #f 354 11 354 32 ("session" "application" "get-preferences" "get-opened-windows" "get-opened-windows~" "reload-component" "exists?" "exists?~" "not" "or" "when" "others" "file" "bind-keywords" "properties" "class" "bind" "info" "lambda" "for-each")}
        {Lisp-Entry "reload-component" method (override) #f 364 20 364 36 ("nextmethod" "else" "Compare-Files-Frame" "compare-files" "Compare-Directories-Frame" "compare-directories" "Projects-Manager" "projects-manager" "Browser-Frame" "browser-frame" "Image-Frame" "image-frame" "Java-Text-Palette" "java-palette" "HTML-Text-Frame" "html-text" "Prop-Text-Frame" "prop-text" "Java-Text-Frame" "java-text" "C-Text-Frame" "c-text" "Plain-Text-Frame" "new" "apply" "plain-text" "case" "properties" "class")}
        {Lisp-Entry "Workbench-File" definition () #f 388 14 388 28 ("Profile" "File")}
        {Lisp-Entry "default-workbench" method (protected virtual) #f 392 29 392 46 ("Workbench" "new")}
        {Lisp-Entry "setup-workbench" method (public) #f 396 18 396 33 ("err" "continue-handler:" "title:" "set-workbench" "with-execution-context" "lambda" "with-safe-execution" "parse" "parse~" "format" "title" "set-property" "set-property~" "Project-Not-Found" "<Project-Not-Found>" "<form>" "form" "ref" "default-workbench" "read-form" "instantiate" "instantiate~" "not-found-handler" "tag-reference-not-found-handler" "parameterize" "exists?" "exists?~" "Profile" "is-alias?" "and" "if" "Workbench-File" "file" "let" "load-workbench" "define")}
        {Lisp-Entry "update-project-actions" method (public) #f 422 18 422 40 ("debug-project-with" "debug-project" "run-project" "test-project" "view-project-log" "build-project" "compile-file" "edit-project" "ide" "Action" "set-action-enabled?" "parse" "parse~" "find-pathname-unit" "unit-name" "find-source" "find-source~" "get-workbench" "workbench" "get-document-controller" "get-document-controller~" "get-moniker" "get-moniker~" "moniker" "Document" "is?" "and" "when" "current-document" "guest" "project-file" "get-active-project" "project" "let")}
        {Lisp-Entry "run-project" method (public) #f 448 18 448 29 ("project-run" "project-run~" "wait?" "wait?:" "show-console?" "show-console?:" "command-arguments" "command-arguments:" "command-action" "command-action:" "profile" "profile:" "project")}
        {Lisp-Entry "debug-project" method (public) #f 457 18 457 31 ("project-debug" "project-debug~" "wait?" "wait?:" "show-console?" "show-console?:" "command-arguments" "command-arguments:" "command-action" "command-action:" "profile" "profile:" "debugger-interactive?" "debugger-interactive?:" "executable" "executable:" "project")}
        {Lisp-Entry "fresh-prompt" method (public) #f 473 18 473 30 ("fresh-prompt" "fresh-prompt~" "when" "get-console-text" "or" "let" "text" "text:")}
        {Lisp-Entry "on-console" method (package) #f 479 19 479 29 ("get-console-manager" "select-next-console" "select-next-console~" "else" "ensure-displayed" "ensure-displayed~" "get-end" "get-end~" "cell-displayed?" "cell-displayed?~" "fresh-prompt" "fresh-prompt~" "last-block" "last-block~" "extended?" "extended?~" "at-end?" "at-end?~" "not" "or" "cond" "eq?" "and" "when" "show-console" "text" "get-focus" "focus" "let" "evt")}
        {Lisp-Entry "show-console" method (public) #f 492 18 492 30 ("acquire-focus" "acquire-focus~" "bell" "not" "if" "get-text" "get-text~" "text" "and" "when" "select-docked" "manager" "let" "focus?" "focus?:" "home" "workspace" "workspace:" "Lisp-Console-Manager" "class" "class:")}
        {Lisp-Entry "on-clear-console" method (package) #f 504 19 504 35 ("get-console-text" "clear-console" "clear-console~" "evt")}
        {Lisp-Entry "on-sql-console" method (package) #f 508 19 508 33 ("get-sql-console-text" "text:" "fresh-prompt" "when" "sql" "workspace:" "SQL-Console-Manager" "class:" "show-console" "SQL-Console-Text-View" "get-focus" "is?" "had-focus?" "let" "evt")}
        {Lisp-Entry "on-sql-connections" method () #f 515 11 515 29 ("focus?:" "sql" "workspace:" "SQL-Connections-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-sql-inventory" method () #f 520 11 520 27 ("focus?:" "sql" "workspace:" "Inventory-Browser" "select-docked" "evt")}
        {Lisp-Entry "on-sql-tree-output" method () #f 524 11 524 29 ("focus?:" "sql" "SQL-Tree-Output" "select-docked" "evt")}
        {Lisp-Entry "get-output-log" method (override) #f 533 20 533 34 ("Output-Log" "singleton-docked" "get-guest" "get-guest~")}
        {Lisp-Entry "get-profiling-results" method (public) #f 542 18 542 39 ("Profile-Results" "singleton-docked" "get-guest" "get-guest~")}
        {Lisp-Entry "register-base-objects" method (override) #f 551 20 551 41 ("local-debugger" "Jazz-Debugger-Local-Proxy" "new" "debugger" "get-local-register" "register-object" "register-object~" "use-local-debugger?" "when" "nextmethod")}
        {Lisp-Entry "use-local-debugger?" method (protected virtual) #f 562 29 562 48 ()}
        {Lisp-Entry "get-local-debugger" method (override) #f 566 20 566 38 ("local-debugger")}
        {Lisp-Entry "get-snapshot-debugger" method (override) #f 570 20 570 41 ("snapshot-debugger")}
        {Lisp-Entry "start-debuggers" method () #f 574 11 574 26 ("Snapshot-Debugger" "snapshot-debugger" "set-current-debugger" "register-debugger" "start-debugger" "start-debugger~" "Jazz-Debugger" "new" "set!" "local-debugger" "not" "use-local-debugger?" "when")}
        {Lisp-Entry "detach-debugger-processes" method () #f 587 11 587 36 ("get-debuggers" "detach-processes" "detach-processes~" "for-each" "use-local-debugger?" "when")}
        {Lisp-Entry "initial-console-context" method (override) #f 597 20 597 43 ("get-context" "get-context~" ":process" "not" "if" "error?:" "console" "tools" "get-preferences" "pref" "let")}
        {Lisp-Entry "process-alias" method (override) #f 609 20 609 33 ("nextmethod" "else" "get-repositories-manager" ":repositories-manager" "get-workbench-manager" ":workbench-manager" "recorder" ":recorder" "current-view-debugger" ":view-debugger" "current-debugger" ":debugger" "case" "name")}
        {Lisp-Entry "on-open-favorite" method () #f 624 11 624 27 ("else" "event:" "call-action" "Action" "get-properties" "get-properties~" ":launch" "Event" "new" "apply" "self" "invoke" "invoke~" "Event-Handler" "is?" "edit-definitions" "symbol?" "edit-document" "file?" "cond" "get-target" "get-target~" "target" "error" "not" "if" "char:" "get-property" "get-property~" "let*" "get-shortcut" "get-shortcut~" "eqv?" "favorite" "lambda" "find-if" "get-children" "get-children~" "when" "error?:" "favorites" "get-preferences" "pref" "let" "char" "find-favorite" "define" "evt")}
        {Lisp-Entry "edit-definitions" method (override) #f 655 20 655 36 ("Projects-Search" "new" "get-search-manager" "edit-definitions" "edit-definitions~" "else" "car" "1" "length" "case" "add-history" "null?" "get-cataloguer" "get-coalesced-definitions" "get-coalesced-definitions~" "definitions" "->string" "name" "edit" "edit~" "bell" "not" "locator->entry" "entry" "let" "composite-reference?" "symbol?" "and" "if" "entries" "filter-entries" "define" "history-item" "history-item:" "workspace" "workspace:" "context" "context:" "class" "class:" "object")}
        {Lisp-Entry "edit-references" method (override) #f 676 20 676 35 ("whole-words?:" "make-search-context" "references" "Projects-Search" "new" "get-search-manager" "edit-references" "edit-references~" "else" "car" "edit-textual-reference" "edit-textual-reference~" "1" "length" "case" "add-history" "bell" "null?" "if" "get-cataloguer" "get-references" "get-references~" "definitions" "->string" "name" "let" "history-item" "history-item:" "context" "context:" "object")}
        {Lisp-Entry "view-editor-class" method (public virtual) #f 692 26 692 43 ("View-Editor")}
        {Lisp-Entry "component-editor-class" method (public virtual) #f 696 26 696 48 ("Grid-Component-Editor")}
        {Lisp-Entry "default-designer-imports" method (public virtual) #f 700 26 700 50 ("jazz.jml")}
        {Lisp-Entry "make-traits-toolbox" method (public virtual) #f 704 26 704 45 ("title:" "Toolbox" "<Toolbox>" "form" "jazz.ide.data.toolbox" "data" "parse-form" "instantiate" "instantiate~" "class")}
        {Lisp-Entry "get-documentation" method (public) #f 717 18 717 35 ("get-definition" "get-definition~" "get-documentation-cataloguer" "cataloguer" "let" "when" "symbol")}
        {Lisp-Entry "edit-documentation" method (public) #f 724 18 724 36 ("focus-host" "focus-host~" "set-selection" "set-selection~" "location-range" "location-range~" "range" "0" "list" "get-location" "get-location~" "append" "location" "get-guest" "get-guest~" "text" "visible?:" "edit-document" "frame" "get-toplevel" "get-toplevel~" "get-origin" "get-origin~" "moniker" "get-form" "get-form~" "form" "let*" "bell" "not" "if" "get-documentation" "doc" "let" "symbol")}
        {Lisp-Entry "edit-documentation" method (public) #f 739 18 739 36 ("get-host" "get-host~" "bring-to-front" "bring-to-front~" "set-entry" "set-entry~" "entry:" "get-documentation-catalog" "client:" "new-frame" "not" "if" "list" "info" "find-frame-guest" "editor" "Doc-Editor" "class" "let*" "text-location" "text" "object" "location")}
        {Lisp-Entry "on-new-project" method () #f 754 11 754 25 ("get-workbench" "get-workbench-manager" "add-project-to" "add-project-to~" "evt")}
        {Lisp-Entry "on-open-text" method (package) #f 758 19 758 31 ("get-name" "get-name~" "key:" "string>?" "sort" "char-encoding:" "Jazz-Plain-Text-View" "class:" "edit-document" "file" "lambda" "for-each" "text?:" "multiple-selection?:" "choose-file" "char-encoding" "files" "receive" "evt")}
        {Lisp-Entry "on-open-jazz-text" method (package) #f 765 19 765 36 ("get-name" "get-name~" "key:" "string>?" "sort" "char-encoding:" "Jazz-Text-View" "class:" "edit-document" "file" "lambda" "for-each" "text?:" "multiple-selection?:" "title:" "choose-file" "char-encoding" "files" "receive" "evt")}
        {Lisp-Entry "on-terminal-repl" method (package) #f 772 19 772 35 ("terminal-repl" "evt")}
        {Lisp-Entry "on-toggle-terminal" method (package) #f 776 19 776 37 ("toggle-terminal" "evt")}
        {Lisp-Entry "on-clear-terminal" method (package) #f 780 19 780 36 ("clear-terminal" "evt")}
        {Lisp-Entry "on-test" method (package virtual) #f 784 27 784 34 ("get-profile" "test" "test~" "evt")}
        {Lisp-Entry "on-test-shift" method (package virtual) #f 788 27 788 40 ("get-profile" "test-shift" "test-shift~" "evt")}
        {Lisp-Entry "on-test-no" method () #f 792 11 792 21 ("test9" "test9~" "9" "test8" "test8~" "8" "test7" "test7~" "7" "test6" "test6~" "6" "test5" "test5~" "5" "test4" "test4~" "4" "test3" "test3~" "3" "test2" "test2~" "2" "test1" "test1~" "1" "test0" "test0~" "0" "no:" "get-property" "get-property~" "case" "get-profile" "profile" "let" "evt")}
        {Lisp-Entry "on-focus-next-process" method (package) #f 807 19 807 40 ("debugged=?" "test:" "find" "focus-process" "focus-process~" "null?" "unless" "element" "length" "1" "+" "modulo" "next-rank" "first" "not" "if" "rank" "next-process" "define" "collect-processes" "processes" "get-debugger-manager" "get-focused-process" "get-focused-process~" "focused" "let" "evt")}
        {Lisp-Entry "on-focus-previous-process" method (package) #f 820 19 820 44 ("debugged=?" "test:" "find" "focus-process" "focus-process~" "null?" "unless" "element" "length" "1" "-" "modulo" "previous-rank" "last" "not" "if" "rank" "previous-process" "define" "collect-processes" "processes" "get-debugger-manager" "get-focused-process" "get-focused-process~" "focused" "let" "evt")}
        {Lisp-Entry "on-reload-process" method (package) #f 833 19 833 36 ("reload-process" "reload-process~" "bell" "not" "if" "get-debugger-manager" "get-focused-process" "get-focused-process~" "debugged" "let" "evt")}
        {Lisp-Entry "on-debug-views" method (package) #f 840 19 840 33 ("current-view-debugger" "debug-views" "debug-views~" "evt")}
        {Lisp-Entry "on-explore-views" method (package) #f 844 19 844 35 ("current-view-debugger" "explore-views" "explore-views~" "evt")}
        {Lisp-Entry "on-processes" method (package) #f 848 19 848 31 ("focus?:" "debugger" "workspace:" "Processes-View" "select-docked" "evt")}
        {Lisp-Entry "on-threads" method (package) #f 852 19 852 29 ("focus?:" "debugger" "workspace:" "Threads-View" "select-docked" "evt")}
        {Lisp-Entry "on-frames" method (package) #f 856 19 856 28 ("focus?:" "debugger" "workspace:" "Frames-View" "select-docked" "evt")}
        {Lisp-Entry "on-restarts" method (package) #f 860 19 860 30 ("focus?:" "debugger" "workspace:" "Restarts-View" "select-docked" "evt")}
        {Lisp-Entry "on-exception" method (package) #f 864 19 864 31 ("focus?:" "debugger" "workspace:" "Exception-View" "select-docked" "evt")}
        {Lisp-Entry "on-variables" method (package) #f 868 19 868 31 ("focus?:" "debugger" "workspace:" "Variables-View" "select-docked" "evt")}
        {Lisp-Entry "on-resources-monitor" method () #f 872 11 872 31 ("Resources-Monitor" "show-palette" "evt")}
        {Lisp-Entry "on-logs-viewer" method (package) #f 876 19 876 33 ("Logs-Viewer" "show-palette" "evt")}
        {Lisp-Entry "on-class-browser" method () #f 880 11 880 27 ("set-text" "set-text~" "when" "view" "palette" "lambda" "initialize:" "Class-Browser" "show-palette" "get-selected-string" "get-selected-string~" "Text-View" "is?" "if" "text" "get-focus" "focus" "let*" "evt")}
        {Lisp-Entry "on-references-analyser" method () #f 888 11 888 33 ("References-Analyser" "show-palette" "evt")}
        {Lisp-Entry "on-edit-clipboard" method (package) #f 892 19 892 36 ("bell" "edit-definitions" "string?" "if" "get-clipboard-text" "clipboard" "let" "evt")}
        {Lisp-Entry "get-workbench-manager" method (public) #f 899 18 899 39 ("Workbench-Manager" "singleton-docked" "get-guest" "get-guest~")}
        {Lisp-Entry "on-select-project" method (package) #f 903 19 903 36 ("get-workbench-manager" "select-current" "select-current~" "evt")}
        {Lisp-Entry "on-edit-project" method (package) #f 907 19 907 34 ("get-workbench-manager" "edit-current" "edit-current~" "evt")}
        {Lisp-Entry "on-compile-file" method (package) #f 911 19 911 34 ("get-workbench-manager" "compile-current" "compile-current~" "evt")}
        {Lisp-Entry "on-preprocess-file" method (package) #f 915 19 915 37 ("get-workbench-manager" "preprocess-current" "preprocess-current~" "evt")}
        {Lisp-Entry "on-build-project" method (package) #f 919 19 919 35 ("get-workbench-manager" "build-current" "build-current~" "evt")}
        {Lisp-Entry "on-clean-project" method (package) #f 923 19 923 35 ("get-workbench-manager" "clean-current" "clean-current~" "evt")}
        {Lisp-Entry "on-view-project-log" method (package) #f 927 19 927 38 ("get-workbench-manager" "view-log" "view-log~" "evt")}
        {Lisp-Entry "on-configure-project" method (package) #f 931 19 931 39 ("get-workbench-manager" "configure-current" "configure-current~" "evt")}
        {Lisp-Entry "on-test-project" method (package) #f 935 19 935 34 ("get-workbench-manager" "test-current" "test-current~" "evt")}
        {Lisp-Entry "on-run-project" method (package) #f 939 19 939 33 ("get-workbench-manager" "run-current" "run-current~" "evt")}
        {Lisp-Entry "on-debug-project" method (package) #f 943 19 943 35 ("get-workbench-manager" "debug-current" "debug-current~" "evt")}
        {Lisp-Entry "on-debug-project-with" method (package) #f 947 19 947 40 (":choose" "executable:" "get-workbench-manager" "debug-current" "debug-current~" "evt")}
        {Lisp-Entry "on-distribute-project" method (package) #f 951 19 951 40 ("get-workbench-manager" "distribute-current" "distribute-current~" "evt")}
        {Lisp-Entry "on-toolbox" method () #f 955 11 955 21 ("focus?:" "designer" "workspace:" "Toolbox-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-traits" method () #f 959 11 959 20 ("focus?:" "designer" "workspace:" "Traits-Editor" "select-docked" "evt")}
        {Lisp-Entry "on-descendants" method () #f 963 11 963 25 ("focus?:" "designer" "workspace:" "Descendants-Editor" "select-docked" "evt")}
        {Lisp-Entry "on-showcase" method () #f 967 11 967 22 ("Showcase" "new-frame" "evt")}
        {Lisp-Entry "on-properties" method (package) #f 976 19 976 32 ("focus?:" "Properties-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-search-results" method (package) #f 980 19 980 36 ("focus?:" "Search-Results" "select-docked" "evt")}
        {Lisp-Entry "on-profile-results" method (package) #f 984 19 984 37 ("focus?:" "Profile-Results" "select-docked" "evt")}
        {Lisp-Entry "on-servers" method (package) #f 988 19 988 29 ("focus?:" "Servers-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-output-log" method (package) #f 992 19 992 32 ("focus?:" "Output-Log" "select-docked" "evt")}
        {Lisp-Entry "on-user-log" method (package) #f 996 19 996 30 ("refresh" "refresh~" "focus?:" "User-Log" "select-docked" "user-log" "let" "evt")}
        {Lisp-Entry "on-activities" method (package) #f 1001 19 1001 32 ("focus?:" "Activities-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-workbench" method (package) #f 1005 19 1005 31 ("focus?:" "Workbench-Manager" "select-docked" "evt")}
        {Lisp-Entry "get-repositories-manager" method (package) #f 1009 19 1009 43 ("Repositories-Manager" "singleton-docked" "get-guest" "get-guest~")}
        {Lisp-Entry "on-repositories" method (package) #f 1013 19 1013 34 ("focus?:" "Repositories-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-favorites" method (package) #f 1017 19 1017 31 ("focus?:" "Favorites-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-chapters" method (package) #f 1021 19 1021 30 ("focus?:" "text" "workspace:" "Chapters-Browser" "select-docked" "evt")}
        {Lisp-Entry "on-hierarchy" method (package) #f 1025 19 1025 31 ("focus?:" "text" "workspace:" "Hierarchy-Browser" "select-docked" "evt")}
        {Lisp-Entry "on-bindings-manager" method (package) #f 1029 19 1029 38 ("new-frame" "focus-host" "focus-host~" "if" "Bindings-Manager" "find-frame-host" "frame" "let" "evt")}
        {Lisp-Entry "on-view-bindings" method (package) #f 1036 19 1036 35 ("Shortcut-Viewer" "get-modal" "evt")}
        {Lisp-Entry "on-skins-manager" method (package) #f 1040 19 1040 35 ("new-frame" "focus-host" "focus-host~" "if" "Skins-Manager" "find-frame-host" "frame" "let" "evt")}
        {Lisp-Entry "on-preferences" method (package) #f 1047 19 1047 33 ("Preferences-Manager" "new-frame" "evt")}
        {Lisp-Entry "on-save-profile" method (package) #f 1051 19 1051 34 ("save-workspaces" "save-bindings" "persist-preferences" "call-exit-listeners" "call-save-environment-listeners" "user-message" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-exit-without-save" method (package) #f 1063 19 1063 39 ("exit" "yes" "question" "type:" "message-box" "eq?" "when" "evt")}
        {Lisp-Entry "on-compare-directories" method (package) #f 1068 19 1068 41 ("focus-host" "focus-host~" "compare-trees" "compare-trees~" "get-guest" "get-guest~" "configure" "configure~" "lambda" ":wait" "with-cursor" "host-visible?:" "frame" "Compare-Directories" "new-frame" "not" "compare-directories" "tools" "get-preferences" "get-active-configuration" "get-active-configuration~" "default" "let" "get-shift?" "get-shift?~" "if" "evt")}
        {Lisp-Entry "on-compare-files" method (package) #f 1082 19 1082 35 ("Compare-Files" "new-frame" "evt")}
        {Lisp-Entry "on-compare-databases" method (package) #f 1086 19 1086 39 ("Compare-Databases" "new-frame" "evt")}
        {Lisp-Entry "on-git-explorer" method (package) #f 1091 19 1091 34 ("Git-Explorer" "new-frame" "evt")}
        {Lisp-Entry "on-projects-manager" method () #f 1100 11 1100 30 ("new-frame" "focus-host" "focus-host~" "if" "Projects-Manager" "find-frame-host" "frame" "let" "evt")}
        {Lisp-Entry "on-update-catalogs" method () #f 1107 11 1107 29 ("user-feedback" "update" "update~" "post-catalog" "when" "get-catalog" "get-catalog~" "catalog" "let" "project" "get-workbench" "for-each-project" "for-each-project~" "lambda" ":wait" "with-cursor" "evt")}}}})
"IDE-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "application" "IDE-Actions.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.application.IDE-Actions" module (protected) #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "IDE-Actions" class () #f 45 7 45 18 ("Orphaned-Actions")
        {Lisp-Entry "form" anonymous #f #f 48 3 48 7 ("on-user-code" ":focus" "user-code" "F12" "on-edit-clipboard" "edit-clipboard" "open-favorite-0" "open-favorite-9" "open-favorite-8" "open-favorite-7" "open-favorite-6" "open-favorite-5" "open-favorite-4" "open-favorite-3" "open-favorite-2" "open-favorite-1" "open-favorite-Z" "open-favorite-Y" "open-favorite-X" "open-favorite-W" "open-favorite-V" "open-favorite-U" "open-favorite-T" "open-favorite-S" "open-favorite-R" "open-favorite-Q" "open-favorite-P" "open-favorite-O" "open-favorite-N" "open-favorite-M" "open-favorite-L" "open-favorite-K" "open-favorite-J" "open-favorite-I" "open-favorite-H" "open-favorite-G" "open-favorite-F" "open-favorite-E" "open-favorite-D" "open-favorite-C" "open-favorite-B" "char:" "on-open-favorite" "open-favorite-A" "on-showcase" "view-showcase" "on-documentation-editor" "view-documentation-editor" "on-hierarchy" "view-hierarchy" "on-chapters" "view-chapters" "on-sql-console" "view-sql-console" "on-sql-inventory" "view-sql-inventory" "on-sql-connections" "view-sql-connections" "on-java-manager" "view-java-manager" "on-java-reference-finder" "view-java-reference-finder" "on-preferences" "view-preferences" "on-descendants" "view-descendants" "on-traits" "view-traits" "on-toolbox" "view-toolbox" "on-type-viewer" "view-type-viewer" "on-registry-viewer" "view-registry-viewer" "on-servers" "view-servers" "on-activities" "view-activities" "on-user-log" "view-user-log" "on-output-log" "view-output-log" "on-profile-results" "view-profile-results" "on-search-results" "view-search-results" "Return" "on-properties" "view-properties" "on-debugger" "view-debugger" "on-console" "view-console" "on-favorites" "view-favorites" "on-repositories" "view-repositories" "on-workbench" "view-workbench" "play-recording-5" "play-recording-4" "play-recording-3" "play-recording-2" "play-recording-1" "on-play-recording" "play-recording" "on-set-active-recording" "set-active-recording" "on-output-recording" "output-recording" "on-register-recording" "register-recording" "on-present-recording" "present-recording" "on-resume-recording" "resume-recording" "on-stop-recording" "stop-recording" "on-start-recording" ":recorder" "start-recording" "on-command-execute" "command-execute" "alternate-shortcut:" "on-command-extended" "command-extended" "on-capture-mouse-host" "capture-mouse-host" "on-capture-host" "capture-host" "on-capture-mouse-document" "capture-mouse-document" "on-capture-document" "capture-document" "unzoom-document" "zoom-out-document" "document" "zoom-in-document" "on-unzoom" "unzoom-mouse-view" "on-zoom-out" "zoom-out-mouse-view" "mouse-view" "what:" "on-zoom-in" "zoom-in-mouse-view" "on-skins-manager" "skins-manager" "on-view-bindings" "view-bindings" "on-bindings-manager" "bindings-manager" "on-git-explorer" "git-explorer" "on-compare-files" "compare-files" "on-compare-directories" "compare-directories" "on-variables" "variables" "on-exception" "exception" "on-restarts" "restarts" "on-frames" "frames" "on-threads" "threads" "on-processes" "processes" "on-profiler-manager" "profiler-manager" "on-resources-monitor" "resources-monitor" "on-logs-viewer" "logs-viewer" "on-references-analyser" "references-analyser" "on-class-browser" "class-browser" "on-reload-process" "reload-process" "on-focus-previous-process" "focus-previous-process" "on-focus-next-process" "focus-next-process" "test-shift-0" "test-shift-9" "test-shift-8" "test-shift-7" "test-shift-6" "test-shift-5" "test-shift-4" "test-shift-3" "test-shift-2" "test-shift-1" "0" "test-0" "9" "test-9" "8" "test-8" "7" "test-7" "6" "test-6" "5" "test-5" "4" "test-4" "3" "test-3" "2" "test-2" "1" "no:" "on-test-no" "test-1" "on-test-shift" "test-shift" "on-test" "test" "on-clear-terminal" "clear-terminal" "on-toggle-terminal" "toggle-terminal" "on-terminal-repl" "terminal-repl" "Space" "on-clear-console" "clear-console" "on-spy-events" "spy-events" "on-spy-messages" "spy-messages" "on-explore-views" "explore-views" "F8" "on-debug-views" "debug-views" "Tab" "on-next-debuggee" "next-debuggee" "on-call-run-to" "call-run-to" "on-call-step-out" "call-step-out" "on-call-step-into" "call-step-into" "on-call-step-over" "call-step-over" "on-run-to-result" "run-to-result" "on-run-to-cursor" "run-to-cursor" "on-step-outside-function" "step-outside-function" "on-step-out" "step-out" "on-step-into-function" "step-into-function" "F11" "on-step-into" "step-into" "F10" "on-step-over" "step-over" "on-continue" "continue" "on-break" "break" "enabled?:" "F9" "on-restart" ":debugger" "restart" "on-build-project" "build-project" "on-compile-file" "compile-file" "on-debug-project-with" "debug-project-with" "on-debug-project" "debug-project" "on-run-project" "run-project" "on-test-project" "test-project" ":control" "on-configure-project" "configure-project" "on-view-project-log" "view-project-log" "on-clean-project" "clean-project" "on-edit-project" "edit-project" "on-update-catalogs" "update-catalogs" "F7" "on-projects-manager" "projects-manager" "F5" "on-select-project" "select-project" "on-exit-without-save" "exit-without-save" "on-save-profile" "save-profile" "on-open-jazz-text" "open-jazz-text" "on-open-text" "open-text" ":shift" ":alt" "Shortcut" "shortcut:" "on-new-project" ":application" "Event-Handler" "action-handler:" "new-project" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"IDE-Bindings"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "application" "IDE-Bindings.jazz"} 245733924. jazz
    {Lisp-Entry "jazz.ide.application.IDE-Bindings" module (protected) #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.system.application" "jazz.project" "jazz.library" "jazz.jml" "jazz.ide" "jazz.groupware" "jazz.editor.scheme" "jazz.editor.lisp" "jazz.editor.jazz" "jazz.designer" "jazz.console")}
      {Lisp-Entry "IDE-Bindings" class () #f 54 7 54 19 ("Application-Bindings")
        {Lisp-Entry "form" anonymous #f #f 57 3 57 7 ("current-frame" "previous-frame" "F6" "next-frame" "exit" "print-preview" "print-layout" "print" "F4" "close" "new" "windows" "save" "<guest" "<guest~>" "mac" "paste&next" "select-outer" "Space" "lock-anchor" "Return" "open-line" "paste" "copy" "cut" "redo" "undo" "command-extended" "emacs" "navigate-upward" "<menu" "<menu~>" "navigate-end" "navigate-home" "navigate-right" "navigate-left" "navigate-downward" "<menubar" "<menubar~>" "move-right" "move-left" "<tree" "<tree~>" "insert-next" "insert-previous" "<console-text" "<console-text~>" "edit-references" "edit-definitions" "<code-text" "<code-text~>" "widen-forward" "next" "prior" "document-end" "document-home" "extend-end" "end" "extend-home" "home" "kill-line" "delete-word" "delete-char" "downward-compound" "upward-compound" "extend-downward" "move-downward" "extend-upward" "move-upward" "forward-compound" "extend-forward-word" "move-forward-word" "extend-forward-char" "move-forward-char" "backward-compound" "extend-backward-word" "move-backward-word" "extend-backward-char" "move-backward-char" "<text" "<text~>" "select-all" "shift-tab" "alternate-shortcut:" "tab" "<view" "<view~>" "view-bindings" "bindings-manager" "<ide" "<ide~>" ":control" "find" ":shift" "paste-cycle-stack-reversed" ":alt" "Shortcut" "shortcut:" "paste-cycle-stack" "!" "<!>" ">" "<application" "<application~>" "jazz" "Trait" "<Trait>" "inspector" "Inspector-Actions" "<Inspector-Actions>" "hierarchy-browser" "Hierarchy-Browser-Actions" "<Hierarchy-Browser-Actions>" "chapters-browser" "Chapters-Browser-Actions" "<Chapters-Browser-Actions>" "shortcut-viewer" "Shortcut-Viewer-Actions" "<Shortcut-Viewer-Actions>" "preview-pane" "Preview-Pane-Actions" "<Preview-Pane-Actions>" "view-surrogate" "View-Surrogate-Actions" "<View-Surrogate-Actions>" "view-editor" "View-Editor-Actions" "<View-Editor-Actions>" "search-results-tree" "Search-Results-Tree-Actions" "<Search-Results-Tree-Actions>" "search-manager" "Search-Manager-Actions" "<Search-Manager-Actions>" "compare-trees" "Compare-Trees-Actions" "<Compare-Trees-Actions>" "class-browser" "Class-Browser-Actions" "<Class-Browser-Actions>" "manager" "Manager-Actions" "<Manager-Actions>" "repositories-manager" "Repositories-Manager-Actions" "<Repositories-Manager-Actions>" "workbench-manager" "Workbench-Manager-Actions" "<Workbench-Manager-Actions>" "workbench-tree" "Workbench-Tree-Actions" "<Workbench-Tree-Actions>" "servers" "Servers-Actions" "<Servers-Actions>" "entities-tree" "Entities-Tree-Actions" "<Entities-Tree-Actions>" "traits-tree" "Traits-Tree-Actions" "<Traits-Tree-Actions>" "component-controller" "Component-Controller-Actions" "<Component-Controller-Actions>" "components-tree" "Components-Tree-Actions" "<Components-Tree-Actions>" "components-viewer" "Components-Viewer-Actions" "<Components-Viewer-Actions>" "tree-embedded-search-text" "Tree-Embedded-Search-Text-Actions" "<Tree-Embedded-Search-Text-Actions>" "scheme-text" "Scheme-Text-Actions" "<Scheme-Text-Actions>" "composite-text" "Composite-Text-Actions" "<Composite-Text-Actions>" "compare-text" "Compare-Text-Actions" "<Compare-Text-Actions>" "combo-text" "Combo-Text-Actions" "<Combo-Text-Actions>" "console-text" "Console-Text-Actions" "<Console-Text-Actions>" "find-mode" "Find-Mode-Actions" "<Find-Mode-Actions>" "execute-mode" "Execute-Mode-Actions" "<Execute-Mode-Actions>" "extended-mode" "Extended-Mode-Actions" "<Extended-Mode-Actions>" "highlight-mode" "Highlight-Mode-Actions" "<Highlight-Mode-Actions>" "search-mode" "Search-Mode-Actions" "<Search-Mode-Actions>" "jazz-text" "Jazz-Text-Actions" "<Jazz-Text-Actions>" "lisp-text" "Lisp-Text-Actions" "<Lisp-Text-Actions>" "code-text" "Code-Text-Actions" "<Code-Text-Actions>" "ide" "name:" "IDE-Actions" "<IDE-Actions>" "install" "<install>")}}}})
"IDE-File-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "application" "IDE-File-Menu.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.application.IDE-File-Menu" module (protected) #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.jml")}
      {Lisp-Entry "IDE-File-Menu" class () #f 45 7 45 20 ("File-Menu")
        {Lisp-Entry "form" anonymous #f #f 48 3 48 7 ("profile-separator" "Separator-Item" "<Separator-Item>" "exit-without-save" "on-exit-without-save" "save-profile" "on-quit-application" "on-save-profile" "open-jazz-text" "on-open-jazz-text" "open-text" "on-close" "on-open-text" "!" "<!>" "new-project" "ide" "Action" "action-handler:" "on-new" "before:" "french:" "english:" "Locales" "title:" "on-new-project" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"IDE-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "application" "IDE-Preferences.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.application.IDE-Preferences" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.system.application" "jazz.project" "jazz.jml" "jazz.groupware" "jazz.editor.sql" "jazz.editor.scheme" "jazz.editor.jazz" "jazz.editor.diff" "jazz.designer" "jazz.debugger" "jazz.console")}
      {Lisp-Entry "IDE-Preferences" class () #f 54 7 54 22 ("Application-Preferences")
        {Lisp-Entry "form" anonymous #f #f 57 3 57 7 ("workbench" "Workbench-Preferences" "<Workbench-Preferences>" "designer" "Designer-Preferences" "<Designer-Preferences>" "inspector" "Inspector-Preferences" "<Inspector-Preferences>" "debug" "Debug-Preferences" "<Debug-Preferences>" "sql" "SQL-Preferences" "<SQL-Preferences>" ":scheme" "user-extensions:" "user-label:" "jazz-files" "<user" "<user~>" "window" "active-domain:" "<text" "<text~>" "text" "active:" "search-manager" "Search-Preferences" "<Search-Preferences>" "preferences-manager" "Preferences-Manager-Preferences" "<Preferences-Manager-Preferences>" "compare-directories" "Compare-Directories-Preferences" "<Compare-Directories-Preferences>" "console" "Console-Preferences" "<Console-Preferences>" "<tools" "<tools~>" "sql-text" "SQL-Text-Preferences" "<SQL-Text-Preferences>" "scheme-text" "Scheme-Text-Preferences" "<Scheme-Text-Preferences>" "plain-text" "Plain-Text-Preferences" "<Plain-Text-Preferences>" "jazz-text" "Jazz-Text-Preferences" "<Jazz-Text-Preferences>" "diff-text" "Diff-Text-Preferences" "<Diff-Text-Preferences>" "compare-text" "Compare-Text-Preferences" "<Compare-Text-Preferences>" "command-text" "Command-Text-Preferences" "<Command-Text-Preferences>" "console-text" "name:" "Console-Text-Preferences" "<Console-Text-Preferences>" ">" "<documents" "<documents~>" "title:" "install" "<install>")}}}})
"IDE-Profile"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "application" "IDE-Profile.jazz"} 247108738. jazz
    {Lisp-Entry "jazz.ide.application.IDE-Profile" module (protected) #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("time" "jazz.ui.view" "jazz.ui.activity" "jazz.ui" "jazz.system" "jazz.runtime" "jazz.project" "jazz.profile" "jazz.library" "jazz.jml" "jazz.io" "jazz.editor.jazz" "jazz.designer")}
      {Lisp-Entry "IDE-Profile" class () #f 55 7 55 18 ("Profile")
        {Lisp-Entry "add-missing-imports" method () #f 63 11 63 30 ("insert-import-invoice" "insert-import-invoice~" "explorer-class" "explorer-class~" "new" "expl" "car" "edit" "edit~" "get-guest" "get-guest~" "text" "ambiguous" "debug" "1" "length" ">" "if" "get-definitions" "get-definitions~" "definitions" "unit" "for-each" "get-application" "get-cataloguer" "get-cataloguer~" "cataloguer" "read" "port" "lambda" "call-with-input-file" "units" "let" "import")}
        {Lisp-Entry "save-unreferenced-imports" method () #f 79 11 79 36 ("car" "symbol->string" "info" "key:" "string<?" "sort" "pretty-print" "port" "get-eol-encoding" "eol-encoding:" "path:" "list" "call-with-output-file" "cons" "set!" "null?" "and" "unreferenced" "user-feedback" "iterate-units" "all" "get-imports" "get-imports~" "get-name" "get-name~" "get-hit?" "get-hit?~" "not" "import" "lambda" "collect" "Module-Declaration" "is?" "when" "walk-unit" "analysis-mode?" "parameterize" "declaration" "let" "unit-name" "collect-unreferenced-imports" "define")}
        {Lisp-Entry "remove-unreferenced-imports" method () #f 103 11 103 38 ("memq?" "not" "or" "when" "unreferenced" "unit-name" "bind" "info" "lambda" "for-each" "read" "call-with-input-file" "all" "ambiguous" "else" "remove-import-invoice" "remove-import-invoice~" "get-model" "get-model~" "explorer-class" "explorer-class~" "new" "expl" "car" "edit" "edit~" "get-guest" "get-guest~" "text" "1" "find" "cant" "debug" "0" "length" "case" "get-definitions" "get-definitions~" "definitions" "import" "unit" "remove-import" "define" "get-application" "get-cataloguer" "get-cataloguer~" "cataloguer" "let" "targets")}
        {Lisp-Entry "minute" definition (protected) #f 132 24 132 30 ("60")}
        {Lisp-Entry "hour" definition (protected) #f 135 24 135 28 ("minute" "60" "*")}
        {Lisp-Entry "day" definition (protected) #f 138 24 138 27 ("hour" "24" "*")}
        {Lisp-Entry "week" definition (protected) #f 141 24 141 28 ("day" "7" "*")}
        {Lisp-Entry "recent-files" method () #f 145 11 145 23 ("select-results" "select-results~" "format-plural" "user-feedback" "get-results" "get-results~" "length" "count" "ignored-toplevel-directories:" "File-Search-Result" "add-result" "add-result~" "get-modification-time" "get-modification-time~" "time>?" "extension=?" "test:" "get-extension" "get-extension~" "member?" "not" "and" "when" "file" "lambda" "iterate-directory" "iterate-directory~" "make-directory-feedback" "directory-feedback" "Binary-Extensions" "ignored-extensions" "ignored-toplevel-directories" "3600" "or" "0" "time-duration" "make-time" "current-time" "subtract-duration" "from" "Search-Resultset" "new" "resultset" "get-application" "get-search-results" "get-search-results~" "results" "let" "elapse" "Jazz" "Directory" "directory" "bind-keywords" "rest")}
        {Lisp-Entry "search-licenseless-files" method () #f 165 11 165 35 ("select-results" "select-results~" "format-plural" "user-feedback" "get-results" "get-results~" "length" "count" "File-Search-Result" "add-result" "add-result~" "equal?" "eof-object?" "not" "and" "read-line" "line" "port" "jazz-readtable" "readtable:" "cr-lf" "eol-encoding:" "path-settings" "call-with-input-file" "extension=?" "test:" "member?" "when" "get-extension" "get-extension~" "ext" "file" "lambda" "Jazz" "Directory" "iterate-directory" "iterate-directory~" "make-directory-feedback" "directory-feedback" "Search-Resultset" "new" "resultset" "get-application" "get-search-results" "get-search-results~" "results" "let")}
        {Lisp-Entry "search-trailing-whitespace" method () #f 185 11 185 37 ("select-results" "select-results~" "format-plural" "user-feedback" "get-results" "get-results~" "count" "ignored-toplevel-directories:" "length" "naturals" "continuation-return" "position:" "File-Search-Result" "add-result" "add-result~" "+" "Cell" "pos" "set!" "whitespace?" "if" "element" "c" "do" "0" "downto" "1" "cardinality" "-" "from" "n" "for" "loop" "trailing-whitespace" "done" "continuation-capture" "rank" "line" "for-each" "char-encoding-errors:" "load-lines" "load-lines~" "lines" "extension=?" "test:" "get-extension" "get-extension~" "member?" "not" "when" "file" "lambda" "iterate-directory" "iterate-directory~" "make-directory-feedback" "directory-feedback" "Binary-Extensions" "ignored-extensions" "ignored-toplevel-directories" "Search-Resultset" "new" "resultset" "get-application" "get-search-results" "get-search-results~" "results" "let" "Jazz" "Directory" "directory" "bind-keywords" "rest")}
        {Lisp-Entry "inspect-binary" method () #f 217 11 217 25 ("read-u8" "read-all" "debug" "port" "lambda" "path-settings" "call-with-input-file" "file")}
        {Lisp-Entry "console-command" method (override) #f 228 20 228 35 ("nextmethod" "else" "exit" ":exit" "compile" ":compile" "expand-scheme" ":expand-scheme" "expand" ":expand" "car" "edit-documentation" ":doc" "case" "arguments" "command")}
        {Lisp-Entry "edit-documentation" method () #f 241 11 241 29 ("edit-documentation" "edit-documentation~" "get-application" "appl" "let" "name")}
        {Lisp-Entry "expand" method () #f 246 11 246 17 ("else" "macro?" "apply" "syntax-macro?" "cond" "definition-value" "macro" "let" "debug" "begin" "null?" "if" "Java" "Language" "or" "definition" "class-of" "category-field" "object" "lambda" "try" "let*" "arguments" "name" "bind" "unimplemented" "form")}
        {Lisp-Entry "expand-scheme" method () #f 263 11 263 24 ("macro?" "apply" "debug" "syntax-macro?" "cond" "Kernel" "or" "definition-value" "macro" "class-of" "category-field" "package" "lambda" "try" "let*" "arguments" "name" "bind" "unimplemented" "form")}
        {Lisp-Entry "compile" method () #f 274 11 274 18 ("compile-classes" "unimplemented" "classes")}
        {Lisp-Entry "utf8" method () #f 285 11 285 15 ("get-content" "get-content~" "increase!" "List" "coerce" "map" "debug" "128" "char->integer" ">=" "char" "some?" "when" "line" "lambda" "for-each" "1" "count" "let" "text")}
        {Lisp-Entry "remove-trailing-whitespace" method () #f 296 11 296 37 ("format-cardinality" "user-feedback" "increase!" "-" "Cell" "Range$Cell$" "new" "delete-range" "delete-range~" "cardinality" "end" "empty-string?" "extract-trailer" "trailer" "whitespace?" "unless" "paragraph-string" "paragraph-string~" "str" "row" "line" "lambda" "for-each-paragraph" "for-each-paragraph~" "0" "count" "let" "text")}
        {Lisp-Entry "package-units" method () #f 315 11 315 24 ("debug" "not" "cdr" "update" "pair" "if" "product" "List-Factory" "new" "fact" "let" "package-products" "package-name" "assq" "package-product" "define" "package")}
        {Lisp-Entry "unit-subunits" method () #f 330 11 330 24 ("cons" "set!" "phase" "declaration" "subunit-name" "lambda" "for-each-subunit" "subunits" "let" "load-build" "unit-name")}
        {Lisp-Entry "test9" method (override) #f 344 20 344 25 ("internal-tabulate" "bell" "Jazz-Text-View" "is-not?" "if" "get-focus" "text" "let")}
        {Lisp-Entry "internal-tabulate" method () #f 351 11 351 28 ("set-range" "set-range~" "range:" "Jazz-Explorer" "range" "pos" "cdr" "make-string" "list" "Range$Cell$" "replace-text" "replace-text~" "end" "0" ">" "when" "diff" "car" "with-atomic-undo" "with-atomic-undo~" "get-undoer" "get-undoer~" "undoer" "tabulate-columns" "exit-composite" "exit-composite~" "get-output" "get-output~" "put" "put~" "get-start" "get-start~" "get-end" "get-end~" "get-col" "get-col~" "-" "size" "forward-expr" "forward-expr~" "List-Factory" "new" "let" "enter-composite" "enter-composite~" "while" "max" "map" "null?" "if" "set!" "sizes" "lambda" "update-maxes" "maxes" "let*" "explorer" "collect-maxes" "define" "text")}
        {Lisp-Entry "reprint-toplevel-form" method () #f 398 11 398 32 ("insert-string" "insert-string~" "set-selection" "set-selection~" "with-update-locked" "with-update-locked~" "user-message" "string=?" "0" "saved-form" "saved-form~" "output" "form:" "Designer" "new" "designer" "Form" "read-string-element" "lambda" "with-jazz-readtable" "jml->form" "form" "get-string" "get-string~" "str" "get-end" "get-end~" "toplevel-expr" "toplevel-expr~" "range" "let*" "bell" "Jazz-Text-View" "is-not?" "if" "current-document" "or" "let" "align-name?" "align-name?:" "space-properties?" "space-properties?:" "text" "text:")}
        {Lisp-Entry "reprint-selected-form" method () #f 418 11 418 32 ("insert-string" "insert-string~" "set-selection" "set-selection~" "with-update-locked" "with-update-locked~" "user-message" "string=?" "include-form?:" "0" "saved-form" "saved-form~" "output" "form:" "Designer" "new" "designer" "Form" "read-string-element" "lambda" "with-jazz-readtable" "jml->form" "form" "get-string" "get-string~" "str" "get-selection" "get-selection~" "range" "let*" "bell" "Jazz-Text-View" "is-not?" "if" "current-document" "or" "let" "align-name?" "align-name?:" "space-properties?" "space-properties?:" "text" "text:")}
        {Lisp-Entry "reprint-form" method () #f 438 11 438 23 ("user-message" "insert-string" "insert-string~" "set-selection" "set-selection~" "with-update-locked" "with-update-locked~" "indent-first?:" "saved-form" "saved-form~" "output" "form:" "Designer" "designer" "let*" "Form" "is-not?" "read-string-element" "with-jazz-readtable" "jml->form" "form" "2" "quotient" "level" "get-string" "get-string~" "string" "bell" "not" "if" "Jazz-Text-View" "is?" "and" "current-document" "0" "get-start" "get-start~" "get-col" "get-col~" ">" "starts-with?" "or" "when" "get-marked" "get-marked~" "marked" "get-range" "get-range~" "range" "iterate" "outer-expr" "outer-expr~" "lambda" "with-safe-explore" "get-selection" "get-selection~" "range:" "explorer-class" "explorer-class~" "new" "expl" "let" "text" "form-range" "define" "align-name?" "align-name?:" "space-properties?" "space-properties?:")}
        {Lisp-Entry "clear-activities" method () #f 477 11 477 27 ("unregister-activity" "unregister-activity~" "reporter" "lambda" "for-each" "get-reporters" "get-reporters~" "reporters" "get-activity-manager" "manager" "let*")}
        {Lisp-Entry "determine-dead-code" method () #f 490 11 490 30 ("edit-document" "edit-document~" ">" "kind" "potential" "format" "else" "set" "get" "starts-with?" "cond" "cdr" "reference-name" "element" "partition" "accessor" "eq?" "if" "elements" "key" "bind" "car" "part" "key:" "string<?" "sort" "output-part" "parts" "output-parts" "first?" "output" "Home" "File" "path-settings" "call-with-output-file" "output-potentials" "Category-Declaration" "Method-Declaration" "Definition-Declaration" "Define-Declaration" "is?" "or" "locator->declaration" "declaration" "symbol->string" "search" "not" "and" "get-kind" "get-kind~" "cons" "set!" "consider-declaration?" "->locator" "->locator~" "locator" "entry" "for-each" "0" "=" "when" "length" "count" "get-references" "get-references~" "references" "entries" "name" "lambda" "iterate-definitions" "iterate-definitions~" "require-project" "require-project~" "get-catalog" "get-catalog~" "catalog" "user-feedback" "project-name" "process-project" "potentials" "get-application" "get-cataloguer" "get-cataloguer~" "cataloguer" "get-workbench" "workbench" "let" "collect-potentials" "define" "project-names")}
        {Lisp-Entry "format-sql" method () #f 565 11 565 21 ("error" "else" "format" "string?" "cond" "value")}
        {Lisp-Entry "output-tables" method () #f 571 11 571 24 ("sql" "select-workspace" "select-workspace~" "get-application" "appl" "when" "output-tables" "output-tables~" "get-sql-console-text" "text" "let" "select?" "select?:" "name" "name:" "tables")}
        {Lisp-Entry "output-table" method () #f 580 11 580 23 ("list" "output-tables" "select?" "select?:" "name" "name:" "table")}
        {Lisp-Entry "log-tables" method () #f 585 11 585 21 ("log-table" "for-each" "tables")}
        {Lisp-Entry "log-table" method () #f 590 11 590 20 ("data:" "get-name" "get-name~" "name:" "log-entry" "table")}
        {Lisp-Entry "glue" method () #f 600 11 600 15 ("user-message" "set-clipboard-text" "join" "2" "format" "case" "glued" "-" "0" "subseq" "get-clipboard-text" "cons" "lst" "get-clipboard-stack" "get-clipboard-stack~" "stack" "get-application" "appl" "let*" "1" "kind" "n")}
        {Lisp-Entry "collect-extensions" method () #f 616 11 616 29 ("string<?" "sort" "downcase" "cons" "set!" "extension=?" "test:" "member?" "not" "and" "when" "get-extension" "get-extension~" "ext" "file" "lambda" "iterate-directory" "iterate-directory~" "extensions" "let" "dir")}
        {Lisp-Entry "report-aliases" method () #f 631 11 631 25 ("get-application" "fresh-prompt" "fresh-prompt~" "car" "key:" "<" "sort" ":console" "format" "value" "key" "bind" "info" "lambda" "for-each" "newline" "table-keys/values" "aliases" "get-aliases" "table" "let*")}
        {Lisp-Entry "get-source" method () #f 648 11 648 21 ("find-file" "find-document" "or" "class-name")}
        {Lisp-Entry "find-document" method () #f 654 11 654 24 ("include-invisibles?:" "all-frames" "continuation-return" "extension=?" "=" "and" "get-extension" "get-extension~" "ext" "get-base" "get-base~" "base" "get-document-controller" "get-document-controller~" "get-moniker" "get-moniker~" "moniker" "Document" "get-guest" "get-guest~" "guest" "Frame-Host" "is?" "when" "frame" "for-each" "return" "lambda" "continuation-capture" "->string" "target" "let" "get-manifest-source" "unless" "class-name")}
        {Lisp-Entry "find-file" method () #f 675 11 675 20 ("source-directories" "continuation-return" "exists?" "exists?~" "when" "new-file" "new-file~" "file" "dir" "for-each" "return" "lambda" "continuation-capture" "tie" "name" "let" "class-name")}
        {Lisp-Entry "source-directories" method (protected virtual) #f 688 29 688 47 ()}}}})
"IDE-Status"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "application" "IDE-Status.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.ide.application.IDE-Status" module (protected) #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.workspace" "jazz.ui.skin" "jazz.ui.activity" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.ide" "jazz.debugger")}
      {Lisp-Entry "IDE-Status" class () #f 51 7 51 17 ("Status-Toolbar")
        {Lisp-Entry "form" anonymous #f #f 54 3 54 7 ("skin" "100" "locales" "250" "visible?:" "activities" "Image-Resource" "icon:" "workspace" "150" "process" "on-context-menu" "context-menu-handler:" "on-mouse-down" ":form" "Event-Handler" "mouse-down-handler:" "tail" "200" "title:" "search-result" "center" "location:" "20" "782" "Dimension" "size:" "message" "name:" "Status-Label" "<Status-Label>" "install" "<install>")}
        {Lisp-Entry "on-mouse-down" method (protected virtual) #f 71 29 71 42 ("Skin-Menu" "skin" "Locales-Menu" "new" "track-popup-menu" "locales" "get-activity-manager" "toggle-visible?" "toggle-visible?~" "activities" "popup-workspaces-menu" "workspace" "self" "popup-processes-menu" "process" "case" "get-position" "get-position~" "acquire" "pos" "get-name" "get-name~" "name" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "on-context-menu" method (protected virtual) #f 85 29 85 44 ("Skin-Menu" "skin" "Locales-Menu" "locales" "Activities-Menu" "new" "track-popup-menu" "activities" "popup-workspaces-menu" "workspace" "self" "popup-processes-menu" "process" "case" "get-position" "get-position~" "acquire" "pos" "get-name" "get-name~" "name" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "host-icon" method (meta override) #f 104 25 104 34 ("Image-Resource")}
        {Lisp-Entry "install" method (override) #f 113 20 113 27 ("update-focused-process" "nextmethod" "rest")}
        {Lisp-Entry "update-focused-process" method (public) #f 123 18 123 40 ("present" "present~" "set-title" "set-title~" "Image-Resource" "if" "set-icon" "set-icon~" "get-debugger-manager" "get-focused-process" "get-focused-process~" "focused" "process" "locate" "label" "let")}}
      {Lisp-Entry "popup-processes-menu" definition () #f 135 13 135 33 ("Processes-Menu" "new" "track-popup-menu" "track-popup-menu~" "pos" "view")}
      {Lisp-Entry "Processes-Menu" class () #f 139 7 139 21 ("Context-Menu")
        {Lisp-Entry "install" method (override) #f 142 20 142 27 ("insert-processes" "nextmethod" "rest")}
        {Lisp-Entry "insert-processes" method () #f 147 11 147 27 ("set-selected?" "set-selected?~" "set-enabled?" "set-enabled?~" "process:" "list" "properties:" "on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "self" "parent:" "Radio-Item" "new" "item" "icon" "present" "present~" "title" "let" "debugger" "lambda" "get-debugger-manager" "for-each-process" "for-each-process~" "else" "get-icon" "get-icon~" "or" "Image-Resource" "not" "cond" "focused?" "live?" "process" "process-image" "define")}
        {Lisp-Entry "on-action" method () #f 165 11 165 20 ("focus-process" "focus-process~" "process:" "get-property" "get-property~" "process" "get-debugger-manager" "manager" "let" "evt")}}
      {Lisp-Entry "popup-workspaces-menu" definition () #f 176 13 176 34 ("Workspaces-Menu" "new" "track-popup-menu" "track-popup-menu~" "1" "length" ">=" "get-visible-children" "get-visible-children~" "workspaces" "when" "error?:" "get-workspaces-preferences" "preferences" "let" "pos" "view")}
      {Lisp-Entry "Workspaces-Menu" class () #f 184 7 184 22 ("Context-Menu")
        {Lisp-Entry "install" method (override) #f 187 20 187 27 ("nextmethod" "set-selected?" "set-selected?~" "workspace:" "list" "properties:" "on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "Radio-Item" "item" "Image-Resource" "get-icon" "get-icon~" "icon" "get-presentation-property" "get-presentation-property~" "title" "selected?" "Separator" "is?" "if" "unless" "workspace" "lambda" "for-each" "self" "parent:" "Separator-Item" "new" "eq?" "insert-workspace" "when" "find-component" "find-component~" "default" "get-visible-children" "get-visible-children~" "workspaces" "get-workspaces-preferences" "preferences" "selected-workspace" "selected" "let*" "insert-workspaces" "define" "rest")}
        {Lisp-Entry "on-action" method () #f 214 11 214 20 ("apply-preferences" "apply-preferences~" "workspace:" "get-property" "get-property~" "workspace" "let" "evt")}}
      {Lisp-Entry "Activities-Menu" class () #f 224 7 224 22 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f #f 227 3 227 7 ("on-clear-done" "Image-Resource" "icon:" "clear-done" "Separator-Item" "<Separator-Item>" "on-close" "close" "on-open" ":form" "Event-Handler" "action-handler:" "open" "name:" "Label-Item" "<Label-Item>" "title:" "install" "<install>")}
        {Lisp-Entry "on-open" method () #f 235 11 235 18 ("get-activity-manager" "show" "show~" "evt")}
        {Lisp-Entry "on-close" method () #f 239 11 239 19 ("get-activity-manager" "hide" "hide~" "evt")}
        {Lisp-Entry "on-clear-done" method () #f 243 11 243 24 ("get-activity-manager" "clear-done" "clear-done~" "evt")}}
      {Lisp-Entry "Skin-Menu" class () #f 252 7 252 16 ("Context-Menu")
        {Lisp-Entry "install" method (override) #f 255 20 255 27 ("nextmethod" "set-checked?" "set-checked?~" "when" "skin:" "list" "properties:" "on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Check-Item" "new" "item" "present" "present~" "title" "let*" "checked?" "eq?" "insert-skin" "skin" "lambda" "for-each" "get-skins" "get-children" "get-children~" "skins" "get-skin" "current" "let" "insert-skins" "define" "rest")}
        {Lisp-Entry "on-action" method () #f 273 11 273 20 ("get-toplevel" "redraw-window" "redraw-window~" "skin:" "get-property" "get-property~" "set-skin" "evt")}}}})
"IDE-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "application" "IDE-Text-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.application.IDE-Text-View" module (protected) #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system" "jazz.ui" "jazz.editor.jazz")}
      {Lisp-Entry "IDE-Text-View" class () #f 45 7 45 20 ("Code-Text-View")
        {Lisp-Entry "new-model" method (override) #f 48 20 48 29 ("Text-User" "Text-Style" "base-style:" "Text-Model" "new")}
        {Lisp-Entry "new-syntax" method (override) #f 52 20 52 30 ("colorize?:" "model" "Jazz-Syntax" "new")}
        {Lisp-Entry "current-history-item" method (override) #f 61 20 61 40 ()}
        {Lisp-Entry "match-backwards?" method (override) #f 70 20 70 36 ("nextmethod" "else" "memq?" "Jazz-Syntax" "syntax" "typecase" "char")}
        {Lisp-Entry "match-forwards?" method (override) #f 76 20 76 35 ("nextmethod" "else" "memq?" "Jazz-Syntax" "syntax" "typecase" "char")}
        {Lisp-Entry "context-menu" method (override) #f 87 20 87 32 ("nextmethod" "else" "edit-references" "edit-definitions" "cond" "context-menu-click" "or" "references?" "not" "definition?" "let" "modifiers-down" "alt?" "control?" "shift?" "receive" "editable?" "view-enabled?" "and" "when" "pos")}
        {Lisp-Entry "get-context-menu" method (override) #f 99 20 99 36 ("new-text-context-menu")}}}})
"IDE-Toolbar"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "application" "IDE-Toolbar.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.application.IDE-Toolbar" module (protected) #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.history" "jazz.ui.clipboard" "jazz.ui" "jazz.system" "jazz.library")}
      {Lisp-Entry "IDE-Toolbar" class () #f 48 7 48 18 ("Toolbar")
        {Lisp-Entry "on-clipboard-menu" method () #f 56 11 56 28 ("clipboards:" "Clipboards-Menu" "track-popup-menu" "not-null?" "when" "cons" "if" "clipboards" "get-application" "get-clipboard-stack" "get-clipboard-stack~" "stack" "get-clipboard-text" "text" "get-size" "get-size~" "get-height" "get-height~" "0" "Point" "new" "get-position" "get-position~" "nu+" "pos" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "on-backward-menu" method () #f 66 11 66 27 ("backward" "get-application" "get-history-manager" "get-history-manager~" "track-history" "get-combo" "get-combo~" "initiator" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "on-forward-menu" method () #f 72 11 72 26 ("forward" "get-application" "get-history-manager" "get-history-manager~" "track-history" "get-combo" "get-combo~" "initiator" "get-sender" "get-sender~" "sender" "let*" "evt")}}
      {Lisp-Entry "Clipboards-Menu" class () #f 83 7 83 22 ("Context-Menu")
        {Lisp-Entry "clipboards" property () #f 86 12 86 22 ()}
        {Lisp-Entry "get-clipboards" accessor #f #f 86 33 86 41 ()}
        {Lisp-Entry "set-clipboards" accessor #f #f 86 33 86 41 ()}
        {Lisp-Entry "finish" method (override) #f 89 20 89 26 ("for-each" "self" "parent:" "Separator-Item" "new" "not-null?" "when" "insert-item" "clipboards" "others" "clipboard" "bind" "nextmethod" "rest")}
        {Lisp-Entry "insert-item" method () #f 98 11 98 22 ("string:" "list" "properties:" "on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "item")}
        {Lisp-Entry "on-action" method () #f 102 11 102 20 ("paste-clipboard-string" "paste-clipboard-string~" "string:" "get-property" "get-property~" "string" "bell" "Text-View" "is-not?" "if" "get-focus" "focus" "let" "evt")}}}})
"IDE-Toplevel"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "application" "IDE-Toplevel.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.application.IDE-Toplevel" module (protected) #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "IDE-Toplevel" class () #f 43 7 43 19 ("Toplevel")}}})
"Login-Bindings"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "login" "Login-Bindings.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.login.Login-Bindings" module (protected) #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Login-Bindings" class () #f 44 7 44 21 ("Bindings")
        {Lisp-Entry "form" anonymous #f #f 49 3 49 7 ("formatted-text" "guest" "Actions" "<Actions>" "tree" "Login-Tree-Actions" "<Login-Tree-Actions>" "text" "Login-Text-Actions" "<Login-Text-Actions>" "view" "name:" "Login-View-Actions" "<Login-View-Actions>" "install" "<install>")}}
      {Lisp-Entry "Login-View-Actions" class () #f 63 7 63 25 ("View-Actions")
        {Lisp-Entry "form" anonymous #f #f 66 3 66 7 ("visible?:" "paste-properties!" "<paste-properties!>" "install" "<install>")}}
      {Lisp-Entry "Login-Text-Actions" class () #f 76 7 76 25 ("Text-Actions")
        {Lisp-Entry "form" anonymous #f #f 79 3 79 7 ("unlock-anchor!" "<unlock-anchor!>" "lock-anchor!" "<lock-anchor!>" "one/no-space!" "<one/no-space!>" "one-space!" "<one-space!>" "no-space!" "<no-space!>" "display-info!" "<display-info!>" "top-caret!" "<top-caret!>" "center-caret!" "<center-caret!>" "extend-mark!" "<extend-mark!>" "jump-mark!" "<jump-mark!>" "set-mark!" "<set-mark!>" "select-outer!" "<select-outer!>" "goto-line!" "<goto-line!>" "find-previous!" "<find-previous!>" "find-next!" "<find-next!>" "find-backward!" "<find-backward!>" "find-forward!" "<find-forward!>" "search-backward-mode!" "<search-backward-mode!>" "visible?:" "search-forward-mode!" "<search-forward-mode!>" "install" "<install>")}}
      {Lisp-Entry "Login-Tree-Actions" class () #f 107 7 107 25 ("Tree-Actions")
        {Lisp-Entry "form" anonymous #f #f 110 3 110 7 ("properties!" "<properties!>" "collapse!" "<collapse!>" "expand-all!" "<expand-all!>" "visible?:" "expand!" "<expand!>" "install" "<install>")}}}})
"Login-Dialog"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "login" "Login-Dialog.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ide.login.Login-Dialog" module (protected) #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.io" "jazz.graphic")}
      {Lisp-Entry "Login-Dialog" class () #f 49 7 49 19 ("initialize" "View")
        {Lisp-Entry "invite" property () #f 52 12 52 18 ()}
        {Lisp-Entry "get-invite" accessor #f #f 52 43 52 51 ()}
        {Lisp-Entry "set-invite" accessor #f #f 52 43 52 51 ()}
        {Lisp-Entry "form" anonymous #f #f 55 3 55 7 ("existing" "new" "Trait" "<Trait>" "on-cancel" "311" "cancel" "on-ok" ":host" "default?:" "24" "80" "182" "225" "login" "Push-Button" "<Push-Button>" "18" "144" "185" "always-use" "Check-Box" "<Check-Box>" "170" "display-images?:" "toplevel-controls?:" "176" "width:" "Tree-Node-Column" "<Tree-Node-Column>" "on-double-click" "double-click-handler:" "can-select-empty?:" "row" "selection-mode:" "15" "default-row-height:" "show-header?:" "profiles" "Tree-View" "<Tree-View>" "document" "92" "251" "64" "140" "existing-border" "22" "175" "194" "bindings" "Combo-Widget" "<Combo-Widget>" "60" "bindings-label" "on-content-change" "content-change-handler:" "show-unfocused-selection?:" "accepts-returns?:" "new-profile" "Name-Text-View" "<Name-Text-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "19" "171" "85" "196" "new-border" "Border-View" "<Border-View>" "visible?:" "40" "136" "new-label" "101" "59" "110" "Vertical-Line" "<Vertical-Line>" "8" "48" "0" "Horizontal-Line" "<Horizontal-Line>" "on-existing" "114" "existing-button" "on-new" "action-handler:" "tooltip-text:" "tooltip?:" "88" "25" "new-button" "Radio-Button" "<Radio-Button>" "Label" "27" "30" "title:" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title" "name:" "Label-View" "<Label-View>" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "216" "400" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "host-title" method (meta override) #f 90 25 90 35 ()}
        {Lisp-Entry "finish" method (override) #f 94 20 94 26 ("invite" "format" "title" "locate" "set-title" "set-title~" "setup-existing-profiles" "setup-new-profile" "nextmethod" "rest")}
        {Lisp-Entry "setup-new-profile" method () #f 101 11 101 28 ("setup-bindings" "user-name" "new-profile" "locate" "set-string-content" "set-string-content~")}
        {Lisp-Entry "focus-default" method (override) #f 106 20 106 33 ("focus-existing" "existing" "focus-new" "new" "get-active-trait-name" "case")}
        {Lisp-Entry "Bindings" definition () #f 112 14 112 22 ("emacs" "jazz")}
        {Lisp-Entry "setup-bindings" method () #f 117 11 117 25 ("jazz" "set-value" "set-value~" "Bindings" "set-choices" "set-choices~" "box" "bindings" "locate" "combo" "let")}
        {Lisp-Entry "setup-existing-profiles" method () #f 123 11 123 34 ("new-button" "install-new" "else" "existing-button" "set-selected?" "set-selected?~" "install-existing" "some-user-profile?" "cond" "get-setting" "get-setting~" "profile-title" "ci=?" "get-application" "get-settings" "get-settings~" "settings" "element" "profile" "let" "and" "always-use" "locate" "set-checked?" "set-checked?~" "collect-profile-info" "rank" "profiles" "receive")}
        {Lisp-Entry "validate-dialog" method (override) #f 142 20 142 35 ("throw-cancel" "message-box" "when" "validate-profile" "message" "let")}
        {Lisp-Entry "get-modal-result" method (override) #f 149 20 149 36 ("profile-unit" "profile-name" "get-row" "get-row~" "get-user-data" "get-user-data~" "profile" "not" "if" "get-single-selection" "get-single-selection~" "rank" "profiles" "tree" "let*" "existing" "values" "profile-unit-name" "unit" "capitalize" "string->symbol" "name" "new-profile" "get-string-content" "get-string-content~" "content" "new" "get-active-trait-name" "case" "always-use" "get-checked?" "get-checked?~" "always-use?" "box" "locate" "get-value" "get-value~" "bindings" "let")}
        {Lisp-Entry "profile-unit-name" definition () #f 167 15 167 32 ("downcase" "format" "name")}
        {Lisp-Entry "get-tab-stops" method (override) #f 176 20 176 33 ("existing" "new" "get-active-trait-name" "case")}
        {Lisp-Entry "on-new" method () #f 189 11 189 17 ("install-new" "evt")}
        {Lisp-Entry "on-existing" method () #f 193 11 193 22 ("install-existing" "collect-profile-info" "rank" "profiles" "receive" "evt")}
        {Lisp-Entry "on-content-change" method () #f 198 11 198 28 ("update-login" "evt")}
        {Lisp-Entry "on-moniker-update" method () #f 202 11 202 28 ("update-login" "evt")}
        {Lisp-Entry "on-double-click" method () #f 206 11 206 26 ("get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-host" "dialog" "let" "validate-dialog" "login" "locate" "get-enabled?" "get-enabled?~" "when" "evt")}
        {Lisp-Entry "on-return-press" method (override) #f 214 20 214 35 ("get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-host" "dialog" "let" "validate-dialog" "login" "locate" "get-enabled?" "get-enabled?~" "when" "evt")}
        {Lisp-Entry "on-escape-press" method (override) #f 222 20 222 35 ("cancel-modal" "cancel-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "install-new" method () #f 232 11 232 22 ("update-login" "focus-new" "player" "when" "new" "locate" "set-active-trait")}
        {Lisp-Entry "focus-new" method () #f 239 11 239 20 ("select-all" "select-all~" "acquire-focus" "acquire-focus~" "new-profile" "locate" "text" "let")}
        {Lisp-Entry "install-existing" method () #f 245 11 245 27 ("update-login" "focus-existing" "player" "ensure-displayed" "ensure-displayed~" "set-single-selection" "set-single-selection~" "get-visible-count" "get-visible-count~" "<" "when" "user-data:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "profile-title" "title" "profile" "lambda" "for-each" "remove-every-row" "remove-every-row~" "0" "not-null?" "and" "or" "tree" "let" "existing" "locate" "set-active-trait" "rank" "profiles")}
        {Lisp-Entry "focus-existing" method () #f 262 11 262 25 ("profiles" "locate" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "collect-profile-info" method () #f 266 11 266 31 ("values" "ci=?" "test:" "find" "and" "rank" "string-parameter" "default-profile" "profiles" "profile-title" "downcase" "1" "2" "package-repository" "eq?" "if" "cons" "profile" "package" "bind" "info" "lambda" "key:" "gather-profiles" "nu<?" "sort" "cdr" "map" "Jazz" "find-repository" "jazz-repository" "let" "collect-existing-profiles" "define")}
        {Lisp-Entry "some-user-profile?" method () #f 282 11 282 29 ("gather-profiles" "package-repository" "neq?" "profile" "package" "bind" "info" "lambda" "some?" "Jazz" "find-repository" "jazz-repository" "let")}
        {Lisp-Entry "update-login" method () #f 295 11 295 23 ("profiles" "get-selection" "get-selection~" "not-null?" "existing" "new-profile" "get-string-content" "get-string-content~" "empty-string?" "not" "login" "locate" "set-enabled?" "set-enabled?~" "new" "get-active-trait-name" "case")}
        {Lisp-Entry "validate-profile" method () #f 308 11 308 27 ("else" "validate-new-profile" "new-profile" "locate" "get-string-content" "get-string-content~" "profile-name" "let" "new" "get-active-trait-name" "case")}
        {Lisp-Entry "validate-new-profile" method () #f 317 11 317 31 ("else" "parse" "parse~" "format" "exists?" "exists?~" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "cond" "Profiles" "list" "Directory" "new" "directory" "profile-unit-name" "unit-name" "let" "profile-name")}
        {Lisp-Entry "Header-Color" definition () #f 341 14 341 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method (override) #f 345 20 345 24 ("Header-Color" "1" "White" "Color" "list" "50" "get-width" "get-width~" "0" "Rect" "new" "gradient-fill" "gradient-fill~" "get-size" "size" "let" "context" "surface")}}}})
"Outline-Showcase"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "showcase" "Outline-Showcase.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.ide.showcase.Outline-Showcase" module (protected) #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Outline-Showcase" class () #f 43 7 43 23 ("View")}
      {Lisp-Entry "Outline-Showcase" class () #f 49 7 49 23 ("View")
        {Lisp-Entry "form" anonymous #f #f 52 3 52 7 ("center" "justification:" "80" "50" "Tree-Label-Column" "<Tree-Label-Column>" "width:" "Tree-Node-Column" "<Tree-Node-Column>" ":images" "portfolio:" "row" "selection-mode:" "info" "Tree-View" "<Tree-View>" "Tree-Header" "<Tree-Header>" "419" "518" "info-border" "415" "selection" "335" "visible-height" "16" "170" "315" "visible-count" "Label-View" "<Label-View>" "on-update-information" "260" "update-information" "on-remove-row" "190" "remove-rows" "on-add-row" "add-row" "on-collapse-row" "100" "collapse-row" "on-expand-row" "24" "160" "70" "expand-row" "Push-Button" "<Push-Button>" "on-setting" ":form" "Event-Handler" "action-handler:" "checked?:" "18" "120" "10" "340" "title:" "row-spacing" "Check-Box" "<Check-Box>" "0" "row-spacing:" "outline" "Outline-View" "<Outline-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "457" "319" "6" "3" "Point" "position:" "outline-border" "name:" "Border-View" "<Border-View>" "466" "940" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "host-title" method (meta) #f 86 16 86 26 ()}
        {Lisp-Entry "host-position" method (meta) #f 90 16 90 29 ("60" "39" "Point")}
        {Lisp-Entry "host-size" method (meta) #f 94 16 94 25 ("466" "940" "Dimension")}
        {Lisp-Entry "install" method () #f 103 11 103 18 ("update-information" "setup-outline" "nextmethod" "rest")}
        {Lisp-Entry "setup-outline" method () #f 114 11 114 24 ("10" "0" "naturals" "5" "=" "when" "n" "lambda" "for-each" "node" "add-row" "locate" "outline" "let")}
        {Lisp-Entry "add-row" method () #f 130 11 130 18 ("random-color" "background:" "random-height" "row-height:" "father:" "Color-Row" "class:" "self" "context:" "add-row" "add-row~" "father" "outline")}
        {Lisp-Entry "random-height" method () #f 134 11 134 24 ("60" "random" "10" "+")}
        {Lisp-Entry "random-color" method () #f 138 11 138 23 ("Dark-Purple" "Dark-Blue" "Dark-Green" "Dark-Orange" "Dark-Red" "Color" "random-element")}
        {Lisp-Entry "resize" method () #f 152 11 152 17 ("info-border" "0" "outline-border" "locate" "size-figure" "size-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-setting" method () #f 158 11 158 21 ("0" "1" "get-checked?" "get-checked?~" "if" "set-row-spacing" "set-row-spacing~" "row-spacing" "get-name" "get-name~" "case" "locate" "outline" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "on-expand-row" method () #f 165 11 165 24 ("update-information" "get-row" "get-row~" "expand" "expand~" "when" "get-selection" "get-selection~" "row" "locate" "outline" "let*" "evt")}
        {Lisp-Entry "on-collapse-row" method () #f 173 11 173 26 ("update-information" "get-row" "get-row~" "collapse" "collapse~" "when" "get-selection" "get-selection~" "row" "locate" "outline" "let*" "evt")}
        {Lisp-Entry "Mark" definition () #f 181 14 181 18 ()}
        {Lisp-Entry "on-add-row" method () #f 185 11 185 21 ("update-information" "random-color" "background:" "random-height" "row-height:" "collapsed" "state:" "father:" "add-row" "add-row~" "get-row" "get-row~" "and" "Mark" "if" "row" "get-shift?" "get-shift?~" "use-mark?" "get-selection" "get-selection~" "sel" "locate" "outline" "let*" "evt")}
        {Lisp-Entry "on-remove-row" method () #f 194 11 194 24 ("update-information" "remove-row" "remove-row~" "get-row" "get-row~" "and" "Mark" "if" "row" "get-shift?" "get-shift?~" "use-mark?" "get-selection" "get-selection~" "sel" "locate" "outline" "let*" "evt")}
        {Lisp-Entry "on-update-information" method () #f 203 11 203 32 ("update-information" "evt")}
        {Lisp-Entry "update-information" method () #f 212 11 212 29 ("display-outline" "update-fields")}
        {Lisp-Entry "update-fields" method () #f 217 11 217 24 ("get-selection" "get-selection~" "selection" "get-visible-height" "get-visible-height~" "visible-height" "get-visible-count" "get-visible-count~" "format" "visible-count" "set-title" "set-title~" "locate" "outline" "let")}
        {Lisp-Entry "display-outline" method () #f 225 11 225 26 ("get-root-row" "get-root-row~" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "subrow" "lambda" "get-sons" "get-sons~" "iterate" "display-row" "children:" "expanded" "state:" "father:" "add-row" "add-row~" "subdest" "dest" "row" "iter" "define" "info" "locate" "outline" "let")}
        {Lisp-Entry "display-row" method () #f 242 11 242 22 ("list" "get-next" "get-next~" "c5" "get-previous" "get-previous~" "c4" "c3" "get-state" "get-state~" "c2" "get-level" "get-level~" "Tree-Label" "c1" "get-image" "get-image~" "image:" "get-title" "get-title~" "title:" "get-background" "get-background~" "color:" "Tree-Node" "new" "c0" "Dark-Blue" "Dark-Red" "Color" "if" "color" "get-visible?" "get-visible?~" "visible?" "row->line" "and" "lambda" "line" "get-children" "get-children~" "car" "node" "let*" "row" "outline")}
        {Lisp-Entry "row->line" method () #f 256 11 256 20 ("error" "get-root-row" "get-root-row~" "get-sons" "get-sons~" "iterate" "increase!" "continuation-return" "eq?" "if" "subrow" "iter" "define" "-1" "line" "let" "return" "lambda" "continuation-capture" "row" "outline")}
        {Lisp-Entry "Color-Row" class () #f 275 9 275 18 ("initialize" "Outline-Row")
          {Lisp-Entry "background" property () #f 278 14 278 24 ()}
          {Lisp-Entry "get-background" accessor #f #f 278 49 278 57 ()}
          {Lisp-Entry "set-background" accessor #f #f 278 49 278 57 ()}
          {Lisp-Entry "draw-background" method () #f 281 13 281 28 ("fill-rect" "fill-rect~" "get-bounds" "bounds" "let" "background" "when" "context" "surface")}}}}})
"Refactor-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "code" "Refactor-Menu.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.code.Refactor-Menu" module (protected) #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Refactor-Menu" class () #f 45 7 45 20 ("Menu")
        {Lisp-Entry "form" anonymous #f #f 48 3 48 7 ("find-all-imports" "code-text" "find-imports" "remove-highlights" "lisp-text" "highlight-declaration" "Separator-Item" "<Separator-Item>" "references-analyser" "ide" "Action" "action-handler:" "Image-Resource" "icon:" "class-browser" "name:" "Label-Item" "<Label-Item>" "title:" "install" "<install>")}}}})
"Scaled-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "showcase" "Scaled-View.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.ide.showcase.Scaled-View" module (protected) #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Scaled-View" class () #f 43 7 43 18 ("View")}
      {Lisp-Entry "Scaled-View" class () #f 49 7 49 18 ("explicit" "initialize" "View")
        {Lisp-Entry "client" property () #f 52 12 52 18 ()}
        {Lisp-Entry "print" method () #f 55 11 55 16 ("size" "position" "background" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-client" method (public) #f 66 18 66 28 ("client")}
        {Lisp-Entry "set-client" method (public) #f 70 18 70 28 ("client" "set!" "value")}
        {Lisp-Entry "draw-background" method () #f 79 11 79 26 ("context" "surface")}
        {Lisp-Entry "draw" method () #f 83 11 83 15 ("get-v" "get-v~" "get-h" "get-h~" "draw-text" "draw-text~" "get-size" "12" "Dimension" "new" "Point" "<Point>" "center" "get-text-width" "get-text-width~" "width" "name" "->string" "string" "let*" "Caption" "Font" "set-font" "set-font~" "fill-rect" "fill-rect~" "get-bounds" "bounds" "let" "background" "when" "context" "surface")}
        {Lisp-Entry "Info" definition (meta public) #f 99 26 99 30 ()}
        {Lisp-Entry "register-info" method (public) #f 103 18 103 31 ("get-name" "get-name~" "background" "and" "list" "cons" "Info" "set!" "when" "new-sc?" "new-sc" "clp" "vor" "wor")}
        {Lisp-Entry "mouse-down" method () #f 113 11 113 21 ("background" "debug" "pos")}}}})
"Server-Configuration"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "server" "Server-Configuration.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.server.Server-Configuration" module (protected) #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Server-Configuration" class () #f 43 7 43 27 ("initialize" "Component")
        {Lisp-Entry "unit" property () #f 46 12 46 16 ()}
        {Lisp-Entry "get-unit" accessor #f #f 46 60 46 68 ()}
        {Lisp-Entry "set-unit" accessor #f #f 46 60 46 68 ()}
        {Lisp-Entry "class" property () #f 47 12 47 17 ()}
        {Lisp-Entry "get-class" accessor #f #f 47 60 47 68 ()}
        {Lisp-Entry "set-class" accessor #f #f 47 60 47 68 ()}
        {Lisp-Entry "port" property () #f 48 12 48 16 ()}
        {Lisp-Entry "get-port" accessor #f #f 48 60 48 68 ()}
        {Lisp-Entry "set-port" accessor #f #f 48 60 48 68 ()}
        {Lisp-Entry "description" property () #f 49 12 49 23 ()}
        {Lisp-Entry "get-description" accessor #f #f 49 60 49 68 ()}
        {Lisp-Entry "set-description" accessor #f #f 49 60 49 68 ()}
        {Lisp-Entry "debug?" property () #f 50 12 50 18 ()}
        {Lisp-Entry "get-debug?" accessor #f #f 50 60 50 68 ()}
        {Lisp-Entry "set-debug?" accessor #f #f 50 60 50 68 ()}
        {Lisp-Entry "toggle-debug?" method (public) #f 58 18 58 31 ("not" "debug?" "set!")}}}})
"Server-Configurations"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "server" "Server-Configurations.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.server.Server-Configurations" module (protected) #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Server-Configurations" class (undocumented) #f 43 20 43 41 ("Component")}}})
"Servers-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "server" "Servers-Actions.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.server.Servers-Actions" module (protected) #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Servers-Actions" class (undocumented) #f 45 20 45 35 ("Actions")
        {Lisp-Entry "form" anonymous #f #f 48 3 48 7 ("on-debug-server" "debug-server" "on-restart-server" "restart-server" "on-stop-server" "stop-server" "on-start-server" "start-server" "on-edit-server" ":focus-guest" "Event-Handler" "action-handler:" "edit-server" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Servers-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "server" "Servers-Manager.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.server.Servers-Manager" module (protected) #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.io" "jazz.ide")}
      {Lisp-Entry "Servers-Manager" class (undocumented) #f 50 20 50 35 ("eq?" "test:" "make-table" "initialize" "Layout-View")
        {Lisp-Entry "configurations" slot () #f 53 8 53 22 ()}
        {Lisp-Entry "servers" slot () #f 54 8 54 15 ()}
        {Lisp-Entry "form" anonymous #f #f 57 3 57 7 ("debugged" "100" "hits" "250" "75" "port" "150" "state" "Tree-Label-Column" "<Tree-Label-Column>" "toplevel-controls?:" "200" "width:" "title:" "name" "Tree-Node-Column" "<Tree-Node-Column>" "on-context-menu" "context-menu-handler:" "on-double-click" "double-click-handler:" "on-selection-change" ":form" "selection-handler:" "multiple-selection?:" "row" "selection-mode:" "description" "filled-column:" "servers" "Tree-View" "<Tree-View>" "shown?:" "header" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "tool" "style:" "hscroll?:" "vscroll?:" "center" "scroller" "Scroller-View" "<Scroller-View>" "on-refresh" "refresh" "on-debug-server" "debug" "Toggle-Tool" "<Toggle-Tool>" "on-restart-server" "restart" "on-stop-server" "stop" "on-start-server" "start" "edit-separator" "Separator" "<Separator>" "on-edit-server" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "enabled?:" "tail" "location:" "22" "Dimension" "size:" "edit" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 82 25 82 38 ("servers-manager" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 91 25 91 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 95 25 95 35 ()}
        {Lisp-Entry "get-tools-view" method (override) #f 104 20 104 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) #f 108 20 108 33 ("get-tree" "acquire-focus" "acquire-focus~")}
        {Lisp-Entry "install" method (override) #f 117 20 117 27 ("update-servers" "setup-configurations" "nextmethod" "rest")}
        {Lisp-Entry "get-tree" method () #f 128 11 128 19 ("servers" "locate")}
        {Lisp-Entry "on-edit-server" method () #f 137 11 137 25 ("selected-configuration" "edit-server" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-start-server" method () #f 143 11 143 26 ("update-states" "update-tools" "selected-configuration" "start-server" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-stop-server" method () #f 151 11 151 25 ("update-states" "update-tools" "selected-configuration" "stop-server" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-restart-server" method () #f 159 11 159 28 ("update-states" "update-tools" "selected-configuration" "restart-server" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-debug-server" method () #f 167 11 167 26 ("update-states" "update-tools" "selected-configuration" "debug-server" "evt")}
        {Lisp-Entry "on-selection-change" method () #f 173 11 173 30 ("update-tools" "servers" "get-name" "get-name~" "case" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "on-refresh" method () #f 180 11 180 21 ("update-servers" "evt")}
        {Lisp-Entry "update-tools" method () #f 184 11 184 23 ("get-debug?" "get-debug?~" "set-selected?" "set-selected?~" "debug" "restart" "stop" "not" "start" "edit" "locate" "set-enabled?" "set-enabled?~" "get-name" "get-name~" "find-server" "and" "server" "selected-configuration" "config" "let*")}
        {Lisp-Entry "on-double-click" method () #f 195 11 195 26 ("update-states" "update-tools" "selected-configuration" "start/stop-server" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-context-menu" method () #f 203 11 203 26 ("track-popup-menu" "when" "selected-configuration" "let" "lambda" "with-context-click" "with-context-click~" "acquire" "acquired" "get-position" "get-position~" "pos" "get-sender" "get-sender~" "sender" "layout-menu" "layout-menu~" "cleanup-separators" "cleanup-separators~" "debug" "restart" "stop" "not" "start" "locate" "locate~" "set-visible?" "set-visible?~" "get-application" "appl" "find-server" "server" "get-name" "get-name~" "name" "Server-Menu" "new" "menu" "let*" "config" "new-servers-menu" "define" "evt")}
        {Lisp-Entry "setup-configurations" method () #f 233 11 233 31 ("err" "continue-handler:" "configurations" "set!" "lambda" "with-safe-execution" "Server-Configurations" "new" "default-servers" "read-form" "instantiate" "instantiate~" "exists?" "exists?~" "is-alias?" "and" "when" "file" "let" "load-servers" "Profile" "File" "Servers-File" "define")}
        {Lisp-Entry "update-servers" method () #f 258 11 258 25 ("get-children" "get-children~" "user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "dynamic" "state:" "add-row" "add-row~" "get-debug?" "get-debug?~" "debug?" "get-hits" "get-hits~" "0" "hits" "get-description" "get-description~" "description" "state-text" "->string" "title" "Image-Resource" "case" "image" "get-port" "get-port~" "port" "started" "stopped" "not" "if" "state" "find-server" "server" "get-name" "get-name~" "name" "let*" "config" "for-each" "configurations" "when" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "get-tree" "tree" "let")}
        {Lisp-Entry "update-states" method () #f 279 11 279 24 ("invalidate-cell" "invalidate-cell~" "set-title" "set-title~" "get-cell-data" "get-cell-data~" "set-image" "set-image~" "get-debug?" "get-debug?~" "debug?" "state-text" "else" "Image-Resource" "case" "image" "stopped" "started" "if" "state" "find-server" "server" "get-name" "get-name~" "name" "get-user-data" "get-user-data~" "config" "5" "c5" "1" "c1" "0" "Cell" "new" "c0" "let*" "rank" "row" "lambda" "for-each-visible-row" "for-each-visible-row~" "get-tree" "tree" "let")}
        {Lisp-Entry "start-server" method () #f 306 11 306 23 ("servers" "table-set!" "start-process" "start-process~" "port:" "module-ref" "new" "server" "get-debug?" "get-debug?~" "debug?" "get-port" "get-port~" "port" "get-class" "get-class~" "class" "get-unit" "get-unit~" "unit" "get-name" "get-name~" "name" "let*" "stop-server" "config")}
        {Lisp-Entry "stop-server" method () #f 318 11 318 22 ("servers" "table-set!" "stop" "stop~" "when" "find-server" "server" "get-name" "get-name~" "name" "let*" "config")}
        {Lisp-Entry "restart-server" method () #f 326 11 326 25 ("start-server" "stop-server" "config")}
        {Lisp-Entry "start/stop-server" method () #f 331 11 331 28 ("stop-server" "start-server" "case" "started" "stopped" "not" "if" "state" "find-server" "server" "get-name" "get-name~" "name" "let*" "config")}
        {Lisp-Entry "debug-server" method () #f 340 11 340 23 ("get-debug?" "get-debug?~" "set-debug?" "set-debug?~" "when" "find-server" "server" "get-name" "get-name~" "name" "let*" "toggle-debug?" "toggle-debug?~" "config")}
        {Lisp-Entry "edit-server" method () #f 348 11 348 22 ("jazz" "context:" "edit-definitions" "edit-definitions~" "get-class" "get-class~" "class" "get-application" "appl" "let" "config")}
        {Lisp-Entry "find-server" method (public) #f 354 18 354 29 ("servers" "table-ref" "name")}
        {Lisp-Entry "selected-object" method () #f 363 11 363 26 ("get-row" "get-row~" "get-user-data" "get-user-data~" "when" "get-single-selection" "get-single-selection~" "rank" "get-tree" "tree" "let*")}
        {Lisp-Entry "selected-configuration" method () #f 370 11 370 33 ("Server-Configuration" "is?" "and" "when" "selected-object" "object" "let")}}
      {Lisp-Entry "Server-Menu" class () #f 381 7 381 18 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f #f 384 3 384 7 ("debug-server" "debug" "restart-server" "restart" "stop-server" "stop" "start-server" "start" "Separator-Item" "<Separator-Item>" "edit-server" "servers" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "edit" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Showcase"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "showcase" "Showcase.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.showcase.Showcase" module (protected) #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.ide" "jazz.graphic" "jazz.editor.jazz")}
      {Lisp-Entry "Showcase" class () #f 48 7 48 15 ("View")
        {Lisp-Entry "form" anonymous #f #f 51 3 51 7 ("Tree-Showcase" "<Tree-Showcase>" "tree-sheet" "visible?:" "330" "b" "Purple" "210" "320" "Red" "Orange" "Trait" "<Trait>" "p" "v2cb" "220" "v2ca" "190" "v2c" "160" "v2b" "v2a" "v2" "v1" "trait:" "on-set-active-trait" ":form" "Event-Handler" "action-handler:" "250" "s2" "Medium-Gray" "400" "85" "ss" "traits-sheet" "snap" "646" "justify" "525" "box" "404" "308" "41" "162" "fit" "332" "310" "283" "east" "west" "south" "0" "north" "4" "layout-padding:" "border" "layout-border" "420" "center" "Dark-Orange" "head" "vertical" "layout-justification:" "500" "flow" "layout" "Layout-View" "<Layout-View>" "layout-flow" "layout-sheet" "Dark-Blue" "Dark-Green" "40" "relative" "mode:" "vert" "second" "Dark-Red" "first" "location:" "View" "<View>" "division:" "horz" "orientation:" "Splitter-View" "<Splitter-View>" "solid" "36" "layout-split" "auto-size?:" "container-sheet" "47" "Label-Tool" "<Label-Tool>" "176" "152" "128" "Radio-Tool" "<Radio-Tool>" "71" "Toggle-Tool" "<Toggle-Tool>" "139" "Push-Tool" "<Push-Tool>" "236" "selected?:" "217" "259" "Radio-Button" "<Radio-Button>" "218" "153" "Check-Box" "<Check-Box>" "212" "Push-Button" "<Push-Button>" "180" "288" "Progress-Bar" "<Progress-Bar>" "8" "214" "185" "21" "Horizontal-Line" "<Horizontal-Line>" "165" "17" "239" "Group-Box" "<Group-Box>" "270" "body" "148" "Push-Combo" "<Push-Combo>" "Moniker-Widget" "<Moniker-Widget>" "124" "Color-Combo" "<Color-Combo>" "101" "content:" "choices:" "Combo-Box" "<Combo-Box>" "entry" "style:" "19" "178" "78" "230" "22" "92" "Label-View" "<Label-View>" "170" "b9" "b8" "130" "b7" "110" "b6" "90" "b5" "70" "b4" "b3" "30" "b2" "16" "b1" "50" "Tree-Label-Column" "<Tree-Label-Column>" "width:" "Tree-Node-Column" "<Tree-Node-Column>" "row" "selection-mode:" "tv" "Tree-View" "<Tree-View>" "Tree-Header" "<Tree-Header>" "fill" "layout-type:" "313" "150" "tree-border" "Blue" "660" "dcs" "DC-Showcase" "<DC-Showcase>" "Green" "Color" "background:" "140" "200" "rs" "Region-Showcase" "<Region-Showcase>" "jt" "Jazz-Text-View" "<Jazz-Text-View>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "221" "350" "269" "text-border" "Border-View" "<Border-View>" "100" "300" "10" "440" "t" "Image-Resource" "resource:" ":images" "portfolio:" "32" "20" "i" "Image-View" "<Image-View>" "content" "!" "<!>" "title:" "views-sheet" "Tab-Sheet" "<Tab-Sheet>" "588" "888" "6" "Point" "position:" "tab" "name:" "Tab-View" "<Tab-View>" "600" "900" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "install" method (override) #f 186 20 186 27 ("install-views" "nextmethod" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 196 25 196 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) #f 200 25 200 35 ()}
        {Lisp-Entry "host-position" method (meta override) #f 204 25 204 38 ("30" "50" "Point")}
        {Lisp-Entry "host-size" method (meta override) #f 208 25 208 34 ("650" "900" "Dimension")}
        {Lisp-Entry "host-workspaces" method (override) #f 212 20 212 35 ("home")}
        {Lisp-Entry "resize" method (override) #f 221 20 221 26 ("tab" "locate" "size-figure" "size-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-set-active-trait" method () #f 226 11 226 30 ("list" "if" "set-active-trait" "set-active-trait~" "trait:" "get-property" "get-property~" "trait" "ss" "locate" "locate~" "view" "get-sender" "get-sender~" "get-creator" "get-creator~" "creator" "let*" "evt")}
        {Lisp-Entry "get-stage" method () #f 238 11 238 20 ("locate" "get-content" "get-content~" "name")}
        {Lisp-Entry "install-views" method () #f 247 11 247 24 ("25" "0" "naturals" "5" "=" "father:" "cell" "format" "title" "let*" "n" "lambda" "for-each" "node" "Tree-Label" "Image-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "tv" "tree" "install-tree-view" "jt" "locate" "get-document-controller" "get-document-controller~" "set-moniker" "set-moniker~" "exists?" "exists?~" "when" "Jedi-Project" "File" "file" "let" "install-text" "define")}
        {Lisp-Entry "on-wipe" method () #f 280 11 280 18 ("Blue" "Red" "Color" "get-background" "get-background~" "eq?" "if" "set-background" "set-background~" "0.005" "delay:" "right" "direction:" "Wipe-Effect" "new" "get-root" "get-root~" "set-effect" "set-effect~" "wiped" "locate" "canvas" "let" "evt")}}
      {Lisp-Entry "Region-Showcase" class () #f 291 7 291 22 ("View")
        {Lisp-Entry "draw" method () #f 295 11 295 15 ("8" "160" "Image-Resource" "get-application" "get-images-portfolio" "get-images-portfolio~" "draw-image" "draw-image~" "Red" "Color" "fill-region" "fill-region~" "or" "combine!" "combine!~" "120" "180" "70" "30" "sec" "100" "145" "50" "Rect" "rect:" "frs" "Region" "new" "rgn" "with" "10" "draw-text" "draw-text~" "Caption" "Font" "set-font" "set-font~" ":transparent" "set-bk-mode" "set-bk-mode~" "context" "surface")}}
      {Lisp-Entry "DC-Showcase" class () #f 313 7 313 18 ("View")
        {Lisp-Entry "draw" method () #f 317 11 317 15 ("10" "Point" "destination:" "bit-blit" "bit-blit~" "Green" "Color" "0" "Rect" "fill-rect" "fill-rect~" "Memory-Surface" "new" "memory-dc" "with" "32" "Dimension" "size" "let" "context" "surface")}}
      {Lisp-Entry "Draw-Showcase" class () #f 329 7 329 20 ("View")
        {Lisp-Entry "draw" method (override) #f 332 20 332 24 ("250" "draw-text" "draw-text~" "frame-rect" "frame-rect~" "Dark" "Medium" "340" "Light" "320" "White" "360" "400" "300" "200" "Black" "set-text-color" "set-text-color~" "Green" "214" "118" "fill-rect" "fill-rect~" "30" "650" "10" "450" "Rect" "new" "Blue" "1" "Red" "Color" "0" "list" "gradient-fill" "gradient-fill~" "rect" "draw-gradient" "define" "context" "surface")}}
      {Lisp-Entry "Scaling-Showcase" class () #f 352 7 352 23 ("View")}}})
"Skins-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "tool" "Skins-Manager.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.tool.Skins-Manager" module (protected) #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.skin" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Skins-Manager" class (undocumented) #f 49 20 49 33 ("Canvas-Manager")
        {Lisp-Entry "form" anonymous #f #f 52 3 52 7 ("on-edit-skins" "edit" "0" "32" "on-reload-skins" "reload" "Separator" "<Separator>" "on-save-skins" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "save" "Push-Tool" "<Push-Tool>" "toolbar" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "form-model" method (override) #f 62 20 62 30 ("nextmethod" "else" "Skins-Editor" "descendants" "get-name" "get-name~" "case" "form")}
        {Lisp-Entry "external-name" method (meta override) #f 68 25 68 38 ("skins-manager" "rest")}
        {Lisp-Entry "host-icon" method (meta override) #f 77 25 77 34 ("Image-Resource")}
        {Lisp-Entry "host-workspaces" method (override) #f 81 20 81 35 ("home")}
        {Lisp-Entry "focus-default" method (override) #f 90 20 90 33 ("acquire-focus" "acquire-focus~" "descendants" "locate" "tree" "let")}
        {Lisp-Entry "install" method (override) #f 100 20 100 27 ("get-skins" "set-client" "nextmethod" "rest")}
        {Lisp-Entry "new-document-controller" method (override) #f 110 20 110 43 ("self" "Skins-Manager-Controller" "new")}
        {Lisp-Entry "on-edit-skins" method (package) #f 119 19 119 32 ("skins-file" "skins-file~" "edit-document" "edit-document~" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-save-skins" method (package) #f 124 19 124 32 ("save" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-reload-skins" method (package) #f 130 19 130 34 ("get-toplevel" "redraw-window" "redraw-window~" "skin-update" "get-active" "get-active~" "child" "child~" "set-skin" "set-skins-designer" "set-skins-designer~" "load-skins" "load-skins~" "skins" "get-application" "appl" "let" "evt")}}
      {Lisp-Entry "Skins-Manager-Controller" class () #f 144 7 144 31 ("Component-Editor-Controller")
        {Lisp-Entry "document-status" method (override) #f 147 20 147 35 ("modified-status" "format")}}
      {Lisp-Entry "Skins-Editor" class () #f 157 7 157 19 ("Descendants-Editor")
        {Lisp-Entry "form-model" method (override) #f 160 20 160 30 ("nextmethod" "else" "Skins-Tree" "tree" "get-name" "get-name~" "case" "form")}}
      {Lisp-Entry "Skins-Tree" class () #f 171 7 171 17 ("Descendants-Tree")
        {Lisp-Entry "form" anonymous #f #f 174 3 174 7 ("reorderable?:" "draggable?:" ":images" "portfolio:" "install" "<install>")}
        {Lisp-Entry "update-selection" method (override) #f 178 20 178 36 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" method (override) #f 182 20 182 29 ("collapsed" "expanded" "1" "<" "if" "level" "update?" "component")}}}})
"Source-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "code" "Source-Menu.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.ide.code.Source-Menu" module (protected) #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Source-Menu" class () #f 45 7 45 18 ("Menu")
        {Lisp-Entry "form" anonymous #f #f 48 3 48 7 ("Format-Menu" "<Format-Menu>" "Column-Menu" "<Column-Menu>" "recolorize-syntax" "lisp-text" "tabulate" "transpose-expr" "select-outer" "goto-line" "search-current" "search-backward-mode" "text" "search-forward-mode" "edit-references" "edit-definitions" "Separator-Item" "<Separator-Item>" "evaluate-buffer" "code-text" "Action" "action-handler:" "Image-Resource" "icon:" "evaluate" "name:" "Label-Item" "<Label-Item>" "title:" "install" "<install>")}}}})
"Text-Showcase"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "showcase" "Text-Showcase.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.ide.showcase.Text-Showcase" module (protected) #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Text-Showcase" class () #f 43 7 43 20 ("View")}}})
"Threads-Showcase"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "showcase" "Threads-Showcase.jazz"} 240293873. jazz
    {Lisp-Entry "jazz.ide.showcase.Threads-Showcase" module (protected) #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("time" "jazz.ui.window" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Threads-Showcase" class () #f 48 7 48 23 ("0" "initialize" "View")
        {Lisp-Entry "threads" slot () #f 51 8 51 15 ()}
        {Lisp-Entry "slowdown" slot () #f 52 8 52 16 ()}
        {Lisp-Entry "start" slot () #f 53 8 53 13 ()}
        {Lisp-Entry "count" slot () #f 54 8 54 13 ()}
        {Lisp-Entry "done?" slot () #f 55 8 55 13 ()}
        {Lisp-Entry "form" anonymous #f #f 58 3 58 7 ("470" "776" "32" "2" "area" "View" "<View>" "on-resume-threads" "224" "resume-threads" "on-suspend-threads" "114" "suspend-threads" "on-add-threads" ":form" "Event-Handler" "action-handler:" "22" "100" "Dimension" "size:" "4" "Point" "position:" "title:" "add-threads" "name:" "Push-Button" "<Push-Button>" "install" "<install>")}
        {Lisp-Entry "destroy-component" method (override) #f 66 20 66 37 ("nextmethod" "stop-showcase")}
        {Lisp-Entry "start-showcase" method () #f 71 11 71 25 ("add-threads" "done?" "0" "count" "current-time" "time->seconds" "start" "set!")}
        {Lisp-Entry "stop-showcase" method () #f 78 11 78 24 ("threads" "thread-join!" "for-each" "done?" "set!")}
        {Lisp-Entry "add-icon" method () #f 84 11 84 19 ("32" "Dimension" "size:" "get-height" "get-height~" "42" "get-width" "get-width~" "-" "random" "Point" "position:" "parent:" "Image-Resource" "resource:" "Showcase-Icon" "new" "get-size" "get-size~" "size" "locate" "area" "let*" "n")}
        {Lisp-Entry "add-threaded-icon" method (public) #f 94 18 94 35 (".005" "length" "*" "cons" "threads" "set!" "showcase" "animate-icon" "animate-icon~" "execute-event" "slowdown" "sleep" "done?" "not" "while" "lambda" "new-thread" "thread-start!" "thread" "add-icon" "icon" "let*" "n")}
        {Lisp-Entry "on-add-threads" method () #f 110 11 110 25 ("add-threads" "evt")}
        {Lisp-Entry "on-suspend-threads" method () #f 114 11 114 29 ("threads" "suspend" "suspend~" "for-each" "evt")}
        {Lisp-Entry "on-resume-threads" method () #f 118 11 118 28 ("threads" "resume" "resume~" "for-each" "evt")}
        {Lisp-Entry "add-threads" method () #f 122 11 122 22 ("5" "0" "naturals" "add-threaded-icon" "n" "lambda" "for-each")}
        {Lisp-Entry "report-timing" method () #f 128 11 128 24 ("start" "current-time" "time->seconds" "-" "fl" "<fl>" "cast" "/" "user-message" "0" "100" "modulo" "=" "when" "count" "increase!")}
        {Lisp-Entry "print" method (override) #f 134 20 134 25 ("object->serial" "format" "lambda" "self" "print-unreadable" "readably" "output")}}
      {Lisp-Entry "Showcase-Icon" class () #f 146 7 146 20 ("Action-Icon")
        {Lisp-Entry "direction-h" slot () #f 149 8 149 19 ()}
        {Lisp-Entry "direction-v" slot () #f 150 8 150 19 ()}
        {Lisp-Entry "prepare" method (override) #f 153 20 153 27 ("direction-v" "5" "11" "random" "-" "direction-h" "set!" "nextmethod" "rest")}
        {Lisp-Entry "animate-icon" method (public) #f 159 18 159 30 ("get-height" "get-height~" "get-bottom" "get-bottom~" "get-top" "get-top~" "-" "set!" "get-width" "get-width~" "get-right" "get-right~" ">" "0" "get-left" "get-left~" "<" "or" "when" "parent" "get-size" "get-size~" "area" "get-rect" "rect" "rebound-icon" "direction-v" "get-v" "get-v~" "direction-h" "get-h" "get-h~" "+" "Point" "new" "set-position" "get-position" "pos" "let" "move-icon" "define")}}}})
"Tree-Showcase"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "showcase" "Tree-Showcase.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.ide.showcase.Tree-Showcase" module (protected) #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Tree-Showcase" class () #f 46 7 46 20 ("View")
        {Lisp-Entry "form" anonymous #f #f 49 3 49 7 ("center" "justification:" "80" "Tree-Label-Column" "<Tree-Label-Column>" "Tree-Node-Column" "<Tree-Node-Column>" "tree-info" "419" "518" "tree-info-border" "415" "selection" "395" "first-displayed-offset" "375" "first-displayed-line" "355" "first-displayed" "335" "visible-height" "16" "170" "315" "visible-count" "Label-View" "<Label-View>" "on-update-information" "275" "update-information" "on-show-hide" "235" "show/hide" "on-remove-rows" "205" "remove-rows" "on-add-row" "24" "160" "175" "add-row" "Push-Button" "<Push-Button>" "display-images?" "110" "toplevel-controls?" "50" "row-spacing" "30" "column-spacing" "on-setting" ":form" "Event-Handler" "action-handler:" "checked?:" "20" "120" "10" "340" "header?" "Check-Box" "<Check-Box>" "100" "Right-Column" "<Right-Column>" "85" "Middle-Column" "<Middle-Column>" "130" "width:" "title:" "Node-Column" "<Node-Column>" ":images" "portfolio:" "row" "selection-mode:" "multiple-selection?:" "row-spacing:" "0" "column-spacing:" "filled-column:" "tree" "Tree-View" "<Tree-View>" "Tree-Header" "<Tree-Header>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "457" "319" "6" "3" "Point" "position:" "tree-border" "name:" "Border-View" "<Border-View>" "466" "940" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "host-title" method (meta override) #f 95 25 95 35 ()}
        {Lisp-Entry "host-position" method (meta override) #f 99 25 99 38 ("60" "39" "Point")}
        {Lisp-Entry "host-size" method (meta override) #f 103 25 103 34 ("466" "940" "Dimension")}
        {Lisp-Entry "install" method (override) #f 112 20 112 27 ("update-information" "setup-tree" "nextmethod" "rest")}
        {Lisp-Entry "setup-tree" method () #f 123 11 123 21 ("10" "0" "naturals" "3" "/=" "visible?:" "5" "=" "when" "cell" "format" "title" "let*" "n" "lambda" "for-each" "node" "Image-Resource" "add-row" "locate" "tree" "let")}
        {Lisp-Entry "add-row" definition () #f 142 15 142 22 ("Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "random-height" "row-height:" "father:" "add-row" "add-row~" "visible?" "visible?:" "right" "middle" "image2" "image" "title" "father" "tree")}
        {Lisp-Entry "random-height" definition () #f 146 15 146 28 ("60" "random" "10" "+")}
        {Lisp-Entry "guest-actions" method (override) #f 155 20 155 33 ("nextmethod" "tree-showcase" "find-actions" "cons")}
        {Lisp-Entry "resize" method (override) #f 165 20 165 26 ("tree-info-border" "0" "tree-border" "locate" "size-figure" "size-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-setting" method () #f 171 11 171 21 ("set-display-images?" "set-display-images?~" "display-images?" "get-node-column" "get-node-column~" "set-toplevel-controls?" "set-toplevel-controls?~" "toplevel-controls?" "set-row-spacing" "set-row-spacing~" "row-spacing" "0" "1" "if" "set-column-spacing" "set-column-spacing~" "column-spacing" "get-checked?" "get-checked?~" "set-header?" "set-header?~" "header?" "get-name" "get-name~" "case" "locate" "tree" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "Unique-Id" definition () #f 182 14 182 23 ("0")}
        {Lisp-Entry "Last-Added-Row" definition () #f 185 14 185 28 ()}
        {Lisp-Entry "on-add-row" method () #f 189 11 189 21 ("update-information" "and" "Tree-Label" "Image-Resource" "image:" "title:" "Tree-Node" "new" "children:" "random-height" "row-height:" "collapsed" "state:" "father:" "add-row" "add-row~" "Last-Added-Row" "set!" "increase!" "Unique-Id" "format" "title" "let" "row" "for-each" "get-shift?" "get-shift?~" "use-last-added?" "get-row" "get-row~" "n" "lambda" "map" "list" "null?" "if" "rows" "get-selection" "get-selection~" "sel" "locate" "tree" "let*" "evt")}
        {Lisp-Entry "on-remove-rows" method () #f 202 11 202 25 ("update-information" "remove-row" "remove-row~" "row" "for-each" "get-row" "get-row~" "n" "lambda" "map" "rows" "get-selection" "get-selection~" "sel" "locate" "tree" "let*" "evt")}
        {Lisp-Entry "on-show-hide" method () #f 212 11 212 23 ("update-information" "not" "set-visible?" "set-visible?~" "get-visible-flag" "get-visible-flag~" "visible?" "get-user-data" "get-user-data~" "target" "row" "for-each" "get-row" "get-row~" "n" "lambda" "map" "rows" "get-selection" "get-selection~" "sel" "tree-info" "locate" "tree" "let*" "evt")}
        {Lisp-Entry "on-update-information" method () #f 224 11 224 32 ("update-information" "evt")}
        {Lisp-Entry "update-information" method () #f 233 11 233 29 ("display-tree" "update-fields")}
        {Lisp-Entry "update-fields" method () #f 238 11 238 24 ("get-selection" "get-selection~" "selection" "get-visible-height" "get-visible-height~" "visible-height" "get-visible-count" "get-visible-count~" "format" "visible-count" "set-title" "set-title~" "locate" "tree" "let")}
        {Lisp-Entry "display-tree" method () #f 245 11 245 23 ("get-root-row" "get-root-row~" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "subrow" "lambda" "get-sons" "get-sons~" "iterate" "user-data:" "display-row" "children:" "expanded" "state:" "father:" "add-row" "add-row~" "subdest" "dest" "row" "iter" "define" "tree-info" "info" "locate" "tree" "let")}
        {Lisp-Entry "display-row" method () #f 262 11 262 22 ("list" "get-visible-flag" "get-visible-flag~" "c6" "c5" "c4" "color:" "c3" "c2" "Tree-Label" "c1" "get-image" "get-image~" "image:" "get-title" "get-title~" "title:" "Tree-Node" "new" "c0" "Dark-Blue" "Dark-Red" "Color" "if" "color" "get-visible?" "get-visible?~" "visible?" "row->line" "and" "lambda" "rank" "get-children" "get-children~" "car" "node" "let*" "internal-fields" "internal-fields~" "next" "previous" "state" "level" "receive" "row" "tree")}
        {Lisp-Entry "row->line" definition () #f 278 15 278 24 ("error" "get-root-row" "get-root-row~" "get-sons" "get-sons~" "iterate" "increase!" "continuation-return" "eq?" "if" "subrow" "iter" "define" "-1" "rank" "let" "return" "lambda" "continuation-capture" "row" "tree")}}
      {Lisp-Entry "Node-Column" class () #f 297 7 297 18 ("Tree-Node-Column")
        {Lisp-Entry "draw-data" method (override) #f 300 20 300 29 ("0" "draw-title" "Dark-Red" "Red" "Color" "if" "fill-rect" "fill-rect~" "selected?:" "getf" "selected?" "text-rect" "rect" "let" "nextmethod" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Middle-Column" class () #f 313 7 313 20 ("Tree-Column")
        {Lisp-Entry "draw-data" method (override) #f 316 20 316 29 ("Dark-Blue" "Blue" "Color" "if" "fill-rect" "fill-rect~" "selected?:" "getf" "selected?" "0" "Rect" "new" "rect" "let" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Right-Column" class () #f 327 7 327 19 ("Tree-Column")
        {Lisp-Entry "draw-data" method (override) #f 330 20 330 29 ("Dark-Green" "Green" "Color" "if" "fill-rect" "fill-rect~" "selected?:" "getf" "selected?" "0" "Rect" "new" "rect" "let" "height" "width" "data" "row" "context" "surface")}}}})
"Tree-Showcase-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "showcase" "Tree-Showcase-Actions.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.ide.showcase.Tree-Showcase-Actions" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Tree-Showcase-Actions" class () #f 45 7 45 28 ("Actions")
        {Lisp-Entry "form" anonymous #f #f 48 3 48 7 ("F5" "Shortcut" "shortcut:" "on-update-information" ":document" "Event-Handler" "action-handler:" "update-information" "name:" "Action-Item" "<Action-Item>" "Actions" "<Actions>")}}}})
"_ide"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "_ide.jazz"} 232615453. jazz
    {Lisp-Entry "jazz.ide" module () #f 37 8 37 16 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.ide.autoload")}}})
"_login"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "login" "_login.jazz"} 222396250. jazz
    {Lisp-Entry "jazz.ide.login" module () #f 37 8 37 22 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.ide")}
      {Lisp-Entry "choose-login" definition (public) #f 45 20 45 32 ("Login-Dialog" "get-modal" "Login-Bindings" "new" "set-bindings" "unless" "begin" "unwind-protect" "get-bindings" "actual" "let" "invite" "invite:")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "autoload.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.ide.autoload" module (protected) #f 37 18 37 35 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("Skins-Manager" "jazz.ide.tool.Skins-Manager" "Tree-Showcase-Actions" "jazz.ide.showcase.Tree-Showcase-Actions" "Tree-Showcase" "jazz.ide.showcase.Tree-Showcase" "Threads-Showcase" "jazz.ide.showcase.Threads-Showcase" "Text-Showcase" "jazz.ide.showcase.Text-Showcase" "Showcase" "jazz.ide.showcase.Showcase" "Scaled-View" "jazz.ide.showcase.Scaled-View" "Outline-Showcase" "jazz.ide.showcase.Outline-Showcase" "Servers-Manager" "jazz.ide.server.Servers-Manager" "Servers-Actions" "jazz.ide.server.Servers-Actions" "Server-Configurations" "jazz.ide.server.Server-Configurations" "Server-Configuration" "jazz.ide.server.Server-Configuration" "Login-Dialog" "jazz.ide.login.Login-Dialog" "Login-Bindings" "jazz.ide.login.Login-Bindings" "Source-Menu" "jazz.ide.code.Source-Menu" "Refactor-Menu" "jazz.ide.code.Refactor-Menu" "Hierarchy-Browser-Actions" "jazz.ide.code.Hierarchy-Browser-Actions" "Hierarchy-Browser" "jazz.ide.code.Hierarchy-Browser" "Code-Tree" "jazz.ide.code.Code-Tree" "Chapters-Browser-Actions" "jazz.ide.code.Chapters-Browser-Actions" "Chapters-Browser" "jazz.ide.code.Chapters-Browser" "IDE-Toplevel" "jazz.ide.application.IDE-Toplevel" "IDE-Toolbar" "jazz.ide.application.IDE-Toolbar" "IDE-Text-View" "jazz.ide.application.IDE-Text-View" "Skin-Menu" "Activities-Menu" "IDE-Status" "jazz.ide.application.IDE-Status" "IDE-Profile" "jazz.ide.application.IDE-Profile" "IDE-Preferences" "jazz.ide.application.IDE-Preferences" "IDE-File-Menu" "jazz.ide.application.IDE-File-Menu" "IDE-Bindings" "jazz.ide.application.IDE-Bindings" "IDE-Actions" "jazz.ide.application.IDE-Actions" "IDE" "autoload" "jazz.ide.application.IDE")}}})
"colors"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "colors.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.colors" module () #f 37 8 37 28 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}}})
"connections"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "connections.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.connections" module () #f 37 8 37 33 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.schema" "jazz.library")}}})
"development"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "development.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.ide.development" module () #f 37 8 37 28 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.development")}
      {Lisp-Entry "import" anonymous #f #f 42 1 42 7 ("jazz.ui.workspace" "jazz.ui.view" "jazz.ui.dialog" "jazz.ui.clipboard" "jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.editor.sql.view" "jazz.editor.jazz")}
      {Lisp-Entry "i" definition (public) #f 62 20 62 21 ("inspect" "object")}
      {Lisp-Entry "ins" definition (public) #f 66 20 66 23 ("inspect-object" "object")}
      {Lisp-Entry "inspect-form" definition (public) #f 70 20 70 32 ("newline" "form->node" "pretty-print" "pretty-print~" "get-form" "get-form~" "Form" "is?" "if" "form" "let" "output" "lambda" "with-text-inspector" "form/component")}
      {Lisp-Entry "inspect-traits" definition (public) #f 78 20 78 34 ("newline" "form->node" "pretty-print" "pretty-print~" "not" "get-restore-form" "get-restore-form~" "form" "get-name" "get-name~" "format" "set!" "if" "trait" "for-each-trait" "for-each-trait~" "first?" "let" "output" "lambda" "with-text-inspector" "component")}
      {Lisp-Entry "with-text-inspector" definition (public) #f 95 20 95 39 ("acquire-focus" "acquire-focus~" "set-modified?" "set-modified?~" "text-beginning" "text-beginning~" "set-caret" "set-caret~" "get-output-string" "set-string-content" "set-string-content~" "get-guest" "get-guest~" "text" "host-workspace:" "host-visible?:" "Jazz-Text-View" "new-frame" "frame" "selected-workspace" "get-name" "get-name~" "workspace" "let*" "open-output-string" "output" "let" "proc")}
      {Lisp-Entry "methods" definition (public) #f 107 20 107 27 ("get-fields" "get-fields~" "table-values" "Method" "collect-type" "field-name" "map" "class-of" "class?" "if" "class" "let" "class/obj")}
      {Lisp-Entry "cc" definition (public) #f 117 19 117 21 ("set!" "choose-color" "throw" "when" "exc" "Cancel-Signal" "catch" "new-color" "registered-color" "else" "Color" "is?" "not" "cond" "feedback" "feedback:" "color" "color:" "lambda" "previous-color" "let")}
      {Lisp-Entry "cf" definition (public) #f 132 20 132 22 ("choose-file")}
      {Lisp-Entry "cmf" definition (public) #f 136 20 136 23 ("multiple-selection?:" "choose-file")}
      {Lisp-Entry "cnf" definition (public) #f 140 20 140 23 ("choose-new-file")}
      {Lisp-Entry "cd" definition (public) #f 144 20 144 22 ("choose-directory")}
      {Lisp-Entry "cp" definition (public) #f 148 20 148 22 ("user-message" "set-clipboard-text" "cd" "get-list" "get-list~" "format" "path" "let")}
      {Lisp-Entry "find-files" definition (public) #f 160 20 160 30 ("debug" "match" "match~" "when" "get-name" "get-name~" "name" "file" "lambda" "iterate-directory" "iterate-directory~" "Regular-Expression" "new" "regexp" "let" "directory" "pattern")}
      {Lisp-Entry "rename-files" definition (public) #f 169 20 169 32 ("format-plural" "format" "message-box" "directories?:" "files?:" "increase!" "move-pathname" "move-pathname~" "get-directory" "get-directory~" "new-file~" "new-file" "replace" "replace~" "new-name" "when" "match~" "match" "get-name" "get-name~" "name" "let*" "file" "lambda" "iterate-directory" "iterate-directory~" "List-Factory" "failed" "0" "succeeded" "replacement-regexp" "Regular-Expression" "new" "find-regexp" "title:" "choose-directory" "directory" "let" "replacement" "find")}
      {Lisp-Entry "Receiver-View" class () #f 194 7 194 20 ("explicit" "initialize" "View")
        {Lisp-Entry "invite" property () #f 197 12 197 18 ()}
        {Lisp-Entry "receiver" property () #f 198 12 198 20 ()}
        {Lisp-Entry "get-receiver" accessor #f #f 198 45 198 53 ()}
        {Lisp-Entry "set-receiver" accessor #f #f 198 45 198 53 ()}
        {Lisp-Entry "form" anonymous #f #f 201 3 201 7 ("Dark" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "get-invite" method (public) #f 205 18 205 28 ("invite")}
        {Lisp-Entry "set-invite" method (public) #f 209 18 209 28 ("invalidate-view" "invite" "set!" "value")}
        {Lisp-Entry "receive-files" method (override) #f 214 20 214 33 ("self" "receiver" "files" "pos")}
        {Lisp-Entry "Background-Font" definition () #f 218 14 218 29 ("Heading2" "Font")}
        {Lisp-Entry "draw" method (override) #f 222 20 222 24 ("Gray" "get-v" "get-v~" "2" "get-h" "get-h~" "+" "draw-text" "draw-text~" "Black" "Color" "set-text-color" "set-text-color~" "get-display-size" "center" "pos" "get-text-extent" "get-text-extent~" "extent" "invite" "or" "localize" "title" "let*" "Background-Font" "set-font" "set-font~" "context" "surface")}}
      {Lisp-Entry "setup-receiver" definition (public) #f 235 20 235 34 ("receiver:" "224" "434" "Dimension" "host-size:" "169" "219" "Point" "host-position:" "or" "host-title:" "Receiver-View" "new-palette" "invite" "invite:" "size" "size:" "position" "position:" "title" "title:" "receiver")}
      {Lisp-Entry "rer" definition (public) #f 249 20 249 23 ("match" "match~" "Regular-Expression" "new" "replace" "replace~" "string" "to" "from")}
      {Lisp-Entry "inspect-tables" definition (public) #f 258 20 258 34 ("0" "display-tables" "display-tables~" "set-current-request" "set-current-request~" "get-sql-console-text" "console-text" "let" "250" "max-display" "max-display:" "name" "name:" "tables")}}})
"doc"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "doc.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.doc" module () #f 37 8 37 25 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.doc")}}})
"favorites"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "favorites.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.favorites" module () #f 37 8 37 31 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.library")}}})
"fonts"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "fonts.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.fonts" module () #f 37 8 37 27 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}}})
"formats"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "formats.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.formats" module () #f 37 8 37 29 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}}})
"pagesetup"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "pagesetup.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.pagesetup" module () #f 37 8 37 31 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}}})
"project"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "project.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.project" module () #f 37 8 37 29 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.project" "jazz.library")}}})
"servers"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "servers.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.servers" module () #f 37 8 37 29 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.ide")}}})
"skins"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "skins.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.skins" module () #f 37 8 37 27 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}}})
"styles"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "styles.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.styles" module () #f 37 8 37 28 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}}})
"toolbox"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "toolbox.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.toolbox" module () #f 37 8 37 29 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.library" "jazz.designer")}}})
"workbench"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "workbench.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.workbench" module () #f 37 8 37 31 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.project" "jazz.library")}}})
"workspaces"
 ({Lisp-File-Entry {File :context "src" "jazz" "ide" "data" "workspaces.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.ide.data.workspaces" module () #f 37 8 37 32 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.project" "jazz.library" "jazz.ide" "jazz.editor.sql" "jazz.editor.lisp" "jazz.editor.jazz" "jazz.designer" "jazz.debugger")}}})
