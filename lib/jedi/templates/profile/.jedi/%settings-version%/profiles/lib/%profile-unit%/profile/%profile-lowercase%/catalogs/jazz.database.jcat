"Connection"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "connection" "Connection.jazz"} 1288732032
    {Lisp-Entry "jazz.database.connection.Connection" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Connection" class #f 43 7 43 17 ("initialize" "Object")
        {Lisp-Entry "data-source" slot #f 46 8 46 19 ()}
        {Lisp-Entry "get-data-source" accessor #f 46 41 46 49 ()}
        {Lisp-Entry "inventory" slot #f 47 8 47 17 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("destroy-mandatory" "open" "apply" "setup-connection" "nextmethod" "rest" "data-source")}
        {Lisp-Entry "setup-connection" method #f 57 19 57 35 ()}
        {Lisp-Entry "destroy" method #f 61 20 61 27 ("nextmethod" "destroy-connection")}
        {Lisp-Entry "destroy-connection" method #f 66 19 66 37 ("data-source" "set!" "close" "inventory" "when")}
        {Lisp-Entry "print" method #f 73 20 73 25 ("get-connection-string" "format" "data-source" "when" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-inventory" method #f 85 18 85 31 ("reload-inventory" "apply" "inventory" "or" "rest")}
        {Lisp-Entry "reload-inventory" method #f 89 18 89 34 ("self" "new-inventory" "" "apply" "inventory" "set!" "data-source" "when" "rest")}
        {Lisp-Entry "open" method #f 99 19 99 23 ("data-source~self" "set!" "rest" "data-source")}
        {Lisp-Entry "get-state" method #f 108 26 108 35 ()}
        {Lisp-Entry "new-request" method #f 117 26 117 37 ()}
        {Lisp-Entry "supports-multirequests?" method #f 121 26 121 49 ("data-source" "get-provider" "supports-multirequests?")}
        {Lisp-Entry "load-request" method #f 132 26 132 38 ("load-request" "new-request" "request" "with" "data-class" "data-class:" "max-load" "max-load:" "name" "name:" "command")}
        {Lisp-Entry "load-multirequest" method #f 137 26 137 43 ("load-multirequest" "new-request" "request" "with" "data-classes" "data-classes:" "max-load" "max-load:" "command")}
        {Lisp-Entry "load-rows" method #f 142 26 142 35 ("load-request" "get-rows" "command")}
        {Lisp-Entry "load-row" method #f 146 26 146 34 ("car" "length" "1" "=" "assert" "load-rows" "rows" "let" "command")}
        {Lisp-Entry "load-value" method #f 152 18 152 28 ("car" "get" "length" "1" "=" "assert" "load-rows" "rows" "let" "column" "command")}
        {Lisp-Entry "load-values" method #f 158 18 158 29 ("load-rows" "get" "row" "lambda" "map" "column" "command")}
        {Lisp-Entry "execute" method #f 169 26 169 33 ("command")}
        {Lisp-Entry "comment" method #f 173 26 173 33 ("parameters" "string")}
        {Lisp-Entry "begin-transaction" method #f 182 26 182 43 ()}
        {Lisp-Entry "commit-transaction" method #f 186 26 186 44 ()}
        {Lisp-Entry "rollback-transaction" method #f 190 26 190 46 ()}
        {Lisp-Entry "with-transaction" method #f 194 18 194 34 ("rollback-transaction" "commit-transaction" "if" "when" "set!" "begin-transaction" "begin" "unwind-protect" "completed?" "started?" "let" "proc")}}}})
"Data-Group"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "view" "Data-Group.jazz"} 1288732032
    {Lisp-Entry "jazz.database.view.Data-Group" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Data-Group" class #f 43 20 43 30 ("Group")}}})
"Data-Source-Browser"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "view" "Data-Source-Browser.jazz"} 1288732032
    {Lisp-Entry "jazz.database.view.Data-Source-Browser" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Data-Source-Browser" class #f 46 20 46 39 ("160" "450" "33" "source" "top-padding:" "2" "left-padding:" "body" "content" "scroller" "on-provider-change" ":form" "Event-Handler" "content-change-handler:" "provider" "edge" "border-type:" "19" "146" "1" "67" "provider-border" "20" "50" "0" "Point" "position:" "title:" "provider-label" "name:" "206" "500" "Dimension" "size:" "explicit" "initialize" "View")
        {Lisp-Entry "provider" property #f 49 12 49 20 ()}
        {Lisp-Entry "install" method #f 63 20 63 27 ("setup-providers" "nextmethod" "rest")}
        {Lisp-Entry "get-provider" method #f 73 18 73 30 ("provider")}
        {Lisp-Entry "set-provider" method #f 77 18 77 30 ("provider-update" "provider" "set!" "value")}
        {Lisp-Entry "get-data-source" method #f 82 18 82 33 ("get-data-source" "when" "get-data-source-browser" "browser" "let")}
        {Lisp-Entry "set-data-source" method #f 88 18 88 33 ("get-data-source-browser" "set-data-source" "provider-update" "set-value" "get-provider" "external-name" "set!" "set-entry" "null?" "if" "provider" "'provider" "locate" "combo" "let" "source")}
        {Lisp-Entry "setup-username/password-mode" method #f 98 18 98 46 ("setup-username/password-mode" "when" "get-data-source-browser" "browser" "let")}
        {Lisp-Entry "set-default-focus" method #f 109 18 109 35 ()}
        {Lisp-Entry "on-provider-change" method #f 113 11 113 29 ("provider-update" "get-value" "set!" "provider" "'provider" "locate" "combo" "let" "evt")}
        {Lisp-Entry "on-return-press" method #f 119 20 119 35 ("self" "invoke-handler" "return-press-handler" "when" "evt")}
        {Lisp-Entry "layout" method #f 129 20 129 26 ("get-size" "-" "set-size" "33" "0" "Point" "source" "'source" "set-position" "provider-border" "'provider-border" "provider-label" "'provider-label" "locate" "set-visible?" "begin" "provider" "null?" "if")}
        {Lisp-Entry "validate-content" method #f 147 20 147 36 ("when" "get-data-source-browser" "browser" "let" "provider" "'provider" "locate" "validate-content")}
        {Lisp-Entry "setup-providers" method #f 159 11 159 26 ("set-entry" "set-choices" "second" "key:" "Provider" "get-providers" "present" "external-name" "list" "lambda" "map" "<" "sort" "choices" "provider" "'provider" "locate" "combo" "let")}
        {Lisp-Entry "get-data-source-browser" method #f 176 11 176 34 ("source" "'source" "locate" "first-child")}
        {Lisp-Entry "provider-update" method #f 180 11 180 26 ("layout-view" "parent:" "Provider" "get-provider" "browser-class" "new" "provider" "when" "close-children" "'source" "locate" "source" "let")}}}})
"Data-Source-Chooser"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "view" "Data-Source-Chooser.jazz"} 1288732032
    {Lisp-Entry "jazz.database.view.Data-Source-Chooser" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Data-Source-Chooser" class #f 47 20 47 39 ("on-cancel" ":host" "195" "cancel" "on-update" ":guest" "Event-Handler" "action-handler:" "default?:" "24" "80" "170" "105" "update" "browser" "0" "22" "Rect" "layout-insets:" "fill" "layout-type:" "116" "604" "44" "-2" "database" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "202" "500" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "provider" property #f 50 12 50 20 ()}
        {Lisp-Entry "finish" method #f 64 20 64 26 ("target-provider" "setup-browser" "nextmethod" "rest")}
        {Lisp-Entry "target-provider" method #f 69 29 69 44 ("provider")}
        {Lisp-Entry "host-title" method #f 78 25 78 35 ()}
        {Lisp-Entry "host-size" method #f 82 25 82 34 ("250" "650" "Dimension")}
        {Lisp-Entry "get-provider" method #f 91 18 91 30 ("provider")}
        {Lisp-Entry "set-provider" method #f 95 18 95 30 ("get-browser" "set-provider" "provider" "set!" "value")}
        {Lisp-Entry "get-data-source" method #f 100 18 100 33 ("get-browser" "get-data-source")}
        {Lisp-Entry "set-data-source" method #f 104 18 104 33 ("get-browser" "set-data-source" "value")}
        {Lisp-Entry "get-browser" method #f 108 18 108 29 ("browser" "'browser" "locate")}
        {Lisp-Entry "setup-browser" method #f 117 11 117 24 ("set-default-focus" "browser" "'browser" "locate" "set-provider" "provider")}
        {Lisp-Entry "resize" method #f 127 20 127 26 ("cancel" "'cancel" "update" "'update" "move-figure" "database" "'database" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "get-tab-stops" method #f 134 20 134 33 ("get-browser" "get-tab-stops")}
        {Lisp-Entry "on-return-press" method #f 138 20 138 35 ("update-database" "evt")}
        {Lisp-Entry "on-update" method #f 142 11 142 20 ("update-database" "evt")}
        {Lisp-Entry "on-close" method #f 146 11 146 19 ("get-host" "close" "evt")}
        {Lisp-Entry "update-database" method #f 155 29 155 44 ("end-modal" "get-data-source" "source" "get-host" "dialog" "let")}
        {Lisp-Entry "Header-Color" definition #f 166 14 166 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 170 20 170 24 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}}})
"Data-Source-Widget"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "view" "Data-Source-Widget.jazz"} 1288732032
    {Lisp-Entry "jazz.database.view.Data-Source-Widget" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Data-Source-Widget" class #f 43 20 43 38 ("Layout-View")
        {Lisp-Entry "get-data-source" method #f 51 26 51 41 ()}
        {Lisp-Entry "set-data-source" method #f 55 26 55 41 ("source")}
        {Lisp-Entry "setup-username/password-mode" method #f 59 26 59 54 ()}
        {Lisp-Entry "set-default-focus" method #f 68 26 68 43 ()}}}})
"Datatype-Row"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "designer" "Datatype-Row.jazz"} 1288732032
    {Lisp-Entry "jazz.database.designer.Datatype-Row" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Datatype-Row" class #f 45 20 45 32 ("initialize" "Combo-Row")
        {Lisp-Entry "datatype-class" property #f 48 12 48 26 ()}
        {Lisp-Entry "get-datatype-class" accessor #f 48 60 48 68 ()}
        {Lisp-Entry "set-datatype-class" accessor #f 48 60 48 68 ()}
        {Lisp-Entry "allow-partial-datatype?" property #f 49 12 49 35 ()}
        {Lisp-Entry "get-allow-partial-datatype?" accessor #f 49 60 49 68 ()}
        {Lisp-Entry "set-allow-partial-datatype?" accessor #f 49 60 49 68 ()}
        {Lisp-Entry "systypes" slot #f 52 8 52 16 ()}
        {Lisp-Entry "initialize" method #f 60 20 60 30 ("systypes" "setup" "get-systypes" "and" "systypes~self" "allow-partial-datatype?~self" "datatype-class~self" "set!" "nextmethod" "apply" "others" "allow-partial-datatype?" "unavailable-systypes-message" "datatype-class" "bind-keywords" "rest")}
        {Lisp-Entry "setup" method #f 69 11 69 16 ("get-name" "present-format" "list" "systype" "map" "set-choices" "message-box" "combo" "lambda" "set-choices-updater" "null?" "if" "unavailable-systypes-message" "systypes")}
        {Lisp-Entry "present" method #f 84 20 84 27 ("present" "null?" "if" "type")}
        {Lisp-Entry "editor-class" method #f 95 20 95 32 ("Datatype-Row-Editor")}
        {Lisp-Entry "get-edited-value" method #f 99 20 99 36 ("Datatype" "datatype-class" "or" "new" "scale" "precision" "size" "name" "receive" "when" "parse-content" "parsed" "editor" "get-content" "string" "let*")}
        {Lisp-Entry "set-edited-value" method #f 107 20 107 36 ("present" "editor" "set-content" "value")}
        {Lisp-Entry "read-content" definition #f 111 15 111 27 ("separator:" "substitute" "parse-strings" "empty-string?" "not" "string" "lambda" "collect-if" "content")}
        {Lisp-Entry "parse-content" method #f 117 11 117 24 ("null?" "let*" "3" "2" "car" "1" "0" "length" "case" "read-content" "content" "message:" "Parse-Error" "new" "signal" "message" "format" "find-systype" "datatype-class" "when" "get-scalable?" "scale" "parse-decimal" "else" "parse-integer" "cond" "precision" "bind" "list" "parse-variable" "values" "present-format" "parse-error" "get-precisionable?" "get-sizeable?" "or" "allow-partial-datatype?" "not" "and" "if" "parse-systype" "systype" "let" "name" "parse-fixed" "define" "string")}
        {Lisp-Entry "present-format" method #f 165 11 165 25 ("get-fixed?" "get-sizeable?" "format" "get-precisionable?" "cond" "allow-partial-datatype?" "if" "name" "systype")}}
      {Lisp-Entry "Datatype-Row-Editor" class #f 182 7 182 26 ("Combo-Row-Editor")
        {Lisp-Entry "content-change" method #f 185 20 185 34 ("nextmethod" "popup" "'popup" "eq?" "unless" "origin")}
        {Lisp-Entry "combo-choice" method #f 190 20 190 32 ()}
        {Lisp-Entry "get-entry" method #f 194 20 194 29 ("car" "when" "get-content" "value-row" "read-content" "content" "let")}
        {Lisp-Entry "set-entry" method #f 200 20 200 29 ("cdr" "cons" "join" "set-content" "separator:" "parse-strings" "car" "get-content" "value-row" "read-content" "actual" "let" "entry")}}}})
"Inventory"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "inventory" "Inventory.jazz"} 1288732032
    {Lisp-Entry "jazz.database.inventory.Inventory" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Inventory" class #f 43 7 43 16 ("Object")
        {Lisp-Entry "connection" slot #f 46 8 46 18 ()}
        {Lisp-Entry "get-connection" accessor #f 46 26 46 34 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("destroy-mandatory" "connection" "set!" "nextmethod" "conn")}
        {Lisp-Entry "destroy" method #f 55 20 55 27 ("nextmethod" "connection" "close")}
        {Lisp-Entry "get-version" method #f 65 26 65 37 ()}
        {Lisp-Entry "type-connection-string" method #f 74 26 74 48 ()}
        {Lisp-Entry "get-tables" method #f 83 26 83 36 ()}
        {Lisp-Entry "get-table" method #f 87 26 87 35 ("name")}
        {Lisp-Entry "create-table" method #f 91 26 91 38 ("name")}
        {Lisp-Entry "append-table" method #f 95 26 95 38 ("table")}
        {Lisp-Entry "remove-table" method #f 99 26 99 38 ("name")}
        {Lisp-Entry "columns-ordinal-position-consecutive?" method #f 103 26 103 63 ()}
        {Lisp-Entry "column-supports-property?" method #f 107 26 107 51 ("property" "object")}
        {Lisp-Entry "create-or-modify-view" method #f 116 26 116 47 ("append-view" "set-text" "create-view" "new-view" "remove-view" "when" "error?:" "get-view" "view" "with" "text" "name")}
        {Lisp-Entry "get-views" method #f 125 26 125 35 ()}
        {Lisp-Entry "get-view" method #f 129 26 129 34 ("rest" "name")}
        {Lisp-Entry "create-view" method #f 133 26 133 37 ("name")}
        {Lisp-Entry "append-view" method #f 137 26 137 37 ("view")}
        {Lisp-Entry "remove-view" method #f 141 26 141 37 ("name")}
        {Lisp-Entry "get-relations" method #f 150 26 150 39 ()}
        {Lisp-Entry "get-relation" method #f 154 26 154 38 ("name")}
        {Lisp-Entry "create-relation" method #f 158 26 158 41 ("name")}
        {Lisp-Entry "create-relation-complete" method #f 162 26 162 50 ("foreign-fields" "foreign-table" "primary-fields" "primary-table" "name")}
        {Lisp-Entry "append-relation" method #f 166 26 166 41 ("new-relation")}
        {Lisp-Entry "remove-relation" method #f 170 26 170 41 ("relation-name")}
        {Lisp-Entry "create-or-modify-procedure" method #f 179 26 179 52 ("append-procedure" "set-text" "create-procedure" "new-procedure" "remove-procedure" "when" "error?:" "get-procedure" "procedure" "with" "text" "name")}
        {Lisp-Entry "get-procedures" method #f 188 26 188 40 ()}
        {Lisp-Entry "get-procedure" method #f 192 26 192 39 ("rest" "name")}
        {Lisp-Entry "create-procedure" method #f 196 26 196 42 ("name")}
        {Lisp-Entry "append-procedure" method #f 200 26 200 42 ("procedure")}
        {Lisp-Entry "remove-procedure" method #f 204 26 204 42 ("name")}
        {Lisp-Entry "create-or-modify-trigger" method #f 213 26 213 50 ("create-or-modify-trigger" "get-table" "table" "let" "text" "trigger-name" "table-name")}
        {Lisp-Entry "create-or-modify-constraint" method #f 218 26 218 53 ("create-or-modify-constraint" "get-table" "table" "let" "exclude-replication?" "checked?" "text" "constraint-name" "table-name")}}}})
"Inventory-Column"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "inventory" "Inventory-Column.jazz"} 1288732032
    {Lisp-Entry "jazz.database.inventory.Inventory-Column" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Inventory-Column" class #f 43 7 43 23 ("Object")
        {Lisp-Entry "inventory" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-inventory" accessor #f 46 29 46 37 ()}
        {Lisp-Entry "parent" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-parent" accessor #f 47 29 47 37 ()}
        {Lisp-Entry "index-column?" slot #f 48 8 48 21 ()}
        {Lisp-Entry "get-index-column?" accessor #f 48 29 48 37 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("index-column?~self" "parent~self" "inventory~self" "set!" "nextmethod" "index-column?" "parent" "inventory")}
        {Lisp-Entry "get-table" method #f 63 18 63 27 ("parent")}
        {Lisp-Entry "get-default-value" method #f 72 26 72 43 ()}
        {Lisp-Entry "set-default-value" method #f 76 26 76 43 ("value")}
        {Lisp-Entry "get-default-value-name" method #f 80 26 80 48 ()}
        {Lisp-Entry "set-default-value-name" method #f 84 26 84 48 ("value")}
        {Lisp-Entry "get-used-defined-datatype" method #f 88 26 88 51 ()}
        {Lisp-Entry "get-datatype" method #f 92 26 92 38 ()}
        {Lisp-Entry "set-datatype" method #f 96 26 96 38 ("value")}
        {Lisp-Entry "get-type" method #f 100 26 100 34 ()}
        {Lisp-Entry "get-size" method #f 104 26 104 34 ()}
        {Lisp-Entry "set-size" method #f 108 26 108 34 ("size")}
        {Lisp-Entry "get-nullable?" method #f 112 26 112 39 ()}
        {Lisp-Entry "set-nullable?" method #f 116 26 116 39 ("value")}
        {Lisp-Entry "get-validation-rule" method #f 120 26 120 45 ()}
        {Lisp-Entry "set-validation-rule" method #f 124 26 124 45 ("value")}
        {Lisp-Entry "get-validation-text" method #f 128 26 128 45 ()}
        {Lisp-Entry "set-validation-text" method #f 132 26 132 45 ("value")}
        {Lisp-Entry "get-allow-zero-length?" method #f 136 26 136 48 ()}
        {Lisp-Entry "set-allow-zero-length?" method #f 140 26 140 48 ("value")}
        {Lisp-Entry "get-description" method #f 144 26 144 41 ()}
        {Lisp-Entry "set-description" method #f 148 26 148 41 ("value")}
        {Lisp-Entry "get-display-format" method #f 152 26 152 44 ()}
        {Lisp-Entry "set-display-format" method #f 156 26 156 44 ("value")}
        {Lisp-Entry "get-ordinal-position" method #f 160 26 160 46 ()}
        {Lisp-Entry "set-ordinal-position" method #f 164 26 164 46 ("value")}
        {Lisp-Entry "get-auto-increment?" method #f 168 26 168 45 ()}
        {Lisp-Entry "set-auto-increment?" method #f 172 26 172 45 ("value")}
        {Lisp-Entry "get-title" method #f 176 26 176 35 ()}
        {Lisp-Entry "get-scale" method #f 180 26 180 35 ()}
        {Lisp-Entry "set-scale" method #f 184 26 184 35 ("value")}
        {Lisp-Entry "get-precision" method #f 188 26 188 39 ()}
        {Lisp-Entry "set-precision" method #f 192 26 192 39 ("value")}
        {Lisp-Entry "get-fixed?" method #f 196 26 196 36 ()}
        {Lisp-Entry "get-order" method #f 200 26 200 35 ()}
        {Lisp-Entry "get-identity?" method #f 204 26 204 39 ()}
        {Lisp-Entry "set-identity?" method #f 208 26 208 39 ("value")}
        {Lisp-Entry "get-identity-replication?" method #f 212 26 212 51 ()}
        {Lisp-Entry "set-identity-replication?" method #f 216 26 216 51 ("value")}
        {Lisp-Entry "get-identity-seed" method #f 220 26 220 43 ("0")}
        {Lisp-Entry "set-identity-seed" method #f 224 26 224 43 ("value")}
        {Lisp-Entry "get-identity-increment" method #f 228 26 228 48 ("0")}
        {Lisp-Entry "set-identity-increment" method #f 232 26 232 48 ("value")}
        {Lisp-Entry "get-row-guid-col?" method #f 236 26 236 43 ()}
        {Lisp-Entry "get-computed?" method #f 240 26 240 39 ()}
        {Lisp-Entry "get-computed-text" method #f 244 26 244 43 ()}
        {Lisp-Entry "get-collation" method #f 248 26 248 39 ()}}}})
"Inventory-Constraint"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "inventory" "Inventory-Constraint.jazz"} 1288732032
    {Lisp-Entry "jazz.database.inventory.Inventory-Constraint" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "Inventory-Constraint" class #f 43 7 43 27 ("Object")
        {Lisp-Entry "inventory" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-inventory" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "parent" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-parent" accessor #f 47 25 47 33 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-handle" method #f 61 26 61 36 ()}
        {Lisp-Entry "get-title" method #f 65 26 65 35 ()}
        {Lisp-Entry "get-text" method #f 69 26 69 34 ()}
        {Lisp-Entry "set-text" method #f 73 26 73 34 ("value")}
        {Lisp-Entry "get-checked?" method #f 77 26 77 38 ()}
        {Lisp-Entry "set-checked?" method #f 81 26 81 38 ("value")}
        {Lisp-Entry "get-exclude-replication?" method #f 85 26 85 50 ()}
        {Lisp-Entry "set-exclude-replication?" method #f 89 26 89 50 ("value")}}}})
"Inventory-Index"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "inventory" "Inventory-Index.jazz"} 1288732032
    {Lisp-Entry "jazz.database.inventory.Inventory-Index" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Inventory-Index" class #f 43 7 43 22 ("Object")
        {Lisp-Entry "inventory" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-inventory" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "parent" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-parent" accessor #f 47 25 47 33 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-title" method #f 61 26 61 35 ()}
        {Lisp-Entry "get-unique?" method #f 65 26 65 37 ()}
        {Lisp-Entry "set-unique?" method #f 69 26 69 37 ("value")}
        {Lisp-Entry "get-required?" method #f 73 26 73 39 ()}
        {Lisp-Entry "get-ignore-nulls?" method #f 77 26 77 43 ()}
        {Lisp-Entry "get-fields" method #f 81 26 81 36 ()}
        {Lisp-Entry "get-fields/orders" method #f 85 26 85 43 ("get-order" "get-title" "list" "field" "lambda" "map" "get-fields" "fields" "with")}
        {Lisp-Entry "set-fields/orders" method #f 92 26 92 43 ("value")}
        {Lisp-Entry "get-ignore-duplicates?" method #f 96 26 96 48 ()}
        {Lisp-Entry "get-clustered?" method #f 100 26 100 40 ()}
        {Lisp-Entry "get-pad-index?" method #f 104 26 104 40 ()}
        {Lisp-Entry "get-recompute-statistics?" method #f 108 26 108 51 ()}
        {Lisp-Entry "get-fill-factor" method #f 112 26 112 41 ("0")}}}})
"Inventory-Primary-Key"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "inventory" "Inventory-Primary-Key.jazz"} 1288732032
    {Lisp-Entry "jazz.database.inventory.Inventory-Primary-Key" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "Inventory-Primary-Key" class #f 40 7 40 28 ("Object")
        {Lisp-Entry "inventory" slot #f 43 8 43 17 ()}
        {Lisp-Entry "get-inventory" accessor #f 43 25 43 33 ()}
        {Lisp-Entry "parent" slot #f 44 8 44 14 ()}
        {Lisp-Entry "get-parent" accessor #f 44 25 44 33 ()}
        {Lisp-Entry "initialize" method #f 47 20 47 30 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-title" method #f 58 26 58 35 ()}
        {Lisp-Entry "get-fields" method #f 62 26 62 36 ()}
        {Lisp-Entry "get-fields/orders" method #f 66 26 66 43 ("get-order" "get-title" "list" "field" "lambda" "map" "get-fields" "fields" "with")}
        {Lisp-Entry "get-clustered?" method #f 73 26 73 40 ()}
        {Lisp-Entry "get-fill-factor" method #f 77 26 77 41 ("0")}}}})
"Inventory-Procedure"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "inventory" "Inventory-Procedure.jazz"} 1288732032
    {Lisp-Entry "jazz.database.inventory.Inventory-Procedure" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Inventory-Procedure" class #f 43 7 43 26 ("Object")
        {Lisp-Entry "inventory" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-inventory" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "parent" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-parent" accessor #f 47 25 47 33 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-title" method #f 61 26 61 35 ()}
        {Lisp-Entry "get-text" method #f 65 26 65 34 ()}
        {Lisp-Entry "set-text" method #f 69 26 69 34 ("value")}}}})
"Inventory-Relation"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "inventory" "Inventory-Relation.jazz"} 1288732032
    {Lisp-Entry "jazz.database.inventory.Inventory-Relation" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Inventory-Relation" class #f 40 7 40 25 ("Object")
        {Lisp-Entry "inventory" slot #f 43 8 43 17 ()}
        {Lisp-Entry "get-inventory" accessor #f 43 25 43 33 ()}
        {Lisp-Entry "parent" slot #f 44 8 44 14 ()}
        {Lisp-Entry "get-parent" accessor #f 44 25 44 33 ()}
        {Lisp-Entry "initialize" method #f 47 20 47 30 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-title" method #f 58 26 58 35 ()}
        {Lisp-Entry "get-primary-table" method #f 62 26 62 43 ()}
        {Lisp-Entry "set-primary-table" method #f 66 26 66 43 ("value")}
        {Lisp-Entry "get-primary-field-names" method #f 70 26 70 49 ()}
        {Lisp-Entry "set-primary-field-names" method #f 74 26 74 49 ("value")}
        {Lisp-Entry "get-foreign-table" method #f 78 26 78 43 ()}
        {Lisp-Entry "set-foreign-table" method #f 82 26 82 43 ("value")}
        {Lisp-Entry "get-foreign-field-names" method #f 86 26 86 49 ()}
        {Lisp-Entry "set-foreign-field-names" method #f 90 26 90 49 ("value")}
        {Lisp-Entry "get-unique?" method #f 94 26 94 37 ()}
        {Lisp-Entry "set-unique?" method #f 98 26 98 37 ("value")}
        {Lisp-Entry "get-dont-enforce?" method #f 102 26 102 43 ()}
        {Lisp-Entry "get-inherited?" method #f 106 26 106 40 ()}
        {Lisp-Entry "get-update-cascade?" method #f 110 26 110 45 ()}
        {Lisp-Entry "set-update-cascade?" method #f 114 26 114 45 ("value")}
        {Lisp-Entry "get-delete-cascade?" method #f 118 26 118 45 ()}
        {Lisp-Entry "set-delete-cascade?" method #f 122 26 122 45 ("value")}
        {Lisp-Entry "get-left?" method #f 126 26 126 35 ()}
        {Lisp-Entry "set-left?" method #f 130 26 130 35 ("value")}
        {Lisp-Entry "get-right?" method #f 134 26 134 36 ()}
        {Lisp-Entry "set-right?" method #f 138 26 138 36 ("value")}
        {Lisp-Entry "get-checked?" method #f 142 26 142 38 ()}
        {Lisp-Entry "get-exclude-replication?" method #f 146 26 146 50 ()}}}})
"Inventory-Table"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "inventory" "Inventory-Table.jazz"} 1288732032
    {Lisp-Entry "jazz.database.inventory.Inventory-Table" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Inventory-Table" class #f 43 7 43 22 ("Object")
        {Lisp-Entry "inventory" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-inventory" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "parent" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-parent" accessor #f 47 25 47 33 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-owner" method #f 61 26 61 35 ()}
        {Lisp-Entry "set-owner" method #f 65 26 65 35 ("value")}
        {Lisp-Entry "get-name" method #f 69 26 69 34 ()}
        {Lisp-Entry "get-title" method #f 73 26 73 35 ()}
        {Lisp-Entry "get-linked?" method #f 77 26 77 37 ()}
        {Lisp-Entry "get-connect" method #f 81 26 81 37 ()}
        {Lisp-Entry "set-connect" method #f 85 26 85 37 ("value")}
        {Lisp-Entry "get-source-table-name" method #f 89 26 89 47 ()}
        {Lisp-Entry "set-source-table-name" method #f 93 26 93 47 ("value")}
        {Lisp-Entry "get-validation-rule" method #f 97 26 97 45 ()}
        {Lisp-Entry "set-validation-rule" method #f 101 26 101 45 ("value")}
        {Lisp-Entry "get-validation-text" method #f 105 26 105 45 ()}
        {Lisp-Entry "set-validation-text" method #f 109 26 109 45 ("value")}
        {Lisp-Entry "get-description" method #f 113 26 113 41 ()}
        {Lisp-Entry "set-description" method #f 117 26 117 41 ("value")}
        {Lisp-Entry "get-primary-key" method #f 126 26 126 41 ()}
        {Lisp-Entry "create-primary-key" method #f 130 26 130 44 ("fields/orders" "name")}
        {Lisp-Entry "remove-primary-key" method #f 134 26 134 44 ("name")}
        {Lisp-Entry "append-primary-key" method #f 138 26 138 44 ("primary-key")}
        {Lisp-Entry "get-columns" method #f 147 26 147 37 ()}
        {Lisp-Entry "get-column" method #f 151 26 151 36 ("name")}
        {Lisp-Entry "create-column" method #f 155 26 155 39 ("name")}
        {Lisp-Entry "append-column" method #f 159 26 159 39 ("column")}
        {Lisp-Entry "remove-column" method #f 163 26 163 39 ("name")}
        {Lisp-Entry "get-indexes" method #f 172 26 172 37 ()}
        {Lisp-Entry "get-index" method #f 176 26 176 35 ("name")}
        {Lisp-Entry "create-index" method #f 180 26 180 38 ("name")}
        {Lisp-Entry "append-index" method #f 184 26 184 38 ("index")}
        {Lisp-Entry "remove-index" method #f 188 26 188 38 ("name")}
        {Lisp-Entry "create-or-modify-trigger" method #f 197 26 197 50 ("append-trigger" "set-text" "create-trigger" "new-trigger" "remove-trigger" "when" "error?:" "get-trigger" "trigger" "with" "text" "name")}
        {Lisp-Entry "get-triggers" method #f 206 26 206 38 ()}
        {Lisp-Entry "get-trigger" method #f 210 26 210 37 ("rest" "name")}
        {Lisp-Entry "create-trigger" method #f 214 26 214 40 ("name")}
        {Lisp-Entry "append-trigger" method #f 218 26 218 40 ("trigger")}
        {Lisp-Entry "remove-trigger" method #f 222 26 222 40 ("name")}
        {Lisp-Entry "create-or-modify-constraint" method #f 231 26 231 53 ("set-checked?" "append-constraint" "set-exclude-replication?" "set-text" "create-constraint" "new-constraint" "remove-constraint" "when" "error?:" "get-constraint" "constraint" "with" "exclude-replication?" "checked?" "text" "name")}
        {Lisp-Entry "get-constraints" method #f 242 26 242 41 ()}
        {Lisp-Entry "get-constraint" method #f 246 26 246 40 ("rest" "name")}
        {Lisp-Entry "create-constraint" method #f 250 26 250 43 ("name")}
        {Lisp-Entry "append-constraint" method #f 254 26 254 43 ("constraint")}
        {Lisp-Entry "remove-constraint" method #f 258 26 258 43 ("name")}
        {Lisp-Entry "get-text-file-group" method #f 267 26 267 45 ()}
        {Lisp-Entry "set-text-file-group" method #f 271 26 271 45 ("value")}
        {Lisp-Entry "get-file-group" method #f 275 26 275 40 ()}
        {Lisp-Entry "set-file-group" method #f 279 26 279 40 ("value")}}}})
"Inventory-Trigger"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "inventory" "Inventory-Trigger.jazz"} 1288732032
    {Lisp-Entry "jazz.database.inventory.Inventory-Trigger" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Inventory-Trigger" class #f 43 7 43 24 ("Object")
        {Lisp-Entry "inventory" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-inventory" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "parent" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-parent" accessor #f 47 25 47 33 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-title" method #f 61 26 61 35 ()}
        {Lisp-Entry "get-text" method #f 65 26 65 34 ()}
        {Lisp-Entry "set-text" method #f 69 26 69 34 ("value")}}}})
"Inventory-Updater"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "inventory" "Inventory-Updater.jazz"} 1288732032
    {Lisp-Entry "jazz.database.inventory.Inventory-Updater" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Inventory-Updater" class #f 40 7 40 24 ("Object")}
      {Lisp-Entry "Inventory-Updater" class #f 46 7 46 24 ("initialize" "Object")
        {Lisp-Entry "connection" slot #f 49 8 49 18 ()}
        {Lisp-Entry "inventory" slot #f 50 8 50 17 ()}
        {Lisp-Entry "pending-properties" slot #f 51 8 51 26 ()}
        {Lisp-Entry "pending-deletes" slot #f 52 8 52 23 ()}
        {Lisp-Entry "pending-triggers/indexes" slot #f 53 8 53 32 ()}
        {Lisp-Entry "ugly-patch" slot #f 54 8 54 18 ()}
        {Lisp-Entry "initialize" method #f 57 11 57 21 ("get-inventory" "inventory~self" "connection~self" "set!" "nextmethod" "connection")}
        {Lisp-Entry "Actions" definition #f 68 14 68 21 ("no-action" "modify" "add" "right" "remove" "left")}
        {Lisp-Entry "update-inventory" method #f 75 18 75 34 ("reporter:" "title:" "ugly-patch" "close" "for-each" "process-pending-deletes" "process-pending-triggers/indexes" "process-pending-properties" "process-table-triggers" "SQLServer-Inventory" "is?" "when" "inventory" "process-children" "pending-triggers/indexes" "pending-deletes" "pending-properties" "set!" "lambda" "with-execution-context" "reporter" "delta")}
        {Lisp-Entry "process-children" method #f 94 11 94 27 ("8" "constraint" "7" "trigger" "6" "index" "5" "primary-key" "-1" "ordinal-position:" "get-property" "third" "or" "4" "column" "3" "relation" "2" "procedure" "1" "view" "0" "list" "table" "get-kind" "case" "get-name" "name" "let" "x" "key:" "get-children" "<" "sort" "process-entity" "create-sql" "SQLServer-Inventory" "is?" "if" "object" "lambda" "for-each" "reporter" "parent-proxy" "entity")}
        {Lisp-Entry "create-sql" method #f 118 11 118 21 ("view" "generate-sql-procedure" "procedure" "generate-sql-table" "table" "when" "has-differences?:" "get-property" "has-differences?" "let" "else" "generate-sql-relation" "relation" "get-kind" "case" "lambda" "with-continue" "reporter" "parent-proxy" "object")}
        {Lisp-Entry "process-object" method #f 132 11 132 25 ("modify" "right" "case" "left" "'left" "eq?" "unless" "if" "difference:" "get-property" "action" "let" "drop-proc" "create-proc" "recreate-table?" "object")}
        {Lisp-Entry "find-action-on-process-property" method #f 144 11 144 42 ("left" "'left" "modify" "'modify" "eq?" "right" "'right" "/=" "and" "when" "if" "recreate-table?" "new-value" "old-value" "action")}
        {Lisp-Entry "drop-object" method #f 157 11 157 22 ("execute-sql-commit-preserve" "tie" "script" "get-kind" "object-kind" "get-name" "object-name" "let*" "object")}
        {Lisp-Entry "generate-sql-header-script" method #f 164 11 164 37 ("tie")}
        {Lisp-Entry "Table-Not-Found" constant #f 180 12 180 27 ("#x80045510")}
        {Lisp-Entry "set-table-tempo-name" method #f 184 11 184 31 ("Table-Not-Found" "Item" "cotry" "format" "set!" "increase!" "while" "inventory" "get-database" "get-Tables" "tables" "with" "looking" "table-tempo-name" "-1" "suffix" "get-name" "table-name" "let" "object")}
        {Lisp-Entry "generate-sql-table" method #f 197 11 197 29 ("modify" "drop-table" "left" "right" "case" "generate-sql-partial-table" "generate-sql-full-table" "regenerate-full-table?" "null?" "if" "difference:" "get-property" "action" "let" "reporter" "table")}
        {Lisp-Entry "regenerate-full-table?" method #f 211 11 211 33 ("left" "right" "modify" "case" "modify-column?" "null?" "if" "difference:" "get-property" "action" "let" "table")}
        {Lisp-Entry "modify-column?" method #f 221 11 221 25 ("-1" "key:" "get-columns" "<" "sort" "third" "second" "+" "/=" "null?" "when" "else" "decrease!" "left" "increase!" "right" "case" "nullable?:" "datatype:" "modify" "'modify" "ordinal-position:" "first" "=" "or" "difference:" "get-property" "action" "column" "lambda" "some?" "0" "column-pos" "let" "table")}
        {Lisp-Entry "generate-sql-full-table" method #f 242 11 242 34 ("generate-sql-access-right" "process-triggers" "process-constraints" "process-indexes" "process-primary-key" "generate-sql-identity-end" "recreate-table?:" "set-property" "undo-create-table" "set!" "process-copy-data" "generate-sql-identity-start" "check-default-values" "process-default-values" "process-description-columns" "process-description-table" "begin" "unwind-protect" "temp-table-created" "let" "generate-sql-create-table" "drop-default-values" "drop-table-relation" "generate-sql-header-script" "execute-sql-commit-preserve" "user-message" "get-columns" "identity?:" "third" "column" "lambda" "some?" "identity-column?" "if" "table-current-name" "set-table-tempo-name" "not" "when" "table-tempo-name" "right" "'right" "=" "new-table?" "difference:" "get-property" "action" "get-name" "table-name" "let*" "reporter" "table")}
        {Lisp-Entry "undo-create-table" method #f 283 11 283 28 ("execute-sql-commit-preserve" "tie" "script" "let" "table-name")}
        {Lisp-Entry "generate-sql-partial-table" method #f 288 11 288 37 ("process-triggers" "process-constraints" "process-indexes" "process-primary-key" "process-default-values" "process-description-columns" "process-description-table" "user-message" "when" "get-name" "table-name" "let" "reporter" "table")}
        {Lisp-Entry "create-fields-list" method #f 302 11 302 29 ("0" ">=" "tie" "identity-replication?:" "id-repl" "identity-increment:" "id-inc" "identity-seed:" "id-seed" "identity?:" "identity-string" "nullable?:" "if" "nullable-string" "ordinal-position:" "ordinal-position" "get-datatype" "third" "get-native" "datatype" "get-name" "field-name" "let" "left" "'left" "difference:" "get-property" "/=" "when" "field" "lambda" "collect" "list")}
        {Lisp-Entry "generate-sql-create-table" method #f 324 11 324 36 ("tie" "def-table" "-1" "ordinal-position:" "get-property" "third" "or" "column" "lambda" "key:" "get-columns" "<" "sort" "create-fields-list" "join" "fields-list" "let*" "table-name" "object")}
        {Lisp-Entry "get-added-columns-without-default-value" method #f 334 11 334 50 ("get-columns" "get-defaultable?" "=" "or" "not" "second" "null?" "and" "datatype:" "new-datatype" "nullable?:" "new-nullable?" "first" "new-default-value-action" "default-value:" "third" "new-default-value" "ordinal-position:" "get-property" "ordinal-position" "let" "column" "lambda" "collect-if" "table")}
        {Lisp-Entry "process-copy-data" method #f 351 11 351 28 ("execute-sql-commit-preserve" "script-drop-rename-table" "tie" "script-copy" "get-native" "format" "not" "and" "need-default?" "modify" "'modify" "action-for-property" "eq?" "must-convert?" "safe-name" "let" "else" "if" "cond" "read-only" "'read-only" "=" "read-only?" "indirect?:" "default-value:" "get-native-with-value" "default-value" "datatype:" "datatype" "nullable?:" "nullable?" "object-old-property" "null?" "new-column?" "new-values" "get-name" "encapsulate-name" "map" "new-names" "key:" "get-columns" "ordinal-position:" "object-new-property" "not-null?" "column" "lambda" "collect-if" "<" "sort" "new-columns" "let*" "old-table" "new-table" "object")}
        {Lisp-Entry "drop-table" method #f 396 11 396 21 ("drop-object" "drop-default-values" "drop-table-relation" "table")}
        {Lisp-Entry "process-description-table" method #f 402 11 402 36 ("generate-sql-update-description-table" "modify" "generate-sql-drop-description-table" "left" "generate-sql-add-description-table" "right" "case" "execute-sql-commit-preserve" "when" "find-action-on-process-property" "set!" "description:" "get-property" "new-value" "old-value" "action" "bind" "recreate-table?" "table-name" "table")}
        {Lisp-Entry "generate-sql-add-description-table" method #f 413 11 413 45 ("tie" "script" "substitute-alist" "user" "let*" "description" "table-name")}
        {Lisp-Entry "generate-sql-drop-description-table" method #f 422 11 422 46 ("tie" "script" "user" "let*" "table-name")}
        {Lisp-Entry "generate-sql-update-description-table" method #f 428 11 428 48 ("tie" "script" "substitute-alist" "user" "let*" "description" "table-name")}
        {Lisp-Entry "generate-sql-drop-columns" method #f 443 11 443 36 ("tie" "script" "list" "join" "columns-list" "let*" "table-name" "object")}
        {Lisp-Entry "generate-sql-add-default-value" method #f 450 11 450 41 ("tie" "script" "let" "default-value" "constraint-name" "column-name" "table-name")}
        {Lisp-Entry "process-default-values" method #f 456 11 456 33 ("get-columns" "script-add-default-value" "script-drop-default-value" "modify" "generate-sql-drop-constraint" "find-constraint-name" "old-constraint-name" "left" "format" "title:" "generate-sql-add-default-value" "execute-sql-commit-preserve" "with-execution-node" "right" "case" "tie" "new-constraint-name" "column-name" "let*" "when" "find-action-on-process-property" "set!" "default-value:" "get-property" "new-value" "old-value" "action" "bind" "column" "lambda" "for-each" "get-name" "constraint-table-name" "let" "recreate-table?" "table-name" "table")}
        {Lisp-Entry "check-default-values" method #f 487 11 487 31 ("get-columns" "error" "find-default-value" "/=" "modify" "right" "case" "tie" "new-constraint-name" "column-name" "let*" "when" "find-action-on-process-property" "set!" "default-value:" "get-property" "new-value" "old-value" "action" "bind" "column" "lambda" "for-each" "get-name" "constraint-table-name" "let" "table-name" "table")}
        {Lisp-Entry "drop-default-values" method #f 501 11 501 30 ("get-columns" "execute-sql-commit-preserve" "generate-sql-drop-constraint" "script-drop-constraint" "generate-sql-header-script" "script-header" "find-constraint-name" "constraint-name" "column-name" "let*" "default-value:" "get-property" "second" "when" "column" "lambda" "for-each" "get-name" "table-name" "let" "table")}
        {Lisp-Entry "find-constraint-name" method #f 514 11 514 31 ("get-Name" "get-DRIDefault" "default" "column" "get-Columns" "columns" "Item" "table" "inventory" "get-database" "get-Tables" "tables" "with" "column-name" "table-name")}
        {Lisp-Entry "find-default-value" method #f 523 11 523 29 ("0" "connection" "load-value" "tie" "script" "let" "constraint-name")}
        {Lisp-Entry "generate-sql-identity-start" method #f 528 11 528 38 ("tie" "script" "let" "table-name")}
        {Lisp-Entry "generate-sql-identity-end" method #f 533 11 533 36 ("tie" "script" "let" "table-name")}
        {Lisp-Entry "process-description-columns" method #f 538 11 538 38 ("get-columns" "generate-sql-update-description-column" "modify" "generate-sql-drop-description-column" "left" "generate-sql-add-description-column" "right" "case" "execute-sql-commit-preserve" "when" "get-name" "column-name" "let" "find-action-on-process-property" "set!" "description:" "get-property" "new-value" "old-value" "action" "bind" "column" "lambda" "for-each" "recreate-table?" "table-name" "table")}
        {Lisp-Entry "generate-sql-add-description-column" method #f 552 11 552 46 ("tie" "script" "substitute-alist" "user" "let*" "description" "column-name" "table-name")}
        {Lisp-Entry "generate-sql-drop-description-column" method #f 561 11 561 47 ("tie" "script" "user" "let*" "column-name" "table-name")}
        {Lisp-Entry "generate-sql-update-description-column" method #f 567 11 567 49 ("tie" "script" "substitute-alist" "user" "let*" "description" "column-name" "table-name")}
        {Lisp-Entry "process-primary-key" method #f 581 11 581 30 ("drop-primary-key" "add-primary-key" "process-object" "when" "get-primary-key" "primary-key" "let" "recreate-table?" "table")}
        {Lisp-Entry "add-primary-key" method #f 587 11 587 26 ("execute-sql-commit-preserve" "generate-sql-primary-key" "script-create-primary-key" "generate-sql-header-script" "script-header" "let" "object")}
        {Lisp-Entry "drop-primary-key" method #f 594 11 594 27 ("execute-sql-commit-preserve" "drop-table-relation" "generate-sql-drop-constraint" "script-drop-constraint" "generate-sql-header-script" "script-header" "table-name" "get-parent" "table" "get-name" "constraint-name" "let*" "primary-key")}
        {Lisp-Entry "generate-sql-primary-key" method #f 605 11 605 35 ("script" "tie" "0" ">" "fill-factor-text" "fill-factor:" "fill-factor" "clustered?:" "if" "clustered" "fields/orders:" "get-property" "third" "create-fields/orders-list" "fields/orders" "pk-name" "get-parent" "get-name" "table-name" "let*" "primary-key")}
        {Lisp-Entry "create-fields/orders-list" method #f 620 11 620 36 ("tie" "ascending" "'ascending" "=" "if" "order-string" "second" "order" "first" "encapsulate-name" "field" "let*" "field/order" "lambda" "map" "join" "list")}
        {Lisp-Entry "process-indexes" method #f 636 11 636 26 ("get-indexes" "drop-index" "add-index" "process-object" "index" "lambda" "for-each" "recreate-table?" "object")}
        {Lisp-Entry "add-index" method #f 642 11 642 20 ("execute-sql-commit-preserve" "generate-sql-index" "script-create-index" "generate-sql-header-script" "script-header" "let" "index")}
        {Lisp-Entry "drop-index" method #f 649 11 649 21 ("execute-sql-commit-preserve" "tie" "script" "get-parent" "table-name" "get-name" "index-name" "let*" "index")}
        {Lisp-Entry "generate-sql-index" method #f 656 11 656 29 ("script" "options" "list" "remove-false" "options-list" "recompute-statistics?:" "statistics-norecompute" "ignore-duplicates?:" "ignore-dup-key" "tie" "0" ">" "fill-factor-text" "fill-factor:" "fill-factor" "pad-index?:" "pad-index" "clustered?:" "clustered" "unique?:" "if" "unique" "fields/orders:" "get-property" "third" "create-fields/orders-list" "fields/orders" "index-name" "get-parent" "get-name" "table-name" "let*" "index")}
        {Lisp-Entry "process-triggers" method #f 685 11 685 27 ("get-triggers" "drop-object" "create-procedure" "process-object" "with-continue" "trigger" "lambda" "for-each" "recreate-table?" "object")}
        {Lisp-Entry "process-table-triggers" method #f 693 11 693 33 ("get-tables" "process-triggers" "left" "'left" "=" "unless" "difference:" "action" "recreate-table?:" "get-property" "recreate-table?" "let" "table" "lambda" "for-each" "objects")}
        {Lisp-Entry "process-constraints" method #f 707 11 707 30 ("get-constraints" "drop-constraint" "create-constraint" "process-object" "constraint" "lambda" "for-each" "recreate-table?" "table")}
        {Lisp-Entry "create-constraint" method #f 713 11 713 28 ("execute-sql-commit-preserve" "script" "tie" "checked?:" "not" "checked-text" "exclude-replication?:" "replication-text" "if" "check-text" "check?" "text:" "get-property" "third" "text" "constraint-name" "get-parent" "get-name" "table-name" "let*" "constraint")}
        {Lisp-Entry "drop-constraint" method #f 730 11 730 26 ("execute-sql-commit-preserve" "tie" "script" "constraint-name" "get-parent" "get-name" "table-name" "let*" "constraint")}
        {Lisp-Entry "generate-sql-drop-constraint" method #f 738 11 738 39 ("tie" "script" "let" "constraint-name" "table-name")}
        {Lisp-Entry "generate-sql-relation" method #f 749 11 749 32 ("drop-relation" "create-relation" "process-object" "recreate-table?:" "get-property" "recreate-table?" "let" "relation")}
        {Lisp-Entry "create-relation" method #f 754 11 754 26 ("execute-sql-commit-preserve" "script" "tie" "checked?:" "not" "checked-text" "check-text" "check?" "exclude-replication?:" "replication-text" "delete-cascade?:" "on-delete-cascade" "update-cascade?:" "get-property" "if" "on-update-cascade" "get-foreign-columns" "foreign-fields" "get-foreign-table" "foreign-table" "get-primary-columns" "primary-fields" "get-primary-table" "third" "primary-table" "get-name" "relation-name" "let*" "relation")}
        {Lisp-Entry "drop-relation" method #f 781 11 781 24 ("execute-sql-commit-preserve" "tie" "script" "get-foreign-table" "second" "foreign-table" "get-name" "relation-name" "let*" "relation")}
        {Lisp-Entry "drop-table-relation" method #f 789 11 789 30 ("get-parent" "get-relations" "set-property" "drop-relation" "=" "or" "when" "get-primary-table" "primary-table" "get-foreign-table" "second" "foreign-table" "recreate-table?:" "get-property" "unless" "relation" "lambda" "for-each" "get-name" "table-name" "let" "table")}
        {Lisp-Entry "generate-sql-procedure" method #f 807 11 807 33 ("modify" "drop-object" "left" "create-procedure" "right" "case" "user-message" "when" "get-name" "name" "difference:" "get-property" "action" "let" "reporter" "object")}
        {Lisp-Entry "create-procedure" method #f 819 11 819 27 ("connection" "execute" "text:" "get-property" "third" "script-create-procedure" "generate-sql-header-script" "script-header" "let" "object")}
        {Lisp-Entry "generate-sql-access-right" method #f 832 11 832 36 ("tie" "script" "user" "let*")}
        {Lisp-Entry "object-new-property" method #f 849 11 849 30 ("get-property" "third" "property" "object")}
        {Lisp-Entry "object-old-property" method #f 853 11 853 30 ("get-property" "second" "property" "object")}
        {Lisp-Entry "action-for-property" method #f 857 11 857 30 ("get-property" "first" "property" "object")}
        {Lisp-Entry "encapsulate-name" method #f 861 11 861 27 ("format" "name")}
        {Lisp-Entry "execute-sql-commit-preserve" method #f 865 11 865 38 ("connection" "execute" "commit" "tie" "let*" "script")}
        {Lisp-Entry "process-entity" method #f 878 11 878 25 ("process-modify" "no-action" "modify" "process-delete" "remove" "process-new" "add" "case" "get-name" "name" "get-kind" "kind" "Actions" "difference:" "get-property" "assq" "cdr" "action" "let" "lambda" "with-continue" "reporter" "parent-proxy" "object")}
        {Lisp-Entry "process-new" method #f 890 11 890 22 ("format" "title:" "process-proxy" "cons" "ugly-patch" "set!" "new-proxy" "proxy" "let" "lambda" "with-execution-node" "reporter" "name" "kind" "parent-proxy" "object")}
        {Lisp-Entry "process-delete" method #f 899 11 899 25 ("format" "title:" "process-proxy" "lambda" "with-execution-node" "reporter" "name" "kind" "parent-proxy" "object")}
        {Lisp-Entry "process-modify" method #f 906 11 906 25 ("format" "title:" "process-proxy" "cons" "ugly-patch" "set!" "get-proxy" "proxy" "let" "lambda" "with-execution-node" "reporter" "name" "kind" "parent-proxy" "object")}
        {Lisp-Entry "Recreate" definition #f 915 14 915 22 ("procedure" "relation" "view" "constraint" "trigger" "index" "primary-key")}
        {Lisp-Entry "process-proxy" method #f 919 11 919 24 ("add-pending-trigger/index" "index" "trigger" "complete-append" "SQLServer-Inventory-Relation" "unless" "process-children" "modify-proxy" "cons" "ugly-patch" "new-proxy" "set!" "delete-proxy" "linked?:" "table" "'table" "Recreate" "memq?" "has-differences?:" "and" "modify" "'modify" "no-action" "'no-action" "or" "process-pending-triggers/indexes" "relation" "'relation" "eq?" "list" "add-pending-delete" "remove" "'remove" "if" "user-message" "when" "add" "'add" "=" "new?" "Data-Entity" "is?" "entity?" "get-name" "name" "get-kind" "kind" "Actions" "difference:" "get-property" "assq" "cdr" "action" "let*" "reporter" "proxy" "parent-proxy" "object")}
        {Lisp-Entry "new-proxy" method #f 957 11 957 20 ("error" "else" "create-procedure" "procedure" "create-relation-complete" "foreign-columns:" "foreign-fields" "foreign-table:" "foreign-table" "primary-columns:" "primary-fields" "primary-table:" "primary-table" "create-relation" "SQLServer-Inventory" "is-not?" "if" "relation" "create-view" "view" "create-constraint" "constraint" "create-trigger" "trigger" "create-index" "index" "create-column" "column" "create-primary-key" "fields/orders:" "get-property" "third" "fields/orders" "let" "primary-key" "create-table" "table" "case" "object" "name" "kind" "parent")}
        {Lisp-Entry "get-proxy" method #f 983 11 983 20 ("error" "else" "get-procedure" "procedure" "get-relation" "relation" "get-view" "view" "get-constraint" "constraint" "get-trigger" "trigger" "get-index" "index" "get-column" "column" "get-primary-key" "primary-key" "get-table" "table" "case" "name" "kind" "parent")}
        {Lisp-Entry "modify-proxy" method #f 1002 11 1002 23 ("property-names" "modify-proxy-property" "list" "add-pending-property" "allow-zero-length?" "display-format" "description" "memq?" "if" "modify" "'modify" "=" "or" "when" "new-value" "old-value" "action" "bind" "get-property" "composite" "symbol->keyword" "property" "let*" "symbol" "lambda" "for-each" "force?" "kind" "physical" "object")}
        {Lisp-Entry "modify-proxy-property" method #f 1014 11 1014 32 ("format" "title:" "error" "else" "modify-relation-property" "relation" "modify-procedure-property" "procedure" "modify-view-property" "view" "modify-constraint-property" "constraint" "modify-trigger-property" "trigger" "modify-index-property" "index" "modify-column-property" "column" "modify-primary-key-property" "primary-key" "modify-table-property" "table" "case" "lambda" "with-execution-node" "force?" "value" "property" "kind" "physical" "object")}
        {Lisp-Entry "modify-table-property" method #f 1031 11 1031 32 ("error" "else" "set-validation-text" "validation-text" "set-validation-rule" "validation-rule" "set-description" "description" "set-source-table-name" "source-table-name" "set-connect" "connect" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-primary-key-property" method #f 1041 11 1041 38 ("error" "else" "fill-factor" "clustered?" "fields/orders" "case" "value" "property" "physical")}
        {Lisp-Entry "create-field-by-sql" method #f 1047 11 1047 30 ("connection" "execute" "tie" "request" "format" "if" "size-label" "has-size?" "sizeable?" "get-size" "size" "get-name" "type-name" "get-nullable?" "nullable?" "field-name" "get-table" "get-title" "table-name" "let*" "value" "physical")}
        {Lisp-Entry "modify-column-property" method #f 1064 11 1064 33 ("error" "set-identity-seed" "identity-seed" "set-identity-increment" "identity-increment" "identity-replication?" "set-identity?" "identity?" "set-auto-increment?" "auto-increment?" "set-ordinal-position" "ordinal-position" "set-display-format" "display-format" "set-allow-zero-length?" "allow-zero-length?" "set-validation-text" "validation-text" "set-validation-rule" "validation-rule" "set-nullable?" "get-size" "set-size" "begin" "=" "get-name" "new-type" "get-type" "type" "get-nullable?" "nullable?" "let" "else" "create-field-by-sql" "Access-Datatype" "typecase" "set-datatype" "if" "datatype" "set-description" "description" "set-default-value" "default-value" "case" "inventory" "column-supports-property?" "when" "force?" "value" "property" "physical" "object")}
        {Lisp-Entry "modify-index-property" method #f 1099 11 1099 32 ("error" "else" "exclude-replication?" "checked?" "fill-factor" "recompute-statistics?" "pad-index?" "clustered?" "ignore-duplicates?" "set-unique?" "SQLServer-Inventory-Index" "is?" "unless" "unique?" "set-fields/orders" "fields/orders" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-trigger-property" method #f 1107 11 1107 34 ("error" "else" "set-text" "text" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-constraint-property" method #f 1113 11 1113 37 ("error" "else" "checked?" "exclude-replication?" "text" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-procedure-property" method #f 1119 11 1119 36 ("error" "else" "set-text" "text" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-view-property" method #f 1125 11 1125 31 ("error" "else" "set-text" "text" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-relation-property" method #f 1131 11 1131 35 ("error" "else" "checked?" "exclude-replication?" "set-update-cascade?" "update-cascade?" "set-delete-cascade?" "delete-cascade?" "set-unique?" "unique?" "set-left?" "left?" "set-right?" "right?" "set-foreign-table" "foreign-table" "set-foreign-field-names" "foreign-columns" "set-primary-table" "primary-table" "set-primary-field-names" "primary-columns" "case" "SQLServer-Inventory-Relation" "is?" "unless" "value" "property" "physical")}
        {Lisp-Entry "complete-append" method #f 1152 11 1152 26 ("error" "else" "append-procedure" "procedure" "append-relation" "relation" "append-view" "view" "append-constraint" "constraint" "append-trigger" "trigger" "append-index" "index" "append-column" "column" "append-primary-key" "primary-key" "append-table" "table" "case" "lambda" "with-continue" "child" "parent" "kind")}
        {Lisp-Entry "delete-proxy" method #f 1173 11 1173 23 ("error" "else" "remove-procedure" "procedure" "foreign-table:" "get-property" "second" "foreign-table" "let" "remove-relation" "SQLServer-Inventory" "is-not?" "if" "relation" "remove-view" "view" "remove-constraint" "constraint" "remove-trigger" "trigger" "remove-index" "index" "remove-column" "column" "remove-primary-key" "primary-key" "remove-table" "table" "case" "object" "child-name" "parent" "kind")}
        {Lisp-Entry "add-pending-property" method #f 1195 11 1195 31 ("cons" "pending-properties" "set!" "info")}
        {Lisp-Entry "add-pending-delete" method #f 1199 11 1199 29 ("cons" "pending-deletes" "set!" "info")}
        {Lisp-Entry "add-pending-trigger/index" method #f 1203 11 1203 36 ("cons" "pending-triggers/indexes" "set!" "info")}
        {Lisp-Entry "process-pending-properties" method #f 1207 11 1207 37 ("pending-properties" "modify-proxy-property" "with-continue" "new-value" "symbol" "kind" "physical" "object" "bind" "element" "lambda" "for-each")}
        {Lisp-Entry "Entities-Delete" definition #f 1216 14 1216 29 ("column" "primary-key" "index" "constraint" "trigger" "table" "view" "procedure" "relation")}
        {Lisp-Entry "process-pending-deletes" method #f 1220 11 1220 34 ("first" "Entities-Delete" "find" "lst" "key:" "pending-deletes" "<" "sort" "delete-proxy" "with-continue" "object" "name" "physical" "kind" "bind" "element" "lambda" "for-each")}
        {Lisp-Entry "process-pending-triggers/indexes" method #f 1230 11 1230 43 ("set!" "pending-triggers/indexes" "complete-append" "subentity" "entity" "kind" "bind" "element" "lambda" "for-each")}}}})
"Inventory-View"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "inventory" "Inventory-View.jazz"} 1288732032
    {Lisp-Entry "jazz.database.inventory.Inventory-View" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Inventory-View" class #f 43 7 43 21 ("Object")
        {Lisp-Entry "inventory" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-inventory" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "parent" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-parent" accessor #f 47 25 47 33 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-title" method #f 61 26 61 35 ()}
        {Lisp-Entry "get-text" method #f 65 26 65 34 ()}
        {Lisp-Entry "set-text" method #f 69 26 69 34 ("value")}}}})
"Logical-Datatype-Row"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "designer" "Logical-Datatype-Row.jazz"} 1288732032
    {Lisp-Entry "jazz.database.designer.Logical-Datatype-Row" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Logical-Datatype-Row" class #f 44 20 44 40 ("initialize" "Combo-Row")
        {Lisp-Entry "domains" property #f 47 12 47 19 ()}
        {Lisp-Entry "get-domains" accessor #f 47 45 47 53 ()}
        {Lisp-Entry "set-domains" accessor #f 47 45 47 53 ()}
        {Lisp-Entry "initialize" method #f 55 20 55 30 ("setup" "domains~self" "set!" "nextmethod" "apply" "others" "domains" "bind-keywords" "rest")}
        {Lisp-Entry "setup" method #f 62 11 62 16 ("get-children" "get-name" "list" "domain" "lambda" "map" "set-choices" "domains")}
        {Lisp-Entry "present" method #f 73 20 73 27 ("present" "null?" "if" "type")}
        {Lisp-Entry "editor-class" method #f 84 20 84 32 ("Logical-Datatype-Row-Editor")}
        {Lisp-Entry "get-edited-value" method #f 88 20 88 36 ("Logical-Datatype" "new" "size" "name" "receive" "when" "parse-content" "parsed" "editor" "get-content" "string" "let*")}
        {Lisp-Entry "set-edited-value" method #f 96 20 96 36 ("present" "editor" "set-content" "value")}
        {Lisp-Entry "read-content" definition #f 100 15 100 27 ("separator:" "substitute" "parse-strings" "content")}
        {Lisp-Entry "parse-content" method #f 104 11 104 24 ("message:" "Parse-Error" "new" "signal" "else" "cadr" "parse-integer" "2" "car" "values" "1" "0" "length" "case" "read-content" "content" "let" "string")}}
      {Lisp-Entry "Logical-Datatype-Row-Editor" class #f 118 7 118 34 ("Combo-Row-Editor")
        {Lisp-Entry "content-change" method #f 121 20 121 34 ("nextmethod" "popup" "'popup" "eq?" "unless" "origin")}
        {Lisp-Entry "combo-choice" method #f 126 20 126 32 ()}
        {Lisp-Entry "get-entry" method #f 130 20 130 29 ("car" "when" "get-content" "value-row" "read-content" "content" "let")}
        {Lisp-Entry "set-entry" method #f 136 20 136 29 ("cdr" "cons" "join" "set-content" "get-content" "value-row" "read-content" "actual" "let" "entry")}}}})
"Printer-Connection"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "connection" "Printer-Connection.jazz"} 1288732032
    {Lisp-Entry "jazz.database.connection.Printer-Connection" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Printer-Connection" class #f 43 20 43 38 ("Connection")
        {Lisp-Entry "printer" slot #f 46 8 46 15 ()}
        {Lisp-Entry "get-printer" accessor #f 46 23 46 31 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("printer" "set!" "prt")}
        {Lisp-Entry "load-request" method #f 58 20 58 32 ("printer" "format" "rest" "command")}
        {Lisp-Entry "load-multirequest" method #f 62 20 62 37 ("printer" "format" "rest" "command")}
        {Lisp-Entry "load-rows" method #f 66 20 66 29 ("printer" "format" "command")}
        {Lisp-Entry "load-row" method #f 70 20 70 28 ("printer" "format" "command")}
        {Lisp-Entry "execute" method #f 79 20 79 27 ("printer" "format" "command")}
        {Lisp-Entry "comment" method #f 83 20 83 27 ("printer" "format" "apply" "parameters" "string")}}}})
"Provider"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "provider" "Provider.jazz"} 1288732032
    {Lisp-Entry "jazz.database.provider.Provider" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Provider" class #f 44 7 44 15 ("Object")
        {Lisp-Entry "external-name" method #f 47 26 47 39 ()}
        {Lisp-Entry "get-datatype" method #f 56 26 56 38 ()}
        {Lisp-Entry "supports-multirequests?" method #f 65 26 65 49 ()}
        {Lisp-Entry "format-value" method #f 74 26 74 38 ("->string" "else" "format-datetime" "Date" "is?" "format-boolean" "boolean?" "format-string" "string?" "format-variable" "symbol?" "cond" "value")}
        {Lisp-Entry "format-variable" method #f 83 29 83 44 ("->string" "variable")}
        {Lisp-Entry "format-string" method #f 87 29 87 42 ("format" "error" "find-in" "if" "string")}
        {Lisp-Entry "format-boolean" method #f 93 29 93 43 ("if" "value")}
        {Lisp-Entry "format-date" method #f 97 29 97 40 ("date-separator:" "present-date-day" "date")}
        {Lisp-Entry "format-datetime" method #f 101 29 101 44 ("date-separator:" "present" "date")}
        {Lisp-Entry "present" method #f 110 26 110 33 ()}
        {Lisp-Entry "browser-class" method #f 119 26 119 39 ()}
        {Lisp-Entry "new-updater" method #f 128 26 128 37 ("Inventory-Updater" "new" "connection")}}}})
"Recordset"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "connection" "Recordset.jazz"} 1288732032
    {Lisp-Entry "jazz.database.connection.Recordset" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Recordset" class #f 44 7 44 16 ("Object")
        {Lisp-Entry "initialize" method #f 47 20 47 30 ("destroy-mandatory" "open" "apply" "when" "setup-recordset" "nextmethod" "rest" "command")}
        {Lisp-Entry "setup-recordset" method #f 55 19 55 34 ("initargs")}
        {Lisp-Entry "destroy" method #f 59 20 59 27 ("nextmethod" "destroy-recordset")}
        {Lisp-Entry "destroy-recordset" method #f 64 19 64 36 ()}
        {Lisp-Entry "opened?" method #f 73 26 73 33 ()}
        {Lisp-Entry "open" method #f 77 19 77 23 ("rest" "command")}
        {Lisp-Entry "get-state" method #f 86 26 86 35 ()}
        {Lisp-Entry "new-recordset-metadata" method #f 95 26 95 48 ()}
        {Lisp-Entry "get-field-type" method #f 99 26 99 40 ("field" "metadata")}
        {Lisp-Entry "get-field-value" method #f 103 26 103 41 ("field" "metadata")}
        {Lisp-Entry "safe-field-value" method #f 107 26 107 42 ("get-field-value" "field" "metadata")}
        {Lisp-Entry "next-recordset!" method #f 116 26 116 41 ()}
        {Lisp-Entry "get-columns" method #f 125 26 125 37 ("0" "naturals" "get-column" "n" "lambda" "map" "get-count" "count" "let" "new-recordset-metadata" "metadata" "with")}
        {Lisp-Entry "get-rows" method #f 133 26 133 34 ("missing?" "get-output" "rows" "increase!" "Data-Row" "not" "put" "safe-field-value" "field" "map" "values" "set!" "begin" "=" "neq?" "and" "if" "<=" "eq?" "or" "when" "lambda" "iterate-records" "has-more?" "0" "count" "List-Factory" "new" "fact" "let" "get-fields" "fields" "new-recordset-metadata" "metadata" "with" "data-class" "data-class:" "max-load" "max-load:" "table")}
        {Lisp-Entry "move-first" method #f 164 26 164 36 ()}
        {Lisp-Entry "move-last" method #f 168 26 168 35 ()}
        {Lisp-Entry "move-next" method #f 172 26 172 35 ()}
        {Lisp-Entry "move-previous" method #f 176 26 176 39 ()}
        {Lisp-Entry "at-bof?" method #f 180 26 180 33 ()}
        {Lisp-Entry "at-eof?" method #f 184 26 184 33 ()}
        {Lisp-Entry "iterate-records" method #f 188 26 188 41 ("proc")}
        {Lisp-Entry "for-each-record" method #f 192 26 192 41 ("lambda" "iterate-records" "proc")}
        {Lisp-Entry "create-table" method #f 204 18 204 30 ("load-table" "Data-Table" "new" "table" "let" "max-load" "max-load:" "name" "name:")}
        {Lisp-Entry "load-table" method #f 210 21 210 31 ("set-missing?" "set-rows" "set-columns" "get-rows" "missing?" "rows" "receive" "get-columns" "columns" "let" "data-class" "data-class:" "max-load" "max-load:" "table")}}}})
"Recordset-Metadata"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "connection" "Recordset-Metadata.jazz"} 1288732032
    {Lisp-Entry "jazz.database.connection.Recordset-Metadata" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Recordset-Metadata" class #f 44 7 44 25 ("Object")
        {Lisp-Entry "get-column" method #f 52 18 52 28 ("get-field-precision" "width:" "get-field-size" "100" "min" "get-field-type" "Datatype" "datatype:" "get-field-name" "name:" "Data-Column" "new" "get-field" "field" "with" "field-name")}
        {Lisp-Entry "get-fields" method #f 68 18 68 28 ("get-field" "collect" "get-count" "below" "0" "from" "n" "for" "loop")}
        {Lisp-Entry "get-count" method #f 73 26 73 35 ()}
        {Lisp-Entry "get-field" method #f 77 26 77 35 ("field-name")}
        {Lisp-Entry "get-field-value" method #f 81 26 81 41 ("field-name")}
        {Lisp-Entry "get-field-name" method #f 85 26 85 40 ("field")}
        {Lisp-Entry "get-field-type" method #f 89 26 89 40 ("field")}
        {Lisp-Entry "get-field-size" method #f 93 26 93 40 ("field")}
        {Lisp-Entry "get-field-precision" method #f 97 26 97 45 ("field")}}}})
"Request"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "connection" "Request.jazz"} 1288732032
    {Lisp-Entry "jazz.database.connection.Request" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Request" class #f 44 7 44 14 ("Object")
        {Lisp-Entry "connection" slot #f 47 8 47 18 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("connection" "set!" "nextmethod" "con")}
        {Lisp-Entry "new-recordset" method #f 55 19 55 32 ("rest" "request")}
        {Lisp-Entry "load-request" method #f 59 18 59 30 ("load-table" "set-name" "when" "request:" "Data-Table" "new" "or" "let" "closed" "'closed" "get-state" "eq?" "unless" "new-recordset" "recordset" "with" "data-class" "data-class:" "max-load" "max-load:" "name" "name:" "table" "table:" "request")}
        {Lisp-Entry "load-multirequest" method #f 69 18 69 35 ("get-output" "next-recordset!" "put" "data-class:" "cdr" "set!" "car" "data-class" "load-table" "null?" "request:" "Data-Table" "table" "open" "'open" "get-state" "eq?" "when" "opened?" "while" "List-Factory" "new" "tables" "let" "new-recordset" "recordset" "with" "load-request" "list" "connection" "supports-multirequests?" "not" "if" "data-classes" "data-classes:" "max-load" "max-load:" "request")}
        {Lisp-Entry "load-rows" method #f 88 18 88 27 ("values" "get-rows" "missing?" "rows" "receive" "get-columns" "columns" "let" "new-recordset" "recordset" "with" "max-load" "max-load:" "table" "request")}
        {Lisp-Entry "execute" method #f 100 26 100 33 ("command")}}}})
"Schema-Browser"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "view" "Schema-Browser.jazz"} 1288732032
    {Lisp-Entry "jazz.database.view.Schema-Browser" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Schema-Browser" class #f 50 20 50 34 ("on-return-press" "return-press-handler:" "1" "paragraph-spacing:" "2" "top-padding:" "left-padding:" "show-unfocused-selection?:" "accepts-returns?:" "editable?:" "selectable?:" "text" "vscroll?:" "hscroll?:" "center" "scroller" "on-browse" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "22" "browse" "label" "0" "4" "Medium" "Color" "background:" "flow" "north" "location:" "21" "120" "top" "border" "content" "name:" "fill" "layout-type:" "entry" "style:" "edge" "border-type:" "24" "142" "Dimension" "size:" "initialize" "Border-View")
        {Lisp-Entry "empty-text" property #f 53 12 53 22 ()}
        {Lisp-Entry "get-empty-text" accessor #f 53 47 53 55 ()}
        {Lisp-Entry "set-empty-text" accessor #f 53 47 53 55 ()}
        {Lisp-Entry "source" slot #f 56 8 56 14 ()}
        {Lisp-Entry "on-browse" method #f 76 11 76 20 ("get-source" "source:" "Schema-Chooser" "get-modal" "set-source" "evt")}
        {Lisp-Entry "on-return-press" method #f 80 20 80 35 ("self" "invoke-handler" "return-press-handler" "when" "evt")}
        {Lisp-Entry "get-text" method #f 90 18 90 26 ("text" "'text" "locate")}
        {Lisp-Entry "inner?" method #f 99 20 99 26 ("children" "memq?" "view")}
        {Lisp-Entry "draw-children" method #f 108 20 108 33 ("-" "line-to" "22" "2" "move-to" "1" "set-line-width" "Outline-Border" "name:" "Color" "set-color" "get-width" "width" "let" "nextmethod" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "nodes" "surface")}
        {Lisp-Entry "get-schema" method #f 123 18 123 28 ("get-data-schema" "when" "get-source" "source" "let" "reporter" "reporter:")}
        {Lisp-Entry "get-source" method #f 134 18 134 28 ("source")}
        {Lisp-Entry "set-source" method #f 138 18 138 28 ("source-changed" "get-text" "set-text" "set!" "source-changing" "present-detailed" "when" "source" "present-source" "define" "value")}
        {Lisp-Entry "source-changing" method #f 149 29 149 44 ("source")}
        {Lisp-Entry "source-changed" method #f 153 29 153 43 ("reload" "'reload" "locate" "set-enabled?" "source")}}
      {Lisp-Entry "Background-Font" definition #f 162 12 162 27 ("Text" "name:" "Font")}
      {Lisp-Entry "Schema-Text-View" class #f 166 7 166 23 ("Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Plain-Formatted-Text-View")
        {Lisp-Entry "get-scroll-context" method #f 173 20 173 38 ("0" "cons")}
        {Lisp-Entry "draw-children" method #f 177 20 177 33 ("nextmethod" "text-empty?" "if" "get-v" "get-h" "draw-text" "Dark" "name:" "Color" "set-text-color" "get-display-size" "center" "pos" "get-text-extent" "extent" "creator" "get-empty-text" "or" "localize" "title" "let*" "Background-Font" "set-font" "draw-empty-schema" "define" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "nodes" "surface")}}}})
"Schema-Chooser"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "view" "Schema-Chooser.jazz"} 1288732032
    {Lisp-Entry "jazz.database.view.Schema-Chooser" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Schema-Chooser" class #f 43 20 43 34 ("explicit" "accessors" "initialize" "source" "property" "Chooser")}}})
"Systype"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "provider" "Systype.jazz"} 1288732032
    {Lisp-Entry "jazz.database.provider.Systype" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Systype" class #f 43 7 43 14 ("Object")
        {Lisp-Entry "name" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-name" accessor #f 46 29 46 37 ()}
        {Lisp-Entry "size" slot #f 47 8 47 12 ()}
        {Lisp-Entry "get-size" accessor #f 47 29 47 37 ()}
        {Lisp-Entry "precision" slot #f 48 8 48 17 ()}
        {Lisp-Entry "get-precision" accessor #f 48 29 48 37 ()}
        {Lisp-Entry "scale" slot #f 49 8 49 13 ()}
        {Lisp-Entry "get-scale" accessor #f 49 29 49 37 ()}
        {Lisp-Entry "default-value" slot #f 50 8 50 21 ()}
        {Lisp-Entry "get-default-value" accessor #f 50 29 50 37 ()}
        {Lisp-Entry "construct-literal" method #f 54 16 54 33 ("self" "new" "read-only" "'read-only" "=" "String" "is?" "null?" "integer?" "or" "assert" "default-value" "scale" "precision" "size" "name" "context")}
        {Lisp-Entry "initialize" method #f 62 20 62 30 ("default-value~self" "scale~self" "precision~self" "size~self" "name~self" "set!" "nextmethod" "default-value" "scale" "precision" "size" "name")}
        {Lisp-Entry "compare-object" method #f 71 20 71 34 (":not-equal" "else" ":equal" "get-default-value" "default-value" "get-scale" "scale" "get-precision" "precision" "get-size" "size" "get-name" "name" "=" "and" ":incompatible" "Systype" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 84 20 84 25 ("default-value" "scale" "precision" "size" "name" "self" "class-of" "category-name" "format" "readably" "printer")}
        {Lisp-Entry "get-sizeable?" method #f 99 18 99 31 ("size" "null?")}
        {Lisp-Entry "get-fixed?" method #f 103 18 103 28 ("size" "not-null?")}
        {Lisp-Entry "get-precisionable?" method #f 107 18 107 36 ("precision" "not-null?")}
        {Lisp-Entry "get-scalable?" method #f 111 18 111 31 ("scale" "not-null?")}
        {Lisp-Entry "get-defaultable?" method #f 115 18 115 34 ("default-value" "not-null?")}
        {Lisp-Entry "present" method #f 124 18 124 25 ("name" "format")}}}})
"_database"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "_database.jazz"} 1289589416
    {Lisp-Entry "jazz.database" module #f 37 8 37 21 ("jazz")
      {Lisp-Entry "Providers" definition #f 48 12 48 21 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-provider" definition #f 52 20 52 37 ("Providers" "table-set!" "external-name" "name" "let" "provider")}
      {Lisp-Entry "get-provider" definition #f 57 20 57 32 ("error" "Providers" "table-ref" "or" "name")}
      {Lisp-Entry "get-providers" definition #f 62 20 62 33 ("Providers" "gather")}
      {Lisp-Entry "Datatypes" definition #f 71 12 71 21 ("SQLServer-Datatype" "Oracle-Datatype" "Access-Datatype")}
      {Lisp-Entry "Datatype-Classes" definition #f 74 12 74 28 ()}
      {Lisp-Entry "get-datatypes" definition #f 78 20 78 33 ("Datatypes" "load" "map" "set!" "Datatype-Classes" "unless")}
      {Lisp-Entry "request-data-source" definition #f 90 33 90 52 ("process-modal" "external-name" "set-provider" "when" "get-guest" "manager" "let" "host-visible?:" "jazz.database.Data-Source-Chooser" "new-dialog" "dialog" "process?" "receive" "provider" "provider:")}}})
"autoload"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "autoload.jazz"} 1288732032
    {Lisp-Entry "jazz.database.autoload" module #f 37 18 37 40 ("jazz")}})
"install"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "install.scm"} 1288732032
    {Lisp-Entry "jazz.database.install" unit #f 37 6 37 27 ()
      {Lisp-Entry "Systype" define ("literal") 40 21 40 28 ("jazz.database.literals.construct-systype")}}})
"literals"
 ({Lisp-File-Entry {File jazz.database "src" "jazz" "database" "literals.jazz"} 1288732032
    {Lisp-Entry "jazz.database.literals" module #f 37 8 37 30 ("jazz")
      {Lisp-Entry "construct-systype" definition #f 48 21 48 38 ("Systype" "new" "default-value" "scale" "precision" "size" "name")}}})
