"Scheme-Explorer"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "scheme" "text" "Scheme-Explorer.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.editor.scheme.text.Scheme-Explorer" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "require" anonymous #f #f 40 1 40 8 ("jazz.editor.scheme.forms")}
      {Lisp-Entry "import" anonymous #f #f 42 1 42 7 ("jazz.editor.lisp")}
      {Lisp-Entry "proclaim" anonymous #f #f 45 1 45 9 ("optimizations" "warn")}
      {Lisp-Entry "Scheme-Explorer" class () #f 48 7 48 22 ("Lisp-Explorer")
        {Lisp-Entry "expression-comment?" method (override) #f 51 20 51 39 ("nextmethod" "get-range" "get-range~" "string=?" "or" "get-end" "get-end~" "get-start" "get-start~" "get-range-string" "range" "get-string" "define" "mark")}
        {Lisp-Entry "declaration-name?" method (override) #f 64 20 64 37 ("nextmethod" "define-type-of-symbol?" "or" "name")}
        {Lisp-Entry "find-expression-syntax" method (override) #f 69 20 69 42 ("define-type-of-" "nextmethod" "define-type-of-symbol?" "if" "symbol")}
        {Lisp-Entry "define-type-of-symbol?" definition () #f 75 15 75 37 ("symbol->string" "starts-with?" "symbol?" "and" "symbol")}
        {Lisp-Entry "find-named-walker" method (override) #f 85 20 85 37 ("nextmethod" "else" "walk-c-define" ":c-define" "walk-c-initialize" ":c-initialize" "walk-c-declare" ":c-declare" "walk-unknown" ":unknown" "walk-native" ":native" "walk-type" ":type" "walk-define-class" ":define-class" "walk-macro" ":macro" "walk-define-syntax" ":define-syntax" "walk-define-macro" ":define-macro" "walk-generic/specific" ":generic/specific" "walk-define" ":define" "walk-declare" ":declare" "walk-keyword" ":keyword" "walk-data" ":data" "walk-export" ":export" "walk-import" ":import" "walk-require" ":require" "walk-script" ":script" "walk-module" ":module" "walk-unit" ":unit" "walk-block" ":block" "walk-configuration" ":configuration" "walk-digest" ":digest" "walk-manifest" ":manifest" "walk-package" ":package" "walk-repository" ":repository" "walk-begin" ":begin" "walk-cond-expand" ":cond-expand" "case" "name")}
        {Lisp-Entry "walk-modifiers" method () #f 119 11 119 25 ("reverse!" "cons" "set!" "start" "memq?" "find-marked-symbol" "symbol" "forward-constituent" "text-constituent?" "and" "when" "0" "char-forward" "c0" "set-start" "forward-whites" "iterate" "result" "end" "copy" "old" "let" "modifiers" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-keywords" method () #f 138 11 138 24 ("set!" "code" "walk-expression" "forward-expr" "start" "memq?" "find-marked-symbol" "marked-keyword" "forward-constituent" "text-constituent?" "and" "when" "0" "char-forward" "c0" "set-start" "forward-whites" "iterate" "end" "copy" "old" "let" "keywords" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-begin" method () #f 156 11 156 21 ("walk-declarations" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-cond-expand" method () #f 160 11 160 27 ("exit-list" "walk-declarations" "feature" "code" "end" "start" "get-kind" "eq?" "when" "forward-expr" "set!" "if" "enter-list" "enter?" "not" "while" "done?" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-repository" method () #f 173 11 173 26 ("repository" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-package" method () #f 176 11 176 23 ("package" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-manifest" method () #f 179 11 179 24 ("manifest" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-digest" method () #f 182 11 182 22 ("digest" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-configuration" method () #f 185 11 185 29 ("configuration" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-block" method () #f 188 11 188 21 ("block" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-unit" method () #f 191 11 191 20 ("unit" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-module" method () #f 194 11 194 22 ("module" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-script" method () #f 197 11 197 22 ("walk-declarations" "get-modifiers" "get-modifiers~" "walk-modifiers" "find-marked-symbol" "symbol-documented?" "get-marked" "script" "set!" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-namespace" method () #f 206 11 206 25 ("walk-declarations" "get-keywords" "get-keywords~" "walk-keywords" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "kind" "eq?" "forward-expr" "and" "when" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "namespace-kind" "context")}
        {Lisp-Entry "walk-require" method () #f 217 11 217 23 ("walk-invoices" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-import" method () #f 220 11 220 22 ("walk-invoices" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-export" method () #f 223 11 223 22 ("walk-invoices" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-invoices" method () #f 227 11 227 24 ("walk-anonymous" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-anonymous" method () #f 231 11 231 25 ("code" "walk-expressions" "get-marked" "anonymous" "set!" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-data" method () #f 239 11 239 20 ("module" "walk-namespace" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-keyword" method () #f 243 11 243 23 ("end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-declare" method () #f 247 11 247 23 ("end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-define-type-of" method () #f 251 11 251 30 ("define" "get-expression-syntax" "walk-define" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-define" method () #f 255 11 255 22 ("code" "walk-expressions" "exit-list" "walk-parameters" "get-marked" "define" "set!" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-generic/specific" method () #f 272 11 272 32 ("walk-expressions" "walk-parameters" "exit-list" "tag" "code" "list" "generic/specific" "set!" "typename" "get-marked" "name" "get-end" "get-start" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "forward-whites" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-macro" method () #f 294 11 294 21 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "macro" "set!" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-define-macro" method () #f 307 11 307 28 ("exit-list" "code" "walk-expressions" "get-marked" "define-macro" "set!" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-define-syntax" method () #f 324 11 324 29 ("exit-list" "code" "walk-expressions" "get-marked" "define-macro" "set!" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-define-class" method () #f 342 11 342 28 ("walk-expressions" "get-marked" "define-class" "set!" "kind" "eq?" "forward-expr" "and" "when" "forward-whites" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-native" method () #f 352 11 352 22 ("walk-expressions" "symbol-documented?" "native" "set!" "get-marked" "name" "kind" "eq?" "forward-expr" "and" "when" "forward-whites" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "string-length" "1" "+" "substring" "not" "if" "reversed?:" "find" "pos" "let" "str" "parse-identifier" "define" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-type" method () #f 370 11 370 20 ("walk-expressions" "get-marked" "type" "set!" "kind" "eq?" "forward-expr" "and" "when" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-declare" method () #f 379 11 379 25 ("walk-expressions" "end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-initialize" method () #f 384 11 384 28 ("walk-expressions" "end" "start" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "walk-c-define" method () #f 389 11 389 24 ("walk-expressions" "exit-list" "find-marked-symbol" "symbol-documented?" "get-marked" "c-definition" "set!" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "get-modifiers" "get-modifiers~" "walk-modifiers" "modifiers" "end" "start" "entry" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "symbol-documentation" method (package) #f 405 19 405 39 ("get-definition" "get-definition~" "and" "when" "doc" "symbol")}
        {Lisp-Entry "symbol-documented?" method (package) #f 410 19 410 37 ("symbol-documentation" "doc" "symbol")}}}})
"Scheme-Parser"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "scheme" "parser" "Scheme-Parser.jazz"} 231466230. jazz
    {Lisp-Entry "jazz.editor.scheme.parser.Scheme-Parser" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.editor.scheme" "jazz.editor.lisp")}
      {Lisp-Entry "Scheme-Parser" class () #f 44 7 44 20 ("Lisp-Parser")
        {Lisp-Entry "text-view-class" method (override) #f 52 20 52 35 ("Scheme-Text-View")}
        {Lisp-Entry "explorer-class" method (override) #f 56 20 56 34 ("Scheme-Explorer" "file")}}}})
"Scheme-Syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "scheme" "syntax" "Scheme-Syntax.jazz"} 231466230. jazz
    {Lisp-Entry "jazz.editor.scheme.syntax.Scheme-Syntax" module (protected) #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.system" "jazz.editor.lisp" "jazz.editor.scheme")}
      {Lisp-Entry "Scheme-Syntax" class () #f 45 7 45 20 ("Lisp-Syntax")
        {Lisp-Entry "preferences" method (override) #f 53 20 53 31 ("scheme-text" "documents" "get-preferences")}
        {Lisp-Entry "default-extension" method (override) #f 62 20 62 37 ()}
        {Lisp-Entry "extensions" method (override) #f 66 20 66 30 ()}
        {Lisp-Entry "translate-key" method (override) #f 75 20 75 33 ("translate-lisp-key" "scheme-text" "documents" "get-preferences" "get-translate-keys?" "get-translate-keys?~" "not" "if" "key")}
        {Lisp-Entry "get-constituent-test" method (override) #f 86 20 86 40 ("scheme-constituent?")}
        {Lisp-Entry "explorer-class" method (override) #f 95 20 95 34 ("Scheme-Explorer")}
        {Lisp-Entry "get-readtable" method (override) #f 104 20 104 33 ("scheme-readtable")}
        {Lisp-Entry "declaration-style" method (override) #f 113 20 113 37 ("Declaration" "documented?")}}}})
"Scheme-Text-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "scheme" "text" "Scheme-Text-Actions.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.scheme.text.Scheme-Text-Actions" module (protected) #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Scheme-Text-Actions" class () #f 43 7 43 26 ("Actions")}}})
"Scheme-Text-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "scheme" "text" "Scheme-Text-Preferences.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.scheme.text.Scheme-Text-Preferences" module (protected) #f 37 18 37 65 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.editor.lisp")}
      {Lisp-Entry "Scheme-Text-Preferences" class () #f 45 7 45 30 ("Lisp-Text-Preferences")
        {Lisp-Entry "form" anonymous #f #f 48 3 48 7 ("completions:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) #f 79 25 79 45 ("Scheme-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () #f 88 11 88 17 ()
        {Lisp-Entry "import" anonymous #f #f 91 1 91 7 ("jazz.designer")}
        {Lisp-Entry "Scheme-Text-Preferences-Descriptor" class () #f 94 7 94 41 ("Document-Preferences-Descriptor")
          {Lisp-Entry "form" anonymous #f #f 97 3 97 7 ("match-action" "translate-keys?" "keyword-style" "declaration-style" "expr-comment-style" "comment-style" "title-style" "completions" "categorized:" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Scheme-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "scheme" "text" "Scheme-Text-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.scheme.text.Scheme-Text-View" module (protected) #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.editor.scheme" "jazz.editor.lisp")}
      {Lisp-Entry "Scheme-Text-View" class () #f 49 7 49 23 ("Lisp-Text-View")
        {Lisp-Entry "form" anonymous #f #f 52 3 52 7 ("tooltip?:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) #f 56 25 56 38 ("scheme-text" "rest")}
        {Lisp-Entry "preferences" method (override) #f 60 20 60 31 ("scheme-text" "documents" "get-preferences")}
        {Lisp-Entry "new-syntax" method (override) #f 64 20 64 30 ("model" "Scheme-Syntax" "new")}
        {Lisp-Entry "focus-actions" method (override) #f 73 20 73 33 ("nextmethod" "scheme-text" "find-actions" "cons")}
        {Lisp-Entry "get-context-menu" method (override) #f 83 20 83 36 ("Scheme-Text-Menu" "new")}
        {Lisp-Entry "prepare-expressions" method (override) #f 92 20 92 39 ("scheme" "list" "get-col" "get-col~" "col" "get-start" "get-start~" "get-line" "get-line~" "line" "get-string" "str" "get-locat-container" "container" "let" "range")}}
      {Lisp-Entry "Scheme-Text-Menu" class () #f 105 7 105 23 ("Context-Menu")
        {Lisp-Entry "form" anonymous #f #f 108 3 108 7 ("Format-Menu" "<Format-Menu>" "Column-Menu" "<Column-Menu>" "paste" "copy" "view" "french:" "english:" "Locales" "cut" "edit-references" "edit-definitions" "Separator-Item" "<Separator-Item>" "code-text" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "evaluate" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"_scheme"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "scheme" "_scheme.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.editor.scheme" module () #f 37 8 37 26 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("jazz.editor.scheme.autoload")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "scheme" "autoload.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.editor.scheme.autoload" module (protected) #f 37 18 37 45 ("jazz")
      {Lisp-Entry "export" anonymous #f #f 40 1 40 7 ("Scheme-Text-View" "jazz.editor.scheme.text.Scheme-Text-View" "Scheme-Text-Preferences" "jazz.editor.scheme.text.Scheme-Text-Preferences" "Scheme-Text-Actions" "jazz.editor.scheme.text.Scheme-Text-Actions" "Scheme-Explorer" "jazz.editor.scheme.text.Scheme-Explorer" "Scheme-Syntax" "jazz.editor.scheme.syntax.Scheme-Syntax" "Scheme-Parser" "autoload" "jazz.editor.scheme.parser.Scheme-Parser")}}})
"forms"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "scheme" "forms.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.scheme.forms" module () #f 37 8 37 32 ("jazz")
      {Lisp-Entry "import" anonymous #f #f 40 1 40 7 ("jazz.editor.lisp")}
      {Lisp-Entry "repository" define #f ("expression") 48 19 48 29 (":repository" "walk:" "1" "tabulate:" "repository" "dialect:")}
      {Lisp-Entry "package" define #f ("expression") 59 19 59 26 (":package" "walk:" "1" "tabulate:" "package" "dialect:")}
      {Lisp-Entry "root" define #f ("expression") 65 19 65 23 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "library" define #f ("expression") 69 19 69 26 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "install" define #f ("expression") 73 19 73 26 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "binary?" define #f ("expression") 77 19 77 26 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "char-encoding" define #f ("expression") 81 19 81 32 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "project" define #f ("expression") 85 19 85 26 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "products" define #f ("expression") 89 19 89 27 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "profiles" define #f ("expression") 93 19 93 27 (":keyword" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "manifest" define #f ("expression") 103 19 103 27 (":manifest" "walk:" "1" "tabulate:" "manifest" "dialect:")}
      {Lisp-Entry "digest" define #f ("expression") 114 19 114 25 (":digest" "walk:" "0" "tabulate:" "digest" "dialect:")}
      {Lisp-Entry "configuration" define #f ("expression") 125 19 125 32 (":configuration" "walk:" "1" "tabulate:" "configuration" "dialect:")}
      {Lisp-Entry "block" define #f ("expression") 136 19 136 24 (":block" "walk:" "-1" "tabulate:" "declaration?:" "namespace?:" "scheme" "dialect:")}
      {Lisp-Entry "unit" define #f ("expression") 149 19 149 23 (":unit" "walk:" "-1" "tabulate:" "public" "protected" "modifiers:" "declaration?:" "namespace?:" "scheme" "dialect:")}
      {Lisp-Entry "module" define #f ("expression") 163 19 163 25 (":module" "walk:" "-1" "tabulate:" "public" "protected" "modifiers:" "declaration?:" "namespace?:" "scheme" "dialect:")}
      {Lisp-Entry "script" define #f ("expression") 172 19 172 25 (":script" "walk:" "-1" "tabulate:" "modifiers:" "anonymous?:" "declaration?:" "namespace?:" "scheme" "dialect:")}
      {Lisp-Entry "require" define #f ("expression") 182 19 182 26 (":require" "walk:" "anonymous?:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "import" define #f ("expression") 188 19 188 25 (":import" "walk:" "anonymous?:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "export" define #f ("expression") 194 19 194 25 (":export" "walk:" "anonymous?:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "data" define #f ("expression") 201 19 201 23 (":data" "walk:" "-1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "define" define #f ("expression") 212 19 212 25 (":define" "walk:" "1" "tabulate:" "inner?:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-macro" define #f ("expression") 219 19 219 31 (":define-macro" "walk:" "1" "tabulate:" "inner?:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-syntax" define #f ("expression") 226 19 226 32 (":define-syntax" "walk:" "1" "tabulate:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "modifiers:" "inner?:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "syntax-rules" define #f ("expression") 234 19 234 31 ("1" "tabulate:")}
      {Lisp-Entry "native" define #f ("expression") 243 19 243 25 ("name-mangler:" ":native" "walk:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "modifiers:" "declaration?:")}
      {Lisp-Entry "native-syntax" define #f ("expression") 249 19 249 32 ("name-mangler:" ":native" "walk:" "uptodate" "undocumented" "deprecated" "public" "package" "protected" "private" "modifiers:" "declaration?:")}
      {Lisp-Entry "begin" define #f ("expression") 261 19 261 24 (":begin" "walk:" "0" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "call/cc" define #f ("expression") 266 19 266 26 ("0" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "case" define #f ("expression") 270 19 270 23 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "cond-expand" define #f ("expression") 274 19 274 30 (":cond-expand" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "do" define #f ("expression") 278 19 278 21 ("2" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "if" define #f ("expression") 282 19 282 21 ("2" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "lambda" define #f ("expression") 286 19 286 25 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "let" define #f ("expression") 290 19 290 22 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "let*" define #f ("expression") 294 19 294 23 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "letrec" define #f ("expression") 298 19 298 25 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "let-syntax" define #f ("expression") 302 19 302 29 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "letrec-syntax" define #f ("expression") 306 19 306 32 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "let-syntax" define #f ("expression") 310 19 310 29 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "letrec-syntax" define #f ("expression") 314 19 314 32 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "parameterize" define #f ("expression") 318 19 318 31 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "receive" define #f ("expression") 322 19 322 26 ("2" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "c-define" define #f ("expression") 332 19 332 27 (":c-define" "walk:" "5" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "c-define-type" define #f ("expression") 338 19 338 32 (":type" "walk:" "gambit" "dialect:")}
      {Lisp-Entry "c-lambda" define #f ("expression") 342 19 342 27 (":type" "walk:" "1" "tabulate:" "gambit" "dialect:")}
      {Lisp-Entry "declare" define #f ("expression") 347 19 347 26 (":declare" "walk:" "gambit" "dialect:")}
      {Lisp-Entry "define-check-type" define #f ("expression") 351 19 351 36 (":define" "walk:" "2" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-fail-check-type" define #f ("expression") 357 19 357 41 (":define" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-library-type" define #f ("expression") 363 19 363 38 (":define" "walk:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-library-type-of-exception" define #f ("expression") 368 19 368 51 (":define" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-type-of-" define #f ("expression") 374 19 374 34 (":define" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-prim" define #f ("expression") 380 19 380 30 (":define" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-runtime-macro" define #f ("expression") 386 19 386 39 (":define-macro" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-runtime-syntax" define #f ("expression") 392 19 392 40 (":define-macro" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "define-type" define #f ("expression") 398 19 398 30 (":define" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "##define-macro" define #f ("expression") 404 19 404 33 (":define-macro" "walk:" "1" "tabulate:" "declaration?:" "gambit" "dialect:")}
      {Lisp-Entry "##include" define #f ("expression") 410 19 410 28 (":keyword" "walk:" "gambit" "dialect:")}
      {Lisp-Entry "##core#lambda" define #f ("expression") 420 19 420 32 ("1" "tabulate:" "chicken" "dialect:")}
      {Lisp-Entry "define" define #f ("expression") 430 19 430 30 (":define" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-check-macro" define #f ("expression") 436 19 436 42 ("name-mangler:" ":define-macro" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-class" define #f ("expression") 443 19 443 36 ("name-mangler:" ":define-class" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-class-runtime" define #f ("expression") 449 19 449 44 ("name-mangler:" ":define-class" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-feature" define #f ("expression") 455 19 455 38 (":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-generic" define #f ("expression") 460 19 460 38 (":generic/specific" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-global" define #f ("expression") 465 19 465 37 ("name-mangler:" ":define-macro" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-literal" define #f ("expression") 471 19 471 38 ("name-mangler:" ":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-literal-walker" define #f ("expression") 477 19 477 45 ("name-mangler:" ":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-macro" define #f ("expression") 483 19 483 36 ("name-mangler:" ":define-macro" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-method" define #f ("expression") 490 19 490 37 (":generic/specific" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-option" define #f ("expression") 496 19 496 37 ("name-mangler:" ":define-macro" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-remote" define #f ("expression") 503 19 503 37 (":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-setting" define #f ("expression") 508 19 508 38 ("name-mangler:" ":define-macro" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-special" define #f ("expression") 515 19 515 38 (":define-macro" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-specific" define #f ("expression") 520 19 520 39 (":generic/specific" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-syntax" define #f ("expression") 525 19 525 37 ("name-mangler:" ":define-macro" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-variable" define #f ("expression") 532 19 532 39 ("name-mangler:" ":define-macro" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-variable-override" define #f ("expression") 539 19 539 48 ("name-mangler:" ":define-macro" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-virtual" define #f ("expression") 546 19 546 38 ("signature-mangler:" ":generic/specific" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-virtual-runtime" define #f ("expression") 552 19 552 46 ("signature-mangler:" ":generic/specific" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-virtual-syntax" define #f ("expression") 558 19 558 45 (":generic/specific" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-dialect" define #f ("expression") 563 19 563 38 ("name-mangler:" ":define" "walk:" "1" "tabulate:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-walker-special" define #f ("expression") 570 19 570 45 ("name-mangler:" ":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-walker-syntax" define #f ("expression") 576 19 576 44 ("name-mangler:" ":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "define-walker-macro" define #f ("expression") 582 19 582 43 ("name-mangler:" ":define" "walk:" "declaration?:" "scheme" "dialect:")}
      {Lisp-Entry "instantiate" define #f ("expression") 594 19 594 30 (":define-macro" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "specialize" define #f ("expression") 598 19 598 29 (":define-macro" "walk:" "scheme" "dialect:")}
      {Lisp-Entry "template" define #f ("expression") 602 19 602 27 (":define-macro" "walk:" "1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%assert" define #f ("expression") 607 19 607 27 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%assertion" define #f ("expression") 611 19 611 30 ("2" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%core-assert" define #f ("expression") 615 19 615 32 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%core-assertion" define #f ("expression") 619 19 619 35 ("2" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%debug-assert" define #f ("expression") 623 19 623 33 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%debug-assertion" define #f ("expression") 627 19 627 36 ("2" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%force-uniqueness" define #f ("expression") 631 19 631 37 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "%%when" define #f ("expression") 635 19 635 25 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "iterate-table" define #f ("expression") 639 19 639 37 ("1" "tabulate:" "scheme" "dialect:")}
      {Lisp-Entry "iterate-table-safe" define #f ("expression") 643 19 643 42 ("1" "tabulate:" "scheme" "dialect:")}}})
