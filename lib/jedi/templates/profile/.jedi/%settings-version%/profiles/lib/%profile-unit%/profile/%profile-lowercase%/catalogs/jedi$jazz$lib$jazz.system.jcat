"Application"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "application" "Application.jazz"} 240458554. jazz
    {Lisp-Entry "jazz.system.application.Application" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("time" "jazz.ui.workspace" "jazz.ui.window" "jazz.ui.view" "jazz.ui.skin" "jazz.ui.search" "jazz.ui.picker" "jazz.ui.dialog" "jazz.ui.clipboard" "jazz.ui" "jazz.system.process" "jazz.system.application" "jazz.system" "jazz.runtime" "jazz.profile" "jazz.platform" "jazz.locale" "jazz.library.template" "jazz.library.listener" "jazz.library.component" "jazz.library" "jazz.jrm" "jazz.jml" "jazz.io" "jazz.graphic" "jazz.designer" "jazz.debuggee")}
      {Lisp-Entry "Application" class #f 69 7 69 18 ("History-Manager" "new" "self" "eq?" "test:" "make-table" "initialize" "Save-Environment-Listener" "Event-Consumer" "History-Provider" "Context-Provider" "Process")
        {Lisp-Entry "toplevel" slot #f 72 8 72 16 ()}
        {Lisp-Entry "focus-listeners" slot #f 73 8 73 23 ()}
        {Lisp-Entry "application-listeners" slot #f 74 8 74 29 ()}
        {Lisp-Entry "selected-owner" slot #f 75 8 75 22 ()}
        {Lisp-Entry "get-selected-owner" accessor #f 75 77 75 85 ()}
        {Lisp-Entry "selected" slot #f 76 8 76 16 ()}
        {Lisp-Entry "selected-listeners" slot #f 77 8 77 26 ()}
        {Lisp-Entry "event-consumer" slot #f 78 8 78 22 ()}
        {Lisp-Entry "history-manager" slot #f 79 8 79 23 ()}
        {Lisp-Entry "active?" slot #f 80 8 80 15 ()}
        {Lisp-Entry "get-active?" accessor #f 80 77 80 85 ()}
        {Lisp-Entry "application-actions" slot #f 81 8 81 27 ()}
        {Lisp-Entry "get-application-actions" accessor #f 81 77 81 85 ()}
        {Lisp-Entry "profile-actions" slot #f 82 8 82 23 ()}
        {Lisp-Entry "get-profile-actions" accessor #f 82 77 82 85 ()}
        {Lisp-Entry "guest-actions" slot #f 83 8 83 21 ()}
        {Lisp-Entry "get-guest-actions" accessor #f 83 77 83 85 ()}
        {Lisp-Entry "focus-actions" slot #f 84 8 84 21 ()}
        {Lisp-Entry "get-focus-actions" accessor #f 84 77 84 85 ()}
        {Lisp-Entry "bindings-designer" slot #f 85 8 85 25 ()}
        {Lisp-Entry "get-bindings-designer" accessor #f 85 77 85 85 ()}
        {Lisp-Entry "skins-designer" slot #f 86 8 86 22 ()}
        {Lisp-Entry "get-skins-designer" accessor #f 86 77 86 85 ()}
        {Lisp-Entry "workspaces-designer" slot #f 87 8 87 27 ()}
        {Lisp-Entry "get-workspaces-designer" accessor #f 87 77 87 85 ()}
        {Lisp-Entry "shortcut-table" slot #f 88 8 88 22 ()}
        {Lisp-Entry "shortcut-hook" slot #f 89 8 89 21 ()}
        {Lisp-Entry "get-shortcut-hook" accessor #f 89 80 89 88 ()}
        {Lisp-Entry "set-shortcut-hook" accessor #f 89 80 89 88 ()}
        {Lisp-Entry "external-name" method #f 92 25 92 38 ("application" "rest")}
        {Lisp-Entry "get-toplevel" method #f 101 20 101 32 ("toplevel")}
        {Lisp-Entry "is-application?" method #f 105 20 105 35 ()}
        {Lisp-Entry "prepare-bindings" method #f 114 20 114 36 ("Application-Bindings" "new" "set-bindings" "nextmethod")}
        {Lisp-Entry "prepare-profile" method #f 121 20 121 35 ("prepare-skins" "initialize-system" "get-setting" "initialize-windowing" "setup-shortcuts" "self" "set-application" "nextmethod")}
        {Lisp-Entry "prepare-environment" method #f 130 20 130 39 ("prepare-styles" "prepare-formats" "prepare-fonts" "prepare-colors" "nextmethod")}
        {Lisp-Entry "install-environment" method #f 138 20 138 39 ("register-clipboard-formats" "initialize-clipboard" "initialize-toplevel" "install-workspaces" "install-bindings" "install-skins" "nextmethod")}
        {Lisp-Entry "finalize-environment" method #f 148 20 148 40 ("splash-screen" ":arrow" "set-cursor" "nextmethod")}
        {Lisp-Entry "setup-profile" method #f 154 20 154 33 ("get-class-actions" "set-profile-actions" "use-profile?" "when" "err" "continue-handler:" "format" "list" "continue-text:" "Me" "load-profile-class" "new" "profile-class" "find-unit-source" "if" "profile" "set!" "lambda" "with-safe-execution" "create-profile" "define")}
        {Lisp-Entry "finish-environment" method #f 171 20 171 38 ("remove-splash-screen" "reload-session" "err" "continue-handler:" "init" "init~" "lambda" "with-safe-execution" "profile" "when" "self" "add-save-environment-listener" "locale-change" "register-locale-change" "english:" "Locale" "new" "register-locale" "nextmethod")}
        {Lisp-Entry "finish-process" method #f 187 20 187 34 ("update-windowing-actions" "update-focus-actions" "select-default-workspace" "nextmethod")}
        {Lisp-Entry "conclude-environment" method #f 194 20 194 40 ("err" "continue-handler:" "finalize" "finalize~" "lambda" "with-safe-execution" "profile" "toplevel" "select-foreground" "select-foreground~" "run-loop?" "when" "show-toplevel" "skin-update" "initialize-actions" "nextmethod")}
        {Lisp-Entry "terminate-process" method #f 215 20 215 37 ("profile" "profile-class" "set!" "close" "close~" "toplevel" "when" "reset-toolbars" "reset-dockeds" "reset-palettes" "nextmethod")}
        {Lisp-Entry "Java-Classpath" definition #f 233 14 233 28 ("File")}
        {Lisp-Entry "test-java" method #f 242 11 242 20 ("format" "message-box" "java.lang.Class" "forName" "forName~" "class" "java.lang.ClassLoader" "getSystemClassLoader" "getSystemClassLoader~" "loader" "let*" "c-test" "Java-Classpath" "classpath:" "setup-jvm")}
        {Lisp-Entry "start-loop" method #f 255 20 255 30 ("process-events" "setup-events")}
        {Lisp-Entry "resume-loop-action" method #f 260 20 260 38 ("select-foreground" "select-foreground~" "toplevel" "when")}
        {Lisp-Entry "clipboard-prefix" method #f 270 26 270 42 ("process-version" "present" "present~" "process-name" "format")}
        {Lisp-Entry "register-clipboard-formats" method #f 276 29 276 55 ("clipboard-prefix" "register-jazz-clipboard-formats")}
        {Lisp-Entry "Clipboard-Stack" definition #f 285 14 285 29 ()}
        {Lisp-Entry "Max-Stack" definition #f 288 14 288 23 ("256")}
        {Lisp-Entry "get-clipboard-stack" method #f 292 18 292 37 ("Clipboard-Stack")}
        {Lisp-Entry "empty-clipboard-stack?" method #f 296 18 296 40 ("Clipboard-Stack" "null?")}
        {Lisp-Entry "add-clipboard" method #f 300 18 300 31 ("update-focus-actions" "trim-clipboard" "cons" "Clipboard-Stack" "set!" "when" "get-clipboard-text" "text" "let")}
        {Lisp-Entry "push-clipboard-list" method #f 308 18 308 37 ("update-focus-actions" "trim-clipboard" "append" "Clipboard-Stack" "set!" "error" "Max-Stack" ">" "if" "length" "pushed" "let" "list")}
        {Lisp-Entry "trim-clipboard" definition #f 317 15 317 29 ("1" "-" "tail" "set-cdr!" "Max-Stack" "Clipboard-Stack" "length" ">" "when")}
        {Lisp-Entry "pop-clipboard" method #f 322 11 322 24 ("update-focus-actions" "set-clipboard-text" "cdr" "set!" "Clipboard-Stack" "car" "string" "let")}
        {Lisp-Entry "cycle-clipboard" method #f 330 18 330 33 ("last-pair" "set-cdr!" "list" "set!" "Clipboard-Stack" "null?" "if" "pop-clipboard" "res" "get-clipboard-text" "string" "let")}
        {Lisp-Entry "cycle-clipboard-reversed" method #f 339 18 339 42 ("set-clipboard-text" "butlast" "cons" "set!" "Clipboard-Stack" "last" "res" "get-clipboard-text" "string" "let")}
        {Lisp-Entry "paste-cycle-stack" method #f 347 19 347 36 ("cycle-clipboard" "cycle-clipboard-reversed" "insert-string" "insert-string~" "get-range" "get-range~" "delete-range" "delete-range~" "string-length" "backward-n" "backward-n~" "looking-back?" "looking-back?~" "when" "get-start" "get-start~" "set-pos" "set-pos~" "explorer-class" "explorer-class~" "new" "expl" "get-model" "get-model~" "model" "not" "get-clipboard-text" "text" "bell" "Clipboard-Stack" "null?" "Text-View" "is-not?" "or" "if" "get-focus" "focus" "let" "reversed?")}
        {Lisp-Entry "on-copy-formatted" method #f 363 19 363 36 ("copy-formatted-selection" "copy-formatted-selection~" "bell" "Text-View" "is-not?" "if" "get-focus" "focus" "let" "evt")}
        {Lisp-Entry "on-paste-cycle-stack" method #f 370 19 370 39 ("paste-cycle-stack" "evt")}
        {Lisp-Entry "on-paste-cycle-stack-reversed" method #f 374 19 374 48 ("paste-cycle-stack" "evt")}
        {Lisp-Entry "on-add-history" method #f 383 19 383 33 ("history-manager" "add-current" "add-current~" "evt")}
        {Lisp-Entry "on-backward-history" method #f 387 19 387 38 ("history-manager" "go-backward-history" "go-backward-history~" "evt")}
        {Lisp-Entry "on-forward-history" method #f 391 19 391 37 ("history-manager" "go-forward-history" "go-forward-history~" "evt")}
        {Lisp-Entry "add-history" method #f 395 18 395 29 ("history-manager" "add-history" "add-history~" "item")}
        {Lisp-Entry "current-history-item" method #f 399 20 399 40 ("current-history-item" "current-history-item~" "Document" "is?" "get-guest" "get-guest~" "guest" "when" "current-frame" "frame" "let")}
        {Lisp-Entry "update-history-actions" method #f 407 20 407 42 ("forward-history" "not-null?" "backward-history" "application" "Action" "set-action-enabled?" "get-forward-history" "get-forward-history~" "forward" "history-manager" "get-backward-history" "get-backward-history~" "backward" "let")}
        {Lisp-Entry "get-recorder" method #f 419 26 419 38 ()}
        {Lisp-Entry "macro-recording?" method #f 423 19 423 35 ("get-recording?" "get-recording?~" "and" "get-recorder" "recorder" "let")}
        {Lisp-Entry "macro-playing?" method #f 428 19 428 33 ("get-playing?" "get-playing?~" "and" "get-recorder" "recorder" "let")}
        {Lisp-Entry "templates-directory" method #f 438 29 438 48 ()}
        {Lisp-Entry "use-profile-logging?" method #f 447 29 447 49 ()}
        {Lisp-Entry "log-profile" method #f 451 20 451 31 ("compose-identifier" "cond" "jazz-profile" "profile-arg" "use-profile-logging?" "use-logging?" "capitalize" "string-parameter" "profile-parameter" "parse" "parse~" "load" "exists?" "exists?~" "File" "file" "load-profile-jazzini" "get-system-user-name" "jazz.profile" "Me" "system-profile" "unit-name" "string->symbol" "title" "standard-profile" "values" "save-content" "save-content~" "process-name" "message-box" "profile-warned?" "get-setting" "get-setting~" "and" "->string" "if" "set-setting" "set-setting~" "unless" "settings" "shift-down?" "one-shoot?" "choose-profile-login" "always-use?" "receive" "login-profile" "load-package" "repository-add-package" "format" "repository-library-directory" "concatenate" "package-path" "package-name" "Profiles" "find-repository" "repository" "non-expanded-nodes:" "Home" "Directory" "templates-directory" "new-directory" "new-directory~" "copy-template" "else" "x11" "mac" "carbon" "kernel-windowing" "case" "active-skin" "jazz" "or" "profile-bindings" "profile-unit" "symbol->string" "downcase" "profile-lowercase" "profile" "settings-version" "present-version" "jazz-settings-version" "cons" "list" "associations" "get-parent" "get-parent~" "get-list" "get-list~" "Profile" "register-alias" "set!" "install-new-profile" "not" "when" "profile-class" "find-unit-source" "source" "let" "bindings" "unit" "name" "install-profile" "define")}
        {Lisp-Entry "choose-profile-login" method #f 521 29 521 49 ()}
        {Lisp-Entry "preserve-environment" method #f 530 20 530 40 ("call-save-environment-listeners" "nextmethod")}
        {Lisp-Entry "close-environment" method #f 535 20 535 37 ("nextmethod" "save-page-setup" "save-workspaces" "save-bindings" "close-all-no-confirm" "confirm-all-close" "call-exit-listeners")}
        {Lisp-Entry "confirm-all-close" method #f 548 19 548 36 ("include-invisibles?:" "all-frames" "confirm-close" "confirm-close~" "unless" "lambda" "for-each" "dependent-document?" "dependent-document?~" "get-controller" "get-controller~" "controller" "Document" "get-guest" "get-guest~" "guest" "let" "Host-View" "is?" "and" "frame" "frame-dependent-document?" "define")}
        {Lisp-Entry "close-all" method #f 562 11 562 20 ("include-invisibles?:" "all-frames" "close-host" "close-host~" "for-each")}
        {Lisp-Entry "close-all-no-confirm" method #f 566 11 566 31 ("include-invisibles?:" "all-frames" "confirm?:" "close-host" "close-host~" "host" "lambda" "for-each")}
        {Lisp-Entry "Splash-Screen" definition #f 577 14 577 27 ()}
        {Lisp-Entry "Splash-End" definition #f 580 14 580 24 ()}
        {Lisp-Entry "splash-screen" method #f 584 29 584 42 ()}
        {Lisp-Entry "show-splash-screen" method #f 588 11 588 29 ("current-time" "time->seconds" "+" "and" "Splash-End" "show-splash" "Splash-Screen" "set!" "duration" "duration:")}
        {Lisp-Entry "remove-splash-screen" method #f 593 11 593 31 ("remove-splash" "-" "sleep" ">" "Splash-End" "and" "current-time" "time->seconds" "time" "let" "Splash-Screen" "when")}
        {Lisp-Entry "show-splash" method #f 601 29 601 40 ()}
        {Lisp-Entry "remove-splash" method #f 605 29 605 42 ("splash-screen")}
        {Lisp-Entry "on-about" method #f 614 19 614 27 ("show-about" "evt")}
        {Lisp-Entry "show-about" method #f 618 26 618 36 ("french:" "english:" "Locales" "localize" "title:" "if" "format" "Dark-Blue" "Color" "color:" "Text" "Font" "font:" "list" "append!" "message-box" "process-email" "email" "process-version" "present" "present~" "version" "process-licensee" "licensee" "process-copyright" "copyright" "process-owner" "owner" "process-name" "name" "let")}
        {Lisp-Entry "exit-listeners" slot #f 653 8 653 22 ()}
        {Lisp-Entry "add-exit-listener" method #f 656 18 656 35 ("cons" "exit-listeners" "set!" "listener")}
        {Lisp-Entry "remove-exit-listener" method #f 660 18 660 38 ("remove!" "exit-listeners" "set!" "listener")}
        {Lisp-Entry "call-exit-listeners" method #f 664 18 664 37 ("exit-listeners" "prepare-exit" "prepare-exit~" "for-each")}
        {Lisp-Entry "deactivate" method #f 673 26 673 36 ("set!" "reset-mouse-in" "toplevel" "close-popups" "close-popups~" "active?" "when")}
        {Lisp-Entry "activate" method #f 680 26 680 34 ("verify-reloads" "lambda" "set-delayed-mouse-action" "mouse-clicked?" "if" "set!" "active?" "unless")}
        {Lisp-Entry "verify-reloads" method #f 691 18 691 32 ("propose-reload-action" "propose-reload-action~" "for-each" "question" "type:" "title:" "format" "message-box" "code" "not-null?" "reloads" "include-invisibles?:" "all-frames" "needs-reload?" "needs-reload?~" "get-controller" "get-controller~" "controller" "Document" "get-guest" "get-guest~" "guest" "let" "Frame-Host" "is?" "when" "view" "lambda" "collect" "collect-reloads" "define")}
        {Lisp-Entry "verify-reload" method #f 712 18 712 31 ("get-controller" "get-controller~" "verify-reload" "verify-reload~" "get-guest" "get-guest~" "document" "when" "find-document" "frame" "let" "moniker")}
        {Lisp-Entry "save-environment-listeners" slot #f 724 8 724 34 ()}
        {Lisp-Entry "add-save-environment-listener" method #f 727 18 727 47 ("cons" "save-environment-listeners" "set!" "listener")}
        {Lisp-Entry "remove-save-environment-listener" method #f 731 18 731 50 ("remove!" "save-environment-listeners" "set!" "listener")}
        {Lisp-Entry "call-save-environment-listeners" method #f 735 18 735 49 ("save-environment-listeners" "save-environment" "save-environment~" "listener" "lambda" "for-each")}
        {Lisp-Entry "reload-session" method #f 746 18 746 32 ("reload-opened-windows")}
        {Lisp-Entry "reload-opened-windows" method #f 750 26 750 47 ()}
        {Lisp-Entry "reload-component" method #f 754 26 754 42 ("properties" "class")}
        {Lisp-Entry "save-environment" method #f 758 20 758 36 ("include-invisibles?:" "all-frames" "session" "session-designer" "save-guest" "save-guest~" "get-guest" "get-guest~" "guest" "Host-Frame" "is?" "frame" "lambda" "for-each" "save-all-guest" "get-current-directory" "current-directory:" "context" "active-context:" "set-preference" "when" "get-preferences-root" "process-preferences" "let" "save-application" "define")}
        {Lisp-Entry "display-aliases?" method #f 784 26 784 42 ()}
        {Lisp-Entry "display-protocol?" method #f 788 26 788 43 ()}
        {Lisp-Entry "prepare-colors" method #f 797 11 797 25 ("colors-domain" "read-form" "instantiate" "instantiate~" "register-children" "register-children~" "exists?" "exists?~" "File" "file" "let" "Profile" "is-alias?" "when")}
        {Lisp-Entry "prepare-fonts" method #f 809 11 809 24 ("fonts-domain" "read-form" "instantiate" "instantiate~" "register-children" "register-children~" "exists?" "exists?~" "File" "file" "let" "Profile" "is-alias?" "when")}
        {Lisp-Entry "prepare-formats" method #f 821 11 821 26 ("formats-domain" "read-form" "instantiate" "instantiate~" "register-children" "register-children~" "exists?" "exists?~" "File" "file" "let" "Profile" "is-alias?" "when")}
        {Lisp-Entry "prepare-styles" method #f 833 11 833 25 ("styles-domain" "read-form" "instantiate" "instantiate~" "register-children" "register-children~" "exists?" "exists?~" "File" "file" "let" "Profile" "is-alias?" "when")}
        {Lisp-Entry "add-focus-listener" method #f 845 18 845 36 ("add-listener" "focus-listeners" "set!" "listener")}
        {Lisp-Entry "remove-focus-listener" method #f 849 18 849 39 ("remove-listener" "focus-listeners" "set!" "listener")}
        {Lisp-Entry "process-focus-change" method #f 853 19 853 39 ("update-focus-actions" "invoke" "invoke~" "listener" "lambda" "for-each" "self" ":focus-change" "Focus-Event" "new" "evt" "let" "focus-listeners" "when" "new-focus")}
        {Lisp-Entry "update-focus-actions" method #f 862 26 862 46 ("focus-update-actions" "focus-update-actions~" "can-view-select-all?" "can-view-select-all?~" "select-all" "can-view-delete?" "can-view-delete?~" "delete" "can-view-paste-properties?" "can-view-paste-properties?~" "paste-properties" "paste-cycle-stack-reversed" "Clipboard-Stack" "not-null?" "paste-cycle-stack" "can-view-paste?" "can-view-paste?~" "paste" "copy-formatted" "application" "can-view-copy?" "can-view-copy?~" "copy" "can-view-cut?" "can-view-cut?~" "cut" "can-view-redo?" "can-view-redo?~" "redo" "can-view-undo?" "can-view-undo?~" "undo" "view" "Action" "set-action-enabled?" "preferences-designer" "when" "View" "is?" "and" "view?" "get-focus" "focus" "let*")}
        {Lisp-Entry "add-selected-listener" method #f 886 18 886 39 ("add-listener" "selected-listeners" "set!" "listener")}
        {Lisp-Entry "remove-selected-listener" method #f 890 18 890 42 ("remove-listener" "selected-listeners" "set!" "listener")}
        {Lisp-Entry "get-selected" method #f 894 18 894 30 ("selected")}
        {Lisp-Entry "set-selected" method #f 898 18 898 30 ("process-selected-change" "selected" "or" "when" "selected-owner" "neq?" "new-owner?" "let" "force?" "force?:" "sel" "owner")}
        {Lisp-Entry "close-selected" method #f 904 18 904 32 ("selected" "process-selected-change" "set!" "selected-owner" "eq?" "when" "owner")}
        {Lisp-Entry "process-selected-change" method #f 910 11 910 34 ("invoke" "invoke~" "listener" "lambda" "for-each" "force?:" "self" ":selected-change" "Selected-Event" "new" "evt" "let" "exiting-process?" "not" "selected-listeners" "and" "when" "selected" "selected-owner" "set!" "force?" "new-selected" "old-selected" "owner")}
        {Lisp-Entry "add-application-listener" method #f 925 18 925 42 ("get-application-listeners" "add-listener" "set-application-listeners" "listener" "category")}
        {Lisp-Entry "remove-application-listener" method #f 929 18 929 45 ("get-application-listeners" "remove-listener" "set-application-listeners" "listener" "category")}
        {Lisp-Entry "process-application-event" method #f 933 19 933 44 ("self" "invoke" "invoke~" "listener" "lambda" "for-each" "Application-Event" "new" "apply" "evt" "get-application-listeners" "listeners" "let" "properties" "sender" "kind" "category")}
        {Lisp-Entry "get-application-listeners" method #f 941 11 941 36 ("application-listeners" "table-ref" "category")}
        {Lisp-Entry "set-application-listeners" method #f 945 11 945 36 ("application-listeners" "table-set!" "listeners" "category")}
        {Lisp-Entry "default-frame-class" method #f 954 26 954 45 ()}
        {Lisp-Entry "file-frame-class" method #f 958 26 958 42 ("error" "extension-frame-class" "or" "get-extension" "get-extension~" "extension" "let" "file")}
        {Lisp-Entry "extension-frame-class" method #f 964 26 964 47 ("unknown-extension-frame-class" "known-extension-frame-class" "profile-extension-frame-class" "or" "ext")}
        {Lisp-Entry "profile-extension-frame-class" method #f 970 11 970 40 ("extension-frame-class" "extension-frame-class~" "profile" "when" "ext")}
        {Lisp-Entry "known-extension-frame-class" method #f 975 26 975 53 ("ext")}
        {Lisp-Entry "unknown-extension-frame-class" method #f 979 26 979 55 ()}
        {Lisp-Entry "frame-class" method #f 983 26 983 37 ("file-frame-class" "default-frame-class" "not" "if" "file" "file:")}
        {Lisp-Entry "get-default-frame-class" method #f 989 11 989 34 ("default-frame-class" "resolve-reference" "resolve-reference~" "if" "get-frame-model" "get-frame-model~" "model" "get-workspace-preferences" "pref" "let*")}
        {Lisp-Entry "initialize-toplevel" method #f 1002 11 1002 30 ("ensure-displayed" "ensure-displayed~" "new-toplevel" "toplevel" "set!")}
        {Lisp-Entry "new-toplevel" method #f 1007 26 1007 38 ("Toplevel" "new")}
        {Lisp-Entry "show-toplevel" method #f 1011 26 1011 39 ("toplevel" "set-visible?" "set-visible?~" "maximize" "maximize~" "maximized" "restore" "restore~" "restored" "jazz.ui.stage-state" "get-setting" "case" "when" "current-stage" "stage" "let" "setup-stage" "define")}
        {Lisp-Entry "initialize-actions" method #f 1023 11 1023 29 ("self" "get-class-actions" "set-application-actions")}
        {Lisp-Entry "new-stage" method #f 1032 26 1032 35 ("stage" "name:" "Stage-Border" "parent:" "stage-class" "new")}
        {Lisp-Entry "stage-class" method #f 1036 29 1036 40 ("Stage")}
        {Lisp-Entry "setup-shortcuts" method #f 1045 11 1045 26 ("shortcut-hash" "hash:" "shortcut=?" "test:" "make-table" "shortcut-table" "set!")}
        {Lisp-Entry "register-actions-shortcuts" method #f 1049 11 1049 37 ("for-each-reversed" "get-children" "get-children~" "get-alternate-shortcut" "get-alternate-shortcut~" "get-shortcut" "get-shortcut~" "get-visible?" "get-visible?~" "actions" "lambda" "for-each" "table-add" "register-shortcut" "table-remove!" "shortcut-table" "table-ref" "and" "when" "shortcut" "action-item" "unregister-shortcut" "define" "new-actions" "old-actions")}
        {Lisp-Entry "update-shortcut" method #f 1076 18 1076 33 ("table-add" "shortcut-table" "table-remove!" "when" "new-shortcut" "old-shortcut" "action-item")}
        {Lisp-Entry "dispatch-shortcut" method #f 1083 18 1083 35 ("self" "invoke" "invoke~" "action-allowed?" "car" "action" "not-null?" "when" "get-allowed-actions" "action-items" "let" "shortcut-hook" "not" "or" "if" "shortcut")}
        {Lisp-Entry "get-bound-actions" method #f 1095 18 1095 35 ("shortcut-table" "table-ref" "shortcut")}
        {Lisp-Entry "get-allowed-actions" method #f 1099 18 1099 37 (":control" "Shortcut" "shortcut=?" "if" "get-bound-actions" "let" "action-allowed?" "collect-if" "actions" "filter-allowed" "define" "shortcut")}
        {Lisp-Entry "action-allowed?" method #f 1112 18 1112 33 ("allow-orphaned-actions?" "get-parent" "get-parent~" "actions-orphaned?" "actions-orphaned?~" "not" "or" "get-actionables" "get-actionables~" "actionable-reachable?" "actionable-reachable?~" "get-enabled?" "get-enabled?~" "and" "actionable" "lambda" "some?" "some-actionable-active?" "define" "action-item")}
        {Lisp-Entry "allow-orphaned-actions?" method #f 1128 29 1128 52 ()}
        {Lisp-Entry "Bindings-File" definition #f 1137 14 1137 27 ("Profile" "File")}
        {Lisp-Entry "install-bindings" method #f 1141 11 1141 27 ("default-bindings" "err" "continue-handler:" "set-active-trait" "set-active-trait~" "Trait" "is?" "when" "locate-component" "locate-component~" "trait" "jazz" "get-preferences" "get-active-bindings" "get-active-bindings~" "or" "active" "load-bindings" "let" "lambda" "with-safe-execution" "reference:" "get-form" "get-form~" "form:" "Designer" "new" "bindings-designer" "set!" "set-bindings" "bindings" "set-bindings/designer" "define")}
        {Lisp-Entry "load-bindings" method #f 1159 29 1159 42 ("default-bindings" "read-form" "instantiate" "instantiate~" "exists?" "exists?~" "Profile" "is-alias?" "and" "if" "Bindings-File" "file" "let")}
        {Lisp-Entry "default-bindings" method #f 1166 29 1166 45 ("Application-Bindings" "new")}
        {Lisp-Entry "save-bindings" method #f 1170 11 1170 24 ("save" "save~" "get-form" "get-form~" "get-origin" "get-origin~" "file?" "get-modified?" "get-modified?~" "bindings-designer" "and" "when")}
        {Lisp-Entry "install-skins" method #f 1180 11 1180 24 ("default-skins" "err" "continue-handler:" "default-skin" "get-active" "get-active~" "or" "child" "child~" "set-skin" "set-skins-designer" "load-skins" "skins" "let" "lambda" "with-safe-execution")}
        {Lisp-Entry "skins-file" method #f 1193 29 1193 39 ("Profile" "File")}
        {Lisp-Entry "load-skins" method #f 1197 29 1197 39 ("default-skins" "read-form" "instantiate" "instantiate~" "exists?" "exists?~" "Profile" "is-alias?" "and" "if" "skins-file" "file" "let")}
        {Lisp-Entry "set-skins-designer" method #f 1204 21 1204 39 ("reference:" "get-form" "get-form~" "form:" "Designer" "new" "skins-designer" "set!" "skins")}
        {Lisp-Entry "save-skins" method #f 1208 11 1208 21 ("save" "save~" "get-form" "get-form~" "get-origin" "get-origin~" "file?" "get-modified?" "get-modified?~" "skins-designer" "and" "when")}
        {Lisp-Entry "Workspaces-File" definition #f 1218 14 1218 29 ("Profile" "File")}
        {Lisp-Entry "install-workspaces" method #f 1222 11 1222 29 ("default-workspaces" "err" "continue-handler:" "load-workspaces" "lambda" "with-safe-execution" "reference:" "get-form" "get-form~" "form:" "Designer" "new" "workspaces-designer" "set!" "workspaces" "set-workspaces-designer" "define")}
        {Lisp-Entry "load-workspaces" method #f 1234 29 1234 44 ("default-workspaces" "read-form" "instantiate" "instantiate~" "exists?" "exists?~" "Profile" "is-alias?" "and" "if" "Workspaces-File" "file" "let")}
        {Lisp-Entry "default-workspaces" method #f 1241 29 1241 47 ("Workspaces-Preferences" "<Workspaces-Preferences>" "form" "<form>" "instantiate" "instantiate~")}
        {Lisp-Entry "save-workspaces" method #f 1247 11 1247 26 ("save" "save~" "get-form" "get-form~" "get-origin" "get-origin~" "file?" "get-modified?" "get-modified?~" "workspaces-designer" "and" "when")}
        {Lisp-Entry "set-application-actions" method #f 1257 18 1257 41 ("set!" "application-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "set-profile-actions" method #f 1262 18 1262 37 ("set!" "profile-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "set-guest-actions" method #f 1267 18 1267 35 ("set!" "guest-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "set-focus-actions" method #f 1272 18 1272 35 ("set!" "focus-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "find-menubar" method #f 1282 18 1282 30 ("get-guest" "get-guest~" "in-player?" "in-player?~" "and" "when" ":menubar" "get-toolbar" "host" "let")}
        {Lisp-Entry "find-menu" method #f 1288 18 1288 27 ("get-content" "get-content~" "find-component" "find-component~" "menuitem" "when" "find-menubar" "menubar" "let" "name")}
        {Lisp-Entry "update-menubar-buttons" method #f 1296 18 1296 40 ("update-buttons" "update-buttons~" "when" "find-menubar" "menubar" "let")}
        {Lisp-Entry "Undisplayed-Message" definition #f 1307 14 1307 33 ()}
        {Lisp-Entry "set-status-message" method #f 1311 18 1311 36 ("update-view" "update-view~" "primordial-thread?" "and" "when" "set-action-handler" "set-action-handler~" "->string" "else" "Locales" "is?" "cond" "set-title" "set-title~" "lambda" "post-event" "Undisplayed-Message" "set!" "not" "if" "get-message-view" "message" "let" "update?" "action-handler" "msg")}
        {Lisp-Entry "find-status-bar" method #f 1326 18 1326 33 ("get-guest" "get-guest~" "in-player?" "in-player?~" "and" "when" ":status" "get-toolbar" "host" "let")}
        {Lisp-Entry "get-message-view" method #f 1332 18 1332 34 ("message" "find-component" "find-component~" "when" "find-status-bar" "status-bar" "let")}
        {Lisp-Entry "show-undisplayed-message" method #f 1338 18 1338 42 ("set!" "set-status-message" "Undisplayed-Message" "when")}
        {Lisp-Entry "class-actions" method #f 1349 20 1349 33 ("nextmethod" "application" "find-actions" "cons")}
        {Lisp-Entry "process-alias" method #f 1359 20 1359 33 ("nextmethod" "cadr" "find-menu" ":menu" "car" "eq?" "pair?" "and" "cond" "else" "get-bindings" ":bindings" "get-images-portfolio" ":images" "focused-guest" ":focus-guest" "focused-host" ":focus-host" "get-focus" ":focus" "current-document" ":document" "current-frame" ":frame" "current-stage" ":stage" "find-status-bar" ":status-bar" "find-toolbar" ":toolbar" "find-menubar" ":menubar" "get-toplevel" ":toplevel" "self" ":application" "case" "name")}
        {Lisp-Entry "text-menu" method #f 1383 26 1383 35 ("new-text-context-menu" "new-text-context-menu~" "text")}
        {Lisp-Entry "get-output-log" method #f 1392 26 1392 40 ()}
        {Lisp-Entry "All-Results" definition #f 1401 14 1401 25 ()}
        {Lisp-Entry "Active-Results" definition #f 1404 14 1404 28 ()}
        {Lisp-Entry "navigable-results" method #f 1408 26 1408 43 ("navigable-results" "must-implement")}
        {Lisp-Entry "get-navigable-results" method #f 1412 11 1412 32 ("navigable-results" "set!" "All-Results" "unless")}
        {Lisp-Entry "get-active-results" method #f 1418 18 1418 36 ("get-navigable-results" "car" "set!" "Active-Results" "unless")}
        {Lisp-Entry "set-active-results" method #f 1424 18 1424 36 ("Active-Results" "set!" "results")}
        {Lisp-Entry "locale-change" method #f 1433 11 1433 24 ("locale-update" "when" "select-locale" "update?" "loc")}
        {Lisp-Entry "select-locale" method #f 1439 18 1439 31 ("present-locale" "localize" "set-title" "set-title~" "locales" "locate-component" "locate-component~" "label" "when" "find-status-bar" "status" "let" "locale")}
        {Lisp-Entry "locale-update" method #f 1447 18 1447 31 ("redraw-window" "redraw-window~" "invalidate-title" "invalidate-title~" "get-toplevel" "toplevel" "update-toplevel" "get-children" "get-children~" "Menu" "get-content" "get-content~" "content" "Label-Item" "is?" "when" "child" "lambda" "for-each" "layout-menu" "layout-menu~" "find-menubar" "menubar" "let" "update-menubar" "define")}
        {Lisp-Entry "setup-workspaces" method #f 1473 11 1473 27 ("layout" "layout~" "layout-menu" "layout-menu~" "Separator" "tooltip-text:" "tooltip?:" ":images" "portfolio:" "resource:" "tail-separator" "tail" "location:" "22" "Dimension" "size:" "Workspace-Button" "Action" "selected?:" "group:" "layout-separator" "before:" "icon:" "title:" "Radio-Item" "get-shortcut" "get-shortcut~" "shortcut:" "action-handler:" "name:" "parent:" "Action-Item" "eq?" "selected?" "workspace:" "list" "properties:" "on-select-workspace" "method-name:" ":application" "target-name:" "Event-Handler" "new" "event-handler" "format" "string->symbol" "action-name" "get-icon" "get-icon~" "icon" "get-title" "get-title~" "title" "get-name" "get-name~" "name" "lambda" "for-each" "get-active" "get-active~" "active" "find-toolbar" "toolbar" "application" "find-actions" "actions" "when" "workspace" "find-menu" "menu" "else" "1" "error" "0" "get-children" "get-children~" "length" "case" "get-workspaces-preferences" "preferences" "let")}
        {Lisp-Entry "select-default-workspace" method #f 1500 11 1500 35 ("apply-preferences" "apply-preferences~" "Default-Workspace" "new" "child" "child~" "get-active" "get-active~" "active" "default-workspace" "not" "if" "error?:" "get-workspaces-preferences" "pref" "let" "find-workspace" "define")}
        {Lisp-Entry "on-select-workspace" method #f 1516 19 1516 38 ("workspace:" "get-property" "get-property~" "select-workspace" "evt")}
        {Lisp-Entry "on-next-workspace" method #f 1520 19 1520 36 ("select-next-workspace" "evt")}
        {Lisp-Entry "on-previous-workspace" method #f 1524 19 1524 40 ("select-previous-workspace" "evt")}
        {Lisp-Entry "on-workspace" method #f 1528 27 1528 39 ("activate-workspace-button" "activate-workspace-item" "workspace:" "get-property" "get-property~" "workspace" "let" "activate" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "activate-workspace-item" method #f 1536 31 1536 54 ("set-selected?" "set-selected?~" "group:" "Radio-Item" "class:" "unselect-elements" "unselect-elements~" "not" "if" "get-name" "get-name~" "find-component" "find-component~" "radio" "when" "find-menu" "menu" "let" "workspace")}
        {Lisp-Entry "activate-workspace-button" method #f 1545 31 1545 56 ("set-selected?" "set-selected?~" "group:" "Radio-Tool" "class:" "unselect-elements" "unselect-elements~" "not" "if" "find-component" "find-component~" "radio" "and" "when" "workspace-button-name" "name" "find-toolbar" "toolbar" "let" "workspace")}
        {Lisp-Entry "workspace-button-name" method #f 1555 39 1555 60 ("get-name" "get-name~" "workspace")}
        {Lisp-Entry "workspace-installed" method #f 1559 26 1559 45 ()}
        {Lisp-Entry "on-zoom-horizontally" method #f 1563 19 1563 39 ("set!" "unzoom" "unzoom~" "zoom" "zoom~" "workspace-zoomable?" "workspace-zoomable?~" "split" "get-state" "get-state~" "continuation-return" "when" "vert" "get-orientation" "get-orientation~" "eq?" "if" "host" "splitter" "current-stage-border" "for-each-splitter" "return" "continuation-capture" "started?" "let" "lambda" "with-locked-update" "evt")}
        {Lisp-Entry "on-zoom-vertically" method #f 1582 19 1582 37 ("set!" "unzoom" "unzoom~" "zoom" "zoom~" "split" "get-state" "get-state~" "continuation-return" "when" "horz" "get-orientation" "get-orientation~" "eq?" "if" "host" "splitter" "for-each-splitter" "return" "continuation-capture" "current-stage-border" "border" "started?" "let" "lambda" "with-locked-update" "evt")}
        {Lisp-Entry "on-maximize/restore" method #f 1602 19 1602 38 ("maximize" "maximize~" "restore" "restore~" "get-maximized?" "get-maximized?~" "if" "current-stage" "stage" "let" "evt")}
        {Lisp-Entry "on-full-screen" method #f 1609 19 1609 33 ("full-screen-stage" "selected-workspace" "set-fullscreen?" "set-fullscreen?~" "get-toplevel" "get-fullscreen?" "get-fullscreen?~" "fullscreen?" "fullscreen-warned?" "preferences-designer" "set-property" "set-property~" "message-box" "get-fullscreen-warned?" "get-fullscreen-warned?~" "not" "when" "get-preferences" "pref" "let" "evt")}
        {Lisp-Entry "full-screen-stage" method #f 1619 18 1619 35 ("current-stage-border" "full-screen" "fullscreen?")}
        {Lisp-Entry "toggle-full-screen" method #f 1623 18 1623 36 ("full-screen" "get-toplevel" "get-fullscreen?" "get-fullscreen?~" "not" "fullscreen?" "let" "host")}
        {Lisp-Entry "full-screen" method #f 1628 18 1628 29 ("unzoom" "unzoom~" "zoom" "zoom~" "set-full?" "set-full?~" "top" "get-name" "get-name~" "eq?" "and" "get-preferences" "get-preferences~" "preferences" "for-each-splitter" "set-fullscreen?" "set-fullscreen?~" "lambda" "with-locked-update" "get-fullscreen?" "get-fullscreen?~" "neq?" "current-stage" "stage" "get-toplevel" "toplevel" "0" "Rect" "get-insets" "get-insets~" "set-insets" "set-insets~" "set-preserved-insets" "set-preserved-insets~" "when" "get-preserved-insets" "get-preserved-insets~" "preserved" "let" "not" "if" "splitter" "fix-top-splitter-insets" "define" "fullscreen?" "host")}
        {Lisp-Entry "on-delete-stage" method #f 1657 18 1657 33 ("delete-stage" "evt")}
        {Lisp-Entry "on-delete-other-stages" method #f 1661 18 1661 40 ("delete-other-stages" "evt")}
        {Lisp-Entry "on-split-vertically" method #f 1665 18 1665 37 ("split-stage-vertically" "evt")}
        {Lisp-Entry "on-split-horizontally" method #f 1669 18 1669 39 ("split-stage-horizontally" "evt")}
        {Lisp-Entry "on-move-frame" method #f 1673 18 1673 31 ("move-frame" "evt")}
        {Lisp-Entry "on-clone-frame" method #f 1677 18 1677 32 ("clone-frame" "evt")}
        {Lisp-Entry "find-toolbar" method #f 1686 18 1686 30 ("get-guest" "get-guest~" "in-player?" "in-player?~" "and" "when" ":toolbar" "get-toolbar" "host" "let")}
        {Lisp-Entry "find-command-toolbar" method #f 1692 18 1692 38 (":toolbar" ":minibuffer" ":command" "or" "get-guest" "get-guest~" "in-player?" "in-player?~" "and" "when" "get-toolbar" "host" "let" "name" "try" "define")}
        {Lisp-Entry "get-context-text" method #f 1708 20 1708 36 ()}
        {Lisp-Entry "get-text-class" method #f 1717 26 1717 40 ("Plain-Text-View")}
        {Lisp-Entry "get-resource" method #f 1726 18 1726 30 ("cursor" "format" "list" "new-file" "new-file~" "image" "case" "Build" "Directory" "Jazz" "is-alias?" "if" "resources-dir" "define" "name" "type")}
        {Lisp-Entry "Images-Portfolio" definition #f 1742 14 1742 30 ()}
        {Lisp-Entry "get-images-portfolio" method #f 1746 18 1746 38 (":images" "name:" "Portfolio" "new" "set!" "Images-Portfolio" "unless")}
        {Lisp-Entry "get-cataloguer" method #f 1757 26 1757 40 ()}
        {Lisp-Entry "get-event-consumer" method #f 1766 20 1766 38 ("event-consumer")}
        {Lisp-Entry "set-event-consumer" method #f 1770 20 1770 38 ("event-consumer" "set!" "consumer")}
        {Lisp-Entry "deliver-event" method #f 1774 20 1774 33 ("event" "proc" "target" "handler")}
        {Lisp-Entry "process-debuggee-loop" method #f 1783 20 1783 41 ("nextmethod" "process-events" "with-jazz-exception-debugger" "event-thread?" "get-controller-debugger" "local-proxy?" "and" "if")}
        {Lisp-Entry "exception-reported" method #f 1796 11 1796 29 ("cleanup-mouse-processing" "Exception" "catch")}
        {Lisp-Entry "present-execution-context" method #f 1803 11 1803 36 ("prefix?:" "type:" "Exception-Presenter" "new" "present" "present~" "prefix?" "type" "exception")}
        {Lisp-Entry "get-search-manager" method #f 1812 39 1812 57 ()}
        {Lisp-Entry "get-search-results" method #f 1816 39 1816 57 ("Search-Results" "singleton-docked" "get-guest" "get-guest~")}
        {Lisp-Entry "active-search-view" method #f 1820 18 1820 36 ("get-search" "get-search~" "when" "get-search-manager" "manager" "let")}
        {Lisp-Entry "update-search-actions" method #f 1827 18 1827 39 ("previous-search" "replace-selected" "edit-current" "edit-previous" "1" ">=" "edit-next" "replace-all" "replace&find-forward" "replace" "find-backward" "and" "find-forward" "application" "Action" "set-action-enabled?" "get-tree" "get-tree~" "get-visible-count" "get-visible-count~" "results-count" "get-current-resultset" "get-current-resultset~" "resultset" "get-search-results" "results" "active-search-result" "result" "current-document" "document" "let*")}
        {Lisp-Entry "on-find" method #f 1850 19 1850 26 ("window" "domain:" "text" "update-search" "evt")}
        {Lisp-Entry "on-find-in-text" method #f 1854 19 1854 34 ("text" "update-search" "evt")}
        {Lisp-Entry "on-find-in-projects" method #f 1858 19 1858 38 ("projects" "update-search" "evt")}
        {Lisp-Entry "on-find-in-directories" method #f 1862 19 1862 41 ("directories" "update-search" "evt")}
        {Lisp-Entry "on-find-in-user" method #f 1866 19 1866 34 ("user" "update-search" "evt")}
        {Lisp-Entry "update-search" method #f 1870 11 1870 24 ("set-visible?" "set-visible?~" "bring-to-front" "bring-to-front~" "select-search" "select-search~" "get-searches" "get-searches~" "list" "set-search-targets" "set-search-targets~" "first" "equal?" "not-null?" "or" "unless" "get-search-targets" "get-search-targets~" "targets" "let" "search" "lambda" "for-each" "set-search-domain" "set-search-domain~" "set-selection-name" "set-selection-name~" "when" "get-search" "get-search~" "next-radio" "next-radio~" "get-focused-window" "if" "get-selection-name" "get-selection-name~" "eq?" "same-tab?" "locate" "locate~" "tab-view" "get-player" "get-player~" "player" "get-host" "get-host~" "palette" "get-search-manager" "manager" "car" "1" "length" "=" "string" "get-selected-strings" "get-selected-strings~" "Text-View" "not" "and" "strings" "Tree-Embedded-Search-Text-View" "is?" "internal?" "get-focus" "focus" "let*" "selector" "selector:" "domain" "domain:" "tab")}
        {Lisp-Entry "end-search-edition" method #f 1903 18 1903 36 ("end-edition" "end-edition~" "get-search-manager" "get-search" "get-search~" "get-targets" "get-targets~" "tree" "let")}
        {Lisp-Entry "on-edit-next" method #f 1908 19 1908 31 ("get-active-results" "edit-next" "edit-next~" "evt")}
        {Lisp-Entry "on-edit-previous" method #f 1912 19 1912 35 ("get-active-results" "edit-previous" "edit-previous~" "evt")}
        {Lisp-Entry "on-edit-current" method #f 1916 19 1916 34 ("get-active-results" "edit-current" "edit-current~" "evt")}
        {Lisp-Entry "on-find-forward" method #f 1920 19 1920 34 ("bell" "follow-forward" "follow-forward~" "unless" "effective-client" "effective-client~" "acquire-focus" "acquire-focus~" "follow?:" "find-forward" "find-forward~" "if" "active-search-result" "result" "let" "evt")}
        {Lisp-Entry "on-find-backward" method #f 1930 19 1930 35 ("bell" "follow-backward" "follow-backward~" "unless" "effective-client" "effective-client~" "acquire-focus" "acquire-focus~" "follow?:" "find-backward" "find-backward~" "if" "active-search-result" "result" "let" "evt")}
        {Lisp-Entry "on-replace" method #f 1940 19 1940 29 ("bell" "replace-selection" "replace-selection~" "and" "unless" "active-search-result" "result" "let" "evt")}
        {Lisp-Entry "on-replace&find-forward" method #f 1946 19 1946 42 ("bell" "replace-selection&find-forward" "replace-selection&find-forward~" "and" "unless" "active-search-result" "result" "let" "evt")}
        {Lisp-Entry "on-replace-all" method #f 1952 19 1952 33 ("replace-all" "replace-all~" "bell" "not" "if" "active-search-result" "result" "let" "evt")}
        {Lisp-Entry "on-replace-selected" method #f 1959 19 1959 38 ("get-search-results" "replace-selected" "replace-selected~" "evt")}
        {Lisp-Entry "on-previous-search" method #f 1963 19 1963 37 ("Search-Result" "new" "set-active-search-result" "pop-resultset" "pop-resultset~" "get-resultset" "get-resultset~" "eq?" "if" "get-current-resultset" "get-current-resultset~" "resultset" "get-search-results" "results" "active-search-result" "result" "let" "evt")}
        {Lisp-Entry "on-command-extended" method #f 1977 19 1977 38 ("select-command-extended" "evt")}
        {Lisp-Entry "on-command-execute" method #f 1981 19 1981 37 ("select-command-execute" "evt")}
        {Lisp-Entry "get-command-shell" method #f 1985 26 1985 43 ("command-shell" "locate-component" "locate-component~" "when" "find-command-toolbar" "toolbar" "let")}
        {Lisp-Entry "get-command-text" method #f 1991 26 1991 42 ("get-text" "get-text~" "when" "get-command-shell" "shell" "let")}
        {Lisp-Entry "require-command-text" method #f 1997 18 1997 38 ("throw-cancel" "message-box" "begin" "get-command-text" "or")}
        {Lisp-Entry "require-unzoomed-command-text" method #f 2004 18 2004 47 ("require-command-text" "zoom~" "in-player?" "in-player?~" "lambda" "set-client-restore" "set-client-restore~" "unzoom~" "neq?" "get-target" "get-target~" "target" "zoom" "get-state" "get-state~" "eq?" "Splitter-View" "is?" "when" "get-parent" "get-parent~" "splitter" "get-host" "get-host~" "host" "let" "text" "unzoom" "define")}
        {Lisp-Entry "select-command-search" method #f 2023 18 2023 39 ("again?:" "require-unzoomed-command-text" "select-search" "select-search~" "initial" "direction")}
        {Lisp-Entry "select-command-search-current" method #f 2027 18 2027 47 ("again?:" "require-unzoomed-command-text" "select-search" "select-search~" "initial" "range" "direction")}
        {Lisp-Entry "select-command-highlight" method #f 2031 18 2031 42 ("again?:" "client:" "search-result:" "require-unzoomed-command-text" "select-search" "select-search~" "highlight?" "highlight?:" "client" "search-result" "range" "direction")}
        {Lisp-Entry "select-command-extended" method #f 2035 18 2035 41 ("require-unzoomed-command-text" "select-extended" "select-extended~")}
        {Lisp-Entry "select-command-execute" method #f 2039 18 2039 40 ("require-unzoomed-command-text" "select-execute" "select-execute~")}
        {Lisp-Entry "on-new" method #f 2048 27 2048 33 ("get-default-frame-class" "new-event" "new-event~" "evt")}
        {Lisp-Entry "on-open" method #f 2052 27 2052 34 ("open-files" "evt")}
        {Lisp-Entry "open-files" method #f 2056 18 2056 28 ("get-name" "get-name~" "key:" "string>?" "sort" "edit-file" "for-each" "multiple-selection?:" "open-extensions" "extensions:" "choose-file" "files" "let" "directory" "directory:")}
        {Lisp-Entry "receive-files" method #f 2062 26 2062 39 ("edit-file" "class:" "edit-document" "file?" "when" "pathname" "lambda" "for-each" "else" "Jazz-Text-View" "jazz.editor.jazz:Jazz-Text-View" "shift-down?" "Jazz-Plain-Text-View" "jazz.editor.jazz" "jazz.editor.jazz:Jazz-Plain-Text-View" "alt-down?" "cond" "class" "parse" "parse~" "user-message" "set-current-directory" "dir" "let" "car" "directory?" "1" "length" "=" "and" "if" "pathnames" "pos")}
        {Lisp-Entry "edit-file" method #f 2078 26 2078 35 ("edit-document" "file")}
        {Lisp-Entry "open-extensions" method #f 2083 26 2083 41 ()}
        {Lisp-Entry "find-document" method #f 2087 18 2087 31 ("pathname=?" "get-controller" "get-controller~" "get-moniker" "get-moniker~" "guest-moniker" "let" "not" "or" "Document" "is?" "and" "guest" "lambda" "find-frame-if-guest" "class" "class:" "moniker")}
        {Lisp-Entry "edit-document" method #f 2097 18 2097 31 ("verify-reload" "verify-reload~" "focus-host" "focus-host~" "and" "head" "force-vertical:" "ensure-displayed" "ensure-displayed~" "get-guest" "get-guest~" "center-caret" "ensure-displayed?:" "set-selection-safe" "set-selection-safe~" "end-completion" "end-completion~" "set-wrap?" "set-wrap?~" "get-controller" "get-controller~" "set-moniker" "set-moniker~" "get-model" "get-model~" "set-char-encoding" "set-char-encoding~" "Text-View" "is?" "text?" "document" "host" "initialize:" "host-focus?:" "host-visible?:" "host-workspace:" "new-frame" ":wait" "with-cursor" "file-frame-class" "or" "values" "new?" "lambda" "result" "find-document" "frame" "let*" "file" "let" "error" "exists?" "exists?~" "not" "if" "when" "return-new?" "return-new?:" "activate-focus?" "activate-focus?:" "visible?" "visible?:" "force-new?" "force-new?:" "wrap?" "wrap?:" "char-encoding" "char-encoding:" "selection" "selection:" "workspace" "workspace:" "kind" "kind:" "class" "class:" "moniker")}
        {Lisp-Entry "edit-help-document" method #f 2146 18 2146 36 ("set-editable?" "set-editable?~" "get-guest" "get-guest~" "text" "edit-document" "frame" "let*" "moniker")}
        {Lisp-Entry "edit-filename" method #f 2152 18 2152 31 ("get-controller" "get-controller~" "verify-reload" "verify-reload~" "get-guest" "get-guest~" "text" "get-source" "get-source~" "edit-document" "frame" "error" "not" "if" "find-filename" "find-filename~" "and" "project-file" "get-service" "workbench" "let*" "filename")}
        {Lisp-Entry "edit-category" method #f 2162 26 2162 39 ("name")}
        {Lisp-Entry "on-close" method #f 2166 27 2166 35 ("close-host" "close-host~" "when" "front-frame" "frame" "let" "evt")}
        {Lisp-Entry "on-close-all" method #f 2172 27 2172 39 ("all-frames" "close-host" "close-host~" "confirm-close" "confirm-close~" "get-controller" "get-controller~" "close-on-close-all?" "close-on-close-all?~" "Document" "is-not?" "or" "get-guest" "get-guest~" "guest" "let" "Frame-Host" "is?" "when" "view" "lambda" "for-each" "evt")}
        {Lisp-Entry "on-save-all" method #f 2182 27 2182 38 ("save-all" "evt")}
        {Lisp-Entry "on-print" method #f 2186 27 2186 35 ("print-document" "print-document~" "current-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-print-layout" method #f 2191 27 2191 42 ("print-layout" "print-layout~" "current-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-print-preview" method #f 2196 27 2196 43 ("print-preview" "print-preview~" "current-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-quit-application" method #f 2201 27 2201 46 ("exit-process" "evt")}
        {Lisp-Entry "save-all" method #f 2205 18 2205 26 ("include-invisibles?:" "all-frames" "save" "save~" "get-modified?" "get-modified?~" "dependent-document?" "dependent-document?~" "xor" "get-moniker" "get-moniker~" "or" "and" "get-controller" "get-controller~" "controller" "get-guest" "get-guest~" "guest" "Frame-Host" "is?" "when" "host" "for-each" "main-documents?" "lambda" "save-documents" "let" "save-unanchored?" "save-unanchored?:" "Document" "class" "class:")}
        {Lisp-Entry "edit-definitions" method #f 2229 26 2229 42 ("rest" "object")}
        {Lisp-Entry "edit-references" method #f 2233 26 2233 41 ("rest" "object")}
        {Lisp-Entry "context-update" method #f 2242 20 2242 34 ("context" "user-message" "nextmethod" "finalize" "finalize~" "init" "init~" "load-profile-class" "new" "set!" "Profile" "get-profile-class" "get-profile-class~" "or" "class-unit" "error?:" "get-preferences" "pref" "let" "close" "close~" "profile" "when" "modify-profile" "define")}
        {Lisp-Entry "setup-preferences" method #f 2266 20 2266 37 ("default-preferences" "set-preferences/designer" "err" "continue-handler:" "setup-preferences/designer" "lambda" "with-safe-execution")}
        {Lisp-Entry "default-preferences" method #f 2275 20 2275 39 ("Application-Preferences" "new")}
        {Lisp-Entry "toolbox-file" method #f 2279 29 2279 41 ("or" "Profile" "Directory" "new-file" "new-file~" "toolbox")}
        {Lisp-Entry "Default-Page-Setup" definition #f 2289 14 2289 32 ()}
        {Lisp-Entry "Default-Page-Setup-Designer" definition #f 2292 14 2292 41 ()}
        {Lisp-Entry "Default-Page-Setup-Form" definition #f 2295 14 2295 37 ("Page-Setup" "<Page-Setup>" "form" "<form>")}
        {Lisp-Entry "Default-Page-Setup-File" definition #f 2299 14 2299 37 ("Profile" "File")}
        {Lisp-Entry "set-default-page-setup" method #f 2303 31 2303 53 ("Default-Page-Setup" "set!" "page-setup")}
        {Lisp-Entry "default-page-setup" method #f 2307 31 2307 49 ("setup-page-setup" "Default-Page-Setup" "not" "when")}
        {Lisp-Entry "default-page-setup-designer" method #f 2313 31 2313 58 ("setup-page-setup" "Default-Page-Setup-Designer" "not" "when")}
        {Lisp-Entry "setup-page-setup" method #f 2319 19 2319 35 ("reference:" "get-form" "get-form~" "form:" "Designer" "new" "Default-Page-Setup-Designer" "instantiate" "instantiate~" "Default-Page-Setup" "set!" "Default-Page-Setup-Form" "read-form" "exists?" "exists?~" "Profile" "is-alias?" "and" "if" "form" "Default-Page-Setup-File" "file" "let*")}
        {Lisp-Entry "save-page-setup" method #f 2326 19 2326 34 ("save" "save~" "Default-Page-Setup-File" "set-origin" "set-origin~" "not" "form" "let" "get-form" "get-form~" "get-origin" "get-origin~" "file?" "Default-Page-Setup-Designer" "and" "when")}
        {Lisp-Entry "get-documentation-cataloguer" method #f 2339 26 2339 54 ()}
        {Lisp-Entry "on-zoom-out" method #f 2348 11 2348 22 ("0.25" "-" "scale-view" "get-scaling" "get-scaling~" "scaling" "bell" "not" "if" "what:" "get-property" "get-property~" "scaled-view" "view" "let" "evt")}
        {Lisp-Entry "on-zoom-in" method #f 2356 11 2356 21 ("0.25" "+" "scale-view" "get-scaling" "get-scaling~" "scaling" "bell" "not" "if" "what:" "get-property" "get-property~" "scaled-view" "view" "let" "evt")}
        {Lisp-Entry "on-unzoom" method #f 2364 11 2364 20 ("1." "scale-view" "bell" "not" "if" "what:" "get-property" "get-property~" "scaled-view" "view" "let" "evt")}
        {Lisp-Entry "scaled-view" method #f 2371 11 2371 22 ("mouse-view" "current-document" "document" "case" "what")}
        {Lisp-Entry "scale-view" method #f 2377 11 2377 21 ("set-scaling" "set-scaling~" "user-message" "scaling" "view")}
        {Lisp-Entry "on-capture-document" method #f 2387 11 2387 30 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "highlight-root-only?:" "highlight:" "capture-document" "pos" "view" "lambda" "click:" "pick-figure" "evt")}
        {Lisp-Entry "on-capture-mouse-document" method #f 2397 11 2397 36 ("capture-document" "bell" "not" "if" "mouse-view" "view" "let" "evt")}
        {Lisp-Entry "capture-document" definition #f 2404 15 2404 31 ("export-picture" "export-picture~" "get-guest" "get-guest~" "guest" "bell" "not" "if" "get-host" "get-host~" "host" "let" "view")}
        {Lisp-Entry "on-capture-host" method #f 2414 11 2414 26 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "highlight-root-only?:" "highlight:" "capture-host" "pos" "view" "lambda" "click:" "pick-figure" "evt")}
        {Lisp-Entry "on-capture-mouse-host" method #f 2424 11 2424 32 ("capture-host" "bell" "not" "if" "mouse-view" "view" "let" "evt")}
        {Lisp-Entry "capture-host" definition #f 2431 15 2431 27 ("export-picture" "export-picture~" "bell" "not" "if" "get-host" "get-host~" "host" "let" "view")}
        {Lisp-Entry "update-windowing-actions" method #f 2443 26 2443 50 ("update-menubar-buttons" "update-window-actions" "update-history-actions" "exiting-process?" "unless")}
        {Lisp-Entry "update-window-actions" method #f 2450 18 2450 39 ("tile-vertically" "tile-horizontally" "previous-stage" "next-stage" "current-frame" "previous-frame" "2" "next-frame" "print" "print-preview" "print-layout" "page-setup" "compare-saved" "revert-saved" "save-all" "save-as" "save" "guest" "close-all" "not" "1" ">=" "and" "close" "application" "Action" "set-action-enabled?" "in-modal?" "get-active-stages" "stages" "current-stage-frames" "frames" "length" "all-frames" "let")}
        {Lisp-Entry "on-next-frame" method #f 2475 27 2475 40 ("front-frame" "focus-host" "focus-host~" "send-to-back" "send-to-back~" "first-frame" "first" "let" "evt")}
        {Lisp-Entry "on-previous-frame" method #f 2481 27 2481 44 ("front-frame" "focus-host" "focus-host~" "bring-to-front" "bring-to-front~" "last-frame" "last" "let" "evt")}
        {Lisp-Entry "on-current-frame" method #f 2487 27 2487 43 ("focus-host" "focus-host~" "first-frame" "first" "let" "evt")}
        {Lisp-Entry "on-next-stage" method #f 2492 19 2492 32 ("navigate-next-stage" "evt")}
        {Lisp-Entry "on-previous-stage" method #f 2496 19 2496 36 ("navigate-previous-stage" "evt")}
        {Lisp-Entry "on-tile-horizontally" method #f 2500 27 2500 47 ("increase!" "Dimension" "set-size" "set-size~" "Point" "new" "set-position" "set-position~" "frame" "for-each" "restore" "restore~" "lambda" "with-locked-update" "0" "l" "quotient" "w" "get-height" "get-height~" "height" "get-width" "get-width~" "width" "length" "count" "get-views" "get-views~" "frames" "current-stage" "stage" "let*" "evt")}
        {Lisp-Entry "on-tile-vertically" method #f 2518 27 2518 45 ("increase!" "Dimension" "set-size" "set-size~" "Point" "new" "set-position" "set-position~" "frame" "for-each" "restore" "restore~" "lambda" "with-locked-update" "0" "t" "quotient" "h" "get-height" "get-height~" "height" "get-width" "get-width~" "width" "length" "count" "get-views" "get-views~" "frames" "current-stage" "stage" "let*" "evt")}
        {Lisp-Entry "on-select-frame" method #f 2536 19 2536 34 ("focus-host" "focus-host~" "bring-to-front" "bring-to-front~" "host:" "get-property" "get-property~" "host" "let" "evt")}
        {Lisp-Entry "on-select-palette" method #f 2542 19 2542 36 ("get-player" "get-player~" "bring-to-front" "bring-to-front~" "host:" "get-property" "get-property~" "host" "let" "evt")}
        {Lisp-Entry "update-modal-actions" method #f 2552 27 2552 47 ("update-windowing-actions")}}
      {Lisp-Entry "Default-Workspace" class #f 2561 7 2561 24 ("Workspace-Preferences")
        {Lisp-Entry "form" anonymous #f 2564 3 2564 7 ("root" "location:" "Stage-Preferences" "<Stage-Preferences>" "fullscreen?:" "install" "<install>")}}}})
"Application-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "application" "Application-Actions.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.application.Application-Actions" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.system.application" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Application-Actions" class #f 46 20 46 39 ("Orphaned-Actions")
        {Lisp-Entry "form" anonymous #f 49 3 49 7 ("on-about" "about" "on-tile-vertically" "tile-vertically" "on-tile-horizontally" "tile-horizontally" "on-previous-stage" "previous-stage" "on-next-stage" "next-stage" "on-current-frame" "current-frame" "on-previous-frame" "previous-frame" "on-next-frame" "next-frame" "on-previous-workspace" "previous-workspace" "F6" "on-next-workspace" "next-workspace" "on-clone-frame" "clone-frame" "on-move-frame" "move-frame" "on-split-horizontally" "split-horizontally" "on-split-vertically" "split-vertically" "on-delete-other-stages" "delete-others" "on-delete-stage" "delete" "Backspace" "on-full-screen" "full-screen" "on-maximize/restore" "maximize/restore" "Space" "on-zoom-vertically" "zoom-vertically" "Return" "on-zoom-horizontally" "zoom-horizontally" "on-previous-search" "previous-search" "on-replace-selected" "replace-selected" "on-edit-current" "edit-current" "on-edit-previous" "edit-previous" "F4" "on-edit-next" "edit-next" "on-replace-all" "replace-all" "on-replace&find-forward" "replace&find-forward" "on-replace" "replace" "on-find-backward" "find-backward" "alternate-shortcut:" "F3" "on-find-forward" "find-forward" "on-find-in-user" "find-in-user" "on-find-in-directories" "find-in-directories" "on-find-in-projects" "find-in-projects" ":shift" "on-find-in-text" "find-in-text" "on-find" "find" "on-forward-history" "forward-history" "on-backward-history" "backward-history" "on-add-history" "add-history" "on-paste-cycle-stack-reversed" "paste-cycle-stack-reversed" "on-paste-cycle-stack" "paste-cycle-stack" "on-copy-formatted" "copy-formatted" "on-quit-application" "exit" "on-page-setup" "page-setup" "on-print-preview" "print-preview" "on-print-layout" "print-layout" "on-print" "print" "on-save-all" "save-all" "on-close-all" "close-all" "on-close" "close" "on-open" "open" ":alt" ":control" "Shortcut" "shortcut:" "on-new" ":application" "Event-Handler" "action-handler:" "new" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Application-Bindings"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "application" "Application-Bindings.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.application.Application-Bindings" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.system.application" "jazz.jml")}
      {Lisp-Entry "Application-Bindings" class #f 45 20 45 40 ("Bindings")
        {Lisp-Entry "form" anonymous #f 48 3 48 7 ("guest" "Guest-Actions" "<Guest-Actions>" "menu" "Menu-Actions" "<Menu-Actions>" "menubar" "Menubar-Actions" "<Menubar-Actions>" "tree" "Tree-Actions" "<Tree-Actions>" "formatted-text" "Formatted-Text-Actions" "<Formatted-Text-Actions>" "text" "Text-Actions" "<Text-Actions>" "view" "View-Actions" "<View-Actions>" "application" "name:" "Application-Actions" "<Application-Actions>" "install" "<install>")}}}})
"Application-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "application" "Application-Event.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.application.Application-Event" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Application-Event" class #f 43 7 43 24 ("Event")}}})
"Application-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "application" "Application-Preferences.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.application.Application-Preferences" module #f 37 18 37 65 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.system.process" "jazz.system.application" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Application-Preferences" class #f 47 20 47 43 ("initialize" "Process-Preferences")
        {Lisp-Entry "toplevel-title" property #f 50 12 50 26 ()}
        {Lisp-Entry "get-toplevel-title" accessor #f 50 56 50 64 ()}
        {Lisp-Entry "set-toplevel-title" accessor #f 50 56 50 64 ()}
        {Lisp-Entry "toplevel-state" property #f 51 12 51 26 ()}
        {Lisp-Entry "get-toplevel-state" accessor #f 51 56 51 64 ()}
        {Lisp-Entry "set-toplevel-state" accessor #f 51 56 51 64 ()}
        {Lisp-Entry "toplevel-position" property #f 52 12 52 29 ()}
        {Lisp-Entry "get-toplevel-position" accessor #f 52 56 52 64 ()}
        {Lisp-Entry "set-toplevel-position" accessor #f 52 56 52 64 ()}
        {Lisp-Entry "toplevel-size" property #f 53 12 53 25 ()}
        {Lisp-Entry "get-toplevel-size" accessor #f 53 56 53 64 ()}
        {Lisp-Entry "set-toplevel-size" accessor #f 53 56 53 64 ()}
        {Lisp-Entry "catalog-types" property #f 54 12 54 25 ()}
        {Lisp-Entry "get-catalog-types" accessor #f 54 56 54 64 ()}
        {Lisp-Entry "set-catalog-types" accessor #f 54 56 54 64 ()}
        {Lisp-Entry "documented?" property #f 55 12 55 23 ()}
        {Lisp-Entry "get-documented?" accessor #f 55 56 55 64 ()}
        {Lisp-Entry "set-documented?" accessor #f 55 56 55 64 ()}
        {Lisp-Entry "fullscreen-warned?" property #f 56 12 56 30 ()}
        {Lisp-Entry "get-fullscreen-warned?" accessor #f 56 56 56 64 ()}
        {Lisp-Entry "set-fullscreen-warned?" accessor #f 56 56 56 64 ()}
        {Lisp-Entry "active-bindings" property #f 57 12 57 27 ()}
        {Lisp-Entry "get-active-bindings" accessor #f 57 56 57 64 ()}
        {Lisp-Entry "set-active-bindings" accessor #f 57 56 57 64 ()}
        {Lisp-Entry "toolbar-classes" property #f 58 12 58 27 ()}
        {Lisp-Entry "get-toolbar-classes" accessor #f 58 56 58 64 ()}
        {Lisp-Entry "set-toolbar-classes" accessor #f 58 56 58 64 ()}
        {Lisp-Entry "form" anonymous #f 61 3 61 7 ("interface" "Interface-Preferences" "<Interface-Preferences>" "tools" "Tools-Preferences" "<Tools-Preferences>" "documents" "Documents-Preferences" "<Documents-Preferences>" "fonts" "Fonts-Preferences" "<Fonts-Preferences>" "favorites" "Favorites-Preferences" "<Favorites-Preferences>" "aliases" "name:" "Aliases-Preferences" "<Aliases-Preferences>" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method #f 76 25 76 45 ("Application-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 85 11 85 17 ()
        {Lisp-Entry "import" anonymous #f 88 1 88 7 ("jazz.designer")}
        {Lisp-Entry "Application-Preferences-Descriptor" class #f 91 7 91 41 ("Process-Preferences-Descriptor")
          {Lisp-Entry "form" anonymous #f 94 3 94 7 ("Toolbar-Classes-Domain" "<Toolbar-Classes-Domain>" "toolbar-classes" "active-bindings" "fullscreen-warned?" "Boolean-Domain" "<Boolean-Domain>" "toplevel-size" "toplevel-position" "domain" "String-Domain" "<String-Domain>" "name:" "Property-Descriptor" "<Property-Descriptor>" "documented?" "catalog-types" "toplevel-state" "toplevel-title" "protocols" "current-directory" "active-context" "categorized:" ">" "<properties" "<properties~>" "install" "<install>")}}
        {Lisp-Entry "Toolbar-Classes-Domain" class #f 116 7 116 29 ("List-Domain")
          {Lisp-Entry "finish" method #f 119 20 119 26 ("Toolbar-Class-Domain" "new" "domain" "set!" "nextmethod" "rest")}
          {Lisp-Entry "add-value" method #f 125 20 125 29 ("class:" "cdr" "car" "self" "add-row" "class" "value")}
          {Lisp-Entry "new-value" method #f 130 20 130 29 ()}}
        {Lisp-Entry "Toolbar-Class-Domain" class #f 139 7 139 27 ("Value-Domain")
          {Lisp-Entry "present" method #f 147 20 147 27 ("format" "model")}}}}})
"Command-Line"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "process" "Command-Line.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.process.Command-Line" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Command-Line" class #f 40 20 40 32 ("Object")}
      {Lisp-Entry "Command-Line" class #f 46 20 46 32 ("Object")
        {Lisp-Entry "for-each-action" method #f 54 23 54 38 ("argument-example" "bind-optionals" "rest" "argument-help" "argument" "arguments" "section" "list" "sections" "action-help" "action" "bind" "info" "lambda" "for-each" "actions" "proc")}
        {Lisp-Entry "present-version" method #f 75 16 75 31 ("present" "present~" "format" "version" "name")}
        {Lisp-Entry "present-syntax" method #f 81 16 81 30 ("format" "name")}
        {Lisp-Entry "present-help" method #f 86 16 86 28 ("get-output-string" "argument-example" "bind-optionals" "rest" "argument-help" "argument" "section" "format" "action-help" "bind" "action" "case" "info" "type" "lambda" "for-each-action" "open-output-string" "output" "let" "actions")}
        {Lisp-Entry "present-examples" method #f 105 16 105 32 ("get-output-string" "present-argument-value" "when" "argument-example" "bind-optionals" "rest" "argument-help" "argument" "get-process" "process-name" "process-name~" "format" "action-help" "bind" "action" "case" "info" "type" "lambda" "for-each-action" "open-output-string" "output" "let" "actions")}
        {Lisp-Entry "present-argument-value" method #f 122 16 122 38 ("format" "string?" "if" "value")}
        {Lisp-Entry "command-help" method #f 128 23 128 35 ("title:" "present-examples" "present-help" "present-syntax" "present-version" "format" "message-box" "actions" "version" "name")}}}})
"Exception-Presenter"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "application" "Exception-Presenter.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.application.Exception-Presenter" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Exception-Presenter" class #f 45 20 45 39 ("Object")}
      {Lisp-Entry "Exception-Presenter" class #f 51 20 51 39 ("Object")
        {Lisp-Entry "present" method #f 54 18 54 25 ("set-auto-continue?" "set-auto-continue?~" "remove-false" "actions:" "present-execution-stack" "content:" "message-box" "code" "let" "continue-exception" "get-continuable?" "get-continuable?~" "get-auto-continue?" "get-auto-continue?~" "and" "get-execution-stack" "execution-stack" "get-execution-context" "execution-context" "cancel" "cancel-action" "continue-all" "continue-all-action" "continue" "continue-action" "restart" "restart-action" "yes" "else" "if" "case" "list" "yes-action" "continuable?" "restartable?" "present-message" "present-message~" "message" "let*" "prefix?" "prefix?:" "error" "type" "type:" "exception")}
        {Lisp-Entry "present-execution-stack" method #f 86 11 86 34 ("father:" "detail" "Image-Resource" "image:" "or" "title:" "Tree-Node" "list" "children:" "collapsed" "state:" "add-row" "add-row~" "row" "get-details" "get-details~" "details" "get-title" "get-title~" "title" "node" "lambda" "for-each" "locate" "locate~" "tree" "150" "450" "Dimension" "size:" "Context-Border" "new" "border" "let*" "when" "execution-stack")}}
      {Lisp-Entry "Context-Border" class #f 106 7 106 21 ("Border-View")
        {Lisp-Entry "form" anonymous #f 109 3 109 7 ("300" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" "node" "selection-mode:" ":images" "portfolio:" "tree" "Context-Tree" "<Context-Tree>" "Tree-Header" "<Tree-Header>" "fill" "layout-type:" "content" "name:" "!" "<!>" "vscroll?:" "hscroll?:" "tool" "style:" "Scroller-View" "<Scroller-View>" "Outline-Border" "Color" "border-color:" "solid" "border-type:" "install" "<install>")}}
      {Lisp-Entry "Context-Tree" class #f 124 7 124 19 ("Tree-View")}}})
"Exit-Listener"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "process" "Exit-Listener.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.process.Exit-Listener" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.system.process")}
      {Lisp-Entry "Exit-Listener" interface #f 44 24 44 37 ("Listener")
        {Lisp-Entry "prepare-exit" method #f 47 35 47 47 ()}}}})
"Performance-Query"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "performance" "platform" "windows" "Performance-Query.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.performance.platform.windows.Performance-Query" module #f 37 18 37 76 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.system" "jazz.platform")}
      {Lisp-Entry "Performance-Query" class #f 44 7 44 24 ("Object")
        {Lisp-Entry "query" slot #f 47 8 47 13 ()}
        {Lisp-Entry "initialize" method #f 50 11 50 21 ("destroy-mandatory" "self" "query~self" "set!" "validate-status" "0" "NULL" "PdhOpenQuery" "query" "status" "receive" "nextmethod")}
        {Lisp-Entry "destroy" method #f 58 11 58 18 ("nextmethod" "query" "PdhCloseQuery" "validate-status")}
        {Lisp-Entry "add-counter" method #f 63 18 63 29 ("validate-status" "0" "query" "PdhAddCounter" "counter" "status" "receive" "let" "bind-keywords" "BrowseCounterPath" "error" "else" "guess-process-instance" "module-base" ":string" "format" "and" "browse-counter-path" "cond" "browse?" "counter-name" "object-name" "path" "counter-path" "define" "rest")}
        {Lisp-Entry "collect-data" method #f 82 18 82 30 ("query" "PdhCollectQueryData" "validate-status")}
        {Lisp-Entry "get-counter-value" method #f 86 18 86 35 ("PDH_FMT_COUNTERVALUE-free" "PDH_FMT_COUNTERVALUE-longValue-ref" "prog1" "NULL" "PDH_FMT_LONG" "PdhGetFormattedCounterValue" "validate-status" "PDH_FMT_COUNTERVALUE-make" "value" "let" "counter")}
        {Lisp-Entry "validate-status" method #f 93 11 93 26 ("error" "0" "/=" "when" "status")}}}})
"Process"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "process" "Process.jazz"} 240458554. jazz
    {Lisp-Entry "jazz.system.process.Process" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.system.process.stub" "jazz.system.process" "jazz.system" "jazz.runtime" "jazz.profile" "jazz.platform.crash" "jazz.platform" "jazz.network" "jazz.library.component" "jazz.library" "jazz.jrm.register.stub" "jazz.jrm" "jazz.io" "jazz.designer" "jazz.debuggee")}
      {Lisp-Entry "Process" class #f 57 7 57 14 ("initialize" "Object")
        {Lisp-Entry "profile-class" slot #f 60 8 60 21 ()}
        {Lisp-Entry "profile" slot #f 61 8 61 15 ()}
        {Lisp-Entry "get-profile" accessor #f 61 50 61 58 ()}
        {Lisp-Entry "settings" slot #f 62 8 62 16 ()}
        {Lisp-Entry "get-settings" accessor #f 62 50 62 58 ()}
        {Lisp-Entry "preferences-designer" slot #f 63 8 63 28 ()}
        {Lisp-Entry "get-preferences-designer" accessor #f 63 50 63 58 ()}
        {Lisp-Entry "context" slot #f 64 8 64 15 ()}
        {Lisp-Entry "exit-continuation" slot #f 65 8 65 25 ()}
        {Lisp-Entry "process-name" method #f 73 26 73 38 ()}
        {Lisp-Entry "process-owner" method #f 77 26 77 39 ()}
        {Lisp-Entry "process-copyright" method #f 81 26 81 43 ()}
        {Lisp-Entry "process-licensee" method #f 85 26 85 42 ()}
        {Lisp-Entry "process-icon" method #f 89 26 89 38 ()}
        {Lisp-Entry "process-version" method #f 93 26 93 41 ("0" "1" "Version")}
        {Lisp-Entry "process-email" method #f 97 26 97 39 ()}
        {Lisp-Entry "process-actions" method #f 101 26 101 41 ()}
        {Lisp-Entry "process-event-source" method #f 105 26 105 46 ("process-name" "EventSource" "string-parameter" "or")}
        {Lisp-Entry "is-application?" method #f 110 26 110 41 ()}
        {Lisp-Entry "boot-environment" method #f 119 26 119 42 ("run-loop" "format" "system-message" "get-load-stack" "not-null?" "get-load-thread" "current-thread" "eq?" "and" "run-loop?" "when" "start-process" "ready-debuggee" "activate-process" "conclude-phase" "finish-phase" "finalize-phase" "install-phase" "prepare-phase" "register-versions" "initialize-settings" "initialize-aliases" "update-debuggee" "signal" "Cancel-Signal" "catch")}
        {Lisp-Entry "update-debuggee" method #f 142 11 142 26 ("update-debuggee-process" "process-version" "present" "present~" "current-process-version-set!" "process-name" "current-process-title-set!" "current-process-title" "unless")}
        {Lisp-Entry "initialize-settings" method #f 149 29 149 48 ()}
        {Lisp-Entry "settings-version" method #f 153 29 153 45 ()}
        {Lisp-Entry "register-versions" method #f 157 11 157 28 ("get-windows-version" "present" "present~" "windows-version:" "register-crash-info")}
        {Lisp-Entry "prepare-phase" method #f 162 11 162 24 ("prepare-process" "prepare-workbench" "prepare-preferences-aliases" "prepare-preferences" "prepare-environment" "login-profile" "prepare-profile" "prepare-system" "prepare-aliases" "prepare-bindings" "prepare-settings")}
        {Lisp-Entry "prepare-settings" method #f 176 29 176 45 ("use-print?")}
        {Lisp-Entry "prepare-system" method #f 180 29 180 43 ("initialize-system" "self" "set-process")}
        {Lisp-Entry "prepare-profile" method #f 185 29 185 44 ()}
        {Lisp-Entry "prepare-environment" method #f 189 29 189 48 ()}
        {Lisp-Entry "prepare-preferences" method #f 193 11 193 30 ("setup-preferences")}
        {Lisp-Entry "prepare-process" method #f 197 26 197 41 ("setup-crash-handler")}
        {Lisp-Entry "install-phase" method #f 201 11 201 24 ("install-process" "install-environment")}
        {Lisp-Entry "install-environment" method #f 206 29 206 48 ()}
        {Lisp-Entry "install-process" method #f 210 26 210 41 ("initialize-platform")}
        {Lisp-Entry "finalize-phase" method #f 214 11 214 25 ("setup-profile" "finalize-process" "start-servers" "finalize-environment")}
        {Lisp-Entry "finalize-environment" method #f 221 29 221 49 ()}
        {Lisp-Entry "finalize-process" method #f 225 26 225 42 ()}
        {Lisp-Entry "setup-profile" method #f 229 26 229 39 ("use-profile?" "and" "when" "profile-class" "load-profile-class" "new" "profile" "set!" "create-profile" "define")}
        {Lisp-Entry "finish-phase" method #f 237 11 237 23 ("finish-process" "finish-environment")}
        {Lisp-Entry "finish-environment" method #f 242 29 242 47 ("register-base-objects")}
        {Lisp-Entry "finish-process" method #f 246 26 246 40 ()}
        {Lisp-Entry "conclude-phase" method #f 250 11 250 25 ("conclude-process" "conclude-environment")}
        {Lisp-Entry "conclude-environment" method #f 255 29 255 49 ()}
        {Lisp-Entry "conclude-process" method #f 259 26 259 42 ("get-console-port" "current-thread" "start-repl-thread" "select-console" "get-controller-debugger" "when")}
        {Lisp-Entry "start-process" method #f 265 29 265 42 ()}
        {Lisp-Entry "terminate-process" method #f 274 29 274 46 ()}
        {Lisp-Entry "preserve-environment" method #f 283 26 283 46 ()}
        {Lisp-Entry "close-environment" method #f 287 26 287 43 ("stop-servers" "detach-from-controller" "reloading-process?" "unless" "persist-preferences")}
        {Lisp-Entry "persist-preferences" method #f 294 11 294 30 ("save" "save~" "get-form" "get-form~" "get-origin" "get-origin~" "file?" "persist-preferences?" "preferences-designer" "and" "when")}
        {Lisp-Entry "login-profile" method #f 304 29 304 42 ("log-profile" "install-profiles" "use-profile?" "when")}
        {Lisp-Entry "use-profile?" method #f 310 29 310 41 ()}
        {Lisp-Entry "install-profiles" method #f 314 29 314 45 ()}
        {Lisp-Entry "log-profile" method #f 318 29 318 40 ("compose-identifier" "set!" "receive" "profile-arg" "->string" "capitalize" "when" "string-parameter" "profile" "profile-parameter" "values" "jazz" "downcase" "format" "unit-name" "string->symbol" "title" "standard-profile" "get-parent" "get-parent~" "get-list" "get-list~" "Profile" "register-alias" "profile-class" "find-unit-source" "source" "let" "bindings" "unit" "name" "install-profile" "define")}
        {Lisp-Entry "get-toplevel" method #f 346 26 346 38 ()}
        {Lisp-Entry "exit-process" method #f 355 18 355 30 ("exit" "continuation-return" "exit-continuation" "if" "unload-process" "0" "status")}
        {Lisp-Entry "reload-process" method #f 362 26 362 40 ("boot-environment" "exit-continuation" "continuation-graft" "unload-process" "*reloading-process?*" "parameterize" "lambda" "reload-process" "primordial-thread" "thread-execute")}
        {Lisp-Entry "unload-process" method #f 370 11 370 25 ("set-process" "terminate-process" "close-environment" "preserve-environment" "*exiting-process?*" "parameterize")}
        {Lisp-Entry "process-alias" method #f 383 26 383 39 ("find-component" "find-component~" "null?" "cdr" "next" "when" "car" "process-alias" "sub" "let" "pair?" "if" "else" "profile" ":profile" "self" ":process" "case" "name")}
        {Lisp-Entry "get-context" method #f 403 18 403 29 ("context")}
        {Lisp-Entry "set-context" method #f 407 18 407 29 ("context-update" "context" "set!" "ctx")}
        {Lisp-Entry "context-update" method #f 417 29 417 43 ("set-client" "set-client~" "get-client" "get-client~" "client" "editor" "Toolbox-Manager" "modify-toolbox" "singleton-docked" "get-guest" "get-guest~" "modify-editor" "SQL-Connections-Manager" "in-manifest?" "when" "modify-connections" "set-active-trait" "set-active-trait~" "context" "find-component" "find-component~" "trait" "get-preferences-designer" "designer" "get-preferences" "pref" "let*" "modify-preferences" "define")}
        {Lisp-Entry "install-context" method #f 446 18 446 33 ("set-active-trait" "set-active-trait~" "find-child" "find-child~" "trait" "let" "context" "when" "component")}
        {Lisp-Entry "persist-preferences?" method #f 458 29 458 49 ()}
        {Lisp-Entry "preferences-file" method #f 462 29 462 45 ("Profile" "File")}
        {Lisp-Entry "setup-preferences" method #f 466 29 466 46 ("setup-preferences/designer")}
        {Lisp-Entry "setup-preferences/designer" method #f 470 11 470 37 ("set-current-directory" "exists?" "exists?~" "and" "when" "get-current-directory" "get-current-directory~" "directory" "install-context" "context" "set!" "else" "get-active-context" "get-active-context~" "string->symbol" "cond" "command-argument" "arg" "preferences-context" "define" "get-preferences-root" "root" "let" "load-preferences" "set-preferences/designer")}
        {Lisp-Entry "set-preferences/designer" method #f 486 11 486 35 ("reference:" "get-form" "get-form~" "form:" "Designer" "new" "preferences-designer" "set!" "preferences")}
        {Lisp-Entry "load-preferences" method #f 490 29 490 45 ("default-preferences" "read-form" "instantiate" "instantiate~" "exists?" "exists?~" "Profile" "is-alias?" "and" "if" "preferences-file" "file" "persist-preferences?" "persist?" "let")}
        {Lisp-Entry "default-preferences" method #f 498 29 498 48 ("Process-Preferences" "new")}
        {Lisp-Entry "apply-preferences" method #f 502 18 502 35 ("apply-preferences" "apply-preferences~" "client" "preferences")}
        {Lisp-Entry "save-preferences" method #f 506 18 506 34 ("get-preferences-designer" "save-preferences" "save-preferences~" "client" "preferences")}
        {Lisp-Entry "set-preferences-property" method #f 510 18 510 42 ("get-preferences-designer" "set-property" "set-property~" "value" "property" "preferences")}
        {Lisp-Entry "get-preferences-rights" method #f 514 26 514 48 ()}
        {Lisp-Entry "persist-usernames?" method #f 523 26 523 44 ()}
        {Lisp-Entry "persist-passwords?" method #f 527 26 527 44 ()}
        {Lisp-Entry "mandatory-version" method #f 536 26 536 43 ("what")}
        {Lisp-Entry "signal-readyness" method #f 546 21 546 37 ("SetEvent" "when" "EVENT_MODIFY_STATE" "OpenEvent" "handle" "let" "name")}
        {Lisp-Entry "run-loop" method #f 557 26 557 34 ("start-loop" "with-current-loop" "with-repl-context" "exit-continuation" "set!" "cont" "lambda" "continuation-capture")}
        {Lisp-Entry "resume-loop" method #f 568 18 568 29 ("invoke-restart" "resume-loop-action" "when" "resume-loop" "find-restart" "restart" "let")}
        {Lisp-Entry "resume-loop-action" method #f 575 26 575 44 ()}
        {Lisp-Entry "start-loop" method #f 579 26 579 36 ("get-exception-debugger" "with-exception-debugger" "thread-read" "thunk" "lambda" "present-current-loop-restart" "resume-loop" "with-restart-catcher" "loop" "let" "proper-tail-calls" "declare")}
        {Lisp-Entry "system-title" method #f 595 26 595 38 ()}
        {Lisp-Entry "prepare-bindings" method #f 604 29 604 45 ()}
        {Lisp-Entry "prepare-aliases" method #f 613 29 613 44 ()}
        {Lisp-Entry "prepare-preferences-aliases" method #f 617 26 617 53 ("get-list" "get-list~" "register-alias" "get-directory" "get-directory~" "directory" "get-alias" "get-alias~" "alias" "lambda" "for-each" "get-children" "get-children~" "when" "error?:" "aliases" "get-preferences" "pref" "let")}
        {Lisp-Entry "resolve-alias" method #f 629 26 629 39 ("name")}
        {Lisp-Entry "prepare-workbench" method #f 638 26 638 43 ()}
        {Lisp-Entry "start-servers" method #f 647 29 647 42 ("start-remote-server" "or" "when" "command-host/service" "service" "host" "receive")}
        {Lisp-Entry "start-remote-server" method #f 654 19 654 38 ("default-listener-service" "default-service:" "default-listener-host" "default-host:" "start-remote-listener")}
        {Lisp-Entry "default-listener-host" method #f 658 29 658 50 ()}
        {Lisp-Entry "default-listener-service" method #f 662 29 662 53 ()}
        {Lisp-Entry "stop-servers" method #f 666 29 666 41 ("stop-remote-listener")}
        {Lisp-Entry "get-name" method #f 675 18 675 26 ("process-name")}
        {Lisp-Entry "get-icon" method #f 679 18 679 26 ("process-icon")}
        {Lisp-Entry "get-register" method #f 683 18 683 30 ("get-local-register")}
        {Lisp-Entry "register-base-objects" method #f 692 29 692 50 ()}
        {Lisp-Entry "get-local-debugger" method #f 701 26 701 44 ()}
        {Lisp-Entry "get-snapshot-debugger" method #f 705 26 705 47 ()}
        {Lisp-Entry "initial-console-context" method #f 714 26 714 49 (":process")}
        {Lisp-Entry "process-debuggee-loop" method #f 718 29 718 50 ("debuggee-loop")}
        {Lisp-Entry "get-remote-profile" method #f 727 26 727 44 ("name")}}}})
"Process-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "process" "Process-Preferences.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.process.Process-Preferences" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.system.process" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Process-Preferences" class #f 46 20 46 39 ("initialize" "Preferences")
        {Lisp-Entry "active-context" property #f 49 12 49 26 ()}
        {Lisp-Entry "get-active-context" accessor #f 49 55 49 63 ()}
        {Lisp-Entry "set-active-context" accessor #f 49 55 49 63 ()}
        {Lisp-Entry "current-directory" property #f 50 12 50 29 ()}
        {Lisp-Entry "get-current-directory" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "set-current-directory" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "protocols" property #f 51 12 51 21 ()}
        {Lisp-Entry "get-protocols" accessor #f 51 55 51 63 ()}
        {Lisp-Entry "set-protocols" accessor #f 51 55 51 63 ()}
        {Lisp-Entry "form" anonymous #f 54 3 54 7 ("title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method #f 63 25 63 45 ("Process-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 72 11 72 17 ()
        {Lisp-Entry "import" anonymous #f 75 1 75 7 ("jazz.designer")}
        {Lisp-Entry "Process-Preferences-Descriptor" class #f 78 7 78 37 ("Preferences-Descriptor")
          {Lisp-Entry "form" anonymous #f 81 3 81 7 ("domain" "Protocols-Domain" "<Protocols-Domain>" "protocols" "current-directory" "active-context" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "can-copy?:" "can-move?:" "can-delete?:" "can-rename?:" "install" "<install>")}}
        {Lisp-Entry "Protocols-Domain" class #f 95 7 95 23 ("List-Domain")
          {Lisp-Entry "finish" method #f 98 20 98 26 ("Protocol-Domain" "new" "domain" "set!" "nextmethod" "rest")}
          {Lisp-Entry "add-value" method #f 104 20 104 29 ("class:" "cdr" "car" "self" "add-row" "class" "value")}
          {Lisp-Entry "new-value" method #f 109 20 109 29 ("cons")}}
        {Lisp-Entry "Protocol-Domain" class #f 118 7 118 22 ("Value-Domain")
          {Lisp-Entry "present" method #f 126 20 126 27 ("format" "model")}}}}})
"Save-Environment-Listener"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "process" "Save-Environment-Listener.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.process.Save-Environment-Listener" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.ui" "jazz.system.process")}
      {Lisp-Entry "Save-Environment-Listener" interface #f 44 24 44 49 ("Listener")
        {Lisp-Entry "save-environment" method #f 47 35 47 51 ()}}}})
"Service"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "service" "platform" "windows" "Service.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.service.platform.windows.Service" module #f 38 18 38 62 ("MENUITEMINFO-free" "MF_SEPARATOR" "InsertMenuItem" "length" "cch" "dwTypeData" "wID" "MFS_DEFAULT" "fState" "MFT_STRING" "MFT_SEPARATOR" "fType" "MIIM_ID" "MIIM_STATE" "MIIM_TYPE" "fMask" "MENUITEMINFO" "info" "DestroyMenu" "invoke-handler" ":action" "Event" "apply" "evt" "get-properties" "get-properties~" "properties" "sender" "action-handler:" "getf" "action-handler" "-" "element" "y" "x" "get" "TPM_RETURNCMD" "TPM_RIGHTALIGN" "TrackPopupMenu" "SetForegroundWindow" "increase!" "id:" "default?:" "separator?:" "title:" "insert-item" "others" "default?" "separator?" "title" "bind-keywords" "for-each" "id" "CreatePopupMenu" "menu" "POINT-free" "GetCursorPos" "POINT" "point" "config" "track-menu" "NIM_DELETE" "NIM_ADD" "Shell_NotifyIcon" "uCallbackMessage" "NIF_ICON" "NIF_MESSAGE" "bitwise-ior" "uFlags" "10" "uID" "hWnd" "size-of" "cbSize" "LR_SHARED" "16" "IMAGE_ICON" "int-resource" "LoadImage" "icon" "resource" "NOTIFYICONDATA" "record" "100" "CreateWindowEx" "create-taskicon-hwnd" "RegisterClassEx" "lpszClassName" "lpszMenuName" "hbrBackground" "hCursor" "hIcon" "hInstance" "cbWndExtra" "cbClsExtra" "get-window-proc" "lpfnWndProc" "CS_DBLCLKS" "style" "set" "WNDCLASSEX" "wc" "current-instance" "instance" "taskicon-class" "taskbar-context-menu" "WM_RBUTTONDOWN" "taskbar-double-click" "WM_LBUTTONDBLCLK" "taskbar-mouse-down" "WM_LBUTTONDOWN" ":service" "process-alias" "EXIT_FAILURE" "exception:" "file:" "dump-stack" "distribution-build?" "not" "timestamped-file" "file" "exception-reason" "log-error-event" "accountable" "frame" "exception" "debug-exception" "DefWindowProc" "taskbar-event" "JZ_TASKICON" "lparam" "wparam" "hwnd" "DispatchMessage" "TranslateMessage" "GetMessage" "MSG" "msg" "NULL" "WM_QUIT" "PostMessage" "thread" "lambda" "execute:" "self" "context:" "name:" "Thread" "unimplemented" "process-messages" "launch-service-thread" "start-loop" "1" "sleep" "while" "process-service" "setup-service" "run-service" "=" "if" "get-service-error" "get-service-handle" "coinitialize" "service-main" "0" "/=" "start-service-dispatcher" "err" "run-loop" "log-success-event" "stop-service" "pause-service" "continue-service" "start-service" "neq?" "updated-state" "process-service-control" "get-service-state" "ecase" "get-state" "SERVICE_STOPPED" "stopped" "SERVICE_STOP_PENDING" "stop-pending" "SERVICE_PAUSED" "paused" "SERVICE_PAUSE_PENDING" "pause-pending" "SERVICE_RUNNING" "running" "SERVICE_CONTINUE_PENDING" "continue-pending" "SERVICE_START_PENDING" "start-pending" "case" "set-service-state" "state" "set-state" "public" "delete-service" "delete-service~" "open-service" "open-service~" "presentation:" "create-service" "create-service~" "handle" "command" "executable" "Service-Manager" "new" "manager" "parse" "parse~" "application-key" "Build" "Directory" "new-file" "new-file~" "message-file" "application-path" "presentation" "let*" "messages" "set-value" "set-value~" "create-key" "create-key~" "service-key" "with" "format" "service-path" "Registry" "Local-Machine" "local-machine-key" "description" "name" "service-icon" "service-executable" "service-messages" "service-description" "service-name" "virtual" "protected" "service-presentation" "EventSource" "string-parameter" "process-event-source" "remove-taskicon" "and" "close-environment" "add-taskicon" "process-taskbar-message" "set-window-callback" "register-taskicon-class" "eq?" "when" "finalize-process" "error" "else" "debug" "run" "set!" "unregister-service" "register-service" "EXIT_SUCCESS" "exit-process" "process-actions" "process-version" "process-name" "Command-Line" "command-help" "command-help~" "ci=?" "null?" "or" "cond" "command-action" "action" "let" "nextmethod" "prepare-process" "method" "taskicon-hwnd" "initialize" "cached-state" "mode" "slot" "Process" "extends" "Service" "class" "jazz")
      {Lisp-Entry "import" anonymous #f 41 1 41 7 ("jazz.system.process")}
      {Lisp-Entry "Service" class #f 44 7 44 14 ("Process")}}})
"Service-Handle"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "service" "platform" "windows" "Service-Handle.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.service.platform.windows.Service-Handle" module #f 37 18 37 69 ("winerror" "error" "DeleteService" "not" "when" "delete-service" "public" "CloseServiceHandle" "destroy" "destroy-mandatory" "set!" "nextmethod" "hnd" "initialize" "method" "handle" "slot" "Object" "extends" "Service-Handle" "class" "jazz.library" "import" "jazz")
      {Lisp-Entry "Service-Handle" class #f 40 7 40 21 ("Object")}}})
"Service-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "service" "platform" "windows" "Service-Manager.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.service.platform.windows.Service-Manager" module #f 37 18 37 70 ("OpenService" "open-service" "Service-Handle" "new" "=" "SERVICE_ERROR_NORMAL" "SERVICE_DEMAND_START" "SERVICE_WIN32_OWN_PROCESS" "SERVICE_ALL_ACCESS" "or" "CreateService" "service-handle" "presentation" "presentation:" "command" "name" "create-service" "public" "CloseServiceHandle" "destroy" "destroy-mandatory" "set!" "winerror" "error" "not" "if" "SC_MANAGER_ALL_ACCESS" "NULL" "OpenSCManager" "hnd" "let" "nextmethod" "initialize" "method" "handle" "slot" "Object" "extends" "Service-Manager" "class" "jazz.library" "import" "jazz")
      {Lisp-Entry "Service-Manager" class #f 40 7 40 22 ("Object")}}})
"_application"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "application" "_application.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.application" module #f 37 8 37 31 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.system.application.autoload")}}})
"_log"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "log" "_log.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.log" module #f 38 8 38 23 ("jazz")
      {Lisp-Entry "export" anonymous #f 41 1 41 7 ("windows" "cond" "jazz.system.log.platform.windows")}
      {Lisp-Entry "import" anonymous #f 42 1 42 7 ("windows" "cond" "jazz.system.log.platform.windows")}
      {Lisp-Entry "log-event" definition #f 45 20 45 29 ("ReportEvent" "0" "array-set!" "1" "string" "new-array" "strings" "RegisterEventSource" "handle" "get-process" "process-event-source" "process-event-source~" "name" "let*" "log-event" "unimplemented" "message" "event-id" "type")}
      {Lisp-Entry "log-error-event" definition #f 55 20 55 35 ("event-id" "EVENTLOG_ERROR_TYPE" "log-event" "log-error-event" "unimplemented" "rest" "message")}
      {Lisp-Entry "log-success-event" definition #f 61 20 61 37 ("EVENTLOG_SUCCESS" "log-event" "log-success-event" "unimplemented" "1" "make-event-id" "event-id" "event-id:" "message")}}})
"_performance"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "performance" "_performance.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.performance" module #f 37 8 37 31 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("windows" "cond" "jazz.system.performance.platform.windows")}}})
"_process"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "process" "_process.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.process" module #f 37 8 37 27 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("jazz.system.process.autoload")}}})
"_service"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "service" "_service.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.service" module #f 37 8 37 27 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("windows" "cond" "jazz.system.service.platform.windows.service-impl")}}})
"_system"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "_system.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system" module #f 37 8 37 19 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("x11" "jazz.system.platform.x11" "windows" "jazz.system.platform.windows" "carbon" "cond" "jazz.system.platform.carbon" "jazz.system.access")}
      {Lisp-Entry "import" anonymous #f 45 1 45 7 ("profiler" "x11" "jazz.system.platform.x11" "windows" "jazz.system.platform.windows" "carbon" "cond" "jazz.system.platform.carbon" "jazz.system.access" "jazz.platform" "jazz.locale" "jazz.io")}
      {Lisp-Entry "get-argument" definition #f 60 20 60 32 ("error" "specified?" "if" "command-argument" "and" "arg-value" "let" "unspecified" "default" "arg-parser" "arg")}
      {Lisp-Entry "get-parameter" definition #f 74 20 74 33 ("error" "specified?" "neq?" "Not-Found" "get-setting" "setting-value" "if" "command-argument" "and" "arg-value" "let" "unspecified" "default" "setting-parser" "setting" "arg-parser" "arg")}
      {Lisp-Entry "boolean-parameter" definition #f 86 20 86 37 ("identity" "parse-boolean" "get-parameter" "unspecified" "default" "setting" "arg")}
      {Lisp-Entry "integer-parameter" definition #f 90 20 90 37 ("identity" "parse-integer" "get-parameter" "unspecified" "default" "setting" "arg")}
      {Lisp-Entry "string-parameter" definition #f 94 20 94 36 ("identity" "get-parameter" "unspecified" "default" "setting" "arg")}
      {Lisp-Entry "symbol-parameter" definition #f 98 20 98 36 ("identity" "read-string-element" "get-parameter" "unspecified" "default" "setting" "arg")}
      {Lisp-Entry "pathname-argument" definition #f 103 20 103 37 ("length" "-" "1" "subseq" "0" "element" "eqv?" "tokenise-filename" "not" "if" "command-argument" "arg" "let" "name")}
      {Lisp-Entry "file-parameter" definition #f 113 20 113 34 ("identity" "get-parameter" "error" "get-extension" "get-extension~" "/=" "if" "tokenise-filename" "File" "new" "file" "let" "str" "parse-file" "define" "unspecified" "default" "extension" "setting" "arg")}
      {Lisp-Entry "directory-parameter" definition #f 123 20 123 39 ("identity" "get-parameter" "tokenise-filename" "Directory" "new" "str" "parse-directory" "define" "unspecified" "default" "setting" "arg")}
      {Lisp-Entry "host-parameter" definition #f 130 20 130 34 ("string-parameter" "unspecified" "default" "setting" "arg")}
      {Lisp-Entry "service-parameter" definition #f 134 20 134 37 ("integer-parameter" "unspecified" "default" "setting" "arg")}
      {Lisp-Entry "Settings" class #f 143 7 143 15 ("eq?" "test:" "make-table" "initialize" "Object")
        {Lisp-Entry "file" slot #f 146 8 146 12 ()}
        {Lisp-Entry "content" slot #f 147 8 147 15 ()}
        {Lisp-Entry "modified?" slot #f 148 8 148 17 ()}
        {Lisp-Entry "initialize" method #f 151 20 151 30 ("set-file" "nextmethod" "file" "file:")}
        {Lisp-Entry "get-file" method #f 156 18 156 26 ("file")}
        {Lisp-Entry "set-file" method #f 160 18 160 26 ("when" "modified?" "set!" "content" "table-load" "port" "cr-lf" "eol-encoding:" "file" "path-settings" "call-with-input-file" "lambda" "with-jazz-readtable" "load-content" "define" "value")}
        {Lisp-Entry "get-setting" method #f 174 18 174 29 ("content" "table-ref" "default" "setting")}
        {Lisp-Entry "set-setting" method #f 178 18 178 29 ("modified?" "set!" "content" "table-set!" "value" "setting")}
        {Lisp-Entry "save-content" method #f 183 18 183 30 ("modified?" "set!" "-" "format" "value" "setting" "bind" "for-each" "key:" "string<?" "sort" "sorted" "not-null?" "when" "content" "table->list" "all" "let" "output" "file" "path-settings" "call-with-output-file" "car" "symbol->string" "cardinality" "info" "lambda" "map" "max" "apply" "list" "find-longest" "define")}}
      {Lisp-Entry "*settings*" definition #f 207 12 207 22 ()}
      {Lisp-Entry "get-settings" definition #f 211 20 211 32 ("*settings*")}
      {Lisp-Entry "register-settings" definition #f 215 20 215 37 ("cons" "*settings*" "set!" "settings")}
      {Lisp-Entry "Not-Found" definition #f 219 12 219 21 ("not-found" "list")}
      {Lisp-Entry "get-setting" definition #f 223 20 223 31 ("*settings*" "continuation-return" "neq?" "when" "Not-Found" "get-setting" "get-setting~" "value" "let" "settings" "for-each" "return" "lambda" "continuation-capture" "default" "name")}
      {Lisp-Entry "require-setting" definition #f 234 20 234 35 ("error" "get-setting" "or" "name")}
      {Lisp-Entry "require-string-setting" definition #f 239 20 239 42 ("error" "string?" "not" "if" "require-setting" "setting" "let" "name")}
      {Lisp-Entry "get-preferences" definition #f 251 20 251 35 ("find-component" "find-component~" "or" "else" "error" "when" "not" "cond" "get-preferences-root" "root" "let" "error?" "error?:" "name")}
      {Lisp-Entry "get-preferences-root" definition #f 264 20 264 40 ("get-reference" "get-reference~" "when" "get-process" "get-preferences-designer" "get-preferences-designer~" "designer" "let")}
      {Lisp-Entry "set-preference" definition #f 270 20 270 34 ("set-property" "set-property~" "get-process" "get-preferences-designer" "get-preferences-designer~" "designer" "let" "value" "property" "preferences")}
      {Lisp-Entry "sort-case-sensitive?" definition #f 275 20 275 40 ("get-sort-case-sensitive?" "get-sort-case-sensitive?~" "and" "error?:" "tree" "interface" "get-preferences" "pref" "let")}
      {Lisp-Entry "sort-predicates" definition #f 280 20 280 35 ("di>?" "di<?" "di=?" "nu>?" "nu<?" "nu=?" "values" "sort-case-sensitive?" "if")}
      {Lisp-Entry "sort-predicate" definition #f 286 20 286 34 ("error" "else" "ci-compare" "compare" "ci>=?" "nu>=?" "greater/equal" "ci>?" "nu>?" "greater" "ci<=?" "nu<=?" "smaller/equal" "ci<?" "nu<?" "smaller" "ci=?" "nu=?" "if" "equal" "case" "sort-case-sensitive?" "case-sensitive?" "let" "name")}
      {Lisp-Entry "ensure-read/write" definition #f 303 33 303 50 ("throw-cancel" "read/write" "set-read/write~" "cancel" "no" "set-read/write" "yes" "process-keys?:" "question" "type:" "title:" "get-name" "get-name~" "format" "message-box" "case" "code" "no-action" "read/write?" "read/write?~" "exists?" "exists?~" "not" "or" "if" "get-file" "get-file~" "file" "let" "throw" "cancel-action" "cancel-action:" "moniker")}
      {Lisp-Entry "backup-file" definition #f 322 33 322 44 ("separator:" "get-extension" "get-extension~" "get-base" "get-base~" "format" "get-parent" "get-parent~" "new-unique-file" "new-unique-file~" "file")}
      {Lisp-Entry "fail-safe-save" definition #f 326 33 326 47 ("else" "move-pathname" "move-pathname~" "exists?" "exists?~" "error?:" "delete-file" "delete-file~" "not" "cond" "set!" "begin" "unwind-protect" "completed?" "backup-file" "back" "clone-file" "clone-file~" "temp" "let" "fail-safe-save" "unimplemented" "proc" "file")}
      {Lisp-Entry "NoModifiers" definition #f 351 19 351 30 ("0")}
      {Lisp-Entry "Shift-Bit" definition #f 355 12 355 21 ("1")}
      {Lisp-Entry "Control-Bit" definition #f 359 12 359 23 ("2")}
      {Lisp-Entry "Alt-Bit" definition #f 363 12 363 19 ("4")}
      {Lisp-Entry "modifiers-keys" definition #f 367 20 367 34 ("alt-down?" "control-down?" "shift-down?" "0" "set-shift-key" "set-control-key" "set-alt-key")}
      {Lisp-Entry "set-shift-key" definition #f 371 20 371 33 ("Shift-Bit" "mask-bit-set" "bit" "modifiers")}
      {Lisp-Entry "set-control-key" definition #f 375 20 375 35 ("Control-Bit" "mask-bit-set" "bit" "modifiers")}
      {Lisp-Entry "set-alt-key" definition #f 379 20 379 31 ("Alt-Bit" "mask-bit-set" "bit" "modifiers")}
      {Lisp-Entry "shift-key?" definition #f 383 20 383 30 ("Shift-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "control-key?" definition #f 387 20 387 32 ("Control-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "alt-key?" definition #f 391 20 391 28 ("Alt-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "output-header" definition #f 400 20 400 33 ("when" "contributor" "for-each" "jazzscheme" "format" "toplevel-comment" "c" "case" "comment" "string-length" "make-string" "system-padding" "system-title" "system-title~" "if" "get-process" "process" "let" "or" "let*" "output" "lambda" "with-printer" "end-proper?" "end-proper?:" "contributors" "contributors:" "copyright" "copyright:" "author" "author:" "license" "license:" "system" "system:" "jazz" "language" "language:" "printer" "title")}
      {Lisp-Entry "output-section" definition #f 452 20 452 34 ("2" "*" "format" "4" "string-length" "+" "make-string" "extra" "toplevel" "c" "case" "comment" "let" "0" "level" "level:" "jazz" "language" "language:" "output" "title")}
      {Lisp-Entry "terminal-repl" definition #f 468 21 468 34 ("repl" "bring-terminal-to-front" "show-terminal")}
      {Lisp-Entry "terminal-visible?" definition #f 476 25 476 42 ("IsWindowVisible" "and" "GetConsoleWindow" "console" "let")}
      {Lisp-Entry "show-terminal" definition #f 480 25 480 38 ("SW_SHOWNORMAL" "ShowWindow" "set-terminal-title" "not" "if" "GetConsoleWindow" "console" "let")}
      {Lisp-Entry "hide-terminal" definition #f 486 25 486 38 ("SW_HIDE" "ShowWindow" "IsWindowVisible" "and" "when" "GetConsoleWindow" "console" "let")}
      {Lisp-Entry "toggle-terminal" definition #f 491 25 491 40 ("show-terminal" "hide-terminal" "terminal-visible?" "if")}
      {Lisp-Entry "terminal-visible?" definition #f 496 24 496 41 ()}
      {Lisp-Entry "show-terminal" definition #f 499 24 499 37 ("set-terminal-title")}
      {Lisp-Entry "hide-terminal" definition #f 502 24 502 37 ()}
      {Lisp-Entry "toggle-terminal" definition #f 505 24 505 39 ()}
      {Lisp-Entry "user-message" definition #f 514 20 514 32 ("format" "apply" "Locales" "is?" "if" "set-status-message" "set-status-message~" "when" "get-application" "appl" "let" "rest" "obj")}
      {Lisp-Entry "user-message/action-handler" definition #f 520 20 520 47 ("set-status-message" "set-status-message~" "when" "get-application" "appl" "let" "action-handler" "message")}
      {Lisp-Entry "user-feedback" definition #f 526 20 526 33 ("format" "apply" "Locales" "is?" "if" "set-status-message" "set-status-message~" "when" "get-application" "appl" "let" "rest" "obj")}
      {Lisp-Entry "clear-user-message" definition #f 532 20 532 38 ("user-message")}
      {Lisp-Entry "clear-user-feedback" definition #f 536 20 536 39 ("user-feedback")}
      {Lisp-Entry "make-directory-feedback" definition #f 540 33 540 56 ("set!" "3" "-" "0" "max" "subseq" "user-message" "length" "len" "expand" "expand~" "expanded" "pathname=?" "not" "or" "when" "get-parent" "get-parent~" "dir" "file" "lambda" "directory" "let")}
      {Lisp-Entry "*exiting-process?*" definition #f 556 20 556 38 ("make-parameter")}
      {Lisp-Entry "*reloading-process?*" definition #f 559 20 559 40 ("make-parameter")}
      {Lisp-Entry "exiting-process?" definition #f 563 20 563 36 ("*exiting-process?*")}
      {Lisp-Entry "reloading-process?" definition #f 566 20 566 38 ("*reloading-process?*")}
      {Lisp-Entry "initialize-system" definition #f 575 20 575 37 ()}}})
"_windows"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "performance" "platform" "windows" "_windows.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.performance.platform.windows" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.system.performance.platform.windows.Performance-Query" "jazz.platform")}
      {Lisp-Entry "performance-snapshot" definition #f 50 20 50 40 ("user-time:" "kernel-time:" ",name" "name:" "performance" "<performance>" "parse-jml" "dwHighDateTime" "dwLowDateTime" "get" "make-long" "filetime" "lambda" "time" "GetProcessTimes" "user-time" "kernel-time" "exit-time" "FILETIME" "new" "creation-time" "GetCurrentProcess" "handle" "let" "name" "bind-keywords" "rest")}
      {Lisp-Entry "resources-snapshot" definition #f 73 20 73 38 (",undestroyed" "undestroyed:" ",handles" "handles:" ",gui-user-objects" "gui-user-objects:" ",gui-gdi-objects" "gui-gdi-objects:" ",private-bytes" "private-bytes:" ",name" "name:" "resources" "<resources>" "parse-jml" "gc-undestroyed-count" "0" "undestroyed" "GetProcessHandleCount" "handles" "GR_USEROBJECTS" "gui-user-objects" "GR_GDIOBJECTS" "GetGuiResources" "gui-gdi-objects" "get-private-bytes" "private-bytes" "GetCurrentProcess" "handle" "let" "name" "bind-keywords" "rest")}
      {Lisp-Entry "Private-Bytes-Query" definition #f 96 12 96 31 ()}
      {Lisp-Entry "Private-Bytes-Counter" definition #f 99 12 99 33 ()}
      {Lisp-Entry "get-private-bytes-query" definition #f 103 13 103 36 ("setup-private-bytes" "Private-Bytes-Query" "not" "when")}
      {Lisp-Entry "get-private-bytes-counter" definition #f 109 13 109 38 ("setup-private-bytes" "Private-Bytes-Counter" "not" "when")}
      {Lisp-Entry "setup-private-bytes" definition #f 115 13 115 32 ("Private-Bytes-Counter" "Private-Bytes-Query" "set!" "counter-name:" "object-name:" "add-counter" "add-counter~" "counter" "Performance-Query" "new" "query" "let*")}
      {Lisp-Entry "get-private-bytes" definition #f 122 20 122 37 ("get-counter-value" "get-counter-value~" "collect-data" "collect-data~" "get-private-bytes-counter" "counter" "get-private-bytes-query" "query" "let")}
      {Lisp-Entry "i/o-snapshot" method #f 134 16 134 28 ("OtherTransferCount" "other-bytes:" "WriteTransferCount" "write-bytes:" "ReadTransferCount" "get" "read-bytes:" ",name" "name:" "i/o" "<i/o>" "JML" "parse" "parse~" "GetProcessIoCounters" "IO_COUNTERS" "new" "io" "GetCurrentProcess" "handle" "let" "name" "bind-keywords" "rest")}}})
"access"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "access.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.access" module #f 37 8 37 26 ("jazz")
      {Lisp-Entry "Active-Process" definition #f 40 12 40 26 ()}
      {Lisp-Entry "Process-Active?" definition #f 43 12 43 27 ()}
      {Lisp-Entry "get-process" definition #f 47 20 47 31 ("Active-Process")}
      {Lisp-Entry "get-application" definition #f 51 20 51 35 ("Active-Process")}
      {Lisp-Entry "set-process" definition #f 55 21 55 32 ("Active-Process" "set!" "process")}
      {Lisp-Entry "set-application" definition #f 59 21 59 36 ("Active-Process" "set!" "application")}
      {Lisp-Entry "activate-process" definition #f 63 21 63 37 ("Process-Active?" "set!")}
      {Lisp-Entry "process-active?" definition #f 67 20 67 35 ("Process-Active?")}
      {Lisp-Entry "get-toplevel" definition #f 71 20 71 32 ("get-toplevel" "get-toplevel~" "when" "get-application" "appl" "let")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "application" "autoload.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.application.autoload" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("Exception-Presenter" "jazz.system.application.Exception-Presenter" "Application-Preferences" "jazz.system.application.Application-Preferences" "Application-Event" "jazz.system.application.Application-Event" "Application-Bindings" "jazz.system.application.Application-Bindings" "Application-Actions" "jazz.system.application.Application-Actions" "Application" "autoload" "jazz.system.application.Application")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "system" "process" "autoload.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.process.autoload" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("Save-Environment-Listener" "jazz.system.process.Save-Environment-Listener" "Process-Preferences-Descriptor" "Process-Preferences" "jazz.system.process.Process-Preferences" "Process" "jazz.system.process.Process" "Exit-Listener" "jazz.system.process.Exit-Listener" "Command-Line" "autoload" "jazz.system.process.Command-Line")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "system" "service" "platform" "windows" "autoload.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.service.platform.windows.autoload" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "export" anonymous #f 40 1 40 7 ("Service-Manager" "jazz.system.service.platform.windows.Service-Manager" "Service-Handle" "jazz.system.service.platform.windows.Service-Handle" "Service" "autoload" "jazz.system.service.platform.windows.Service")}}})
"carbon"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "platform" "carbon.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.platform.carbon" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.system.access" "jazz.platform")}
      {Lisp-Entry "initialize-platform" definition #f 49 20 49 39 ()}
      {Lisp-Entry "initialize-windowing" definition #f 53 20 53 40 ("get-setting")}
      {Lisp-Entry "get-computer-name" definition #f 62 20 62 37 ("adjust-string" "GetComputerName" "make-string" "name" "1" "MAX_COMPUTERNAME_LENGTH" "+" "size" "let*")}
      {Lisp-Entry "get-system-user-name" definition #f 72 20 72 40 ("adjust-string" "GetUserName" "MAX_PATH" "make-string" "username" "let")}
      {Lisp-Entry "shift-down?" definition #f 86 20 86 31 ("GetCurrentEventKeyModifiers" "shiftKeyBit" "bit-set?")}
      {Lisp-Entry "control-down?" definition #f 90 20 90 33 ("GetCurrentEventKeyModifiers" "controlKeyBit" "bit-set?")}
      {Lisp-Entry "alt-down?" definition #f 94 20 94 29 ("GetCurrentEventKeyModifiers" "optionKeyBit" "bit-set?")}
      {Lisp-Entry "modifiers-down" definition #f 98 20 98 34 ("alt-down?" "control-down?" "shift-down?" "values")}
      {Lisp-Entry "mouse-clicked?" definition #f 104 20 104 34 ("VK_LBUTTON" "key-down?" "unimplemented")}
      {Lisp-Entry "use-generic-dialogs?" definition #f 115 21 115 41 ()}
      {Lisp-Entry "Version-Info" definition #f 124 19 124 31 ()}
      {Lisp-Entry "version-info" definition #f 128 13 128 25 ("GetVersionEx" "OSVERSIONINFOEX-sizeof" "OSVERSIONINFOEX-dwOSVersionInfoSize-set!" "OSVERSIONINFOEX-make" "info" "let" "set!" "Version-Info" "unless" "version-info" "unimplemented")}
      {Lisp-Entry "Windows-Version" definition #f 140 19 140 34 ()}
      {Lisp-Entry "get-windows-version" definition #f 144 20 144 39 ("OSVERSIONINFOEX-dwMinorVersion-ref" "OSVERSIONINFOEX-dwMajorVersion-ref" "Version" "new" "version-info" "info" "let" "set!" "Windows-Version" "unless" "get-windows-version" "unimplemented")}
      {Lisp-Entry "validate-version" definition #f 156 20 156 36 ("format" "if" "error" "<" "and" "mandatory-version" "mandatory-version~" "mandatory" "get-process" "process" "let*" "present" "present~" "register-crash-info" "when" "validate-version" "unimplemented" "cleanup" "cleanup:" "register" "register:" "version" "context" "what" "title")}}})
"service-impl"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "service" "platform" "windows" "service-impl.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.service.platform.windows.service-impl" module #f 38 18 38 67 ("jazz")
      {Lisp-Entry "export" anonymous #f 41 1 41 7 ("jazz.system.service.platform.windows.autoload")}}})
"stub"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "process" "stub.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.process.stub" module #f 37 8 37 32 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.jrm")}
      {Lisp-Entry "Process" remotable-stub "~stub" 43 16 43 23 ()
        {Lisp-Entry "get-name" method #f 46 23 46 31 ()}
        {Lisp-Entry "get-icon" method #f 47 23 47 31 ()}
        {Lisp-Entry "get-register" method #f 48 23 48 35 ()}}}})
"windows"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "log" "platform" "windows.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.log.platform.windows" module #f 38 18 38 50 ("jazz")
      {Lisp-Entry "make-event-id" definition #f 42 20 42 33 ("+" "FACILITY_NULL" "facility" "facility:" "SEVERITY_SUCCESS" "severity" "severity:" "code")}}}
  {Lisp-File-Entry {File :context "src" "jazz" "system" "platform" "windows.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.platform.windows" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("time" "jazz.system.access" "jazz.platform" "jazz.library" "jazz.io")}
      {Lisp-Entry "initialize-platform" definition #f 52 20 52 39 ("get-timezone-offset" "local-timezone-set!" "initialize-com")}
      {Lisp-Entry "initialize-windowing" definition #f 57 20 57 40 ("get-setting")}
      {Lisp-Entry "module-path" definition #f 66 20 66 31 ("GetModuleFileName" "tokenise-windows")}
      {Lisp-Entry "module-pathname" definition #f 70 20 70 35 ("module-path" "File" "new")}
      {Lisp-Entry "module-base" definition #f 74 20 74 31 ("module-pathname" "get-base" "get-base~")}
      {Lisp-Entry "system-error" definition #f 83 20 83 32 ("present-system-message" "error" "id")}
      {Lisp-Entry "present-winerror" definition #f 87 20 87 36 ("winerror" "present-system-message")}
      {Lisp-Entry "winerror" definition #f 91 20 91 28 ("winerror" "unimplemented")}
      {Lisp-Entry "present-system-message" definition #f 95 20 95 42 ("format-system-message" "format" "id")}
      {Lisp-Entry "format-system-message" definition #f 101 20 101 41 ("NULL" "0" "FORMAT_MESSAGE_FROM_SYSTEM" "FormatMessage" "/=" "when" "1" "-" "make-string" "msg" "128" "size" "let*" "unimplemented" "id")}
      {Lisp-Entry "get-computer-name" definition #f 115 20 115 37 ("adjust-string" "GetComputerName" "make-string" "name" "1" "MAX_COMPUTERNAME_LENGTH" "+" "size" "let*" "unimplemented")}
      {Lisp-Entry "get-system-user-name" definition #f 125 20 125 40 ("adjust-string" "GetUserName" "MAX_PATH" "make-string" "username" "let" "unimplemented")}
      {Lisp-Entry "key-down?" definition #f 139 20 139 29 ("0" "GetAsyncKeyState" "hibyte" "/=" "key")}
      {Lisp-Entry "shift-down?" definition #f 143 20 143 31 ("VK_SHIFT" "key-down?")}
      {Lisp-Entry "control-down?" definition #f 147 20 147 33 ("VK_RMENU" "not" "VK_CONTROL" "key-down?" "and")}
      {Lisp-Entry "alt-down?" definition #f 151 20 151 29 ("VK_LMENU" "key-down?")}
      {Lisp-Entry "modifiers-down" definition #f 155 20 155 34 ("alt-down?" "control-down?" "shift-down?" "values")}
      {Lisp-Entry "mouse-clicked?" definition #f 161 20 161 34 ("VK_LBUTTON" "key-down?")}
      {Lisp-Entry "use-generic-dialogs?" definition #f 170 21 170 41 ()}
      {Lisp-Entry "Version-Info" definition #f 179 19 179 31 ()}
      {Lisp-Entry "version-info" definition #f 183 13 183 25 ("GetVersionEx" "OSVERSIONINFOEX-sizeof" "OSVERSIONINFOEX-dwOSVersionInfoSize-set!" "OSVERSIONINFOEX-make" "info" "let" "set!" "Version-Info" "unless")}
      {Lisp-Entry "Windows-Version" definition #f 193 19 193 34 ()}
      {Lisp-Entry "get-windows-version" definition #f 197 20 197 39 ("OSVERSIONINFOEX-dwMinorVersion-ref" "OSVERSIONINFOEX-dwMajorVersion-ref" "Version" "new" "version-info" "info" "let" "set!" "Windows-Version" "unless")}
      {Lisp-Entry "validate-version" definition #f 207 20 207 36 ("format" "if" "error" "<" "and" "mandatory-version" "mandatory-version~" "mandatory" "get-process" "process" "let*" "present" "present~" "register-crash-info" "when" "validate-version" "unimplemented" "cleanup" "cleanup:" "register" "register:" "version" "context" "what" "title")}}})
"x11"
 ({Lisp-File-Entry {File :context "src" "jazz" "system" "platform" "x11.jazz"} 236918189. jazz
    {Lisp-Entry "jazz.system.platform.x11" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "import" anonymous #f 40 1 40 7 ("jazz.system.access" "jazz.platform" "jazz.debuggee")}
      {Lisp-Entry "x11-debug-error-handler" definition #f 50 13 50 36 ("lambda" "without-local-debugger" "error" "XGetErrorText" "text" "XErrorEvent-error_code-ref" "code" "let" "signal-error" "define" "err" "displ")}
      {Lisp-Entry "x11-require-display" definition #f 61 13 61 32 ("error" "command-argument" "XOpenDisplay" "or")}
      {Lisp-Entry "initialize-platform" definition #f 66 20 66 39 ()}
      {Lisp-Entry "initialize-windowing" definition #f 70 20 70 40 ("x11-create-cursors" "x11-debug-error-handler" "x11-set-error-handler" "initialize-xim" "x11-synchronize" "synchronize-x11?" "when" "x11-generate-atoms" "x11-require-display" "x11-set-default-display" "initialize-locale" "get-setting")}
      {Lisp-Entry "get-computer-name" definition #f 86 20 86 37 ("adjust-string" "GetComputerName" "make-string" "name" "1" "MAX_COMPUTERNAME_LENGTH" "+" "size" "let*")}
      {Lisp-Entry "get-system-user-name" definition #f 96 20 96 40 ("adjust-string" "GetUserName" "MAX_PATH" "make-string" "username" "let")}
      {Lisp-Entry "shift-down?" definition #f 110 20 110 31 ("XK_Shift_R" "XK_Shift_L" "XKeysymToKeycode" "char->integer" "x11-default-display" "XKeyDown?" "or")}
      {Lisp-Entry "control-down?" definition #f 115 20 115 33 ("XK_Control_R" "XK_Control_L" "XKeysymToKeycode" "char->integer" "x11-default-display" "XKeyDown?" "or")}
      {Lisp-Entry "alt-down?" definition #f 120 20 120 29 ("XK_Alt_R" "XK_Alt_L" "XK_Meta_R" "XK_Meta_L" "XKeysymToKeycode" "char->integer" "x11-default-display" "XKeyDown?" "or")}
      {Lisp-Entry "modifiers-down" definition #f 127 20 127 34 ("alt-down?" "control-down?" "shift-down?" "values")}
      {Lisp-Entry "mouse-clicked?" definition #f 133 20 133 34 ("x11-default-display" "XButtonDown?")}
      {Lisp-Entry "use-generic-dialogs?" definition #f 142 21 142 41 ()}
      {Lisp-Entry "Version-Info" definition #f 151 19 151 31 ()}
      {Lisp-Entry "version-info" definition #f 155 13 155 25 ("GetVersionEx" "OSVERSIONINFOEX-sizeof" "OSVERSIONINFOEX-dwOSVersionInfoSize-set!" "OSVERSIONINFOEX-make" "info" "let" "set!" "Version-Info" "unless" "version-info" "unimplemented")}
      {Lisp-Entry "Windows-Version" definition #f 167 19 167 34 ()}
      {Lisp-Entry "get-windows-version" definition #f 171 20 171 39 ("OSVERSIONINFOEX-dwMinorVersion-ref" "OSVERSIONINFOEX-dwMajorVersion-ref" "Version" "new" "version-info" "info" "let" "set!" "Windows-Version" "unless" "get-windows-version" "unimplemented")}
      {Lisp-Entry "validate-version" definition #f 183 20 183 36 ("format" "if" "error" "<" "and" "mandatory-version" "mandatory-version~" "mandatory" "get-process" "process" "let*" "present" "present~" "register-crash-info" "when" "validate-version" "unimplemented" "cleanup" "cleanup:" "register" "register:" "version" "context" "what" "title")}}})
