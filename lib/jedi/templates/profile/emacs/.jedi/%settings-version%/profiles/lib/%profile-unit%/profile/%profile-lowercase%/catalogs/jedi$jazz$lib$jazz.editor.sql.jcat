"History-Request-Item"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "history" "History-Request-Item.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.sql.history.History-Request-Item" module (protected) () #f #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.editor.sql.view")}
      {Lisp-Entry "History-Request-Item" class () ((extends . "History-Item")) #f #f 44 7 44 27 ("History-Item")
        {Lisp-Entry "request" slot () () #f #f 47 8 47 15 ()}
        {Lisp-Entry "initialize" method (override) ("request") #f #f 50 20 50 30 ("self" "request~self" "set!" "nextmethod" "request")}
        {Lisp-Entry "open-item" method (override) () #f #f 55 20 55 29 ("evaluate" "evaluate~" "insert-line" "insert-line~" "fresh-prompt" "fresh-prompt~" "get-sql-console-text" "text" "let" "bell" "request" "null?" "if")}
        {Lisp-Entry "present" method (override) () #f #f 64 20 64 27 ("request")}}}})
"Inventory-Browser"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "inventory" "Inventory-Browser.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.sql.inventory.Inventory-Browser" module (protected) () #f #f 37 18 37 61 ("update-info-row" "row" "update-row" "Tree-View" "Inventory-Tree" "modify-relation-unique?" "on-modify-update-cascade?" "modify-update-cascade?" "on-modify-delete-cascade?" "modify-delete-cascade?" "on-modify-left?" "modify-left?" "on-modify-right?" "modify-right?" "on-modify-primary-table" "modify-primary-table" "on-modify-primary-columns" "modify-primary-columns" "on-modify-foreign-table" "modify-foreign-table" "on-modify-foreign-columns" "modify-foreign-columns" "on-remove-relation" "remove-relation" "Relation-Menu" "on-add-relation" "add-relation" "Relations-Menu" "modify-procedure-text" "on-remove-procedure" "remove-procedure" "Procedure-Menu" "on-add-procedure" "add-procedure" "Procedures-Menu" "modify-view-text" "on-remove-view" "remove-view" "View-Menu" "on-add-view" "add-view" "Views-Menu" "modify-trigger-text" "on-modify-text" "modify-text" "on-remove-trigger" "remove-trigger" "Trigger-Menu" "modify-index-unique?" "on-modify-unique?" "modify-unique?" "on-modify-primary?" "modify-primary?" "on-modify-fields/orders" "modify-fields/orders" "on-remove-index" "remove-index" "Index-Menu" "modify-column-validation-text" "modify-column-validation-rule" "modify-column-description" "remove-column-description" "on-modify-auto-increment?" "modify-auto-increment?" "on-modify-display-format" "modify-display-format" "on-modify-ordinal-position" "modify-ordinal-position" "on-modify-default-value" "modify-default-value" "on-modify-nullable?" "modify-nullable?" "on-modify-datatype" "modify-datatype" "on-remove-display-format" "remove-display-format" "remove-description" "on-insert-column" "insert-column" "on-remove-column" "remove-column" "Column-Menu" "modify-table-owner" "modify-table-validation-text" "modify-table-validation-rule" "modify-table-description" "remove-table-description" "on-modify-owner" "modify-owner" "on-modify-validation-text" "modify-validation-text" "on-modify-validation-rule" "modify-validation-rule" "on-modify-description" "modify-description" "on-remove-description" "delete-description" "on-add-trigger" "add-trigger" "on-add-index" "add-index" "on-add-column" "add-column" "Separator-Item" "<Separator-Item>" "on-remove-table" "remove-table" "Table-Menu" "evt" "method" "on-add-linked-table" "add-linked-table" "on-add-table-by-script" "add-table-by-script" "on-add-table" ":form" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "title:" "add-table" "name:" "Label-Item" "<Label-Item>" "install" "<install>" "form" "Context-Menu" "extends" "Tables-Menu" "class" "jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Inventory-Browser" class () ((extends . "Layout-View")) #f #f 45 7 45 24 ("get-table" "get-table~" "read-only?:" "name" "describe-connection-table" "clear-output~" "output-tables~" "get-sql-console-text" "get-right?" "get-right?~" "get-left?" "get-left?~" "get-inherited?" "get-inherited?~" "get-dont-enforce?" "get-dont-enforce?~" "collect-if" "cdr" "SQLServer-Inventory-Relation" "Access-Inventory-Relation" "get-delete-cascade?" "get-delete-cascade?~" "delete-cascade?" "get-update-cascade?" "get-update-cascade?~" "update-cascade?" "describe-relation-attributes" "attributes-list" "get-foreign-field-names" "get-foreign-field-names~" "foreign-field-names" "get-foreign-table" "get-foreign-table~" "foreign-table" "get-primary-field-names" "get-primary-field-names~" "primary-field-names" "get-primary-table" "get-primary-table~" "primary-table" "Access-Inventory-Index" "SQLServer-Inventory-Index" "get-order" "get-order~" "get-fields" "get-fields~" "fields" "get-ignore-nulls?" "get-ignore-nulls?~" "ignore-nulls?" "get-required?" "get-required?~" "required?" "get-recompute-statistics?" "get-recompute-statistics?~" "recompute-statistics?" "get-pad-index?" "get-pad-index?~" "pad-index?" "get-unique?" "get-unique?~" "unique?" "get-ignore-duplicates?" "get-ignore-duplicates?~" "ignore-duplicates?" "Access-Inventory-Column" "SQLServer-Inventory-Column" "get-auto-increment?" "get-auto-increment?~" "auto-increment?" "get-display-format" "get-display-format~" "display-format" "get-ordinal-position" "get-ordinal-position~" "get-fill-factor" "get-fill-factor~" "fill-factor" "get-clustered?" "get-clustered?~" "clustered?" "descending" "ascending" "format" "order" "field/order" "fields/orders-list" "get-fields/orders" "get-fields/orders~" "get-exclude-replication?" "get-exclude-replication?~" "exclude-replication?" "get-checked?" "get-checked?~" "checked?" "get-text" "get-text~" "get-default-value-name" "get-default-value-name~" "default-value-name" "get-default-value" "get-default-value~" "default-value" "get-collation" "get-collation~" "collation" "get-computed-text" "get-computed-text~" "computed-text" "get-computed?" "get-computed?~" "computed?" "get-row-guid-col?" "get-row-guid-col?~" "row-guid-col?" "get-identity-increment" "get-identity-increment~" "identity-increment" "get-identity-seed" "get-identity-seed~" "identity-seed" "get-identity-replication?" "get-identity-replication?~" "identity-replication?" "get-identity?" "get-identity?~" "identity?" "get-fixed?" "get-fixed?~" "fixed?" "get-nullable?" "get-nullable?~" "nullable?" "get-size" "get-size~" "length" "present" "present~" "with" "remove-false" "c18" "c17" "c16" "c15" "c14" "c13" "c12" "c11" "c10" "c9" "c8" "c7" "c6" "c5" "c4" "1" "c3" "3" "Access-Inventory-Table" "Data-Row" "append-row" "append-row~" "get-validation-text" "get-validation-text~" "validation-text" "get-validation-rule" "get-validation-rule~" "validation-rule" "get-description" "get-description~" "get-owner" "get-owner~" "owner" "get-file-group" "get-file-group~" "file-group" "get-text-file-group" "get-text-file-group~" "text-file-group" "columns:" "Data-Table" "output" "c2" "5" "datatype:" "name:" "Data-Column" "c1" "describe-relation" "describe-index" "describe-column" "describe-primary-key" "Inventory-Primary-Key" "describe-constraint" "output-table" "describe-table-properties" "describe-table" "output-tables" "0" ">=" "identity-replication:" "id-repl" "identity-increment:" "id-inc" "identity-seed:" "id-seed" "identity?:" "nullable?:" "ordinal-position" "field" "map" "identity-string" "reload-inventory" "reload-inventory~" "execute" "execute~" "script" "instructions" "reload-inventory?" "proc" "def-table" "nullable-string" "second" "get-native" "get-native~" "first" "field-name" "-1" "ordinal-position:" "get-property" "get-property~" "third" "object" "<" "create-fields-list" "join" "fields-list" "partition" "user" "tie" "modify-trigger-text" "modify-view-text" "modify-procedure-text" "modify-update-cascade?" "modify-delete-cascade?" "modify-relation-unique?" "modify-left?" "modify-right?" "modify-primary-table" "modify-primary-columns" "modify-foreign-table" "modify-foreign-columns" "modify-index-unique?" "modify-primary?" "modify-fields/orders" "set-auto-increment?" "set-auto-increment?~" "modify-auto-increment?" "modify-display-format" "set-display-format" "set-display-format~" "remove-display-format" "set-ordinal-position" "set-ordinal-position~" "modify-ordinal-position" "modify-column-validation-text" "modify-column-validation-rule" "set-default-value" "set-default-value~" "ci=?" "or" "modify-default-value" "remove-column-description" "description" "modify-column-description" "modify-nullable?" "Access-Datatype" "modify-datatype" "set-owner" "set-owner~" "modify-table-owner" "set-file-group" "set-file-group~" "modify-table-file-group" "set-text-file-group" "set-text-file-group~" "modify-table-text-file-group" "set-validation-text" "set-validation-text~" "modify-table-validation-text" "set-validation-rule" "set-validation-rule~" "modify-table-validation-rule" "remove-table-description" "set-description" "set-description~" "modify-table-description" "case" "elements" "what" "bind" "pair?" "info" "update-info-row" "update-procedures" "relation" "update-relations" "view" "update-views" "get-triggers" "get-triggers~" "triggers" "get-indexes" "get-indexes~" "indexes" "get-columns" "get-columns~" "columns" "get-primary-key" "get-primary-key~" "primary-key" "collapsed" "constraint" "get-constraints" "get-constraints~" "constraints" "SQLServer-Inventory-Table" "insert-constraints" "insert-triggers" "insert-indexes" "insert-columns" "insert-primary-key" "update-table" "key:" "ci<?" "sort" "father:" "title" "for-each" "update-tables" "cons" "user-data:" "image:" "Tree-Node" "children:" "dynamic" "state:" "add-row" "add-row~" "insert-procedures" "insert-relations" "insert-views" "insert-tables" "get-relations" "get-relations~" "get-procedures" "get-procedures~" "get-views" "get-views~" "get-tables" "get-tables~" "remove-every-row" "remove-every-row~" "tree" "remove-relation~" "relation-name" "remove-relation" "add-relation" "remove-procedure~" "remove-procedure" "append-procedure" "append-procedure~" "create-procedure" "create-procedure~" "procedure" "procedure-name" "add-procedure" "remove-view~" "view-name" "remove-view" "add-view" "remove-trigger~" "trigger-name" "remove-trigger" "append-trigger" "append-trigger~" "set-text" "set-text~" "text" "create-trigger" "create-trigger~" "trigger" "add-trigger" "remove-index~" "index-name" "remove-index" "append-index" "append-index~" "set-fields/orders" "set-fields/orders~" "read-delimited-string" "fields/orders" "create-index" "create-index~" "index" "add-index" "remove-column~" "remove-column" "insert-column" "parse-boolean" "set-nullable?" "set-nullable?~" "add-column" "remove-table~" "get-parent" "get-parent~" "get-title" "get-title~" "selected-row" "row" "remove-table" "set-source-table-name" "set-source-table-name~" "set-connect" "set-connect~" "source-table-name" "connect" "reload-inventory?:" "list" "generate-sql-create-table" "generate-sql-header-script" "execute-sql-commit-preserve" "column-name" "append-table" "append-table~" "append-column" "append-column~" "get-name" "get-name~" "Datatype" "set-datatype" "set-datatype~" "parse-integer" "get-sizeable?" "get-sizeable?~" "initial-value:" "find-systype" "find-systype~" "while" "size" "systype" "get-provider" "get-provider~" "get-datatype" "get-datatype~" "datatype" "create-column" "create-column~" "column" "create-table" "create-table~" "table" "database" "title:" "request-string" "table-name" "add-table" "modify-owner" "modify-validation-text" "modify-validation-rule" "modify-description" "sqlserver?" "access?" "Table-Menu" "layout-menu" "layout-menu~" "SQLServer-Data-Source" "add-table-by-script" "Access-Data-Source" "get-data-source" "get-data-source~" "is?" "add-linked-table" "locate~" "set-visible?" "set-visible?~" "Tables-Menu" "track-popup-menu" "track-popup-menu~" "else" "Relations-Menu" "relations" "Procedures-Menu" "procedures" "Views-Menu" "views" "new-tables-menu" "tables" "=" "cond" "car" "section" "Pair" "Relation-Menu" "Inventory-Relation" "Procedure-Menu" "Inventory-Procedure" "View-Menu" "Inventory-View" "Constraint-Menu" "Inventory-Constraint" "Trigger-Menu" "Inventory-Trigger" "Index-Menu" "Inventory-Index" "Column-Menu" "new" "Inventory-Column" "new-table-menu" "Inventory-Table" "typecase" "menu" "selected-element" "element" "with-context-click" "with-context-click~" "get-position" "get-position~" "pos" "on-context-menu" "get-sender" "get-sender~" "sender" "evt" "on-selection-change" "describe-item" "clear-output" "null?" "if" "get-row" "get-row~" "get-user-data" "get-user-data~" "item" "get-single-selection" "get-single-selection~" "selection" "let*" "rank" "use:" "set-expand-state" "set-expand-state~" "get-expand-state" "get-expand-state~" "state" "lambda" "with-preserved-selection" "with-preserved-selection~" "inventory-tree" "let" "on-refresh" "get-inventory" "get-inventory~" "and" "inventory" "insert-inventory" "set!" "neq?" "when" "value" "set-connection" "connection" "get-connection" "public" "tools" "locate" "get-tools-view" "host-title" "Image-Resource" "host-icon" "inventory-browser" "rest" "external-name" "meta" "method" "explicit" "Layout-View")
        {Lisp-Entry "connection" property () ((initialize . "#f") (accessors . "explicit")) #f #f 49 12 49 22 ()}
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("329" "width:" "title:" "Tree-Node-Column" "<Tree-Node-Column>" "on-context-menu" "context-menu-handler:" "on-selection-change" "selection-handler:" "show-header?:" "inventory" "Inventory-Tree" "<Inventory-Tree>" "Tree-View" "<Tree-View>" "shown?:" "header" "Tree-Header" "<Tree-Header>" "content" "!" "<!>" "tool" "style:" "hscroll?:" "vscroll?:" "scroller" "Scroller-View" "<Scroller-View>" "on-refresh" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "refresh" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "fill" "layout-type:" "install" "<install>")}}}})
"JML-SQL"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "JML-SQL.jazz"} 222341473. jazz
    {Lisp-Entry "load-schedule-data" method () ("connection" "schedules") #f #f 3 11 3 29 ("Data-Schedule" "data-class:" "load-request" "get-connection" "get-connection~" "order-by" "<order-by>" "d.intCommunity" "s.intCommunityOCDepartment" "h.intOCSchedule" "e.intOCScheduleShift" "=" ",id-list" "in" "clause" "<clause>" "where" "<where>" "e" "tblOCScheduleEvent" "h" "tblOCScheduleShift" "s" "tblOCSchedule" "d" "tblCommunityOCDepartment" "c" "as:" "tblCommunity" "table" "<table>" "from" "<from>" "e.intUser" "e.dteEnd" "e.dteStart" "e.intType" "e.intOCScheduleEvent" "h.intNextDay" "h.txtEnd" "h.txtStart" "h.txtShift" "h.intOCScheduleShift" "s.dteEnd" "s.dteStart" "s.txtName" "s.intOCSchedule" "d.txtName" "d.intCommunityOCDepartment" "c.txtName" "c.intCommunity" "name:" "column" "<column>" "select" "<select>" "sql" "<sql>" "request" "->string" "map" "join" "format" "id-list" "let*" "schedules" "connection")}})
"SQL-Connections-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "sql" "SQL-Connections-Editor.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.editor.sql.sql.SQL-Connections-Editor" module (protected) () #f #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.editor.sql" "jazz.designer")}
      {Lisp-Entry "SQL-Connections-Editor" class () ((extends . "Descendants-Editor")) #f #f 44 7 44 29 ("Descendants-Editor")
        {Lisp-Entry "form-model" method (override) ("form") #f #f 47 20 47 30 ("nextmethod" "else" "SQL-Connections-Tree" "tree" "get-name" "get-name~" "case" "form")}}}})
"SQL-Connections-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "sql" "SQL-Connections-Manager.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.sql.sql.SQL-Connections-Manager" module (protected) () #f #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system.process" "jazz.system" "jazz.schema" "jazz.library" "jazz.jml" "jazz.io" "jazz.editor.sql" "jazz.designer.menu" "jazz.designer")}
      {Lisp-Entry "SQL-Connections-Manager" class () ((extends . "Component-Editor") (implements . "Exit-Listener")) #f #f 52 7 52 30 ("Exit-Listener" "Component-Editor")
        {Lisp-Entry "form" form () () #f #f 55 3 55 7 ("291" "width:" "title:" "descendant" "highlight-edited?:" "show-header?:" "tree" "tool" "style:" "scroller" "!" "<!>" "center" "descendants" "SQL-Connections-Editor" "<SQL-Connections-Editor>" "on-close-all-connections" "close-all" "on-open" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "open" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "400" "650" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 66 25 66 38 ("sql-connections" "rest")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 75 25 75 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 79 25 79 35 ()}
        {Lisp-Entry "get-tools-view" method (override) () #f #f 88 20 88 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) () #f #f 92 20 92 33 ("acquire-focus" "acquire-focus~" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" method (public) () #f #f 102 18 102 26 ("tree" "descendants" "locate")}
        {Lisp-Entry "new-document-controller" method (override) () #f #f 111 20 111 43 ("self" "SQL-Connections-Controller" "new")}
        {Lisp-Entry "browse-inventory" method () ("(focus?: focus? #t)") #f #f 120 11 120 27 ("set-connection" "set-connection~" "workspace:" "Inventory-Browser" "select-docked" "browser" "data-source:" "get-name" "get-name~" "get-connection" "connection" "get-user-data" "get-user-data~" "data-source" "get-row" "get-row~" "row" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*" "selected-data-source" "define" "focus?" "focus?:")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 141 20 141 27 ("continuation-return" "set-active-data-source" "get-name" "get-name~" "equal?" "source" "for-each-source" "break" "lambda" "continuation-capture" "when" "client" "get-default-source" "get-default-source~" "default" "let" "get-application" "add-exit-listener" "add-exit-listener~" "read-connections" "set-client" "self" "locate" "set-editor" "set-editor~" "header" "descendants" "locate-component" "set-shown?" "set-shown?~" "nextmethod" "rest")}
        {Lisp-Entry "for-each-source" method () ("proc") #f #f 158 11 158 26 ("Data-Source" "is?" "when" "level" "component" "lambda" "client" "for-each-descendant" "for-each-descendant~" "proc")}
        {Lisp-Entry "resize-center" method () ("dh" "dv") #f #f 170 11 170 24 ("descendants" "locate" "size-figure" "size-figure~" "dv" "dh")}
        {Lisp-Entry "on-open" method (package) ("evt") #f #f 174 19 174 26 ("open-selection" "evt")}
        {Lisp-Entry "on-close-all-connections" method (package) ("evt") #f #f 178 19 178 43 ("set-connection" "set-connection~" "workspace:" "Inventory-Browser" "select-docked" "browser" "let" "close-connections" "evt")}
        {Lisp-Entry "prepare-exit" method (override) () #f #f 185 20 185 32 ("close-connections" "save" "designer" "get-form" "get-form~" "get-origin" "get-origin~" "file?" "get-modified?" "and" "when")}
        {Lisp-Entry "open-selection" method (public) () #f #f 196 18 196 32 ("focus?:" "browse-inventory" "set-active-data-source" "Data-Source" "is?" "when" "bell" "not" "if" "selected-component" "selected-component~" "component" "get-tree" "tree" "let*")}
        {Lisp-Entry "new-connections-menu" method (public) () #f #f 211 18 211 38 ("browse-separator" "browse-inventory" "locate" "locate~" "set-visible?" "set-visible?~" "Group" "is?" "when" "get-user-data" "get-user-data~" "data" "get-row" "get-row~" "row" "if" "add-component-class" "add-component-class~" "selected-component" "selected-component~" "categorized-addable-classes" "categorized-addable-classes~" "selected-components" "selected-components~" "update-component-menu" "lambda" "with-update-locked" "with-update-locked~" "get-single-selection" "get-single-selection~" "selection" "client:" "Connections-Menu" "new" "menu" "get-tree" "tree" "let*")}}
      {Lisp-Entry "SQL-Connections-Controller" class () ((extends . "Component-Editor-Controller")) #f #f 235 7 235 33 ("Component-Editor-Controller")
        {Lisp-Entry "document-status" method (override) () #f #f 238 20 238 35 ()}}
      {Lisp-Entry "Connections-Menu" class () ((extends . "Component-Menu")) #f #f 247 7 247 23 ("Component-Menu")
        {Lisp-Entry "form" form () () #f #f 251 3 251 7 ("browse-separator" "Separator-Item" "<Separator-Item>" "on-browse-inventory" ":form" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "default?:" "title:" "add-item" "before:" "browse-inventory" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}
        {Lisp-Entry "on-browse-inventory" method () ("evt") #f #f 258 11 258 30 ("open-selection" "evt")}}}})
"SQL-Connections-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "sql" "SQL-Connections-Tree.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.sql.sql.SQL-Connections-Tree" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.jml" "jazz.graphic" "jazz.editor.sql" "jazz.designer")}
      {Lisp-Entry "SQL-Connections-Tree" class () ((extends . "Descendants-Tree")) #f #f 48 7 48 27 ("Descendants-Tree")
        {Lisp-Entry "form" form () () #f #f 51 3 51 7 ("editable?:" "highlight-edited?:" "reorderable?:" "draggable?:" ":images" "portfolio:" "install" "<install>")}
        {Lisp-Entry "form-model" method (override) ("form") #f #f 55 20 55 30 ("nextmethod" "else" "Connection-Column" "descendant" "get-name" "get-name~" "case" "form")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 61 20 61 30 ("SQL-Connections-Manager" "set-active-data-source" "set-active-data-source~" "bell" "not" "if" "selected-component" "component" "let" "control-down?" "when" "nextmethod" "pos")}
        {Lisp-Entry "context-menu" method (override) ("pos") #f #f 70 20 70 32 ("new-connections-menu" "new-connections-menu~" "track-popup-menu" "lambda" "with-context-click" "SQL-Connections-Manager" "is?" "when" "get-guest" "get-guest~" "guest" "get-host" "host" "let*" "pos")}
        {Lisp-Entry "update-selection" method (override) ("expand-state" "selected-components") #f #f 79 20 79 36 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" method (override) ("component" "update?" "level") #f #f 83 20 83 29 ("expanded" "level" "update?" "component")}
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 87 20 87 32 ("get-host" "get-guest" "get-guest~" "open-selection" "open-selection~" "nextmethod" "pos")}
        {Lisp-Entry "key-press" method (override) ("key") #f #f 92 20 92 29 ("nextmethod" "else" "get-host" "get-guest" "get-guest~" "open-selection" "open-selection~" "case" "key")}}
      {Lisp-Entry "Connection-Column" class () ((extends . "Tree-Node-Column")) #f #f 103 7 103 24 ("Tree-Node-Column")
        {Lisp-Entry "draw-data" method (override) ("surface" "context" "row" "data" "width" "height") #f #f 106 20 106 29 ("Dark-Red" "Color" "text-rect" "frame-rect" "frame-rect~" "get-user-data" "get-user-data~" "eq?" "when" "get-active-data-source" "active" "let" "nextmethod" "height" "width" "data" "row" "context" "surface")}}}})
"SQL-Console-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "sql" "SQL-Console-Manager.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.sql.sql.SQL-Console-Manager" module (protected) () #f #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.console")}
      {Lisp-Entry "SQL-Console-Manager" class () ((extends . "Console-Manager")) #f #f 43 7 43 26 ("Console-Manager")
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 46 25 46 38 ("sql-console-manager" "rest")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 55 25 55 35 ()}}}})
"SQL-Console-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "sql" "SQL-Console-Text-View.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.editor.sql.sql.SQL-Console-Text-View" module (protected) () #f #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.graphic" "jazz.editor.sql.view" "jazz.editor.sql" "jazz.console")}
      {Lisp-Entry "SQL-Console-Text-View" class () ((extends . "Console-Text-View")) #f #f 50 7 50 28 ("Console-Text-View")
        {Lisp-Entry "current-request" slot () ((initialize . "#f") (accessors . "generate")) #f #f 53 8 53 23 ()}
        {Lisp-Entry "get-current-request" accessor () () #f #f 53 48 53 56 ()}
        {Lisp-Entry "set-current-request" accessor () () #f #f 53 48 53 56 ()}
        {Lisp-Entry "current-table" slot () ((initialize . "#f")) #f #f 54 8 54 21 ()}
        {Lisp-Entry "current-tables" slot () ((initialize . "'()")) #f #f 55 8 55 22 ()}
        {Lisp-Entry "sql-tool-preferences" definition () () #f #f 58 15 58 35 ("sql" "tools" "get-preferences")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 62 20 62 26 ("display-prompt" "display-banner" "banner-prompt" "determine-banner" "banner" "set!" "nextmethod" "rest")}
        {Lisp-Entry "new-syntax" method (override) () #f #f 70 20 70 30 ("model" "SQL-Syntax" "new")}
        {Lisp-Entry "determine-banner" method (override) () #f #f 79 20 79 36 ("format")}
        {Lisp-Entry "display-prompt" method () () #f #f 88 11 88 25 ("Prompt" "insert-styled")}
        {Lisp-Entry "evaluation-break" method () () #f #f 92 11 92 27 ("insert-newline" "text-ending" "set-caret")}
        {Lisp-Entry "Header-Font" definition () () #f #f 102 14 102 25 ("Code" "Font")}
        {Lisp-Entry "Header-Font-Plain" definition () () #f #f 105 14 105 31 ("Code-Bold" "Font")}
        {Lisp-Entry "Header-Color" definition () () #f #f 108 14 108 26 ("Dark-Blue" "Color")}
        {Lisp-Entry "Header-Style" definition () () #f #f 111 14 111 26 ("Header-Color" "color:" "Header-Font" "font:" "Text-Style" "new")}
        {Lisp-Entry "Header-Style-Plain" definition () () #f #f 114 14 114 32 ("Header-Color" "color:" "Header-Font-Plain" "font:" "Text-Style" "new")}
        {Lisp-Entry "Overflow-Style" definition () () #f #f 117 14 117 28 ("Dark-Red" "Color" "color:" "Code" "Font" "font:" "Text-Style")}
        {Lisp-Entry "eval-from-prompt" method (override) () #f #f 121 20 121 36 ("display-prompt" "list" "evaluate-statements" "reset-inserted" "Input" "locate-style" "model" "stylize-range" "stylize-range~" "empty-string?" "unless" "get-string" "command" "current-command" "range" "let")}
        {Lisp-Entry "evaluate-statements" method (public) ("statements" "console?") #f #f 131 18 131 37 ("format-plural" "format" "display-result" "evaluation-break" "when" "clear-table" "real-duration" "real-duration~" "duration" "execute" "execute~" "get-count" "get-count~" "increase!" "load-request" "load-request~" "table" "select-statement?" "cond" "statement" "for-each" "with-transaction" "with-transaction~" "Timer" "new" "timer" "affected" "get-connection" "connection" "lambda" ":wait" "with-cursor" "else" "car" "evaluate" "1" "bell" "0" "case" "length" "let" "console?" "statements")}
        {Lisp-Entry "evaluate" method (public) ("command" "console?") #f #f 158 18 158 26 ("receive" "0" "=" "display-affected" "display-tables" "-" "not-displayed" "min" "displayed" "get-missing?" "get-missing?~" "missing?" "get-count" "get-count~" "count" "let*" "car" "first-table" "get-max-display" "max-display" "else" "format-plural" "format" "integer?" "display-result" "clear-table" "null?" "cond" "evaluation-break" "when" "duration" "tables" "display-evaluation" "load-sql" "process-sql" "shift-down?" "not" "and" "if" "real-duration" "real-duration~" "values" "process-command" "result" "Timer" "new" "timer" "current-request" "set!" "get-connection" "connection" "let" "lambda" ":wait" "with-cursor" "eval-command" "define" "console?" "command")}
        {Lisp-Entry "get-connection" definition () () #f #f 210 15 210 29 ("error" "get-active-connection" "or")}
        {Lisp-Entry "process-sql" method () ("connection" "command") #f #f 215 11 215 22 ("load-sql" "list" "if" "process-sql" "process-sql~" "table" "get-profile" "get-profile~" "profile" "get-application" "appl" "let*" "command" "connection")}
        {Lisp-Entry "load-sql" method () ("connection" "command") #f #f 224 11 224 19 ("execute" "execute~" "max-load:" "load-multirequest" "load-multirequest~" "select-statement?" "if" "expand-sql" "sql" "get-max-load" "get-max-load~" "max-load" "sql-tool-preferences" "pref" "let*" "command" "connection")}
        {Lisp-Entry "expand-sql" definition () ("command") #f #f 233 15 233 25 ("expand-sql" "expand-sql~" "get-profile" "get-profile~" "profile" "get-application" "appl" "let*" "command")}
        {Lisp-Entry "get-max-display" definition () () #f #f 239 15 239 30 ("get-max-display" "get-max-display~" "sql-tool-preferences" "pref" "let")}
        {Lisp-Entry "display-result" method () ("string" "duration" "console?") #f #f 244 11 244 25 ("insert-newline" "Output" "insert-styled" "get-start" "start" "clear-user-message" "user-message" "not" "if" "format" "effective-string" "let" "console?" "duration" "string")}
        {Lisp-Entry "present-value" definition () ("value") #f #f 254 15 254 28 ("->string" "not" "if" "value")}
        {Lisp-Entry "clear-table" method (public) () #f #f 260 18 260 29 ("clear-tables" "remove-columns" "remove-columns~" "clear-all" "clear-all~" "get-sql-output-tree" "tree" "get-sql-output-text" "text" "let")}
        {Lisp-Entry "output-tables" method (public) ("tables" "(name #f)") #f #f 268 18 268 31 ("0" "get-max-display" "display-tables" "current-request" "set!" "name" "tables")}
        {Lisp-Entry "clear-output" method (public) () #f #f 274 18 274 30 ("clear-tables" "get-sql-output-tree" "remove-columns" "remove-columns~" "get-sql-output-text" "clear-all" "clear-all~")}
        {Lisp-Entry "previous-table" method (public) () #f #f 280 18 280 32 ("0" "get-max-display" "display-current-table" "current-table" "decrease!")}
        {Lisp-Entry "next-table" method (public) () #f #f 285 18 285 28 ("0" "get-max-display" "display-current-table" "current-table" "increase!")}
        {Lisp-Entry "clear-tables" method () () #f #f 290 11 290 23 ("recordsets-update" "recordsets-update~" "get-sql-tree-output" "output" "let" "current-tables" "0" "current-table" "set!")}
        {Lisp-Entry "display-tables" method () ("tables" "max-display" "not-displayed") #f #f 297 11 297 25 ("display-current-table" "current-tables" "0" "current-table" "set!" "not-displayed" "max-display" "tables")}
        {Lisp-Entry "display-current-table" method () ("max-display" "not-displayed") #f #f 303 11 303 32 ("recordsets-update" "recordsets-update~" "get-sql-tree-output" "output" "let" "current-table" "current-tables" "element" "display-table" "not-displayed" "max-display")}
        {Lisp-Entry "display-table" method () ("table" "max-display" "not-displayed") #f #f 309 11 309 24 ("set-?r" "set-?c" "set-?t" "tree-widths" "tree-max-char" "effective-font" "effective-font~" "tree-font" "tree" "Header-Font" "text-widths" "Code" "Font" "get-metrics" "get-metrics~" "get-max-char-width" "get-max-char-width~" "text-max-char" "get-rows" "get-rows~" "get-columns" "get-columns~" "Tree-Label" "value" "Tree-Node" "new" "cons" "children:" "add-row" "add-row~" "rest" "first" "values" "set-display-images?" "set-display-images?~" "Tree-Label-Column" "width:" "title:" "toplevel-controls?:" "Tree-Node-Column" "class:" "add-column" "add-column~" "eq?" "node?" "first-column" "remove-columns" "remove-columns~" "get-sql-output-tree" "display-tree" "Point" "scroll-to" "scroll-to~" "Overflow-Style" "format-plural" "else" "subseq" "get-values" "get-values~" "present-value" "insert-line" "insert-line~" "string" "join" "insert-styled" "insert-styled~" "256" "32" "make-tabs-from" "make-tabs-from~" "append!" "get-model" "get-model~" "set-tabs" "set-tabs~" "increase!" "width" "stops" "cond" "clear-all" "clear-all~" "current-table" "=" "stop" "Header-Style-Plain" "Header-Style" "if" "model" "intern-style" "intern-style~" "style" "get-sql-output-text" "get-tabulate-text?" "get-tabulate-text?~" "tabulate?" "sql-tool-preferences" "pref" "get-output-string" "-" "unless" "format" "cdr" "null?" "last?" "car" "while" "open-output-string" "output" "max-list" "join-data" "3" "Spacing" "0" "naturals" "set!" ">" "when" "count" "let*" "row" "for-each" "element" "length" "let" "n" "data" "headers" "determine-max-list" "widths" "affected" "rows" "display-text" "24" "get-prefered-width" "get-prefered-width~" "*" "get-name" "get-name~" "text-width" "text-width~" "max" "+" "250" "min" "column" "lambda" "map" "max-char" "font" "columns" "compute-widths" "define" "not-displayed" "max-display" "table")}}}})
"SQL-Console-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "sql" "SQL-Console-View.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.editor.sql.sql.SQL-Console-View" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.console" "jazz.editor.sql")}
      {Lisp-Entry "SQL-Console-View" class () ((extends . "Console-View")) #f #f 44 7 44 23 ("Console-View")
        {Lisp-Entry "form-model" method (override) ("form") #f #f 47 20 47 30 ("nextmethod" "else" "SQL-Console-Text-View" "text" "get-name" "get-name~" "case" "form")}}}})
"SQL-Explorer"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "sql" "SQL-Explorer.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.sql.sql.SQL-Explorer" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.editor.c")}
      {Lisp-Entry "SQL-Explorer" class () ((extends . "C-Explorer")) #f #f 43 7 43 19 ("C-Explorer")}}})
"SQL-Output-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "sql" "SQL-Output-Text-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.sql.sql.SQL-Output-Text-View" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "SQL-Output-Text-View" class () ((extends . "Text-View")) #f #f 43 7 43 27 ("Text-View")
        {Lisp-Entry "new-model" method (override) () #f #f 46 20 46 29 ("12" "left-padding:" "Code-Base" "Text-Style" "base-style:" "Text-Model" "new")}}}})
"SQL-Output-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "sql" "SQL-Output-Tree.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.sql.sql.SQL-Output-Tree" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.clipboard" "jazz.ui" "jazz.system" "jazz.jml" "jazz.graphic" "jazz.geometry")}
      {Lisp-Entry "SQL-Output-Tree" class () ((extends . "Tree-View")) #f #f 48 7 48 22 ("Tree-View")
        {Lisp-Entry "form" form () () #f #f 51 3 51 7 ("White" "Color" "background-filler:" "install" "<install>")}
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 55 20 55 32 ("self" "sql-output-action" "sql-output-action~" "view->tree" "cell" "get-application" "get-profile" "get-profile~" "profile" "let" "nextmethod" "pos")}
        {Lisp-Entry "context-menu" method () ("pos") #f #f 64 11 64 23 ("track-popup-menu" "sql-output-menu" "sql-output-menu~" "or" "when" "view->tree" "get-application" "get-profile" "get-profile~" "profile" "lambda" "with-context-click" "layout-menu" "layout-menu~" "on-copy-data" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "title:" "parent:" "Label-Item" "Context-Menu" "new" "menu" "let" "cell" "default-sql-menu" "define" "pos")}
        {Lisp-Entry "on-copy-data" method () ("evt") #f #f 80 11 80 23 ("map" "join" "else" "car" "1" "0" "selection" "length" "case" "set-clipboard-text" "get-application" "add-clipboard" "add-clipboard~" "string" "copy" "get-cell-data" "get-title" "get-title~" "cell" "lambda" "cell-title" "let" "evt")}
        {Lisp-Entry "cell-tooltips?" method (override) ("cell") #f #f 100 20 100 34 ("cell")}
        {Lisp-Entry "get-cell-tooltip" method (override) ("cell") #f #f 104 20 104 36 ("self" "sql-output-tooltip" "sql-output-tooltip~" "0" "get-line" "get-line~" ">" "and" "get-cell-data" "data" "get-col" "get-col~" "get-column" "column" "get-profile" "get-profile~" "profile" "get-application" "appl" "let*" "cell")}
        {Lisp-Entry "get-tooltip-position" method (override) ("text" "rect" "h" "v") #f #f 115 20 115 40 ("rect-size" "16" "6" "effective-font" "text-width" "text-width~" "Dimension" "new" "center" "rect-position" "+" "v" "h" "rect" "text")}
        {Lisp-Entry "Header-Font" definition () () #f #f 125 14 125 25 ("Code" "Font")}
        {Lisp-Entry "display-table" method () ("table") #f #f 129 11 129 24 ("display-tree" "0" "not-displayed" "100" "max-display" "tree-widths" "tree-max-char" "effective-font" "tree-font" "Header-Font" "text-widths" "Code" "Font" "get-metrics" "get-metrics~" "get-max-char-width" "get-max-char-width~" "text-max-char" "length" "affected" "get-rows" "get-rows~" "rows" "get-columns" "get-columns~" "let*" "24" "get-prefered-width" "get-prefered-width~" "*" "get-name" "get-name~" "text-width" "text-width~" "max" "+" "250" "min" "column" "lambda" "map" "max-char" "font" "columns" "compute-widths" "define" "table")}
        {Lisp-Entry "present-value" definition () ("value") #f #f 148 15 148 28 ("->string" "not" "if" "value")}
        {Lisp-Entry "display-tree" method () ("columns" "rows" "affected" "max-display" "not-displayed" "widths") #f #f 154 11 154 23 ("0" "subseq" ">" "Tree-Label" "value" "map" "present-value" "Tree-Node" "new" "cons" "children:" "add-row" "cdr" "rest" "first" "get-values" "get-values~" "values" "row" "set-display-images?" "set-display-images?~" "when" "Tree-Label-Column" "width:" "get-name" "get-name~" "title:" "toplevel-controls?:" "Tree-Node-Column" "class:" "add-column" "if" "eq?" "node?" "let*" "width" "column" "for-each" "car" "first-column" "let" "remove-columns" "lambda" "with-update-locked" "widths" "not-displayed" "max-display" "affected" "rows" "columns")}}}})
"SQL-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "preference" "SQL-Preferences.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.sql.preference.SQL-Preferences" module (protected) () #f #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "SQL-Preferences" class () ((extends . "Preferences")) #f #f 46 7 46 22 ("100" "250" "Preferences")
        {Lisp-Entry "max-load" property () ((initialize . "250") (accessors . "generate")) #f #f 49 12 49 20 ()}
        {Lisp-Entry "get-max-load" accessor () () #f #f 49 52 49 60 ()}
        {Lisp-Entry "set-max-load" accessor () () #f #f 49 52 49 60 ()}
        {Lisp-Entry "max-display" property () ((initialize . "100") (accessors . "generate")) #f #f 50 12 50 23 ()}
        {Lisp-Entry "get-max-display" accessor () () #f #f 50 52 50 60 ()}
        {Lisp-Entry "set-max-display" accessor () () #f #f 50 52 50 60 ()}
        {Lisp-Entry "tabulate-text?" property () ((initialize . "#t") (accessors . "generate")) #f #f 51 12 51 26 ()}
        {Lisp-Entry "get-tabulate-text?" accessor () () #f #f 51 52 51 60 ()}
        {Lisp-Entry "set-tabulate-text?" accessor () () #f #f 51 52 51 60 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 63 25 63 45 ("SQL-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 72 11 72 17 ()
        {Lisp-Entry "import" import () () #f #f 75 1 75 7 ("jazz.designer")}
        {Lisp-Entry "SQL-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 78 7 78 33 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 81 3 81 7 ("Boolean-Domain" "<Boolean-Domain>" "domain" "Integer-Domain" "<Integer-Domain>" "title:" "name:" "Property-Descriptor" "<Property-Descriptor>" "tabulate-text?" "max-display" "max-load" "categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}}}}})
"SQL-Syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "sql" "SQL-Syntax.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.sql.sql.SQL-Syntax" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.library.automata" "jazz.editor.sql")}
      {Lisp-Entry "SQL-Syntax" class () ((extends . "Code-Syntax")) #f #f 46 7 46 17 ("Code-Syntax")
        {Lisp-Entry "preferences" method (override) () #f #f 54 20 54 31 ("sql-text" "documents" "get-preferences")}
        {Lisp-Entry "get-constituent-test" method (override) () #f #f 63 20 63 40 ("sql-constituent?")}
        {Lisp-Entry "favorite-completions" method (override) () #f #f 72 20 72 40 ("preferences" "get-completions" "get-completions~")}
        {Lisp-Entry "explorer-class" method (override) () #f #f 81 20 81 34 ("SQL-Explorer")}
        {Lisp-Entry "name-at" method (override) ("range") #f #f 90 20 90 27 ("read-string-element" "element" "eqv?" "if" "0" "cardinality" ">" "model" "get-string" "get-string~" "name" "let" "when" "range")}
        {Lisp-Entry "headers" constant () () #f #f 104 12 104 19 ("list")}
        {Lisp-Entry "get-headers" method (override) () #f #f 109 20 109 31 ("headers")}
        {Lisp-Entry "get-first-special?" method (override) () #f #f 113 20 113 38 ()}
        {Lisp-Entry "Definitions" constant () () #f #f 122 12 122 23 ()}
        {Lisp-Entry "get-definitions" definition () () #f #f 126 15 126 30 ("Definitions")}
        {Lisp-Entry "Keywords" constant () () #f #f 135 12 135 20 ()}
        {Lisp-Entry "get-keywords" method (protected virtual) () #f #f 245 29 245 41 ("Keywords")}
        {Lisp-Entry "Syntax-Targets" definition () () #f #f 254 14 254 28 ()}
        {Lisp-Entry "Syntax-Automata" definition () () #f #f 257 14 257 29 ()}
        {Lisp-Entry "syntax-targets" method (override) () #f #f 261 20 261 34 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" method (override) () #f #f 267 20 267 35 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "compute-syntax-targets" method (override) () #f #f 273 20 273 42 ("get-keywords" "keyword" "get-definitions" "definition" "str" "lambda" "map" "line-comment" "list" "append")}
        {Lisp-Entry "compute-syntax-automata" method (override) () #f #f 279 20 279 43 ("sql-constituent?" "syntax-targets" "build-search-automata")}
        {Lisp-Entry "colorize-type" method (override) ("found" "type" "start" "end" "colorizer" "recolorize?") #f #f 283 20 283 33 ("nextmethod" "else" "Keyword" "keyword" "Definition" "colorize-keyword" "definition" "Title" "Line-Comment" "colorize-line-comment" "line-comment" "case" "recolorize?" "colorizer" "end" "start" "type" "found")}
        {Lisp-Entry "Comment-Styles" definition () () #f #f 296 14 296 28 ("Line-Comment" "Title")}
        {Lisp-Entry "comment-style?" method (override) ("style") #f #f 300 20 300 34 ("Comment-Styles" "inherits?" "inherits?~" "style-name" "lambda" "some?" "style")}}}})
"SQL-Text-Output"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "sql" "SQL-Text-Output.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.editor.sql.sql.SQL-Text-Output" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.editor.sql.view" "jazz.editor.sql")}
      {Lisp-Entry "SQL-Text-Output" class () ((extends . "Layout-View")) #f #f 47 7 47 22 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("text" "SQL-Output-Text-View" "<SQL-Output-Text-View>" "content" "!" "<!>" "tool" "style:" "hscroll?:" "vscroll?:" "center" "scroller" "Scroller-View" "<Scroller-View>" "on-clear" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "clear" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "400" "650" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 59 25 59 38 ("sql-text-output" "rest")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 68 25 68 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 72 25 72 35 ()}
        {Lisp-Entry "get-tools-view" method (override) () #f #f 81 20 81 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) () #f #f 85 20 85 33 ("acquire-focus" "acquire-focus~" "get-text" "text" "let")}
        {Lisp-Entry "get-text" method (public) () #f #f 95 18 95 26 ("text" "locate")}
        {Lisp-Entry "delete-selection" method (override) () #f #f 104 20 104 36 ("clear-all" "clear-all~" "get-text" "text" "let")}
        {Lisp-Entry "on-clear" method () ("evt") #f #f 114 11 114 19 ("clear-table" "clear-table~" "get-sql-console-text" "console" "let" "evt")}}}})
"SQL-Text-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "preference" "SQL-Text-Preferences.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.sql.preference.SQL-Text-Preferences" module (protected) () #f #f 37 18 37 65 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "SQL-Text-Preferences" class () ((extends . "Code-Text-Preferences")) #f #f 45 7 45 27 ("Code-Text-Preferences")
        {Lisp-Entry "title-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 23 ()}
        {Lisp-Entry "get-title-style" accessor () () #f #f 48 56 48 64 ()}
        {Lisp-Entry "set-title-style" accessor () () #f #f 48 56 48 64 ()}
        {Lisp-Entry "line-comment-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 30 ()}
        {Lisp-Entry "get-line-comment-style" accessor () () #f #f 49 56 49 64 ()}
        {Lisp-Entry "set-line-comment-style" accessor () () #f #f 49 56 49 64 ()}
        {Lisp-Entry "definition-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 28 ()}
        {Lisp-Entry "get-definition-style" accessor () () #f #f 50 56 50 64 ()}
        {Lisp-Entry "set-definition-style" accessor () () #f #f 50 56 50 64 ()}
        {Lisp-Entry "keyword-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 25 ()}
        {Lisp-Entry "get-keyword-style" accessor () () #f #f 51 56 51 64 ()}
        {Lisp-Entry "set-keyword-style" accessor () () #f #f 51 56 51 64 ()}
        {Lisp-Entry "keywords" property () ((initialize . "'()") (accessors . "generate")) #f #f 52 12 52 20 ()}
        {Lisp-Entry "get-keywords" accessor () () #f #f 52 56 52 64 ()}
        {Lisp-Entry "set-keywords" accessor () () #f #f 52 56 52 64 ()}
        {Lisp-Entry "completions" property () ((initialize . "'()") (accessors . "generate")) #f #f 53 12 53 23 ()}
        {Lisp-Entry "get-completions" accessor () () #f #f 53 56 53 64 ()}
        {Lisp-Entry "set-completions" accessor () () #f #f 53 56 53 64 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("completions:" "Text-Keyword" "keyword-style:" "Text-Definition" "definition-style:" "Text-Line-Comment" "line-comment-style:" "Text-Title" "Base" "Text-Style" "title-style:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 89 25 89 45 ("SQL-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 98 11 98 17 ()
        {Lisp-Entry "import" import () () #f #f 101 1 101 7 ("jazz.designer")}
        {Lisp-Entry "SQL-Text-Preferences-Descriptor" class () ((extends . "Document-Preferences-Descriptor")) #f #f 104 7 104 38 ("Document-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 107 3 107 7 ("domain" "Completions-Domain" "<Completions-Domain>" "title:" "name:" "Property-Descriptor" "<Property-Descriptor>" "keyword-style" "definition-style" "line-comment-style" "title-style" "completions" "keywords" "categorized:" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"SQL-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "sql" "SQL-Text-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.sql.sql.SQL-Text-View" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.editor.sql.view" "jazz.editor.sql")}
      {Lisp-Entry "SQL-Text-View" class () ((extends . "Code-Text-View")) #f #f 49 7 49 20 ("Code-Text-View")
        {Lisp-Entry "install" method (override) ("rest") #f #f 52 20 52 27 ("get-keyword-style" "get-keyword-style~" "Keyword" "get-definition-style" "get-definition-style~" "Definition" "get-line-comment-style" "get-line-comment-style~" "Line-Comment" "get-title-style" "get-title-style~" "Title" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "new-syntax" method (override) () #f #f 61 20 61 30 ("model" "SQL-Syntax" "new")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 65 25 65 38 ("sql-text" "rest")}
        {Lisp-Entry "preferences" method (override) () #f #f 69 20 69 31 ("sql-text" "documents" "get-preferences")}
        {Lisp-Entry "host-workspaces" method (override) () #f #f 78 20 78 35 ("sql")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 87 20 87 36 ("SQL-Text-Menu" "new")}
        {Lisp-Entry "return-press" method (override) ("key") #f #f 96 20 96 32 ("tabulate" "nextmethod" "key")}
        {Lisp-Entry "evaluate-selection" method (override) () #f #f 106 20 106 38 ("evaluate-statements" "evaluate-statements~" "get-sql-console-text" "console" "split" "whitespace?" "statement" "lambda" "collect-if" "statements" "string" "get-selection" "has-selection?" "map" "join-lines" "range-strings" "lines" "0" "subseq" "not" "search" "let" "line" "uncommented-line" "range" "uncommented-string" "get-char" "eqv?" "and" "previous-pos" "previous" "get-start" "text-ending" "text-beginning" "1" "next-pos" "if" "Range$Cell$" "new" "end" "reversed?:" "start:" "model" "text-search" "text-search~" "start" "statement-pos" "pos" "let*" "statement-range" "define")}}
      {Lisp-Entry "SQL-Text-Menu" class () ((extends . "Context-Menu")) #f #f 144 7 144 20 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 147 3 147 7 ("paste" "copy" "view" "french:" "english:" "Locales" "cut" "Separator-Item" "<Separator-Item>" "code-text" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "evaluate" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"SQL-Tree-Output"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "sql" "SQL-Tree-Output.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.editor.sql.sql.SQL-Tree-Output" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.history" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.editor.sql.view" "jazz.editor.sql")}
      {Lisp-Entry "SQL-Tree-Output" class () ((extends . "Layout-View") (implements . "History-Provider")) #f #f 49 7 49 22 ("self" "History-Manager" "new" "History-Provider" "Layout-View")
        {Lisp-Entry "history-manager" slot () ((initialize . "(new History-Manager self)")) #f #f 52 8 52 23 ()}
        {Lisp-Entry "form" form () () #f #f 55 3 55 7 ("column-spacing:" "row-spacing:" "multiple-selection?:" "cell" "selection-mode:" "filled-column:" "tree" "SQL-Output-Tree" "<SQL-Output-Tree>" "header" "Tree-Header" "<Tree-Header>" "fill" "content" "tool" "style:" "hscroll?:" "vscroll?:" "scroller" "Scroller-View" "<Scroller-View>" "on-settings" "displayed" "on-clear" "clear" "4" "on-forward-menu" "on-forward-history" "forward" "on-backward-menu" "pick" "on-backward-history" "body" "!" "<!>" "backward" "Push-Combo" "<Push-Combo>" "on-next-recordset" "next" "on-previous-recordset" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "enabled?:" "previous" "Push-Tool" "<Push-Tool>" "2" "Separator" "<Separator>" "justification:" "9" "point-size:" "font-name:" "Font" "font:" "center" "current" "Label-View" "<Label-View>" "1" "0" "Rect" "layout-insets:" "tail" "location:" "22" "200" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "Dark" "Color" "background:" "400" "650" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 85 25 85 38 ("sql-tree-output" "rest")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 94 25 94 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 98 25 98 35 ()}
        {Lisp-Entry "get-tools-view" method (override) () #f #f 107 20 107 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) () #f #f 111 20 111 33 ("acquire-focus" "acquire-focus~" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" method (public) () #f #f 121 18 121 26 ("tree" "locate")}
        {Lisp-Entry "delete-selection" method (override) () #f #f 130 20 130 36 ("remove-every-row" "remove-every-row~" "get-tree" "tree" "let")}
        {Lisp-Entry "on-previous-recordset" method () ("evt") #f #f 140 11 140 32 ("previous-table" "previous-table~" "get-sql-console-text" "console" "let" "evt")}
        {Lisp-Entry "on-next-recordset" method () ("evt") #f #f 145 11 145 28 ("next-table" "next-table~" "get-sql-console-text" "console" "let" "evt")}
        {Lisp-Entry "recordsets-update" method (public) ("current" "tables" "not-displayed") #f #f 150 18 150 35 ("set-tooltip-text" "set-tooltip-text~" "set-resource" "set-resource~" "/=" "tooltip-text" "else" "Image-Resource" "not" "cond" "resource" "displayed" "displayed-view" "let" "-" "<" "next" ">" "previous" "set-enabled?" "set-enabled?~" "1" "+" "format" "0" "=" "if" "locate" "set-title" "set-title~" "get-missing?" "get-missing?~" "missing?" "get-count" "get-count~" "count" "get-name" "get-name~" "name" "element" "not-null?" "and" "table" "length" "card" "let*" "not-displayed" "tables" "current")}
        {Lisp-Entry "on-clear" method () ("evt") #f #f 173 11 173 19 ("clear-table" "clear-table~" "get-sql-console-text" "console" "let" "evt")}
        {Lisp-Entry "on-settings" method () ("evt") #f #f 178 11 178 22 ("sql" "host-workspace:" "Preferences-Manager" "new-frame" "evt")}
        {Lisp-Entry "on-add-history" method (package) ("evt") #f #f 188 19 188 33 ("history-manager" "add-current" "add-current~" "evt")}
        {Lisp-Entry "on-backward-history" method (package) ("evt") #f #f 192 19 192 38 ("history-manager" "go-backward-history" "go-backward-history~" "evt")}
        {Lisp-Entry "on-forward-history" method (package) ("evt") #f #f 196 19 196 37 ("history-manager" "go-forward-history" "go-forward-history~" "evt")}
        {Lisp-Entry "on-backward-menu" method () ("evt") #f #f 200 11 200 27 ("backward" "history-manager" "track-history" "get-combo" "get-combo~" "initiator" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "on-forward-menu" method () ("evt") #f #f 206 11 206 26 ("forward" "history-manager" "track-history" "get-combo" "get-combo~" "initiator" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "add-history" method (public) ("item") #f #f 212 18 212 29 ("history-manager" "add-history" "add-history~" "item")}
        {Lisp-Entry "current-history-item" method (override) () #f #f 216 20 216 40 ("History-Request-Item" "new" "when" "get-current-request" "get-current-request~" "request" "get-sql-console-text" "console" "let*")}
        {Lisp-Entry "update-history-actions" method (override) () #f #f 223 20 223 42 ()}}}})
"_sql"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "_sql.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.editor.sql" module () () #f #f 37 8 37 23 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("jazz.editor.sql.autoload")}
      {Lisp-Entry "import" import () () #f #f 41 1 41 7 ("jazz.ui.view" "jazz.system" "jazz.schema" "jazz.library.component" "jazz.io")}
      {Lisp-Entry "Active-Data-Source" definition () () #f #f 53 12 53 30 ()}
      {Lisp-Entry "get-active-data-source" definition (public) () #f #f 57 20 57 42 ("Active-Data-Source")}
      {Lisp-Entry "set-active-data-source" definition (public) ("data-source") #f #f 61 20 61 42 ("get-active-connection" "get-tree" "get-tree~" "invalidate-view" "invalidate-view~" "get-name" "get-name~" "and" "default-source" "get-client" "get-client~" "get-designer" "get-designer~" "set-property" "set-property~" "when" "get-sql-connections" "guest" "let" "Active-Data-Source" "set!" "data-source")}
      {Lisp-Entry "get-active-connection" definition (public) () #f #f 71 20 71 41 ("open" "open~" "closed" "get-state" "get-state~" "eq?" "data-source:" "get-connection" "connection" "get-name" "get-name~" "name" "let*" "Active-Data-Source" "when")}
      {Lisp-Entry "Active-Connections" definition () () #f #f 86 12 86 30 ()}
      {Lisp-Entry "find-connection" definition (public) ("name") #f #f 90 20 90 35 ("Active-Connections" "assoc-value" "name")}
      {Lisp-Entry "get-connection" definition (public) ("name" "(data-source: data-source #f)") #f #f 94 20 94 34 ("cons" "Active-Connections" "set!" "new-connection" "connection" "let" "when" "find-connection" "or" "data-source" "data-source:" "name")}
      {Lisp-Entry "new-connection" definition (public) ("data-source") #f #f 102 20 102 34 ("new-connection" "new-connection~" "data-source")}
      {Lisp-Entry "close-connections" definition (public) () #f #f 106 20 106 37 ("set-active-data-source" "set!" "Active-Connections" "close" "close~" "connection" "name" "bind" "info" "lambda" "for-each")}
      {Lisp-Entry "Connections-File" definition () () #f #f 115 12 115 28 ("Profile" "File")}
      {Lisp-Entry "read-connections" definition (package) () #f #f 119 21 119 37 ("err" "continue-handler:" "install-context" "install-context~" "connections" "get-process" "process" "lambda" "with-safe-execution" "Data-Sources" "new" "read-form" "instantiate" "instantiate~" "exists?" "exists?~" "if" "Connections-File" "file" "let" "load-connections" "define")}
      {Lisp-Entry "select-statement?" definition (public) ("statement") #f #f 142 20 142 37 ("0" "subseq" "not" "if" "string-ci=?" "position" "return:" "whitespace?" "find-if" "pos" "trim-whitespace" "stm" "let" "statement")}}})
"_view"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "view" "_view.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.editor.sql.view" module () () #f #f 37 8 37 28 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.editor.sql")}
      {Lisp-Entry "get-sql-console" definition (public) () #f #f 44 20 44 35 ("SQL-Console-Manager" "singleton-docked" "get-guest" "get-guest~")}
      {Lisp-Entry "get-sql-console-text" definition (public) () #f #f 48 20 48 40 ("get-sql-console" "get-text" "get-text~")}
      {Lisp-Entry "get-sql-tree-output" definition (public) () #f #f 52 20 52 39 ("SQL-Tree-Output" "singleton-docked" "get-guest" "get-guest~")}
      {Lisp-Entry "get-sql-output-tree" definition (public) () #f #f 56 20 56 39 ("get-sql-tree-output" "get-tree" "get-tree~")}
      {Lisp-Entry "get-sql-text-output" definition (public) () #f #f 60 20 60 39 ("SQL-Text-Output" "singleton-docked" "get-guest" "get-guest~")}
      {Lisp-Entry "get-sql-output-text" definition (public) () #f #f 64 20 64 39 ("get-sql-text-output" "get-text" "get-text~")}
      {Lisp-Entry "get-sql-connections" definition (public) () #f #f 68 20 68 39 ("SQL-Connections-Manager" "singleton-docked" "get-guest" "get-guest~")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "editor" "sql" "autoload.jazz"} 231466230. jazz
    {Lisp-Entry "jazz.editor.sql.autoload" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("SQL-Tree-Output" "jazz.editor.sql.sql.SQL-Tree-Output" "SQL-Text-View" "jazz.editor.sql.sql.SQL-Text-View" "SQL-Text-Output" "jazz.editor.sql.sql.SQL-Text-Output" "SQL-Syntax" "jazz.editor.sql.sql.SQL-Syntax" "SQL-Output-Tree" "jazz.editor.sql.sql.SQL-Output-Tree" "SQL-Output-Text-View" "jazz.editor.sql.sql.SQL-Output-Text-View" "SQL-Explorer" "jazz.editor.sql.sql.SQL-Explorer" "SQL-Console-Text-View" "jazz.editor.sql.sql.SQL-Console-Text-View" "SQL-Console-View" "jazz.editor.sql.sql.SQL-Console-View" "SQL-Console-Manager" "jazz.editor.sql.sql.SQL-Console-Manager" "SQL-Connections-Tree" "jazz.editor.sql.sql.SQL-Connections-Tree" "SQL-Connections-Manager" "jazz.editor.sql.sql.SQL-Connections-Manager" "SQL-Connections-Editor" "jazz.editor.sql.sql.SQL-Connections-Editor" "SQL-Text-Preferences" "jazz.editor.sql.preference.SQL-Text-Preferences" "SQL-Preferences" "jazz.editor.sql.preference.SQL-Preferences" "Inventory-Browser" "jazz.editor.sql.inventory.Inventory-Browser" "History-Request-Item" "autoload" "jazz.editor.sql.history.History-Request-Item")}}})
