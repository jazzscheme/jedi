"Console-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "console" "Console-Manager.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.console.Console-Manager" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.skin" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.debugger" "jazz.console")}
      {Lisp-Entry "Console-Manager" class (undocumented) ((extends . "Layout-View")) #f #f 51 20 51 35 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("center" "pad" "Pad-View" "<Pad-View>" "on-clear-console" "22" "clear" "Push-Tool" "<Push-Tool>" "tail" "location:" "Separator" "<Separator>" "pick" "on-print-detail-menu" ":guest" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" "Image-Resource" "resource:" ":images" "portfolio:" "body" "!" "<!>" "detail" "Push-Combo" "<Push-Combo>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "Dark" "Color" "background:" "400" "650" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 66 25 66 38 ("console-manager" "rest")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 75 25 75 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 79 25 79 35 ()}
        {Lisp-Entry "get-tools-view" method (override) () #f #f 88 20 88 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) () #f #f 92 20 92 33 ("acquire-focus" "acquire-focus~" "when" "get-text" "text" "let")}
        {Lisp-Entry "get-pad" method () () #f #f 103 11 103 18 ("pad" "locate")}
        {Lisp-Entry "get-text" method (public) () #f #f 107 18 107 26 ("get-text" "get-text~" "and" "get-pad" "get-selection" "get-selection~" "console" "let")}
        {Lisp-Entry "register-console" method () ("presentation" "select?" "(view-class: view-class #f)" "(console-button?: console-button? #t)" "(process-title: process-title #f)" "(process-traits: process-traits #f)" "(process-thread: process-thread #f)") #f #f 117 11 117 27 ("set-selected?" "set-selected?~" "acquire-focus" "acquire-focus~" "event" "lambda" "execute:" "Event-Handler" "set-action-handler" "set-action-handler~" "layout-view" "layout-view~" "set-selection" "set-selection~" "add-view" "add-view~" "get-selection" "get-selection~" "not" "get-text" "get-text~" "text" "button:" "Console-View" "or" "view" "get-pad" "pad" "get-host" "add-tool" "add-tool~" "when" "tooltip?:" "tooltip-text:" ":images" "portfolio:" "Image-Resource" "resource:" "head" "location:" "auto-size?:" "console-title" "title:" "Console-Button" "new" "and" "tool" "let" "process-thread" "process-thread:" "process-traits" "process-traits:" "process-title" "process-title:" "console-button?" "console-button?:" "view-class" "view-class:" "select?" "presentation")}
        {Lisp-Entry "unregister-console" method () ("console") #f #f 140 11 140 29 ("invalidate-view" "select-console" "and" "when" "remove-view" "remove-view~" "get-button" "get-button~" "remove-tool" "remove-tool~" "next-child" "next-child~" "next" "get-focused" "get-focused~" "get-focus" "eq?" "or" "focused?" "get-console" "get-console~" "view" "get-pad" "pad" "get-host" "host" "let" "console")}
        {Lisp-Entry "get-consoles" method (package) () #f #f 153 19 153 31 ("get-pad" "get-children" "get-children~")}
        {Lisp-Entry "select-console" method () ("console") #f #f 157 11 157 25 ("set-focused" "set-focused~" "acquire-focus" "acquire-focus~" "get-focused-host" "eq?" "if" "get-text" "get-text~" "text" "get-button" "get-button~" "set-selected?" "set-selected?~" "set-selection" "set-selection~" "get-pad" "pad" "get-host" "host" "let" "console")}
        {Lisp-Entry "select-next-console" method () () #f #f 168 11 168 30 ("set-focused" "set-focused~" "acquire-focus" "acquire-focus~" "get-focused-host" "eq?" "if" "get-text" "get-text~" "text" "get-button" "get-button~" "set-selected?" "set-selected?~" "get-pad" "select-next" "select-next~" "console" "get-host" "host" "let")}
        {Lisp-Entry "update-console-buttons" method (package) () #f #f 183 19 183 41 ("get-host" "refresh-tools" "refresh-tools~" "get-debugger-resources" "set-tooltip-text" "set-tooltip-text~" "present-process-title/traits/thread" "presented" "update-title" "update-title~" "set-process-thread" "set-process-thread~" "set-process-traits" "set-process-traits~" "set-process-title" "set-process-title~" "process-information" "traits" "title" "bind" "get-thread" "get-thread~" "thread" "get-process" "get-process~" "get-console" "get-console~" "get-button" "get-button~" "button" "Console-Text-View" "is?" "when" "get-reference" "get-reference~" "reference" "resource" "for-each" "focused?" "live?" "process" "debugger" "lambda" "for-each-process" "for-each-process~" "get-debugger-manager" "manager" "let")}
        {Lisp-Entry "on-print-detail-menu" method () ("evt") #f #f 209 11 209 31 ("initiator:" "track-popup-menu" "track-popup-menu~" "layout-menu" "layout-menu~" "child" "child~" "set-checked?" "set-checked?~" "get-print-detail" "get-print-detail~" "detail" "console" "tools" "get-preferences" "pref" "self" "client:" "Print-Detail-Menu" "menu" "get-size" "get-size~" "get-height" "get-height~" "0" "Point" "new" "pos" "Combo-Button" "get-combo" "get-combo~" "Push-Icon" "typecase" "combo" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "on-print-detail" method () ("evt") #f #f 221 11 221 26 ("user-message" "print-detail" "set-preference" "detail:" "get-property" "get-property~" "detail" "console" "tools" "get-preferences" "pref" "let" "evt")}
        {Lisp-Entry "on-clear-console" method () ("evt") #f #f 228 11 228 27 ("acquire-focus" "acquire-focus~" "clear-console" "clear-console~" "bell" "not" "if" "get-text" "text" "let" "evt")}}
      {Lisp-Entry "Console-Button" class () ((extends . "Radio-Tool")) #f #f 241 7 241 21 ("Radio-Tool")
        {Lisp-Entry "process-title" property () ((initialize . "#f") (accessors . "generate")) #f #f 244 12 244 25 ()}
        {Lisp-Entry "get-process-title" accessor () () #f #f 244 51 244 59 ()}
        {Lisp-Entry "set-process-title" accessor () () #f #f 244 51 244 59 ()}
        {Lisp-Entry "process-traits" property () ((initialize . "#f") (accessors . "generate")) #f #f 245 12 245 26 ()}
        {Lisp-Entry "get-process-traits" accessor () () #f #f 245 51 245 59 ()}
        {Lisp-Entry "set-process-traits" accessor () () #f #f 245 51 245 59 ()}
        {Lisp-Entry "process-thread" property () ((initialize . "#f") (accessors . "generate")) #f #f 246 12 246 26 ()}
        {Lisp-Entry "get-process-thread" accessor () () #f #f 246 51 246 59 ()}
        {Lisp-Entry "set-process-thread" accessor () () #f #f 246 51 246 59 ()}
        {Lisp-Entry "update-title" method (public) () #f #f 249 18 249 30 ("process-thread" "process-traits" "process-title" "console-title" "set-title")}
        {Lisp-Entry "draw-background" method (override) ("surface" "context") #f #f 253 20 253 35 ("get-bounds" "fill-background" "fill-background~" "docked" "get-inactive-background" "get-inactive-background~" "White" "Color" "get-active-background" "get-active-background~" "or" "selected?" "if" "background" "tool" "find-look" "look" "let" "context" "surface")}}
      {Lisp-Entry "Print-Detail-Menu" class () ((extends . "Context-Menu")) #f #f 266 7 266 24 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 269 3 269 7 (":describe" ":reader" ":text" "detail:" "on-print-detail" ":client" ":form" "Event-Handler" "action-handler:" "title:" ":human" "name:" "Check-Item" "<Check-Item>" "install" "<install>")}}}})
"Console-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "console" "Console-Preferences.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.console.Console-Preferences" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Console-Preferences" class (undocumented) ((extends . "Frame-Preferences")) #f #f 45 20 45 39 (":reader" ":default" "Frame-Preferences")
        {Lisp-Entry "wrap?" property () ((initialize . "#t") (accessors . "generate")) #f #f 48 12 48 17 ()}
        {Lisp-Entry "get-wrap?" accessor () () #f #f 48 55 48 63 ()}
        {Lisp-Entry "set-wrap?" accessor () () #f #f 48 55 48 63 ()}
        {Lisp-Entry "context" property () ((initialize . ":default") (accessors . "generate")) #f #f 49 12 49 19 ()}
        {Lisp-Entry "get-context" accessor () () #f #f 49 55 49 63 ()}
        {Lisp-Entry "set-context" accessor () () #f #f 49 55 49 63 ()}
        {Lisp-Entry "print-detail" property () ((initialize . ":reader") (accessors . "generate")) #f #f 50 12 50 24 ()}
        {Lisp-Entry "get-print-detail" accessor () () #f #f 50 55 50 63 ()}
        {Lisp-Entry "set-print-detail" accessor () () #f #f 50 55 50 63 ()}
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}}}})
"Console-Text-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "console" "Console-Text-Actions.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.console.Console-Text-Actions" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Console-Text-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 40 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Down" "on-insert-next" "insert-next" "Up" "on-insert-previous" "insert-previous" ":alt" "on-fresh-prompt" "fresh-prompt" "Return" "Shortcut" "shortcut:" "on-console-evaluate" ":focus" "Event-Handler" "action-handler:" "console-evaluate" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Console-Text-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "console" "Console-Text-Preferences.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.console.Console-Text-Preferences" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Console-Text-Preferences" class (undocumented) ((extends . "Code-Text-Preferences")) #f #f 45 20 45 44 ("Code-Text-Preferences")
        {Lisp-Entry "banner-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 24 ()}
        {Lisp-Entry "get-banner-style" accessor () () #f #f 48 50 48 58 ()}
        {Lisp-Entry "set-banner-style" accessor () () #f #f 48 50 48 58 ()}
        {Lisp-Entry "prompt-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 24 ()}
        {Lisp-Entry "get-prompt-style" accessor () () #f #f 49 50 49 58 ()}
        {Lisp-Entry "set-prompt-style" accessor () () #f #f 49 50 49 58 ()}
        {Lisp-Entry "entry-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 23 ()}
        {Lisp-Entry "get-entry-style" accessor () () #f #f 50 50 50 58 ()}
        {Lisp-Entry "set-entry-style" accessor () () #f #f 50 50 50 58 ()}
        {Lisp-Entry "input-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 23 ()}
        {Lisp-Entry "get-input-style" accessor () () #f #f 51 50 51 58 ()}
        {Lisp-Entry "set-input-style" accessor () () #f #f 51 50 51 58 ()}
        {Lisp-Entry "output-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 52 12 52 24 ()}
        {Lisp-Entry "get-output-style" accessor () () #f #f 52 50 52 58 ()}
        {Lisp-Entry "set-output-style" accessor () () #f #f 52 50 52 58 ()}
        {Lisp-Entry "comment-style" property () ((initialize . "#f") (accessors . "generate")) #f #f 53 12 53 25 ()}
        {Lisp-Entry "get-comment-style" accessor () () #f #f 53 50 53 58 ()}
        {Lisp-Entry "set-comment-style" accessor () () #f #f 53 50 53 58 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("Entry" "default-style:" "Console-Comment" "comment-style:" "Console-Output" "output-style:" "Console-Input" "input-style:" "Console-Entry" "Console-Bold" "entry-style:" "Console-Prompt" "prompt-style:" "Console-Banner" "Base" "banner-style:" "Console-Base" "Text-Style" "base-style:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 74 25 74 45 ("Console-Text-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 83 11 83 17 ()
        {Lisp-Entry "import" import () () #f #f 86 1 86 7 ("jazz.designer")}
        {Lisp-Entry "Console-Text-Preferences-Descriptor" class () ((extends . "Document-Preferences-Descriptor")) #f #f 89 7 89 42 ("Document-Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 92 3 92 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "match-action" "comment-style" "output-style" "input-style" "entry-style" "prompt-style" "banner-style" "categorized:" ">" "<properties" "<properties~>" "install" "<install>")}}}}})
"Console-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "console" "Console-Text-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.console.Console-Text-View" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.ide")}
      {Lisp-Entry "Console-Text-View" class (undocumented) ((extends . "IDE-Text-View")) #f #f 48 20 48 37 ("IDE-Text-View")
        {Lisp-Entry "inserted-rank" slot () ((initialize . "#f")) #f #f 51 8 51 21 ()}
        {Lisp-Entry "inserted-where" slot () ((initialize . "#f")) #f #f 52 8 52 22 ()}
        {Lisp-Entry "banner" slot () ((initialize . "#f") (accessors . "generate")) #f #f 53 8 53 14 ()}
        {Lisp-Entry "get-banner" accessor () () #f #f 53 47 53 55 ()}
        {Lisp-Entry "set-banner" accessor () () #f #f 53 47 53 55 ()}
        {Lisp-Entry "banner-prompt" slot () ((initialize . "#f") (accessors . "generate")) #f #f 54 8 54 21 ()}
        {Lisp-Entry "get-banner-prompt" accessor () () #f #f 54 47 54 55 ()}
        {Lisp-Entry "set-banner-prompt" accessor () () #f #f 54 47 54 55 ()}
        {Lisp-Entry "console-port" slot () ((initialize . "#f") (accessors . "generate")) #f #f 55 8 55 20 ()}
        {Lisp-Entry "get-console-port" accessor () () #f #f 55 47 55 55 ()}
        {Lisp-Entry "set-console-port" accessor () () #f #f 55 47 55 55 ()}
        {Lisp-Entry "console-pump" slot () ((initialize . "#f") (accessors . "generate")) #f #f 56 8 56 20 ()}
        {Lisp-Entry "get-console-pump" accessor () () #f #f 56 47 56 55 ()}
        {Lisp-Entry "set-console-pump" accessor () () #f #f 56 47 56 55 ()}
        {Lisp-Entry "partial-line" slot () ((initialize . "#f")) #f #f 57 8 57 20 ()}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 60 25 60 38 ("console-text" "rest")}
        {Lisp-Entry "default-tool?" method (override) () #f #f 64 20 64 33 ()}
        {Lisp-Entry "default-console?" method (override) () #f #f 68 20 68 36 ()}
        {Lisp-Entry "new-model" method (override) () #f #f 72 20 72 29 ("2" "left-padding:" "wrap?:" "Code-Base" "Text-Style" "base-style:" "Text-Model" "new")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 76 20 76 27 ("get-comment-style" "get-comment-style~" "Comment" "get-output-style" "get-output-style~" "Output" "get-input-style" "get-input-style~" "Input" "get-entry-style" "get-entry-style~" "Entry" "get-prompt-style" "get-prompt-style~" "Prompt" "get-banner-style" "get-banner-style~" "Banner" "add-style" "preferences" "pref" "let" "syntax" "set-colorize?" "set-colorize?~" "model" "set-propagate-styles?" "set-propagate-styles?~" "nextmethod" "rest")}
        {Lisp-Entry "preferences" method (override) () #f #f 89 20 89 31 ("console-text" "documents" "get-preferences")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 98 25 98 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 102 25 102 35 ()}
        {Lisp-Entry "get-console" method () () #f #f 111 11 111 22 ("get-parent" "get-parent~")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 120 20 120 33 ("nextmethod" "console-text" "find-actions" "cons")}
        {Lisp-Entry "on-fresh-prompt" method () ("evt") #f #f 130 11 130 26 ("fresh-prompt" "evt")}
        {Lisp-Entry "on-console-evaluate" method () ("evt") #f #f 134 11 134 30 ("get-string" "remove-enclosing" "insert-string" "else" "console-evaluate" "last-block" "nu=?" "text-ending" "set-caret" "empty-block?" "cond" "get-end" "block-at" "block" "let" "evt")}
        {Lisp-Entry "on-insert-previous" method () ("evt") #f #f 145 11 145 29 ("insert-previous-block" "evt")}
        {Lisp-Entry "on-insert-next" method () ("evt") #f #f 149 11 149 25 ("insert-next-block" "evt")}
        {Lisp-Entry "tab-press" method (override) ("key" "modifiers") #f #f 153 20 153 29 ("insert-previous-block" "insert-next-block" "shift-key?" "end-completion" "has-completion?" "if" "modifiers" "key")}
        {Lisp-Entry "delete-char" method (override) () #f #f 161 20 161 31 ("nextmethod" "at-end?" "if" "console-port" "close-port" "send-end-of-file" "define")}
        {Lisp-Entry "scrollee-width" method (override) () #f #f 170 20 170 34 ("get-display-width")}
        {Lisp-Entry "context-menu" method (override) ("pos") #f #f 174 20 174 32 ("nextmethod" "Console-Menu" "new" "track-popup-menu" "context-menu-click" "begin" "not" "and" "if" "modifiers-down" "alt?" "control?" "shift?" "receive" "pos")}
        {Lisp-Entry "set-selection" method (override) ("range" "." "rest") #f #f 183 20 183 33 ("inserted-where" "set!" "nextmethod" "apply" "rest" "range")}
        {Lisp-Entry "console-evaluate" method () () #f #f 193 11 193 27 ("eval-from-prompt" "text-ending" "set-caret")}
        {Lisp-Entry "eval-from-prompt" method (protected virtual) () #f #f 198 29 198 45 ("reset-inserted" "Input" "locate-style" "model" "stylize-range" "stylize-range~" "force-output" "console-port" "display" "empty-string?" "unless" "get-string" "command" "current-command" "range" "let" "insert-newline")}
        {Lisp-Entry "current-command" method () () #f #f 209 11 209 26 ("Entry" "inherits?" "inherits?~" "style" "lambda" "text-ending" "select-style")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 220 20 220 33 ()}
        {Lisp-Entry "get-tooltip-context" method (override) ("pos") #f #f 224 20 224 39 ("pos")}
        {Lisp-Entry "home-column" method (override) ("row" "col") #f #f 228 20 228 31 ("numeric?" "0" "substring" "header" "string-length" "<=" "2" "+" "end" "if" "find" "pos" "paragraph-string" "str" "let" "col" "row")}
        {Lisp-Entry "insert-formatted-line" method (override) ("line") #f #f 247 20 247 41 ("substring" "set!" "begin" "else" "-" ">" "and" "formatted-end-delimiter" "or" "1" "+" "formatted-start-delimiter" "ecase" "eof-object?" "not" "read-char" "c" "depth" "insert-end" "0" "pos" "iterate" "input" "lambda" "call-with-input-string" "nextmethod" "string-append" "partial-line" "if" "let" "line")}
        {Lisp-Entry "current-history-item" method (override) () #f #f 277 20 277 40 ()}
        {Lisp-Entry "process-formatted-directive" method (override) ("directive" "input") #f #f 286 20 286 47 ("nextmethod" "else" "prompt" "Prompt" "banner-prompt" "get-string" "set!" "Banner" "locate-style" "model" "stylize-range" "stylize-range~" "range" "lambda" "with-formatted-range" "banner" "case" "input" "directive")}
        {Lisp-Entry "backward-style" method (protected) ("pos" "predicate") #f #f 311 21 311 35 ("get-range" "get-range~" "backward-style" "backward-style~" "end:" "start:" "model" "explorer-class" "new" "explorer" "let" "predicate" "pos")}
        {Lisp-Entry "forward-style" method (protected) ("pos" "predicate") #f #f 317 21 317 34 ("get-range" "get-range~" "forward-style" "forward-style~" "end:" "start:" "model" "explorer-class" "new" "explorer" "let" "predicate" "pos")}
        {Lisp-Entry "select-style" method (protected) ("pos" "predicate") #f #f 323 21 323 33 ("get-range" "get-range~" "select-style" "select-style~" "end:" "start:" "model" "explorer-class" "new" "explorer" "let" "predicate" "pos")}
        {Lisp-Entry "display-banner" method (public virtual) ("banner") #f #f 334 26 334 40 ("Banner" "insert-styled" "when" "banner")}
        {Lisp-Entry "determine-banner" method (public virtual) () #f #f 339 26 339 42 ("get-string" "when" "Output" "Prompt" "Banner" "inherits?" "inherits?~" "or" "style" "lambda" "text-beginning" "forward-style" "range" "let")}
        {Lisp-Entry "clear-console" method (public) () #f #f 348 18 348 31 ("Prompt" "insert-styled" "banner-prompt" "when" "display-banner" "clear-all" "determine-banner" "or" "banner" "let")}
        {Lisp-Entry "fresh-prompt" method (public) () #f #f 361 18 361 30 ("Prompt" "insert-styled" "insert-newline" "0" "get-col" "get-col~" "/=" "get-string" "prompt" "get-end~" "nu/=?" "and" "when" "last-prompt" "prompt-range" "set-caret" "text-ending" "end" "let" "Comment" "locate-style" "get-end" "block-at" "model" "stylize-range" "stylize-range~")}
        {Lisp-Entry "reset-inserted" method () () #f #f 378 11 378 25 ("inserted-where" "inserted-rank" "set!")}
        {Lisp-Entry "text-style?" definition () ("style") #f #f 383 15 383 26 ("Output" "Prompt" "Banner" "inherits?" "inherits?~" "or" "style")}
        {Lisp-Entry "user-style?" definition () ("style") #f #f 389 15 389 26 ("text-style?" "not" "style")}
        {Lisp-Entry "block-at" method () ("pos") #f #f 393 11 393 19 ("forward-style" "get-end" "get-end~" "user-style?" "backward-style" "get-start" "get-start~" "new-range" "pos")}
        {Lisp-Entry "next-block" method () ("block") #f #f 399 11 399 21 ("new-range" "user-style?" "next-end" "text-style?" "forward-style" "get-end" "get-end~" "next-start" "let*" "block")}
        {Lisp-Entry "previous-block" method () ("block") #f #f 405 11 405 25 ("new-range" "user-style?" "previous-start" "text-style?" "backward-style" "get-start" "get-start~" "previous-end" "let*" "block")}
        {Lisp-Entry "last-block" method () () #f #f 411 11 411 21 ("user-style?" "backward-style" "text-ending" "ending" "let")}
        {Lisp-Entry "last-prompt" method () () #f #f 416 11 416 22 ("not" "lambda" "backward-style" "text-ending" "ending" "0" "Cell" "Range$Cell$" "new" "get-line" "get-line~" "=" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "let" "empty?" "empty?~" "if" "range" "prompt" "Prompt" "inherits?" "inherits?~" "style" "prompt-style?" "define")}
        {Lisp-Entry "find-block" method () ("rank") #f #f 435 11 435 21 ("1" "-" "previous-block" "0" "<=" "if" "n" "last-block" "block" "iterate" "let" "rank")}
        {Lisp-Entry "empty-block?" definition () ("block") #f #f 442 15 442 27 ("get-end" "get-end~" "get-start" "get-start~" "nu=?" "block")}
        {Lisp-Entry "insert-previous-block" method () () #f #f 447 11 447 32 ("new-range" "set!" "get-string" "remove-enclosing" "insert-string" "get-start" "start" "let" "set-selection" "inserted-where" "when" "empty-block?" "unless" "find-block" "block" "1" "+" "previous" "0" "inserted-rank" "or" "current" "let*")}
        {Lisp-Entry "insert-next-block" method () () #f #f 460 11 460 28 ("new-range" "set!" "get-string" "remove-enclosing" "insert-string" "get-start" "start" "set-selection" "inserted-where" "empty-block?" "unless" "find-block" "block" "let" ">" "when" "1" "-" "next" "0" "inserted-rank" "or" "current" "let*")}}
      {Lisp-Entry "Console-Menu" class () ((extends . "Context-Menu")) #f #f 479 7 479 19 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 482 3 482 7 ("insert-next" "insert-previous" "paste" "copy" "view" "french:" "english:" "Locales" "cut" "edit-references" "code-text" "edit-definitions" "Separator-Item" "<Separator-Item>" "fresh-prompt" "console-text" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "console-evaluate" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Console-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "console" "Console-View.jazz"} 228212827. jazz
    {Lisp-Entry "jazz.console.Console-View" module (protected) () #f #f 37 18 37 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.console")}
      {Lisp-Entry "Console-View" class (undocumented) ((extends . "Scroller-View")) #f #f 45 20 45 32 ("Scroller-View")
        {Lisp-Entry "button" property () ((initialize . "#f") (getter . "generate")) #f #f 48 12 48 18 ()}
        {Lisp-Entry "get-button" accessor () () #f #f 48 40 48 48 ()}
        {Lisp-Entry "form" form () () #f #f 51 3 51 7 ("text" "Console-Text-View" "<Console-Text-View>" "content" "name:" "!" "<!>" "tool" "style:" "hscroll?:" "vscroll?:" "install" "<install>")}
        {Lisp-Entry "get-text" method () () #f #f 57 11 57 19 ("text" "locate")}}}})
"_console"
 ({Lisp-File-Entry {File :context "src" "jazz" "console" "_console.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.console" module () () #f #f 37 8 37 20 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("jazz.console.autoload")}
      {Lisp-Entry "import" import () () #f #f 41 1 41 7 ("jazz.ui.view" "jazz.editor.lisp")}
      {Lisp-Entry "get-console-manager" definition (public) () #f #f 45 20 45 39 ("Lisp-Console-Manager" "singleton-docked" "get-guest" "get-guest~")}
      {Lisp-Entry "get-console-text" definition (public) () #f #f 49 20 49 36 ("get-console-manager" "get-text" "get-text~")}
      {Lisp-Entry "get-console-text-manager" definition (package) ("text") #f #f 53 21 53 45 ("get-parent" "get-parent~" "get-creator" "get-creator~" "text")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "console" "autoload.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.console.autoload" module (protected) () #f #f 37 18 37 39 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("Console-View" "jazz.console.Console-View" "Console-Text-View" "jazz.console.Console-Text-View" "Console-Text-Preferences" "jazz.console.Console-Text-Preferences" "Console-Text-Actions" "jazz.console.Console-Text-Actions" "Console-Preferences" "jazz.console.Console-Preferences" "Console-Manager" "autoload" "jazz.console.Console-Manager")}}})
