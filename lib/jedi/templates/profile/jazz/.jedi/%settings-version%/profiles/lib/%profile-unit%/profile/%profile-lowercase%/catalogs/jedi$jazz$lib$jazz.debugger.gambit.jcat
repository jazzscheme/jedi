"Gambit-Debugger"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "gambit" "Gambit-Debugger.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.gambit.Gambit-Debugger" module (protected) () #f #f 37 18 37 54 ("get-external-representation" "max-length" "$obj" "rdi-get-external-representation" "get-threads" "rdi-get-threads" "user-interrupt" "rdi-user-interrupt" "console-input" "rdi-remote-call" "debugger-console-output" "table-ref" "output" "gambit-console-pump" "rdi-console-input" "rdi-console-input-eof" "not" "if" "str" "start-pump" "rdi-console-input-pump-start!" "table-set!" "console-port" "console-text" "console-id" "make-table" "rdi-console-table" "error" "else" "rdi-console-output" "console-output" "rdi-register-console" "case" "fn" "rdi-force-connection" "rdi-create-server" "set!" "rdi" "start-debugger-console-pump" "set-console-pump" "set-console-pump~" "thread-proxy" "process-proxy" "set-console-port" "set-console-port~" "permanent-close:" "list" "open-string-pipe" "tail" "head" "receive" "object->serial" "register-debugger-resource" "unregister-debugger-console" "Debugger-Resource" "console" "register-debugger-console" "self" "Debugged-Process" "new" "debugged-process" "call-event" "setup-debugger-console-ports" "values" "register-console" "register-console~" "text" "increase!" "format" "title" "get-console-manager" "manager" "let" "open-console-window" "1" "console-no" "definition" "frame-variable-value" "variable" "frame-variable-name" "frame-variables" "frame-location" "frame" "frame-name" "command" "step-stop" "continue-stop" "stop-frames" "stop-reason" "stop" "stop-kind" "restart" "restart-stop" "break-thread" "thread-stops" "thread-state" "thread" "thread-name" "process-exit" "process-detach" "col" "line" "container" "string" "syntax" "evaluate-expressions" "present-process" "process-threads" "process-icon" "process-title" "process" "process-live?" "y" "x" "process=?" "detach-processes" "public" "validate-liveness?" "validate-liveness?:" "get-processes" "stop-debugger" "gambit-debugger-server" "rdi-debugger-init" "lambda" "new-system-thread" "thread-start!" "rdi-function" "rdi-init" "user-message" "start-debugger" "method" "Debugger" "extends" "Gambit-Debugger" "class" "jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.debugger" "gambit")}
      {Lisp-Entry "Gambit-Debugger" class () ((extends . "Debugger")) #f #f 44 7 44 22 ("Debugger")}}})
"Gambit-Project"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "gambit" "Gambit-Project.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.debugger.gambit.Gambit-Project" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.project" "jazz.library" "jazz.jml" "jazz.debugger.gambit")}
      {Lisp-Entry "Gambit-Project" class () ((extends . "Project")) #f #f 46 7 46 21 ("Project")
        {Lisp-Entry "minimum-heap" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 24 ()}
        {Lisp-Entry "get-minimum-heap" accessor () () #f #f 49 49 49 57 ()}
        {Lisp-Entry "set-minimum-heap" accessor () () #f #f 49 49 49 57 ()}
        {Lisp-Entry "maximum-heap" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 24 ()}
        {Lisp-Entry "get-maximum-heap" accessor () () #f #f 50 49 50 57 ()}
        {Lisp-Entry "set-maximum-heap" accessor () () #f #f 50 49 50 57 ()}
        {Lisp-Entry "concrete?" method (override) () #f #f 58 20 58 29 ()}
        {Lisp-Entry "started?" definition () () #f #f 68 14 68 22 ()}
        {Lisp-Entry "start-debugger" method () () #f #f 73 11 73 25 ("set!" "register-debugger" "start-debugger" "start-debugger~" "Gambit-Debugger" "new" "debugger" "let" "started?" "not" "when")}
        {Lisp-Entry "project-debug" method () ("." "rest") #f #f 87 11 87 24 ("show-console:" "stderr-redirection:" "stdout-redirection:" "stdin-redirection:" "arguments:" "path:" "list" "open-process" "start-debugger" "rest")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 104 25 104 45 ("Gambit-Project-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 113 11 113 17 ()
        {Lisp-Entry "import" import () () #f #f 116 1 116 7 ("jazz.designer")}
        {Lisp-Entry "Gambit-Project-Descriptor" class () ((extends . "Project-Descriptor")) #f #f 119 7 119 32 ("Project-Descriptor")
          {Lisp-Entry "form" form () () #f #f 122 3 122 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "maximum-heap" "minimum-heap" "title" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image:" "install" "<install>")}}}}})
"_gambit"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "gambit" "_gambit.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.gambit" module () () #f #f 37 8 37 28 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("jazz.debugger.gambit.autoload")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "gambit" "autoload.jazz"} 241832675. jazz
    {Lisp-Entry "jazz.debugger.gambit.autoload" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("Gambit-Project-Descriptor" "Gambit-Project" "jazz.debugger.gambit.Gambit-Project" "Gambit-Debugger" "autoload" "jazz.debugger.gambit.Gambit-Debugger")}}})
"project"
 ({Lisp-File-Entry {File :context "src" "jazz" "debugger" "gambit" "data" "project.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.debugger.gambit.data.project" module () () #f #f 37 8 37 41 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("jazz.ide.data.project" "jazz.debugger.gambit")}}})
