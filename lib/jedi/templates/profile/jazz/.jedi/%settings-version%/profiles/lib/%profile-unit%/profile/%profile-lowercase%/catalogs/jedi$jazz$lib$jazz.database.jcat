"Connection"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "connection" "Connection.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.database.connection.Connection" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Connection" class () ((extends . "Object")) #f #f 40 7 40 17 ("Object")
        {Lisp-Entry "data-source" slot () ((initialize . "#f") (getter . "generate")) #f #f 43 8 43 19 ()}
        {Lisp-Entry "get-data-source" accessor () () #f #f 43 41 43 49 ()}
        {Lisp-Entry "inventory" slot () ((initialize . "#f")) #f #f 44 8 44 17 ()}
        {Lisp-Entry "initialize" method (override) ("data-source" "." "rest") #f #f 47 20 47 30 ("destroy-mandatory" "open" "apply" "setup-connection" "nextmethod" "rest" "data-source")}
        {Lisp-Entry "setup-connection" method (virtual) () #f #f 54 19 54 35 ()}
        {Lisp-Entry "destroy" method (override) () #f #f 58 20 58 27 ("nextmethod" "destroy-connection")}
        {Lisp-Entry "destroy-connection" method (virtual) () #f #f 63 19 63 37 ("data-source" "set!" "close" "close~" "inventory" "when")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 70 20 70 25 ("get-connection-string" "get-connection-string~" "format" "data-source" "when" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-inventory" method (public) ("." "rest") #f #f 82 18 82 31 ("reload-inventory" "apply" "inventory" "or" "rest")}
        {Lisp-Entry "reload-inventory" method (public) ("." "rest") #f #f 86 18 86 34 ("self" "new-inventory" "~" "apply" "inventory" "set!" "data-source" "when" "rest")}
        {Lisp-Entry "open" method (virtual) ("data-source" "." "rest") #f #f 96 19 96 23 ("self" "data-source~self" "set!" "rest" "data-source")}
        {Lisp-Entry "get-state" method (public virtual) () #f #f 105 26 105 35 ()}
        {Lisp-Entry "new-request" method (public virtual) () #f #f 114 26 114 37 ()}
        {Lisp-Entry "supports-multirequests?" method (public virtual) () #f #f 118 26 118 49 ("data-source" "get-provider" "get-provider~" "supports-multirequests?" "supports-multirequests?~")}
        {Lisp-Entry "load-request" method (public virtual) ("command" "(name: name #f)" "(max-load: max-load #t)" "(data-class: data-class #f)") #f #f 129 26 129 38 ("load-request" "load-request~" "new-request" "request" "with" "data-class" "data-class:" "max-load" "max-load:" "name" "name:" "command")}
        {Lisp-Entry "load-multirequest" method (public virtual) ("command" "(max-load: max-load #t)" "(data-classes: data-classes '())") #f #f 134 26 134 43 ("load-multirequest" "load-multirequest~" "new-request" "request" "with" "data-classes" "data-classes:" "max-load" "max-load:" "command")}
        {Lisp-Entry "load-rows" method (public virtual) ("command") #f #f 139 26 139 35 ("load-request" "get-rows" "get-rows~" "command")}
        {Lisp-Entry "load-row" method (public virtual) ("command") #f #f 143 26 143 34 ("car" "length" "1" "=" "assert" "load-rows" "rows" "let" "command")}
        {Lisp-Entry "load-value" method (public) ("command" "column") #f #f 149 18 149 28 ("car" "get" "get~" "length" "1" "=" "assert" "load-rows" "rows" "let" "column" "command")}
        {Lisp-Entry "load-values" method (public) ("command" "column") #f #f 155 18 155 29 ("load-rows" "get" "get~" "row" "lambda" "map" "column" "command")}
        {Lisp-Entry "execute" method (public virtual) ("command") #f #f 166 26 166 33 ("command")}
        {Lisp-Entry "comment" method (public virtual) ("string" "." "parameters") #f #f 170 26 170 33 ("parameters" "string")}
        {Lisp-Entry "begin-transaction" method (public virtual) () #f #f 179 26 179 43 ()}
        {Lisp-Entry "commit-transaction" method (public virtual) () #f #f 183 26 183 44 ()}
        {Lisp-Entry "rollback-transaction" method (public virtual) () #f #f 187 26 187 46 ()}
        {Lisp-Entry "with-transaction" method (public) ("proc") #f #f 191 18 191 34 ("rollback-transaction" "commit-transaction" "if" "when" "set!" "begin-transaction" "begin" "unwind-protect" "completed?" "started?" "let" "proc")}}}})
"Data-Group"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "view" "Data-Group.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database.view.Data-Group" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Data-Group" class (undocumented) ((extends . "Group")) #f #f 43 20 43 30 ("Group")}}})
"Data-Source-Browser"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "view" "Data-Source-Browser.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database.view.Data-Source-Browser" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.database")}
      {Lisp-Entry "Data-Source-Browser" class (undocumented) ((extends . "View")) #f #f 46 20 46 39 ("explicit" "View")
        {Lisp-Entry "provider" property () ((initialize . "#f") (accessors . "explicit")) #f #f 49 12 49 20 ()}
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("160" "450" "33" "source" "Layout-View" "<Layout-View>" "top-padding:" "2" "left-padding:" "body" "content" "scroller" "!" "<!>" "on-provider-change" ":form" "Event-Handler" "content-change-handler:" "provider" "Combo-Box" "<Combo-Box>" "edge" "border-type:" "19" "146" "1" "67" "provider-border" "Border-View" "<Border-View>" "20" "50" "0" "Point" "position:" "title:" "provider-label" "name:" "Label-View" "<Label-View>" "206" "500" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 63 20 63 27 ("setup-providers" "nextmethod" "rest")}
        {Lisp-Entry "get-provider" method (public) () #f #f 73 18 73 30 ("provider")}
        {Lisp-Entry "set-provider" method (public) ("value") #f #f 77 18 77 30 ("provider-update" "provider" "set!" "value")}
        {Lisp-Entry "get-data-source" method (public) () #f #f 82 18 82 33 ("get-data-source" "get-data-source~" "when" "get-data-source-browser" "browser" "let")}
        {Lisp-Entry "set-data-source" method (public) ("source") #f #f 88 18 88 33 ("get-data-source-browser" "set-data-source" "set-data-source~" "provider-update" "set-value" "set-value~" "get-provider" "get-provider~" "external-name" "external-name~" "set!" "set-entry" "set-entry~" "null?" "if" "provider" "locate" "combo" "let" "source")}
        {Lisp-Entry "setup-username/password-mode" method (public) () #f #f 98 18 98 46 ("setup-username/password-mode" "setup-username/password-mode~" "when" "get-data-source-browser" "browser" "let")}
        {Lisp-Entry "set-default-focus" method (public) () #f #f 109 18 109 35 ()}
        {Lisp-Entry "on-provider-change" method () ("evt") #f #f 113 11 113 29 ("provider-update" "get-value" "get-value~" "set!" "provider" "locate" "combo" "let" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 119 20 119 35 ("self" "invoke-handler" "return-press-handler" "when" "evt")}
        {Lisp-Entry "layout" method (override) () #f #f 129 20 129 26 ("get-size" "-" "set-size" "set-size~" "33" "0" "Point" "source" "set-position" "set-position~" "provider-border" "provider-label" "locate" "set-visible?" "set-visible?~" "begin" "provider" "null?" "if")}
        {Lisp-Entry "validate-content" method (override) () #f #f 147 20 147 36 ("when" "get-data-source-browser" "browser" "let" "provider" "locate" "validate-content" "validate-content~")}
        {Lisp-Entry "setup-providers" method () () #f #f 159 11 159 26 ("set-entry" "set-entry~" "set-choices" "set-choices~" "second" "key:" "Provider" "get-providers" "get-providers~" "present" "present~" "external-name" "external-name~" "list" "lambda" "map" "<" "sort" "choices" "provider" "locate" "combo" "let")}
        {Lisp-Entry "get-data-source-browser" method () () #f #f 176 11 176 34 ("source" "locate" "first-child" "first-child~")}
        {Lisp-Entry "provider-update" method () () #f #f 180 11 180 26 ("layout-view" "layout-view~" "parent:" "Provider" "get-provider" "get-provider~" "browser-class" "browser-class~" "new" "provider" "when" "close-children" "close-children~" "locate" "source" "let")}}}})
"Data-Source-Chooser"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "view" "Data-Source-Chooser.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.database.view.Data-Source-Chooser" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.database")}
      {Lisp-Entry "Data-Source-Chooser" class (undocumented) ((extends . "View")) #f #f 47 20 47 39 ("View")
        {Lisp-Entry "provider" property () ((initialize . "#f")) #f #f 50 12 50 20 ()}
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("on-cancel" ":host" "195" "cancel" "on-update" ":guest" "Event-Handler" "action-handler:" "default?:" "24" "80" "170" "105" "update" "Push-Button" "<Push-Button>" "browser" "Data-Source-Browser" "<Data-Source-Browser>" ">" "<content" "<content~>" "0" "22" "Rect" "layout-insets:" "fill" "layout-type:" "116" "604" "44" "-2" "database" "Group-Box" "<Group-Box>" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "Label-View" "<Label-View>" "202" "500" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 64 20 64 26 ("target-provider" "setup-browser" "nextmethod" "rest")}
        {Lisp-Entry "target-provider" method (protected virtual) () #f #f 69 29 69 44 ("provider")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 78 25 78 35 ()}
        {Lisp-Entry "host-size" method (meta override) () #f #f 82 25 82 34 ("250" "650" "Dimension")}
        {Lisp-Entry "get-provider" method (public) () #f #f 91 18 91 30 ("provider")}
        {Lisp-Entry "set-provider" method (public) ("value") #f #f 95 18 95 30 ("get-browser" "set-provider" "set-provider~" "provider" "set!" "value")}
        {Lisp-Entry "get-data-source" method (public) () #f #f 100 18 100 33 ("get-browser" "get-data-source" "get-data-source~")}
        {Lisp-Entry "set-data-source" method (public) ("value") #f #f 104 18 104 33 ("get-browser" "set-data-source" "set-data-source~" "value")}
        {Lisp-Entry "get-browser" method (public) () #f #f 108 18 108 29 ("browser" "locate")}
        {Lisp-Entry "setup-browser" method () ("provider") #f #f 117 11 117 24 ("set-default-focus" "set-default-focus~" "browser" "locate" "set-provider" "set-provider~" "provider")}
        {Lisp-Entry "resize" method (override) ("dh" "dv") #f #f 127 20 127 26 ("cancel" "update" "move-figure" "move-figure~" "database" "locate" "size-figure" "size-figure~" "nextmethod" "dv" "dh")}
        {Lisp-Entry "get-tab-stops" method (override) () #f #f 134 20 134 33 ("get-browser" "get-tab-stops" "get-tab-stops~")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 138 20 138 35 ("update-database" "evt")}
        {Lisp-Entry "on-update" method () ("evt") #f #f 142 11 142 20 ("update-database" "evt")}
        {Lisp-Entry "on-close" method () ("evt") #f #f 146 11 146 19 ("get-host" "close" "close~" "evt")}
        {Lisp-Entry "update-database" method (protected virtual) () #f #f 155 29 155 44 ("end-modal" "end-modal~" "get-data-source" "source" "get-host" "dialog" "let")}
        {Lisp-Entry "Header-Color" definition () () #f #f 166 14 166 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 170 20 170 24 ("Header-Color" "1" "White" "Color" "list" "50" "get-width" "get-width~" "0" "Rect" "new" "gradient-fill" "gradient-fill~" "get-size" "size" "let" "context" "surface")}}}})
"Data-Source-Widget"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "view" "Data-Source-Widget.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database.view.Data-Source-Widget" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Data-Source-Widget" class (undocumented) ((extends . "Layout-View")) #f #f 43 20 43 38 ("Layout-View")
        {Lisp-Entry "get-data-source" method (public virtual) () #f #f 51 26 51 41 ()}
        {Lisp-Entry "set-data-source" method (public virtual) ("source") #f #f 55 26 55 41 ("source")}
        {Lisp-Entry "setup-username/password-mode" method (public virtual) () #f #f 59 26 59 54 ()}
        {Lisp-Entry "set-default-focus" method (public virtual) () #f #f 68 26 68 43 ()}}}})
"Datatype-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "designer" "Datatype-Row.jazz"} 231303585. jazz
    {Lisp-Entry "jazz.database.designer.Datatype-Row" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.schema" "jazz.designer")}
      {Lisp-Entry "Datatype-Row" class (undocumented) ((extends . "Combo-Row")) #f #f 45 20 45 32 ("Combo-Row")
        {Lisp-Entry "datatype-class" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 26 ()}
        {Lisp-Entry "get-datatype-class" accessor () () #f #f 48 60 48 68 ()}
        {Lisp-Entry "set-datatype-class" accessor () () #f #f 48 60 48 68 ()}
        {Lisp-Entry "allow-partial-datatype?" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 35 ()}
        {Lisp-Entry "get-allow-partial-datatype?" accessor () () #f #f 49 60 49 68 ()}
        {Lisp-Entry "set-allow-partial-datatype?" accessor () () #f #f 49 60 49 68 ()}
        {Lisp-Entry "systypes" slot () () #f #f 52 8 52 16 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 60 20 60 30 ("setup" "get-systypes" "get-systypes~" "and" "systypes" "systypes~self" "allow-partial-datatype?~self" "self" "datatype-class~self" "set!" "nextmethod" "apply" "others" "allow-partial-datatype?" "unavailable-systypes-message" "datatype-class" "bind-keywords" "rest")}
        {Lisp-Entry "setup" method () ("systypes" "unavailable-systypes-message") #f #f 69 11 69 16 ("get-name" "get-name~" "present-format" "list" "systype" "map" "set-choices" "message-box" "combo" "lambda" "set-choices-updater" "null?" "if" "unavailable-systypes-message" "systypes")}
        {Lisp-Entry "present" method (override) ("type") #f #f 84 20 84 27 ("present" "present~" "null?" "if" "type")}
        {Lisp-Entry "editor-class" method (override) () #f #f 95 20 95 32 ("Datatype-Row-Editor")}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 99 20 99 36 ("Datatype" "datatype-class" "or" "new" "scale" "precision" "size" "name" "receive" "when" "parse-content" "parsed" "editor" "get-content" "get-content~" "string" "let*")}
        {Lisp-Entry "set-edited-value" method (override) ("value") #f #f 107 20 107 36 ("present" "editor" "set-content" "set-content~" "value")}
        {Lisp-Entry "read-content" definition () ("content") #f #f 111 15 111 27 ("separator:" "substitute" "parse-strings" "empty-string?" "not" "string" "lambda" "collect-if" "content")}
        {Lisp-Entry "parse-content" method () ("string") #f #f 117 11 117 24 ("null?" "let*" "3" "2" "car" "1" "0" "length" "case" "read-content" "content" "message:" "Parse-Error" "new" "signal" "message" "format" "find-systype" "find-systype~" "datatype-class" "when" "get-scalable?" "get-scalable?~" "scale" "parse-decimal" "else" "parse-integer" "cond" "precision" "bind" "list" "parse-variable" "values" "present-format" "parse-error" "get-precisionable?" "get-precisionable?~" "get-sizeable?" "get-sizeable?~" "or" "allow-partial-datatype?" "not" "and" "if" "parse-systype" "systype" "let" "name" "parse-fixed" "define" "string")}
        {Lisp-Entry "present-format" method () ("systype" "name") #f #f 165 11 165 25 ("get-fixed?" "get-fixed?~" "get-sizeable?" "get-sizeable?~" "format" "get-precisionable?" "get-precisionable?~" "cond" "allow-partial-datatype?" "if" "name" "systype")}}
      {Lisp-Entry "Datatype-Row-Editor" class () ((extends . "Combo-Row-Editor")) #f #f 182 7 182 26 ("Combo-Row-Editor")
        {Lisp-Entry "content-change" method (override) ("origin") #f #f 185 20 185 34 ("nextmethod" "popup" "eq?" "unless" "origin")}
        {Lisp-Entry "combo-choice" method (override) () #f #f 190 20 190 32 ()}
        {Lisp-Entry "get-entry" method (override) () #f #f 194 20 194 29 ("car" "when" "get-content" "value-row" "read-content" "read-content~" "content" "let")}
        {Lisp-Entry "set-entry" method (override) ("entry") #f #f 200 20 200 29 ("cdr" "cons" "join" "set-content" "separator:" "parse-strings" "car" "get-content" "value-row" "read-content" "read-content~" "actual" "let" "entry")}}}})
"Inventory"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "inventory" "Inventory.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.database.inventory.Inventory" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Inventory" class () ((extends . "Object")) #f #f 40 7 40 16 ("Object")
        {Lisp-Entry "connection" slot () ((getter . "generate")) #f #f 43 8 43 18 ()}
        {Lisp-Entry "get-connection" accessor () () #f #f 43 26 43 34 ()}
        {Lisp-Entry "initialize" method (override) ("conn") #f #f 46 20 46 30 ("destroy-mandatory" "connection" "set!" "nextmethod" "conn")}
        {Lisp-Entry "destroy" method (override) () #f #f 52 20 52 27 ("nextmethod" "connection" "close" "close~")}
        {Lisp-Entry "get-version" method (public virtual) () #f #f 62 26 62 37 ()}
        {Lisp-Entry "type-connection-string" method (public virtual) () #f #f 71 26 71 48 ()}
        {Lisp-Entry "get-tables" method (public virtual) () #f #f 80 26 80 36 ()}
        {Lisp-Entry "get-table" method (public virtual) ("name") #f #f 84 26 84 35 ("name")}
        {Lisp-Entry "create-table" method (public virtual) ("name") #f #f 88 26 88 38 ("name")}
        {Lisp-Entry "append-table" method (public virtual) ("table") #f #f 92 26 92 38 ("table")}
        {Lisp-Entry "remove-table" method (public virtual) ("name") #f #f 96 26 96 38 ("name")}
        {Lisp-Entry "columns-ordinal-position-consecutive?" method (public virtual) () #f #f 100 26 100 63 ()}
        {Lisp-Entry "column-supports-property?" method (public virtual) ("object" "property") #f #f 104 26 104 51 ("property" "object")}
        {Lisp-Entry "create-or-modify-view" method (public virtual) ("name" "text") #f #f 113 26 113 47 ("append-view" "set-text" "set-text~" "create-view" "new-view" "remove-view" "when" "error?:" "get-view" "view" "with" "text" "name")}
        {Lisp-Entry "get-views" method (public virtual) () #f #f 122 26 122 35 ()}
        {Lisp-Entry "get-view" method (public virtual) ("name" "." "rest") #f #f 126 26 126 34 ("rest" "name")}
        {Lisp-Entry "create-view" method (public virtual) ("name") #f #f 130 26 130 37 ("name")}
        {Lisp-Entry "append-view" method (public virtual) ("view") #f #f 134 26 134 37 ("view")}
        {Lisp-Entry "remove-view" method (public virtual) ("name") #f #f 138 26 138 37 ("name")}
        {Lisp-Entry "get-relations" method (public virtual) () #f #f 147 26 147 39 ()}
        {Lisp-Entry "get-relation" method (public virtual) ("name") #f #f 151 26 151 38 ("name")}
        {Lisp-Entry "create-relation" method (public virtual) ("name") #f #f 155 26 155 41 ("name")}
        {Lisp-Entry "create-relation-complete" method (public virtual) ("name" "primary-table" "primary-fields" "foreign-table" "foreign-fields") #f #f 159 26 159 50 ("foreign-fields" "foreign-table" "primary-fields" "primary-table" "name")}
        {Lisp-Entry "append-relation" method (public virtual) ("new-relation") #f #f 163 26 163 41 ("new-relation")}
        {Lisp-Entry "remove-relation" method (public virtual) ("relation-name") #f #f 167 26 167 41 ("relation-name")}
        {Lisp-Entry "create-or-modify-procedure" method (public virtual) ("name" "text") #f #f 176 26 176 52 ("append-procedure" "set-text" "set-text~" "create-procedure" "new-procedure" "remove-procedure" "when" "error?:" "get-procedure" "procedure" "with" "text" "name")}
        {Lisp-Entry "get-procedures" method (public virtual) () #f #f 185 26 185 40 ()}
        {Lisp-Entry "get-procedure" method (public virtual) ("name" "." "rest") #f #f 189 26 189 39 ("rest" "name")}
        {Lisp-Entry "create-procedure" method (public virtual) ("name") #f #f 193 26 193 42 ("name")}
        {Lisp-Entry "append-procedure" method (public virtual) ("procedure") #f #f 197 26 197 42 ("procedure")}
        {Lisp-Entry "remove-procedure" method (public virtual) ("name") #f #f 201 26 201 42 ("name")}
        {Lisp-Entry "create-or-modify-trigger" method (public virtual) ("table-name" "trigger-name" "text") #f #f 210 26 210 50 ("create-or-modify-trigger" "create-or-modify-trigger~" "get-table" "table" "let" "text" "trigger-name" "table-name")}
        {Lisp-Entry "create-or-modify-constraint" method (public virtual) ("table-name" "constraint-name" "text" "checked?" "exclude-replication?") #f #f 215 26 215 53 ("create-or-modify-constraint" "create-or-modify-constraint~" "get-table" "table" "let" "exclude-replication?" "checked?" "text" "constraint-name" "table-name")}}}})
"Inventory-Column"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "inventory" "Inventory-Column.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.database.inventory.Inventory-Column" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Inventory-Column" class () ((extends . "Object")) #f #f 40 7 40 23 ("Object")
        {Lisp-Entry "inventory" slot () ((getter . "generate")) #f #f 43 8 43 17 ()}
        {Lisp-Entry "get-inventory" accessor () () #f #f 43 29 43 37 ()}
        {Lisp-Entry "parent" slot () ((getter . "generate")) #f #f 44 8 44 14 ()}
        {Lisp-Entry "get-parent" accessor () () #f #f 44 29 44 37 ()}
        {Lisp-Entry "index-column?" slot () ((getter . "generate")) #f #f 45 8 45 21 ()}
        {Lisp-Entry "get-index-column?" accessor () () #f #f 45 29 45 37 ()}
        {Lisp-Entry "initialize" method (override) ("inventory" "parent" "index-column?") #f #f 48 20 48 30 ("index-column?~self" "parent~self" "self" "inventory~self" "set!" "nextmethod" "index-column?" "parent" "inventory")}
        {Lisp-Entry "get-table" method (public) () #f #f 60 18 60 27 ("parent")}
        {Lisp-Entry "get-default-value" method (public virtual) () #f #f 69 26 69 43 ()}
        {Lisp-Entry "set-default-value" method (public virtual) ("value") #f #f 73 26 73 43 ("value")}
        {Lisp-Entry "get-default-value-name" method (public virtual) () #f #f 77 26 77 48 ()}
        {Lisp-Entry "set-default-value-name" method (public virtual) ("value") #f #f 81 26 81 48 ("value")}
        {Lisp-Entry "get-used-defined-datatype" method (public virtual) () #f #f 85 26 85 51 ()}
        {Lisp-Entry "get-datatype" method (public virtual) () #f #f 89 26 89 38 ()}
        {Lisp-Entry "set-datatype" method (public virtual) ("value") #f #f 93 26 93 38 ("value")}
        {Lisp-Entry "get-type" method (public virtual) () #f #f 97 26 97 34 ()}
        {Lisp-Entry "get-size" method (public virtual) () #f #f 101 26 101 34 ()}
        {Lisp-Entry "set-size" method (public virtual) ("size") #f #f 105 26 105 34 ("size")}
        {Lisp-Entry "get-nullable?" method (public virtual) () #f #f 109 26 109 39 ()}
        {Lisp-Entry "set-nullable?" method (public virtual) ("value") #f #f 113 26 113 39 ("value")}
        {Lisp-Entry "get-validation-rule" method (public virtual) () #f #f 117 26 117 45 ()}
        {Lisp-Entry "set-validation-rule" method (public virtual) ("value") #f #f 121 26 121 45 ("value")}
        {Lisp-Entry "get-validation-text" method (public virtual) () #f #f 125 26 125 45 ()}
        {Lisp-Entry "set-validation-text" method (public virtual) ("value") #f #f 129 26 129 45 ("value")}
        {Lisp-Entry "get-allow-zero-length?" method (public virtual) () #f #f 133 26 133 48 ()}
        {Lisp-Entry "set-allow-zero-length?" method (public virtual) ("value") #f #f 137 26 137 48 ("value")}
        {Lisp-Entry "get-description" method (public virtual) () #f #f 141 26 141 41 ()}
        {Lisp-Entry "set-description" method (public virtual) ("value") #f #f 145 26 145 41 ("value")}
        {Lisp-Entry "get-display-format" method (public virtual) () #f #f 149 26 149 44 ()}
        {Lisp-Entry "set-display-format" method (public virtual) ("value") #f #f 153 26 153 44 ("value")}
        {Lisp-Entry "get-ordinal-position" method (public virtual) () #f #f 157 26 157 46 ()}
        {Lisp-Entry "set-ordinal-position" method (public virtual) ("value") #f #f 161 26 161 46 ("value")}
        {Lisp-Entry "get-auto-increment?" method (public virtual) () #f #f 165 26 165 45 ()}
        {Lisp-Entry "set-auto-increment?" method (public virtual) ("value") #f #f 169 26 169 45 ("value")}
        {Lisp-Entry "get-title" method (public virtual) () #f #f 173 26 173 35 ()}
        {Lisp-Entry "get-scale" method (public virtual) () #f #f 177 26 177 35 ()}
        {Lisp-Entry "set-scale" method (public virtual) ("value") #f #f 181 26 181 35 ("value")}
        {Lisp-Entry "get-precision" method (public virtual) () #f #f 185 26 185 39 ()}
        {Lisp-Entry "set-precision" method (public virtual) ("value") #f #f 189 26 189 39 ("value")}
        {Lisp-Entry "get-fixed?" method (public virtual) () #f #f 193 26 193 36 ()}
        {Lisp-Entry "get-order" method (public virtual) () #f #f 197 26 197 35 ()}
        {Lisp-Entry "get-identity?" method (public virtual) () #f #f 201 26 201 39 ()}
        {Lisp-Entry "set-identity?" method (public virtual) ("value") #f #f 205 26 205 39 ("value")}
        {Lisp-Entry "get-identity-replication?" method (public virtual) () #f #f 209 26 209 51 ()}
        {Lisp-Entry "set-identity-replication?" method (public virtual) ("value") #f #f 213 26 213 51 ("value")}
        {Lisp-Entry "get-identity-seed" method (public virtual) () #f #f 217 26 217 43 ("0")}
        {Lisp-Entry "set-identity-seed" method (public virtual) ("value") #f #f 221 26 221 43 ("value")}
        {Lisp-Entry "get-identity-increment" method (public virtual) () #f #f 225 26 225 48 ("0")}
        {Lisp-Entry "set-identity-increment" method (public virtual) ("value") #f #f 229 26 229 48 ("value")}
        {Lisp-Entry "get-row-guid-col?" method (public virtual) () #f #f 233 26 233 43 ()}
        {Lisp-Entry "get-computed?" method (public virtual) () #f #f 237 26 237 39 ()}
        {Lisp-Entry "get-computed-text" method (public virtual) () #f #f 241 26 241 43 ()}
        {Lisp-Entry "get-collation" method (public virtual) () #f #f 245 26 245 39 ()}}}})
"Inventory-Constraint"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "inventory" "Inventory-Constraint.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.database.inventory.Inventory-Constraint" module (protected) () #f #f 37 18 37 62 ("jazz")
      {Lisp-Entry "Inventory-Constraint" class () ((extends . "Object")) #f #f 40 7 40 27 ("Object")
        {Lisp-Entry "inventory" slot () ((getter . "generate")) #f #f 43 8 43 17 ()}
        {Lisp-Entry "get-inventory" accessor () () #f #f 43 25 43 33 ()}
        {Lisp-Entry "parent" slot () ((getter . "generate")) #f #f 44 8 44 14 ()}
        {Lisp-Entry "get-parent" accessor () () #f #f 44 25 44 33 ()}
        {Lisp-Entry "initialize" method (override) ("inventory" "parent") #f #f 47 20 47 30 ("parent~self" "self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-handle" method (public virtual) () #f #f 58 26 58 36 ()}
        {Lisp-Entry "get-title" method (public virtual) () #f #f 62 26 62 35 ()}
        {Lisp-Entry "get-text" method (public virtual) () #f #f 66 26 66 34 ()}
        {Lisp-Entry "set-text" method (public virtual) ("value") #f #f 70 26 70 34 ("value")}
        {Lisp-Entry "get-checked?" method (public virtual) () #f #f 74 26 74 38 ()}
        {Lisp-Entry "set-checked?" method (public virtual) ("value") #f #f 78 26 78 38 ("value")}
        {Lisp-Entry "get-exclude-replication?" method (public virtual) () #f #f 82 26 82 50 ()}
        {Lisp-Entry "set-exclude-replication?" method (public virtual) ("value") #f #f 86 26 86 50 ("value")}}}})
"Inventory-Index"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "inventory" "Inventory-Index.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.database.inventory.Inventory-Index" module (protected) () #f #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Inventory-Index" class () ((extends . "Object")) #f #f 40 7 40 22 ("Object")
        {Lisp-Entry "inventory" slot () ((getter . "generate")) #f #f 43 8 43 17 ()}
        {Lisp-Entry "get-inventory" accessor () () #f #f 43 25 43 33 ()}
        {Lisp-Entry "parent" slot () ((getter . "generate")) #f #f 44 8 44 14 ()}
        {Lisp-Entry "get-parent" accessor () () #f #f 44 25 44 33 ()}
        {Lisp-Entry "initialize" method (override) ("inventory" "parent") #f #f 47 20 47 30 ("parent~self" "self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-title" method (public virtual) () #f #f 58 26 58 35 ()}
        {Lisp-Entry "get-unique?" method (public virtual) () #f #f 62 26 62 37 ()}
        {Lisp-Entry "set-unique?" method (public virtual) ("value") #f #f 66 26 66 37 ("value")}
        {Lisp-Entry "get-required?" method (public virtual) () #f #f 70 26 70 39 ()}
        {Lisp-Entry "get-ignore-nulls?" method (public virtual) () #f #f 74 26 74 43 ()}
        {Lisp-Entry "get-fields" method (public virtual) () #f #f 78 26 78 36 ()}
        {Lisp-Entry "get-fields/orders" method (public virtual) () #f #f 82 26 82 43 ("get-order" "get-order~" "get-title" "get-title~" "list" "field" "lambda" "map" "get-fields" "fields" "with")}
        {Lisp-Entry "set-fields/orders" method (public virtual) ("value") #f #f 89 26 89 43 ("value")}
        {Lisp-Entry "get-ignore-duplicates?" method (public virtual) () #f #f 93 26 93 48 ()}
        {Lisp-Entry "get-clustered?" method (public virtual) () #f #f 97 26 97 40 ()}
        {Lisp-Entry "get-pad-index?" method (public virtual) () #f #f 101 26 101 40 ()}
        {Lisp-Entry "get-recompute-statistics?" method (public virtual) () #f #f 105 26 105 51 ()}
        {Lisp-Entry "get-fill-factor" method (public virtual) () #f #f 109 26 109 41 ("0")}}}})
"Inventory-Primary-Key"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "inventory" "Inventory-Primary-Key.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database.inventory.Inventory-Primary-Key" module (protected) () #f #f 37 18 37 63 ("jazz")
      {Lisp-Entry "Inventory-Primary-Key" class () ((extends . "Object")) #f #f 40 7 40 28 ("Object")
        {Lisp-Entry "inventory" slot () ((getter . "generate")) #f #f 43 8 43 17 ()}
        {Lisp-Entry "get-inventory" accessor () () #f #f 43 25 43 33 ()}
        {Lisp-Entry "parent" slot () ((getter . "generate")) #f #f 44 8 44 14 ()}
        {Lisp-Entry "get-parent" accessor () () #f #f 44 25 44 33 ()}
        {Lisp-Entry "initialize" method (override) ("inventory" "parent") #f #f 47 20 47 30 ("parent~self" "self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-title" method (public virtual) () #f #f 58 26 58 35 ()}
        {Lisp-Entry "get-fields" method (public virtual) () #f #f 62 26 62 36 ()}
        {Lisp-Entry "get-fields/orders" method (public virtual) () #f #f 66 26 66 43 ("get-order" "get-order~" "get-title" "get-title~" "list" "field" "lambda" "map" "get-fields" "fields" "with")}
        {Lisp-Entry "get-clustered?" method (public virtual) () #f #f 73 26 73 40 ()}
        {Lisp-Entry "get-fill-factor" method (public virtual) () #f #f 77 26 77 41 ("0")}}}})
"Inventory-Procedure"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "inventory" "Inventory-Procedure.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.database.inventory.Inventory-Procedure" module (protected) () #f #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Inventory-Procedure" class () ((extends . "Object")) #f #f 40 7 40 26 ("Object")
        {Lisp-Entry "inventory" slot () ((getter . "generate")) #f #f 43 8 43 17 ()}
        {Lisp-Entry "get-inventory" accessor () () #f #f 43 25 43 33 ()}
        {Lisp-Entry "parent" slot () ((getter . "generate")) #f #f 44 8 44 14 ()}
        {Lisp-Entry "get-parent" accessor () () #f #f 44 25 44 33 ()}
        {Lisp-Entry "initialize" method (override) ("inventory" "parent") #f #f 47 20 47 30 ("parent~self" "self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-title" method (public virtual) () #f #f 58 26 58 35 ()}
        {Lisp-Entry "get-text" method (public virtual) () #f #f 62 26 62 34 ()}
        {Lisp-Entry "set-text" method (public virtual) ("value") #f #f 66 26 66 34 ("value")}}}})
"Inventory-Relation"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "inventory" "Inventory-Relation.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database.inventory.Inventory-Relation" module (protected) () #f #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Inventory-Relation" class () ((extends . "Object")) #f #f 40 7 40 25 ("Object")
        {Lisp-Entry "inventory" slot () ((getter . "generate")) #f #f 43 8 43 17 ()}
        {Lisp-Entry "get-inventory" accessor () () #f #f 43 25 43 33 ()}
        {Lisp-Entry "parent" slot () ((getter . "generate")) #f #f 44 8 44 14 ()}
        {Lisp-Entry "get-parent" accessor () () #f #f 44 25 44 33 ()}
        {Lisp-Entry "initialize" method (override) ("inventory" "parent") #f #f 47 20 47 30 ("parent~self" "self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-title" method (public virtual) () #f #f 58 26 58 35 ()}
        {Lisp-Entry "get-primary-table" method (public virtual) () #f #f 62 26 62 43 ()}
        {Lisp-Entry "set-primary-table" method (public virtual) ("value") #f #f 66 26 66 43 ("value")}
        {Lisp-Entry "get-primary-field-names" method (public virtual) () #f #f 70 26 70 49 ()}
        {Lisp-Entry "set-primary-field-names" method (public virtual) ("value") #f #f 74 26 74 49 ("value")}
        {Lisp-Entry "get-foreign-table" method (public virtual) () #f #f 78 26 78 43 ()}
        {Lisp-Entry "set-foreign-table" method (public virtual) ("value") #f #f 82 26 82 43 ("value")}
        {Lisp-Entry "get-foreign-field-names" method (public virtual) () #f #f 86 26 86 49 ()}
        {Lisp-Entry "set-foreign-field-names" method (public virtual) ("value") #f #f 90 26 90 49 ("value")}
        {Lisp-Entry "get-unique?" method (public virtual) () #f #f 94 26 94 37 ()}
        {Lisp-Entry "set-unique?" method (public virtual) ("value") #f #f 98 26 98 37 ("value")}
        {Lisp-Entry "get-dont-enforce?" method (public virtual) () #f #f 102 26 102 43 ()}
        {Lisp-Entry "get-inherited?" method (public virtual) () #f #f 106 26 106 40 ()}
        {Lisp-Entry "get-update-cascade?" method (public virtual) () #f #f 110 26 110 45 ()}
        {Lisp-Entry "set-update-cascade?" method (public virtual) ("value") #f #f 114 26 114 45 ("value")}
        {Lisp-Entry "get-delete-cascade?" method (public virtual) () #f #f 118 26 118 45 ()}
        {Lisp-Entry "set-delete-cascade?" method (public virtual) ("value") #f #f 122 26 122 45 ("value")}
        {Lisp-Entry "get-left?" method (public virtual) () #f #f 126 26 126 35 ()}
        {Lisp-Entry "set-left?" method (public virtual) ("value") #f #f 130 26 130 35 ("value")}
        {Lisp-Entry "get-right?" method (public virtual) () #f #f 134 26 134 36 ()}
        {Lisp-Entry "set-right?" method (public virtual) ("value") #f #f 138 26 138 36 ("value")}
        {Lisp-Entry "get-checked?" method (public virtual) () #f #f 142 26 142 38 ()}
        {Lisp-Entry "get-exclude-replication?" method (public virtual) () #f #f 146 26 146 50 ()}}}})
"Inventory-Table"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "inventory" "Inventory-Table.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.database.inventory.Inventory-Table" module (protected) () #f #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Inventory-Table" class () ((extends . "Object")) #f #f 40 7 40 22 ("Object")
        {Lisp-Entry "inventory" slot () ((getter . "generate")) #f #f 43 8 43 17 ()}
        {Lisp-Entry "get-inventory" accessor () () #f #f 43 25 43 33 ()}
        {Lisp-Entry "parent" slot () ((getter . "generate")) #f #f 44 8 44 14 ()}
        {Lisp-Entry "get-parent" accessor () () #f #f 44 25 44 33 ()}
        {Lisp-Entry "initialize" method (override) ("inventory" "parent") #f #f 47 20 47 30 ("parent~self" "self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-owner" method (public virtual) () #f #f 58 26 58 35 ()}
        {Lisp-Entry "set-owner" method (public virtual) ("value") #f #f 62 26 62 35 ("value")}
        {Lisp-Entry "get-name" method (public virtual) () #f #f 66 26 66 34 ()}
        {Lisp-Entry "get-title" method (public virtual) () #f #f 70 26 70 35 ()}
        {Lisp-Entry "get-linked?" method (public virtual) () #f #f 74 26 74 37 ()}
        {Lisp-Entry "get-connect" method (public virtual) () #f #f 78 26 78 37 ()}
        {Lisp-Entry "set-connect" method (public virtual) ("value") #f #f 82 26 82 37 ("value")}
        {Lisp-Entry "get-source-table-name" method (public virtual) () #f #f 86 26 86 47 ()}
        {Lisp-Entry "set-source-table-name" method (public virtual) ("value") #f #f 90 26 90 47 ("value")}
        {Lisp-Entry "get-validation-rule" method (public virtual) () #f #f 94 26 94 45 ()}
        {Lisp-Entry "set-validation-rule" method (public virtual) ("value") #f #f 98 26 98 45 ("value")}
        {Lisp-Entry "get-validation-text" method (public virtual) () #f #f 102 26 102 45 ()}
        {Lisp-Entry "set-validation-text" method (public virtual) ("value") #f #f 106 26 106 45 ("value")}
        {Lisp-Entry "get-description" method (public virtual) () #f #f 110 26 110 41 ()}
        {Lisp-Entry "set-description" method (public virtual) ("value") #f #f 114 26 114 41 ("value")}
        {Lisp-Entry "get-primary-key" method (public virtual) () #f #f 123 26 123 41 ()}
        {Lisp-Entry "create-primary-key" method (public virtual) ("name" "fields/orders") #f #f 127 26 127 44 ("fields/orders" "name")}
        {Lisp-Entry "remove-primary-key" method (public virtual) ("name") #f #f 131 26 131 44 ("name")}
        {Lisp-Entry "append-primary-key" method (public virtual) ("primary-key") #f #f 135 26 135 44 ("primary-key")}
        {Lisp-Entry "get-columns" method (public virtual) () #f #f 144 26 144 37 ()}
        {Lisp-Entry "get-column" method (public virtual) ("name") #f #f 148 26 148 36 ("name")}
        {Lisp-Entry "create-column" method (public virtual) ("name") #f #f 152 26 152 39 ("name")}
        {Lisp-Entry "append-column" method (public virtual) ("column") #f #f 156 26 156 39 ("column")}
        {Lisp-Entry "remove-column" method (public virtual) ("name") #f #f 160 26 160 39 ("name")}
        {Lisp-Entry "get-indexes" method (public virtual) () #f #f 169 26 169 37 ()}
        {Lisp-Entry "get-index" method (public virtual) ("name") #f #f 173 26 173 35 ("name")}
        {Lisp-Entry "create-index" method (public virtual) ("name") #f #f 177 26 177 38 ("name")}
        {Lisp-Entry "append-index" method (public virtual) ("index") #f #f 181 26 181 38 ("index")}
        {Lisp-Entry "remove-index" method (public virtual) ("name") #f #f 185 26 185 38 ("name")}
        {Lisp-Entry "create-or-modify-trigger" method (public virtual) ("name" "text") #f #f 194 26 194 50 ("append-trigger" "set-text" "set-text~" "create-trigger" "new-trigger" "remove-trigger" "when" "error?:" "get-trigger" "trigger" "with" "text" "name")}
        {Lisp-Entry "get-triggers" method (public virtual) () #f #f 203 26 203 38 ()}
        {Lisp-Entry "get-trigger" method (public virtual) ("name" "." "rest") #f #f 207 26 207 37 ("rest" "name")}
        {Lisp-Entry "create-trigger" method (public virtual) ("name") #f #f 211 26 211 40 ("name")}
        {Lisp-Entry "append-trigger" method (public virtual) ("trigger") #f #f 215 26 215 40 ("trigger")}
        {Lisp-Entry "remove-trigger" method (public virtual) ("name") #f #f 219 26 219 40 ("name")}
        {Lisp-Entry "create-or-modify-constraint" method (public virtual) ("name" "text" "checked?" "exclude-replication?") #f #f 228 26 228 53 ("set-checked?" "set-checked?~" "append-constraint" "set-exclude-replication?" "set-exclude-replication?~" "set-text" "set-text~" "create-constraint" "new-constraint" "remove-constraint" "when" "error?:" "get-constraint" "constraint" "with" "exclude-replication?" "checked?" "text" "name")}
        {Lisp-Entry "get-constraints" method (public virtual) () #f #f 239 26 239 41 ()}
        {Lisp-Entry "get-constraint" method (public virtual) ("name" "." "rest") #f #f 243 26 243 40 ("rest" "name")}
        {Lisp-Entry "create-constraint" method (public virtual) ("name") #f #f 247 26 247 43 ("name")}
        {Lisp-Entry "append-constraint" method (public virtual) ("constraint") #f #f 251 26 251 43 ("constraint")}
        {Lisp-Entry "remove-constraint" method (public virtual) ("name") #f #f 255 26 255 43 ("name")}
        {Lisp-Entry "get-text-file-group" method (public virtual) () #f #f 264 26 264 45 ()}
        {Lisp-Entry "set-text-file-group" method (public virtual) ("value") #f #f 268 26 268 45 ("value")}
        {Lisp-Entry "get-file-group" method (public virtual) () #f #f 272 26 272 40 ()}
        {Lisp-Entry "set-file-group" method (public virtual) ("value") #f #f 276 26 276 40 ("value")}}}})
"Inventory-Trigger"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "inventory" "Inventory-Trigger.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.database.inventory.Inventory-Trigger" module (protected) () #f #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Inventory-Trigger" class () ((extends . "Object")) #f #f 40 7 40 24 ("Object")
        {Lisp-Entry "inventory" slot () ((getter . "generate")) #f #f 43 8 43 17 ()}
        {Lisp-Entry "get-inventory" accessor () () #f #f 43 25 43 33 ()}
        {Lisp-Entry "parent" slot () ((getter . "generate")) #f #f 44 8 44 14 ()}
        {Lisp-Entry "get-parent" accessor () () #f #f 44 25 44 33 ()}
        {Lisp-Entry "initialize" method (override) ("inventory" "parent") #f #f 47 20 47 30 ("parent~self" "self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-title" method (public virtual) () #f #f 58 26 58 35 ()}
        {Lisp-Entry "get-text" method (public virtual) () #f #f 62 26 62 34 ()}
        {Lisp-Entry "set-text" method (public virtual) ("value") #f #f 66 26 66 34 ("value")}}}})
"Inventory-Updater"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "inventory" "Inventory-Updater.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database.inventory.Inventory-Updater" module (protected) () #f #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Inventory-Updater" class () ((extends . "Object")) #f #f 40 7 40 24 ("Object")}
      {Lisp-Entry "Inventory-Updater" class () ((extends . "Object")) #f #f 46 7 46 24 ("Object")
        {Lisp-Entry "connection" slot () () #f #f 49 8 49 18 ()}
        {Lisp-Entry "inventory" slot () () #f #f 50 8 50 17 ()}
        {Lisp-Entry "pending-properties" slot () ((initialize . "'()")) #f #f 51 8 51 26 ()}
        {Lisp-Entry "pending-deletes" slot () ((initialize . "'()")) #f #f 52 8 52 23 ()}
        {Lisp-Entry "pending-triggers/indexes" slot () ((initialize . "'()")) #f #f 53 8 53 32 ()}
        {Lisp-Entry "ugly-patch" slot () ((initialize . "#f")) #f #f 54 8 54 18 ()}
        {Lisp-Entry "initialize" method () ("connection") #f #f 57 11 57 21 ("get-inventory" "get-inventory~" "inventory" "inventory~self" "self" "connection~self" "set!" "nextmethod" "connection")}
        {Lisp-Entry "Actions" definition () () #f #f 68 14 68 21 ("no-action" "modify" "add" "right" "remove" "left")}
        {Lisp-Entry "update-inventory" method (public) ("delta" "reporter") #f #f 75 18 75 34 ("reporter:" "title:" "ugly-patch" "close" "close~" "for-each" "process-pending-deletes" "process-pending-triggers/indexes" "process-pending-properties" "process-table-triggers" "SQLServer-Inventory" "is?" "when" "inventory" "process-children" "pending-triggers/indexes" "pending-deletes" "pending-properties" "set!" "lambda" "with-execution-context" "reporter" "delta")}
        {Lisp-Entry "process-children" method () ("entity" "parent-proxy" "reporter") #f #f 94 11 94 27 ("8" "constraint" "7" "trigger" "6" "index" "5" "primary-key" "-1" "ordinal-position:" "get-property" "get-property~" "third" "or" "4" "column" "3" "relation" "2" "procedure" "1" "view" "0" "list" "table" "get-kind" "get-kind~" "case" "get-name" "get-name~" "name" "let" "x" "key:" "get-children" "get-children~" "<" "sort" "process-entity" "create-sql" "SQLServer-Inventory" "is?" "if" "object" "lambda" "for-each" "reporter" "parent-proxy" "entity")}
        {Lisp-Entry "create-sql" method () ("object" "parent-proxy" "reporter") #f #f 118 11 118 21 ("view" "generate-sql-procedure" "procedure" "generate-sql-table" "table" "when" "has-differences?:" "get-property" "get-property~" "has-differences?" "let" "else" "generate-sql-relation" "relation" "get-kind" "get-kind~" "case" "lambda" "with-continue" "reporter" "parent-proxy" "object")}
        {Lisp-Entry "process-object" method () ("object" "recreate-table?" "create-proc" "drop-proc") #f #f 132 11 132 25 ("modify" "right" "case" "left" "eq?" "unless" "if" "difference:" "get-property" "get-property~" "action" "let" "drop-proc" "create-proc" "recreate-table?" "object")}
        {Lisp-Entry "find-action-on-process-property" method () ("action" "old-value" "new-value" "recreate-table?") #f #f 144 11 144 42 ("left" "modify" "eq?" "right" "/=" "and" "when" "if" "recreate-table?" "new-value" "old-value" "action")}
        {Lisp-Entry "drop-object" method () ("object") #f #f 157 11 157 22 ("execute-sql-commit-preserve" "tie" "script" "get-kind" "get-kind~" "object-kind" "get-name" "get-name~" "object-name" "let*" "object")}
        {Lisp-Entry "generate-sql-header-script" method () () #f #f 164 11 164 37 ("tie")}
        {Lisp-Entry "Table-Not-Found" constant () () #f #f 180 12 180 27 ("#x80045510")}
        {Lisp-Entry "set-table-tempo-name" method () ("object") #f #f 184 11 184 31 ("Table-Not-Found" "Item" "Item~" "cotry" "format" "set!" "increase!" "while" "inventory" "get-database" "get-database~" "get-Tables" "get-Tables~" "tables" "with" "looking" "table-tempo-name" "-1" "suffix" "get-name" "get-name~" "table-name" "let" "object")}
        {Lisp-Entry "generate-sql-table" method () ("table" "reporter") #f #f 197 11 197 29 ("modify" "drop-table" "left" "right" "case" "generate-sql-partial-table" "generate-sql-full-table" "regenerate-full-table?" "null?" "if" "difference:" "get-property" "get-property~" "action" "let" "reporter" "table")}
        {Lisp-Entry "regenerate-full-table?" method () ("table") #f #f 211 11 211 33 ("left" "right" "modify" "case" "modify-column?" "null?" "if" "difference:" "get-property" "get-property~" "action" "let" "table")}
        {Lisp-Entry "modify-column?" method () ("table") #f #f 221 11 221 25 ("-1" "key:" "get-columns" "get-columns~" "<" "sort" "third" "second" "+" "/=" "null?" "when" "else" "decrease!" "left" "increase!" "right" "case" "nullable?:" "datatype:" "modify" "ordinal-position:" "first" "=" "or" "difference:" "get-property" "get-property~" "action" "column" "lambda" "some?" "0" "column-pos" "let" "table")}
        {Lisp-Entry "generate-sql-full-table" method () ("table" "reporter") #f #f 242 11 242 34 ("generate-sql-access-right" "process-triggers" "process-constraints" "process-indexes" "process-primary-key" "generate-sql-identity-end" "recreate-table?:" "set-property" "set-property~" "undo-create-table" "set!" "process-copy-data" "generate-sql-identity-start" "check-default-values" "process-default-values" "process-description-columns" "process-description-table" "begin" "unwind-protect" "temp-table-created" "let" "generate-sql-create-table" "drop-default-values" "drop-table-relation" "generate-sql-header-script" "execute-sql-commit-preserve" "user-message" "user-message~" "get-columns" "get-columns~" "identity?:" "third" "column" "lambda" "some?" "identity-column?" "if" "table-current-name" "set-table-tempo-name" "not" "when" "table-tempo-name" "right" "=" "new-table?" "difference:" "get-property" "get-property~" "action" "get-name" "get-name~" "table-name" "let*" "reporter" "table")}
        {Lisp-Entry "undo-create-table" method () ("table-name") #f #f 283 11 283 28 ("execute-sql-commit-preserve" "tie" "script" "let" "table-name")}
        {Lisp-Entry "generate-sql-partial-table" method () ("table" "reporter") #f #f 288 11 288 37 ("process-triggers" "process-constraints" "process-indexes" "process-primary-key" "process-default-values" "process-description-columns" "process-description-table" "user-message" "user-message~" "when" "get-name" "get-name~" "table-name" "let" "reporter" "table")}
        {Lisp-Entry "create-fields-list" method () ("list") #f #f 302 11 302 29 ("0" ">=" "tie" "identity-replication?:" "id-repl" "identity-increment:" "id-inc" "identity-seed:" "id-seed" "identity?:" "identity-string" "nullable?:" "if" "nullable-string" "ordinal-position:" "ordinal-position" "get-datatype" "get-datatype~" "third" "get-native" "get-native~" "datatype" "get-name" "get-name~" "field-name" "let" "left" "difference:" "get-property" "get-property~" "/=" "when" "field" "lambda" "collect" "list")}
        {Lisp-Entry "generate-sql-create-table" method () ("object" "table-name") #f #f 324 11 324 36 ("tie" "def-table" "-1" "ordinal-position:" "get-property" "get-property~" "third" "or" "column" "lambda" "key:" "get-columns" "get-columns~" "<" "sort" "create-fields-list" "join" "fields-list" "let*" "table-name" "object")}
        {Lisp-Entry "get-added-columns-without-default-value" method () ("table") #f #f 334 11 334 50 ("get-columns" "get-columns~" "get-defaultable?" "get-defaultable?~" "=" "or" "not" "second" "null?" "and" "datatype:" "new-datatype" "nullable?:" "new-nullable?" "first" "new-default-value-action" "default-value:" "third" "new-default-value" "ordinal-position:" "get-property" "get-property~" "ordinal-position" "let" "column" "lambda" "collect-if" "table")}
        {Lisp-Entry "process-copy-data" method () ("object" "new-table" "old-table") #f #f 351 11 351 28 ("execute-sql-commit-preserve" "script-drop-rename-table" "tie" "script-copy" "get-native" "get-native~" "format" "not" "and" "need-default?" "modify" "action-for-property" "eq?" "must-convert?" "safe-name" "let" "else" "if" "cond" "read-only" "=" "read-only?" "indirect?:" "default-value:" "get-native-with-value" "get-native-with-value~" "default-value" "datatype:" "datatype" "nullable?:" "nullable?" "object-old-property" "null?" "new-column?" "new-values" "get-name" "get-name~" "encapsulate-name" "map" "new-names" "key:" "get-columns" "get-columns~" "ordinal-position:" "object-new-property" "not-null?" "column" "lambda" "collect-if" "<" "sort" "new-columns" "let*" "old-table" "new-table" "object")}
        {Lisp-Entry "drop-table" method () ("table") #f #f 396 11 396 21 ("drop-object" "drop-default-values" "drop-table-relation" "table")}
        {Lisp-Entry "process-description-table" method () ("table" "table-name" "recreate-table?") #f #f 402 11 402 36 ("generate-sql-update-description-table" "modify" "generate-sql-drop-description-table" "left" "generate-sql-add-description-table" "right" "case" "execute-sql-commit-preserve" "when" "find-action-on-process-property" "set!" "description:" "get-property" "get-property~" "new-value" "old-value" "action" "bind" "recreate-table?" "table-name" "table")}
        {Lisp-Entry "generate-sql-add-description-table" method () ("table-name" "description") #f #f 413 11 413 45 ("tie" "script" "substitute-alist" "user" "let*" "description" "table-name")}
        {Lisp-Entry "generate-sql-drop-description-table" method () ("table-name") #f #f 422 11 422 46 ("tie" "script" "user" "let*" "table-name")}
        {Lisp-Entry "generate-sql-update-description-table" method () ("table-name" "description") #f #f 428 11 428 48 ("tie" "script" "substitute-alist" "user" "let*" "description" "table-name")}
        {Lisp-Entry "generate-sql-drop-columns" method () ("object" "table-name") #f #f 443 11 443 36 ("tie" "script" "list" "join" "columns-list" "let*" "table-name" "object")}
        {Lisp-Entry "generate-sql-add-default-value" method () ("table-name" "column-name" "constraint-name" "default-value") #f #f 450 11 450 41 ("tie" "script" "let" "default-value" "constraint-name" "column-name" "table-name")}
        {Lisp-Entry "process-default-values" method () ("table" "table-name" "recreate-table?") #f #f 456 11 456 33 ("get-columns" "get-columns~" "script-add-default-value" "script-drop-default-value" "modify" "generate-sql-drop-constraint" "find-constraint-name" "old-constraint-name" "left" "format" "title:" "generate-sql-add-default-value" "execute-sql-commit-preserve" "with-execution-node" "right" "case" "tie" "new-constraint-name" "column-name" "let*" "when" "find-action-on-process-property" "set!" "default-value:" "get-property" "get-property~" "new-value" "old-value" "action" "bind" "column" "lambda" "for-each" "get-name" "get-name~" "constraint-table-name" "let" "recreate-table?" "table-name" "table")}
        {Lisp-Entry "check-default-values" method () ("table" "table-name") #f #f 487 11 487 31 ("get-columns" "get-columns~" "error" "find-default-value" "/=" "modify" "right" "case" "tie" "new-constraint-name" "column-name" "let*" "when" "find-action-on-process-property" "set!" "default-value:" "get-property" "get-property~" "new-value" "old-value" "action" "bind" "column" "lambda" "for-each" "get-name" "get-name~" "constraint-table-name" "let" "table-name" "table")}
        {Lisp-Entry "drop-default-values" method () ("table") #f #f 501 11 501 30 ("get-columns" "get-columns~" "execute-sql-commit-preserve" "generate-sql-drop-constraint" "script-drop-constraint" "generate-sql-header-script" "script-header" "find-constraint-name" "constraint-name" "column-name" "let*" "default-value:" "get-property" "get-property~" "second" "when" "column" "lambda" "for-each" "get-name" "get-name~" "table-name" "let" "table")}
        {Lisp-Entry "find-constraint-name" method () ("table-name" "column-name") #f #f 514 11 514 31 ("get-Name" "get-Name~" "get-DRIDefault" "get-DRIDefault~" "default" "column" "get-Columns" "get-Columns~" "columns" "Item" "Item~" "table" "inventory" "get-database" "get-database~" "get-Tables" "get-Tables~" "tables" "with" "column-name" "table-name")}
        {Lisp-Entry "find-default-value" method () ("constraint-name") #f #f 523 11 523 29 ("0" "connection" "load-value" "load-value~" "tie" "script" "let" "constraint-name")}
        {Lisp-Entry "generate-sql-identity-start" method () ("table-name") #f #f 528 11 528 38 ("tie" "script" "let" "table-name")}
        {Lisp-Entry "generate-sql-identity-end" method () ("table-name") #f #f 533 11 533 36 ("tie" "script" "let" "table-name")}
        {Lisp-Entry "process-description-columns" method () ("table" "table-name" "recreate-table?") #f #f 538 11 538 38 ("get-columns" "get-columns~" "generate-sql-update-description-column" "modify" "generate-sql-drop-description-column" "left" "generate-sql-add-description-column" "right" "case" "execute-sql-commit-preserve" "when" "get-name" "get-name~" "column-name" "let" "find-action-on-process-property" "set!" "description:" "get-property" "get-property~" "new-value" "old-value" "action" "bind" "column" "lambda" "for-each" "recreate-table?" "table-name" "table")}
        {Lisp-Entry "generate-sql-add-description-column" method () ("table-name" "column-name" "description") #f #f 552 11 552 46 ("tie" "script" "substitute-alist" "user" "let*" "description" "column-name" "table-name")}
        {Lisp-Entry "generate-sql-drop-description-column" method () ("table-name" "column-name") #f #f 561 11 561 47 ("tie" "script" "user" "let*" "column-name" "table-name")}
        {Lisp-Entry "generate-sql-update-description-column" method () ("table-name" "column-name" "description") #f #f 567 11 567 49 ("tie" "script" "substitute-alist" "user" "let*" "description" "column-name" "table-name")}
        {Lisp-Entry "process-primary-key" method () ("table" "recreate-table?") #f #f 581 11 581 30 ("drop-primary-key" "add-primary-key" "process-object" "when" "get-primary-key" "get-primary-key~" "primary-key" "let" "recreate-table?" "table")}
        {Lisp-Entry "add-primary-key" method () ("object") #f #f 587 11 587 26 ("execute-sql-commit-preserve" "generate-sql-primary-key" "script-create-primary-key" "generate-sql-header-script" "script-header" "let" "object")}
        {Lisp-Entry "drop-primary-key" method () ("primary-key") #f #f 594 11 594 27 ("execute-sql-commit-preserve" "drop-table-relation" "generate-sql-drop-constraint" "script-drop-constraint" "generate-sql-header-script" "script-header" "table-name" "get-parent" "get-parent~" "table" "get-name" "get-name~" "constraint-name" "let*" "primary-key")}
        {Lisp-Entry "generate-sql-primary-key" method () ("primary-key") #f #f 605 11 605 35 ("script" "tie" "0" ">" "fill-factor-text" "fill-factor:" "fill-factor" "clustered?:" "if" "clustered" "fields/orders:" "get-property" "get-property~" "third" "create-fields/orders-list" "fields/orders" "pk-name" "get-parent" "get-parent~" "get-name" "get-name~" "table-name" "let*" "primary-key")}
        {Lisp-Entry "create-fields/orders-list" method () ("list") #f #f 620 11 620 36 ("tie" "ascending" "=" "if" "order-string" "second" "order" "first" "encapsulate-name" "field" "let*" "field/order" "lambda" "map" "join" "list")}
        {Lisp-Entry "process-indexes" method () ("object" "recreate-table?") #f #f 636 11 636 26 ("get-indexes" "get-indexes~" "drop-index" "add-index" "process-object" "index" "lambda" "for-each" "recreate-table?" "object")}
        {Lisp-Entry "add-index" method () ("index") #f #f 642 11 642 20 ("execute-sql-commit-preserve" "generate-sql-index" "script-create-index" "generate-sql-header-script" "script-header" "let" "index")}
        {Lisp-Entry "drop-index" method () ("index") #f #f 649 11 649 21 ("execute-sql-commit-preserve" "tie" "script" "get-parent" "get-parent~" "table-name" "get-name" "get-name~" "index-name" "let*" "index")}
        {Lisp-Entry "generate-sql-index" method () ("index") #f #f 656 11 656 29 ("script" "options" "list" "remove-false" "options-list" "recompute-statistics?:" "statistics-norecompute" "ignore-duplicates?:" "ignore-dup-key" "tie" "0" ">" "fill-factor-text" "fill-factor:" "fill-factor" "pad-index?:" "pad-index" "clustered?:" "clustered" "unique?:" "if" "unique" "fields/orders:" "get-property" "get-property~" "third" "create-fields/orders-list" "fields/orders" "index-name" "get-parent" "get-parent~" "get-name" "get-name~" "table-name" "let*" "index")}
        {Lisp-Entry "process-triggers" method () ("object" "recreate-table?") #f #f 685 11 685 27 ("get-triggers" "get-triggers~" "drop-object" "create-procedure" "process-object" "with-continue" "trigger" "lambda" "for-each" "recreate-table?" "object")}
        {Lisp-Entry "process-table-triggers" method () ("objects") #f #f 693 11 693 33 ("get-tables" "get-tables~" "process-triggers" "left" "=" "unless" "difference:" "action" "recreate-table?:" "get-property" "get-property~" "recreate-table?" "let" "table" "lambda" "for-each" "objects")}
        {Lisp-Entry "process-constraints" method () ("table" "recreate-table?") #f #f 707 11 707 30 ("get-constraints" "get-constraints~" "drop-constraint" "create-constraint" "process-object" "constraint" "lambda" "for-each" "recreate-table?" "table")}
        {Lisp-Entry "create-constraint" method () ("constraint") #f #f 713 11 713 28 ("execute-sql-commit-preserve" "script" "tie" "checked?:" "not" "checked-text" "exclude-replication?:" "replication-text" "if" "check-text" "check?" "text:" "get-property" "get-property~" "third" "text" "constraint-name" "get-parent" "get-parent~" "get-name" "get-name~" "table-name" "let*" "constraint")}
        {Lisp-Entry "drop-constraint" method () ("constraint") #f #f 730 11 730 26 ("execute-sql-commit-preserve" "tie" "script" "constraint-name" "get-parent" "get-parent~" "get-name" "get-name~" "table-name" "let*" "constraint")}
        {Lisp-Entry "generate-sql-drop-constraint" method () ("table-name" "constraint-name") #f #f 738 11 738 39 ("tie" "script" "let" "constraint-name" "table-name")}
        {Lisp-Entry "generate-sql-relation" method () ("relation") #f #f 749 11 749 32 ("drop-relation" "create-relation" "process-object" "recreate-table?:" "get-property" "get-property~" "recreate-table?" "let" "relation")}
        {Lisp-Entry "create-relation" method () ("relation") #f #f 754 11 754 26 ("execute-sql-commit-preserve" "script" "tie" "checked?:" "not" "checked-text" "check-text" "check?" "exclude-replication?:" "replication-text" "delete-cascade?:" "on-delete-cascade" "update-cascade?:" "get-property" "get-property~" "if" "on-update-cascade" "get-foreign-columns" "get-foreign-columns~" "foreign-fields" "get-foreign-table" "get-foreign-table~" "foreign-table" "get-primary-columns" "get-primary-columns~" "primary-fields" "get-primary-table" "get-primary-table~" "third" "primary-table" "get-name" "get-name~" "relation-name" "let*" "relation")}
        {Lisp-Entry "drop-relation" method () ("relation") #f #f 781 11 781 24 ("execute-sql-commit-preserve" "tie" "script" "get-foreign-table" "get-foreign-table~" "second" "foreign-table" "get-name" "get-name~" "relation-name" "let*" "relation")}
        {Lisp-Entry "drop-table-relation" method () ("table") #f #f 789 11 789 30 ("get-parent" "get-parent~" "get-relations" "get-relations~" "set-property" "set-property~" "drop-relation" "=" "or" "when" "get-primary-table" "get-primary-table~" "primary-table" "get-foreign-table" "get-foreign-table~" "second" "foreign-table" "recreate-table?:" "get-property" "get-property~" "unless" "relation" "lambda" "for-each" "get-name" "get-name~" "table-name" "let" "table")}
        {Lisp-Entry "generate-sql-procedure" method () ("object" "reporter") #f #f 807 11 807 33 ("modify" "drop-object" "left" "create-procedure" "right" "case" "user-message" "user-message~" "when" "get-name" "get-name~" "name" "difference:" "get-property" "get-property~" "action" "let" "reporter" "object")}
        {Lisp-Entry "create-procedure" method () ("object") #f #f 819 11 819 27 ("connection" "execute" "execute~" "text:" "get-property" "get-property~" "third" "script-create-procedure" "generate-sql-header-script" "script-header" "let" "object")}
        {Lisp-Entry "generate-sql-access-right" method () () #f #f 832 11 832 36 ("tie" "script" "user" "let*")}
        {Lisp-Entry "object-new-property" method () ("object" "property") #f #f 849 11 849 30 ("get-property" "get-property~" "third" "property" "object")}
        {Lisp-Entry "object-old-property" method () ("object" "property") #f #f 853 11 853 30 ("get-property" "get-property~" "second" "property" "object")}
        {Lisp-Entry "action-for-property" method () ("object" "property") #f #f 857 11 857 30 ("get-property" "get-property~" "first" "property" "object")}
        {Lisp-Entry "encapsulate-name" method () ("name") #f #f 861 11 861 27 ("format" "name")}
        {Lisp-Entry "execute-sql-commit-preserve" method () ("script") #f #f 865 11 865 38 ("connection" "execute" "execute~" "commit" "tie" "let*" "script")}
        {Lisp-Entry "process-entity" method () ("object" "parent-proxy" "reporter") #f #f 878 11 878 25 ("process-modify" "no-action" "modify" "process-delete" "remove" "process-new" "add" "case" "get-name" "get-name~" "name" "get-kind" "get-kind~" "kind" "Actions" "difference:" "get-property" "get-property~" "assq" "cdr" "action" "let" "lambda" "with-continue" "reporter" "parent-proxy" "object")}
        {Lisp-Entry "process-new" method () ("object" "parent-proxy" "kind" "name" "reporter") #f #f 890 11 890 22 ("format" "title:" "process-proxy" "cons" "ugly-patch" "set!" "new-proxy" "proxy" "let" "lambda" "with-execution-node" "reporter" "name" "kind" "parent-proxy" "object")}
        {Lisp-Entry "process-delete" method () ("object" "parent-proxy" "kind" "name" "reporter") #f #f 899 11 899 25 ("format" "title:" "process-proxy" "lambda" "with-execution-node" "reporter" "name" "kind" "parent-proxy" "object")}
        {Lisp-Entry "process-modify" method () ("object" "parent-proxy" "kind" "name" "reporter") #f #f 906 11 906 25 ("format" "title:" "process-proxy" "cons" "ugly-patch" "set!" "get-proxy" "proxy" "let" "lambda" "with-execution-node" "reporter" "name" "kind" "parent-proxy" "object")}
        {Lisp-Entry "Recreate" definition () () #f #f 915 14 915 22 ("procedure" "relation" "view" "constraint" "trigger" "index" "primary-key")}
        {Lisp-Entry "process-proxy" method () ("object" "parent-proxy" "proxy" "reporter") #f #f 919 11 919 24 ("add-pending-trigger/index" "index" "trigger" "complete-append" "SQLServer-Inventory-Relation" "unless" "process-children" "modify-proxy" "cons" "ugly-patch" "new-proxy" "set!" "delete-proxy" "linked?:" "table" "Recreate" "memq?" "has-differences?:" "and" "modify" "no-action" "or" "process-pending-triggers/indexes" "relation" "eq?" "list" "add-pending-delete" "remove" "if" "user-message" "user-message~" "when" "add" "=" "new?" "Data-Entity" "is?" "entity?" "get-name" "get-name~" "name" "get-kind" "get-kind~" "kind" "Actions" "difference:" "get-property" "get-property~" "assq" "cdr" "action" "let*" "reporter" "proxy" "parent-proxy" "object")}
        {Lisp-Entry "new-proxy" method () ("parent" "kind" "name" "object") #f #f 957 11 957 20 ("error" "else" "create-procedure" "create-procedure~" "procedure" "create-relation-complete" "create-relation-complete~" "foreign-columns:" "foreign-fields" "foreign-table:" "foreign-table" "primary-columns:" "primary-fields" "primary-table:" "primary-table" "create-relation" "create-relation~" "SQLServer-Inventory" "is-not?" "if" "relation" "create-view" "create-view~" "view" "create-constraint" "create-constraint~" "constraint" "create-trigger" "create-trigger~" "trigger" "create-index" "create-index~" "index" "create-column" "create-column~" "column" "create-primary-key" "create-primary-key~" "fields/orders:" "get-property" "get-property~" "third" "fields/orders" "let" "primary-key" "create-table" "create-table~" "table" "case" "object" "name" "kind" "parent")}
        {Lisp-Entry "get-proxy" method () ("parent" "kind" "name") #f #f 983 11 983 20 ("error" "else" "get-procedure" "get-procedure~" "procedure" "get-relation" "get-relation~" "relation" "get-view" "get-view~" "view" "get-constraint" "get-constraint~" "constraint" "get-trigger" "get-trigger~" "trigger" "get-index" "get-index~" "index" "get-column" "get-column~" "column" "get-primary-key" "get-primary-key~" "primary-key" "get-table" "get-table~" "table" "case" "name" "kind" "parent")}
        {Lisp-Entry "modify-proxy" method () ("object" "physical" "kind" "force?") #f #f 1002 11 1002 23 ("property-names" "property-names~" "modify-proxy-property" "list" "add-pending-property" "allow-zero-length?" "display-format" "description" "memq?" "if" "modify" "=" "or" "when" "new-value" "old-value" "action" "bind" "get-property" "get-property~" "composite" "symbol->keyword" "property" "let*" "symbol" "lambda" "for-each" "force?" "kind" "physical" "object")}
        {Lisp-Entry "modify-proxy-property" method () ("object" "physical" "kind" "property" "value" "force?") #f #f 1014 11 1014 32 ("format" "title:" "error" "else" "modify-relation-property" "relation" "modify-procedure-property" "procedure" "modify-view-property" "view" "modify-constraint-property" "constraint" "modify-trigger-property" "trigger" "modify-index-property" "index" "modify-column-property" "column" "modify-primary-key-property" "primary-key" "modify-table-property" "table" "case" "lambda" "with-execution-node" "force?" "value" "property" "kind" "physical" "object")}
        {Lisp-Entry "modify-table-property" method () ("physical" "property" "value") #f #f 1031 11 1031 32 ("error" "else" "set-validation-text" "set-validation-text~" "validation-text" "set-validation-rule" "set-validation-rule~" "validation-rule" "set-description" "set-description~" "description" "set-source-table-name" "set-source-table-name~" "source-table-name" "set-connect" "set-connect~" "connect" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-primary-key-property" method () ("physical" "property" "value") #f #f 1041 11 1041 38 ("error" "else" "fill-factor" "clustered?" "fields/orders" "case" "value" "property" "physical")}
        {Lisp-Entry "create-field-by-sql" method () ("physical" "value") #f #f 1047 11 1047 30 ("connection" "execute" "execute~" "tie" "request" "format" "if" "size-label" "has-size?" "has-size?~" "sizeable?" "get-size" "get-size~" "size" "get-name" "get-name~" "type-name" "get-nullable?" "get-nullable?~" "nullable?" "field-name" "get-table" "get-table~" "get-title" "get-title~" "table-name" "let*" "value" "physical")}
        {Lisp-Entry "modify-column-property" method () ("object" "physical" "property" "value" "force?") #f #f 1064 11 1064 33 ("error" "set-identity-seed" "set-identity-seed~" "identity-seed" "set-identity-increment" "set-identity-increment~" "identity-increment" "identity-replication?" "set-identity?" "set-identity?~" "identity?" "set-auto-increment?" "set-auto-increment?~" "auto-increment?" "set-ordinal-position" "set-ordinal-position~" "ordinal-position" "set-display-format" "set-display-format~" "display-format" "set-allow-zero-length?" "set-allow-zero-length?~" "allow-zero-length?" "set-validation-text" "set-validation-text~" "validation-text" "set-validation-rule" "set-validation-rule~" "validation-rule" "set-nullable?" "set-nullable?~" "get-size" "get-size~" "set-size" "set-size~" "begin" "=" "get-name" "get-name~" "new-type" "get-type" "get-type~" "type" "get-nullable?" "get-nullable?~" "nullable?" "let" "else" "create-field-by-sql" "Access-Datatype" "typecase" "set-datatype" "set-datatype~" "if" "datatype" "set-description" "set-description~" "description" "set-default-value" "set-default-value~" "default-value" "case" "inventory" "column-supports-property?" "column-supports-property?~" "when" "force?" "value" "property" "physical" "object")}
        {Lisp-Entry "modify-index-property" method () ("physical" "property" "value") #f #f 1099 11 1099 32 ("error" "else" "exclude-replication?" "checked?" "fill-factor" "recompute-statistics?" "pad-index?" "clustered?" "ignore-duplicates?" "set-unique?" "set-unique?~" "SQLServer-Inventory-Index" "is?" "unless" "unique?" "set-fields/orders" "set-fields/orders~" "fields/orders" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-trigger-property" method () ("physical" "property" "value") #f #f 1107 11 1107 34 ("error" "else" "set-text" "set-text~" "text" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-constraint-property" method () ("physical" "property" "value") #f #f 1113 11 1113 37 ("error" "else" "checked?" "exclude-replication?" "text" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-procedure-property" method () ("physical" "property" "value") #f #f 1119 11 1119 36 ("error" "else" "set-text" "set-text~" "text" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-view-property" method () ("physical" "property" "value") #f #f 1125 11 1125 31 ("error" "else" "set-text" "set-text~" "text" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-relation-property" method () ("physical" "property" "value") #f #f 1131 11 1131 35 ("error" "else" "checked?" "exclude-replication?" "set-update-cascade?" "set-update-cascade?~" "update-cascade?" "set-delete-cascade?" "set-delete-cascade?~" "delete-cascade?" "set-unique?" "set-unique?~" "unique?" "set-left?" "set-left?~" "left?" "set-right?" "set-right?~" "right?" "set-foreign-table" "set-foreign-table~" "foreign-table" "set-foreign-field-names" "set-foreign-field-names~" "foreign-columns" "set-primary-table" "set-primary-table~" "primary-table" "set-primary-field-names" "set-primary-field-names~" "primary-columns" "case" "SQLServer-Inventory-Relation" "is?" "unless" "value" "property" "physical")}
        {Lisp-Entry "complete-append" method () ("kind" "parent" "child") #f #f 1152 11 1152 26 ("error" "else" "append-procedure" "append-procedure~" "procedure" "append-relation" "append-relation~" "relation" "append-view" "append-view~" "view" "append-constraint" "append-constraint~" "constraint" "append-trigger" "append-trigger~" "trigger" "append-index" "append-index~" "index" "append-column" "append-column~" "column" "append-primary-key" "append-primary-key~" "primary-key" "append-table" "append-table~" "table" "case" "lambda" "with-continue" "child" "parent" "kind")}
        {Lisp-Entry "delete-proxy" method () ("kind" "parent" "child-name" "object") #f #f 1173 11 1173 23 ("error" "else" "remove-procedure" "remove-procedure~" "procedure" "foreign-table:" "get-property" "get-property~" "second" "foreign-table" "let" "remove-relation" "remove-relation~" "SQLServer-Inventory" "is-not?" "if" "relation" "remove-view" "remove-view~" "view" "remove-constraint" "remove-constraint~" "constraint" "remove-trigger" "remove-trigger~" "trigger" "remove-index" "remove-index~" "index" "remove-column" "remove-column~" "column" "remove-primary-key" "remove-primary-key~" "primary-key" "remove-table" "remove-table~" "table" "case" "object" "child-name" "parent" "kind")}
        {Lisp-Entry "add-pending-property" method () ("info") #f #f 1195 11 1195 31 ("cons" "pending-properties" "set!" "info")}
        {Lisp-Entry "add-pending-delete" method () ("info") #f #f 1199 11 1199 29 ("cons" "pending-deletes" "set!" "info")}
        {Lisp-Entry "add-pending-trigger/index" method () ("info") #f #f 1203 11 1203 36 ("cons" "pending-triggers/indexes" "set!" "info")}
        {Lisp-Entry "process-pending-properties" method () () #f #f 1207 11 1207 37 ("pending-properties" "modify-proxy-property" "with-continue" "new-value" "symbol" "kind" "physical" "object" "bind" "element" "lambda" "for-each")}
        {Lisp-Entry "Entities-Delete" definition () () #f #f 1216 14 1216 29 ("column" "primary-key" "index" "constraint" "trigger" "table" "view" "procedure" "relation")}
        {Lisp-Entry "process-pending-deletes" method () () #f #f 1220 11 1220 34 ("first" "Entities-Delete" "find" "lst" "key:" "pending-deletes" "<" "sort" "delete-proxy" "with-continue" "object" "name" "physical" "kind" "bind" "element" "lambda" "for-each")}
        {Lisp-Entry "process-pending-triggers/indexes" method () () #f #f 1230 11 1230 43 ("set!" "pending-triggers/indexes" "complete-append" "subentity" "entity" "kind" "bind" "element" "lambda" "for-each")}}}})
"Inventory-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "inventory" "Inventory-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.database.inventory.Inventory-View" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Inventory-View" class () ((extends . "Object")) #f #f 40 7 40 21 ("Object")
        {Lisp-Entry "inventory" slot () ((getter . "generate")) #f #f 43 8 43 17 ()}
        {Lisp-Entry "get-inventory" accessor () () #f #f 43 25 43 33 ()}
        {Lisp-Entry "parent" slot () ((getter . "generate")) #f #f 44 8 44 14 ()}
        {Lisp-Entry "get-parent" accessor () () #f #f 44 25 44 33 ()}
        {Lisp-Entry "initialize" method (override) ("inventory" "parent") #f #f 47 20 47 30 ("parent~self" "self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-title" method (public virtual) () #f #f 58 26 58 35 ()}
        {Lisp-Entry "get-text" method (public virtual) () #f #f 62 26 62 34 ()}
        {Lisp-Entry "set-text" method (public virtual) ("value") #f #f 66 26 66 34 ("value")}}}})
"Logical-Datatype-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "designer" "Logical-Datatype-Row.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database.designer.Logical-Datatype-Row" module (protected) () #f #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.schema" "jazz.designer")}
      {Lisp-Entry "Logical-Datatype-Row" class (undocumented) ((extends . "Combo-Row")) #f #f 44 20 44 40 ("Combo-Row")
        {Lisp-Entry "domains" property () ((initialize . "'()") (accessors . "generate")) #f #f 47 12 47 19 ()}
        {Lisp-Entry "get-domains" accessor () () #f #f 47 45 47 53 ()}
        {Lisp-Entry "set-domains" accessor () () #f #f 47 45 47 53 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 55 20 55 30 ("setup" "self" "domains~self" "set!" "nextmethod" "apply" "others" "domains" "bind-keywords" "rest")}
        {Lisp-Entry "setup" method () ("domains") #f #f 62 11 62 16 ("get-children" "get-children~" "get-name" "get-name~" "list" "domain" "lambda" "map" "set-choices" "domains")}
        {Lisp-Entry "present" method (override) ("type") #f #f 73 20 73 27 ("present" "present~" "null?" "if" "type")}
        {Lisp-Entry "editor-class" method (override) () #f #f 84 20 84 32 ("Logical-Datatype-Row-Editor")}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 88 20 88 36 ("Logical-Datatype" "new" "size" "name" "receive" "when" "parse-content" "parsed" "editor" "get-content" "get-content~" "string" "let*")}
        {Lisp-Entry "set-edited-value" method (override) ("value") #f #f 96 20 96 36 ("present" "editor" "set-content" "set-content~" "value")}
        {Lisp-Entry "read-content" definition () ("content") #f #f 100 15 100 27 ("separator:" "substitute" "parse-strings" "content")}
        {Lisp-Entry "parse-content" method () ("string") #f #f 104 11 104 24 ("message:" "Parse-Error" "new" "signal" "else" "cadr" "parse-integer" "2" "car" "values" "1" "0" "length" "case" "read-content" "content" "let" "string")}}
      {Lisp-Entry "Logical-Datatype-Row-Editor" class () ((extends . "Combo-Row-Editor")) #f #f 118 7 118 34 ("Combo-Row-Editor")
        {Lisp-Entry "content-change" method (override) ("origin") #f #f 121 20 121 34 ("nextmethod" "popup" "eq?" "unless" "origin")}
        {Lisp-Entry "combo-choice" method (override) () #f #f 126 20 126 32 ()}
        {Lisp-Entry "get-entry" method (override) () #f #f 130 20 130 29 ("car" "when" "get-content" "value-row" "read-content" "read-content~" "content" "let")}
        {Lisp-Entry "set-entry" method (override) ("entry") #f #f 136 20 136 29 ("cdr" "cons" "join" "set-content" "get-content" "value-row" "read-content" "read-content~" "actual" "let" "entry")}}}})
"Printer-Connection"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "connection" "Printer-Connection.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database.connection.Printer-Connection" module (protected) () #f #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.database")}
      {Lisp-Entry "Printer-Connection" class (undocumented) ((extends . "Connection")) #f #f 43 20 43 38 ("Connection")
        {Lisp-Entry "printer" slot () ((getter . "generate")) #f #f 46 8 46 15 ()}
        {Lisp-Entry "get-printer" accessor () () #f #f 46 23 46 31 ()}
        {Lisp-Entry "initialize" method (override) ("prt") #f #f 49 20 49 30 ("printer" "set!" "prt")}
        {Lisp-Entry "load-request" method (override) ("command" "." "rest") #f #f 58 20 58 32 ("printer" "format" "rest" "command")}
        {Lisp-Entry "load-multirequest" method (override) ("command" "." "rest") #f #f 62 20 62 37 ("printer" "format" "rest" "command")}
        {Lisp-Entry "load-rows" method (override) ("command") #f #f 66 20 66 29 ("printer" "format" "command")}
        {Lisp-Entry "load-row" method (override) ("command") #f #f 70 20 70 28 ("printer" "format" "command")}
        {Lisp-Entry "execute" method (override) ("command") #f #f 79 20 79 27 ("printer" "format" "command")}
        {Lisp-Entry "comment" method (override) ("string" "." "parameters") #f #f 83 20 83 27 ("printer" "format" "apply" "parameters" "string")}}}})
"Provider"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "provider" "Provider.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database.provider.Provider" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("time" "jazz.database")}
      {Lisp-Entry "Provider" class () ((extends . "Object")) #f #f 44 7 44 15 ("Object")
        {Lisp-Entry "external-name" method (public virtual) () #f #f 47 26 47 39 ()}
        {Lisp-Entry "get-datatype" method (public virtual) () #f #f 56 26 56 38 ()}
        {Lisp-Entry "supports-multirequests?" method (public virtual) () #f #f 65 26 65 49 ()}
        {Lisp-Entry "format-value" method (public virtual) ("value") #f #f 74 26 74 38 ("->string" "else" "format-datetime" "Date" "is?" "format-boolean" "boolean?" "format-string" "string?" "format-variable" "symbol?" "cond" "value")}
        {Lisp-Entry "format-variable" method (protected virtual) ("variable") #f #f 83 29 83 44 ("->string" "variable")}
        {Lisp-Entry "format-string" method (protected virtual) ("string") #f #f 87 29 87 42 ("format" "error" "find-in" "if" "string")}
        {Lisp-Entry "format-boolean" method (protected virtual) ("value") #f #f 93 29 93 43 ("if" "value")}
        {Lisp-Entry "format-date" method (protected virtual) ("date") #f #f 97 29 97 40 ("date-separator:" "present-date-day" "date")}
        {Lisp-Entry "format-datetime" method (protected virtual) ("date") #f #f 101 29 101 44 ("date-separator:" "present" "present~" "date")}
        {Lisp-Entry "present" method (public virtual) () #f #f 110 26 110 33 ()}
        {Lisp-Entry "browser-class" method (public virtual) () #f #f 119 26 119 39 ()}
        {Lisp-Entry "new-updater" method (public virtual) ("connection") #f #f 128 26 128 37 ("Inventory-Updater" "new" "connection")}}}})
"Recordset"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "connection" "Recordset.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.database.connection.Recordset" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.schema")}
      {Lisp-Entry "Recordset" class () ((extends . "Object")) #f #f 43 7 43 16 ("Object")
        {Lisp-Entry "initialize" method (override) ("command" "." "rest") #f #f 46 20 46 30 ("destroy-mandatory" "open" "apply" "when" "setup-recordset" "nextmethod" "rest" "command")}
        {Lisp-Entry "setup-recordset" method (virtual) ("initargs") #f #f 54 19 54 34 ("initargs")}
        {Lisp-Entry "destroy" method (override) () #f #f 58 20 58 27 ("nextmethod" "destroy-recordset")}
        {Lisp-Entry "destroy-recordset" method (virtual) () #f #f 63 19 63 36 ()}
        {Lisp-Entry "opened?" method (public virtual) () #f #f 72 26 72 33 ()}
        {Lisp-Entry "open" method (virtual) ("command" "." "rest") #f #f 76 19 76 23 ("rest" "command")}
        {Lisp-Entry "get-state" method (public virtual) () #f #f 85 26 85 35 ()}
        {Lisp-Entry "new-recordset-metadata" method (public virtual) () #f #f 94 26 94 48 ()}
        {Lisp-Entry "get-field-type" method (public virtual) ("metadata" "field") #f #f 98 26 98 40 ("field" "metadata")}
        {Lisp-Entry "get-field-value" method (public virtual) ("metadata" "field") #f #f 102 26 102 41 ("field" "metadata")}
        {Lisp-Entry "safe-field-value" method (public virtual) ("metadata" "field") #f #f 106 26 106 42 ("get-field-value" "field" "metadata")}
        {Lisp-Entry "next-recordset!" method (public virtual) () #f #f 115 26 115 41 ()}
        {Lisp-Entry "get-columns" method (public virtual) () #f #f 124 26 124 37 ("0" "naturals" "get-column" "get-column~" "n" "lambda" "map" "get-count" "get-count~" "count" "let" "new-recordset-metadata" "metadata" "with")}
        {Lisp-Entry "get-rows" method (public virtual) ("table" "(max-load: max-load #t)" "(data-class: data-class #f)") #f #f 132 26 132 34 ("missing?" "get-output" "get-output~" "rows" "increase!" "Data-Row" "not" "put" "put~" "safe-field-value" "field" "map" "values" "set!" "begin" "=" "neq?" "and" "if" "<=" "eq?" "or" "when" "lambda" "iterate-records" "has-more?" "0" "count" "List-Factory" "new" "fact" "let" "get-fields" "get-fields~" "fields" "new-recordset-metadata" "metadata" "with" "data-class" "data-class:" "max-load" "max-load:" "table")}
        {Lisp-Entry "move-first" method (public virtual) () #f #f 163 26 163 36 ()}
        {Lisp-Entry "move-last" method (public virtual) () #f #f 167 26 167 35 ()}
        {Lisp-Entry "move-next" method (public virtual) () #f #f 171 26 171 35 ()}
        {Lisp-Entry "move-previous" method (public virtual) () #f #f 175 26 175 39 ()}
        {Lisp-Entry "at-bof?" method (public virtual) () #f #f 179 26 179 33 ()}
        {Lisp-Entry "at-eof?" method (public virtual) () #f #f 183 26 183 33 ()}
        {Lisp-Entry "iterate-records" method (public virtual) ("proc") #f #f 187 26 187 41 ("proc")}
        {Lisp-Entry "for-each-record" method (public virtual) ("proc") #f #f 191 26 191 41 ("lambda" "iterate-records" "proc")}
        {Lisp-Entry "create-table" method (public) ("(name: name #f)" "(max-load: max-load #t)") #f #f 203 18 203 30 ("load-table" "Data-Table" "new" "table" "let" "max-load" "max-load:" "name" "name:")}
        {Lisp-Entry "load-table" method (protected) ("table" "(max-load: max-load #t)" "(data-class: data-class #f)") #f #f 209 21 209 31 ("set-missing?" "set-missing?~" "set-rows" "set-rows~" "set-columns" "set-columns~" "get-rows" "missing?" "rows" "receive" "get-columns" "columns" "let" "data-class" "data-class:" "max-load" "max-load:" "table")}}}})
"Recordset-Metadata"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "connection" "Recordset-Metadata.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.database.connection.Recordset-Metadata" module (protected) () #f #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.schema")}
      {Lisp-Entry "Recordset-Metadata" class () ((extends . "Object")) #f #f 43 7 43 25 ("Object")
        {Lisp-Entry "get-column" method (public) ("field-name") #f #f 51 18 51 28 ("get-field-precision" "width:" "get-field-size" "100" "min" "get-field-type" "Datatype" "datatype:" "get-field-name" "name:" "Data-Column" "new" "get-field" "field" "with" "field-name")}
        {Lisp-Entry "get-fields" method (public) () #f #f 67 18 67 28 ("get-field" "collect" "get-count" "below" "0" "from" "n" "for" "loop")}
        {Lisp-Entry "get-count" method (public virtual) () #f #f 72 26 72 35 ()}
        {Lisp-Entry "get-field" method (public virtual) ("field-name") #f #f 76 26 76 35 ("field-name")}
        {Lisp-Entry "get-field-value" method (public virtual) ("field-name") #f #f 80 26 80 41 ("field-name")}
        {Lisp-Entry "get-field-name" method (public virtual) ("field") #f #f 84 26 84 40 ("field")}
        {Lisp-Entry "get-field-type" method (public virtual) ("field") #f #f 88 26 88 40 ("field")}
        {Lisp-Entry "get-field-size" method (public virtual) ("field") #f #f 92 26 92 40 ("field")}
        {Lisp-Entry "get-field-precision" method (public virtual) ("field") #f #f 96 26 96 45 ("field")}}}})
"Request"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "connection" "Request.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.database.connection.Request" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.schema")}
      {Lisp-Entry "Request" class () ((extends . "Object")) #f #f 43 7 43 14 ("Object")
        {Lisp-Entry "connection" slot () () #f #f 46 8 46 18 ()}
        {Lisp-Entry "initialize" method (override) ("con") #f #f 49 20 49 30 ("connection" "set!" "nextmethod" "con")}
        {Lisp-Entry "new-recordset" method (virtual) ("request" "." "rest") #f #f 54 19 54 32 ("rest" "request")}
        {Lisp-Entry "load-request" method (public) ("request" "(table: table #f)" "(name: name #f)" "(max-load: max-load #t)" "(data-class: data-class #f)") #f #f 58 18 58 30 ("load-table" "load-table~" "set-name" "set-name~" "when" "request:" "Data-Table" "new" "or" "let" "closed" "get-state" "get-state~" "eq?" "unless" "new-recordset" "recordset" "with" "data-class" "data-class:" "max-load" "max-load:" "name" "name:" "table" "table:" "request")}
        {Lisp-Entry "load-multirequest" method (public) ("request" "(max-load: max-load #t)" "(data-classes: data-classes '())") #f #f 68 18 68 35 ("get-output" "get-output~" "next-recordset!" "next-recordset!~" "put" "put~" "data-class:" "cdr" "set!" "car" "data-class" "load-table" "load-table~" "null?" "request:" "Data-Table" "table" "open" "get-state" "get-state~" "eq?" "when" "opened?" "opened?~" "while" "List-Factory" "new" "tables" "let" "new-recordset" "recordset" "with" "load-request" "list" "connection" "supports-multirequests?" "supports-multirequests?~" "not" "if" "data-classes" "data-classes:" "max-load" "max-load:" "request")}
        {Lisp-Entry "load-rows" method (public) ("request" "table" "(max-load: max-load #t)") #f #f 87 18 87 27 ("values" "get-rows" "get-rows~" "missing?" "rows" "receive" "get-columns" "get-columns~" "columns" "let" "new-recordset" "recordset" "with" "max-load" "max-load:" "table" "request")}
        {Lisp-Entry "execute" method (public virtual) ("command") #f #f 99 26 99 33 ("command")}}}})
"Schema-Browser"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "view" "Schema-Browser.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.database.view.Schema-Browser" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.database")}
      {Lisp-Entry "Schema-Browser" class (undocumented) ((extends . "Border-View")) #f #f 50 20 50 34 ("Border-View")
        {Lisp-Entry "empty-text" property () ((initialize . "#f") (accessors . "generate")) #f #f 53 12 53 22 ()}
        {Lisp-Entry "get-empty-text" accessor () () #f #f 53 47 53 55 ()}
        {Lisp-Entry "set-empty-text" accessor () () #f #f 53 47 53 55 ()}
        {Lisp-Entry "source" slot () ((initialize . "#f")) #f #f 56 8 56 14 ()}
        {Lisp-Entry "form" form () () #f #f 59 3 59 7 ("on-return-press" "return-press-handler:" "1" "paragraph-spacing:" "2" "top-padding:" "left-padding:" "show-unfocused-selection?:" "accepts-returns?:" "editable?:" "selectable?:" "text" "Schema-Text-View" "<Schema-Text-View>" "!" "<!>" "vscroll?:" "hscroll?:" "center" "scroller" "Scroller-View" "<Scroller-View>" "on-browse" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "22" "browse" "Push-Tool" "<Push-Tool>" "label" "Label-View" "<Label-View>" "0" "4" "Separator-View" "<Separator-View>" "Medium" "Color" "background:" "flow" "north" "location:" "21" "120" "top" "border" "content" "name:" "Layout-View" "<Layout-View>" "fill" "layout-type:" "entry" "style:" "edge" "border-type:" "24" "142" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "on-browse" method () ("evt") #f #f 76 11 76 20 ("get-source" "source:" "Schema-Chooser" "get-modal" "set-source" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 80 20 80 35 ("self" "invoke-handler" "return-press-handler" "when" "evt")}
        {Lisp-Entry "get-text" method (public) () #f #f 90 18 90 26 ("text" "locate")}
        {Lisp-Entry "inner?" method (override) ("view") #f #f 99 20 99 26 ("children" "memq?" "view")}
        {Lisp-Entry "draw-children" method (override) ("surface" "nodes" "context") #f #f 108 20 108 33 ("-" "line-to" "line-to~" "22" "2" "move-to" "move-to~" "1" "set-line-width" "set-line-width~" "Outline-Border" "Color" "set-color" "set-color~" "get-width" "width" "let" "nextmethod" "context" "nodes" "surface")}
        {Lisp-Entry "get-schema" method (public) ("(reporter: reporter #f)") #f #f 123 18 123 28 ("get-data-schema" "get-data-schema~" "when" "get-source" "source" "let" "reporter" "reporter:")}
        {Lisp-Entry "get-source" method (public) () #f #f 134 18 134 28 ("source")}
        {Lisp-Entry "set-source" method (public) ("value") #f #f 138 18 138 28 ("source-changed" "get-text" "set-text" "set-text~" "set!" "source-changing" "present-detailed" "present-detailed~" "when" "source" "present-source" "define" "value")}
        {Lisp-Entry "source-changing" method (protected virtual) ("source") #f #f 149 29 149 44 ("source")}
        {Lisp-Entry "source-changed" method (protected virtual) ("source") #f #f 153 29 153 43 ("reload" "locate" "set-enabled?" "set-enabled?~" "source")}}
      {Lisp-Entry "Background-Font" definition () () #f #f 162 12 162 27 ("Text" "Font")}
      {Lisp-Entry "Schema-Text-View" class () ((extends . "Plain-Formatted-Text-View")) #f #f 166 7 166 23 ("Plain-Formatted-Text-View")
        {Lisp-Entry "form" form () () #f #f 169 3 169 7 ("Text-Base" "Text-Style" "base-style:" "install" "<install>")}
        {Lisp-Entry "get-scroll-context" method (override) () #f #f 173 20 173 38 ("0" "cons")}
        {Lisp-Entry "draw-children" method (override) ("surface" "nodes" "context") #f #f 177 20 177 33 ("nextmethod" "text-empty?" "if" "get-v" "get-v~" "get-h" "get-h~" "draw-text" "draw-text~" "Dark" "Color" "set-text-color" "set-text-color~" "get-display-size" "center" "pos" "get-text-extent" "get-text-extent~" "extent" "creator" "get-empty-text" "get-empty-text~" "or" "localize" "title" "let*" "Background-Font" "set-font" "set-font~" "draw-empty-schema" "define" "context" "nodes" "surface")}}}})
"Schema-Chooser"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "view" "Schema-Chooser.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database.view.Schema-Chooser" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Schema-Chooser" class (undocumented) ((extends . "Chooser")) #f #f 43 20 43 34 ("get-data-source" "get-data-source~" "get-source~" "validate-content" "validate-content~" "case" "validate-dialog" "set-selection" "set-selection~" "get-selection" "get-selection~" "get-name" "get-name~" "selected-sheet" "set-selected-element" "set-selected-element~" "name" "set-data-source" "set-data-source~" "locate" "set-source~" "else" "setup-archive" "Archive-Schema-Source" "setup-database" "Data-Source" "setup-design" "select-radio" "Design-Schema-Source" "typecase" "cancel-modal" "cancel-modal~" "on-escape-press" "get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-host" "dialog" "on-return-press" "select-sheet" "sheet:" "get-property" "get-property~" "sheet" "let" "evt" "set!" "value" "set-source" "get-source" "public" "120" "302" "host-size" "300" "450" "host-position" "host-title" "meta" "setup" "nextmethod" "rest" "finish" "method" "archive-browser" "Archive-Schema-Browser" "<Archive-Schema-Browser>" "4" "database-browser" "Data-Source-Browser" "<Data-Source-Browser>" "146" "39" "design-browser" "Design-Schema-Browser" "<Design-Schema-Browser>" "Layout-View" "<Layout-View>" "140" "370" "20" "158" "pad" "Pad-View" "<Pad-View>" "150" "8" "15" "130" "vertical-line" "Vertical-Line" "<Vertical-Line>" "archive-sheet" "60" "98" "archive" "database-sheet" "66" "74" "database" "design-sheet" ":sheet" "on-select" ":form" "Event-Handler" "action-handler:" "selected?:" "16" "56" "50" "33" "Point" "position:" "design" "Radio-Button" "<Radio-Button>" "content" "description" "title:" "title" "name:" "!" "<!>" "264" "546" "Dimension" "size:" "install" "<install>" "form" "explicit" "accessors" "initialize" "source" "property" "Chooser")}}})
"Systype"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "provider" "Systype.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database.provider.Systype" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.database")}
      {Lisp-Entry "Systype" class () ((extends . "Object")) #f #f 43 7 43 14 ("Object")
        {Lisp-Entry "name" slot () ((getter . "generate")) #f #f 46 8 46 12 ()}
        {Lisp-Entry "get-name" accessor () () #f #f 46 29 46 37 ()}
        {Lisp-Entry "size" slot () ((getter . "generate")) #f #f 47 8 47 12 ()}
        {Lisp-Entry "get-size" accessor () () #f #f 47 29 47 37 ()}
        {Lisp-Entry "precision" slot () ((getter . "generate")) #f #f 48 8 48 17 ()}
        {Lisp-Entry "get-precision" accessor () () #f #f 48 29 48 37 ()}
        {Lisp-Entry "scale" slot () ((getter . "generate")) #f #f 49 8 49 13 ()}
        {Lisp-Entry "get-scale" accessor () () #f #f 49 29 49 37 ()}
        {Lisp-Entry "default-value" slot () ((getter . "generate")) #f #f 50 8 50 21 ()}
        {Lisp-Entry "get-default-value" accessor () () #f #f 50 29 50 37 ()}
        {Lisp-Entry "construct-literal" method (meta) ("context" "name" "size" "precision" "scale" "default-value") #f #f 54 16 54 33 ("self" "new" "read-only" "=" "String" "is?" "null?" "integer?" "or" "assert" "default-value" "scale" "precision" "size" "name" "context")}
        {Lisp-Entry "initialize" method (override) ("name" "size" "precision" "scale" "default-value") #f #f 62 20 62 30 ("default-value~self" "scale~self" "precision~self" "size~self" "self" "name~self" "set!" "nextmethod" "default-value" "scale" "precision" "size" "name")}
        {Lisp-Entry "compare-object" method (override) ("target") #f #f 71 20 71 34 (":not-equal" "else" ":equal" "get-default-value" "get-default-value~" "default-value" "get-scale" "get-scale~" "scale" "get-precision" "get-precision~" "precision" "get-size" "get-size~" "size" "get-name" "get-name~" "name" "=" "and" ":incompatible" "Systype" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 84 20 84 25 ("default-value" "scale" "precision" "size" "name" "self" "class-of" "category-name" "format" "readably" "output")}
        {Lisp-Entry "get-sizeable?" method (public) () #f #f 99 18 99 31 ("size" "null?")}
        {Lisp-Entry "get-fixed?" method (public) () #f #f 103 18 103 28 ("size" "not-null?")}
        {Lisp-Entry "get-precisionable?" method (public) () #f #f 107 18 107 36 ("precision" "not-null?")}
        {Lisp-Entry "get-scalable?" method (public) () #f #f 111 18 111 31 ("scale" "not-null?")}
        {Lisp-Entry "get-defaultable?" method (public) () #f #f 115 18 115 34 ("default-value" "not-null?")}
        {Lisp-Entry "present" method (public) () #f #f 124 18 124 25 ("name" "format")}}}})
"_database"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "_database.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database" module () () #f #f 37 8 37 21 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("jazz.database.autoload")}
      {Lisp-Entry "Providers" definition () () #f #f 48 12 48 21 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-provider" definition (public) ("provider") #f #f 52 20 52 37 ("Providers" "table-set!" "external-name" "external-name~" "name" "let" "provider")}
      {Lisp-Entry "get-provider" definition (public) ("name") #f #f 57 20 57 32 ("error" "Providers" "table-ref" "or" "name")}
      {Lisp-Entry "get-providers" definition (public) () #f #f 62 20 62 33 ("Providers" "gather")}
      {Lisp-Entry "Datatypes" definition () () #f #f 71 12 71 21 ("SQLServer-Datatype" "Oracle-Datatype" "Access-Datatype")}
      {Lisp-Entry "Datatype-Classes" definition () () #f #f 74 12 74 28 ()}
      {Lisp-Entry "get-datatypes" definition (public) () #f #f 78 20 78 33 ("Datatypes" "load" "map" "set!" "Datatype-Classes" "unless")}
      {Lisp-Entry "request-data-source" definition (public undocumented) ("(provider: provider #f)") #f #f 90 33 90 52 ("process-modal" "process-modal~" "external-name" "external-name~" "set-provider" "set-provider~" "when" "get-guest" "get-guest~" "manager" "let" "host-visible?:" "jazz.database.Data-Source-Chooser" "new-dialog" "dialog" "process?" "receive" "provider" "provider:")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "autoload.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database.autoload" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("Schema-Chooser" "jazz.database.view.Schema-Chooser" "Schema-Browser" "jazz.database.view.Schema-Browser" "Data-Source-Widget" "jazz.database.view.Data-Source-Widget" "Data-Source-Chooser" "jazz.database.view.Data-Source-Chooser" "Data-Source-Browser" "jazz.database.view.Data-Source-Browser" "Data-Group" "jazz.database.view.Data-Group" "Systype" "jazz.database.provider.Systype" "Provider" "jazz.database.provider.Provider" "Inventory-View" "jazz.database.inventory.Inventory-View" "Inventory-Updater" "jazz.database.inventory.Inventory-Updater" "Inventory-Trigger" "jazz.database.inventory.Inventory-Trigger" "Inventory-Table" "jazz.database.inventory.Inventory-Table" "Inventory-Relation" "jazz.database.inventory.Inventory-Relation" "Inventory-Procedure" "jazz.database.inventory.Inventory-Procedure" "Inventory-Primary-Key" "jazz.database.inventory.Inventory-Primary-Key" "Inventory-Index" "jazz.database.inventory.Inventory-Index" "Inventory-Constraint" "jazz.database.inventory.Inventory-Constraint" "Inventory-Column" "jazz.database.inventory.Inventory-Column" "Inventory" "jazz.database.inventory.Inventory" "Logical-Datatype-Row" "jazz.database.designer.Logical-Datatype-Row" "Datatype-Row" "jazz.database.designer.Datatype-Row" "Request" "jazz.database.connection.Request" "Recordset-Metadata" "jazz.database.connection.Recordset-Metadata" "Recordset" "jazz.database.connection.Recordset" "Printer-Connection" "jazz.database.connection.Printer-Connection" "Connection" "autoload" "jazz.database.connection.Connection")}}})
"install"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "install.scm"} 231466230. scheme
    {Lisp-Entry "jazz.database.install" unit () () #f #f 37 6 37 27 ()
      {Lisp-Entry "Systype" define () () ("literal") #f 40 21 40 28 ("construct-systype" "jazz.database.literals" "jazz.database.literals:construct-systype")}}})
"literals"
 ({Lisp-File-Entry {File :context "src" "jazz" "database" "literals.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.database.literals" module () () #f #f 37 8 37 30 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.database")}
      {Lisp-Entry "construct-systype" definition (package) ("name" "size" "precision" "scale" "default-value") #f #f 48 21 48 38 ("Systype" "new" "default-value" "scale" "precision" "size" "name")}}})
