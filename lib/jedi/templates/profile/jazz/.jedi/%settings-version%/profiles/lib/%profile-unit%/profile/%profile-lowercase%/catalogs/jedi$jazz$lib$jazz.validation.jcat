"Tester"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "tester" "Tester.jazz"} 246587394. jazz
    {Lisp-Entry "jazz.validation.tester.Tester" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Tester" class () ((extends . "Component")) #f #f 43 7 43 13 ("Component")
        {Lisp-Entry "suite" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 17 ()}
        {Lisp-Entry "get-suite" accessor () () #f #f 46 42 46 50 ()}
        {Lisp-Entry "set-suite" accessor () () #f #f 46 42 46 50 ()}
        {Lisp-Entry "title" property () ((initialize . "\"\"") (accessors . "generate")) #f #f 47 12 47 17 ()}
        {Lisp-Entry "get-title" accessor () () #f #f 47 42 47 50 ()}
        {Lisp-Entry "set-title" accessor () () #f #f 47 42 47 50 ()}
        {Lisp-Entry "*section*" define () () #f #f 55 10 55 19 ("make-parameter")}
        {Lisp-Entry "test" method (public virtual) () #f #f 59 26 59 30 ()}
        {Lisp-Entry "invoke" method (protected) ("section" "proc") #f #f 63 21 63 27 ("*section*" "parameterize" "proc" "section")}
        {Lisp-Entry "rpt" method () ("message") #f #f 68 11 68 14 ("*section*" "title" "suite" "assertion-failed" "assertion-failed~" "message")}}}})
"Tester-Error"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "tester" "Tester-Error.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.validation.tester.Tester-Error" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Tester-Error" class () ((extends . "Error")) #f #f 40 7 40 19 ("Error")
        {Lisp-Entry "form" slot () ((getter . "generate")) #f #f 43 8 43 12 ()}
        {Lisp-Entry "get-form" accessor () () #f #f 43 23 43 31 ()}
        {Lisp-Entry "string?" slot () () #f #f 44 8 44 15 ()}
        {Lisp-Entry "initialize" method (override) ("form" "(string? #f)") #f #f 47 20 47 30 ("string?~self" "self" "form~self" "set!" "nextmethod" "string?" "form")}
        {Lisp-Entry "get-message" method (override) () #f #f 58 20 58 31 ("->string" "form" "string?" "if")}
        {Lisp-Entry "present-message" method (override) ("." "rest") #f #f 64 20 64 35 ("get-message" "format" "list" "rest")}}}})
"Validate"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "validate" "Validate.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.validation.validate.Validate" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.validation" "jazz.system.process")}
      {Lisp-Entry "Validate" class () ((extends . "Process")) #f #f 44 7 44 15 ("Process")
        {Lisp-Entry "start-process" method (override) () #f #f 47 20 47 33 ("exit-process" "Validation-Suite" "new" "validate" "validate~")}}}})
"Validation-Suite"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "validate" "Validation-Suite.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.validation.validate.Validation-Suite" module (protected) () #f #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Validation-Suite" class () ((extends . "Object")) #f #f 40 7 40 23 ("Object")
        {Lisp-Entry "feedback" slot () () #f #f 43 8 43 16 ()}
        {Lisp-Entry "failed-assertions" slot () () #f #f 44 8 44 25 ()}
        {Lisp-Entry "initialize" method (override) ("(feedback: feedback #f)") #f #f 47 20 47 30 ("or" "self" "feedback~self" "set!" "nextmethod" ":terminal" "format" "apply" "rest" "format-string" "default-feedback" "define" "feedback" "feedback:")}
        {Lisp-Entry "validate" method (public) ("(test: test #t)" "(report-success?: report-success? #t)") #f #f 56 18 56 26 ("message" "section" "title" "bind" "info" "lambda" ":terminal" "format" "when" "null?" "get-output" "get-output~" "failed" "report-results" "test~" "class-of" "category-name" "self" "suite:" "tester" "let" "class" "feedback" "list" "pair?" "if" "invoke-tester" "for-each" "List-Factory" "new" "failed-assertions" "set!" "validate-suite" "define" "report-success?" "report-success?:" "test" "test:")}
        {Lisp-Entry "assertion-failed" method (public) ("title" "section" "form") #f #f 82 18 82 34 ("list" "failed-assertions" "put" "put~" "form" "section" "title")}}}})
"_validation"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "_validation.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.validation" module () () #f #f 37 8 37 23 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("jazz.validation.autoload" "syntax" "phase" "jazz.validation.syntax")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "autoload.jazz"} 222341474. jazz
    {Lisp-Entry "jazz.validation.autoload" module (protected) () #f #f 37 18 37 42 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("Validation-Suite" "jazz.validation.validate.Validation-Suite" "Validate" "jazz.validation.validate.Validate" "Tester-Error" "jazz.validation.tester.Tester-Error" "Tester" "autoload" "jazz.validation.tester.Tester")}}})
"syntax"
 ({Lisp-File-Entry {File :context "src" "jazz" "validation" "syntax.jazz"} 229929916. jazz
    {Lisp-Entry "jazz.validation.syntax" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "validate" macro (public) ("form-src") ("syntax") #f 40 16 40 24 (",message" ",proc" ",expr" "unless" ":text" "desourcify" "->string" "message" "third" "expr" "source-code" "second" "proc" "let" "form-src")}
      {Lisp-Entry "error-occurred?" macro (public) ("form-src") ("syntax") #f 48 16 48 31 (",@body" "Error" "System-Exception" "is?" "or" "wrap-exception" "wrapped" "exc" "lambda" "with-exception-filter" "sourcify-if" "source-code" "cdr" "body" "let" "form-src")}}})
