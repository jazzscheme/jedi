"Add-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "menu" "Add-Menu.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.menu.Add-Menu" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Add-Menu" class (undocumented) ((extends . "Context-Menu")) #f #f 43 20 43 28 ("Context-Menu")}}})
"Alignment-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "manager" "Alignment-Editor.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.manager.Alignment-Editor" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Alignment-Editor" class () ((extends . "Layout-View")) #f #f 48 7 48 23 ("explicit" "Layout-View")
        {Lisp-Entry "client" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 18 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("on-force-layout" "force-layout" "on-resize-both" "resize-both" "on-resize-height" "resize-height" "on-resize-width" "resize-width" "on-space-vertically" "space-vertically" "on-space-horizontally" "space-horizontally" "on-center-vertically" "center-vertically" "on-center-horizontally" "center-horizontally" "Separator" "<Separator>" "on-align-bottom" "align-bottom" "on-align-top" "align-top" "on-align-right" "align-right" "on-align-left" ":form" "Event-Handler" "action-handler:" "Image-Resource" "resource:" "tooltip-text:" "align-left" "name:" "Action-Icon" "<Action-Icon>" "Medium" "Color" "background:" "0" "5" "4" "Rect" "layout-insets:" "flow" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 74 25 74 38 ("alignment-editor" "rest")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 83 25 83 35 ()}
        {Lisp-Entry "client-activate" method (override) () #f #f 87 20 87 35 ("set-client" "View-Editor" "is?" "and" "client" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method (override) () #f #f 93 20 93 37 ("set-client")}
        {Lisp-Entry "on-align-left" method () ("evt") #f #f 102 11 102 24 ("align-left" "align-left~" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-align-top" method () ("evt") #f #f 109 11 109 23 ("align-top" "align-top~" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-align-right" method () ("evt") #f #f 116 11 116 25 ("align-right" "align-right~" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-align-bottom" method () ("evt") #f #f 123 11 123 26 ("align-bottom" "align-bottom~" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-center-horizontally" method () ("evt") #f #f 130 11 130 33 ("center-horizontally" "center-horizontally~" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-center-vertically" method () ("evt") #f #f 137 11 137 31 ("center-vertically" "center-vertically~" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-space-horizontally" method () ("evt") #f #f 144 11 144 32 ("space-horizontally" "space-horizontally~" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-space-vertically" method () ("evt") #f #f 151 11 151 30 ("space-vertically" "space-vertically~" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-resize-width" method () ("evt") #f #f 158 11 158 26 ("resize-width" "resize-width~" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-resize-height" method () ("evt") #f #f 165 11 165 27 ("resize-height" "resize-height~" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-resize-both" method () ("evt") #f #f 172 11 172 25 ("resize-both" "resize-both~" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-force-layout" method () ("evt") #f #f 179 11 179 26 ("force-layout" "force-layout~" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "get-client" method (public) () #f #f 191 18 191 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("clt") #f #f 195 18 195 28 ("client-update" "client" "set!" "clt")}
        {Lisp-Entry "client-update" method () () #f #f 200 11 200 24 ("force-layout" "resize-both" "resize-height" "resize-width" "space-vertically" "space-horizontally" "center-vertically" "center-horizontally" "align-bottom" "align-top" "align-right" "client" "align-left" "locate" "set-enabled?" "set-enabled?~")}}}})
"Book-Controller"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "book" "Book-Controller.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.designer.book.Book-Controller" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Book-Controller" class (undocumented) ((extends . "Document-Controller")) #f #f 43 20 43 35 ("Document-Controller")
        {Lisp-Entry "get-modified?" method (override) () #f #f 46 20 46 33 ("continuation-return" "get-editor" "get-editor~" "get-modified?" "get-modified?~" "when" "section" "name" "document" "for-each-section" "for-each-section~" "return" "lambda" "continuation-capture")}
        {Lisp-Entry "set-modified?" method (override) ("state") #f #f 56 20 56 33 ("update-status" "get-editor" "get-editor~" "set-modified?" "set-modified?~" "section" "name" "lambda" "document" "for-each-section" "for-each-section~" "state")}}}})
"Book-Section"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "book" "Book-Section.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.designer.book.Book-Section" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Book-Section" class (undocumented) ((extends . "Object")) #f #f 40 20 40 32 ("Object")
        {Lisp-Entry "title" slot () ((accessors . "generate")) #f #f 43 8 43 13 ()}
        {Lisp-Entry "get-title" accessor () () #f #f 43 29 43 37 ()}
        {Lisp-Entry "set-title" accessor () () #f #f 43 29 43 37 ()}
        {Lisp-Entry "model" slot () ((accessors . "generate")) #f #f 44 8 44 13 ()}
        {Lisp-Entry "get-model" accessor () () #f #f 44 29 44 37 ()}
        {Lisp-Entry "set-model" accessor () () #f #f 44 29 44 37 ()}
        {Lisp-Entry "client" slot () () #f #f 45 8 45 14 ()}
        {Lisp-Entry "designer" slot () () #f #f 46 8 46 16 ()}
        {Lisp-Entry "editor" slot () ((accessors . "generate")) #f #f 47 8 47 14 ()}
        {Lisp-Entry "get-editor" accessor () () #f #f 47 29 47 37 ()}
        {Lisp-Entry "set-editor" accessor () () #f #f 47 29 47 37 ()}
        {Lisp-Entry "initialize" method (override) ("(title: title #f)" "(model: model #f)" "(client: client #f)" "(designer: designer #f)" "(editor: editor #f)") #f #f 50 20 50 30 ("editor~self" "designer~self" "client~self" "model~self" "self" "title~self" "set!" "nextmethod" "editor" "editor:" "designer" "designer:" "client" "client:" "model" "model:" "title" "title:")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 63 20 63 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-client" method (public) () #f #f 74 18 74 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("value") #f #f 78 18 78 28 ("set-client" "set-client~" "editor" "when" "designer" "client" "set!" "value")}
        {Lisp-Entry "get-designer" method (public) () #f #f 85 18 85 30 ("editor" "get-designer" "get-designer~" "set!" "designer" "unless")}
        {Lisp-Entry "set-designer" method (public) ("value") #f #f 91 18 91 30 ("designer" "set!" "value")}}}})
"Book-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "book" "Book-View.jazz"} 243479599. jazz
    {Lisp-Entry "jazz.designer.book.Book-View" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui" "jazz.system" "jazz.io" "jazz.designer")}
      {Lisp-Entry "Book-View" class (undocumented) ((extends . "Layout-View") (implements . "Document")) #f #f 48 20 48 29 ("eq?" "test:" "make-table" "Document" "Layout-View")
        {Lisp-Entry "sections" slot () ((initialize . "(make-table test: eq?)")) #f #f 51 8 51 16 ()}
        {Lisp-Entry "book" slot () ((initialize . "#f") (accessors . "generate")) #f #f 52 8 52 12 ()}
        {Lisp-Entry "get-book" accessor () () #f #f 52 52 52 60 ()}
        {Lisp-Entry "set-book" accessor () () #f #f 52 52 52 60 ()}
        {Lisp-Entry "document-controller" slot () ((initialize . "#f")) #f #f 53 8 53 27 ()}
        {Lisp-Entry "default-extension" method (override) () #f #f 56 20 56 37 ()}
        {Lisp-Entry "extensions" method (override) () #f #f 57 20 57 30 ()}
        {Lisp-Entry "focus-document" method (override) () #f #f 58 20 58 34 ()}
        {Lisp-Entry "current-history-item" method (override) () #f #f 59 20 59 40 ()}
        {Lisp-Entry "compare-moniker" method (override) ("moniker") #f #f 60 20 60 35 ("moniker")}
        {Lisp-Entry "get-version" method (public) () #f #f 68 18 68 29 ("book" "get-version" "get-version~")}
        {Lisp-Entry "get-properties" method (public) () #f #f 72 18 72 32 ("book" "get-properties" "get-properties~")}
        {Lisp-Entry "get-description" method (public) () #f #f 76 18 76 33 ("book" "get-description" "get-description~")}
        {Lisp-Entry "get-book-name" method (public) () #f #f 80 18 80 31 ("book" "get-book-name" "get-book-name~")}
        {Lisp-Entry "add-section" method (public) ("name" "section") #f #f 89 18 89 29 ("sections" "table-set!" "book" "get-client" "get-client~" "when" "section" "name")}
        {Lisp-Entry "remove-section" method (public) ("name") #f #f 94 18 94 32 ("sections" "table-set!" "book" "get-client" "get-client~" "when" "name")}
        {Lisp-Entry "get-section" method (public) ("name") #f #f 99 18 99 29 ("error" "sections" "table-ref" "or" "name")}
        {Lisp-Entry "get-client" method (public) ("name") #f #f 104 18 104 28 ("get-section" "get-client" "get-client~" "name")}
        {Lisp-Entry "get-designer" method (public) ("name") #f #f 108 18 108 30 ("get-section" "get-designer" "get-designer~" "name")}
        {Lisp-Entry "get-editor" method (public) ("name") #f #f 112 18 112 28 ("get-section" "get-editor" "get-editor~" "name")}
        {Lisp-Entry "for-each-section" method (public) ("proc") #f #f 116 18 116 34 ("book" "get-names" "get-names~" "get-section" "name" "lambda" "for-each" "proc")}
        {Lisp-Entry "set-client-from-forms" method (public) ("client-forms") #f #f 127 18 127 39 ("clients-update" "set-client" "set-client~" "book" "book:" "instantiate" "instantiate~" "client" "let" "form" "name" "lambda" "for-each-property" "client-forms")}
        {Lisp-Entry "clients-update" method (public virtual) () #f #f 135 26 135 40 ("set-client" "set-client~" "get-section" "section" "let" "client" "name" "lambda" "book" "for-each-client" "for-each-client~")}
        {Lisp-Entry "update-names" method () ("book-name") #f #f 142 11 142 23 ("trait:" "set-name" "set-name~" "get-designer" "get-designer~" "designer" "get-client" "get-client~" "client" "let" "section" "name" "lambda" "for-each-section" "book-name")}
        {Lisp-Entry "new-event" method (meta override) ("(host-visible?: host-visible? #t)") #f #f 156 25 156 34 ("set-visible?" "set-visible?~" "bring-to-front" "bring-to-front~" "update-names" "update-names~" "clients-update" "clients-update~" "update-status" "update-status~" "set-newname" "set-newname~" "List-Factory" "new" "fact" "get-document-controller" "get-document-controller~" "controller" "collect-names" "unique-domain-name" "book-name" "get-guest" "get-guest~" "book-view" "rest" "new-frame" "apply" "frame" "let*" "host-visible?" "host-visible?:")}
        {Lisp-Entry "collect-names" method (meta) ("book") #f #f 172 16 172 29 ("all-frames" "get-book-name" "get-book-name~" "neq?" "and" "get-guest" "get-guest~" "guest" "Internal-Frame-Host" "is?" "when" "frame" "lambda" "collect" "class-of" "model" "let" "book")}
        {Lisp-Entry "empty-sections" method (public) ("sections") #f #f 187 18 187 32 ("clients-update" "set-name" "set-name~" "get-designer" "get-designer~" "designer" "let" "set-client" "set-client~" "self" "book:" "instantiate" "instantiate~" "client" "get-model" "get-model~" "model:" "action:" "textual?:" "Form" "new" "form" "get-name" "get-name~" "old-name" "get-client" "get-client~" "old-client" "get-section" "section" "let*" "name" "lambda" "for-each" "sections")}
        {Lisp-Entry "install-in-host" method (override) ("host") #f #f 206 20 206 35 ("get-document-controller" "install-in-host" "install-in-host~" "nextmethod" "host")}
        {Lisp-Entry "get-document-controller" method (override) () #f #f 216 20 216 43 ("new-document-controller" "set!" "document-controller" "unless")}
        {Lisp-Entry "new-document-controller" method (override) () #f #f 222 20 222 43 ("self" "Book-Controller" "new")}
        {Lisp-Entry "save" method (override) () #f #f 226 20 226 24 ("get-document-controller" "save" "save~")}
        {Lisp-Entry "save-as" method (override) () #f #f 230 20 230 27 ("get-document-controller" "save-as" "save-as~")}
        {Lisp-Entry "save-to" method (override) ("moniker") #f #f 234 20 234 27 ("get-document-controller" "save-to" "save-to~" "moniker")}
        {Lisp-Entry "save-all" method (public virtual) () #f #f 238 26 238 34 ("get-document-controller" "save-all" "save-all~")}
        {Lisp-Entry "install-scroller?" method (override) () #f #f 242 20 242 37 ()}
        {Lisp-Entry "get-moniker" method () () #f #f 246 11 246 22 ("get-document-controller" "get-moniker" "get-moniker~")}
        {Lisp-Entry "set-moniker" method () ("moniker") #f #f 250 11 250 22 ("get-document-controller" "set-moniker" "set-moniker~" "moniker")}
        {Lisp-Entry "verify-reload" method (override) () #f #f 254 20 254 33 ()}
        {Lisp-Entry "reload-moniker" method (override) ("moniker") #f #f 258 20 258 34 ("update-moniker-time" "reload-content" "lambda" "with-locked-update" "when" "moniker")}
        {Lisp-Entry "reload-content" method () ("moniker") #f #f 266 11 266 25 ("update-status" "set-modified?" "load-content" "empty-content" "moniker")}
        {Lisp-Entry "empty-content" method (protected virtual) () #f #f 273 29 273 42 ()}
        {Lisp-Entry "get-modified?" method (override) () #f #f 277 20 277 33 ("get-document-controller" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-modified?" method (override) ("state") #f #f 281 20 281 33 ("get-document-controller" "set-modified?" "set-modified?~" "state")}
        {Lisp-Entry "update-status" method () () #f #f 285 11 285 24 ("get-document-controller" "update-status" "update-status~")}
        {Lisp-Entry "update-moniker-time" method () ("moniker") #f #f 289 11 289 30 ("get-document-controller" "update-moniker-time" "update-moniker-time~" "moniker")}
        {Lisp-Entry "confirm-close" method (override) ("." "rest") #f #f 293 20 293 33 ("get-document-controller" "confirm-close" "confirm-close~" "rest")}
        {Lisp-Entry "tool-update" method (override) ("tool?") #f #f 297 20 297 31 ("tool?")}
        {Lisp-Entry "console-update" method (override) ("console?") #f #f 301 20 301 34 ("console?")}
        {Lisp-Entry "load-content" method (override) ("moniker") #f #f 310 20 310 32 ("update-status" "clients-update" "book" "load-content" "load-content~" "moniker")}
        {Lisp-Entry "save-content" method (override) ("moniker") #f #f 321 20 321 32 ("process-saved" "process-saved~" "update-status" "set-modified?" "update-moniker-time" "-1" "print-to" "print-to~" "format" "get-title" "get-title~" "output-section" "set!" "output-properties" "output-version" "get-description" "output-header" "when" "first?" "output" "UTF-8" "char-encoding:" "path-settings" "call-with-output-file" "get-editor" "get-editor~" "process-saving" "process-saving~" "trait:" "get-client" "get-client~" "set-name" "set-name~" "get-form" "get-form~" "set-origin" "set-origin~" "get-designer" "get-designer~" "designer" "section" "name" "for-each-section" "get-base" "get-base~" "base" "let" "lambda" ":wait" "with-cursor" "moniker")}
        {Lisp-Entry "output-version" method () ("output") #f #f 353 11 353 25 ("get-version" "format" "output")}
        {Lisp-Entry "output-properties" method (override) ("output") #f #f 357 20 357 37 ("null?" "if" "format" "get-properties" "properties" "let" "output")}}}})
"Boolean-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Boolean-Domain.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.designer.domain.Boolean-Domain" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Boolean-Domain" class () ((extends . "Domain")) #f #f 44 7 44 21 ("Domain")
        {Lisp-Entry "validate-value" method (override) ("property" "value" "component" "root" "client" "context" "manager") #f #f 52 20 52 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "memq?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method (override) ("value") #f #f 62 20 62 27 ("if" "value")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 73 20 73 31 ("self" "domain:" "parent:" "Boolean-Entry" "new" "client" "view")}}}})
"Boolean-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Boolean-Entry.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.entry.Boolean-Entry" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Boolean-Entry" class () ((extends . "Property-Entry")) #f #f 45 7 45 20 ("Property-Entry")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("selectable?:" "checkbox" "name:" "Entry-Check-Box" "<Entry-Check-Box>" "auto-size?:" "install" "<install>")}
        {Lisp-Entry "preferred-size" method (override) () #f #f 53 20 53 34 ("16" "Dimension")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 57 20 57 26 ("self" "checkbox" "locate" "set-editor" "set-editor~" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" method (override) () #f #f 67 20 67 28 ("checkbox" "locate")}
        {Lisp-Entry "validate" method (override) ("domain") #f #f 76 20 76 28 ("domain")}
        {Lisp-Entry "get-value" method (override) () #f #f 85 20 85 29 ("checkbox" "locate" "get-checked?" "get-checked?~")}
        {Lisp-Entry "set-value" method (override) ("value") #f #f 89 20 89 29 ("checkbox" "locate" "set-checked?" "set-checked?~" "value")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 93 20 93 33 ("checkbox" "locate" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-modified?" method (override) ("value") #f #f 97 20 97 33 ("checkbox" "locate" "set-modified?" "set-modified?~" "value")}
        {Lisp-Entry "set-editable?" method (override) ("value") #f #f 106 20 106 33 ("checkbox" "locate" "set-editable?" "set-editable?~" "value")}
        {Lisp-Entry "set-enabled?" method (override) ("value") #f #f 115 20 115 32 ("checkbox" "locate" "set-enabled?" "set-enabled?~" "value")}}
      {Lisp-Entry "Entry-Check-Box" class () ((extends . "Check-Box")) #f #f 124 7 124 22 ("Check-Box")
        {Lisp-Entry "editor" property () ((initialize . "#f") (accessors . "generate")) #f #f 127 12 127 18 ()}
        {Lisp-Entry "get-editor" accessor () () #f #f 127 43 127 51 ()}
        {Lisp-Entry "set-editor" accessor () () #f #f 127 43 127 51 ()}
        {Lisp-Entry "focus-gained" method (override) () #f #f 130 20 130 32 ("editor-focus-gained" "editor-focus-gained~" "get-manager" "get-manager~" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}
        {Lisp-Entry "focus-lose" method (override) () #f #f 138 20 138 30 ("editor-focus-lose" "editor-focus-lose~" "get-manager" "get-manager~" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}}}})
"Card"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "card" "Card.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.designer.card.Card" module (protected) () #f #f 37 18 37 41 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library")}
      {Lisp-Entry "Card" class (undocumented) ((extends . "Layout-View")) #f #f 44 20 44 24 ("Layout-View")
        {Lisp-Entry "editor" slot () ((initialize . "#f")) #f #f 47 8 47 14 ()}
        {Lisp-Entry "client" slot () ((initialize . "#f")) #f #f 48 8 48 14 ()}
        {Lisp-Entry "designer" slot () ((initialize . "#f")) #f #f 49 8 49 16 ()}
        {Lisp-Entry "destroy" method (override) () #f #f 57 20 57 27 ("nextmethod" "set-editor" "set-designer")}
        {Lisp-Entry "get-editor" method (public virtual) () #f #f 68 26 68 36 ("editor")}
        {Lisp-Entry "set-editor" method (public virtual) ("edt") #f #f 72 26 72 36 ("on-editor" "method-name:" "target:" "Event-Handler" "new" "add-editor-listener" "add-editor-listener~" "set!" "self" "remove-editor-listener" "remove-editor-listener~" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "on-editor" method (protected virtual) ("evt") #f #f 81 29 81 38 ("get-force?" "get-force?~" "force?:" "get-selection" "get-selection~" "car" "set-client" ":selection-changed" "designer:" "get-property" "get-property~" "set-designer" ":designer-change" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "get-client" method (public virtual) () #f #f 92 26 92 36 ("client")}
        {Lisp-Entry "set-client" method (public virtual) ("clt" "(force?: force? #f)") #f #f 96 26 96 36 ("inner-widget" "inner-widget~" "map" "and" "set-client-direct" "force?" "force?:" "clt")}
        {Lisp-Entry "set-client-direct" method (public virtual) ("clt" "(force?: force? #f)") #f #f 100 26 100 43 ("client-update" "set!" "client" "equal?" "not" "or" "when" "force?" "force?:" "clt")}
        {Lisp-Entry "client-update" method (public virtual) () #f #f 106 26 106 39 ()}
        {Lisp-Entry "get-designer" method (public virtual) () #f #f 115 26 115 38 ("designer")}
        {Lisp-Entry "set-designer" method (public virtual) ("dsg") #f #f 119 26 119 38 ("set!" "install-listener" "uninstall-listener" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "on-designer" method () ("evt") #f #f 128 11 128 22 ("call-refresh" ":refresh" "call-property-change" ":property-change" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "call-refresh" method (virtual) ("evt") #f #f 136 19 136 31 ("refresh" "all" "what:" "case" "client" "eq?" "when" "component:" "get-property" "get-property~" "component" "let" "evt")}
        {Lisp-Entry "refresh" method (public virtual) ("component") #f #f 144 26 144 33 ("component")}
        {Lisp-Entry "call-property-change" method (protected virtual) ("evt") #f #f 148 29 148 49 ("value:" "property:" "property-change" "client" "eq?" "when" "component:" "get-property" "get-property~" "component" "let" "evt")}
        {Lisp-Entry "property-change" method (public virtual) ("component" "property" "value") #f #f 154 26 154 41 ("value" "property" "component")}
        {Lisp-Entry "install-listener" method () ("designer") #f #f 163 11 163 27 ("add-designer-listener" "add-designer-listener~" "on-designer" "method-name:" "self" "target:" "Event-Handler" "new" "listener" "let" "designer")}
        {Lisp-Entry "uninstall-listener" method () ("designer") #f #f 168 11 168 29 ("self" "remove-designer-listener" "remove-designer-listener~" "designer")}
        {Lisp-Entry "enter-value" method (public virtual) ("property" "value") #f #f 177 26 177 37 ("designer" "set-property" "set-property~" "client" "when" "value" "property")}}}})
"Cell-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Cell-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.Cell-Domain" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Cell-Domain" class () ((extends . "Text-Domain")) #f #f 43 7 43 18 ("Text-Domain")
        {Lisp-Entry "present" method (override) ("cell") #f #f 51 20 51 27 ("get-col" "get-col~" "get-line" "get-line~" "format" "not" "if" "cell")}
        {Lisp-Entry "parse" method (override) ("text") #f #f 64 20 64 25 ("Cell" "new" "col" "line" "bind" "read-delimited-string" "lst" "let" "text")}}}})
"Child-Descriptor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "descriptor" "Child-Descriptor.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.descriptor.Child-Descriptor" module (protected) () #f #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Child-Descriptor" class () ((extends . "Component")) #f #f 43 7 43 23 ("Component")
        {Lisp-Entry "title" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 17 ()}
        {Lisp-Entry "get-title" accessor () () #f #f 46 44 46 52 ()}
        {Lisp-Entry "set-title" accessor () () #f #f 46 44 46 52 ()}
        {Lisp-Entry "target" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 18 ()}
        {Lisp-Entry "get-target" accessor () () #f #f 47 44 47 52 ()}
        {Lisp-Entry "set-target" accessor () () #f #f 47 44 47 52 ()}
        {Lisp-Entry "classes" property () ((initialize . "'()") (accessors . "generate")) #f #f 48 12 48 19 ()}
        {Lisp-Entry "get-classes" accessor () () #f #f 48 45 48 53 ()}
        {Lisp-Entry "set-classes" accessor () () #f #f 48 45 48 53 ()}}}})
"Children-Descriptor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "descriptor" "Children-Descriptor.jazz"} 231466230. jazz
    {Lisp-Entry "jazz.designer.descriptor.Children-Descriptor" module (protected) () #f #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.designer.descriptor")}
      {Lisp-Entry "Children-Descriptor" class (undocumented) ((extends . "Component")) #f #f 44 20 44 39 ("Component")
        {Lisp-Entry "addable?" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 20 ()}
        {Lisp-Entry "get-addable?" accessor () () #f #f 47 45 47 53 ()}
        {Lisp-Entry "set-addable?" accessor () () #f #f 47 45 47 53 ()}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 55 25 55 45 ("Children-Descriptor-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 64 11 64 17 ()
        {Lisp-Entry "import" import () () #f #f 67 1 67 7 ("jazz.designer")}
        {Lisp-Entry "Children-Descriptor-Descriptor" class () ((extends . "Component-Descriptor")) #f #f 70 7 70 37 ("Component-Descriptor")
          {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 73 25 73 45 ("Children-Meta-Descriptor")}}}}})
"Children-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Children-Tree.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.editor.Children-Tree" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Children-Tree" class (undocumented) ((extends . "Components-Tree")) #f #f 47 20 47 33 ("Components-Tree")
        {Lisp-Entry "base" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 16 ()}
        {Lisp-Entry "get-base" accessor () () #f #f 50 45 50 53 ()}
        {Lisp-Entry "set-base" accessor () () #f #f 50 45 50 53 ()}
        {Lisp-Entry "details" property () ((initialize . "'()") (accessors . "generate")) #f #f 51 12 51 19 ()}
        {Lisp-Entry "get-details" accessor () () #f #f 51 45 51 53 ()}
        {Lisp-Entry "set-details" accessor () () #f #f 51 45 51 53 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("on-selection-change" ":self" "Event-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" ":images" "portfolio:" "reorderable?:" "draggable?:" "install" "<install>")}
        {Lisp-Entry "branch-changed" method (override) () #f #f 63 20 63 34 ("update")}
        {Lisp-Entry "update" method (override) ("(expand-state: expand-state (get-expand-state))" "(selected-components: selected-components (selected-components))") #f #f 72 20 72 26 ("insert-rows" "setup-columns" "lambda" "with-update-locked" "selected-components" "selected-components:" "get-expand-state" "expand-state" "expand-state:")}
        {Lisp-Entry "setup-columns" method () () #f #f 79 11 79 24 ("width:" "title:" "name:" "Tree-Label-Column" "class:" "self" "context:" "add-column" "set-width" "set-width~" "set-title" "set-title~" "set-name" "set-name~" "get-node-column" "column" "begin" "when" "detail-presentation" "detail-presentation~" "title" "category-field" "property" "let*" "filled?" "width" "name" "bind" "detail" "lambda" "for-each" "first?" "node-column" "get-name" "get-name~" "details" "null?" "not" "or" "if" "preserve-node-column?:" "remove-columns" "set-filled-column" "get-addable-base" "get-addable-base~" "client" "and" "base" "set!" "get-header" "header" "let")}
        {Lisp-Entry "insert-rows" method () ("expand-state" "selected-components") #f #f 104 11 104 22 ("update-selection" "insert-components" "get-recursive-details?" "get-recursive-details?~" "recursive?" "let" "client" "when" "remove-every-row" "selected-components" "expand-state")}
        {Lisp-Entry "insert-components" method () ("component" "father" "recursive?") #f #f 112 11 112 28 ("get-presentation-property" "get-presentation-property~" "key:" "<" "sort" "sort-components?" "sort-components?~" "if" "insert-component" "Group" "is?" "unless" "child" "lambda" "for-each" "get-components" "get-components~" "components" "let" "recursive?" "father" "component")}
        {Lisp-Entry "insert-component" method (protected virtual) ("component" "father" "recursive?") #f #f 122 29 122 45 ("insert-components" "user-data:" "children:" "expanded" "state:" "father:" "add-row" "cons" "children" "title" "value" "property" "filled?" "width" "name" "Tree-Label" "if" "detail" "lambda" "map" "labels" "image:" "title:" "Tree-Node" "new" "node" "get-component-image" "get-component-image~" "ni" "present-property" "present-property~" "nt" "read-property" "nv" "category-field" "np" "car" "nn" "let*" "filled" "name-info" "set!" "not" "is?" "based?" "rest" "first" "bind" "details" "base" "and" "when" "row" "let" "recursive?" "father" "component")}
        {Lisp-Entry "present-location" method () ("component") #f #f 150 11 150 27 ("get-presentation-property" "get-presentation-property~" "localize" "ascendant" "lambda" "map" "join" "null?" "if" "collect-ascendants" "collect-ascendants~" "cdr" "ascendants" "let" "component")}
        {Lisp-Entry "on-designer" method (override) ("evt") #f #f 162 20 162 31 ("value:" "property:" "component:" "property-change" ":property-change" "child-remove" ":child-remove" "parent:" "child:" "get-property" "get-property~" "child-add" ":child-add" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "child-add" method () ("child" "parent") #f #f 169 11 169 20 ("insert-component" "lambda" "with-update-locked" "client" "neq?" "Group" "is?" "or" "unless" "parent" "child")}
        {Lisp-Entry "child-remove" method () ("child") #f #f 176 11 176 23 ("remove-row" "lambda" "with-update-locked" "when" "component-row" "row" "let" "client" "get-parent" "get-parent~" "neq?" "Group" "is?" "or" "unless" "child")}
        {Lisp-Entry "property-change" method () ("component" "property" "value") #f #f 185 11 185 26 ("invalidate-cell" "set-title" "set-title~" "present-property" "present-property~" "title" "get-cell-data" "data" "Cell" "new" "cell" "let*" "get-user-data" "get-user-data~" "eq?" "rank" "row" "lambda" "for-each-visible-row" "when" "car" "key:" "field-name" "details" "find" "col" "let" "client" "get-parent" "get-parent~" "neq?" "Group" "is?" "or" "unless" "value" "property" "component")}}}})
"Classpath-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Classpath-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.Classpath-Row" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Classpath-Row" class (undocumented) ((extends . "String-Row")) #f #f 43 20 43 33 ("String-Row")
        {Lisp-Entry "present" method (override) ("value") #f #f 51 20 51 27 ("else" "join" "List" "is?" "not" "nullable?" "and" "cond" "value")}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 62 20 62 36 ("split" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "get-string-content~" "string" "let")}}}})
"Color-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Color-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.Color-Domain" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.graphic" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "Color-Domain" class () ((extends . "Domain")) #f #f 45 7 45 19 ("Domain")
        {Lisp-Entry "present" method (override) ("color") #f #f 53 20 53 27 ("present" "present~" "not" "if" "color")}
        {Lisp-Entry "draw-data" method (override) ("surface" "context" "value" "column" "row" "data" "width" "height") #f #f 64 20 64 29 ("get-bottom" "get-bottom~" "get-left" "get-left~" "get-top" "get-top~" "+" "get-right" "get-right~" "-" "line" "line~" "1" "set-line-width" "set-line-width~" "set-color" "set-color~" "fill-rect" "fill-rect~" "if" "Black" "Color" "frame-rect" "frame-rect~" "-1" "inflate-rect" "inner" "14" "13" "3" "2" "Rect" "outer" "let*" "0" "15" "draw-at" "draw-at~" "when" "height" "width" "data" "row" "column" "value" "context" "surface")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 82 20 82 31 ("self" "domain:" "get-size" "get-size~" "size:" "parent:" "Color-Entry" "new" "client" "view")}}}})
"Color-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editors" "Color-Editor.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.editors.Color-Editor" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml")}
      {Lisp-Entry "Color-Editor" class (undocumented) ((extends . "Color-Combo")) #f #f 44 20 44 32 ("explicit" "Color-Combo")
        {Lisp-Entry "value-row" property () ((initialize . "#f") (accessors . "explicit")) #f #f 47 12 47 21 ()}
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("2" "1" "Rect" "layout-insets:" "15" "14" "Dimension" "size:" "color-contour" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "get-value-row" method (public) () #f #f 55 18 55 31 ("value-row")}
        {Lisp-Entry "set-value-row" method (public) ("value") #f #f 59 18 59 31 ("body" "locate" "set-value-row" "set-value-row~" "value-row" "set!" "value")}
        {Lisp-Entry "content-change" method (override) ("origin") #f #f 64 20 64 34 ("nextmethod" "value-row" "editor-return" "editor-return~" "origin")}}}})
"Color-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Color-Entry.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.entry.Color-Entry" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Color-Entry" class () ((extends . "Property-Entry")) #f #f 45 7 45 18 ("Property-Entry")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("1" "top-padding:" "2" "left-padding:" "body" "!" "<!>" "selectable?:" "combo" "name:" "Color-Combo" "<Color-Combo>" "install" "<install>")}
        {Lisp-Entry "tab-view" method (override) () #f #f 59 20 59 28 ("body" "combo" "locate")}
        {Lisp-Entry "get-value" method (override) () #f #f 67 20 67 29 ("combo" "locate" "get-color" "get-color~")}
        {Lisp-Entry "set-value" method (override) ("value") #f #f 71 20 71 29 ("combo" "locate" "set-color" "set-color~" "value")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 75 20 75 33 ("combo" "locate" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-modified?" method (override) ("value") #f #f 79 20 79 33 ("combo" "locate" "set-modified?" "set-modified?~" "value")}
        {Lisp-Entry "set-editable?" method (override) ("value") #f #f 88 20 88 33 ("combo" "locate" "set-editable?" "set-editable?~" "value")}}}})
"Color-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Color-Row.jazz"} 243479599. jazz
    {Lisp-Entry "jazz.designer.row.Color-Row" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "Color-Row" class (undocumented) ((extends . "Value-Row")) #f #f 47 20 47 29 ("Value-Row")
        {Lisp-Entry "present" method (override) ("color") #f #f 55 20 55 27 ("present" "present~" "not" "if" "color")}
        {Lisp-Entry "update-color" method (public) () #f #f 66 18 66 30 ("get-edited-value" "color" "editor" "locate" "locate~" "set-background" "set-background~")}
        {Lisp-Entry "draw-data" method (override) ("surface" "context" "value" "column" "row" "data" "width" "height") #f #f 75 20 75 29 ("get-bottom" "get-bottom~" "get-left" "get-left~" "get-top" "get-top~" "+" "get-right" "get-right~" "line" "line~" "1" "set-line-width" "set-line-width~" "set-color" "set-color~" "fill-rect" "fill-rect~" "if" "Black" "Color" "frame-rect" "frame-rect~" "-1" "inflate-rect" "inner" "-" "13" "3" "2" "Rect" "new" "outer" "let*" "0" "15" "draw-at" "draw-at~" "height" "width" "data" "row" "column" "value" "context" "surface")}
        {Lisp-Entry "new-editor" method (override) () #f #f 92 20 92 30 ("self" "value-row:" "editor-class" "new")}
        {Lisp-Entry "editor-class" method (override) () #f #f 97 20 97 32 ("Color-Row-Editor")}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 101 20 101 36 ("Color" "parse-string" "parse-string~" "body" "editor" "locate" "locate~" "get-string-content" "get-string-content~" "content" "let")}
        {Lisp-Entry "set-edited-value" method (override) ("value") #f #f 106 20 106 36 ("color" "set-background" "set-background~" "present" "body" "editor" "locate" "locate~" "set-string-content" "set-string-content~" "value")}
        {Lisp-Entry "get-edited-modified?" method (override) () #f #f 111 20 111 40 ("body" "editor" "locate" "locate~" "get-document-controller" "get-document-controller~" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-edited-modified?" method (override) ("flag") #f #f 115 20 115 40 ("body" "editor" "locate" "locate~" "get-document-controller" "get-document-controller~" "set-modified?" "set-modified?~" "flag")}
        {Lisp-Entry "show-cursor" method (override) () #f #f 119 20 119 31 ("body" "editor" "locate" "locate~" "show-text-cursor" "show-text-cursor~")}
        {Lisp-Entry "focused-editor" method (override) () #f #f 123 20 123 34 ("body" "editor" "locate" "locate~")}}
      {Lisp-Entry "Color-Row-Editor" class () ((extends . "Color-Combo")) #f #f 132 7 132 23 ("explicit" "Color-Combo")
        {Lisp-Entry "form" form () () #f #f 135 3 135 7 ("2" "1" "Rect" "layout-insets:" "15" "14" "Dimension" "size:" "color-contour" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "value-row" property () ((initialize . "#f") (accessors . "explicit")) #f #f 140 12 140 21 ()}
        {Lisp-Entry "form-model" method (override) ("form") #f #f 143 20 143 30 ("nextmethod" "else" "Color-Value-Text-View" "body" "get-name" "get-name~" "case" "form")}
        {Lisp-Entry "get-value-row" method (public) () #f #f 149 18 149 31 ("value-row")}
        {Lisp-Entry "set-value-row" method (public) ("value") #f #f 153 18 153 31 ("body" "locate" "set-value-row" "set-value-row~" "value-row" "set!" "value")}
        {Lisp-Entry "content-change" method (override) ("origin") #f #f 158 20 158 34 ("nextmethod" "enter-edited-value" "enter-edited-value~" "popup" "value-row" "editor-return" "editor-return~" "return" "case" "origin")}}
      {Lisp-Entry "Color-Value-Text-View" class () ((extends . "Color-Text-View")) #f #f 170 7 170 28 ("Color-Text-View")
        {Lisp-Entry "value-row" property () ((initialize . "#f") (accessors . "generate")) #f #f 173 12 173 21 ()}
        {Lisp-Entry "get-value-row" accessor () () #f #f 173 46 173 54 ()}
        {Lisp-Entry "set-value-row" accessor () () #f #f 173 46 173 54 ()}
        {Lisp-Entry "up-arrow-move" method (override) ("extend?" "scroll?") #f #f 181 20 181 33 ("value-row" "editor-up-arrow" "editor-up-arrow~" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method (override) ("extend?" "scroll?") #f #f 185 20 185 35 ("value-row" "editor-down-arrow" "editor-down-arrow~" "scroll?" "extend?")}
        {Lisp-Entry "document-menu" method () () #f #f 189 11 189 24 ()}
        {Lisp-Entry "focus-lose" method (override) () #f #f 198 20 198 30 ("value-row" "editor-focus-lose" "editor-focus-lose~" "nextmethod")}
        {Lisp-Entry "focus-master" method (override) () #f #f 203 20 203 32 ("value-row" "get-tree" "get-tree~")}}}})
"Column-Detail"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "choosers" "Column-Detail.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.designer.choosers.Column-Detail" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Column-Detail" class (undocumented) ((extends . "Object")) #f #f 43 20 43 33 ("0" "Object")
        {Lisp-Entry "name" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 16 ()}
        {Lisp-Entry "get-name" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "set-name" accessor () () #f #f 46 47 46 55 ()}
        {Lisp-Entry "width" property () ((initialize . "0") (accessors . "generate")) #f #f 47 12 47 17 ()}
        {Lisp-Entry "get-width" accessor () () #f #f 47 47 47 55 ()}
        {Lisp-Entry "set-width" accessor () () #f #f 47 47 47 55 ()}
        {Lisp-Entry "filled?" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 19 ()}
        {Lisp-Entry "get-filled?" accessor () () #f #f 48 47 48 55 ()}
        {Lisp-Entry "set-filled?" accessor () () #f #f 48 47 48 55 ()}
        {Lisp-Entry "displayed?" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 22 ()}
        {Lisp-Entry "get-displayed?" accessor () () #f #f 49 47 49 55 ()}
        {Lisp-Entry "set-displayed?" accessor () () #f #f 49 47 49 55 ()}
        {Lisp-Entry "construct-literal" method (meta) ("context" "name" "width" "filled?" "displayed?") #f #f 53 16 53 33 ("self" "new" "displayed?" "filled?" "width" "name" "context")}
        {Lisp-Entry "initialize" method (override) ("n" "w" "f?" "d?") #f #f 57 20 57 30 ("displayed?" "filled?" "width" "name" "set!" "nextmethod" "d?" "f?" "w" "n")}
        {Lisp-Entry "copy-object" method (override) ("deep?") #f #f 65 20 65 31 ("displayed?" "filled?" "width" "name" "Column-Detail" "new" "deep?")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 69 20 69 25 ("displayed?" "filled?" "width" "name" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Combo-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Combo-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.Combo-Row" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Combo-Row" class (undocumented) ((extends . "Value-Row")) #f #f 43 20 43 29 ("explicit" "Value-Row")
        {Lisp-Entry "condensed?" property () ((accessors . "explicit")) #f #f 46 12 46 22 ()}
        {Lisp-Entry "choices" property () ((accessors . "explicit")) #f #f 47 12 47 19 ()}
        {Lisp-Entry "kind" property () ((accessors . "explicit")) #f "<void>" 48 12 48 16 ("void" "<void>")}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 56 20 56 30 ("set-kind" "set-choices" "set-condensed?" "set-condensed?~" "entry-test:" "not-found:" "getf" "nullable?:" "self" "value-row:" "editor-class" "new" "editor" "set!" "nextmethod" "apply" "others" "condensed?" "entry-test" "pick" "kind" "choices" "bind-keywords" "rest")}
        {Lisp-Entry "editor-class" method (override) () #f #f 65 20 65 32 ("Combo-Row-Editor")}
        {Lisp-Entry "get-condensed?" method (public) () #f #f 74 18 74 32 ("editor" "get-condensed?" "get-condensed?~")}
        {Lisp-Entry "set-condensed?" method (public) ("value") #f #f 78 18 78 32 ("editor" "set-condensed?" "set-condensed?~" "value")}
        {Lisp-Entry "get-choices" method (public) () #f #f 82 18 82 29 ("editor" "get-choices" "get-choices~")}
        {Lisp-Entry "set-choices" method (public) ("value") #f #f 86 18 86 29 ("editor" "set-choices" "set-choices~" "when" "value")}
        {Lisp-Entry "set-choices-updater" method (public) ("value") #f #f 91 18 91 37 ("editor" "set-choices-updater" "set-choices-updater~" "value")}
        {Lisp-Entry "get-kind" method (public) () #f #f 95 18 95 26 ("editor" "get-kind" "get-kind~")}
        {Lisp-Entry "set-kind" method (public) ("value") #f #f 99 18 99 26 ("editor" "set-kind" "set-kind~" "value")}
        {Lisp-Entry "enter-combo-choice" method () () #f #f 108 11 108 29 ("focus-editor" "enter-edited-value")}
        {Lisp-Entry "present" method (override) ("value") #f #f 118 20 118 27 ("editor" "present-value" "present-value~" "value")}
        {Lisp-Entry "default-value" method (override) () #f #f 127 20 127 33 ("get-choices" "caar")}
        {Lisp-Entry "close-editor?" method (override) () #f #f 136 20 136 33 ()}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 140 20 140 36 ("get-value" "get-value~" "limit-to-list?" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-content" "get-content~" "string" "let")}
        {Lisp-Entry "set-edited-value" method (override) ("value") #f #f 149 20 149 36 ("editor" "set-value" "set-value~" "value")}
        {Lisp-Entry "get-edited-modified?" method (override) () #f #f 153 20 153 40 ("editor" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-edited-modified?" method (override) ("flag") #f #f 157 20 157 40 ("editor" "set-modified?" "set-modified?~" "flag")}
        {Lisp-Entry "show-cursor" method (override) () #f #f 161 20 161 31 ("editor" "get-body" "get-body~" "show-text-cursor" "show-text-cursor~")}
        {Lisp-Entry "focused-editor" method (override) () #f #f 165 20 165 34 ("editor" "get-body" "get-body~")}
        {Lisp-Entry "combo-choose" method (protected virtual) () #f #f 169 29 169 41 ()}}}})
"Combo-Row-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Combo-Row-Editor.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.row.Combo-Row-Editor" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Combo-Row-Editor" class (undocumented) ((extends . "Combo-Box")) #f #f 43 20 43 36 ("explicit" "Combo-Box")
        {Lisp-Entry "value-row" property () ((initialize . "#f") (accessors . "explicit")) #f #f 46 12 46 21 ()}
        {Lisp-Entry "form-model" method (override) ("form") #f #f 49 20 49 30 ("nextmethod" "else" "Combo-Value-Text-View" "body" "get-name" "get-name~" "case" "form")}
        {Lisp-Entry "get-value-row" method (public) () #f #f 55 18 55 31 ("value-row")}
        {Lisp-Entry "set-value-row" method (public) ("value") #f #f 59 18 59 31 ("body" "locate" "set-value-row" "set-value-row~" "value-row" "set!" "value")}
        {Lisp-Entry "button-action" method (override) () #f #f 64 20 64 33 ("nextmethod" "value-row" "combo-choose" "combo-choose~" "unless")}
        {Lisp-Entry "content-change" method (override) ("origin") #f #f 69 20 69 34 ("nextmethod" "enter-edited-value" "enter-edited-value~" "popup" "editor-return" "editor-return~" "validate-value" "validate-value~" "value-row" "get-limit-to-list?" "get-limit-to-list?~" "and" "when" "return" "case" "origin")}
        {Lisp-Entry "combo-choice" method (override) () #f #f 76 20 76 32 ("value-row" "enter-combo-choice" "enter-combo-choice~")}}
      {Lisp-Entry "Combo-Value-Text-View" class () ((extends . "Combo-Text-View")) #f #f 85 7 85 28 ("Combo-Text-View")
        {Lisp-Entry "value-row" property () ((initialize . "#f") (accessors . "generate")) #f #f 88 12 88 21 ()}
        {Lisp-Entry "get-value-row" accessor () () #f #f 88 46 88 54 ()}
        {Lisp-Entry "set-value-row" accessor () () #f #f 88 46 88 54 ()}
        {Lisp-Entry "up-arrow-move" method (override) ("extend?" "scroll?") #f #f 96 20 96 33 ("value-row" "editor-up-arrow" "editor-up-arrow~" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method (override) ("extend?" "scroll?") #f #f 100 20 100 35 ("value-row" "editor-down-arrow" "editor-down-arrow~" "scroll?" "extend?")}
        {Lisp-Entry "tab-press" method (override) ("key" "modifiers") #f #f 104 20 104 29 ("value-row" "editor-tab" "editor-tab~" "end-completion" "has-ambiguous-completion?" "if" "modifiers" "key")}
        {Lisp-Entry "document-menu" method () () #f #f 110 11 110 24 ()}
        {Lisp-Entry "focus-lose" method (override) () #f #f 119 20 119 30 ("value-row" "editor-focus-lose" "editor-focus-lose~" "nextmethod")}
        {Lisp-Entry "focus-master" method (override) () #f #f 124 20 124 32 ("value-row" "get-tree" "get-tree~")}}}})
"Component-Descriptor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "descriptor" "Component-Descriptor.jazz"} 247108737. jazz
    {Lisp-Entry "jazz.designer.descriptor.Component-Descriptor" module (protected) () #f #f 37 18 37 63 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.clipboard" "jazz.library" "jazz.jml" "jazz.designer.descriptor" "jazz.designer")}
      {Lisp-Entry "Component-Descriptor" class (undocumented) ((extends . "Component")) #f #f 47 20 47 40 ("Component")
        {Lisp-Entry "title" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 17 ()}
        {Lisp-Entry "get-title" accessor () () #f #f 50 58 50 66 ()}
        {Lisp-Entry "set-title" accessor () () #f #f 50 58 50 66 ()}
        {Lisp-Entry "image" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 17 ()}
        {Lisp-Entry "get-image" accessor () () #f #f 51 58 51 66 ()}
        {Lisp-Entry "set-image" accessor () () #f #f 51 58 51 66 ()}
        {Lisp-Entry "name-prohibited?" property () ((initialize . "#f") (accessors . "generate")) #f #f 52 12 52 28 ()}
        {Lisp-Entry "get-name-prohibited?" accessor () () #f #f 52 58 52 66 ()}
        {Lisp-Entry "set-name-prohibited?" accessor () () #f #f 52 58 52 66 ()}
        {Lisp-Entry "name-mandatory?" property () ((initialize . "#f") (accessors . "generate")) #f #f 53 12 53 27 ()}
        {Lisp-Entry "get-name-mandatory?" accessor () () #f #f 53 58 53 66 ()}
        {Lisp-Entry "set-name-mandatory?" accessor () () #f #f 53 58 53 66 ()}
        {Lisp-Entry "name-unicity?" property () ((initialize . "#t") (accessors . "generate")) #f #f 54 12 54 25 ()}
        {Lisp-Entry "get-name-unicity?" accessor () () #f #f 54 58 54 66 ()}
        {Lisp-Entry "set-name-unicity?" accessor () () #f #f 54 58 54 66 ()}
        {Lisp-Entry "can-cut?" property () ((accessors . "generate")) #f #f 55 12 55 20 ()}
        {Lisp-Entry "get-can-cut?" accessor () () #f #f 55 58 55 66 ()}
        {Lisp-Entry "set-can-cut?" accessor () () #f #f 55 58 55 66 ()}
        {Lisp-Entry "can-copy?" property () ((accessors . "generate")) #f #f 56 12 56 21 ()}
        {Lisp-Entry "get-can-copy?" accessor () () #f #f 56 58 56 66 ()}
        {Lisp-Entry "set-can-copy?" accessor () () #f #f 56 58 56 66 ()}
        {Lisp-Entry "can-paste?" property () ((accessors . "generate")) #f #f 57 12 57 22 ()}
        {Lisp-Entry "get-can-paste?" accessor () () #f #f 57 58 57 66 ()}
        {Lisp-Entry "set-can-paste?" accessor () () #f #f 57 58 57 66 ()}
        {Lisp-Entry "can-paste-properties?" property () ((accessors . "generate")) #f #f 58 12 58 33 ()}
        {Lisp-Entry "get-can-paste-properties?" accessor () () #f #f 58 58 58 66 ()}
        {Lisp-Entry "set-can-paste-properties?" accessor () () #f #f 58 58 58 66 ()}
        {Lisp-Entry "can-rename?" property () ((accessors . "generate")) #f #f 59 12 59 23 ()}
        {Lisp-Entry "get-can-rename?" accessor () () #f #f 59 58 59 66 ()}
        {Lisp-Entry "set-can-rename?" accessor () () #f #f 59 58 59 66 ()}
        {Lisp-Entry "can-select-all?" property () ((accessors . "generate")) #f #f 60 12 60 27 ()}
        {Lisp-Entry "get-can-select-all?" accessor () () #f #f 60 58 60 66 ()}
        {Lisp-Entry "set-can-select-all?" accessor () () #f #f 60 58 60 66 ()}
        {Lisp-Entry "can-delete?" property () ((accessors . "generate")) #f #f 61 12 61 23 ()}
        {Lisp-Entry "get-can-delete?" accessor () () #f #f 61 58 61 66 ()}
        {Lisp-Entry "set-can-delete?" accessor () () #f #f 61 58 61 66 ()}
        {Lisp-Entry "can-relocate?" property () ((accessors . "generate")) #f #f 62 12 62 25 ()}
        {Lisp-Entry "get-can-relocate?" accessor () () #f #f 62 58 62 66 ()}
        {Lisp-Entry "set-can-relocate?" accessor () () #f #f 62 58 62 66 ()}
        {Lisp-Entry "can-view-properties?" property () ((accessors . "generate")) #f #f 63 12 63 32 ()}
        {Lisp-Entry "get-can-view-properties?" accessor () () #f #f 63 58 63 66 ()}
        {Lisp-Entry "set-can-view-properties?" accessor () () #f #f 63 58 63 66 ()}
        {Lisp-Entry "sort-components?" property () ((accessors . "generate")) #f #f 64 12 64 28 ()}
        {Lisp-Entry "get-sort-components?" accessor () () #f #f 64 58 64 66 ()}
        {Lisp-Entry "set-sort-components?" accessor () () #f #f 64 58 64 66 ()}
        {Lisp-Entry "indexable?" property () ((accessors . "generate")) #f #f 65 12 65 22 ()}
        {Lisp-Entry "get-indexable?" accessor () () #f #f 65 58 65 66 ()}
        {Lisp-Entry "set-indexable?" accessor () () #f #f 65 58 65 66 ()}
        {Lisp-Entry "form" form () () #f #f 68 3 68 7 ("Children-Descriptor" "<Children-Descriptor>" "presentation-info" "Name-Domain" "<Name-Domain>" "name-info" "Presentation-Domain" "<Presentation-Domain>" "info" "category:" "class-info" "domain" "Boolean-Domain" "<Boolean-Domain>" "visible?" "children" "title:" "before" "Property-Descriptor" "<Property-Descriptor>" "properties" "name:" "Properties-Descriptor" "<Properties-Descriptor>" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 89 25 89 45 ("Component-Meta-Descriptor" "new")}
        {Lisp-Entry "class-get-domain" method (public virtual) ("class" "property") #f #f 98 26 98 42 ("Value-Domain" "new" "get-domain" "get-domain~" "and" "field-name" "get-property-descriptor" "property-descriptor" "let" "or" "property" "class")}
        {Lisp-Entry "class-get-category" method (public virtual) ("class" "property") #f #f 105 26 105 44 ("get-category" "get-category~" "and" "field-name" "get-property-descriptor" "property-descriptor" "let" "or" "get-domain-category" "property" "class")}
        {Lisp-Entry "component-property-domain" method (public virtual) ("component" "property") #f #f 113 26 113 51 ("class-of" "get-domain" "get-domain~" "property" "component")}
        {Lisp-Entry "class-presentation" method (public virtual) ("class") #f #f 122 26 122 44 ("category-name" "->string" "title" "or" "class")}
        {Lisp-Entry "class-image" method (public virtual) ("class") #f #f 126 26 126 37 ("Image-Resource" "image" "or" "class")}
        {Lisp-Entry "class-name-prohibited?" method (public virtual) ("class") #f #f 130 26 130 48 ("name-prohibited?" "class")}
        {Lisp-Entry "class-name-mandatory?" method (public virtual) ("class") #f #f 134 26 134 47 ("name-mandatory?" "class")}
        {Lisp-Entry "class-name-unicity?" method (public virtual) ("class") #f #f 138 26 138 45 ("name-unicity?" "class")}
        {Lisp-Entry "class-presentation->name" method (public virtual) ("class" "presentation") #f #f 142 26 142 50 ("string->symbol" "equal?" "empty-string?" "not" "or" "if" "presentation" "class")}
        {Lisp-Entry "class-name->presentation" method (public virtual) ("class" "name") #f #f 148 26 148 50 ("->string" "not" "if" "name" "class")}
        {Lisp-Entry "class-property-presentation" method (public virtual) ("class" "property") #f #f 154 26 154 53 ("->string" "substitute" "capitalize" "remove-enclosing" "get-title" "get-title~" "and" "field-name" "get-property-descriptor" "property-descriptor" "let" "or" "property" "class")}
        {Lisp-Entry "class-detail-presentation" method (public virtual) ("class" "property") #f #f 162 26 162 51 ("property-presentation" "property-presentation~" "else" "presentation-info" "name-info" "class-info" "field-name" "case" "property" "class")}
        {Lisp-Entry "class-persist-property?" method (public virtual) ("class" "property") #f #f 170 26 170 49 ("property" "class")}
        {Lisp-Entry "component-presentation-property?" method (public virtual) ("component" "property") #f #f 174 26 174 58 ("property" "component")}
        {Lisp-Entry "component-get-presentation" method (public virtual) ("component") #f #f 178 26 178 52 ("get-name" "get-name~" "class-of" "name->presentation" "name->presentation~" "component")}
        {Lisp-Entry "component-set-presentation" method (public virtual) ("component" "designer" "presentation") #f #f 182 26 182 52 ("class-of" "presentation->name" "presentation->name~" "set-name" "set-name~" "presentation" "designer" "component")}
        {Lisp-Entry "component-get-string-presentation" method (protected) ("component") #f #f 186 21 186 54 ("get-name" "get-name~" "or" "component")}
        {Lisp-Entry "component-set-string-presentation" method (protected) ("component" "designer" "presentation") #f #f 190 21 190 54 ("set-name" "set-name~" "empty-string?" "if" "presentation" "designer" "component")}
        {Lisp-Entry "component-present-property" method (public virtual) ("component" "property" "value") #f #f 196 26 196 52 ("present" "present~" "property-domain" "property-domain~" "domain" "let" "value" "property" "component")}
        {Lisp-Entry "component-get-parent" method (public virtual) ("component") #f #f 201 26 201 46 ("get-parent" "get-parent~" "component")}
        {Lisp-Entry "component-get-components" method (public virtual) ("component") #f #f 205 26 205 50 ("get-children" "get-children~" "component")}
        {Lisp-Entry "component-get-component-image" method (public virtual) ("component") #f #f 209 26 209 55 ("class-of" "get-class-image" "get-class-image~" "component")}
        {Lisp-Entry "component-can-cut-component?" method (public virtual) ("component") #f #f 213 26 213 54 ("can-delete-component?" "can-delete-component?~" "can-cut?" "either" "component")}
        {Lisp-Entry "component-can-copy-component?" method (public virtual) ("component") #f #f 217 26 217 55 ("can-copy?" "either" "component")}
        {Lisp-Entry "component-can-paste-component?" method (public virtual) ("component") #f #f 221 26 221 56 ("can-paste?" "either" "component")}
        {Lisp-Entry "component-can-paste-properties-component?" method (public virtual) ("component") #f #f 225 26 225 67 ("can-paste-properties?" "either" "component")}
        {Lisp-Entry "component-can-rename-component?" method (public virtual) ("component") #f #f 229 26 229 57 ("class-of" "get-name-prohibited?" "get-name-prohibited?~" "not" "can-rename?" "either" "component")}
        {Lisp-Entry "component-can-select-all-component?" method (public virtual) ("component") #f #f 233 26 233 61 ("can-select-all?" "either" "component")}
        {Lisp-Entry "component-can-delete-component?" method (public virtual) ("component") #f #f 237 26 237 57 ("can-delete?" "either" "component")}
        {Lisp-Entry "component-can-relocate-component?" method (public virtual) ("component") #f #f 241 26 241 59 ("can-relocate?" "either" "component")}
        {Lisp-Entry "component-can-view-properties?" method (public virtual) ("component") #f #f 245 26 245 56 ("can-view-properties?" "either" "component")}
        {Lisp-Entry "component-determine-can-paste" method (public) ("component" "(try-parent? #t)") #f #f 249 18 249 47 ("determine-paster" "determine-paster~" "boolean" "try-parent?" "component")}
        {Lisp-Entry "component-determine-paster" method (public) ("component" "(try-parent? #t)") #f #f 253 18 253 44 ("determine-paster" "determine-paster~" "get-parent" "get-parent~" "parent" "let" "else" "addable-class?" "addable-class?~" "class" "lambda" "every?" "memq?" "cond" "get-master-model" "get-master-model~" "map" "remove-duplicates" "models" "get-jazz-parcels" "parcels" "let*" "jazz-parcels" "clipboard-format-available?" "can-paste-component?" "can-paste-component?~" "and" "when" "try-parent?" "component")}
        {Lisp-Entry "component-can-send-before?" method (public virtual) ("component" "types" "father" "before") #f #f 270 26 270 52 ("sort-components?" "sort-components?~" "not" "addable-class?" "addable-class?~" "type" "lambda" "every?" "and" "before" "father" "types" "component")}
        {Lisp-Entry "component-sort-components?" method (public virtual) ("component") #f #f 275 26 275 52 ("sort-components?" "either" "component")}
        {Lisp-Entry "component-sort-components" method (public virtual) ("component" "predicate" "components") #f #f 279 26 279 51 ("get-presentation-property" "get-presentation-property~" "key:" "sort" "components" "predicate" "component")}
        {Lisp-Entry "component-indexable?" method (public virtual) ("component") #f #f 283 26 283 46 ("indexable?" "either" "component")}
        {Lisp-Entry "component-surrogate-class" method (public virtual) ("component") #f #f 287 26 287 51 ("Component-Surrogate" "component")}
        {Lisp-Entry "component-install-surrogate" method (public virtual) ("component" "editor") #f #f 291 26 291 53 ("install-children-surrogates" "install-children-surrogates~" "install-handlers" "install-handlers~" "set-surrogate" "set-surrogate~" "editor:" "client:" "component-surrogate" "component-surrogate~" "new" "surrogate" "let" "editor" "component")}
        {Lisp-Entry "component-install-children-surrogates" method (public virtual) ("component" "editor") #f #f 298 26 298 63 ("get-components" "get-components~" "install-surrogate" "install-surrogate~" "lambda" "for-each" "editor" "component")}
        {Lisp-Entry "component-remove-surrogate" method (public) ("component") #f #f 304 18 304 44 ("remove-component-surrogate" "remove-component-surrogate~" "component")}
        {Lisp-Entry "component-remove-component-surrogate" method (public) ("component") #f #f 308 18 308 54 ("set-surrogate" "set-surrogate~" "remove-handlers" "remove-handlers~" "when" "get-surrogate" "get-surrogate~" "surrogate" "let" "get-components" "get-components~" "remove-component-surrogate" "remove-component-surrogate~" "for-each" "component")}
        {Lisp-Entry "component-display-property?" method (public virtual) ("component" "property") #f #f 316 26 316 53 ("visible?" "children" "before" "presentation-info" "field-name" "memq?" "not" "property" "component")}
        {Lisp-Entry "component-get-addable-default" method (public virtual) ("component") #f #f 320 26 320 55 ("component")}
        {Lisp-Entry "component-get-addable-classes" method (public virtual) ("component") #f #f 324 26 324 55 ("component-get-categorized-addable-classes" "flatten" "component")}
        {Lisp-Entry "component-get-categorized-addable-classes" method (public virtual) ("component") #f #f 328 26 328 67 ("component")}
        {Lisp-Entry "component-addable-class?" method (public virtual) ("component" "class") #f #f 332 26 332 50 ("get-addable-classes" "get-addable-classes~" "resolve-runtime-reference" "map" "subtype?" "addable-class" "lambda" "some?" "class" "component")}
        {Lisp-Entry "component-get-classes" method (public virtual) ("component") #f #f 338 26 338 47 ("component")}
        {Lisp-Entry "component-get-addable-traits" method (public virtual) ("component") #f #f 342 26 342 54 ("component")}
        {Lisp-Entry "component-get-addable-default-trait" method (public virtual) ("component") #f #f 346 26 346 61 ("Trait" "component")}
        {Lisp-Entry "component-get-addable-base" method (public virtual) ("component") #f #f 350 26 350 52 ("Component" "car" "resolve-runtime-reference" "length" "1" "=" "if" "get-addable-classes" "get-addable-classes~" "classes" "let" "component")}
        {Lisp-Entry "component-get-addable-details" method (public virtual) ("component") #f #f 357 26 357 55 ("100" "name-info" "when" "get-addable-base" "get-addable-base~" "base" "let" "component")}
        {Lisp-Entry "component-get-recursive-details?" method (public virtual) ("component") #f #f 363 26 363 58 ("component")}
        {Lisp-Entry "component-get-class-searchable-classes" method (public virtual) ("component") #f #f 367 26 367 64 ("component")}
        {Lisp-Entry "component-get-custom-details" method (public virtual) ("component") #f #f 371 26 371 54 ("component")}
        {Lisp-Entry "component-get-custom-card" method (public virtual) ("component") #f #f 375 26 375 51 ("component")}
        {Lisp-Entry "component-add-component-menu" method (public virtual) ("component" "menu") #f #f 379 26 379 54 ("menu" "component")}
        {Lisp-Entry "component-save-properties" method (public virtual) ("component" "designer") #f #f 383 26 383 51 ("designer" "component")}}}})
"Component-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Component-Editor.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.designer.editor.Component-Editor" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.system" "jazz.ui.view" "jazz.ui" "jazz.locale" "jazz.library.listener" "jazz.library.component" "jazz.library" "jazz.io" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "Component-Editor" class (undocumented) ((extends . "Layout-View") (implements . "Document")) #f #f 52 20 52 36 ("explicit" "Document" "Layout-View")
        {Lisp-Entry "client" property () ((initialize . "#f") (accessors . "explicit")) #f #f 55 12 55 18 ()}
        {Lisp-Entry "application-select?" property () ((initialize . "#t") (accessors . "generate")) #f #f 56 12 56 31 ()}
        {Lisp-Entry "get-application-select?" accessor () () #f #f 56 56 56 64 ()}
        {Lisp-Entry "set-application-select?" accessor () () #f #f 56 56 56 64 ()}
        {Lisp-Entry "designer" slot () ((initialize . "#f") (getter . "generate")) #f #f 59 8 59 16 ()}
        {Lisp-Entry "get-designer" accessor () () #f #f 59 49 59 57 ()}
        {Lisp-Entry "listeners" slot () ((initialize . "'()")) #f #f 60 8 60 17 ()}
        {Lisp-Entry "selection" slot () ((initialize . "'()")) #f #f 61 8 61 17 ()}
        {Lisp-Entry "document-controller" slot () ((initialize . "#f")) #f #f 62 8 62 27 ()}
        {Lisp-Entry "rights" slot () ((initialize . "#f") (accessors . "generate")) #f #f 63 8 63 14 ()}
        {Lisp-Entry "get-rights" accessor () () #f #f 63 52 63 60 ()}
        {Lisp-Entry "set-rights" accessor () () #f #f 63 52 63 60 ()}
        {Lisp-Entry "selection-locked?" slot () ((initialize . "#f") (accessors . "generate")) #f #f 64 8 64 25 ()}
        {Lisp-Entry "get-selection-locked?" accessor () () #f #f 64 52 64 60 ()}
        {Lisp-Entry "set-selection-locked?" accessor () () #f #f 64 52 64 60 ()}
        {Lisp-Entry "get-component-editor" method (override) () #f #f 67 20 67 40 ("self")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 76 25 76 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 80 25 80 35 ()}
        {Lisp-Entry "install-in-host" method (override) ("host") #f #f 84 20 84 35 ("get-document-controller" "update-status" "update-status~" "nextmethod" "host")}
        {Lisp-Entry "install-scroller" method () () #f #f 89 11 89 27 ()}
        {Lisp-Entry "default-extension" method (override) () #f #f 98 20 98 37 ()}
        {Lisp-Entry "extensions" method (override) () #f #f 102 20 102 30 ()}
        {Lisp-Entry "focus-document" method (override) () #f #f 106 20 106 34 ("acquire-focus")}
        {Lisp-Entry "current-history-item" method (override) () #f #f 110 20 110 40 ()}
        {Lisp-Entry "get-page-setup" method (override) () #f #f 113 20 113 34 ("client" "get-page-setup" "get-page-setup~")}
        {Lisp-Entry "get-page-setup-designer" method (override) () #f #f 117 20 117 43 ("get-page-setup-designer" "get-page-setup-designer~" "designer" "client" "custom-page-setup?" "custom-page-setup?~" "if")}
        {Lisp-Entry "get-page-setup-parcel" method (override) ("designer") #f #f 123 20 123 41 ("client" "get-page-setup-parcel" "get-page-setup-parcel~" "designer")}
        {Lisp-Entry "apply-page-setup" method (override) ("designer" "form" "page-setup") #f #f 127 20 127 36 ("client" "apply-page-setup" "apply-page-setup~" "page-setup" "form" "designer")}
        {Lisp-Entry "get-document-controller" method (override) () #f #f 136 20 136 43 ("new-document-controller" "set!" "document-controller" "unless")}
        {Lisp-Entry "new-document-controller" method (override) () #f #f 142 20 142 43 ("self" "Component-Editor-Controller" "new")}
        {Lisp-Entry "save" method (override) () #f #f 146 20 146 24 ("get-document-controller" "save" "save~")}
        {Lisp-Entry "save-as" method (override) () #f #f 150 20 150 27 ("get-document-controller" "save-as" "save-as~")}
        {Lisp-Entry "save-all" method (public virtual) () #f #f 154 26 154 34 ("get-document-controller" "save-all" "save-all~")}
        {Lisp-Entry "install-scroller?" method (override) () #f #f 158 20 158 37 ()}
        {Lisp-Entry "get-moniker" method () () #f #f 162 11 162 22 ("get-document-controller" "get-moniker" "get-moniker~")}
        {Lisp-Entry "set-moniker" method () ("moniker") #f #f 166 11 166 22 ("get-document-controller" "set-moniker" "set-moniker~" "moniker")}
        {Lisp-Entry "load-content" method (override) ("moniker") #f #f 170 20 170 32 ("set-client" "instantiate" "instantiate~" "cpnt" "read-form" "form" "let*" "moniker")}
        {Lisp-Entry "verify-reload" method (override) () #f #f 176 20 176 33 ()}
        {Lisp-Entry "reload-moniker" method (override) ("moniker") #f #f 180 20 180 34 ("moniker")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 184 20 184 33 ("get-document-controller" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-modified?" method (override) ("state") #f #f 188 20 188 33 ("get-document-controller" "set-modified?" "set-modified?~" "state")}
        {Lisp-Entry "set-document-controller-modified?" method (protected virtual) ("state") #f #f 192 29 192 62 ("get-document-controller" "set-modified?" "set-modified?~" "state")}
        {Lisp-Entry "update-status" method () () #f #f 196 11 196 24 ("get-document-controller" "update-status" "update-status~")}
        {Lisp-Entry "update-moniker-time" method () ("moniker") #f #f 200 11 200 30 ("get-document-controller" "update-moniker-time" "update-moniker-time~" "moniker")}
        {Lisp-Entry "confirm-close" method (override) ("." "rest") #f #f 204 20 204 33 ("get-document-controller" "confirm-close" "confirm-close~" "rest")}
        {Lisp-Entry "compare-moniker" method (override) ("moniker") #f #f 208 20 208 35 ("focus-host" "focus-host~" "get-guest" "get-guest~" "compare-trees" "compare-trees~" "lambda" ":wait" "with-cursor" "right-moniker:" "left-moniker:" "host-visible?:" "Compare-Databases" "require-service" "new-frame" "frame" "right" "Document-Moniker" "new" "left" "let*" "moniker")}
        {Lisp-Entry "tool-update" method (override) ("tool?") #f #f 218 20 218 31 ("tool?")}
        {Lisp-Entry "console-update" method (override) ("console?") #f #f 222 20 222 34 ("console?")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 231 20 231 27 ("on-editor" "method-name:" "self" "target:" "Event-Handler" "new" "add-editor-listener" "nextmethod" "rest")}
        {Lisp-Entry "destroy" method (override) () #f #f 241 20 241 27 ("nextmethod" "close-application-selected" "self" "remove-editor-listener" "set-client")}
        {Lisp-Entry "new-form" method (package) () #f #f 253 19 253 27 ()}
        {Lisp-Entry "open-form" method (package) () #f #f 257 19 257 28 ("open-form" "instantiate" "instantiate~" "set-client")}
        {Lisp-Entry "save-form" method (package) () #f #f 262 19 262 28 ("edit-document" "edit-document~" "file?" "when" "designer" "get-form" "get-form~" "get-origin" "get-origin~" "origin" "get-application" "appl" "let" "save" "lambda" ":wait" "with-cursor")}
        {Lisp-Entry "edit-form" method (package) () #f #f 272 19 272 28 ("view-component")}
        {Lisp-Entry "select-trait" method (public) ("trait") #f #f 281 18 281 30 ("process-branch-changing" "lambda" ":wait" "with-cursor" "client" "get-active-trait" "get-active-trait~" "or" "neq?" "when" "trait")}
        {Lisp-Entry "change-trait" method () ("trait") #f #f 288 11 288 23 ("process-branch-changed" "get-client" "set-active-trait" "set-active-trait~" "trait")}
        {Lisp-Entry "select-component" method () ("tree" "control?") #f #f 298 11 298 27 ("edit-component" "bell" "not" "if" "selected-component" "selected-component~" "component" "let" "descendants" "locate" "get-highlight-edited?" "get-highlight-edited?~" "and" "when" "control?" "tree")}
        {Lisp-Entry "find-changed-property" method (protected) ("trait" "component" "property") #f #f 311 21 311 42 ("eq?" "and" "prop" "cpn" "tr" "bind" "action" "lambda" "find-if" "undoer" "get-undo-list" "get-undo-list~" "undo-list" "symbolize-property" "let" "property" "component" "trait")}
        {Lisp-Entry "select-property" method (public) ("property") #f #f 324 18 324 33 ("process-property-selected" "property")}
        {Lisp-Entry "show-properties" method (public virtual) () #f #f 328 26 328 41 ("focus?:" "workspace:" "Properties-Manager" "select-docked")}
        {Lisp-Entry "get-selection" method (public) () #f #f 337 18 337 31 ("selection")}
        {Lisp-Entry "set-selection" method (virtual public) ("new" "(origin: origin #f)" "(force-parent?: force-parent? #f)" "(force?: force? #f)" "(focus?: focus? #t)") #f #f 341 26 341 39 ("update-focus-actions" "update-focus-actions~" "set-selected" "set-selected~" "application-select?" "when" "process-selection-changed" "process-selection-changing" "self" "get-selected-owner" "get-selected-owner~" "eq?" "equal?" "and" "unless" "selection" "old" "get-application" "appl" "let" "focus?" "focus?:" "force?" "force?:" "force-parent?" "force-parent?:" "origin" "origin:" "new")}
        {Lisp-Entry "close-application-selected" method () () #f #f 352 11 352 37 ("self" "close-selected" "close-selected~" "get-application" "appl" "let")}
        {Lisp-Entry "select-all" method (override) ("." "rest") #f #f 357 20 357 30 ("rest")}
        {Lisp-Entry "unselect-all" method (public) () #f #f 361 18 361 30 ("set-selection")}
        {Lisp-Entry "select" method (public) ("component" "(focus?: focus? #t)") #f #f 365 18 365 24 ("cons" "list" "append" "self" "origin:" "selection" "remove" "set-selection" "selected?" "shift-down?" "control-down?" "or" "if" "selection-locked?" "unless" "focus?" "focus?:" "component")}
        {Lisp-Entry "selected?" method (public) ("component") #f #f 376 18 376 27 ("selection" "memq?" "component")}
        {Lisp-Entry "selection-changed" method (protected virtual) ("old" "new" "origin" "force-parent?" "focus?") #f #f 380 29 380 46 ("length" "0" "naturals" "select" "select~" "rank" "unselect" "unselect~" "get-surrogate" "get-surrogate~" "surrogate" "let" "when" "for-each" "selection" "set!" "Component" "is?" "component" "lambda" "every?" "assert" "focus?" "force-parent?" "origin" "new" "old")}
        {Lisp-Entry "with-common-parent-reselect" method () ("proc") #f #f 398 11 398 38 ("list" "if" "self" "origin:" "set-selection" "selection" "components-parent" "parent" "let" "proc")}
        {Lisp-Entry "copy-selection" method (override) () #f #f 405 20 405 34 ("designer" "copy-components" "copy-components~" "client" "collect-oldest-ancestors" "selection" "let")}
        {Lisp-Entry "cut-selection" method (override) () #f #f 410 20 410 33 ("designer" "cut-components" "cut-components~" "lambda" "with-common-parent-reselect" "client" "collect-oldest-ancestors" "selection" "let")}
        {Lisp-Entry "delete-selection" method (override) ("(message: message \"Delete selected objects?\")") #f #f 417 20 417 36 ("designer" "remove-components" "remove-components~" "lambda" "with-common-parent-reselect" "client" "collect-oldest-ancestors" "selection" "when" "throw-cancel" "cancel" "no" "yes" "case" "confirmation" "type:" "localize" "message-box" "code" "let" "confirm-close" "define" "message" "message:")}
        {Lisp-Entry "components-parent" method (package) ("components") #f #f 432 19 432 36 ("car" "1" "length" "=" "if" "get-parent" "get-parent~" "map" "remove-duplicates" "parents" "let" "components")}
        {Lisp-Entry "cleanup-selection" method () () #f #f 440 11 440 28 ("not" "component" "lambda" "collect-if" "set-selection" "selection" "destroyed?" "destroyed?~" "some?" "when")}
        {Lisp-Entry "toggle-lock-selection" method (public) () #f #f 447 18 447 39 ("not" "selection-locked?" "set!")}
        {Lisp-Entry "save-content" method (override) ("moniker") #f #f 456 20 456 32 ("process-saved" "set-modified?" "update-status" "get-modified?" "not" "if" "update-moniker-time" "trait:" "get-base" "get-base~" "get-client" "set-name" "set-name~" "designer" "save-to" "save-to~" "process-saving" "moniker")}
        {Lisp-Entry "refresh" method () () #f #f 467 11 467 18 ("reset-client" "set-modified?" "designer-save" "destination" "when" "cancel" "throw-cancel" "no" "yes" "case" "confirmation" "type:" "message-box" "code" "let" "get-modified?" "not" "or" "confirm-refresh" "define")}
        {Lisp-Entry "reset-client" method (public) ("target") #f #f 483 18 483 30 ("new" "Class" "read-form" "instantiate" "instantiate~" "File" "typecase" "set-client" "target")}
        {Lisp-Entry "save-patch" method (public) ("thunk") #f #f 490 18 490 28 ("reset-client" "eq?" "pathname=?" "file?" "and" "or" "when" "set-modified?" "update-status" "get-modified?" "not" "if" "destination" "designer" "get-form" "get-form~" "get-origin" "get-origin~" "origin" "let*" "process-saving" "thunk")}
        {Lisp-Entry "save-content-patch" method (public) () #f #f 502 18 502 36 ("designer-save" "save-patch")}
        {Lisp-Entry "save-content-as-patch" method (public) () #f #f 506 18 506 39 ("designer-save-as" "save-patch")}
        {Lisp-Entry "revert-content" method () ("_") #f #f 510 11 510 25 ("designer" "revert" "revert~" "_")}
        {Lisp-Entry "designer-save" method (protected virtual) () #f #f 514 29 514 42 ("designer" "save" "save~")}
        {Lisp-Entry "designer-save-as" method (protected virtual) () #f #f 518 29 518 45 ("designer" "save-as" "save-as~")}
        {Lisp-Entry "view-component" method () ("(workspace: workspace #f)") #f #f 527 11 527 25 ("edit-form" "edit-form~" "bell" "designer" "not" "if" "workspace" "workspace:")}
        {Lisp-Entry "can-modify?" method () ("pred") #f #f 538 11 538 22 ("designer" "component-owned-by-reference?" "~" "neq?" "component" "lambda" "every?" "and" "client" "collect-oldest-ancestors" "selection" "let" "pred")}
        {Lisp-Entry "can-delete-selection?" method (public) () #f #f 545 18 545 39 ("can-delete-components?" "can-modify?")}
        {Lisp-Entry "can-cut-selection?" method (public) () #f #f 549 18 549 36 ("can-cut-components?" "can-modify?")}
        {Lisp-Entry "can-copy-selection?" method (public) () #f #f 553 18 553 37 ("can-copy-components?" "neq?" "component" "lambda" "every?" "and" "client" "collect-oldest-ancestors" "selection" "let")}
        {Lisp-Entry "can-rename-selection?" method (public) () #f #f 559 18 559 39 ("can-rename-component?" "can-rename-component?~" "car" "designer" "component-owned-by-reference?" "component-owned-by-reference?~" "1" "selection" "length" "=" "and")}
        {Lisp-Entry "can-send-selection-to-back?" method (public) () #f #f 565 18 565 45 ("const" "can-modify?")}
        {Lisp-Entry "can-bring-selection-to-front?" method (public) () #f #f 569 18 569 47 ("const" "can-modify?")}
        {Lisp-Entry "on-editor" method (protected virtual) ("evt") #f #f 578 29 578 38 ("selection-changed" "get-user-origin" "get-user-origin~" "focus?" "get-force-parent?" "get-force-parent?~" "force-parent?" "get-origin" "get-origin~" "origin" "get-selection" "get-selection~" "get-old" "get-old~" "old" ":selection-changed" "designer" "save-component-properties" "save-component-properties~" "Component" "is?" "car" "cpn" "let" "selection" "not-null?" "when" ":saving" ":selection-changing" "cleanup-selection" ":branch-changed" "trait:" "get-property" "get-property~" "change-trait" ":branch-changing" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "get-client" method (public) () #f #f 603 18 603 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("clt") #f #f 607 18 607 28 ("client-updated" "process-client-change" "edit-component" "client-update" "set!" "remove-surrogate" "remove-surrogate~" "old" "let" "set-selection" "client" "neq?" "when" "clt")}
        {Lisp-Entry "client-update" method (protected virtual) () #f #f 620 29 620 42 ("install-client-surrogate")}
        {Lisp-Entry "client-updated" method (protected virtual) () #f #f 624 29 624 43 ()}
        {Lisp-Entry "install-client-surrogate" method (protected virtual) () #f #f 628 29 628 53 ()}
        {Lisp-Entry "get-designer-class" method (protected virtual) () #f #f 637 29 637 47 ("Designer")}
        {Lisp-Entry "get-reference" method (public) () #f #f 641 18 641 31 ("get-reference" "get-reference~" "designer" "and")}
        {Lisp-Entry "edit-component" method (public) ("component" "(form: form #f)") #f #f 645 18 645 32 ("update-status" "process-designer-change" "install-current-designer" "uninstall-current-designer" "or" "designer" "old" "get-reference" "neq?" "class-of" "get-class-form" "get-class-form~" "class?" "not" "get-origin" "get-origin~" "origin" "and" "if" "get-form" "get-form~" "component-form" "let" "when" "get-edited-form" "define" "form" "form:" "component")}
        {Lisp-Entry "install-current-designer" method (protected virtual) ("component" "form") #f #f 664 29 664 53 ("client" "install-designer" "install-designer~" "on-designer" "method-name:" "self" "target:" "Event-Handler" "add-designer-listener" "add-designer-listener~" "reference:" "form:" "get-designer-class" "new" "set!" "set-modified?" "reset-modified?" "reset-modified?~" "set-selection" "state" "get-selection" "reset-modified" "set-reset-modified" "set-reset-modified~" "restore-state" "set-restore-state" "set-restore-state~" "preserve-state" "set-preserve-state" "set-preserve-state~" "designer" "get-undoer" "get-undoer~" "undoer" "let" "setup-undoer" "define" "form" "component")}
        {Lisp-Entry "uninstall-current-designer" method (protected virtual) () #f #f 687 29 687 55 ("set!" "uninstall-designer" "uninstall-designer~" "client" "self" "remove-designer-listener" "remove-designer-listener~" "designer" "when")}
        {Lisp-Entry "on-designer" method (protected virtual) ("evt") #f #f 695 29 695 40 (":send-before" ":child-relocate" ":child-add" "eq?" "test:" "selection" "remove" "set-selection" "child:" "get-property" "get-property~" "child" ":child-remove" "set-document-controller-modified?" ":property-change" "case" "get-kind" "get-kind~" "kind" "let" "evt")}
        {Lisp-Entry "add-editor-listener" method (public) ("listener") #f #f 713 18 713 37 ("add-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "remove-editor-listener" method (public) ("listener") #f #f 717 18 717 40 ("remove-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "process-client-change" method () ("old" "client") #f #f 721 11 721 32 ("invoke" "invoke~" "listener" "lambda" "for-each" "client:" "old:" "self" ":client-change" "Editor-Event" "new" "evt" "let" "listeners" "when" "client" "old")}
        {Lisp-Entry "process-designer-change" method () ("old" "designer") #f #f 729 11 729 34 ("invoke" "invoke~" "listener" "lambda" "for-each" "designer:" "old:" "self" ":designer-change" "Editor-Event" "new" "evt" "let" "listeners" "when" "designer" "old")}
        {Lisp-Entry "process-branch-changing" method (public) ("trait") #f #f 737 18 737 41 ("invoke" "invoke~" "listener" "lambda" "for-each" "trait:" "self" ":branch-changing" "Editor-Event" "new" "evt" "let" "listeners" "when" "trait")}
        {Lisp-Entry "process-branch-changed" method (public) ("trait") #f #f 745 18 745 40 ("invoke" "invoke~" "listener" "lambda" "for-each" "trait:" "self" ":branch-changed" "Editor-Event" "new" "evt" "let" "listeners" "when" "trait")}
        {Lisp-Entry "process-selection-changing" method (public) ("old" "selection" "origin" "force-parent?" "force?" "user-origin") #f #f 753 18 753 44 ("invoke" "invoke~" "listener" "lambda" "for-each" "user-origin:" "force?:" "force-parent?:" "origin:" "self" ":selection-changing" "Selection-Event" "new" "evt" "let" "listeners" "when" "user-origin" "force?" "force-parent?" "origin" "selection" "old")}
        {Lisp-Entry "process-selection-changed" method (public) ("old" "selection" "origin" "force-parent?" "force?" "user-origin") #f #f 761 18 761 43 ("invoke" "invoke~" "listener" "lambda" "for-each" "user-origin:" "force?:" "force-parent?:" "origin:" "self" ":selection-changed" "Selection-Event" "new" "evt" "let" "listeners" "when" "user-origin" "force?" "force-parent?" "origin" "selection" "old")}
        {Lisp-Entry "process-property-selected" method (public) ("property") #f #f 769 18 769 43 ("invoke" "invoke~" "listener" "lambda" "for-each" "property:" "self" ":property-selected" "Editor-Event" "new" "evt" "let" "listeners" "when" "property")}
        {Lisp-Entry "process-saving" method (public) () #f #f 777 18 777 32 ("invoke" "invoke~" "listener" "lambda" "for-each" "self" ":saving" "Editor-Event" "new" "evt" "let" "listeners" "when")}
        {Lisp-Entry "process-saved" method (public) () #f #f 785 18 785 31 ("invoke" "invoke~" "listener" "lambda" "for-each" "self" ":saved" "Editor-Event" "new" "evt" "let" "listeners" "when")}
        {Lisp-Entry "editor-title" method (public virtual) () #f #f 798 26 798 38 ("class-of" "category-identifier" "format" "not" "if" "get-reference" "reference" "let")}}}})
"Component-Editor-Controller"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Component-Editor-Controller.jazz"} 247283256. jazz
    {Lisp-Entry "jazz.designer.editor.Component-Editor-Controller" module (protected) () #f #f 37 18 37 66 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.io")}
      {Lisp-Entry "Component-Editor-Controller" class (undocumented) ((extends . "Document-Controller")) #f #f 45 20 45 47 ("Document-Controller")
        {Lisp-Entry "save" method (override) () #f #f 49 20 49 24 ("document" "save-content-patch" "save-content-patch~")}
        {Lisp-Entry "save-as" method (override) () #f #f 53 20 53 27 ("document" "save-content-as-patch" "save-content-as-patch~")}
        {Lisp-Entry "revert" method () () #f #f 57 11 57 17 ("document" "revert-content" "revert-content~")}
        {Lisp-Entry "name-status" method (override) () #f #f 61 20 61 31 ("category-name" "else" "serialize-runtime-reference" "third" "symbol->string" "Runtime-Reference" "is?" "get-name" "get-name~" "file?" "effective-newname" "not" "cond" "format" "origin" "get-origin" "get-origin~" "get-form" "get-form~" "form" "when" "document" "get-designer" "get-designer~" "designer" "let" "find-origin" "define")}
        {Lisp-Entry "confirm-close" method (override) () #f #f 81 20 81 33 ("throw-cancel" "cancel" "revert" "no" "save-all" "yes" "case" "confirmation" "type:" "name-status" "format" "message-box" "code" "let" "get-modified?" "when")}
        {Lisp-Entry "update-moniker-time" method (override) ("moniker") #f #f 91 20 91 39 ("moniker")}}}})
"Component-Menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "menu" "Component-Menu.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.designer.menu.Component-Menu" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Component-Menu" class (undocumented) ((extends . "Context-Menu")) #f #f 46 20 46 34 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("properties" "before-properties" "set-default-traits" "before-traits" "rename" "rename-selected" "delete" "delete-selection" "end-edit-group" "paste-properties" "paste" "copy" "view" "cut" "end-add-group" "add-menu" "Add-Menu" "<Add-Menu>" "add-item" "end-new-group" "Separator-Item" "<Separator-Item>" "add" "open" "components-tree" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "new" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Component-Parcel"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "clipboard" "Component-Parcel.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.clipboard.Component-Parcel" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library.component")}
      {Lisp-Entry "Component-Parcel" class (undocumented) ((extends . "Entity-Parcel")) #f #f 44 20 44 36 ("Entity-Parcel")
        {Lisp-Entry "imports" slot () ((getter . "generate")) #f #f 47 8 47 15 ()}
        {Lisp-Entry "get-imports" accessor () () #f #f 47 23 47 31 ()}
        {Lisp-Entry "initialize" method (override) ("process-id" "object-id" "imports" "content") #f #f 50 20 50 30 ("self" "imports~self" "set!" "nextmethod" "content" "imports" "object-id" "process-id")}
        {Lisp-Entry "get-master" method (public) () #f #f 60 18 60 28 ("content" "car")}
        {Lisp-Entry "get-master-model" method (public) () #f #f 64 18 64 34 ("resolve-runtime-reference" "get-model" "get-model~" "model" "get-master" "master" "let*" "imports" "imports-locator" "locator" "let")}
        {Lisp-Entry "get-master-name" method (public) () #f #f 71 18 71 33 ("get-name" "get-name~" "get-master" "master" "let")}}}})
"Component-Surrogate"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "surrogate" "Component-Surrogate.jazz"} 242123928. jazz
    {Lisp-Entry "jazz.designer.surrogate.Component-Surrogate" module (protected) () #f #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Component-Surrogate" class (undocumented) ((extends . "Component")) #f #f 43 20 43 39 ("Component")
        {Lisp-Entry "client" slot (protected) ((initialize . "#f") (accessors . "generate")) #f #f 46 18 46 24 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 46 49 46 57 ()}
        {Lisp-Entry "set-client" accessor () () #f #f 46 49 46 57 ()}
        {Lisp-Entry "editor" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 47 18 47 24 ()}
        {Lisp-Entry "get-editor" accessor () () #f #f 47 46 47 54 ()}
        {Lisp-Entry "initialize" method (override) ("(client: client #f)" "(editor: editor #f)") #f #f 55 20 55 30 ("set-client" "self" "editor~self" "set!" "nextmethod" "editor" "editor:" "client" "client:")}
        {Lisp-Entry "install-handlers" method (public virtual) () #f #f 66 26 66 42 ()}
        {Lisp-Entry "remove-handlers" method (public virtual) () #f #f 70 26 70 41 ()}
        {Lisp-Entry "outer-client" method (public) () #f #f 79 18 79 30 ("editor" "get-reference" "get-reference~" "client" "outer-component" "outer-component~")}
        {Lisp-Entry "invalidate-border" method (public virtual) () #f #f 88 26 88 43 ()}
        {Lisp-Entry "redraw-border" method (public virtual) () #f #f 92 26 92 39 ()}
        {Lisp-Entry "select" method (public virtual) ("rank" "focus?") #f #f 101 26 101 32 ("focus?" "rank")}
        {Lisp-Entry "unselect" method (public virtual) () #f #f 105 26 105 34 ()}
        {Lisp-Entry "get-selected?" method (public) () #f #f 109 18 109 31 ("get-selection" "client" "memq?")}
        {Lisp-Entry "selection-rank" method (public) () #f #f 113 18 113 32 ("client" "get-selection" "find")}
        {Lisp-Entry "get-selection" method (public) () #f #f 117 18 117 31 ("editor" "get-selection" "get-selection~")}
        {Lisp-Entry "set-selection" method (public) ("selection") #f #f 121 18 121 31 ("origin:" "editor" "set-selection" "set-selection~" "selection")}
        {Lisp-Entry "acquire-selection" method (public) () #f #f 125 18 125 35 ("client" "list" "set-selection")}}}})
"Components-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Components-Tree.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.designer.editor.Components-Tree" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.clipboard" "jazz.ui.view" "jazz.ui" "jazz.system" "jazz.runtime" "jazz.library" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "Components-Tree" class (undocumented) ((extends . "Components-Viewer")) #f #f 50 20 50 35 ("Components-Viewer")
        {Lisp-Entry "application-select?" property () ((initialize . "#t") (accessors . "generate")) #f #f 53 12 53 31 ()}
        {Lisp-Entry "get-application-select?" accessor () () #f #f 53 56 53 64 ()}
        {Lisp-Entry "set-application-select?" accessor () () #f #f 53 56 53 64 ()}
        {Lisp-Entry "focus-actions" method (override) () #f #f 61 20 61 33 ("nextmethod" "components-tree" "find-actions" "cons")}
        {Lisp-Entry "on-delete-selection" method () ("evt") #f #f 71 11 71 30 ("delete-selection" "evt")}
        {Lisp-Entry "on-rename-component" method () ("evt") #f #f 75 11 75 30 ("rename-selection" "evt")}
        {Lisp-Entry "on-export-text" method () ("evt") #f #f 79 11 79 25 ("user-message" "export-text" "export-text~" "lambda" ":wait" "with-cursor" "bell" "not" "if" "selected-component" "component" "let" "evt")}
        {Lisp-Entry "on-properties" method (override) ("evt") #f #f 89 20 89 33 ("show-properties" "evt")}
        {Lisp-Entry "on-open" method (virtual) ("evt") #f #f 93 19 93 26 ("class-of" "open-class" "selected-component" "component" "let" "evt")}
        {Lisp-Entry "focus-gained" method (override) () #f #f 102 20 102 32 ("selected-components" "get-editor" "get-application" "set-selected" "set-selected~" "application-select?" "when" "nextmethod")}
        {Lisp-Entry "focus-update-actions" method (override) () #f #f 108 20 108 40 ("set-default-traits" "add" "open" "new" "can-rename?" "rename" "components-tree" "Action" "set-action-enabled?")}
        {Lisp-Entry "on-editor" method (override) ("evt") #f #f 121 20 121 29 ("nextmethod" "else" "get-user-origin" "get-user-origin~" "get-force-parent?" "get-force-parent?~" "get-origin" "get-origin~" "get-old" "get-old~" "get-selection" "get-selection~" "selection-changed" ":selection-changed" "branch-changed" ":branch-changed" "end-edition" ":saving" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "branch-changed" method (protected virtual) () #f #f 129 29 129 43 ()}
        {Lisp-Entry "selection-changed" method (protected virtual) ("selection" "old" "origin" "force-parent?" "focus?") #f #f 133 29 133 46 ("focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "client-update" method (override) () #f #f 142 20 142 33 ("get-selection" "get-selection~" "selected-components:" "update" "editor" "when")}
        {Lisp-Entry "set-designer" method (override) ("dsg") #f #f 152 20 152 32 ("highlight-edited" "install-listener" "set!" "uninstall-listener" "get-reference" "get-reference~" "unhighlight-edited" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "highlight-edited" method (protected virtual) ("component") #f #f 168 29 168 45 ("component")}
        {Lisp-Entry "unhighlight-edited" method (protected virtual) ("component") #f #f 172 29 172 47 ("component")}
        {Lisp-Entry "component-presentation" method (protected virtual) ("component") #f #f 181 29 181 51 ("get-presentation-property" "get-presentation-property~" "component")}
        {Lisp-Entry "component-font" method (protected virtual) ("component" "owned-form") #f #f 185 29 185 43 ("owned-form" "component")}
        {Lisp-Entry "component-color" method (protected virtual) ("component" "owned-form") #f #f 189 29 189 44 ("owned-form" "component")}
        {Lisp-Entry "component-image" method (protected virtual) ("component") #f #f 193 29 193 44 ("get-component-image" "get-component-image~" "component")}
        {Lisp-Entry "component-state" method (protected virtual) ("component") #f #f 197 29 197 44 ("component")}
        {Lisp-Entry "parent-relocation" method (protected virtual) ("parent") #f #f 206 29 206 46 ("parent")}
        {Lisp-Entry "relocation-parent" method (protected virtual) ("destination" "class") #f #f 210 29 210 46 ("class" "destination")}
        {Lisp-Entry "can-undo?" method (override) () #f #f 219 20 219 29 ()}
        {Lisp-Entry "can-redo?" method (override) () #f #f 223 20 223 29 ()}
        {Lisp-Entry "can-cut?" method (override) () #f #f 227 20 227 28 ("can-cut-selection?" "can-cut-selection?~" "editor" "and")}
        {Lisp-Entry "can-copy?" method (override) () #f #f 231 20 231 29 ("can-copy-selection?" "can-copy-selection?~" "editor" "and")}
        {Lisp-Entry "can-paste?" method (override) () #f #f 235 20 235 30 ("selected-components" "can-paste-components?")}
        {Lisp-Entry "can-paste-properties?" method (override) () #f #f 239 20 239 41 ("class-of" "subtype?" "component" "lambda" "every?" "get-master-model" "get-master-model~" "parcel-model" "car" "parcel" "let*" "1" "length" "=" "get-jazz-parcels" "parcels" "jazz-parcels" "clipboard-format-available?" "when" "selected-components" "components" "let")}
        {Lisp-Entry "can-delete?" method (override) () #f #f 253 20 253 31 ("can-delete-selection?" "can-delete-selection?~" "editor" "and")}
        {Lisp-Entry "can-rename?" method (override) () #f #f 257 20 257 31 ("can-rename-selection?" "can-rename-selection?~" "editor" "and")}
        {Lisp-Entry "can-select-all?" method (override) () #f #f 261 20 261 35 ()}
        {Lisp-Entry "cut-selection" method (override) () #f #f 265 20 265 33 ("editor" "cut-selection" "cut-selection~")}
        {Lisp-Entry "copy-selection" method (override) () #f #f 269 20 269 34 ("editor" "copy-selection" "copy-selection~")}
        {Lisp-Entry "paste-clipboard" method (override) () #f #f 274 20 274 35 ("get-model" "get-model~" "get-master" "get-master~" "master" "parcel" "key:" "partition" "select-components" "0" "Point" "cascade-view-position" "cascade-view-position~" "comp" "relocation-parent" "paste-parcels" "paste-parcels~" "components" "designer" "get-undoer" "get-undoer~" "with-atomic-undo" "with-atomic-undo~" "model" "bind" "info" "lambda" "for-each" "get-jazz-parcels" "parcels" "client" "selected-component" "or" "parent" "let")}
        {Lisp-Entry "paste-properties" method (override) () #f #f 287 20 287 36 ("designer" "paste-properties" "paste-properties~" "selected-components" "components" "let")}
        {Lisp-Entry "delete-selection" method (override) () #f #f 292 20 292 36 ("editor" "delete-selection" "delete-selection~")}
        {Lisp-Entry "on-add-component" method (override) ("evt") #f #f 302 20 302 36 ("add-component-class" "car" "class" "selected-component" "addable-classes" "classes" "1" "length" "=" "when" "selected-components" "components" "let" "evt")}
        {Lisp-Entry "categorized-addable-classes" method (override) ("component") #f #f 311 20 311 47 ("get-parent" "get-parent~" "parent-relocation" "component-categorized-addable-classes" "Component" "is?" "if" "component")}
        {Lisp-Entry "add-component-class" method (override) ("reference" "(parent: parent #f)" "(presentation: presentation #f)" "(properties: properties '())" "(select?: select? #t)") #f #f 317 20 317 39 ("select-component" "add-component-request" "values" "if" "get-parent" "get-parent~" "set!" "addable-classes" "map" "memq?" "not" "when" "parse-runtime-reference" "_" "bind" "client" "relocation-parent" "or" "resolve-runtime-reference" "selected-component" "selected" "let*" "import:" "install-new-component" "lambda" "with-update-locked" "get-designer" "designer" "name:" "new" "child" "presentation->name" "presentation->name~" "and" "name" "let" "added-properties" "receive" "extra-properties" "creation-info" "import" "class" "create-new-component" "define" "select?" "select?:" "properties" "properties:" "presentation" "presentation:" "parent" "parent:" "reference")}
        {Lisp-Entry "add-component-request" method (protected virtual) ("class" "parent") #f #f 345 29 345 50 ("component-properties-request" "get-children" "get-children~" "component-presentation-request" "values" "parent" "class")}
        {Lisp-Entry "component-presentation-request" method (protected virtual) ("class" "brothers" "(initial-value: initial-value #f)") #f #f 350 29 350 59 ("request-component-presentation" "initial-value" "initial-value:" "brothers" "class")}
        {Lisp-Entry "component-properties-request" method (protected virtual) ("class") #f #f 354 29 354 57 ("class")}
        {Lisp-Entry "install-new-component" method (protected virtual) ("designer" "child" "parent" "presentation" "added-properties" "extra-properties" "(import: import #f)" "(descendant?: descendant? #f)") #f #f 358 29 358 50 ("install-new-properties" "set-presentation-property" "set-presentation-property~" "when" "add-child" "add-child~" "descendant?" "descendant?:" "import" "import:" "extra-properties" "added-properties" "presentation" "parent" "child" "designer")}
        {Lisp-Entry "install-new-properties" method (protected virtual) ("designer" "child" "added-properties" "extra-properties") #f #f 365 29 365 51 ("append" "add-properties" "extra-properties" "added-properties" "child" "designer")}
        {Lisp-Entry "add-properties" method (protected virtual) ("component" "properties") #f #f 369 29 369 43 ("designer" "set-property" "set-property~" "value" "property" "lambda" "for-each-property" "properties" "component")}
        {Lisp-Entry "rename-selection" method (override) () #f #f 379 20 379 36 ("rename-component" "when" "selected-component" "component" "let")}
        {Lisp-Entry "rename-component" method (public) ("component") #f #f 385 18 385 34 ("end-rename" "0" "Cell" "new" "cell" "row->line" "line" "get-presentation-property" "get-presentation-property~" "initial-value:" "get-brothers" "get-brothers~" "class-of" "component-presentation-request" "presentation" "let*" "ensure-expanded" "when" "component-row" "row" "let" "component")}
        {Lisp-Entry "end-rename" method () ("component" "cell" "presentation") #f #f 395 11 395 21 ("select-component" "acquire-focus" "reorder-component" "sort-components?" "sort-components?~" "and" "when" "get-parent" "get-parent~" "parent" "let" "designer" "set-presentation-property" "set-presentation-property~" "get-cell-data" "set-title" "set-title~" "lambda" "with-update-locked" "presentation" "cell" "component")}
        {Lisp-Entry "relocate-components" method () ("source" "target") #f #f 412 11 412 30 ("send-component-before" "send-before" "send-before~" "and" "target-data" "element" "cardinality" "<" "1" "+" "after" "before" "case" "position" "son-rank" "son-rank~" "rank" "get-sons" "get-sons~" "sons" "get-father" "get-father~" "father" "select-components" "0" "Point" "cascade-view-position" "cascade-view-position~" "comp" "for-each" "relocate-components" "relocate-components~" "get-undoer" "get-undoer~" "with-atomic-undo" "with-atomic-undo~" "bell" "not" "class-of" "relocation-parent" "component" "key:" "uniform" "parent" "let" "row" "eq?" "if" "lambda" "with-update-locked" "get-user-data" "get-user-data~" "destination" "get-part" "get-part~" "part" "get-row" "get-row~" "dst" "get-view" "get-view~" "get-selected-data" "get-selected-data~" "components" "get-designer" "designer" "let*" "target" "source")}
        {Lisp-Entry "relocate-component-row" method () ("row" "father" "(position: position #f)") #f #f 441 11 441 33 ("find-component-position" "not" "if" "lambda" "move-row" "sort-components?" "sort-components?~" "sort?" "client" "or" "destination" "get-user-data" "get-user-data~" "source" "let*" "get-sons" "get-sons~" "cardinality" "1" "=" "get-father" "get-father~" "eq?" "and" "unless" "position" "position:" "father" "row")}
        {Lisp-Entry "reorder-component" method (public) ("component") #f #f 453 18 453 35 ("get-father" "get-father~" "relocate-component-row" "when" "find-row" "row" "let" "component")}
        {Lisp-Entry "find-component-position" method (protected virtual) ("component" "row" "father") #f #f 459 29 459 52 ("get-presentation-property" "get-presentation-property~" "find-ordered-position" "father" "row" "component")}
        {Lisp-Entry "find-component-insertion" method (protected virtual) ("parent-row" "component" "target") #f #f 463 29 463 53 ("find-row" "son-rank" "son-rank~" "when" "target" "component" "parent-row")}
        {Lisp-Entry "send-component-before" method (protected virtual) ("component" "before") #f #f 468 29 468 50 ("before" "component")}
        {Lisp-Entry "get-row-reorder-target" method (override) ("drag-drop" "row" "quarter") #f #f 477 20 477 42 ("part:" "row:" "self" "view:" "Tree-Drop-Target" "new" "when" "else" "after" "expanded?" "expanded?~" "=" "4" "3" "cond" "part" "can-send-before?" "can-send-before?~" "cdr" "/=" "addable-class?" "addable-class?~" "has-parent?" "has-parent?~" "every?" "neq?" "or" "not" "move?" "visible-count" "<" "before" "+" "2" "1" "memq?" "if" "and" "before-rank" "get-sons" "get-sons~" "last" "before-last" "eq?" "before?" "dst-parent" "row->line" "dst-line" "get-father" "get-father~" "dst-father" "dst" "get-parent" "get-parent~" "parent-relocation" "component" "key:" "uniform" "src-parent" "class-of" "remove-duplicates" "src-types" "get-row" "get-user-data" "get-user-data~" "n" "lambda" "map" "src" "contiguous-range" "src-range" "get-source" "get-source~" "get-view" "get-view~" "get-selection" "get-selection~" "src-selection" "let*" "quarter" "row" "drag-drop")}
        {Lisp-Entry "get-row-target" method (override) ("drag-drop" "row") #f #f 501 20 501 34 ("else" "get-row-reorder-target" "Descendants-Tree" "row:" "self" "view:" "Tree-Drop-Target" "new" "addable-class?" "addable-class?~" "and" "when" "get-user-data" "get-user-data~" "component" "get-class" "get-class~" "class" "selected-component" "selected-component~" "tool" "Toolbox-Tree" "typecase" "get-view" "get-view~" "view" "get-source" "get-source~" "source" "let*" "row" "drag-drop")}
        {Lisp-Entry "receive-drop" method (override) ("sender" "pos" "drag-drop") #f #f 518 20 518 32 ("Toolbox-Tree" "typecase" "relocate-components" "self" "eq?" "if" "get-target" "get-target~" "get-source" "get-source~" "source" "let" "parent:" "add-component-class" "lambda" "with-update-locked" "get-row" "get-row~" "get-user-data" "get-user-data~" "parent" "get-reference" "get-reference~" "ref" "selected-component" "selected-component~" "tool" "let*" "target" "receive-model" "define" "drag-drop" "pos" "sender")}
        {Lisp-Entry "show-properties" method (public) () #f #f 542 18 542 33 ("-" "value" "100" "property" "locate" "locate~" "set-width" "set-width~" "get-width" "get-width~" "width" "let" "expand/collapse" "set-parent" "set-parent~" "auto-expanded-row" "set!" "row-height:" "father:" "Editor-Row" "class:" "add-row" "subrow" "get-height" "get-height~" "+" "height" "2" "borders-height" "16" "header-height" "set-client" "set-client~" "designer" "set-designer" "set-designer~" "get-editor" "set-editor" "set-editor~" "categorized" "set-filter" "set-filter~" "get-header" "get-header~" "set-flat?" "set-flat?~" "get-tree" "get-tree~" "tree" "parent:" "Properties-Card" "card" "1" "Rect" "border-insets:" "edge" "border-type:" "Border-View" "new" "border" "selected-component" "component" "get-row" "row" "get-single-selection" "selection" "let*")}
        {Lisp-Entry "show-properties" method (public virtual) () #f #f 567 26 567 41 ("show-properties" "show-properties~" "editor" "when")}
        {Lisp-Entry "on-selection-change" method (virtual) ("evt") #f #f 577 19 577 38 ("focus?:" "self" "origin:" "selected-components" "set-selection" "set-selection~" "get-application" "get-selected-owner" "get-selected-owner~" "eq?" "editor" "and" "when" "evt")}
        {Lisp-Entry "select-component" method (public) ("component") #f #f 582 18 582 34 ("set-single-selection" "when" "component-visible-row" "row" "let" "component")}
        {Lisp-Entry "select-components" method (public) ("components") #f #f 589 18 589 35 ("set-selection" "component-visible-row" "map" "remove-false" "rows" "let" "components")}
        {Lisp-Entry "find-row" method (protected virtual) ("component") #f #f 595 29 595 37 ("component-row" "component")}}}})
"Components-Tree-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Components-Tree-Actions.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.designer.editor.Components-Tree-Actions" module (protected) () #f #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Components-Tree-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 43 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("on-add" "add" "on-open" "open" "on-new" "new" "on-properties" "properties" "on-set-default-traits" "set-default-traits" "F2" "Shortcut" "shortcut:" "on-rename-component" ":focus" "Event-Handler" "action-handler:" "rename" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Components-Viewer"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Components-Viewer.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.editor.Components-Viewer" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.designer.menu" "jazz.designer")}
      {Lisp-Entry "Components-Viewer" class (undocumented) ((extends . "Tree-View")) #f #f 46 20 46 37 ("Tree-View")
        {Lisp-Entry "editor" slot () ((initialize . "#f")) #f #f 49 8 49 14 ()}
        {Lisp-Entry "client" slot () ((initialize . "#f")) #f #f 50 8 50 14 ()}
        {Lisp-Entry "designer" slot () ((initialize . "#f")) #f #f 51 8 51 16 ()}
        {Lisp-Entry "focus-actions" method (override) () #f #f 59 20 59 33 ("nextmethod" "components-viewer" "find-actions" "cons")}
        {Lisp-Entry "destroy" method (override) () #f #f 69 20 69 27 ("nextmethod" "set-editor" "set-designer")}
        {Lisp-Entry "context-menu" method (override) ("pos") #f #f 75 20 75 32 ("track-popup-menu" "when" "get-context-menu" "menu" "let" "lambda" "with-context-click" "pos")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 83 20 83 36 ("add-component-class" "selected-component" "categorized-addable-classes" "selected-components" "update-component-menu" "self" "client:" "Component-Menu" "new" "menu" "let")}
        {Lisp-Entry "on-add-component" method (protected virtual) ("evt") #f #f 89 29 89 45 ("evt")}
        {Lisp-Entry "categorized-addable-classes" method (public virtual) ("component") #f #f 98 26 98 53 ("component")}
        {Lisp-Entry "addable-classes" method (public virtual) ("component") #f #f 102 26 102 41 ("categorized-addable-classes" "flatten" "jazz.dialect.language.functional" "jazz.dialect.language.functional:flatten" "component")}
        {Lisp-Entry "add-component-class" method (public virtual) ("class" "." "rest") #f #f 106 26 106 45 ("rest" "class")}
        {Lisp-Entry "get-editor" method (public) () #f #f 115 18 115 28 ("editor")}
        {Lisp-Entry "set-editor" method (public) ("edt") #f #f 119 18 119 28 ("editor-update" "on-editor" "method-name:" "target:" "Event-Handler" "new" "add-editor-listener" "add-editor-listener~" "set!" "self" "remove-editor-listener" "remove-editor-listener~" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "editor-update" method (protected virtual) () #f #f 129 29 129 42 ()}
        {Lisp-Entry "on-editor" method (protected virtual) ("evt") #f #f 133 29 133 38 ("designer:" "set-designer" ":designer-change" "client:" "get-property" "get-property~" "set-client" ":client-change" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "get-client" method (public) () #f #f 144 18 144 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("clt") #f #f 148 18 148 28 ("restore-state" "client-update" "set!" "preserve-state" "client" "neq?" "when" "clt")}
        {Lisp-Entry "client-update" method (protected virtual) () #f #f 158 29 158 42 ()}
        {Lisp-Entry "preserve-state" method (protected virtual) ("client") #f #f 167 29 167 43 ("client")}
        {Lisp-Entry "restore-state" method (protected virtual) ("client") #f #f 171 29 171 42 ("client")}
        {Lisp-Entry "get-designer" method (public) () #f #f 180 18 180 30 ("designer")}
        {Lisp-Entry "set-designer" method (public virtual) ("dsg") #f #f 184 26 184 38 ("install-listener" "set!" "uninstall-listener" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "install-listener" method () ("designer") #f #f 198 11 198 27 ("add-designer-listener" "add-designer-listener~" "on-designer" "method-name:" "self" "target:" "Event-Handler" "new" "listener" "let" "designer")}
        {Lisp-Entry "uninstall-listener" method () ("designer") #f #f 203 11 203 29 ("self" "remove-designer-listener" "remove-designer-listener~" "designer")}
        {Lisp-Entry "on-designer" method (protected virtual) ("evt") #f #f 212 29 212 40 ("evt")}
        {Lisp-Entry "get-selection-component" method () ("selection") #f #f 221 11 221 34 ("row" "get-line" "get-line~" "cell" "selection-mode" "case" "get-row" "get-user-data" "get-user-data~" "selection")}
        {Lisp-Entry "selected-component" method (public) () #f #f 230 18 230 36 ("get-selection-component" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "selected-components" method (public virtual) () #f #f 236 26 236 45 ("get-ordered-selection" "get-selection-component" "map")}
        {Lisp-Entry "component-row" method (public) ("component") #f #f 240 18 240 31 ("include-invisibles?:" "user-data-row" "component")}
        {Lisp-Entry "component-visible-row" method () ("component") #f #f 244 11 244 32 ("user-data-index" "component")}
        {Lisp-Entry "preserving-update" method (public) () #f #f 253 18 253 35 ("selected-components" "selected-components:" "get-expand-state" "expand-state:" "update")}
        {Lisp-Entry "update" method (public virtual) ("." "rest") #f #f 257 26 257 32 ("rest")}
        {Lisp-Entry "update-selection" method (public virtual) ("expand-state" "selected-components") #f #f 261 26 261 42 ("generate-event?:" "force?:" "component-visible-row" "collect" "set-selection" "set-expand-state" "when" "selected-components" "expand-state")}}}})
"Components-Viewer-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Components-Viewer-Actions.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.editor.Components-Viewer-Actions" module (protected) () #f #f 37 18 37 64 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Components-Viewer-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 45 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 (":control" "Shortcut" "shortcut:" "on-add-component" ":focus" "Event-Handler" "action-handler:" "add" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Composite-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Composite-Row.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.row.Composite-Row" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Composite-Row" class (undocumented) ((extends . "String-Row")) #f #f 48 20 48 33 ("String-Row")
        {Lisp-Entry "editor-class" method (override) () #f #f 56 20 56 32 ("Composite-Text-View")}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 65 20 65 36 ("current-entries" "parse-entries" "=" "empty-string?" "or" "if" "editor" "get-string-content" "get-string-content~" "string" "let")}
        {Lisp-Entry "accepts-spaces?" method (protected virtual) () #f #f 77 29 77 44 ()}
        {Lisp-Entry "parse-entries" method (protected virtual) ("entries") #f #f 81 29 81 42 ("parse-entry" "map" "entries")}
        {Lisp-Entry "parse-entry" method (protected virtual) ("entry") #f #f 85 29 85 40 ("entry")}
        {Lisp-Entry "parse-error" method () ("(message: message #f)" "(start: start #f)" "(end: end #f)" "(part: part #f)") #f #f 89 11 89 22 ("0" "Cell" "Parse-Error" "new" "signal" "get-end" "get-end~" "get-start" "get-start~" "and" "syntax-message" "or" "let" "part" "part:" "end" "end:" "start" "start:" "message" "message:")}
        {Lisp-Entry "syntax-message" method (protected virtual) () #f #f 96 29 96 43 ()}
        {Lisp-Entry "present" method (override) ("value") #f #f 105 20 105 27 ("present-value" "format" "not" "if" "value")}
        {Lisp-Entry "present-value" method (protected virtual) ("value") #f #f 112 29 112 42 ("present-entry" "map" "value")}
        {Lisp-Entry "present-entry" method (protected virtual) ("entry") #f #f 116 29 116 42 ("entry")}
        {Lisp-Entry "navigate-backward" method () () #f #f 125 11 125 28 ("select-part" "=" "when" "lambda" "for-each-part" "1" "get-rank" "get-rank~" "-" "previous" "let" "bell" "not" "if" "pos->part" "part" "editor" "get-start" "get-start~" "get-col" "get-col~" "pos" "current-entries" "entries" "let*")}
        {Lisp-Entry "navigate-forward" method () () #f #f 138 11 138 27 ("select-part" "=" "when" "lambda" "for-each-part" "1" "get-rank" "get-rank~" "+" "next" "let" "bell" "not" "if" "pos->part" "part" "editor" "get-end" "get-end~" "get-col" "get-col~" "pos" "current-entries" "entries" "let*")}
        {Lisp-Entry "current-entries" method () () #f #f 151 11 151 26 ("editor" "get-string-content" "get-string-content~" "determine-entries")}
        {Lisp-Entry "current-part" method () ("entries") #f #f 155 11 155 23 ("pos->part" "editor" "get-start" "get-start~" "get-col" "get-col~" "pos" "let" "entries")}
        {Lisp-Entry "current-position" method () ("entries") #f #f 160 11 160 27 ("pos->position" "editor" "get-start" "get-start~" "get-col" "get-col~" "pos" "let" "entries")}
        {Lisp-Entry "pos->part" method () ("entries" "pos") #f #f 165 11 165 20 ("continuation-return" "get-end" "get-end~" "<=" "get-start" "get-start~" ">=" "and" "when" "part" "for-each-part" "return" "lambda" "continuation-capture" "pos" "entries")}
        {Lisp-Entry "pos->position" method () ("entries" "pos") #f #f 175 11 175 24 ("else" "eqv?" "accepts-spaces?" "cond" "element" "c" "0" "<" "while" "decrease!" "1" "+" "and" "when" "find-entry-end" "end" "n" "let*" "get-position" "get-position~" "continuation-return" "get-end" "get-end~" "get-start" "get-start~" "between?" "if" "part" "for-each-part" "editor" "get-string-content" "get-string-content~" "string" "let" "return" "lambda" "continuation-capture" "pos" "entries")}
        {Lisp-Entry "find-entry-end" method () ("string" "n") #f #f 197 11 197 25 ("else" "increase!" "eqv?" "accepts-spaces?" "and" "cond" "element" "c" "continuation-return" ">=" "if" "while" "return" "lambda" "continuation-capture" "cardinality" "len" "let" "n" "string")}
        {Lisp-Entry "for-each-part" definition () ("entries" "proc") #f #f 210 15 210 28 ("entry" "lambda" "for-each" "proc" "entries")}
        {Lisp-Entry "view-completions" method () () #f #f 221 11 221 27 ("acquire-focus" "acquire-focus~" "locate-prefix" "locate-prefix~" "0" "set-selection" "set-selection~" "border:" "alternate-position:" "popup" "popup~" "-2" "alternate" "2" "get-height" "get-height~" "-10" "+" "pos" "text->view" "text->view~" "view" "get-row" "get-row~" "get-paragraph" "get-paragraph~" "par" "user-data:" "title:" "Image-Resource" "image:" "Tree-Node" "list" "children:" "add-row" "add-row~" "name" "lambda" "for-each" "ci<?" "sort" "sorted" "set-client" "set-client~" "set-parent" "set-parent~" "fill" "set-layout-type" "set-layout-type~" "end:" "start:" "get-selection" "get-selection~" "selected:" "self" "value-row:" "Completion-Tree" "tree" "get-content" "get-content~" "content" "vscroll?:" "tool" "style:" "250" "min" "50" "max" "150" "Dimension" "size:" "Scroller-View" "scroller" "blue:" "green:" "128" "red:" "Color" "border-color:" "solid" "border-type:" "name:" "Border-View" "new" "border" "17" "length" "*" "height" "part-domain" "domain" "end" "start" "text" "receive" "bell" "info" "get-text" "get-text~" "get-position" "get-position~" "get-end" "get-end~" "editor" "get-start" "get-start~" "get-col" "get-col~" "values" "when" "current-position" "position" "let" "not" "if" "current-part" "part" "current-entries" "entries" "let*" "find-to-complete" "define")}
        {Lisp-Entry "complete-part" method () ("start" "end" "tree") #f #f 262 11 262 24 ("insert-string" "insert-string~" "0" "Cell" "Range$Cell$" "new" "editor" "set-selection" "set-selection~" "all?:" "parent" "get-player" "get-player~" "close-popups" "close-popups~" "get-row" "get-row~" "get-user-data" "get-user-data~" "string" "bell" "not" "if" "get-single-selection" "get-single-selection~" "rank" "let" "tree" "end" "start")}
        {Lisp-Entry "determine-entries" method () ("string") #f #f 277 11 277 28 ("split" "cardinality" "length" "for-each" "entries" "let" "get-output" "get-output~" "begin" "not" "eqv?" "accepts-spaces?" "and" "if" "from" "n" "in-sequence" "c" "for" "loop" "set!" "increase!" "1" "+" "subseq" "Part" "put" "put~" "when" "lambda" "end-part" "end" "start" "0" "position" "List-Factory" "new" "parts" "let*" "offset" "rank" "determine-entry" "define" "string")}
        {Lisp-Entry "part-domain" method (protected virtual) ("position") #f #f 320 29 320 40 ("position")}
        {Lisp-Entry "select-part" method () ("part") #f #f 324 11 324 22 ("get-end" "get-end~" "get-start" "get-start~" "0" "Cell" "Range$Cell$" "new" "editor" "set-selection" "set-selection~" "part")}}
      {Lisp-Entry "Part" class () ((extends . "Object")) #f #f 333 7 333 11 ("Object")
        {Lisp-Entry "rank" slot () ((getter . "generate")) #f #f 336 8 336 12 ()}
        {Lisp-Entry "get-rank" accessor () () #f #f 336 24 336 32 ()}
        {Lisp-Entry "position" slot () ((getter . "generate")) #f #f 337 8 337 16 ()}
        {Lisp-Entry "get-position" accessor () () #f #f 337 24 337 32 ()}
        {Lisp-Entry "text" slot () ((getter . "generate")) #f #f 338 8 338 12 ()}
        {Lisp-Entry "get-text" accessor () () #f #f 338 24 338 32 ()}
        {Lisp-Entry "start" slot () ((getter . "generate")) #f #f 339 8 339 13 ()}
        {Lisp-Entry "get-start" accessor () () #f #f 339 24 339 32 ()}
        {Lisp-Entry "end" slot () ((getter . "generate")) #f #f 340 8 340 11 ()}
        {Lisp-Entry "get-end" accessor () () #f #f 340 24 340 32 ()}
        {Lisp-Entry "initialize" method (override) ("rank" "position" "text" "start" "end") #f #f 343 20 343 30 ("end~self" "start~self" "text~self" "position~self" "self" "rank~self" "set!" "nextmethod" "end" "start" "text" "position" "rank")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 352 20 352 25 ("end" "start" "text" "format" "lambda" "self" "print-unreadable" "readably" "output")}}
      {Lisp-Entry "Composite-Text-View" class () ((extends . "Value-Text-View")) #f #f 363 7 363 26 ("Value-Text-View")
        {Lisp-Entry "tab-press" method (override) ("key" "modifiers") #f #f 366 20 366 29 ("navigate-forward" "navigate-forward~" "else" "navigate-backward" "navigate-backward~" "shift-key?" "value-row" "view-completions" "view-completions~" "control-key?" "end-completion" "has-ambiguous-completion?" "cond" "modifiers" "key")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 373 20 373 36 ("Composite-Menu" "new")}
        {Lisp-Entry "on-navigate-backward" method () ("evt") #f #f 377 11 377 31 ("value-row" "navigate-backward" "navigate-backward~" "evt")}
        {Lisp-Entry "on-navigate-forward" method () ("evt") #f #f 381 11 381 30 ("value-row" "navigate-forward" "navigate-forward~" "evt")}
        {Lisp-Entry "on-view-completions" method () ("evt") #f #f 385 11 385 30 ("value-row" "view-completions" "view-completions~" "evt")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 394 20 394 33 ("nextmethod" "composite-text" "find-actions" "cons")}
        {Lisp-Entry "complete-name?" method (override) ("size") #f #f 404 20 404 34 ("1" ">=" "size")}
        {Lisp-Entry "favorite-completions" method (override) () #f #f 408 20 408 40 ()}
        {Lisp-Entry "symbol-completions" method (override) ("name") #f #f 412 20 412 38 ("complete" "complete~" "Symbol-Completer" "new" "completer" "part-domain" "part-domain~" "domain" "let" "when" "current-position" "current-position~" "position" "value-row" "current-entries" "current-entries~" "entries" "let*" "name")}}
      {Lisp-Entry "Composite-Menu" class () ((extends . "Text-Context-Menu")) #f #f 427 7 427 21 ("Text-Context-Menu")
        {Lisp-Entry "form" form () () #f #f 430 3 430 7 ("view-completions" "navigate-forward" "composite-text" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "navigate-backward" "name:" "Label-Item" "<Label-Item>" "Separator-Item" "<Separator-Item>" "install" "<install>")}}
      {Lisp-Entry "Completion-Tree" class () ((extends . "Tree-View")) #f #f 444 7 444 22 ("Tree-View")
        {Lisp-Entry "form" form () () #f #f 447 3 447 7 ("toplevel-controls?:" "200" "width:" "Tree-Node-Column" "<Tree-Node-Column>" "node" "selection-mode:" ":images" "portfolio:" "install" "<install>")}
        {Lisp-Entry "value-row" property () ((initialize . "#f") (accessors . "generate")) #f #f 452 12 452 21 ()}
        {Lisp-Entry "get-value-row" accessor () () #f #f 452 46 452 54 ()}
        {Lisp-Entry "set-value-row" accessor () () #f #f 452 46 452 54 ()}
        {Lisp-Entry "selected" property () ((initialize . "#f") (accessors . "generate")) #f #f 453 12 453 20 ()}
        {Lisp-Entry "get-selected" accessor () () #f #f 453 46 453 54 ()}
        {Lisp-Entry "set-selected" accessor () () #f #f 453 46 453 54 ()}
        {Lisp-Entry "start" property () ((initialize . "#f") (accessors . "generate")) #f #f 454 12 454 17 ()}
        {Lisp-Entry "get-start" accessor () () #f #f 454 46 454 54 ()}
        {Lisp-Entry "set-start" accessor () () #f #f 454 46 454 54 ()}
        {Lisp-Entry "end" property () ((initialize . "#f") (accessors . "generate")) #f #f 455 12 455 15 ()}
        {Lisp-Entry "get-end" accessor () () #f #f 455 46 455 54 ()}
        {Lisp-Entry "set-end" accessor () () #f #f 455 46 455 54 ()}
        {Lisp-Entry "return-press" method (override) ("key") #f #f 458 20 458 32 ("self" "end" "start" "value-row" "complete-part" "complete-part~" "key")}
        {Lisp-Entry "tab-press" method (override) ("key" "modifiers") #f #f 462 20 462 29 ("self" "end" "start" "value-row" "complete-part" "complete-part~" "modifiers" "key")}
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 466 20 466 32 ("self" "end" "start" "value-row" "complete-part" "complete-part~" "pos")}}}})
"Composite-Text-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Composite-Text-Actions.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.row.Composite-Text-Actions" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Composite-Text-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 42 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Space" ":control" "on-view-completions" "view-completions" "on-navigate-forward" "navigate-forward" "Tab" ":shift" "Shortcut" "shortcut:" "on-navigate-backward" ":focus" "Event-Handler" "action-handler:" "navigate-backward" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Containment-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Containment-Editor.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.designer.editor.Containment-Editor" module (protected) () #f #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Containment-Editor" class (undocumented) ((extends . "Layout-View")) #f #f 48 20 48 38 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 51 3 51 7 ("view" "name:" "Containment-View" "<Containment-View>" "Medium" "Color" "background:" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 56 25 56 38 ("containment-editor" "rest")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 65 25 65 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 69 25 69 35 ()}
        {Lisp-Entry "client-activate" method (override) () #f #f 73 20 73 35 ("view" "locate" "set-editor" "set-editor~" "Component-Editor" "is?" "when" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method (override) () #f #f 79 20 79 37 ("view" "locate" "set-editor" "set-editor~")}}}})
"Containment-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Containment-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.editor.Containment-View" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Containment-View" class (undocumented) ((extends . "Layout-View")) #f #f 46 20 46 36 ("Layout-View")
        {Lisp-Entry "editor" slot () ((initialize . "#f")) #f #f 49 8 49 14 ()}
        {Lisp-Entry "client" slot () ((initialize . "#f")) #f #f 50 8 50 14 ()}
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("Medium" "Color" "background:" "4" "layout-padding:" "0" "5" "2" "Rect" "layout-insets:" "flow" "layout-type:" "install" "<install>")}
        {Lisp-Entry "destroy" method (override) () #f #f 62 20 62 27 ("nextmethod" "set-editor")}
        {Lisp-Entry "get-editor" method (public) () #f #f 72 18 72 28 ("editor")}
        {Lisp-Entry "set-editor" method (public) ("edt") #f #f 76 18 76 28 ("get-selection" "get-selection~" "and" "set-client" "on-editor" "method-name:" "target:" "Event-Handler" "new" "add-editor-listener" "add-editor-listener~" "set!" "self" "remove-editor-listener" "remove-editor-listener~" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "on-editor" method (protected virtual) ("evt") #f #f 86 29 86 38 ("get-user-origin" "get-user-origin~" "get-force-parent?" "get-force-parent?~" "get-origin" "get-origin~" "get-old" "get-old~" "get-selection" "get-selection~" "selection-changed" ":selection-changed" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "selection-changed" method (protected virtual) ("selection" "old" "origin" "force-parent?" "focus?") #f #f 91 29 91 46 ("set-client" "focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "get-client" method (public) () #f #f 100 18 100 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("clt") #f #f 104 18 104 28 ("inner-widget" "inner-widget~" "map" "and" "set-client-direct" "clt")}
        {Lisp-Entry "set-client-direct" method (public) ("clt") #f #f 108 18 108 35 ("layout-view" "Image-Resource" "else" "uniform?:" "selection:" "eq?" "selected?:" ":images" "portfolio:" "get-component-image" "get-component-image~" "resource:" "self" "parent:" "Containment-Tool" "cond" "not-null?" "close-children" "set!" "equal?" "unless" "acquire-focus" "acquire-focus~" "get-parent" "set-client-direct~" "set-client-direct" "get-selection" "get-selection~" "selection" "event" "selector" "execute:" "Event-Handler" "new" "set-action-handler" "set-action-handler~" "tool" "setup-tool" "car" "1" "=" "member?" "some?" "collect-if" "selected" "selected-group" "queue-list" "get-children" "get-children~" "inner?" "inner?~" "child" "for-each" "enqueue" "collect" "new-queue" "queue" "outer" "class-of" "group" "every?" "zip" "apply" "groups" "length" "key:" "uniform" "collect-inner" "inners" "outers" "collect-groups" "outer-component" "outer-component~" "component" "lambda" "map" "get-reference" "get-reference~" "reference" "let" "editor" "and" "when" "client" "collect-outers" "define" "clt")}}
      {Lisp-Entry "Containment-Tool" class () ((extends . "Radio-Tool")) #f #f 177 7 177 23 ("Radio-Tool")
        {Lisp-Entry "selection" property () ((initialize . "#f") (accessors . "generate")) #f #f 180 12 180 21 ()}
        {Lisp-Entry "get-selection" accessor () () #f #f 180 46 180 54 ()}
        {Lisp-Entry "set-selection" accessor () () #f #f 180 46 180 54 ()}
        {Lisp-Entry "uniform?" property () ((initialize . "#f") (accessors . "generate")) #f #f 181 12 181 20 ()}
        {Lisp-Entry "get-uniform?" accessor () () #f #f 181 46 181 54 ()}
        {Lisp-Entry "set-uniform?" accessor () () #f #f 181 46 181 54 ()}
        {Lisp-Entry "form" form () () #f #f 184 3 184 7 ("tooltip?:" "install" "<install>")}
        {Lisp-Entry "get-formatted-tooltip?" method (override) () #f #f 188 20 188 42 ()}
        {Lisp-Entry "get-tooltip-context" method (override) ("pos") #f #f 192 20 192 39 ("length" "get-name" "get-name~" "map" "uniform" "class-of" "category-name" "format" "uniform?" "if" "text:" "self" "view:" "Tooltip-Context" "new" "selection" "car" "any" "let" "pos")}}}})
"Custom-Card"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "card" "Custom-Card.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.designer.card.Custom-Card" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Custom-Card" class (undocumented) ((extends . "Card")) #f #f 43 20 43 31 ("Card")
        {Lisp-Entry "setup?" slot () ((initialize . "#f")) #f #f 46 8 46 14 ()}
        {Lisp-Entry "setup-properties" method () () #f #f 54 11 54 27 ("set!" "layout-view" "layout-view~" "client" "setup-entry" "setup-entry~" "domain" "property" "view" "lambda" "for-each-property-view" "setup?" "unless")}
        {Lisp-Entry "update-properties" method () () #f #f 63 11 63 28 ("set-property-value" "set-property-value~" "client" "read-property" "value" "let" "domain" "property" "view" "lambda" "for-each-property-view")}
        {Lisp-Entry "for-each-property-view" method () ("proc") #f #f 70 11 70 33 ("property-domain" "property-domain~" "domain" "get-property" "get-property~" "client" "class-of" "category-field" "property" "let*" "Property-View" "is?" "when" "level" "view" "lambda" "for-each-descendant" "proc")}
        {Lisp-Entry "find-property-view" method (public) ("property") #f #f 79 18 79 36 ("continuation-return" "get-property" "get-property~" "eq?" "Property-View" "is?" "and" "when" "level" "component" "for-each-descendant" "return" "lambda" "continuation-capture" "property")}
        {Lisp-Entry "client-update" method (override) () #f #f 94 20 94 33 ("get-properties-mapping" "property-update" "read-property" "value" "locate" "view" "let" "type" "name" "property" "bind" "mapping" "lambda" "for-each" "update-properties" "setup-properties" "client" "when")}
        {Lisp-Entry "property-update" method (protected virtual) ("view" "value" "type") #f #f 106 29 106 44 ("error" "else" "set-color" "set-color~" "color" "seconds?:" "present" "present~" "not" "if" "date" "set-checked?" "set-checked?~" "boolean" "set-content" "set-content~" "text" "or" "set-string-content" "set-string-content~" "string" "case" "type" "value" "view")}
        {Lisp-Entry "save-client" method (public virtual) () #f #f 116 26 116 37 ("get-properties-mapping" "set!" "save-property" "locate" "type" "name" "bind" "mapping" "for-each" "modified?" "save-properties" "set-property-modified?" "set-property-modified?~" "set-property" "set-property~" "designer" "set-name" "set-name~" "name-info" "field-name" "eq?" "if" "get-property-value" "get-property-value~" "value" "let" "get-property-modified?" "get-property-modified?~" "domain" "property" "view" "lambda" "for-each-property-view" "client" "when" "save-properties-new" "define")}
        {Lisp-Entry "save-property" method (protected virtual) ("view" "property" "type") #f #f 142 29 142 42 ("error" "else" "get-color" "get-color~" "color" "Date" "parse-string" "parse-string~" "empty-string?" "if" "content" "let" "date" "get-checked?" "get-checked?~" "boolean" "get-content" "get-content~" "text" "set-modified?" "set-modified?~" "design-events?:" "get-string-content" "get-string-content~" "client" "designer" "set-property" "set-property~" "get-modified?" "get-modified?~" "when" "string" "case" "type" "property" "view")}
        {Lisp-Entry "get-properties-mapping" method (protected virtual) () #f #f 176 29 176 51 ()}
        {Lisp-Entry "property-change" method (override) ("component" "property" "value") #f #f 185 20 185 35 ("client-update" "value" "property" "component")}}}})
"Descendants-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Descendants-Editor.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.designer.editor.Descendants-Editor" module (protected) () #f #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Descendants-Editor" class (undocumented) ((extends . "Layout-View")) #f #f 47 20 47 38 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("183" "width:" "descendant" "tree" "Descendants-Tree" "<Descendants-Tree>" "header" "Tree-Header" "<Tree-Header>" "content" "!" "<!>" "vscroll?:" "hscroll?:" "document" "style:" "scroller" "Scroller-View" "<Scroller-View>" "none" "border-type:" "border" "Border-View" "<Border-View>" "on-new-default" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "new-default" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 64 25 64 38 ("descendants-editor" "rest")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 73 25 73 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 77 25 77 35 ()}
        {Lisp-Entry "client-activate" method (override) () #f #f 81 20 81 35 ("else" "get-client" "get-client~" "set-client" "get-designer" "get-designer~" "set-designer" "set-editor" "Component-Editor" "is?" "cond" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method (override) () #f #f 93 20 93 37 ("set-editor" "set-designer" "set-client")}
        {Lisp-Entry "focus-default" method (override) () #f #f 104 20 104 33 ("auto-select-first" "auto-select-first~" "acquire-focus" "acquire-focus~" "locate" "tree" "let")}
        {Lisp-Entry "get-tools-view" method (override) () #f #f 110 20 110 34 ("tools" "locate")}
        {Lisp-Entry "install-in-host" method (override) ("host") #f #f 119 20 119 35 ("header" "set-shown?" "set-shown?~" "scroller" "locate" "set-flat?" "set-flat?~" "Docked-Host" "is?" "when" "2" "0" "Rect" "set-layout-insets" "set-layout-insets~" "fill" "get-root" "get-root~" "set-layout-type" "set-layout-type~" "nextmethod" "host")}
        {Lisp-Entry "get-tree" method (public) () #f #f 136 18 136 26 ("tree" "locate")}
        {Lisp-Entry "on-new-default" method () ("evt") #f #f 145 11 145 25 ("new-default" "evt")}
        {Lisp-Entry "new-default" method (protected virtual) () #f #f 154 29 154 40 ("bell")}
        {Lisp-Entry "add-default" method () ("class") #f #f 158 11 158 22 ("parent:" "add-component-class" "add-component-class~" "get-client" "get-client~" "parent" "get-tree" "tree" "let*" "class")}
        {Lisp-Entry "get-editor" method (public) () #f #f 169 18 169 28 ("get-tree" "get-editor" "get-editor~")}
        {Lisp-Entry "set-editor" method (public) ("editor") #f #f 173 18 173 28 ("get-tree" "set-editor" "set-editor~" "editor")}
        {Lisp-Entry "get-client" method (public) () #f #f 182 18 182 28 ("get-tree" "get-client" "get-client~")}
        {Lisp-Entry "set-client" method (public) ("client") #f #f 186 18 186 28 ("get-tree" "set-client" "set-client~" "client")}
        {Lisp-Entry "get-designer" method (public) () #f #f 195 18 195 30 ("get-tree" "get-designer" "get-designer~")}
        {Lisp-Entry "set-designer" method (public) ("designer") #f #f 199 18 199 30 ("get-tree" "set-designer" "set-designer~" "designer")}}}})
"Descendants-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Descendants-Manager.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.designer.editor.Descendants-Manager" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.jml" "jazz.designer")}
      {Lisp-Entry "Descendants-Manager" class (undocumented) ((extends . "Descendants-Editor")) #f #f 44 20 44 39 ("Descendants-Editor")
        {Lisp-Entry "form" form () () #f #f 47 3 47 7 ("shown?:" "header" "content" "scroller" "border" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "form-model" method (override) ("form") #f #f 55 20 55 30 ("nextmethod" "else" "Descendants-Manager-Tree" "tree" "get-name" "get-name~" "case" "form")}}}})
"Descendants-Manager-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Descendants-Manager-Tree.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.designer.editor.Descendants-Manager-Tree" module (protected) () #f #f 37 18 37 63 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system.access" "jazz.library.component" "jazz.library" "jazz.graphic" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "Descendants-Manager-Tree" class (undocumented) ((extends . "Descendants-Tree")) #f #f 50 20 50 44 ("weak-keys:" "eq?" "test:" "make-table" "Descendants-Tree")
        {Lisp-Entry "preserved-states" slot () ((initialize . "(make-table test: eq? weak-keys: #t)")) #f #f 53 8 53 24 ()}
        {Lisp-Entry "categorized-addable-classes" method (override) ("component") #f #f 61 20 61 47 ("nextmethod" "component-categorized-toolbox-addable-classes" "or" "component")}
        {Lisp-Entry "refresh-colors" method () ("component") #f #f 71 11 71 25 ("designer" "get-reference" "get-reference~" "component-ancestry" "refresh-component" "for-each" "get-color" "get-color~" "not" "or" "unless" "0" "get-child" "get-child~" "and" "data" "component-row" "row" "let*" "component")}
        {Lisp-Entry "on-designer" method (override) ("evt") #f #f 78 20 78 31 ("nextmethod" "component:" "get-property" "get-property~" "refresh-colors" ":property-change" "get-kind" "get-kind~" "eq?" "if" "evt")}
        {Lisp-Entry "on-set-default-traits" method () ("evt") #f #f 89 11 89 32 ("remove-duplicates" "imports:" "designer" "set-default-traits" "set-default-traits~" "initialize:" "application-select?:" "Traits-Dialog" "get-modal" "imports" "locators" "bind" "cdr" "car" "new" "locator" "make-reference" "get-parameters" "get-parameters~" "get-symbol" "get-symbol~" "cons" "reference" "designer-error" "get-reference-import" "make-locator" "map" "setup-traits" "setup-traits~" "Trait-Reference" "is?" "obj" "lambda" "every?" "if" "when" "get-default-traits" "get-default-traits~" "references" "let" "on-synchronize" "on-synchronize~" "selected-component" "class-of" "get-application" "make-traits-toolbox" "make-traits-toolbox~" "set-client" "set-client~" "manager" "host" "initialize" "define" "evt")}
        {Lisp-Entry "focus-update-actions" method (override) () #f #f 114 20 114 40 ("set-default-traits" "open" "components-tree" "Action" "set-action-enabled?" "Component" "get-single-selected-data" "is?" "when" "nextmethod")}
        {Lisp-Entry "client-update" method (override) () #f #f 126 20 126 33 ("get-selection" "get-selection~" "selected-components:" "client" "preserved-states" "table-ref" "expand-state:" "update" "editor" "when")}
        {Lisp-Entry "preserve-state" method (override) ("client") #f #f 136 20 136 34 ("get-expand-state" "preserved-states" "table-set!" "client")}
        {Lisp-Entry "owned-color" method () () #f #f 145 11 145 22 ("Dark-Green" "Color")}
        {Lisp-Entry "modify-color" method () () #f #f 149 11 149 23 ("139" "blue:" "127" "green:" "1" "red:" "Color")}
        {Lisp-Entry "unowned-color" method () () #f #f 153 11 153 24 ("Dark-Gray" "Color")}
        {Lisp-Entry "component-font" method (override) ("component" "owned-form") #f #f 157 20 157 34 ("traverse" "Label-Bold" "Font" "modify" "create" "ownership-level" "case" "if" "owned-form" "component")}
        {Lisp-Entry "component-color" method (override) ("component" "owned-form") #f #f 165 20 165 35 ("unowned-color" "traverse" "modify-color" "modify" "owned-color" "create" "ownership-level" "case" "if" "owned-form" "component")}
        {Lisp-Entry "component-state" method (override) ("component") #f #f 174 20 174 35 ("collapsed" "component")}
        {Lisp-Entry "insert-component" method (override) ("row" "component" "rights" "update?" "level" "(image: image #f)" "(state: state #f)") #f #f 178 20 178 36 ("ensure-expanded" "component-owned" "when" "nextmethod" "subrow" "let" "state" "state:" "image" "image:" "level" "update?" "rights" "component" "row")}}}})
"Descendants-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Descendants-Tree.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.designer.editor.Descendants-Tree" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.system" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer.menu" "jazz.designer")}
      {Lisp-Entry "Descendants-Tree" class (undocumented) ((extends . "Components-Tree")) #f #f 50 20 50 36 ("explicit" "Components-Tree")
        {Lisp-Entry "group?" property () ((initialize . "#f") (accessors . "generate")) #f #f 53 12 53 18 ()}
        {Lisp-Entry "get-group?" accessor () () #f #f 53 54 53 62 ()}
        {Lisp-Entry "set-group?" accessor () () #f #f 53 54 53 62 ()}
        {Lisp-Entry "editable?" property () ((initialize . "#f") (accessors . "generate")) #f #f 54 12 54 21 ()}
        {Lisp-Entry "get-editable?" accessor () () #f #f 54 54 54 62 ()}
        {Lisp-Entry "set-editable?" accessor () () #f #f 54 54 54 62 ()}
        {Lisp-Entry "highlight-edited?" property () ((initialize . "#t") (accessors . "generate")) #f #f 55 12 55 29 ()}
        {Lisp-Entry "get-highlight-edited?" accessor () () #f #f 55 54 55 62 ()}
        {Lisp-Entry "set-highlight-edited?" accessor () () #f #f 55 54 55 62 ()}
        {Lisp-Entry "show-traits?" property () ((initialize . "#f") (accessors . "explicit")) #f #f 56 12 56 24 ()}
        {Lisp-Entry "form" form () () #f #f 59 3 59 7 ("187" "width:" "title:" "descendant" "name:" "Component-Column" "<Component-Column>" "on-selection-change" ":form" "Event-Handler" "selection-handler:" "multiple-selection?:" ":images" "portfolio:" "reorderable?:" "draggable?:" "install" "<install>")}
        {Lisp-Entry "get-show-traits?" method (public) () #f #f 69 18 69 34 ("show-traits?")}
        {Lisp-Entry "set-show-traits?" method (public) ("value") #f #f 73 18 73 34 ("preserving-update" "show-traits?" "set!" "value")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 83 20 83 30 ("editor" "edit-component" "edit-component~" "bell" "not" "if" "selected-component" "component" "let" "editable?" "alt-down?" "and" "when" "nextmethod" "pos")}
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 92 20 92 32 ("editor" "edit-component" "edit-component~" "bell" "selected-component" "component" "let" "nextmethod" "editable?" "highlight-edited?" "not" "or" "if" "pos")}
        {Lisp-Entry "branch-changed" method (override) () #f #f 106 20 106 34 ("preserving-update")}
        {Lisp-Entry "selection-changed" method (override) ("selection" "old" "origin" "force-parent?" "focus?") #f #f 110 20 110 37 ("generate-event?:" "row->line" "set-selection" "ensure-expanded" "for-each" "component-row" "remove-false" "rows" "let" "Details-Tree" "self" "eq?" "not" "group?" "or" "unless" "find-ascendant" "find-ascendant~" "Group" "is?" "if" "component" "lambda" "map" "groupify-selection" "define" "focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "update" method (override) ("(expand-state: expand-state (get-expand-state))" "(selected-components: selected-components '())") #f #f 129 20 129 26 ("update-selection" "get-rights" "insert-toplevel" "client" "when" "lambda" "with-update-locked" "remove-every-row" "selected-components" "selected-components:" "get-expand-state" "expand-state" "expand-state:")}
        {Lisp-Entry "insert-toplevel" method (protected virtual) ("rights") #f #f 138 29 138 44 ("0" "client" "insert-component" "rights")}
        {Lisp-Entry "insert-component?" method (protected virtual) ("component" "level") #f #f 142 29 142 46 ("level" "component")}
        {Lisp-Entry "insert-component" method (protected virtual) ("row" "component" "rights" "update?" "level" "(image: image #f)" "(state: state #f)") #f #f 146 29 146 45 ("insert-components" "user-data:" "color:" "font:" "title:" "Component-Node" "new" "list" "children:" "father:" "add-row" "subrow" "row-state" "collapsed" "null?" "if" "component-state" "component-image" "or" "component-color" "color" "component-font" "font" "component-owned" "owned" "component-presentation" "title" "get-components" "get-components~" "components" "let*" "insert-component?" "when" "state" "state:" "image" "image:" "level" "update?" "rights" "component" "row")}
        {Lisp-Entry "insert-components" method (protected virtual) ("row" "component" "rights" "update?" "level") #f #f 160 29 160 46 ("get-components" "get-components~" "insert-component-list" "level" "update?" "rights" "component" "row")}
        {Lisp-Entry "insert-component-list" method (protected virtual) ("row" "component" "components" "rights" "update?" "level") #f #f 164 29 164 50 ("smaller" "sort-predicate" "sort-components" "sort-components~" "sort-components?" "sort-components?~" "if" "1" "+" "and" "insert-component" "access-rights" "child-rights" "access-granted?" "receive" "child" "for-each" "Trait" "is-not?" "show-traits?" "not" "Group" "is?" "lambda" "collect-if" "set!" "group?" "when" "level" "update?" "rights" "components" "component" "row")}
        {Lisp-Entry "row-state" method (protected virtual) ("component" "update?" "level") #f #f 178 29 178 38 ("collapsed" "expanded" "if" "level" "update?" "component")}
        {Lisp-Entry "refresh-component" method () ("component") #f #f 189 11 189 28 ("invalidate-cell" "set-title" "set-title~" "set-color" "set-color~" "set-font" "set-font~" "get-presentation-property" "get-presentation-property~" "title" "component-color" "color" "component-font" "font" "component-owned" "owned" "get-cell-data" "data" "0" "Cell" "new" "cell" "let" "when" "row->line" "line" "component-row" "row" "let*" "component")}
        {Lisp-Entry "refresh-descendants" method () ("component") #f #f 206 11 206 30 ("expand" "expanded" "eq?" "insert-components" "remove-every-son" "remove-every-son~" "1" "get-level" "get-level~" "+" "level" "get-state" "get-state~" "state" "lambda" "with-update-locked" "when" "component-row" "row" "let" "component")}
        {Lisp-Entry "get-rights" method () () #f #f 224 11 224 21 ("get-rights" "get-rights~" "editor" "and")}
        {Lisp-Entry "access-rights" definition () ("rights" "child") #f #f 230 15 230 28 ("can-access?" "can-access?~" "find-child-rights" "find-child-rights~" "child-rights" "let" "values" "not" "if" "child" "rights")}
        {Lisp-Entry "highlight-component" method (public) ("component") #f #f 244 18 244 37 ("set-component-highlighted?" "component")}
        {Lisp-Entry "unhighlight-component" method (public) ("component") #f #f 248 18 248 39 ("set-component-highlighted?" "component")}
        {Lisp-Entry "highlight-edited" method (override) ("component") #f #f 252 20 252 36 ("set-component-highlighted?" "highlight-edited?" "when" "component")}
        {Lisp-Entry "unhighlight-edited" method (override) ("component") #f #f 257 20 257 38 ("set-component-highlighted?" "highlight-edited?" "when" "component")}
        {Lisp-Entry "set-component-highlighted?" method () ("component" "flag") #f #f 262 11 262 37 ("invalidate-cell" "Cell" "new" "cell" "get-columns-count" ">" "and" "row->line" "line" "0" "get-child" "get-child~" "set-highlighted?" "set-highlighted?~" "when" "component-row" "row" "let" "flag" "component")}
        {Lisp-Entry "get-draggable?" method (override) () #f #f 277 20 277 34 ("can-relocate-component?" "can-relocate-component?~" "Component" "is?" "and" "selected-component" "component" "let")}
        {Lisp-Entry "get-row-reorder-target" method (override) ("drag-drop" "row" "quarter") #f #f 287 20 287 42 ("nextmethod" "client-owned?" "every?" "and" "selection->rows" "get-user-data" "get-user-data~" "map" "components" "get-source" "get-source~" "get-view" "get-view~" "get-selection" "get-selection~" "selection" "let*" "quarter" "row" "drag-drop")}
        {Lisp-Entry "client-owned?" method () ("component") #f #f 299 11 299 24 ("designer" "get-form" "get-form~" "component-owned?" "client" "and" "component")}
        {Lisp-Entry "component-owned" method () ("component") #f #f 303 11 303 26 ("designer" "get-form" "get-form~" "component-owned-form" "client" "and" "component")}
        {Lisp-Entry "on-designer" method (override) ("evt") #f #f 307 20 307 31 ("all" "refresh-descendants" "descendants" "refresh-component" "what:" "component" "let" ":refresh" "send-before-target" ":send-before" "target:" "child-relocate" ":child-relocate" "child-remove" ":child-remove" "descendant?:" "parent:" "child:" "child-add" ":child-add" "presentation:" "component:" "get-property" "get-property~" "presentation-change" ":presentation-change" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "presentation-change" method () ("component" "presentation") #f #f 324 11 324 30 ("invalidate-cell" "0" "Cell" "new" "cell" "set-title" "set-title~" "first-child" "first-child~" "node" "row->line" "line" "when" "find-row" "row" "let" "Trait" "is?" "show-traits?" "not" "Group" "is-not?" "group?" "and" "or" "unless" "presentation" "component")}
        {Lisp-Entry "child-add" method () ("child" "parent" "descendant?") #f #f 338 11 338 20 ("expand" "reorder-component" "state:" "insert-component" "lambda" "with-update-locked" "collapsed" "expanded" "if" "state" "get-level" "get-level~" "level" "when" "parent-relocation" "find-row" "row" "let" "Trait" "is?" "show-traits?" "not" "Group" "is-not?" "group?" "and" "or" "unless" "descendant?" "parent" "child")}
        {Lisp-Entry "child-remove" method () ("child") #f #f 353 11 353 23 ("remove-row" "lambda" "with-update-locked" "when" "find-row" "row" "let" "Trait" "is?" "show-traits?" "not" "Group" "is-not?" "group?" "and" "or" "unless" "child")}
        {Lisp-Entry "child-relocate" method () ("child" "parent" "destination") #f #f 363 11 363 25 ("relocate-component-row" "lambda" "with-update-locked" "parent-relocation" "destination-row" "find-row" "child-row" "let" "destination" "parent" "child")}
        {Lisp-Entry "send-before-target" method () ("child" "parent" "target") #f #f 371 11 371 29 ("find-component-insertion" "position:" "relocate-component-row" "lambda" "with-update-locked" "parent-relocation" "parent-row" "find-row" "child-row" "let" "target" "parent" "child")}}
      {Lisp-Entry "Component-Column" class () ((extends . "Tree-Node-Column")) #f #f 386 7 386 23 ("Dark-Red" "Color" "Tree-Node-Column")
        {Lisp-Entry "highlight-color" property () ((initialize . "{Color Dark-Red}") (accessors . "generate")) #f #f 389 12 389 27 ()}
        {Lisp-Entry "get-highlight-color" accessor () () #f #f 389 66 389 74 ()}
        {Lisp-Entry "set-highlight-color" accessor () () #f #f 389 66 389 74 ()}
        {Lisp-Entry "draw-data" method (override) ("surface" "context" "row" "data" "width" "height") #f #f 392 20 392 29 ("highlight-color" "text-rect" "frame-rect" "frame-rect~" "get-highlighted?" "get-highlighted?~" "Component-Node" "is?" "and" "when" "nextmethod" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Component-Node" class () ((extends . "Tree-Node")) #f #f 403 7 403 21 ("Tree-Node")
        {Lisp-Entry "highlighted?" slot (protected) ((initialize . "#f") (accessors . "generate")) #f #f 406 18 406 30 ()}
        {Lisp-Entry "get-highlighted?" accessor () () #f #f 406 55 406 63 ()}
        {Lisp-Entry "set-highlighted?" accessor () () #f #f 406 55 406 63 ()}}}})
"Designer"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "designer" "Designer.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.designer.designer.Designer" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.dialog" "jazz.ui.clipboard" "jazz.ui" "jazz.system" "jazz.runtime" "jazz.platform" "jazz.library.listener" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.io" "jazz.editor.jazz" "jazz.designer.view" "jazz.designer" "jazz.debuggee")}
      {Lisp-Entry "Designer" class () ((extends . "Object")) #f #f 58 7 58 15 ("Object")
        {Lisp-Entry "form" slot () ((initialize . "#f") (accessors . "generate")) #f #f 61 8 61 12 ()}
        {Lisp-Entry "get-form" accessor () () #f #f 61 42 61 50 ()}
        {Lisp-Entry "set-form" accessor () () #f #f 61 42 61 50 ()}
        {Lisp-Entry "form-copy" slot () ((initialize . "#f") (accessors . "generate")) #f #f 62 8 62 17 ()}
        {Lisp-Entry "get-form-copy" accessor () () #f #f 62 42 62 50 ()}
        {Lisp-Entry "set-form-copy" accessor () () #f #f 62 42 62 50 ()}
        {Lisp-Entry "reference" slot () ((initialize . "#f") (getter . "generate")) #f #f 63 8 63 17 ()}
        {Lisp-Entry "get-reference" accessor () () #f #f 63 39 63 47 ()}
        {Lisp-Entry "listeners" slot () ((initialize . "'()")) #f #f 64 8 64 17 ()}
        {Lisp-Entry "modified?" slot () ((initialize . "#f") (accessors . "generate")) #f #f 65 8 65 17 ()}
        {Lisp-Entry "get-modified?" accessor () () #f #f 65 42 65 50 ()}
        {Lisp-Entry "set-modified?" accessor () () #f #f 65 42 65 50 ()}
        {Lisp-Entry "undoer" slot () ((initialize . "#f") (getter . "generate")) #f #f 66 8 66 14 ()}
        {Lisp-Entry "get-undoer" accessor () () #f #f 66 39 66 47 ()}
        {Lisp-Entry "initialize" method (override) ("(form: form #f)" "(reference: reference #f)") #f #f 74 20 74 30 ("reference~self" "nextmethod" "reset-modified?" "reset-modified:" "Undoer" "undoer" "setup-undoer" "first-child" "first-child~" "get-children" "get-children~" "for-each" "get-property" "get-property~" "client-form:" "set-property" "set-property~" "setup-client-forms" "copy-object" "copy-object~" "form-copy" "setup-trait-form" "designing-trait?" "setup-class-form" "class?" "cond" "get-origin" "get-origin~" "origin" "let" "jazz" "Data" "set-data" "set-data~" "set-context" "set-context~" "install" "action:" "class-of" "origin:" "textual?:" "Form" "new" "self" "form~self" "set!" "begin" "not" "if" "frm" "setup-form" "define" "reference" "reference:" "form" "form:")}
        {Lisp-Entry "revert" method (public) () #f #f 125 18 125 24 ("revert-trait" "designing-trait?" "form-copy" "set-class-form" "set-class-form~" "class?" "cond" "form" "get-origin" "get-origin~" "origin" "let")}
        {Lisp-Entry "revert-trait" method (public) ("reference") #f #f 134 18 134 30 ("form-copy" "first-child" "first-child~" "resolve-runtime-reference" "let" "get-children" "get-children~" "remove-child" "remove-child~" "if" "find-child" "find-child~" "child-form" "get-name" "get-name~" "name" "let*" "child" "lambda" "for-each" "client-form:" "get-property" "get-property~" "set-client-form" "set-client-form~" "set-form" "set-form~" "form" "trait" "revert-form" "define" "reference")}
        {Lisp-Entry "save" method (public virtual) ("(default-extension: default-extension #f)" "(extensions: extensions '())") #f #f 155 26 155 30 ("save-content" "save-as" "not" "if" "form" "get-origin" "get-origin~" "origin" "let" "lambda" ":wait" "with-cursor" "extensions" "extensions:" "default-extension" "default-extension:")}
        {Lisp-Entry "save-to" method (public) ("file") #f #f 164 18 164 25 ("set-modified?" "save-to-file" "form" "set-origin" "set-origin~" "save-as" "not" "if" "file")}
        {Lisp-Entry "Default-Extension" definition () () #f #f 172 14 172 31 ()}
        {Lisp-Entry "Default-Extensions" definition () () #f #f 175 14 175 32 ()}
        {Lisp-Entry "save-as" method () ("(default-extension: default-extension #f)" "(extensions: extensions '())") #f #f 179 11 179 18 ("save-content" "choose-new-destination" "Default-Extensions" "Default-Extension" "or" "choose-new-file" "null?" "if" "destination" "get-toolbox-managers" "toolbox-managers" "let*" "extensions" "extensions:" "default-extension" "default-extension:")}
        {Lisp-Entry "choose-new-destination" method () ("toolbox-managers") #f #f 187 11 187 33 ("insert-imports" "imports-to-insert" "find-unit-source" "call-with-saved-text" "form" "with-safe-design" "bind" "File" "is?" "modules:" "Save-Chooser" "get-modal" "result" "get-module-names" "get-module-names~" "map" "test:" "union" "apply" "modules" "insert-string" "insert-string~" "format" "get-end" "get-end~" "set-caret" "set-caret~" "forward-expr" "forward-expr~" "forward-namespace" "forward-namespace~" "get-model" "get-model~" "Jazz-Explorer" "new" "explorer" "text" "insert-class" "module-ref" ",super-class-name" "extends" ",class-name" "class" "eval" ",@imports" "import" "evaluate-in-unit" "imports" "super-class-name" "evaluate-class" "require-module" "exc" "validate-module-name" "designer-error" "eq?" "not-found:" "module-get" "ref" "list" "not-found" "let*" "if" "class-name" "module-name" "validate-class-name" "car" "symbol?" "length" "1" "=" "and" "read-string-content" "err" "lambda" "with-exception-catcher" "content" "let" "class-string" "parse-class-name" "define" "toolbox-managers")}
        {Lisp-Entry "super-class-name" method () ("form") #f #f 248 11 248 27 ("get-origin" "get-origin~" "class-ascendant" "category-name" "get-model" "get-model~" "or" "form")}
        {Lisp-Entry "imports-to-insert" method () ("form" "super-class-name" "module-name") #f #f 253 11 253 28 ("remove" "Class" "is?" "form-imports" "list" "get-application" "default-designer-imports" "default-designer-imports~" "append" "remove-duplicates" "modules" "let*" "second" "origin-import" "module-private" "first" "if" "eval" ",super-class-name" "reference" "evaluate-in-unit" "serialize-runtime-reference" "ser" "let" "get-origin" "get-origin~" "get-name" "get-name~" "split-locator" "_" "unit" "receive" "get-action" "get-action~" "install" "eq?" "and" "super-class-import" "define" "module-name" "super-class-name" "form")}
        {Lisp-Entry "save-content" method () ("destination") #f #f 270 11 270 23 ("set-modified?" "error" "else" "save-to-reference" "Runtime-Reference" "save-to-class" "Class" "save-to-file" "File" "typecase" "destination")}
        {Lisp-Entry "origin-import" method () ("form") #f #f 280 11 280 24 ("get-unit" "get-unit~" "if" "get-model" "get-model~" "key:" "car" "find-in" "toolbox-model" "get-name" "get-name~" "split-locator" "models" "module" "receive" "get-toolbox-managers" "get-toolbox-models" "get-toolbox-models~" "map" "union" "apply" "toolbox-models" "Class" "is?" "and" "get-origin" "get-origin~" "origin" "let" "form")}
        {Lisp-Entry "designing-trait?" method (public) () #f #f 292 18 292 34 ("Trait" "resolve-runtime-reference" "obj" "Runtime-Reference" "is?" "and" "form" "get-origin" "get-origin~" "origin" "let")}
        {Lisp-Entry "save-to-trait" method () ("unit" "symbol") #f #f 299 11 299 24 ("tabulate" "tabulate~" "include-form?:" "2" "form->string" "format" "insert-string" "insert-string~" "insert-imports" "lambda" "find-unit-source" "call-with-saved-text" "class-sym" "get-children" "get-children~" "first" "trait-form" "form" "imports-to-insert" "imports" "get-range" "get-range~" "set-selection" "set-selection~" "toplevel-location:" "list" "forward-location" "forward-location~" "get-model" "get-model~" "Jazz-Explorer" "new" "explorer" "let" "text" "select-trait" "define" "symbol" "unit")}
        {Lisp-Entry "save-to-reference" method () ("reference") #f #f 317 11 317 28 ("error" "else" "save-to-trait" "Trait" "module-ref" "typecase" "serialize-runtime-reference" "symbol" "unit" "_" "bind" "reference")}
        {Lisp-Entry "save-to-class" method () ("class") #f #f 326 11 326 24 ("reference" "is?" "find-unit-source" "call-with-saved-text" ",form-expr" ",super-class-name" "extends" ",class-name" ",@imports" "import" "evaluate-in-unit" "form->node" "->jml" "->jml~" "->string" "read-string-element" "lambda" "with-jazz-readtable" "eval" "walk-for" "parameterize" "form-expr" "class-ascendant" "super-class-name" "format" "insert-string" "insert-string~" "2" "form->string" "str" ":new-form" "if" "where" "tabulate" "tabulate~" "get-range" "get-range~" "set-selection" "set-selection~" ":form" "list" "forward-location" "forward-location~" "get-model" "get-model~" "Jazz-Explorer" "explorer" "revert" "when" "get-origin" "get-origin~" "origin" "get-children" "get-children~" "children:" "get-properties" "get-properties~" "properties:" "install" "action:" "textual?:" "Form" "new" "adjusted-form" "save-to-new-class" "evaluate-form" "unless" "tabulate-form" "save-form" "insert-imports" "imports-to-insert" "imports" "get-class-form" "get-class-form~" "form" "eq?" "form-exists?" "text" "save-to-existing-class" "define" "category-unit" "module-name" "category-name" "class-name" "let" "class")}
        {Lisp-Entry "save-to-file" method () ("file") #f #f 384 11 384 23 ("revert" "1" "print-file-form" "cdr" "import" "for-each" "car" "not-null?" "when" "imports-to-insert" "get-imports" "get-imports~" "imports" "jazz" "get-dialect" "get-dialect~" "get-model" "get-model~" "output-header" "origin" "get-data" "get-data~" "data" "output" "lambda" "UTF-8" "char-encoding:" "path-settings" "call-with-output-file" "format" "message-box" "read-only?" "read-only?~" "exists?" "exists?~" "and" "super-class-name" "set-model" "set-model~" "new" "set-action" "set-action~" "copy-object" "copy-object~" "adjusted-form" "let" "Class" "get-origin" "get-origin~" "is?" "if" "form" "adjust-form" "define" "file")}
        {Lisp-Entry "saved-form" method (public) ("." "rest") #f #f 419 18 419 28 ("form" "form->string" "apply" "rest")}
        {Lisp-Entry "print-to" method (public) ("." "rest") #f #f 423 18 423 26 ("form" "print-file-form" "apply" "rest")}
        {Lisp-Entry "reset-modified?" method () () #f #f 427 11 427 26 ("set-modified?")}
        {Lisp-Entry "set-default-traits" method (public virtual) ("component" "traits-references" "(trait: trait #t)" "(design-events?: design-events? #t)" "(undoable?: undoable? #t)" "(imports: imports #f)") #f #f 436 26 436 44 ("set-modified?" "all" "fire-refresh" "default-traits:" "set-property" "set-property~" "set-default-traits" "set-default-traits~" "form" "setup-context" "setup-context~" "ref" "lambda" "for-each" "add-import" "when" "get-presentation-property" "get-presentation-property~" "designer-error" "reference" "neq?" "if" "find-owner" "owner" "let*" "imports" "imports:" "undoable?" "undoable?:" "design-events?" "design-events?:" "trait" "trait:" "traits-references" "component")}
        {Lisp-Entry "set-name" method (public virtual) ("component" "name" "(trait: trait #t)" "(design-events?: design-events? #t)" "(undoable?: undoable? #t)") #f #f 452 26 452 34 ("set-modified?" "fire-property-change" "name-info" "class-of" "property-field" "property" "fire-presentation-change" "presentation" "fire-name-change" "set-name" "set-name~" "install" "get-action" "get-action~" "owned-form" "component-form" "component-ancestry" "ancestry" "when" "get-client-form" "get-client-form~" "lambda" "for-each-trait" "for-each-trait~" "old-presentation" "get-name" "get-name~" "old-name" "find-form" "form" "let" "get-presentation-property" "get-presentation-property~" "designer-error" "neq?" "and" "get-trait" "get-trait~" "Branch" "is?" "if" "effective-cpn" "reference" "or" "effective" "find-owner" "owner" "target-branch" "branch" "let*" "undoable?" "undoable?:" "design-events?" "design-events?:" "trait" "trait:" "name" "component")}
        {Lisp-Entry "set-property" method (public virtual) ("component/path" "property" "value" "(old-value: old-value #f)" "(trait: trait #t)" "(design-events?: design-events? #t)" "(undoable?: undoable? #t)" "(import: import #f)") #f #f 481 26 481 38 ("set-modified?" "get-property" "get-property~" "fire-property-change" "fire-presentation-change" "presentation" "write-property" "get-presentation-property" "get-presentation-property~" "old-presentation" "presentation-property?" "presentation-property?~" "fire-presentation?" "get-form" "setup-context" "setup-context~" "Reference" "add-import" "remove-property" "lambda" "undoer" "register-undo" "register-undo~" "has-property?" "has-property?~" "remove?" "read-property" "find-next-branch" "next-restore" "next-form" "restore?:" "find-form" "restore" "receive" "designer-error" "neq?" "get-creator-branch" "get-creator-branch~" "creator-branch" "when" "assert" "class-of" "property-field" "reference" "follow-component" "follow-component~" "component" "let*" "set-property~" "get-trait" "get-trait~" "get-client-form" "get-client-form~" "follow-form" "follow-form~" "form" "and" "Path" "path?" "Branch" "is?" "not" "or" "installed?" "set-property" "eq?" "if" "target-branch" "branch" "let" "import" "import:" "undoable?" "undoable?:" "design-events?" "design-events?:" "trait" "trait:" "old-value" "old-value:" "value" "property" "component/path")}
        {Lisp-Entry "remove-property" method (public virtual) ("component/path" "property" "default-value" "(trait: trait #t)" "(design-events?: design-events? #t)" "(undoable?: undoable? #t)") #f #f 535 26 535 41 ("set-modified?" "set-property~" "fire-property-change" "write-property" "begin" "get-property" "get-property~" "value" "set-property" "lambda" "undoer" "register-undo" "register-undo~" "read-property" "old-value" "let" "remove-property" "remove-property~" "has-property?" "has-property?~" "when" "find-next-branch" "next-restore" "next-form" "restore?:" "find-form" "restore" "form" "receive" "assert" "class-of" "property-field" "reference" "follow-component" "follow-component~" "if" "component" "Path" "path?" "Branch" "is?" "not" "or" "installed?" "target-branch" "branch" "let*" "undoable?" "undoable?:" "design-events?" "design-events?:" "trait" "trait:" "default-value" "property" "component/path")}
        {Lisp-Entry "add-import" method (public virtual) ("import") #f #f 565 26 565 36 ("add-import" "add-import~" "for-each" "get-data" "get-data~" "data" "or" "symbol" "lambda" "imports-locator" "new-locator" "set-locator" "set-locator~" "get-locator" "get-locator~" "old-locator" "not-null?" "when" "get-form" "get-context" "get-context~" "origin-form" "listify" "map" "imports" "let" "import")}
        {Lisp-Entry "add-child" method (public virtual) ("child" "parent" "(undoable?: undoable? #t)" "(form: form #f)" "(trait: trait #t)" "(name: name #f)" "(properties: properties '())" "(tag-reference: tag-reference #f)" "(import: import '())" "(design-events?: design-events? #t)" "(descendant?: descendant? #f)") #f #f 579 26 579 35 ("set-modified?" "fire-child-add" "add-import" "set-property" "value" "property" "for-each-property" "add-to-index" "add-to-index~" "reference" "set-creator" "set-creator~" "set-name" "self" "remember-creation" "remember-creation~" "remove-child" "lambda" "undoer" "register-undo" "register-undo~" "when" "add-form" "add-form~" "set-form" "set-form~" "or" "child-form" "restore?:" "find-form" "restore" "receive" "set-parent" "set-parent~" "get-parent" "get-parent~" "eq?" "unless" "target-branch" "branch" "let" "class-of" "category-name" "else" "get-name" "get-name~" "cond" "model:" "instantiate" "if" "action:" "get-context" "get-context~" "context:" "textual?:" "Form" "new" "File" "get-origin" "get-origin~" "is?" "and" "child-is-form?" "get-form" "get-form~" "child-origin-form" "let*" "parent-form" "make-new-child-form" "define" "descendant?" "descendant?:" "design-events?" "design-events?:" "import" "import:" "tag-reference" "tag-reference:" "properties" "properties:" "name" "name:" "trait" "trait:" "form" "form:" "undoable?" "undoable?:" "parent" "child")}
        {Lisp-Entry "add-form" method (public virtual) ("form" "parent" "(trait: trait #t)" "(name: name #f)" "(imports: imports '())" "(design-events?: design-events? #t)" "(descendant?: descendant? #f)") #f #f 623 26 623 34 ("remove-child" "register-undo" "register-undo~" "instantiate-form" "child" "let" "lambda" "undoer" "with-atomic-undo" "with-atomic-undo~" "descendant?" "descendant?:" "design-events?" "design-events?:" "imports" "imports:" "name" "name:" "trait" "trait:" "parent" "form")}
        {Lisp-Entry "apply-form" method (public virtual) ("form" "component" "(trait: trait #t)" "(design-events?: design-events? #t)") #f #f 633 26 633 36 ("instantiate-content" "lambda" "undoer" "with-atomic-undo" "with-atomic-undo~" "design-events?" "design-events?:" "trait" "trait:" "component" "form")}
        {Lisp-Entry "remove-child" method (public virtual) ("child" "(trait: trait #t)" "(design-events?: design-events? #t)") #f #f 639 26 639 38 ("set-modified?" "fire-child-remove" "set-parent" "set-parent~" "form:" "add-child" "undoer" "register-undo" "register-undo~" "get-client-form" "get-client-form~" "get-trait" "get-trait~" "for-each-trait" "for-each-trait~" "get-component" "get-component~" "remove" "get-action" "get-action~" "lambda" "find-by" "find-by~" "remove-form" "get-restore-form" "get-restore-form~" "restore-form" "Branch" "is?" "remove-child" "remove-child~" "find-child" "find-child~" "child-form" "owned-form" "component-ancestry" "parent-ancestry" "when" "purge-references" "define" "form" "find-form" "parent-form" "get-parent" "get-parent~" "parent" "get-name" "get-name~" "name" "let*" "get-presentation-property" "get-presentation-property~" "neq?" "and" "find-owner" "owner" "or" "effective" "designer-error" "reference" "eq?" "if" "target-branch" "branch" "let" "design-events?" "design-events?:" "trait" "trait:" "child")}
        {Lisp-Entry "remove-components" method (public virtual) ("components") #f #f 682 26 682 43 ("remove-child" "for-each" "lambda" "undoer" "with-atomic-undo" "with-atomic-undo~" "components")}
        {Lisp-Entry "remove-children" method (public) ("parent" "(trait: trait #t)" "(design-events?: design-events? #t)") #f #f 688 18 688 33 ("get-children" "get-children~" "remove-child" "child" "lambda" "for-each" "design-events?" "design-events?:" "trait" "trait:" "parent")}
        {Lisp-Entry "relocate-component" method (public) ("component" "destination" "(trait: trait #t)" "(design-events?: design-events? #t)") #f #f 694 18 694 36 ("list" "relocate-components" "design-events?" "design-events?:" "trait" "trait:" "destination" "component")}
        {Lisp-Entry "relocate-components" method (public virtual) ("components" "destination" "(trait: trait #t)" "(design-events?: design-events? #t)") #f #f 698 26 698 45 ("set-modified?" "form:" "add-child" "remove-child" "form" "get-parent" "get-parent~" "parent" "component" "lambda" "for-each" "get-form" "get-form~" "destination-form" "let" "design-events?" "design-events?:" "trait" "trait:" "destination" "components")}
        {Lisp-Entry "can-relocate-component?" method (public) ("component" "destination") #f #f 709 18 709 41 ("component-owned-by-reference?" "class-of" "addable-class?" "addable-class?~" "and" "destination" "component")}
        {Lisp-Entry "can-relocate-components?" method (public) ("components" "destination") #f #f 714 18 714 42 ("can-relocate-component?" "component" "lambda" "every?" "destination" "components")}
        {Lisp-Entry "transfer-components" method (public virtual) ("components" "destination" "(trait: trait #t)") #f #f 720 26 720 45 ("set-modified?" "descendant?:" "design-events?:" "name-resolution:" "instantiate-parcels" "prog1" "delete-components" "verify-name-conflicts" "name-resolution" "package-components" "parcels" "remove-redundant-descendants" "let*" "trait" "trait:" "destination" "components")}
        {Lisp-Entry "send-before" method (public virtual) ("child" "target" "(trait: trait #t)") #f #f 729 26 729 37 ("set-modified?" "fire-send-before" "send-child-before" "send-child-before~" "send-before" "send-before~" "and" "target-form" "child-form" "find-form" "parent-form" "get-parent" "get-parent~" "parent" "target-branch" "branch" "let*" "eq?" "unless" "trait" "trait:" "target" "child")}
        {Lisp-Entry "send-to-back" method (public) ("child" "(trait: trait #t)") #f #f 742 18 742 30 ("get-parent" "get-parent~" "first-child" "first-child~" "send-before" "trait" "trait:" "child")}
        {Lisp-Entry "bring-to-front" method (public) ("child" "(trait: trait #t)") #f #f 746 18 746 32 ("send-before" "trait" "trait:" "child")}
        {Lisp-Entry "purge-trait" method (public virtual) ("component" "(trait: trait #t)" "(design-events?: design-events? #t)") #f #f 752 26 752 37 ("remove-child" "remove-child~" "install-form" "install-form~" "restore?:" "restore-form" "form" "receive" "find-form" "parent-form" "get-parent" "get-parent~" "parent" "target-branch" "branch" "let*" "design-events?" "design-events?:" "trait" "trait:" "component")}
        {Lisp-Entry "cut-components" method (public virtual) ("components") #f #f 766 26 766 40 ("delete-components" "copy-components" "remove-redundant-descendants" "let" "components")}
        {Lisp-Entry "copy-components" method (public virtual) ("components") #f #f 772 26 772 41 ("jazz-parcels" "format:" "set-clipboard-text" "copy-components-text" "text" "remove-redundant-descendants" "let" "components")}
        {Lisp-Entry "copy-components-text" method (public) ("components" "(trait: trait #f)") #f #f 778 18 778 38 ("get-output-string" "get-content" "get-content~" "0" "print-form" "form" "get-imports" "get-imports~" "get-object-id" "get-object-id~" "get-process-id" "get-process-id~" "class-of" "category-name" "parcel" "lambda" "for-each" "format" "package-components" "parcels" "open-output-string" "output" "let" "trait" "trait:" "components")}
        {Lisp-Entry "paste-clipboard" method (public virtual) ("parent" "(trait: trait #t)" "(design-events?: design-events? #t)") #f #f 798 26 798 41 ("paste-parcels" "get-jazz-parcels" "parcels" "let" "design-events?" "design-events?:" "trait" "trait:" "parent")}
        {Lisp-Entry "paste-parcels" method (public virtual) ("parcels" "parent" "(trait: trait #t)" "(design-events?: design-events? #t)" "(reporter: reporter #f)") #f #f 803 26 803 39 ("set-modified?" "descendant?:" "name-resolution:" "instantiate-parcels" "prog1" "verify-name-conflicts" "name-resolution" "determine-paster" "determine-paster~" "let*" "reporter" "reporter:" "design-events?" "design-events?:" "trait" "trait:" "parent" "parcels")}
        {Lisp-Entry "paste-properties" method (public virtual) ("components" "(trait: trait #t)" "(design-events?: design-events? #t)") #f #f 810 26 810 42 ("paste-parcel-properties" "get-jazz-parcels" "car" "parcel" "let" "design-events?" "design-events?:" "trait" "trait:" "components")}
        {Lisp-Entry "paste-parcel-properties" method (public) ("parcel" "components" "(trait: trait #t)" "(design-events?: design-events? #t)") #f #f 815 18 815 41 ("set-modified?" "get-properties" "get-properties~" "instantiate-properties" "form" "component" "lambda" "for-each" "get-content" "get-content~" "forms" "let" "design-events?" "design-events?:" "trait" "trait:" "components" "parcel")}
        {Lisp-Entry "delete-components" method (public virtual) ("components" "(trait: trait #t)" "(design-events?: design-events? #t)") #f #f 825 26 825 43 ("delete-component" "component" "lambda" "for-each" "remove-redundant-descendants" "let" "design-events?" "design-events?:" "trait" "trait:" "components")}
        {Lisp-Entry "delete-component" method (public virtual) ("component" "(trait: trait #t)" "(design-events?: design-events? #t)") #f #f 832 26 832 42 ("remove-child" "design-events?" "design-events?:" "trait" "trait:" "component")}
        {Lisp-Entry "remove-redundant-descendants" method () ("components") #f #f 838 11 838 39 ("has-parent?" "has-parent?~" "neq?" "and" "target" "some?" "not" "component" "lambda" "collect-if" "components")}
        {Lisp-Entry "package-component" method (public) ("component" "(trait: trait #f)") #f #f 855 18 855 35 ("list" "package-components" "car" "trait" "trait:" "component")}
        {Lisp-Entry "package-components" method (public) ("components" "(trait: trait #f)") #f #f 859 18 859 36 ("object->serial" "current-process-id" "Component-Parcel" "cdr" "cons" "form-imports" "union" "apply" "listify" "map" "imports" "origin-import" "designer-error" "not" "component-ancestry" "owned-form" "null?" "component-forms" "forms" "original-forms" "package-component" "set-name" "set-name~" "modify" "when" "new-form" "form" "modify->install" "symbol" "lambda" "get-locator" "get-locator~" "locator" "set-locator" "set-locator~" "setup-context" "setup-context~" "set-model" "set-model~" "new" "set-action" "set-action~" "module-private" "list" "deserialize-runtime-reference" "reference" "car" "model" "let*" "split-locator" "models" "module" "receive" "class-of" "get-name" "get-name~" "class-name" "copy-object" "copy-object~" "master" "let" "install" "get-action" "get-action~" "eq?" "if" "component" "old-master" "replace-master" "define" "trait" "trait:" "components")}
        {Lisp-Entry "instantiate-parcels" method (public virtual) ("parcels" "parent" "(trait: trait #t)" "(name-resolution: name-resolution #f)" "(design-events?: design-events? #t)" "(descendant?: descendant? #f)" "(reporter: reporter #f)") #f #f 905 26 905 45 ("step-it" "step-it~" "instantiate-parcel" "prog1" "get-master-name" "get-master-name~" "user-message" "user-message~" "when" "parcel" "lambda" "map" "reporter" "reporter:" "descendant?" "descendant?:" "design-events?" "design-events?:" "name-resolution" "name-resolution:" "trait" "trait:" "parent" "parcels")}
        {Lisp-Entry "instantiate-parcel" method (public virtual) ("parcel" "parent" "(trait: trait #t)" "(name-resolution: name-resolution #f)" "(design-events?: design-events? #t)" "(descendant?: descendant? #f)") #f #f 915 26 915 44 ("cdr" "imports:" "instantiate-form" "component" "set-locator" "set-locator~" "f" "imports-locator" "locator" "get-imports" "get-imports~" "imports" "delete-components" "list" "name-conflicts" "conflicts" "let" "override" "unique-name" "set!" "rename" "case" "when" "test:" "member?" "and" "conflict?" "sort-predicate" "equal" "map" "domain" "brothers" "designer-error" "new" "get-action" "get-action~" "eq?" "not" "if" "get-name" "get-name~" "name" "car" "master" "get-content" "get-content~" "forms" "let*" "get-children" "get-children~" "child" "lambda" "for-each" "set-context" "set-context~" "context" "form" "set-context-recursive" "define" "descendant?" "descendant?:" "design-events?" "design-events?:" "name-resolution" "name-resolution:" "trait" "trait:" "parent" "parcel")}
        {Lisp-Entry "instantiate-form" method (public virtual) ("name" "name-resolution" "form" "parent" "trait" "design-events?" "descendant?" "(imports: imports '())") #f #f 949 26 949 42 ("instantiate-content" "when" "instantiate-component" "component" "let" "imports" "imports:" "descendant?" "design-events?" "trait" "parent" "form" "name-resolution" "name")}
        {Lisp-Entry "instantiate-content" method (public virtual) ("form" "component" "trait" "design-events?") #f #f 955 26 955 45 ("get-children" "get-children~" "instantiate-children" "get-properties" "get-properties~" "instantiate-properties" "design-events?" "trait" "component" "form")}
        {Lisp-Entry "instantiate-component" method (public virtual) ("name" "name-resolution" "form" "parent" "trait" "design-events?" "descendant?" "(imports: imports '())") #f #f 961 26 961 47 ("designer-error" "else" "install" "equal" "sort-predicate" "get-name" "get-name~" "find-to-modify" "find-to-modify~" "locate" "modify" "instantiate-new-component" "new" "case" "get-action" "get-action~" "action" "let" "imports" "imports:" "descendant?" "design-events?" "trait" "parent" "form" "name-resolution" "name")}
        {Lisp-Entry "instantiate-new-component" method (public virtual) ("name" "form" "parent" "trait" "design-events?" "descendant?" "(imports: imports '())") #f #f 970 26 970 51 ("import:" "descendant?:" "design-events?:" "name:" "trait:" "add-child" "parent:" "instantiate-component" "instantiate-component~" "component" "let" "imports" "imports:" "descendant?" "design-events?" "trait" "parent" "form" "name")}
        {Lisp-Entry "instantiate-properties" method (public virtual) ("component" "properties" "trait" "design-events?") #f #f 976 26 976 48 ("undoable?:" "design-events?:" "trait:" "set-property" "initer-property?" "initer-property?~" "unless" "value" "property" "lambda" "for-each-property" "design-events?" "trait" "properties" "component")}
        {Lisp-Entry "instantiate-children" method (public virtual) ("component" "children" "trait" "design-events?") #f #f 983 26 983 46 ("get-name" "get-name~" "instantiate-form" "form" "lambda" "for-each" "design-events?" "trait" "children" "component")}
        {Lisp-Entry "unique-name" method (protected virtual) ("name" "domain") #f #f 994 29 994 40 ("string->symbol" "symbol?" "if" "unique-separator" "separator:" "map" "->string" "unique-domain-name" "unique-name" "let" "domain" "name")}
        {Lisp-Entry "unique-separator" method (protected virtual) () #f #f 1001 29 1001 45 ()}
        {Lisp-Entry "name-conflicts" definition () ("names" "children") #f #f 1010 15 1010 29 ("name" "some?" "and" "get-name" "get-name~" "child-name" "child" "lambda" "collect-if" "sort-predicate" "equal" "let" "children" "names")}
        {Lisp-Entry "verify-name-conflicts" method (public) ("parcels" "destination") #f #f 1021 18 1021 39 ("not-null?" "when" "name-conflicts" "get-children" "get-children~" "map" "names" "throw-cancel" "no" "override" "yes" "case" "question" "type:" "message-box" "code" "text" "let*" "rename" "object->serial" "child" "some?" "current-process-id" "=" "and" "get-master-name" "get-master-name~" "name" "get-object-id" "get-object-id~" "component-id" "get-process-id" "get-process-id~" "process-id" "sort-predicate" "equal" "parcel" "every?" "if" "get-output" "get-output~" "get-name" "get-name~" "->string" ":bulleted" "list" "conflict" "lambda" "for-each" "put" "put~" "List-Factory" "new" "fact" "let" "header" "present-conflicts" "conflicts" "children" "confirm-name-resolution" "define" "destination" "parcels")}
        {Lisp-Entry "add-view" method (public virtual) ("child" "parent" "." "rest") #f #f 1064 26 1064 34 ("set-modified?" "set-visible?" "set-visible?~" "get-position" "get-position~" "get-height" "get-height~" "2" "get-width" "get-width~" "quotient" "-" "move-figure" "move-figure~" "get-size" "get-size~" "size" "let" "set-property" "when" "name:" "add-child" "apply" "lambda" "undoer" "with-atomic-undo" "with-atomic-undo~" "others" "visible?" "centered?" "position" "name" "bind-keywords" "rest" "parent" "child")}
        {Lisp-Entry "cascade-view-position" method (public) ("view" "initial") #f #f 1080 18 1080 39 ("position" "safe-set-property" "10" "Distance" "cascade-position" "pos" "get-parent" "get-parent~" "get-views" "get-views~" "remove" "get-position" "get-position~" "map" "positions" "let*" "View" "is?" "when" "initial" "view")}
        {Lisp-Entry "find-form" method (package) ("component" "branch" "(restore?: restore? #f)" "(error?: error? #t)") #f #f 1093 19 1093 28 ("values" "restore" "get-restore-form" "get-restore-form~" "get-trait" "get-trait~" "get-client-form" "get-client-form~" "trait-form" "reference" "component-ancestry" "let*" "set-parent" "set-parent~" "name:" "get-context" "get-context~" "context:" "modify" "action:" "Form" "new" "equal?" "test:" "subform" "designer-error" "get-name" "get-name~" "name" "get-component" "get-component~" "Restore-Form" "is?" "and" "key:" "find-in" "restore-form" "set!" "memq?" "embed-new-form" "not" "if" "get-form" "get-form~" "cpn-form" "get-children" "get-children~" "children" "let" "cpn" "lambda" "for-each" "ancestry" "form" "embed-form" "define" "error?" "error?:" "restore?" "restore?:" "branch" "component")}
        {Lisp-Entry "target-branch" method () ("trait") #f #f 1132 11 1132 24 ("find-trait-branch" "find-trait-branch~" "else" "follow-component" "follow-component~" "Path" "is?" "reference" "get-active-branch" "get-active-branch~" "eq?" "cond" "trait")}
        {Lisp-Entry "component-owned-by-reference?" method (public virtual) ("component") #f #f 1143 26 1143 55 ("reference" "form" "component-owned?" "component")}
        {Lisp-Entry "find-owner" method (public) ("component" "(property #f)") #f #f 1147 18 1147 28 ("continuation-return" "has-property?" "has-property?~" "new" "get-action" "get-action~" "eq?" "not" "or" "and" "owned-form" "when" "form" "owner" "iterate-branch-spine" "iterate-branch-spine~" "return" "lambda" "continuation-capture" "reference" "component-ancestry" "ancestry" "let" "property" "component")}
        {Lisp-Entry "find-next-branch" method () ("branch" "component" "property") #f #f 1162 11 1162 27 ("get-restore-form" "get-restore-form~" "continuation-return" "has-property?" "has-property?~" "and" "owned-form" "form" "when" "get-client-form" "get-client-form~" "client-form" "for-each" "return" "lambda" "continuation-capture" "component-ancestry" "ancestry" "reference" "or" "get-branches" "get-branches~" "lower" "let" "values" "not" "if" "property" "component" "branch")}
        {Lisp-Entry "get-name" method (public) ("path" "(trait: trait #t)") #f #f 1188 18 1188 26 ("follow-form" "follow-form~" "get-name" "get-name~" "get-trait" "get-trait~" "get-client-form" "get-client-form~" "if" "form" "target-branch" "branch" "let*" "trait" "trait:" "path")}
        {Lisp-Entry "get-property" method (public) ("path" "property" "(trait: trait #t)") #f #f 1194 18 1194 30 ("follow-form" "follow-form~" "get-property" "get-property~" "get-trait" "get-trait~" "get-client-form" "get-client-form~" "if" "form" "target-branch" "branch" "let*" "trait" "trait:" "property" "path")}
        {Lisp-Entry "edit-form" method (public) ("(workspace: workspace #f)") #f #f 1205 18 1205 27 ("find-unit-source" "break-reference" "class" "module" "receive" "else" "edit" "edit~" "entry" "lambda" "=>" "get-name" "get-name~" "Jazz-Text-View" "class:" "edit-document" "edit-document~" "file?" "bell" "not" "cond" "locator->entry" "jazz.project" "module-ref" "locator" "find-entry" "define" "form" "get-origin" "get-origin~" "origin" "get-application" "appl" "let" "workspace" "workspace:")}
        {Lisp-Entry "safe-set-property" method (public) ("." "rest") #f #f 1226 18 1226 35 ("set-property" "apply" "lambda" "with-safe-design" "rest")}
        {Lisp-Entry "add-designer-listener" method (public) ("listener") #f #f 1237 18 1237 39 ("add-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "remove-designer-listener" method (public) ("listener") #f #f 1241 18 1241 42 ("remove-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "process-name-change" method () ("component" "name" "old-name" "undoable?") #f #f 1245 11 1245 30 ("invoke" "invoke~" "listener" "lambda" "for-each" "undoable?:" "old-name:" "name:" "component:" "self" ":name-change" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "undoable?" "old-name" "name" "component")}
        {Lisp-Entry "process-presentation-change" method () ("component" "presentation" "old-presentation" "undoable?") #f #f 1253 11 1253 38 ("invoke" "invoke~" "listener" "lambda" "for-each" "undoable?:" "old-presentation:" "presentation:" "component:" "self" ":presentation-change" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "undoable?" "old-presentation" "presentation" "component")}
        {Lisp-Entry "process-property-change" method () ("branch" "component" "property" "value" "undoable?") #f #f 1261 11 1261 34 ("invoke" "invoke~" "listener" "lambda" "for-each" "undoable?:" "value:" "property:" "component:" "branch:" "self" ":property-change" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "undoable?" "value" "property" "component" "branch")}
        {Lisp-Entry "process-child-add" method () ("child" "parent" "descendant?") #f #f 1269 11 1269 28 ("invoke" "invoke~" "listener" "lambda" "for-each" "descendant?:" "parent:" "child:" "self" ":child-add" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "descendant?" "parent" "child")}
        {Lisp-Entry "process-child-remove" method () ("child" "parent") #f #f 1277 11 1277 31 ("invoke" "invoke~" "listener" "lambda" "for-each" "parent:" "child:" "self" ":child-remove" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "parent" "child")}
        {Lisp-Entry "process-child-relocate" method () ("child" "parent" "destination") #f #f 1285 11 1285 33 ("invoke" "invoke~" "listener" "lambda" "for-each" "target:" "parent:" "child:" "self" ":child-relocate" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "destination" "parent" "child")}
        {Lisp-Entry "process-send-before" method () ("child" "parent" "target") #f #f 1293 11 1293 30 ("invoke" "invoke~" "listener" "lambda" "for-each" "target:" "parent:" "child:" "self" ":send-before" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "target" "parent" "child")}
        {Lisp-Entry "process-refresh" method (public) ("component" "what") #f #f 1301 18 1301 33 ("invoke" "invoke~" "listener" "lambda" "for-each" "what:" "component:" "self" ":refresh" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "what" "component")}
        {Lisp-Entry "process-user-event" method (public) ("event") #f #f 1309 18 1309 36 ("self" "invoke" "invoke~" "listener" "lambda" "for-each" "listeners" "not-null?" "when" "event")}}}})
"Designer-Error"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "designer" "Designer-Error.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.designer.Designer-Error" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Designer-Error" class () ((extends . "Error")) #f #f 40 7 40 21 ("Error")}}})
"Designer-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "event" "Designer-Event.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.event.Designer-Event" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Designer-Event" class () ((extends . "Event")) #f #f 43 7 43 21 ("Event")}}})
"Designer-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "manager" "Designer-Manager.jazz"} 247283256. jazz
    {Lisp-Entry "jazz.designer.manager.Designer-Manager" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "Designer-Manager" class () ((extends . "Layout-View")) #f #f 50 7 50 23 ("explicit" "Layout-View")
        {Lisp-Entry "client" property () ((initialize . "#f") (accessors . "explicit")) #f #f 53 12 53 18 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("on-zoom-change" "content-change-handler:" "zoom" "Zoom-Combo" "<Zoom-Combo>" "Dark" "border-color:" "Border-View" "<Border-View>" "1" "fill" "80" "zoom-layout" "Layout-View" "<Layout-View>" "on-edit-form" "edit-form" "on-refresh" "refresh" "Push-Tool" "<Push-Tool>" "on-toggle-lock-selection" "lock-selection" "on-toggle-try-out" "try-out" "on-toggle-content" "content" "on-toggle-frames" "frames" "on-switch-mode" "switch-mode" "Toggle-Tool" "<Toggle-Tool>" "rect" "2" "Separator" "<Separator>" "mode:" "on-mode" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" "selected?:" ":images" "portfolio:" "Image-Resource" "resource:" "22" "Dimension" "size:" "select" "name:" "Radio-Tool" "<Radio-Tool>" "Medium" "Color" "background:" "0" "5" "4" "Rect" "layout-insets:" "flow" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 79 25 79 38 ("designer-manager" "rest")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 88 25 88 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 92 25 92 35 ()}
        {Lisp-Entry "client-activate" method (override) () #f #f 96 20 96 35 ("set-client" "Component-Editor" "is?" "and" "client" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method (override) () #f #f 102 20 102 37 ("set-client")}
        {Lisp-Entry "on-editor" method () ("evt") #f #f 111 11 111 20 ("designer:" "get-property" "get-property~" "set-designer" ":designer-change" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "on-new" method () ("evt") #f #f 116 11 116 17 ("evt")}
        {Lisp-Entry "on-open" method () ("evt") #f #f 120 11 120 18 ("open-form" "open-form~" "instantiate" "instantiate~" "client" "set-client" "set-client~" "evt")}
        {Lisp-Entry "on-toggle-frames" method () ("evt") #f #f 124 11 124 27 ("client" "toggle-frames" "toggle-frames~" "evt")}
        {Lisp-Entry "on-toggle-content" method () ("evt") #f #f 128 11 128 28 ("client" "toggle-content" "toggle-content~" "evt")}
        {Lisp-Entry "on-toggle-lock-selection" method () ("evt") #f #f 132 11 132 35 ("client" "toggle-lock-selection" "toggle-lock-selection~" "evt")}
        {Lisp-Entry "on-refresh" method () ("evt") #f #f 136 11 136 21 ("client" "refresh" "refresh~" "evt")}
        {Lisp-Entry "on-toggle-try-out" method () ("evt") #f #f 140 11 140 28 ("toggle-try-out" "toggle-try-out~" "get-surrogate" "get-surrogate~" "try-out" "try-out~" "not" "View" "is-not?" "or" "when" "client" "get-client" "get-client~" "component" "let" "evt")}
        {Lisp-Entry "on-switch-mode" method () ("evt") #f #f 147 11 147 25 ("set-modified?" "set-modified?~" "set-form-copy" "set-form-copy~" "Grid-Component-Editor" "if" "editor-class:" "open-component" "get-frame" "get-frame~" "close" "close~" "set-parent" "set-parent~" "get-designer" "get-designer~" "get-form-copy" "get-form-copy~" "form-copy" "get-modified?" "get-modified?~" "modified?" "View-Editor" "is?" "view-editor?" "get-client" "get-client~" "client" "editor" "let" "evt")}
        {Lisp-Entry "on-edit-form" method () ("evt") #f #f 160 11 160 23 ("designer-source-workspace" "workspace:" "client" "view-component" "view-component~" "evt")}
        {Lisp-Entry "on-zoom-change" method () ("evt") #f #f 164 11 164 25 ("set-scaling" "set-scaling~" "client" "get-client" "get-client~" "view" "get-sender" "get-sender~" "get-zoom" "get-zoom~" "value" "let" "evt")}
        {Lisp-Entry "on-mode" method () ("evt") #f #f 175 11 175 18 ("invalidate-selection" "invalidate-selection~" "set-mode" "set-mode~" "current-document" "editor" "mode:" "get-property" "get-property~" "mode" "let" "evt")}
        {Lisp-Entry "get-client" method (public) () #f #f 187 18 187 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("clt") #f #f 191 18 191 28 ("client-update" "client" "set!" "clt")}
        {Lisp-Entry "client-update" method () () #f #f 196 11 196 24 ("edit-form" "not" "trying-out?" "trying-out?~" "get-selection-locked?" "get-selection-locked?~" "get-show-content?" "get-show-content?~" "get-show-frames?" "get-show-frames?~" "set-selected?" "set-selected?~" "effective-scaling" "effective-scaling~" "set-zoom" "set-zoom~" "when" "zoom" "zoom-layout" "switch-mode" "switch-mode-button" "lock-selection" "lock-button" "refresh" "refresh-button" "try-out" "try-out-button" "content" "content-button" "frames" "frames-button" "rect" "select" "locate" "set-enabled?" "set-enabled?~" "View" "get-client" "get-client~" "view?" "View-Editor" "is?" "client" "and" "view-editor?" "let")}
        {Lisp-Entry "set-designer" method () ("designer") #f #f 232 11 232 23 ("class-of" "category-identifier" "format" "get-reference" "get-reference~" "reference" "let" "set-title" "not" "if" "designer")}}}})
"Designer-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "preference" "Designer-Preferences.jazz"} 247283256. jazz
    {Lisp-Entry "jazz.designer.preference.Designer-Preferences" module (protected) () #f #f 37 18 37 63 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Designer-Preferences" class (undocumented) ((extends . "Preferences")) #f #f 46 20 46 40 ("Preferences")
        {Lisp-Entry "aligned-properties" property () ((initialize . "'()") (accessors . "generate")) #f #f 49 12 49 30 ()}
        {Lisp-Entry "get-aligned-properties" accessor () () #f #f 49 57 49 65 ()}
        {Lisp-Entry "set-aligned-properties" accessor () () #f #f 49 57 49 65 ()}
        {Lisp-Entry "new-requests-name?" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 30 ()}
        {Lisp-Entry "get-new-requests-name?" accessor () () #f #f 50 57 50 65 ()}
        {Lisp-Entry "set-new-requests-name?" accessor () () #f #f 50 57 50 65 ()}
        {Lisp-Entry "source-in-designer?" property () ((initialize . "#t") (accessors . "generate")) #f #f 51 12 51 31 ()}
        {Lisp-Entry "get-source-in-designer?" accessor () () #f #f 51 57 51 65 ()}
        {Lisp-Entry "set-source-in-designer?" accessor () () #f #f 51 57 51 65 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("Image-Resource" "icon:" "title:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 63 25 63 45 ("Designer-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 72 11 72 17 ()
        {Lisp-Entry "import" import () () #f #f 75 1 75 7 ("jazz.designer")}
        {Lisp-Entry "Designer-Preferences-Descriptor" class () ((extends . "Preferences-Descriptor")) #f #f 78 7 78 38 ("Preferences-Descriptor")
          {Lisp-Entry "form" form () () #f #f 81 3 81 7 ("Boolean-Domain" "<Boolean-Domain>" "domain" "List-Domain" "<List-Domain>" "title:" "aligned-properties" "name:" "Property-Descriptor" "<Property-Descriptor>" "source-in-designer?" "new-requests-name?" "categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "install" "<install>")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 93 20 93 61 ("Indented-Column-Preferences" "Aligned-Column-Preferences" "reference" "list" "component")}}}}})
"Details-Card"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "details" "Details-Card.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.details.Details-Card" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Details-Card" class (undocumented) ((extends . "Layout-View")) #f #f 45 20 45 32 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("toplevel-controls?:" "title:" "element" "Tree-Node-Column" "<Tree-Node-Column>" "details" "Details-Tree" "<Details-Tree>" "Tree-Header" "<Tree-Header>" "content" "name:" "!" "<!>" "vscroll?:" "hscroll?:" "document" "style:" "Scroller-View" "<Scroller-View>" "fill" "layout-type:" "install" "<install>")}}}})
"Details-Chooser"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "choosers" "Details-Chooser.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.choosers.Details-Chooser" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Details-Chooser" class (undocumented) ((extends . "View")) #f #f 47 20 47 35 ("explicit" "View")
        {Lisp-Entry "reference" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 21 ()}
        {Lisp-Entry "get-reference" accessor () () #f #f 50 47 50 55 ()}
        {Lisp-Entry "set-reference" accessor () () #f #f 50 47 50 55 ()}
        {Lisp-Entry "details" property () ((initialize . "'()") (accessors . "generate")) #f #f 51 12 51 19 ()}
        {Lisp-Entry "get-details" accessor () () #f #f 51 47 51 55 ()}
        {Lisp-Entry "set-details" accessor () () #f #f 51 47 51 55 ()}
        {Lisp-Entry "defaults" property () ((initialize . "'()") (accessors . "explicit")) #f #f 53 12 53 20 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("on-cancel" "193" "cancel" "default?:" "on-ok" ":host" "363" "109" "ok" "270" "348" "6" "Horizontal-Line" "<Horizontal-Line>" "show-unfocused-selection?:" "focus-selects-all?:" "text" "scroller" "21" "40" "318" "155" "column-size" "Entry-Widget" "<Entry-Widget>" "on-width" "90" "width" "on-filled" "47" "321" "filled" "Radio-Button" "<Radio-Button>" "110" "300" "8" "size-label" "on-hide" "123" "hide" "on-show" "95" "show" "on-move-down" "61" "move-down" "on-move-up" "24" "80" "move-up" "Push-Button" "<Push-Button>" "200" "width:" "display-images?:" "toplevel-controls?:" "Tree-Node-Column" "<Tree-Node-Column>" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-selection-change" "selection-handler:" "on-action" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "2" "top-padding:" "detail" "filled-column:" "details-tree" "Tree-View" "<Tree-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "254" "171" "33" "details-border" "name:" "Border-View" "<Border-View>" "Label" "Font" "font:" "16" "191" "9" "10" "Point" "position:" "title:" "Label-View" "<Label-View>" "400" "282" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 80 20 80 26 ("acquire-focus" "acquire-focus~" "update-buttons" "setup-selection" "setup-details" "get-tree" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-defaults" method (public) () #f #f 95 18 95 30 ("defaults")}
        {Lisp-Entry "set-defaults" method (public) ("value") #f #f 100 18 100 30 ("defaults" "set!" "value")}
        {Lisp-Entry "get-tree" method () () #f #f 104 11 104 19 ("details-tree" "locate")}
        {Lisp-Entry "get-text" method () () #f #f 108 11 108 19 ("text" "column-size" "locate")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 117 25 117 35 ()}
        {Lisp-Entry "host-position" method (meta override) () #f #f 121 25 121 38 ("300" "450" "Point")}
        {Lisp-Entry "host-size" method (meta override) () #f #f 125 25 125 34 ("120" "302" "Dimension")}
        {Lisp-Entry "on-action" method () ("evt") #f #f 134 11 134 20 ("update-buttons" "toggle-displayed?" "Check-Box" "is?" "when" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "on-selection-change" method () ("evt") #f #f 141 11 141 30 ("update-details" "enter-width" "update-buttons" "first" "details" "element" "and" "old-detail" "get-old" "get-old~" "old" "let*" "evt")}
        {Lisp-Entry "on-move-up" method () ("evt") #f #f 149 11 149 21 ("set-single-selection" "set-single-selection~" "acquire-focus" "acquire-focus~" "setup-details" "1" "-" "insert!" "remove!" "set!" "details" "element" "detail" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-move-down" method () ("evt") #f #f 160 11 160 23 ("set-single-selection" "set-single-selection~" "acquire-focus" "acquire-focus~" "setup-details" "1" "+" "insert!" "remove!" "set!" "details" "element" "detail" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-show" method () ("evt") #f #f 171 11 171 18 ("update-buttons" "toggle-displayed?" "set-checked?" "set-checked?~" "acquire-focus" "acquire-focus~" "get-row" "get-row~" "get-user-data" "get-user-data~" "checkbox" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-hide" method () ("evt") #f #f 181 11 181 18 ("update-buttons" "toggle-displayed?" "set-checked?" "set-checked?~" "acquire-focus" "acquire-focus~" "get-row" "get-row~" "get-user-data" "get-user-data~" "checkbox" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-filled" method () ("evt") #f #f 191 11 191 20 ("change-filled" "evt")}
        {Lisp-Entry "on-width" method () ("evt") #f #f 195 11 195 19 ("Label" "Font" "set-detail-font" "set-filled?" "set-filled?~" "enter-width" "details" "element" "and" "detail" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-reset" method () ("evt") #f #f 205 11 205 19 ("on-reset" "unimplemented" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 210 20 210 35 ("get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" method (override) ("evt") #f #f 216 20 216 35 ("cancel-modal" "cancel-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "setup-details" method () ("tree") #f #f 226 11 226 24 ("details" "list" "children:" "add-row" "add-row~" "user-data:" "color:" "get-displayed?" "get-displayed?~" "checked?:" ":enabled?" "title:" ":outline" "parent:" "font:" "Check-Box" "checkbox" "Label" "Label-Bold" "Font" "get-filled?" "get-filled?~" "if" "font" "neq?" "enabled?" "Black" "Color" "color" "4" "Rect" "layout-insets:" "fill" "layout-type:" "Layout-View" "new" "layout" "0" "border" "let*" "reference" "get-name" "get-name~" "assoc" "mandatory" "width" "title" "name" "bind" "detail" "for-each" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "tree")}
        {Lisp-Entry "setup-selection" method () ("tree") #f #f 243 11 243 26 ("0" "list" "set-selection" "set-selection~" "details" "when" "tree")}
        {Lisp-Entry "update-buttons" method () () #f #f 253 11 253 25 ("defaults" "reset" "neq?" "and" "get-displayed?" "get-displayed?~" "not" "1" "-" "<" "0" ">" "reference" "get-name" "get-name~" "assoc" "mandatory" "width" "title" "name" "bind" "details" "element" "detail" "let" "hide" "show" "move-down" "move-up" "locate" "set-enabled?" "set-enabled?~" "begin" "null?" "if" "get-visible-count" "get-visible-count~" "count" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "update-details" method () () #f #f 273 11 273 25 ("get-filled?" "get-filled?~" "set-selected?" "set-selected?~" "get-width" "get-width~" "->string" "details" "element" "detail" "set-string-content" "set-string-content~" "set-enabled?" "set-enabled?~" "begin" "null?" "if" "get-text" "text" "width" "filled" "size-label" "locate" "label" "get-tree" "get-single-selection" "get-single-selection~" "selection" "let")}
        {Lisp-Entry "toggle-displayed?" definition () ("checkbox") #f #f 300 15 300 32 ("not" "set-displayed?" "set-displayed?~" "get-displayed?" "get-displayed?~" "visible?" "get-user-data" "get-user-data~" "detail" "let*" "checkbox")}
        {Lisp-Entry "enter-width" method () ("edited-detail") #f #f 311 11 311 22 ("parse-integer" "set-width" "set-width~" "throw-cancel" "select-all" "select-all~" "acquire-focus" "acquire-focus~" "exception-reason" "message-box" "err" "Parse-Error" "catch" "get-string-content" "get-string-content~" "content" "get-text" "text" "get-tree" "tree" "let*" "when" "edited-detail")}
        {Lisp-Entry "set-detail-font" method () ("tree" "detail" "font") #f #f 324 11 324 26 ("set-font" "set-font~" "get-user-data" "get-user-data~" "checkbox" "details" "find" "get-row" "get-row~" "row" "let*" "font" "detail" "tree")}
        {Lisp-Entry "change-filled" method () () #f #f 335 11 335 24 ("Label-Bold" "Label" "Font" "set-detail-font" "set-filled?" "set-filled?~" "neq?" "when" "filled" "element" "and" "detail" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*" "details" "get-filled?" "get-filled?~" "find-if" "find-filled" "define")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 357 20 357 36 ("get-output" "get-output~" "put" "put~" "Check-Box" "is?" "when" "get-user-data" "get-user-data~" "checkbox" "let" "rank" "row" "lambda" "for-each-row" "for-each-row~" "enter-width" "List-Factory" "new" "details" "element" "and" "detail" "get-single-selection" "get-single-selection~" "selection" "get-tree" "tree" "let*")}}}})
"Details-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Details-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.Details-Row" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.designer")}
      {Lisp-Entry "Details-Row" class (undocumented) ((extends . "Combo-Row")) #f #f 44 20 44 31 ("Combo-Row")
        {Lisp-Entry "all" property () ((initialize . "'()") (accessors . "generate")) #f #f 47 12 47 15 ()}
        {Lisp-Entry "get-all" accessor () () #f #f 47 41 47 49 ()}
        {Lisp-Entry "set-all" accessor () () #f #f 47 41 47 49 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 55 20 55 30 ("choose" "set-kind" "nextmethod" "apply" "rest")}
        {Lisp-Entry "present" method (override) ("value") #f #f 65 20 65 27 ("format" "not" "if" "value")}
        {Lisp-Entry "combo-choose" method (override) () #f #f 76 20 76 32 ("focus-editor" "enter-edited-value" "set-edited-value" "get-edited-value" "details:" "all" "all:" "Details-Chooser" "get-modal" "details" "let")}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 89 20 89 36 ("=" "empty-string?" "or" "if" "editor" "get-body" "get-body~" "get-string-content" "get-string-content~" "string" "let")}
        {Lisp-Entry "set-edited-value" method (override) ("value") #f #f 96 20 96 36 ("present" "editor" "get-body" "get-body~" "set-string-content" "set-string-content~" "value")}}}})
"Details-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Details-Tree.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.editor.Details-Tree" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Details-Tree" class (undocumented) ((extends . "Components-Tree")) #f #f 47 20 47 32 ("Components-Tree")
        {Lisp-Entry "base" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 16 ()}
        {Lisp-Entry "get-base" accessor () () #f #f 50 45 50 53 ()}
        {Lisp-Entry "set-base" accessor () () #f #f 50 45 50 53 ()}
        {Lisp-Entry "details" property () ((initialize . "'()") (accessors . "generate")) #f #f 51 12 51 19 ()}
        {Lisp-Entry "get-details" accessor () () #f #f 51 45 51 53 ()}
        {Lisp-Entry "set-details" accessor () () #f #f 51 45 51 53 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("on-selection-change" ":self" "Event-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" ":images" "portfolio:" "reorderable?:" "draggable?:" "install" "<install>")}
        {Lisp-Entry "branch-changed" method (override) () #f #f 63 20 63 34 ("update")}
        {Lisp-Entry "selection-changed" method (override) ("selection" "old" "origin" "force-parent?" "focus?") #f #f 67 20 67 37 ("row->line" "list" "when" "component-row" "row" "generate-event?:" "set-selection" "parent?" "client" "receive" "car" "set-client" "self" "eq?" "not" "unless" "values" "null?" "or" "get-addable-classes" "get-addable-classes~" "not-null?" "and" "if" "get-parent" "get-parent~" "parent" "let" "component" "determine-client" "define" "focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "selection-changed" method () ("selection" "old" "origin" "force-parent?" "focus?") #f #f 88 11 88 28 ("set-client" "generate-event?:" "set-selection" "Group" "is?" "not" "or" "when" "car" "component" "let" "focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "update" method (override) ("(expand-state: expand-state (get-expand-state))" "(selected-components: selected-components (selected-components))") #f #f 100 20 100 26 ("insert-rows" "setup-columns" "lambda" "with-update-locked" "selected-components" "selected-components:" "get-expand-state" "expand-state" "expand-state:")}
        {Lisp-Entry "setup-columns" method () () #f #f 107 11 107 24 ("width:" "title:" "name:" "Tree-Label-Column" "class:" "add-column" "set-width" "set-width~" "set-title" "set-title~" "set-name" "set-name~" "get-node-column" "column" "begin" "when" "detail-presentation" "detail-presentation~" "error" "category-field" "property" "split-detail-path" "title" "name" "ignore" "receive" "filled?" "width" "path" "bind" "detail" "lambda" "for-each" "first?" "node-column" "get-name" "get-name~" "null?" "not" "or" "if" "preserve-node-column?:" "remove-columns" "set-filled-column" "get-addable-details" "get-addable-details~" "details" "get-addable-base" "get-addable-base~" "client" "and" "base" "set!" "get-header" "header" "let")}
        {Lisp-Entry "insert-rows" method () ("expand-state" "selected-components") #f #f 136 11 136 22 ("update-selection" "insert-components" "get-recursive-details?" "get-recursive-details?~" "recursive?" "let" "client" "when" "remove-every-row" "selected-components" "expand-state")}
        {Lisp-Entry "insert-components" method () ("component" "father" "recursive?") #f #f 144 11 144 28 ("get-presentation-property" "get-presentation-property~" "key:" "<" "sort" "sort-components?" "sort-components?~" "if" "insert-component" "Group" "is?" "unless" "child" "lambda" "for-each" "get-components" "get-components~" "components" "let" "recursive?" "father" "component")}
        {Lisp-Entry "insert-component" method (protected virtual) ("component" "father" "recursive?") #f #f 154 29 154 45 ("insert-components" "user-data:" "children:" "expanded" "state:" "father:" "add-row" "cons" "children" "title" "value" "property" "split-detail-path" "ignore" "name" "receive" "filled?" "width" "path" "Tree-Label" "if" "detail" "lambda" "map" "labels" "image:" "title:" "Tree-Node" "new" "node" "get-component-image" "get-component-image~" "ni" "present-property" "present-property~" "nt" "read-property" "nv" "category-field" "np" "car" "nn" "let*" "filled" "name-info" "set!" "not" "is?" "based?" "rest" "first" "bind" "details" "base" "and" "when" "row" "let" "recursive?" "father" "component")}
        {Lisp-Entry "split-detail-path" method () ("base" "component" "path") #f #f 183 11 183 28 ("child" "child~" "and" "follow-submodels" "reverse!" "cons" "car" "string?" "subpath" "name" "title" "bind" "reverse" "reversed" "let" "values" "symbol?" "if" "path" "component" "base")}
        {Lisp-Entry "follow-submodels" method () ("model" "path") #f #f 192 11 192 27 ("cdr" "car" "follow-submodels" "else" "get-class-form" "get-class-form~" "child" "child~" "get-model" "get-model~" "symbol?" "null?" "cond" "path" "model")}
        {Lisp-Entry "present-location" method () ("component") #f #f 201 11 201 27 ("get-presentation-property" "get-presentation-property~" "localize" "ascendant" "lambda" "map" "join" "null?" "if" "collect-ascendants" "collect-ascendants~" "cdr" "ascendants" "let" "component")}
        {Lisp-Entry "on-designer" method (override) ("evt") #f #f 213 20 213 31 ("value:" "property:" "component:" "property-change" ":property-change" "child-remove" ":child-remove" "parent:" "child:" "get-property" "get-property~" "child-add" ":child-add" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "child-add" method () ("child" "parent") #f #f 220 11 220 20 ("insert-component" "lambda" "with-update-locked" "client" "neq?" "Group" "is?" "or" "unless" "parent" "child")}
        {Lisp-Entry "child-remove" method () ("child") #f #f 227 11 227 23 ("remove-row" "lambda" "with-update-locked" "when" "component-row" "row" "let" "client" "get-parent" "get-parent~" "neq?" "Group" "is?" "or" "unless" "child")}
        {Lisp-Entry "property-change" method () ("component" "property" "value") #f #f 236 11 236 26 ("invalidate-cell" "set-title" "set-title~" "present-property" "present-property~" "title" "get-cell-data" "data" "Cell" "new" "cell" "let*" "get-user-data" "get-user-data~" "eq?" "rank" "row" "lambda" "for-each-visible-row" "when" "car" "key:" "field-name" "details" "find" "col" "let" "client" "get-parent" "get-parent~" "neq?" "Group" "is?" "or" "unless" "value" "property" "component")}}}})
"Dimension-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Dimension-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.Dimension-Domain" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Dimension-Domain" class () ((extends . "Text-Domain")) #f #f 43 7 43 23 ("Text-Domain")
        {Lisp-Entry "present" method (override) ("size") #f #f 51 20 51 27 ("get-height" "get-height~" "get-width" "get-width~" "format" "not" "if" "size")}
        {Lisp-Entry "parse" method (override) ("text") #f #f 64 20 64 25 ("Dimension" "new" "height" "width" "bind" "read-delimited-string" "lst" "let" "text")}}}})
"Directory-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Directory-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.Directory-Domain" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Directory-Domain" class () ((extends . "Domain")) #f #f 43 7 43 23 ("Domain")
        {Lisp-Entry "present" method (override) ("value") #f #f 51 20 51 27 ("present" "present~" "value")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 60 20 60 31 ("dir" "moniker" "locate" "locate~" "set-protocol" "set-protocol~" "self" "domain:" "get-size" "get-size~" "size:" "parent:" "Pathname-Entry" "new" "entry" "let" "client" "view")}}}})
"Directory-Group-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Directory-Group-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.Directory-Group-Domain" module (protected) () #f #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Directory-Group-Domain" class () ((extends . "Domain")) #f #f 43 7 43 29 ("Domain")
        {Lisp-Entry "present" method (override) ("value") #f #f 51 20 51 27 ("->string" "value")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 60 20 60 31 ("dir" "moniker" "locate" "locate~" "set-protocol" "set-protocol~" "self" "domain:" "get-size" "get-size~" "size:" "parent:" "Pathname-Entry" "new" "entry" "let" "client" "view")}}}})
"Directory-Group-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Directory-Group-Row.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.row.Directory-Group-Row" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.dialog" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Directory-Group-Row" class (undocumented) ((extends . "Pathname-Row")) #f #f 45 20 45 39 ("Pathname-Row")
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 53 20 53 30 ("group" "editor" "set-protocol" "set-protocol~" "nextmethod" "apply" "others" "parameters" "bind-keywords" "rest")}
        {Lisp-Entry "combo-choose" method () () #f #f 64 11 64 23 ("focus-editor" "enter-edited-value" "Directory-Group" "new" "set-edited-value" "get-list" "get-list~" "and" "directories:" "choose-directory" "directories" "get-edited-value" "actual" "let*")}}}})
"Directory-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Directory-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.Directory-Row" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.dialog" "jazz.designer")}
      {Lisp-Entry "Directory-Row" class (undocumented) ((extends . "Pathname-Row")) #f #f 44 20 44 33 ("Pathname-Row")
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 52 20 52 30 ("dir" "editor" "set-protocol" "set-protocol~" "nextmethod" "apply" "others" "parameters" "bind-keywords" "rest")}
        {Lisp-Entry "combo-choose" method () () #f #f 63 11 63 23 ("focus-editor" "enter-edited-value" "set-edited-value" "choose-directory" "dir" "let")}}}})
"Dispatch-Designer"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "designer" "Dispatch-Designer.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.designer.Dispatch-Designer" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Dispatch-Designer" class (undocumented) ((extends . "Designer")) #f #f 43 20 43 37 ("Designer")}
      {Lisp-Entry "Dispatch-Designer" class (undocumented) ((extends . "Designer")) #f #f 49 20 49 37 ("Designer")
        {Lisp-Entry "designers" slot () ((initialize . "'()")) #f #f 52 8 52 17 ()}
        {Lisp-Entry "initialize" method () ("." "rest") #f #f 60 11 60 21 ("install-designers" "nextmethod" "apply" "rest")}
        {Lisp-Entry "install-designers" method () () #f #f 70 11 70 28 ("install-designer" "install-designer?" "when" "level" "descendant" "lambda" "reference" "for-each-descendant" "for-each-descendant~")}
        {Lisp-Entry "install-designer?" method (public virtual) ("component") #f #f 77 26 77 43 ("component")}
        {Lisp-Entry "get-designer-class" method (public virtual) () #f #f 81 26 81 44 ("Designer")}
        {Lisp-Entry "install-designer" method () ("component") #f #f 85 11 85 27 ("add-project-designer" "reference:" "form:" "get-designer-class" "new" "designer" "get-class-form" "get-class-form~" "form" "project" "class-of" "class" "let*" "component")}
        {Lisp-Entry "add-designer" method () ("component" "designer") #f #f 92 11 92 23 ("cons" "designers" "set!" "designer" "component")}
        {Lisp-Entry "remove-designer" method () ("component") #f #f 96 11 96 26 ("assq" "remove!" "designers" "set!" "component")}
        {Lisp-Entry "get-designer" method (protected) ("component") #f #f 100 21 100 33 ("designers" "assq-value" "component")}
        {Lisp-Entry "for-each-designer" method () ("proc") #f #f 104 11 104 28 ("designers" "designer" "component" "bind" "pair" "lambda" "for-each" "proc")}
        {Lisp-Entry "project-add" method (protected) ("project") #f #f 111 21 111 32 ("add-designer" "Project" "is?" "when" "level" "descendant" "lambda" "for-each-descendant" "for-each-descendant~" "project")}
        {Lisp-Entry "project-remove" method (protected) ("project") #f #f 118 21 118 35 ("cleanup-project-designers" "project")}
        {Lisp-Entry "set-name" method () ("component" "name" "." "rest") #f #f 130 11 130 19 ("set-name" "~" "apply" "find-modification-designer" "designer" "let" "others" "use-owner?" "bind-keywords" "rest" "name" "component")}
        {Lisp-Entry "set-property" method () ("component" "property" "value" "." "rest") #f #f 136 11 136 23 ("set-property" "~" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "value" "property" "component")}
        {Lisp-Entry "add-child" method () ("child" "parent" "." "rest") #f #f 145 11 145 20 ("add-child" "~" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "parent" "child")}
        {Lisp-Entry "remove-child" method () ("child" "." "rest") #f #f 154 11 154 23 ("remove-child" "~" "get-project-designer" "designer" "let" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parent" "get-parent~" "parent" "let*" "rest" "child")}
        {Lisp-Entry "instantiate-parcels" method () ("parcels" "parent" "." "rest") #f #f 164 11 164 30 ("instantiate-parcels" "~" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "let" "rest" "parent" "parcels")}
        {Lisp-Entry "transfer-components" method () ("components" "destination" "(trait: trait #t)") #f #f 173 11 173 30 ("transfer-components" "~" "get-project-designer" "designer" "rest" "nextmethod" "apply" "reference" "eq?" "if" "verify-name-conflicts" "package-components" "let*" "set-modified?" "descendant?:" "design-events?:" "name-resolution" "name-resolution:" "parcels" "instantiate-parcels" "prog1" "delete-components" "destination-owner" "get-parent" "get-parent~" "find-modification-owner" "component" "lambda" "key:" "uniform" "owner" "let" "trait" "trait:" "destination" "components")}
        {Lisp-Entry "transfer-components" method () ("components" "destination" "(trait: trait #t)") #f #f 189 11 189 30 ("set-modified?" "descendant?:" "design-events?:" "name-resolution:" "instantiate-parcels" "prog1" "delete-components" "verify-name-conflicts" "name-resolution" "package-components" "parcels" "let*" "trait" "trait:" "destination" "components")}
        {Lisp-Entry "cut-components" method () ("components") #f #f 202 11 202 25 ("cut-components" "cut-components~" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "copy-components" method () ("components") #f #f 211 11 211 26 ("copy-components" "copy-components~" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "paste-clipboard" method () ("parent" "." "rest") #f #f 220 11 220 26 ("paste-clipboard" "~" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "let" "rest" "parent")}
        {Lisp-Entry "get-parents" method () ("components") #f #f 228 11 228 22 ("get-parent" "get-parent~" "map" "components")}
        {Lisp-Entry "find-modification-designer" method () ("components" "use-owner?") #f #f 237 11 237 37 ("get-designer" "my-designer??" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "use-owner?" "components")}
        {Lisp-Entry "find-modification-owner" method () ("components") #f #f 244 11 244 34 ("car" "error" "1" "length" ">" "map" "remove-duplicates" "owners" "let" "pair?" "get-parent" "get-parent~" "install-designer?" "reference" "eq?" "or" "if" "component" "find-owner-project" "define" "components")}
        {Lisp-Entry "save-designer" method (protected) () #f #f 263 21 263 34 ("save~" "get-modified?~" "designer" "project" "lambda" "for-each-designer" "save" "set!" "get-modified?" "when" "some-modified?" "let")}}}})
"Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Domain.jazz"} 241761214. jazz
    {Lisp-Entry "jazz.designer.domain.Domain" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer" "jazz.locale" "jazz.library")}
      {Lisp-Entry "Domain" class () ((extends . "Component")) #f #f 45 7 45 13 ("Component")
        {Lisp-Entry "nullable?" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 21 ()}
        {Lisp-Entry "get-nullable?" accessor () () #f #f 48 46 48 54 ()}
        {Lisp-Entry "set-nullable?" accessor () () #f #f 48 46 48 54 ()}
        {Lisp-Entry "validate" method (public virtual) ("property" "value" "component" "root" "client" "context" "manager") #f #f 56 26 56 34 ("validate-value" "field-name" "property:" "class-of" "property-presentation" "property-presentation~" "localize" "format" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "nullable?" "when" "not" "if" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "validate-value" method (public virtual) ("property" "value" "component" "root" "client" "context" "manager") #f #f 63 26 63 40 ("manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "get-violation-message" method (virtual) ("exception") #f #f 67 19 67 40 ("exception")}
        {Lisp-Entry "validate-nil" method () () #f #f 71 11 71 23 ("message:" "Property-Violation" "new" "get-nullable?" "unless")}
        {Lisp-Entry "validate-text" method (public virtual) ("text") #f #f 76 26 76 39 ("parse" "get-violation-message" "message:" "Property-Violation" "new" "exception" "lambda" "with-exception-filter" "validate-nil" "parse-nil?" "if" "text")}
        {Lisp-Entry "get-nil-presentation" method (virtual) () #f #f 94 19 94 39 ()}
        {Lisp-Entry "parse-nil?" method () ("text") #f #f 98 11 98 21 ("get-nil-presentation" "string=?" "get-nullable?" "and" "text")}
        {Lisp-Entry "present" method (public virtual) ("value") #f #f 102 26 102 33 ("self" "class-of" "category-name" "error" "value")}
        {Lisp-Entry "parse" method (public virtual) ("text") #f #f 111 26 111 31 ("self" "class-of" "category-name" "error" "text")}
        {Lisp-Entry "draw-data" method (public virtual) ("surface" "context" "value" "column" "row" "data" "width" "height") #f #f 120 26 120 35 ("0" "draw-at" "draw-at~" "height" "width" "data" "row" "column" "value" "context" "surface")}
        {Lisp-Entry "setup-entry" method (public virtual) ("view" "client") #f #f 129 26 129 37 ("error" "client" "view")}
        {Lisp-Entry "setup-list-entry" method (public virtual) ("view" "client") #f #f 133 26 133 42 ("error" "client" "view")}
        {Lisp-Entry "get-property-presentation" method (public virtual) ("view") #f #f 142 26 142 51 ("get-entry" "get-entry~" "get-presentation" "get-presentation~" "view")}
        {Lisp-Entry "set-property-presentation" method (public virtual) ("view" "presentation") #f #f 146 26 146 51 ("get-entry" "get-entry~" "set-presentation" "set-presentation~" "presentation" "view")}
        {Lisp-Entry "get-property-value" method (public virtual) ("view") #f #f 150 26 150 44 ("get-entry" "get-entry~" "get-value" "get-value~" "view")}
        {Lisp-Entry "set-property-value" method (public virtual) ("view" "value") #f #f 154 26 154 44 ("get-entry" "get-entry~" "set-value" "set-value~" "value" "view")}
        {Lisp-Entry "get-property-modified?" method (public virtual) ("view") #f #f 158 26 158 48 ("get-entry" "get-entry~" "get-modified?" "get-modified?~" "view")}
        {Lisp-Entry "set-property-modified?" method (public virtual) ("view" "value") #f #f 162 26 162 48 ("get-entry" "get-entry~" "set-modified?" "set-modified?~" "value" "view")}}}})
"Domain-Category"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Domain-Category.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.Domain-Category" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Domain-Category" class () ((extends . "Object")) #f #f 40 7 40 22 ("Object")
        {Lisp-Entry "name" slot () ((getter . "generate")) #f #f 43 8 43 12 ()}
        {Lisp-Entry "get-name" accessor () () #f #f 43 21 43 29 ()}
        {Lisp-Entry "rank" slot () ((getter . "generate")) #f #f 44 8 44 12 ()}
        {Lisp-Entry "get-rank" accessor () () #f #f 44 21 44 29 ()}
        {Lisp-Entry "image" slot () ((getter . "generate")) #f #f 45 8 45 13 ()}
        {Lisp-Entry "get-image" accessor () () #f #f 45 21 45 29 ()}
        {Lisp-Entry "initialize" method (override) ("name" "rank" "image") #f #f 48 20 48 30 ("image~self" "rank~self" "self" "name~self" "set!" "nextmethod" "image" "rank" "name")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 55 20 55 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "output")}}}})
"Domain-Chooser"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "choosers" "Domain-Chooser.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.choosers.Domain-Chooser" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Domain-Chooser" class (undocumented) ((extends . "View")) #f #f 47 20 47 34 ("View")
        {Lisp-Entry "names" property () ((initialize . "'()") (accessors . "generate")) #f #f 50 12 50 17 ()}
        {Lisp-Entry "get-names" accessor () () #f #f 50 46 50 54 ()}
        {Lisp-Entry "set-names" accessor () () #f #f 50 46 50 54 ()}
        {Lisp-Entry "selected" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 20 ()}
        {Lisp-Entry "get-selected" accessor () () #f #f 51 46 51 54 ()}
        {Lisp-Entry "set-selected" accessor () () #f #f 51 46 51 54 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("on-cancel" "114" "cancel" "default?:" "on-ok" ":host" "action-handler:" "24" "80" "351" "30" "ok" "Push-Button" "<Push-Button>" "200" "width:" "display-images?:" "toplevel-controls?:" "Tree-Node-Column" "<Tree-Node-Column>" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" ":images" "portfolio:" "2" "top-padding:" "detail" "filled-column:" "names-tree" "Tree-View" "<Tree-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "304" "33" "names-border" "name:" "Border-View" "<Border-View>" "Label" "Font" "font:" "16" "201" "9" "10" "Point" "position:" "title:" "Label-View" "<Label-View>" "388" "222" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 66 20 66 26 ("acquire-focus" "acquire-focus~" "setup-names" "get-tree" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-tree" method () () #f #f 78 11 78 19 ("names-tree" "locate")}
        {Lisp-Entry "get-text" method () () #f #f 82 11 82 19 ("text" "column-size" "locate")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 91 25 91 35 ()}
        {Lisp-Entry "host-position" method (meta override) () #f #f 95 25 95 38 ("300" "450" "Point")}
        {Lisp-Entry "host-size" method (meta override) () #f #f 99 25 99 34 ("120" "252" "Dimension")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 109 20 109 35 ("get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" method (override) ("evt") #f #f 115 20 115 35 ("cancel-modal" "cancel-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "setup-names" method () ("tree") #f #f 125 11 125 22 ("names" "list" "children:" "add-row" "add-row~" "user-data:" "color:" "checked?:" "title:" "parent:" "font:" "Check-Box" "checkbox" "selected" "member?" "checked?" "cadr" "localize" "title" "car" "string?" "name" "Label" "Label-Bold" "Font" "filled" "size" "eq?" "if" "font" "Black" "Color" "color" "4" "Rect" "layout-insets:" "fill" "layout-type:" "Layout-View" "new" "layout" "0" "border" "let*" "info" "for-each" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "tree")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 147 20 147 36 ("get-output" "get-output~" "put" "put~" "name" "get-checked?" "get-checked?~" "Check-Box" "is?" "and" "when" "get-user-data" "get-user-data~" "checkbox" "rank" "row" "lambda" "for-each-row" "for-each-row~" "List-Factory" "new" "fact" "get-tree" "tree" "let")}}}})
"Domain-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Domain-Row.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.designer.row.Domain-Row" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Domain-Row" class (undocumented) ((extends . "Value-Row")) #f #f 47 20 47 30 ("Value-Row")
        {Lisp-Entry "domain" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 18 ()}
        {Lisp-Entry "get-domain" accessor () () #f #f 50 43 50 51 ()}
        {Lisp-Entry "set-domain" accessor () () #f #f 50 43 50 51 ()}
        {Lisp-Entry "violation" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 21 ()}
        {Lisp-Entry "get-violation" accessor () () #f #f 51 46 51 54 ()}
        {Lisp-Entry "set-violation" accessor () () #f #f 51 46 51 54 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 59 20 59 30 ("self" "domain~self" "set!" "nextmethod" "apply" "others" "domain" "bind-keywords" "rest")}
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 70 20 70 32 ("nextmethod" "focus-editor" "value" "not" "set-edited-value" "enter-edited-value" "begin" "Boolean-Domain" "domain" "is?" "if" "pos")}
        {Lisp-Entry "present" method (override) ("value") #f #f 85 20 85 27 ("domain" "present" "present~" "value")}
        {Lisp-Entry "get-entry" method () () #f #f 89 11 89 20 ("editor" "first-child" "first-child~")}
        {Lisp-Entry "draw-data" method (override) ("surface" "context" "value" "column" "row" "data" "width" "height") #f #f 98 20 98 29 ("domain" "draw-data" "draw-data~" "height" "width" "data" "row" "column" "value" "context" "surface")}
        {Lisp-Entry "save-edition" method (override) () #f #f 107 20 107 32 ("1" "parent" "row->line" "row->line~" "Cell" "new" "invalidate-cell" "invalidate-cell~" "set-edited-modified?" "enter-edited-value" "set-title" "set-title~" "if" "Red" "Color" "set-frame-color" "set-frame-color~" "cons" "self" "violation~self" "set!" "get-parent" "get-cell-editor" "get-cell-editor~" "get-preserved-data" "get-preserved-data~" "label" "let" "validate-text" "validate-text~" "violation" "get-entry" "tab-view" "tab-view~" "get-string-content" "get-string-content~" "Text-Domain" "domain" "is?" "and" "string" "let*" "get-edited-modified?" "when")}
        {Lisp-Entry "new-editor" method (override) () #f #f 122 20 122 30 ("get-client" "domain" "setup-entry" "setup-entry~" "self" "value-row:" "Domain-Editor" "new" "editor" "let")}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 128 20 128 36 ("get-entry" "get-value" "get-value~")}
        {Lisp-Entry "get-edited-imports" method (override) () #f #f 132 20 132 38 ("get-entry" "get-imports" "get-imports~")}
        {Lisp-Entry "set-edited-violation" method () () #f #f 136 11 136 31 ("violation" "car" "get-entry" "tab-view" "tab-view~" "set-string-content" "set-string-content~")}
        {Lisp-Entry "set-edited-value" method (override) ("value") #f #f 140 20 140 36 ("get-entry" "set-value" "set-value~" "set-edited-violation" "violation" "if" "value")}
        {Lisp-Entry "get-edited-modified?" method (override) () #f #f 146 20 146 40 ("get-entry" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-edited-modified?" method (override) ("flag") #f #f 150 20 150 40 ("get-entry" "set-modified?" "set-modified?~" "flag")}
        {Lisp-Entry "focus-editor" method (override) ("." "rest") #f #f 154 20 154 32 ("select-all" "select-all~" "acquire-focus" "acquire-focus~" "on-editor-action" "combo" "locate" "locate~" "set-action-handler" "set-action-handler~" "Enumeration-Entry" "is?" "on-editor-return" "set-return-press-handler" "set-return-press-handler~" "on-editor-tab" "set-tab-press-handler" "set-tab-press-handler~" "on-editor-arrow" "method-name:" "self" "target:" "Event-Handler" "new" "set-arrow-press-handler" "set-arrow-press-handler~" "when" "tab-view" "tab-view~" "view" "get-entry" "entry" "let*" "rest")}
        {Lisp-Entry "on-editor-tab" method () ("evt") #f #f 167 11 167 24 ("editor-tab" "evt")}
        {Lisp-Entry "on-editor-return" method () ("evt") #f #f 171 11 171 27 ("editor-return" "evt")}
        {Lisp-Entry "on-editor-arrow" method () ("evt") #f #f 175 11 175 26 ("arrow-press" "arrow-press~" "arrow-move" "arrow-move~" "Text-View" "typecase" "else" "editor-down-arrow" "down" "editor-up-arrow" "up" "case" "get-entry" "tab-view" "tab-view~" "view" "direction:" "get-property" "get-property~" "direction" "let" "evt")}
        {Lisp-Entry "on-editor-action" method () ("evt") #f #f 187 11 187 27 ("editor-return" "on-action" "on-action~" "get-entry" "locate" "locate~" "combo" "let" "evt")}
        {Lisp-Entry "show-cursor" method (override) () #f #f 193 20 193 31 ("body" "editor" "locate" "locate~" "show-text-cursor" "show-text-cursor~")}
        {Lisp-Entry "focused-editor" method (override) () #f #f 198 20 198 34 ("body" "editor" "locate" "locate~")}}
      {Lisp-Entry "Domain-Editor" class () ((extends . "Layout-View")) #f #f 209 7 209 20 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 212 3 212 7 ("fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "value-row" property () ((initialize . "#f") (accessors . "generate")) #f #f 216 12 216 21 ()}
        {Lisp-Entry "get-value-row" accessor () () #f #f 216 46 216 54 ()}
        {Lisp-Entry "set-value-row" accessor () () #f #f 216 46 216 54 ()}}}})
"Editor-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Editor-Entry.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.designer.entry.Editor-Entry" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Editor-Entry" class () ((extends . "Component")) #f #f 45 7 45 19 ("Component")
        {Lisp-Entry "entry-class" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 23 ()}
        {Lisp-Entry "get-entry-class" accessor () () #f #f 48 48 48 56 ()}
        {Lisp-Entry "set-entry-class" accessor () () #f #f 48 48 48 56 ()}}}})
"Editor-Event"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "event" "Editor-Event.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.event.Editor-Event" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Editor-Event" class () ((extends . "Event")) #f #f 43 7 43 19 ("Event")}}})
"Editor-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Editor-Row.jazz"} 240043008. jazz
    {Lisp-Entry "jazz.designer.row.Editor-Row" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Editor-Row" class (undocumented) ((extends . "Tree-Row")) #f #f 43 20 43 30 ("Tree-Row")
        {Lisp-Entry "editor" slot () ((initialize . "#f") (accessors . "generate")) #f #f 46 8 46 14 ()}
        {Lisp-Entry "get-editor" accessor () () #f #f 46 39 46 47 ()}
        {Lisp-Entry "set-editor" accessor () () #f #f 46 39 46 47 ()}
        {Lisp-Entry "auto-in-place?" method (override) () #f #f 54 20 54 34 ()}
        {Lisp-Entry "layout" method (override) () #f #f 63 20 63 26 ("get-height" "get-height~" "get-width" "get-width~" "-" "Dimension" "set-size" "set-size~" "0" "Point" "new" "set-position" "set-position~" "1" "get-indentation" "get-indentation~" "level" "*" "12" "+" "width" "get-size" "size" "get-tree" "tree" "let*" "editor" "when")}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 77 20 77 24 ("get-height" "get-width" "self" "draw-level" "draw-level~" "get-node-column" "get-node-column~" "column" "get-tree" "tree" "let*" "context" "surface")}}}})
"Editor-Suite"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Editor-Suite.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.designer.entry.Editor-Suite" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Editor-Suite" class () ((extends . "Component")) #f #f 45 7 45 19 ("Component")}}})
"Enumeration-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Enumeration-Domain.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.designer.domain.Enumeration-Domain" module (protected) () #f #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.locale" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Enumeration-Domain" class () ((extends . "Domain")) #f #f 45 7 45 25 ("Domain")
        {Lisp-Entry "choices" property () ((initialize . "'()") (accessors . "generate")) #f #f 48 12 48 19 ()}
        {Lisp-Entry "get-choices" accessor () () #f #f 48 48 48 56 ()}
        {Lisp-Entry "set-choices" accessor () () #f #f 48 48 48 56 ()}
        {Lisp-Entry "condensed?" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 22 ()}
        {Lisp-Entry "get-condensed?" accessor () () #f #f 49 48 49 56 ()}
        {Lisp-Entry "set-condensed?" accessor () () #f #f 49 48 49 56 ()}
        {Lisp-Entry "strict?" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 19 ()}
        {Lisp-Entry "get-strict?" accessor () () #f #f 50 48 50 56 ()}
        {Lisp-Entry "set-strict?" accessor () () #f #f 50 48 50 56 ()}
        {Lisp-Entry "limit" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 17 ()}
        {Lisp-Entry "get-limit" accessor () () #f #f 51 48 51 56 ()}
        {Lisp-Entry "set-limit" accessor () () #f #f 51 48 51 56 ()}
        {Lisp-Entry "validate-value" method (override) ("property" "value" "component" "root" "client" "context" "manager") #f #f 59 20 59 34 ("property:" "map" "join" "format" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "key:" "choices" "member?" "when" "cadr" "localize" "car" "cdr" "not" "if" "choice" "present-choice" "define" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method (override) ("value") #f #f 74 20 74 27 ("cadr" "localize" "->string" "choices" "assq" "pair" "let" "not" "if" "value")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 88 20 88 31 ("choices" "set-choices" "set-choices~" "condensed?" "set-condensed?" "set-condensed?~" "locate" "locate~" "combo" "self" "domain:" "get-size" "get-size~" "size:" "parent:" "Enumeration-Entry" "new" "entry" "let" "client" "view")}
        {Lisp-Entry "setup-list-entry" method (override) ("view" "client") #f #f 96 20 96 36 ("choices" "setup" "setup~" "self" "domain:" "parent:" "Enumeration-List-Entry" "new" "entry" "let" "client" "view")}}}})
"Enumeration-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Enumeration-Entry.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.entry.Enumeration-Entry" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.tie" "jazz.locale" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Enumeration-Entry" class () ((extends . "Property-Entry")) #f #f 47 7 47 24 ("Property-Entry")
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("top-padding:" "1" "left-padding:" "body" "!" "<!>" "selectable?:" "condensed?:" "combo" "name:" "Entry-Combo-Box" "<Entry-Combo-Box>" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 56 20 56 26 ("self" "body" "set-editor" "set-editor~" "di=?" "combo" "locate" "set-entry-test" "set-entry-test~" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" method (override) () #f #f 67 20 67 28 ("body" "combo" "locate")}
        {Lisp-Entry "setup-for-grid" method (override) () #f #f 76 20 76 34 ("1" "set-top-padding" "set-top-padding~" "0" "set-left-padding" "set-left-padding~" "body" "combo" "locate" "text" "let")}
        {Lisp-Entry "validate" method (override) ("domain") #f #f 87 20 87 28 ("else" "format-plural" "format" "tie" "string-length" ">" "string?" "get-nullable?" "get-nullable?~" "cond" "value" "french:" "english:" "Locales" "message:" "Property-Violation" "new" "car" "key:" "get-value" "member?" "combo" "locate" "valid-value?" "valid-value?~" "not" "get-strict?" "get-strict?~" "and" "if" "get-limit" "get-limit~" "limit" "get-choices" "get-choices~" "choices" "let" "domain")}
        {Lisp-Entry "get-value" method (override) () #f #f 112 20 112 29 ("combo" "locate" "get-value" "get-value~")}
        {Lisp-Entry "set-value" method (override) ("value") #f #f 116 20 116 29 ("combo" "locate" "set-value" "set-value~" "value")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 120 20 120 33 ("combo" "locate" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-modified?" method (override) ("value") #f #f 124 20 124 33 ("combo" "locate" "set-modified?" "set-modified?~" "value")}
        {Lisp-Entry "set-editable?" method (override) ("value") #f #f 133 20 133 33 ("combo" "locate" "set-editable?" "set-editable?~" "value")}}}})
"Enumeration-List-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Enumeration-List-Entry.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.entry.Enumeration-List-Entry" module (protected) () #f #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Enumeration-List-Entry" class () ((extends . "Property-Entry")) #f #f 47 7 47 29 ("Property-Entry")
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("200" "width:" "toplevel-controls?:" "controls?:" "Tree-Node-Column" "<Tree-Node-Column>" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" ":images" "portfolio:" "entry" "filled-column:" "show-header?:" "tree" "Tree-View" "<Tree-View>" "document" "style:" "shown?:" "Tree-Header" "<Tree-Header>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "border" "name:" "Border-View" "<Border-View>" "install" "<install>")}
        {Lisp-Entry "setup" method (protected) ("client" "key") #f #f 66 21 66 26 ("patch-tree" "list" "children:" "add-row" "add-row~" "user-data:" "color:" "title:" "parent:" "font:" "Check-Box" "checkbox" "Label" "Label-Bold" "Font" "filled" "size" "eq?" "if" "font" "Black" "Color" "color" "4" "Rect" "layout-insets:" "fill" "layout-type:" "Layout-View" "new" "layout" "0" "border" "title" "get-name" "get-name~" "name" "let*" "component" "for-each" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "locate" "tree" "get-creator" "get-creator~" "child" "child~" "get-children" "get-children~" "components" "let" "key" "client")}
        {Lisp-Entry "patch-tree" method (public) () #f #f 86 18 86 28 ("layout-drawing" "layout-drawing~" "rank" "row" "lambda" "for-each-visible-row" "for-each-visible-row~" "locate" "tree" "let")}
        {Lisp-Entry "get-value" method (override) () #f #f 98 20 98 29 ("get-output" "get-output~" "put" "put~" "get-checked?" "get-checked?~" "when" "name" "checkbox" "row" "lambda" "for-each-checkbox" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "set-value" method (override) ("value") #f #f 107 20 107 29 ("set-checked?" "set-checked?~" "member?" "checked?" "let" "name" "checkbox" "row" "lambda" "for-each-checkbox" "value")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 114 20 114 33 ("continuation-return" "get-modified?" "get-modified?~" "when" "name" "checkbox" "row" "for-each-checkbox" "return" "lambda" "continuation-capture")}
        {Lisp-Entry "set-modified?" method (override) ("value") #f #f 124 20 124 33 ("set-modified?" "set-modified?~" "name" "checkbox" "row" "lambda" "for-each-checkbox" "value")}
        {Lisp-Entry "for-each-checkbox" method () ("proc") #f #f 135 11 135 28 ("name" "Check-Box" "is?" "when" "get-user-data" "get-user-data~" "checkbox" "rank" "row" "lambda" "for-each-row" "for-each-row~" "locate" "tree" "let" "proc")}}}})
"Enumeration-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Enumeration-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.Enumeration-Row" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.locale" "jazz.designer")}
      {Lisp-Entry "Enumeration-Row" class (undocumented) ((extends . "Combo-Row")) #f #f 45 20 45 35 ("Combo-Row")
        {Lisp-Entry "composite?" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 22 ()}
        {Lisp-Entry "get-composite?" accessor () () #f #f 49 47 49 55 ()}
        {Lisp-Entry "set-composite?" accessor () () #f #f 49 47 49 55 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 57 20 57 30 ("choose" "set-kind" "composite?~self" "self" "choices~self" "set!" "nextmethod" "apply" "others" "composite?" "choices" "bind-keywords" "rest")}
        {Lisp-Entry "combo-choose" method (override) () #f #f 70 20 70 32 ("focus-editor" "enter-edited-value" "set-edited-value" "selected:" "choices" "names:" "Domain-Chooser" "get-modal" "value" "let")}
        {Lisp-Entry "present" method (override) ("names") #f #f 83 20 83 27 ("choices" "assq" "cadr" "localize" "name" "lambda" "map" "join" "null?" "if" "names")}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 97 20 97 36 ("equal?" "test:" "cadr" "localize" "info" "key:" "choices" "find-in" "car" "title" "lambda" "map" "parse-strings" "strings" "=" "empty-string?" "or" "if" "editor" "get-body" "get-body~" "get-string-content" "get-string-content~" "string" "let")}
        {Lisp-Entry "set-edited-value" method (override) ("value") #f #f 107 20 107 36 ("present" "editor" "get-body" "get-body~" "set-string-content" "set-string-content~" "value")}}}})
"File-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "File-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.File-Domain" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "File-Domain" class () ((extends . "Domain")) #f #f 43 7 43 18 ("Domain")
        {Lisp-Entry "present" method (override) ("value") #f #f 51 20 51 27 ("present" "present~" "value")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 60 20 60 31 ("file" "moniker" "locate" "locate~" "set-protocol" "set-protocol~" "self" "domain:" "get-size" "get-size~" "size:" "parent:" "Pathname-Entry" "new" "entry" "let" "client" "view")}}}})
"File-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "File-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.File-Row" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.dialog" "jazz.designer")}
      {Lisp-Entry "File-Row" class (undocumented) ((extends . "Pathname-Row")) #f #f 44 20 44 28 ("explicit" "Pathname-Row")
        {Lisp-Entry "mode" property () ((accessors . "explicit")) #f "<void>" 47 12 47 16 ("void" "<void>")}
        {Lisp-Entry "parameters" property () ((accessors . "explicit")) #f "<void>" 48 12 48 22 ("void" "<void>")}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 56 20 56 30 ("set-parameters" "set-mode" "file" "editor" "set-protocol" "set-protocol~" "nextmethod" "apply" "others" "parameters" "open" "mode" "bind-keywords" "rest")}
        {Lisp-Entry "get-mode" method (public) () #f #f 69 18 69 26 ("editor" "get-mode" "get-mode~")}
        {Lisp-Entry "set-mode" method (public) ("value") #f #f 73 18 73 26 ("editor" "set-mode" "set-mode~" "value")}
        {Lisp-Entry "get-parameters" method (public) () #f #f 77 18 77 32 ("editor" "get-parameters" "get-parameters~")}
        {Lisp-Entry "set-parameters" method (public) ("value") #f #f 81 18 81 32 ("editor" "set-parameters" "set-parameters~" "value")}
        {Lisp-Entry "combo-choose" method () () #f #f 90 11 90 23 ("focus-editor" "enter-edited-value" "set-edited-value" "parameters" "choose-file" "apply" "file" "let")}}}})
"Font-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Font-Domain.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.designer.domain.Font-Domain" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.graphic" "jazz.locale" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Font-Domain" class () ((extends . "Domain")) #f #f 46 7 46 18 ("100" "Domain")
        {Lisp-Entry "width" property () ((initialize . "100") (accessors . "generate")) #f #f 49 12 49 17 ()}
        {Lisp-Entry "get-width" accessor () () #f #f 49 48 49 56 ()}
        {Lisp-Entry "set-width" accessor () () #f #f 49 48 49 56 ()}
        {Lisp-Entry "choices" property () ((initialize . "'()") (accessors . "generate")) #f #f 50 12 50 19 ()}
        {Lisp-Entry "get-choices" accessor () () #f #f 50 48 50 56 ()}
        {Lisp-Entry "set-choices" accessor () () #f #f 50 48 50 56 ()}
        {Lisp-Entry "condensed?" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 22 ()}
        {Lisp-Entry "get-condensed?" accessor () () #f #f 51 48 51 56 ()}
        {Lisp-Entry "set-condensed?" accessor () () #f #f 51 48 51 56 ()}
        {Lisp-Entry "strict?" property () ((initialize . "#f") (accessors . "generate")) #f #f 52 12 52 19 ()}
        {Lisp-Entry "get-strict?" accessor () () #f #f 52 48 52 56 ()}
        {Lisp-Entry "set-strict?" accessor () () #f #f 52 48 52 56 ()}
        {Lisp-Entry "limit" property () ((initialize . "#f") (accessors . "generate")) #f #f 53 12 53 17 ()}
        {Lisp-Entry "get-limit" accessor () () #f #f 53 48 53 56 ()}
        {Lisp-Entry "set-limit" accessor () () #f #f 53 48 53 56 ()}
        {Lisp-Entry "validate-value" method (override) ("property" "value" "component" "root" "client" "context" "manager") #f #f 61 20 61 34 ("property:" "map" "join" "format" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "key:" "choices" "member?" "when" "cadr" "localize" "car" "cdr" "not" "if" "choice" "present-choice" "define" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method (override) ("value") #f #f 76 20 76 27 ("cadr" "localize" "->string" "choices" "assq" "pair" "let" "not" "if" "value")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 90 20 90 31 ("combo" "locate" "locate~" "set-choices" "set-choices~" "domain:" "19" "width" "Dimension" "size:" "parent:" "Enumeration-Entry" "new" "entry" "symbol->string" "key:" "symbolic-fonts" "nu<?" "sort" "->string" "title" "symbolic-font" "font" "let" "name" "lambda" "map" "list" "cons" "self" "choices" "choices~self" "set!" "client" "view")}}}})
"Font-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Font-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.Font-Row" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Font-Row" class (undocumented) ((extends . "Combo-Row")) #f #f 44 20 44 28 ("Combo-Row")
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 47 20 47 30 ("symbol->string" "key:" "symbolic-fonts" "nu<?" "sort" "list" "->string" "title" "symbolic-font" "font" "let" "name" "lambda" "map" "set-choices" "nextmethod" "apply" "rest")}}}})
"Foreign-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Foreign-Domain.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.domain.Foreign-Domain" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Foreign-Domain" class () ((extends . "Domain")) #f #f 43 7 43 21 ("Domain")}
      {Lisp-Entry "Foreign-Domain" class () ((extends . "Domain")) #f #f 49 7 49 21 ("Domain")
        {Lisp-Entry "key" property () ((initialize . "#f") (accessors . "generate")) #f #f 52 12 52 15 ()}
        {Lisp-Entry "get-key" accessor () () #f #f 52 46 52 54 ()}
        {Lisp-Entry "set-key" accessor () () #f #f 52 46 52 54 ()}
        {Lisp-Entry "objects" property () ((initialize . "'()") (accessors . "generate")) #f #f 53 12 53 19 ()}
        {Lisp-Entry "get-objects" accessor () () #f #f 53 46 53 54 ()}
        {Lisp-Entry "set-objects" accessor () () #f #f 53 46 53 54 ()}
        {Lisp-Entry "criteria" property () ((initialize . "#f") (accessors . "generate")) #f #f 54 12 54 20 ()}
        {Lisp-Entry "get-criteria" accessor () () #f #f 54 46 54 54 ()}
        {Lisp-Entry "set-criteria" accessor () () #f #f 54 46 54 54 ()}
        {Lisp-Entry "validate-value" method () ("property" "value" "component" "root" "client" "context" "manager") #f #f 62 11 62 25 ("property:" "violation-message" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "member?" "not" "when" "key" "foreign-values" "values" "let" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "foreign-values" method () ("client" "key") #f #f 68 11 68 25 ("criteria" "search-descendants" "search-descendants~" "get-name" "get-name~" "map" "child" "child~" "foreign" "let" "key" "client")}
        {Lisp-Entry "violation-message" method (protected virtual) ("value") #f #f 73 29 73 46 ("else" "join" "pair?" "key" "not" "cond" "format" "value")}
        {Lisp-Entry "present" method () ("value") #f #f 86 11 86 18 ("join" "pair?" "not" "if" "value")}
        {Lisp-Entry "setup-entry" method () ("view" "client") #f #f 99 11 99 22 ("key" "foreign-choices" "combo" "locate" "locate~" "set-choices" "set-choices~" "self" "domain:" "parent:" "Foreign-Entry" "new" "entry" "let" "client" "view")}
        {Lisp-Entry "foreign-choices" method () ("client" "key") #f #f 104 11 104 26 ("list" "get-name" "get-name~" "name" "component" "lambda" "map" "child" "child~" "get-children" "get-children~" "or" "objects" "let" "key" "client")}
        {Lisp-Entry "setup-list-entry" method () ("view" "client") #f #f 112 11 112 27 ("key" "setup" "setup~" "parent:" "Foreign-List-Entry" "new" "entry" "let" "client" "view")}}}})
"Foreign-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Foreign-Entry.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.entry.Foreign-Entry" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Foreign-Entry" class () ((extends . "Property-Entry")) #f #f 45 7 45 20 ("Property-Entry")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("Text-Base" "Text-Style" "base-style:" "top-padding:" "2" "left-padding:" "body" "!" "<!>" "combo" "Combo-Box" "<Combo-Box>" "edge" "border-type:" "border" "name:" "Border-View" "<Border-View>" "install" "<install>")}
        {Lisp-Entry "get-value" method (override) () #f #f 60 20 60 29 ("combo" "locate" "get-value" "get-value~")}
        {Lisp-Entry "set-value" method (override) ("value") #f #f 64 20 64 29 ("combo" "locate" "set-value" "set-value~" "value")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 68 20 68 33 ("combo" "locate" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-modified?" method (override) ("value") #f #f 72 20 72 33 ("combo" "locate" "set-modified?" "set-modified?~" "value")}}}})
"Foreign-List-Chooser"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "choosers" "Foreign-List-Chooser.jazz"} 222341472. jazz
    {Lisp-Entry "jazz.designer.choosers.Foreign-List-Chooser" module (protected) () #f #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Foreign-List-Chooser" class (undocumented) ((extends . "View")) #f #f 46 20 46 40 ("View")
        {Lisp-Entry "foreign" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 19 ()}
        {Lisp-Entry "get-foreign" accessor () () #f #f 49 55 49 63 ()}
        {Lisp-Entry "set-foreign" accessor () () #f #f 49 55 49 63 ()}
        {Lisp-Entry "foreign-objects" property () ((initialize . "'()") (accessors . "generate")) #f #f 50 12 50 27 ()}
        {Lisp-Entry "get-foreign-objects" accessor () () #f #f 50 55 50 63 ()}
        {Lisp-Entry "set-foreign-objects" accessor () () #f #f 50 55 50 63 ()}
        {Lisp-Entry "key" property () ((initialize . "#f") (accessors . "generate")) #f #f 51 12 51 15 ()}
        {Lisp-Entry "get-key" accessor () () #f #f 51 55 51 63 ()}
        {Lisp-Entry "set-key" accessor () () #f #f 51 55 51 63 ()}
        {Lisp-Entry "composite?" property () ((initialize . "#t") (accessors . "generate")) #f #f 52 12 52 22 ()}
        {Lisp-Entry "get-composite?" accessor () () #f #f 52 55 52 63 ()}
        {Lisp-Entry "set-composite?" accessor () () #f #f 52 55 52 63 ()}
        {Lisp-Entry "allow-duplicates?" property () ((initialize . "#f") (accessors . "generate")) #f #f 53 12 53 29 ()}
        {Lisp-Entry "get-allow-duplicates?" accessor () () #f #f 53 55 53 63 ()}
        {Lisp-Entry "set-allow-duplicates?" accessor () () #f #f 53 55 53 63 ()}
        {Lisp-Entry "all" property () ((initialize . "'()") (accessors . "generate")) #f #f 54 12 54 15 ()}
        {Lisp-Entry "get-all" accessor () () #f #f 54 55 54 63 ()}
        {Lisp-Entry "set-all" accessor () () #f #f 54 55 54 63 ()}
        {Lisp-Entry "value" property () ((initialize . "'()") (accessors . "generate")) #f #f 55 12 55 17 ()}
        {Lisp-Entry "get-value" accessor () () #f #f 55 55 55 63 ()}
        {Lisp-Entry "set-value" accessor () () #f #f 55 55 55 63 ()}
        {Lisp-Entry "form" form () () #f #f 58 3 58 7 ("on-cancel" "222" "cancel" "default?:" "on-ok" ":host" "Event-Handler" "action-handler:" "24" "80" "268" "138" "title:" "ok" "Push-Button" "<Push-Button>" "8" "253" "Horizontal-Line" "<Horizontal-Line>" "230" "430" "10" "Point" "position:" "entry" "name:" "Foreign-List-Entry" "<Foreign-List-Entry>" "305" "450" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 66 20 66 26 ("value" "set-value" "set-value~" "allow-duplicates?" "set-allow-duplicates?" "set-allow-duplicates?~" "composite?" "set-composite?" "set-composite?~" "all" "get-children" "get-children~" "foreign-objects" "null?" "key" "map" "foreign" "if" "set-all" "set-all~" "present" "entry" "locate" "set-presenter" "set-presenter~" "nextmethod" "rest")}
        {Lisp-Entry "install-in-host" method (override) ("host") #f #f 75 20 75 35 ("composite?" "if" "get-host" "set-title" "set-title~" "entry" "locate" "guest-installed-in-host" "guest-installed-in-host~" "nextmethod" "host")}
        {Lisp-Entry "present" definition () ("object") #f #f 88 15 88 22 ("join" "list?" "if" "object")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 99 20 99 36 ("entry" "locate" "get-result" "get-result~")}}}})
"Foreign-List-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Foreign-List-Entry.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.entry.Foreign-List-Entry" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Foreign-List-Entry" class () ((extends . "Property-Entry")) #f #f 46 7 46 25 ("explicit" "Property-Entry")
        {Lisp-Entry "composite?" property () ((initialize . "#t") (accessors . "explicit")) #f #f 49 12 49 22 ()}
        {Lisp-Entry "allow-duplicates?" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 29 ()}
        {Lisp-Entry "get-allow-duplicates?" accessor () () #f #f 50 55 50 63 ()}
        {Lisp-Entry "set-allow-duplicates?" accessor () () #f #f 50 55 50 63 ()}
        {Lisp-Entry "presenter" property () ((initialize . "#f") (accessors . "explicit")) #f #f 51 12 51 21 ()}
        {Lisp-Entry "all" property () ((initialize . "'()") (accessors . "explicit")) #f #f 52 12 52 15 ()}
        {Lisp-Entry "value" property () ((initialize . "#f") (accessors . "explicit")) #f #f 53 12 53 17 ()}
        {Lisp-Entry "to" slot () ((initialize . "'()")) #f #f 56 8 56 10 ()}
        {Lisp-Entry "form" form () () #f #f 59 3 59 7 ("to-entry" "to-tree" "to-border" "on-remove" "remove" "on-add" "action-handler:" "22" "80" "title:" "add" "Push-Button" "<Push-Button>" "200" "width:" "display-images?:" "toplevel-controls?:" "controls?:" "Tree-Node-Column" "<Tree-Node-Column>" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-tab-press" "tab-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" ":form" "Event-Handler" "selection-handler:" ":images" "portfolio:" "show-unfocused-selection?:" "multiple-selection?:" "row" "selection-mode:" "from-entry" "filled-column:" "show-header?:" "from-tree" "Tree-View" "<Tree-View>" "document" "style:" "shown?:" "Tree-Header" "<Tree-Header>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "from-border" "name:" "Border-View" "<Border-View>" "320" "352" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "guest-installed-in-host" method (protected) () #f #f 79 21 79 44 ("focus-and-select" "focus-and-select~" "from-tree" "locate" "tree" "let")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 89 25 89 35 ()}
        {Lisp-Entry "host-position" method (meta override) () #f #f 93 25 93 38 ("300" "450" "Point")}
        {Lisp-Entry "host-size" method (meta override) () #f #f 97 25 97 34 ("320" "252" "Dimension")}
        {Lisp-Entry "get-result" method (public) () #f #f 106 18 106 28 ("<" "sort" "composite?" "if" "to->value" "value" "let")}
        {Lisp-Entry "get-presenter" method (public) () #f #f 118 18 118 31 ("presenter")}
        {Lisp-Entry "set-presenter" method (public) ("value") #f #f 122 18 122 31 ("update" "presenter" "set!" "value")}
        {Lisp-Entry "get-all" method (public) () #f #f 127 18 127 25 ("all")}
        {Lisp-Entry "set-all" method (public) ("value") #f #f 131 18 131 25 ("update" "all" "set!" "value")}
        {Lisp-Entry "get-value" method (override) () #f #f 136 20 136 29 ("value")}
        {Lisp-Entry "set-value" method (override) ("v") #f #f 140 20 140 29 ("update" "value->to" "to" "value" "set!" "v")}
        {Lisp-Entry "get-composite?" method (public) () #f #f 146 18 146 32 ("composite?")}
        {Lisp-Entry "set-composite?" method (public) ("value") #f #f 150 18 150 32 ("from-tree" "set-multiple-selection?" "set-multiple-selection?~" "if" "add" "locate" "set-title" "set-title~" "value->to" "to" "composite?" "set!" "value")}
        {Lisp-Entry "value->to" method () () #f #f 158 11 158 20 ("list" "not" "value" "composite?" "if")}
        {Lisp-Entry "to->value" method () () #f #f 167 11 167 20 ("car" "not" "to" "composite?" "if")}
        {Lisp-Entry "setup" method (protected) ("client" "key") #f #f 180 21 180 26 ("get-children" "get-children~" "get-name" "get-name~" "component" "lambda" "map" "set-all" "get-creator" "get-creator~" "child" "child~" "foreign" "let" "key" "client")}
        {Lisp-Entry "layout" method (override) () #f #f 192 20 192 26 ("30" "remove" "10" "+" "add" "Dimension" "set-size" "set-size~" "0" "Point" "new" "set-position" "set-position~" "52" "buttons-pos" "2" "100" "-" "quotient" "tree-width" "to-border" "to" "from-border" "locate" "from" "get-height" "get-height~" "height" "get-width" "get-width~" "width" "get-size" "size" "let*")}
        {Lisp-Entry "on-selection-change" method () ("evt") #f #f 213 11 213 30 ("update-buttons" "evt")}
        {Lisp-Entry "on-double-click" method () ("evt") #f #f 217 11 217 26 ("on-remove" "remove" "to-tree" "on-add" "add" "locate" "get-enabled?" "get-enabled?~" "when" "from-tree" "get-name" "get-name~" "case" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "on-add" method () ("evt") #f #f 224 11 224 17 ("set-modified?" "acquire-focus" "acquire-focus~" "user-data-indexes" "user-data-indexes~" "set-selection" "set-selection~" "allow-duplicates?" "update" "append" "composite?" "if" "to" "set!" "get-selected-data" "get-selected-data~" "values" "to-tree" "locate" "from-tree" "let*" "evt")}
        {Lisp-Entry "on-remove" method () ("evt") #f #f 237 11 237 20 ("set-modified?" "user-data-indexes" "user-data-indexes~" "set-selection" "set-selection~" "acquire-focus" "acquire-focus~" "allow-duplicates?" "unless" "update" "difference" "to" "set!" "get-selected-data" "get-selected-data~" "values" "to-tree" "locate" "from-tree" "let*" "evt")}
        {Lisp-Entry "update-buttons" method () () #f #f 249 11 249 25 ("remove" "add" "set-enabled?" "set-enabled?~" "to?" "to-tree" "get-selection" "get-selection~" "from?" "locate" "from-tree" "let*")}
        {Lisp-Entry "on-tab-press" method (override) ("evt") #f #f 258 20 258 32 ("to-tree" "locate" "focus-and-select" "focus-and-select~" "from-tree" "get-name" "get-name~" "case" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 268 20 268 35 ("get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" method (override) ("evt") #f #f 274 20 274 35 ("cancel-modal" "cancel-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update" method () () #f #f 284 11 284 17 ("update-buttons" "presenter" "not" "to-tree" "update-to" "equal?" "test:" "to" "difference" "all" "allow-duplicates?" "if" "<" "sort" "user-data:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "add-row~" "present" "title" "object" "for-each" "lambda" "with-update-locked" "with-update-locked~" "remove-every-row" "remove-every-row~" "locate" "from-tree" "let" "update-from" "define")}}}})
"Foreign-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Foreign-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.Foreign-Row" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.designer")}
      {Lisp-Entry "Foreign-Row" class (undocumented) ((extends . "Combo-Row")) #f #f 44 20 44 31 ("explicit" "Combo-Row")
        {Lisp-Entry "foreign" property () ((accessors . "explicit")) #f #f 47 12 47 19 ()}
        {Lisp-Entry "foreign-objects" property () ((accessors . "explicit")) #f #f 48 12 48 27 ()}
        {Lisp-Entry "key" property () ((accessors . "generate")) #f #f 49 12 49 15 ()}
        {Lisp-Entry "get-key" accessor () () #f #f 49 40 49 48 ()}
        {Lisp-Entry "set-key" accessor () () #f #f 49 40 49 48 ()}
        {Lisp-Entry "composite?" property () ((accessors . "generate")) #f #f 50 12 50 22 ()}
        {Lisp-Entry "get-composite?" accessor () () #f #f 50 40 50 48 ()}
        {Lisp-Entry "set-composite?" accessor () () #f #f 50 40 50 48 ()}
        {Lisp-Entry "allow-duplicates?" property () ((accessors . "generate")) #f #f 51 12 51 29 ()}
        {Lisp-Entry "get-allow-duplicates?" accessor () () #f #f 51 40 51 48 ()}
        {Lisp-Entry "set-allow-duplicates?" accessor () () #f #f 51 40 51 48 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 59 20 59 30 ("choose" "set-kind" "allow-duplicates?~self" "composite?~self" "get-name" "get-name~" "or" "key~self" "foreign-objects~self" "self" "foreign~self" "set!" "nextmethod" "apply" "others" "allow-duplicates?" "composite?" "key" "foreign-objects" "foreign" "bind-keywords" "rest")}
        {Lisp-Entry "get-foreign" method (public) () #f #f 75 18 75 29 ("foreign")}
        {Lisp-Entry "set-foreign" method (public) ("value") #f #f 79 18 79 29 ("foreign-objects" "foreign-choices" "set-choices" "foreign" "set!" "value")}
        {Lisp-Entry "get-foreign-objects" method (public) () #f #f 84 18 84 37 ("foreign-objects")}
        {Lisp-Entry "set-foreign-objects" method (public) ("value") #f #f 88 18 88 37 ("foreign" "foreign-choices" "set-choices" "foreign-objects" "set!" "value")}
        {Lisp-Entry "foreign-choices" method () ("foreign" "foreign-objects") #f #f 93 11 93 26 ("get-children" "get-children~" "null?" "if" "list" "key" "name" "let" "component" "lambda" "map" "when" "foreign-objects" "foreign")}
        {Lisp-Entry "combo-choose" method (override) () #f #f 108 20 108 32 ("focus-editor" "enter-edited-value" "set-edited-value" "value:" "allow-duplicates?" "allow-duplicates?:" "composite?" "composite?:" "key" "key:" "foreign-objects" "foreign-objects:" "foreign" "foreign:" "Foreign-List-Chooser" "get-modal" "value" "let")}
        {Lisp-Entry "present" method (override) ("value") #f #f 121 20 121 27 ("key" "lambda" "map" "else" "join" "list?" "if" "composite?" "not" "cond" "value")}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 137 20 137 36 ("parse-strings" "map" "composite?" "not" "=" "empty-string?" "or" "editor" "get-body" "get-body~" "get-string-content" "get-string-content~" "let" "split" "find-in" "if" "string" "parse-string" "define")}
        {Lisp-Entry "set-edited-value" method (override) ("value") #f #f 151 20 151 36 ("present" "editor" "get-body" "get-body~" "set-string-content" "set-string-content~" "value")}}}})
"Group-Card"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "card" "Group-Card.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.card.Group-Card" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Group-Card" class (undocumented) ((extends . "Custom-Card")) #f #f 46 20 46 30 ("Custom-Card")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("classes-invite" "classes-image" "501" "346" "classes-group" "64" "sort?" "Check-Box" "<Check-Box>" "title" "Name-Text-View" "<Name-Text-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "Scroller-View" "<Scroller-View>" "edge" "border-type:" "19" "262" "33" "61" "title-border" "Border-View" "<Border-View>" "16" "250" "48" "general-invite" "Label-View" "<Label-View>" "visible?:" "Image-Resource" "resource:" ":images" "portfolio:" "32" "8" "general-image" "Image-View" "<Image-View>" ">" "<content" "<content~>" "347" "334" "0" "7" "title:" "general-group" "name:" "Group-Box" "<Group-Box>" "350" "850" "Dimension" "size:" "107" "184" "Point" "position:" "install" "<install>")}
        {Lisp-Entry "Properties-Mapping" definition () () #f #f 71 14 71 32 ("boolean" "sort?" "string" "title")}
        {Lisp-Entry "get-properties-mapping" method (override) () #f #f 76 20 76 42 ("Properties-Mapping")}
        {Lisp-Entry "resize" method (override) ("dh" "dv") #f #f 85 20 85 26 ("classes-group" "0" "general-group" "locate" "size-figure" "size-figure~" "dv" "dh")}}}})
"Handler-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Handler-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.Handler-Domain" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Handler-Domain" class () ((extends . "Domain")) #f #f 43 7 43 21 ("Domain")
        {Lisp-Entry "present" method (override) ("value") #f #f 51 20 51 27 ("->string" "value")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 60 20 60 31 ("self" "domain:" "get-size" "get-size~" "size:" "parent:" "Handler-Entry" "new" "client" "view")}}}})
"Handler-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Handler-Entry.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.entry.Handler-Entry" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Handler-Entry" class () ((extends . "Property-Entry")) #f #f 47 7 47 20 ("Property-Entry")
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("top-padding:" "0" "left-padding:" "text" "Entry-Text-View" "<Entry-Text-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "scroller" "name:" "Scroller-View" "<Scroller-View>" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 57 20 57 26 ("self" "text" "locate" "set-editor" "set-editor~" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" method (override) () #f #f 67 20 67 28 ("text" "locate")}
        {Lisp-Entry "validate" method (override) ("domain") #f #f 76 20 76 28 ("message:" "Property-Violation" "new" "get-nullable?" "get-nullable?~" "not" "empty-string?" "and" "if" "text" "locate-component" "get-string-content" "get-string-content~" "content" "let" "domain")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 89 20 89 33 ("text" "locate" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-modified?" method (override) ("value") #f #f 93 20 93 33 ("text" "locate" "set-modified?" "set-modified?~" "value")}
        {Lisp-Entry "get-value" method (override) () #f #f 101 20 101 29 ("second" "2" "first" "method-name:" ":form" "target-name:" "Event-Handler" "new" "1" "length" "case" "read-string-content" "list" "string=?" "if" "text" "locate" "get-string-content" "get-string-content~" "content" "let")}
        {Lisp-Entry "set-value" method (override) ("value") #f #f 111 20 111 29 ("get-preserved" "get-preserved~" "Surrogate-Handler" "is?" "text" "locate" "set-string-content" "set-string-content~" "format" "->string" ":form" "eq?" "get-method-name" "get-method-name~" "method" "get-target-name" "get-target-name~" "target" "let" "not" "if" "handler" "present-handler" "define" "value")}
        {Lisp-Entry "set-editable?" method (override) ("flag") #f #f 130 20 130 33 ("Medium" "White" "Color" "if" "set-background" "set-background~" "text" "locate" "set-editable?" "set-editable?~" "flag")}}}})
"Handler-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Handler-Row.jazz"} 247283256. jazz
    {Lisp-Entry "jazz.designer.row.Handler-Row" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Handler-Row" class (undocumented) ((extends . "Value-Row")) #f #f 44 20 44 31 ("Value-Row")
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 52 20 52 32 ("edit-definitions" "pos")}
        {Lisp-Entry "present" method (override) ("value") #f #f 61 20 61 27 ("get-preserved" "get-preserved~" "Surrogate-Handler" "is?" "format" "->string" ":form" "eq?" "get-method-name" "get-method-name~" "method" "get-target-name" "get-target-name~" "target" "let" "not" "if" "handler" "present-handler" "define" "value")}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 79 20 79 36 ("second" "2" "first" "method-name:" ":form" "target-name:" "Event-Handler" "new" "1" "length" "case" "read-string-content" "list" "string=?" "if" "editor" "get-string-content" "get-string-content~" "content" "let")}
        {Lisp-Entry "edit-definitions" method (override) () #f #f 94 20 94 36 ("Jazz-Field-Entry" "entry" "designer-source-workspace" "workspace:" "edit" "edit~" "Jazz-Entry" "get-category-location" "get-category-location~" "Jazz-Code-Location" "new" "location" "let" "get-method-name" "get-method-name~" "category-field" "field" "find-target-type" "find-target-type~" "class" "find-target" "find-target~" "target" "bell" "not" "if" "property" "read-property" "handler" "get-client" "car" "client" "let*" "edit-definitions" "unimplemented")}}}})
"Index-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Index-Tree.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.editor.Index-Tree" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Index-Tree" class (undocumented) ((extends . "Details-Tree")) #f #f 46 20 46 30 ("Details-Tree")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("kind" "275" "location" "Tree-Label-Column" "<Tree-Label-Column>" "toplevel-controls?:" "100" "width:" "title:" "name:" "Tree-Node-Column" "<Tree-Node-Column>" "on-selection-change" ":self" "Event-Handler" "selection-handler:" "can-select-empty?:" "multiple-selection?:" "row" "selection-mode:" ":images" "portfolio:" "component" "filled-column:" "install" "<install>")}
        {Lisp-Entry "selection-changed" method (override) ("component" "old" "origin" "force-parent?" "focus?") #f #f 61 20 61 37 ("focus?" "force-parent?" "origin" "old" "component")}
        {Lisp-Entry "on-designer" method (override) ("evt") #f #f 70 20 70 31 ("update" ":property-change" ":child-remove" ":child-add" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "update" method (override) ("." "rest") #f #f 81 20 81 26 ("get-presentation-property" "get-presentation-property~" "key:" "<" "sort" "insert-component" "for-each" "with-update-locked" "remove-every-row" "cons" "set!" "indexable?" "indexable?~" "when" "level" "component" "lambda" "client" "for-each-descendant" "for-each-descendant~" "list" "let" "collect-components" "define" "rest")}
        {Lisp-Entry "insert-component" method (override) ("component" "father" "recursive?") #f #f 99 20 99 36 ("user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "father:" "add-row" "class-of" "get-class-presentation" "get-class-presentation~" "kind" "present-location" "location" "get-component-image" "get-component-image~" "image" "get-presentation-property" "get-presentation-property~" "title" "let" "recursive?" "father" "component")}}}})
"Info-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Info-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.Info-Domain" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Info-Domain" class () ((extends . "Domain")) #f #f 43 7 43 18 ("Domain")}}})
"Info-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Info-Row.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.row.Info-Row" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.locale" "jazz.designer")}
      {Lisp-Entry "Info-Row" class (undocumented) ((extends . "Value-Row")) #f #f 44 20 44 28 ("Value-Row")
        {Lisp-Entry "present" method (override) ("value") #f #f 52 20 52 27 ("format" "Locales" "is?" "if" "value")}
        {Lisp-Entry "edit" method (override) () #f #f 63 20 63 24 ()}
        {Lisp-Entry "end-edition" method (override) () #f #f 67 20 67 31 ()}
        {Lisp-Entry "save-edition" method (override) () #f #f 71 20 71 32 ()}
        {Lisp-Entry "select-editor" method (override) () #f #f 75 20 75 33 ()}
        {Lisp-Entry "set-edited-modified?" method (override) ("flag") #f #f 79 20 79 40 ("flag")}}}})
"Integer-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Integer-Domain.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.domain.Integer-Domain" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Integer-Domain" class () ((extends . "Text-Domain")) #f #f 44 7 44 21 ("Text-Domain")
        {Lisp-Entry "upper-limit" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 23 ()}
        {Lisp-Entry "get-upper-limit" accessor () () #f #f 47 48 47 56 ()}
        {Lisp-Entry "set-upper-limit" accessor () () #f #f 47 48 47 56 ()}
        {Lisp-Entry "lower-limit" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 23 ()}
        {Lisp-Entry "get-lower-limit" accessor () () #f #f 48 48 48 56 ()}
        {Lisp-Entry "set-lower-limit" accessor () () #f #f 48 48 48 56 ()}
        {Lisp-Entry "validate-value" method (override) ("property" "value" "component" "root" "client" "context" "manager") #f #f 56 20 56 34 ("property:" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "when" "else" "<" "lower-limit" ">" "upper-limit" "and" "format" "integer?" "not" "cond" "message" "let" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method (override) ("value") #f #f 73 20 73 27 ("->string" "not" "if" "value")}
        {Lisp-Entry "parse" method (override) ("text") #f #f 84 20 84 25 ("parse-integer" "equal?" "if" "text")}}}})
"List-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "List-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.List-Domain" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "List-Domain" class () ((extends . "Value-Domain")) #f #f 43 7 43 18 ("Value-Domain")
        {Lisp-Entry "domain" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 18 ()}
        {Lisp-Entry "get-domain" accessor () () #f #f 46 43 46 51 ()}
        {Lisp-Entry "set-domain" accessor () () #f #f 46 43 46 51 ()}}
      {Lisp-Entry "List-Domain" class () ((extends . "Domain")) #f #f 50 7 50 18 ("Value-Domain" "new" "Domain")
        {Lisp-Entry "domain" property () ((initialize . "(new Value-Domain)") (accessors . "generate")) #f #f 53 12 53 18 ()}
        {Lisp-Entry "get-domain" accessor () () #f #f 53 59 53 67 ()}
        {Lisp-Entry "set-domain" accessor () () #f #f 53 59 53 67 ()}
        {Lisp-Entry "validate-value" method (override) ("property" "value" "component" "root" "client" "context" "manager") #f #f 61 20 61 34 ("domain" "validate-value" "validate-value~" "subvalue" "lambda" "for-each" "property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "pair?" "not" "if" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method (override) ("value") #f #f 74 20 74 27 ("domain" "present" "present~" "lambda" "map" "join" "not" "if" "value")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 88 20 88 31 ("domain" "setup-list-entry" "setup-list-entry~" "client" "view")}}}})
"Manager-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "manager" "Manager-Actions.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.manager.Manager-Actions" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Manager-Actions" class () ((extends . "Actions")) #f #f 43 7 43 22 ("Actions")}}})
"Manager-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "manager" "Manager-View.jazz"} 243479599. jazz
    {Lisp-Entry "jazz.designer.manager.Manager-View" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Manager-View" class () ((extends . "Component-Editor")) #f #f 46 7 46 19 ("Component-Editor")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("card" "Properties-Card" "<Properties-Card>" "card-border" "416" "card-contour" "366" "230" "right" "descendant" "on-tab-press" "tab-press-handler:" "descendants" "Descendants-Tree" "<Descendants-Tree>" "233" "133" "descendants-border" "on-splitter-move" "move-handler:" "horz" "orientation:" "3" "left" "Splitter" "<Splitter>" "183" "width:" "trait" "traits" "Traits-Tree" "<Traits-Tree>" "header" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "tool" "vscroll?:" "hscroll?:" "document" "scroller" "Scroller-View" "<Scroller-View>" "entry" "style:" "edge" "border-type:" "130" "229" "1" "Point" "position:" "traits-border" "Border-View" "<Border-View>" "367" "center" "Center-View" "<Center-View>" "on-edit-form" "edit-form" "end-undo-group" "on-redo" "redo" "on-undo" "undo" "16" "end-open-group" "Separator" "<Separator>" "on-save" "save" "on-open" "open" "on-new" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "new" "Push-Tool" "<Push-Tool>" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "400" "650" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 87 25 87 34 ("Image-Resource")}
        {Lisp-Entry "host-position" method (meta override) () #f #f 91 25 91 38 ("80" "100" "Point")}
        {Lisp-Entry "host-size" method (meta override) () #f #f 95 25 95 34 ("400" "650" "Dimension")}
        {Lisp-Entry "host-workspaces" method (override) () #f #f 99 20 99 35 ("home")}
        {Lisp-Entry "new-document-controller" method (override) () #f #f 109 20 109 43 ("self" "Manager-View-Controller" "new")}
        {Lisp-Entry "Manager-View-Controller" class () ((extends . "Component-Editor-Controller")) #f #f 114 9 114 32 ("Component-Editor-Controller")
          {Lisp-Entry "name-status" method (override) () #f #f 117 22 117 33 ("document" "editor-title" "editor-title~")}}
        {Lisp-Entry "install" method (override) ("rest") #f #f 126 20 126 27 ("card" "descendants" "self" "traits" "locate" "set-editor" "set-editor~" "nextmethod" "rest")}
        {Lisp-Entry "guest-actions" method (override) () #f #f 138 20 138 33 ("nextmethod" "manager" "find-actions" "cons")}
        {Lisp-Entry "size-change" method (override) ("size") #f #f 148 20 148 31 ("get-height" "get-height~" "get-width" "get-width~" "Dimension" "new" "set-size" "set-size~" "when" "locate-component" "toolbar" "let" "nextmethod" "size")}
        {Lisp-Entry "resize-center" method (protected virtual) ("dh" "dv") #f #f 155 29 155 42 ("card-contour" "right" "0" "descendants-border" "locate" "size-figure" "size-figure~" "dv" "dh")}
        {Lisp-Entry "on-splitter-move" method (package) ("evt") #f #f 161 19 161 35 ("update-view" "card-contour" "right" "-" "descendants-border" "move-figure" "move-figure~" "0" "traits-border" "locate" "size-figure" "size-figure~" "left" "get-name" "get-name~" "case" "delta:" "get-property" "get-property~" "delta" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "on-new" method () ("evt") #f #f 178 11 178 17 ("new-form" "evt")}
        {Lisp-Entry "on-open" method () ("evt") #f #f 182 11 182 18 ("open-form" "evt")}
        {Lisp-Entry "on-edit-form" method () ("evt") #f #f 186 11 186 23 ("edit-form" "evt")}
        {Lisp-Entry "on-tab-press" method (override) ("evt") #f #f 190 20 190 32 ("get-row" "get-row~" "auto-select" "auto-select~" "when" "get-single-selection" "get-single-selection~" "rank" "acquire-focus" "acquire-focus~" "card" "locate" "get-tree" "get-tree~" "tree" "let" "evt")}
        {Lisp-Entry "install-current-designer" method (override) ("component" "form") #f #f 203 20 203 44 ("editor-title" "set-title" "nextmethod" "form" "component")}}
      {Lisp-Entry "Center-View" class () ((extends . "View")) #f #f 213 7 213 18 ("View")
        {Lisp-Entry "resize" method (override) ("dh" "dv") #f #f 216 20 216 26 ("creator" "resize-center" "resize-center~" "nextmethod" "dv" "dh")}}}})
"Matches-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Matches-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.Matches-Row" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Matches-Row" class (undocumented) ((extends . "Value-Row")) #f #f 43 20 43 31 ("Value-Row")
        {Lisp-Entry "present" method (override) ("matches") #f #f 46 22 46 29 ("format" "not" "if" "matches")}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 52 22 52 38 ("split" "map" "trim-spaces" "lambda" "clean" "=" "if" "editor" "get-string-content" "get-string-content~" "string" "let")}}}})
"Memo-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Memo-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.Memo-Row" module (protected) () #f #f 37 18 37 44 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.designer")}
      {Lisp-Entry "Memo-Row" class (undocumented) ((extends . "Combo-Row")) #f #f 44 20 44 28 ("Combo-Row")
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 52 20 52 30 ("choose" "set-kind" "nextmethod" "apply" "rest")}
        {Lisp-Entry "present" method (override) ("value") #f #f 62 20 62 27 ("format" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "combo-choose" method (override) () #f #f 73 20 73 32 ("focus-editor" "enter-edited-value" "set-edited-value" "get-edited-value" "initial-text:" "request-text" "text" "let")}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 86 20 86 36 ("=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-body" "get-body~" "get-string-content" "get-string-content~" "string" "let")}
        {Lisp-Entry "set-edited-value" method (override) ("value") #f #f 93 20 93 36 ("present" "editor" "get-body" "get-body~" "set-string-content" "set-string-content~" "value")}}}})
"Menu-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "manager" "Menu-Editor.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.manager.Menu-Editor" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Menu-Editor" class () ((extends . "View-Editor")) #f #f 43 7 43 18 ("View-Editor")
        {Lisp-Entry "host-title" method (meta override) () #f #f 51 25 51 35 ()}
        {Lisp-Entry "host-position" method (meta override) () #f #f 55 25 55 38 ("117" "237" "Point")}
        {Lisp-Entry "host-size" method (meta override) () #f #f 59 25 59 34 ("472" "708" "Dimension")}}}})
"Name-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Name-Domain.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.domain.Name-Domain" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Name-Domain" class () ((extends . "Info-Domain")) #f #f 44 7 44 18 ("Info-Domain")
        {Lisp-Entry "limit" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 17 ()}
        {Lisp-Entry "get-limit" accessor () () #f #f 47 47 47 55 ()}
        {Lisp-Entry "set-limit" accessor () () #f #f 47 47 47 55 ()}
        {Lisp-Entry "predicate?" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 22 ()}
        {Lisp-Entry "get-predicate?" accessor () () #f #f 48 47 48 55 ()}
        {Lisp-Entry "set-predicate?" accessor () () #f #f 48 47 48 55 ()}
        {Lisp-Entry "validate-value" method (override) ("property" "value" "component" "root" "client" "context" "manager") #f #f 56 20 56 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "string?" "symbol?" "not" "and" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method (override) ("value") #f #f 66 20 66 27 ("->string" "value")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 75 20 75 31 ("self" "domain:" "get-size" "get-size~" "size:" "parent:" "Name-Entry" "new" "client" "view")}}}})
"Name-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Name-Entry.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.entry.Name-Entry" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.tie" "jazz.locale" "jazz.designer")}
      {Lisp-Entry "Name-Entry" class () ((extends . "String-Entry")) #f #f 45 7 45 17 ("String-Entry")
        {Lisp-Entry "validate" method (override) ("domain") #f #f 53 20 53 28 ("else" "format-plural" "format" "tie" "string-length" ">" "and" "french:" "english:" "Locales" "message:" "Property-Violation" "new" "get-nullable?" "get-nullable?~" "if" "empty-string?" "cond" "get-predicate?" "get-predicate?~" "predicate?" "get-limit" "get-limit~" "limit" "text" "locate" "get-string-content" "get-string-content~" "content" "let" "domain")}
        {Lisp-Entry "get-value" method (override) () #f #f 75 20 75 29 ("empty-string?" "if" "text" "locate" "get-string-content" "get-string-content~" "content" "let")}
        {Lisp-Entry "set-value" method (override) ("value") #f #f 82 20 82 29 ("not" "if" "text" "locate" "set-string-content" "set-string-content~" "value")}}}})
"Number-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Number-Domain.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.domain.Number-Domain" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Number-Domain" class () ((extends . "Text-Domain")) #f #f 44 7 44 20 ("Text-Domain")
        {Lisp-Entry "validate-value" method (override) ("property" "value" "component" "root" "client" "context" "manager") #f #f 52 20 52 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "number?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method (override) ("value") #f #f 62 20 62 27 ("number->string" "not" "if" "value")}
        {Lisp-Entry "parse" method (override) ("text") #f #f 73 20 73 25 ("string->number" "equal?" "if" "text")}}}})
"Password-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Password-Domain.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.domain.Password-Domain" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "Password-Domain" class () ((extends . "Domain")) #f #f 44 7 44 22 ("Domain")
        {Lisp-Entry "validate-value" method (override) ("property" "value" "component" "root" "client" "context" "manager") #f #f 52 20 52 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "string?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}}}})
"Password-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Password-Row.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.row.Password-Row" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Password-Row" class (undocumented) ((extends . "String-Row")) #f #f 45 20 45 32 ("String-Row")
        {Lisp-Entry "present" method (override) ("value") #f #f 53 20 53 27 ("nextmethod" "not" "if" "value")}
        {Lisp-Entry "editor-class" method (override) () #f #f 64 20 64 32 ("Password-Value-Text-View")}
        {Lisp-Entry "set-edited-value" method (override) ("value") #f #f 68 20 68 36 ("or" "editor" "set-string-content" "set-string-content~" "value")}}
      {Lisp-Entry "Password-Value-Text-Model" class () ((extends . "Text-Model")) #f #f 77 7 77 32 ("Text-Model")
        {Lisp-Entry "draw-outline" method (override) ("surface" "context" "outline" "scrolled-v") #f #f 80 20 80 32 ("draw-password" "scrolled-v" "outline" "context" "surface")}
        {Lisp-Entry "draw-password" method () ("surface") #f #f 84 11 84 24 ("draw-text" "draw-text~" "Black" "Color" "set-text-color" "set-text-color~" "set-font" "set-font~" "-" "get-v" "get-v~" "+" "v" "get-h" "get-h~" "h" "get-font" "get-font~" "font" "get-default-style" "style" "effective-font" "get-metrics" "get-metrics~" "font-height" "get-height" "get-height~" "height" "get-position" "get-position~" "pos" "cardinality" "make-string" "hidden" "get-string" "get-string~" "password" "0" "get-paragraph" "paragraph" "let*" "surface")}}
      {Lisp-Entry "Password-Value-Text-View" class () ((extends . "Value-Text-View")) #f #f 105 7 105 31 ("Value-Text-View")
        {Lisp-Entry "new-model" method (override) () #f #f 108 20 108 29 ("Password" "Font" "font:" "Text-Style" "base-style:" "Password-Value-Text-Model" "new")}
        {Lisp-Entry "copy-selection" method (override) () #f #f 112 20 112 34 ("bell")}}}})
"Pathname-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Pathname-Entry.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.entry.Pathname-Entry" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Pathname-Entry" class () ((extends . "Property-Entry")) #f #f 46 7 46 21 ("Property-Entry")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("top-padding:" "1" "left-padding:" "body" "!" "<!>" "on-moniker-update" ":form" "Event-Handler" "moniker-update-handler:" "display-protocol?:" "display-logical?:" "selectable?:" "moniker" "name:" "Moniker-Widget" "<Moniker-Widget>" "install" "<install>")}
        {Lisp-Entry "tab-view" method (override) () #f #f 60 20 60 28 ("body" "moniker" "locate")}
        {Lisp-Entry "on-moniker-update" method () ("evt") #f #f 69 11 69 28 ("set-modified?" "evt")}
        {Lisp-Entry "get-value" method (override) () #f #f 78 20 78 29 ("moniker" "locate" "get-moniker" "get-moniker~")}
        {Lisp-Entry "set-value" method (override) ("pathname") #f #f 82 20 82 29 ("generate-event?:" "moniker" "locate" "set-moniker" "set-moniker~" "pathname")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 86 20 86 33 ("moniker" "locate" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-modified?" method (override) ("value") #f #f 90 20 90 33 ("moniker" "locate" "set-modified?" "set-modified?~" "value")}
        {Lisp-Entry "set-editable?" method (override) ("value") #f #f 99 20 99 33 ("combo" "locate" "set-editable?" "set-editable?~" "value")}}}})
"Pathname-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Pathname-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.Pathname-Row" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Pathname-Row" class (undocumented) ((extends . "Value-Row")) #f #f 45 20 45 32 ("explicit" "Value-Row")
        {Lisp-Entry "display-logical?" property () ((accessors . "explicit")) #f "<void>" 48 12 48 28 ("void" "<void>")}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 56 20 56 30 ("set-display-logical?" "self" "value-row:" "editor-class" "new" "editor" "set!" "nextmethod" "apply" "others" "display-logical?" "bind-keywords" "rest")}
        {Lisp-Entry "editor-class" method (override) () #f #f 63 20 63 32 ("Pathname-Row-Editor")}
        {Lisp-Entry "get-display-logical?" method (public) () #f #f 72 18 72 38 ("editor" "get-display-logical?" "get-display-logical?~")}
        {Lisp-Entry "set-display-logical?" method (public) ("value") #f #f 76 18 76 38 ("editor" "set-display-logical?" "set-display-logical?~" "value")}
        {Lisp-Entry "enter-pathname-value" method () ("value") #f #f 85 11 85 31 ("enter-value" "value")}
        {Lisp-Entry "present" method (override) ("value") #f #f 94 20 94 27 ("editor" "present-moniker" "present-moniker~" "value")}
        {Lisp-Entry "close-editor?" method (override) () #f #f 103 20 103 33 ()}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 107 20 107 36 ("editor" "get-moniker" "get-moniker~")}
        {Lisp-Entry "set-edited-value" method (override) ("value") #f #f 111 20 111 36 ("generate-event?:" "editor" "set-moniker" "set-moniker~" "value")}
        {Lisp-Entry "get-edited-modified?" method (override) () #f #f 115 20 115 40 ("editor" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-edited-modified?" method (override) ("flag") #f #f 119 20 119 40 ("editor" "set-modified?" "set-modified?~" "flag")}
        {Lisp-Entry "show-cursor" method (override) () #f #f 123 20 123 31 ("editor" "get-text" "get-text~" "show-text-cursor" "show-text-cursor~")}
        {Lisp-Entry "focused-editor" method (override) () #f #f 127 20 127 34 ("editor" "get-text" "get-text~")}}
      {Lisp-Entry "Pathname-Row-Editor" class () ((extends . "Moniker-Widget")) #f #f 136 7 136 26 ("explicit" "Moniker-Widget")
        {Lisp-Entry "form" form () () #f #f 139 3 139 7 ("top-padding:" "1" "left-padding:" "body" "content" "scroller" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "value-row" property () ((initialize . "#f") (accessors . "explicit")) #f #f 146 12 146 21 ()}
        {Lisp-Entry "form-model" method (override) ("form") #f #f 149 20 149 30 ("nextmethod" "else" "Pathname-Value-Text-View" "body" "get-name" "get-name~" "case" "form")}
        {Lisp-Entry "get-value-row" method (public) () #f #f 155 18 155 31 ("value-row")}
        {Lisp-Entry "set-value-row" method (public) ("value") #f #f 159 18 159 31 ("body" "locate" "set-value-row" "set-value-row~" "value-row" "set!" "value")}
        {Lisp-Entry "moniker-update" method (override) () #f #f 164 20 164 34 ("get-moniker" "value-row" "enter-pathname-value" "enter-pathname-value~")}}
      {Lisp-Entry "Pathname-Value-Text-View" class () ((extends . "Moniker-Text-View")) #f #f 173 7 173 31 ("Moniker-Text-View")
        {Lisp-Entry "value-row" property () ((initialize . "#f") (accessors . "generate")) #f #f 176 12 176 21 ()}
        {Lisp-Entry "get-value-row" accessor () () #f #f 176 46 176 54 ()}
        {Lisp-Entry "set-value-row" accessor () () #f #f 176 46 176 54 ()}
        {Lisp-Entry "up-arrow-move" method (override) ("extend?" "scroll?") #f #f 184 20 184 33 ("value-row" "editor-up-arrow" "editor-up-arrow~" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method (override) ("extend?" "scroll?") #f #f 188 20 188 35 ("value-row" "editor-down-arrow" "editor-down-arrow~" "scroll?" "extend?")}
        {Lisp-Entry "document-menu" method () () #f #f 192 11 192 24 ()}
        {Lisp-Entry "focus-lose" method (override) () #f #f 201 20 201 30 ("value-row" "editor-focus-lose" "editor-focus-lose~" "nextmethod")}
        {Lisp-Entry "focus-master" method (override) () #f #f 206 20 206 32 ("value-row" "get-tree" "get-tree~")}}}})
"Period-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Period-Domain.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.domain.Period-Domain" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("time" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Period-Domain" class () ((extends . "Domain")) #f #f 45 7 45 20 ("Domain")
        {Lisp-Entry "validate-value" method (override) ("property" "value" "component" "root" "client" "context" "manager") #f #f 53 20 53 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "Period" "is-not?" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method (override) ("value") #f #f 63 20 63 27 ("get-end" "get-end~" "get-start" "get-start~" "present-date-day" "format" "value")}}}})
"Period-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Period-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.Period-Row" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Period-Row" class () ((extends . "Value-Row")) #f #f 43 7 43 17 ("Value-Row")}
      {Lisp-Entry "Period-Row" class () ((extends . "Value-Row")) #f #f 49 7 49 17 ("Value-Row")
        {Lisp-Entry "present" method () ("value") #f #f 57 11 57 18 ("get-end" "get-end~" "get-start" "get-start~" "present-date-day" "format" "period" "lambda" "map" "join" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "get-edited-value" method () () #f #f 73 11 73 27 ("Date" "parse-date" "parse-date~" "Period" "new" "separator:" "parse-strings" "end" "start" "bind" "lambda" "map" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "get-string-content~" "string" "let")}}}})
"Periods-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Periods-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.Periods-Row" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Periods-Row" class (undocumented) ((extends . "Combo-Row")) #f #f 43 20 43 31 ("Combo-Row")}
      {Lisp-Entry "Periods-Row" class (undocumented) ((extends . "Combo-Row")) #f #f 49 20 49 31 ("Combo-Row")
        {Lisp-Entry "initialize" method () ("." "rest") #f #f 57 11 57 21 ("choose" "set-kind" "nextmethod" "apply" "rest")}
        {Lisp-Entry "combo-choose" method () () #f #f 67 11 67 23 ("focus-editor" "enter-edited-value" "set-edited-value" "periods:" "Periods-Chooser" "get-modal" "value" "let")}
        {Lisp-Entry "present" method () ("value") #f #f 80 11 80 18 ("get-end" "get-end~" "get-start" "get-start~" "present-date-day" "format" "period" "lambda" "map" "join" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "get-edited-value" method () () #f #f 96 11 96 27 ("Date" "parse-date" "parse-date~" "Period" "new" "separator:" "parse-strings" "end" "start" "bind" "lambda" "map" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-body" "get-body~" "get-string-content" "get-string-content~" "string" "let")}
        {Lisp-Entry "set-edited-value" method () ("value") #f #f 106 11 106 27 ("present" "editor" "get-body" "get-body~" "set-string-content" "set-string-content~" "value")}}}})
"Point-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Point-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.Point-Domain" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Point-Domain" class () ((extends . "Text-Domain")) #f #f 43 7 43 19 ("Text-Domain")
        {Lisp-Entry "present" method (override) ("pos") #f #f 51 20 51 27 ("get-v" "get-v~" "get-h" "get-h~" "format" "not" "if" "pos")}
        {Lisp-Entry "parse" method (override) ("text") #f #f 64 20 64 25 ("Point" "new" "v" "h" "bind" "read-delimited-string" "lst" "let" "text")}}}})
"Presentation-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Presentation-Domain.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.domain.Presentation-Domain" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.locale" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Presentation-Domain" class () ((extends . "Info-Domain")) #f #f 45 7 45 26 ("Info-Domain")
        {Lisp-Entry "validate-value" method (override) ("property" "value" "component" "root" "client" "context" "manager") #f #f 53 20 53 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "Locales" "is-not?" "string?" "not" "and" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method (override) ("value") #f #f 63 20 63 27 ("->string" "value")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 72 20 72 31 ("self" "domain:" "get-size" "get-size~" "size:" "parent:" "Presentation-Entry" "new" "client" "view")}}}})
"Presentation-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Presentation-Entry.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.entry.Presentation-Entry" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Presentation-Entry" class () ((extends . "String-Entry")) #f #f 43 7 43 25 ("String-Entry")
        {Lisp-Entry "get-value" method (override) () #f #f 51 20 51 29 ("empty-string?" "if" "text" "locate" "get-string-content" "get-string-content~" "content" "let")}
        {Lisp-Entry "set-value" method (override) ("value") #f #f 58 20 58 29 ("not" "if" "text" "locate" "set-string-content" "set-string-content~" "value")}}}})
"Properties-Card"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "card" "Properties-Card.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.designer.card.Properties-Card" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Properties-Card" class (undocumented) ((extends . "Card")) #f #f 46 20 46 35 ("Card")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("Properties-Tree" "<Properties-Tree>" "on-context-menu" "tree" "Event-Handler" "context-menu-handler:" "header" "Tree-Header" "<Tree-Header>" "fill" "content" "!" "<!>" "vscroll?:" "hscroll?:" "document" "style:" "center" "location:" "scroller" "Scroller-View" "<Scroller-View>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "install" "<install>")}
        {Lisp-Entry "get-tree" method (public) () #f #f 64 18 64 26 ("tree" "locate")}
        {Lisp-Entry "on-editor" method (override) ("evt") #f #f 73 20 73 29 ("nextmethod" "else" "reset-modified-properties" "reset-modified-properties~" ":saved" "property:" "get-property" "get-property~" "select-property" "select-property~" ":property-selected" ":saving" ":branch-changing" "get-force?" "get-force?~" "force?:" "get-selection" "get-selection~" "set-client" ":selection-changed" "get-tree" "save-edition" "save-edition~" ":selection-changing" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "client-update" method (override) () #f #f 92 20 92 33 ("get-tree" "client-update" "client-update~")}
        {Lisp-Entry "call-refresh" method (override) ("evt") #f #f 101 20 101 32 ("refresh" "all" "what:" "case" "car" "eq?" "client" "not-null?" "and" "when" "component:" "get-property" "get-property~" "component" "let" "evt")}
        {Lisp-Entry "refresh" method (override) ("component") #f #f 109 20 109 27 ("client-update" "component")}
        {Lisp-Entry "call-property-change" method (override) ("evt") #f #f 113 20 113 40 ("value:" "property:" "property-change" "car" "eq?" "client" "not-null?" "and" "when" "component:" "get-property" "get-property~" "component" "let" "evt")}
        {Lisp-Entry "property-change" method (override) ("component" "property" "value") #f #f 119 20 119 35 ("get-tree" "property-change" "property-change~" "value" "property" "component")}
        {Lisp-Entry "enter-value" method (override) ("property" "value" "(imports: imports #f)") #f #f 128 20 128 31 ("client" "import:" "designer" "safe-set-property" "safe-set-property~" "component" "lambda" "for-each" "imports" "imports:" "value" "property")}}}})
"Properties-Containment"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "card" "Properties-Containment.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.card.Properties-Containment" module (protected) () #f #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Properties-Containment" class (undocumented) ((extends . "Properties-Manager")) #f #f 45 20 45 42 ("Properties-Manager")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("north" "location:" "32" "100" "Dimension" "size:" "containment" "name:" "Containment-View" "<Containment-View>" "install" "<install>")}
        {Lisp-Entry "client-activate" method (override) () #f #f 58 20 58 35 ("set-containment-editor" "Component-Editor" "is?" "when" "current-document" "guest" "let" "nextmethod")}
        {Lisp-Entry "client-deactivate" method (override) () #f #f 65 20 65 37 ("set-containment-editor" "nextmethod")}
        {Lisp-Entry "set-containment-editor" method () ("editor") #f #f 70 11 70 33 ("set-editor" "set-editor~" "containment" "locate" "view" "let" "editor")}}}})
"Properties-Descriptor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "descriptor" "Properties-Descriptor.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.descriptor.Properties-Descriptor" module (protected) () #f #f 37 18 37 64 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.designer.descriptor")}
      {Lisp-Entry "Properties-Descriptor" class (undocumented) ((extends . "Component")) #f #f 44 20 44 41 ("Component")
        {Lisp-Entry "default" property () ((accessors . "generate")) #f #f 47 12 47 19 ()}
        {Lisp-Entry "get-default" accessor () () #f #f 47 34 47 42 ()}
        {Lisp-Entry "set-default" accessor () () #f #f 47 34 47 42 ()}
        {Lisp-Entry "categorized" property () ((accessors . "generate")) #f #f 48 12 48 23 ()}
        {Lisp-Entry "get-categorized" accessor () () #f #f 48 34 48 42 ()}
        {Lisp-Entry "set-categorized" accessor () () #f #f 48 34 48 42 ()}
        {Lisp-Entry "component-get-default-property" method (public virtual) ("component") #f #f 51 26 51 56 ("default" "either" "component")}
        {Lisp-Entry "component-get-categorized-properties" method (public virtual) ("component") #f #f 55 26 55 62 ("categorized" "either" "component")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 64 25 64 45 ("Properties-Descriptor-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 73 11 73 17 ()
        {Lisp-Entry "import" import () () #f #f 76 1 76 7 ("jazz.designer")}
        {Lisp-Entry "Properties-Descriptor-Descriptor" class () ((extends . "Component-Descriptor")) #f #f 79 7 79 39 ("Component-Descriptor")
          {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 82 25 82 45 ("Properties-Meta-Descriptor")}}}}})
"Properties-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "card" "Properties-Manager.jazz"} 242356019. jazz
    {Lisp-Entry "jazz.designer.card.Properties-Manager" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Properties-Manager" class (undocumented) ((extends . "Properties-Card")) #f #f 48 20 48 38 ("Properties-Card")
        {Lisp-Entry "form" form () () #f #f 51 3 51 7 ("header" "content" "tool" "style:" "scroller" "name:" "!" "<!>" "install" "<install>")}
        {Lisp-Entry "destroy" method (override) () #f #f 58 20 58 27 ("nextmethod" "self" "close-selected" "close-selected~" "get-application" "appl" "let")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 64 25 64 38 ("properties-card" "rest")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 73 25 73 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 77 25 77 35 ()}
        {Lisp-Entry "host-install" method (override) () #f #f 81 20 81 32 ("on-selected-change" "method-name:" "self" "target:" "Event-Handler" "new" "add-selected-listener" "add-selected-listener~" "get-application" "appl" "let")}
        {Lisp-Entry "host-uninstall" method (override) () #f #f 86 20 86 34 ("self" "remove-selected-listener" "remove-selected-listener~" "get-application" "appl" "let")}
        {Lisp-Entry "client-activate" method (override) () #f #f 91 20 91 35 ("else" "get-selection" "get-selection~" "set-client" "get-designer" "get-designer~" "set-designer" "set-editor" "Component-Editor" "is?" "cond" "current-document" "guest" "let" "get-tree" "close-auto-expanded" "close-auto-expanded~")}
        {Lisp-Entry "client-deactivate" method (override) () #f #f 104 20 104 37 ("set-editor" "set-designer" "set-client")}
        {Lisp-Entry "focus-default" method (override) () #f #f 115 20 115 33 ("acquire-focus" "acquire-focus~" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tools-view" method (override) () #f #f 120 20 120 34 ("tools" "locate")}
        {Lisp-Entry "install-in-host" method (override) ("host") #f #f 129 20 129 35 ("categorized" "tree" "set-filter" "set-filter~" "header" "scroller" "locate" "set-flat?" "set-flat?~" "Docked-Host" "is?" "when" "nextmethod" "host")}
        {Lisp-Entry "on-selected-change" method () ("evt") #f #f 142 11 142 29 ("else" "get-designer" "get-designer~" "let*" "Component-Editor" "force?:" "set-client" "set-designer" "set-editor" "get-force?" "get-force?~" "force?" "get-selected" "get-selected~" "client" "designer" "editor" "Designer" "typecase" "get-owner" "get-owner~" "owner" "let" "get-tree" "close-auto-expanded" "close-auto-expanded~" "evt")}
        {Lisp-Entry "on-editor" method (override) ("evt") #f #f 173 20 173 29 ("nextmethod" "else" ":selection-changed" "get-kind" "get-kind~" "case" "evt")}}}})
"Properties-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "card" "Properties-Tree.jazz"} 242356019. jazz
    {Lisp-Entry "jazz.designer.card.Properties-Tree" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Filter-Width" definition () () #f #f 50 12 50 24 ("20")}
      {Lisp-Entry "Properties-Tree" class (undocumented) ((extends . "Tree-View")) #f #f 54 20 54 35 ("explicit" "categorized" "Tree-View")
        {Lisp-Entry "filter" property () ((initialize . "'categorized") (accessors . "explicit")) #f #f 57 12 57 18 ()}
        {Lisp-Entry "filter-locked?" property () ((initialize . "#f") (accessors . "generate")) #f #f 58 12 58 26 ()}
        {Lisp-Entry "get-filter-locked?" accessor () () #f #f 58 63 58 71 ()}
        {Lisp-Entry "set-filter-locked?" accessor () () #f #f 58 63 58 71 ()}
        {Lisp-Entry "filter-visible?" property () ((initialize . "#t") (accessors . "generate")) #f #f 59 12 59 27 ()}
        {Lisp-Entry "get-filter-visible?" accessor () () #f #f 59 63 59 71 ()}
        {Lisp-Entry "set-filter-visible?" accessor () () #f #f 59 63 59 71 ()}
        {Lisp-Entry "property-handler" property () ((initialize . "#f") (accessors . "generate")) #f #f 60 12 60 28 ()}
        {Lisp-Entry "get-property-handler" accessor () () #f #f 60 63 60 71 ()}
        {Lisp-Entry "set-property-handler" accessor () () #f #f 60 63 60 71 ()}
        {Lisp-Entry "form" form () () #f #f 63 3 63 7 ("center" "25" "owner" "Tree-Image-Column" "<Tree-Image-Column>" "2" "justification:" "192" "Value-Column" "<Value-Column>" "toplevel-controls?:" "140" "width:" "title:" "property" "name:" "Property-Column" "<Property-Column>" "on-context-menu" ":form" "Event-Handler" "context-menu-handler:" ":images" "portfolio:" "focused-on-descendants?:" "auto-expand/collapse?:" "row" "selection-mode:" "multiple-selection?:" "draggable?:" "value" "filled-column:" "install" "<install>")}
        {Lisp-Entry "get-card" method (public) () #f #f 75 18 75 26 ("5" "child")}
        {Lisp-Entry "get-editor" method (public) () #f #f 79 18 79 28 ("get-card" "get-editor" "get-editor~")}
        {Lisp-Entry "get-client" method (public) () #f #f 83 18 83 28 ("get-card" "get-client" "get-client~")}
        {Lisp-Entry "get-designer" method (public) () #f #f 87 18 87 30 ("get-card" "get-designer" "get-designer~")}
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 96 20 96 32 ("self" "acquire" "acquire~" "double-click" "double-click~" "when" "get-selected-row" "row" "let" "pos")}
        {Lisp-Entry "on-context-menu" method () ("evt") #f #f 102 11 102 26 ("context-menu" "else" "5" "Point" "self" "client:" "Filter-Menu" "new" "track-popup-menu" "track-popup-menu~" "get-v" "get-v~" "Filter-Width" "get-h" "get-h~" "<" "and" "when" "16" "header-height" "filter-visible?" "not" "filter-locked?" "or" "unless" "Tree-Header" "is?" "cond" "get-position" "get-position~" "pos" "get-sender" "get-sender~" "sender" "let" "evt")}
        {Lisp-Entry "new-property-menu" method () ("client") #f #f 114 11 114 28 ("layout-menu" "layout-menu~" "consolidate" "distribute" "end-consolidate-group" "locate" "locate~" "set-visible?" "set-visible?~" "begin" "branch-installed?" "branch-installed?~" "if" "get-creator" "get-creator~" "creator" "car" "any" "self" "client:" "Property-Menu" "new" "menu" "let*" "client")}
        {Lisp-Entry "focus-gained" method (override) () #f #f 133 20 133 32 ("focus-delegate" "nextmethod")}
        {Lisp-Entry "focus-delegate" method (override) () #f #f 138 20 138 34 ("editor-focus-delegate" "editor-focus-delegate~" "editable?" "editable?~" "and" "when" "selected-row" "row" "let")}
        {Lisp-Entry "save-edition" method (protected) () #f #f 149 21 149 33 ("save-edition" "save-edition~" "in-edition?" "in-edition?~" "Value-Row" "is?" "and" "when" "auto-expanded-row" "row" "let")}
        {Lisp-Entry "notify-property-change" method (public) ("property") #f #f 160 18 160 40 ("property:" ":property-change" "Event" "new" "self" "invoke-handler" "property-handler" "when" "property")}
        {Lisp-Entry "client-update" method (public) () #f #f 170 18 170 31 ("preserving-update" "close-auto-expanded" "lambda" "with-update-locked")}
        {Lisp-Entry "find-property-index" method () ("target") #f #f 177 11 177 30 ("continuation-return" "field-name" "eq?" "symbol?" "if" "get-property" "get-property~" "property" "let" "Value-Row" "is?" "when" "rank" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "target")}
        {Lisp-Entry "preserving-update" method () () #f #f 196 11 196 28 ("auto-expand?:" "set-single-selection" "find-property-index" "index" "update" "default" "selected-property" "selected" "remove-every-row" "if" "class-of" "category-field" "get-default-property" "get-default-property~" "name" "Component" "is?" "car" "component" "length" "1" "=" "when" "get-client-default-property" "null?" "not" "or" "get-client" "client" "let" "empty-client?" "define")}
        {Lisp-Entry "update" method () () #f #f 220 11 220 17 ("with-update-locked" "remove-every-row" "get-designer" "get-editor" "null?" "get-client" "filter" "filter:" "get-filtered-properties" "get-filtered-properties~" "filter-by-rights" "get-component-properties" "Component" "is?" "intersection" "when" "get-client-properties" "position:" "row:" "set-color" "set-color~" "set-title" "set-title~" "car" "set-value" "set-value~" "set-property" "set-property~" "set-children" "set-children~" "17" "set-row-height" "set-row-height~" "self" "set-parent" "set-parent~" "owner-image" "owner" "label" "Medium-Gray" "Dark-Red" "Color" "color:" "node" "property-presentation" "property-presentation~" "string=?" "apply" "1" "length" "<=" "uniform?" "find-changed-property" "find-changed-property~" "not" "or" "changed?" "get-active-trait" "get-active-trait~" "and" "trait" "get-creator" "get-creator~" "creator" "present" "present~" "value" "presented" "read-property" "component" "map" "values" "get-image" "get-image~" "image" "domain:" "Domain-Row" "class-of" "get-category" "get-category~" "category" "property-domain" "property-domain~" "domain" "let*" "position" "state" "Tree-Image" "Tree-Label" "Image-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "state:" "father:" "add-row" "row" "let" "title" "bind" "collapsed" "insert-property" "pair?" "if" "property" "lambda" "for-each" "properties" "father" "designer" "editor" "any" "client" "insert-properties" "define")}
        {Lisp-Entry "owner-image" method () ("designer" "client" "category" "property") #f #f 287 11 287 22 ("default-owner-image" "else" "root-owner-image" "get-reference" "get-reference~" "eq?" "trait-owner-image" "Trait" "is?" "cond" "find-owner" "find-owner~" "owner" "car" "component" "let*" "0" "get-rank" "get-rank~" "/=" "length" "1" "=" "and" "when" "property" "category" "client" "designer")}
        {Lisp-Entry "default-owner-image" method (protected virtual) () #f #f 296 29 296 48 ()}
        {Lisp-Entry "root-owner-image" method (protected virtual) () #f #f 300 29 300 45 ("Image-Resource")}
        {Lisp-Entry "trait-owner-image" method (protected virtual) () #f #f 304 29 304 46 ("Image-Resource")}
        {Lisp-Entry "reset-modified-properties" method (protected) () #f #f 308 21 308 46 ("0" "Cell" "new" "invalidate-cell" "set-color" "set-color~" "get-color" "get-color~" "get-children" "get-children~" "car" "node" "let" "Value-Row" "is?" "when" "rank" "row" "lambda" "for-each-visible-row")}
        {Lisp-Entry "filter-by-rights" definition () ("component" "editor" "properties") #f #f 323 15 323 31 ("filter-properties" "filter-properties~" "when" "find-component-rights" "find-component-rights~" "component-rights" "get-client" "get-client~" "reference" "let*" "not" "if" "get-rights" "get-rights~" "and" "rights" "let" "properties" "editor" "component")}
        {Lisp-Entry "selected-row" method () () #f #f 338 11 338 23 ("Value-Row" "is?" "when" "get-selected-row" "row" "let")}
        {Lisp-Entry "selected-property" method () () #f #f 344 11 344 28 ("get-property" "get-property~" "when" "selected-row" "row" "let")}
        {Lisp-Entry "select-property" method (public) ("property") #f #f 350 18 350 33 ("set-single-selection" "generate-event?:" "auto-expand?:" "set-selection" "not" "if" "find-property-index" "rank" "let" "property")}
        {Lisp-Entry "consolidate-property" method () () #f #f 362 11 362 31 ("set-edited-modified?" "set-edited-modified?~" "set-property" "set-property~" "trait:" "remove-property" "remove-property~" "trait" "for-each-trait" "for-each-trait~" "read-property" "value" "get-creator" "get-creator~" "creator" "component" "lambda" "for-each" "get-designer" "designer" "get-property" "get-property~" "property" "save-edition" "save-edition~" "selected-row" "row" "let" "yes" "eq?" "when" "confirmation" "type:" "length" "format-plural" "format" "message-box" "code" "get-client" "client" "let*")}
        {Lisp-Entry "distribute-property" method () () #f #f 381 11 381 30 ("set-edited-modified?" "set-edited-modified?~" "trait:" "set-property" "set-property~" "trait" "for-each-trait" "for-each-trait~" "read-property" "value" "get-creator" "get-creator~" "creator" "component" "lambda" "for-each" "get-designer" "designer" "get-property" "get-property~" "property" "save-edition" "save-edition~" "selected-row" "row" "let" "yes" "eq?" "when" "confirmation" "type:" "length" "format-plural" "format" "message-box" "code" "get-client" "client" "let*")}
        {Lisp-Entry "header-click" method (override) ("column") #f #f 404 20 404 32 ("nextmethod" "end-edition" "end-edition~" "close-auto-expanded" "in-edition?" "in-edition?~" "Value-Row" "is?" "and" "when" "auto-expanded-row" "row" "let" "column")}
        {Lisp-Entry "get-filter" method (public) () #f #f 418 18 418 28 ("filter")}
        {Lisp-Entry "set-filter" method (public) ("flt") #f #f 422 18 422 28 ("update" "node-column" "get-header" "invalidate-column-header" "invalidate-column-header~" "set!" "filter" "neq?" "when" "flt")}
        {Lisp-Entry "toggle-filter" method (public) () #f #f 429 18 429 31 ("categorized" "handlers" "properties" "infos" "set-filter" "all" "filter" "case")}
        {Lisp-Entry "property-change" method (public) ("component" "property" "value") #f #f 443 18 443 33 ("invalidate-cell" "class-of" "get-category" "get-category~" "get-client" "get-designer" "owner-image" "set-image" "set-image~" "get-cell-data" "data" "2" "Cell" "new" "cell" "let*" "update" "update~" "get-row" "row" "when" "find-property-index" "rank" "let" "value" "property" "component")}}
      {Lisp-Entry "Property-Column" class () ((extends . "Tree-Node-Column")) #f #f 459 7 459 22 ("Tree-Node-Column")
        {Lisp-Entry "filter-down?" slot () ((initialize . "#f")) #f #f 462 8 462 20 ()}
        {Lisp-Entry "draw-header" method (override) ("surface" "context" "h" "v" "width" "height" "sorted" "spaced?" "flat?" "enabled?") #f #f 465 20 465 31 ("down?" "get-column-title" "localize" "-" "get-filter-image" "+" "draw-image-at" "lambda" "14" "17" "1" "Rect" "with-clip" "with-clip~" "filter-down?" "Filter-Width" "draw-header-at" "nextmethod" "parent" "get-filter-visible?" "get-filter-visible?~" "not" "if" "enabled?" "flat?" "spaced?" "sorted" "height" "width" "v" "h" "context" "surface")}
        {Lisp-Entry "draw-image-at" method () ("surface" "context" "h" "v" "image") #f #f 475 11 475 24 ("+" "Medium" "Color" "get-application" "get-images-portfolio" "get-images-portfolio~" "draw-opaque-image" "draw-opaque-image~" "0" "1" "filter-down?" "if" "offset" "let" "image" "v" "h" "context" "surface")}
        {Lisp-Entry "header-down" method (override) ("pos") #f #f 480 20 480 31 ("self" "get-header" "get-header~" "invalidate-column-header" "invalidate-column-header~" "down?" "filter-down?" "set!" "unless" "get-filter-locked?" "get-filter-locked?~" "Filter-Width" "get-h" "get-h~" "<" "in-filter?" "let" "nextmethod" "parent" "get-filter-visible?" "get-filter-visible?~" "not" "if" "pos")}
        {Lisp-Entry "header-up" method (override) ("pos") #f #f 493 20 493 29 ("header-click" "header-click~" "self" "get-header" "get-header~" "invalidate-column-header" "invalidate-column-header~" "toggle-filter" "toggle-filter~" "when" "down?" "set!" "filter-down?" "filter?" "let" "Filter-Width" "get-h" "get-h~" "<" "unless" "get-filter-locked?" "get-filter-locked?~" "nextmethod" "parent" "get-filter-visible?" "get-filter-visible?~" "not" "if" "pos")}
        {Lisp-Entry "draw-data" method (override) ("surface" "context" "row" "data" "width" "height") #f #f 509 20 509 29 ("0" "draw-title" "draw-image" "draw-level" "draw-background" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "get-filter-image" method () () #f #f 516 11 516 27 ("categorized" "handlers" "properties" "infos" "Image-Resource" "all" "parent" "get-filter" "get-filter~" "case")}
        {Lisp-Entry "get-column-title" method () () #f #f 525 11 525 27 ("categorized" "handlers" "properties" "infos" "all" "parent" "get-filter" "get-filter~" "case")}}
      {Lisp-Entry "Value-Column" class () ((extends . "Tree-Label-Column")) #f #f 539 7 539 19 ("Tree-Label-Column")
        {Lisp-Entry "draw-data" method (override) ("surface" "context" "row" "data" "width" "height") #f #f 542 20 542 29 ("self" "draw-data" "draw-data~" "get-value" "get-value~" "value" "let" "Value-Row" "is?" "when" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Filter-Menu" class () ((extends . "Context-Menu")) #f #f 553 7 553 18 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 556 3 556 7 ("categorized" "handlers" "properties" "infos" "Separator-Item" "<Separator-Item>" "on-action" ":form" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "title:" "all" "name:" "Radio-Item" "<Radio-Item>" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 567 20 567 26 ("client" "get-filter" "get-filter~" "locate" "set-selected?" "set-selected?~" "nextmethod" "rest")}
        {Lisp-Entry "on-action" method () ("evt") #f #f 572 11 572 20 ("client" "set-filter" "set-filter~" "get-sender" "get-sender~" "get-name" "get-name~" "filter" "let" "evt")}}
      {Lisp-Entry "Property-Menu" class () ((extends . "Context-Menu")) #f #f 582 7 582 20 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 585 3 585 7 ("on-distribute" "distribute" "end-consolidate-group" "Separator-Item" "<Separator-Item>" "on-consolidate" ":form" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "title:" "consolidate" "name:" "Radio-Item" "<Radio-Item>" "install" "<install>")}
        {Lisp-Entry "on-consolidate" method () ("evt") #f #f 592 11 592 25 ("client" "consolidate-property" "consolidate-property~" "evt")}
        {Lisp-Entry "on-distribute" method () ("evt") #f #f 596 11 596 24 ("client" "distribute-property" "distribute-property~" "evt")}}}})
"Property-Descriptor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "descriptor" "Property-Descriptor.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.descriptor.Property-Descriptor" module (protected) () #f #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.designer.descriptor")}
      {Lisp-Entry "Property-Descriptor" class (undocumented) ((extends . "Component")) #f #f 44 20 44 39 ("Component")
        {Lisp-Entry "title" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 17 ()}
        {Lisp-Entry "get-title" accessor () () #f #f 47 45 47 53 ()}
        {Lisp-Entry "set-title" accessor () () #f #f 47 45 47 53 ()}
        {Lisp-Entry "category" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 20 ()}
        {Lisp-Entry "get-category" accessor () () #f #f 48 45 48 53 ()}
        {Lisp-Entry "set-category" accessor () () #f #f 48 45 48 53 ()}
        {Lisp-Entry "get-domain" method (public) () #f #f 56 18 56 28 ("domain" "find-component")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 65 25 65 45 ("Property-Descriptor-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 74 11 74 17 ()
        {Lisp-Entry "import" import () () #f #f 77 1 77 7 ("jazz.designer")}
        {Lisp-Entry "Property-Descriptor-Descriptor" class () ((extends . "Component-Descriptor")) #f #f 80 7 80 37 ("Component-Descriptor")
          {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 83 25 83 45 ("Property-Meta-Descriptor")}}}}})
"Property-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "property" "Property-Editor.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.designer.property.Property-Editor" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Property-Editor" interface () () #f #f 40 11 40 26 ()
        {Lisp-Entry "get-manager" method (public virtual abstract) () #f #f 43 35 43 46 ()}
        {Lisp-Entry "set-manager" method (public virtual abstract) ("manager") #f #f 44 35 44 46 ("manager")}
        {Lisp-Entry "validate" method (public virtual abstract) () #f #f 45 35 45 43 ()}
        {Lisp-Entry "get-violation" method (public virtual abstract) () #f #f 46 35 46 48 ()}
        {Lisp-Entry "set-violation" method (public virtual abstract) ("violation") #f #f 47 35 47 48 ("violation")}
        {Lisp-Entry "get-presentation" method (public virtual abstract) () #f #f 48 35 48 51 ()}
        {Lisp-Entry "set-presentation" method (public virtual abstract) ("presentation") #f #f 49 35 49 51 ("presentation")}
        {Lisp-Entry "get-value" method (public virtual abstract) () #f #f 50 35 50 44 ()}
        {Lisp-Entry "set-value" method (public virtual abstract) ("value") #f #f 51 35 51 44 ("value")}
        {Lisp-Entry "get-imports" method (public virtual abstract) () #f #f 52 35 52 46 ()}
        {Lisp-Entry "present-value" method (public virtual abstract) ("value") #f #f 53 35 53 48 ("value")}
        {Lisp-Entry "get-modified?" method (public virtual abstract) () #f #f 54 35 54 48 ()}
        {Lisp-Entry "set-modified?" method (public virtual abstract) ("flag") #f #f 55 35 55 48 ("flag")}
        {Lisp-Entry "set-editable?" method (public virtual abstract) ("flag") #f #f 56 35 56 48 ("flag")}
        {Lisp-Entry "set-enabled?" method (public virtual abstract) ("flag") #f #f 57 35 57 47 ("flag")}}}})
"Property-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Property-Entry.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.designer.entry.Property-Entry" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "Property-Entry" class () ((extends . "Layout-View") (implements . "Property-Editor")) #f #f 46 7 46 21 ("generate" "override" "Property-Editor" "Layout-View")
        {Lisp-Entry "manager" property () ((initialize . "#f") (accessors . "(override generate)")) #f #f 49 12 49 19 ()}
        {Lisp-Entry "domain" property () ((initialize . "#f") (accessors . "generate")) #f #f 50 12 50 18 ()}
        {Lisp-Entry "get-domain" accessor () () #f #f 50 44 50 52 ()}
        {Lisp-Entry "set-domain" accessor () () #f #f 50 44 50 52 ()}
        {Lisp-Entry "violation" slot () ((initialize . "#f")) #f #f 53 8 53 17 ()}
        {Lisp-Entry "form" form () () #f #f 56 3 56 7 ("fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "validate" method (override) ("domain") #f #f 65 20 65 28 ("get-presentation" "validate-text" "validate-text~" "domain")}
        {Lisp-Entry "get-violation" method (override) () #f #f 69 20 69 33 ("violation")}
        {Lisp-Entry "set-violation" method (override) ("value") #f #f 73 20 73 33 ("invalidate-entry" "violation" "set!" "value")}
        {Lisp-Entry "invalidate-entry" method (public) () #f #f 78 18 78 34 ("1" "get-bounds" "inflate-rect" "invalidate-rect")}
        {Lisp-Entry "get-imports" method (override) () #f #f 87 20 87 31 ()}
        {Lisp-Entry "tab-view" method (protected virtual) () #f #f 96 29 96 37 ()}
        {Lisp-Entry "setup-for-grid" method (protected virtual) () #f #f 105 29 105 43 ()}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 114 25 114 45 ("Property-Entry-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 123 11 123 17 ()
        {Lisp-Entry "import" import () () #f #f 126 1 126 7 ("jazz.designer")}
        {Lisp-Entry "Property-Entry-Descriptor" class () ((extends . "Layout-View-Descriptor")) #f #f 129 7 129 32 ("Layout-View-Descriptor")
          {Lisp-Entry "form" form () () #f #f 132 3 132 7 ("domain" "manager" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "install" "<install>")}
          {Lisp-Entry "component-get-presentation" method (override) ("component") #f #f 140 20 140 46 ("get-value" "get-value~" "component")}
          {Lisp-Entry "component-set-presentation" method (override) ("component" "presentation") #f #f 145 20 145 46 ("set-value" "set-value~" "presentation" "component")}}}}})
"Property-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "property" "Property-Manager.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.property.Property-Manager" module (protected) () #f #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Property-Manager" interface () () #f #f 40 11 40 27 ()
        {Lisp-Entry "editor-focus-gained" method (public virtual abstract) ("editor") #f #f 43 35 43 54 ("editor")}
        {Lisp-Entry "editor-focus-lose" method (public virtual abstract) ("editor") #f #f 44 35 44 52 ("editor")}
        {Lisp-Entry "editor-left-arrow" method (public virtual abstract) ("editor") #f #f 45 35 45 52 ("editor")}
        {Lisp-Entry "editor-right-arrow" method (public virtual abstract) ("editor") #f #f 46 35 46 53 ("editor")}
        {Lisp-Entry "editor-up-arrow" method (public virtual abstract) ("editor") #f #f 47 35 47 50 ("editor")}
        {Lisp-Entry "editor-down-arrow" method (public virtual abstract) ("editor") #f #f 48 35 48 52 ("editor")}
        {Lisp-Entry "editor-return" method (public virtual abstract) ("editor") #f #f 49 35 49 48 ("editor")}}}})
"Property-Moniker"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "moniker" "Property-Moniker.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.moniker.Property-Moniker" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.io")}
      {Lisp-Entry "Property-Moniker" class (undocumented) ((extends . "Moniker")) #f #f 43 20 43 36 ("Moniker")
        {Lisp-Entry "designer" slot (protected) ((getter . "generate")) #f #f 52 18 52 26 ()}
        {Lisp-Entry "get-designer" accessor () () #f #f 52 35 52 43 ()}
        {Lisp-Entry "reference" slot (protected) ((getter . "generate")) #f #f 53 18 53 27 ()}
        {Lisp-Entry "get-reference" accessor () () #f #f 53 35 53 43 ()}
        {Lisp-Entry "trait" slot (protected) ((getter . "generate")) #f #f 54 18 54 23 ()}
        {Lisp-Entry "get-trait" accessor () () #f #f 54 35 54 43 ()}
        {Lisp-Entry "class" slot (protected) ((getter . "generate")) #f #f 55 18 55 23 ()}
        {Lisp-Entry "get-class" accessor () () #f #f 55 35 55 43 ()}
        {Lisp-Entry "path" slot (protected) ((accessors . "generate")) #f #f 56 18 56 22 ()}
        {Lisp-Entry "get-path" accessor () () #f #f 56 38 56 46 ()}
        {Lisp-Entry "set-path" accessor () () #f #f 56 38 56 46 ()}
        {Lisp-Entry "property" slot (protected) () #f #f 57 18 57 26 ()}
        {Lisp-Entry "image" slot (protected) ((getter . "generate")) #f #f 58 18 58 23 ()}
        {Lisp-Entry "get-image" accessor () () #f #f 58 35 58 43 ()}
        {Lisp-Entry "presented" slot (protected) () #f #f 59 18 59 27 ()}
        {Lisp-Entry "location" slot (protected) ((getter . "generate")) #f #f 60 18 60 26 ()}
        {Lisp-Entry "get-location" accessor () () #f #f 60 35 60 43 ()}
        {Lisp-Entry "extension" slot (protected) () #f #f 61 18 61 27 ()}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 64 20 64 25 ("property" "path" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "compare-object" method (override) ("target") #f #f 70 20 70 34 (":not-equal" "else" ":equal" "get-property" "get-property~" "property" "get-path" "get-path~" "path" "=" "get-trait" "get-trait~" "trait" "get-designer" "get-designer~" "designer" "eq?" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "compare-pathname" method (override) ("object") #f #f 82 20 82 36 (":equal" "compare-object" "eq?" "object")}
        {Lisp-Entry "initialize" method (override) ("designer" "reference" "trait" "class" "path" "property" "image" "presented" "location" "extension") #f #f 91 20 91 30 ("extension~self" "location~self" "presented~self" "image~self" "property~self" "path~self" "class~self" "trait~self" "reference~self" "self" "designer~self" "set!" "nextmethod" "extension" "location" "presented" "image" "property" "path" "class" "trait" "reference" "designer")}
        {Lisp-Entry "get-component-name" method (public) () #f #f 110 18 110 36 ("trait" "trait:" "path" "designer" "get-name" "get-name~")}
        {Lisp-Entry "get-component-property" method (public) ("property") #f #f 114 18 114 40 ("trait" "trait:" "path" "designer" "get-property" "get-property~" "property")}
        {Lisp-Entry "set-component-property" method (public) ("property" "value") #f #f 118 18 118 40 ("trait" "trait:" "path" "designer" "set-property" "set-property~" "value" "property")}
        {Lisp-Entry "get-writable?" method (override) () #f #f 127 20 127 33 ()}
        {Lisp-Entry "exists?" method (override) () #f #f 131 20 131 27 ()}
        {Lisp-Entry "get-base" method (override) () #f #f 135 20 135 28 ("presented")}
        {Lisp-Entry "get-file" method (override) () #f #f 139 20 139 28 ()}
        {Lisp-Entry "get-name" method (override) () #f #f 143 20 143 28 ("presented")}
        {Lisp-Entry "get-extension" method (override) () #f #f 147 20 147 33 ("extension")}
        {Lisp-Entry "get-modification-time" method (override) () #f #f 151 20 151 41 ()}
        {Lisp-Entry "present" method (override) () #f #f 155 20 155 27 ("property" "path" "format")}
        {Lisp-Entry "present-base" method (override) () #f #f 159 20 159 32 ("presented")}
        {Lisp-Entry "present-location" method (override) () #f #f 163 20 163 36 ("location" "join")}
        {Lisp-Entry "load-lines" method (override) ("." "rest") #f #f 167 20 167 30 ("property" "get-component-property" "JzLoadLines" "rest")}
        {Lisp-Entry "save-lines" method (override) ("lines" "." "rest") #f #f 172 20 172 30 ("join-lines" "property" "set-component-property" "rest" "lines")}}}})
"Property-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "property" "Property-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.property.Property-View" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic")}
      {Lisp-Entry "Property-View" class () ((extends . "Layout-View")) #f #f 45 7 45 20 ("Layout-View")
        {Lisp-Entry "id" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 14 ()}
        {Lisp-Entry "get-id" accessor () () #f #f 48 46 48 54 ()}
        {Lisp-Entry "set-id" accessor () () #f #f 48 46 48 54 ()}
        {Lisp-Entry "editor" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 18 ()}
        {Lisp-Entry "get-editor" accessor () () #f #f 49 46 49 54 ()}
        {Lisp-Entry "set-editor" accessor () () #f #f 49 46 49 54 ()}
        {Lisp-Entry "editable?" property () ((initialize . "#t") (accessors . "generate")) #f #f 50 12 50 21 ()}
        {Lisp-Entry "get-editable?" accessor () () #f #f 50 46 50 54 ()}
        {Lisp-Entry "set-editable?" accessor () () #f #f 50 46 50 54 ()}
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("fill" "layout-type:" "White" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "add-child" method (override) ("child") #f #f 62 20 62 29 ("set-editable?" "set-editable?~" "editable?" "not" "when" "nextmethod" "child")}
        {Lisp-Entry "get-entry" method (public virtual) () #f #f 68 26 68 35 ("first-child")}}}})
"Property-Violation"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "property" "Property-Violation.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.property.Property-Violation" module (protected) () #f #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Property-Violation" class (undocumented) ((extends . "Object")) #f #f 40 20 40 38 ("Object")
        {Lisp-Entry "message" slot () ((getter . "generate")) #f #f 43 8 43 15 ()}
        {Lisp-Entry "get-message" accessor () () #f #f 43 23 43 31 ()}
        {Lisp-Entry "initialize" method (override) ("(message: message #f)") #f #f 46 20 46 30 ("self" "message~self" "set!" "nextmethod" "message" "message:")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 51 20 51 25 ("message" "self" "class-of" "category-name" "format" "readably" "output")}}}})
"Range-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Range-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.Range-Domain" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Range-Domain" class () ((extends . "Text-Domain")) #f #f 43 7 43 19 ("Text-Domain")
        {Lisp-Entry "present" method (override) ("range") #f #f 51 20 51 27 ("get-col" "get-col~" "get-line" "get-line~" "format" "get-end" "get-end~" "end" "get-start" "get-start~" "start" "let" "not" "if" "range")}
        {Lisp-Entry "parse" method (override) ("text") #f #f 68 20 68 25 ("Cell" "Range" "new" "end-col" "end-line" "start-col" "start-line" "bind" "read-delimited-string" "lst" "let" "equal?" "if" "text")}}}})
"Rect-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Rect-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.Rect-Domain" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Rect-Domain" class () ((extends . "Text-Domain")) #f #f 43 7 43 18 ("Text-Domain")
        {Lisp-Entry "present" method (override) ("rect") #f #f 51 20 51 27 ("get-bottom" "get-bottom~" "get-right" "get-right~" "get-top" "get-top~" "get-left" "get-left~" "format" "not" "if" "rect")}
        {Lisp-Entry "parse" method (override) ("text") #f #f 66 20 66 25 ("Rect" "new" "bottom" "right" "top" "left" "bind" "read-delimited-string" "lst" "let" "equal?" "if" "text")}}}})
"Reference-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Reference-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.Reference-Row" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Reference-Row" class (undocumented) ((extends . "Combo-Row")) #f #f 43 20 43 33 ("Combo-Row")}}})
"Row-Formatted-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Row-Formatted-Text-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.editor.Row-Formatted-Text-View" module (protected) () #f #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Row-Formatted-Text-View" class (undocumented) ((extends . "Formatted-Text-View")) #f #f 43 20 43 43 ("Formatted-Text-View")
        {Lisp-Entry "new-model" method (override) () #f #f 46 20 46 29 ("Text-Base" "Text-Style" "base-style:" "Formatted-Text-Model" "new")}
        {Lisp-Entry "get-value-row" method () () #f #f 55 11 55 24 ("4" "child")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 64 20 64 36 ()}
        {Lisp-Entry "focus-lose" method (override) () #f #f 73 20 73 30 ("get-value-row" "get-father" "get-father~" "invalidate-drawing" "invalidate-drawing~" "nextmethod")}
        {Lisp-Entry "focus-master" method (override) () #f #f 78 20 78 32 ("get-value-row" "get-tree" "get-tree~")}}}})
"Row-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Row-Text-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.editor.Row-Text-View" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
      {Lisp-Entry "Row-Text-View" class (undocumented) ((extends . "Plain-Text-View")) #f #f 43 20 43 33 ("Plain-Text-View")
        {Lisp-Entry "new-model" method (override) () #f #f 46 20 46 29 ("Text-Base" "Text-Style" "base-style:" "Text-Model" "new")}
        {Lisp-Entry "get-value-row" method () () #f #f 55 11 55 24 ("4" "child")}
        {Lisp-Entry "document-menu" method () () #f #f 64 11 64 24 ()}
        {Lisp-Entry "focus-lose" method (override) () #f #f 73 20 73 30 ("get-value-row" "get-father" "get-father~" "invalidate-drawing" "invalidate-drawing~" "nextmethod")}
        {Lisp-Entry "focus-master" method (override) () #f #f 78 20 78 32 ("get-value-row" "get-tree" "get-tree~")}}}})
"Save-Chooser"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "choosers" "Save-Chooser.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.designer.choosers.Save-Chooser" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.graphic" "jazz.jml" "jazz.ui" "jazz.library" "jazz.designer")}
      {Lisp-Entry "Save-Chooser" class () ((extends . "View")) #f #f 47 7 47 19 ("View")
        {Lisp-Entry "modules" property () ((initialize . "'()") (accessors . "generate")) #f #f 50 12 50 19 ()}
        {Lisp-Entry "get-modules" accessor () () #f #f 50 45 50 53 ()}
        {Lisp-Entry "set-modules" accessor () () #f #f 50 45 50 53 ()}
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("file" "class" "Trait" "<Trait>" "on-cancel" "311" "cancel" "on-ok" ":host" "default?:" "24" "80" "182" "225" "ok" "Push-Button" "<Push-Button>" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "<text" "<text~>" "172" "112" "202" "class-name-entry" "Entry-Widget" "<Entry-Widget>" "class-name-label" "170" "content-change-handler:" ">" "<box" "<box~>" "22" "175" "85" "200" "module-combo" "Combo-Widget" "<Combo-Widget>" "60" "module-label" "top-padding:" "2" "left-padding:" "body" "default-extension:" "parameters:" "on-content-change" "moniker-update-handler:" "save" "mode:" "moniker" "!" "<!>" "file-entry" "Pathname-Entry" "<Pathname-Entry>" "entry" "style:" "edge" "border-type:" "19" "201" "100" "173" "file-border" "Border-View" "<Border-View>" "visible?:" "40" "102" "136" "file-label" "101" "59" "110" "Vertical-Line" "<Vertical-Line>" "8" "48" "0" "Horizontal-Line" "<Horizontal-Line>" "on-file" "114" "file-button" "on-class" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" "88" "25" "class-button" "Radio-Button" "<Radio-Button>" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "Label-View" "<Label-View>" "216" "400" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 87 25 87 35 ()}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 91 20 91 26 ("class-button" "locate" "set-selected?" "set-selected?~" "class" "install-branch" "setup-modules" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method (override) () #f #f 98 20 98 33 ("get-active-trait-name" "focus-branch")}
        {Lisp-Entry "get-module-combo" method () () #f #f 102 11 102 27 ("box" "module-combo" "locate")}
        {Lisp-Entry "get-file-entry" method () () #f #f 106 11 106 25 ("file-entry" "locate")}
        {Lisp-Entry "get-class-name-text" method () () #f #f 110 11 110 30 ("text" "class-name-entry" "locate")}
        {Lisp-Entry "setup-modules" method () () #f #f 114 11 114 24 ("symbol->string" "map" "modules" "zip" "get-module-combo" "set-choices" "set-choices~")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 124 20 124 36 ("get-file-entry" "file" "list" "empty-string?" "not" "and" "get-class-name-text" "get-string-content" "get-string-content~" "class-string" "get-module-combo" "get-value" "get-value~" "err" "Parse-Error" "catch" "module-name" "let" "class" "get-active-trait-name" "case")}
        {Lisp-Entry "on-class" method () ("evt") #f #f 142 11 142 19 ("class" "install-branch" "evt")}
        {Lisp-Entry "on-file" method () ("evt") #f #f 146 11 146 18 ("file" "install-branch" "evt")}
        {Lisp-Entry "on-content-change" method () ("evt") #f #f 150 11 150 28 ("update-ok" "evt")}
        {Lisp-Entry "on-return-press" method (override) ("evt") #f #f 155 20 155 35 ("get-modal-result" "get-modal-result~" "end-modal" "end-modal~" "get-host" "dialog" "let" "validate-dialog" "ok" "locate" "get-enabled?" "get-enabled?~" "when" "evt")}
        {Lisp-Entry "on-escape-press" method (override) ("evt") #f #f 163 20 163 35 ("cancel-modal" "cancel-modal~" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "install-branch" method () ("trait") #f #f 173 11 173 25 ("update-ok" "focus-branch" "player" "when" "locate" "set-active-trait" "trait")}
        {Lisp-Entry "focus-branch" method () ("trait") #f #f 179 11 179 23 ("get-file-entry" "tab-view" "tab-view~" "file" "get-module-combo" "class" "case" "acquire-focus" "acquire-focus~" "trait")}
        {Lisp-Entry "update-ok" method () () #f #f 190 11 190 20 ("get-modal-result" "and" "ok" "locate" "set-enabled?" "set-enabled?~")}}}})
"Search-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Search-Tree.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.editor.Search-Tree" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Search-Tree" class (undocumented) ((extends . "Details-Tree")) #f #f 47 20 47 31 ("explicit" "Details-Tree")
        {Lisp-Entry "target" property () ((initialize . "#f") (accessors . "explicit")) #f #f 50 12 50 18 ()}
        {Lisp-Entry "form" form () () #f #f 53 3 53 7 ("kind" "275" "location" "Tree-Label-Column" "<Tree-Label-Column>" "toplevel-controls?:" "100" "width:" "title:" "name:" "Tree-Node-Column" "<Tree-Node-Column>" "on-selection-change" ":self" "Event-Handler" "selection-handler:" "can-select-empty?:" "multiple-selection?:" "row" "selection-mode:" ":images" "portfolio:" "component" "filled-column:" "install" "<install>")}
        {Lisp-Entry "get-target" method (public) () #f #f 65 18 65 28 ("target")}
        {Lisp-Entry "set-target" method (public) ("value") #f #f 69 18 69 28 ("acquire-focus" "set-single-selection" "0" "visible-count" ">" "when" "update" "target" "set!" "value")}
        {Lisp-Entry "selection-changed" method (override) ("component" "old" "origin" "force-parent?" "focus?") #f #f 82 20 82 37 ("focus?" "force-parent?" "origin" "old" "component")}
        {Lisp-Entry "on-designer" method (override) ("evt") #f #f 91 20 91 31 ("update" ":property-change" ":child-remove" ":child-add" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "update" method (override) ("." "rest") #f #f 103 20 103 26 ("get-presentation-property" "get-presentation-property~" "localize" "key:" "<" "sort" "insert-component" "for-each" "with-update-locked" "remove-every-row" "cons" "set!" "search-component" "search-component~" "indexable?" "indexable?~" "and" "when" "level" "component" "lambda" "client" "for-each-descendant" "for-each-descendant~" "list" "let" "target" "search-components" "define" "rest")}
        {Lisp-Entry "insert-component" method (override) ("component" "father" "recursive?") #f #f 121 20 121 36 ("user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "father:" "add-row" "class-of" "get-class-presentation" "get-class-presentation~" "kind" "present-location" "location" "get-component-image" "get-component-image~" "image" "get-presentation-property" "get-presentation-property~" "title" "let" "recursive?" "father" "component")}}}})
"String-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "String-Domain.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.domain.String-Domain" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.designer")}
      {Lisp-Entry "String-Domain" class () ((extends . "Domain")) #f #f 44 7 44 20 ("Domain")
        {Lisp-Entry "validate-value" method (override) ("property" "value" "component" "root" "client" "context" "manager") #f #f 52 20 52 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "string?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method (override) ("value") #f #f 62 20 62 27 ("or" "value")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 71 20 71 31 ("self" "domain:" "get-size" "get-size~" "size:" "parent:" "String-Entry" "new" "client" "view")}}}})
"String-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "String-Entry.jazz"} 242122232. jazz
    {Lisp-Entry "jazz.designer.entry.String-Entry" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "String-Entry" class () ((extends . "Property-Entry")) #f #f 46 7 46 19 ("Property-Entry")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("top-padding:" "1" "left-padding:" "text" "Entry-Text-View" "<Entry-Text-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "scroller" "name:" "Scroller-View" "<Scroller-View>" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 56 20 56 26 ("self" "text" "locate" "set-editor" "set-editor~" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" method (override) () #f #f 66 20 66 28 ("text" "locate")}
        {Lisp-Entry "setup-for-grid" method (override) () #f #f 75 20 75 34 ("set-top-padding" "set-top-padding~" "0" "set-left-padding" "set-left-padding~" "locate" "text" "let")}
        {Lisp-Entry "validate" method (override) ("domain") #f #f 86 20 86 28 ("message:" "Property-Violation" "new" "get-nullable?" "get-nullable?~" "not" "empty-string?" "and" "if" "text" "locate-component" "get-string-content" "get-string-content~" "content" "let" "domain")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 99 20 99 33 ("text" "locate" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-modified?" method (override) ("value") #f #f 103 20 103 33 ("text" "locate" "set-modified?" "set-modified?~" "value")}
        {Lisp-Entry "get-value" method (override) () #f #f 111 20 111 29 ("empty-string?" "if" "text" "locate" "get-string-content" "get-string-content~" "content" "let")}
        {Lisp-Entry "set-value" method (override) ("value") #f #f 118 20 118 29 ("not" "if" "text" "locate" "set-string-content" "set-string-content~" "value")}
        {Lisp-Entry "set-editable?" method (override) ("flag") #f #f 130 20 130 33 ("Medium" "White" "Color" "if" "set-background" "set-background~" "text" "locate" "set-editable?" "set-editable?~" "flag")}}}})
"String-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "String-Row.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.row.String-Row" module (protected) () #f #f 37 18 37 46 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "String-Row" class (undocumented) ((extends . "Value-Row")) #f #f 43 20 43 30 ("Value-Row")
        {Lisp-Entry "present" method (override) ("value") #f #f 51 20 51 27 ("format" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "get-edited-value" method (override) () #f #f 62 20 62 36 ("string=?" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "get-string-content~" "string" "let")}}}})
"Style-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Style-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.Style-Domain" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.designer")}
      {Lisp-Entry "Style-Domain" class () ((extends . "Domain")) #f #f 45 7 45 19 ("100" "Domain")
        {Lisp-Entry "width" property () ((initialize . "100") (accessors . "generate")) #f #f 48 12 48 17 ()}
        {Lisp-Entry "get-width" accessor () () #f #f 48 45 48 53 ()}
        {Lisp-Entry "set-width" accessor () () #f #f 48 45 48 53 ()}
        {Lisp-Entry "choices" property () ((initialize . "'()") (accessors . "generate")) #f #f 49 12 49 19 ()}
        {Lisp-Entry "get-choices" accessor () () #f #f 49 45 49 53 ()}
        {Lisp-Entry "set-choices" accessor () () #f #f 49 45 49 53 ()}
        {Lisp-Entry "present" method (override) ("value") #f #f 57 20 57 27 ("cadr" "localize" "->string" "choices" "assq" "pair" "let" "not" "if" "value")}
        {Lisp-Entry "style-choices" method () () #f #f 71 11 71 24 ("Text-Bold" "Text-Base")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 76 20 76 31 ("combo" "locate" "locate~" "set-choices" "set-choices~" "domain:" "19" "width" "Dimension" "size:" "parent:" "Enumeration-Entry" "new" "entry" "symbol->string" "key:" "style-choices" "nu<?" "sort" "->string" "title" "symbolic-style" "style" "let" "name" "lambda" "map" "list" "cons" "self" "choices" "choices~self" "set!" "client" "view")}}}})
"Style-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "manager" "Style-Editor.jazz"} 246601672. jazz
    {Lisp-Entry "jazz.designer.manager.Style-Editor" module (protected) () #f #f 0 18 0 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 3 1 3 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.designer")}
      {Lisp-Entry "Style-Editor" class () ((extends . "Layout-View")) #f #f 12 7 12 19 ("Layout-View")
        {Lisp-Entry "client" slot () ((accessors . "generate")) #f #f 15 8 15 14 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 15 25 15 33 ()}
        {Lisp-Entry "set-client" accessor () () #f #f 15 25 15 33 ()}
        {Lisp-Entry "selection" slot () () #f #f 16 8 16 17 ()}
        {Lisp-Entry "form" form () () #f #f 19 3 19 7 ("frame-color" "highlight-color" "on-pick-color" "color:" "text-color" "Color-Chooser" "<Color-Chooser>" "on-underline" "underline" "on-italic" "italic" "on-bold" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "bold" "Toggle-Tool" "<Toggle-Tool>" "Separator" "<Separator>" "size" "Size-Combo" "<Size-Combo>" "40" "size-border" "font" "Font-Combo" "<Font-Combo>" "140" "font-border" "enabled?:" "style" "Style-Combo" "<Style-Combo>" "166" "blue:" "188" "green:" "200" "red:" "border-color:" "1" "2" "border-insets:" "22" "120" "Dimension" "size:" "style-border" "name:" "Border-View" "<Border-View>" "Medium" "Color" "background:" "0" "5" "4" "Rect" "layout-insets:" "flow" "layout-type:" "install" "<install>")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 45 25 45 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 49 25 49 35 ()}
        {Lisp-Entry "on-editor" method () ("evt") #f #f 58 11 58 20 ("selection-update" "self" "selection~self" "set!" "car" "get-selection" "get-selection~" "not-null?" "and" "selection" "let" ":selection-changed" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "on-designer" method () ("evt") #f #f 66 11 66 22 ("selection-update" "property:" "get-property" "get-property~" "get-name" "get-name~" "style" "eq?" "when" ":property-change" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "enable-combo" method () ("name" "client" "enable?") #f #f 73 11 73 23 ("selection-change" "selection-change~" "set-client" "set-client~" "set-enabled?" "set-enabled?~" "locate" "component" "let" "enable?" "client" "name")}
        {Lisp-Entry "enable-toggler" method () ("name" "enable?" "selected?") #f #f 80 11 80 25 ("set-selected?" "set-selected?~" "set-enabled?" "set-enabled?~" "locate" "component" "let" "selected?" "enable?" "name")}
        {Lisp-Entry "enable-color-button" method () ("name" "enable?" "color") #f #f 86 11 86 30 ("set-color" "set-color~" "set-enabled?" "set-enabled?~" "locate" "component" "let" "color" "enable?" "name")}
        {Lisp-Entry "get-effective-view" method (virtual) () #f #f 92 19 92 37 ("View" "selection" "is?" "and")}
        {Lisp-Entry "get-effective-style" method (virtual) ("view") #f #f 96 19 96 38 ("get-style" "get-style~" "view")}
        {Lisp-Entry "selection-update" method () () #f #f 100 11 100 27 ("get-frame" "get-frame~" "frame-color" "get-highlight" "get-highlight~" "highlight-color" "get-color" "get-color~" "text-color" "enable-color-button" "get-italic?" "get-italic?~" "italic" "get-underline?" "get-underline?~" "underline" "get-bold?" "get-bold?~" "bold" "enable-toggler" "size" "enable-combo" "get-font" "get-font~" "font" "Style" "is?" "not" "or" "valid-style?" "get-effective-style" "and" "style" "get-effective-view" "view" "let*")}
        {Lisp-Entry "on-bold" method () ("evt") #f #f 121 11 121 18 ("client" "toggle-bold" "toggle-bold~" "evt")}
        {Lisp-Entry "on-italic" method () ("evt") #f #f 125 11 125 20 ("client" "toggle-italic" "toggle-italic~" "evt")}
        {Lisp-Entry "on-underline" method () ("evt") #f #f 129 11 129 23 ("client" "toggle-underline" "toggle-underline~" "evt")}
        {Lisp-Entry "on-pick-color" method () ("evt") #f #f 133 11 133 24 ("initiator:" "on-color" "lambda" "execute:" "Event-Handler" "action-handler:" "8" "3" "Cell" "geometry:" "colors:" "Color-Picker" "popup" "get-height" "get-height~" "0" "Point" "new" "get-position" "get-position~" "nu+" "position" "get-sender" "get-sender~" "sender" "let*" "evt")}
        {Lisp-Entry "on-color" method () ("sender" "evt") #f #f 139 11 139 19 ("change-frame-color" "change-frame-color~" "frame-color" "change-highlight-color" "change-highlight-color~" "highlight-color" "client" "change-text-color" "change-text-color~" "text-color" "get-name" "get-name~" "case" "color:" "get-property" "get-property~" "color" "let" "close-popups" "evt" "sender")}
        {Lisp-Entry "client-activate" method (override) () #f #f 155 20 155 35 ("on-designer" "get-designer" "get-designer~" "add-designer-listener" "add-designer-listener~" "on-editor" "method-name:" "target:" "Event-Handler" "new" "add-editor-listener" "add-editor-listener~" "style" "size" "font" "locate" "set-editor" "set-editor~" "when" "self" "client~self" "set!" "View-Editor" "is?" "and" "client" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method (override) () #f #f 167 20 167 37 ("selection-update" "selection" "set!" "remove-designer-listener" "remove-designer-listener~" "get-designer" "get-designer~" "and" "self" "remove-editor-listener" "remove-editor-listener~" "client" "when")}}
      {Lisp-Entry "Style-Combo" class () ((extends . "Text-Style-Combo")) #f #f 176 7 176 18 ("Text-Style-Combo")
        {Lisp-Entry "editor" slot () ((accessors . "generate")) #f #f 179 8 179 14 ()}
        {Lisp-Entry "get-editor" accessor () () #f #f 179 25 179 33 ()}
        {Lisp-Entry "set-editor" accessor () () #f #f 179 25 179 33 ()}
        {Lisp-Entry "client-update" method (override) () #f #f 182 20 182 33 ("key:" "symbolic-styles" "string-ci<?" "sort" "->string" "base:" "Text-Style" "new" "list" "name" "lambda" "map" "set-choices")}
        {Lisp-Entry "selection-change" method (override) () #f #f 188 20 188 36 ("->string" "set-content" "last" "not-null?" "name" "get-base" "get-base~" "Text-Style" "is?" "base" "editor" "get-effective-style" "get-effective-style~" "client" "and" "style" "let*")}
        {Lisp-Entry "combo-choice" method (override) () #f #f 195 20 195 32 ("editor" "get-client" "get-client~" "on-style" "on-style~" "get-value" "val" "let")}}
      {Lisp-Entry "Font-Combo" class () ((extends . "Text-Font-Combo")) #f #f 200 7 200 17 ("Text-Font-Combo")
        {Lisp-Entry "editor" slot () ((accessors . "generate")) #f #f 203 8 203 14 ()}
        {Lisp-Entry "get-editor" accessor () () #f #f 203 25 203 33 ()}
        {Lisp-Entry "set-editor" accessor () () #f #f 203 25 203 33 ()}
        {Lisp-Entry "selection-change" method (override) () #f #f 206 20 206 36 ("set-choice" "get-font-name" "get-font-name~" "set-value" "if" "get-font" "get-font~" "Text-Style" "is?" "font" "editor" "get-effective-style" "get-effective-style~" "client" "and" "style" "let*")}
        {Lisp-Entry "combo-choice" method (override) () #f #f 214 20 214 32 ("editor" "get-client" "get-client~" "on-font-name" "on-font-name~" "get-value" "val" "let")}}
      {Lisp-Entry "Size-Combo" class () ((extends . "Text-Size-Combo")) #f #f 219 7 219 17 ("Text-Size-Combo")
        {Lisp-Entry "editor" slot () ((accessors . "generate")) #f #f 222 8 222 14 ()}
        {Lisp-Entry "get-editor" accessor () () #f #f 222 25 222 33 ()}
        {Lisp-Entry "set-editor" accessor () () #f #f 222 25 222 33 ()}
        {Lisp-Entry "selection-change" method (override) () #f #f 225 20 225 36 ("set-choice" "get-point-size" "get-point-size~" "set-value" "if" "get-font" "get-font~" "Text-Style" "is?" "font" "editor" "get-effective-style" "get-effective-style~" "client" "and" "style" "let*")}
        {Lisp-Entry "combo-choice" method (override) () #f #f 233 20 233 32 ("editor" "get-client" "get-client~" "on-font-size" "on-font-size~" "get-value" "val" "let")}}
      {Lisp-Entry "Color-Chooser" class () ((extends . "Push-Tool")) #f #f 238 7 238 20 ("explicit" "Push-Tool")
        {Lisp-Entry "color" property () ((initialize . "#f") (accessors . "explicit")) #f #f 241 12 241 17 ()}
        {Lisp-Entry "get-color" method (public) () #f #f 244 18 244 27 ("color")}
        {Lisp-Entry "set-color" method (public) ("value") #f #f 248 18 248 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "draw-tool" method (override) ("surface" "context") #f #f 253 20 253 29 ("Dark" "Color" "view-enabled?" "fill-rect" "fill-rect~" "18" "14" "Rect" "new" "offset-rect" "rect" "1" "2" "pushed" "state" "eq?" "if" "offset" "let*" "color" "when" "nextmethod" "context" "surface")}}}})
"Surrogate-Handler"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "surrogate" "Surrogate-Handler.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.surrogate.Surrogate-Handler" module (protected) () #f #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Surrogate-Handler" class (undocumented) ((extends . "Event-Handler")) #f #f 43 20 43 37 ("Event-Handler")
        {Lisp-Entry "preserved" slot () ((getter . "generate")) #f #f 46 8 46 17 ()}
        {Lisp-Entry "get-preserved" accessor () () #f #f 46 25 46 33 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 49 20 49 30 ("self" "preserved~self" "set!" "nextmethod" "apply" "others" "preserved" "bind-keywords" "rest")}}}})
"Tab-View-Surrogate"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "surrogate" "Tab-View-Surrogate.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.surrogate.Tab-View-Surrogate" module (protected) () #f #f 37 18 37 60 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Tab-View-Surrogate" class (undocumented) ((extends . "View-Surrogate")) #f #f 43 20 43 38 ("View-Surrogate")
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 46 20 46 30 ("set-selection" "set-selection~" "when" "client" "find-header" "find-header~" "header" "let" "nextmethod" "pos")}}}})
"Text-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Text-Domain.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.domain.Text-Domain" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Text-Domain" class () ((extends . "Domain")) #f #f 43 7 43 18 ("Domain")
        {Lisp-Entry "validate" method (override) ("text") #f #f 51 20 51 28 ("message:" "Property-Violation" "new" "nullable?" "not" "empty-string?" "and" "if" "text")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 63 20 63 31 ("self" "domain:" "get-size" "get-size~" "size:" "parent:" "Text-Entry" "new" "client" "view")}}}})
"Text-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Text-Entry.jazz"} 242122232. jazz
    {Lisp-Entry "jazz.designer.entry.Text-Entry" module (protected) () #f #f 37 18 37 48 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Text-Entry" class () ((extends . "Property-Entry")) #f #f 46 7 46 17 ("Property-Entry")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("top-padding:" "1" "left-padding:" "text" "Entry-Text-View" "<Entry-Text-View>" "fill" "layout-type:" "content" "!" "<!>" "vscroll?:" "hscroll?:" "scroller" "name:" "Scroller-View" "<Scroller-View>" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 56 20 56 26 ("self" "text" "locate" "set-editor" "set-editor~" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" method (override) () #f #f 66 20 66 28 ("text" "locate")}
        {Lisp-Entry "setup-for-grid" method (override) () #f #f 75 20 75 34 ("set-top-padding" "set-top-padding~" "0" "set-left-padding" "set-left-padding~" "locate" "text" "let")}
        {Lisp-Entry "validate" method (override) ("domain") #f #f 86 20 86 28 ("message:" "Property-Violation" "new" "get-nullable?" "get-nullable?~" "not" "empty-string?" "and" "if" "text" "locate-component" "get-string-content" "get-string-content~" "content" "let" "domain")}
        {Lisp-Entry "get-modified?" method (override) () #f #f 99 20 99 33 ("text" "locate" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-modified?" method (override) ("value") #f #f 103 20 103 33 ("text" "locate" "set-modified?" "set-modified?~" "value")}
        {Lisp-Entry "get-presentation" method (override) () #f #f 111 20 111 36 ("text" "locate" "get-string-content" "get-string-content~")}
        {Lisp-Entry "set-presentation" method (override) ("presentation") #f #f 115 20 115 36 ("text" "locate" "set-string-content" "set-string-content~" "presentation")}
        {Lisp-Entry "get-value" method (override) () #f #f 124 20 124 29 ("text" "locate" "get-string-content" "get-string-content~" "domain" "parse" "parse~")}
        {Lisp-Entry "set-value" method (override) ("value") #f #f 128 20 128 29 ("domain" "present" "present~" "text" "locate" "set-string-content" "set-string-content~" "value")}
        {Lisp-Entry "set-editable?" method (override) ("flag") #f #f 138 20 138 33 ("Medium" "White" "Color" "if" "set-background" "set-background~" "text" "locate" "set-editable?" "set-editable?~" "flag")}}}})
"Text-View-Surrogate"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "surrogate" "Text-View-Surrogate.jazz"} 242773042. jazz
    {Lisp-Entry "jazz.designer.surrogate.Text-View-Surrogate" module (protected) () #f #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Text-View-Surrogate" class (undocumented) ((extends . "View-Surrogate")) #f #f 43 20 43 39 ("View-Surrogate")
        {Lisp-Entry "edit?" slot () ((initialize . "#f")) #f #f 46 8 46 13 ()}
        {Lisp-Entry "editing?" method (override) () #f #f 54 20 54 28 ("edit?")}
        {Lisp-Entry "start-edit" method () () #f #f 58 11 58 21 ("client" "invalidate-view" "invalidate-view~" "edit?" "set!")}
        {Lisp-Entry "stop-edit" method () () #f #f 63 11 63 20 ("client" "invalidate-view" "invalidate-view~" "edit?" "set!")}
        {Lisp-Entry "focus-gained" method (override) () #f #f 73 20 73 32 ("nextmethod" "client" "focus-gained" "focus-gained~" "editing?" "if")}
        {Lisp-Entry "focus-lose" method (override) () #f #f 79 20 79 30 ("nextmethod" "stop-edit" "client" "focus-lose" "focus-lose~" "begin" "editing?" "if")}
        {Lisp-Entry "cursor-update" method (override) ("pos") #f #f 92 20 92 33 ("nextmethod" "client" "cursor-update" "cursor-update~" "editing?" "if" "pos")}
        {Lisp-Entry "mouse-down" method (override) ("pos") #f #f 103 20 103 30 ("nextmethod" "mouse-down" "mouse-down~" "client" "editor" "select" "select~" "select?" "when" "begin" "editing?" "if" "pos")}
        {Lisp-Entry "mouse-up" method (override) ("pos") #f #f 112 20 112 28 ("nextmethod" "client" "mouse-up" "mouse-up~" "editing?" "if" "pos")}
        {Lisp-Entry "drag-move" method (override) ("pos") #f #f 118 20 118 29 ("nextmethod" "client" "drag-move" "drag-move~" "editing?" "if" "pos")}
        {Lisp-Entry "drag-up" method (override) ("pos" "." "rest") #f #f 124 20 124 27 ("nextmethod" "client" "drag-up" "~" "apply" "editing?" "if" "rest" "pos")}
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 130 20 130 32 ("start-edit" "client" "double-click" "double-click~" "editing?" "if" "pos")}
        {Lisp-Entry "context-menu" method (override) ("pos") #f #f 136 20 136 32 ("nextmethod" "client" "context-menu" "context-menu~" "editing?" "if" "pos")}
        {Lisp-Entry "key-press" method (override) ("key") #f #f 147 20 147 29 ("nextmethod" "client" "key-press" "key-press~" "editing?" "if" "key")}
        {Lisp-Entry "return-press" method (override) ("key") #f #f 153 20 153 32 ("start-edit" "client" "return-press" "return-press~" "editing?" "if" "key")}}}})
"Time-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Time-Domain.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.domain.Time-Domain" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Time-Domain" class () ((extends . "Domain")) #f #f 43 7 43 18 ("Domain")}
      {Lisp-Entry "Time-Domain" class () ((extends . "Domain")) #f #f 49 7 49 18 ("Domain")
        {Lisp-Entry "validate-value" method () ("property" "value" "component" "root" "client" "context" "manager") #f #f 57 11 57 25 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "add-violation~" "Date" "is-not?" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method () ("value") #f #f 67 11 67 18 ("present-compact" "present-compact~" "not" "if" "value")}}}})
"Toolbox"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox" module (protected) () #f #f 37 18 37 47 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.jml")}
      {Lisp-Entry "Toolbox" class (undocumented) ((extends . "Group")) #f #f 44 20 44 27 ("Group")
        {Lisp-Entry "kind" property () ((initialize . "#f") (accessors . "generate")) #f #f 47 12 47 16 ()}
        {Lisp-Entry "get-kind" accessor () () #f #f 47 41 47 49 ()}
        {Lisp-Entry "set-kind" accessor () () #f #f 47 41 47 49 ()}
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("title:" "install" "<install>")}
        {Lisp-Entry "find-model" method (public) ("locator" "unit") #f #f 60 18 60 28 ("item" "return:" "Toolbox-Model" "collect-descendants" "get-unit" "get-unit~" "eq?" "get-model" "get-model~" "equal?" "and" "toolbox-model" "lambda" "find-if" "unit" "locator")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 73 25 73 45 ("Toolbox-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 82 11 82 17 ()
        {Lisp-Entry "import" import () () #f #f 85 1 85 7 ("jazz.designer")}
        {Lisp-Entry "Toolbox-Descriptor" class () ((extends . "Group-Descriptor")) #f #f 88 7 88 25 ("Group-Descriptor")
          {Lisp-Entry "form" form () () #f #f 91 3 91 7 ("user" "choices:" "domain" "Enumeration-Domain" "<Enumeration-Domain>" "name:" "Property-Descriptor" "<Property-Descriptor>" "sort?" "kind" "name-info" "class-info" "categorized:" ">" "<properties" "<properties~>" "can-copy?:" "can-relocate?:" "can-delete?:" "can-rename?:" "Image-Resource" "image:" "title:" "install" "<install>")}
          {Lisp-Entry "component-get-presentation" method (override) ("component") #f #f 98 20 98 46 ("get-title" "get-title~" "component")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 102 20 102 61 ("Toolbox-Form" "Toolbox-Model" "Toolbox-Module" "Toolbox-Group" "reference" "list" "component")}}}}})
"Toolbox-Addable"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Addable.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Addable" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library")}
      {Lisp-Entry "Toolbox-Addable" class (undocumented) ((extends . "Component")) #f #f 43 20 43 35 ("Component")
        {Lisp-Entry "title" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 17 ()}
        {Lisp-Entry "get-title" accessor () () #f #f 46 42 46 50 ()}
        {Lisp-Entry "set-title" accessor () () #f #f 46 42 46 50 ()}
        {Lisp-Entry "get-class" method (protected virtual) () #f #f 54 29 54 38 ()}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 63 25 63 45 ("Toolbox-Addable-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 72 11 72 17 ()
        {Lisp-Entry "import" import () () #f #f 75 1 75 7 ("jazz.designer")}
        {Lisp-Entry "Toolbox-Addable-Descriptor" class () ((extends . "Component-Descriptor")) #f #f 78 7 78 33 ("Component-Descriptor")}}}})
"Toolbox-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Editor.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Editor" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Toolbox-Editor" class (undocumented) ((extends . "Descendants-Editor")) #f #f 43 20 43 34 ("Descendants-Editor")
        {Lisp-Entry "form-model" method (override) ("form") #f #f 46 20 46 30 ("nextmethod" "else" "Toolbox-Tree" "tree" "get-name" "get-name~" "case" "form")}}
      {Lisp-Entry "Dialog-Toolbox-Tree" class () ((extends . "Toolbox-Tree")) #f #f 52 7 52 26 ("Toolbox-Tree")
        {Lisp-Entry "insert-toplevel" method (override) ("rights") #f #f 55 20 55 35 ("0" "client" "insert-components" "rights")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 59 20 59 36 ()}}
      {Lisp-Entry "Dialog-Toolbox-Editor" class () ((extends . "Toolbox-Editor")) #f #f 63 7 63 28 ("Toolbox-Editor")
        {Lisp-Entry "form-model" method (override) ("form") #f #f 66 20 66 30 ("nextmethod" "else" "Dialog-Toolbox-Tree" "tree" "get-name" "get-name~" "case" "form")}}}})
"Toolbox-Form"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Form.jazz"} 237856572. jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Form" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Toolbox-Form" class (undocumented) ((extends . "Toolbox-Addable")) #f #f 45 20 45 32 ("Toolbox-Addable")
        {Lisp-Entry "imports" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 19 ()}
        {Lisp-Entry "get-imports" accessor () () #f #f 48 44 48 52 ()}
        {Lisp-Entry "set-imports" accessor () () #f #f 48 44 48 52 ()}
        {Lisp-Entry "locator" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 19 ()}
        {Lisp-Entry "get-locator" accessor () () #f #f 49 44 49 52 ()}
        {Lisp-Entry "set-locator" accessor () () #f #f 49 44 49 52 ()}
        {Lisp-Entry "locate-form" method (public) () #f #f 57 18 57 29 ("locator" "require-form")}
        {Lisp-Entry "get-class" method (override) () #f #f 61 20 61 29 ("locate-form" "resolve-model" "resolve-model~")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 70 20 70 25 ("locator" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 81 25 81 45 ("Toolbox-Form-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 90 11 90 17 ()
        {Lisp-Entry "import" import () () #f #f 93 1 93 7 ("jazz.designer")}
        {Lisp-Entry "Toolbox-Form-Descriptor" class () ((extends . "Component-Descriptor")) #f #f 96 7 96 30 ("Component-Descriptor")
          {Lisp-Entry "form" form () () #f #f 99 3 99 7 ("locator" "imports" "title" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "Image-Resource" "image:" "title:" "install" "<install>")}
          {Lisp-Entry "component-presentation-property?" method (override) ("component" "property") #f #f 107 20 107 52 ("locator" "title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method (override) ("component") #f #f 111 20 111 46 ("get-locator" "get-locator~" "get-title" "get-title~" "or" "component")}
          {Lisp-Entry "component-set-presentation" method (override) ("component" "designer" "presentation") #f #f 115 20 115 46 ("title:" "set-property" "set-property~" "presentation" "designer" "component")}}}}})
"Toolbox-Group"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Group.jazz"} 245225712. jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Group" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Toolbox-Group" class (undocumented) ((extends . "Component")) #f #f 45 20 45 33 ("Component")
        {Lisp-Entry "title" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 17 ()}
        {Lisp-Entry "get-title" accessor () () #f #f 48 42 48 50 ()}
        {Lisp-Entry "set-title" accessor () () #f #f 48 42 48 50 ()}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 56 25 56 45 ("Toolbox-Group-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 65 11 65 17 ()
        {Lisp-Entry "import" import () () #f #f 68 1 68 7 ("jazz.designer")}
        {Lisp-Entry "Toolbox-Group-Descriptor" class () ((extends . "Component-Descriptor")) #f #f 71 7 71 31 ("Component-Descriptor")
          {Lisp-Entry "form" form () () #f #f 74 3 74 7 ("title" "name:" "Property-Descriptor" "<Property-Descriptor>" "name-info" "class-info" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image:" "title:" "install" "<install>")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 80 20 80 61 ("Toolbox-Form" "Toolbox-Model" "Toolbox-Module" "Toolbox-Group" "reference" "list" "component")}}}}})
"Toolbox-Manager"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Manager.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Manager" module (protected) () #f #f 37 18 37 55 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system.process" "jazz.system" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.io" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "read-toolbox" definition () ("toolbox") #f #f 58 13 58 25 ("err" "continue-handler:" "install-context" "install-context~" "toolbox-file" "toolbox-file~" "get-application" "appl" "let" "lambda" "with-safe-execution" "Toolbox" "new" "read-form" "instantiate" "instantiate~" "exists?" "exists?~" "if" "file" "load-toolbox" "define" "toolbox")}
      {Lisp-Entry "Toolbox-Manager" class (undocumented) ((extends . "Component-Editor") (implements . "Exit-Listener")) #f #f 80 20 80 35 ("explicit" "Exit-Listener" "Component-Editor")
        {Lisp-Entry "toolbox" property () ((initialize . "#f") (accessors . "explicit")) #f #f 83 12 83 19 ()}
        {Lisp-Entry "form" form () () #f #f 86 3 86 7 ("291" "width:" "title:" "descendant" "on-double-click" ":self" "double-click-handler:" "auto-expand/collapse?:" "highlight-edited?:" "tree" "header" "content" "tool" "style:" "scroller" "!" "<!>" "center" "descendants" "Toolbox-Editor" "<Toolbox-Editor>" "on-synchronize" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "synchronize" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "install" "<install>")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 100 20 100 26 ("application-select?" "tree" "descendants" "locate" "set-application-select?" "set-application-select?~" "nextmethod" "rest")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 105 25 105 38 ("toolbox-manager" "rest")}
        {Lisp-Entry "component-alias" method (override) ("name") #f #f 114 20 114 35 ("nextmethod" "else" "get-tree" "tree" "case" "name")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 125 25 125 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 129 25 129 35 ()}
        {Lisp-Entry "get-tools-view" method (override) () #f #f 138 20 138 34 ("tools" "locate")}
        {Lisp-Entry "focus-default" method (override) () #f #f 142 20 142 33 ("acquire-focus" "acquire-focus~" "descendants" "locate" "tree" "let")}
        {Lisp-Entry "new-document-controller" method (override) () #f #f 152 20 152 43 ("self" "Toolbox-Manager-Controller" "new")}
        {Lisp-Entry "get-toolbox" method (public) () #f #f 161 18 161 29 ("toolbox")}
        {Lisp-Entry "set-toolbox" method (public) ("tlb") #f #f 165 18 165 29 ("read-toolbox" "and" "set-client" "toolbox" "set!" "tlb")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 175 20 175 27 ("get-application" "add-exit-listener" "add-exit-listener~" "self" "locate" "set-editor" "set-editor~" "header" "descendants" "locate-component" "set-shown?" "set-shown?~" "nextmethod" "rest")}
        {Lisp-Entry "prepare-exit" method (override) () #f #f 182 20 182 32 ("save" "save~" "get-form" "get-form~" "get-origin" "get-origin~" "file?" "designer" "and" "when")}
        {Lisp-Entry "get-tree" method () () #f #f 192 11 192 19 ("tree" "descendants" "locate")}
        {Lisp-Entry "document-status" method () () #f #f 201 11 201 26 ()}
        {Lisp-Entry "get-module-names" method (public) () #f #f 210 18 210 34 ("get-toolbox-modules" "get-module-name" "get-module-name~" "map")}
        {Lisp-Entry "get-toolbox-modules" method (public) () #f #f 214 18 214 37 ("Toolbox-Module" "get-client" "collect-descendants" "collect-descendants~")}
        {Lisp-Entry "get-toolbox-models" method (public) () #f #f 218 18 218 36 ("Toolbox-Model" "get-client" "collect-descendants" "collect-descendants~")}
        {Lisp-Entry "get-addable-models-refs" method (public) ("component") #f #f 222 18 222 41 ("get-reference" "get-reference~" "map" "get-toolbox-models" "addable-class?" "addable-class?~" "Class" "is?" "and" "get-class" "get-class~" "class" "tool" "lambda" "collect-if" "tools" "let" "component")}
        {Lisp-Entry "on-synchronize" method () ("evt") #f #f 235 11 235 25 ("ensure-expanded?:" "text" "use:" "get-toolbox-modules" "descendant?:" "new" "install-new-component" "install-new-component~" "properties" "class" "add-module-elements" "add-module-elements~" "get-children" "get-children~" "designer" "remove-child" "~" "module" "for-each" "client" "with-design-locked" "with-update-locked" "with-safe-design" "with-preserved-expand-state" "with-preserved-expand-state~" "with-preserved-selection" "with-preserved-selection~" "lambda" ":wait" "with-cursor" "get-tree" "tree" "let" "evt")}}
      {Lisp-Entry "Dialog-Toolbox-Manager" class () ((extends . "Toolbox-Manager")) #f #f 263 7 263 29 ("Toolbox-Manager")
        {Lisp-Entry "toolbox-title" property () ((initialize . "#f") (accessors . "generate")) #f #f 266 12 266 25 ()}
        {Lisp-Entry "get-toolbox-title" accessor () () #f #f 266 50 266 58 ()}
        {Lisp-Entry "set-toolbox-title" accessor () () #f #f 266 50 266 58 ()}
        {Lisp-Entry "form" form () () #f #f 269 3 269 7 ("5" "97" "on-cancel" "cancel" "0" "Separator" "<Separator>" "3" "9" "Point" "position:" "default?:" "on-ok" ":host" "Event-Handler" "action-handler:" "24" "80" "tail" "title:" "ok" "Push-Button" "<Push-Button>" "flow" "30" "border" "layout-type:" "location:" "south" "Layout-View" "<Layout-View>" "visible?:" "tools" "name:" "!" "<!>" "500" "Dimension" "size:" "application-select?:" "install" "<install>")}
        {Lisp-Entry "form-model" method (override) ("form") #f #f 280 20 280 30 ("nextmethod" "else" "Dialog-Toolbox-Editor" "descendants" "get-name" "get-name~" "case" "form")}
        {Lisp-Entry "filter-model" method (public virtual) ("model") #f #f 286 26 286 38 ("model")}
        {Lisp-Entry "filter-toolbox" method () ("toolbox") #f #f 291 11 291 25 ("set-parent" "set-parent~" "get-tree" "child-remove" "child-remove~" "Toolbox" "0" "length" ">" "filter-model" "Toolbox-Model" "is?" "and" "or" "unless" "get-children" "get-children~" "filter-toolbox" "for-each" "toolbox")}
        {Lisp-Entry "finish" method (override) ("rest") #f #f 301 20 301 26 ("get-root-row" "get-root-row~" "expand-all" "expand-all~" "get-tree" "tree" "filter-toolbox" "set-client" "instantiate" "instantiate~" "toolbox" "setup-context" "setup-context~" "cdr" "car" "not-null?" "and" "cons" "loop" "sym" "set-locator" "set-locator~" "old-locator" "set-children" "set-children~" "toolbox-title" "or" "title:" "Toolbox" "<Toolbox>" "form" "jazz.ide.data.toolbox" "data" "parse-form" "new-form" "let" "get-locator" "get-locator~" "locators" "get-toolbox-managers" "get-designer" "get-designer~" "get-form" "get-form~" "copy-object" "copy-object~" "manager" "lambda" "map" "forms" "let*" "nextmethod" "rest")}
        {Lisp-Entry "select-tool" method () ("import" "symbol") #f #f 331 11 331 22 ("select" "when" "client" "find-model" "find-model~" "model" "let" "symbol" "import")}
        {Lisp-Entry "setup" method (virtual public) ("import" "symbol" "." "rest") #f #f 337 26 337 31 ("select-tool" "rest" "symbol" "import")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 346 20 346 36 ("get-unit" "get-unit~" "get-model" "get-model~" "list" "designer-error" "not" "if" "get-tree" "selected-addable" "selected-addable~" "model" "let")}}
      {Lisp-Entry "Toolbox-Manager-Controller" class () ((extends . "Component-Editor-Controller")) #f #f 358 7 358 33 ("Component-Editor-Controller")
        {Lisp-Entry "update-caption" method (override) () #f #f 361 20 361 34 ()}
        {Lisp-Entry "document-status" method (override) () #f #f 365 20 365 35 ()}}}})
"Toolbox-Model"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Model.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Model" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Toolbox-Model" class (undocumented) ((extends . "Toolbox-Addable")) #f #f 45 20 45 33 ("Toolbox-Addable")
        {Lisp-Entry "unit" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 16 ()}
        {Lisp-Entry "get-unit" accessor () () #f #f 48 42 48 50 ()}
        {Lisp-Entry "set-unit" accessor () () #f #f 48 42 48 50 ()}
        {Lisp-Entry "model" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 17 ()}
        {Lisp-Entry "get-model" accessor () () #f #f 49 42 49 50 ()}
        {Lisp-Entry "set-model" accessor () () #f #f 49 42 49 50 ()}
        {Lisp-Entry "get-class" method (override) () #f #f 57 20 57 29 ("module-get" "model" "unit" "and")}
        {Lisp-Entry "get-reference" method (public) () #f #f 63 18 63 31 ("model" "unit" "module-public" "list" "deserialize-runtime-reference")}
        {Lisp-Entry "print" method (override) ("output" "readably") #f #f 72 20 72 25 ("model" "format" "lambda" "self" "print-unreadable" "readably" "output")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 83 25 83 45 ("Toolbox-Model-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 92 11 92 17 ()
        {Lisp-Entry "import" import () () #f #f 95 1 95 7 ("jazz.designer")}
        {Lisp-Entry "Toolbox-Model-Descriptor" class () ((extends . "Component-Descriptor")) #f #f 98 7 98 31 ("Component-Descriptor")
          {Lisp-Entry "form" form () () #f #f 101 3 101 7 ("model" "unit" "title" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "Image-Resource" "image:" "title:" "install" "<install>")}
          {Lisp-Entry "component-presentation-property?" method (override) ("component" "property") #f #f 109 20 109 52 ("model" "title" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method (override) ("component") #f #f 113 20 113 46 ("get-model" "get-model~" "get-title" "get-title~" "or" "component")}
          {Lisp-Entry "component-set-presentation" method (override) ("component" "designer" "presentation") #f #f 117 20 117 46 ("title:" "set-property" "set-property~" "presentation" "designer" "component")}}}}})
"Toolbox-Module"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Module.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Module" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "Toolbox-Module" class (undocumented) ((extends . "Toolbox-Group")) #f #f 46 20 46 34 ("Toolbox-Group")
        {Lisp-Entry "module-name" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 23 ()}
        {Lisp-Entry "get-module-name" accessor () () #f #f 49 48 49 56 ()}
        {Lisp-Entry "set-module-name" accessor () () #f #f 49 48 49 56 ()}
        {Lisp-Entry "collect-valid-names" method (virtual) ("names") #f #f 57 19 57 38 ("Component" "subclass?" "class?" "and" "module-name" "module-ref" "object" "let" "name" "lambda" "collect-if" "names")}
        {Lisp-Entry "collect-valid-elements-properties" method (virtual) ("names") #f #f 65 19 65 52 ("symbol->string" "title:" "model:" "module-name" "unit:" "list" "name" "lambda" "map" "collect-valid-names" "valid-names" "let" "names")}
        {Lisp-Entry "get-element-class" method (virtual) ("plist") #f #f 72 19 72 36 ("Toolbox-Model" "plist")}
        {Lisp-Entry "add-module-elements" method (public) ("add") #f #f 76 18 76 37 ("get-element-class" "map" "for-each" "collect-valid-elements-properties" "get-exports" "get-exports~" "table-keys" "collect-valid-names" "valid-names" "require-module" "designer-error" "exc" "with-exception-catcher" "module" "let*" "module-name" "when" "title:" "getf" "plist" "lambda" "key:" "string<?" "sort" "plists" "sort-by-title" "define" "add")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 97 25 97 45 ("Toolbox-Module-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 106 11 106 17 ()
        {Lisp-Entry "import" import () () #f #f 109 1 109 7 ("jazz.designer")}
        {Lisp-Entry "Toolbox-Module-Descriptor" class () ((extends . "Toolbox-Group-Descriptor")) #f #f 112 7 112 32 ("Toolbox-Group-Descriptor")
          {Lisp-Entry "form" form () () #f #f 115 3 115 7 ("name:" "Property-Descriptor" "<Property-Descriptor>" "module-name" "name-info" "class-info" "categorized:" ">" "<properties" "<properties~>" "Image-Resource" "image:" "title:" "install" "<install>")}
          {Lisp-Entry "component-get-categorized-addable-classes" method (override) ("component") #f #f 121 20 121 61 ("component")}}}}})
"Toolbox-Objects-Module"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Objects-Module.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Objects-Module" module (protected) () #f #f 37 18 37 62 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Toolbox-Objects-Module" class () ((extends . "Toolbox-Module")) #f #f 43 7 43 29 ("Toolbox-Module")
        {Lisp-Entry "models" property () ((initialize . "#f") (accessors . "generate")) #f #f 46 12 46 18 ()}
        {Lisp-Entry "get-models" accessor () () #f #f 46 43 46 51 ()}
        {Lisp-Entry "set-models" accessor () () #f #f 46 43 46 51 ()}
        {Lisp-Entry "collect-valid-names" method (override) ("names") #f #f 49 20 49 39 ("is?" "test:" "member?" "module-name" "module-ref" "object" "name" "lambda" "collect-if" "resolve-reference" "resolve-reference~" "map" "classes" "let" "models" "if" "names")}}}})
"Toolbox-Preferences"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Preferences.jazz"} 237501525. jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Preferences" module (protected) () #f #f 37 18 37 59 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Toolbox-Preferences" class (undocumented) ((extends . "Docked-Preferences")) #f #f 46 20 46 39 ("Docked-Preferences")
        {Lisp-Entry "toolbox" property () ((initialize . "#f") (accessors . "generate")) #f #f 49 12 49 19 ()}
        {Lisp-Entry "get-toolbox" accessor () () #f #f 49 44 49 52 ()}
        {Lisp-Entry "set-toolbox" accessor () () #f #f 49 44 49 52 ()}
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("Image-Resource" "icon:" "install" "<install>")}
        {Lisp-Entry "create-host" method (override) ("class") #f #f 61 20 61 31 ("toolbox" "or" "toolbox:" "name" "singleton-docked" "class")}}}})
"Toolbox-Trait"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Trait.jazz"} 247108738. jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Trait" module (protected) () #f #f 37 18 37 53 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Toolbox-Trait" class () ((extends . "Toolbox-Model")) #f #f 43 7 43 20 ("Toolbox-Model")
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 46 25 46 45 ("Toolbox-Trait-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 50 11 50 17 ()
        {Lisp-Entry "import" import () () #f #f 53 1 53 7 ("jazz.library" "jazz.jml")}
        {Lisp-Entry "Toolbox-Trait-Descriptor" class () ((extends . "Toolbox-Model-Descriptor")) #f #f 57 7 57 31 ("Toolbox-Model-Descriptor")
          {Lisp-Entry "form" form () () #f #f 60 3 60 7 ("Image-Resource" "image:" "title:" "install" "<install>")}}}}})
"Toolbox-Traits-Module"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Traits-Module.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Traits-Module" module (protected) () #f #f 37 18 37 61 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Toolbox-Traits-Module" class () ((extends . "Toolbox-Objects-Module")) #f #f 45 7 45 28 ("Toolbox-Objects-Module")
        {Lisp-Entry "class" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 17 ()}
        {Lisp-Entry "get-class" accessor () () #f #f 48 42 48 50 ()}
        {Lisp-Entry "set-class" accessor () () #f #f 48 42 48 50 ()}
        {Lisp-Entry "form" form () () #f #f 51 3 51 7 ("Trait" "Class-Reference" "models:" "install" "<install>")}
        {Lisp-Entry "collect-descendants-locators" method () ("trait" "locator") #f #f 55 11 55 39 ("collect-descendants-locators" "append-map" "cons" "get-name" "get-name~" "list" "append" "subname" "lambda" "map" "sublocators" "get-children" "get-children~" "subtraits" "let*" "locator" "trait")}
        {Lisp-Entry "collect-valid-elements-properties" method (override) ("names") #f #f 63 20 63 53 ("symbol->string" "join" "title:" "model:" "unit:" "locator" "list" "module-name" "module-ref" "name" "lambda" "map" "collect-descendants-locators" "append-map" "locators" "collect-valid-names" "valid-names" "let*" "names")}
        {Lisp-Entry "collect-valid-names" method (override) ("names") #f #f 75 20 75 39 ("nextmethod" "get-client-type" "get-client-type~" "subclass?" "class" "not" "or" "module-name" "module-ref" "trait" "let" "name" "lambda" "collect-if" "names")}}}})
"Toolbox-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "toolbox" "Toolbox-Tree.jazz"} 247283256. jazz
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Tree" module (protected) () #f #f 37 18 37 52 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.jml" "jazz.library.component" "jazz.library" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "Toolbox-Tree" class (undocumented) ((extends . "Descendants-Tree")) #f #f 49 20 49 32 ("Descendants-Tree")
        {Lisp-Entry "form" form () () #f #f 52 3 52 7 ("row" "selection-mode:" "multiple-selection?:" "reorderable?:" "draggable?:" ":images" "portfolio:" "install" "<install>")}
        {Lisp-Entry "call-with-selected-addable" method (public) ("func") #f #f 56 18 56 44 ("Toolbox-Addable" "is?" "and" "get-single-selected-data" "selected" "let" "func")}
        {Lisp-Entry "call-with-selected-toolbox-model" method () ("func") #f #f 62 11 62 43 ("Toolbox-Model" "is?" "and" "get-single-selected-data" "selected-toolbox-model" "let" "func")}
        {Lisp-Entry "find-model-if" method (public) ("pred") #f #f 68 18 68 31 ("Toolbox-Model" "client" "collect-descendants" "find-if" "pred")}
        {Lisp-Entry "selected-addable" method (public) () #f #f 72 18 72 34 ("identity" "call-with-selected-addable")}
        {Lisp-Entry "selected-class" method (public) () #f #f 76 18 76 32 ("get-class" "get-class~" "call-with-selected-toolbox-model")}
        {Lisp-Entry "selected-model" method (public) () #f #f 80 18 80 32 ("get-model" "get-model~" "call-with-selected-toolbox-model")}
        {Lisp-Entry "selected-unit" method (public) () #f #f 84 18 84 31 ("get-unit" "get-unit~" "call-with-selected-toolbox-model")}
        {Lisp-Entry "selected-toolbox" method (public) () #f #f 88 18 88 34 ("Toolbox" "find-ascendant" "find-ascendant~" "addable" "lambda" "call-with-selected-addable")}
        {Lisp-Entry "update-selection" method (override) ("expand-state" "selected-components") #f #f 92 20 92 36 ("selected-components" "expand-state")}
        {Lisp-Entry "focus-update-actions" method (override) () #f #f 96 20 96 40 ("add" "open" "not" "new" "components-tree" "Action" "set-action-enabled?" "Toolbox-Trait" "trait?" "Toolbox-Model" "model?" "Toolbox-Addable" "is?" "when" "get-single-selected-data" "data" "let" "nextmethod")}
        {Lisp-Entry "on-double-click" method () ("evt") #f #f 107 11 107 26 ("on-add" "on-open" "user" "get-kind" "get-kind~" "eq?" "if" "when" "selected-toolbox" "selected" "let" "evt")}
        {Lisp-Entry "on-new" method () ("evt") #f #f 115 11 115 17 ("selected-addable" "new-addable" "evt")}
        {Lisp-Entry "open-model" method (virtual) ("model") #f #f 119 19 119 29 ("else" "open-class" "and" "selected-class" "class" "let" "Toolbox-Model" "get-model" "get-model~" "get-unit" "get-unit~" "open-trait" "Toolbox-Trait" "typecase" "model")}
        {Lisp-Entry "on-open" method (override) ("evt") #f #f 130 20 130 27 ("open-model" "selected-addable" "model" "let" "yes" "question" "type:" "message-box" "user" "selected-toolbox" "get-kind" "get-kind~" "eq?" "or" "when" "evt")}
        {Lisp-Entry "open-trait" method () ("unit" "sym") #f #f 137 11 137 21 ("open-component" ",sym" ",unit" "set-origin" "set-origin~" "set-context" "set-context~" ",type-name" "category-unit" "module-public" "deserialize-runtime-reference" "eq?" "if" "lambda" "set-locator" "set-locator~" "get-locator" "get-locator~" "trait-locator" "list" "children:" "model:" "action:" "Form" "new" "new-form" "get-form" "get-form~" "trait-form" "category-name" "type-name" "get-client-type" "get-client-type~" "trait-type" "let*" "when" "module-get" "trait" "let" "sym" "unit")}
        {Lisp-Entry "new-addable" method () ("addable") #f #f 154 11 154 22 ("get-imports" "get-imports~" "locate-form" "locate-form~" "new-form" "Toolbox-Form" "get-unit" "get-unit~" "get-model" "get-model~" "new-class" "Toolbox-Model" "typecase" "addable")}
        {Lisp-Entry "new-class" method () ("model" "unit" "(size: size #f)") #f #f 162 11 162 20 ("undoable?:" "get-designer" "get-designer~" "safe-set-property" "safe-set-property~" "when" "open-component" "editor" "instantiate" "instantiate~" "target" "imports-locator" "effective-imports" "effective-imports~" "imports" "let" "list" "construct-form" "form" ",unit" "jazz" "Data" "new" "form-data" "symbol->string" "string-append" "string->symbol" "model-name" "let*" "size" "size:" "unit" "model")}
        {Lisp-Entry "new-form" method () ("form" "imports" "(size: size #f)") #f #f 177 11 177 19 ("open-component" "set-size" "set-size~" "when" "instantiate" "instantiate~" "target" "let" "size" "size:" "imports" "form")}
        {Lisp-Entry "on-add" method () ("evt") #f #f 184 11 184 17 ("bell" "cascade-view-position" "cascade-view-position~" "get-imports" "get-imports~" "imports:" "locate-form" "locate-form~" "add-new-form" "add-new-form~" "Toolbox-Form" "get-unit" "get-unit~" "import:" "centered?:" "0" "Point" "get-class" "get-class~" "add-new" "add-new~" "Toolbox-Model" "typecase" "component" "get-client" "get-client~" "get-surrogate" "get-surrogate~" "surrogate" "let*" "lambda" "get-designer" "get-designer~" "get-undoer" "get-undoer~" "with-atomic-undo" "with-atomic-undo~" "View-Editor" "is?" "and" "if" "current-document" "editor" "selected-addable" "addable" "let" "evt")}
        {Lisp-Entry "row-state" method (override) ("component" "update?" "level") #f #f 200 20 200 29 ("collapsed" "expanded" "1" "<" "if" "level" "update?" "component")}}}})
"Traits-Dialog"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Traits-Dialog.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.designer.editor.Traits-Dialog" module () () #f #f 8 8 8 42 ("jazz")
      {Lisp-Entry "import" import () () #f #f 11 1 11 7 ("jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "Traits-Dialog" class () ((extends . "Toolbox-Manager")) #f #f 19 7 19 20 ("Toolbox-Manager")
        {Lisp-Entry "models" slot () () #f #f 22 8 22 14 ()}
        {Lisp-Entry "form" form () () #f #f 25 3 25 7 ("97" "on-cancel" ":host" "cancel" "Separator" "<Separator>" "3" "9" "default?:" "on-ok" "24" "tail" "ok" "6" "0" "Rect" "layout-insets:" "flow" "37" "south" "335" "width:" "Tree-Label-Column" "<Tree-Label-Column>" "multiple-selection?:" "row" "selection-mode:" "column" "filled-column:" "list" "Tree-View" "<Tree-View>" "shown?:" "Tree-Header" "<Tree-Header>" "fill" "content" "vscroll?:" "hscroll?:" "document" "scroller" "Scroller-View" "<Scroller-View>" "east" "Border-View" "<Border-View>" "on-remove" "47" "on-add" "22" "75" "15" "2" "View" "<View>" "layout-type:" "80" "center" "on-new" ":form" "Event-Handler" "action-handler:" "title:" "5" "Push-Button" "<Push-Button>" "31" "500" "north" "10" "Point" "position:" "Layout-View" "<Layout-View>" "entry" "style:" "edge" "border-type:" "border" "275" "west" "location:" "descendants" "visible?:" "tools" "name:" "!" "<!>" "550" "650" "Dimension" "size:" "install" "<install>")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 50 25 50 35 ()}
        {Lisp-Entry "form-model" method (override) ("form") #f #f 54 20 54 30 ("nextmethod" "else" "Dialog-Toolbox-Editor" "descendants" "get-name" "get-name~" "case" "form")}
        {Lisp-Entry "setup-traits" method () ("locators" "imports") #f #f 60 11 60 23 ("designer-error" "add-trait" "if" "client" "find-model" "find-model~" "model" "let" "import" "locator" "lambda" "for-each" "imports" "locators")}
        {Lisp-Entry "add-trait" method () ("addable") #f #f 70 11 70 20 ("user-data:" "get-title" "get-title~" "title:" "Tree-Label" "new" "children:" "add-row" "add-row~" "lambda" "list" "locate" "with-update-locked" "with-update-locked~" "designer" "remove-child" "remove-child~" "addable")}
        {Lisp-Entry "find-toolbox-module" method () ("name") #f #f 77 11 77 30 ("item" "return:" "get-module-name" "get-module-name~" "key:" "get-toolbox-modules" "find" "name")}
        {Lisp-Entry "on-add" method () ("evt") #f #f 86 11 86 17 ("add-trait" "when" "get-tree" "selected-addable" "selected-addable~" "selected" "let" "evt")}
        {Lisp-Entry "on-remove" method () ("evt") #f #f 92 11 92 20 ("get-form" "get-form~" "form:" "find-toolbox-module" "designer" "add-child" "add-child~" "get-unit" "get-unit~" "module-name" "let" "get-selected-row" "get-selected-row~" "remove-row" "remove-row~" "lambda" "with-update-locked" "with-update-locked~" "when" "get-single-selected-data" "get-single-selected-data~" "selected" "list" "locate" "list-tree" "let*" "evt")}
        {Lisp-Entry "on-ok" method () ("evt") #f #f 103 11 103 16 ("get-host" "on-ok" "on-ok~" "list" "locate" "collect-visible-rows" "collect-visible-rows~" "get-user-data" "get-user-data~" "map" "models" "set!" "evt")}
        {Lisp-Entry "get-modal-result" method (override) () #f #f 113 20 113 36 ("get-unit" "get-unit~" "models" "get-model" "get-model~" "map" "list")}}}})
"Traits-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "trait" "Traits-Editor.jazz"} 247283256. jazz
    {Lisp-Entry "jazz.designer.trait.Traits-Editor" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Traits-Editor" class (undocumented) ((extends . "Layout-View")) #f #f 47 20 47 33 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 50 3 50 7 ("183" "width:" "trait" "tree" "Traits-Tree" "<Traits-Tree>" "shown?:" "header" "Tree-Header" "<Tree-Header>" "content" "!" "<!>" "tool" "style:" "vscroll?:" "hscroll?:" "scroller" "Scroller-View" "<Scroller-View>" "on-new-default" ":guest" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "new-default" "Push-Tool" "<Push-Tool>" "tools" "name:" "Layout-View" "<Layout-View>" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 62 25 62 38 ("traits-editor" "rest")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 71 25 71 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 75 25 75 35 ()}
        {Lisp-Entry "client-activate" method (override) () #f #f 79 20 79 35 ("client-update" "else" "tree" "locate" "select-trait" "select-trait~" "when" "set-designer" "designing-trait?" "designing-trait?~" "if" "set-client" "set-editor" "get-client" "get-client~" "get-designer" "get-designer~" "Component-Editor" "cond" "current-document" "guest" "get-children" "get-children~" "eq?" "Trait" "is?" "and" "child" "lambda" "find-if" "get-form" "get-form~" "first-child" "first-child~" "trait-form" "let" "client" "designer" "designed-trait" "define")}
        {Lisp-Entry "client-deactivate" method (override) () #f #f 103 20 103 37 ("client-update" "set-designer" "set-client" "set-editor")}
        {Lisp-Entry "client-update" method () () #f #f 110 11 110 24 ("get-client" "new-default" "locate" "set-enabled?" "set-enabled?~")}
        {Lisp-Entry "focus-default" method (override) () #f #f 119 20 119 33 ("auto-select-first" "auto-select-first~" "acquire-focus" "acquire-focus~" "locate" "tree" "let")}
        {Lisp-Entry "get-tools-view" method (override) () #f #f 125 20 125 34 ("tools" "locate")}
        {Lisp-Entry "install-in-host" method (override) ("host") #f #f 134 20 134 35 ("2" "0" "Rect" "set-layout-insets" "set-layout-insets~" "fill" "get-root" "get-root~" "set-layout-type" "set-layout-type~" "nextmethod" "host")}
        {Lisp-Entry "get-tree" method (public) () #f #f 147 18 147 26 ("tree" "locate")}
        {Lisp-Entry "on-new-default" method () ("evt") #f #f 156 11 156 25 ("new-default" "evt")}
        {Lisp-Entry "new-default" method (protected virtual) () #f #f 165 29 165 40 ("get-tree" "new-default-trait" "new-default-trait~")}
        {Lisp-Entry "get-editor" method (public) () #f #f 174 18 174 28 ("get-tree" "get-editor" "get-editor~")}
        {Lisp-Entry "set-editor" method (public) ("editor") #f #f 178 18 178 28 ("get-tree" "set-editor" "set-editor~" "editor")}
        {Lisp-Entry "get-client" method (public) () #f #f 187 18 187 28 ("get-tree" "get-client" "get-client~")}
        {Lisp-Entry "set-client" method (public) ("client") #f #f 191 18 191 28 ("get-tree" "set-client" "set-client~" "client")}
        {Lisp-Entry "get-designer" method (public) () #f #f 200 18 200 30 ("get-tree" "get-designer" "get-designer~")}
        {Lisp-Entry "set-designer" method (public) ("designer") #f #f 204 18 204 30 ("get-tree" "set-designer" "set-designer~" "designer")}}}})
"Traits-Tree"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "trait" "Traits-Tree.jazz"} 247108738. jazz
    {Lisp-Entry "jazz.designer.trait.Traits-Tree" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.locale" "jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Traits-Tree" class (undocumented) ((extends . "Tree-View")) #f #f 49 20 49 31 ("Tree-View")
        {Lisp-Entry "editor" slot () ((initialize . "#f")) #f #f 52 8 52 14 ()}
        {Lisp-Entry "client" slot () ((initialize . "#f")) #f #f 53 8 53 14 ()}
        {Lisp-Entry "designer" slot () ((initialize . "#f")) #f #f 54 8 54 16 ()}
        {Lisp-Entry "form" form () () #f #f 57 3 57 7 ("157" "width:" "title:" "trait" "name:" "Tree-Node-Column" "<Tree-Node-Column>" "on-selection-change" ":form" "Event-Handler" "selection-handler:" ":images" "portfolio:" "multiple-selection?:" "install" "<install>")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 67 20 67 33 ("nextmethod" "traits-tree" "find-actions" "cons")}
        {Lisp-Entry "context-menu" method (override) ("pos") #f #f 77 20 77 32 ("track-popup-menu" "layout-menu" "layout-menu~" "action-handler:" "title:" "icon:" "Label-Item" "class:" "list" "properties:" "on-add-trait" "method-name:" "self" "target:" "Event-Handler" "handler" "title" "get-class-image" "get-class-image~" "icon" "Separator-Item" "not" "class" "for-each" "parent:" "Context-Menu" "submenu" "get-class-presentation" "get-class-presentation~" "format" "set-title" "set-title~" "get-addable-default-trait" "get-addable-default-trait~" "default" "let" "eqv?" "if" "rename" "close" "Trait" "is-not?" "separator" "set-visible?" "set-visible?~" "null?" "with-update-locked" "with-update-locked~" "when" "selected-trait" "trait" "get-addable-traits" "get-addable-traits~" "client" "and" "classes" "add" "locate" "locate~" "item" "Trait-Menu" "new" "menu" "let*" "lambda" "with-context-click" "pos")}
        {Lisp-Entry "on-add-trait" method () ("evt") #f #f 113 11 113 23 ("add-trait" "selected-trait" "parent" "client" "get-addable-default-trait" "get-addable-default-trait~" "class:" "get-property" "get-property~" "or" "class" "let" "evt")}
        {Lisp-Entry "new-default-trait" method (public) () #f #f 119 18 119 35 ("add-trait" "selected-trait" "or" "parent" "get-addable-traits" "get-addable-traits~" "add-here?" "get-addable-default-trait" "get-addable-default-trait~" "class" "let*" "client" "when")}
        {Lisp-Entry "add-trait" method (public) ("class" "parent") #f #f 128 18 128 27 ("rename-trait" "trait-index" "set-single-selection" "update-tree" "get-form" "get-form~" "context:" "install" "action:" "textual?:" "Form" "client-form:" "set-property" "set-property~" "trait:" "add-child" "add-child~" "editor" "get-designer" "get-designer~" "designer" "parent:" "new" "trait" "child-traits" "child-traits~" "trait-presentation-request" "presentation" "let" "parent" "class")}
        {Lisp-Entry "trait-presentation-request" method (protected virtual) ("class" "brothers" "(initial-value: initial-value #f)") #f #f 141 29 141 55 ("validator:" "unicity-domain:" "not" "accepts-empty?:" "get-class-presentation" "get-class-presentation~" "format" "title:" "request-string" "presentation" "trait-name-validator" "name-validator" "get-presentation-property" "get-presentation-property~" "map" "and" "unicity-domain" "get-name-unicity?" "get-name-unicity?~" "name-unicity?" "get-name-mandatory?" "get-name-mandatory?~" "name-mandatory?" "let*" "initial-value" "initial-value:" "brothers" "class")}
        {Lisp-Entry "trait-name-validator" method (protected virtual) () #f #f 150 29 150 49 ()}
        {Lisp-Entry "on-close-trait" method () ("evt") #f #f 154 11 154 25 ("delete-selection" "evt")}
        {Lisp-Entry "delete-selection" method (override) () #f #f 158 20 158 36 ("can-survive?:" "remove-trait" "lambda" "selection" "with-deleted-selection" "confirm-close" "when" "bell" "Trait" "is-not?" "if" "selected-trait" "trait" "let")}
        {Lisp-Entry "confirm-close" method (override) () #f #f 169 20 169 33 ("confirm-action")}
        {Lisp-Entry "confirm-action" method (protected) ("text") #f #f 173 21 173 35 ("throw-cancel" "cancel" "no" "yes" "case" "confirmation" "type:" "localize" "message-box" "code" "let" "text")}
        {Lisp-Entry "remove-trait" method (protected virtual) ("trait") #f #f 181 29 181 41 ("update-tree" "remove-child" "remove-child~" "select-trait" "editor" "get-designer" "get-designer~" "designer" "let" "trait")}
        {Lisp-Entry "on-rename-trait" method () ("evt") #f #f 188 11 188 26 ("rename-selected-trait" "evt")}
        {Lisp-Entry "rename-selected-trait" method () () #f #f 192 11 192 32 ("rename-trait" "get-presentation-property" "get-presentation-property~" "initial-value:" "get-brothers" "get-brothers~" "class-of" "trait-presentation-request" "presentation" "selected-trait" "trait" "let*")}
        {Lisp-Entry "rename-trait" method () ("trait" "presentation") #f #f 198 11 198 23 ("trait-index" "set-single-selection" "update-tree" "set-presentation-property" "set-presentation-property~" "editor" "get-designer" "get-designer~" "designer" "let" "presentation" "trait")}
        {Lisp-Entry "on-trait-properties" method () ("evt") #f #f 205 11 205 30 ("select-palette?:" "show-properties" "evt")}
        {Lisp-Entry "show-properties" method () ("(select-palette?: select-palette? #f)") #f #f 209 11 209 26 ("workspace:" "Properties-Manager" "select-docked" "when" "focus?:" "force?:" "self" "origin:" "list" "if" "editor" "set-selection" "set-selection~" "selected-trait" "trait" "let" "select-palette?" "select-palette?:")}
        {Lisp-Entry "maybe-show-properties" method () () #f #f 216 11 216 32 ("show-properties" "Trait" "is?" "get-client" "get-client~" "eq?" "car" "1" "length" "=" "and" "null?" "or" "get-selection" "get-selection~" "selection" "selected-trait" "trait" "let" "editor" "when")}
        {Lisp-Entry "get-editor" method (public) () #f #f 233 18 233 28 ("editor")}
        {Lisp-Entry "set-editor" method (public) ("edt") #f #f 237 18 237 28 ("on-editor" "method-name:" "target:" "Event-Handler" "new" "add-editor-listener" "add-editor-listener~" "set!" "self" "remove-editor-listener" "remove-editor-listener~" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "on-editor" method () ("evt") #f #f 246 11 246 20 ("trait:" "branch-changed" ":branch-changed" "designer:" "set-designer" ":designer-change" "client:" "get-property" "get-property~" "set-client" ":client-change" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "branch-changed" method () ("trait") #f #f 253 11 253 25 ("trait-index" "set-single-selection" "trait")}
        {Lisp-Entry "get-designer" method (public) () #f #f 262 18 262 30 ("designer")}
        {Lisp-Entry "set-designer" method (public virtual) ("dsg") #f #f 266 26 266 38 ("install-listener" "set!" "uninstall-listener" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "install-listener" method () ("designer") #f #f 275 11 275 27 ("add-designer-listener" "add-designer-listener~" "on-designer" "method-name:" "self" "target:" "Event-Handler" "new" "listener" "let" "designer")}
        {Lisp-Entry "uninstall-listener" method () ("designer") #f #f 280 11 280 29 ("self" "remove-designer-listener" "remove-designer-listener~" "designer")}
        {Lisp-Entry "on-designer" method () ("evt") #f #f 284 11 284 22 ("presentation:" "component:" "get-property" "get-property~" "presentation-change" ":presentation-change" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "presentation-change" method () ("component" "presentation") #f #f 289 11 289 30 ("invalidate-cell" "get-cell-data" "set-title" "set-title~" "0" "Cell" "cell" "let" "client" "eq?" "when" "presentation" "component")}
        {Lisp-Entry "get-client" method (public) () #f #f 301 18 301 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("clt") #f #f 305 18 305 28 ("update-selection" "update-tree" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update" method () () #f #f 317 11 317 17 ("update-selection" "update-tree")}
        {Lisp-Entry "update-tree" method () () #f #f 322 11 322 22 ("child-traits" "child-traits~" "sort-traits" "insert-trait" "trait" "lambda" "for-each" "insert-client" "node" "let" "client" "when" "remove-every-row")}
        {Lisp-Entry "sort-traits" method (protected virtual) ("traits") #f #f 331 29 331 40 ("traits")}
        {Lisp-Entry "update-selection" method () () #f #f 335 11 335 27 ("set-single-selection" "or" "user-data-index" "index" "get-active-trait" "get-active-trait~" "trait" "let*" "generate-event?:" "set-selection" "client" "not" "if")}
        {Lisp-Entry "insert-client" method () ("client") #f #f 345 11 345 24 ("Trait" "is?" "and" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "state:" "add-row" "component-image" "image" "get-presentation-property" "get-presentation-property~" "title" "let" "client")}
        {Lisp-Entry "insert-trait" method () ("node" "trait") #f #f 351 11 351 23 ("sort-traits" "insert-trait" "child" "lambda" "for-each" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "state:" "father:" "add-row" "handle" "component-image" "image" "component-presentation" "title" "get-children" "get-children~" "children" "let" "trait" "node")}
        {Lisp-Entry "component-presentation" method (protected virtual) ("component") #f #f 361 29 361 51 ("get-presentation-property" "get-presentation-property~" "component")}
        {Lisp-Entry "component-image" method (protected virtual) ("component") #f #f 365 29 365 44 ("get-component-image" "get-component-image~" "component")}
        {Lisp-Entry "can-undo?" method (override) () #f #f 374 20 374 29 ()}
        {Lisp-Entry "can-redo?" method (override) () #f #f 378 20 378 29 ()}
        {Lisp-Entry "can-delete?" method (override) () #f #f 382 20 382 31 ("Trait" "is?" "selected-trait" "trait" "let")}
        {Lisp-Entry "on-selection-change" method () ("evt") #f #f 392 11 392 30 ("get-application" "update-focus-actions" "update-focus-actions~" "maybe-show-properties" "selected-trait" "select-trait" "evt")}
        {Lisp-Entry "selected-trait" method (public) () #f #f 398 18 398 32 ("get-row" "get-user-data" "get-user-data~" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "select-trait" method () ("trait") #f #f 404 11 404 23 ("editor" "process-branch-changing" "process-branch-changing~" "client" "get-active-trait" "get-active-trait~" "neq?" "when" "trait")}
        {Lisp-Entry "trait-index" method () ("trait") #f #f 409 11 409 22 ("user-data-index" "trait")}}
      {Lisp-Entry "Trait-Menu" class () ((extends . "Context-Menu")) #f #f 418 7 418 17 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 421 3 421 7 ("properties" "rename" "close" "separator" "Separator-Item" "<Separator-Item>" "traits-tree" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "add" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"Traits-Tree-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "trait" "Traits-Tree-Actions.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.trait.Traits-Tree-Actions" module (protected) () #f #f 37 18 37 57 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Traits-Tree-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 39 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("on-trait-properties" "properties" "F2" "on-rename-trait" "rename" "Delete" "on-close-trait" "close" ":control" "Shortcut" "shortcut:" "on-add-trait" ":focus" "Event-Handler" "action-handler:" "add" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"Traits-Viewer"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "trait" "Traits-Viewer.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.trait.Traits-Viewer" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "Traits-Viewer" class (undocumented) ((extends . "Layout-View")) #f #f 46 20 46 33 ("Layout-View")
        {Lisp-Entry "form" form () () #f #f 49 3 49 7 ("183" "width:" "trait" "tree" "Viewer-Tree" "<Viewer-Tree>" "shown?:" "header" "Tree-Header" "<Tree-Header>" "content" "!" "<!>" "tool" "style:" "vscroll?:" "hscroll?:" "scroller" "name:" "Scroller-View" "<Scroller-View>" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 64 25 64 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method (meta override) () #f #f 68 25 68 35 ()}
        {Lisp-Entry "client-activate" method (override) () #f #f 72 20 72 35 ("current-document" "set-client")}
        {Lisp-Entry "client-deactivate" method (override) () #f #f 76 20 76 37 ("set-client")}
        {Lisp-Entry "focus-default" method (override) () #f #f 85 20 85 33 ("auto-select-first" "auto-select-first~" "acquire-focus" "acquire-focus~" "locate" "tree" "let")}
        {Lisp-Entry "install-in-host" method (override) ("host") #f #f 96 20 96 35 ("2" "0" "Rect" "set-layout-insets" "set-layout-insets~" "fill" "get-root" "get-root~" "set-layout-type" "set-layout-type~" "nextmethod" "host")}
        {Lisp-Entry "get-tree" method (public) () #f #f 107 18 107 26 ("tree" "locate")}
        {Lisp-Entry "get-client" method (public) () #f #f 116 18 116 28 ("get-tree" "get-client" "get-client~")}
        {Lisp-Entry "set-client" method (public) ("client") #f #f 120 18 120 28 ("get-tree" "set-client" "set-client~" "client")}}
      {Lisp-Entry "Viewer-Tree" class () ((extends . "Tree-View")) #f #f 129 7 129 18 ("Tree-View")
        {Lisp-Entry "form" form () () #f #f 132 3 132 7 ("157" "width:" "title:" "trait" "name:" "Tree-Node-Column" "<Tree-Node-Column>" "on-selection-change" ":self" "Event-Handler" "selection-handler:" ":images" "portfolio:" "multiple-selection?:" "install" "<install>")}
        {Lisp-Entry "client" slot () ((initialize . "#f")) #f #f 137 8 137 14 ()}
        {Lisp-Entry "get-client" method (public) () #f #f 145 18 145 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("clt") #f #f 149 18 149 28 ("update-tree" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update-tree" method () () #f #f 155 11 155 22 ("child-traits" "child-traits~" "insert-trait" "trait" "lambda" "for-each" "insert-client" "node" "let" "client" "when" "remove-every-row")}
        {Lisp-Entry "insert-client" method () () #f #f 164 11 164 24 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "state:" "add-row" "component-image" "image" "client" "get-presentation-property" "get-presentation-property~" "title" "let")}
        {Lisp-Entry "insert-trait" method () ("node" "trait") #f #f 170 11 170 23 ("insert-trait" "child" "lambda" "for-each" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "state:" "father:" "add-row" "handle" "component-image" "image" "get-presentation-property" "get-presentation-property~" "title" "get-children" "get-children~" "children" "let" "trait" "node")}
        {Lisp-Entry "component-image" method (protected virtual) ("component") #f #f 180 29 180 44 ("get-component-image" "get-component-image~" "component")}
        {Lisp-Entry "on-selection-change" method () ("evt") #f #f 189 11 189 30 ("client" "selected-trait" "or" "select-trait" "evt")}
        {Lisp-Entry "selected-trait" method (public) () #f #f 193 18 193 32 ("get-row" "get-user-data" "get-user-data~" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "select-trait" method () ("trait") #f #f 199 11 199 23 ("client" "set-active-trait" "set-active-trait~" "when" "trait")}}}})
"Value-Domain"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "domain" "Value-Domain.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.domain.Value-Domain" module (protected) () #f #f 37 18 37 51 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Value-Domain" class () ((extends . "Domain")) #f #f 43 7 43 19 ("Domain")
        {Lisp-Entry "present" method (override) ("value") #f #f 51 20 51 27 (":reader" "->string" "not" "if" "value")}
        {Lisp-Entry "setup-entry" method (override) ("view" "client") #f #f 62 20 62 31 ("self" "domain:" "parent:" "Value-Entry" "new" "client" "view")}}}})
"Value-Entry"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "entry" "Value-Entry.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.entry.Value-Entry" module (protected) () #f #f 37 18 37 49 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.designer")}
      {Lisp-Entry "Value-Entry" class () ((extends . "String-Entry")) #f #f 43 7 43 18 ("String-Entry")
        {Lisp-Entry "get-value" method (override) () #f #f 51 20 51 29 ("read-string-element" "lambda" "jazz-readtable" "with-readtable" "string=?" "empty-string?" "or" "if" "text" "locate" "get-string-content" "get-string-content~" "content" "let")}
        {Lisp-Entry "set-value" method (override) ("value") #f #f 60 20 60 29 (":reader" "->string" "not" "if" "text" "locate" "set-string-content" "set-string-content~" "value")}}}})
"Value-Row"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "row" "Value-Row.jazz"} 246587446. jazz
    {Lisp-Entry "jazz.designer.row.Value-Row" module (protected) () #f #f 37 18 37 45 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.graphic" "jazz.designer")}
      {Lisp-Entry "Value-Row" class (undocumented) ((extends . "Tree-Row")) #f #f 47 20 47 29 ("set-property" "get-property" "Tree-Row")
        {Lisp-Entry "property_" property () ((initialize . "#f") (getter . "get-property") (setter . "set-property")) #f #f 51 12 51 21 ()}
        {Lisp-Entry "value" property () ((initialize . "#f") (accessors . "generate")) #f #f 52 12 52 17 ()}
        {Lisp-Entry "get-value" accessor () () #f #f 52 51 52 59 ()}
        {Lisp-Entry "set-value" accessor () () #f #f 52 51 52 59 ()}
        {Lisp-Entry "nullable?" property () ((initialize . "#f") (accessors . "generate")) #f #f 53 12 53 21 ()}
        {Lisp-Entry "get-nullable?" accessor () () #f #f 53 51 53 59 ()}
        {Lisp-Entry "set-nullable?" accessor () () #f #f 53 51 53 59 ()}
        {Lisp-Entry "modified?" property () ((initialize . "#f") (accessors . "generate")) #f #f 54 12 54 21 ()}
        {Lisp-Entry "get-modified?" accessor () () #f #f 54 51 54 59 ()}
        {Lisp-Entry "set-modified?" accessor () () #f #f 54 51 54 59 ()}
        {Lisp-Entry "limit-to-list?" property () ((initialize . "#t") (accessors . "generate")) #f #f 55 12 55 26 ()}
        {Lisp-Entry "get-limit-to-list?" accessor () () #f #f 55 51 55 59 ()}
        {Lisp-Entry "set-limit-to-list?" accessor () () #f #f 55 51 55 59 ()}
        {Lisp-Entry "editor" slot () ((initialize . "#f") (accessors . "generate")) #f #f 58 8 58 14 ()}
        {Lisp-Entry "get-editor" accessor () () #f #f 58 40 58 48 ()}
        {Lisp-Entry "set-editor" accessor () () #f #f 58 40 58 48 ()}
        {Lisp-Entry "edited?" slot () ((initialize . "#f")) #f #f 59 8 59 15 ()}
        {Lisp-Entry "initialize" method (override) ("." "rest") #f #f 67 20 67 30 ("limit-to-list?~self" "nullable?~self" "value~self" "self" "property_" "property_~self" "set!" "nextmethod" "apply" "others" "limit-to-list?" "nullable?" "value" "property" "bind-keywords" "rest")}
        {Lisp-Entry "get-property" method (public) () #f #f 81 18 81 30 ("property_")}
        {Lisp-Entry "set-property" method (public) ("prop") #f #f 85 18 85 30 ("property_" "set!" "prop")}
        {Lisp-Entry "get-title" method (public) () #f #f 89 18 89 27 ("get-title" "get-title~" "children" "car" "node" "let")}
        {Lisp-Entry "set-title" method (public) ("title") #f #f 94 18 94 27 ("set-title" "set-title~" "children" "car" "node" "let" "title")}
        {Lisp-Entry "get-client" method (public) () #f #f 99 18 99 28 ("get-tree" "get-client" "get-client~")}
        {Lisp-Entry "auto-in-place?" method (override) () #f #f 108 20 108 34 ()}
        {Lisp-Entry "auto-expand" method (override) () #f #f 112 20 112 31 ("edit-row" "editable?" "when" "nextmethod")}
        {Lisp-Entry "auto-select" method (override) () #f #f 118 20 118 31 ("get-tree" "acquire-focus" "acquire-focus~" "select-editor" "editable?" "if" "nextmethod")}
        {Lisp-Entry "auto-collapse" method (override) () #f #f 125 20 125 33 ("end-row-edition" "in-edition?" "when" "nextmethod")}
        {Lisp-Entry "auto-collapsable?" method (override) () #f #f 131 20 131 37 ("in-edition?")}
        {Lisp-Entry "enter-value" method (public virtual) ("v" "(imports: imports #f)") #f #f 140 26 140 37 ("get-tree" "get-card" "get-card~" "enter-value" "enter-value~" "update" "property_" "not" "if" "set-modified?" "value" "set!" "imports" "imports:" "v")}
        {Lisp-Entry "enter-edited-value" method (public) () #f #f 148 18 148 36 ("throw-cancel" "get-edited-imports" "imports:" "get-edited-value" "enter-value" "validate-value" "if")}
        {Lisp-Entry "default-value" method (public virtual) () #f #f 154 26 154 39 ()}
        {Lisp-Entry "present" method (public virtual) ("value") #f #f 163 26 163 33 (":reader" "->string" "not" "if" "value")}
        {Lisp-Entry "editable?" method (public virtual) () #f #f 174 26 174 35 ("property-setter" "property_" "not" "or")}
        {Lisp-Entry "get-edited-value" method (public virtual) () #f #f 179 26 179 42 ("editor" "get-string-content" "get-string-content~" "read-string-element")}
        {Lisp-Entry "set-edited-value" method (public virtual) ("value") #f #f 183 26 183 42 ("present" "editor" "set-string-content" "set-string-content~" "value")}
        {Lisp-Entry "get-edited-modified?" method (public virtual) () #f #f 187 26 187 46 ("editor" "get-document-controller" "get-document-controller~" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-edited-modified?" method (public virtual) ("flag") #f #f 191 26 191 46 ("editor" "get-document-controller" "get-document-controller~" "set-modified?" "set-modified?~" "flag")}
        {Lisp-Entry "show-cursor" method (public virtual) () #f #f 195 26 195 37 ("editor" "show-text-cursor" "show-text-cursor~")}
        {Lisp-Entry "validate-value" method (public) () #f #f 199 18 199 32 ("get-edited-value" "revert-property" "no" "get-end" "get-end~" "end:" "get-start" "get-start~" "start:" "focus-editor" "yes" "no:" "yes:" "question" "type:" "exception-reason" "message-box" "case" "err" "Parse-Error" "catch")}
        {Lisp-Entry "edit-row" method (public) () #f #f 212 18 212 26 ("edited?" "set!" "edit")}
        {Lisp-Entry "end-row-edition" method (public) () #f #f 217 18 217 33 ("edited?" "set!" "end-edition")}
        {Lisp-Entry "in-edition?" method (public virtual) () #f #f 222 26 222 37 ("edited?")}
        {Lisp-Entry "edit" method (public virtual) () #f #f 226 26 226 30 ("edit-in-cell")}
        {Lisp-Entry "end-edition" method (public virtual) () #f #f 230 26 230 37 ("close-editor" "save-edition")}
        {Lisp-Entry "save-edition" method (public virtual) () #f #f 235 26 235 38 ("set-edited-modified?" "enter-edited-value" "get-edited-modified?" "when")}
        {Lisp-Entry "close-editor" method (public virtual) () #f #f 241 26 241 38 ("close-in-cell-editor")}
        {Lisp-Entry "close-editor?" method (public virtual) () #f #f 245 26 245 39 ()}
        {Lisp-Entry "select-editor" method (public virtual) () #f #f 249 26 249 39 ("focus-editor" "edit-in-cell" "in-cell-edition?" "not" "when" "get-tree" "tree" "let")}
        {Lisp-Entry "in-cell-edition?" method (public) () #f #f 256 18 256 34 ("1" "Cell" "new" "get-edited-cell" "get-edited-cell~" "nu=?" "self" "row->line" "row->line~" "line" "in-edition?" "in-edition?~" "and" "get-tree" "tree" "let")}
        {Lisp-Entry "get-edited-imports" method (public virtual) () #f #f 263 26 263 44 ()}
        {Lisp-Entry "editor-up-arrow" method (public) () #f #f 272 18 272 33 ("NoModifiers" "get-tree" "up-arrow-press" "up-arrow-press~")}
        {Lisp-Entry "editor-down-arrow" method (public) () #f #f 276 18 276 35 ("NoModifiers" "get-tree" "down-arrow-press" "down-arrow-press~")}
        {Lisp-Entry "editor-tab" method (public) () #f #f 280 18 280 28 ("down-arrow-press" "down-arrow-press~" "get-tree" "up-arrow-press" "up-arrow-press~" "shift-down?" "if" "NoModifiers" "modifiers" "let")}
        {Lisp-Entry "editor-return" method (public) () #f #f 287 18 287 31 (".150" "duration:" "save-edition" "set-edited-modified?" "lambda" ":wait" "with-cursor" "show-cursor")}
        {Lisp-Entry "editor-focus-delegate" method (public) () #f #f 296 18 296 39 ("invalidate-drawing" "select-all?:" "focus-editor" "self" "get-tree" "auto-expand/collapse" "auto-expand/collapse~" "in-edition?" "not" "auto-in-place?" "and" "when")}
        {Lisp-Entry "editor-focus-lose" method (public) () #f #f 303 18 303 35 ("invalidate-drawing" "get-tree" "close-auto-expanded" "close-auto-expanded~")}
        {Lisp-Entry "edit-in-cell" method (public virtual) () #f #f 313 26 313 38 ("set-client" "set-client~" "focus-editor" "close-editor?" "close-editor?:" "editor:" "edit-cell" "edit-cell~" "value" "set-edited-value" "set-parent" "set-parent~" "new-editor" "set!" "editor" "unless" "fill" "set-layout-type" "set-layout-type~" "get-content" "get-content~" "content" "hscroll?:" "vscroll?:" "parent:" "Scroller-View" "scroller" "Dark-Red" "Color" "border-color:" "solid" "border-type:" "Border-View" "border" "1" "self" "row->line" "row->line~" "Cell" "new" "cell" "get-tree" "tree" "let*")}
        {Lisp-Entry "new-editor" method (protected virtual) () #f #f 330 29 330 39 ()}
        {Lisp-Entry "editor-class" method (protected virtual) () #f #f 334 29 334 41 ()}
        {Lisp-Entry "close-in-cell-editor" method (public) () #f #f 338 18 338 38 ("editor" "set!" "close-editor?" "when" "end-edition" "end-edition~" "get-tree" "tree" "let")}
        {Lisp-Entry "focus-editor" method (public virtual) ("(start: start #f)" "(end: end #f)" "(select-all?: select-all? #t)") #f #f 345 26 345 38 ("Range" "new" "set-selection" "set-selection~" "else" "set-caret" "set-caret~" "select-all" "select-all~" "not" "cond" "acquire-focus" "acquire-focus~" "when" "focused-editor" "editor" "let" "select-all?" "select-all?:" "end" "end:" "start" "start:")}
        {Lisp-Entry "focused-editor" method (public virtual) () #f #f 354 26 354 40 ("editor")}
        {Lisp-Entry "Modified-Color" definition () () #f #f 363 14 363 28 ("Dark-Red" "Color")}
        {Lisp-Entry "update" method (public virtual) ("value") #f #f 367 26 367 32 ("update-in-cell" "value")}
        {Lisp-Entry "update-in-cell" method () ("value") #f #f 371 11 371 25 ("invalidate-cell" "invalidate-cell~" "set-edited-modified?" "set-title" "set-title~" "set-property-modified?" "set-value" "get-cell-data" "get-cell-data~" "get-cell-editor" "get-cell-editor~" "get-preserved-data" "get-preserved-data~" "if" "data" "in-edition?" "edited?" "1" "Cell" "new" "cell" "self" "row->line" "row->line~" "line" "present" "title" "get-tree" "tree" "let*" "value")}
        {Lisp-Entry "set-property-modified?" method () ("flag") #f #f 388 11 388 33 ("invalidate-cell" "invalidate-cell~" "set-color" "set-color~" "Modified-Color" "if" "color" "get-cell-data" "get-cell-data~" "node" "0" "Cell" "new" "cell" "self" "row->line" "row->line~" "line" "get-tree" "tree" "let*" "property_" "when" "flag")}
        {Lisp-Entry "edit-definitions" method (public virtual) () #f #f 404 26 404 42 ("bell")}
        {Lisp-Entry "double-click" method (override) ("pos") #f #f 413 20 413 32 ("self" "auto-expand/collapse" "auto-expand/collapse~" "get-tree" "tree" "let" "pos")}
        {Lisp-Entry "show-property" method (public) () #f #f 418 18 418 31 ("property_" "field-name" "set-showed-property" "set-showed-property~" "View-Editor" "is-not?" "get-editor" "get-editor~" "editor" "let" "bell" "not" "if" "get-surrogate" "get-surrogate~" "surrogate" "get-client" "client" "let*")}
        {Lisp-Entry "revert-property" method (public) () #f #f 429 18 429 33 ("focus-editor" "set-modified?" "set-property-modified?" "set-edited-modified?" "value" "set-edited-value")}
        {Lisp-Entry "draw-data" method (public virtual) ("surface" "context" "value" "column" "row" "data" "width" "height") #f #f 442 26 442 35 ("0" "1" "draw-at" "draw-at~" "height" "width" "data" "row" "column" "value" "context" "surface")}}}})
"Value-Text-View"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "Value-Text-View.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.editor.Value-Text-View" module (protected) () #f #f 37 18 37 54 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Value-Text-View" class (undocumented) ((extends . "Plain-Text-View")) #f #f 45 20 45 35 ("Property-Editor" "implements" "IDE-Text-View" "Plain-Text-View")
        {Lisp-Entry "value-row" property () ((initialize . "#f") (accessors . "generate")) #f #f 48 12 48 21 ()}
        {Lisp-Entry "get-value-row" accessor () () #f #f 48 46 48 54 ()}
        {Lisp-Entry "set-value-row" accessor () () #f #f 48 46 48 54 ()}
        {Lisp-Entry "manager" slot () ((initialize . "#f")) #f #f 51 8 51 15 ()}
        {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("show-unfocused-selection?:" "accepts-returns?:" "install" "<install>")}
        {Lisp-Entry "new-model" method (override) () #f #f 58 20 58 29 ("top-padding:" "1" "left-padding:" "Text-Base" "Text-Style" "base-style:" "Text-Model" "new")}
        {Lisp-Entry "get-manager" method (override) () #f #f 67 20 67 31 ("manager")}
        {Lisp-Entry "set-manager" method (override) ("value") #f #f 71 20 71 31 ("manager" "set!" "value")}
        {Lisp-Entry "get-edited-value" method () () #f #f 75 11 75 27 ("get-string-content" "read-string-element")}
        {Lisp-Entry "set-edited-value" method () ("value") #f #f 79 11 79 27 ("set-string-content" ":reader" "->string" "present-edited-value" "define" "value")}
        {Lisp-Entry "get-edited-modified?" method () () #f #f 86 11 86 31 ("get-document-controller" "get-modified?" "get-modified?~")}
        {Lisp-Entry "set-edited-modified?" method () ("flag") #f #f 90 11 90 31 ("get-document-controller" "set-modified?" "set-modified?~" "flag")}
        {Lisp-Entry "up-arrow-move" method (override) ("extend?" "scroll?") #f #f 99 20 99 33 ("editor-up-arrow" "editor-up-arrow~" "value-row" "manager" "or" "target" "let" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method (override) ("extend?" "scroll?") #f #f 104 20 104 35 ("editor-down-arrow" "editor-down-arrow~" "value-row" "manager" "or" "target" "let" "scroll?" "extend?")}
        {Lisp-Entry "tab-press" method (override) ("key" "modifiers") #f #f 109 20 109 29 ("value-row" "editor-tab" "editor-tab~" "manager" "end-completion" "has-ambiguous-completion?" "if" "modifiers" "key")}
        {Lisp-Entry "return-press" method (override) ("key") #f #f 117 20 117 32 ("value-row" "editor-return" "editor-return~" "manager" "if" "nextmethod" "key")}
        {Lisp-Entry "document-menu" method () () #f #f 124 11 124 24 ()}
        {Lisp-Entry "focus-lose" method (override) () #f #f 133 20 133 30 ("value-row" "editor-focus-lose" "editor-focus-lose~" "manager" "if" "nextmethod")}
        {Lisp-Entry "focus-master" method (override) () #f #f 140 20 140 32 ("value-row" "get-tree" "get-tree~")}
        {Lisp-Entry "focus-reset" method (override) () #f #f 144 20 144 31 ("value-row" "get-tree" "get-tree~")}}}})
"View-Editor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "View-Editor.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.designer.editor.View-Editor" module (protected) () #f #f 37 18 37 50 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.system" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "View-Editor" class (undocumented) ((extends . "Component-Editor")) #f #f 52 20 52 31 ("select" "Component-Editor")
        {Lisp-Entry "mode" property () ((initialize . "'select") (accessors . "generate")) #f #f 55 12 55 16 ()}
        {Lisp-Entry "get-mode" accessor () () #f #f 55 46 55 54 ()}
        {Lisp-Entry "set-mode" accessor () () #f #f 55 46 55 54 ()}
        {Lisp-Entry "overlay" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 58 18 58 25 ()}
        {Lisp-Entry "get-overlay" accessor () () #f #f 58 56 58 64 ()}
        {Lisp-Entry "showed-property" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 59 18 59 33 ()}
        {Lisp-Entry "get-showed-property" accessor () () #f #f 59 56 59 64 ()}
        {Lisp-Entry "rubber-band?" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 60 18 60 30 ()}
        {Lisp-Entry "get-rubber-band?" accessor () () #f #f 60 56 60 64 ()}
        {Lisp-Entry "base-view" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 61 18 61 27 ()}
        {Lisp-Entry "get-base-view" accessor () () #f #f 61 56 61 64 ()}
        {Lisp-Entry "base-position" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 62 18 62 31 ()}
        {Lisp-Entry "get-base-position" accessor () () #f #f 62 56 62 64 ()}
        {Lisp-Entry "current-position" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 63 18 63 34 ()}
        {Lisp-Entry "get-current-position" accessor () () #f #f 63 56 63 64 ()}
        {Lisp-Entry "preserved-client" slot (protected) ((initialize . "#f") (getter . "generate")) #f #f 64 18 64 34 ()}
        {Lisp-Entry "get-preserved-client" accessor () () #f #f 64 56 64 64 ()}
        {Lisp-Entry "show-frames?" slot (protected) ((initialize . "#t") (getter . "generate")) #f #f 65 18 65 30 ()}
        {Lisp-Entry "get-show-frames?" accessor () () #f #f 65 56 65 64 ()}
        {Lisp-Entry "show-content?" slot (protected) ((initialize . "#t") (getter . "generate")) #f #f 66 18 66 31 ()}
        {Lisp-Entry "get-show-content?" accessor () () #f #f 66 56 66 64 ()}
        {Lisp-Entry "form" form () () #f #f 69 3 69 7 ("vscroll?:" "hscroll?:" "scroller" "name:" "Scroller-View" "<Scroller-View>" "Medium-Gray" "Color" "background:" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "host-position" method (meta override) () #f #f 79 25 79 38 ("117" "227" "Point")}
        {Lisp-Entry "host-size" method (meta override) () #f #f 83 25 83 34 ("629" "810" "Dimension")}
        {Lisp-Entry "host-workspaces" method (override) () #f #f 87 20 87 35 ("designer")}
        {Lisp-Entry "guest-actions" method (override) () #f #f 96 20 96 33 ("nextmethod" "view-editor" "find-actions" "cons")}
        {Lisp-Entry "on-bring-to-front" method () ("evt") #f #f 106 11 106 28 ("client" "selection" "collect-oldest-ancestors" "designer" "bring-to-front" "bring-to-front~" "component" "lambda" "for-each" "evt")}
        {Lisp-Entry "on-send-to-back" method () ("evt") #f #f 112 11 112 26 ("client" "selection" "collect-oldest-ancestors" "designer" "send-to-back" "send-to-back~" "component" "lambda" "for-each" "evt")}
        {Lisp-Entry "on-delete-selection" method () ("evt") #f #f 118 11 118 30 ("delete-selection" "evt")}
        {Lisp-Entry "on-rename-selected" method () ("evt") #f #f 122 11 122 29 ("set-presentation-property" "set-presentation-property~" "get-presentation-property" "get-presentation-property~" "initial-value:" "get-brothers" "get-brothers~" "class-of" "request-component-presentation" "presentation" "get-designer" "designer" "car" "component" "let" "bell" "1" "selection" "length" "/=" "if" "evt")}
        {Lisp-Entry "on-select-all-children" method () ("evt") #f #f 131 11 131 33 ("get-surrogate" "get-surrogate~" "select-all" "select-all~" "car" "component" "let" "bell" "1" "selection" "length" "/=" "if" "evt")}
        {Lisp-Entry "on-properties" method () ("evt") #f #f 138 11 138 24 ("focus?:" "workspace:" "Properties-Manager" "select-docked" "evt")}
        {Lisp-Entry "on-open" method () ("evt") #f #f 142 11 142 18 ("car" "class-of" "open-component" "selection" "not-null?" "when" "evt")}
        {Lisp-Entry "new-event" method (meta override) ("." "rest") #f #f 152 25 152 34 ("600" "800" "Dimension" "size:" "jazz.ui" "View" "Toolbox-Manager" "find-docked" "get-tree" "get-tree~" "new-class" "new-class~" "rest")}
        {Lisp-Entry "client-update" method (override) () #f #f 161 20 161 33 ("set-visible?" "set-visible?~" "client" "when" "install-client" "nextmethod")}
        {Lisp-Entry "install-client-surrogate" method (override) () #f #f 168 20 168 44 ("self" "install-surrogate" "install-surrogate~" "client" "when")}
        {Lisp-Entry "install-client" method (protected virtual) () #f #f 173 29 173 43 ("set-client" "set-client~" "set-parent" "set-parent~" "get-content" "get-content~" "and" "content" "locate-component" "scroller" "let*" "unless" "get-parent" "get-parent~" "client-parent" "let" "client" "when")}
        {Lisp-Entry "install-current-designer" method (override) ("component" "form") #f #f 190 20 190 44 ("get-surrogate" "get-surrogate~" "redraw-border" "redraw-border~" "nextmethod" "form" "component")}
        {Lisp-Entry "select-mode" method () ("m") #f #f 201 11 201 22 ("locate" "locate~" "set-selected?" "set-selected?~" "when" "Designer-Manager" "find-docked" "manager" "let" "mode" "set!" "m")}
        {Lisp-Entry "toggle-frames" method (package) () #f #f 213 19 213 32 ("get-reference" "invalidate-view" "invalidate-view~" "not" "show-frames?" "set!")}
        {Lisp-Entry "toggle-content" method (package) () #f #f 218 19 218 33 ("get-reference" "invalidate-view" "invalidate-view~" "not" "show-content?" "set!")}
        {Lisp-Entry "toggle-try-out" method (package) () #f #f 223 19 223 33 ("list" "else" "set-client" "set-selection" "client" "preserved-client" "set!" "trying-out?" "not" "cond")}
        {Lisp-Entry "trying-out?" method (package) () #f #f 234 19 234 30 ("preserved-client" "boolean")}
        {Lisp-Entry "set-showed-property" method (package) ("property") #f #f 243 19 243 38 ("client" "invalidate-view" "invalidate-view~" "showed-property" "set!" "property")}
        {Lisp-Entry "invalidate-selection" method (package) () #f #f 253 19 253 39 ("selection" "invalidate-view" "invalidate-view~" "View" "is?" "when" "selected" "lambda" "for-each")}
        {Lisp-Entry "render" method (override) ("surface" "draw-self?" "nodes" "context") #f #f 265 20 265 26 ("length" "0" "naturals" "selection" "draw-selected" "draw-selected~" "get-surrogate" "get-surrogate~" "surrogate" "let" "View" "is?" "when" "rank" "view" "lambda" "for-each" "nextmethod" "context" "nodes" "draw-self?" "surface")}
        {Lisp-Entry "start-rubber-band" method (package) ("view" "pos") #f #f 280 19 280 36 ("self" "origin:" "set-selection" "setup-overlay" "acquire-capture" "acquire-capture~" "current-position" "base-position" "base-view" "rubber-band?" "set!" "pos" "view")}
        {Lisp-Entry "process-rubber-band" method (package) ("pos") #f #f 290 19 290 38 ("select-rubber-banded" "rect" "1" "base-position" "corners->rect" "normalize-rect" "inflate-rect" "client" "invalidate-rect" "invalidate-rect~" "set!" "current-position" "old" "let" "rubber-band?" "when" "pos")}
        {Lisp-Entry "select-rubber-banded" method () ("rect") #f #f 302 11 302 31 ("self" "origin:" "set-selection" "get-output" "get-output~" "lst" "let" "put" "put~" "rects-intersect?" "when" "client" "acquire" "acquire~" "get-bounds" "get-bounds~" "b" "Client-Overlay" "is?" "unless" "view" "lambda" "base-view" "for-each-view" "for-each-view~" "List-Factory" "new" "selection" "rect-size" "s" "rect-position" "p" "normalize-rect" "r" "let*" "rect")}
        {Lisp-Entry "end-rubber-band" method (package) ("pos") #f #f 318 19 318 34 ("select" "select-mode" "selection" "not-null?" "when" "rubber-band?" "set!" "base-view" "release-capture" "release-capture~" "remove-overlay" "base-position" "corners->rect" "select-rubber-banded" "process-rubber-band" "pos")}
        {Lisp-Entry "setup-overlay" method () () #f #f 333 11 333 24 ("self" "editor:" "4000" "Dimension" "size:" "client" "parent:" "Client-Overlay" "new" "overlay" "set!")}
        {Lisp-Entry "remove-overlay" method () () #f #f 337 11 337 25 ("set!" "overlay" "close" "close~")}
        {Lisp-Entry "align-left" method (public) () #f #f 347 18 347 28 ("cdr" "get-v" "get-v~" "Point" "new" "set-view-lie" "get-lie" "get-lie~" "lie" "let" "view" "for-each" "lie-left" "h" "car" "reference" "let*" "lambda" "with-alignment" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "align-top" method (public) () #f #f 360 18 360 27 ("cdr" "get-h" "get-h~" "Point" "new" "set-view-lie" "get-lie" "get-lie~" "lie" "let" "view" "for-each" "lie-top" "v" "car" "reference" "let*" "lambda" "with-alignment" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "align-right" method (public) () #f #f 373 18 373 29 ("cdr" "get-v" "get-v~" "Point" "new" "set-view-lie" "get-width" "get-width~" "-" "get-lie" "get-lie~" "lie" "let" "view" "for-each" "lie-right" "h" "car" "reference" "let*" "lambda" "with-alignment" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "align-bottom" method (public) () #f #f 387 18 387 30 ("cdr" "get-h" "get-h~" "Point" "new" "set-view-lie" "get-height" "get-height~" "-" "get-lie" "get-lie~" "lie" "let" "view" "for-each" "lie-bottom" "v" "car" "reference" "let*" "lambda" "with-alignment" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "center-horizontally" method (public) () #f #f 401 18 401 37 ("cdr" "get-v" "get-v~" "Point" "new" "set-view-lie" "-" "fxround/" "+" "get-lie" "get-lie~" "lie" "let" "view" "for-each" "get-width" "get-width~" "width" "lie-left" "h" "car" "reference" "let*" "lambda" "with-alignment" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "center-vertically" method (public) () #f #f 416 18 416 35 ("cdr" "get-h" "get-h~" "Point" "new" "set-view-lie" "-" "fxround/" "+" "get-lie" "get-lie~" "lie" "let" "view" "for-each" "get-height" "get-height~" "height" "lie-top" "v" "car" "reference" "let*" "lambda" "with-alignment" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "space-horizontally" method (public) () #f #f 431 18 431 36 ("cddr" "get-width" "get-width~" "increase!" "get-v" "get-v~" "Point" "new" "set-view-lie" "get-lie" "get-lie~" "lie" "let" "view" "for-each" "+" "h" "lie-right" "lie-left" "-" "dh" "second" "first" "let*" "lambda" "with-alignment" "bell" "3" "selection" "length" "<" "if")}
        {Lisp-Entry "space-vertically" method (public) () #f #f 447 18 447 34 ("cddr" "get-height" "get-height~" "increase!" "get-h" "get-h~" "Point" "new" "set-view-lie" "get-lie" "get-lie~" "lie" "let" "view" "for-each" "+" "v" "lie-bottom" "lie-top" "-" "dv" "second" "first" "let*" "lambda" "with-alignment" "bell" "3" "selection" "length" "<" "if")}
        {Lisp-Entry "resize-width" method (public) () #f #f 463 18 463 30 ("cdr" "get-height" "get-height~" "Dimension" "new" "designer" "safe-set-property" "safe-set-property~" "get-size" "get-size~" "size" "let" "view" "for-each" "get-width" "get-width~" "width" "car" "reference" "let*" "lambda" "with-alignment" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "resize-height" method (public) () #f #f 476 18 476 31 ("cdr" "get-width" "get-width~" "Dimension" "new" "designer" "safe-set-property" "safe-set-property~" "get-size" "get-size~" "size" "let" "view" "for-each" "get-height" "get-height~" "height" "car" "reference" "let*" "lambda" "with-alignment" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "resize-both" method (public) () #f #f 489 18 489 29 ("cdr" "designer" "safe-set-property" "safe-set-property~" "view" "for-each" "get-size" "get-size~" "size" "car" "reference" "let*" "lambda" "with-alignment" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "with-alignment" method () ("thunk") #f #f 501 11 501 25 ("get-application" "update-focus-actions" "update-focus-actions~" "designer" "get-undoer" "get-undoer~" "with-atomic-undo" "with-atomic-undo~" "thunk")}
        {Lisp-Entry "force-layout" method (public) () #f #f 507 18 507 30 ("selection" "layout-view" "layout-view~" "get-parent" "get-parent~" "if" "target" "view" "lambda" "for-each" "shift-down?" "use-view?" "let")}
        {Lisp-Entry "lie-left" definition () ("view") #f #f 515 15 515 23 ("get-lie" "get-lie~" "get-h" "get-h~" "view")}
        {Lisp-Entry "lie-top" definition () ("view") #f #f 519 15 519 22 ("get-lie" "get-lie~" "get-v" "get-v~" "view")}
        {Lisp-Entry "lie-right" definition () ("view") #f #f 523 15 523 24 ("get-width" "get-width~" "get-lie" "get-lie~" "get-h" "get-h~" "+" "view")}
        {Lisp-Entry "lie-bottom" definition () ("view") #f #f 527 15 527 25 ("get-height" "get-height~" "get-lie" "get-lie~" "get-v" "get-v~" "+" "view")}
        {Lisp-Entry "set-view-lie" method () ("view" "lie") #f #f 531 11 531 23 ("old-value:" "position" "designer" "safe-set-property" "safe-set-property~" "set-lie" "set-lie~" "get-position" "get-position~" "old-value" "let" "lie" "view")}
        {Lisp-Entry "extend-selection-style" method (virtual) ("generate-properties") #f #f 542 19 542 41 ("extend" "extend~" "apply" "designer" "safe-set-property" "safe-set-property~" "Text-Style" "new" "get-style" "get-style~" "or" "style" "get-selection" "car" "selection" "let*" "generate-properties")}
        {Lisp-Entry "extend-selection-font" method () ("generate-properties") #f #f 548 11 548 32 ("extend" "extend~" "apply" "get-font" "get-font~" "font" "let" "font:" "list" "style" "lambda" "extend-selection-style" "generate-properties")}
        {Lisp-Entry "toggle-bold" method () () #f #f 555 11 555 22 ("get-bold?" "get-bold?~" "not" "bold?:" "list" "font" "lambda" "extend-selection-font")}
        {Lisp-Entry "toggle-italic" method () () #f #f 561 11 561 24 ("get-italic?" "get-italic?~" "not" "italic?:" "list" "font" "lambda" "extend-selection-font")}
        {Lisp-Entry "toggle-underline" method () () #f #f 567 11 567 27 ("get-underline?" "get-underline?~" "not" "underline?:" "list" "font" "lambda" "extend-selection-font")}
        {Lisp-Entry "on-font-size" method () ("val") #f #f 573 11 573 23 ("point-size:" "list" "font" "lambda" "extend-selection-font" "val")}
        {Lisp-Entry "on-font-name" method () ("val") #f #f 579 11 579 23 ("8" "point-size:" "Font" "new" "font-name:" "extend" "extend~" "if" "font:" "list" "get-font" "get-font~" "font" "let" "style" "lambda" "extend-selection-style" "val")}
        {Lisp-Entry "on-style" method () ("val") #f #f 588 11 588 19 ("style" "designer" "safe-set-property" "safe-set-property~" "get-selection" "car" "selection" "let*" "val")}
        {Lisp-Entry "change-text-color" method (public) ("color") #f #f 593 18 593 35 ("color:" "list" "style" "lambda" "extend-selection-style" "color")}
        {Lisp-Entry "change-highlight-color" method (public) ("color") #f #f 597 18 597 40 ("highlight:" "list" "style" "lambda" "extend-selection-style" "color")}
        {Lisp-Entry "change-frame-color" method (public) ("color") #f #f 601 18 601 36 ("frame:" "list" "style" "lambda" "extend-selection-style" "color")}}
      {Lisp-Entry "View-Workbench" class () ((extends . "View")) #f #f 612 7 612 21 ("View")
        {Lisp-Entry "form" form () () #f #f 615 3 615 7 ("Medium-Gray" "Color" "background:" "install" "<install>")}
        {Lisp-Entry "get-class-descriptor" method (meta override) () #f #f 624 25 624 45 ("View-Workbench-Descriptor" "new")}}
      {Lisp-Entry "design" submodule () () #f #f 633 11 633 17 ()
        {Lisp-Entry "import" import () () #f #f 636 1 636 7 ("jazz.designer")}
        {Lisp-Entry "View-Workbench-Descriptor" class () ((extends . "View-Descriptor")) #f #f 639 7 639 32 ("View-Descriptor")
          {Lisp-Entry "class-image" method (override) ("class") #f #f 642 20 642 31 ("Image-Resource" "class")}
          {Lisp-Entry "component-surrogate-class" method (override) ("component") #f #f 646 20 646 45 ("View-Workbench-Surrogate" "component")}}
        {Lisp-Entry "View-Workbench-Surrogate" class (undocumented) ((extends . "View-Surrogate")) #f #f 650 20 650 44 ("View-Surrogate")
          {Lisp-Entry "draw" method (override) ("surface") #f #f 653 20 653 24 ("surface")}}}
      {Lisp-Entry "Overlay-Outside" definition () () #f #f 662 12 662 27 ("0.8" "alpha:" "234" "blue:" "158" "green:" "96" "red:" "Color")}
      {Lisp-Entry "Overlay-Inside" definition () () #f #f 665 12 665 26 ("0.4" "alpha:" "234" "blue:" "158" "green:" "96" "red:" "Color")}
      {Lisp-Entry "Client-Overlay" class () ((extends . "View")) #f #f 669 7 669 21 ("View")
        {Lisp-Entry "editor" property () () #f #f 672 12 672 18 ()}
        {Lisp-Entry "draw" method (override) ("surface" "context") #f #f 675 20 675 24 ("Overlay-Inside" "Overlay-Outside" "rectangle" "rectangle~" "1" "set-line-width" "set-line-width~" "corners->rect" "normalize-rect" "rect" "when" "get-current-position" "get-current-position~" "current" "editor" "get-base-position" "get-base-position~" "base" "let" "context" "surface")}}}})
"View-Editor-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "View-Editor-Actions.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.editor.View-Editor-Actions" module (protected) () #f #f 37 18 37 58 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "View-Editor-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 39 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("on-save" "save" "on-open" "open" ":shift" "on-new" ":frame" "new" ":control" "Shortcut" "shortcut:" "on-edit-form" ":document" "Event-Handler" "action-handler:" "edit-form" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"View-Surrogate"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "surrogate" "View-Surrogate.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.designer.surrogate.View-Surrogate" module (protected) () #f #f 37 18 37 56 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.window" "jazz.ui.view" "jazz.ui.resizer" "jazz.ui" "jazz.system" "jazz.library.component" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.geometry" "jazz.designer.view" "jazz.designer.menu" "jazz.designer")}
      {Lisp-Entry "View-Surrogate" class (undocumented) ((extends . "Component-Surrogate") (implements . "Renderer")) #f #f 55 20 55 34 ("Renderer" "Component-Surrogate")
        {Lisp-Entry "client-renderer" slot (protected) ((initialize . "#f")) #f #f 58 18 58 33 ()}
        {Lisp-Entry "client-focus-gained-handler" slot (protected) ((initialize . "#f")) #f #f 59 18 59 45 ()}
        {Lisp-Entry "client-focus-lose-handler" slot (protected) ((initialize . "#f")) #f #f 60 18 60 43 ()}
        {Lisp-Entry "client-cursor-update-handler" slot (protected) ((initialize . "#f")) #f #f 61 18 61 46 ()}
        {Lisp-Entry "client-mouse-down-handler" slot (protected) ((initialize . "#f")) #f #f 62 18 62 43 ()}
        {Lisp-Entry "client-mouse-up-handler" slot (protected) ((initialize . "#f")) #f #f 63 18 63 41 ()}
        {Lisp-Entry "client-drag-move-handler" slot (protected) ((initialize . "#f")) #f #f 64 18 64 42 ()}
        {Lisp-Entry "client-drag-up-handler" slot (protected) ((initialize . "#f")) #f #f 65 18 65 40 ()}
        {Lisp-Entry "client-double-click-handler" slot (protected) ((initialize . "#f")) #f #f 66 18 66 45 ()}
        {Lisp-Entry "client-current-drop-handler" slot (protected) ((initialize . "#f")) #f #f 67 18 67 45 ()}
        {Lisp-Entry "client-receive-drop-handler" slot (protected) ((initialize . "#f")) #f #f 68 18 68 45 ()}
        {Lisp-Entry "client-context-menu-handler" slot (protected) ((initialize . "#f")) #f #f 69 18 69 45 ()}
        {Lisp-Entry "client-key-press-handler" slot (protected) ((initialize . "#f")) #f #f 70 18 70 42 ()}
        {Lisp-Entry "client-arrow-press-handler" slot (protected) ((initialize . "#f")) #f #f 71 18 71 44 ()}
        {Lisp-Entry "client-backspace-press-handler" slot (protected) ((initialize . "#f")) #f #f 72 18 72 48 ()}
        {Lisp-Entry "client-return-press-handler" slot (protected) ((initialize . "#f")) #f #f 73 18 73 45 ()}
        {Lisp-Entry "state" slot () ((initialize . "#f")) #f #f 76 8 76 13 ()}
        {Lisp-Entry "current-part" slot () ((initialize . "#f")) #f #f 77 8 77 20 ()}
        {Lisp-Entry "start-mouse" slot () ((initialize . "#f")) #f #f 78 8 78 19 ()}
        {Lisp-Entry "start-positions" slot () ((initialize . "#f")) #f #f 79 8 79 23 ()}
        {Lisp-Entry "start-position" slot () ((initialize . "#f")) #f #f 80 8 80 22 ()}
        {Lisp-Entry "start-size" slot () ((initialize . "#f")) #f #f 81 8 81 18 ()}
        {Lisp-Entry "effective-client" slot () ((initialize . "#f")) #f #f 82 8 82 24 ()}
        {Lisp-Entry "effective-selection" slot () ((initialize . "#f")) #f #f 83 8 83 27 ()}
        {Lisp-Entry "atomic-preserved" slot () ((initialize . "#f")) #f #f 84 8 84 24 ()}
        {Lisp-Entry "install-handlers" method (override) () #f #f 92 20 92 36 ("invalidate-border" "on-return-press" "set-return-press-handler" "set-return-press-handler~" "on-backspace-press" "set-backspace-press-handler" "set-backspace-press-handler~" "on-arrow-press" "set-arrow-press-handler" "set-arrow-press-handler~" "on-key-press" "set-key-press-handler" "set-key-press-handler~" "on-context-menu" "set-context-menu-handler" "set-context-menu-handler~" "on-receive-drop" "set-receive-drop-handler" "set-receive-drop-handler~" "on-current-drop" "set-current-drop-handler" "set-current-drop-handler~" "on-double-click" "set-double-click-handler" "set-double-click-handler~" "on-drag-up" "set-drag-up-handler" "set-drag-up-handler~" "on-drag-move" "set-drag-move-handler" "set-drag-move-handler~" "on-mouse-up" "set-mouse-up-handler" "set-mouse-up-handler~" "on-mouse-down" "set-mouse-down-handler" "set-mouse-down-handler~" "on-cursor-update" "set-cursor-update-handler" "set-cursor-update-handler~" "on-focus-lose" "set-focus-lose-handler" "set-focus-lose-handler~" "preserved:" "on-focus-gained" "method-name:" "target:" "Surrogate-Handler" "new" "set-focus-gained-handler" "set-focus-gained-handler~" "self" "set-renderer" "set-renderer~" "get-return-press-handler" "get-return-press-handler~" "client-return-press-handler" "get-backspace-press-handler" "get-backspace-press-handler~" "client-backspace-press-handler" "get-arrow-press-handler" "get-arrow-press-handler~" "client-arrow-press-handler" "get-key-press-handler" "get-key-press-handler~" "client-key-press-handler" "get-context-menu-handler" "get-context-menu-handler~" "client-context-menu-handler" "get-receive-drop-handler" "get-receive-drop-handler~" "client-receive-drop-handler" "get-current-drop-handler" "get-current-drop-handler~" "client-current-drop-handler" "get-double-click-handler" "get-double-click-handler~" "client-double-click-handler" "get-drag-up-handler" "get-drag-up-handler~" "client-drag-up-handler" "get-drag-move-handler" "get-drag-move-handler~" "client-drag-move-handler" "get-mouse-up-handler" "get-mouse-up-handler~" "client-mouse-up-handler" "get-mouse-down-handler" "get-mouse-down-handler~" "client-mouse-down-handler" "get-cursor-update-handler" "get-cursor-update-handler~" "client-cursor-update-handler" "get-focus-lose-handler" "get-focus-lose-handler~" "client-focus-lose-handler" "get-focus-gained-handler" "get-focus-gained-handler~" "client-focus-gained-handler" "client" "get-renderer" "get-renderer~" "client-renderer" "set!" "nextmethod")}
        {Lisp-Entry "remove-handlers" method (override) () #f #f 129 20 129 35 ("invalidate-border" "client-return-press-handler" "set-return-press-handler" "set-return-press-handler~" "client-backspace-press-handler" "set-backspace-press-handler" "set-backspace-press-handler~" "client-arrow-press-handler" "set-arrow-press-handler" "set-arrow-press-handler~" "client-key-press-handler" "set-key-press-handler" "set-key-press-handler~" "client-context-menu-handler" "set-context-menu-handler" "set-context-menu-handler~" "client-receive-drop-handler" "set-receive-drop-handler" "set-receive-drop-handler~" "client-current-drop-handler" "set-current-drop-handler" "set-current-drop-handler~" "client-double-click-handler" "set-double-click-handler" "set-double-click-handler~" "client-drag-up-handler" "set-drag-up-handler" "set-drag-up-handler~" "client-drag-move-handler" "set-drag-move-handler" "set-drag-move-handler~" "client-mouse-up-handler" "set-mouse-up-handler" "set-mouse-up-handler~" "client-mouse-down-handler" "set-mouse-down-handler" "set-mouse-down-handler~" "client-cursor-update-handler" "set-cursor-update-handler" "set-cursor-update-handler~" "client-focus-lose-handler" "set-focus-lose-handler" "set-focus-lose-handler~" "client-focus-gained-handler" "set-focus-gained-handler" "set-focus-gained-handler~" "client-renderer" "client" "set-renderer" "set-renderer~" "nextmethod")}
        {Lisp-Entry "render" method (override) ("drawing" "surface" "draw-self?" "nodes" "context") #f #f 155 20 155 26 ("draw" "draw-children" "draw-children~" "Outline-View" "is-not?" "or" "draw-content" "draw-content~" "draw-background" "draw-background~" "White" "Color" "get-bounds" "get-bounds~" "fill-rect" "fill-rect~" "View-Workbench" "get-parent" "get-parent~" "is?" "get-client" "get-client~" "client" "eq?" "when" "editor" "get-show-content?" "get-show-content?~" "content?" "let" "default-render" "define" "context" "nodes" "draw-self?" "surface" "drawing")}
        {Lisp-Entry "draw" method (public virtual) ("surface") #f #f 171 26 171 30 ("draw-showed-property" "get-v" "get-v~" "get-h" "get-h~" "draw-text" "draw-text~" "Medium-Gray" "Color" "set-text-color" "set-text-color~" "get-size" "get-size~" "center" "pos" "get-text-extent" "get-text-extent~" "extent" "let*" "set-font" "set-font~" "font" "text" "draw-information?" "get-information" "else" "28" "large" "18" "medium" "12" "point-size:" "font-name:" "Font" "small" "cadr" "car" "parse-font" "string?" "info" "parse-info" "draw-information" "draw-handles" "-1" "inflate-rect" "frame-rect" "frame-rect~" "inner-color" "outer-color" "receive" "solid" "set-style" "set-style~" "draw-frame" "get-form" "get-form~" "component-owned-form" "get-editor" "get-designer" "get-designer~" "designer" "traverse" "Unselected-Modify-Inner-Color" "Unselected-Modify-Color" "modify" "Unselected-Owned-Inner-Color" "Unselected-Owned-Color" "create" "ownership-level" "case" "owned-form" "selected-inner-color" "selected-color" "values" "determine-colors" "outer" "find" "rank" "get-show-frames?" "get-show-frames?~" "draw-surrogate-frame" "get-bounds" "get-bounds~" "fill-rect" "fill-rect~" "Unfocused-Background" "Focused-Background" "if" "color" "editing?" "not" "memq" "neq?" "when" "is-focused?" "is-focused?~" "View" "is?" "and" "component" "lambda" "some?" "some-selection-focused?" "draw-selected-background" "define" "outer-client" "client" "eq?" "outer?" "get-selection" "get-selection~" "selection" "editor" "get-reference" "get-reference~" "reference" "let" "surface")}
        {Lisp-Entry "draw-showed-property" method (public) ("surface") #f #f 251 18 251 38 ("2" "get-v" "get-v~" "3" "get-h" "get-h~" "+" "draw-text" "draw-text~" "Dark-Red" "set-text-color" "set-text-color~" "Label" "Font" "set-font" "set-font~" "White" "-1" "inflate-rect" "fill-rect" "fill-rect~" "Black" "Color" "frame-rect" "frame-rect~" "position/size->rect" "rect" "get-size" "get-size~" "center" "pos" "4" "7" "Dimension" "nu+" "size" "get-text-extent" "get-text-extent~" "extent" "->string" "string" "read-property" "value" "let*" "client" "class-of" "category-field" "property?" "and" "when" "editor" "get-showed-property" "get-showed-property~" "property" "let" "surface")}
        {Lisp-Entry "draw-selected" method (public virtual) ("surface" "rank") #f #f 267 26 267 39 ("solid" "Black" "Color" "line" "line~" "set-line-width" "set-line-width~" "selected-color" "set-color" "set-color~" "alternate" "set-style" "set-style~" "get-bottom" "get-bottom~" "b" "1" "get-right" "get-right~" "-" "r" "get-top" "get-top~" "t" "get-left" "get-left~" "l" "get-bounds" "get-bounds~" "client" "editor" "acquire" "acquire~" "outside" "let" "rank" "surface")}
        {Lisp-Entry "get-information" method (protected virtual) () #f #f 284 29 284 44 ()}
        {Lisp-Entry "draw-information?" method (protected virtual) () #f #f 288 29 288 46 ("client" "get-visible-children" "get-visible-children~" "null?")}
        {Lisp-Entry "with-information-update" method () ("thunk") #f #f 292 11 292 34 ("client" "invalidate-view" "invalidate-view~" "eqv?" "unless" "after" "prog1" "draw-information?" "before" "let" "thunk")}
        {Lisp-Entry "border-region" method () () #f #f 300 11 300 24 ("2" "Rect" "insets:" "outer-client" "border-region" "border-region~")}
        {Lisp-Entry "invalidate-border" method (override) () #f #f 304 20 304 37 ("2" "Rect" "insets:" "outer-client" "invalidate-border" "invalidate-border~")}
        {Lisp-Entry "redraw-border" method (override) () #f #f 308 20 308 33 ("2" "Rect" "insets:" "outer-client" "redraw-border" "redraw-border~")}
        {Lisp-Entry "on-focus-gained" method () ("evt") #f #f 317 11 317 26 ("focus-gained" "evt")}
        {Lisp-Entry "focus-gained" method (protected virtual) () #f #f 321 29 321 41 ("focus-update-actions" "invalidate-selection")}
        {Lisp-Entry "on-focus-lose" method () ("evt") #f #f 326 11 326 24 ("focus-lose" "evt")}
        {Lisp-Entry "focus-lose" method (protected virtual) () #f #f 330 29 330 39 ("invalidate-selection")}
        {Lisp-Entry "focus-actions" method (override) () #f #f 334 20 334 33 ("client" "focus-actions" "focus-actions~" "view-surrogate" "find-actions" "cons")}
        {Lisp-Entry "focus-update-actions" method (virtual) () #f #f 342 19 342 39 ("set-default-traits" "add" "open" "new" "can-bring-to-front?" "bring-to-front" "can-send-to-back?" "send-to-back" "view-surrogate" "can-rename?" "rename" "components-tree" "Action" "set-action-enabled?")}
        {Lisp-Entry "on-cursor-update" method () ("evt") #f #f 357 11 357 27 ("cursor-update" "cursor-update~" "get-position" "get-position~" "outer-pos" "outer-surrogate" "receive" "evt")}
        {Lisp-Entry "cursor-update" method (public virtual) ("pos") #f #f 362 26 362 39 (":arrow" ":opened-hand" "move-client?" "get-resize-cursor" "cond" "0" "1" "member?" "get-client" "get-client~" "neq?" "full?:" "get-size" "get-size~" "find-resize-part" "size-client?" "if" "current-part" "process" "tolerance" "state" "memq?" "not" "or" "client" "selected?" "selected?~" "and" "part" "else" ":cross" "set-cursor" "rect" "case" "editor" "get-mode" "get-mode~" "mode" "let" "pos")}
        {Lisp-Entry "Drag-Tolerance" definition () () #f #f 389 14 389 28 ("3")}
        {Lisp-Entry "on-mouse-down" method () ("evt") #f #f 393 11 393 24 ("mouse-down" "mouse-down~" "outer-pos" "outer-surrogate" "receive" "get-client" "get-client~" "acquire" "acquire~" "client" "start-rubber-band" "start-rubber-band~" "control-down?" "rect" "eq?" "or" "if" "get-position" "get-position~" "pos" "editor" "get-mode" "get-mode~" "mode" "let" "evt")}
        {Lisp-Entry "on-mouse-up" method () ("evt") #f #f 402 11 402 22 ("mouse-up" "mouse-up~" "get-position" "get-position~" "outer-pos" "outer-surrogate" "receive" "evt")}
        {Lisp-Entry "on-drag-move" method () ("evt") #f #f 407 11 407 23 ("drag-move" "drag-move~" "outer-pos" "outer-surrogate" "receive" "client" "get-client" "get-client~" "acquire" "acquire~" "process-rubber-band" "process-rubber-band~" "editor" "get-rubber-band?" "get-rubber-band?~" "if" "get-position" "get-position~" "pos" "let" "evt")}
        {Lisp-Entry "on-drag-up" method () ("evt") #f #f 415 11 415 21 ("drag-up" "drag-up~" "outer-pos" "outer-surrogate" "receive" "client" "get-client" "get-client~" "acquire" "acquire~" "end-rubber-band" "end-rubber-band~" "editor" "get-rubber-band?" "get-rubber-band?~" "if" "get-position" "get-position~" "pos" "let" "evt")}
        {Lisp-Entry "on-double-click" method () ("evt") #f #f 423 11 423 26 ("double-click" "double-click~" "get-position" "get-position~" "outer-pos" "outer-surrogate" "receive" "evt")}
        {Lisp-Entry "on-current-drop" method () ("evt") #f #f 428 11 428 26 ("get-drag-drop" "get-drag-drop~" "current-drop" "current-drop~" "get-position" "get-position~" "outer-widget" "outer-pos" "outer-surrogate" "receive" "evt")}
        {Lisp-Entry "on-receive-drop" method () ("evt") #f #f 433 11 433 26 ("get-drag-drop" "get-drag-drop~" "get-sender" "get-sender~" "receive-drop" "receive-drop~" "get-position" "get-position~" "outer-widget" "outer-pos" "outer-surrogate" "receive" "evt")}
        {Lisp-Entry "on-context-menu" method () ("evt") #f #f 438 11 438 26 ("context-menu" "context-menu~" "get-position" "get-position~" "outer-pos" "outer-surrogate" "receive" "evt")}
        {Lisp-Entry "outer-surrogate" method () ("pos") #f #f 443 11 443 26 ("client" "acquire" "acquire~" "get-surrogate" "get-surrogate~" "values" "outer-client" "outer" "let" "pos")}
        {Lisp-Entry "outer-widget" method () ("pos") #f #f 448 11 448 23 ("acquire" "acquire~" "get-surrogate" "get-surrogate~" "values" "inner-widget" "inner-widget~" "widget" "get-client" "get-client~" "outer" "let" "outer-pos" "outer-surrogate" "receive" "pos")}
        {Lisp-Entry "select?" method (protected virtual) () #f #f 455 29 455 36 ()}
        {Lisp-Entry "move-client?" method (protected virtual) () #f #f 459 29 459 41 ()}
        {Lisp-Entry "size-client?" method (protected virtual) () #f #f 463 29 463 41 ()}
        {Lisp-Entry "find-effective-client" method () ("pos" "effective-selection") #f #f 467 11 467 32 ("cons" "else" "not" "cond" "ignore:" "find-drawing" "find-drawing~" "drawing" "list" "ignore" "loop" "editor" "acquire" "acquire~" "position" "let" "item" "return:" "has-parent?" "has-parent?~" "test:" "find" "or" "get-selection" "client" "memq?" "if" "effective-selection" "pos")}
        {Lisp-Entry "mouse-down" method (public virtual) ("pos") #f #f 481 26 481 36 ("acquire-focus" "acquire-focus~" "get-undoer" "start-atomic-undo" "start-atomic-undo~" "atomic-preserved" "start-size" "outer-client" "outer-client~" "get-position" "get-position~" "view" "map" "start-positions" "find-effective-client" "effective-client" "collect-oldest-ancestors" "effective-selection" "to-desktop" "to-desktop~" "start-mouse" "current-part" "tolerance" "0" "1" "member?" "get-client" "get-client~" "neq?" "or" "full?:" "get-size" "get-size~" "find-resize-part" "size-client?" "memq?" "part" "get-selection~" "and" "get-selection" "previous-selection" "let" "acquire-capture" "acquire-capture~" "start-position" "scroll" "state" "set!" "edit-client" "begin" "alt-down?" "if" "editor" "select~" "select?" "when" "select" "get-surrogate" "get-surrogate~" "move-client?" "move-client?~" "client" "lambda" "some?" "selection" "some-movable?" "define" "pos")}
        {Lisp-Entry "mouse-up" method (public virtual) ("pos") #f #f 520 26 520 34 ("pos")}
        {Lisp-Entry "drag-move" method (public virtual) ("pos") #f #f 524 26 524 35 ("layout-view" "layout-view~" "adjust?" "adjust?~" "unless" "get-parent" "get-parent~" "parent" "size-client" "get-size" "get-size~" "get-height" "get-height~" "get-width" "get-width~" "max" "effective-size" "min" "Point" "effective-position" "new-size" "new" "new-position" "16" "Dimension" "start-size" "max-position" "dheight" "dwidth" "resize-client" "start-positions" "effective-selection" "get-surrogate" "get-surrogate~" "move-client" "move-client~" "get-position" "get-position~" "nu+" "actual-delta" "view" "lambda" "for-each" "if" "get-selection" "selection" "get-v" "get-v~" "dv" "get-h" "get-h~" "dh" "from-desktop" "from-desktop~" "start" "let*" "set!" "Drag-Tolerance" "start-mouse" "distance" ">=" "eq?" "not" "current-part" "or" "to-desktop" "to-desktop~" "desktop-pos" "process" "tolerance" "client" "scroll~" "start-position" "nu-" "delta" "let" "scroll" "state" "case" "effective-client" "when" "pos")}
        {Lisp-Entry "drag-up" method (public virtual) ("pos") #f #f 565 26 565 33 ("atomic-preserved" "get-undoer" "end-atomic-undo" "end-atomic-undo~" "if" "part" "process" "tolerance" "current-part" "set!" "release-capture" "release-capture~" "scroll" "state" "case" "relocate-component" "relocate-component~" "0" "Point" "can-relocate-component?" "can-relocate-component?~" "neq?" "selected" "lambda" "for-each" "set-selection" "get-selection" "selection" "and" "view-pos" "effective-client" "list" "ignore:" "find-drawing" "find-drawing~" "view" "acquire" "acquire~" "editor-pos" "let*" "effective-selection" "get-position" "get-position~" "start-positions" "car" "nu=?" "unless" "relocate-selection" "position" "size" "set-property" "set-property~" "minimum-size:" "fit-within" "new-size" "new-position" "receive" "editor" "get-designer" "get-designer~" "designer" "get-parent" "get-parent~" "parent-rect" "get-rect" "get-rect~" "rect" "when" "client" "minimal-size" "minimal-size~" "min-size" "let" "verify-position/size" "define" "pos")}
        {Lisp-Entry "double-click" method (public virtual) ("pos") #f #f 612 26 612 38 ("edit-default-property" "pos")}
        {Lisp-Entry "current-drop" method (public virtual) ("pos" "drag-drop") #f #f 616 26 616 38 ("else" "Value-Row" "is?" "get-row" "get-row~" "row" "Properties-Tree" "selected-component" "selected-component~" "user-data:" "view:" "Drop-Target" "new" "client" "addable-class?" "addable-class?~" "and" "selected-class" "selected-class~" "class" "selected-addable" "selected-addable~" "addable" "Toolbox-Tree" "typecase" "get-source" "get-source~" "get-view" "get-view~" "sender" "let" "drag-drop" "pos")}
        {Lisp-Entry "receive-drop" method (public virtual) ("pos" "sender" "drag-drop") #f #f 632 26 632 38 ("set-showed-property" "set-showed-property~" "editor" "get-showed-property" "get-showed-property~" "eq?" "if" "field-name" "name" "get-property" "get-property~" "property" "let*" "set-selection" "set-selection~" "Properties-Tree" "get-imports" "get-imports~" "imports:" "get-locator" "get-locator~" "require-form" "add-new-form" "Toolbox-Form" "get-unit" "get-unit~" "import:" "get-class" "get-class~" "add-new" "Toolbox-Model" "Toolbox-Tree" "typecase" "get-target" "get-target~" "get-user-data" "get-user-data~" "data" "let" "drag-drop" "sender" "pos")}
        {Lisp-Entry "add-new" method (public) ("model" "pos" "(centered?: centered? #t)" "(name: name #f)" "(properties: properties '())" "(import: import #f)") #f #f 650 18 650 25 ("focus?:" "Properties-Manager" "select-docked" "get-default-property" "get-default-property~" "set-name" "set-name~" "presentation->name" "presentation->name~" "get-children" "get-children~" "request-component-presentation" "presentation" "shift-down?" "get-new-requests-name?" "get-new-requests-name?~" "xor" "not" "and" "self" "origin:" "list" "set-selection" "set-selection~" "when" "layout-view" "layout-view~" "add-child" "add-child~" "position:" "add-view" "add-view~" "visible?:" "client" "parent:" "new" "if" "child" "View" "subclass?" "view?" "editor" "get-designer" "get-designer~" "designer" "get-preferences" "preferences" "let" "lambda" "with-information-update" "import" "import:" "properties" "properties:" "name" "name:" "centered?" "centered?:" "pos" "model")}
        {Lisp-Entry "add-new-form" method (public) ("form" "pos" "(centered?: centered? #t)" "(name: name #f)" "(imports: imports '())") #f #f 677 18 677 30 ("focus?:" "Properties-Manager" "select-docked" "get-default-property" "get-default-property~" "set-name" "set-name~" "presentation->name" "presentation->name~" "get-children" "get-children~" "request-component-presentation" "presentation" "shift-down?" "get-new-requests-name?" "get-new-requests-name?~" "xor" "not" "and" "when" "self" "origin:" "list" "set-selection" "set-selection~" "layout-view" "layout-view~" "class-of" "model" "client" "add-form" "add-form~" "child" "editor" "get-designer" "get-designer~" "designer" "get-preferences" "preferences" "let" "lambda" "with-information-update" "imports" "imports:" "name" "name:" "centered?" "centered?:" "pos" "form")}
        {Lisp-Entry "context-menu" method (public virtual) ("pos") #f #f 696 26 696 38 ("track-popup-menu" "track-popup-menu~" "layout-menu" "layout-menu~" "update-context-menu" "get-context-menu" "menu" "let" "acquire-focus" "acquire-focus~" "client" "editor" "select" "select~" "select?" "when" "pos")}
        {Lisp-Entry "get-context-menu" method (public virtual) () #f #f 708 26 708 42 ("_" "lambda" "editor" "get-selection" "get-selection~" "update-component-menu" "context-menu-class" "new" "menu" "let")}
        {Lisp-Entry "context-menu-class" method (public virtual) () #f #f 715 26 715 44 ("Surrogate-Menu")}
        {Lisp-Entry "update-context-menu" method (public virtual) ("menu") #f #f 719 26 719 45 ("menu")}
        {Lisp-Entry "move-client" method () ("dh" "dv") #f #f 728 11 728 22 ("get-application" "update-focus-actions" "update-focus-actions~" "get-v" "get-v~" "get-h" "get-h~" "+" "Point" "new" "position:" "safe-set-property" "safe-set-property~" "client" "get-position" "get-position~" "pos" "move-client?" "get-designer" "get-designer~" "designer" "editor" "get-selection" "get-selection~" "selection" "let" "0" "/=" "or" "when" "dv" "dh")}
        {Lisp-Entry "size-client" method () ("dwidth" "dheight") #f #f 738 11 738 22 ("get-application" "update-focus-actions" "update-focus-actions~" "update-scrollbars" "update-scrollbars~" "get-reference" "get-reference~" "eq?" "invalidate-region" "invalidate-region~" "size:" "editor" "get-designer" "get-designer~" "safe-set-property" "safe-set-property~" "border-region" "region" "with" "get-height" "get-height~" "get-width" "get-width~" "+" "Dimension" "new" "new-size" "client" "get-size" "get-size~" "size" "let*" "0" "/=" "or" "when" "dheight" "dwidth")}
        {Lisp-Entry "edit-client" method (protected virtual) () #f #f 752 29 752 40 ("client" "editor" "edit-component" "edit-component~")}
        {Lisp-Entry "on-key-press" method () ("evt") #f #f 761 11 761 23 ("get-key" "get-key~" "key-press" "evt")}
        {Lisp-Entry "key-press" method (protected virtual) ("key") #f #f 765 29 765 38 ("key")}
        {Lisp-Entry "on-arrow-press" method () ("evt") #f #f 769 11 769 25 ("down" "1" "right" "up" "0" "-1" "move-selection" "left" "direction:" "get-property" "get-property~" "case" "get-modifiers" "get-modifiers~" "modifiers" "let" "editor" "get-client" "get-client~" "client" "eq?" "unless" "evt")}
        {Lisp-Entry "on-backspace-press" method () ("evt") #f #f 779 11 779 29 ("get-key" "get-key~" "backspace-press" "evt")}
        {Lisp-Entry "backspace-press" method (protected virtual) ("key") #f #f 783 29 783 44 ("editor" "delete-selection" "delete-selection~" "key")}
        {Lisp-Entry "on-return-press" method () ("evt") #f #f 787 11 787 26 ("get-key" "get-key~" "return-press" "evt")}
        {Lisp-Entry "return-press" method (protected virtual) ("key") #f #f 791 29 791 41 ("edit-default-property" "key")}
        {Lisp-Entry "move-selection" method () ("dh" "dv" "modifiers") #f #f 800 11 800 25 ("car" "list" "*" "get-surrogate" "get-surrogate~" "move-client" "move-client~" "view" "for-each" "lambda" "get-undoer" "with-atomic-undo" "with-atomic-undo~" "get-selection" "selection" "quantum" "and" "single?" "control-key?" "control?" "shift-key?" "let*" "1" "10" "if" "shift?" "move-quantum" "define" "modifiers" "dv" "dh")}
        {Lisp-Entry "save-form" method (public) () #f #f 823 18 823 27 ("save" "save~" "when" "get-selection" "selection" "let")}
        {Lisp-Entry "try-out" method (protected virtual) () #f #f 834 29 834 36 ()}
        {Lisp-Entry "editing?" method (protected virtual) () #f #f 843 29 843 37 ()}
        {Lisp-Entry "can-undo?" method (public virtual) () #f #f 852 26 852 35 ("get-undoer" "can-undo?" "can-undo?~")}
        {Lisp-Entry "can-redo?" method (public virtual) () #f #f 856 26 856 35 ("get-undoer" "can-redo?" "can-redo?~")}
        {Lisp-Entry "can-cut?" method (public virtual) () #f #f 860 26 860 34 ("editor" "can-cut-selection?" "can-cut-selection?~")}
        {Lisp-Entry "can-copy?" method (public virtual) () #f #f 864 26 864 35 ("client" "can-copy-component?" "can-copy-component?~")}
        {Lisp-Entry "can-paste?" method (public virtual) () #f #f 868 26 868 36 ("client" "can-paste-component?" "can-paste-component?~")}
        {Lisp-Entry "can-paste-properties?" method (public virtual) () #f #f 872 26 872 47 ("client" "can-paste-properties-component?" "can-paste-properties-component?~")}
        {Lisp-Entry "can-delete?" method (public virtual) () #f #f 876 26 876 37 ("editor" "can-delete-selection?" "can-delete-selection?~")}
        {Lisp-Entry "can-rename?" method (public virtual) () #f #f 880 26 880 37 ("editor" "can-rename-selection?" "can-rename-selection?~")}
        {Lisp-Entry "can-send-to-back?" method (public virtual) () #f #f 884 26 884 43 ("editor" "can-send-selection-to-back?" "can-send-selection-to-back?~")}
        {Lisp-Entry "can-bring-to-front?" method (public virtual) () #f #f 888 26 888 45 ("editor" "can-bring-selection-to-front?" "can-bring-selection-to-front?~")}
        {Lisp-Entry "can-select-all?" method (public virtual) () #f #f 892 26 892 41 ("client" "can-select-all-component?" "can-select-all-component?~")}
        {Lisp-Entry "undo" method (public virtual) () #f #f 896 26 896 30 ("get-application" "update-focus-actions" "update-focus-actions~" "get-undoer" "undo" "undo~")}
        {Lisp-Entry "redo" method (public virtual) () #f #f 901 26 901 30 ("get-application" "update-focus-actions" "update-focus-actions~" "get-undoer" "redo" "redo~")}
        {Lisp-Entry "cut-selection" method (public virtual) () #f #f 906 26 906 39 ("editor" "cut-selection" "cut-selection~")}
        {Lisp-Entry "copy-selection" method (public virtual) () #f #f 910 26 910 40 ("editor" "copy-selection" "copy-selection~")}
        {Lisp-Entry "paste-clipboard" method (public virtual) () #f #f 914 26 914 41 ("set-selection" "nu-" "set-property" "set-property~" "position" "view" "for-each" "points-bounding-box" "rect-position" "top-left" "get-position" "get-position~" "map" "positions" "View" "collect-type" "views" "paste-clipboard" "paste-clipboard~" "components" "let*" "lambda" "get-undoer" "get-undoer~" "with-atomic-undo" "with-atomic-undo~" "car" "parent" "editor" "get-designer" "get-designer~" "designer" "bell" "1" "length" "/=" "if" "get-selection" "selection" "let")}
        {Lisp-Entry "paste-properties" method (public virtual) () #f #f 933 26 933 42 ()}
        {Lisp-Entry "delete-selection" method (public virtual) () #f #f 937 26 937 42 ("editor" "delete-selection" "delete-selection~")}
        {Lisp-Entry "rename-selection" method (public virtual) () #f #f 941 26 941 42 ()}
        {Lisp-Entry "select-all" method (public virtual) ("." "rest") #f #f 945 26 945 36 ("client" "get-children" "get-children~" "View" "collect-type" "set-selection" "rest")}
        {Lisp-Entry "get-undoer" method () () #f #f 949 11 949 21 ("editor" "get-designer" "get-designer~" "get-undoer" "get-undoer~")}
        {Lisp-Entry "select" method (override) ("rank" "focus?") #f #f 958 20 958 26 ("invalidate-view" "invalidate-view~" "invalidate-border" "client" "acquire-focus" "acquire-focus~" "0" "=" "when" "focus?" "rank")}
        {Lisp-Entry "unselect" method (override) () #f #f 966 20 966 28 ("client" "invalidate-view" "invalidate-view~" "invalidate-border")}
        {Lisp-Entry "invalidate-selection" method () () #f #f 971 11 971 31 ("editor" "invalidate-selection" "invalidate-selection~")}
        {Lisp-Entry "edit-default-property" method () () #f #f 980 11 980 32 ("get-tree" "get-tree~" "select-property" "select-property~" "focus?:" "Properties-Manager" "select-docked" "manager" "bell" "not" "if" "client" "get-default-property" "get-default-property~" "default-property" "let")}}
      {Lisp-Entry "Surrogate-Menu" class () ((extends . "Context-Menu")) #f #f 993 7 993 21 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 996 3 996 7 ("properties" "end-close/rename" "add" "open" "new" "before-designer" "select-all" "rename-selected" "delete-selection" "end-layer" "send-to-back" "view-surrogate" "bring-to-front" "end-edition" "paste-properties" "paste" "copy" "view" "Action" "action-handler:" "cut" "end-add-group" "Separator-Item" "<Separator-Item>" "add-menu" "Add-Menu" "<Add-Menu>" "Image-Resource" "icon:" "title:" "add-item" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}}})
"View-Surrogate-Actions"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "surrogate" "View-Surrogate-Actions.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.surrogate.View-Surrogate-Actions" module (protected) () #f #f 37 18 37 64 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.library" "jazz.jml")}
      {Lisp-Entry "View-Surrogate-Actions" class (undocumented) ((extends . "Actions")) #f #f 45 20 45 42 ("Actions")
        {Lisp-Entry "form" form () () #f #f 48 3 48 7 ("on-add" "add" "on-open" "open" "on-new" "new" "on-properties" "properties" ":control" "on-select-all-children" "select-all" "F2" "Shortcut" "shortcut:" "on-rename-selected" "rename-selected" "on-delete-selection" "delete-selection" "on-send-to-back" "send-to-back" "on-bring-to-front" ":focus-guest" "Event-Handler" "action-handler:" "bring-to-front" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}}})
"_descriptor"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "descriptor" "_descriptor.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.descriptor" module () () #f #f 37 8 37 32 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.library" "jazz.jml" "jazz.designer")}
      {Lisp-Entry "Component-Meta-Descriptor" definition (public) () #f #f 50 19 50 44 ("name-unicity?" "name-mandatory?" "name-prohibited?" "image" "title" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "name-unicity?:" "name-mandatory?:" "Image-Resource" "image:" "title:" "Component-Descriptor" "<Component-Descriptor>" "form" "<form>")}
      {Lisp-Entry "Properties-Meta-Descriptor" definition (public) () #f #f 66 19 66 45 ("name-unicity?:" "name-mandatory?:" "Image-Resource" "image:" "title:" "Component-Descriptor" "<Component-Descriptor>" "form" "<form>")}
      {Lisp-Entry "Property-Meta-Descriptor" definition (public) () #f #f 76 19 76 43 ("title" "name:" "Property-Descriptor" "<Property-Descriptor>" ">" "<properties" "<properties~>" "name-unicity?:" "name-mandatory?:" "Image-Resource" "image:" "title:" "Component-Descriptor" "<Component-Descriptor>" "form" "<form>")}
      {Lisp-Entry "Children-Meta-Descriptor" definition (public) () #f #f 88 19 88 43 ("title:" "Component-Descriptor" "<Component-Descriptor>" "form" "<form>")}}})
"_designer"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "_designer.jazz"} 247655053. jazz
    {Lisp-Entry "jazz.designer" module () () #f #f 37 8 37 21 ("2" "handlers" "handler" "1" "properties" "property" "Image-Resource" "0" "infos" "Domain-Category" "new" "info" "set-domain-category" "jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("jazz.designer.autoload")}
      {Lisp-Entry "import" import () () #f #f 41 1 41 7 ("jazz.system" "jazz.library" "jazz.graphic" "jazz.designer.autoload")}
      {Lisp-Entry "Focused-Background" definition (public) () #f #f 52 19 52 37 ("0.15" "alpha:" "Dark-Purple" "Color")}
      {Lisp-Entry "Unfocused-Background" definition (public) () #f #f 55 19 55 39 ("0.15" "alpha:" "Dark" "Color")}
      {Lisp-Entry "Selected-Colors" definition (public) () #f #f 59 19 59 34 ("Blue" "239" "blue:" "11" "green:" "227" "red:" "Red" "Color")}
      {Lisp-Entry "Selected-Inner-Colors" definition (public) () #f #f 62 19 62 40 ("134" "133" "254" "blue:" "146" "green:" "248" "red:" "Light-Red" "Color")}
      {Lisp-Entry "Unselected-Owned-Color" definition (public) () #f #f 65 19 65 41 ("43" "blue:" "175" "green:" "24" "red:" "Color")}
      {Lisp-Entry "Unselected-Owned-Inner-Color" definition (public) () #f #f 68 19 68 47 ("203" "blue:" "237" "green:" "189" "red:" "Color")}
      {Lisp-Entry "Unselected-Modify-Color" definition (public) () #f #f 71 19 71 42 ("213" "blue:" "194" "green:" "1" "red:" "Color")}
      {Lisp-Entry "Unselected-Modify-Inner-Color" definition (public) () #f #f 74 19 74 48 ("231" "blue:" "225" "green:" "160" "red:" "Color")}
      {Lisp-Entry "Unselected-Color" definition (public) () #f #f 77 19 77 35 ("Medium-Gray" "Color")}
      {Lisp-Entry "Unselected-Inner-Color" definition (public) () #f #f 80 19 80 41 ("Gray" "Color")}
      {Lisp-Entry "selected-color" definition (public) ("rank") #f #f 84 20 84 34 ("1" "length" "-" "min" "element" "Selected-Colors" "colors" "let" "Unselected-Color" "not" "if" "rank")}
      {Lisp-Entry "set-selected-color" definition (public) ("rank" "color") #f #f 91 20 91 38 ("1" "length" "-" "min" "set-element!" "Selected-Colors" "colors" "let" "Unselected-Color" "set!" "not" "if" "color" "rank")}
      {Lisp-Entry "selected-inner-color" definition (public) ("rank") #f #f 98 20 98 40 ("1" "length" "-" "min" "element" "Selected-Inner-Colors" "colors" "let" "Unselected-Inner-Color" "not" "if" "rank")}
      {Lisp-Entry "set-selected-inner-color" definition (public) ("rank" "color") #f #f 105 20 105 44 ("1" "length" "-" "min" "set-element!" "Selected-Inner-Colors" "colors" "let" "Unselected-Inner-Color" "set!" "not" "if" "color" "rank")}
      {Lisp-Entry "unselected-owned-color" definition (public) () #f #f 112 20 112 42 ("Unselected-Owned-Color")}
      {Lisp-Entry "set-unselected-owned-color" definition (public) ("color") #f #f 115 20 115 46 ("Unselected-Owned-Color" "set!" "color")}
      {Lisp-Entry "unselected-owned-inner-color" definition (public) () #f #f 119 20 119 48 ("Unselected-Owned-Inner-Color")}
      {Lisp-Entry "set-unselected-owned-inner-color" definition (public) ("color") #f #f 122 20 122 52 ("Unselected-Owned-Inner-Color" "set!" "color")}
      {Lisp-Entry "unselected-modify-color" definition (public) () #f #f 126 20 126 43 ("Unselected-Modify-Color")}
      {Lisp-Entry "set-unselected-modify-color" definition (public) ("color") #f #f 129 20 129 47 ("Unselected-Modify-Color" "set!" "color")}
      {Lisp-Entry "unselected-modify-inner-color" definition (public) () #f #f 133 20 133 49 ("Unselected-Modify-Inner-Color")}
      {Lisp-Entry "set-unselected-modify-inner-color" definition (public) ("color") #f #f 136 20 136 53 ("Unselected-Modify-Inner-Color" "set!" "color")}
      {Lisp-Entry "domain-categories" definition () () #f #f 145 12 145 29 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-domain-category" definition (public) ("name") #f #f 149 20 149 39 ("domain-categories" "table-ref" "name")}
      {Lisp-Entry "set-domain-category" definition (public) ("name" "category") #f #f 152 20 152 39 ("domain-categories" "table-set!" "category" "name")}
      {Lisp-Entry "design-locked?" definition (public) () #f #f 166 19 166 33 ("make-parameter")}
      {Lisp-Entry "with-design-locked" definition (public) ("component" "thunk") #f #f 170 20 170 38 ("all" "fire-refresh" "design-locked?" "parameterize" "thunk" "component")}
      {Lisp-Entry "fire-name-change" definition (public) ("component" "name" "old-name" "undoable?") #f #f 176 20 176 36 ("get-designers" "get-designers~" "process-name-change" "process-name-change~" "designer" "lambda" "for-each" "design-locked?" "unless" "undoable?" "old-name" "name" "component")}
      {Lisp-Entry "fire-presentation-change" definition (public) ("component" "presentation" "old-presentation" "undoable?") #f #f 183 20 183 44 ("get-designers" "get-designers~" "process-presentation-change" "process-presentation-change~" "designer" "lambda" "for-each" "design-locked?" "unless" "undoable?" "old-presentation" "presentation" "component")}
      {Lisp-Entry "fire-property-change" definition (public) ("branch" "component" "property" "value" "undoable?") #f #f 190 20 190 40 ("get-designers" "get-designers~" "process-property-change" "process-property-change~" "designer" "lambda" "for-each" "design-locked?" "unless" "undoable?" "value" "property" "component" "branch")}
      {Lisp-Entry "fire-child-add" definition (public) ("child" "parent" "descendant?") #f #f 197 20 197 34 ("get-designers" "get-designers~" "process-child-add" "process-child-add~" "designer" "lambda" "for-each" "design-locked?" "unless" "descendant?" "parent" "child")}
      {Lisp-Entry "fire-child-remove" definition (public) ("child" "parent") #f #f 204 20 204 37 ("get-designers" "get-designers~" "process-child-remove" "process-child-remove~" "designer" "lambda" "for-each" "design-locked?" "unless" "parent" "child")}
      {Lisp-Entry "fire-child-relocate" definition (public) ("child" "parent" "destination") #f #f 211 20 211 39 ("get-designers" "get-designers~" "process-child-relocate" "process-child-relocate~" "designer" "lambda" "for-each" "design-locked?" "unless" "destination" "parent" "child")}
      {Lisp-Entry "fire-send-before" definition (public) ("child" "parent" "target") #f #f 218 20 218 36 ("get-designers" "get-designers~" "process-send-before" "process-send-before~" "designer" "lambda" "for-each" "design-locked?" "unless" "target" "parent" "child")}
      {Lisp-Entry "fire-refresh" definition (public) ("component" "what") #f #f 225 20 225 32 ("get-designers" "get-designers~" "process-refresh" "process-refresh~" "designer" "lambda" "for-each" "what" "component")}
      {Lisp-Entry "*editor-suites*" definition () () #f #f 236 12 236 27 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-editor-suite" definition (public) ("suite") #f #f 240 20 240 41 ("get-name" "get-name~" "*editor-suites*" "table-set!" "suite")}
      {Lisp-Entry "find-editor-suite" definition (public) ("name") #f #f 244 20 244 37 ("*editor-suites*" "table-ref" "name")}
      {Lisp-Entry "require-editor-suite" definition (public) ("name") #f #f 247 20 247 40 ("error" "find-editor-suite" "or" "name")}
      {Lisp-Entry "*default-editor-suite*" definition () () #f #f 252 12 252 34 ()}
      {Lisp-Entry "get-default-editor-suite" definition (public) () #f #f 256 20 256 44 ("*default-editor-suite*")}
      {Lisp-Entry "set-default-editor-suite" definition (public) ("suite") #f #f 259 20 259 44 ("*default-editor-suite*" "set!" "suite")}
      {Lisp-Entry "designer-source-workspace" definition (public) () #f #f 268 20 268 45 ("shift-down?" "xor" "if" "designer" "get-preferences" "get-source-in-designer?" "get-source-in-designer?~" "source-in-designer?" "let")}}})
"_menu"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "menu" "_menu.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.designer.menu" module () () #f #f 37 8 37 26 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui" "jazz.locale" "jazz.library" "jazz.designer")}
      {Lisp-Entry "update-component-menu" definition (package) ("menu" "components" "reference-categories" "add") #f #f 46 21 46 42 ("layout-menu" "layout-menu~" "cleanup-separators" "cleanup-separators~" "add-component-menu" "add-component-menu~" "properties" "el" "rename-selected" "delete-selection" "not" "Toolbox-Addable" "end-add-group" "set-before" "set-before~" "set-parent" "set-parent~" ":control" "Shortcut" "set-shortcut" "set-shortcut~" "get-title" "get-title~" "set-title" "set-title~" "get-icon" "get-icon~" "set-icon" "set-icon~" "unique" "when" "set!" "set-visible?" "set-visible?~" "begin" "null?" "get-children" "get-children~" "collect-type" "children" "=" "if" "add-item" "locate-component" "locate-component~" "empty-add?" "can-view-properties?" "can-view-properties?~" "Component" "is?" "can-properties?" "can-add?" "can-open?" "can-new?" "set-default-traits" "can-set-default-traits?" "rename" "components-tree" "can-rename?" "delete" "can-delete?" "paste-properties" "can-paste-properties?" "paste" "can-paste?" "copy" "can-copy?" "cut" "view" "Action" "get-action-enabled?" "can-cut?" "1" ">=" "component" "length" "count" "let*" "neq?" "user" "eq?" "open" "locate" "locate~" "set-default?" "set-default?~" "Toolbox" "find-ascendant" "find-ascendant~" "get-kind" "get-kind~" "kind" "addable" "setup-addable" "cdr" "Separator-Item" "category" "car" "for-each" "with-update-locked" "with-update-locked~" "not-null?" "and" "evt" "lambda" "execute:" "Event-Handler" "action-handler:" "title:" "icon:" "parent:" "Label-Item" "new" "get-class-presentation" "get-class-presentation~" "localize" "format" "title" "get-class-image" "get-class-image~" "icon" "resolve-runtime-reference" "class" "let" "reference" "add-label" "add-menu" "add-components" "define" "add" "reference-categories" "components" "menu")}}})
"autoload"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "autoload.jazz"} 247283256. jazz
    {Lisp-Entry "jazz.designer.autoload" module (protected) () #f #f 37 18 37 40 ("jazz")
      {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("Toolbox-Tree" "jazz.designer.toolbox.Toolbox-Tree" "Toolbox-Traits-Module" "jazz.designer.toolbox.Toolbox-Traits-Module" "Toolbox-Trait-Descriptor" "Toolbox-Trait" "jazz.designer.toolbox.Toolbox-Trait" "Toolbox-Preferences" "jazz.designer.toolbox.Toolbox-Preferences" "Toolbox-Objects-Module" "jazz.designer.toolbox.Toolbox-Objects-Module" "Toolbox-Module-Descriptor" "Toolbox-Module" "jazz.designer.toolbox.Toolbox-Module" "Toolbox-Model-Descriptor" "Toolbox-Model" "jazz.designer.toolbox.Toolbox-Model" "Dialog-Toolbox-Manager" "Toolbox-Manager" "jazz.designer.toolbox.Toolbox-Manager" "Toolbox-Group-Descriptor" "Toolbox-Group" "jazz.designer.toolbox.Toolbox-Group" "Toolbox-Form-Descriptor" "Toolbox-Form" "jazz.designer.toolbox.Toolbox-Form" "Dialog-Toolbox-Tree" "Dialog-Toolbox-Editor" "Toolbox-Editor" "jazz.designer.toolbox.Toolbox-Editor" "Toolbox-Addable-Descriptor" "Toolbox-Addable" "jazz.designer.toolbox.Toolbox-Addable" "Toolbox" "jazz.designer.toolbox.Toolbox" "View-Surrogate-Actions" "jazz.designer.surrogate.View-Surrogate-Actions" "View-Surrogate" "jazz.designer.surrogate.View-Surrogate" "Text-View-Surrogate" "jazz.designer.surrogate.Text-View-Surrogate" "Tab-View-Surrogate" "jazz.designer.surrogate.Tab-View-Surrogate" "Surrogate-Handler" "jazz.designer.surrogate.Surrogate-Handler" "Component-Surrogate" "jazz.designer.surrogate.Component-Surrogate" "Value-Row" "jazz.designer.row.Value-Row" "String-Row" "jazz.designer.row.String-Row" "Reference-Row" "jazz.designer.row.Reference-Row" "Periods-Row" "jazz.designer.row.Periods-Row" "Period-Row" "jazz.designer.row.Period-Row" "Pathname-Row" "jazz.designer.row.Pathname-Row" "Password-Row" "jazz.designer.row.Password-Row" "Memo-Row" "jazz.designer.row.Memo-Row" "Matches-Row" "jazz.designer.row.Matches-Row" "Info-Row" "jazz.designer.row.Info-Row" "Handler-Row" "jazz.designer.row.Handler-Row" "Foreign-Row" "jazz.designer.row.Foreign-Row" "Font-Row" "jazz.designer.row.Font-Row" "File-Row" "jazz.designer.row.File-Row" "Enumeration-Row" "jazz.designer.row.Enumeration-Row" "Editor-Row" "jazz.designer.row.Editor-Row" "Domain-Row" "jazz.designer.row.Domain-Row" "Directory-Row" "jazz.designer.row.Directory-Row" "Directory-Group-Row" "jazz.designer.row.Directory-Group-Row" "Details-Row" "jazz.designer.row.Details-Row" "Composite-Text-Actions" "jazz.designer.row.Composite-Text-Actions" "Composite-Row" "jazz.designer.row.Composite-Row" "Combo-Row-Editor" "jazz.designer.row.Combo-Row-Editor" "Combo-Row" "jazz.designer.row.Combo-Row" "Color-Row" "jazz.designer.row.Color-Row" "Classpath-Row" "jazz.designer.row.Classpath-Row" "Property-Violation" "jazz.designer.property.Property-Violation" "Property-View" "jazz.designer.property.Property-View" "Property-Manager" "jazz.designer.property.Property-Manager" "Property-Editor" "jazz.designer.property.Property-Editor" "Designer-Preferences" "jazz.designer.preference.Designer-Preferences" "Property-Moniker" "jazz.designer.moniker.Property-Moniker" "Component-Menu" "jazz.designer.menu.Component-Menu" "Add-Menu" "jazz.designer.menu.Add-Menu" "Style-Editor" "jazz.designer.manager.Style-Editor" "Menu-Editor" "jazz.designer.manager.Menu-Editor" "Manager-View" "jazz.designer.manager.Manager-View" "Manager-Actions" "jazz.designer.manager.Manager-Actions" "Designer-Manager" "jazz.designer.manager.Designer-Manager" "Alignment-Editor" "jazz.designer.manager.Alignment-Editor" "Editor-Event" "jazz.designer.event.Editor-Event" "Designer-Event" "jazz.designer.event.Designer-Event" "Value-Entry" "jazz.designer.entry.Value-Entry" "Text-Entry" "jazz.designer.entry.Text-Entry" "String-Entry" "jazz.designer.entry.String-Entry" "Property-Entry" "jazz.designer.entry.Property-Entry" "Presentation-Entry" "jazz.designer.entry.Presentation-Entry" "Pathname-Entry" "jazz.designer.entry.Pathname-Entry" "Name-Entry" "jazz.designer.entry.Name-Entry" "Handler-Entry" "jazz.designer.entry.Handler-Entry" "Foreign-List-Entry" "jazz.designer.entry.Foreign-List-Entry" "Foreign-Entry" "jazz.designer.entry.Foreign-Entry" "Enumeration-List-Entry" "jazz.designer.entry.Enumeration-List-Entry" "Enumeration-Entry" "jazz.designer.entry.Enumeration-Entry" "Editor-Suite" "jazz.designer.entry.Editor-Suite" "Editor-Entry" "jazz.designer.entry.Editor-Entry" "Color-Entry" "jazz.designer.entry.Color-Entry" "Entry-Check-Box" "Boolean-Entry" "jazz.designer.entry.Boolean-Entry" "Color-Editor" "jazz.designer.editors.Color-Editor" "View-Editor-Actions" "jazz.designer.editor.View-Editor-Actions" "View-Workbench" "View-Editor" "jazz.designer.editor.View-Editor" "Value-Text-View" "jazz.designer.editor.Value-Text-View" "Traits-Dialog" "jazz.designer.editor.Traits-Dialog" "Search-Tree" "jazz.designer.editor.Search-Tree" "Row-Text-View" "jazz.designer.editor.Row-Text-View" "Row-Formatted-Text-View" "jazz.designer.editor.Row-Formatted-Text-View" "Index-Tree" "jazz.designer.editor.Index-Tree" "Component-Controller-Actions" "Component-Provider-Selection-Data" "Component-Provider-Data" "Component-Provider" "Component-Controller" "Grid-Component-Editor" "Grid-Tree-Editor" "jazz.designer.editor.grid" "Details-Tree" "jazz.designer.editor.Details-Tree" "Descendants-Tree" "jazz.designer.editor.Descendants-Tree" "Descendants-Manager-Tree" "jazz.designer.editor.Descendants-Manager-Tree" "Descendants-Manager" "jazz.designer.editor.Descendants-Manager" "Descendants-Editor" "jazz.designer.editor.Descendants-Editor" "Containment-View" "jazz.designer.editor.Containment-View" "Containment-Editor" "jazz.designer.editor.Containment-Editor" "Components-Viewer-Actions" "jazz.designer.editor.Components-Viewer-Actions" "Components-Viewer" "jazz.designer.editor.Components-Viewer" "Components-Tree-Actions" "jazz.designer.editor.Components-Tree-Actions" "Components-Tree" "jazz.designer.editor.Components-Tree" "Component-Editor-Controller" "jazz.designer.editor.Component-Editor-Controller" "Component-Editor" "jazz.designer.editor.Component-Editor" "Children-Tree" "jazz.designer.editor.Children-Tree" "Value-Domain" "jazz.designer.domain.Value-Domain" "Time-Domain" "jazz.designer.domain.Time-Domain" "Text-Domain" "jazz.designer.domain.Text-Domain" "Style-Domain" "jazz.designer.domain.Style-Domain" "String-Domain" "jazz.designer.domain.String-Domain" "Rect-Domain" "jazz.designer.domain.Rect-Domain" "Range-Domain" "jazz.designer.domain.Range-Domain" "Presentation-Domain" "jazz.designer.domain.Presentation-Domain" "Point-Domain" "jazz.designer.domain.Point-Domain" "Period-Domain" "jazz.designer.domain.Period-Domain" "Password-Domain" "jazz.designer.domain.Password-Domain" "Number-Domain" "jazz.designer.domain.Number-Domain" "Name-Domain" "jazz.designer.domain.Name-Domain" "List-Domain" "jazz.designer.domain.List-Domain" "Integer-Domain" "jazz.designer.domain.Integer-Domain" "Info-Domain" "jazz.designer.domain.Info-Domain" "Handler-Domain" "jazz.designer.domain.Handler-Domain" "Foreign-Domain" "jazz.designer.domain.Foreign-Domain" "Font-Domain" "jazz.designer.domain.Font-Domain" "File-Domain" "jazz.designer.domain.File-Domain" "Enumeration-Domain" "jazz.designer.domain.Enumeration-Domain" "Domain-Category" "jazz.designer.domain.Domain-Category" "Domain" "jazz.designer.domain.Domain" "Directory-Group-Domain" "jazz.designer.domain.Directory-Group-Domain" "Directory-Domain" "jazz.designer.domain.Directory-Domain" "Dimension-Domain" "jazz.designer.domain.Dimension-Domain" "Color-Domain" "jazz.designer.domain.Color-Domain" "Cell-Domain" "jazz.designer.domain.Cell-Domain" "Boolean-Domain" "jazz.designer.domain.Boolean-Domain" "Details-Card" "jazz.designer.details.Details-Card" "Dispatch-Designer" "jazz.designer.designer.Dispatch-Designer" "Designer-Error" "jazz.designer.designer.Designer-Error" "Designer" "jazz.designer.designer.Designer" "Property-Descriptor" "jazz.designer.descriptor.Property-Descriptor" "Properties-Descriptor" "jazz.designer.descriptor.Properties-Descriptor" "Component-Descriptor" "jazz.designer.descriptor.Component-Descriptor" "Children-Descriptor" "jazz.designer.descriptor.Children-Descriptor" "Child-Descriptor" "jazz.designer.descriptor.Child-Descriptor" "Component-Parcel" "jazz.designer.clipboard.Component-Parcel" "Foreign-List-Chooser" "jazz.designer.choosers.Foreign-List-Chooser" "Save-Chooser" "jazz.designer.choosers.Save-Chooser" "Domain-Chooser" "jazz.designer.choosers.Domain-Chooser" "Details-Chooser" "jazz.designer.choosers.Details-Chooser" "Column-Detail" "jazz.designer.choosers.Column-Detail" "Properties-Tree" "jazz.designer.card.Properties-Tree" "Properties-Manager" "jazz.designer.card.Properties-Manager" "Properties-Containment" "jazz.designer.card.Properties-Containment" "Properties-Card" "jazz.designer.card.Properties-Card" "Group-Card" "jazz.designer.card.Group-Card" "Custom-Card" "jazz.designer.card.Custom-Card" "Card" "jazz.designer.card.Card" "Traits-Viewer" "jazz.designer.trait.Traits-Viewer" "Traits-Tree-Actions" "jazz.designer.trait.Traits-Tree-Actions" "Traits-Tree" "jazz.designer.trait.Traits-Tree" "Traits-Editor" "jazz.designer.trait.Traits-Editor" "Book-View" "jazz.designer.book.Book-View" "Book-Section" "jazz.designer.book.Book-Section" "Book-Controller" "autoload" "jazz.designer.book.Book-Controller")}}})
"grid"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "trait" "grid.jazz"} 246587393. jazz
    {Lisp-Entry "jazz.designer.trait.grid" module () () #f #f 0 8 0 32 ("jazz")
      {Lisp-Entry "import" import () () #f #f 3 1 3 7 ("jazz.ui.tree.grid" "jazz.ui" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.designer.editor.grid")}
      {Lisp-Entry "Trait-Row-Data" class () ((extends . "Component")) #f #f 11 7 11 21 ("Component")
        {Lisp-Entry "trait" property () ((initialize . "#f") (accessors . "generate")) #f #f 14 12 14 17 ()}
        {Lisp-Entry "get-trait" accessor () () #f #f 14 42 14 50 ()}
        {Lisp-Entry "set-trait" accessor () () #f #f 14 42 14 50 ()}}
      {Lisp-Entry "Traits-Provider-Data" class () ((extends . "Provider-Data")) #f #f 17 7 17 27 ("Provider-Data")
        {Lisp-Entry "path" property () ((initialize . "'()") (accessors . "generate")) #f #f 20 12 20 16 ()}
        {Lisp-Entry "get-path" accessor () () #f #f 20 42 20 50 ()}
        {Lisp-Entry "set-path" accessor () () #f #f 20 42 20 50 ()}
        {Lisp-Entry "prop" property () ((initialize . "#f") (accessors . "generate")) #f #f 21 12 21 16 ()}
        {Lisp-Entry "get-prop" accessor () () #f #f 21 41 21 49 ()}
        {Lisp-Entry "set-prop" accessor () () #f #f 21 41 21 49 ()}}
      {Lisp-Entry "Traits-Controller" class () ((extends . "Component") (implements . "Grid-Controller")) #f #f 24 7 24 24 ("Grid-Controller" "Component")
        {Lisp-Entry "client" slot () ((accessors . "generate")) #f #f 26 8 26 14 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 26 25 26 33 ()}
        {Lisp-Entry "set-client" accessor () () #f #f 26 25 26 33 ()}
        {Lisp-Entry "traits" slot () ((accessors . "generate")) #f #f 27 8 27 14 ()}
        {Lisp-Entry "get-traits" accessor () () #f #f 27 25 27 33 ()}
        {Lisp-Entry "set-traits" accessor () () #f #f 27 25 27 33 ()}
        {Lisp-Entry "get-focus-actions" method (override) () #f #f 29 20 29 37 ()}
        {Lisp-Entry "focus-update-actions" method (override) () #f #f 31 20 31 40 ()}
        {Lisp-Entry "selection-cell?" method (override) ("row" "column") #f #f 32 20 32 35 ("column" "row")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 34 20 34 36 ()}
        {Lisp-Entry "on-selection-change" method (override) ("evt") #f #f 36 20 36 39 ("evt")}
        {Lisp-Entry "get-tab-stops" method (override) () #f #f 37 20 37 33 ()}
        {Lisp-Entry "copy-selection" method (override) () #f #f 39 20 39 34 ()}
        {Lisp-Entry "cut-selection" method (override) () #f #f 40 20 40 33 ()}
        {Lisp-Entry "delete-selection" method (override) () #f #f 41 20 41 36 ()}
        {Lisp-Entry "paste-clipboard" method (override) () #f #f 42 20 42 35 ()}
        {Lisp-Entry "can-copy?" method (override) () #f #f 43 20 43 29 ()}
        {Lisp-Entry "can-cut?" method (override) () #f #f 44 20 44 28 ()}
        {Lisp-Entry "can-delete?" method (override) () #f #f 45 20 45 31 ()}
        {Lisp-Entry "can-paste?" method (override) () #f #f 46 20 46 30 ()}
        {Lisp-Entry "get-draggable?" method (override) () #f #f 47 20 47 34 ()}
        {Lisp-Entry "get-frame-color" method (override) () #f #f 48 20 48 35 ()}
        {Lisp-Entry "active-background" method (override) ("row-data" "column-data") #f #f 50 20 50 37 ("Tree-Background" "Color" "column-data" "row-data")}
        {Lisp-Entry "inactive-background" method (override) ("row-data" "column-data") #f #f 52 20 52 39 ("Gray" "Color" "column-data" "row-data")}
        {Lisp-Entry "cell-editable?" method (override) ("row" "column") #f #f 55 20 55 34 ("column" "row")}
        {Lisp-Entry "merge?" method (override) ("master-row-data" "row-data" "column-data") #f #f 56 20 56 26 ("column-data" "row-data" "master-row-data")}
        {Lisp-Entry "client-rows-datas" method (override) () #f #f 58 20 58 37 ("traits" "resolve-trait" "trait:" "Trait-Row-Data" "new" "trait" "lambda" "map")}}
      {Lisp-Entry "Traits-Provider" class () ((extends . "Component") (implements . "Data-Provider")) #f #f 64 7 64 22 ("Data-Provider" "Component")
        {Lisp-Entry "client" slot () ((accessors . "generate")) #f #f 67 8 67 14 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 67 25 67 33 ()}
        {Lisp-Entry "set-client" accessor () () #f #f 67 25 67 33 ()}
        {Lisp-Entry "get-grid" method () () #f #f 70 11 70 19 ("get-parent")}
        {Lisp-Entry "read-only?" method (override) ("row-data" "column-data") #f #f 74 20 74 30 ("column-data" "row-data")}
        {Lisp-Entry "get-violation" method (override) ("row-data" "column-data") #f #f 78 20 78 33 ("column-data" "row-data")}
        {Lisp-Entry "get-domain" method (override) ("row-data" "column-data") #f #f 82 20 82 30 ("property-domain" "property-domain~" "get-prop" "get-prop~" "class-of" "category-field" "and" "field" "get-path" "get-path~" "client" "find-path" "find-path~" "component" "let*" "column-data" "row-data")}
        {Lisp-Entry "get-data" method (override) ("row-data" "column-data" "fail" "succeed") #f #f 88 20 88 28 ("eq?" "get-prop" "get-prop~" "get-property" "get-property~" "if" "value" "list" "not-found" "get-path" "get-path~" "get-trait" "get-trait~" "get-client-form" "get-client-form~" "find-path" "find-path~" "form" "let" "succeed" "fail" "column-data" "row-data")}}
      {Lisp-Entry "Grid-Traits-Editor" class () ((extends . "Grid-Tree-Widget")) #f #f 97 7 97 25 ("Grid-Tree-Widget")
        {Lisp-Entry "client" slot () ((initialize . "#f")) #f #f 100 8 100 14 ()}
        {Lisp-Entry "traits" slot () ((initialize . "#f")) #f #f 101 8 101 14 ()}
        {Lisp-Entry "form" form () () #f #f 104 3 104 7 ("controller" "Traits-Controller" "<Traits-Controller>" "provider" "name:" "Traits-Provider" "<Traits-Provider>" ">" "<grid" "<grid~>" "install" "<install>")}
        {Lisp-Entry "get-grid" method () () #f #f 110 11 110 19 ("grid" "locate")}
        {Lisp-Entry "get-provider" method () () #f #f 114 11 114 23 ("provider" "locate")}
        {Lisp-Entry "get-controller" method () () #f #f 118 11 118 25 ("controller" "locate")}
        {Lisp-Entry "Default-Property-Width" definition () () #f #f 122 14 122 36 ("100")}
        {Lisp-Entry "setup" method (public) ("client" "traits") #f #f 125 18 125 23 ("set-client" "self" "traits~self" "set!" "traits" "client")}
        {Lisp-Entry "set-client" method (public) ("clt") #f #f 130 18 130 28 ("client-update" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "client-update" method () () #f #f 136 11 136 24 ("update" "update-provider" "update-controller" "get-grid" "end-edition" "end-edition~")}
        {Lisp-Entry "update-provider" method () () #f #f 143 11 143 26 ("client" "get-provider" "set-client" "set-client~")}
        {Lisp-Entry "update-controller" method () () #f #f 147 11 147 28 ("traits" "set-traits" "set-traits~" "client" "get-controller" "set-client" "set-client~")}
        {Lisp-Entry "update" method () () #f #f 152 11 152 17 ("populate" "populate~" "setup-columns" "lambda" "get-grid" "with-update-locked" "with-update-locked~")}
        {Lisp-Entry "add-column" method () ("path" "prop" "presentation") #f #f 158 11 158 21 ("prop:" "path:" "provider-data" "name:" "Traits-Provider-Data" "new" "add-child" "add-child~" "Default-Property-Width" "width:" "title:" "Grid-Tree-Column" "class:" "get-grid" "add-column" "add-column~" "column" "let" "presentation" "prop" "path")}
        {Lisp-Entry "setup-child-columns" method () ("parent" "child-descriptor") #f #f 163 11 163 30 ("classes-properties/presentations" "add-column" "presentation" "name" "bind" "x" "lambda" "for-each" "class-of" "class" "find-path" "find-path~" "subcomponent" "get-target" "get-target~" "list" "path" "let*" "child-descriptor" "parent")}
        {Lisp-Entry "setup-client-columns" method () () #f #f 173 11 173 31 ("setup-child-columns" "desc" "cadr" "car" "map" "add-column" "presentation" "name" "lambda" "for-each" "children" "get-descriptor" "find-child" "find-child~" "get-children" "get-children~" "child-descriptors" "list" "classes-properties/presentations" "client-properties/presentation" "client" "class-of" "client-class" "let")}
        {Lisp-Entry "setup-columns" method () () #f #f 181 11 181 24 ("setup-client-columns" "client" "when" "get-grid" "remove-columns" "remove-columns~")}}}}
  {Lisp-File-Entry {File :context "src" "jazz" "designer" "editor" "grid.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.designer.editor.grid" module (protected) () #f #f 0 18 0 43 ("jazz")
      {Lisp-Entry "import" import () () #f #f 3 1 3 7 ("jazz.ui.tree.grid" "jazz.ui" "jazz.ui.clipboard" "jazz.system" "jazz.jml" "jazz.library.component" "jazz.library" "jazz.graphic" "jazz.designer.view" "jazz.designer")}
      {Lisp-Entry "classes-common-ancestor" definition () ("." "classes") #f #f 15 13 15 36 ("class-ascendant" "map" "classes-common-ancestor" "apply" "or" "subclass?" "subclass" "every?" "class" "lambda" "find-if" "ancestor" "let" "classes")}
      {Lisp-Entry "get-class-categorized-properties" definition () ("class") #f #f 24 13 24 45 ("either" "get-categorized" "get-categorized~" "categorized" "get-properties-descriptor" "properties-descriptor" "let*" "class")}
      {Lisp-Entry "class-properties" definition () ("class") #f #f 30 13 30 29 ("get-properties" "get-properties~" "collect-if" "get-domain" "get-domain~" "get-property-descriptor" "property-descriptor" "memq" "if" "properties" "eq?" "and" "get-category" "get-category~" "get-name" "get-name~" "category" "let" "property" "lambda" "keep-property?" "get-class-categorized-properties" "categorized" "let*" "class")}
      {Lisp-Entry "present-property-value" definition () ("component" "property") #f #f 43 13 43 35 ("present-property" "present-property~" "read-property" "value" "let" "property" "component")}
      {Lisp-Entry "column-data-component-property" definition () ("row-data" "column-data" "fail" "succeed") #f #f 48 13 48 43 ("if" "Property" "is?" "property" "get-identifier" "get-identifier~" "class-of" "category-field" "and" "field" "get-parent-offset" "get-parent-offset~" "get-hierarchy" "get-hierarchy~" "element" "component" "let*" "succeed" "fail" "column-data" "row-data")}
      {Lisp-Entry "column-component-property" definition () ("row" "column" "fail" "succeed") #f #f 57 13 57 38 ("column-data-component-property" "cd" "rd" "lambda" "call-with-row/column-data" "succeed" "fail" "column" "row")}
      {Lisp-Entry "make-class-cell-domain" definition () ("class-references") #f #f 62 13 62 35 ("resolve-reference" "resolve-reference~" "get-class-presentation" "get-class-presentation~" "map" "zip" "choices:" "Enumeration-Domain" "new" "class-references")}
      {Lisp-Entry "classes-properties/presentations" definition (public) ("classes") #f #f 68 20 68 52 ("string=?" "test:" "second" "key:" "class-properties" "property-presentation" "property-presentation~" "get-name" "get-name~" "list" "property" "map" "class" "lambda" "append-map" "remove-duplicates" "classes")}
      {Lisp-Entry "Component-Row-Data" class () ((extends . "Component")) #f #f 79 7 79 25 ("Component")
        {Lisp-Entry "hierarchy" property () ((initialize . "#f") (accessors . "generate")) #f #f 82 12 82 21 ()}
        {Lisp-Entry "get-hierarchy" accessor () () #f #f 82 46 82 54 ()}
        {Lisp-Entry "set-hierarchy" accessor () () #f #f 82 46 82 54 ()}
        {Lisp-Entry "violations" property () ((initialize . "#f") (accessors . "generate")) #f #f 83 12 83 22 ()}
        {Lisp-Entry "get-violations" accessor () () #f #f 83 47 83 55 ()}
        {Lisp-Entry "set-violations" accessor () () #f #f 83 47 83 55 ()}}
      {Lisp-Entry "Component-Provider-Data" class () ((extends . "Provider-Data")) #f #f 86 7 86 30 ("Provider-Data")
        {Lisp-Entry "read-only?" property () ((initialize . "#f") (accessors . "generate")) #f #f 89 12 89 22 ()}
        {Lisp-Entry "get-read-only?" accessor () () #f #f 89 50 89 58 ()}
        {Lisp-Entry "set-read-only?" accessor () () #f #f 89 50 89 58 ()}
        {Lisp-Entry "identifier" property () ((initialize . "#f") (accessors . "generate")) #f #f 90 12 90 22 ()}
        {Lisp-Entry "get-identifier" accessor () () #f #f 90 50 90 58 ()}
        {Lisp-Entry "set-identifier" accessor () () #f #f 90 50 90 58 ()}
        {Lisp-Entry "parent-offset" property () ((initialize . "#f") (accessors . "generate")) #f #f 91 12 91 25 ()}
        {Lisp-Entry "get-parent-offset" accessor () () #f #f 91 50 91 58 ()}
        {Lisp-Entry "set-parent-offset" accessor () () #f #f 91 50 91 58 ()}
        {Lisp-Entry "class-selection?" method () () #f #f 94 11 94 27 ("class-info" "identifier" "eq?")}}
      {Lisp-Entry "Component-Provider-Selection-Data" class () ((extends . "Component-Provider-Data")) #f #f 98 7 98 40 ("Component-Provider-Data")
        {Lisp-Entry "component-offset" property () ((initialize . "#f") (accessors . "generate")) #f #f 101 12 101 28 ()}
        {Lisp-Entry "get-component-offset" accessor () () #f #f 101 53 101 61 ()}
        {Lisp-Entry "set-component-offset" accessor () () #f #f 101 53 101 61 ()}
        {Lisp-Entry "class-references" property () ((initialize . "'()") (accessors . "generate")) #f #f 102 12 102 28 ()}
        {Lisp-Entry "get-class-references" accessor () () #f #f 102 60 102 68 ()}
        {Lisp-Entry "set-class-references" accessor () () #f #f 102 60 102 68 ()}}
      {Lisp-Entry "Component-Provider" class () ((extends . "Component") (implements . "Data-Provider")) #f #f 105 7 105 25 ("Data-Provider" "Component")
        {Lisp-Entry "designer" slot () ((accessors . "generate")) #f #f 108 8 108 16 ()}
        {Lisp-Entry "get-designer" accessor () () #f #f 108 27 108 35 ()}
        {Lisp-Entry "set-designer" accessor () () #f #f 108 27 108 35 ()}
        {Lisp-Entry "client" slot () ((accessors . "generate")) #f #f 109 8 109 14 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 109 25 109 33 ()}
        {Lisp-Entry "set-client" accessor () () #f #f 109 25 109 33 ()}
        {Lisp-Entry "get-grid" method () () #f #f 112 11 112 19 ("get-parent")}
        {Lisp-Entry "get-selection-columns" method () () #f #f 116 11 116 32 ("get-provider-data" "get-provider-data~" "key:" "get-grid" "get-columns" "get-columns~" "Component-Provider-Selection-Data" "collect-type")}
        {Lisp-Entry "column-data-component-class-references" method () ("row-data" "column-data" "fail" "succeed") #f #f 120 11 120 49 ("get-class-references" "get-class-references~" "get-selection-columns" "get-provider-data" "get-provider-data~" "component-column-data" "if" "get-parent-offset" "get-parent-offset~" "get-hierarchy" "get-hierarchy~" "element" "component" "let" "succeed" "fail" "column-data" "row-data")}
        {Lisp-Entry "get-class-domain" method () ("row-data" "column-data") #f #f 128 11 128 27 ("make-class-cell-domain" "class-references" "component" "lambda" "const" "column-data-component-class-references" "column-data" "row-data")}
        {Lisp-Entry "get-class-reference" method () ("row-data" "column-data" "fail" "succeed") #f #f 135 11 135 30 ("item" "return:" "resolve-reference" "resolve-reference~" "key:" "class-of" "find" "class-references" "component" "lambda" "column-data-component-class-references" "succeed" "fail" "column-data" "row-data")}
        {Lisp-Entry "set-class" method () ("row-data" "column-data" "reference") #f #f 142 11 142 20 ("import:" "name:" "add-child" "add-child~" "designer" "remove-child" "remove-child~" "resolve-runtime-reference" "new" "new-component" "serialize-runtime-reference" "second" "import" "get-name" "get-name~" "name" "get-parent" "get-parent~" "parent" "_" "component" "error" "lambda" "column-data-component-class-references" "get-runtime-reference" "get-runtime-reference~" "runtime-reference" "let" "reference" "column-data" "row-data")}
        {Lisp-Entry "get-data" method (override) ("row-data" "column-data" "fail" "succeed") #f #f 160 20 160 28 ("read-property" "property" "component" "lambda" "column-data-component-property" "else" "get-class-reference" "class-selection?" "class-selection?~" "Component-Provider-Selection-Data" "is?" "cond" "succeed" "fail" "column-data" "row-data")}
        {Lisp-Entry "set-data" method (override) ("row-data" "column-data" "value") #f #f 172 20 172 28 ("designer" "safe-set-property" "safe-set-property~" "property" "component" "error" "lambda" "column-data-component-property" "set-class" "class-selection?" "class-selection?~" "if" "value" "column-data" "row-data")}
        {Lisp-Entry "get-domain" method (override) ("row-data" "column-data") #f #f 181 20 181 30 ("property-domain" "property-domain~" "const" "column-data-component-property" "get-class-domain" "class-selection?" "class-selection?~" "if" "Component-Provider-Selection-Data" "is-not?" "and" "column-data" "row-data")}
        {Lisp-Entry "read-only?" method (override) ("row-data" "column-data") #f #f 188 20 188 30 ("get-reference" "get-reference~" "designer" "get-form" "get-form~" "component-owned?" "not" "_" "component" "args" "lambda" "column-data-component-class-references" "class-selection?" "class-selection?~" "and" "get-read-only?" "get-read-only?~" "or" "column-data" "row-data")}
        {Lisp-Entry "get-violation" method (override) ("row-data" "column-data") #f #f 197 20 197 33 ("get-violations" "get-violations~" "element" "eq?" "test:" "get-provider-data" "get-provider-data~" "key:" "get-grid" "get-columns" "get-columns~" "find" "index" "let" "column-data" "row-data")}
        {Lisp-Entry "set-violation" method (override) ("row-data" "column-data" "violation") #f #f 202 20 202 33 ("get-violations" "get-violations~" "list-set!" "eq?" "test:" "get-provider-data" "get-provider-data~" "key:" "get-grid" "get-columns" "get-columns~" "find" "index" "let" "violation" "column-data" "row-data")}}
      {Lisp-Entry "Component-Controller-Actions" class () ((extends . "Actions")) #f #f 207 7 207 35 ("Actions")
        {Lisp-Entry "form" form () () #f #f 210 3 210 7 ("on-insert-component" "insert" "F2" "Shortcut" "shortcut:" "on-rename-component" "controller" ":focus" "Event-Handler" "action-handler:" "rename" "name:" "Action-Item" "<Action-Item>" "install" "<install>")}}
      {Lisp-Entry "Component-Controller-Menu" class () ((extends . "Context-Menu")) #f #f 216 7 216 32 ("Context-Menu")
        {Lisp-Entry "form" form () () #f #f 219 3 219 7 ("paste" "copy" "cut" "Separator-Item" "<Separator-Item>" "rename" "view" "delete" "component-controller" "Action" "action-handler:" "Image-Resource" "icon:" "title:" "insert" "name:" "Label-Item" "<Label-Item>" "install" "<install>")}}
      {Lisp-Entry "Component-Controller" class () ((extends . "Component") (implements . "Grid-Controller")) #f #f 230 7 230 27 ("Grid-Controller" "Component")
        {Lisp-Entry "designer" slot () ((accessors . "generate")) #f #f 233 8 233 16 ()}
        {Lisp-Entry "get-designer" accessor () () #f #f 233 27 233 35 ()}
        {Lisp-Entry "set-designer" accessor () () #f #f 233 27 233 35 ()}
        {Lisp-Entry "editor" slot () ((accessors . "generate")) #f #f 234 8 234 14 ()}
        {Lisp-Entry "get-editor" accessor () () #f #f 234 25 234 33 ()}
        {Lisp-Entry "set-editor" accessor () () #f #f 234 25 234 33 ()}
        {Lisp-Entry "client" slot () ((accessors . "generate")) #f #f 235 8 235 14 ()}
        {Lisp-Entry "get-client" accessor () () #f #f 235 25 235 33 ()}
        {Lisp-Entry "set-client" accessor () () #f #f 235 25 235 33 ()}
        {Lisp-Entry "drop?" method (override) ("source" "cell") #f #f 243 20 243 25 ("client" "addable-class?" "addable-class?~" "selected-class" "selected-class~" "class" "Toolbox-Tree" "is?" "get-view" "get-view~" "view" "let" "not" "and" "cell" "source")}
        {Lisp-Entry "receive-drop" method (override) ("sender" "pos" "drag-drop") #f #f 251 20 251 32 ("descendant?:" "get-unit" "get-unit~" "import:" "client" "designer" "add-child" "add-child~" "resolve-runtime-reference" "new" "child" "get-reference" "get-reference~" "ref" "selected-component" "selected-component~" "tool" "let*" "drag-drop" "pos" "sender")}
        {Lisp-Entry "get-tab-stops" method (override) () #f #f 258 20 258 33 ("collect-visible-rows" "collect-visible-rows~" "get-columns" "get-columns~" "collect" "append-map" "p" "c" "column-data-component-property" "get-read-only?" "get-read-only?~" "not" "Component-Provider-Selection-Data" "is-not?" "cd" "rd" "lambda" "call-with-row/column-data" "get-single-selection" "get-single-selection~" "cell=?" "and" "or" "row/column->site" "row/column->site~" "site->cell" "site->cell~" "cell" "column" "row" "tab-cell" "define" "get-grid" "grid" "let")}
        {Lisp-Entry "inactive-background" method (override) ("row-data" "column-data") #f #f 277 20 277 39 ("Gray" "else" "get-hierarchy" "get-hierarchy~" "element" "White" "Color" "not" "cond" "get-parent-offset" "get-parent-offset~" "parent-offset" "let" "Component-Provider-Selection-Data" "typecase" "column-data" "row-data")}
        {Lisp-Entry "active-background" method (override) ("row-data" "column-data") #f #f 288 20 288 37 ("Tree-Background" "Color" "column-data" "row-data")}
        {Lisp-Entry "get-frame-color" method (override) () #f #f 292 20 292 35 ()}
        {Lisp-Entry "get-cell-color" method (public) ("row-data" "column-data") #f #f 296 18 296 32 ("Red" "Color" "get-provider" "get-violation" "get-violation~" "and" "column-data" "row-data")}
        {Lisp-Entry "get-editor-color" method (public) ("row-data" "column-data") #f #f 301 18 301 34 ("Black" "Red" "Color" "get-provider" "get-violation" "get-violation~" "if" "column-data" "row-data")}
        {Lisp-Entry "selection-cell?" method (override) ("row" "column") #f #f 307 20 307 35 ("Component-Provider-Selection-Data" "is?" "column-data" "row-data" "lambda" "call-with-row/column-data" "column" "row")}
        {Lisp-Entry "cell-editable?" method (override) ("row" "column") #f #f 313 20 313 34 ("Component-Provider-Selection-Data" "is?" "get-read-only?" "get-read-only?~" "not" "and" "column-data" "row-data" "lambda" "call-with-row/column-data" "column" "row")}
        {Lisp-Entry "get-provider" method () () #f #f 320 11 320 23 ("parent" "get-provider" "get-provider~")}
        {Lisp-Entry "get-grid" method () () #f #f 324 11 324 19 ("parent")}
        {Lisp-Entry "get-focus-actions" method (override) () #f #f 328 20 328 37 ("component-controller" "find-actions")}
        {Lisp-Entry "can-rename?" method (public) () #f #f 332 18 332 29 ("designer" "component-owned-by-reference?" "component-owned-by-reference?~" "get-identifier" "get-identifier~" "not" "get-component-offset" "get-component-offset~" "get-hierarchy" "get-hierarchy~" "element" "component" "Component-Provider-Selection-Data" "is?" "column-data" "car" "row-data" "let" "length" "1" "=" "and" "get-grid" "selected-cells-data" "selected-cells-data~" "columns-data" "rows-data" "receive")}
        {Lisp-Entry "can-insert?" method (public) () #f #f 344 18 344 29 ("get-component-offset" "get-component-offset~" "get-hierarchy" "get-hierarchy~" "element" "get-identifier" "get-identifier~" "not" "or" "Component-Provider-Selection-Data" "is?" "column-data" "car" "row-data" "let" "length" "1" "=" "and" "get-grid" "selected-cells-data" "selected-cells-data~" "columns-data" "rows-data" "receive")}
        {Lisp-Entry "focus-update-actions" method (override) () #f #f 354 20 354 40 ("can-rename?" "rename" "can-insert?" "insert" "component-controller" "Action" "set-action-enabled?")}
        {Lisp-Entry "get-context-menu" method (override) () #f #f 359 20 359 36 ("self" "client:" "Component-Controller-Menu" "new")}
        {Lisp-Entry "selected-components" method () () #f #f 363 11 363 30 ("get-hierarchy" "get-hierarchy~" "element" "map" "remove-false" "get-parent-offset" "get-parent-offset~" "get-component-offset" "get-component-offset~" "car" "get-offset" "let" "Component-Provider-Selection-Data" "is?" "data" "lambda" "every?" "1" "length" ">" "assert" "null?" "if" "get-grid" "selected-cells-data" "selected-cells-data~" "columns-data" "rows-data" "receive")}
        {Lisp-Entry "on-rename-component" method (public) ("evt") #f #f 376 18 376 37 ("designer" "set-presentation-property" "set-presentation-property~" "get-presentation-property" "get-presentation-property~" "initial-value:" "get-brothers" "get-brothers~" "class-of" "request-component-presentation" "presentation" "selected-components" "car" "component" "let*" "evt")}
        {Lisp-Entry "on-insert-component" method (public) ("evt") #f #f 382 18 382 37 ("second" "module-public" "eq?" "and" "serialize-runtime-reference" "serialization" "import:" "name:" "new" "designer" "add-child" "add-child~" "request-component-presentation" "get-identifier" "get-identifier~" "or" "name" "resolve-runtime-reference" "class" "get-children" "get-children~" "brothers" "let*" "client" "get-hierarchy" "get-hierarchy~" "element" "if" "get-parent-offset" "get-parent-offset~" "parent-offset" "parent" "get-class-references" "get-class-references~" "get-runtime-reference" "get-runtime-reference~" "runtime-reference" "column-data" "car" "row-data" "let" "get-grid" "selected-cells-data" "selected-cells-data~" "columns-data" "rows-data" "receive" "evt")}
        {Lisp-Entry "on-selection-change" method (override) ("evt") #f #f 397 20 397 39 ("get-application" "update-focus-actions" "update-focus-actions~" "selected-components" "editor" "set-selection" "set-selection~" "evt")}
        {Lisp-Entry "cut-selection" method (override) () #f #f 402 20 402 33 ("selected-components" "designer" "cut-components" "cut-components~")}
        {Lisp-Entry "copy-selection" method (override) () #f #f 406 20 406 34 ("selected-components" "designer" "copy-components" "copy-components~")}
        {Lisp-Entry "delete-selection" method (override) () #f #f 410 20 410 36 ("selected-components" "designer" "delete-components" "delete-components~")}
        {Lisp-Entry "paste-clipboard" method (override) () #f #f 414 20 414 35 ("get-jazz-parcels" "designer" "paste-parcels" "paste-parcels~" "selected-components" "determine-unique-paster" "parent" "let")}
        {Lisp-Entry "can-copy?" method (override) () #f #f 419 20 419 29 ("selected-components" "can-copy-components?")}
        {Lisp-Entry "can-cut?" method (override) () #f #f 423 20 423 28 ("can-cut-components?" "designer" "component-owned-by-reference?" "~" "every?" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-paste?" method (override) () #f #f 429 20 429 30 ("selected-components" "can-paste-components?")}
        {Lisp-Entry "can-delete?" method (override) () #f #f 433 20 433 31 ("can-delete-components?" "designer" "component-owned-by-reference?" "~" "every?" "and" "selected-components" "components" "let")}
        {Lisp-Entry "get-draggable?" method (override) () #f #f 439 20 439 34 ("can-relocate-component?" "can-relocate-component?~" "selected-components" "can-modify-components?")}
        {Lisp-Entry "child-add" method () ("child" "parent") #f #f 443 11 443 20 ("get-grid" "populate" "populate~" "parent" "child")}
        {Lisp-Entry "child-remove" method () ("child" "parent") #f #f 447 11 447 23 ("get-grid" "populate" "populate~" "parent" "child")}
        {Lisp-Entry "property-change" method () ("component" "property") #f #f 451 11 451 26 ("Cell" "new" "update-cell" "update-cell~" "get-parent-offset" "get-parent-offset~" "element" "get-identifier" "get-identifier~" "get-name" "get-name~" "eq?" "and" "get-provider-data" "get-provider-data~" "column-data" "column-rank" "column" "for-each-column" "for-each-column~" "get-hierarchy" "get-hierarchy~" "memq?" "when" "get-user-data" "get-user-data~" "row-data" "let" "row-rank" "row" "lambda" "get-grid" "for-each-row" "for-each-row~" "property" "component")}
        {Lisp-Entry "name-change" method () ("component" "new-name" "old-name") #f #f 464 11 464 22 ("get-grid" "populate" "populate~" "old-name" "new-name" "component")}
        {Lisp-Entry "merge?" method (override) ("row1-data" "row2-data" "column-data") #f #f 468 20 468 26 ("eq?" "and" "c2" "get-hierarchy" "get-hierarchy~" "element" "c1" "get-parent-offset" "get-parent-offset~" "get-component-offset" "get-component-offset~" "Component-Provider-Selection-Data" "is?" "if" "component-offset" "let" "column-data" "row2-data" "row1-data")}
        {Lisp-Entry "client-rows-datas" method (override) () #f #f 475 20 475 37 ("violations:" "hierarchy:" "Component-Row-Data" "new" "components" "get-grid" "get-columns" "get-columns~" "Component-Provider-Selection-Data" "collect-type" "client" "rows-components-lists" "append-map" "length" "make-list" "class-of" "key:" "get-components" "get-components~" "addable-class?" "addable-class?~" "class" "collect-if" "addable-children" "let" "cdr" "find-child" "find-child~" "get-identifier" "get-identifier~" "identifier" "car" "get-provider-data" "get-provider-data~" "column-data" "let*" "selection-columns" "component" "make-rows-components-lists" "cons" "row-data" "lambda" "map" "list" "null?" "if" "rest" "child" "make-child-lists" "define")}}
      {Lisp-Entry "Grid-Tree-Editor" class () ((extends . "Grid-Tree-Widget")) #f #f 506 7 506 23 ("Grid-Tree-Widget")
        {Lisp-Entry "generate-columns?" property () ((initialize . "#t")) #f #f 509 12 509 29 ()}
        {Lisp-Entry "editor" slot () ((initialize . "#f")) #f #f 512 8 512 14 ()}
        {Lisp-Entry "designer" slot () ((initialize . "#f")) #f #f 513 8 513 16 ()}
        {Lisp-Entry "client" slot () ((initialize . "#f")) #f #f 514 8 514 14 ()}
        {Lisp-Entry "form" form () () #f #f 517 3 517 7 ("controller" "Component-Controller" "<Component-Controller>" "provider" "name:" "Component-Provider" "<Component-Provider>" ">" "<grid" "<grid~>" "install" "<install>")}
        {Lisp-Entry "Default-Class-Width" definition () () #f #f 524 14 524 33 ("150")}
        {Lisp-Entry "Default-Property-Width" definition () () #f #f 525 14 525 36 ("100")}
        {Lisp-Entry "Default-Selection-Width" definition () () #f #f 526 14 526 37 ("20")}
        {Lisp-Entry "destroy" method (override) () #f #f 529 20 529 27 ("nextmethod" "set-editor" "set-designer")}
        {Lisp-Entry "get-grid" method () () #f #f 540 11 540 19 ("grid" "locate")}
        {Lisp-Entry "get-provider" method () () #f #f 544 11 544 23 ("provider" "locate")}
        {Lisp-Entry "get-controller" method () () #f #f 548 11 548 25 ("controller" "locate")}
        {Lisp-Entry "get-client" method (public) () #f #f 564 18 564 28 ("client")}
        {Lisp-Entry "set-client" method (public) ("clt") #f #f 568 18 568 28 ("client-update" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update-provider" method () () #f #f 579 11 579 26 ("designer" "set-designer" "set-designer~" "client" "get-provider" "set-client" "set-client~")}
        {Lisp-Entry "update-controller" method () () #f #f 584 11 584 28 ("self" "set-editor" "set-editor~" "designer" "set-designer" "set-designer~" "client" "get-controller" "set-client" "set-client~")}
        {Lisp-Entry "client-update" method () () #f #f 590 11 590 24 ("update" "update-provider" "update-controller" "get-grid" "end-edition" "end-edition~")}
        {Lisp-Entry "update" method () () #f #f 597 11 597 17 ("populate" "populate~" "setup-columns" "generate-columns?" "when" "lambda" "get-grid" "with-update-locked" "with-update-locked~")}
        {Lisp-Entry "add-selection-column" method () ("identifier" "component-offset" "parent-offset" "class-references") #f #f 605 11 605 31 ("class-references:" "parent-offset:" "component-offset:" "identifier:" "provider-data" "name:" "Component-Provider-Selection-Data" "new" "add-child" "add-child~" "Default-Selection-Width" "width:" "Grid-Tree-Column" "class:" "get-grid" "add-column" "add-column~" "column" "let" "class-references" "parent-offset" "component-offset" "identifier")}
        {Lisp-Entry "add-class-column" method () ("parent-offset") #f #f 610 11 610 27 ("parent-offset:" "class-info" "identifier:" "provider-data" "name:" "Component-Provider-Data" "new" "add-child" "add-child~" "Default-Class-Width" "width:" "title:" "Grid-Tree-Column" "class:" "get-grid" "add-column" "add-column~" "column" "let" "parent-offset")}
        {Lisp-Entry "add-property-column" method () ("parent-offset" "identifier" "title" "(read-only? #f)") #f #f 615 11 615 30 ("read-only?:" "parent-offset:" "identifier:" "provider-data" "name:" "Component-Provider-Data" "new" "add-child" "add-child~" "Default-Property-Width" "width:" "title:" "Grid-Tree-Column" "class:" "get-grid" "add-column" "add-column~" "column" "let" "read-only?" "title" "identifier" "parent-offset")}
        {Lisp-Entry "setup-client-columns" method () () #f #f 620 11 620 31 ("0" "client" "component-addable-classes" "not-null?" "component-get-addable-classes" "component-get-addable-classes~" "ancestor-addable-classes" "get-addable?" "get-addable?~" "+" "iota" "get-target" "get-target~" "get-classes" "get-classes~" "child-component-offset" "descriptor" "get-children" "get-children~" "child-descriptors" "children" "find-child" "find-child~" "children-descriptor" "get-descriptor" "ancestor-descriptor" "resolve-runtime-reference" "classes-common-ancestor" "apply" "addable-ancestor" "name-info" "add-selection-column" "key:" "remove-duplicates" "let" "add-to" "addable-references" "setup-selection-columns" "sym" "Environment" "setup-context" "setup-context~" "Reference" "new" "ref" "let*" "runtime-reference" "runtime-reference->reference" "resolve-reference" "resolve-reference~" "map" "classes-properties/presentations" "add-property-column" "presentation" "name" "bind" "x" "lambda" "for-each" "setup-property-columns" "add-class-column" "1" "length" ">" "when" "component-offset" "class-references" "setup-class-column" "define")}
        {Lisp-Entry "setup-columns" method () () #f #f 661 11 661 24 ("setup-client-columns" "component-addable-classes" "not-null?" "client" "and" "when" "get-grid" "remove-columns" "remove-columns~")}
        {Lisp-Entry "set-designer" method () ("dsg") #f #f 672 11 672 23 ("update-provider" "update-controller" "add-designer-listener" "add-designer-listener~" "on-designer" "method-name:" "target:" "Event-Handler" "new" "listener" "let" "set!" "self" "remove-designer-listener" "remove-designer-listener~" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "on-designer" method () ("evt") #f #f 684 11 684 22 ("property:" "property-change" "property-change~" ":property-change" "child-remove" "child-remove~" ":child-remove" "parent:" "child:" "child-add" "child-add~" ":child-add" "old-name:" "name:" "component:" "get-property" "get-property~" "get-controller" "name-change" "name-change~" ":name-change" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "get-editor" method (public) () #f #f 697 18 697 28 ("editor")}
        {Lisp-Entry "set-editor" method (public) ("edt") #f #f 701 18 701 28 ("on-editor" "method-name:" "target:" "Event-Handler" "new" "add-editor-listener" "add-editor-listener~" "set!" "self" "remove-editor-listener" "remove-editor-listener~" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "on-editor" method () ("evt") #f #f 710 11 710 20 ("get-grid" "end-edition" "end-edition~" ":saving" "get-user-origin" "get-user-origin~" "get-force-parent?" "get-force-parent?~" "get-origin" "get-origin~" "get-old" "get-old~" "get-selection" "get-selection~" "selection-changed" ":selection-changed" "designer:" "set-designer" ":designer-change" "client:" "get-property" "get-property~" "set-client" ":client-change" "get-kind" "get-kind~" "case" "evt")}
        {Lisp-Entry "determine-client" method () ("component") #f #f 718 11 718 27 ("determine-client" "else" "editor" "get-client" "get-client~" "eq?" "values" "component-addable-classes" "not-null?" "not" "or" "cond" "get-parent" "get-parent~" "parent" "let" "component")}
        {Lisp-Entry "set-selection" method () ("components") #f #f 730 11 730 24 ("focus?:" "force?:" "self" "origin:" "remove" "editor" "set-selection" "set-selection~" "components")}
        {Lisp-Entry "selection-changed" method () ("selection" "old" "origin" "force-parent?" "focus?") #f #f 734 11 734 28 ("0" "row->line" "row->line~" "Cell" "new" "list" "when" "get-hierarchy" "get-hierarchy~" "val" "target" "lambda" "test:" "user-data-row" "user-data-row~" "row" "determine-client" "selected" "client" "receive" "car" "component" "let" "generate-event?:" "get-grid" "set-selection" "set-selection~" "editor" "get-client" "get-client~" "set-client" "begin" "null?" "if" "self" "eq?" "not" "or" "unless" "focus?" "force-parent?" "origin" "old" "selection")}}
      {Lisp-Entry "Grid-Component-Editor" class () ((extends . "Component-Editor")) #f #f 750 7 750 28 ("Component-Editor")
        {Lisp-Entry "form" form () () #f #f 753 3 753 7 ("grid" "name:" "Grid-Tree-Editor" "<Grid-Tree-Editor>" "fill" "layout-type:" "install" "<install>")}
        {Lisp-Entry "host-icon" method (meta override) () #f #f 763 25 763 34 ("Image-Resource")}
        {Lisp-Entry "host-size" method (meta override) () #f #f 767 25 767 34 ("600" "800" "Dimension")}
        {Lisp-Entry "host-workspaces" method (override) () #f #f 771 20 771 35 ("designer")}
        {Lisp-Entry "install" method (override) ("rest") #f #f 780 20 780 27 ("designer" "set-designer" "set-designer~" "self" "grid" "locate" "set-editor" "set-editor~" "nextmethod" "rest")}}}})
"install"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "install.scm"} 231466230. scheme
    {Lisp-Entry "jazz.designer.install" unit () () #f #f 37 6 37 27 ()
      {Lisp-Entry "Component-Parcel" define () () ("literal") #f 40 21 40 37 ("construct-component-parcel" "jazz.designer.literals" "jazz.designer.literals:construct-component-parcel")}}})
"literals"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "literals.jazz"} 222341473. jazz
    {Lisp-Entry "jazz.designer.literals" module () () #f #f 37 8 37 30 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.jml" "jazz.designer")}
      {Lisp-Entry "construct-component-parcel" definition (package) ("process-id" "object-id" "imports" "content") #f #f 49 21 49 47 ("Component-Parcel" "new" "jml->form" "map" "nodes" "let" "content" "imports" "object-id" "process-id")}}})
"view"
 ({Lisp-File-Entry {File :context "src" "jazz" "designer" "view.jazz"} 247218392. jazz
    {Lisp-Entry "jazz.designer.view" module () () #f #f 37 8 37 26 ("jazz")
      {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui" "jazz.ui.picker" "jazz.system.access" "jazz.locale" "jazz.library.component" "jazz.library" "jazz.io" "jazz.designer")}
      {Lisp-Entry "request-component-presentation" definition (package) ("class" "brothers" "(initial-value: initial-value #f)" "(validator: validator #f)") #f #f 56 21 56 51 ("unicity-domain:" "not" "accepts-empty?:" "prefix:" "french:" "format" "english:" "Locales" "new" "title:" "request-string" "presentation" "get-class-presentation" "get-class-presentation~" "localize" "pres" "equal?" "test:" "get-presentation-property" "get-presentation-property~" "map" "remove" "and" "unicity-domain" "get-name-unicity?" "get-name-unicity?~" "name-unicity?" "get-name-mandatory?" "get-name-mandatory?~" "name-mandatory?" "let*" "get-name-prohibited?" "get-name-prohibited?~" "if" "validator" "validator:" "initial-value" "initial-value:" "brothers" "class")}
      {Lisp-Entry "component-addable-classes" definition (package) ("component") #f #f 67 21 67 46 ("equal?" "test:" "key:" "component-categorized-toolbox-addable-classes" "or" "flatten" "map" "remove-duplicates" "reference-name" "reference-unit" "module-public" "deserialize-runtime-reference" "second" "sym" "module-private" "first" "eq?" "if" "serialize-runtime-reference" "serialized" "let" "reference" "private->public" "define" "component")}
      {Lisp-Entry "component-categorized-toolbox-addable-classes" definition (package) ("component") #f #f 83 21 83 66 ("get-addable-models-refs" "get-addable-models-refs~" "manager" "lambda" "map" "union" "apply" "list" "append" "get-categorized-addable-classes" "get-categorized-addable-classes~" "Component" "is?" "not-null?" "and" "get-toolbox-managers" "toolbox-managers" "let" "component")}
      {Lisp-Entry "component-categorized-addable-classes" definition (package) ("component" "parent") #f #f 95 21 95 58 ("list" "cons" "if" "item" "return:" "resolve-runtime-reference" "key:" "eq?" "test:" "find" "not" "model-ref" "class-of" "model" "get-categorized-addable-classes" "get-categorized-addable-classes~" "categorized" "classes" "get-addable-classes" "get-addable-classes~" "and" "parent-classes" "let" "parent" "component")}
      {Lisp-Entry "redundant-descendant?" definition (public) ("component" "components") #f #f 108 20 108 41 ("has-parent?" "has-parent?~" "neq?" "and" "target" "lambda" "some?" "components" "component")}
      {Lisp-Entry "can-modify-components?" definition (public) ("components" "pred") #f #f 115 20 115 42 ("redundant-descendant?" "not" "Component" "is?" "component" "lambda" "every?" "not-null?" "and" "pred" "components")}
      {Lisp-Entry "can-copy-components?" definition (public) ("components") #f #f 124 20 124 40 ("can-copy-component?" "can-copy-component?~" "can-modify-components?" "components")}
      {Lisp-Entry "can-cut-components?" definition (public) ("components") #f #f 128 20 128 39 ("can-cut-component?" "can-cut-component?~" "can-modify-components?" "components")}
      {Lisp-Entry "can-delete-components?" definition (public) ("components") #f #f 132 20 132 42 ("can-delete-component?" "can-delete-component?~" "can-modify-components?" "components")}
      {Lisp-Entry "can-paste-components?" definition (public) ("components") #f #f 136 20 136 41 ("determine-unique-paster" "Component" "is?" "component" "lambda" "every?" "and" "components")}
      {Lisp-Entry "open-class" definition (public) ("class") #f #f 148 20 148 30 ("error" "editor-class:" "open-component" "component-editor-class" "component-editor-class~" "Component" "get-application" "view-editor-class" "view-editor-class~" "View" "typecase" "editor-class" "new" "component" "let*" "focus-host" "focus-host~" "frame" "class?" "if" "class-of" "eq?" "get-designer" "get-designer~" "get-form" "get-form~" "get-origin" "get-origin~" "origin" "get-client" "get-client~" "client" "let" "Component-Editor" "is?" "and" "guest" "lambda" "find-frame-if-guest" "find-editor" "define" "class")}
      {Lisp-Entry "open-component" definition (public) ("target" "(editor-class: editor-class #f)") #f #f 170 20 170 34 ("origin:" "list" "set-selection" "set-selection~" "get-guest" "get-guest~" "editor" "client:" "new-frame" "frame" "component-editor-class" "component-editor-class~" "get-application" "view-editor-class" "view-editor-class~" "View" "typecase" "or" "error" "else" "read-form" "File" "Component" "instantiate" "instantiate~" "Form" "is?" "new" "class?" "cond" "designing?" "parameterize" "component" "let" "editor-class" "editor-class:" "target")}
      {Lisp-Entry "*view-editors*" definition () () #f #f 192 12 192 26 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-view-editor" definition (package) ("view") #f #f 195 21 195 36 ("*view-editors*" "table-ref" "view")}
      {Lisp-Entry "set-view-editor" definition (package) ("view" "editor") #f #f 198 21 198 36 ("*view-editors*" "table-set!" "editor" "view")}
      {Lisp-Entry "view-editor-client" definition () ("view") #f #f 202 13 202 31 ("get-guest" "get-guest~" "else" "typecase" "guest" "determine-client" "define" "view")}
      {Lisp-Entry "design-client" definition (public) () #f #f 211 20 211 33 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "highlight-root-only?:" "highlight:" "design-view" "pos" "view" "lambda" "click:" "pick-figure")}
      {Lisp-Entry "design-mouse-client" definition (public) () #f #f 221 20 221 39 ("mouse-view" "design-view")}
      {Lisp-Entry "design-view" definition () ("view") #f #f 225 13 225 24 ("client:" "View-Editor" "new-frame" "class-of" "new" "designing?" "parameterize" "bell" "not" "if" "view-editor-client" "client" "let" "view")}
      {Lisp-Entry "design-view" definition () ("view") #f #f 234 13 234 24 ("close" "close~" "client:" "host-visible?:" "View-Editor" "new-frame" "get-guest" "get-guest~" "set-view-editor" "get-view-editor" "editor" "bell" "not" "if" "view-editor-client" "client" "let" "view")}
      {Lisp-Entry "save-mouse-client" definition (public) () #f #f 245 20 245 37 ("save" "save~" "lambda" ":wait" "with-cursor" "get-view-editor" "editor" "bell" "not" "if" "mouse-view" "view-editor-client" "client" "let")}
      {Lisp-Entry "designer-error" definition (public) ("." "rest") #f #f 262 20 262 34 ("throw-cancel" "title:" "message-box" "format" "apply" "message:" "Designer-Error" "new" "signal" "rest")}
      {Lisp-Entry "with-safe-design" definition (public) ("thunk") #f #f 269 20 269 36 ("Designer-Error" "is?" "object?" "and" "obj" "lambda" "with-catched-exception" "thunk")}
      {Lisp-Entry "get-toolbox-managers" definition (public) () #f #f 282 20 282 40 ("docked-views" "Toolbox-Manager" "collect-type")}}})
